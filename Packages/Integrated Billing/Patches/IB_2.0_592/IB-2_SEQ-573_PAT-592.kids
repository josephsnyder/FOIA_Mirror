Released IB*2*592 SEQ #573
Extracted from mail message
**KIDS**:IB*2.0*592^

**INSTALL NAME**
IB*2.0*592
"BLD",10678,0)
IB*2.0*592^INTEGRATED BILLING^0^3180829^y
"BLD",10678,1,0)
^^2^2^3170919^
"BLD",10678,1,1,0)
 
"BLD",10678,1,2,0)
MCCF EDI TAS EBILLING BUILD 3 DENTAL
"BLD",10678,4,0)
^9.64PA^36^9
"BLD",10678,4,36,0)
36
"BLD",10678,4,36,2,0)
^9.641^36.017^2
"BLD",10678,4,36,2,36,0)
INSURANCE COMPANY  (File-top level)
"BLD",10678,4,36,2,36,1,0)
^9.6411^3.15^11
"BLD",10678,4,36,2,36,1,.191,0)
CLAIMS (DENTAL) STREET ADDR 1
"BLD",10678,4,36,2,36,1,.1911,0)
CLAIMS (DENTAL) PHONE NUMBER
"BLD",10678,4,36,2,36,1,.192,0)
CLAIMS (DENTAL) STREET ADDR 2
"BLD",10678,4,36,2,36,1,.193,0)
BLANK
"BLD",10678,4,36,2,36,1,.194,0)
CLAIMS (DENTAL) PROCESS CITY
"BLD",10678,4,36,2,36,1,.195,0)
CLAIMS (DENTAL) PROCESS STATE
"BLD",10678,4,36,2,36,1,.196,0)
CLAIMS (DENTAL) PROCESS ZIP
"BLD",10678,4,36,2,36,1,.197,0)
CLAIMS (DENTAL) COMPANY NAME
"BLD",10678,4,36,2,36,1,.198,0)
ANOTHER CO. PROC DENT CLAIMS?
"BLD",10678,4,36,2,36,1,.199,0)
CLAIMS (DENTAL) FAX
"BLD",10678,4,36,2,36,1,3.15,0)
EDI ID NUMBER - DENTAL
"BLD",10678,4,36,2,36.017,0)
277EDI ID NUMBER  (sub-file)
"BLD",10678,4,36,2,36.017,1,0)
^9.6411^.03^1
"BLD",10678,4,36,2,36.017,1,.03,0)
277EDI TYPE
"BLD",10678,4,36,222)
y^n^p^^^^n^^n
"BLD",10678,4,36,224)

"BLD",10678,4,350.9,0)
350.9
"BLD",10678,4,350.9,2,0)
^9.641^350.9^1
"BLD",10678,4,350.9,2,350.9,0)
IB SITE PARAMETERS  (File-top level)
"BLD",10678,4,350.9,2,350.9,1,0)
^9.6411^8.2^2
"BLD",10678,4,350.9,2,350.9,1,1.22,0)
MULTIPLE FORM TYPES
"BLD",10678,4,350.9,2,350.9,1,8.2,0)
DENTAL ENABLED?
"BLD",10678,4,350.9,222)
y^n^p^^^^n^^n
"BLD",10678,4,350.9,224)

"BLD",10678,4,353,0)
353
"BLD",10678,4,353,222)
n^n^f^^n^^y^r^n
"BLD",10678,4,353,223)

"BLD",10678,4,353,224)
I Y=7
"BLD",10678,4,364.1,0)
364.1
"BLD",10678,4,364.1,2,0)
^9.641^364.1^1
"BLD",10678,4,364.1,2,364.1,0)
EDI TRANSMISSION BATCH  (File-top level)
"BLD",10678,4,364.1,2,364.1,1,0)
^9.6411^.06^1
"BLD",10678,4,364.1,2,364.1,1,.06,0)
BILL TYPE
"BLD",10678,4,364.1,222)
y^n^p^^^^n^^n
"BLD",10678,4,364.1,224)

"BLD",10678,4,364.4,0)
364.4
"BLD",10678,4,364.4,2,0)
^9.641^364.4^1
"BLD",10678,4,364.4,2,364.4,0)
IB EDI TRANSMISSION RULE  (File-top level)
"BLD",10678,4,364.4,2,364.4,1,0)
^9.6411^.05^1
"BLD",10678,4,364.4,2,364.4,1,.05,0)
FORM TYPE
"BLD",10678,4,364.4,222)
y^n^p^^^^n^^n
"BLD",10678,4,364.4,224)

"BLD",10678,4,364.5,0)
364.5
"BLD",10678,4,364.5,222)
n^n^f^^y^^y^o^n
"BLD",10678,4,364.5,224)
I $$INCLUDE^IBY592PR(5,Y)
"BLD",10678,4,364.6,0)
364.6
"BLD",10678,4,364.6,222)
n^n^f^^y^^y^o^n
"BLD",10678,4,364.6,224)
I $$INCLUDE^IBY592PR(6,Y)
"BLD",10678,4,364.7,0)
364.7
"BLD",10678,4,364.7,222)
n^n^f^^y^^y^o^n
"BLD",10678,4,364.7,224)
I $$INCLUDE^IBY592PR(7,Y)
"BLD",10678,4,399,0)
399
"BLD",10678,4,399,2,0)
^9.641^399.041^7
"BLD",10678,4,399,2,399,0)
BILL/CLAIMS  (File-top level)
"BLD",10678,4,399,2,399,1,0)
^9.6411^.19^7
"BLD",10678,4,399,2,399,1,.19,0)
FORM TYPE
"BLD",10678,4,399,2,399,1,92,0)
BANDING DATE
"BLD",10678,4,399,2,399,1,93,0)
TREATMENT MONTHS COUNT
"BLD",10678,4,399,2,399,1,94,0)
TREATMENT MONTHS REMAINING
"BLD",10678,4,399,2,399,1,95,0)
TREATMENT INDICATOR
"BLD",10678,4,399,2,399,1,97,0)
DENTAL CLAIM NOTE
"BLD",10678,4,399,2,399,1,285,0)
ATTACHMENT REPORT TYPE
"BLD",10678,4,399,2,399.0222,0)
PROVIDER  (sub-file)
"BLD",10678,4,399,2,399.0222,1,0)
^9.6411^.01^1
"BLD",10678,4,399,2,399.0222,1,.01,0)
FUNCTION
"BLD",10678,4,399,2,399.0304,0)
PROCEDURES  (sub-file)
"BLD",10678,4,399,2,399.0304,1,0)
^9.6411^90.08^12
"BLD",10678,4,399,2,399.0304,1,90.01,0)
ORAL CAVITY DESIGNATION (1)
"BLD",10678,4,399,2,399.0304,1,90.02,0)
ORAL CAVITY DESIGNATION (2)
"BLD",10678,4,399,2,399.0304,1,90.03,0)
ORAL CAVITY DESIGNATION (3)
"BLD",10678,4,399,2,399.0304,1,90.04,0)
ORAL CAVITY DESIGNATION (4)
"BLD",10678,4,399,2,399.0304,1,90.05,0)
ORAL CAVITY DESIGNATION (5)
"BLD",10678,4,399,2,399.0304,1,90.06,0)
PROSTHESIS/CROWN/INLAY CODE
"BLD",10678,4,399,2,399.0304,1,90.07,0)
PRIOR PLACEMENT DATE QUALIFIER
"BLD",10678,4,399,2,399.0304,1,90.08,0)
PRIOR PLACEMENT DATE
"BLD",10678,4,399,2,399.0304,1,90.09,0)
ORTHODONTIC BANDING DATE
"BLD",10678,4,399,2,399.0304,1,90.1,0)
ORTHO BANDING REPLACEMENT DATE
"BLD",10678,4,399,2,399.0304,1,90.11,0)
TREATMENT START DATE
"BLD",10678,4,399,2,399.0304,1,90.12,0)
TREATMENT COMPLETION DATE
"BLD",10678,4,399,2,399.0404,0)
LINE PROVIDER  (sub-file)
"BLD",10678,4,399,2,399.0404,1,0)
^9.6411^.01^1
"BLD",10678,4,399,2,399.0404,1,.01,0)
LINE FUNCTION
"BLD",10678,4,399,2,399.041,0)
OCCURRENCE CODE  (sub-file)
"BLD",10678,4,399,2,399.041,1,0)
^9.6411^.01^1
"BLD",10678,4,399,2,399.041,1,.01,0)
OCCURRENCE CODE
"BLD",10678,4,399,2,399.096,0)
TOOTH NUMBER  (sub-file)
"BLD",10678,4,399,2,399.096,1,0)
^9.6411^^
"BLD",10678,4,399,2,399.30491,0)
TOOTH INFORMATION  (sub-file)
"BLD",10678,4,399,2,399.30491,1,0)
^9.6411^.07^7
"BLD",10678,4,399,2,399.30491,1,.01,0)
TOOTH CODE
"BLD",10678,4,399,2,399.30491,1,.02,0)
TOOTH SURFACE (1)
"BLD",10678,4,399,2,399.30491,1,.03,0)
TOOTH SURFACE (2)
"BLD",10678,4,399,2,399.30491,1,.04,0)
TOOTH SURFACE (3)
"BLD",10678,4,399,2,399.30491,1,.05,0)
TOOTH SURFACE (4)
"BLD",10678,4,399,2,399.30491,1,.06,0)
TOOTH SURFACE (5)
"BLD",10678,4,399,2,399.30491,1,.07,0)
DENTAL TREATMENT PLAN ENTRY
"BLD",10678,4,399,222)
y^n^p^^^^n^^n
"BLD",10678,4,399,224)

"BLD",10678,4,"APDD",36,36)

"BLD",10678,4,"APDD",36,36,.191)

"BLD",10678,4,"APDD",36,36,.1911)

"BLD",10678,4,"APDD",36,36,.192)

"BLD",10678,4,"APDD",36,36,.193)

"BLD",10678,4,"APDD",36,36,.194)

"BLD",10678,4,"APDD",36,36,.195)

"BLD",10678,4,"APDD",36,36,.196)

"BLD",10678,4,"APDD",36,36,.197)

"BLD",10678,4,"APDD",36,36,.198)

"BLD",10678,4,"APDD",36,36,.199)

"BLD",10678,4,"APDD",36,36,3.15)

"BLD",10678,4,"APDD",36,36.017)

"BLD",10678,4,"APDD",36,36.017,.03)

"BLD",10678,4,"APDD",350.9,350.9)

"BLD",10678,4,"APDD",350.9,350.9,1.22)

"BLD",10678,4,"APDD",350.9,350.9,8.2)

"BLD",10678,4,"APDD",364.1,364.1)

"BLD",10678,4,"APDD",364.1,364.1,.06)

"BLD",10678,4,"APDD",364.4,364.4)

"BLD",10678,4,"APDD",364.4,364.4,.05)

"BLD",10678,4,"APDD",399,399)

"BLD",10678,4,"APDD",399,399,.19)

"BLD",10678,4,"APDD",399,399,92)

"BLD",10678,4,"APDD",399,399,93)

"BLD",10678,4,"APDD",399,399,94)

"BLD",10678,4,"APDD",399,399,95)

"BLD",10678,4,"APDD",399,399,97)

"BLD",10678,4,"APDD",399,399,285)

"BLD",10678,4,"APDD",399,399.0222)

"BLD",10678,4,"APDD",399,399.0222,.01)

"BLD",10678,4,"APDD",399,399.0304)

"BLD",10678,4,"APDD",399,399.0304,90.01)

"BLD",10678,4,"APDD",399,399.0304,90.02)

"BLD",10678,4,"APDD",399,399.0304,90.03)

"BLD",10678,4,"APDD",399,399.0304,90.04)

"BLD",10678,4,"APDD",399,399.0304,90.05)

"BLD",10678,4,"APDD",399,399.0304,90.06)

"BLD",10678,4,"APDD",399,399.0304,90.07)

"BLD",10678,4,"APDD",399,399.0304,90.08)

"BLD",10678,4,"APDD",399,399.0304,90.09)

"BLD",10678,4,"APDD",399,399.0304,90.1)

"BLD",10678,4,"APDD",399,399.0304,90.11)

"BLD",10678,4,"APDD",399,399.0304,90.12)

"BLD",10678,4,"APDD",399,399.0404)

"BLD",10678,4,"APDD",399,399.0404,.01)

"BLD",10678,4,"APDD",399,399.041)

"BLD",10678,4,"APDD",399,399.041,.01)

"BLD",10678,4,"APDD",399,399.096)

"BLD",10678,4,"APDD",399,399.30491)

"BLD",10678,4,"APDD",399,399.30491,.01)

"BLD",10678,4,"APDD",399,399.30491,.02)

"BLD",10678,4,"APDD",399,399.30491,.03)

"BLD",10678,4,"APDD",399,399.30491,.04)

"BLD",10678,4,"APDD",399,399.30491,.05)

"BLD",10678,4,"APDD",399,399.30491,.06)

"BLD",10678,4,"APDD",399,399.30491,.07)

"BLD",10678,4,"B",36,36)

"BLD",10678,4,"B",350.9,350.9)

"BLD",10678,4,"B",353,353)

"BLD",10678,4,"B",364.1,364.1)

"BLD",10678,4,"B",364.4,364.4)

"BLD",10678,4,"B",364.5,364.5)

"BLD",10678,4,"B",364.6,364.6)

"BLD",10678,4,"B",364.7,364.7)

"BLD",10678,4,"B",399,399)

"BLD",10678,6)
15^
"BLD",10678,6.3)
58
"BLD",10678,"ABPKG")
n
"BLD",10678,"INI")
IBY592PR
"BLD",10678,"INID")
n^n^n
"BLD",10678,"INIT")
IBY592PO
"BLD",10678,"KRN",0)
^9.67PA^779.2^20
"BLD",10678,"KRN",.4,0)
.4
"BLD",10678,"KRN",.4,"NM",0)
^9.68A^^
"BLD",10678,"KRN",.401,0)
.401
"BLD",10678,"KRN",.402,0)
.402
"BLD",10678,"KRN",.402,"NM",0)
^9.68A^4^4
"BLD",10678,"KRN",.402,"NM",1,0)
IB SCREEN8    FILE #399^399^0
"BLD",10678,"KRN",.402,"NM",2,0)
IB SCREEN10H    FILE #399^399^0
"BLD",10678,"KRN",.402,"NM",3,0)
IBEDIT INS CO1    FILE #36^36^0
"BLD",10678,"KRN",.402,"NM",4,0)
IB SCREEN5    FILE #399^399^0
"BLD",10678,"KRN",.402,"NM","B","IB SCREEN10H    FILE #399",2)

"BLD",10678,"KRN",.402,"NM","B","IB SCREEN5    FILE #399",4)

"BLD",10678,"KRN",.402,"NM","B","IB SCREEN8    FILE #399",1)

"BLD",10678,"KRN",.402,"NM","B","IBEDIT INS CO1    FILE #36",3)

"BLD",10678,"KRN",.403,0)
.403
"BLD",10678,"KRN",.5,0)
.5
"BLD",10678,"KRN",.84,0)
.84
"BLD",10678,"KRN",3.6,0)
3.6
"BLD",10678,"KRN",3.8,0)
3.8
"BLD",10678,"KRN",9.2,0)
9.2
"BLD",10678,"KRN",9.8,0)
9.8
"BLD",10678,"KRN",9.8,"NM",0)
^9.68A^138^125
"BLD",10678,"KRN",9.8,"NM",1,0)
IBCB^^0^B33194754
"BLD",10678,"KRN",9.8,"NM",4,0)
IBCEU^^0^B116893464
"BLD",10678,"KRN",9.8,"NM",5,0)
IBCEU5^^0^B88027546
"BLD",10678,"KRN",9.8,"NM",6,0)
IBCEU7^^0^B36671868
"BLD",10678,"KRN",9.8,"NM",7,0)
IBCSC5^^0^B18258381
"BLD",10678,"KRN",9.8,"NM",8,0)
IBCSC8^^0^B19683123
"BLD",10678,"KRN",9.8,"NM",9,0)
IBCSC10^^0^B9372507
"BLD",10678,"KRN",9.8,"NM",10,0)
IBCSC10H^^0^B81208803
"BLD",10678,"KRN",9.8,"NM",11,0)
IBCSCE^^0^B10759138
"BLD",10678,"KRN",9.8,"NM",12,0)
IBCSCU^^0^B13707120
"BLD",10678,"KRN",9.8,"NM",16,0)
IBY592PR^^0^B28375720
"BLD",10678,"KRN",9.8,"NM",18,0)
IBCE837^^0^B88399984
"BLD",10678,"KRN",9.8,"NM",19,0)
IBJTCA1^^0^B59576910
"BLD",10678,"KRN",9.8,"NM",20,0)
IBJTBA^^0^B48389445
"BLD",10678,"KRN",9.8,"NM",21,0)
IBCU^^0^B88829862
"BLD",10678,"KRN",9.8,"NM",22,0)
IBCU1^^0^B44335256
"BLD",10678,"KRN",9.8,"NM",23,0)
IBCU3^^0^B25113228
"BLD",10678,"KRN",9.8,"NM",24,0)
IBCU7^^0^B175831153
"BLD",10678,"KRN",9.8,"NM",25,0)
IBCU72^^0^B93126486
"BLD",10678,"KRN",9.8,"NM",26,0)
IBCU7B^^0^B63616995
"BLD",10678,"KRN",9.8,"NM",27,0)
IBCSC3^^0^B37966434
"BLD",10678,"KRN",9.8,"NM",29,0)
IBCEXTRP^^0^B50603879
"BLD",10678,"KRN",9.8,"NM",30,0)
IBCEU3^^0^B109051815
"BLD",10678,"KRN",9.8,"NM",31,0)
IBCEU0^^0^B65875892
"BLD",10678,"KRN",9.8,"NM",32,0)
IBCEST^^0^B99553380
"BLD",10678,"KRN",9.8,"NM",33,0)
IBCERP6^^0^B24712755
"BLD",10678,"KRN",9.8,"NM",34,0)
IBCEQ1^^0^B30436450
"BLD",10678,"KRN",9.8,"NM",35,0)
IBCEQ1A^^0^B67393403
"BLD",10678,"KRN",9.8,"NM",36,0)
IBCEPTR^^0^B103893317
"BLD",10678,"KRN",9.8,"NM",37,0)
IBCEDP^^0^B34247980
"BLD",10678,"KRN",9.8,"NM",38,0)
IBCB2^^0^B53477183
"BLD",10678,"KRN",9.8,"NM",39,0)
IBCECOB4^^0^B34522884
"BLD",10678,"KRN",9.8,"NM",40,0)
IBCECSA5^^0^B95064070
"BLD",10678,"KRN",9.8,"NM",41,0)
IBCEF1^^0^B72471671
"BLD",10678,"KRN",9.8,"NM",42,0)
IBCEF11^^0^B92999922
"BLD",10678,"KRN",9.8,"NM",43,0)
IBCEF2^^0^B81532163
"BLD",10678,"KRN",9.8,"NM",44,0)
IBCEPTC^^0^B93542817
"BLD",10678,"KRN",9.8,"NM",45,0)
IBCEPTC0^^0^B41663325
"BLD",10678,"KRN",9.8,"NM",46,0)
IBCEPTC2^^0^B53543437
"BLD",10678,"KRN",9.8,"NM",47,0)
IBCEP9^^0^B73643393
"BLD",10678,"KRN",9.8,"NM",48,0)
IBCEP8A^^0^B27427687
"BLD",10678,"KRN",9.8,"NM",49,0)
IBCEP7^^0^B48990711
"BLD",10678,"KRN",9.8,"NM",50,0)
IBCEP7B^^0^B7363951
"BLD",10678,"KRN",9.8,"NM",51,0)
IBCEP7C^^0^B59082632
"BLD",10678,"KRN",9.8,"NM",52,0)
IBCEF3^^0^B48678188
"BLD",10678,"KRN",9.8,"NM",53,0)
IBCEF31^^0^B15832177
"BLD",10678,"KRN",9.8,"NM",54,0)
IBCEF7^^0^B53413406
"BLD",10678,"KRN",9.8,"NM",55,0)
IBCEMU4^^0^B31295284
"BLD",10678,"KRN",9.8,"NM",56,0)
IBCEP0^^0^B73482476
"BLD",10678,"KRN",9.8,"NM",57,0)
IBCEP2^^0^B56529632
"BLD",10678,"KRN",9.8,"NM",58,0)
IBCEP2A^^0^B51873578
"BLD",10678,"KRN",9.8,"NM",59,0)
IBCEP2B^^0^B61892658
"BLD",10678,"KRN",9.8,"NM",60,0)
IBCEP4^^0^B23569043
"BLD",10678,"KRN",9.8,"NM",61,0)
IBCEP5^^0^B59355056
"BLD",10678,"KRN",9.8,"NM",62,0)
IBCEP5B^^0^B41537754
"BLD",10678,"KRN",9.8,"NM",63,0)
IBCEPB^^0^B7208459
"BLD",10678,"KRN",9.8,"NM",64,0)
IBCEF12^^0^B43571832
"BLD",10678,"KRN",9.8,"NM",65,0)
IBCEFP^^0^B118488673
"BLD",10678,"KRN",9.8,"NM",66,0)
IBCF23^^0^B55703345
"BLD",10678,"KRN",9.8,"NM",67,0)
IBCF23A^^0^B50374642
"BLD",10678,"KRN",9.8,"NM",68,0)
IBCE837A^^0^B52481474
"BLD",10678,"KRN",9.8,"NM",69,0)
IBCEF4^^0^B30113231
"BLD",10678,"KRN",9.8,"NM",70,0)
IBCEF71^^0^B69769908
"BLD",10678,"KRN",9.8,"NM",71,0)
IBCEF73^^0^B61881067
"BLD",10678,"KRN",9.8,"NM",72,0)
IBCEF74^^0^B50291931
"BLD",10678,"KRN",9.8,"NM",73,0)
IBCEF78^^0^B7178151
"BLD",10678,"KRN",9.8,"NM",74,0)
IBCEF76^^0^B51808638
"BLD",10678,"KRN",9.8,"NM",75,0)
IBCEF75^^0^B25634015
"BLD",10678,"KRN",9.8,"NM",76,0)
IBCEP3^^0^B37284126
"BLD",10678,"KRN",9.8,"NM",77,0)
IBCEP^^0^B21911838
"BLD",10678,"KRN",9.8,"NM",78,0)
IBCEM03^^0^B46770743
"BLD",10678,"KRN",9.8,"NM",79,0)
IBY592PO^^0^B30143818
"BLD",10678,"KRN",9.8,"NM",80,0)
IBTRH5D^^0^B177109854
"BLD",10678,"KRN",9.8,"NM",82,0)
IBCD^^0^B12137140
"BLD",10678,"KRN",9.8,"NM",83,0)
IBCD2^^0^B29470256
"BLD",10678,"KRN",9.8,"NM",84,0)
IBCU82^^0^B24704444
"BLD",10678,"KRN",9.8,"NM",85,0)
IBCEF77^^0^B29162956
"BLD",10678,"KRN",9.8,"NM",86,0)
IBCEP5C^^0^B44174252
"BLD",10678,"KRN",9.8,"NM",87,0)
IBJTLA1^^0^B14092022
"BLD",10678,"KRN",9.8,"NM",88,0)
IBJTLB1^^0^B14819711
"BLD",10678,"KRN",9.8,"NM",89,0)
IBCEF81^^0^B109761369
"BLD",10678,"KRN",9.8,"NM",90,0)
IBCEF74A^^0^B40140947
"BLD",10678,"KRN",9.8,"NM",91,0)
IBCEF72^^0^B59075267
"BLD",10678,"KRN",9.8,"NM",93,0)
IBCB1^^0^B70254714
"BLD",10678,"KRN",9.8,"NM",94,0)
IBCBB^^0^B85882091
"BLD",10678,"KRN",9.8,"NM",95,0)
IBCBB1^^0^B127796820
"BLD",10678,"KRN",9.8,"NM",96,0)
IBCBB11^^0^B117506484
"BLD",10678,"KRN",9.8,"NM",97,0)
IBCBB12^^0^B136258580
"BLD",10678,"KRN",9.8,"NM",98,0)
IBCBB3^^0^B41940639
"BLD",10678,"KRN",9.8,"NM",99,0)
IBCEF21^^0^B25961485
"BLD",10678,"KRN",9.8,"NM",100,0)
IBCNADD^^0^B7526956
"BLD",10678,"KRN",9.8,"NM",105,0)
IBCSC9^^0^B9422776
"BLD",10678,"KRN",9.8,"NM",106,0)
IBCU9^^0^B4936343
"BLD",10678,"KRN",9.8,"NM",107,0)
IBJPS^^0^B6552900
"BLD",10678,"KRN",9.8,"NM",108,0)
IBJPS2^^0^B56657157
"BLD",10678,"KRN",9.8,"NM",109,0)
IBJTU3^^0^B11140228
"BLD",10678,"KRN",9.8,"NM",110,0)
IBCC^^0^B76370923
"BLD",10678,"KRN",9.8,"NM",111,0)
IBCCC^^0^B24472869
"BLD",10678,"KRN",9.8,"NM",112,0)
IBCCC2^^0^B130398035
"BLD",10678,"KRN",9.8,"NM",113,0)
IBCCCB^^0^B69998432
"BLD",10678,"KRN",9.8,"NM",114,0)
IBCECOB2^^0^B186108392
"BLD",10678,"KRN",9.8,"NM",115,0)
IBCEF80^^0^B54228173
"BLD",10678,"KRN",9.8,"NM",116,0)
IBCNSC^^0^B48955392
"BLD",10678,"KRN",9.8,"NM",117,0)
IBCNSC0^^0^B14256193
"BLD",10678,"KRN",9.8,"NM",118,0)
IBCNSC01^^0^B75281286
"BLD",10678,"KRN",9.8,"NM",119,0)
IBCNSC02^^0^B57150486
"BLD",10678,"KRN",9.8,"NM",120,0)
IBCNSC1^^0^B84876312
"BLD",10678,"KRN",9.8,"NM",121,0)
IBCNSCD1^^0^B19855497
"BLD",10678,"KRN",9.8,"NM",122,0)
IBCNSCD2^^0^B20190292
"BLD",10678,"KRN",9.8,"NM",123,0)
IBCEPTC1^^0^B19946124
"BLD",10678,"KRN",9.8,"NM",124,0)
IBCU41^^0^B23281975
"BLD",10678,"KRN",9.8,"NM",125,0)
IBCD1^^0^B14329608
"BLD",10678,"KRN",9.8,"NM",126,0)
IBCNSI^^0^B8158592
"BLD",10678,"KRN",9.8,"NM",127,0)
IBCEMQA^^0^B15379680
"BLD",10678,"KRN",9.8,"NM",128,0)
IBCEF73A^^0^B44170679
"BLD",10678,"KRN",9.8,"NM",129,0)
IBCERP7^^0^B33534777
"BLD",10678,"KRN",9.8,"NM",130,0)
IBCECOB1^^0^B146167511
"BLD",10678,"KRN",9.8,"NM",131,0)
IBCEP5A^^0^B26669569
"BLD",10678,"KRN",9.8,"NM",132,0)
IBCEP5D^^0^B63033959
"BLD",10678,"KRN",9.8,"NM",133,0)
IBCD3^^0^B86658551
"BLD",10678,"KRN",9.8,"NM",134,0)
IBCSC4^^0^B25978379
"BLD",10678,"KRN",9.8,"NM",135,0)
IBCNSU3^^0^B5742335
"BLD",10678,"KRN",9.8,"NM",136,0)
IBCBB14^^0^B4923293
"BLD",10678,"KRN",9.8,"NM",137,0)
IBCCPT^^0^B156624726
"BLD",10678,"KRN",9.8,"NM",138,0)
IBCEOB1^^0^B108553745
"BLD",10678,"KRN",9.8,"NM","B","IBCB",1)

"BLD",10678,"KRN",9.8,"NM","B","IBCB1",93)

"BLD",10678,"KRN",9.8,"NM","B","IBCB2",38)

"BLD",10678,"KRN",9.8,"NM","B","IBCBB",94)

"BLD",10678,"KRN",9.8,"NM","B","IBCBB1",95)

"BLD",10678,"KRN",9.8,"NM","B","IBCBB11",96)

"BLD",10678,"KRN",9.8,"NM","B","IBCBB12",97)

"BLD",10678,"KRN",9.8,"NM","B","IBCBB14",136)

"BLD",10678,"KRN",9.8,"NM","B","IBCBB3",98)

"BLD",10678,"KRN",9.8,"NM","B","IBCC",110)

"BLD",10678,"KRN",9.8,"NM","B","IBCCC",111)

"BLD",10678,"KRN",9.8,"NM","B","IBCCC2",112)

"BLD",10678,"KRN",9.8,"NM","B","IBCCCB",113)

"BLD",10678,"KRN",9.8,"NM","B","IBCCPT",137)

"BLD",10678,"KRN",9.8,"NM","B","IBCD",82)

"BLD",10678,"KRN",9.8,"NM","B","IBCD1",125)

"BLD",10678,"KRN",9.8,"NM","B","IBCD2",83)

"BLD",10678,"KRN",9.8,"NM","B","IBCD3",133)

"BLD",10678,"KRN",9.8,"NM","B","IBCE837",18)

"BLD",10678,"KRN",9.8,"NM","B","IBCE837A",68)

"BLD",10678,"KRN",9.8,"NM","B","IBCECOB1",130)

"BLD",10678,"KRN",9.8,"NM","B","IBCECOB2",114)

"BLD",10678,"KRN",9.8,"NM","B","IBCECOB4",39)

"BLD",10678,"KRN",9.8,"NM","B","IBCECSA5",40)

"BLD",10678,"KRN",9.8,"NM","B","IBCEDP",37)

"BLD",10678,"KRN",9.8,"NM","B","IBCEF1",41)

"BLD",10678,"KRN",9.8,"NM","B","IBCEF11",42)

"BLD",10678,"KRN",9.8,"NM","B","IBCEF12",64)

"BLD",10678,"KRN",9.8,"NM","B","IBCEF2",43)

"BLD",10678,"KRN",9.8,"NM","B","IBCEF21",99)

"BLD",10678,"KRN",9.8,"NM","B","IBCEF3",52)

"BLD",10678,"KRN",9.8,"NM","B","IBCEF31",53)

"BLD",10678,"KRN",9.8,"NM","B","IBCEF4",69)

"BLD",10678,"KRN",9.8,"NM","B","IBCEF7",54)

"BLD",10678,"KRN",9.8,"NM","B","IBCEF71",70)

"BLD",10678,"KRN",9.8,"NM","B","IBCEF72",91)

"BLD",10678,"KRN",9.8,"NM","B","IBCEF73",71)

"BLD",10678,"KRN",9.8,"NM","B","IBCEF73A",128)

"BLD",10678,"KRN",9.8,"NM","B","IBCEF74",72)

"BLD",10678,"KRN",9.8,"NM","B","IBCEF74A",90)

"BLD",10678,"KRN",9.8,"NM","B","IBCEF75",75)

"BLD",10678,"KRN",9.8,"NM","B","IBCEF76",74)

"BLD",10678,"KRN",9.8,"NM","B","IBCEF77",85)

"BLD",10678,"KRN",9.8,"NM","B","IBCEF78",73)

"BLD",10678,"KRN",9.8,"NM","B","IBCEF80",115)

"BLD",10678,"KRN",9.8,"NM","B","IBCEF81",89)

"BLD",10678,"KRN",9.8,"NM","B","IBCEFP",65)

"BLD",10678,"KRN",9.8,"NM","B","IBCEM03",78)

"BLD",10678,"KRN",9.8,"NM","B","IBCEMQA",127)

"BLD",10678,"KRN",9.8,"NM","B","IBCEMU4",55)

"BLD",10678,"KRN",9.8,"NM","B","IBCEOB1",138)

"BLD",10678,"KRN",9.8,"NM","B","IBCEP",77)

"BLD",10678,"KRN",9.8,"NM","B","IBCEP0",56)

"BLD",10678,"KRN",9.8,"NM","B","IBCEP2",57)

"BLD",10678,"KRN",9.8,"NM","B","IBCEP2A",58)

"BLD",10678,"KRN",9.8,"NM","B","IBCEP2B",59)

"BLD",10678,"KRN",9.8,"NM","B","IBCEP3",76)

"BLD",10678,"KRN",9.8,"NM","B","IBCEP4",60)

"BLD",10678,"KRN",9.8,"NM","B","IBCEP5",61)

"BLD",10678,"KRN",9.8,"NM","B","IBCEP5A",131)

"BLD",10678,"KRN",9.8,"NM","B","IBCEP5B",62)

"BLD",10678,"KRN",9.8,"NM","B","IBCEP5C",86)

"BLD",10678,"KRN",9.8,"NM","B","IBCEP5D",132)

"BLD",10678,"KRN",9.8,"NM","B","IBCEP7",49)

"BLD",10678,"KRN",9.8,"NM","B","IBCEP7B",50)

"BLD",10678,"KRN",9.8,"NM","B","IBCEP7C",51)

"BLD",10678,"KRN",9.8,"NM","B","IBCEP8A",48)

"BLD",10678,"KRN",9.8,"NM","B","IBCEP9",47)

"BLD",10678,"KRN",9.8,"NM","B","IBCEPB",63)

"BLD",10678,"KRN",9.8,"NM","B","IBCEPTC",44)

"BLD",10678,"KRN",9.8,"NM","B","IBCEPTC0",45)

"BLD",10678,"KRN",9.8,"NM","B","IBCEPTC1",123)

"BLD",10678,"KRN",9.8,"NM","B","IBCEPTC2",46)

"BLD",10678,"KRN",9.8,"NM","B","IBCEPTR",36)

"BLD",10678,"KRN",9.8,"NM","B","IBCEQ1",34)

"BLD",10678,"KRN",9.8,"NM","B","IBCEQ1A",35)

"BLD",10678,"KRN",9.8,"NM","B","IBCERP6",33)

"BLD",10678,"KRN",9.8,"NM","B","IBCERP7",129)

"BLD",10678,"KRN",9.8,"NM","B","IBCEST",32)

"BLD",10678,"KRN",9.8,"NM","B","IBCEU",4)

"BLD",10678,"KRN",9.8,"NM","B","IBCEU0",31)

"BLD",10678,"KRN",9.8,"NM","B","IBCEU3",30)

"BLD",10678,"KRN",9.8,"NM","B","IBCEU5",5)

"BLD",10678,"KRN",9.8,"NM","B","IBCEU7",6)

"BLD",10678,"KRN",9.8,"NM","B","IBCEXTRP",29)

"BLD",10678,"KRN",9.8,"NM","B","IBCF23",66)

"BLD",10678,"KRN",9.8,"NM","B","IBCF23A",67)

"BLD",10678,"KRN",9.8,"NM","B","IBCNADD",100)

"BLD",10678,"KRN",9.8,"NM","B","IBCNSC",116)

"BLD",10678,"KRN",9.8,"NM","B","IBCNSC0",117)

"BLD",10678,"KRN",9.8,"NM","B","IBCNSC01",118)

"BLD",10678,"KRN",9.8,"NM","B","IBCNSC02",119)

"BLD",10678,"KRN",9.8,"NM","B","IBCNSC1",120)

"BLD",10678,"KRN",9.8,"NM","B","IBCNSCD1",121)

"BLD",10678,"KRN",9.8,"NM","B","IBCNSCD2",122)

"BLD",10678,"KRN",9.8,"NM","B","IBCNSI",126)

"BLD",10678,"KRN",9.8,"NM","B","IBCNSU3",135)

"BLD",10678,"KRN",9.8,"NM","B","IBCSC10",9)

"BLD",10678,"KRN",9.8,"NM","B","IBCSC10H",10)

"BLD",10678,"KRN",9.8,"NM","B","IBCSC3",27)

"BLD",10678,"KRN",9.8,"NM","B","IBCSC4",134)

"BLD",10678,"KRN",9.8,"NM","B","IBCSC5",7)

"BLD",10678,"KRN",9.8,"NM","B","IBCSC8",8)

"BLD",10678,"KRN",9.8,"NM","B","IBCSC9",105)

"BLD",10678,"KRN",9.8,"NM","B","IBCSCE",11)

"BLD",10678,"KRN",9.8,"NM","B","IBCSCU",12)

"BLD",10678,"KRN",9.8,"NM","B","IBCU",21)

"BLD",10678,"KRN",9.8,"NM","B","IBCU1",22)

"BLD",10678,"KRN",9.8,"NM","B","IBCU3",23)

"BLD",10678,"KRN",9.8,"NM","B","IBCU41",124)

"BLD",10678,"KRN",9.8,"NM","B","IBCU7",24)

"BLD",10678,"KRN",9.8,"NM","B","IBCU72",25)

"BLD",10678,"KRN",9.8,"NM","B","IBCU7B",26)

"BLD",10678,"KRN",9.8,"NM","B","IBCU82",84)

"BLD",10678,"KRN",9.8,"NM","B","IBCU9",106)

"BLD",10678,"KRN",9.8,"NM","B","IBJPS",107)

"BLD",10678,"KRN",9.8,"NM","B","IBJPS2",108)

"BLD",10678,"KRN",9.8,"NM","B","IBJTBA",20)

"BLD",10678,"KRN",9.8,"NM","B","IBJTCA1",19)

"BLD",10678,"KRN",9.8,"NM","B","IBJTLA1",87)

"BLD",10678,"KRN",9.8,"NM","B","IBJTLB1",88)

"BLD",10678,"KRN",9.8,"NM","B","IBJTU3",109)

"BLD",10678,"KRN",9.8,"NM","B","IBTRH5D",80)

"BLD",10678,"KRN",9.8,"NM","B","IBY592PO",79)

"BLD",10678,"KRN",9.8,"NM","B","IBY592PR",16)

"BLD",10678,"KRN",19,0)
19
"BLD",10678,"KRN",19,"NM",0)
^9.68A^^0
"BLD",10678,"KRN",19.1,0)
19.1
"BLD",10678,"KRN",101,0)
101
"BLD",10678,"KRN",101,"NM",0)
^9.68A^26^23
"BLD",10678,"KRN",101,"NM",1,0)
IBCNSC INSURANCE CO^^0
"BLD",10678,"KRN",101,"NM",2,0)
IBCNSC INS CO DENTAL CLAIMS OFFICE^^0
"BLD",10678,"KRN",101,"NM",5,0)
IBCNS QUIT^^4^
"BLD",10678,"KRN",101,"NM",6,0)
IBCNSC INS CO (IN)ACTIVATE COMPANY^^4^
"BLD",10678,"KRN",101,"NM",7,0)
IBCNSC INS CO APPEALS OFFICE^^0^
"BLD",10678,"KRN",101,"NM",8,0)
IBCNSC INS CO ASSOCIATION^^4^
"BLD",10678,"KRN",101,"NM",9,0)
IBCNSC INS CO BILLING PARAMETERS^^4^
"BLD",10678,"KRN",101,"NM",10,0)
IBCNSC INS CO CHANGE COMPANY^^4^
"BLD",10678,"KRN",101,"NM",11,0)
IBCNSC INS CO DELETE COMPANY^^4^
"BLD",10678,"KRN",101,"NM",12,0)
IBCNSC INS CO EDIT ALL^^4^
"BLD",10678,"KRN",101,"NM",13,0)
IBCNSC INS CO INPT CLAIMS^^0^
"BLD",10678,"KRN",101,"NM",14,0)
IBCNSC INS CO INQUIRY OFFICE^^0^
"BLD",10678,"KRN",101,"NM",15,0)
IBCNSC INS CO MAIN MAILING ADDRESS^^0^
"BLD",10678,"KRN",101,"NM",16,0)
IBCNSC INS CO OPT CLAIMS^^0^
"BLD",10678,"KRN",101,"NM",17,0)
IBCNSC INS CO PAYER^^4^
"BLD",10678,"KRN",101,"NM",18,0)
IBCNSC INS CO REMARKS^^4^
"BLD",10678,"KRN",101,"NM",20,0)
IBCNSC INS CO SYNONYMS^^4^
"BLD",10678,"KRN",101,"NM",21,0)
IBCNSC PROVIDER ID PARAMETERS^^4^
"BLD",10678,"KRN",101,"NM",22,0)
IBCNSJ INS CO PLANS^^4^
"BLD",10678,"KRN",101,"NM",23,0)
IBCNSC INS CO BILLING ADDRESSES^^0
"BLD",10678,"KRN",101,"NM",24,0)
IBCNSC INS CO ADDRESSES^^0
"BLD",10678,"KRN",101,"NM",25,0)
IBCNSC INS CO RX CLAIMS^^4^
"BLD",10678,"KRN",101,"NM",26,0)
IBJ EXIT^^4^
"BLD",10678,"KRN",101,"NM","B","IBCNS QUIT",5)

"BLD",10678,"KRN",101,"NM","B","IBCNSC INS CO (IN)ACTIVATE COMPANY",6)

"BLD",10678,"KRN",101,"NM","B","IBCNSC INS CO ADDRESSES",24)

"BLD",10678,"KRN",101,"NM","B","IBCNSC INS CO APPEALS OFFICE",7)

"BLD",10678,"KRN",101,"NM","B","IBCNSC INS CO ASSOCIATION",8)

"BLD",10678,"KRN",101,"NM","B","IBCNSC INS CO BILLING ADDRESSES",23)

"BLD",10678,"KRN",101,"NM","B","IBCNSC INS CO BILLING PARAMETERS",9)

"BLD",10678,"KRN",101,"NM","B","IBCNSC INS CO CHANGE COMPANY",10)

"BLD",10678,"KRN",101,"NM","B","IBCNSC INS CO DELETE COMPANY",11)

"BLD",10678,"KRN",101,"NM","B","IBCNSC INS CO DENTAL CLAIMS OFFICE",2)

"BLD",10678,"KRN",101,"NM","B","IBCNSC INS CO EDIT ALL",12)

"BLD",10678,"KRN",101,"NM","B","IBCNSC INS CO INPT CLAIMS",13)

"BLD",10678,"KRN",101,"NM","B","IBCNSC INS CO INQUIRY OFFICE",14)

"BLD",10678,"KRN",101,"NM","B","IBCNSC INS CO MAIN MAILING ADDRESS",15)

"BLD",10678,"KRN",101,"NM","B","IBCNSC INS CO OPT CLAIMS",16)

"BLD",10678,"KRN",101,"NM","B","IBCNSC INS CO PAYER",17)

"BLD",10678,"KRN",101,"NM","B","IBCNSC INS CO REMARKS",18)

"BLD",10678,"KRN",101,"NM","B","IBCNSC INS CO RX CLAIMS",25)

"BLD",10678,"KRN",101,"NM","B","IBCNSC INS CO SYNONYMS",20)

"BLD",10678,"KRN",101,"NM","B","IBCNSC INSURANCE CO",1)

"BLD",10678,"KRN",101,"NM","B","IBCNSC PROVIDER ID PARAMETERS",21)

"BLD",10678,"KRN",101,"NM","B","IBCNSJ INS CO PLANS",22)

"BLD",10678,"KRN",101,"NM","B","IBJ EXIT",26)

"BLD",10678,"KRN",409.61,0)
409.61
"BLD",10678,"KRN",409.61,"NM",0)
^9.68A^6^6
"BLD",10678,"KRN",409.61,"NM",1,0)
IBCE INSCO ID MAINT^^0
"BLD",10678,"KRN",409.61,"NM",2,0)
IBCNS INSURANCE COMPANY^^0
"BLD",10678,"KRN",409.61,"NM",3,0)
IBCE VIEW PREV TRANS1^^0
"BLD",10678,"KRN",409.61,"NM",4,0)
IBCE VIEW PREV TRANS2^^0
"BLD",10678,"KRN",409.61,"NM",5,0)
IBCNSC INSURANCE CO ADDRESSES^^0
"BLD",10678,"KRN",409.61,"NM",6,0)
IBCE PRVPRV MAINT^^0
"BLD",10678,"KRN",409.61,"NM","B","IBCE INSCO ID MAINT",1)

"BLD",10678,"KRN",409.61,"NM","B","IBCE PRVPRV MAINT",6)

"BLD",10678,"KRN",409.61,"NM","B","IBCE VIEW PREV TRANS1",3)

"BLD",10678,"KRN",409.61,"NM","B","IBCE VIEW PREV TRANS2",4)

"BLD",10678,"KRN",409.61,"NM","B","IBCNS INSURANCE COMPANY",2)

"BLD",10678,"KRN",409.61,"NM","B","IBCNSC INSURANCE CO ADDRESSES",5)

"BLD",10678,"KRN",771,0)
771
"BLD",10678,"KRN",779.2,0)
779.2
"BLD",10678,"KRN",870,0)
870
"BLD",10678,"KRN",8989.51,0)
8989.51
"BLD",10678,"KRN",8989.52,0)
8989.52
"BLD",10678,"KRN",8994,0)
8994
"BLD",10678,"KRN","B",.4,.4)

"BLD",10678,"KRN","B",.401,.401)

"BLD",10678,"KRN","B",.402,.402)

"BLD",10678,"KRN","B",.403,.403)

"BLD",10678,"KRN","B",.5,.5)

"BLD",10678,"KRN","B",.84,.84)

"BLD",10678,"KRN","B",3.6,3.6)

"BLD",10678,"KRN","B",3.8,3.8)

"BLD",10678,"KRN","B",9.2,9.2)

"BLD",10678,"KRN","B",9.8,9.8)

"BLD",10678,"KRN","B",19,19)

"BLD",10678,"KRN","B",19.1,19.1)

"BLD",10678,"KRN","B",101,101)

"BLD",10678,"KRN","B",409.61,409.61)

"BLD",10678,"KRN","B",771,771)

"BLD",10678,"KRN","B",779.2,779.2)

"BLD",10678,"KRN","B",870,870)

"BLD",10678,"KRN","B",8989.51,8989.51)

"BLD",10678,"KRN","B",8989.52,8989.52)

"BLD",10678,"KRN","B",8994,8994)

"BLD",10678,"QDEF")
^^^^NO^^^^NO^^YES
"BLD",10678,"QUES",0)
^9.62^^
"BLD",10678,"REQB",0)
^9.611^15^15
"BLD",10678,"REQB",1,0)
IB*2.0*405^1
"BLD",10678,"REQB",2,0)
IB*2.0*458^1
"BLD",10678,"REQB",3,0)
IB*2.0*492^1
"BLD",10678,"REQB",4,0)
IB*2.0*517^1
"BLD",10678,"REQB",5,0)
IB*2.0*530^1
"BLD",10678,"REQB",6,0)
IB*2.0*574^1
"BLD",10678,"REQB",7,0)
IB*2.0*577^1
"BLD",10678,"REQB",8,0)
IB*2.0*597^1
"BLD",10678,"REQB",9,0)
IB*2.0*604^1
"BLD",10678,"REQB",10,0)
IB*2.0*601^1
"BLD",10678,"REQB",11,0)
IB*2.0*294^1
"BLD",10678,"REQB",12,0)
IB*2.0*81^1
"BLD",10678,"REQB",13,0)
IB*2.0*616^1
"BLD",10678,"REQB",14,0)
IB*2.0*568^1
"BLD",10678,"REQB",15,0)
IB*2.0*591^1
"BLD",10678,"REQB","B","IB*2.0*294",11)

"BLD",10678,"REQB","B","IB*2.0*405",1)

"BLD",10678,"REQB","B","IB*2.0*458",2)

"BLD",10678,"REQB","B","IB*2.0*492",3)

"BLD",10678,"REQB","B","IB*2.0*517",4)

"BLD",10678,"REQB","B","IB*2.0*530",5)

"BLD",10678,"REQB","B","IB*2.0*568",14)

"BLD",10678,"REQB","B","IB*2.0*574",6)

"BLD",10678,"REQB","B","IB*2.0*577",7)

"BLD",10678,"REQB","B","IB*2.0*591",15)

"BLD",10678,"REQB","B","IB*2.0*597",8)

"BLD",10678,"REQB","B","IB*2.0*601",10)

"BLD",10678,"REQB","B","IB*2.0*604",9)

"BLD",10678,"REQB","B","IB*2.0*616",13)

"BLD",10678,"REQB","B","IB*2.0*81",12)

"DATA",353,7,0)
J430D
"DATA",353,7,2)
399^P^^1^^Dental Form
"DATA",364.5,83,0)
N-ATT/REND PHYSICIAN NAME^N^E^I^399^^^
"DATA",364.5,83,1)
N IBZ,IBT S IBT=$S($$FT^IBCEF(IBXIEN)=2:3,$$FT^IBCEF(IBXIEN)=7:3,1:4) D GETPRV^IBCEU(IBXIEN,IBT,.IBZ) S IBXDATA=$P($G(IBZ(IBT,1)),U)_U_$P($G(IBZ(IBT,1)),U,3)_U_$P($G(IBZ(IBT,1)),U,4)
"DATA",364.5,83,3,0)
^364.53^3^3^3170517^^^^
"DATA",364.5,83,3,1,0)
The name of the attending (inpatient) or rendering (outpatient) physician
"DATA",364.5,83,3,2,0)
for bill entry IBXIEN.  inpatient type=4, outpatient=3
"DATA",364.5,83,3,3,0)
1st '^'-piece is name, 2nd is new person file ien, 3rd is credentials
"DATA",364.5,97,0)
N-NON-INSTITUTIONAL CLAIM TYPE^N^E^I^399^^^
"DATA",364.5,97,1)
S IBXDATA="" I $$FT^IBCEF(IBXIEN)=2!($$FT^IBCEF(IBXIEN)=7) S IBXDATA=$S($O(^IBA(362.4,"AIFN"_IBXIEN,0)):"RX",1:"MD")
"DATA",364.5,97,3,0)
^364.53^2^2^3170523^^^^
"DATA",364.5,97,3,1,0)
If an outpatient bill-'MD'; if a prescription bill-'RX' for bill entry
"DATA",364.5,97,3,2,0)
IBXIEN.
"DATA",364.5,249,0)
N-ATT/REND PHYSICIAN SPEC^N^E^I^399^^^
"DATA",364.5,249,1)
N IBZ,IBI S IBI=$S($$FT^IBCEF(IBXIEN)=2!($$FT^IBCEF(IBXIEN)=7):3,1:4) D GETPRV^IBCEU(IBXIEN,IBI,.IBZ) S IBXDATA=$$SPEC^IBCEU($P($G(IBZ(IBI,1)),U,3),+$G(^DGCR(399,IBXIEN,"U")))
"DATA",364.5,249,3,0)
^364.53^2^2^3170501^^^^
"DATA",364.5,249,3,1,0)
Find the specialty from the VA code of the person class attached to the
"DATA",364.5,249,3,2,0)
attending/rendering provider for bill IBXIEN, if it can be determined.
"DATA",364.5,261,0)
N-ATT/REND PROVIDER ID^N^E^I^399^^^
"DATA",364.5,261,1)
N IBZ,IBI,IBS S IBS=+$$COBN^IBCEF(IBXIEN),IBI=$S($$FT^IBCEF(IBXIEN)=2!($$FT^IBCEF(IBXIEN)=7):3,1:4) D GETPRV^IBCEU(IBXIEN,IBI,.IBZ) S IBXDATA=$S($P($G(IBZ(IBI,1,IBS)),U)'="":$P(IBZ(IBI,1,IBS),U),1:$P($G(IBZ(IBI,1,1)),U))
"DATA",364.5,261,3,0)
^364.53^2^2^3170501^^^^
"DATA",364.5,261,3,1,0)
The id # of the attending/rendering physician for the current insurance
"DATA",364.5,261,3,2,0)
company for bill entry IBXIEN.
"DATA",364.5,370,0)
N-ATT/REND PHYSICIAN NAME BR^N^E^I^399^^^
"DATA",364.5,370,1)
N IBT S IBT=$S($$FT^IBCEF(IBXIEN)=2!($$FT^IBCEF(IBXIEN)=7):3,1:4) S IBXDATA=$$GETPRV^IBCEF83(IBXIEN,,IBT,"A1")_U_$$GETPRV^IBCEF83(IBXIEN,,IBT,"A0")_U_$$GETPRV^IBCEF83(IBXIEN,,IBT,"A6")
"DATA",364.5,370,3,0)
^364.53^3^3^3170501^^
"DATA",364.5,370,3,1,0)
The name of the ATTENDING or RENDERING provider for bill entry IBXIEN.  
"DATA",364.5,370,3,2,0)
The pieces returned are: provider name^vp ien for provider 
"DATA",364.5,370,3,3,0)
(200/355.93)^credentials.
"DATA",364.5,378,0)
N-ORTHO BANDING QUALIFIER^N^C^I^399^^^452
"DATA",364.5,378,1)

"DATA",364.5,379,0)
N-ORTHO BANDING DATE^N^F^I^399^BANDING DATE^I^
"DATA",364.5,379,1)

"DATA",364.5,380,0)
N-ORTHO TX MTHS COUNT^N^F^I^399^TREATMENT MONTHS COUNT^I^
"DATA",364.5,380,1)

"DATA",364.5,381,0)
N-ORTHO TX MTHS COUNT TRANSFER^N^F^I^399^TREATMENT MONTHS REMAINING^I^
"DATA",364.5,381,1)

"DATA",364.5,382,0)
N-ORTHO TX INDICATOR^N^F^I^399^TREATMENT INDICATOR^E^
"DATA",364.5,382,1)

"DATA",364.5,383,0)
N-TOOTH NUMBER^N^E^G^399^^^
"DATA",364.5,383,1)
S IBXDATA="" I $$FT^IBCEF(IBXIEN)=7 D TNUM^IBCEF12(IBXIEN)
"DATA",364.5,384,0)
N-HCFA J430D SERV LINE (EDI)^N^E^G^399^^^
"DATA",364.5,384,1)
S IBXDATA="" I $$FT^IBCEF(IBXIEN)=7 D OUTPT^IBCEF11(IBXIEN,0)
"DATA",364.5,384,3,0)
^364.53^9^9^3170627^
"DATA",364.5,384,3,1,0)
The elements of the outpatient services line on the HCFA J430D for bill 
"DATA",364.5,384,3,2,0)
entry IBXIEN.  Format is begin date^end date^place of service code^type 
"DATA",364.5,384,3,3,0)
of service code^procedure or revenue code^type of code^diagnosis 
"DATA",364.5,384,3,4,0)
pointers^unit charge^units^modifier pointer ien(s) separated by 
"DATA",364.5,384,3,5,0)
commas^purchased charge amount^anesthesia minutes^emergency indicator^lap 
"DATA",364.5,384,3,6,0)
type of service flag.  Data is returned in an array IBXDATA(1-n).  Also 
"DATA",364.5,384,3,7,0)
returns the arrays IBXDATA(n,"AUX")=the 'AUX' node for the procedure 
"DATA",364.5,384,3,8,0)
entry on the claim IBXDATA("ITEM",item type,item pointer)=n^ctr if this 
"DATA",364.5,384,3,9,0)
data can be gatherd.
"DATA",364.5,437,0)
N-HCFA SERVICE LINE CALLABLE^N^E^G^399^^^
"DATA",364.5,437,1)
S IBXDATA="" I $$FT^IBCEF(IBXIEN)=2!($$FT^IBCEF(IBXIEN)=7) D OUTPT^IBCEF11(IBXIEN,0)
"DATA",364.6,2258,0)
8^N^^62^1^^0^1^4^RECORD ID 'DN1 '^^1^1
"DATA",364.6,2259,0)
8^N^^62^1^^0^2^3^ORTHO BANDING QUALIFIER^^1^0
"DATA",364.6,2260,0)
8^N^^62^1^^0^3^35^ORTHO BANDING DATE^^1^0
"DATA",364.6,2261,0)
8^N^^62^1^^0^4^15^ORTHO TX MONTHS COUNT^^1^0
"DATA",364.6,2262,0)
8^N^^62^1^^0^5^15^ORTHO TX MTHS CT TRANS^^1^0
"DATA",364.6,2263,0)
8^N^^62^1^^0^6^80^ORTHO TX INDICATOR^^1^0
"DATA",364.6,2264,0)
8^N^^63^1^^0^1^4^RECORD ID 'DN2 '^^1^1
"DATA",364.6,2266,0)
8^N^^63^1^^0^2^50^TOOTH NUMBER^^1^0
"DATA",364.6,2267,0)
8^N^^63^1^^0^3^2^TOOTH STATUS CODE^^1^0
"DATA",364.6,2268,0)
8^N^^63^1^^0^4^3^TOOTH CODE LIST QUALIFIER^^1^0
"DATA",364.6,2269,0)
8^N^^101^1^^0^8^3^REFERRING PROVIDER CODE^^1^0
"DATA",364.6,2270,0)
8^N^^101^1^^0^9^3^REFERRING PROVIDER CODE QUALIFIER^^1^0
"DATA",364.6,2271,0)
8^N^^101^1^^0^10^50^REFERRING PROVIDER TAXONOMY^^1^0
"DATA",364.6,2272,0)
8^N^^104.6^1^^0^1^4^RECORD ID 'OPRB'^^1^0
"DATA",364.6,2273,0)
8^N^^104.6^1^^0^2^3^ASST SURGEON QUALIFIER^^1^0
"DATA",364.6,2274,0)
8^N^^104.6^1^^0^3^1^ASST SURGEON TYPE^^1^0
"DATA",364.6,2275,0)
8^N^^104.6^1^^0^4^60^ASST SURGEON LAST NAME^^1^0
"DATA",364.6,2276,0)
8^N^^104.6^1^^0^5^35^ASST SURGEON FIRST NAME^^1^0
"DATA",364.6,2277,0)
8^N^^104.6^1^^0^6^25^ASST SURGEON MIDDLE NAME^^1^0
"DATA",364.6,2278,0)
8^N^^104.6^1^^0^7^10^ASST SURGEON NAME SUFFIX^^1^0
"DATA",364.6,2279,0)
8^N^^104.6^1^^0^8^2^ASST SURGEON PRIMARY ID QUALIFIER^^1^0
"DATA",364.6,2280,0)
8^N^^104.6^1^^0^9^80^ASST SURGEON PRIMARY ID^^1^0
"DATA",364.6,2281,0)
8^N^^104.6^1^^0^10^3^ASST SURGEON TAXONOMY QUALIFIER^^1^0
"DATA",364.6,2282,0)
8^N^^104.6^1^^0^11^10^ASST SURGEON TAXONOMY^^1^0
"DATA",364.6,2283,0)
8^N^^104.6^1^^0^1.5^^OPRB Setup^1
"DATA",364.6,2284,0)
8^N^^104.6^1^^0^99.5^^OPRB Cleanup^1
"DATA",364.6,2285,0)
8^N^^104.61^1^^0^1^4^RECORD ID 'OPRC'^^1^1
"DATA",364.6,2286,0)
8^N^^104.61^1^^0^2^3^ASST SURGEON SEC ID QUALIFIER (1)^^1^0
"DATA",364.6,2287,0)
8^N^^104.61^1^^0^3^50^ASST SURGEON SEC ID (1)^^1^0
"DATA",364.6,2288,0)
8^N^^104.61^1^^0^1.5^^OPRC Setup^1
"DATA",364.6,2289,0)
8^N^^104.61^1^^0^4^3^ASST SURGEON SEC ID QUALIFIER (2)^^1^0
"DATA",364.6,2290,0)
8^N^^104.61^1^^0^5^50^ASST SURGEON SEC ID (2)^^1^0
"DATA",364.6,2291,0)
8^N^^104.61^1^^0^6^3^ASST SURGEON SEC ID QUALIFIER (3)^^1^0
"DATA",364.6,2292,0)
8^N^^104.61^1^^0^7^50^ASST SURGEON SEC ID (3)^^1^0
"DATA",364.6,2293,0)
8^N^^104.61^1^^0^8^3^ASST SURGEON SEC ID QUALIFIER (4)^^1^0
"DATA",364.6,2294,0)
8^N^^104.61^1^^0^9^50^ASST SURGEON SEC ID (4)^^1^0
"DATA",364.6,2295,0)
8^N^^104.61^1^^0^99.5^^OPRC Cleanup^1
"DATA",364.6,2296,0)
8^N^^178.1^1^^0^1^4^RECORD ID 'OP10'^^1^0
"DATA",364.6,2297,0)
8^N^^178.1^1^^0^1.5^^OP10 Setup^1
"DATA",364.6,2298,0)
8^N^^178.1^1^^0^2^1^PAYER RESPONSIBILITY SEQ # CODE^^1^0
"DATA",364.6,2299,0)
8^N^^178.1^1^^0^3^3^OTHER PAYER ASST SURGEON ENTITY ID^^1^0
"DATA",364.6,2300,0)
8^N^^178.1^1^^0^4^1^OTHER PAYER ASST SURGEON ENTITY QUAL^^1^0
"DATA",364.6,2301,0)
8^N^^178.1^1^^0^5^3^OTHER PAYER ASST SURGEON SEC ID QUAL(1)^^1^0
"DATA",364.6,2302,0)
8^N^^178.1^1^^0^6^50^OTHER PAYER ASST SURGEON SEC ID(1)^^1^0
"DATA",364.6,2303,0)
8^N^^178.1^1^^0^7^3^OTHER PAYER ASST SURGEON SEC ID QUAL(2)^^1^0
"DATA",364.6,2304,0)
8^N^^178.1^1^^0^8^50^OTHER PAYER ASST SURGEON SEC ID(2)^^1^0
"DATA",364.6,2305,0)
8^N^^178.1^1^^0^9^3^OTHER PAYER ASST SURGEON SEC ID QUAL(3)^^1^0
"DATA",364.6,2306,0)
8^N^^178.1^1^^0^10^50^OTHER PAYER ASST SURGEON SEC ID(3)^^1^0
"DATA",364.6,2307,0)
8^N^^178.1^1^^0^99.5^^OP10 Cleanup^1
"DATA",364.6,2308,0)
8^N^^186^1^^0^1^4^RECORD ID 'DEN '^^1^1
"DATA",364.6,2309,0)
8^N^^186^1^^0^2^6^SERVICE LINE #^^1^0
"DATA",364.6,2310,0)
8^N^^186^1^^0^3^3^DATE/TIME QUALIFIER^^1^0
"DATA",364.6,2311,0)
8^N^^186^1^^0^4^35^SERVICE DATE^^1^0
"DATA",364.6,2312,0)
8^N^^186^1^^0^5^2^SERVICE ID QUALIFIER^^1^0
"DATA",364.6,2313,0)
8^N^^186^1^^0^6^48^PROCEDURE CODE^^1^0
"DATA",364.6,2314,0)
8^N^^186^1^^0^7^2^PROCEDURE MODIFIER(1)^^1^0
"DATA",364.6,2315,0)
8^N^^186^1^^0^8^2^PROCEDURE MODIFIER(2)^^1^0
"DATA",364.6,2316,0)
8^N^^186^1^^0^9^2^PROCEDURE MODIFIER(3)^^1^0
"DATA",364.6,2317,0)
8^N^^186^1^^0^10^2^PROCEDURE MODIFIER(4)^^1^0
"DATA",364.6,2318,0)
8^N^^186^1^^0^11^80^PROCEDURE CODE DESCRIPTION^^1^0
"DATA",364.6,2319,0)
8^N^^186^1^^0^12^18^LINE ITEM CHARGE AMT^^1^0
"DATA",364.6,2320,0)
8^N^^186^1^^0^13^2^PLACE OF SERVICE CODE^^1^0
"DATA",364.6,2321,0)
8^N^^186^1^^0^14^3^ORAL CAVITY DESIGNATION(1)^^1^0
"DATA",364.6,2322,0)
8^N^^186^1^^0^15^3^ORAL CAVITY DESIGNATION(2)^^1^0
"DATA",364.6,2323,0)
8^N^^186^1^^0^16^3^ORAL CAVITY DESIGNATION(3)^^1^0
"DATA",364.6,2324,0)
8^N^^186^1^^0^17^3^ORAL CAVITY DESIGNATION(4)^^1^0
"DATA",364.6,2325,0)
8^N^^186^1^^0^18^3^ORAL CAVITY DESIGNATION(5)^^1^0
"DATA",364.6,2326,0)
8^N^^186^1^^0^19^1^PROSTHESIS CROWN INLAY CODE^^1^0
"DATA",364.6,2327,0)
8^N^^186.1^1^^0^1^4^RECORD ID 'DEN1'^^1^1
"DATA",364.6,2328,0)
8^N^^186.1^1^^0^2^6^SERVICE LINE #^^1^0
"DATA",364.6,2329,0)
8^N^^186.1^1^^0^3^15^PROCEDURE COUNT^^1^0
"DATA",364.6,2330,0)
8^N^^186.1^1^^0^4^2^DIAGNOSIS CODE POINTER(1)^^1^0
"DATA",364.6,2331,0)
8^N^^186.1^1^^0^5^2^DIAGNOSIS CODE POINTER(2)^^1^0
"DATA",364.6,2332,0)
8^N^^186.1^1^^0^6^2^DIAGNOSIS CODE POINTER(3)^^1^0
"DATA",364.6,2333,0)
8^N^^186.1^1^^0^7^2^DIAGNOSIS CODE POINTER(4)^^1^0
"DATA",364.6,2334,0)
8^N^^186.1^1^^0^8^3^PRIOR PLACEMENT DATE QUALIFIER^^1^0
"DATA",364.6,2335,0)
8^N^^186.1^1^^0^9^35^PRIOR PLACEMENT DATE^^1^0
"DATA",364.6,2336,0)
8^N^^186.1^1^^0^10^3^ORTHO BANDING DATE QUALIFIER^^1^0
"DATA",364.6,2337,0)
8^N^^186.1^1^^0^11^35^ORTHO BANDING DATE^^1^0
"DATA",364.6,2338,0)
8^N^^186.1^1^^0^12^3^REPLACEMENT DATE QUALIFIER^^1^0
"DATA",364.6,2339,0)
8^N^^186.1^1^^0^13^35^REPLACEMENT DATE^^1^0
"DATA",364.6,2340,0)
8^N^^186.1^1^^0^14^3^TREATMENT START DATE QUALIFIER^^1^0
"DATA",364.6,2341,0)
8^N^^186.1^1^^0^15^35^TREATMENT START DATE^^1^0
"DATA",364.6,2342,0)
8^N^^186.1^1^^0^16^3^TREATMENT COMPLETION DATE QUALIFIER^^1^0
"DATA",364.6,2343,0)
8^N^^186.1^1^^0^17^35^TREATMENT COMPLETION DATE^^1^0
"DATA",364.6,2344,0)
8^N^^186.2^1^^0^1^4^RECORD ID 'DEN2'^^1^1
"DATA",364.6,2345,0)
8^N^^186.2^1^^0^2^6^SERVICE LINE #^^1^0
"DATA",364.6,2346,0)
8^N^^186.2^1^^0^3^3^TOOTH CODE QUALIFIER^^1^0
"DATA",364.6,2347,0)
8^N^^186.2^1^^0^4^30^TOOTH CODE^^1^0
"DATA",364.6,2348,0)
8^N^^186.2^1^^0^5^2^TOOTH SURFACE(1)^^1^0
"DATA",364.6,2349,0)
8^N^^186.2^1^^0^6^2^TOOTH SURFACE(2)^^1^0
"DATA",364.6,2350,0)
8^N^^186.2^1^^0^7^2^TOOTH SURFACE(3)^^1^0
"DATA",364.6,2351,0)
8^N^^186.2^1^^0^8^2^TOOTH SURFACE(4)^^1^0
"DATA",364.6,2352,0)
8^N^^186.2^1^^0^9^2^TOOTH SURFACE(5)^^1^0
"DATA",364.6,2353,0)
8^N^^194.5^1^^0^1^4^RECORD ID 'LSUR'^^1^0
"DATA",364.6,2354,0)
8^N^^194.5^1^^0^2^6^SERVICE LINE COUNTER^^1^0
"DATA",364.6,2355,0)
8^N^^194.5^1^^0^3^3^ASST SURGEON QUALIFIER^^1^0
"DATA",364.6,2356,0)
8^N^^194.5^1^^0^4^60^ASST SURGEON LAST NAME^^1^0
"DATA",364.6,2357,0)
8^N^^194.5^1^^0^5^35^ASST SURGEON FIRST NAME^^1^0
"DATA",364.6,2358,0)
8^N^^194.5^1^^0^6^25^ASST SURGEON MIDDLE NAME^^1^0
"DATA",364.6,2359,0)
8^N^^194.5^1^^0^7^10^ASST SURGEON NAME SUFFIX^^1^0
"DATA",364.6,2360,0)
8^N^^194.5^1^^0^8^2^ASST SURGEON PRIMARY ID QUALIFIER^^1^0
"DATA",364.6,2361,0)
8^N^^194.5^1^^0^9^10^ASST SURGEON PRIMARY ID^^1^0
"DATA",364.6,2370,0)
8^N^^194.5^1^^0^1.9^^LSUR DATA EXTRACT^1^1^0
"DATA",364.6,2372,0)
8^N^^194.6^1^^0^1^5^RECORD ID 'LSR1'^^1^0
"DATA",364.6,2373,0)
8^N^^194.6^1^^0^1.9^^LSR1 DATA EXTRACT^1^1^0
"DATA",364.6,2374,0)
8^N^^194.6^1^^0^2^6^SERVICE LINE COUNTER^^1^0
"DATA",364.6,2375,0)
8^N^^194.6^1^^0^3^3^ASST SURGEON SECONDARY ID QUALIFIER(1)^^1^0
"DATA",364.6,2376,0)
8^N^^194.6^1^^0^4^15^ASST SURGEON SECONDARY ID(1)^^1^0
"DATA",364.6,2377,0)
8^N^^194.6^1^^0^5^3^ASST SURGEON SECONDARY ID QUALIFIER(2)^^1^0
"DATA",364.6,2378,0)
8^N^^194.6^1^^0^6^15^ASST SURGEON SECONDARY ID(2)^^1^0
"DATA",364.6,2379,0)
8^N^^194.6^1^^0^7^3^ASST SURGEON SECONDARY ID QUALIFIER(3)^^1^0
"DATA",364.6,2380,0)
8^N^^194.6^1^^0^8^15^ASST SURGEON SECONDARY ID(3)^^1^0
"DATA",364.6,2381,0)
8^N^^194.6^1^^0^9^2^ASST SURGEON TAXONOMY QUALIFIER^^1^0
"DATA",364.6,2382,0)
8^N^^194.6^1^^0^10^10^ASST SURGEON TAXONOMY CODE^^1^0
"DATA",364.7,16,0)
18^N^5^^^^N
"DATA",364.7,16,1)
I $$FT^IBCEF(IBXIEN)'=7 S IBXDATA=$P($G(IBXSAVE("EMP")),U)
"DATA",364.7,16,3,0)
^364.73^2^2^3170719^^^^
"DATA",364.7,16,3,1,0)
Retrieves insured employment info from IBXSAVE array previously extracted.
"DATA",364.7,16,3,2,0)
If data element's value is null, do not output.
"DATA",364.7,31,0)
75^N^284^^^^N
"DATA",364.7,31,1)
I IBXDATA="",$$WNRBILL^IBEFUNC(IBXIEN),$$FT^IBCEF(IBXIEN)=2!($$FT^IBCEF(IBXIEN)=7) S IBXDATA="31"
"DATA",364.7,37,0)
139^N^16^^^^N
"DATA",364.7,37,1)
K:$$FT^IBCEF(IBXIEN)=2!($$FT^IBCEF(IBXIEN)=7)!'$$INPAT^IBCEF(IBXIEN) IBXDATA N Z S Z=0 F  S Z=$O(IBXDATA(Z)) K:'Z IBXDATA Q:'Z  I '$D(IBXDATA(Z,"M")) S IBXSAVE("PROC",Z)=IBXDATA(Z) I Z'<25 K IBXDATA Q
"DATA",364.7,37,3,0)
^364.73^6^6^3170501^^^^
"DATA",364.7,37,3,1,0)
This is a group data element so more than 1 occurrence of a value is
"DATA",364.7,37,3,2,0)
possible for the data element in the IBXDATA array.  If an institutional
"DATA",364.7,37,3,3,0)
bill or if the bill is professional and the procedure being extracted was
"DATA",364.7,37,3,4,0)
not added as a result of being a modifier with a 5-digit code starting with
"DATA",364.7,37,3,5,0)
0 ("M" node does not exist), save in an IBXSAVE array for later use.  No
"DATA",364.7,37,3,6,0)
output.
"DATA",364.7,49,0)
141^N^190^^^^N
"DATA",364.7,49,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 K IBXSAVE("OCC"),IBXSAVE("OCCS")
"DATA",364.7,49,3,0)
^364.73^1^1^3171102^^^^
"DATA",364.7,49,3,1,0)
No output.
"DATA",364.7,75,0)
52^N^173^^^^N
"DATA",364.7,75,1)
S:$$FT^IBCEF(IBXIEN)=7 IBXDATA="" S IBXNOREQ='$$REQ^IBCEF1(2,"",IBXIEN) S IBXDATA=$$DOLLAR^IBCEFG1(IBXDATA)
"DATA",364.7,75,3,0)
^364.73^2^2^3180419^^^^
"DATA",364.7,75,3,1,0)
Format data element so it is numeric including cents, without the decimal.
"DATA",364.7,75,3,2,0)
If data element's value is null, do not output.
"DATA",364.7,98,0)
142^N^78^^^^N
"DATA",364.7,98,1)
N A,IBZ,%DT,Y,X S IBZ=$S($$FT^IBCEF(IBXIEN)=7:IBXDATA,$$HHLTH^IBCEF1(IBXIEN,1):IBXDATA,1:""),A=$S(IBZ?6N:IBZ,1:"") K IBXDATA S:A="" Y=IBZ S X=A,%DT="PX" D:A'="" ^%DT S IBXSAVE("ADMDT")=$S(Y>0:Y,1:"")
"DATA",364.7,98,3,0)
^364.73^3^3^3171017^^^^
"DATA",364.7,98,3,1,0)
Save off data element's value in IBXSAVE array.  No output. IB*547 
"DATA",364.7,98,3,2,0)
requirement to use only Inpatient Admission Date/Time.
"DATA",364.7,98,3,3,0)
IB*574 - added date for Outpatient Home health and hospice
"DATA",364.7,127,0)
108^N^5^^^^N
"DATA",364.7,127,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)'=7 N Z F Z=1,2 I $D(^DGCR(399,IBXIEN,"I"_(Z+1))),$P($G(IBXSAVE("OIEMP",Z)),U)'="" S IBXDATA(Z)=$P(IBXSAVE("OIEMP",Z),U)
"DATA",364.7,127,3,0)
^364.73^3^3^3170719^^^^
"DATA",364.7,127,3,1,0)
This is a group data element so more than 1 occurrence of a value is
"DATA",364.7,127,3,2,0)
possible for the data element in the previously extract IBXSAVE array.  If
"DATA",364.7,127,3,3,0)
any other insurance employer data is found, the data is output.
"DATA",364.7,132,0)
166^N^5^^^^N
"DATA",364.7,132,1)
N IBZ,W,DEFPOS,POS,HOF D F^IBCEF("N-HCFA SERVICE LINE CALLABLE","IBZ",,IBXIEN) S DEFPOS="",W=0 X "F  S W=$O(IBZ(W)) Q:'W  S POS=$P($G(IBZ(W)),U,3),HOF=(POS=11!(POS=12)) S:DEFPOS=""""!HOF DEFPOS=POS Q:HOF" S IBXDATA=DEFPOS
"DATA",364.7,132,3,0)
^364.73^13^13^3171011^^^^
"DATA",364.7,132,3,1,0)
For professional claims only, this is the claim level place of service 
"DATA",364.7,132,3,2,0)
code.   IB patch 400 changes.
"DATA",364.7,132,3,3,0)
 
"DATA",364.7,132,3,4,0)
Build the array with all professional line items (IBZ array).
"DATA",364.7,132,3,5,0)
Loop through the line items looking for POS code of 11 or 12 (home or 
"DATA",364.7,132,3,6,0)
office).  If either 11 or 12 is found, then use that POS code as the 
"DATA",364.7,132,3,7,0)
claim level POS code.   If neither 11 nor 12 is found in the line level 
"DATA",364.7,132,3,8,0)
POS codes, then use the first POS code found in the line items as the 
"DATA",364.7,132,3,9,0)
claim level POS code.
"DATA",364.7,132,3,10,0)
 
"DATA",364.7,132,3,11,0)
Previous to IB patch 400, this field was the admitting DX. The admitting
"DATA",364.7,132,3,12,0)
DX and qualifier is now sent in CL1A-15 (Qualifier) and CL1A-16 (Admitting
"DATA",364.7,132,3,13,0)
DX code).
"DATA",364.7,443,0)
1277^N^5^^^^N
"DATA",364.7,443,1)
I $$FT^IBCEF(IBXIEN)'=7 S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,5,1)),U,3)
"DATA",364.7,443,3,0)
^364.73^5^5^3171128^^^^
"DATA",364.7,443,3,1,0)
Supervising Provider Secondary ID Qualifier
"DATA",364.7,443,3,2,0)
EI=EMPLOYER, SY=SSN, 0B=STATE LICENSE NUMBER, 1A=BLUE CROSS, 1B=BLUE SHIELD,
"DATA",364.7,443,3,3,0)
1C=MEDICARE PARTA aqnd PARTB, 1D=MEDICAID, 1G=UPIN Number, 1H=TRICARE
"DATA",364.7,443,3,4,0)
G2=COMMERCAIL NUMBER, X5=STATE INDUSTRIAL ACCIDENT PROVIDER NUMBER
"DATA",364.7,443,3,5,0)
N5=PROVIDER PLAN NETWORK ID
"DATA",364.7,444,0)
1278^N^5^^^^N
"DATA",364.7,444,1)
I $$FT^IBCEF(IBXIEN)'=7 S IBXDATA=$$NOPUNCT^IBCEF($P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,5,1)),U,4),1)
"DATA",364.7,444,3,0)
^364.73^1^1^3171128^^^^
"DATA",364.7,444,3,1,0)
Supervising Provider Secondary ID
"DATA",364.7,445,0)
1279^N^5^^^^N
"DATA",364.7,445,1)
I $$FT^IBCEF(IBXIEN)'=7 S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,5,2)),U,3)
"DATA",364.7,446,0)
1280^N^5^^^^N
"DATA",364.7,446,1)
I $$FT^IBCEF(IBXIEN)'=7 S IBXDATA=$$NOPUNCT^IBCEF($P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,5,2)),U,4),1)
"DATA",364.7,447,0)
1281^N^5^^^^N
"DATA",364.7,447,1)
I $$FT^IBCEF(IBXIEN)'=7 S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,5,3)),U,3)
"DATA",364.7,448,0)
1282^N^5^^^^N
"DATA",364.7,448,1)
I $$FT^IBCEF(IBXIEN)'=7 S IBXDATA=$$NOPUNCT^IBCEF($P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,5,3)),U,4),1)
"DATA",364.7,449,0)
1283^N^5^^^^N
"DATA",364.7,449,1)
I $$FT^IBCEF(IBXIEN)'=7 S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,5,4)),U,3)
"DATA",364.7,450,0)
1284^N^5^^^^N
"DATA",364.7,450,1)
I $$FT^IBCEF(IBXIEN)'=7 S IBXDATA=$$NOPUNCT^IBCEF($P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,5,4)),U,4),1)
"DATA",364.7,644,0)
1254^N^5^^^^N
"DATA",364.7,644,1)
I $$FT^IBCEF(IBXIEN)'=7 S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,1,1)),"^",3)
"DATA",364.7,644,3,0)
^364.73^5^5^3171128^^^^
"DATA",364.7,644,3,1,0)
Refering Provider Secondary ID Qualifier
"DATA",364.7,644,3,2,0)
EI=EMPLOYER, SY=SSN, 0B=STATE LICENSE NUMBER, 1A=BLUE CROSS, 1B=BLUE SHIELD,
"DATA",364.7,644,3,3,0)
1C=MEDICARE PARTA aqnd PARTB, 1D=MEDICAID, 1G=UPIN Number, 1H=TRICARE
"DATA",364.7,644,3,4,0)
G2=COMMERCIAL NUMBER, X5=STATE INDUSTRIAL ACCIDENT PROVIDER NUMBER
"DATA",364.7,644,3,5,0)
N5=PROVIDER PLAN NETWORK ID
"DATA",364.7,645,0)
1255^N^5^^^^N
"DATA",364.7,645,1)
I $$FT^IBCEF(IBXIEN)'=7 S IBXDATA=$$NOPUNCT^IBCEF($P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,1,1)),"^",4),1)
"DATA",364.7,645,3,0)
^364.73^1^1^3171128^^^^
"DATA",364.7,645,3,1,0)
Refering Provider Secondary ID
"DATA",364.7,646,0)
1256^N^5^^^^N
"DATA",364.7,646,1)
I $$FT^IBCEF(IBXIEN)'=7 S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,1,2)),"^",3)
"DATA",364.7,646,3,0)
^364.73^5^5^3171128^^^^
"DATA",364.7,646,3,1,0)
Refering Provider Secondary ID Qualifier.
"DATA",364.7,646,3,2,0)
EI=EMPLOYER, SY=SSN, 0B=STATE LICENSE NUMBER, 1A=BLUE CROSS, 1B=BLUE SHIELD,
"DATA",364.7,646,3,3,0)
1C=MEDICARE PARTA aqnd PARTB, 1D=MEDICAID, 1G=UPIN Number, 1H=TRICARE
"DATA",364.7,646,3,4,0)
G2=COMMERCAIL NUMBER, X5=STATE INDUSTRIAL ACCIDENT PROVIDER NUMBER
"DATA",364.7,646,3,5,0)
N5=PROVIDER PLAN NETWORK ID
"DATA",364.7,647,0)
1257^N^5^^^^N
"DATA",364.7,647,1)
I $$FT^IBCEF(IBXIEN)'=7 S IBXDATA=$$NOPUNCT^IBCEF($P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,1,2)),"^",4),1)
"DATA",364.7,647,3,0)
^364.73^1^1^3171128^^^^
"DATA",364.7,647,3,1,0)
Refering Provider Secondary ID
"DATA",364.7,648,0)
1258^N^5^^^^N
"DATA",364.7,648,1)
I $$FT^IBCEF(IBXIEN)'=7 S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,1,3)),"^",3)
"DATA",364.7,648,3,0)
^364.73^5^5^3171128^^^^
"DATA",364.7,648,3,1,0)
Refering Provider Secondary ID Qualifier.
"DATA",364.7,648,3,2,0)
EI=EMPLOYER, SY=SSN, 0B=STATE LICENSE NUMBER, 1A=BLUE CROSS, 1B=BLUE SHIELD,
"DATA",364.7,648,3,3,0)
1C=MEDICARE PARTA aqnd PARTB, 1D=MEDICAID, 1G=UPIN Number, 1H=TRICARE
"DATA",364.7,648,3,4,0)
G2=COMMERCAIL NUMBER, X5=STATE INDUSTRIAL ACCIDENT PROVIDER NUMBER
"DATA",364.7,648,3,5,0)
N5=PROVIDER PLAN NETWORK ID
"DATA",364.7,649,0)
1259^N^5^^^^N
"DATA",364.7,649,1)
I $$FT^IBCEF(IBXIEN)'=7 S IBXDATA=$$NOPUNCT^IBCEF($P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,1,3)),"^",4),1)
"DATA",364.7,649,3,0)
^364.73^1^1^3171128^^^^
"DATA",364.7,649,3,1,0)
Refering Provider Secondary ID
"DATA",364.7,854,0)
831^N^257^^^^N
"DATA",364.7,854,1)
K:$$FT^IBCEF(IBXIEN)=7 IBXDATA I +$G(IBXDATA)=0 K IBXDATA
"DATA",364.7,1003,0)
1002^N^148^^^^N
"DATA",364.7,1003,1)
I $$FT^IBCEF(IBXIEN)'=2,$$FT^IBCEF(IBXIEN)'=7 K IBXDATA
"DATA",364.7,1003,3,0)
^364.73^1^1^3170901^^^
"DATA",364.7,1003,3,1,0)
Claim must be a CMS-1500 claim for this to be transmitted.
"DATA",364.7,1006,0)
1005^N^234^^^^N
"DATA",364.7,1006,1)
N A,Q,Z S Q=$G(IBXDATA) K IBXDATA I $$FT^IBCEF(IBXIEN)=2!($$FT^IBCEF(IBXIEN)=7) F Z=1,2 S A=$P(Q,U,Z) I $D(^DGCR(399,IBXIEN,"I"_(Z+1))) S IBXDATA(Z)=$S(A=1:"HM",A=2:"C1",A=3:"MB",A=4:"MC",A=5:"GP",1:"OT") D OIT^IBCEF12
"DATA",364.7,1006,3,0)
^364.73^12^12^3171108^^^^
"DATA",364.7,1006,3,1,0)
This is a group data element so more than 1 occurrence of a value is
"DATA",364.7,1006,3,2,0)
possible for the data element in the IBXDATA array.  If any 'other'
"DATA",364.7,1006,3,3,0)
insurance company data is found, the data is formatted as the insurance type
"DATA",364.7,1006,3,4,0)
of the insurance company in X12 format (see codes below or refer to the
"DATA",364.7,1006,3,5,0)
837 V4010 field 2320/SBR/05 - professional guide)
"DATA",364.7,1006,3,6,0)
 
"DATA",364.7,1006,3,7,0)
     Type codes: = 1:HMO  (HM)
"DATA",364.7,1006,3,8,0)
                   2:COMMERCIAL  (C1)
"DATA",364.7,1006,3,9,0)
                   3:MEDICARE  (MB)
"DATA",364.7,1006,3,10,0)
                   4:MEDICAID  (MC)
"DATA",364.7,1006,3,11,0)
                   5:GROUP POLICY  (GP)
"DATA",364.7,1006,3,12,0)
                   9:OTHER  (OT)
"DATA",364.7,1008,0)
1007^N^5^^^^N
"DATA",364.7,1008,1)
I $$FT^IBCEF(IBXIEN)'=7 S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,3,"NAME")),U,4)
"DATA",364.7,1008,3,0)
^364.73^2^2^3170719^^
"DATA",364.7,1008,3,1,0)
Credentials should be in the 4th piece of the "NAME" node of the 
"DATA",364.7,1008,3,2,0)
Rendering Provider IBXSAVE array.
"DATA",364.7,1015,0)
1014^N^5^^^^N
"DATA",364.7,1015,1)
S IBXDATA="592.0" I '$$PROD^XUPROD(1) S $E(IBXDATA,11)="D"
"DATA",364.7,1015,3,0)
^364.73^7^7^3170712^^^^
"DATA",364.7,1015,3,1,0)
This field contains the VistA IB patch# that pertains to the
"DATA",364.7,1015,3,2,0)
applicable changes in the claim map.  Austin uses this field to determine
"DATA",364.7,1015,3,3,0)
which set of EDI claim maps to use when processing the EDI claims.
"DATA",364.7,1015,3,4,0)

"DATA",364.7,1015,3,5,0)
If the EDI claims are being transmitted from a non-production account,
"DATA",364.7,1015,3,6,0)
then the "D" in the 11th position indicates to Austin that it is test
"DATA",364.7,1015,3,7,0)
data.
"DATA",364.7,1023,0)
1309^N^5^^^^N
"DATA",364.7,1023,1)
D OTH^IBCEF76(IBXIEN,.IBXSAVE,.IBXDATA,($$FT^IBCEF(IBXIEN)=2!($$FT^IBCEF(IBXIEN)=7)),"OP7 ")
"DATA",364.7,1023,3,0)
^364.73^3^3^3170522^^
"DATA",364.7,1023,3,1,0)
OP7-2
"DATA",364.7,1023,3,2,0)
other payer sequence.  Call provider ID function only when claim is a 
"DATA",364.7,1023,3,3,0)
1500 claim.
"DATA",364.7,1425,0)
2258^N^131^^^^N
"DATA",364.7,1425,1)
S IBXDATA="DN1 "
"DATA",364.7,1425,3,0)
^364.73^1^1^3170331^^^^
"DATA",364.7,1425,3,1,0)
Output RECORD ID for DN1 record.
"DATA",364.7,1426,0)
2259^N^378^^^^N
"DATA",364.7,1426,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7,$P($G(^DGCR(399,IBXIEN,"DEN")),U)'="" S IBXDATA=452
"DATA",364.7,1426,3,0)
^364.73^1^1^3170627^^^^
"DATA",364.7,1426,3,1,0)
Orthodontic Banding Qualifier always will be 452.
"DATA",364.7,1460,0)
2260^N^379^^^^N
"DATA",364.7,1460,1)
S:$$FT^IBCEF(IBXIEN)'=7 IBXDATA="" I $$FT^IBCEF(IBXIEN)=7 S IBXDATA=$$DT^IBCEFG1(IBXDATA,"","D8")
"DATA",364.7,1460,3,0)
^364.73^1^1^3170331^^^^
"DATA",364.7,1460,3,1,0)
Format date is CCYYMMDD
"DATA",364.7,1461,0)
2261^N^380^^^^N
"DATA",364.7,1461,1)
I $$FT^IBCEF(IBXIEN)'=7 K IBXDATA
"DATA",364.7,1461,3,0)
^364.73^1^1^3170331^^^
"DATA",364.7,1461,3,1,0)
Ortho Treatment Months count for Dental Claim
"DATA",364.7,1462,0)
2262^N^381^^^^N
"DATA",364.7,1462,1)
I $$FT^IBCEF(IBXIEN)'=7 K IBXDATA
"DATA",364.7,1462,3,0)
^364.73^1^1^3170331^^
"DATA",364.7,1462,3,1,0)
Ortho Treatment months remaining for a transfer patient.
"DATA",364.7,1463,0)
2263^N^382^^^^N
"DATA",364.7,1463,1)
I $$FT^IBCEF(IBXIEN)=7 D TRANS^IBCEF12
"DATA",364.7,1464,0)
2264^N^131^^^^N
"DATA",364.7,1464,1)
S IBXDATA="DN2 "
"DATA",364.7,1464,3,0)
^^1^1^3170314^
"DATA",364.7,1464,3,1,0)
Output the record id for 'DN2' record.
"DATA",364.7,1465,0)
2266^N^383^^^^N
"DATA",364.7,1465,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z S Z=0 F  S Z=$O(^TMP("IBXSAVE",$J,"TO",IBXIEN,Z)) Q:'Z  S Z1=^(Z),IBXSAVE("OUTPT",Z)=Z1,IBXDATA(Z)=$P(Z1,U) I Z>1 D ID^IBCEF2(Z,"DN2 ")
"DATA",364.7,1465,3,0)
^364.73^1^1^3170719^^
"DATA",364.7,1465,3,1,0)
Tooth number of treatment
"DATA",364.7,1466,0)
2267^N^5^^^^N
"DATA",364.7,1466,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  S IBXDATA(Z)=$P(IBXSAVE("OUTPT",Z),U,2)
"DATA",364.7,1466,3,0)
^^1^1^3170315^
"DATA",364.7,1466,3,1,0)
Tooth Status code, either E (to be extracted) or M (Missing)
"DATA",364.7,1467,0)
2268^N^5^^^^N
"DATA",364.7,1467,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  S IBXDATA(Z)=$P(IBXSAVE("OUTPT",Z),U,3)
"DATA",364.7,1467,3,0)
^^1^1^3170315^
"DATA",364.7,1467,3,1,0)
Code List Qualifier Code - will always be JP for Dental claim.
"DATA",364.7,1468,0)
2269^N^5^^^^N
"DATA",364.7,1468,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7,$G(IBXSAVE("PROVINF",IBXIEN,"C",1,1,"TAXONOMY"))'="" S IBXDATA="RF"
"DATA",364.7,1468,3,0)
^364.73^2^2^3170316^^^
"DATA",364.7,1468,3,1,0)
Code identifing the type of provider.  For Dental, always RF for 
"DATA",364.7,1468,3,2,0)
Referring.
"DATA",364.7,1469,0)
2270^N^5^^^^N
"DATA",364.7,1469,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7,$G(IBXSAVE("PROVINF",IBXIEN,"C",1,1,"TAXONOMY"))'="" S IBXDATA="PXC"
"DATA",364.7,1469,3,0)
^364.73^2^2^3170316^^^
"DATA",364.7,1469,3,1,0)
Code qualifing the Reference Identification.  For Dental, it will always 
"DATA",364.7,1469,3,2,0)
be PXC for Taxonomy Code.
"DATA",364.7,1470,0)
2271^N^5^^^^N
"DATA",364.7,1470,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 S IBXDATA=$G(IBXSAVE("PROVINF",IBXIEN,"C",1,1,"TAXONOMY"))
"DATA",364.7,1470,3,0)
^364.73^2^2^3170316^^
"DATA",364.7,1470,3,1,0)
Reference information as specified by the Reference Identification 
"DATA",364.7,1470,3,2,0)
Qualifier.  For Dental, this will be the Taxonomy Code.
"DATA",364.7,1471,0)
2272^N^131^^^^N
"DATA",364.7,1471,1)
S IBXDATA="OPRB"
"DATA",364.7,1472,0)
2283^N^5^^^^N
"DATA",364.7,1472,1)
D CLEANUP^IBCEFP1(.IBXSAVE),ALLIDS^IBCEFP(IBXIEN,.IBXSAVE,1)
"DATA",364.7,1472,3,0)
^^1^1^3170316^
"DATA",364.7,1472,3,1,0)
Setup IBXSAVE array for OPRB record.
"DATA",364.7,1473,0)
2273^N^5^^^^N
"DATA",364.7,1473,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7,$D(IBXSAVE("PROVINF",IBXIEN,"C",1,6,"NAME")) S IBXDATA="DD"
"DATA",364.7,1474,0)
2274^N^5^^^^N
"DATA",364.7,1474,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7,$D(IBXSAVE("PROVINF",IBXIEN,"C",1,6,"NAME")) S IBXDATA=1
"DATA",364.7,1475,0)
2275^N^5^^^^N
"DATA",364.7,1475,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,6,"NAME")),U)
"DATA",364.7,1476,0)
2276^N^5^^^^N
"DATA",364.7,1476,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,6,"NAME")),U,2)
"DATA",364.7,1477,0)
2277^N^5^^^^N
"DATA",364.7,1477,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,6,"NAME")),U,3)
"DATA",364.7,1478,0)
2278^N^5^^^^N
"DATA",364.7,1478,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,6,"NAME")),U,5)
"DATA",364.7,1479,0)
2279^N^5^^^^N
"DATA",364.7,1479,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,6,0)),U,3)
"DATA",364.7,1480,0)
2280^N^5^^^^N
"DATA",364.7,1480,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,6,0)),U,4)
"DATA",364.7,1481,0)
2281^N^5^^^^N
"DATA",364.7,1481,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7,$G(IBXSAVE("PROVINF",IBXIEN,"C",1,6,"TAXONOMY"))'="" S IBXDATA="AS"
"DATA",364.7,1482,0)
2282^N^5^^^^N
"DATA",364.7,1482,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 S IBXDATA=$G(IBXSAVE("PROVINF",IBXIEN,"C",1,6,"TAXONOMY"))
"DATA",364.7,1483,0)
2284^N^5^^^^N
"DATA",364.7,1483,1)
D CLEANUP^IBCEFP1(.IBXSAVE)
"DATA",364.7,1484,0)
2285^N^131^^^^N
"DATA",364.7,1484,1)
S IBXDATA="OPRC"
"DATA",364.7,1485,0)
2288^N^5^^^^N
"DATA",364.7,1485,1)
D CLEANUP^IBCEFP1(.IBXSAVE),ALLIDS^IBCEFP(IBXIEN,.IBXSAVE,1)
"DATA",364.7,1485,3,0)
^364.73^1^1^3171127^^
"DATA",364.7,1485,3,1,0)
Set up IBXSAVE array for OPRC record.
"DATA",364.7,1486,0)
2286^N^5^^^^N
"DATA",364.7,1486,1)
K IBXDATA ;I $$FT^IBCEF(IBXIEN)=7 S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,6,1)),U,3)
"DATA",364.7,1487,0)
2287^N^5^^^^N
"DATA",364.7,1487,1)
K IBXDATA ;I $$FT^IBCEF(IBXIEN)=7 S IBXDATA=$$NOPUNCT^IBCEF($P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,6,1)),"^",4),1)
"DATA",364.7,1488,0)
2289^N^5^^^^N
"DATA",364.7,1488,1)
K IBXDATA ;I $$FT^IBCEF(IBXIEN)=7 S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,6,2)),U,3)
"DATA",364.7,1489,0)
2290^N^5^^^^N
"DATA",364.7,1489,1)
K IBXDATA ;I $$FT^IBCEF(IBXIEN)=7 S IBXDATA=$$NOPUNCT^IBCEF($P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,6,2)),U,4),1)
"DATA",364.7,1490,0)
2291^N^5^^^^N
"DATA",364.7,1490,1)
K IBXDATA ;I $$FT^IBCEF(IBXIEN)=7 S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,6,3)),U,3)
"DATA",364.7,1491,0)
2292^N^5^^^^N
"DATA",364.7,1491,1)
K IBXDATA ;I $$FT^IBCEF(IBXIEN)=7 S IBXDATA=$$NOPUNCT^IBCEF($P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,6,3)),U,4),1)
"DATA",364.7,1492,0)
2293^N^5^^^^N
"DATA",364.7,1492,1)
K IBXDATA ;I $$FT^IBCEF(IBXIEN)=7 S IBXDATA=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,6,4)),U,3)
"DATA",364.7,1493,0)
2294^N^5^^^^N
"DATA",364.7,1493,1)
K IBXDATA ;I $$FT^IBCEF(IBXIEN)=7 S IBXDATA=$$NOPUNCT^IBCEF($P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,6,4)),U,4),1)
"DATA",364.7,1494,0)
2295^N^5^^^^N
"DATA",364.7,1494,1)
D CLEANUP^IBCEFP1(.IBXSAVE)
"DATA",364.7,1495,0)
2296^N^131^^^^N
"DATA",364.7,1495,1)
S IBXDATA="OP10"
"DATA",364.7,1496,0)
2297^N^5
"DATA",364.7,1496,1)
I $$FT^IBCEF(IBXIEN)=7 D CLEANUP^IBCEFP1(.IBXSAVE),ALLIDS^IBCEFP(IBXIEN,.IBXSAVE,1)
"DATA",364.7,1496,3,0)
^^1^1^3170316^
"DATA",364.7,1496,3,1,0)
Setup IBXSAVE array for the OP10 record.
"DATA",364.7,1497,0)
2298^N^5^^^^N
"DATA",364.7,1497,1)
K IBXSAVE("OSQ") N C,Z,Q,OK M Q=IBXSAVE("PROVINF",IBXIEN,"O") S (C,Z)=0 F  S Z=$O(Q(Z)) Q:'Z  S OK=0 X "N A F A=1:1 Q:'$D(Q(Z,6,A))  I $P(Q(Z,6,A),U,4)'="""" S OK=1 Q" I OK S C=C+1,IBXDATA(C)=$G(Q(Z)),IBXSAVE("OSQ",Z)=C D:C>1 ID^IBCEF2(C,"OP10")
"DATA",364.7,1498,0)
2299^N^5^^^^N
"DATA",364.7,1498,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 D OTHPAYC^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,6,"DD")
"DATA",364.7,1499,0)
2300^N^5^^^^N
"DATA",364.7,1499,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 D OTHPAYC^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,6,"1")
"DATA",364.7,1505,0)
2301^N^5^^^^N
"DATA",364.7,1505,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,6,"Q",1)
"DATA",364.7,1506,0)
2302^N^5^^^^N
"DATA",364.7,1506,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,6,"I",1) I $D(IBXDATA) D NOPUNCT^IBCEF73(.IBXDATA,1)
"DATA",364.7,1507,0)
2303^N^5^^^^N
"DATA",364.7,1507,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,6,"Q",2)
"DATA",364.7,1508,0)
2304^N^5^^^^N
"DATA",364.7,1508,1)
K IBXDATA D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,6,"I",2) I $D(IBXDATA) D NOPUNCT^IBCEF73(.IBXDATA,1)
"DATA",364.7,1509,0)
2305^N^5^^^^N
"DATA",364.7,1509,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,6,"Q",3)
"DATA",364.7,1510,0)
2306^N^5^^^^N
"DATA",364.7,1510,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 D OTHPAYV^IBCEF71(IBXIEN,.IBXSAVE,.IBXDATA,6,"I",3) I $D(IBXDATA) D NOPUNCT^IBCEF73(.IBXDATA,1)
"DATA",364.7,1511,0)
2307^N^5^^^^N
"DATA",364.7,1511,1)
D CLEANUP^IBCEFP1(.IBXSAVE)
"DATA",364.7,1511,3,0)
^^1^1^3170316^
"DATA",364.7,1511,3,1,0)
Clean up IBXSAVE arry after OP10 record.
"DATA",364.7,1512,0)
2308^N^131^^^^N
"DATA",364.7,1512,1)
S IBXDATA="DEN "
"DATA",364.7,1512,3,0)
^364.73^1^1^3170901^^^^
"DATA",364.7,1512,3,1,0)
Output the record id for 'DEN' record.
"DATA",364.7,1513,0)
2309^N^384^^^^N
"DATA",364.7,1513,1)
I $$FT^IBCEF(IBXIEN)=7 D DEN^IBCEF12
"DATA",364.7,1514,0)
2310^N^5^^^^N
"DATA",364.7,1514,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 D SRVDTQ^IBCEF12
"DATA",364.7,1515,0)
2311^N^5^^^^N
"DATA",364.7,1515,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 D SRVDT^IBCEF12
"DATA",364.7,1516,0)
2312^N^5^^^^N
"DATA",364.7,1516,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  S IBXDATA(Z)="AD"
"DATA",364.7,1517,0)
2313^N^5^^^^N
"DATA",364.7,1517,1)
I $$FT^IBCEF(IBXIEN)=7 S IBXNOREQ=$$NFT^IBCEF1(2,IBXIEN) K IBXDATA N Z S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  S:$P(IBXSAVE("OUTPT",Z),U,5)'="" IBXDATA(Z)=$P(IBXSAVE("OUTPT",Z),U,5)
"DATA",364.7,1519,0)
1819^N^5^^^^N
"DATA",364.7,1519,1)
K IBXDATA D CLEANUP^IBCEF78(.IBXSAVE),PAYERIDS^IBCEF78(IBXIEN,.IBXSAVE) I $P($G(IBXSAVE("CI_PID",1)),U)'="" S IBXDATA=$P($G(IBXSAVE("CI_PID",1)),U)
"DATA",364.7,1519,3,0)
^364.73^1^1^3170901^^^^
"DATA",364.7,1519,3,1,0)
Hard-coded Primary Payer ID Qualifier
"DATA",364.7,1520,0)
1820^N^5^^^^N
"DATA",364.7,1520,1)
K IBXDATA I $P($G(IBXSAVE("CI_PID",1)),U,2)'="" S IBXDATA=$P($G(IBXSAVE("CI_PID",1)),U,2)
"DATA",364.7,1520,3,0)
^364.73^5^5^3170901^^^^
"DATA",364.7,1520,3,1,0)
If header data has already been extracted, array ^TMP("IBHDR1",$J) will
"DATA",364.7,1520,3,2,0)
already exist.  Don't want to extract this field again, so kill data
"DATA",364.7,1520,3,3,0)
element so there is no output.  Positions 1-5 are the id number as
"DATA",364.7,1520,3,4,0)
assigned by ENVOY, positions 6-9 are the claim office id (default if there
"DATA",364.7,1520,3,5,0)
is none is '0000').   Also don't output data element if its value is null.
"DATA",364.7,1522,0)
1822^N^5^^^^N
"DATA",364.7,1522,1)
K IBXDATA I $P($G(IBXSAVE("CI_PSIDS",1)),U)'="" S IBXDATA=$P($G(IBXSAVE("CI_PSIDS",1)),U)
"DATA",364.7,1523,0)
1823^N^5^^^^N
"DATA",364.7,1523,1)
K IBXDATA I $P($G(IBXSAVE("CI_PSIDS",1)),U,2)'="" S IBXDATA=$P($G(IBXSAVE("CI_PSIDS",1)),U,2)
"DATA",364.7,1524,0)
1824^N^5^^^^N
"DATA",364.7,1524,1)
K IBXDATA I $P($G(IBXSAVE("CI_PSIDS",1)),U,3)'="" S IBXDATA=$P($G(IBXSAVE("CI_PSIDS",1)),U,3)
"DATA",364.7,1525,0)
1825^N^5^^^^N
"DATA",364.7,1525,1)
K IBXDATA I $P($G(IBXSAVE("CI_PSIDS",1)),U,4)'="" S IBXDATA=$P($G(IBXSAVE("CI_PSIDS",1)),U,4)
"DATA",364.7,1528,0)
2314^N^5^^^^N
"DATA",364.7,1528,1)
I $$FT^IBCEF(IBXIEN)=7 N Z,Z0 S Z=0 F  S Z=$O(IBXDATA(Z)) Q:'Z  D SETMODS^IBCVA1(IBXDATA(Z),Z,.IBXSAVE) S Z0=$P($G(IBXSAVE("PROCMODS",Z)),",") I Z0'="" S IBXDATA(Z)=Z0
"DATA",364.7,1548,0)
2315^N^5^^^^N
"DATA",364.7,1548,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z,Z0 S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  S Z0=$P($G(IBXSAVE("PROCMODS",Z)),",",2) I Z0'="" S IBXDATA(Z)=Z0
"DATA",364.7,1549,0)
2316^N^5^^^^N
"DATA",364.7,1549,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z,Z0 S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  S Z0=$P($G(IBXSAVE("PROCMODS",Z)),",",3) I Z0'="" S IBXDATA(Z)=Z0
"DATA",364.7,1552,0)
2317^N^5^^^^N
"DATA",364.7,1552,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z,Z0 S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  S Z0=$P($G(IBXSAVE("PROCMODS",Z)),",",4) K IBXSAVE("PROCMODS",Z) I Z0'="" S IBXDATA(Z)=Z0
"DATA",364.7,1553,0)
2318^N^5^^^^N
"DATA",364.7,1553,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  I $D(IBXSAVE("OUTPT",Z,"DEND")) S IBXDATA(Z)=$G(IBXSAVE("OUTPT",Z,"DEND"))
"DATA",364.7,1554,0)
2319^N^5^^^^N
"DATA",364.7,1554,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  S IBXDATA(Z)=$S($P(IBXSAVE("OUTPT",Z),U,8)="":$$DOLLAR^IBCEFG1("0.00"),1:$$DOLLAR^IBCEFG1($P(IBXSAVE("OUTPT",Z),U,8)*$P(IBXSAVE("OUTPT",Z),U,9)))
"DATA",364.7,1555,0)
2320^N^5^^^^N
"DATA",364.7,1555,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 D POS^IBCEF12 Q
"DATA",364.7,1556,0)
2321^N^5^^^^N
"DATA",364.7,1556,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  I $D(IBXSAVE("OUTPT",Z,"DEN")) S IBXDATA(Z)=$P(IBXSAVE("OUTPT",Z,"DEN"),U)
"DATA",364.7,1557,0)
2322^N^5^^^^N
"DATA",364.7,1557,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  I $D(IBXSAVE("OUTPT",Z,"DEN")) S IBXDATA(Z)=$P(IBXSAVE("OUTPT",Z,"DEN"),U,2)
"DATA",364.7,1558,0)
2323^N^5^^^^N
"DATA",364.7,1558,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  I $D(IBXSAVE("OUTPT",Z,"DEN")) S IBXDATA(Z)=$P(IBXSAVE("OUTPT",Z,"DEN"),U,3)
"DATA",364.7,1559,0)
2324^N^5^^^^N
"DATA",364.7,1559,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  I $D(IBXSAVE("OUTPT",Z,"DEN")) S IBXDATA(Z)=$P(IBXSAVE("OUTPT",Z,"DEN"),U,4)
"DATA",364.7,1560,0)
2325^N^5^^^^N
"DATA",364.7,1560,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  I $D(IBXSAVE("OUTPT",Z,"DEN")) S IBXDATA(Z)=$P(IBXSAVE("OUTPT",Z,"DEN"),U,4)
"DATA",364.7,1580,0)
2326^N^5^^^^N
"DATA",364.7,1580,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  I $D(IBXSAVE("OUTPT",Z,"DEN")) S IBXDATA(Z)=$P(IBXSAVE("OUTPT",Z,"DEN"),U,6)
"DATA",364.7,1581,0)
2327^N^131^^^^N
"DATA",364.7,1581,1)
S IBXDATA="DEN1"
"DATA",364.7,1581,3,0)
^364.73^1^1^3170322^^
"DATA",364.7,1581,3,1,0)
Output the record id for 'DEN1' record.
"DATA",364.7,1582,0)
2328^N^384^^^^N
"DATA",364.7,1582,1)
I $$FT^IBCEF(IBXIEN)=7 D DEN1^IBCEF12
"DATA",364.7,1583,0)
2329^N^5^^^^N
"DATA",364.7,1583,1)
I $$FT^IBCEF(IBXIEN)=7 D PROC^IBCEF12
"DATA",364.7,1584,0)
2330^N^5^^^^N
"DATA",364.7,1584,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  S Z0=$P(IBXSAVE("OUTPT",Z),U,7) S:$P(Z0,",")'="" IBXDATA(Z)=$P(Z0,",")
"DATA",364.7,1585,0)
2331^N^5^^^^N
"DATA",364.7,1585,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z,Z0 S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  S Z0=$P(IBXSAVE("OUTPT",Z),U,7) S:$P(Z0,",",2) IBXDATA(Z)=$P(Z0,",",2)
"DATA",364.7,1586,0)
2332^N^5^^^^N
"DATA",364.7,1586,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z,Z0 S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  S Z0=$P(IBXSAVE("OUTPT",Z),U,7) S:$P(Z0,",",3) IBXDATA(Z)=$P(Z0,",",3)
"DATA",364.7,1587,0)
2333^N^5^^^^N
"DATA",364.7,1587,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z,Z0 S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  S Z0=$P(IBXSAVE("OUTPT",Z),U,7) S:$P(Z0,",",4) IBXDATA(Z)=$P(Z0,",",4)
"DATA",364.7,1588,0)
2334^N^5^^^^N
"DATA",364.7,1588,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  I $D(IBXSAVE("OUTPT",Z,"DEN")) S IBXDATA(Z)=$P(IBXSAVE("OUTPT",Z,"DEN"),U,7)
"DATA",364.7,1589,0)
2335^N^5^^^^N
"DATA",364.7,1589,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z,DT S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  I $D(IBXSAVE("OUTPT",Z,"DEN")) S DT=$P(IBXSAVE("OUTPT",Z,"DEN"),U,8) I DT'="" S IBXDATA(Z)=$$DT^IBCEFG1(DT,"","D8")
"DATA",364.7,1590,0)
2336^N^5^^^^N
"DATA",364.7,1590,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  I $P($G(IBXSAVE("OUTPT",Z,"DEN")),U,9)'="" S IBXDATA(Z)=452
"DATA",364.7,1591,0)
2337^N^5^^^^N
"DATA",364.7,1591,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z,DT S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  I $D(IBXSAVE("OUTPT",Z,"DEN")) S DT=$P(IBXSAVE("OUTPT",Z,"DEN"),U,9) I DT'="" S IBXDATA(Z)=$$DT^IBCEFG1(DT,"","D8")
"DATA",364.7,1592,0)
2338^N^5^^^^N
"DATA",364.7,1592,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  I $P($G(IBXSAVE("OUTPT",Z,"DEN")),U,10)'="" S IBXDATA(Z)=446
"DATA",364.7,1593,0)
2339^N^5^^^^N
"DATA",364.7,1593,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z,DT S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  I $D(IBXSAVE("OUTPT",Z,"DEN")) S DT=$P(IBXSAVE("OUTPT",Z,"DEN"),U,10) I DT'="" S IBXDATA(Z)=$$DT^IBCEFG1(DT,"","D8")
"DATA",364.7,1594,0)
2340^N^5^^^^N
"DATA",364.7,1594,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  I $P($G(IBXSAVE("OUTPT",Z,"DEN")),U,11)'="" S IBXDATA(Z)=196
"DATA",364.7,1595,0)
2341^N^5^^^^N
"DATA",364.7,1595,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z,DT S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  I $D(IBXSAVE("OUTPT",Z,"DEN")) S DT=$P(IBXSAVE("OUTPT",Z,"DEN"),U,11) I DT'="" S IBXDATA(Z)=$$DT^IBCEFG1(DT,"","D8")
"DATA",364.7,1596,0)
2342^N^5^^^^N
"DATA",364.7,1596,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  I $P($G(IBXSAVE("OUTPT",Z,"DEN")),U,12)'="" S IBXDATA(Z)=198
"DATA",364.7,1597,0)
2343^N^5^^^^N
"DATA",364.7,1597,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 N Z,DT S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  I $D(IBXSAVE("OUTPT",Z,"DEN")) S DT=$P(IBXSAVE("OUTPT",Z,"DEN"),U,12) I DT'="" S IBXDATA(Z)=$$DT^IBCEFG1(DT,"","D8")
"DATA",364.7,1598,0)
2344^N^131^^^^N
"DATA",364.7,1598,1)
S IBXDATA="DEN2"
"DATA",364.7,1599,0)
2345^N^384^^^^N
"DATA",364.7,1599,1)
I $$FT^IBCEF(IBXIEN)=7 D DEN2^IBCEF12
"DATA",364.7,1600,0)
2346^N^5^^^^N
"DATA",364.7,1600,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 D DEN23^IBCEF12
"DATA",364.7,1601,0)
2347^N^5^^^^N
"DATA",364.7,1601,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 D DEN24^IBCEF12
"DATA",364.7,1602,0)
2348^N^5^^^^N
"DATA",364.7,1602,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 D DEN25^IBCEF12
"DATA",364.7,1603,0)
2349^N^5^^^^N
"DATA",364.7,1603,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 D DEN26^IBCEF12
"DATA",364.7,1604,0)
2350^N^5^^^^N
"DATA",364.7,1604,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 D DEN27^IBCEF12
"DATA",364.7,1605,0)
2351^N^5^^^^N
"DATA",364.7,1605,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 D DEN28^IBCEF12
"DATA",364.7,1606,0)
2352^N^5^^^^N
"DATA",364.7,1606,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)=7 D DEN29^IBCEF12
"DATA",364.7,1607,0)
2353^N^131^^^^N
"DATA",364.7,1607,1)
S IBXDATA="LSUR"
"DATA",364.7,1608,0)
2354^N^5^^^^N
"DATA",364.7,1608,1)
I $$FT^IBCEF(IBXIEN)=7 N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("SLPRV",Z)) Q:'Z  S IBXDATA(Z)=$G(IBXSAVE("SLPRV",Z,"SLC")) D:Z>1 ID^IBCEF2(Z,"LSUR")
"DATA",364.7,1609,0)
2370^N^5^^^^N
"DATA",364.7,1609,1)
I $$FT^IBCEF(IBXIEN)=7 D CLEANUP^IBCEFP1(.IBXSAVE),ALLIDS^IBCEFP(IBXIEN,.IBXSAVE,1,"LSUR")
"DATA",364.7,1614,0)
2355^N^5^^^^N
"DATA",364.7,1614,1)
I $$FT^IBCEF(IBXIEN)=7 N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("SLPRV",Z)) Q:'Z  S IBXDATA(Z)="" S:$P(IBXSAVE("SLPRV",Z),U)'="" IBXDATA(Z)="DD"
"DATA",364.7,1672,0)
1972^N^344^^^^N
"DATA",364.7,1672,1)
S IBXDATA=$S(IBXDATA]"":"AC",1:"") I $$FT^IBCEF(IBXIEN)=7,$P($G(^DGCR(399,IBXIEN,"U8")),U,3)="AA" S IBXDATA=""
"DATA",364.7,1673,0)
1973^N^344^^^^N
"DATA",364.7,1673,1)
I $$FT^IBCEF(IBXIEN)=7,$P($G(^DGCR(399,IBXIEN,"U8")),"^",3)="AA" S IBXDATA=""
"DATA",364.7,1688,0)
2356^N^5^^^^N
"DATA",364.7,1688,1)
I $$FT^IBCEF(IBXIEN)=7 N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("SLPRV",Z)) Q:'Z  S IBXDATA(Z)=$P(IBXSAVE("SLPRV",Z),U)
"DATA",364.7,1689,0)
2357^N^5^^^^N
"DATA",364.7,1689,1)
I $$FT^IBCEF(IBXIEN)=7 N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("SLPRV",Z)) Q:'Z  S IBXDATA(Z)=$P(IBXSAVE("SLPRV",Z),U,2)
"DATA",364.7,1703,0)
2004^N^5^^^^N
"DATA",364.7,1703,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)'=7 S Z=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,3,1)),"^",3) I Z]"" S IBXDATA=Z
"DATA",364.7,1704,0)
2005^N^5^^^^N
"DATA",364.7,1704,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)'=7 S Z=$$NOPUNCT^IBCEF($P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,3,1)),"^",4),1) I Z]"" S IBXDATA=Z
"DATA",364.7,1705,0)
2006^N^5^^^^N
"DATA",364.7,1705,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)'=7 S Z=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,3,2)),"^",3) I Z]"" S IBXDATA=Z
"DATA",364.7,1706,0)
2007^N^5^^^^N
"DATA",364.7,1706,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)'=7 S Z=$$NOPUNCT^IBCEF($P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,3,2)),"^",4),1) I Z]"" S IBXDATA=Z
"DATA",364.7,1707,0)
2008^N^5^^^^N
"DATA",364.7,1707,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)'=7 S Z=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,3,3)),"^",3) I Z]"" S IBXDATA=Z
"DATA",364.7,1708,0)
2009^N^5^^^^N
"DATA",364.7,1708,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)'=7 S Z=$$NOPUNCT^IBCEF($P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,3,3)),"^",4),1) I Z]"" S IBXDATA=Z
"DATA",364.7,1709,0)
2010^N^5^^^^N
"DATA",364.7,1709,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)'=7 S Z=$P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,3,4)),"^",3) I Z]"" S IBXDATA=Z
"DATA",364.7,1710,0)
2011^N^5^^^^N
"DATA",364.7,1710,1)
K IBXDATA I $$FT^IBCEF(IBXIEN)'=7 S Z=$$NOPUNCT^IBCEF($P($G(IBXSAVE("PROVINF",IBXIEN,"C",1,3,4)),"^",4),1) I Z]"" S IBXDATA=Z
"DATA",364.7,1727,0)
2028^N^5
"DATA",364.7,1727,1)
N Z,Z0,IBZ K IBXDATA I $$FT^IBCEF(IBXIEN)'=7 S (IBZ,Z0)=0 F  S IBZ=$O(IBXSAVE("CCOB",IBZ)) Q:'IBZ  S Z0=Z0+1,Z=0 F  S Z=$O(IBXSAVE("CCOB",IBZ,Z)) Q:'Z  I $P($G(IBXSAVE("CCOB",IBZ,Z,0)),U,21)'="" S IBXDATA(Z0)=$P(IBXSAVE("CCOB",IBZ,Z,0),U,21)
"DATA",364.7,1728,0)
2358^N^5^^^^N
"DATA",364.7,1728,1)
I $$FT^IBCEF(IBXIEN)=7 N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("SLPRV",Z)) Q:'Z  S IBXDATA(Z)=$P(IBXSAVE("SLPRV",Z),U,3)
"DATA",364.7,1729,0)
2359^N^5^^^^N
"DATA",364.7,1729,1)
I $$FT^IBCEF(IBXIEN)=7 N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("SLPRV",Z)) Q:'Z  S IBXDATA(Z)=$P(IBXSAVE("SLPRV",Z),U,4)
"DATA",364.7,1730,0)
2360^N^5^^^^N
"DATA",364.7,1730,1)
I $$FT^IBCEF(IBXIEN)=7 N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("SLPRV",Z)) Q:'Z  S IBXDATA(Z)="" S:$P(IBXSAVE("SLPRV",Z),U,6)'="" IBXDATA(Z)="XX"
"DATA",364.7,1731,0)
2361^N^5^^^^N
"DATA",364.7,1731,1)
I $$FT^IBCEF(IBXIEN)=7 N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("SLPRV",Z)) Q:'Z  S IBXDATA(Z)=$P(IBXSAVE("SLPRV",Z),U,6)
"DATA",364.7,1945,0)
2251^N^5^^^^N
"DATA",364.7,1945,1)
K IBXDATA I $P($G(IBXSAVE("CI_HPID",1)),U)'="" S IBXDATA=$P($G(IBXSAVE("CI_HPID",1)),U)
"DATA",364.7,1945,3,0)
^364.73^2^2^3170901^^
"DATA",364.7,1945,3,1,0)
If there is an HPID (Sequence 37, Piece 9), then this field will be 'XV'. 
"DATA",364.7,1945,3,2,0)
MRD;IB*2.0*516
"DATA",364.7,1946,0)
2231^N^5^^^^N
"DATA",364.7,1946,1)
K IBXDATA I $P($G(IBXSAVE("CI_HPID",1)),U,2)'="" S IBXDATA=$P($G(IBXSAVE("CI_HPID",1)),U,2) D CLEANUP^IBCEF78(.IBXSAVE)
"DATA",364.7,1946,3,0)
^364.73^1^1^3170901^^
"DATA",364.7,1946,3,1,0)
This will be the HPID from the bill/claim. MRD;IB*2.0*516
"DATA",364.7,1957,0)
2372^N^131^^^^N
"DATA",364.7,1957,1)
S IBXDATA="LSR1"
"DATA",364.7,1958,0)
2373^N^5^^^^N
"DATA",364.7,1958,1)
I $$FT^IBCEF(IBXIEN)=7 D CLEANUP^IBCEFP1(.IBXSAVE),ALLIDS^IBCEFP(IBXIEN,.IBXSAVE,1,"LSR1")
"DATA",364.7,1959,0)
2374^N^5^^^^N
"DATA",364.7,1959,1)
I $$FT^IBCEF(IBXIEN)=7 N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("SLPRV",Z)) Q:'Z  S IBXDATA(Z)=$G(IBXSAVE("SLPRV",Z,"SLC")) D:Z>1 ID^IBCEF2(Z,"LSR1")
"DATA",364.7,1960,0)
2375^N^5^^^^N
"DATA",364.7,1960,1)
I $$FT^IBCEF(IBXIEN)=7 N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("SLPRV",Z)) Q:'Z  S IBXDATA(Z)="" S:$P(IBXSAVE("SLPRV",Z),U,7)'="" IBXDATA(Z)=$P(IBXSAVE("SLPRV",Z),U,8)
"DATA",364.7,1961,0)
2376^N^5^^^^N
"DATA",364.7,1961,1)
I $$FT^IBCEF(IBXIEN)=7 N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("SLPRV",Z)) Q:'Z  S IBXDATA(Z)=$P(IBXSAVE("SLPRV",Z),U,7)
"DATA",364.7,1962,0)
2377^N^5^^^^N
"DATA",364.7,1962,1)
I $$FT^IBCEF(IBXIEN)=7 N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("SLPRV",Z)) Q:'Z  S IBXDATA(Z)="" S:$P(IBXSAVE("SLPRV",Z),U,9)'="" IBXDATA(Z)=$P(IBXSAVE("SLPRV",Z),U,10)
"DATA",364.7,1963,0)
2378^N^5^^^^N
"DATA",364.7,1963,1)
I $$FT^IBCEF(IBXIEN)=7 N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("SLPRV",Z)) Q:'Z  S IBXDATA(Z)=$P(IBXSAVE("SLPRV",Z),U,9)
"DATA",364.7,1964,0)
2379^N^5^^^^N
"DATA",364.7,1964,1)
I $$FT^IBCEF(IBXIEN)=7 N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("SLPRV",Z)) Q:'Z  S IBXDATA(Z)="" S:$P(IBXSAVE("SLPRV",Z),U,11)'="" IBXDATA(Z)=$P(IBXSAVE("SLPRV",Z),U,12)
"DATA",364.7,1965,0)
2380^N^5^^^^N
"DATA",364.7,1965,1)
I $$FT^IBCEF(IBXIEN)=7 N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("SLPRV",Z)) Q:'Z  S IBXDATA(Z)=$P(IBXSAVE("SLPRV",Z),U,11)
"DATA",364.7,1966,0)
2381^N^5^^^^N
"DATA",364.7,1966,1)
I $$FT^IBCEF(IBXIEN)=7 N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("SLPRV",Z)) Q:'Z  S IBXDATA(Z)="" S:$P(IBXSAVE("SLPRV",Z),U,5)'="" IBXDATA(Z)="AS"
"DATA",364.7,1967,0)
2382^N^5^^^^N
"DATA",364.7,1967,1)
I $$FT^IBCEF(IBXIEN)=7 N Z K IBXDATA S Z=0 F  S Z=$O(IBXSAVE("SLPRV",Z)) Q:'Z  S IBXDATA(Z)=$P(IBXSAVE("SLPRV",Z),U,5)
"FIA",36)
INSURANCE COMPANY
"FIA",36,0)
^DIC(36,
"FIA",36,0,0)
36I
"FIA",36,0,1)
y^n^p^^^^n^^n
"FIA",36,0,10)

"FIA",36,0,11)

"FIA",36,0,"RLRO")

"FIA",36,0,"VR")
2.0^IB
"FIA",36,36)
1
"FIA",36,36,.191)

"FIA",36,36,.1911)

"FIA",36,36,.192)

"FIA",36,36,.193)

"FIA",36,36,.194)

"FIA",36,36,.195)

"FIA",36,36,.196)

"FIA",36,36,.197)

"FIA",36,36,.198)

"FIA",36,36,.199)

"FIA",36,36,3.15)

"FIA",36,36.017)
1
"FIA",36,36.017,.03)

"FIA",350.9)
IB SITE PARAMETERS
"FIA",350.9,0)
^IBE(350.9,
"FIA",350.9,0,0)
350.9I
"FIA",350.9,0,1)
y^n^p^^^^n^^n
"FIA",350.9,0,10)

"FIA",350.9,0,11)

"FIA",350.9,0,"RLRO")

"FIA",350.9,0,"VR")
2.0^IB
"FIA",350.9,350.9)
1
"FIA",350.9,350.9,1.22)

"FIA",350.9,350.9,8.2)

"FIA",353)
BILL FORM TYPE
"FIA",353,0)
^IBE(353,
"FIA",353,0,0)
353
"FIA",353,0,1)
n^n^f^^n^^y^r^n
"FIA",353,0,10)

"FIA",353,0,11)
I Y=7
"FIA",353,0,"RLRO")

"FIA",353,0,"VR")
2.0^IB
"FIA",353,353)
0
"FIA",364.1)
EDI TRANSMISSION BATCH
"FIA",364.1,0)
^IBA(364.1,
"FIA",364.1,0,0)
364.1I
"FIA",364.1,0,1)
y^n^p^^^^n^^n
"FIA",364.1,0,10)

"FIA",364.1,0,11)

"FIA",364.1,0,"RLRO")

"FIA",364.1,0,"VR")
2.0^IB
"FIA",364.1,364.1)
1
"FIA",364.1,364.1,.06)

"FIA",364.4)
IB EDI TRANSMISSION RULE
"FIA",364.4,0)
^IBE(364.4,
"FIA",364.4,0,0)
364.4I
"FIA",364.4,0,1)
y^n^p^^^^n^^n
"FIA",364.4,0,10)

"FIA",364.4,0,11)

"FIA",364.4,0,"RLRO")

"FIA",364.4,0,"VR")
2.0^IB
"FIA",364.4,364.4)
1
"FIA",364.4,364.4,.05)

"FIA",364.5)
IB DATA ELEMENT DEFINITION
"FIA",364.5,0)
^IBA(364.5,
"FIA",364.5,0,0)
364.5I
"FIA",364.5,0,1)
n^n^f^^y^^y^o^n
"FIA",364.5,0,10)

"FIA",364.5,0,11)
I $$INCLUDE^IBY592PR(5,Y)
"FIA",364.5,0,"RLRO")

"FIA",364.5,0,"VR")
2.0^IB
"FIA",364.5,364.5)
0
"FIA",364.5,364.53)
0
"FIA",364.6)
IB FORM SKELETON DEFINITION
"FIA",364.6,0)
^IBA(364.6,
"FIA",364.6,0,0)
364.6IP
"FIA",364.6,0,1)
n^n^f^^y^^y^o^n
"FIA",364.6,0,10)

"FIA",364.6,0,11)
I $$INCLUDE^IBY592PR(6,Y)
"FIA",364.6,0,"RLRO")

"FIA",364.6,0,"VR")
2.0^IB
"FIA",364.6,364.6)
0
"FIA",364.7)
IB FORM FIELD CONTENT
"FIA",364.7,0)
^IBA(364.7,
"FIA",364.7,0,0)
364.7IP
"FIA",364.7,0,1)
n^n^f^^y^^y^o^n
"FIA",364.7,0,10)

"FIA",364.7,0,11)
I $$INCLUDE^IBY592PR(7,Y)
"FIA",364.7,0,"RLRO")

"FIA",364.7,0,"VR")
2.0^IB
"FIA",364.7,364.7)
0
"FIA",364.7,364.73)
0
"FIA",399)
BILL/CLAIMS
"FIA",399,0)
^DGCR(399,
"FIA",399,0,0)
399I
"FIA",399,0,1)
y^n^p^^^^n^^n
"FIA",399,0,10)

"FIA",399,0,11)

"FIA",399,0,"RLRO")

"FIA",399,0,"VR")
2.0^IB
"FIA",399,399)
1
"FIA",399,399,.19)

"FIA",399,399,41)

"FIA",399,399,92)

"FIA",399,399,93)

"FIA",399,399,94)

"FIA",399,399,95)

"FIA",399,399,96)

"FIA",399,399,97)

"FIA",399,399,222)

"FIA",399,399,285)

"FIA",399,399.0222)
1
"FIA",399,399.0222,.01)

"FIA",399,399.0304)
1
"FIA",399,399.0304,60)

"FIA",399,399.0304,90.01)

"FIA",399,399.0304,90.02)

"FIA",399,399.0304,90.03)

"FIA",399,399.0304,90.04)

"FIA",399,399.0304,90.05)

"FIA",399,399.0304,90.06)

"FIA",399,399.0304,90.07)

"FIA",399,399.0304,90.08)

"FIA",399,399.0304,90.09)

"FIA",399,399.0304,90.1)

"FIA",399,399.0304,90.11)

"FIA",399,399.0304,90.12)

"FIA",399,399.0304,91)

"FIA",399,399.0404)
1
"FIA",399,399.0404,.01)

"FIA",399,399.041)
1
"FIA",399,399.041,.01)

"FIA",399,399.096)
0
"FIA",399,399.30491)
1
"FIA",399,399.30491,.01)

"FIA",399,399.30491,.02)

"FIA",399,399.30491,.03)

"FIA",399,399.30491,.04)

"FIA",399,399.30491,.05)

"FIA",399,399.30491,.06)

"FIA",399,399.30491,.07)

"INI")
IBY592PR
"INIT")
IBY592PO
"IX",36,36,"AEDIX",0)
36^AEDIX^277STAT TRANSACTION PAYER STORAGE US129^MU^^R^IR^W^36.017^^^^^S
"IX",36,36,"AEDIX",.1,0)
^^2^2^3170508^
"IX",36,36,"AEDIX",.1,1,0)
This cross reference allows for reporting of 277STAT updates to the EDI 
"IX",36,36,"AEDIX",.1,2,0)
number to determine the correct Payer ID.
"IX",36,36,"AEDIX",1)
S ^DIC(36,"AEDIX",X(1),DA(1),X(2),X(3))=X(4)
"IX",36,36,"AEDIX",1.4)
S X=(X(1)]""&(X(2)]"")&(X(3)]""))
"IX",36,36,"AEDIX",2)
Q
"IX",36,36,"AEDIX",11.1,0)
^.114IA^4^4
"IX",36,36,"AEDIX",11.1,1,0)
1^F^36.017^.02^10^^F
"IX",36,36,"AEDIX",11.1,2,0)
2^F^36.017^.01^30^^F
"IX",36,36,"AEDIX",11.1,3,0)
3^F^36.017^.03^1^^F
"IX",36,36,"AEDIX",11.1,4,0)
4^F^36.017^.04^30^^F
"IX",364.4,364.4,"AD",0)
364.4^AD^Sets the first level of xref to determine which edits are most general.^MU^^R^IR^I^364.4^^^^^S
"IX",364.4,364.4,"AD",1)
S ^IBE(364.4,"AD",X2(1),X2(2),$S(X2(3)=3:X2(3),X2(6)=0:X2(3)#2+1,1:X2(3)),X2(4),DA)=+X2(5)
"IX",364.4,364.4,"AD",1.4)
I X2(1)=""!(X2(2)="")!(X2(3)="")!(X2(4)="") S X=0
"IX",364.4,364.4,"AD",2)
K ^IBE(364.4,"AD",X1(1),X1(2),$S(X1(3)=3:X1(3),X1(6)=0:X1(3)#2+1,1:X1(3)),X1(4),DA)
"IX",364.4,364.4,"AD",2.4)
I X1(1)=""!(X1(2)="")!(X1(3)="")!(X1(4)="") S X=0
"IX",364.4,364.4,"AD",2.5)
K ^IBE(364.4,"AD")
"IX",364.4,364.4,"AD",11.1,0)
^.114IA^6^6
"IX",364.4,364.4,"AD",11.1,1,0)
1^F^364.4^.03^^1^F
"IX",364.4,364.4,"AD",11.1,2,0)
2^F^364.4^.04^^2^F
"IX",364.4,364.4,"AD",11.1,3,0)
3^F^364.4^.05^^3^F
"IX",364.4,364.4,"AD",11.1,4,0)
4^F^364.4^.07^^4^F
"IX",364.4,364.4,"AD",11.1,5,0)
5^F^364.4^.06^^^F
"IX",364.4,364.4,"AD",11.1,6,0)
6^F^364.4^.11^^^F
"IX",364.6,364.6,"ALL",0)
364.6^ALL^Allows for identification of local override fields that apply to ALL^MU^^F^IR^I^364.6^^^^^S
"IX",364.6,364.6,"ALL",1)
S ^IBA(364.7,"ALL",DA,X2(5))=""
"IX",364.6,364.6,"ALL",1.4)
I X2(4)'="L"!'X2(5)!(X2(2)'="")!(X2(3)'="")!'X2(1) S X=0
"IX",364.6,364.6,"ALL",2)
K ^IBA(364.7,"ALL",DA,X1(5))
"IX",364.6,364.6,"ALL",2.4)
I X1(4)'="L"!'X1(5)!(X1(2)'="")!(X1(3)'="")!'X1(1) S X=0
"IX",364.6,364.6,"ALL",2.5)
K ^IBA(364.7,"ALL")
"IX",364.6,364.6,"ALL",11.1,0)
^.114IA^5^5
"IX",364.6,364.6,"ALL",11.1,1,0)
1^F^364.6^.03^^1^F
"IX",364.6,364.6,"ALL",11.1,1,1)
 
"IX",364.6,364.6,"ALL",11.1,2,0)
2^C
"IX",364.6,364.6,"ALL",11.1,2,1.5)
N Z S Z=+$O(^IBA(364.7,"B",DA,0)) I Z S X=$P($G(^IBA(364.7,Z,0)),U,5)
"IX",364.6,364.6,"ALL",11.1,3,0)
3^C
"IX",364.6,364.6,"ALL",11.1,3,1.5)
N Z S Z=+$O(^IBA(364.7,"B",DA,0)) I Z S X=$P($G(^IBA(364.7,Z,0)),U,6)
"IX",364.6,364.6,"ALL",11.1,4,0)
4^C
"IX",364.6,364.6,"ALL",11.1,4,1.5)
N Z S Z=+$O(^IBA(364.7,"B",DA,0)) I Z S X=$P($G(^IBA(364.7,Z,0)),U,2)
"IX",364.6,364.6,"ALL",11.1,5,0)
5^C
"IX",364.6,364.6,"ALL",11.1,5,1.5)
S X=+$O(^IBA(364.7,"B",DA,0))
"IX",364.6,364.6,"C",0)
364.6^C^Field name lookup^R^^F^IR^I^364.6^^^^^LS
"IX",364.6,364.6,"C",1)
S ^IBA(364.6,"C",$E(X,1,40),DA)=""
"IX",364.6,364.6,"C",2)
K ^IBA(364.6,"C",$E(X,1,40),DA)
"IX",364.6,364.6,"C",2.5)
K ^IBA(364.6,"C")
"IX",364.6,364.6,"C",11.1,0)
^.114IA^1^1
"IX",364.6,364.6,"C",11.1,1,0)
1^F^364.6^.1^40^1^F
"IX",364.6,364.6,"C",11.1,1,2)
S X=$$UP^XLFSTR(X)
"IX",364.6,364.6,"D",0)
364.6^D^XREF BY FORM,PAGE,LINE,COL TO SIMPLIFY DEVELOPMENT^MU^^R^IR^I^364.6^^^^^LS
"IX",364.6,364.6,"D",1)
S ^IBA(364.6,"D",X2(1)_","_X2(2)_","_X2(3)_","_X2(4),DA)=""
"IX",364.6,364.6,"D",1.4)
I X2(1)=""!(X2(2)="")!(X2(3)="")!(X2(4)="") S X=0
"IX",364.6,364.6,"D",2)
K ^IBA(364.6,"D",X1(1)_","_X1(2)_","_X1(3)_","_X1(4),DA)
"IX",364.6,364.6,"D",2.4)
I X1(1)=""!(X1(2)="")!(X1(3)="")!(X1(4)="") S X=0
"IX",364.6,364.6,"D",2.5)
K ^IBA(364.6,"D")
"IX",364.6,364.6,"D",11.1,0)
^.114IA^4^4
"IX",364.6,364.6,"D",11.1,1,0)
1^F^364.6^.01^^1^F
"IX",364.6,364.6,"D",11.1,2,0)
2^F^364.6^.04^^^F
"IX",364.6,364.6,"D",11.1,3,0)
3^F^364.6^.05^^^F
"IX",364.6,364.6,"D",11.1,4,0)
4^F^364.6^.08^^^F
"IX",364.7,364.7,"ALL",0)
364.7^ALL^Xref contains all local overrides defined for all insurance and type^MU^^F^IR^I^364.7^^^^^S
"IX",364.7,364.7,"ALL",1)
S ^IBA(364.7,"ALL",X2(2),DA)=""
"IX",364.7,364.7,"ALL",1.4)
I 'X2(2)!(X2(4)'="")!(X2(5)'="")!(X2(3)'="L") S X=0
"IX",364.7,364.7,"ALL",2)
K ^IBA(364.7,"ALL",X1(2),DA)
"IX",364.7,364.7,"ALL",2.4)
I 'X1(2)!(X1(4)'="")!(X1(5)'="")!(X1(3)'="L") S X=0
"IX",364.7,364.7,"ALL",2.5)
K ^IBA(364.7,"ALL")
"IX",364.7,364.7,"ALL",11.1,0)
^.114IA^5^5
"IX",364.7,364.7,"ALL",11.1,1,0)
1^F^364.7^.01^15^^F
"IX",364.7,364.7,"ALL",11.1,1,3)
 
"IX",364.7,364.7,"ALL",11.1,2,0)
2^C^^^10^1
"IX",364.7,364.7,"ALL",11.1,2,1.5)
S X=$P($G(^IBA(364.6,+X(1),0)),U,3)
"IX",364.7,364.7,"ALL",11.1,3,0)
3^F^364.7^.02^10^^F
"IX",364.7,364.7,"ALL",11.1,3,3)
 
"IX",364.7,364.7,"ALL",11.1,4,0)
4^F^364.7^.05^20^^F
"IX",364.7,364.7,"ALL",11.1,4,3)
 
"IX",364.7,364.7,"ALL",11.1,5,0)
5^F^364.7^.06^20^^F
"IX",364.7,364.7,"ALL",11.1,5,3)
 
"IX",399,399,"ABP",0)
399^ABP^Update default taxonomy codes and billing provider IDs^MU^^R^IR^I^399^^^^^A
"IX",399,399,"ABP",.1,0)
^^17^17^3091019
"IX",399,399,"ABP",.1,1,0)
Whenever the fields in this x-ref are changed in any way (add/edit/delete)
"IX",399,399,"ABP",.1,2,0)
the billing provider and service facility for the claim may change so we
"IX",399,399,"ABP",.1,3,0)
need to recalculate the default values of the billing provider taxonomy
"IX",399,399,"ABP",.1,4,0)
code, the service facility taxonomy code, and the billing provider
"IX",399,399,"ABP",.1,5,0)
secondary IDs and Qualifiers for every payer on the claim.
"IX",399,399,"ABP",.1,6,0)
 
"IX",399,399,"ABP",.1,7,0)
Please note that this x-ref will potentially update the values of 8
"IX",399,399,"ABP",.1,8,0)
fields in file 399:
"IX",399,399,"ABP",.1,9,0)
 
"IX",399,399,"ABP",.1,10,0)
399,243 - SERVICE FACILITY TAXONOMY
"IX",399,399,"ABP",.1,11,0)
399,252 - BILLING PROVIDER TAXONOMY
"IX",399,399,"ABP",.1,12,0)
399,122 - PRIMARY PROVIDER #
"IX",399,399,"ABP",.1,13,0)
399,123 - SECONDARY PROVIDER #
"IX",399,399,"ABP",.1,14,0)
399,124 - TERTIARY PROVIDER #
"IX",399,399,"ABP",.1,15,0)
399,128 - PRIMARY ID QUALIFIER
"IX",399,399,"ABP",.1,16,0)
399,129 - SECONDARY ID QUALIFIER
"IX",399,399,"ABP",.1,17,0)
399,130 - TERTIARY ID QUALIFIER
"IX",399,399,"ABP",1)
D TAX^IBCEF79(DA)
"IX",399,399,"ABP",2)
D TAX^IBCEF79(DA)
"IX",399,399,"ABP",11.1,0)
^.114IA^4^4
"IX",399,399,"ABP",11.1,1,0)
1^F^399^.22^^^F
"IX",399,399,"ABP",11.1,2,0)
2^F^399^232^^^F
"IX",399,399,"ABP",11.1,3,0)
3^F^399^136^^^F
"IX",399,399,"ABP",11.1,4,0)
4^F^399^.19^^^F
"IX",399,399,"ADT",0)
399^ADT^This index is used to identify entries in file 228.2^R^^F^IR^W^399.30491^^^^^S
"IX",399,399,"ADT",.1,0)
^^3^3^3180731^
"IX",399,399,"ADT",.1,1,0)
This index will indentify entries in file 228.2, Treatment Plan 
"IX",399,399,"ADT",.1,2,0)
Transaction file, that were used to default Dental related data at the 
"IX",399,399,"ADT",.1,3,0)
claim line level.
"IX",399,399,"ADT",1)
S ^DGCR(399,"ADT",$E(X,1,20),DA(2),DA(1),DA)=""
"IX",399,399,"ADT",2)
K ^DGCR(399,"ADT",$E(X,1,20),DA(2),DA(1),DA)
"IX",399,399,"ADT",2.5)
K ^DGCR(399,"ADT")
"IX",399,399,"ADT",11.1,0)
^.114IA^1^1
"IX",399,399,"ADT",11.1,1,0)
1^F^399.30491^.07^20^1^F
"IX",399,399,"ADT",11.1,1,3)

"IX",399,399,"AK",0)
399^AK^Update the line level providers for claim FORM TYPE change.^MU^^F^IR^I^399^^^^^A
"IX",399,399,"AK",.1,0)
^^36^36^3101022^
"IX",399,399,"AK",.1,1,0)
For Patch IB*2.0*432:
"IX",399,399,"AK",.1,2,0)
 
"IX",399,399,"AK",.1,3,0)
The patch introduces line providers to the Bill/Claims process. Line 
"IX",399,399,"AK",.1,4,0)
providers (Sub-file 399.0404) are based on the claim FORM TYPE. So, when
"IX",399,399,"AK",.1,5,0)
there is a change in claim FORM TYPE, then we want to update the line
"IX",399,399,"AK",.1,6,0)
level providers to be in agreement with the claim FORM TYPE (see below for
"IX",399,399,"AK",.1,7,0)
FORM TYPE and allowable line provider types). In the case when the FORM
"IX",399,399,"AK",.1,8,0)
TYPE field is changed, then the line provider types are checked to see if
"IX",399,399,"AK",.1,9,0)
any, or all, line providers need to be deleted from the claim.
"IX",399,399,"AK",.1,10,0)
 
"IX",399,399,"AK",.1,11,0)
Logic:
"IX",399,399,"AK",.1,12,0)
 
"IX",399,399,"AK",.1,13,0)
(1) IF $$LNPRVFT^IBCEU7(X,.IBLNPRV) is TRUE, then we have line providers
"IX",399,399,"AK",.1,14,0)
    in the IBLNPRV array to be deleted.
"IX",399,399,"AK",.1,15,0)
    Note: IBLNPRV array holds the procedure IENs (Sub-file 399.0304), and
"IX",399,399,"AK",.1,16,0)
    line provider IENs and .01 field (Sub-file 399.0404,.01) equal to the 
"IX",399,399,"AK",.1,17,0)
    delete indicator "@" in FDA format 
"IX",399,399,"AK",.1,18,0)
    (FDA_ROOT(FILE#,"IENS",FIELD#)="VALUE".
"IX",399,399,"AK",.1,19,0)
 
"IX",399,399,"AK",.1,20,0)
(2) IF (1) TRUE, then we call FILE^DIE("E","IBLNPRV") to delete the line
"IX",399,399,"AK",.1,21,0)
level providers in the IBLNPRV array.
"IX",399,399,"AK",.1,22,0)
 
"IX",399,399,"AK",.1,23,0)
Allowable line provider types by FORM TYPE:
"IX",399,399,"AK",.1,24,0)
 
"IX",399,399,"AK",.1,25,0)
Allowable line provider functions for UB04 (FORM TYPE = 3)
"IX",399,399,"AK",.1,26,0)
  Inpatient and UB04 Outpatient:
"IX",399,399,"AK",.1,27,0)
   - Rendering Provider(VAL=3).
"IX",399,399,"AK",.1,28,0)
   - Referring Provider(VAL=1).
"IX",399,399,"AK",.1,29,0)
   - Operating Physician(VAL=2).
"IX",399,399,"AK",.1,30,0)
   - Other Operating Physician(VAL=9).
"IX",399,399,"AK",.1,31,0)
 
"IX",399,399,"AK",.1,32,0)
Allowable line provider functions for CMS 1500 (FORM TYPE = 2)
"IX",399,399,"AK",.1,33,0)
  Inpatient and CMS 1500 Outpatient:
"IX",399,399,"AK",.1,34,0)
   - Rendering Provider(VAL=3).
"IX",399,399,"AK",.1,35,0)
   - Referring Provider(VAL=1).
"IX",399,399,"AK",.1,36,0)
   - Supervising Provider(VAL=5).
"IX",399,399,"AK",1)
N IBLNPRV I $$LNPRVFT^IBCEU7(X,.IBLNPRV) D FILE^DIE("E","IBLNPRV") Q
"IX",399,399,"AK",2)
Q
"IX",399,399,"AK",11.1,0)
^.114IA^1^1
"IX",399,399,"AK",11.1,1,0)
1^F^399^.19^20^^F
"IX",399,399,"AL",0)
399^AL^Remove line level info from inpatient UBs.^MU^^F^IR^I^399^^^^^A
"IX",399,399,"AL",.1,0)
^^11^11^3110301^
"IX",399,399,"AL",.1,1,0)
For Patch IB*2.0*432:
"IX",399,399,"AL",.1,2,0)
 
"IX",399,399,"AL",.1,3,0)
The patch introduces line providers and line level attachment 
"IX",399,399,"AL",.1,4,0)
information to the Bill/Claims process. Billers are prevented from 
"IX",399,399,"AL",.1,5,0)
entering this information for inpatient UBs.  However, if the biller 
"IX",399,399,"AL",.1,6,0)
entered the information before changing the FORM TYPE to UB, the data may
"IX",399,399,"AL",.1,7,0)
exist and needs to be cleaned up.  The clean up routine removes 
"IX",399,399,"AL",.1,8,0)
following line level attachment information from the PROCEDURES sub-file
"IX",399,399,"AL",.1,9,0)
(#399.0304): (#70) ATTACHMENT CONTROL NUMBER, (#71) ATTACHMENT REPORT
"IX",399,399,"AL",.1,10,0)
TYPE and (#72) ATTACHMENT REPORT TRANS CODE. It also removes all line
"IX",399,399,"AL",.1,11,0)
level provider information in the LINE PROVIDER sub-file (#399.0404).
"IX",399,399,"AL",1)
D REMOVE^IBCEU7(DA,X(1))
"IX",399,399,"AL",1.4)
S X=X(1)=3
"IX",399,399,"AL",2)
Q
"IX",399,399,"AL",11.1,0)
^.114IA^1^1
"IX",399,399,"AL",11.1,1,0)
1^F^399^.19^20^^F
"IX",399,399,"AL",11.1,1,3)

"IX",399,399.0404,"C",0)
399.0404^C^External value of LINE FUNCTION field.^R^^F^IR^I^399.0404^^^^^LS
"IX",399,399.0404,"C",1)
S ^DGCR(399,DA(2),"CP",DA(1),"LNPRV","C",$E(X(2),1,30),DA)=""
"IX",399,399.0404,"C",2)
K ^DGCR(399,DA(2),"CP",DA(1),"LNPRV","C",$E(X(2),1,30),DA)
"IX",399,399.0404,"C",2.5)
K ^DGCR(399,DA(2),"CP",DA(1),"LNPRV","C")
"IX",399,399.0404,"C",11.1,0)
^.114IA^2^2
"IX",399,399.0404,"C",11.1,1,0)
1^F^399.0404^.01^30^^F
"IX",399,399.0404,"C",11.1,1,3)

"IX",399,399.0404,"C",11.1,2,0)
2^C^^^30^1
"IX",399,399.0404,"C",11.1,2,1.5)
S X=$$EXTERNAL^DILFD(399.0404,.01,,X(1))
"KRN",.402,1510,-1)
0^4
"KRN",.402,1510,0)
IB SCREEN5^3180730.1555^@^399^^@^3180822
"KRN",.402,1510,"DIAB",1,1,399.04,0)
ALL
"KRN",.402,1510,"DIAB",1,1,399.043,0)
ALL
"KRN",.402,1510,"DR",1,399)
S:IBDR20'["53" Y="@51";S:$D(IBOUT) Y="@999";43;158//ELECTIVE;@999;K IBOUT;@51;S:IBDR20'["51" Y="@52";.03;@52;S:IBDR20'["52" Y="@55";@55;@56;S:IBDR20'["57" Y="@58";41;@56;@58;S:IBDR20'["58" Y="@54";40;@54;S:IBDR20'["54" Y="@59";
"KRN",.402,1510,"DR",1,399,1)
S IBZ20=$P(^DGCR(399,DA,0),U,9);I IBZ20="",$$FT^IBCEF(DA)=7 S Y="@80";.09;S IBASKCOD=1;@59;S:IBDR20'["59" Y="@999";I $P(^DGCR(399,DA,0),U,19)=2 S Y="@999";47;S Y="@999";@80;.09//HCPCS;S IBASKCOD=1;S Y="@59";@999;
"KRN",.402,1510,"DR",2,399.04)
.01
"KRN",.402,1510,"DR",2,399.041)
.01;.02;I $P($G(^DGCR(399.1,+^DGCR(399,DA(1),"OC",DA,0),0)),U,9)'=2 S Y="@554";.03;S Y="@555";@554;I '$P(^DGCR(399.1,+^DGCR(399,DA(1),"OC",DA,0),0),U,10) S Y="@555";.04;@555;
"KRN",.402,1510,"DR",2,399.043)
.01
"KRN",.402,1510,"DR",2,399.047)
.01;.02;
"KRN",.402,1510,"ROU")
^IBXS5
"KRN",.402,1510,"ROUOLD")
IBXS5
"KRN",.402,1513,-1)
0^1
"KRN",.402,1513,0)
IB SCREEN8^3171130.1401^@^399^^@^3180201
"KRN",.402,1513,"DIAB",1,0,399,1)
PROP/CAS EXTENSION NUMBER;"Contact Phone Extension"
"KRN",.402,1513,"DIAB",1,0,399,2)
DISABILITY START DATE;"Disability Start Date"
"KRN",.402,1513,"DIAB",1,0,399,5)
TREATMENT INDICATOR;"Treatment Indicator"
"KRN",.402,1513,"DIAB",2,0,399,2)
DISABILITY END DATE;"Disability End Date"
"KRN",.402,1513,"DIAB",2,0,399,3)
SPECIAL PROGRAM INDICATOR;"Special Program"
"KRN",.402,1513,"DIAB",4,0,399,0)
COB TOTAL NON-COVERED AMOUNT;"COB Non-Covered Charge Amt"
"KRN",.402,1513,"DIAB",4,0,399,1)
PRIMARY SURGICAL PROC CODE;"Primary Code"
"KRN",.402,1513,"DIAB",4,0,399,5)
ATTACHMENT REPORT TYPE;"Report Type"
"KRN",.402,1513,"DIAB",5,0,399,1)
SECONDARY SURGICAL PROC CODE;"Secondary Code"
"KRN",.402,1513,"DIAB",5,0,399,3)
HOMEBOUND;"Homebound"
"KRN",.402,1513,"DIAB",5,0,399,5)
ATTACHMENT REPORT TRANS CODE;"Transmission Method"
"KRN",.402,1513,"DIAB",6,0,399,2)
ASSUMED CARE DATE;"Assumed Care Date"
"KRN",.402,1513,"DIAB",7,0,399,0)
PROPERTY/CASUALTY CLAIM NUMBER;"Claim Number"
"KRN",.402,1513,"DIAB",7,0,399,2)
RELINQUISHED CARE DATE;"Relinquished Care Date"
"KRN",.402,1513,"DIAB",7,0,399,5)
ATTACHMENT CONTROL NUMBER;"Attachment Control #"
"KRN",.402,1513,"DIAB",8,0,399,1)
ATTACHMENT REPORT TYPE;"Report Type"
"KRN",.402,1513,"DIAB",8,0,399,3)
DATE LAST SEEN;"Date Last Seen"
"KRN",.402,1513,"DIAB",8,0,399,4)
BANDING DATE;"Banding Date"
"KRN",.402,1513,"DIAB",9,0,399,0)
PROP/CAS DATE OF 1ST CONTACT;"Date of 1st Contact"
"KRN",.402,1513,"DIAB",9,0,399,1)
ATTACHMENT REPORT TRANS CODE;"Transmission Method"
"KRN",.402,1513,"DIAB",9,0,399,4)
TREATMENT MONTHS COUNT;"Treatment Months Count"
"KRN",.402,1513,"DIAB",10,0,399,0)
PROPERTY/CASUALTY CONTACT NAME;"Contact Name"
"KRN",.402,1513,"DIAB",10,0,399,1)
ATTACHMENT CONTROL NUMBER;"Attachment Control #"
"KRN",.402,1513,"DIAB",10,0,399,4)
TREATMENT MONTHS REMAINING;"Treatment Months Remaining Count"
"KRN",.402,1513,"DIAB",10,0,399,5)
PROPERTY/CASUALTY CLAIM NUMBER;"Claim Number"
"KRN",.402,1513,"DIAB",11,0,399,0)
PROP/CAS COMMUNICATION NUMBER;"Contact Phone"
"KRN",.402,1513,"DR",1,399)
@81;I $$FT^IBCEF(IBIFN)=7 S Y="@801";S:IBDR20'["81" Y="@82";260COB Non-Covered Charge Amt~;@82;S:IBDR20'["82" Y="@83";261Claim Number~;S:IBT=3 Y="@84";262Date of 1st Contact~;268Contact Name~;269Contact Phone~;
"KRN",.402,1513,"DR",1,399,1)
269.1Contact Phone Extension~;@83;S:IBDR20'["83" Y="@84";266Primary Code~;267Secondary Code~;@84;S:IBDR20'["84" Y="@85";285Report Type~;286Transmission Method~;284Attachment Control #~;@85;S:IBDR20'["85" Y="@86";
"KRN",.402,1513,"DR",1,399,2)
263Disability Start Date~;264Disability End Date~;@86;S:IBDR20'["86" Y="@87";S:$P($G(^DGCR(399,DA,0)),U,19)=3 Y="@87";282Assumed Care Date~;283Relinquished Care Date~;@87;S:IBDR20'["87" Y="@88";
"KRN",.402,1513,"DR",1,399,3)
238////^S X=$S($P($G(^DGCR(399,DA,"U2")),U,16)'="":$P($G(^DGCR(399,DA,"U2")),U,16),$$WNRBILL^IBEFUNC(DA):"31",1:"");238Special Program~;@88;S:IBDR20'["88" Y="@89";236Homebound~;@89;S:IBDR20'["89" Y="@899";237Date Last Seen~;
"KRN",.402,1513,"DR",1,399,4)
S Y="@899";@801;S $Y=3;S:IBDR20'["81" Y="@802";96;@802;S:IBDR20'["82" Y="@803";92Banding Date~;93Treatment Months Count~;94Treatment Months Remaining Count~;I $P($G(^DGCR(399,DA,"DEN")),U,2)'="",$P($G(^("DEN")),U,3)'="" S Y="@803";
"KRN",.402,1513,"DR",1,399,5)
95Treatment Indicator~;@803;S:IBDR20'["83" Y="@804";285Report Type~;286Transmission Method~;S:$P($G(^DGCR(399,DA,"U8")),U,3)="AA" Y="@804";284Attachment Control #~;@804;S:IBDR20'["84" Y="@899";261Claim Number~;@899;
"KRN",.402,1513,"DR",2,399.096)
.01;.02;
"KRN",.402,1513,"ROU")
^IBXS8
"KRN",.402,1513,"ROUOLD")
IBXS8
"KRN",.402,1838,-1)
0^3
"KRN",.402,1838,0)
IBEDIT INS CO1^3180327.1813^^36^^^3180301
"KRN",.402,1838,"DIAB",1,0,36,8)
EDI INST SECONDARY ID(2);"EDI - 2ND Inst Payer Sec. ID"
"KRN",.402,1838,"DIAB",1,0,36,9)
EDI ID NUMBER - PROF;"EDI - Prof Payer Primary ID"
"KRN",.402,1838,"DIAB",1,0,36,13)
EDI PROF SECONDARY ID QUAL(2);"EDI - 2ND Prof Payer Sec. ID Qualifier"
"KRN",.402,1838,"DIAB",1,0,36,18)
MAX NUMBER TEST BILLS PER DAY;"MAX # TEST BILLS TO TRANSMIT PER DAY"
"KRN",.402,1838,"DIAB",1,0,36,19)
REF PROV SEC ID DEF CMS-1500//UPIN;"Default ID (1500)"
"KRN",.402,1838,"DIAB",1,1,36.015,0)
.01;"EDI - Alt Inst Payer Primary ID Type"
"KRN",.402,1838,"DIAB",1,1,36.016,0)
.01;"EDI - Alt Prof Payer Primary ID Type"
"KRN",.402,1838,"DIAB",1,1,36.03,0)
ALL
"KRN",.402,1838,"DIAB",2,0,36,10)
EDI PROF SECONDARY ID QUAL(1);"EDI - 1ST Prof Payer Sec. ID Qualifier"
"KRN",.402,1838,"DIAB",2,0,36,19)
REF PROV SEC ID REQ ON CLAIMS;"Require ID on Claim"
"KRN",.402,1838,"DIAB",2,0,36,23)
ANOTHER CO. PROCESS RX CLAIMS?;T
"KRN",.402,1838,"DIAB",2,1,36.015,0)
.02;"EDI - Alt Inst Payer Primary ID"
"KRN",.402,1838,"DIAB",2,1,36.016,0)
.02;"EDI - Alt Prof Payer Primary ID"
"KRN",.402,1838,"DIAB",3,0,36,1)
ANOTHER CO. PROCESS PRECERTS?;T
"KRN",.402,1838,"DIAB",3,0,36,17)
BIN NUMBER;"EDI - Bin Number"
"KRN",.402,1838,"DIAB",4,0,36,3)
15;"EDI - Alt Inst Payer Primary ID Type"
"KRN",.402,1838,"DIAB",4,0,36,19)
ATT/REND ID BILL SEC ID PROF//NO;"Use Att/Rend ID as Billing Provider Sec. ID (1500)?"
"KRN",.402,1838,"DIAB",5,0,36,5)
EDI INST SECONDARY ID(1);"EDI - 1ST Inst Payer Sec. ID"
"KRN",.402,1838,"DIAB",5,0,36,18)
PERF PROV SECOND ID TYPE 1500;"Default ID (1500)"
"KRN",.402,1838,"DIAB",5,0,36,19)
ATT/REND ID BILL SEC ID INST//NO;"Use Att/Rend ID as Billing Provider Sec. ID (UB)?"
"KRN",.402,1838,"DIAB",6,0,36,2)
EDI ID NUMBER - INST;"EDI - Inst Payer Primary ID"
"KRN",.402,1838,"DIAB",6,0,36,3)
EDI INST SECONDARY ID QUAL(1);"EDI - 1ST Inst Payer Sec. ID Qualifier"
"KRN",.402,1838,"DIAB",6,0,36,6)
EDI INST SECONDARY ID QUAL(2);"EDI - 2ND Inst Payer Sec. ID Qualifier"
"KRN",.402,1838,"DIAB",6,0,36,14)
EDI PROF SECONDARY ID(2);"EDI - 2ND Prof Payer Sec. ID"
"KRN",.402,1838,"DIAB",6,0,36,15)
EDI ID NUMBER - DENTAL;"EDI - Dental Payer Primary ID"
"KRN",.402,1838,"DIAB",6,0,36,16)
ELECTRONIC INSURANCE TYPE;"EDI - Insurance Type"
"KRN",.402,1838,"DIAB",6,0,36,18)
PERF PROV SECOND ID TYPE UB;"Default ID (UB)"
"KRN",.402,1838,"DIAB",6,0,36,25)
INS COMPANY LINK TYPE;T
"KRN",.402,1838,"DIAB",7,0,36,9)
16;"EDI - Alt Prof Payer Primary ID Type"
"KRN",.402,1838,"DIAB",7,0,36,11)
EDI PROF SECONDARY ID(1);"EDI - 1ST Prof Payer Sec. ID"
"KRN",.402,1838,"DIAB",7,0,36,17)
PRINT SEC/TERT AUTO CLAIMS?;"EDI - Print Sec/Tert Auto Claims?"
"KRN",.402,1838,"DIAB",7,0,36,18)
SECONDARY ID REQUIREMENTS;"Require ID on Claim"
"KRN",.402,1838,"DIAB",7,0,36,26)
INS COMPANY LINK PARENT;T
"KRN",.402,1838,"DIAB",8,0,36,17)
PRINT SEC MED CLAIMS W/O MRA;"EDI - Print Medicare Sec Claims w/o MRA?"
"KRN",.402,1838,"DIAB",11,0,36,1)
TRANSMIT ELECTRONICALLY;"EDI - Transmit?"
"KRN",.402,1838,"DIAB",12,0,36,22)
ANOTHER CO. PROC DENT CLAIMS?;T
"KRN",.402,1838,"DIAB",13,0,36,0)
STANDARD FTF;"STANDARD FILING TIME FRAME"
"KRN",.402,1838,"DIAB",15,0,36,24)
ANOTHER CO. PROCESS INQUIRIES?;T
"KRN",.402,1838,"DIAB",16,0,36,0)
STANDARD FTF VALUE;"STANDARD FILING TIME FRAME VALUE"
"KRN",.402,1838,"DIAB",20,0,36,20)
ANOTHER CO. PROCESS IP CLAIMS?;T
"KRN",.402,1838,"DIAB",20,0,36,21)
ANOTHER CO. PROCESS OP CLAIMS?;T
"KRN",.402,1838,"DIAB",22,0,36,23)
ANOTHER CO. PROCESS APPEALS?;T
"KRN",.402,1838,"DR",1,36)
S:",6,"'[IBY Y="@0";.01;@0;S:",0,1,6,12,"'[IBY Y="@10";S:",12,"[IBY Y="@18";2;1;.06;.07;.08;.09;.15;.18STANDARD FILING TIME FRAME~;I 'X S Y="@016";I '$$FTFV^IBCNSU31(X) S Y="@016";.19STANDARD FILING TIME FRAME VALUE~;@016;.12;.13;
"KRN",.402,1838,"DR",1,36,1)
.132;.134;.178T~;S:'X Y="@11";.139;S Y="@16";@11;.133;@16;I '$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@171";3.01EDI - Transmit?~;S DIPA("IBTX")=X;I X=$G(IBEDIKEY(1))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1721";
"KRN",.402,1838,"DR",1,36,2)
3.01////^S X=$G(IBEDIKEY(1));I $$EDIKEY^IBCNSC();S Y="@171";@1721;I '$G(DIPA("IBTX")) S Y="@17";3.04EDI - Inst Payer Primary ID~;I X=$G(IBEDIKEY(4))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17211";3.04////^S X=$G(IBEDIKEY(4));
"KRN",.402,1838,"DR",1,36,3)
I $$EDIKEY^IBCNSC();S Y="@171";@17211;15EDI - Alt Inst Payer Primary ID Type~;I '$G(DIPA("IBTX")) S Y="@17";6.01EDI - 1ST Inst Payer Sec. ID Qualifier~;
"KRN",.402,1838,"DR",1,36,4)
I X=""&($G(IBEDIKEY(3,6))="")&$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1722";I X=$G(IBEDIKEY(1,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17212";6.01////^S X=$G(IBEDIKEY(1,6));6.02////^S X=$G(IBEDIKEY(2,6));
"KRN",.402,1838,"DR",1,36,5)
I $$EDIKEY^IBCNSC();S Y="@171";@17212;I '$G(DIPA("IBTX")) S Y="@17";6.02EDI - 1ST Inst Payer Sec. ID~;I X=$G(IBEDIKEY(2,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17213";6.02////^S X=$G(IBEDIKEY(2,6));
"KRN",.402,1838,"DR",1,36,6)
6.01////^S X=$G(IBEDIKEY(1,6));I $$EDIKEY^IBCNSC();S Y="@171";@17213;I '$G(DIPA("IBTX")) S Y="@17";6.03EDI - 2ND Inst Payer Sec. ID Qualifier~;I X=""&$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1722";
"KRN",.402,1838,"DR",1,36,7)
I X=$G(IBEDIKEY(3,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17214";6.03////^S X=$G(IBEDIKEY(3,6));6.04////^S X=$G(IBEDIKEY(4,6));I $$EDIKEY^IBCNSC();S Y="@171";@17214;I '$G(DIPA("IBTX")) S Y="@17";
"KRN",.402,1838,"DR",1,36,8)
6.04EDI - 2ND Inst Payer Sec. ID~;I X=$G(IBEDIKEY(4,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1722";6.04////^S X=$G(IBEDIKEY(4,6));6.03////^S X=$G(IBEDIKEY(3,6));I $$EDIKEY^IBCNSC();S Y="@171";@1722;
"KRN",.402,1838,"DR",1,36,9)
3.02EDI - Prof Payer Primary ID~;I X=$G(IBEDIKEY(2))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17221";3.02////^S X=$G(IBEDIKEY(2));I $$EDIKEY^IBCNSC();S Y="@171";@17221;16EDI - Alt Prof Payer Primary ID Type~;
"KRN",.402,1838,"DR",1,36,10)
I '$G(DIPA("IBTX")) S Y="@17";6.05EDI - 1ST Prof Payer Sec. ID Qualifier~;I X=""&($G(IBEDIKEY(7,6))="")&$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1723";I X=$G(IBEDIKEY(5,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17222";
"KRN",.402,1838,"DR",1,36,11)
6.05////^S X=$G(IBEDIKEY(5,6));6.06////^S X=$G(IBEDIKEY(6,6));I $$EDIKEY^IBCNSC();S Y="@171";@17222;I '$G(DIPA("IBTX")) S Y="@17";6.06EDI - 1ST Prof Payer Sec. ID~;
"KRN",.402,1838,"DR",1,36,12)
I X=$G(IBEDIKEY(6,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17223";6.06////^S X=$G(IBEDIKEY(6,6));6.05////^S X=$G(IBEDIKEY(5,6));I $$EDIKEY^IBCNSC();S Y="@171";@17223;I '$G(DIPA("IBTX")) S Y="@17";
"KRN",.402,1838,"DR",1,36,13)
6.07EDI - 2ND Prof Payer Sec. ID Qualifier~;I X=""&$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1723";I X=$G(IBEDIKEY(7,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17224";6.07////^S X=$G(IBEDIKEY(7,6));
"KRN",.402,1838,"DR",1,36,14)
6.08////^S X=$G(IBEDIKEY(8,6));I $$EDIKEY^IBCNSC();S Y="@171";@17224;I '$G(DIPA("IBTX")) S Y="@17";6.08EDI - 2ND Prof Payer Sec. ID~;I X=$G(IBEDIKEY(8,6))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1723";
"KRN",.402,1838,"DR",1,36,15)
6.08////^S X=$G(IBEDIKEY(8,6));6.07////^S X=$G(IBEDIKEY(7,6));I $$EDIKEY^IBCNSC();S Y="@171";@1723;3.15EDI - Dental Payer Primary ID~;I X=$G(IBEDIKEY(15))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@17225";
"KRN",.402,1838,"DR",1,36,16)
3.15////^S X=$G(IBEDIKEY(15));I $$EDIKEY^IBCNSC();S Y="@171";@17225;@17;3.09EDI - Insurance Type~;I X=$G(IBEDIKEY(9))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1724";3.09////^S X=$G(IBEDIKEY(9));I $$EDIKEY^IBCNSC();S Y="@171";
"KRN",.402,1838,"DR",1,36,17)
@1724;@171;3.03EDI - Bin Number~;I '$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@1725";7.01;@1725;6.09EDI - Print Sec/Tert Auto Claims?~;6.1EDI - Print Medicare Sec Claims w/o MRA?~;I $G(DIPA("IBTX"))'=2 S Y="@18";
"KRN",.402,1838,"DR",1,36,18)
3.06MAX # TEST BILLS TO TRANSMIT PER DAY~;@18;S:",6,12,"'[IBY Y="@181";W !!,"Attending/Rendering Provider Secondary ID";4.01Default ID (1500)~;4.02Default ID (UB)~;4.03Require ID on Claim~;W !!,"Referring Provider Secondary ID";
"KRN",.402,1838,"DR",1,36,19)
4.04Default ID (1500)~//UPIN;4.05Require ID on Claim~;W !!,"Billing Provider Secondary IDs";4.06Use Att/Rend ID as Billing Provider Sec. ID (1500)?~//NO;4.08Use Att/Rend ID as Billing Provider Sec. ID (UB)?~//NO;
"KRN",.402,1838,"DR",1,36,20)
W !!,"Billing Provider/Service Facility";@181;S:IBY["1" Y="@99";@10;S:",0,2,6,"'[IBY Y="@20";.111;S:X="" Y="@1";.112;S:X="" Y="@1";.113;@1;.114;.115;.116;.131;.119;S:(IBY["0")!(IBY["2") Y="@99";@20;S:",3,6,"'[IBY Y="@30";.128T~;
"KRN",.402,1838,"DR",1,36,21)
S:'X Y="@21";.127;S Y="@26";@21;.121;S:X="" Y="@2";.122;S:X="" Y="@2";.123;@2;.124;.125;.126;.135;.129;@26;S:IBY["3" Y="@99";@30;S:",10,6,"'[IBY Y="@80";.168T~;S:'X Y="@31";.167;S Y="@36";@31;.161;S:X="" Y="@5";.162;S:X="" Y="@5";
"KRN",.402,1838,"DR",1,36,22)
.163;@5;.164;.165;.166;.136;.169;@36;S:IBY["10" Y="@99";@130;S:",110,6,"'[IBY Y="@55";.198T~;S:'X Y="@131";.197;S Y="@136";@131;.191;S:X="" Y="@15";.192;S:X="" Y="@15";@15;.194;.195;.196;.1911;.199;@136;S:IBY["110" Y="@99";@80;
"KRN",.402,1838,"DR",1,36,23)
S:",11,6,"'[IBY Y="@90";.188T~;S:'X Y="@81";.187;S Y="@86";@81;.181;S:X="" Y="@6";.182;S:X="" Y="@6";.183;@6;.184;.185;.186;.1311;.189;@86;S:IBY["11" Y="@99";@90;S:",4,6,"'[IBY Y="@40";.148T~;S:'X Y="@41";.147;S Y="@46";@41;.141;
"KRN",.402,1838,"DR",1,36,24)
S:X="" Y="@3";.142;S:X="" Y="@3";.143;@3;.144;.145;.146;.137;.149;@46;S:IBY["4" Y="@99";@40;S:",5,6,"'[IBY Y="@130";.158T~;S:'X Y="@51";.157;S Y="@56";@51;.151;S:X="" Y="@4";.152;S:X="" Y="@4";.153;@4;.154;.155;.156;.138;.159;@56;
"KRN",.402,1838,"DR",1,36,25)
S:IBY["5" Y="@99";@55;S:",13,6,"'[IBY Y="@60";I '$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@551";I $D(^DIC(36,"APC",+$G(DA))),$P($G(^DIC(36,+$G(DA),3)),U,13)="P" S Y="@551";3.13T~;S DIPA("IBLNK")=X;
"KRN",.402,1838,"DR",1,36,26)
I X=$G(IBEDIKEY(13))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@552";3.13////^S X=$G(IBEDIKEY(13));I $$EDIKEY^IBCNSC();S Y="@551";@552;I $G(DIPA("IBLNK"))'="C" S Y="@551";3.14T~;
"KRN",.402,1838,"DR",1,36,27)
I X=$G(IBEDIKEY(14))!$$KCHK^XUSRB("IB EDI INSURANCE EDIT") S Y="@553";3.14////^S X=$G(IBEDIKEY(14));I $$EDIKEY^IBCNSC();S Y="@551";@553;D COPY^IBCEPCID(+$G(DA));@551;S:IBY=",13," Y="@99";@60;S IBPI=$$GET1^DIQ(36,DA,3.1,"I");
"KRN",.402,1838,"DR",1,36,28)
S:",7,6,"'[IBY Y="@50";3.1;I X="" S Y="@50";I +$$GET1^DIQ(350.9,"1,",51.30,"I")'=X S Y="@50";3.1///@;3.1///^S X=IBPI;W !,"LINKING TO THE MBI PAYER IS NOT ALLOWED";S Y="@60";@50;K IBPI;S:",8,6,"'[IBY Y="@70";11;S:IBY["8" Y="@99";
"KRN",.402,1838,"DR",1,36,29)
@70;S:",9,6,"'[IBY Y="@99";10;@99;
"KRN",.402,1838,"DR",2,36.015)
.01EDI - Alt Inst Payer Primary ID Type~;.02EDI - Alt Inst Payer Primary ID~;
"KRN",.402,1838,"DR",2,36.016)
.01EDI - Alt Prof Payer Primary ID Type~;.02EDI - Alt Prof Payer Primary ID~;
"KRN",.402,1838,"DR",2,36.03)
.01
"KRN",.402,2787,-1)
0^2
"KRN",.402,2787,0)
IB SCREEN10H^3180327.1954^@^399^^@^3180817
"KRN",.402,2787,"AR",399,833)
1^IBXSAH11
"KRN",.402,2787,"DIAB",1,0,399,7)
PRIMARY PAYER-ALT ID TYPE;"Primary Payer - Alt Prof Prim Payer ID Type"
"KRN",.402,2787,"DIAB",1,0,399,12)
TERTIARY PAYER-ALT ID TYPE;"Tertiary Payer - Alt Prof Prim Payer ID Type"
"KRN",.402,2787,"DIAB",1,0,399,13)
TERTIARY PAYER-ALT ID;"Tertiary Payer - Alt Prof Prim Payer ID"
"KRN",.402,2787,"DIAB",1,1,355.93,1)
FACILITY DEFAULT ID NUMBER;"LAB OR FACILITY PRIMARY ID"
"KRN",.402,2787,"DIAB",1,2,355.9342,0)
ALL
"KRN",.402,2787,"DIAB",1,3,355.9342,0)
ALL
"KRN",.402,2787,"DIAB",2,0,399,1)
FORM LOCATOR 64C;T
"KRN",.402,2787,"DIAB",2,0,399,2)
NON-VA FACILITY:
"KRN",.402,2787,"DIAB",2,1,399.0222,1)
PERFORMED BY:355.93:
"KRN",.402,2787,"DIAB",3,0,399,9)
SECONDARY PAYER-ALT ID TYPE;"Secondary Payer - Alt Prof Prim Payer ID Type"
"KRN",.402,2787,"DIAB",3,0,399,10)
SECONDARY PAYER-ALT ID;"Secondary Payer - Alt Prof Prim Payer ID"
"KRN",.402,2787,"DIAB",4,0,399,1)
TREATMENT AUTHORIZATION CODE;"PRIMARY AUTHORIZATION CODE"
"KRN",.402,2787,"DIAB",4,1,399.0222,7)
PRIM INS PROVIDER ID TYPE;T;REQ
"KRN",.402,2787,"DIAB",5,0,399,7)
PRIMARY PAYER-ALT ID;"Primary Payer - Alt Prof Prim Payer ID"
"KRN",.402,2787,"DIAB",5,1,399.0222,7)
PRIMARY INS CO ID NUMBER;T
"KRN",.402,2787,"DIAB",8,0,399,4)
FORM LOC 19-UNSPECIFIED DATA;T
"KRN",.402,2787,"DIAB",8,1,399.0222,7)
SEC INS PROVIDER ID TYPE;T;REQ
"KRN",.402,2787,"DIAB",9,1,399.0222,7)
SECONDARY INS CO ID NUMBER;T
"KRN",.402,2787,"DIAB",9,2,355.93,1)
FACILITY DEFAULT ID NUMBER;"LAB OR FACILITY PRIMARY ID"
"KRN",.402,2787,"DIAB",10,0,399,0)
FORM LOCATOR 64A;T
"KRN",.402,2787,"DIAB",12,0,399,0)
FORM LOCATOR 64B;T
"KRN",.402,2787,"DIAB",12,1,399.0222,7)
TERT INS PROVIDER ID TYPE;T;REQ
"KRN",.402,2787,"DIAB",13,1,399.0222,7)
TERTIARY INS CO ID NUMBER;T
"KRN",.402,2787,"DR",1,399)
K DIPA S DIPA("I1")=$G(^DGCR(399,DA,"I1")),DIPA("I2")=$G(^("I2")),DIPA("I3")=$G(^("I3"));S:IBDR20'["101" Y="@102";166;167;@102;S:IBDR20'["102" Y="@103";S:'$$INPAT^IBCEF(DA) Y="@1021";215;@1021;453T~;S:'DIPA("I2") Y="@1025";454T~;
"KRN",.402,2787,"DR",1,399,1)
S:'DIPA("I3") Y="@1025";455T~;@1025;163PRIMARY AUTHORIZATION CODE~;253;S:'DIPA("I2") Y="@1029";230;254;S:'DIPA("I3") Y="@1029";231;255;@1029;@103;S:IBDR20'["103" Y="@104";222;@104;S:IBDR20'["104" Y="@106";232;
"KRN",.402,2787,"DR",1,399,2)
S DIPA("NVA_FC")=X S:X="" Y="@1046";^355.93^IBA(355.93,^^S I(0,0)=D0 S Y(1)=$S($D(^DGCR(399,D0,"U2")):^("U2"),1:"") S X=$P(Y(1),U,10),X=X  S D(0)=+X S X=$S(D(0)>0:D(0),1:"");S DIK="^DGCR(399,",DIK(1)="232" D EN1^DIK;K DIK;244;
"KRN",.402,2787,"DR",1,399,3)
D DISPTAX^IBCEP81($P($G(^DGCR(399,DA,"U3")),U,3),"Non-VA Facility");233;@1046;I $$FT^IBCEF(DA)=7 S Y="@1048";S DIPA("OLDCLIA")=$P($G(^DGCR(399,DA,"U2")),U,13);235;I X="",$G(DIPA("OLDCLIA"))'="" S IBMDOTCN=1;@1047;
"KRN",.402,2787,"DR",1,399,4)
I '$$XRAY^IBCEP8A(DA) S Y="@1048";D MAMMODP^IBCEP8A(DA);242;@1048;@106;S:IBDR20'["106" Y="@107";I $$FT^IBCEF(IBIFN)=7 S Y="@1061";459T~;D ASK19^IBCEU3(DA);S Y="@107";@1061;97;@107;S:IBDR20'["107" Y="@108";252;
"KRN",.402,2787,"DR",1,399,5)
D DISPTAX^IBCEP81($P($G(^DGCR(399,DA,"U3")),U,11),"Billing Provider");I $P($G(^DGCR(399,DA,"U3")),U,11) N X,Y,DIR S DIR(0)="EA",DIR("A")="Press Return to continue" D ^DIR K DIR;@108;S:IBDR20'["108" Y="@109";
"KRN",.402,2787,"DR",1,399,6)
I '$G(DIPA("I1")) S Y="@109";K DIPA("BRANCH") S DIPA("BRANCH")=$$ACINTEL^IBCSC10(DIPA("I1"),"@1081");S:DIPA("BRANCH")]"" Y=DIPA("BRANCH") K DIPA("BRANCH");S DIPA("OLDALTT1")=$P($G(^DGCR(399,DA,"M2")),U);
"KRN",.402,2787,"DR",1,399,7)
140Primary Payer - Alt Prof Prim Payer ID Type~;I X="",$G(DIPA("OLDALTT1"))="" S Y="@1081";I $P($G(^DGCR(399,DA,"M2")),U)="" S Y="@1081";S DIPA("OLDALTI1")=$P($G(^DGCR(399,DA,"M2")),U,2);141Primary Payer - Alt Prof Prim Payer ID~;
"KRN",.402,2787,"DR",1,399,8)
I X="",$G(DIPA("OLDALTI1"))="" S Y="@10811";S Y="@1081";@10811;140////@;@1081;I '$G(DIPA("I2")) S Y="@109";K DIPA("BRANCH") S DIPA("BRANCH")=$$ACINTEL^IBCSC10(DIPA("I2"),"@1082");
"KRN",.402,2787,"DR",1,399,9)
S:DIPA("BRANCH")]"" Y=DIPA("BRANCH") K DIPA("BRANCH");S DIPA("OLDALTT2")=$P($G(^DGCR(399,DA,"M2")),U,3);142Secondary Payer - Alt Prof Prim Payer ID Type~;I X="",$G(DIPA("OLDALTT2"))="" S Y="@1082";
"KRN",.402,2787,"DR",1,399,10)
I $P($G(^DGCR(399,DA,"M2")),U,3)="" S Y="@1082";S DIPA("OLDALTI2")=$P($G(^DGCR(399,DA,"M2")),U,4);143Secondary Payer - Alt Prof Prim Payer ID~;I X="",$G(DIPA("OLDALTI2"))="" S Y="@10821";S Y="@1082";@10821;142////@;@1082;
"KRN",.402,2787,"DR",1,399,11)
I '$G(DIPA("I3")) S Y="@109";K DIPA("BRANCH") S DIPA("BRANCH")=$$ACINTEL^IBCSC10(DIPA("I3"),"@109");S:DIPA("BRANCH")]"" Y=DIPA("BRANCH") K DIPA("BRANCH");S DIPA("OLDALTT2")=$P($G(^DGCR(399,DA,"M2")),U,5);
"KRN",.402,2787,"DR",1,399,12)
144Tertiary Payer - Alt Prof Prim Payer ID Type~;I X="",$G(DIPA("OLDALTT3"))="" S Y="@1083";I $P($G(^DGCR(399,DA,"M2")),U,5)="" S Y="@1083";S DIPA("OLDALTI3")=$P($G(^DGCR(399,DA,"M2")),U,6);
"KRN",.402,2787,"DR",1,399,13)
145Tertiary Payer - Alt Prof Prim Payer ID~;I X="",$G(DIPA("OLDALTI3"))="" S Y="@10831";S Y="@1083";@10831;145////@;@1083;@109;S:IBDR20'["109" Y="@1010";I $$TEST^IBCEF84(DA) S Y="@1090";
"KRN",.402,2787,"DR",1,399,14)
I '$P($G(^DGCR(399,DA,"TX")),U,8),'$$TXMT^IBCEF4(DA) S Y="@1092";I $$REQMRA^IBEFUNC(DA) S Y="@10911";27//NO FORCED PRINT;S Y="@1092";@1090;D MESSAGE^IBCEF84;S Y="@1092";@10911;28//NO FORCED PRINT;@1092;@1010;
"KRN",.402,2787,"DR",2,355.93)
S DIPA("NVA_FC-0")=$G(^IBA(355.93,+DIPA("NVA_FC"),0)) S:$P(DIPA("NVA_FC-0"),U,5)'=""&($P(DIPA("NVA_FC-0"),U,6)'="")&($P(DIPA("NVA_FC-0"),U,7)'="") Y="@1041";.05;.1;.06;.07;.08;@1041;S:$P(DIPA("NVA_FC-0"),U,9)'="" Y="@1042";
"KRN",.402,2787,"DR",2,355.93,1)
.09LAB OR FACILITY PRIMARY ID~;@1042;S:$P(DIPA("NVA_FC-0"),U,11)'="" Y="@1043";.11;@1043;S:$P(DIPA("NVA_FC-0"),U,14)'="" Y="@1044";D EN2^IBCEP82(+DIPA("NVA_FC"),2);@1044;S:$D(^IBA(355.93,+DIPA("NVA_FC"),"TAXONOMY"))>0 Y="@1045";42;
"KRN",.402,2787,"DR",2,355.93,2)
@1045;
"KRN",.402,2787,"DR",2,399.0222)
.01;S DIPA("RF")=X S:$D(^XUSEC("IB PROVIDER EDIT",DUZ)) DLAYGO=355.93;.02;K DLAYGO S DIPA("PRF")=X S:X="" Y="@10398";N Z1 S Z1=$P($G(^DGCR(399,DA(1),"PRV",DA,0)),U,2) S DIPA("NVA_PRV")=$S(Z1["IBA(355.93":+Z1,1:0);
"KRN",.402,2787,"DR",2,399.0222,1)
S:DIPA("NVA_PRV")=0 Y="@1038";^355.93^IBA(355.93,^^N DIERR X DR(99,1,9.3) S Y(101)=$S($D(^IBA(355.93,D0,0)):^(0),1:"") S X=$P(Y(101),U,1) S D0=I(0,0) S D1=I(1,0) S X=$S(D(0)>0:D(0),1:"");@1038;
"KRN",.402,2787,"DR",2,399.0222,2)
S DIK="^DGCR(399,"_DA(1)_",""PRV"",",DIK(1)=".02" D EN1^DIK K DIK;.15;D DISPTAX^IBCEP81($P($G(^DGCR(399,DA(1),"PRV",DA,0)),U,15),"");
"KRN",.402,2787,"DR",2,399.0222,3)
N Z S Z=$$EXPAND^IBTRE(399.0222,.08,$P($G(^DGCR(399,DA(1),"PRV",DA,0)),U,8)),DIPA("SPC")=$S(Z'="":Z,1:"UNSPECIFIED") W !,"    Prov Specialty On File: ",DIPA("SPC");S DIPA("CRD")=$$CRED^IBCEU($P(^DGCR(399,DA(1),"PRV",DA,0),U,2));
"KRN",.402,2787,"DR",2,399.0222,4)
.03;K DIPA("W1") S:$G(DIPA("CRD"))'=$P(^DGCR(399,DA(1),"PRV",DA,0),U,3) DIPA("W1")=1;I $G(DIPA("W1")) D WRT1^IBCSC10H($G(DIPA("CRD")));K DIPA("W1");I '$G(DIPA("I1")) S Y="@10305";
"KRN",.402,2787,"DR",2,399.0222,5)
D PROVID^IBCEP2B(DA(1),DA,1,.DIPA) S Y=$S(DIPA("EDIT")<0:"@10382",DIPA("EDIT")=1:"@10391",DIPA("EDIT")=2:"@10371",1:"");@10382;I '$G(DIPA("I2")) S Y="@10305";
"KRN",.402,2787,"DR",2,399.0222,6)
D PROVID^IBCEP2B(DA(1),DA,2,.DIPA) S Y=$S(DIPA("EDIT")<0:"@10383",DIPA("EDIT")=1:"@10392",DIPA("EDIT")=2:"@10372",1:"");@10383;I '$G(DIPA("I3")) S Y="@10305";
"KRN",.402,2787,"DR",2,399.0222,7)
D PROVID^IBCEP2B(DA(1),DA,3,.DIPA) S Y=$S(DIPA("EDIT")<0:"@10305",DIPA("EDIT")=1:"@10393",DIPA("EDIT")=2:"@10373",1:"");S Y="@10305";@10391;.12R~T~;.05T~;S Y="@10382";@10392;.13R~T~;.06T~;S Y="@10383";@10393;.14R~T~;.07T~;
"KRN",.402,2787,"DR",2,399.0222,8)
S Y="@10305";@10371;.12////^S X=DIPA("PRIDT");.05////^S X=DIPA("PRID");S Y="@10382";@10372;.13////^S X=DIPA("PRIDT");.06////^S X=DIPA("PRID");S Y="@10383";@10373;.14////^S X=DIPA("PRIDT");.07////^S X=DIPA("PRID");S Y="@10305";
"KRN",.402,2787,"DR",2,399.0222,9)
@10305;S Y="@10399";@10398;.01///@;@10399;W @IOF;
"KRN",.402,2787,"DR",3,355.93)
S DIPA("NVA_PRV-0")=$G(^IBA(355.93,DIPA("NVA_PRV"),0));S:$P(DIPA("NVA_PRV-0"),U,2)=1 Y="@1032";S:$P(DIPA("NVA_PRV-0"),U,3)'="" Y="@1031";.03;@1031;S:$P(DIPA("NVA_PRV-0"),U,3)'="" Y="@1035";.04;S Y="@1035";@1032;
"KRN",.402,2787,"DR",3,355.93,1)
S:$P(DIPA("NVA_PRV-0"),U,5)'=""&($P(DIPA("NVA_PRV-0"),U,6)'="")&($P(DIPA("NVA_PRV-0"),U,7)'="") Y="@1033";.05;.1;.06;.07;.08;@1033;S:$P(DIPA("NVA_PRV-0"),U,9)'="" Y="@1034";.09LAB OR FACILITY PRIMARY ID~;@1034;
"KRN",.402,2787,"DR",3,355.93,2)
S:$P(DIPA("NVA_PRV-0"),U,11)'="" Y="@1035";.11;@1035;S:$P(DIPA("NVA_PRV-0"),U,14)'="" Y="@1036";D EN2^IBCEP82(DIPA("NVA_PRV"),4);@1036;S:$D(^IBA(355.93,DIPA("NVA_PRV"),"TAXONOMY"))>0 Y="@1037";42;@1037;
"KRN",.402,2787,"DR",3,355.9342)
.01:.03
"KRN",.402,2787,"DR",4,355.9342)
.01:.03
"KRN",.402,2787,"DR",99,1)
N DIERR X DR(99,1,9.3) S Y(101)=$S($D(^IBA(355.93,D0,0)):^(0),1:"") S X=$P(Y(101),U,1) S D0=I(0,0) S D1=I(1,0)
"KRN",.402,2787,"DR",99,1,9.2)
N DIC S DIC=X N X S X=DIC,DIC="^IBA(355.93,",DIC(0)="MF" D ^DIC
"KRN",.402,2787,"DR",99,1,9.3)
S I(1,0)=$G(D1),I(0,0)=$G(D0),Y(1)=$S($D(^DGCR(399,D0,"PRV",D1,0)):^(0),1:"") S X=$$EXTERNAL^DIDU(399.0222,.02,"",$P(Y(1),U,2)) X DR(99,1,9.2) S (D,D0,D(0))=+Y
"KRN",.402,2787,"ROU")
^IBXSAH
"KRN",.402,2787,"ROUOLD")
IBXSAH
"KRN",101,2374,-1)
4^12
"KRN",101,2374,0)
IBCNSC INS CO EDIT ALL
"KRN",101,2375,-1)
4^9
"KRN",101,2375,0)
IBCNSC INS CO BILLING PARAMETERS
"KRN",101,2376,-1)
0^15
"KRN",101,2376,0)
IBCNSC INS CO MAIN MAILING ADDRESS^Main Mailing Address^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,2376,4)
^^^EM
"KRN",101,2376,15)
S VALMBG=1
"KRN",101,2376,20)
S IBY=",2," D EA^IBCNSI
"KRN",101,2376,99)
64889,67404
"KRN",101,2377,-1)
0^7
"KRN",101,2377,0)
IBCNSC INS CO APPEALS OFFICE^Appeals Office^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,2377,4)
^^^AA
"KRN",101,2377,15)
S VALMBG=31
"KRN",101,2377,20)
S IBY=",4," D EA^IBCNSI
"KRN",101,2377,99)
64889,67404
"KRN",101,2378,-1)
0^14
"KRN",101,2378,0)
IBCNSC INS CO INQUIRY OFFICE^Inquiry Office^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,2378,4)
^^^IA
"KRN",101,2378,10,0)
^101.01PA^0^0
"KRN",101,2378,15)
S VALMBG=39
"KRN",101,2378,20)
S IBY=",5," D EA^IBCNSI
"KRN",101,2378,28)

"KRN",101,2378,99)
64889,67404
"KRN",101,2386,-1)
4^10
"KRN",101,2386,0)
IBCNSC INS CO CHANGE COMPANY
"KRN",101,2388,-1)
4^18
"KRN",101,2388,0)
IBCNSC INS CO REMARKS
"KRN",101,2389,-1)
4^20
"KRN",101,2389,0)
IBCNSC INS CO SYNONYMS
"KRN",101,2390,-1)
4^6
"KRN",101,2390,0)
IBCNSC INS CO (IN)ACTIVATE COMPANY
"KRN",101,2408,-1)
0^13
"KRN",101,2408,0)
IBCNSC INS CO INPT CLAIMS^Inpt Claims Office^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,2408,4)
^^^IC
"KRN",101,2408,15)
S VALMBG=8
"KRN",101,2408,20)
S IBY=",3," D EA^IBCNSI
"KRN",101,2408,28)
IC
"KRN",101,2408,99)
64889,67404
"KRN",101,2409,-1)
0^16
"KRN",101,2409,0)
IBCNSC INS CO OPT CLAIMS^Opt Claims Office^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,2409,4)
^^^OC
"KRN",101,2409,15)
S VALMBG=16
"KRN",101,2409,20)
S IBY=",10," D EA^IBCNSI
"KRN",101,2409,99)
64889,67404
"KRN",101,2411,-1)
0^1
"KRN",101,2411,0)
IBCNSC INSURANCE CO^Insurance Company Edit^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,2411,4)
26^4
"KRN",101,2411,10,0)
^101.01PA^36^36
"KRN",101,2411,10,18,0)
2374^EA^26^
"KRN",101,2411,10,18,"^")
IBCNSC INS CO EDIT ALL
"KRN",101,2411,10,22,0)
2375^BP^11^
"KRN",101,2411,10,22,"^")
IBCNSC INS CO BILLING PARAMETERS
"KRN",101,2411,10,23,0)
2386^CC^32^
"KRN",101,2411,10,23,"^")
IBCNSC INS CO CHANGE COMPANY
"KRN",101,2411,10,24,0)
2388^RE^24^
"KRN",101,2411,10,24,"^")
IBCNSC INS CO REMARKS
"KRN",101,2411,10,25,0)
2389^SY^25^
"KRN",101,2411,10,25,"^")
IBCNSC INS CO SYNONYMS
"KRN",101,2411,10,26,0)
2390^AI^31^
"KRN",101,2411,10,26,"^")
IBCNSC INS CO (IN)ACTIVATE COMPANY
"KRN",101,2411,10,30,0)
4277^DC^33^
"KRN",101,2411,10,30,"^")
IBCNSC INS CO DELETE COMPANY
"KRN",101,2411,10,31,0)
2563^EX^35^
"KRN",101,2411,10,31,"^")
IBCNS QUIT
"KRN",101,2411,10,32,0)
4371^VP^34^
"KRN",101,2411,10,32,"^")
IBCNSJ INS CO PLANS
"KRN",101,2411,10,33,0)
6364^ID^23^
"KRN",101,2411,10,33,"^")
IBCNSC PROVIDER ID PARAMETERS
"KRN",101,2411,10,34,0)
6627^PA^23^
"KRN",101,2411,10,34,"^")
IBCNSC INS CO PAYER
"KRN",101,2411,10,35,0)
7182^AC^22^
"KRN",101,2411,10,35,"^")
IBCNSC INS CO ASSOCIATION
"KRN",101,2411,10,36,0)
8339^AD^16^
"KRN",101,2411,10,36,"^")
IBCNSC INS CO ADDRESSES
"KRN",101,2411,15)
I $G(IBFASTXT)=5 S VALMBCK="Q"
"KRN",101,2411,24)
I 1 X:$D(^ORD(101,+$P(^ORD(101,DA(1),10,DA,0),"^"),24)) ^(24)
"KRN",101,2411,25)

"KRN",101,2411,26)
D SHOW^VALM
"KRN",101,2411,28)
Select Action: 
"KRN",101,2411,99)
64889,67404
"KRN",101,2562,-1)
4^25
"KRN",101,2562,0)
IBCNSC INS CO RX CLAIMS
"KRN",101,2563,-1)
4^5
"KRN",101,2563,0)
IBCNS QUIT
"KRN",101,4277,-1)
4^11
"KRN",101,4277,0)
IBCNSC INS CO DELETE COMPANY
"KRN",101,4371,-1)
4^22
"KRN",101,4371,0)
IBCNSJ INS CO PLANS
"KRN",101,4404,-1)
4^26
"KRN",101,4404,0)
IBJ EXIT
"KRN",101,6364,-1)
4^21
"KRN",101,6364,0)
IBCNSC PROVIDER ID PARAMETERS
"KRN",101,6627,-1)
4^17
"KRN",101,6627,0)
IBCNSC INS CO PAYER
"KRN",101,7182,-1)
4^8
"KRN",101,7182,0)
IBCNSC INS CO ASSOCIATION
"KRN",101,8337,-1)
0^2
"KRN",101,8337,0)
IBCNSC INS CO DENTAL CLAIMS OFFICE^Dental Claims Office^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,8337,4)
^^^DE
"KRN",101,8337,15)
S VALMBG=46
"KRN",101,8337,20)
S IBY=",110," D EA^IBCNSI
"KRN",101,8337,99)
64889,67404
"KRN",101,8338,-1)
0^23
"KRN",101,8338,0)
IBCNSC INS CO BILLING ADDRESSES^Billing Addresses^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,8338,4)
26^4^
"KRN",101,8338,10,0)
^101.01PA^11^11
"KRN",101,8338,10,1,0)
2376^MM^12^
"KRN",101,8338,10,1,"^")
IBCNSC INS CO MAIN MAILING ADDRESS
"KRN",101,8338,10,2,0)
2408^IC^15^
"KRN",101,8338,10,2,"^")
IBCNSC INS CO INPT CLAIMS
"KRN",101,8338,10,3,0)
2409^OC^18^
"KRN",101,8338,10,3,"^")
IBCNSC INS CO OPT CLAIMS
"KRN",101,8338,10,4,0)
2377^AO^21^
"KRN",101,8338,10,4,"^")
IBCNSC INS CO APPEALS OFFICE
"KRN",101,8338,10,5,0)
2378^IO^27^
"KRN",101,8338,10,5,"^")
IBCNSC INS CO INQUIRY OFFICE
"KRN",101,8338,10,6,0)
8337^DE^30^
"KRN",101,8338,10,6,"^")
IBCNSC INS CO DENTAL CLAIMS OFFICE
"KRN",101,8338,10,10,0)
2562^PC^24^
"KRN",101,8338,10,10,"^")
IBCNSC INS CO RX CLAIMS
"KRN",101,8338,10,11,0)
4404^EX^99^
"KRN",101,8338,10,11,"^")
IBJ EXIT
"KRN",101,8338,15)
I $G(IBFASTXT)=1 S VALMBCK="Q"
"KRN",101,8338,20)
K IBFASTXT
"KRN",101,8338,24)
I 1 X:$D(^ORD(101,+$P(^ORD(101,DA(1),10,DA,0),"^"),24)) ^(24)
"KRN",101,8338,26)
 D SHOW^VALM
"KRN",101,8338,28)
Select Action: 
"KRN",101,8338,99)
64889,67404
"KRN",101,8339,-1)
0^24
"KRN",101,8339,0)
IBCNSC INS CO ADDRESSES^Billing Addresses^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,8339,4)
26^4
"KRN",101,8339,15)
D INIT^IBCNSC
"KRN",101,8339,20)
D EN^IBCNSI
"KRN",101,8339,26)

"KRN",101,8339,28)
SELECT ACTION: 
"KRN",101,8339,99)
64889,67404
"KRN",409.61,46,-1)
0^2
"KRN",409.61,46,0)
IBCNS INSURANCE COMPANY^1^^90^5^17^1^1^Insurance Company^IBCNSC INSURANCE CO^Insurance Company Editor^
"KRN",409.61,46,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,46,"ARRAY")
 ^TMP("IBCNSC",$J)
"KRN",409.61,46,"COL",0)
^409.621
"KRN",409.61,46,"FNL")
D EXIT^IBCNSC
"KRN",409.61,46,"HDR")
D HDR^IBCNSC
"KRN",409.61,46,"HLP")
D HELP^IBCNSC
"KRN",409.61,46,"INIT")
D INIT^IBCNSC
"KRN",409.61,624,-1)
0^6
"KRN",409.61,624,0)
IBCE PRVPRV MAINT^1^^80^6^18^1^1^Performing Provider ID^IBCE PRVPRV MAINT^Performing Provider ID^1^^1
"KRN",409.61,624,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,624,"ARRAY")
 ^TMP("IBPRV_",$J)
"KRN",409.61,624,"COL",0)
^409.621^6^5
"KRN",409.61,624,"COL",1,0)
IDTYPE^6^20^ID Qualifier
"KRN",409.61,624,"COL",2,0)
FORMTYPE^28^10^Form
"KRN",409.61,624,"COL",3,0)
CARETYPE^39^10^Care Type
"KRN",409.61,624,"COL",5,0)
PROVID^65^15^ID #
"KRN",409.61,624,"COL",6,0)
CAREUNIT^52^11^Care Unit
"KRN",409.61,624,"COL","B","CARETYPE",3)

"KRN",409.61,624,"COL","B","CAREUNIT",6)

"KRN",409.61,624,"COL","B","FORMTYPE",2)

"KRN",409.61,624,"COL","B","IDTYPE",1)

"KRN",409.61,624,"COL","B","PROVID",5)

"KRN",409.61,624,"EXP")
D EXPND^IBCEP5
"KRN",409.61,624,"FNL")
D EXIT^IBCEP5
"KRN",409.61,624,"HDR")
D HDR^IBCEP5
"KRN",409.61,624,"HLP")
D HELP^IBCEP5
"KRN",409.61,624,"INIT")
D INIT^IBCEP5
"KRN",409.61,628,-1)
0^4
"KRN",409.61,628,0)
IBCE VIEW PREV TRANS2^1^^126^7^19^1^1^CLAIM^IBCE VIEW PREV TRANS MENU^PREVIOUSLY TRANSMITTED CLAIMS^1^^1
"KRN",409.61,628,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,628,"ARRAY")
 ^TMP("IB_PREV_CLAIM_LIST",$J)
"KRN",409.61,628,"COL",0)
^409.621^11^11
"KRN",409.61,628,"COL",1,0)
CLAIM^7^9^Claim #^^1
"KRN",409.61,628,"COL",2,0)
FORM^17^4^Form
"KRN",409.61,628,"COL",3,0)
TYPE^23^5^Type
"KRN",409.61,628,"COL",4,0)
SEQ^29^3^Seq
"KRN",409.61,628,"COL",5,0)
STATUS^33^11^Status
"KRN",409.61,628,"COL",6,0)
OTHER_PAYERS^52^18^Other Payer(s)
"KRN",409.61,628,"COL",7,0)
LAST_TRANSMIT^94^13^Last Transmit
"KRN",409.61,628,"COL",8,0)
BATCH^111^12^Batch Number
"KRN",409.61,628,"COL",9,0)
NUMBER^1^6^ #
"KRN",409.61,628,"COL",10,0)
ARSTAT^45^4^A/R
"KRN",409.61,628,"COL",11,0)
PATIENTNAME^72^18^Patient Name
"KRN",409.61,628,"COL","AIDENT",1,1)

"KRN",409.61,628,"COL","B","ARSTAT",10)

"KRN",409.61,628,"COL","B","BATCH",8)

"KRN",409.61,628,"COL","B","CLAIM",1)

"KRN",409.61,628,"COL","B","FORM",2)

"KRN",409.61,628,"COL","B","LAST_TRANSMIT",7)

"KRN",409.61,628,"COL","B","NUMBER",9)

"KRN",409.61,628,"COL","B","OTHER_PAYERS",6)

"KRN",409.61,628,"COL","B","PATIENTNAME",11)

"KRN",409.61,628,"COL","B","SEQ",4)

"KRN",409.61,628,"COL","B","STATUS",5)

"KRN",409.61,628,"COL","B","TYPE",3)

"KRN",409.61,628,"FNL")
D EXIT^IBCEPTC2
"KRN",409.61,628,"HDR")
D HDR^IBCEPTC2
"KRN",409.61,628,"HLP")
Q
"KRN",409.61,628,"INIT")
D INIT^IBCEPTC2
"KRN",409.61,629,-1)
0^3
"KRN",409.61,629,0)
IBCE VIEW PREV TRANS1^1^^143^6^19^1^1^CLAIM^IBCE VIEW PREV TRANS MENU^PREVIOUSLY TRANSMITTED CLAIMS^1^^1
"KRN",409.61,629,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,629,"ARRAY")
 ^TMP("IB_PREV_CLAIM_LIST",$J)
"KRN",409.61,629,"COL",0)
^409.621^11^11
"KRN",409.61,629,"COL",1,0)
CLAIM^7^9^Claim #^^1
"KRN",409.61,629,"COL",2,0)
FORM^17^4^Form
"KRN",409.61,629,"COL",3,0)
TYPE^23^5^Type
"KRN",409.61,629,"COL",4,0)
SEQ^29^3^Seq
"KRN",409.61,629,"COL",5,0)
STATUS^33^11^Status
"KRN",409.61,629,"COL",6,0)
CURRENT_PAYER^50^25^Current Payer
"KRN",409.61,629,"COL",7,0)
PAYER_ADDRESS^76^29^Payer Address
"KRN",409.61,629,"COL",8,0)
OTHER_PAYERS^106^15^Other Payer(s)
"KRN",409.61,629,"COL",9,0)
NUMBER^1^6^ #
"KRN",409.61,629,"COL",10,0)
ARSTAT^45^4^A/R
"KRN",409.61,629,"COL",11,0)
PATIENTNAME^122^18^Patient Name
"KRN",409.61,629,"COL","AIDENT",1,1)

"KRN",409.61,629,"COL","B","ARSTAT",10)

"KRN",409.61,629,"COL","B","CLAIM",1)

"KRN",409.61,629,"COL","B","CURRENT_PAYER",6)

"KRN",409.61,629,"COL","B","FORM",2)

"KRN",409.61,629,"COL","B","NUMBER",9)

"KRN",409.61,629,"COL","B","OTHER_PAYERS",8)

"KRN",409.61,629,"COL","B","PATIENTNAME",11)

"KRN",409.61,629,"COL","B","PAYER_ADDRESS",7)

"KRN",409.61,629,"COL","B","SEQ",4)

"KRN",409.61,629,"COL","B","STATUS",5)

"KRN",409.61,629,"COL","B","TYPE",3)

"KRN",409.61,629,"FNL")
D EXIT^IBCEPTC2
"KRN",409.61,629,"HDR")
D HDR^IBCEPTC2
"KRN",409.61,629,"HLP")
Q
"KRN",409.61,629,"INIT")
D INIT^IBCEPTC2
"KRN",409.61,633,-1)
0^1
"KRN",409.61,633,0)
IBCE INSCO ID MAINT^1^^80^4^20^0^1^^IBCE INSCO ID MAINT MENU^IB Parameter Maint.^1^^1
"KRN",409.61,633,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,633,"FNL")
D EXIT^IBCEPB
"KRN",409.61,633,"HDR")
D HDR^IBCEPB
"KRN",409.61,633,"HLP")
D HELP^IBCEPB
"KRN",409.61,633,"INIT")
D INIT^IBCEPB
"KRN",409.61,790,-1)
0^5
"KRN",409.61,790,0)
IBCNSC INSURANCE CO ADDRESSES^1^^90^4^19^1^1^Insurance Company Addresses^IBCNSC INS CO BILLING ADDRESSES^Insurance Co. Addresses^^^
"KRN",409.61,790,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,790,"ARRAY")
 ^TMP("IBCNSI",$J)
"KRN",409.61,790,"FNL")
D EXIT^IBCNSI
"KRN",409.61,790,"HDR")
D HDR^IBCNSI
"KRN",409.61,790,"HLP")
D HELP^IBCNSI
"KRN",409.61,790,"INIT")
D INIT^IBCNSI
"MBREQ")
0
"ORD",7,.402)
.402;7;;;EDEOUT^DIFROMSO(.402,DA,"",XPDA);FPRE^DIFROMSI(.402,"",XPDA);EPRE^DIFROMSI(.402,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.402,DA,"",XPDA);DEL^DIFROMSK(.402,"",%)
"ORD",7,.402,0)
INPUT TEMPLATE
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"ORD",17,409.61)
409.61;17;1;;;;LME1^XPDIA1;;;LMDEL^XPDIA1
"ORD",17,409.61,0)
LIST TEMPLATE
"PGL",364.6,0,3,.03)
ASSOCIATED FORM DEFINITION^P364.6'^IBA(364.6,^0;3^Q
"PGL",364.7,0,5,.05)
INSURANCE COMPANY^P36'^DIC(36,^0;5^Q
"PKG",230,-1)
1^1
"PKG",230,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",230,20,0)
^9.402P^1^1
"PKG",230,20,1,0)
2^^IBAXDR
"PKG",230,20,1,1)

"PKG",230,20,"B",2,1)

"PKG",230,22,0)
^9.49I^1^1
"PKG",230,22,1,0)
2.0^2940321^2940525
"PKG",230,22,1,"PAH",1,0)
592^3180829^520824635
"PKG",230,22,1,"PAH",1,1,0)
^^2^2^3180829
"PKG",230,22,1,"PAH",1,1,1,0)
 
"PKG",230,22,1,"PAH",1,1,2,0)
MCCF EDI TAS EBILLING BUILD 3 DENTAL
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
125
"RTN","IBCB")
0^1^B33194754^B32907944
"RTN","IBCB",1,0)
IBCB ;ALB/MRL - BILLING BEGINNING POINT/SELECT BILL OR PATIENT ;01 JUN 88 12:00
"RTN","IBCB",2,0)
 ;;2.0;INTEGRATED BILLING;**52,80,106,51,137,161,199,348,592**;21-MAR-94;Build 58
"RTN","IBCB",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCB",4,0)
 ;
"RTN","IBCB",5,0)
 ;MAP TO DGCRB
"RTN","IBCB",6,0)
 ;
"RTN","IBCB",7,0)
EN ;
"RTN","IBCB",8,0)
 D HOME^%ZIS Q:'$D(IBAC)
"RTN","IBCB",9,0)
 ;***
"RTN","IBCB",10,0)
 ;I $D(XRT0) S:'$D(XRTN) XRTN="IBCB" D T1^%ZOSV ;stop rt clock
"RTN","IBCB",11,0)
 ;S XRTL=$ZU(0),XRTN="IBCB-"_$G(IBAC) D T0^%ZOSV ;start rt clock
"RTN","IBCB",12,0)
 ;
"RTN","IBCB",13,0)
 S:'$D(IBV) IBV=1 L  K ^UTILITY($J),DFN,IBIFN,DIC,IBPOPOUT S DIC(0)="EQMZ" R !!,"Enter BILL NUMBER or PATIENT NAME: ",IBX:DTIME I IBX["^"!(IBX="") S IBAC1=0 Q
"RTN","IBCB",14,0)
 K ^TMP("IBCRRX",$J)
"RTN","IBCB",15,0)
 S IBAC1=1
"RTN","IBCB",16,0)
 N DPTNOFZY S DPTNOFZY=1  ;Suppress PATIENT file fuzzy lookups
"RTN","IBCB",17,0)
 I IBX?1A4N!(IBX?2A.AP)!(IBX?2.A1",".AP)!(IBX?1A1P.AP) S DIC="^DPT(",X=IBX D ^DIC G EN:Y'>0 S DFN=+Y D HINQ S X=$S('$D(^DGCR(399,"C",DFN)):1,'$D(^DGCR(399,"AOP",DFN)):2,1:0)
"RTN","IBCB",18,0)
 I $D(DFN),X,IBAC<4 W !!,"No ",$S(X=1:"",1:"OPEN "),"billing records on file for this patient." D ASK I '$D(IBIFN) G EN
"RTN","IBCB",19,0)
 I $D(DFN) D  G EN
"RTN","IBCB",20,0)
 . D DATE:'$D(IBIFN),ASK:'$D(IBIFN)
"RTN","IBCB",21,0)
 . I $D(IBIFN) D ST
"RTN","IBCB",22,0)
 S DIC("S")=$S(IBAC'=4&(IBAC'=4.1):"I $P(^(0),U,13)<3 D EN^DDIOL($P(^(0),U))",1:"I $P(^(""S""),U,17)="""""_$S(IBAC=4.1:",$P(^(0),U,13)=3,+$$LAST364^IBCEF4(+Y),""PX""[$P($G(^IBA(364,+$$LAST364^IBCEF4(+Y),0)),U,3)",1:""))
"RTN","IBCB",23,0)
 S DIC="^DGCR(399,",X=IBX
"RTN","IBCB",24,0)
 D ^DIC G:Y'>0 EN S IBIFN=+Y,DFN=$P(Y(0),"^",2)
"RTN","IBCB",25,0)
 ;
"RTN","IBCB",26,0)
 D HINQ,ST G EN
"RTN","IBCB",27,0)
 G EN
"RTN","IBCB",28,0)
HINQ I $S('$D(^DPT(DFN,.361)):1,$P(^(.361),"^",1)'="V":1,1:0) W !?17,"*** ELIGIBILITY NOT VERIFIED ***" D HINQ1
"RTN","IBCB",29,0)
MT ;I $D(DFN) D ^DGMT1 K DGMTLL
"RTN","IBCB",30,0)
 I $D(DFN) D DIS^DGMTU(DFN)
"RTN","IBCB",31,0)
 Q
"RTN","IBCB",32,0)
HINQ1 I $P($G(^IBE(350.9,1,1)),"^",16) S X="DVBHQZ4" X ^%ZOSF("TEST") K X I $T W ! D EN^DVBHQZ4 Q
"RTN","IBCB",33,0)
 ;I $P($G(^IBE(350.9,1,1)),"^",16) F X="DVBHQZ4","DGHINQZ4" X ^%ZOSF("TEST") I $T S DGROUT=X K X W ! D @("EN^"_DGROUT) K DGROUT Q
"RTN","IBCB",34,0)
 K Y Q
"RTN","IBCB",35,0)
ASK I IBAC'=1 K IBIFN Q
"RTN","IBCB",36,0)
 W !!,"DO YOU WANT TO ESTABLISH A NEW BILLING RECORD FOR '",$P(^DPT(DFN,0),"^",1),"'" S %=2 D YN^DICN
"RTN","IBCB",37,0)
 I '% W !!?4,"YES - To establish a new billing record in the billing file.",!?4,"NO  - To discontinue this process immediately." G ASK
"RTN","IBCB",38,0)
 I %'=1 K IBIFN Q
"RTN","IBCB",39,0)
 K DA,Y,DINUM,IBIFN S (IBNEW,IBYN)=1 D ^IBCA Q
"RTN","IBCB",40,0)
DATE I $D(^DGCR(399,"C",DFN)) S DA="" F I=1:1 S DA=$O(^DGCR(399,"APDT",DFN,DA)) Q:DA=""  D DATE1
"RTN","IBCB",41,0)
 I IBAC=4,'$D(^UTILITY($J,"IB")) W !,"No ",$S($D(^DGCR(399,"C",DFN)):"UNCANCELLED ",1:""),"billing records on file for this patient." Q
"RTN","IBCB",42,0)
 S CT=0,CT1=1,IBT="" F J=1:1 S IBT=$O(^UTILITY($J,"IB",IBT)) Q:IBT=""  F J1=0:0 S J1=$O(^UTILITY($J,"IB",IBT,J1)) Q:J1=""  S X=J1 D SET
"RTN","IBCB",43,0)
CT W ! S G="",CT2=$S(CT<(CT1+4):CT,1:(CT1+4)) F K=CT1:1:CT2 I $D(^UTILITY($J,"UB",K)) D WRLINE
"RTN","IBCB",44,0)
 S X="" D WDATE Q:X["^"  I '$D(IB),$D(^UTILITY($J,"UB",K+1)) S CT1=K+1 G CT
"RTN","IBCB",45,0)
 K CT,CT1,CT2,K,^UTILITY($J,"UB") Q
"RTN","IBCB",46,0)
WRLINE N IBX S IBDATA=^UTILITY($J,"UB",K),IBX=$G(^DGCR(399,+$P(IBDATA,"^",2),0))
"RTN","IBCB",47,0)
 W !?2,K,?6 S Y=+IBDATA X ^DD("DD") W Y,?27,$P(IBX,"^",1),?35,$S($P(IBX,U,21)="S":"s",$P(IBX,U,21)="T":"t",1:""),?38,$P(IBDATA,"^",3),?59,$E($P(IBDATA,"^",4),1,10),?70,$E($P(IBDATA,"^",5),1,10)
"RTN","IBCB",48,0)
 Q
"RTN","IBCB",49,0)
DATE1 S IBT=$O(^DGCR(399,"APDT",DFN,DA,0)) I $D(^DGCR(399,+DA,0)),$S(IBAC<3:$P(^(0),U,13)<2,IBAC=3:$P(^(0),U,13)<3,'$D(^("S")):0,$P(^("S"),"^",17)]"":0,1:1) S ^UTILITY($J,"IB",IBT,DA)=""
"RTN","IBCB",50,0)
 Q
"RTN","IBCB",51,0)
WDATE Q:'CT  W !! W:K<CT "PRESS <RETURN> TO CONTINUE, OR",! W "CHOOSE 1",$S(CT=1:"",1:"-"_K),": " R X:DTIME Q:X["^"!(X="")  I X["?" W !!,"Select one of the above or <RETURN> to establish a new billing record." G WDATE
"RTN","IBCB",52,0)
 I $S('$D(^UTILITY($J,"UB",+X)):1,+X>K:1,+X<1:1,'(X?.N):1,1:0) W !!,"NOT A VALID CHOICE!!",*7 G WDATE
"RTN","IBCB",53,0)
 S IBIFN=$P(^UTILITY($J,"UB",X),"^",2),IB=1
"RTN","IBCB",54,0)
 Q
"RTN","IBCB",55,0)
 ;
"RTN","IBCB",56,0)
KEYOK(IBIFN,DUZ) ; Check if COB bill, does user have key
"RTN","IBCB",57,0)
 ; IBIFN = ien of bill (file 399)
"RTN","IBCB",58,0)
 ;
"RTN","IBCB",59,0)
 N IBCOB,IBOK,DIR,X,Y
"RTN","IBCB",60,0)
 S IBOK=1,IBCOB=$$COBN^IBCEF(IBIFN)
"RTN","IBCB",61,0)
 I IBCOB>1 D
"RTN","IBCB",62,0)
 . S IBCOB=$P("^SECONDARY^TERTIARY",U,IBCOB)
"RTN","IBCB",63,0)
 . S DIR(0)="YA",DIR("A",1)="YOU ARE ABOUT TO EDIT A "_IBCOB_" BILL",DIR("A")="ARE YOU SURE YOU WANT TO CONTINUE?: ",DIR("B")="NO" W ! D ^DIR K DIR W !
"RTN","IBCB",64,0)
 . I Y'=1 S IBOK=0
"RTN","IBCB",65,0)
 Q IBOK
"RTN","IBCB",66,0)
 ;
"RTN","IBCB",67,0)
SET I $S(IBV:1,$P(^DGCR(399,+X,0),"^",13):1,1:0) S CT=CT+1 D SET2
"RTN","IBCB",68,0)
 Q
"RTN","IBCB",69,0)
SET2 S IBND0=^DGCR(399,+X,0)
"RTN","IBCB",70,0)
 N IBFTP
"RTN","IBCB",71,0)
 ; JWS;IB*2.0*592 US1108 - Dental EDI 837D / form J430D
"RTN","IBCB",72,0)
 S IBFTP=$S($$FT^IBCEF(+X)=3:"/UB",$$FT^IBCEF(+X)=2:"/1500",$$FT^IBCEF(+X)=7:"/J430D",1:"")
"RTN","IBCB",73,0)
 S ^UTILITY($J,"UB",CT)=9999999-IBT_"^"_+X_"^"_$P($G(^DGCR(399.3,+$P(IBND0,"^",7),0)),"^",4)_"-"_$$BCHGTYPE^IBCU(+X)_"^"_$P($P($P($P(^DD(399,.13,0),"^",3),$P(IBND0,"^",13)_":",2),";",1),"/",1)
"RTN","IBCB",74,0)
 S ^UTILITY($J,"UB",CT)=^UTILITY($J,"UB",CT)_"^"_$S($P(IBND0,U,27)=1:"INST"_IBFTP,$P(IBND0,U,27)=2:"PROF"_IBFTP,1:"")
"RTN","IBCB",75,0)
 Q
"RTN","IBCB",76,0)
ST ; Do not use the variable IBH when calling this entry point
"RTN","IBCB",77,0)
 L ^DGCR(399,IBIFN):5 I '$T W !,"No further processing of this record permitted at this time.",!,"Record locked by another user.  Try again later." Q
"RTN","IBCB",78,0)
 D RECALL^DILFD(399,IBIFN_",",DUZ)
"RTN","IBCB",79,0)
 D NOPTF^IBCB2 I 'IBAC1 D NOPTF1^IBCB2 Q
"RTN","IBCB",80,0)
 I IBAC'=1&(IBAC'=4.1) G ST2
"RTN","IBCB",81,0)
ST1 K ^UTILITY($J) S IBPOPOUT=0
"RTN","IBCB",82,0)
 ; Only allow view of bill waiting for MRA or pending extract
"RTN","IBCB",83,0)
 I $P($G(^DGCR(399,IBIFN,0)),U,13)=2 D  G Q
"RTN","IBCB",84,0)
 . W !,"This bill is requesting an MRA - can only view bill data"
"RTN","IBCB",85,0)
 . S IBV=1 D VIEW^IBCB2
"RTN","IBCB",86,0)
 I IBAC=4.1 D  G Q
"RTN","IBCB",87,0)
 . Q:$P($G(^DGCR(399,IBIFN,0)),U,13)'=3
"RTN","IBCB",88,0)
 . N Z
"RTN","IBCB",89,0)
 . S Z=$P($G(^IBA(364,+$$LAST364^IBCEF4(IBIFN),0)),U,3)
"RTN","IBCB",90,0)
 . I Z'="X"&(Z'="P") Q
"RTN","IBCB",91,0)
 . W !,"This bill has a transmit status of ",$$EXPAND^IBTRE(364,.03,Z)," - can only view bill data"
"RTN","IBCB",92,0)
 . S IBV=1 D VIEW^IBCB2
"RTN","IBCB",93,0)
 D ^IBCSCU,^IBCSC1 G Q:'$T!($G(IBPOPOUT))
"RTN","IBCB",94,0)
ST2 K IBTXPRT,IBPOPOUT
"RTN","IBCB",95,0)
 D ^IBCB1                 ; perform IB edits/authorize the bill
"RTN","IBCB",96,0)
 I $G(IBCIREDT) G ST1     ; Re-edit the bill
"RTN","IBCB",97,0)
 KILL IBCIREDT            ; clean up
"RTN","IBCB",98,0)
 QUIT
"RTN","IBCB",99,0)
 ;
"RTN","IBCB",100,0)
Q ;
"RTN","IBCB",101,0)
 K IBIFN,IBV,IBAC
"RTN","IBCB",102,0)
 ;***
"RTN","IBCB",103,0)
 ;I $D(XRT0) S:'$D(XRTN) XRTN="IBCB" D T1^%ZOSV ;stop rt clock
"RTN","IBCB",104,0)
 Q
"RTN","IBCB",105,0)
 ;
"RTN","IBCB",106,0)
EDI S IBAC=1,IBV=0 D EN G Q:'IBAC1,EDI
"RTN","IBCB",107,0)
REV G Q
"RTN","IBCB",108,0)
AUT S IBAC=3,IBV=0 D EN G Q:'IBAC1,AUT
"RTN","IBCB",109,0)
GEN S IBAC=4,IBV=1 D EN G Q:'IBAC1,GEN
"RTN","IBCB",110,0)
VIEW S IBAC=4.1,IBV=1 D EN G Q:'IBAC1,VIEW
"RTN","IBCB",111,0)
 Q
"RTN","IBCB",112,0)
 ;
"RTN","IBCB1")
0^93^B70254714^B67924398
"RTN","IBCB1",1,0)
IBCB1 ;ALB/AAS - Process bill after enter/edited ;2-NOV-89
"RTN","IBCB1",2,0)
 ;;2.0;INTEGRATED BILLING;**70,106,51,137,161,182,155,327,432,592**;21-MAR-94;Build 58
"RTN","IBCB1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCB1",4,0)
 ;
"RTN","IBCB1",5,0)
 ;MAP TO DGCRB1
"RTN","IBCB1",6,0)
 ;
"RTN","IBCB1",7,0)
 ;IBQUIT = Flag to stop processing
"RTN","IBCB1",8,0)
 ;IBVIEW = Flag for Bill has been viewed
"RTN","IBCB1",9,0)
 ;IBDISP = Flag for Bill entering display been viewed.
"RTN","IBCB1",10,0)
 ;
"RTN","IBCB1",11,0)
 K ^UTILITY($J) I $D(IBAC),IBAC>1 G @IBAC
"RTN","IBCB1",12,0)
1 ;complete bill
"RTN","IBCB1",13,0)
 D END,EDITS^IBCB2 G:IBQUIT END
"RTN","IBCB1",14,0)
 ;
"RTN","IBCB1",15,0)
 I '$$IICM^IBCB2(IBIFN) G END ; Ingenix ClaimsManager
"RTN","IBCB1",16,0)
 I '$$IIQMED^IBCB2(IBIFN) G END ; DSS QuadraMed Claims Scrubber
"RTN","IBCB1",17,0)
 ;
"RTN","IBCB1",18,0)
3 ;authorize bill/request MRA
"RTN","IBCB1",19,0)
 I '$D(^XUSEC("IB AUTHORIZE",DUZ))!('$D(IBIFN)) W !!,"You do not hold the Authorize Key.",! G END
"RTN","IBCB1",20,0)
 I '$P($G(^IBE(350.9,1,1)),"^",23),DUZ=$P(^DGCR(399,IBIFN,"S"),"^",2) W !!,"Entering user can not authorize.",! G END
"RTN","IBCB1",21,0)
 I $P(^DGCR(399,IBIFN,"S"),"^",9) W !,"Already Approved, Can't change" G END
"RTN","IBCB1",22,0)
 D:'$G(IBAC)!($G(IBAC)>1) EDITS^IBCB2 G:IBQUIT END
"RTN","IBCB1",23,0)
 ;
"RTN","IBCB1",24,0)
 I $G(IBAC)'=1,'$$IICM^IBCB2(IBIFN) G END ; Ingenix ClaimsManager
"RTN","IBCB1",25,0)
 I $G(IBAC)'=1,'$$IIQMED^IBCB2(IBIFN) G END ; DSS QuadraMed Claims Scrubber
"RTN","IBCB1",26,0)
 ;
"RTN","IBCB1",27,0)
AUTH S IBMRA=$$REQMRA^IBEFUNC(IBIFN)
"RTN","IBCB1",28,0)
 S IBEND=0
"RTN","IBCB1",29,0)
 I IBMRA["R" D AUTH^IBCB11 G:IBEND END ;MRA normally required, but MEDIGAP ins co
"RTN","IBCB1",30,0)
 ;                         doesn't want/need it or MRA parameter off
"RTN","IBCB1",31,0)
 ;
"RTN","IBCB1",32,0)
 W !!,"THIS BILL WILL "_$P("NOT ^",U,$$TXMT^IBCEF4(IBIFN)+1)_"BE TRANSMITTED ELECTRONICALLY"
"RTN","IBCB1",33,0)
 W !!,"WANT TO ",$S('IBMRA:"AUTHORIZE BILL",1:"REQUEST AN MRA")," AT THIS TIME" S %=2 D YN^DICN G:%=-1!(%=2) END
"RTN","IBCB1",34,0)
 I '% W !?4,"YES - If finished entering bill information and to allow bill to be printed or transmitted",!?4,"No - To take no action" G AUTH
"RTN","IBCB1",35,0)
 S (DIC,DIE)=399,IBYY=$S('IBMRA:"@90",1:"@901"),DA=IBIFN,DR="[IB STATUS]" D ^DIE K DIC,DIE,IBYY D:$D(IBX3) DISAP^IBCBULL
"RTN","IBCB1",36,0)
 I $S('IBMRA:'$P(^DGCR(399,IBIFN,"S"),"^",9),1:'$P($G(^DGCR(399,IBIFN,"TX")),U,6)) G END
"RTN","IBCB1",37,0)
 ;
"RTN","IBCB1",38,0)
 ; Update the review status for all EOB's on file
"RTN","IBCB1",39,0)
 D STAT^IBCEMU2(IBIFN,3)     ; Accepted - Complete EOB
"RTN","IBCB1",40,0)
 ;
"RTN","IBCB1",41,0)
 D AUTOCK^IBCEU2(IBIFN) ; Checks for need to add any codes to bill based on information already on bill, specifically for EDI purposes
"RTN","IBCB1",42,0)
 S IBTXSTAT=$$TXMT^IBCEF4(IBIFN,,1)  ;Determine transmit, whether live/test
"RTN","IBCB1",43,0)
 I IBTXSTAT D  I IBMRA D CTCOPY^IBCCCB(IBIFN,1) G END
"RTN","IBCB1",44,0)
 .W !,"  Adding "
"RTN","IBCB1",45,0)
 .W:+IBTXSTAT=2 "test " W "bill to BILL TRANSMISSION File"_$S('IBMRA:"",1:" for MRA submission")_".",!
"RTN","IBCB1",46,0)
 .W:+IBTXSTAT=1&IBMRA "  Bill is no longer editable unless returned in error from Medicare."
"RTN","IBCB1",47,0)
 .S Y=$$ADDTBILL(IBIFN,+IBTXSTAT)
"RTN","IBCB1",48,0)
 .W ! W:'$P(Y,U,3) *7 W $S($P(Y,U,3):"  Bill will be submitted electronically",1:"  Error loading into transmit file - bill can not be transmitted.")
"RTN","IBCB1",49,0)
 .;
"RTN","IBCB1",50,0)
 ;
"RTN","IBCB1",51,0)
 W !,"Passing completed Bill to Accounts Receivable.  Bill is no longer editable."
"RTN","IBCB1",52,0)
 D ARPASS(IBIFN,1)
"RTN","IBCB1",53,0)
 G:'$G(PRCASV("OKAY")) END
"RTN","IBCB1",54,0)
 W !,"Completed Bill Successfully sent to Accounts Receivable." D FIND^IBOHCK(DFN,IBIFN)
"RTN","IBCB1",55,0)
 ;
"RTN","IBCB1",56,0)
 ; Check to see if any unreviewed status messages or EOBs on file and
"RTN","IBCB1",57,0)
 ; what to do about them
"RTN","IBCB1",58,0)
 N IBTXBARR
"RTN","IBCB1",59,0)
 S IBRESUB=$$RESUB^IBCECSA4($S($G(IBCNCOPY):$P($G(^DGCR(399,IBIFN,0)),U,15),1:IBIFN),+IBTXSTAT,"E",.IBTXBARR)
"RTN","IBCB1",60,0)
 I IBRESUB=2 D         ; update review statuses to be 'review complete'
"RTN","IBCB1",61,0)
 . N IBDA S IBDA=0
"RTN","IBCB1",62,0)
 . F  S IBDA=$O(IBTXBARR(IBDA)) Q:'IBDA  D UPDEDI^IBCEM(IBDA,$S($G(IBCNCOPY):"R",1:"E"))
"RTN","IBCB1",63,0)
 . Q
"RTN","IBCB1",64,0)
 ;
"RTN","IBCB1",65,0)
 K IBTXPRT
"RTN","IBCB1",66,0)
 ;
"RTN","IBCB1",67,0)
4 ;generate/print bill
"RTN","IBCB1",68,0)
 G:'$D(IBIFN) END
"RTN","IBCB1",69,0)
 S:'$D(IBMRA) IBMRA=+$$NEEDMRA^IBEFUNC(IBIFN)
"RTN","IBCB1",70,0)
 I 'IBMRA,'$P(^DGCR(399,IBIFN,"S"),"^",9) W !!,*7,"Not Authorized, Can Not Print!" G END
"RTN","IBCB1",71,0)
 I IBMRA,'$P(^DGCR(399,IBIFN,"TX"),"^",6) W !!,*7,"Not Ready For MRA Submission, Can Not Print!" G END
"RTN","IBCB1",72,0)
 S IBTXSTAT=$$TXMT^IBCEF4(IBIFN)
"RTN","IBCB1",73,0)
 I IBMRA,$$NEEDMRA^IBEFUNC(IBIFN)'["R" W !!,*7,"MRA Submission not yet confirmed by Austin, Can Not Print!" Q:$S('IBTXSTAT:1,1:"XP"'[$P($G(^IBA(364,+$$LAST364^IBCEF4(IBIFN),0)),U,3))
"RTN","IBCB1",74,0)
 I +IBTXSTAT,$D(^IBA(364,"ABDT",IBIFN)) S IBTXOK="" D  I 'IBTXOK S %=2 G GENTX
"RTN","IBCB1",75,0)
 . N IBX,IBTST
"RTN","IBCB1",76,0)
 . S IBX=+$$LAST364^IBCEF4(IBIFN),IBTST=""
"RTN","IBCB1",77,0)
 . I $$TEST^IBCEF4(IBIFN) S (IBTXOK,IBTST)=1
"RTN","IBCB1",78,0)
 . I "XP"[$P($G(^IBA(364,IBX,0)),U,3) D:'IBTST  Q
"RTN","IBCB1",79,0)
 .. ;JWS;IB*2.0*592
"RTN","IBCB1",80,0)
 .. I $$FT^IBCEF(IBIFN)=7 W !!,*7,"This Bill Can Not Be Printed"
"RTN","IBCB1",81,0)
 .. E  W !!,*7,"This Bill Can Not Be Printed Until Transmit Confirmed"
"RTN","IBCB1",82,0)
 .. W:IBMRA " (to request an MRA)" D:'$D(IBVIEW) VIEW^IBCB2
"RTN","IBCB1",83,0)
 . W !!,"This Bill Has Already Been Transmitted" W:IBMRA " (to request an MRA)"
"RTN","IBCB1",84,0)
 . S DIR("B")="Y",DIR("A")="WANT TO PRINT IT ANYWAY",DIR(0)="Y" D ^DIR K DIR Q:$D(DTOUT)!$D(DUOUT)!'Y  S IBTXOK=1
"RTN","IBCB1",85,0)
 D DISP^IBCB2
"RTN","IBCB1",86,0)
 S:'$D(IBQUIT) IBQUIT=0
"RTN","IBCB1",87,0)
 D:'$D(IBVIEW) VIEW^IBCB2 G:IBQUIT END
"RTN","IBCB1",88,0)
 S IBPNT=$P(^DGCR(399,IBIFN,"S"),"^",12)
"RTN","IBCB1",89,0)
GEN I $$TEST^IBCEF4(IBIFN) W !!,"THIS BILL IS BEING USED AS A TRANSMISSION TEST BILL"
"RTN","IBCB1",90,0)
 W !!,"WANT TO ",$S(IBPNT]"":"RE-",1:""),"PRINT BILL AT THIS TIME" S %=2 D YN^DICN I %=-1 D:+$G(IBAC)=1 END,CTCOPY^IBCCCB(IBIFN) G END
"RTN","IBCB1",91,0)
 I '% W !?4,"YES - to print the bill now",!?4,"NO - To take no action" G GEN
"RTN","IBCB1",92,0)
 ;JWS;IB*2.0*592
"RTN","IBCB1",93,0)
 I %=1,$$FT^IBCEF(IBIFN)=7 W !!,*7,"Dental Claims can not be printed." G END
"RTN","IBCB1",94,0)
GENTX I %'=1 D:+$G(IBAC)=1 END,CTCOPY^IBCCCB(IBIFN) G END
"RTN","IBCB1",95,0)
 ;
"RTN","IBCB1",96,0)
 ; Bill has never been printed.  First time print.
"RTN","IBCB1",97,0)
 I 'IBPNT D  G END
"RTN","IBCB1",98,0)
 . I $D(IBTXPRT) D TXPRTS
"RTN","IBCB1",99,0)
 . D EN1^IBCF
"RTN","IBCB1",100,0)
 . I $D(IBTXPRT) D TXPRT
"RTN","IBCB1",101,0)
 . ;D MRA^IBCEMU1(IBIFN)       ; Printing the MRA ;WCJ;IB*2.0*432;MRA may have a diffierent claim number if this is tertiary
"RTN","IBCB1",102,0)
 . D MRA^IBCEMU1($$GETMRACL^IBCAPR(IBIFN))  ;WCJ;IB*2.0*432;see above
"RTN","IBCB1",103,0)
 . I $G(IBMRANOT) D EOBALL^IBCAPR2(IBIFN)  ;WCJ;IB*2.0*432 print all the EOBs (ask device once)
"RTN","IBCB1",104,0)
 . I +$G(IBAC)=1 D END,CTCOPY^IBCCCB(IBIFN)
"RTN","IBCB1",105,0)
 . Q
"RTN","IBCB1",106,0)
 ;
"RTN","IBCB1",107,0)
 ; Below section is for re-prints
"RTN","IBCB1",108,0)
RPNT G:$$NEEDMRA^IBEFUNC(IBIFN) END
"RTN","IBCB1",109,0)
 R !!,"(2)nd Notice, (3)rd Notice, (C)opy or (O)riginal: C// ",IBPNT:DTIME S:IBPNT="" IBPNT="C" G:IBPNT["^" END
"RTN","IBCB1",110,0)
 S IBPNT=$E(IBPNT,1) I "23oOcC"'[IBPNT W !?5,"Enter 'O' to reprint the original bill or",!?5,"Enter 'C' to reprint the bill as a duplicate copy or",!?5,"Enter '2' or '3' to print 2nd or 3rd follow-up notices." S IBPNT=1 G RPNT
"RTN","IBCB1",111,0)
 W "  (",$S("cC"[IBPNT:"COPY","oO"[IBPNT:"ORIGINAL",IBPNT=2:"2nd NOTICE",IBPNT=3:"3rd NOTICE",1:""),")"
"RTN","IBCB1",112,0)
 I $D(IBTXPRT) D
"RTN","IBCB1",113,0)
 . D TXPRTS
"RTN","IBCB1",114,0)
 . I "oOcC"[IBPNT S IBRESUB=$$RESUB^IBCECSA4(IBIFN,1,"P")
"RTN","IBCB1",115,0)
 S IBPNT=$S("oO"[IBPNT:1,"cC"[IBPNT:0,1:IBPNT)
"RTN","IBCB1",116,0)
 D EN1X^IBCF D:$D(IBTXPRT) TXPRT
"RTN","IBCB1",117,0)
 D MRA^IBCEMU1(IBIFN)       ; Printing the MRA
"RTN","IBCB1",118,0)
 ;
"RTN","IBCB1",119,0)
 ;
"RTN","IBCB1",120,0)
END K IBER,IBEND D END^IBCBB1 K IBQUIT,IBVIEW,IBDISP,IBST,IB,PRCAERCD,PRCAERR,PRCASVC,PRCAT,DGRA2,IBBT,IBCH,IBNDS,IBOA,IBREV,IBX,DGXRF1,PRCAORA,IBX3,DGBILLBS,DGII,DGVISCNT,DGFIL,DGTE,IBTXOK,IBTXSTAT,IBMRA,IBNOFIX
"RTN","IBCB1",121,0)
 K %DT,DIC,DIE,I,J,X,Y,Y1,Y2,IBER,IBDFN,IBDSDT,IBJ,IBNDI1,IBZZ,VA,IBMA,IBXDT,DI,PRCAPAYR,DGBS,DGCNT,DGDA,DGPAG,DGREVC,DGRV,DGTEXT,DGTOTPAG,IBOPV,DGLCNT,DGTEXT1,DGRSPAC,DGSM,IBPNT,DGINPT,DGLL,IBCPTN,IBFL
"RTN","IBCB1",122,0)
 K IBRESUB,IBOPV1,IBOPV2,IBCHG,DGBIL1,DGU,DDH,IBA1,IBINS,IBPROC,PRCARI K:'$D(PRCASV("NOTICE")) PRCASV
"RTN","IBCB1",123,0)
 K ^TMP("IBXDATA",$J),^TMP("IBXEDIT",$J)
"RTN","IBCB1",124,0)
 K IBCISNT,IBCISTAT,IBCIERR   ; remove ClaimsManager variables
"RTN","IBCB1",125,0)
 Q
"RTN","IBCB1",126,0)
 ;
"RTN","IBCB1",127,0)
TX1(IBX,RESUB) ; Transmit a single bill from file 364 entry # IBX
"RTN","IBCB1",128,0)
 ; RESUB = flag (1 = resubmitting a bill, 0 = submitting bill 1st time)
"RTN","IBCB1",129,0)
 ; Returns 1 if successfully extracted to mailman queue for transmission,
"RTN","IBCB1",130,0)
 ;         0 if extract not successful
"RTN","IBCB1",131,0)
 N IBTXOK,IBVVSAVE
"RTN","IBCB1",132,0)
 K ^TMP("IBRESUBMIT",$J),^TMP("IBONE",$J)
"RTN","IBCB1",133,0)
 S IBVVSAVE("IBX")=IBX,^TMP("IBONE",$J)=+$G(RESUB),^($J,IBX)=""
"RTN","IBCB1",134,0)
 D ONE^IBCE837
"RTN","IBCB1",135,0)
 S IBX=IBVVSAVE("IBX")
"RTN","IBCB1",136,0)
 I $P($G(^IBA(364,IBX,0)),U,3)="P" S IBTXOK=1
"RTN","IBCB1",137,0)
 K ^TMP("IBONE",$J)
"RTN","IBCB1",138,0)
 Q $G(IBTXOK)
"RTN","IBCB1",139,0)
 ;
"RTN","IBCB1",140,0)
ARONLY(IBIFN) ; Pass bill to A/R, but that's all
"RTN","IBCB1",141,0)
 D ARPASS(IBIFN,0)
"RTN","IBCB1",142,0)
 Q
"RTN","IBCB1",143,0)
 ;
"RTN","IBCB1",144,0)
ARPASS(IBIFN,UPDOK) ;Pass bill to A/R as NEW BILL
"RTN","IBCB1",145,0)
 ;IBIFN = bill entry #
"RTN","IBCB1",146,0)
 ;UPDOK = flag 1: if error going to A/R, allow interactive edit
"RTN","IBCB1",147,0)
 ;             0: send bulletin to IB EDI for error going to A/R
"RTN","IBCB1",148,0)
 Q:+$$STA^PRCAFN(+IBIFN)'=201  ;Must not have been sent previously
"RTN","IBCB1",149,0)
 D GVAR^IBCBB
"RTN","IBCB1",150,0)
 ;Can't be an ins co that won't reimburse
"RTN","IBCB1",151,0)
 Q:$S($P($G(^DGCR(399,IBIFN,0)),U,11)="i":'IBNDMP,1:0)
"RTN","IBCB1",152,0)
 D ARRAY^IBCBB1,^PRCASVC6
"RTN","IBCB1",153,0)
 D REL^PRCASVC:$G(PRCASV("OKAY"))
"RTN","IBCB1",154,0)
 I '$G(PRCASV("OKAY")) D
"RTN","IBCB1",155,0)
 . N IBQUIT,IBQUIT1
"RTN","IBCB1",156,0)
 . S IBQUIT=0
"RTN","IBCB1",157,0)
 . I $G(UPDOK) D  Q
"RTN","IBCB1",158,0)
 .. F  D  Q:IBQUIT
"RTN","IBCB1",159,0)
 ... D DSPARERR^IBCB2("")
"RTN","IBCB1",160,0)
 ... Q:IBQUIT
"RTN","IBCB1",161,0)
 ... I $$ASKEDIT^IBCB2($G(IBAC)) D VIEW1^IBCB2 Q
"RTN","IBCB1",162,0)
 ... S IBQUIT=1
"RTN","IBCB1",163,0)
 . N XMSUB,XMY,XMTEXT,XMDUZ,IBT
"RTN","IBCB1",164,0)
 . S XMSUB="ERROR PASSING BILL TO A/R ON CONFIRMATION",XMTEXT="IBT(",XMY="G.IB EDI",XMDUZ=.5
"RTN","IBCB1",165,0)
 . S IBT(1)="A problem has been detected while trying to pass bill "_$P($G(^DGCR(399,IBIFN,0)),U)_" to"
"RTN","IBCB1",166,0)
 . S IBT(2)="Accounts Receivable when updating the bill's electronic confirmation."
"RTN","IBCB1",167,0)
 . S IBT(3)="Please use the option PASS BILL TO A/R to complete this process."
"RTN","IBCB1",168,0)
 . D ^XMD
"RTN","IBCB1",169,0)
 Q
"RTN","IBCB1",170,0)
 ;
"RTN","IBCB1",171,0)
ADDTBILL(IBIFN,TXST) ; Add new transmit bill rec to file 364 for bill IBIFN
"RTN","IBCB1",172,0)
 ; TXST = test flag 1=live, 2=test
"RTN","IBCB1",173,0)
 N COB,DD,DO,DIC,DLAYGO,X
"RTN","IBCB1",174,0)
 S TXST=($G(TXST)/2\1),COB=$$COB^IBCEF(IBIFN)
"RTN","IBCB1",175,0)
 S DIC(0)="L",DIC="^IBA(364,",DLAYGO=364,X=IBIFN,DIC("DR")=".03///X;.04///NOW;.07////"_TXST_";.08////"_COB D FILE^DICN
"RTN","IBCB1",176,0)
 Q Y
"RTN","IBCB1",177,0)
 ;
"RTN","IBCB1",178,0)
TXPRTS ; Save off last print date to see if bill was reprinted without queueing
"RTN","IBCB1",179,0)
 I '$$NEEDMRA^IBEFUNC(IBIFN) S IBTXPRT("PRT")=$P($G(^DGCR(399,IBIFN,"S")),U,14)
"RTN","IBCB1",180,0)
 Q
"RTN","IBCB1",181,0)
 ;
"RTN","IBCB1",182,0)
TXPRT ; Set variable if print was tasked or bill was printed (last print date changed)
"RTN","IBCB1",183,0)
 I '$$NEEDMRA^IBEFUNC(IBIFN),$S($G(ZTSK):1,1:IBTXPRT("PRT")'=$P($G(^DGCR(399,IBIFN,"S")),U,14)) S IBTXPRT=1
"RTN","IBCB1",184,0)
 Q
"RTN","IBCB1",185,0)
 ;
"RTN","IBCB2")
0^38^B53477183^B52688677
"RTN","IBCB2",1,0)
IBCB2 ;ALB/AAS - Process bill after enter/edited ;13-DEC-89
"RTN","IBCB2",2,0)
 ;;2.0;INTEGRATED BILLING;**52,51,161,182,155,447,592**;21-MAR-94;Build 58
"RTN","IBCB2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCB2",4,0)
 ;
"RTN","IBCB2",5,0)
 ;MAP TO DGCRB2
"RTN","IBCB2",6,0)
 ;
"RTN","IBCB2",7,0)
 ;IBQUIT = Flag to stop processing
"RTN","IBCB2",8,0)
 ;IBVIEW = Flag showing Bill has been viewed
"RTN","IBCB2",9,0)
 ;IBDISP = Flag showing Bill entering display has been viewed.
"RTN","IBCB2",10,0)
 ;IBNOFIX = Flag to indicate do not ask to edit or review bill screens
"RTN","IBCB2",11,0)
 ;IBREEDIT = Flag to indicate Bill has been re-edited
"RTN","IBCB2",12,0)
 ;
"RTN","IBCB2",13,0)
VIEW ;View screens; if status allows editing , allow editing
"RTN","IBCB2",14,0)
 N Y,DIR
"RTN","IBCB2",15,0)
 S IBPOPOUT=0
"RTN","IBCB2",16,0)
 S IBVIEW=1,IBV=$S($D(IBV):IBV,1:1)
"RTN","IBCB2",17,0)
 S DIR(0)="YA",DIR("B")="NO",DIR("A")="WANT TO "_$S('IBV:"EDIT",1:"REVIEW")_" SCREENS? ",DIR("?",1)="   YES - to "_$S('IBV:"EDIT",1:"REVIEW")_" the screens",DIR("?")="   NO - To take no action"
"RTN","IBCB2",18,0)
 D ^DIR K DIR
"RTN","IBCB2",19,0)
 S:$D(DTOUT) IBQUIT=1
"RTN","IBCB2",20,0)
 Q:Y'=1
"RTN","IBCB2",21,0)
 I $G(IBREEDIT)=1,'IBV S IBREEDIT=2   ; set flag indicating re-edit
"RTN","IBCB2",22,0)
VIEW1 S IBVIEW=1,IBEDIT=0
"RTN","IBCB2",23,0)
 D SCREENS
"RTN","IBCB2",24,0)
 S:$G(IBPOPOUT) IBQUIT=1
"RTN","IBCB2",25,0)
 Q
"RTN","IBCB2",26,0)
 ;
"RTN","IBCB2",27,0)
DISP S IB("S")=$S($D(^DGCR(399,IBIFN,"S")):^("S"),1:"")
"RTN","IBCB2",28,0)
 W ! D DISP^IBCNQ W !
"RTN","IBCB2",29,0)
 S IBDISP=1 Q
"RTN","IBCB2",30,0)
 Q
"RTN","IBCB2",31,0)
 ;
"RTN","IBCB2",32,0)
EDITS ; Perform edits on bill prior to authorization/transmission
"RTN","IBCB2",33,0)
 N IBREEDIT
"RTN","IBCB2",34,0)
ED1 ;
"RTN","IBCB2",35,0)
 S IBQUIT=0
"RTN","IBCB2",36,0)
 I '$D(IBER)!('$D(PRCASV)) D ALLED(.IBQUIT)
"RTN","IBCB2",37,0)
 ;
"RTN","IBCB2",38,0)
 ; If the user is wanting to quit, but there are some unresolved
"RTN","IBCB2",39,0)
 ; errors reported by ClaimsManager, then capture the user's Exit
"RTN","IBCB2",40,0)
 ; comments.
"RTN","IBCB2",41,0)
 ;
"RTN","IBCB2",42,0)
 I $$CM^IBCIUT1(IBIFN),IBQUIT,$P($G(^IBA(351.9,IBIFN,0)),U,2)=4 D COMMENT^IBCIUT7(IBIFN,1)
"RTN","IBCB2",43,0)
 ;
"RTN","IBCB2",44,0)
 Q:IBQUIT
"RTN","IBCB2",45,0)
 D:'$D(IBDISP) DISP
"RTN","IBCB2",46,0)
 ;
"RTN","IBCB2",47,0)
 ; If claim re-edit, then call the IB edit checks again
"RTN","IBCB2",48,0)
 I '$D(IBVIEW) S IBREEDIT=1 D VIEW I $G(IBREEDIT)=2 K IBER,IBDISP,IBVIEW G ED1
"RTN","IBCB2",49,0)
 Q
"RTN","IBCB2",50,0)
 ;
"RTN","IBCB2",51,0)
ALLED(IBQUIT) ; Billing edit/correction
"RTN","IBCB2",52,0)
 N IBQUIT1,IBDONE1,IBDONE,IBEDIT,IBCORR,IBER,IBPRT,IBXERR
"RTN","IBCB2",53,0)
 S (IBQUIT,IBDONE,IBCORR)=0,IBER=""
"RTN","IBCB2",54,0)
 ; IBDONE = 1 ==> exit, no errors 
"RTN","IBCB2",55,0)
 ; IBQUIT = 1 ==> exit, errors not corrected
"RTN","IBCB2",56,0)
 ;JWS;IB*2.0*592:Dental form #7 don't display Box 24 info for dental
"RTN","IBCB2",57,0)
 I $$FT^IBCEF(IBIFN)=2,'$G(IBNOFIX) D DISP24(IBIFN,.IBCORR,.IBQUIT)
"RTN","IBCB2",58,0)
 ;JWS;IB*2.0*592:Dental form #7 do same as CMS-1500
"RTN","IBCB2",59,0)
 F  D  Q:IBQUIT!IBDONE  D VIEW1 I $$FT^IBCEF(IBIFN)=2!($$FT^IBCEF(IBIFN)=7),'$G(IBNOFIX),'IBQUIT S IBCORR=0 D:$$FT^IBCEF(IBIFN)'=7 DISP24(IBIFN,.IBCORR,.IBQUIT)
"RTN","IBCB2",60,0)
 . I $G(IBPOPOUT) S IBQUIT=1
"RTN","IBCB2",61,0)
 . Q:IBQUIT!IBCORR
"RTN","IBCB2",62,0)
 . I $G(IBNOFIX) D
"RTN","IBCB2",63,0)
 .. W !!,"... Checking claim validity"
"RTN","IBCB2",64,0)
 . E  D
"RTN","IBCB2",65,0)
 .. W !!,"... Executing national IB edits"
"RTN","IBCB2",66,0)
 . D EN^IBCBB,LOCERR
"RTN","IBCB2",67,0)
 . ;
"RTN","IBCB2",68,0)
 . I $G(IBER)'=""!$D(IBXERR) D  Q:'IBDONE
"RTN","IBCB2",69,0)
 .. D DSPLERR ; Displays warnings/errors
"RTN","IBCB2",70,0)
 .. K IBXERR
"RTN","IBCB2",71,0)
 .. Q:IBQUIT!(IBDONE)
"RTN","IBCB2",72,0)
 .. I $G(IBNOFIX) S IBDONE=1 Q
"RTN","IBCB2",73,0)
 .. I '$$ASKEDIT($G(IBAC)) W ! S IBQUIT=1 ; Don't want to re-edit
"RTN","IBCB2",74,0)
 .. ;
"RTN","IBCB2",75,0)
 . I $G(IBNOFIX) S IBDONE=1 Q
"RTN","IBCB2",76,0)
 . S IBEDIT=0
"RTN","IBCB2",77,0)
 . I $S($P($G(^DGCR(399,IBIFN,0)),U,13)>2:1,$D(PRCASV):'$D(PRCASV("OKAY")),1:0) D  S:'IBQUIT&'IBEDIT IBDONE=1 Q
"RTN","IBCB2",78,0)
 .. N IBQUIT1
"RTN","IBCB2",79,0)
 .. S IBQUIT1=0
"RTN","IBCB2",80,0)
 .. W !!!,"... Executing A/R edits"
"RTN","IBCB2",81,0)
 .. I $P($G(^DGCR(399,IBIFN,0)),U,13)>2 D GVAR^IBCBB,ARRAY^IBCBB1
"RTN","IBCB2",82,0)
 .. D ARCHK($G(IBNOFIX),0,.IBQUIT1,.IBQUIT,.IBEDIT,.PRCASV)
"RTN","IBCB2",83,0)
 . S IBDONE=1 ; No errors
"RTN","IBCB2",84,0)
 . S:$G(IBPRT("PRT"))'<0 IBQUIT=0
"RTN","IBCB2",85,0)
 Q
"RTN","IBCB2",86,0)
 ;
"RTN","IBCB2",87,0)
ARCHK(IBNOFIX,IBNOPRT,IBQUIT1,IBQUIT,IBEDIT,PRCASV) ; A/R Verification
"RTN","IBCB2",88,0)
 ; Returns IBEDIT, IBQUIT1, IBQUIT,PRCASV array if passed by reference
"RTN","IBCB2",89,0)
 ; IBNOFIX = 1 if no editing needed
"RTN","IBCB2",90,0)
 ; IBNOPRT = 1 if no printing needed
"RTN","IBCB2",91,0)
 F  D ^PRCASVC6 D  Q:IBQUIT1!IBEDIT  D GVAR^IBCBB,ARRAY^IBCBB1
"RTN","IBCB2",92,0)
 . I '$G(IBNOPRT) Q:$G(IBPRT("PRT"))<0
"RTN","IBCB2",93,0)
 . I PRCASV("OKAY") W:'$G(IBNOPRT) !!,"No A/R errors found" S IBQUIT1=1 Q
"RTN","IBCB2",94,0)
 . I 'PRCASV("OKAY") D  Q
"RTN","IBCB2",95,0)
 .. D DSPARERR($G(IBNOPRT)) ; Display A/R errors
"RTN","IBCB2",96,0)
 .. Q:IBQUIT
"RTN","IBCB2",97,0)
 .. I $G(IBNOFIX) S IBQUIT1=1 Q
"RTN","IBCB2",98,0)
 .. I '$$ASKEDIT($G(IBAC)) W !,"There is an unresolved A/R error - cannot authorize bill" D PAUSE^VALM1 S (IBQUIT,IBQUIT1)=1 Q
"RTN","IBCB2",99,0)
 .. S IBEDIT=1
"RTN","IBCB2",100,0)
 ;
"RTN","IBCB2",101,0)
 Q
"RTN","IBCB2",102,0)
 ;
"RTN","IBCB2",103,0)
DSPLERR ; Display national/local edits failed
"RTN","IBCB2",104,0)
 N Z
"RTN","IBCB2",105,0)
 D PRTH(.IBPRT)
"RTN","IBCB2",106,0)
 I IBPRT("PRT")<0 S IBQUIT=1 Q
"RTN","IBCB2",107,0)
 S Z=0 F  S Z=$O(^TMP($J,"BILL-WARN",Z)) Q:'Z  W !,^(Z) W:'$O(^(Z)) !
"RTN","IBCB2",108,0)
 S Y2=""
"RTN","IBCB2",109,0)
 I IBER'="WARN" F I=1:1 S X=$P(IBER,";",I) Q:X=""  W:I=1 !?5,"**Errors**:" I $D(^IBE(350.8,+$O(^IBE(350.8,"AC",X,0)),0)) S Y=^(0),Y1=$P(Y,"^",5),Y2=Y2_Y1 I Y1<5 W !?5,$E($P(Y,"^",2),1,80)
"RTN","IBCB2",110,0)
 ; IBXERR = local edits return error array
"RTN","IBCB2",111,0)
 ; If IBXERR returns = 1 then we have at least one error
"RTN","IBCB2",112,0)
 ;                   = "" or 0, then we have only local warnings
"RTN","IBCB2",113,0)
 ;           undefined = no local errors or warnings
"RTN","IBCB2",114,0)
 I $D(IBXERR) D
"RTN","IBCB2",115,0)
 . S I="" W !!,?3,"Local Edits:"
"RTN","IBCB2",116,0)
 . S:$G(IBXERR) Y2=3,IBER="L"
"RTN","IBCB2",117,0)
 . F  S I=$O(IBXERR(I)) Q:I=""  W !,?5,$E(IBXERR(I),1,75)
"RTN","IBCB2",118,0)
 I $G(IBPRT("PRT")) D CLOSE(.IBPRT)
"RTN","IBCB2",119,0)
 G:$G(IBNOFIX) Q
"RTN","IBCB2",120,0)
 I $G(IBER)="WARN"!($G(IBXERR)=0) D  ;Warnings only - make biller stop and look
"RTN","IBCB2",121,0)
 . W !
"RTN","IBCB2",122,0)
 . N DIR,X,Y
"RTN","IBCB2",123,0)
 . S DIR(0)="YA",DIR("B")="NO",DIR("A",1)="THIS BILL STILL HAS ONE OR MORE WARNINGS - PLEASE REVIEW THEM CAREFULLY",DIR("A")="ARE YOU SURE IT'S OK TO CONTINUE? "
"RTN","IBCB2",124,0)
 . D ^DIR K DIR
"RTN","IBCB2",125,0)
 . I Y'=1 S Y2=3 Q
"RTN","IBCB2",126,0)
 . S IBER="",IBDONE=1 K IBXERR
"RTN","IBCB2",127,0)
 I $S(Y2'["3"&'$G(IBXERR):0,1:1) K IBXERR
"RTN","IBCB2",128,0)
Q K ^TMP($J,"BILL-WARN")
"RTN","IBCB2",129,0)
 Q
"RTN","IBCB2",130,0)
 ;
"RTN","IBCB2",131,0)
DSPARERR(IBNOPRT) ; Displays A/R errors
"RTN","IBCB2",132,0)
 N I,J,Y,X,ERRPRT
"RTN","IBCB2",133,0)
 I '$G(IBNOPRT) D PRTH(.IBPRT) I IBPRT("PRT")<0 S IBQUIT=1 Q
"RTN","IBCB2",134,0)
 I $P($G(PRCAERR),U,2)'="" D
"RTN","IBCB2",135,0)
 . N Z
"RTN","IBCB2",136,0)
 . S Z=+$O(^IBE(350.8,"C",$P(PRCAERR,U,2),0)),Z=$P($G(^IBE(350.8,+Z,0)),U,2)
"RTN","IBCB2",137,0)
 . W !,?5,"An A/R error has been reported - bill cannot be authorized",!!,?5,$P(PRCAERR,U,2)," - ",$S(Z'="":Z,1:"??")
"RTN","IBCB2",138,0)
 E  D
"RTN","IBCB2",139,0)
 . W !,?5,"An undetermined A/R error was found - "_$G(PRCAERR)
"RTN","IBCB2",140,0)
 I $G(IBPRT("PRT")) D CLOSE(.IBPRT)
"RTN","IBCB2",141,0)
 Q
"RTN","IBCB2",142,0)
 ;
"RTN","IBCB2",143,0)
NOPTF S IBAC1=1 I $D(^DGCR(399,IBIFN,0)),$P(^(0),"^",8),'$D(^DGPT($P(^(0),"^",8),0)) S IBAC1=0
"RTN","IBCB2",144,0)
 Q
"RTN","IBCB2",145,0)
 ;
"RTN","IBCB2",146,0)
NOPTF1 W !!,*7,"PTF Record for this Bill was DELETED!",!,"Further processing not allowed.  Cancel and re-enter." Q
"RTN","IBCB2",147,0)
 ;
"RTN","IBCB2",148,0)
LOCERR ; Check for local edits
"RTN","IBCB2",149,0)
 ; Execute screen post-processor for bills with local scrn 9 affiliations
"RTN","IBCB2",150,0)
 N IBZ,IBXIEN,IBPRT
"RTN","IBCB2",151,0)
 K IBXERR
"RTN","IBCB2",152,0)
 S IBZ=$$LOCSCRN^IBCSC11(IBIFN)     ; IB*2.0*447 BI
"RTN","IBCB2",153,0)
 I IBZ S IBXIEN=IBIFN W !!,"... Executing local IB edits" D FPOST^IBCEFG7(IBZ,0,.IBXERR) I '$D(IBXERR) W !!,"No errors found for local edits"
"RTN","IBCB2",154,0)
 Q
"RTN","IBCB2",155,0)
 ;
"RTN","IBCB2",156,0)
PRTH(IBPRT,IBA) ; Print a heading for error/warnings sent to a printer
"RTN","IBCB2",157,0)
 ; Returns IBPRT = 1 if valid pritner selected
"RTN","IBCB2",158,0)
 ;         IBPRT = -1 if '^' entered
"RTN","IBCB2",159,0)
 ;         IBPRT = 0 if home device
"RTN","IBCB2",160,0)
 N POP,%ZIS,POP
"RTN","IBCB2",161,0)
 S %ZIS("A")="ERROR/WARNING OUTPUT DEVICE: "
"RTN","IBCB2",162,0)
 D ^%ZIS
"RTN","IBCB2",163,0)
 I POP S IBPRT("PRT")=-1 Q
"RTN","IBCB2",164,0)
 I IO=IO(0) S IBPRT("PRT")=0 Q
"RTN","IBCB2",165,0)
 S IBPRT("PRT")=1
"RTN","IBCB2",166,0)
 U IO
"RTN","IBCB2",167,0)
 W !,"INCONSISTENCIES LIST FOR BILL #: ",$P($G(^DGCR(399,IBIFN,0)),U),!,$J("",29),"AT: ",$$FMTE^XLFDT($$NOW^XLFDT,2),!,$J("",19),"GENERATED BY: ",$P($G(^VA(200,DUZ,0)),U),!!
"RTN","IBCB2",168,0)
 Q
"RTN","IBCB2",169,0)
 ;
"RTN","IBCB2",170,0)
CLOSE(IBPRT) ; Close device, reset printer flag
"RTN","IBCB2",171,0)
 D ^%ZISC
"RTN","IBCB2",172,0)
 S IBPRT("PRT")=0
"RTN","IBCB2",173,0)
 D HOME^%ZIS
"RTN","IBCB2",174,0)
 Q
"RTN","IBCB2",175,0)
 ;
"RTN","IBCB2",176,0)
ASKEDIT(IBAC) ; Ask if edit/review of bill is desired
"RTN","IBCB2",177,0)
 ; FUNCTION returns 0/1 for NO/YES
"RTN","IBCB2",178,0)
 ; IBAC = flag for function being performed - to determine edit/review
"RTN","IBCB2",179,0)
 N DIR,X,Y
"RTN","IBCB2",180,0)
 S DIR(0)="YA"
"RTN","IBCB2",181,0)
 S DIR("A",1)=" ",DIR("A",2)=" ",DIR("A")="Do you wish to "_$S($G(IBAC)<4:"edit",1:"review")_" the inconsistencies now? ",DIR("B")="NO"
"RTN","IBCB2",182,0)
 S DIR("?",1)=" ",DIR("?",2)=" ",DIR("?",3)="   YES - To edit inconsistent fields",DIR("?")="   NO - To discontinue this process."
"RTN","IBCB2",183,0)
 D ^DIR K DIR
"RTN","IBCB2",184,0)
 Q (Y=1)
"RTN","IBCB2",185,0)
 ;
"RTN","IBCB2",186,0)
SCREENS ;
"RTN","IBCB2",187,0)
 N IBH
"RTN","IBCB2",188,0)
 D ^IBCSCU,^IBCSC1
"RTN","IBCB2",189,0)
 I $G(IBV) K IBPOPOUT
"RTN","IBCB2",190,0)
 Q
"RTN","IBCB2",191,0)
 ;
"RTN","IBCB2",192,0)
DISP24(IBIFN,IBCORR,IBQUIT) ;
"RTN","IBCB2",193,0)
 W @IOF D BL24^IBCSCH(IBIFN,0)
"RTN","IBCB2",194,0)
 S DIR("A",1)=" ",DIR("A")="Are the above charges correct for this bill? ",DIR("B")="YES",DIR(0)="YA" D ^DIR K DIR
"RTN","IBCB2",195,0)
 I Y'=1 D
"RTN","IBCB2",196,0)
 . I Y=0,$$ASKEDIT($G(IBAC)) S IBCORR=1 Q
"RTN","IBCB2",197,0)
 . S IBQUIT=1
"RTN","IBCB2",198,0)
 Q
"RTN","IBCB2",199,0)
 ;
"RTN","IBCB2",200,0)
IICM(IBIFN) ; Ingenix ClaimsManager: Claim Scrubber
"RTN","IBCB2",201,0)
 ; Send the bill to ClaimsManager, the IBCISTAT variable returned from ClaimsManager indicates
"RTN","IBCB2",202,0)
 ;         3 - Passed CM with no errors
"RTN","IBCB2",203,0)
 ;         5 - User overriding the CM errors
"RTN","IBCB2",204,0)
 ;         7 - the CM interface isn't working
"RTN","IBCB2",205,0)
 ;        11 - User overriding the CM errors (CM not updated)
"RTN","IBCB2",206,0)
 ; 
"RTN","IBCB2",207,0)
 ; Returns False (0) if the bill fails the ClaimsManager Scrubber/errors found
"RTN","IBCB2",208,0)
 ; Returns True (1) if the bill passed the ClaimsManager Scrubber/no errors found or ClaimsManager not On at site
"RTN","IBCB2",209,0)
 ;
"RTN","IBCB2",210,0)
 N IBOK S IBOK=1
"RTN","IBCB2",211,0)
 I +$G(IBIFN),$$CM^IBCIUT1(IBIFN) S IBCISNT=1 D ST2^IBCIST I '$F(".3.5.7.11.","."_IBCISTAT_".") S IBOK=0
"RTN","IBCB2",212,0)
 Q IBOK
"RTN","IBCB2",213,0)
 ;
"RTN","IBCB2",214,0)
IIQMED(IBIFN) ; DSS QuadraMed Interface: QuadraMed Claim Scrubber
"RTN","IBCB2",215,0)
 ; Send the bill to the QuadraMed Claim Scrubber
"RTN","IBCB2",216,0)
 ; Returns False (0) if the bill fails the QuadraMed Scrubber/errors found
"RTN","IBCB2",217,0)
 ; Returns True (1) if the bill passed the QuadraMed Scrubber/no errors found or QuadraMed not On at site
"RTN","IBCB2",218,0)
 ;
"RTN","IBCB2",219,0)
 ; QuadraMed Scrubber EN^VEJDIBSC returns IBQMED = 1 if no error found, returns 0 if error found
"RTN","IBCB2",220,0)
 ;
"RTN","IBCB2",221,0)
 N IBQMED S IBQMED=1
"RTN","IBCB2",222,0)
 I +$G(IBIFN),$$QMED^IBCU1("EN^VEJDIBSC",IBIFN) D EN^VEJDIBSC(IBIFN)
"RTN","IBCB2",223,0)
 Q IBQMED
"RTN","IBCBB")
0^94^B85882091^B79149601
"RTN","IBCBB",1,0)
IBCBB ;ALB/AAS - EDIT CHECK ROUTINE TO BE INVOKED BEFORE ALL BILL APPROVAL ACTIONS ;2-NOV-89
"RTN","IBCBB",2,0)
 ;;2.0;INTEGRATED BILLING;**80,51,137,288,327,361,371,377,400,432,461,547,592**;21-MAR-94;Build 58
"RTN","IBCBB",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCBB",4,0)
 ;
"RTN","IBCBB",5,0)
 ;MAP TO DGCRBB
"RTN","IBCBB",6,0)
 ;
"RTN","IBCBB",7,0)
 ;IBNDn = IBND(n) = ^ib(399,n)
"RTN","IBCBB",8,0)
 ;RETURNS:
"RTN","IBCBB",9,0)
 ;IBER=fields with errors separated by semi-colons
"RTN","IBCBB",10,0)
 ;PRCASV("OKAY")=1 if iber="" and $D(prcasv("array")) compete
"RTN","IBCBB",11,0)
 ;
"RTN","IBCBB",12,0)
GVAR ;set up variables for mccr
"RTN","IBCBB",13,0)
 Q:'$D(IBIFN)  F I=0,"M","U","U1","S","MP","TX","UF3","UF31","U2" S @("IBND"_I)=$G(^DGCR(399,IBIFN,I))
"RTN","IBCBB",14,0)
 S IBBNO=$P(IBND0,"^"),DFN=$P(IBND0,"^",2),IBEVDT=$P(IBND0,"^",3)
"RTN","IBCBB",15,0)
 S IBLOC=$P(IBND0,"^",4),IBCL=$P(IBND0,"^",5),IBTF=$P(IBND0,"^",6)
"RTN","IBCBB",16,0)
 S IBAT=$P(IBND0,"^",7),IBWHO=$P(IBND0,"^",11),IBST=$P(IBND0,"^",13),IBFT=$P(IBND0,"^",19)
"RTN","IBCBB",17,0)
 S IBFDT=$P(IBNDU,"^",1),IBTDT=$P(IBNDU,"^",2)
"RTN","IBCBB",18,0)
 S IBTC=$P(IBNDU1,"^",1),IBFY=$P(IBNDU1,"^",9),IBFYC=$P(IBNDU1,"^",10)
"RTN","IBCBB",19,0)
 S IBEU=$P(IBNDS,"^",2),IBRU=$P(IBNDS,"^",5),IBAU=$P(IBNDS,"^",8)
"RTN","IBCBB",20,0)
 S IBTOB=$$TOB(IBND0),IBTOB12=$E(IBTOB,1,2)
"RTN","IBCBB",21,0)
 K ^TMP($J,"BILL-WARN")
"RTN","IBCBB",22,0)
 Q
"RTN","IBCBB",23,0)
 ;
"RTN","IBCBB",24,0)
EN ;Entry to check for errors
"RTN","IBCBB",25,0)
 N IBQ,IBXERR,IBXDATA,IBXSAVE,IBZPRC92,IBQUIT,IBISEQ,IDDATA,IBFOR,IBC
"RTN","IBCBB",26,0)
 I $D(IBFL) N IBFL
"RTN","IBCBB",27,0)
 K ^TMP($J)
"RTN","IBCBB",28,0)
 W !
"RTN","IBCBB",29,0)
 S IBER="" D GVAR I '$D(IBND0) S IBER=-1 Q
"RTN","IBCBB",30,0)
 ;
"RTN","IBCBB",31,0)
 ;patient in patient file
"RTN","IBCBB",32,0)
 I DFN="" S IBER=IBER_"IB057;"
"RTN","IBCBB",33,0)
 I DFN]"",'$D(^DPT(DFN)) S IBER=IBER_"IB057;"
"RTN","IBCBB",34,0)
 ;
"RTN","IBCBB",35,0)
 ;Event date in correct format
"RTN","IBCBB",36,0)
 I IBEVDT="" S IBER=IBER_"IB049;"
"RTN","IBCBB",37,0)
 I IBEVDT]"",IBEVDT'?7N&(IBEVDT'?7N1".".N) S IBER=IBER_"IB049;"
"RTN","IBCBB",38,0)
 ;
"RTN","IBCBB",39,0)
 ;Rate Type
"RTN","IBCBB",40,0)
 I IBAT="" S IBER=IBER_"IB059;"
"RTN","IBCBB",41,0)
 I IBAT]"",'$D(^DGCR(399.3,IBAT,0)) S IBER=IBER_"IB059;"
"RTN","IBCBB",42,0)
 I IBAT]"",$D(^DGCR(399.3,IBAT,0)),'$P(^(0),"^",6) S IBER=IBER_"IB059;",IBAT=""
"RTN","IBCBB",43,0)
 I IBAT]"",$P($G(^DGCR(399.3,IBAT,0)),"^",6) S IBARTP=$P($$CATN^PRCAFN($P(^DGCR(399.3,IBAT,0),"^",6)),"^",3)
"RTN","IBCBB",44,0)
 ;Check that AR category expects same debtor as defined in who's responsible.
"RTN","IBCBB",45,0)
 I $D(IBARTP),IBWHO="i"&(IBARTP'="T")!(IBWHO="p"&("PC"'[IBARTP))!(IBWHO="o"&(IBARTP'="N")) S IBER=IBER_"IB058;"
"RTN","IBCBB",46,0)
 ;
"RTN","IBCBB",47,0)
 ;Who's Responsible
"RTN","IBCBB",48,0)
 I IBWHO=""!($L(IBWHO)>1)!("iop"'[IBWHO) S IBER=IBER_"IB065;"
"RTN","IBCBB",49,0)
 S IBMRA=$S($$MCRWNR^IBEFUNC(+$$CURR^IBCEF2(IBIFN)):$$TXMT^IBCEF4(IBIFN)>0,1:0)
"RTN","IBCBB",50,0)
 ;  MCR will not reimburse is only valid if there is subsequent insurance
"RTN","IBCBB",51,0)
 ;   that will reimburse
"RTN","IBCBB",52,0)
 I IBWHO="i" D
"RTN","IBCBB",53,0)
 . ;JWS;IB*2.0*592;US1109; If Dental and Plan Coverage Limitation is NO skip; IA# 3820
"RTN","IBCBB",54,0)
 . I $$FT^IBCEF(IBIFN)=7 D
"RTN","IBCBB",55,0)
 .. N INSONBIL,LOOP
"RTN","IBCBB",56,0)
 .. ;JWS;IB*2.0*592;; only want to check insurance on the bill at this point
"RTN","IBCBB",57,0)
 .. F LOOP="I1","I2","I3" I $D(^DGCR(399,IBIFN,LOOP)) K INSONBIL S INSONBIL(+^(LOOP))="" I '$$PTCOV^IBCNSU3(DFN,$P($G(^DGCR(399,IBIFN,0)),"^",3),"DENTAL",,.INSONBIL),IBER'["IB362" S IBER=IBER_"IB362;"
"RTN","IBCBB",58,0)
 . I IBMRA D  Q
"RTN","IBCBB",59,0)
 .. ;JWS;IB*2.0*592;Do not allow to bill Dental to Medicare WNR
"RTN","IBCBB",60,0)
 .. I $$FT^IBCEF(IBIFN)=7,'$F(IBER,"IB359;") S IBER=IBER_"IB359;"
"RTN","IBCBB",61,0)
 .. N Z,IBZ
"RTN","IBCBB",62,0)
 .. S IBZ=0
"RTN","IBCBB",63,0)
 .. F Z=$$COBN^IBCEF(IBIFN):1:3 I $D(^DGCR(399,IBIFN,"I"_(Z+1))),$P($G(^DIC(36,+$G(^DGCR(399,IBIFN,"I"_(Z+1))),0)),U,2)'="N" S IBZ=1 Q
"RTN","IBCBB",64,0)
 .. I 'IBZ S IBER=IBER_"IB054;" D WARN^IBCBB11("A valid claim for MEDICARE WNR needs subsequent ins. that will reimburse")
"RTN","IBCBB",65,0)
 . I $$COB^IBCEF(IBIFN)="S",$$MCRWNR^IBEFUNC(+$$CURR^IBCEF2(IBIFN))=1,$D(^DGCR(399,IBIFN,"I3")) Q
"RTN","IBCBB",66,0)
 . I $S('IBNDMP:1,1:$P(IBNDMP,U,2)'=$$BPP^IBCNS2(IBIFN,1)) S IBER=IBER_"IB054;"
"RTN","IBCBB",67,0)
 I IBWHO="o",'$P(IBNDM,"^",11) S IBER=IBER_"IB053;"
"RTN","IBCBB",68,0)
 ;
"RTN","IBCBB",69,0)
 ; Outpatient Statement dates can not span the ICD-10 activation date
"RTN","IBCBB",70,0)
 I IBCL>2,$$ICD10S^IBCU4(IBFDT,IBTDT) S IBER=IBER_"IB354;"
"RTN","IBCBB",71,0)
 ;
"RTN","IBCBB",72,0)
 ; All bill ICD codes must match Code Version on Statement To Date IB356
"RTN","IBCBB",73,0)
 D ICD10V^IBCBB0(IBIFN)
"RTN","IBCBB",74,0)
 ;
"RTN","IBCBB",75,0)
 ; Billing Provider check - IB*2*400
"RTN","IBCBB",76,0)
 D BP^IBCBB0(IBIFN)
"RTN","IBCBB",77,0)
 ;
"RTN","IBCBB",78,0)
 ; Pay-to Provider check - IB*2*400
"RTN","IBCBB",79,0)
 D PAYTO^IBCBB0(IBIFN)
"RTN","IBCBB",80,0)
 ;
"RTN","IBCBB",81,0)
 ; All insurance subscribers must have a birth date on file
"RTN","IBCBB",82,0)
 ;  - 11/10/04 - IB*2.0*288
"RTN","IBCBB",83,0)
 ;  - 12/14/06 - IB*2.0*361 - must have INSURED'S SEX too
"RTN","IBCBB",84,0)
 ; IB error codes
"RTN","IBCBB",85,0)
 ;    IB221 - Primary insurance subscriber missing date of birth
"RTN","IBCBB",86,0)
 ;    IB222 - Secondary insurance subscriber missing date of birth
"RTN","IBCBB",87,0)
 ;    IB223 - Tertiary insurance subscriber missing date of birth
"RTN","IBCBB",88,0)
 ;    IB261 - Primary insurance subscriber is missing INSURED'S SEX
"RTN","IBCBB",89,0)
 ;    IB262 - Secondary insurance subscriber is missing INSURED'S SEX
"RTN","IBCBB",90,0)
 ;    IB263 - Tertiary insurance subscriber is missing INSURED'S SEX
"RTN","IBCBB",91,0)
 ;
"RTN","IBCBB",92,0)
 F IBISEQ=1:1:3 D
"RTN","IBCBB",93,0)
 . I '$P($G(^DGCR(399,IBIFN,"I"_IBISEQ)),U,1) Q   ; no insurance here
"RTN","IBCBB",94,0)
 . K ^UTILITY("VADM",$J),^UTILITY("VAPA",$J)
"RTN","IBCBB",95,0)
 . S IDDATA=$$INSDEM^IBCEF(IBIFN,IBISEQ)
"RTN","IBCBB",96,0)
 . K ^UTILITY("VADM",$J),^UTILITY("VAPA",$J)
"RTN","IBCBB",97,0)
 . ;
"RTN","IBCBB",98,0)
 . I '$P(IDDATA,U,1) D ERR(221)   ; birth date missing
"RTN","IBCBB",99,0)
 . ;
"RTN","IBCBB",100,0)
 . I "^M^F^"'[(U_$P(IDDATA,U,2)_U) D ERR(261)  ; sex missing
"RTN","IBCBB",101,0)
 . ;
"RTN","IBCBB",102,0)
 . ; IB*2*371 - esg - check for other missing insurance pieces
"RTN","IBCBB",103,0)
 . ; check insured's name, primary ID#, pt. relationship to insured,
"RTN","IBCBB",104,0)
 . ; and subscriber address data  
"RTN","IBCBB",105,0)
 . N INNAME,SUBID,PTREL,SFA,CAS,LN,FN
"RTN","IBCBB",106,0)
 . ;
"RTN","IBCBB",107,0)
 . ;          IB273 - Primary Insurance name of insured missing
"RTN","IBCBB",108,0)
 . ;          IB274 - Secondary Insurance name of insured missing
"RTN","IBCBB",109,0)
 . ;          IB275 - Tertiary Insurance name of insured missing
"RTN","IBCBB",110,0)
 . S INNAME=$$POLICY^IBCEF(IBIFN,17,IBISEQ)
"RTN","IBCBB",111,0)
 . S LN=$P(INNAME,",",1),FN=$P(INNAME,",",2)   ; last name,first name
"RTN","IBCBB",112,0)
 . S LN=$$NOPUNCT^IBCEF(LN,1)
"RTN","IBCBB",113,0)
 . S FN=$$NOPUNCT^IBCEF(FN,1)
"RTN","IBCBB",114,0)
 . ; ib*2.0*547 - subscriber only needs last name
"RTN","IBCBB",115,0)
 . ;I LN=""!(FN="") D ERR(273)   ; name of insured missing or invalid
"RTN","IBCBB",116,0)
 . I LN="" D ERR(273)   ; name of insured missing or invalid
"RTN","IBCBB",117,0)
 . S LN=$$NAME^IBCEFG1(INNAME)  ; additional name checks
"RTN","IBCBB",118,0)
 . S FN=$P(LN,U,2)
"RTN","IBCBB",119,0)
 . S LN=$P(LN,U,1)
"RTN","IBCBB",120,0)
 . ;I LN=""!(FN="") D ERR(273)   ; name of insured missing or invalid
"RTN","IBCBB",121,0)
 . I LN="" D ERR(273)   ; name of insured missing or invalid
"RTN","IBCBB",122,0)
 . ;
"RTN","IBCBB",123,0)
 . ;          IB276 - Primary Insurance subscriber ID missing
"RTN","IBCBB",124,0)
 . ;          IB277 - Secondary Insurance subscriber ID missing
"RTN","IBCBB",125,0)
 . ;          IB278 - Tertiary Insurance subscriber ID missing
"RTN","IBCBB",126,0)
 . S SUBID=$$NOPUNCT^IBCEF($$POLICY^IBCEF(IBIFN,2,IBISEQ),1)
"RTN","IBCBB",127,0)
 . I SUBID="" D ERR(276)     ; subscriber ID# missing
"RTN","IBCBB",128,0)
 . ;
"RTN","IBCBB",129,0)
 . ;          IB279 - Primary Insurance missing pt relationship
"RTN","IBCBB",130,0)
 . ;          IB280 - Secondary Insurance missing pt relationship
"RTN","IBCBB",131,0)
 . ;          IB281 - Tertiary Insurance missing pt relationship
"RTN","IBCBB",132,0)
 . S PTREL=$$POLICY^IBCEF(IBIFN,16,IBISEQ)
"RTN","IBCBB",133,0)
 . I PTREL="" D ERR(279)      ; missing patient relationship to insured
"RTN","IBCBB",134,0)
 . ;
"RTN","IBCBB",135,0)
 . ; subscriber address section
"RTN","IBCBB",136,0)
 . S SFA=$$INSADDR^IBCEF(IBIFN,IBISEQ)     ; full address all pieces
"RTN","IBCBB",137,0)
 . S CAS=$$NOPUNCT^IBCEF($P(SFA,U,2,5),1)  ; string city,st,zip,addr1
"RTN","IBCBB",138,0)
 . ;
"RTN","IBCBB",139,0)
 . ;          IB282 - Primary Insurance address line 1 missing
"RTN","IBCBB",140,0)
 . ;          IB283 - Secondary Insurance address line 1 missing
"RTN","IBCBB",141,0)
 . ;          IB284 - Tertiary Insurance address line 1 missing
"RTN","IBCBB",142,0)
 . I $$NOPUNCT^IBCEF($P(SFA,U,5),1)="" D   ; address line 1 is blank
"RTN","IBCBB",143,0)
 .. ; pat=subscriber and current insurance - address is required
"RTN","IBCBB",144,0)
 .. I +PTREL=1,IBISEQ=$$COBN^IBCEF(IBIFN) D ERR(282) Q
"RTN","IBCBB",145,0)
 .. ; if any part of the address is there, then all fields are required
"RTN","IBCBB",146,0)
 .. I CAS'="" D ERR(282) Q
"RTN","IBCBB",147,0)
 .. Q
"RTN","IBCBB",148,0)
 . ;
"RTN","IBCBB",149,0)
 . ;          IB285 - Primary Insurance city missing
"RTN","IBCBB",150,0)
 . ;          IB286 - Secondary Insurance city missing
"RTN","IBCBB",151,0)
 . ;          IB287 - Tertiary Insurance city missing
"RTN","IBCBB",152,0)
 . I $$NOPUNCT^IBCEF($P(SFA,U,2),1)="" D   ; city is blank
"RTN","IBCBB",153,0)
 .. ; pat=subscriber and current insurance - address is required
"RTN","IBCBB",154,0)
 .. I +PTREL=1,IBISEQ=$$COBN^IBCEF(IBIFN) D ERR(285) Q
"RTN","IBCBB",155,0)
 .. ; if any part of the address is there, then all fields are required
"RTN","IBCBB",156,0)
 .. I CAS'="" D ERR(285) Q
"RTN","IBCBB",157,0)
 .. Q
"RTN","IBCBB",158,0)
 . ;
"RTN","IBCBB",159,0)
 . ;          IB288 - Primary Insurance state missing
"RTN","IBCBB",160,0)
 . ;          IB289 - Secondary Insurance state missing
"RTN","IBCBB",161,0)
 . ;          IB290 - Tertiary Insurance state missing
"RTN","IBCBB",162,0)
 . I $$NOPUNCT^IBCEF($P(SFA,U,3),1)="" D   ; state is blank
"RTN","IBCBB",163,0)
 .. ; pat=subscriber and current insurance - address is required
"RTN","IBCBB",164,0)
 .. I +PTREL=1,IBISEQ=$$COBN^IBCEF(IBIFN) D ERR(288) Q
"RTN","IBCBB",165,0)
 .. ; if any part of the address is there, then all fields are required
"RTN","IBCBB",166,0)
 .. I CAS'="" D ERR(288) Q
"RTN","IBCBB",167,0)
 .. Q
"RTN","IBCBB",168,0)
 . ;
"RTN","IBCBB",169,0)
 . ;          IB291 - Primary Insurance zipcode missing
"RTN","IBCBB",170,0)
 . ;          IB292 - Secondary Insurance zipcode missing
"RTN","IBCBB",171,0)
 . ;          IB293 - Tertiary Insurance zipcode missing
"RTN","IBCBB",172,0)
 . I $$NOPUNCT^IBCEF($P(SFA,U,4),1)="" D   ; zipcode is blank
"RTN","IBCBB",173,0)
 .. ; pat=subscriber and current insurance - address is required
"RTN","IBCBB",174,0)
 .. I +PTREL=1,IBISEQ=$$COBN^IBCEF(IBIFN) D ERR(291) Q
"RTN","IBCBB",175,0)
 .. ; if any part of the address is there, then all fields are required
"RTN","IBCBB",176,0)
 .. I CAS'="" D ERR(291) Q
"RTN","IBCBB",177,0)
 .. Q
"RTN","IBCBB",178,0)
 . ;
"RTN","IBCBB",179,0)
 . Q
"RTN","IBCBB",180,0)
 ;
"RTN","IBCBB",181,0)
 ; esg - IB*2*371 - check patient address fields
"RTN","IBCBB",182,0)
 K ^UTILITY("VAPA",$J)
"RTN","IBCBB",183,0)
 ;
"RTN","IBCBB",184,0)
 S IBFOR=0                              ; foreign address flag
"RTN","IBCBB",185,0)
 S IBC=+$$PTADDR^IBCEF(IBIFN,25)        ; country code ien
"RTN","IBCBB",186,0)
 I IBC D
"RTN","IBCBB",187,0)
 . N CODE
"RTN","IBCBB",188,0)
 . S CODE=$$GET1^DIQ(779.004,IBC,.01)   ; .01 code field file 779.004
"RTN","IBCBB",189,0)
 . I CODE'="",CODE'="USA" S IBFOR=1     ; foreign country exists
"RTN","IBCBB",190,0)
 . Q
"RTN","IBCBB",191,0)
 ;
"RTN","IBCBB",192,0)
 I $$NOPUNCT^IBCEF($$PTADDR^IBCEF(IBIFN,1),1)="" S IBER=IBER_"IB269;"
"RTN","IBCBB",193,0)
 I $$NOPUNCT^IBCEF($$PTADDR^IBCEF(IBIFN,4),1)="" S IBER=IBER_"IB270;"
"RTN","IBCBB",194,0)
 I $$NOPUNCT^IBCEF($$PTADDR^IBCEF(IBIFN,5),1)="",'IBFOR S IBER=IBER_"IB271;"
"RTN","IBCBB",195,0)
 I $$NOPUNCT^IBCEF($$PTADDR^IBCEF(IBIFN,11),1)="",'IBFOR S IBER=IBER_"IB272;"
"RTN","IBCBB",196,0)
 K ^UTILITY("VAPA",$J)
"RTN","IBCBB",197,0)
 ;
"RTN","IBCBB",198,0)
 D PAYERADD^IBCBB0(IBIFN)     ; check the payer addresses
"RTN","IBCBB",199,0)
 D ^IBCBB1
"RTN","IBCBB",200,0)
 Q
"RTN","IBCBB",201,0)
 ; The remaining code below is being removed with Patch IB*2.0*432.
"RTN","IBCBB",202,0)
 ;
"RTN","IBCBB",203,0)
 ; esg - 9/20/07 - IB patch 371 - prevent EDI transmission for 3 payer
"RTN","IBCBB",204,0)
 ;       claims for all but the first payer.  To be removed when Emdeon
"RTN","IBCBB",205,0)
 ;       and FSC are able to deal with these.
"RTN","IBCBB",206,0)
 ;
"RTN","IBCBB",207,0)
 I +$G(^DGCR(399,IBIFN,"I2")),+$G(^DGCR(399,IBIFN,"I3")),$$TXMT^IBCEF4(IBIFN) D
"RTN","IBCBB",208,0)
 . ; for MRA request claims, make sure the MRA secondary claim is forced to print
"RTN","IBCBB",209,0)
 . I $$REQMRA^IBEFUNC(IBIFN) D  Q
"RTN","IBCBB",210,0)
 .. I '$P($G(^DGCR(399,IBIFN,"TX")),U,9) S IBER=IBER_"IB146;"
"RTN","IBCBB",211,0)
 .. Q
"RTN","IBCBB",212,0)
 . ;
"RTN","IBCBB",213,0)
 . I $$COBN^IBCEF(IBIFN)=1 Q   ; primary payer sequence claims are OK
"RTN","IBCBB",214,0)
 . ;
"RTN","IBCBB",215,0)
 . ; But claims with a payer sequence of 2 or 3 need to print locally
"RTN","IBCBB",216,0)
 . S IBER=IBER_"IB147;"
"RTN","IBCBB",217,0)
 . Q
"RTN","IBCBB",218,0)
 ;
"RTN","IBCBB",219,0)
 Q
"RTN","IBCBB",220,0)
 ;
"RTN","IBCBB",221,0)
EDIT(IBIFN) ; Run edits from within the billing edit screens
"RTN","IBCBB",222,0)
 N IBVIEW,IBDISP,IBNOFIX,DIR,X,Y
"RTN","IBCBB",223,0)
 S (IBNOFIX,IBVIEW,IBDISP)=1
"RTN","IBCBB",224,0)
 D EDITS^IBCB2
"RTN","IBCBB",225,0)
 W ! S DIR("A")="Press RETURN to continue",DIR(0)="E" D ^DIR K DIR
"RTN","IBCBB",226,0)
 Q
"RTN","IBCBB",227,0)
 ;
"RTN","IBCBB",228,0)
TOB(IBND0) ;
"RTN","IBCBB",229,0)
 ; IBND0 = the 0-node of the bill (file 399)
"RTN","IBCBB",230,0)
 Q ($P(IBND0,U,24)_$P($G(^DGCR(399.1,+$P(IBND0,U,25),0)),U,2)_$P(IBND0,U,26))
"RTN","IBCBB",231,0)
 ;
"RTN","IBCBB",232,0)
ERR(Z) ; update IBER variable from the above insurance checks
"RTN","IBCBB",233,0)
 ; Z is the IB error code# for the primary insurance error
"RTN","IBCBB",234,0)
 N IBERRNO
"RTN","IBCBB",235,0)
 S IBERRNO="IB"_(Z+IBISEQ-1)
"RTN","IBCBB",236,0)
 I IBER[IBERRNO Q
"RTN","IBCBB",237,0)
 S IBER=IBER_IBERRNO_";"
"RTN","IBCBB",238,0)
 Q
"RTN","IBCBB",239,0)
 ;
"RTN","IBCBB1")
0^95^B127796820^B125745915
"RTN","IBCBB1",1,0)
IBCBB1 ;ALB/AAS - CONTINUATION OF EDIT CHECK ROUTINE ;2-NOV-89
"RTN","IBCBB1",2,0)
 ;;2.0;INTEGRATED BILLING;**27,52,80,93,106,51,151,148,153,137,232,280,155,320,343,349,363,371,395,384,432,447,488,554,577,592**;21-MAR-94;Build 58
"RTN","IBCBB1",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCBB1",4,0)
 ;
"RTN","IBCBB1",5,0)
 ; *** Begin IB*2.0*488 VD  (Issue 46 RBN)
"RTN","IBCBB1",6,0)
 N I
"RTN","IBCBB1",7,0)
 S I=""
"RTN","IBCBB1",8,0)
 S X=+$G(^DGCR(399,IBIFN,"MP"))
"RTN","IBCBB1",9,0)
 I 'X,$$MCRWNR^IBEFUNC(+$$CURR^IBCEF2(IBIFN)) S X=+$$CURR^IBCEF2(IBIFN)
"RTN","IBCBB1",10,0)
 ;JWS;IB*2.0*592:US1108 - Dental form check
"RTN","IBCBB1",11,0)
 I X,+$G(^DIC(36,X,3)) S I=$P(^(3),U,$S($$FT^IBCEF(IBIFN)=2:2,$$FT^IBCEF(IBIFN)=7:15,1:4))
"RTN","IBCBB1",12,0)
 S I=$$UP^XLFSTR(I)
"RTN","IBCBB1",13,0)
 I (I'=""&(I["PRNT")&($G(IBER)'["IB488")) D 
"RTN","IBCBB1",14,0)
 . S IBER=$G(IBER)_"IB488;"
"RTN","IBCBB1",15,0)
 ;
"RTN","IBCBB1",16,0)
 ; Cause an error if FORCED TO PRINT TO CLEARINGHOUSE
"RTN","IBCBB1",17,0)
 I $P($G(^DGCR(399,IBIFN,"TX")),U,8)=2 D
"RTN","IBCBB1",18,0)
 . S IBER=$G(IBER)_"IB489;"
"RTN","IBCBB1",19,0)
 ;
"RTN","IBCBB1",20,0)
 ; Cause a fatal error if the claim has no procedures & is NOT a UB-04 Inpatient claim.
"RTN","IBCBB1",21,0)
 I +$O(^DGCR(399,IBIFN,"CP",0))=0 D
"RTN","IBCBB1",22,0)
 .I $$INPAT^IBCEF(IBIFN,1),$$INSPRF^IBCEF(IBIFN) Q   ; inpatient UB-04 check
"RTN","IBCBB1",23,0)
 .I '$$INPAT^IBCEF(IBIFN,1),$$INSPRF^IBCEF(IBIFN) D  Q      ; Outpatient Institutional Claim.
"RTN","IBCBB1",24,0)
 ..I IBER["IB352" Q
"RTN","IBCBB1",25,0)
 ..S IBER=IBER_"IB352;"
"RTN","IBCBB1",26,0)
 .;
"RTN","IBCBB1",27,0)
 .; Professional claim
"RTN","IBCBB1",28,0)
 .I IBER["IB353" Q
"RTN","IBCBB1",29,0)
 .S IBER=IBER_"IB353;"
"RTN","IBCBB1",30,0)
 .Q
"RTN","IBCBB1",31,0)
 ; *** End IB*2.0*488 -- VD
"RTN","IBCBB1",32,0)
 ;
"RTN","IBCBB1",33,0)
 ;MAP TO DGCRBB1
"RTN","IBCBB1",34,0)
 ;
"RTN","IBCBB1",35,0)
% ;Bill Status
"RTN","IBCBB1",36,0)
 N Z,Z0,Z1,IBFT
"RTN","IBCBB1",37,0)
 I $S(+IBST=0:1,1:"^1^2^3^4^7^"'[(U_IBST_U)) S IBER=IBER_"IB045;"
"RTN","IBCBB1",38,0)
 ;
"RTN","IBCBB1",39,0)
 ;Statement Covers From
"RTN","IBCBB1",40,0)
 I IBFDT="" S IBER=IBER_"IB061;"
"RTN","IBCBB1",41,0)
 I IBFDT]"",IBFDT'?7N&(IBFDT'?7N1".".N) S IBER=IBER_"IB061;"
"RTN","IBCBB1",42,0)
 I IBFDT>IBTDT S IBER=IBER_"IB061;" ; from must be on or before the to date 
"RTN","IBCBB1",43,0)
 S IBFFY=$$FY^IBOUTL(IBFDT)
"RTN","IBCBB1",44,0)
 ; if inpat - from date must not be prior to admit date.
"RTN","IBCBB1",45,0)
 I $$INPAT^IBCEF(IBIFN,1),(IBFDT<($P($G(^DGPT(+$P(IBND0,U,8),0)),U,2)\1))  S IBER=IBER_"IB061;"
"RTN","IBCBB1",46,0)
 ;
"RTN","IBCBB1",47,0)
 ;Statement Covers To
"RTN","IBCBB1",48,0)
 I IBTDT="" S IBER=IBER_"IB062;"
"RTN","IBCBB1",49,0)
 I IBTDT]"",IBTDT'?7N&(IBTDT'?7N1".".N) S IBER=IBER_"IB062;"
"RTN","IBCBB1",50,0)
 I IBTDT>DT!(IBTDT<IBFDT) S IBER=IBER_"IB062;"  ; to date must not be >than today's date
"RTN","IBCBB1",51,0)
 S IBTFY=$$FY^IBOUTL(IBTDT)
"RTN","IBCBB1",52,0)
 ;
"RTN","IBCBB1",53,0)
 ;Total Charges
"RTN","IBCBB1",54,0)
 ; IB*2.0*447/TAZ Removed this error so that zero dollar revenue codes can process on the 837
"RTN","IBCBB1",55,0)
 ;I +IBTC'>0!(+IBTC'=IBTC) S IBER=IBER_"IB064;"
"RTN","IBCBB1",56,0)
 ;
"RTN","IBCBB1",57,0)
 ;Billable charges for secondary claim
"RTN","IBCBB1",58,0)
 I $$MCRONBIL^IBEFUNC(IBIFN)&(($P(IBNDU1,U,1)-$P(IBNDU1,U,2))'>0) S IBER=IBER_"IB094;"
"RTN","IBCBB1",59,0)
 ;Fiscal Year 1
"RTN","IBCBB1",60,0)
 S IBFFY=$$FY^IBOUTL(IBFDT)
"RTN","IBCBB1",61,0)
 ;
"RTN","IBCBB1",62,0)
 ;Check provider link for current user, enterer, reviewer and Authorizor
"RTN","IBCBB1",63,0)
 I '$D(^VA(200,DUZ,0)) S IBER=IBER_"IB048;"
"RTN","IBCBB1",64,0)
 I IBEU]"",'$D(^VA(200,IBEU,0)) S IBER=IBER_"IB048;"
"RTN","IBCBB1",65,0)
 I IBRU]"",'$D(^VA(200,IBRU,0)) S IBER=IBER_"IB060;"
"RTN","IBCBB1",66,0)
 I IBAU]"",'$D(^VA(200,IBAU,0)) S IBER=IBER_"IB041;"
"RTN","IBCBB1",67,0)
 ;
"RTN","IBCBB1",68,0)
 I IBER="",+$$STA^PRCAFN(IBIFN)=104 S IBER=IBER_"IB040;"
"RTN","IBCBB1",69,0)
 ; If ins bill, must have valid COB sequence
"RTN","IBCBB1",70,0)
 I $P(IBND0,U,11)="i",$S($P(IBND0,U,21)="":1,1:"PST"'[$P(IBND0,U,21)) S IBER=IBER_"IB324;"
"RTN","IBCBB1",71,0)
 ;
"RTN","IBCBB1",72,0)
 ; Check for valid sec provider id for current ins
"RTN","IBCBB1",73,0)
 S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"PRV",Z)) Q:'Z  S Z0=$G(^(Z,0)),Z1=+$$COBN^IBCEF(IBIFN) I $P(Z0,U,4+Z1)'="",$P(Z0,U,11+Z1)'="" D
"RTN","IBCBB1",74,0)
 . I '$$SECIDCK^IBCEF74(IBIFN,Z1,$P(Z0,U,11+Z1),Z) D WARN^IBCBB11("Prov secondary id type for the "_$P("PRIMARY^SECONDARY^TERTIARY",U,Z1)_" "_$$EXTERNAL^DILFD(399.0222,.01,,+Z0)_" is invalid/won't transmit")
"RTN","IBCBB1",75,0)
 ; Check NPIs
"RTN","IBCBB1",76,0)
 D NPICHK^IBCBB11
"RTN","IBCBB1",77,0)
 ;
"RTN","IBCBB1",78,0)
 ; Check multiple rx NPIs
"RTN","IBCBB1",79,0)
 D RXNPI^IBCBB11(IBIFN)
"RTN","IBCBB1",80,0)
 ;
"RTN","IBCBB1",81,0)
 ; Check taxonomies
"RTN","IBCBB1",82,0)
 D TAXCHK^IBCBB11
"RTN","IBCBB1",83,0)
 ;
"RTN","IBCBB1",84,0)
 ; Check for Physician Name
"RTN","IBCBB1",85,0)
 K IBXDATA D F^IBCEF("N-ATT/REND PHYSICIAN NAME",,,IBIFN)
"RTN","IBCBB1",86,0)
 ; IB*2.0*432 - CMS1500 no longer needs a claim level rendering
"RTN","IBCBB1",87,0)
 S IBFT=$$FT^IBCEF(IBIFN)
"RTN","IBCBB1",88,0)
 ;JWS;IB*2.0*592:US1108 - Dental form check
"RTN","IBCBB1",89,0)
 I IBFT'=2,IBFT'=7,$P($G(IBXDATA),U)="" S IBER=IBER_"IB303;"
"RTN","IBCBB1",90,0)
 ;
"RTN","IBCBB1",91,0)
 N FUNCTION,IBINS
"RTN","IBCBB1",92,0)
 ; IB*2.0*432 - CMS1500 no longer needs a claim level rendering
"RTN","IBCBB1",93,0)
 ;S FUNCTION=$S($$FT^IBCEF(IBIFN)=3:4,1:3)
"RTN","IBCBB1",94,0)
 S FUNCTION=$S(IBFT=3:4,1:3)
"RTN","IBCBB1",95,0)
 ;JWS;IB*2.0*592:US1108 - Dental form check
"RTN","IBCBB1",96,0)
 I IBFT'=2,IBFT'=7,IBER'["IB303;" D
"RTN","IBCBB1",97,0)
 . F IBINS=1:1:3 D
"RTN","IBCBB1",98,0)
 .. S Z=$$GETTYP^IBCEP2A(IBIFN,IBINS)
"RTN","IBCBB1",99,0)
 .. I Z,$P(Z,U,2) D  ; Rendering/attending prov secondary id required
"RTN","IBCBB1",100,0)
 ... N IBID,IBOK,Q0
"RTN","IBCBB1",101,0)
 ... D PROVINF^IBCEF74(IBIFN,IBINS,.IBID,1,"C")  ; check all as though they were current
"RTN","IBCBB1",102,0)
 ... S IBOK=0
"RTN","IBCBB1",103,0)
 ... S Q0=0 F  S Q0=$O(IBID(1,FUNCTION,Q0)) Q:'Q0  I $P(IBID(1,FUNCTION,Q0),U,9)=+Z S IBOK=1 Q
"RTN","IBCBB1",104,0)
 ... I 'IBOK S IBER=IBER_$S(IBINS=1:"IB236;",IBINS=2:"IB237;",IBINS=3:"IB238;",1:"")
"RTN","IBCBB1",105,0)
 ;
"RTN","IBCBB1",106,0)
 ; Patch 432 enh5:The IB system shall no longer prevent users from authorizing(fatal error message)a claim because the system cannot find the providersSSNorEIN
"RTN","IBCBB1",107,0)
 ; D PRIIDCHK^IBCBB11
"RTN","IBCBB1",108,0)
 ;
"RTN","IBCBB1",109,0)
 N IBM,IBM1
"RTN","IBCBB1",110,0)
 S IBM=$G(^DGCR(399,IBIFN,"M"))
"RTN","IBCBB1",111,0)
 S IBM1=$G(^DGCR(399,IBIFN,"M1"))
"RTN","IBCBB1",112,0)
 I $P(IBM,U),$P($G(^DIC(36,$P(IBM,U),4)),U,6),$P(IBM1,U,2)="" S IBER=IBER_"IB244;"
"RTN","IBCBB1",113,0)
 I $P(IBM,U,2),$P($G(^DIC(36,$P(IBM,U,2),4)),U,6),$P(IBM1,U,3)="" S IBER=IBER_"IB245;"
"RTN","IBCBB1",114,0)
 I $P(IBM,U,3),$P($G(^DIC(36,$P(IBM,U,3),4)),U,6),$P(IBM1,U,4)="" S IBER=IBER_"IB246;"
"RTN","IBCBB1",115,0)
 ;
"RTN","IBCBB1",116,0)
 ; If outside facility, check for ID and qualifier in 355.93
"RTN","IBCBB1",117,0)
 ; 5/15/06 - esg - hard error IB243 turned into warning message instead
"RTN","IBCBB1",118,0)
 S Z=$P($G(^DGCR(399,IBIFN,"U2")),U,10)
"RTN","IBCBB1",119,0)
 I Z D
"RTN","IBCBB1",120,0)
 . I $P($G(^IBA(355.93,Z,0)),U,9)=""!($P($G(^IBA(355.93,Z,0)),U,13)="") D
"RTN","IBCBB1",121,0)
 .. N Z1,Z2
"RTN","IBCBB1",122,0)
 .. S Z1="Missing Lab or Facility Primary ID for non-VA facility, "
"RTN","IBCBB1",123,0)
 .. S Z2=$$EXTERNAL^DILFD(399,232,,Z)
"RTN","IBCBB1",124,0)
 .. I $L(Z2)'>19 D WARN^IBCBB11(Z1_Z2) Q
"RTN","IBCBB1",125,0)
 .. D WARN^IBCBB11(Z1),WARN^IBCBB11("     "_Z2)
"RTN","IBCBB1",126,0)
 .. Q
"RTN","IBCBB1",127,0)
 . Q
"RTN","IBCBB1",128,0)
 ;
"RTN","IBCBB1",129,0)
 ; Must be one and only one division on bill
"RTN","IBCBB1",130,0)
 S IBZ=$$MULTDIV^IBCBB11(IBIFN,IBND0)
"RTN","IBCBB1",131,0)
 ; I IBZ S IBER=IBER_$S(IBZ=1:"IB095;",IBZ=2:"IB104;",1:"IB105;")
"RTN","IBCBB1",132,0)
 ; Allow multi-divisional for OP instutional claims
"RTN","IBCBB1",133,0)
 I IBZ,$$INPAT^IBCEF(IBIFN)!'($$INSPRF^IBCEF(IBIFN)) S IBER=IBER_$S(IBZ=1:"IB095;",IBZ=2:"IB104;",1:"IB105;")
"RTN","IBCBB1",134,0)
 ; Still need error msg on OP Institutional if No Default division
"RTN","IBCBB1",135,0)
 I IBZ=3,'$$INPAT^IBCEF(IBIFN),$$INSPRF^IBCEF(IBIFN) S IBER=IBER_"IB105;"
"RTN","IBCBB1",136,0)
 ; Division address must be defined in institution file
"RTN","IBCBB1",137,0)
 I $P(IBND0,U,22) D
"RTN","IBCBB1",138,0)
 . N Z,Z0,Z1
"RTN","IBCBB1",139,0)
 . S Z0=$G(^DIC(4,+$P($G(^DG(40.8,+$P(IBND0,U,22),0)),U,7),0))
"RTN","IBCBB1",140,0)
 . S Z1=$G(^DIC(4,+$P($G(^DG(40.8,+$P(IBND0,U,22),0)),U,7),1))
"RTN","IBCBB1",141,0)
 . I $P(Z0,U,2)="" S IBER=IBER_"IB097;" Q
"RTN","IBCBB1",142,0)
 . F Z=1,3,4 I $P(Z1,U,Z)="" S IBER=IBER_"IB097;" Q
"RTN","IBCBB1",143,0)
 ;
"RTN","IBCBB1",144,0)
 ; IB*2.0*432 Check ambulance addresses, COB Non-covered amt. & Attachment Control
"RTN","IBCBB1",145,0)
 I $$AMBCK^IBCBB11(IBIFN)=1 S IBER=IBER_"IB329;"
"RTN","IBCBB1",146,0)
 I $$COBAMT^IBCBB11(IBIFN)=1 S IBER=IBER_"IB330;"
"RTN","IBCBB1",147,0)
 I $$TMCK^IBCBB11(IBIFN)=1 S IBER=IBER_"IB331;"
"RTN","IBCBB1",148,0)
 I $$ACCK^IBCBB11(IBIFN)=1 S IBER=IBER_"IB332;"
"RTN","IBCBB1",149,0)
 I $$COBMRA^IBCBB11(IBIFN)=1 S IBER=IBER_"IB342;"
"RTN","IBCBB1",150,0)
 I $$COBSEC^IBCBB11(IBIFN)=1 S IBER=IBER_"IB343;"
"RTN","IBCBB1",151,0)
 ;
"RTN","IBCBB1",152,0)
 ;CHAMPVA Rate Type and Primary Insurance Carriers Type of Coverage must match
"RTN","IBCBB1",153,0)
 S (IBRTCHV,IBPICHV)=0
"RTN","IBCBB1",154,0)
 I $P($G(^DGCR(399.3,+IBAT,0)),U,1)="CHAMPVA" S IBRTCHV=1
"RTN","IBCBB1",155,0)
 I $P($G(^IBE(355.2,+$P($G(^DIC(36,+IBNDMP,0)),U,13),0)),U,1)="CHAMPVA" S IBPICHV=1
"RTN","IBCBB1",156,0)
 I (+IBRTCHV!+IBPICHV)&('IBRTCHV!'IBPICHV) S IBER=IBER_"IB085;"
"RTN","IBCBB1",157,0)
 ;
"RTN","IBCBB1",158,0)
 ;Non-VA bill must use FEE REIMB INS rate type; FEE REIMB INS rate type can only be used for Non-VA bill
"RTN","IBCBB1",159,0)
 ;IB*2.0*554/DRF 10/9/2015
"RTN","IBCBB1",160,0)
 ;N IBNVART,IBNVAST
"RTN","IBCBB1",161,0)
 ;S (IBNVART,IBNVAST)=0
"RTN","IBCBB1",162,0)
 ;I $P($G(^DGCR(399.3,+IBAT,0)),U,1)="FEE REIMB INS" S IBNVART=1
"RTN","IBCBB1",163,0)
 ;S IBNVAST=$$NONVAFLG(IBIFN)
"RTN","IBCBB1",164,0)
 ;I IBNVART,'IBNVAST S IBER=IBER_"IB360;"  ;Non-VA rate type used for bill that is not Non-VA
"RTN","IBCBB1",165,0)
 ;I 'IBNVART,IBNVAST S IBER=IBER_"IB361;"  ;Non-VA rate type not used for bill that is Non-VA
"RTN","IBCBB1",166,0)
 ;
"RTN","IBCBB1",167,0)
 N IBZPRC,IBZPRCUB
"RTN","IBCBB1",168,0)
 D F^IBCEF("N-ALL PROCEDURES","IBZPRC",,IBIFN)
"RTN","IBCBB1",169,0)
 ; Procedure Clinic is required for Surgical Procedures Outpt Facility Charges
"RTN","IBCBB1",170,0)
 I +$P(IBND0,U,27)'=2,$$BILLRATE^IBCRU3(IBAT,IBCL,IBEVDT,"RC OUTPATIENT") D
"RTN","IBCBB1",171,0)
 . N Z,Z0,Z1,ZE S (ZE,Z)=0 F  S Z=$O(^DGCR(399,IBIFN,"CP",Z)) Q:'Z  D  I +ZE S IBER=IBER_"IB320;" Q
"RTN","IBCBB1",172,0)
 .. S Z0=$G(^DGCR(399,IBIFN,"CP",Z,0)),Z1=+Z0 I Z0'[";ICPT(" Q
"RTN","IBCBB1",173,0)
 .. I '((Z1'<10000)&(Z1'>69999))&'((Z1'<93501)&(Z1'>93533)) Q
"RTN","IBCBB1",174,0)
 .. I '$P(Z0,U,7) S ZE=1
"RTN","IBCBB1",175,0)
 ;
"RTN","IBCBB1",176,0)
 ; Extract procedures for UB-04
"RTN","IBCBB1",177,0)
 D F^IBCEF("N-UB-04 PROCEDURES","IBZPRCUB",,IBIFN)
"RTN","IBCBB1",178,0)
 ; Does this bill have ANY prescriptions associated with it?
"RTN","IBCBB1",179,0)
 ; Must bill prescriptions separately from other charges
"RTN","IBCBB1",180,0)
 ;
"RTN","IBCBB1",181,0)
 ; DEM;432 - Call line level provider edit checks.
"RTN","IBCBB1",182,0)
 D LNPROV^IBCBB12(IBIFN)  ; DEM;432 - If there are line provider edits, then routine LNPROV^IBCBB12(IBIFN) updates IBER string.
"RTN","IBCBB1",183,0)
 ; DEM;432 - Call to Other Operating/Operating Provider edit checks.
"RTN","IBCBB1",184,0)
 I $$OPPROVCK^IBCBB12(IBIFN)=1 S IBER=IBER_"IB337;"  ; DEM;432
"RTN","IBCBB1",185,0)
 ; DEM;432 - Line level Attachment Control edits.
"RTN","IBCBB1",186,0)
 I $$LNTMCK^IBCBB11(IBIFN)=1 S IBER=IBER_"IB331;"  ; DEM;432
"RTN","IBCBB1",187,0)
 I $$LNACCK^IBCBB11(IBIFN)=1 S IBER=IBER_"IB332;"  ; DEM;432
"RTN","IBCBB1",188,0)
 ;
"RTN","IBCBB1",189,0)
 ; vd/Beginning of IB*2*577 - Validate Line Level NDC edits.
"RTN","IBCBB1",190,0)
 I $$LNNDCCK^IBCBB11(IBIFN)=1 S IBER=IBER_"IB365;"  ;IB*2*577;JWS;11/20/17 FIX
"RTN","IBCBB1",191,0)
 ; vd/End of IB*2*577
"RTN","IBCBB1",192,0)
 I $$ISRX^IBCEF1(IBIFN) D
"RTN","IBCBB1",193,0)
 . N IBZ,IBRXDEF
"RTN","IBCBB1",194,0)
 . S IBRXDEF=$P($G(^IBE(350.9,1,1)),U,30),IBZ=0
"RTN","IBCBB1",195,0)
 . F  S IBZ=$O(IBZPRCUB(IBZ)) Q:'IBZ  I IBZPRCUB(IBZ),+$P(IBZPRCUB(IBZ),U)'=IBRXDEF S IBER=IBER_"IB102;" Q
"RTN","IBCBB1",196,0)
 . K IBZ
"RTN","IBCBB1",197,0)
 ;
"RTN","IBCBB1",198,0)
 ; Check that COB sequences are not skipped
"RTN","IBCBB1",199,0)
 K Z
"RTN","IBCBB1",200,0)
 F Z=1:1:3 S:+$G(^DGCR(399,IBIFN,"I"_Z)) Z(Z)=""
"RTN","IBCBB1",201,0)
 F Z=0:1:2 S Z0=$O(Z(Z)) Q:'Z0  I Z0'=(Z+1) S IBER=IBER_"IB322;" Q
"RTN","IBCBB1",202,0)
 K Z
"RTN","IBCBB1",203,0)
 ; HD64676  IB*2*371 - OK for payer sequence to be blank when the Rate
"RTN","IBCBB1",204,0)
 ;    Type is either Interagency or Sharing Agreement
"RTN","IBCBB1",205,0)
 I $P($G(^DGCR(399,IBIFN,0)),U,21)="",$P($G(^DGCR(399,IBIFN,0)),U,7)'=4,$P($G(^DGCR(399,IBIFN,0)),U,7)'=9 S IBER=IBER_"IB323;"
"RTN","IBCBB1",206,0)
 K IBXDATA D F^IBCEF("N-PROCEDURE CODING METHD",,,IBIFN)
"RTN","IBCBB1",207,0)
 ; Coding method should agree with types of procedure codes
"RTN","IBCBB1",208,0)
 S IBOK=$S('$O(IBZPRC(0))!(IBXDATA=""):1,1:0)
"RTN","IBCBB1",209,0)
 I 'IBOK S IBOK=1,IBZ=0 F  S IBZ=$O(IBZPRC(IBZ)) Q:'IBZ  I IBZPRC(IBZ),$P(IBZPRC(IBZ),U)'[$S(IBXDATA=9:"ICD",1:"ICP") S IBOK=0 Q
"RTN","IBCBB1",210,0)
 I 'IBOK D WARN^IBCBB11("Coding Method does not agree with all procedure codes found on bill")
"RTN","IBCBB1",211,0)
 D EDITMRA^IBCBB3(.IBQUIT,.IBER,IBIFN,IBFT)
"RTN","IBCBB1",212,0)
 Q:$G(IBQUIT)
"RTN","IBCBB1",213,0)
 ;
"RTN","IBCBB1",214,0)
 ;Other things that could be added:  Rev Code - calculating charges
"RTN","IBCBB1",215,0)
 ;        Diagnosis Coding, if MT copay - check for other co-payments
"RTN","IBCBB1",216,0)
 ;
"RTN","IBCBB1",217,0)
 I $P(IBNDTX,U,8),$$REQMRA^IBEFUNC(IBIFN) S IBER=IBER_"IB121;"   ; can't force MRAs to print
"RTN","IBCBB1",218,0)
 I $P(IBNDTX,U,8)!$P(IBNDTX,U,9) D
"RTN","IBCBB1",219,0)
 . Q:$P(IBNDTX,U,8)=2    ; Don't want to do this for option 2 any more.
"RTN","IBCBB1",220,0)
 . D WARN^IBCBB11($S($$REQMRA^IBEFUNC(IBIFN)&($P(IBNDTX,U,9)):"MRA Secondary ",1:"")_"Bill has been forced to print "_$S($P(IBNDTX,U,8)=1!($P(IBNDTX,U,9)=1):"locally",1:"at clearinghouse"))
"RTN","IBCBB1",221,0)
 N IBXZ,IBIZ F IBIZ=12,13,14 S IBXZ=$P(IBNDM,U,IBIZ) I +IBXZ S IBXZ=$P($G(^DPT(DFN,.312,IBXZ,0)),U,18) I +IBXZ S IBXZ=$G(^IBA(355.3,+IBXZ,0)) I +$P(IBXZ,U,12) D
"RTN","IBCBB1",222,0)
 . D WARN^IBCBB11($P($G(^DIC(36,+IBXZ,0)),U,1)_" requires Amb Care Certification")
"RTN","IBCBB1",223,0)
 ;
"RTN","IBCBB1",224,0)
 D VALNDC^IBCBB11(IBIFN,DFN)  ;validate NDC#
"RTN","IBCBB1",225,0)
 ;
"RTN","IBCBB1",226,0)
 ;Build AR array if no errors and MRA not needed or already rec'd
"RTN","IBCBB1",227,0)
 I IBER="",$S($$NEEDMRA^IBEFUNC(IBIFN)!($$REQMRA^IBEFUNC(IBIFN)):0,1:1) D ARRAY
"RTN","IBCBB1",228,0)
 ;
"RTN","IBCBB1",229,0)
 ;Check ROI
"RTN","IBCBB1",230,0)
 N ROIERR
"RTN","IBCBB1",231,0)
 S ROIERR=0 I $P($G(^DGCR(399,IBIFN,"U")),U,5)=1,+$P($G(^DGCR(399,IBIFN,"U")),U,7)=0 S ROIERR=1 ; screen 7 sensitive record and no ROI
"RTN","IBCBB1",232,0)
 I $$ROICHK^IBCBB11(IBIFN,DFN,+IBNDMP) S ROIERR=1 ; check file for sensitive Rx and missing ROI
"RTN","IBCBB1",233,0)
 I ROIERR S IBER=IBER_"IB328;"
"RTN","IBCBB1",234,0)
 ;
"RTN","IBCBB1",235,0)
 ;Verify Line Charges Match Claim Total Charge. IB*2.0*447 BI
"RTN","IBCBB1",236,0)
 I +$$GET1^DIQ(399,IBIFN_",",201)'=+$$IBLNTOT^IBCBB13(IBIFN) S IBER=IBER_"IB344;"
"RTN","IBCBB1",237,0)
 ;
"RTN","IBCBB1",238,0)
 ;Test for valid EIN/SY ID Values. IB*2.0*447 BI
"RTN","IBCBB1",239,0)
 I $$IBSYEI^IBCBB13(IBIFN) S IBER=IBER_"IB345;"
"RTN","IBCBB1",240,0)
 ;
"RTN","IBCBB1",241,0)
 ;Test for a missing ICN. IB*2.0*447 BI
"RTN","IBCBB1",242,0)
 I $$IBMICN^IBCBB13(IBIFN) S IBER=IBER_"IB346;"
"RTN","IBCBB1",243,0)
 ;
"RTN","IBCBB1",244,0)
 ;Test for a ZERO charge amounts. IB*2.0*447 BI
"RTN","IBCBB1",245,0)
 I $$IBRCCHK^IBCBB13(IBIFN) D WARN^IBCBB11("Claim contains revenue codes with no associated charges.")
"RTN","IBCBB1",246,0)
 ;
"RTN","IBCBB1",247,0)
 ;Test for missing "Patient reason for visit". IB*2.0*447 BI
"RTN","IBCBB1",248,0)
 I $$FT^IBCEF(IBIFN)=3,'$$INPAT^IBCEF(IBIFN),$$IBPRV3^IBCBB13(IBIFN) S IBER=IBER_"IB347;"
"RTN","IBCBB1",249,0)
 ;
"RTN","IBCBB1",250,0)
 ;Test for missing Payer ID. IB*2.0*447 BI
"RTN","IBCBB1",251,0)
 ;I $$IBMPID^IBCBB13(IBIFN) S IBER=IBER_"IB348;"
"RTN","IBCBB1",252,0)
 ;Changed Error to Warning. IB*2.0*447 TAZ
"RTN","IBCBB1",253,0)
 I $$IBMPID^IBCBB13(IBIFN) D WARN^IBCBB11("Not all payers have Payer IDs.")
"RTN","IBCBB1",254,0)
 ;
"RTN","IBCBB1",255,0)
 ;Test for missing "Priority (Type) of Admission" for UB-04. IB*2.0*447 BI
"RTN","IBCBB1",256,0)
 I $$FT^IBCEF(IBIFN)=3,$$GET1^DIQ(399,IBIFN_",",158)="" S IBER=IBER_"IB349;"
"RTN","IBCBB1",257,0)
 ;
"RTN","IBCBB1",258,0)
END ;Don't kill IBIFN, IBER, DFN
"RTN","IBCBB1",259,0)
 I $O(^TMP($J,"BILL-WARN",0)),$G(IBER)="" S IBER="WARN" ;Warnings only
"RTN","IBCBB1",260,0)
 K IBBNO,IBEVDT,IBLOC,IBCL,IBTF,IBAT,IBWHO,IBST,IBFDT,IBTDT,IBTC,IBFY,IBFY1,IBAU,IBRU,IBEU,IBARTP,IBFYC,IBMRA,IBTOB,IBTOB12,IBNDU2,IBNDUF3,IBNDUF31,IBNDTX
"RTN","IBCBB1",261,0)
 K IBNDS,IBND0,IBNDU,IBNDM,IBNDMP,IBNDU1,IBFFY,IBTFY,IBFT,IBRTCHV,IBPICHV,IBXDATA,IBOK
"RTN","IBCBB1",262,0)
 I $D(IBER),IBER="" W !,"No Errors found for National edits"
"RTN","IBCBB1",263,0)
 Q
"RTN","IBCBB1",264,0)
 ;
"RTN","IBCBB1",265,0)
ARRAY ;Build PRCASV(array)
"RTN","IBCBB1",266,0)
 N IBCOBN,X
"RTN","IBCBB1",267,0)
 K PRCASV
"RTN","IBCBB1",268,0)
 Q:$$MCRWNR^IBEFUNC(+$$CURR^IBCEF2(IBIFN))
"RTN","IBCBB1",269,0)
 S IBCOBN=$$COBN^IBCEF(IBIFN)
"RTN","IBCBB1",270,0)
 S X=IBIFN
"RTN","IBCBB1",271,0)
 S PRCASV("BDT")=DT,PRCASV("ARREC")=IBIFN
"RTN","IBCBB1",272,0)
 S PRCASV("APR")=DUZ
"RTN","IBCBB1",273,0)
 S PRCASV("PAT")=DFN,PRCASV("CAT")=$P(^DGCR(399.3,IBAT,0),"^",6)
"RTN","IBCBB1",274,0)
 I IBWHO="i" S PRCASV("DEBTOR")=+IBNDMP_";DIC(36,"
"RTN","IBCBB1",275,0)
 S PRCASV("DEBTOR")=$S(IBWHO="p":DFN_";DPT(",IBWHO="o":$P(IBNDM,"^",11)_";DIC(4,",IBWHO="i":PRCASV("DEBTOR"),1:"")
"RTN","IBCBB1",276,0)
 S PRCASV("CARE")=$E($$TOB^IBCEF1(IBIFN),1,2)
"RTN","IBCBB1",277,0)
 S PRCASV("FY")=$$FY^IBOUTL(DT)_U_($P(IBNDU1,U)-$P(IBNDU1,U,2))
"RTN","IBCBB1",278,0)
 ;S PRCASV("FY")=$P(IBNDU1,U,9)_U_$S($P(IBNDU1,U,2)]"":($P(IBNDU1,U,10)-$P(IBNDU1,U,2)),1:$P(IBNDU1,U,10))_$S($P(IBNDU1,U,11)]"":U_$P(IBNDU1,U,11)_U_$P(IBNDU1,U,12),1:"")
"RTN","IBCBB1",279,0)
PLUS I IBWHO="i",$P(IBNDM,"^",2),$D(^DIC(36,$P(IBNDM,"^",2),0)) S PRCASV("2NDINS")=$P(IBNDM,"^",2)
"RTN","IBCBB1",280,0)
 I IBWHO="i",$P(IBNDM,"^",3),$D(^DIC(36,$P(IBNDM,"^",3),0)) S PRCASV("3RDINS")=$P(IBNDM,"^",3)
"RTN","IBCBB1",281,0)
 ;
"RTN","IBCBB1",282,0)
 N IBX S IBX=$P(IBND0,U,21),IBX=$S(IBX="P":"I1",IBX="S":"I2",IBX="T":"I3",1:"") Q:IBX=""
"RTN","IBCBB1",283,0)
 N IBNDI1
"RTN","IBCBB1",284,0)
 Q:'$D(^DGCR(399,IBIFN,IBX))  S IBNDI1=^(IBX)
"RTN","IBCBB1",285,0)
 S:$P(IBNDI1,"^",3)]"" PRCASV("GPNO")=$P(IBNDI1,"^",3)
"RTN","IBCBB1",286,0)
 S:$P(IBNDI1,"^",15)]"" PRCASV("GPNM")=$P(IBNDI1,"^",15)
"RTN","IBCBB1",287,0)
 S:$P(IBNDI1,"^",17)]"" PRCASV("INPA")=$P(IBNDI1,"^",17)
"RTN","IBCBB1",288,0)
 S:$P(IBNDI1,"^",2)]"" PRCASV("IDNO")=$P(IBNDI1,"^",2),PRCASV("INID")=PRCASV("IDNO")
"RTN","IBCBB1",289,0)
 ; Check that this is a secondary or tertiary bill and insurance for previous
"RTN","IBCBB1",290,0)
 ; COB sequence is Medicare WNR and MRA is active --> send data elements to AR
"RTN","IBCBB1",291,0)
 I IBCOBN>1,$$WNRBILL^IBEFUNC(IBIFN,IBCOBN-1),$$EDIACTV^IBCEF4(2) D MRA
"RTN","IBCBB1",292,0)
 Q
"RTN","IBCBB1",293,0)
 ;
"RTN","IBCBB1",294,0)
MRA N IBEOB S IBEOB=0
"RTN","IBCBB1",295,0)
 ;
"RTN","IBCBB1",296,0)
 K PRCASV("MEDURE"),PRCASV("MEDCA")
"RTN","IBCBB1",297,0)
 ; Get EOB data
"RTN","IBCBB1",298,0)
 F  S IBEOB=$O(^IBM(361.1,"B",IBIFN,IBEOB)) Q:'IBEOB  D
"RTN","IBCBB1",299,0)
 . D MRACALC^IBCEMU2(IBEOB,IBIFN,1,.PRCASV)
"RTN","IBCBB1",300,0)
 Q  ;MRA
"RTN","IBCBB1",301,0)
 ;
"RTN","IBCBB1",302,0)
 ;; PREGNANCY DX CODES: V22**-V24**, V27**-V28**, 630**-677**
"RTN","IBCBB1",303,0)
 ;; FLU SHOTS PROCEDURE CODES: 90724, G0008, 90732, G0009
"RTN","IBCBB1",304,0)
 ;
"RTN","IBCBB1",305,0)
NONVAFLG(IBIFN) ; Check if Non-VA bill
"RTN","IBCBB1",306,0)
 ; Function returns 1 if Non-VA bill
"RTN","IBCBB1",307,0)
 ; IB*2.0*554/DRF 10/9/2015
"RTN","IBCBB1",308,0)
 N FLAG,PTF
"RTN","IBCBB1",309,0)
 S FLAG=0
"RTN","IBCBB1",310,0)
 I $P($G(^DGCR(399,IBIFN,"U2")),U,10)]"" S FLAG=1 ;Non-VA provider defined
"RTN","IBCBB1",311,0)
 S PTF=$P($G(^DGCR(399,IBIFN,0)),U,8)
"RTN","IBCBB1",312,0)
 I PTF,$P($G(^DGPT(PTF,0)),U,4)=1 S FLAG=1 ;PTF entry indicates Non-VA
"RTN","IBCBB1",313,0)
 Q FLAG
"RTN","IBCBB11")
0^96^B117506484^B104877597
"RTN","IBCBB11",1,0)
IBCBB11 ;ALB/AAS/OIFO-BP/PIJ - CONTINUATION OF EDIT CHECK ROUTINE ;12 Jun 2006  3:45 PM
"RTN","IBCBB11",2,0)
 ;;2.0;INTEGRATED BILLING;**51,343,363,371,395,392,401,384,400,436,432,516,550,577,568,591,592**;21-MAR-94;Build 58
"RTN","IBCBB11",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCBB11",4,0)
 ;
"RTN","IBCBB11",5,0)
WARN(IBDISP) ; Set warning in global
"RTN","IBCBB11",6,0)
 ; DISP = warning text to display
"RTN","IBCBB11",7,0)
 ;
"RTN","IBCBB11",8,0)
 N Z
"RTN","IBCBB11",9,0)
 S Z=+$O(^TMP($J,"BILL-WARN",""),-1)
"RTN","IBCBB11",10,0)
 I Z=0 S ^TMP($J,"BILL-WARN",1)=$J("",5)_"**Warnings**:",Z=1
"RTN","IBCBB11",11,0)
 S Z=Z+1,^TMP($J,"BILL-WARN",Z)=$J("",5)_IBDISP
"RTN","IBCBB11",12,0)
 Q
"RTN","IBCBB11",13,0)
 ;
"RTN","IBCBB11",14,0)
MULTDIV(IBIFN,IBND0) ; Check for multiple divisions on a bill ien IBIFN
"RTN","IBCBB11",15,0)
 ; IBND0 = 0-node of bill
"RTN","IBCBB11",16,0)
 ;
"RTN","IBCBB11",17,0)
 ;  Function returns 1 if more than 1 division found on bill
"RTN","IBCBB11",18,0)
 N Z,Z0,Z1,MULT
"RTN","IBCBB11",19,0)
 S MULT=0,Z1=$P(IBND0,U,22)
"RTN","IBCBB11",20,0)
 I Z1 D
"RTN","IBCBB11",21,0)
 . S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"RC",Z)) Q:'Z  S Z0=$P(^(Z,0),U,7) I Z0,Z0'=Z1 S MULT=1 Q
"RTN","IBCBB11",22,0)
 . S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"CP",Z)) Q:'Z  S Z0=$P(^(Z,0),U,6) I Z0,Z0'=Z1 S MULT=2 Q
"RTN","IBCBB11",23,0)
 I 'Z1 S MULT=3
"RTN","IBCBB11",24,0)
 Q MULT
"RTN","IBCBB11",25,0)
 ;
"RTN","IBCBB11",26,0)
 ;; PREGNANCY DX CODES: V22**-V24**, V27**-V28**, 630**-677**
"RTN","IBCBB11",27,0)
 ;; FLU SHOTS PROCEDURE CODES: 90724, G0008, 90732, G0009
"RTN","IBCBB11",28,0)
 ;
"RTN","IBCBB11",29,0)
NPICHK ; Check for required NPIs
"RTN","IBCBB11",30,0)
 N IBNPIS,IBNONPI,IBNPIREQ,Z,IBNFI,IBTF,IBWC,IBXSAVE,IBPRV,IBLINE,IBPRVNT1,IBPRVNT2
"RTN","IBCBB11",31,0)
 ;*** pij start IB*20*436 ***
"RTN","IBCBB11",32,0)
 N IBRATYPE,IBLEGAL
"RTN","IBCBB11",33,0)
 S (IBRATYPE,IBLEGAL)=""
"RTN","IBCBB11",34,0)
 S IBRATYPE=$P($G(^DGCR(399,IBIFN,0)),U,7)
"RTN","IBCBB11",35,0)
 ; Legal types for this use.
"RTN","IBCBB11",36,0)
 ;  7=NO FAULT INS.
"RTN","IBCBB11",37,0)
 ; 10=TORT FEASOR
"RTN","IBCBB11",38,0)
 ; 11=WORKERS' COMP.
"RTN","IBCBB11",39,0)
 S IBNFI=$O(^DGCR(399.3,"B","NO FAULT INS.",0)) S:'IBNFI IBNFI=7
"RTN","IBCBB11",40,0)
 S IBTF=$O(^DGCR(399.3,"B","TORT FEASOR",0)) S:'IBTF IBTF=10
"RTN","IBCBB11",41,0)
 S IBWC=$O(^DGCR(399.3,"B","WORKERS' COMP.",0)) S:'IBWC IBWC=11
"RTN","IBCBB11",42,0)
 ;
"RTN","IBCBB11",43,0)
 I IBRATYPE=IBNFI!(IBRATYPE=IBTF)!(IBRATYPE=IBWC) D
"RTN","IBCBB11",44,0)
 . ; One of the legal types - force local print
"RTN","IBCBB11",45,0)
 . S IBLEGAL=1
"RTN","IBCBB11",46,0)
 ;*** pij end ***
"RTN","IBCBB11",47,0)
 S IBNPIREQ=$$NPIREQ^IBCEP81(DT)  ; Check if NPI is required
"RTN","IBCBB11",48,0)
 ; Check providers
"RTN","IBCBB11",49,0)
 ; IB*2.0*432 changed the NPI check to the new Provider Array
"RTN","IBCBB11",50,0)
 ;S IBNPIS=$$PROVNPI^IBCEF73A(IBIFN,.IBNONPI)
"RTN","IBCBB11",51,0)
 D ALLIDS^IBCEFP(IBIFN,.IBXSAVE,1)
"RTN","IBCBB11",52,0)
 S IBPRV=""
"RTN","IBCBB11",53,0)
 F  S IBPRV=$O(IBXSAVE("PROVINF",IBIFN,"C",1,IBPRV)) Q:'IBPRV  D
"RTN","IBCBB11",54,0)
 . I $P($G(IBXSAVE("PROVINF",IBIFN,"C",1,IBPRV,0)),U,4)="" S IBNONPI(IBPRV)=""
"RTN","IBCBB11",55,0)
 S IBLINE=""
"RTN","IBCBB11",56,0)
 F  S IBLINE=$O(IBXSAVE("L-PROV",IBIFN,IBLINE)) Q:'IBLINE  D
"RTN","IBCBB11",57,0)
 . S IBPRV=""
"RTN","IBCBB11",58,0)
 . F  S IBPRV=$O(IBXSAVE("L-PROV",IBIFN,IBLINE,"C",1,IBPRV)) Q:IBPRV=""  D
"RTN","IBCBB11",59,0)
 .. I $P($G(IBXSAVE("L-PROV",IBIFN,IBLINE,"C",1,IBPRV,0)),U,4)="" S IBNONPI(IBPRV)=""
"RTN","IBCBB11",60,0)
 I $D(IBNONPI) S IBPRV="" F  S IBPRV=$O(IBNONPI(IBPRV)) Q:'IBPRV  D
"RTN","IBCBB11",61,0)
 . ;JWS;IB*2.0*592;Assistant Surgeon for dental
"RTN","IBCBB11",62,0)
 . I IBPRV=6 S IBER=IBER_"IB358;" Q
"RTN","IBCBB11",63,0)
 . S IBER=IBER_"IB"_(140+IBPRV)_";" Q  ; If required, set error IB*2*516
"RTN","IBCBB11",64,0)
 ; Check organizations
"RTN","IBCBB11",65,0)
 S IBNONPI=""
"RTN","IBCBB11",66,0)
 S IBNPIS=$$ORGNPI^IBCEF73A(IBIFN,.IBNONPI)
"RTN","IBCBB11",67,0)
 I $L(IBNONPI) F Z=1:1:$L(IBNONPI,U) D
"RTN","IBCBB11",68,0)
 . S IBER=IBER_$P("IB339;^IB340;^IB341;",U,$P(IBNONPI,U,Z))  ; DEM;432 Added NPI errors.
"RTN","IBCBB11",69,0)
 Q
"RTN","IBCBB11",70,0)
 ;
"RTN","IBCBB11",71,0)
TAXCHK ; Check for required taxonomies
"RTN","IBCBB11",72,0)
 N IBDT,IBLINE,IBNOTAX,IBNOTAX1,IBNOTAX2,IBPRV,IBTAXS,IBXSAVE,Z
"RTN","IBCBB11",73,0)
 ;
"RTN","IBCBB11",74,0)
 ; MRD;IB*2.0*516 - This check is now moot; 'today' is always on or
"RTN","IBCBB11",75,0)
 ; after May 23, 2008, so taxonomy codes are always required
"RTN","IBCBB11",76,0)
 ; for certain providers.
"RTN","IBCBB11",77,0)
 ;S IBTAXREQ=$$TAXREQ^IBCEP81(DT)  ; Check if taxonomy is required
"RTN","IBCBB11",78,0)
 ;
"RTN","IBCBB11",79,0)
 ; Check providers
"RTN","IBCBB11",80,0)
 ; IB*2.0*432 changed the Taxonomy check to the new Provider Array
"RTN","IBCBB11",81,0)
 ;S IBTAXS=$$PROVTAX^IBCEF73A(IBIFN,.IBNOTAX)
"RTN","IBCBB11",82,0)
 D ALLIDS^IBCEFP(IBIFN,.IBXSAVE,1)
"RTN","IBCBB11",83,0)
 ;JWS;IB*2.0*592; prevent having both RENDERING and ASSISTANT SURGEON providers at the claim level
"RTN","IBCBB11",84,0)
 ;   ;performing check here after providers are 'merged' into the claim level, if only at line level
"RTN","IBCBB11",85,0)
 ;   ;done in ALLIDS^IBCEFP
"RTN","IBCBB11",86,0)
 I $$FT^IBCEF(IBIFN)=7 D
"RTN","IBCBB11",87,0)
 . I $D(IBXSAVE("PROVINF",IBIFN,"C",1,3)),$D(IBXSAVE("PROVINF",IBIFN,"C",1,6)) D
"RTN","IBCBB11",88,0)
 .. I '$F(IBER,"IB363;") S IBER=IBER_"IB363;"
"RTN","IBCBB11",89,0)
 .. Q
"RTN","IBCBB11",90,0)
 . ;JWS;IB*2.0*592 - US1108 start
"RTN","IBCBB11",91,0)
 . I '$D(IBXSAVE("PROVINF",IBIFN,"C",1,3)),'$D(IBXSAVE("PROVINF",IBIFN,"C",1,6)) D
"RTN","IBCBB11",92,0)
 .. N IBX,OK S OK=0,IBX=""
"RTN","IBCBB11",93,0)
 .. F  S IBX=$O(IBXSAVE("L-PROV",IBX)) Q:IBX=""  D  Q:OK
"RTN","IBCBB11",94,0)
 ... I $D(IBXSAVE("L-PROV",IBX,"C",1,3)) S OK=1 Q
"RTN","IBCBB11",95,0)
 ... I $D(IBXSAVE("L-PROV",IBX,"C",1,6)) S OK=1 Q
"RTN","IBCBB11",96,0)
 .. I 'OK S IBER=IBER_"IB357;"
"RTN","IBCBB11",97,0)
 .. Q
"RTN","IBCBB11",98,0)
 . Q
"RTN","IBCBB11",99,0)
 ;JWS;IB*2.0*592 - US1108 end
"RTN","IBCBB11",100,0)
 S IBPRV=""
"RTN","IBCBB11",101,0)
 F  S IBPRV=$O(IBXSAVE("PROVINF",IBIFN,"C",1,IBPRV)) Q:'IBPRV  D
"RTN","IBCBB11",102,0)
 . I $G(IBXSAVE("PROVINF",IBIFN,"C",1,IBPRV,"TAXONOMY"))="" D
"RTN","IBCBB11",103,0)
 .. S IBNOTAX(IBPRV)=""
"RTN","IBCBB11",104,0)
 .. S IBNOTAX1=$P(IBXSAVE("PROVINF",IBIFN,"C",1,IBPRV),";",1)  ; New variables IBNOTAX1 and IBNOTAX2 for IB*2.0*568 - Deactivated Provider 
"RTN","IBCBB11",105,0)
 .. S IBNOTAX2(IBPRV,IBNOTAX1)=""
"RTN","IBCBB11",106,0)
 .. Q
"RTN","IBCBB11",107,0)
 . Q
"RTN","IBCBB11",108,0)
 ;
"RTN","IBCBB11",109,0)
 S IBLINE=""
"RTN","IBCBB11",110,0)
 F  S IBLINE=$O(IBXSAVE("L-PROV",IBIFN,IBLINE)) Q:'IBLINE  D
"RTN","IBCBB11",111,0)
 . S IBPRV=""
"RTN","IBCBB11",112,0)
 . F  S IBPRV=$O(IBXSAVE("L-PROV",IBIFN,IBLINE,"C",1,IBPRV)) Q:IBPRV=""  D
"RTN","IBCBB11",113,0)
 .. I $G(IBXSAVE("L-PROV",IBIFN,IBLINE,"C",1,IBPRV,"TAXONOMY"))="" D
"RTN","IBCBB11",114,0)
 ... S IBNOTAX(IBPRV)=""
"RTN","IBCBB11",115,0)
 ... S IBNOTAX1=$P(IBXSAVE("L-PROV",IBIFN,IBLINE,"C",1,IBPRV),";",1)  ; New variables IBNOTAX1 and IBNOTAX2 for IB*2.0*568 - Deactivated Provider 
"RTN","IBCBB11",116,0)
 ... S IBNOTAX2(IBPRV,IBNOTAX1)=""
"RTN","IBCBB11",117,0)
 ... Q
"RTN","IBCBB11",118,0)
 .. Q
"RTN","IBCBB11",119,0)
 . Q
"RTN","IBCBB11",120,0)
 ;
"RTN","IBCBB11",121,0)
 ; IB251 = Referring provider taxonomy missing.
"RTN","IBCBB11",122,0)
 ; IB253 = Rendering provider taxonomy missing.
"RTN","IBCBB11",123,0)
 ; IB254 = Attending provider taxonomy missing.
"RTN","IBCBB11",124,0)
 ; IB256 = Assistant Surgeon taxonomy missing.  ;JWS;IB*2.0*592
"RTN","IBCBB11",125,0)
 ;JWS;IB*2.0*592;dental start
"RTN","IBCBB11",126,0)
 I $D(IBNOTAX) S IBPRV="" F  S IBPRV=$O(IBNOTAX(IBPRV)) Q:'IBPRV  D
"RTN","IBCBB11",127,0)
 . ; Only Referring, Rendering and Attending are currently sent to the payer
"RTN","IBCBB11",128,0)
 . ;I IBTAXREQ,"134"[IBPRV S IBER=IBER_"IB"_(250+IBPRV)_";" Q  ; MRD;IB*2.0*516 - Always required.
"RTN","IBCBB11",129,0)
 . I "134"[IBPRV D  Q
"RTN","IBCBB11",130,0)
 .. S IBER=IBER_"IB"_(250+IBPRV)_";" ; If required, set error
"RTN","IBCBB11",131,0)
 .. S IBPRVNT1=$O(IBNOTAX2(IBPRV,"")) ; New check for Deactivated Provider IB*2.0*568 next three lines
"RTN","IBCBB11",132,0)
 .. S IBPRVNT2=$$SPEC^IBCEU(IBPRVNT1,IBEVDT)
"RTN","IBCBB11",133,0)
 .. I '$G(IBPRVNT2) D WARN($P("Referring^Operating^Rendering^Attending^Supervising^^^^Other",U,IBPRV)_" Provider PERSON CLASS/taxonomy was not active at DOS.")  ; set warning
"RTN","IBCBB11",134,0)
 . D WARN("Taxonomy for the "_$P("referring^operating^rendering^attending^supervising^^^^other",U,IBPRV)_" provider has no value")  ; Else, set warning
"RTN","IBCBB11",135,0)
 . Q
"RTN","IBCBB11",136,0)
 ;JWS;IB*2.0*592;end
"RTN","IBCBB11",137,0)
 ;
"RTN","IBCBB11",138,0)
 ; Check organizations.  The function ORGTAX will set IBNOTAX to be a
"RTN","IBCBB11",139,0)
 ; list of entities missing taxonomy codes, if any (n, n^m, n^m^p,
"RTN","IBCBB11",140,0)
 ; where each 1 is service facility, 2 is non-VA service facility and
"RTN","IBCBB11",141,0)
 ; 3 is billing provider.
"RTN","IBCBB11",142,0)
 ;
"RTN","IBCBB11",143,0)
 S IBNOTAX=""
"RTN","IBCBB11",144,0)
 S IBTAXS=$$ORGTAX^IBCEF73A(IBIFN,.IBNOTAX)
"RTN","IBCBB11",145,0)
 I $L(IBNOTAX) F Z=1:1:$L(IBNOTAX,U) D
"RTN","IBCBB11",146,0)
 . ; IB167 = Billing Provider taxonomy missing.
"RTN","IBCBB11",147,0)
 . ;I IBTAXREQ,$P(IBNOTAX,U,Z)=3 S IBER=IBER_"IB167;" Q  ; MRD;IB*2.0*516 - Always required.
"RTN","IBCBB11",148,0)
 . I $P(IBNOTAX,U,Z)=3 S IBER=IBER_"IB167;" Q
"RTN","IBCBB11",149,0)
 . ; MRD;IB*2.0*516 - Remove warning message for missing taxonomy code for lab or facility.
"RTN","IBCBB11",150,0)
 . ; D WARN("Taxonomy for the "_$P("Service Facility^Non-VA Service Facility^Billing Provider",U,$P(IBNOTAX,U,Z))_" has no value")  ; Else, set warning
"RTN","IBCBB11",151,0)
 . Q
"RTN","IBCBB11",152,0)
 ;
"RTN","IBCBB11",153,0)
 Q
"RTN","IBCBB11",154,0)
 ;
"RTN","IBCBB11",155,0)
VALNDC(IBIFN,IBDFN) ; Moving pharmacy checks to reduce likelihood of patch collision
"RTN","IBCBB11",156,0)
 D VALNDC^IBCBB14(IBIFN,IBDFN)
"RTN","IBCBB11",157,0)
 Q
"RTN","IBCBB11",158,0)
 ;
"RTN","IBCBB11",159,0)
PRIIDCHK ; Check for required Pimarary ID (SSN/EIN)
"RTN","IBCBB11",160,0)
 ; If the provider is on the claim, he must have one
"RTN","IBCBB11",161,0)
 ; 
"RTN","IBCBB11",162,0)
 N IBI,IBZ
"RTN","IBCBB11",163,0)
 I $$TXMT^IBCEF4(IBIFN) D
"RTN","IBCBB11",164,0)
 . D F^IBCEF("N-ALL ATT/REND PROV SSN/EI","IBZ",,IBIFN)
"RTN","IBCBB11",165,0)
 . S IBI="" F  S IBI=$O(^DGCR(399,IBIFN,"PRV","B",IBI)) Q:IBI=""  D
"RTN","IBCBB11",166,0)
 .. I $P(IBZ,U,IBI)="" S IBER=IBER_$S(IBI=1:"IB151;",IBI=2:"IB152;",IBI=3!(IBI=4):"IB321;",IBI=5:"IB153;",IBI=9:"IB154;",1:"")
"RTN","IBCBB11",167,0)
 Q
"RTN","IBCBB11",168,0)
 ;
"RTN","IBCBB11",169,0)
RXNPI(IBIFN) ; Moving pharmacy checks to reduce likelihood of patch collision
"RTN","IBCBB11",170,0)
 D RXNPI^IBCBB14(IBIFN)
"RTN","IBCBB11",171,0)
 Q
"RTN","IBCBB11",172,0)
 ;
"RTN","IBCBB11",173,0)
ROICHK(IBIFN,IBDFN,IBINS) ; Moving pharmacy checks to reduce likelihood of patch collision
"RTN","IBCBB11",174,0)
 Q $$ROICHK^IBCBB14(IBIFN,IBDFN,IBINS)
"RTN","IBCBB11",175,0)
 ;
"RTN","IBCBB11",176,0)
AMBCK(IBIFN)    ; IB*2.0*432 - if ambulance location defined, address must be defined
"RTN","IBCBB11",177,0)
 ; if there is anything entered in any of the address fields (either p/up or drop/off fields), than there needs to be: 
"RTN","IBCBB11",178,0)
 ; Address 1, State and ZIP unless the State is not a US state or possession, then zip code is not needed (CMS1500 only)
"RTN","IBCBB11",179,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",180,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB11",181,0)
 ;          1 = Error
"RTN","IBCBB11",182,0)
 ;
"RTN","IBCBB11",183,0)
 N IBPAMB,IBDAMB,IBAMBR,IBCK
"RTN","IBCBB11",184,0)
 S IBAMBR=0
"RTN","IBCBB11",185,0)
 Q:$$INSPRF^IBCEF(IBIFN)'=0 IBAMBR
"RTN","IBCBB11",186,0)
 S IBPAMB=$G(^DGCR(399,IBIFN,"U5")),IBDAMB=$G(^DGCR(399,IBIFN,"U6"))
"RTN","IBCBB11",187,0)
 S IBCK(5)=$$NOPUNCT^IBCEF($P(IBPAMB,U,2,6),1),IBCK(6)=$$NOPUNCT^IBCEF($P(IBDAMB,U,1,6),1)
"RTN","IBCBB11",188,0)
 I IBCK(5)="",IBCK(6)="" Q IBAMBR
"RTN","IBCBB11",189,0)
 ; at this point we know that at least one ambulance field has data, so check to see if all have data
"RTN","IBCBB11",190,0)
 I IBCK(5)'="" F I=2,4,5 I $P(IBPAMB,U,I)="" S IBAMBR=1
"RTN","IBCBB11",191,0)
 I IBCK(6)'="" F I=1,2,4,5 I $P(IBDAMB,U,I)="" S IBAMBR=1
"RTN","IBCBB11",192,0)
 Q:IBAMBR=1 IBAMBR
"RTN","IBCBB11",193,0)
 ; now check zip code.  OK to be null if state is not a US Posession
"RTN","IBCBB11",194,0)
 F I="IBPAMB","IBDAMB" I $P(I,U,5)'="",$P($G(^DIC(5,$P(I,U,5),0)),U,6)=1,$P(I,U,6)="" S IBAMBR=1
"RTN","IBCBB11",195,0)
 Q IBAMBR
"RTN","IBCBB11",196,0)
 ;
"RTN","IBCBB11",197,0)
COBAMT(IBIFN)   ; IB*2.0*432 - IF there is a COB amt. it must equal the Total Claim Charge Amount
"RTN","IBCBB11",198,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",199,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB11",200,0)
 ;          1 = Error
"RTN","IBCBB11",201,0)
 ;
"RTN","IBCBB11",202,0)
 Q:IBIFN="" 0
"RTN","IBCBB11",203,0)
 Q:$P($G(^DGCR(399,IBIFN,"U4")),U)="" 0
"RTN","IBCBB11",204,0)
 Q:+$P($G(^DGCR(399,IBIFN,"U1")),U)'=+$P($G(^DGCR(399,IBIFN,"U4")),U) 1
"RTN","IBCBB11",205,0)
 Q 0
"RTN","IBCBB11",206,0)
 ;
"RTN","IBCBB11",207,0)
COBMRA(IBIFN)   ; IB*2.0*432 - If there is a 'COB total non-covered amount' (File#399, Field#260), 
"RTN","IBCBB11",208,0)
 ; Primary Insurance must be Medicare that never went to Medicare, and this must be a 2ndary or tertiary claim
"RTN","IBCBB11",209,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",210,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB11",211,0)
 ;          1 = Error
"RTN","IBCBB11",212,0)
 ;
"RTN","IBCBB11",213,0)
 N IBP
"RTN","IBCBB11",214,0)
 Q:IBIFN="" 0
"RTN","IBCBB11",215,0)
 Q:$P($G(^DGCR(399,IBIFN,"U4")),U)="" 0
"RTN","IBCBB11",216,0)
 S IBP=$P($G(^DGCR(399,IBIFN,"M1")),U,5) S:IBP="" IBP=IBIFN
"RTN","IBCBB11",217,0)
 I $$WNRBILL^IBEFUNC(IBIFN,1),$P($G(^DGCR(399,IBP,"S")),U,7)="",$$COBN^IBCEF(IBIFN)>1 Q 0
"RTN","IBCBB11",218,0)
 Q 1
"RTN","IBCBB11",219,0)
 ;
"RTN","IBCBB11",220,0)
COBSEC(IBIFN)   ; IB*2.0*432 - If there is NOT a 'COB total non-covered amount' (File#399, Field#260), 
"RTN","IBCBB11",221,0)
 ; and Primary Insurance is Medicare that never went to Medicare, 2ndary or tertiary claim cannot be set to transmit
"RTN","IBCBB11",222,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",223,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB11",224,0)
 ;          1 = Error
"RTN","IBCBB11",225,0)
 ;
"RTN","IBCBB11",226,0)
 N IBP
"RTN","IBCBB11",227,0)
 Q:IBIFN="" 0
"RTN","IBCBB11",228,0)
 Q:$P($G(^DGCR(399,IBIFN,"U4")),U)'="" 0
"RTN","IBCBB11",229,0)
 Q:$$COBN^IBCEF(IBIFN)<2 0
"RTN","IBCBB11",230,0)
 S IBP=$P($G(^DGCR(399,IBIFN,"M1")),U,5) S:IBP="" IBP=IBIFN
"RTN","IBCBB11",231,0)
 I $$WNRBILL^IBEFUNC(IBIFN,1),$P($G(^DGCR(399,IBP,"S")),U,7)="",$P($G(^DGCR(399,IBIFN,"TX")),U,8)'=1 Q 1
"RTN","IBCBB11",232,0)
 Q 0
"RTN","IBCBB11",233,0)
 ;
"RTN","IBCBB11",234,0)
TMCK(IBIFN) ;  IB*2.0*432 - Attachment Control Number - REQUIRED when Transmission Method = BM, EL, EM, or FT
"RTN","IBCBB11",235,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",236,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB11",237,0)
 ;          1 = Error
"RTN","IBCBB11",238,0)
 ;
"RTN","IBCBB11",239,0)
 N IBAC
"RTN","IBCBB11",240,0)
 Q:IBIFN="" 0
"RTN","IBCBB11",241,0)
 F I=1,3 S IBAC(I)=$P($G(^DGCR(399,IBIFN,"U8")),U,I)
"RTN","IBCBB11",242,0)
 Q:IBAC(3)="" 0
"RTN","IBCBB11",243,0)
 Q:IBAC(1)'="" 0
"RTN","IBCBB11",244,0)
 Q:IBAC(3)="AA" 0
"RTN","IBCBB11",245,0)
 Q 1
"RTN","IBCBB11",246,0)
 ;
"RTN","IBCBB11",247,0)
ACCK(IBIFN) ; IB*2.0*432 If any of the loop info is present, then Report Type & Transmission Method req'd
"RTN","IBCBB11",248,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",249,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB11",250,0)
 ;          1 = Error
"RTN","IBCBB11",251,0)
 ;
"RTN","IBCBB11",252,0)
 N IBAC
"RTN","IBCBB11",253,0)
 Q:IBIFN="" 0
"RTN","IBCBB11",254,0)
 F I=1:1:3 S IBAC(I)=$P($G(^DGCR(399,IBIFN,"U8")),U,I)
"RTN","IBCBB11",255,0)
 ; All fields null, no error
"RTN","IBCBB11",256,0)
 I IBAC(1)="",IBAC(2)="",IBAC(3)="" Q 0
"RTN","IBCBB11",257,0)
 ; Both required fields complete, no error
"RTN","IBCBB11",258,0)
 I IBAC(2)'="",IBAC(3)'="" Q 0
"RTN","IBCBB11",259,0)
 ; At this point, one of the 2 required fields has data and one does not, so error
"RTN","IBCBB11",260,0)
 Q 1
"RTN","IBCBB11",261,0)
 ;
"RTN","IBCBB11",262,0)
LNTMCK(IBIFN) ;  DEM;IB*2.0*432 - (Line Level) Attachment Control Number - REQUIRED when Transmission Method = BM, EL, EM, or FT
"RTN","IBCBB11",263,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",264,0)
 ; OUTPUT - IBLNERR = 0 = no error        
"RTN","IBCBB11",265,0)
 ;          IBLNERR = 1 = Error
"RTN","IBCBB11",266,0)
 ;
"RTN","IBCBB11",267,0)
 N IBAC,IBPROCP,I,IBLNERR
"RTN","IBCBB11",268,0)
 S IBLNERR=0  ; DEM;432 - Initialize error flag IBLNERR to '0' for no errors.
"RTN","IBCBB11",269,0)
 Q:IBIFN="" IBLNERR
"RTN","IBCBB11",270,0)
 S IBPROCP=0 F  S IBPROCP=$O(^DGCR(399,IBIFN,"CP",IBPROCP)) Q:'IBPROCP  D  Q:IBLNERR
"RTN","IBCBB11",271,0)
 . Q:'($D(^DGCR(399,IBIFN,"CP",IBPROCP,0))#10)  ; DEM;432 - Node '0' is procedure node.
"RTN","IBCBB11",272,0)
 . Q:'($D(^DGCR(399,IBIFN,"CP",IBPROCP,1))#10)  ; DEM;432 - Node '1' is line level Attachment Control fields.
"RTN","IBCBB11",273,0)
 . F I=1,3 S IBAC(I)=$P(^DGCR(399,IBIFN,"CP",IBPROCP,1),U,I)
"RTN","IBCBB11",274,0)
 . I IBAC(3)="" S IBLNERR=0 Q
"RTN","IBCBB11",275,0)
 . I IBAC(1)'="" S IBLNERR=0 Q
"RTN","IBCBB11",276,0)
 . I (IBAC(3)="AA") S IBLNERR=0 Q
"RTN","IBCBB11",277,0)
 . S IBLNERR=1
"RTN","IBCBB11",278,0)
 . Q
"RTN","IBCBB11",279,0)
 ;
"RTN","IBCBB11",280,0)
 Q IBLNERR
"RTN","IBCBB11",281,0)
 ;
"RTN","IBCBB11",282,0)
LNACCK(IBIFN) ; DEM;IB*2.0*432 (Line Level) If any of the loop info is present, then Report Type & Transmission Method req'd
"RTN","IBCBB11",283,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",284,0)
 ; OUTPUT - IBLNERR = 0 = no error        
"RTN","IBCBB11",285,0)
 ;          IBLNERR = 1 = Error
"RTN","IBCBB11",286,0)
 ;
"RTN","IBCBB11",287,0)
 N IBAC,IBPROCP,I,IBLNERR
"RTN","IBCBB11",288,0)
 S IBLNERR=0  ; DEM;432 - Initialize error flag IBLNERR to '0' for no errors.
"RTN","IBCBB11",289,0)
 Q:IBIFN="" IBLNERR
"RTN","IBCBB11",290,0)
 S IBPROCP=0 F  S IBPROCP=$O(^DGCR(399,IBIFN,"CP",IBPROCP)) Q:'IBPROCP  D  Q:IBLNERR
"RTN","IBCBB11",291,0)
 . Q:'($D(^DGCR(399,IBIFN,"CP",IBPROCP,0))#10)  ; DEM;432 - Node '0' is procedure node.
"RTN","IBCBB11",292,0)
 . Q:'($D(^DGCR(399,IBIFN,"CP",IBPROCP,1))#10)  ; DEM;432 - Node '1' is line level Attachment Control fields.
"RTN","IBCBB11",293,0)
 . F I=1:1:3 S IBAC(I)=$P(^DGCR(399,IBIFN,"CP",IBPROCP,1),U,I)
"RTN","IBCBB11",294,0)
 . ; All fields null, no error
"RTN","IBCBB11",295,0)
 . I IBAC(1)="",IBAC(2)="",IBAC(3)="" S IBLNERR=0 Q
"RTN","IBCBB11",296,0)
 . ; Both required fields complete, no error
"RTN","IBCBB11",297,0)
 . I IBAC(2)'="",IBAC(3)'="" S IBLNERR=0 Q
"RTN","IBCBB11",298,0)
 . ; At this point, one of the 2 required fields has data and one does not, so error
"RTN","IBCBB11",299,0)
 . S IBLNERR=1
"RTN","IBCBB11",300,0)
 . Q
"RTN","IBCBB11",301,0)
 ;
"RTN","IBCBB11",302,0)
 Q IBLNERR
"RTN","IBCBB11",303,0)
 ;
"RTN","IBCBB11",304,0)
 ;vd/Beginning of IB*2*577 - Validate Line Level for NDC
"RTN","IBCBB11",305,0)
LNNDCCK(IBIFN) ;IB*2*577 (Line Level) The Units and Units/Basis of Measurement fields are required if the NDC field is populated.
"RTN","IBCBB11",306,0)
 ; INPUT  - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",307,0)
 ; OUTPUT - IBLNERR = 0 = no error
"RTN","IBCBB11",308,0)
 ;          IBLNERR = 1 = Error
"RTN","IBCBB11",309,0)
 ;
"RTN","IBCBB11",310,0)
 N IBAC,IBPROCP,I,IBLNERR
"RTN","IBCBB11",311,0)
 S IBLNERR=0  ; IB*2*577 - Initialize error flag IBLNERR to '0' for no errors.
"RTN","IBCBB11",312,0)
 Q:IBIFN="" IBLNERR
"RTN","IBCBB11",313,0)
 S IBPROCP=0 F  S IBPROCP=$O(^DGCR(399,IBIFN,"CP",IBPROCP)) Q:'IBPROCP  D  Q:IBLNERR
"RTN","IBCBB11",314,0)
 . Q:($$GET1^DIQ(399.0304,IBPROCP_","_IBIFN_",","NDC","I")="")   ; IB*2*577 - No NDC Code
"RTN","IBCBB11",315,0)
 . ; If there is an NDC Code, then the UNITS and UNITS/BASIS OF MEASUREMENT are Required.
"RTN","IBCBB11",316,0)
 . I $$GET1^DIQ(399.0304,IBPROCP_","_IBIFN_",","UNITS/BASIS OF MEASUREMENT","I")="" S IBLNERR=1 Q
"RTN","IBCBB11",317,0)
 . I $$GET1^DIQ(399.0304,IBPROCP_","_IBIFN_",","UNITS","I")="" S IBLNERR=1 Q  ;Units (Quantity) is required if there is an NDC Code.
"RTN","IBCBB11",318,0)
 . Q
"RTN","IBCBB11",319,0)
 ;
"RTN","IBCBB11",320,0)
 Q IBLNERR
"RTN","IBCBB11",321,0)
 ;vd/End of IB*2*577
"RTN","IBCBB12")
0^97^B136258580^B132831016
"RTN","IBCBB12",1,0)
IBCBB12 ;ALB/DEM - PROCEDURE AND LINE LEVEL PROVIDER EDITS ;17-OCT-2010
"RTN","IBCBB12",2,0)
 ;;2.0;INTEGRATED BILLING;**432,592**;21-MAR-94;Build 58
"RTN","IBCBB12",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCBB12",4,0)
 Q
"RTN","IBCBB12",5,0)
 ;
"RTN","IBCBB12",6,0)
LNPROV(IBIFN) ; DEM;432 - Edits for line level providers.
"RTN","IBCBB12",7,0)
 ;
"RTN","IBCBB12",8,0)
 ; Input:
"RTN","IBCBB12",9,0)
 ;       IBIFN - Claim number IEN.
"RTN","IBCBB12",10,0)
 ;
"RTN","IBCBB12",11,0)
 ; Output:
"RTN","IBCBB12",12,0)
 ;       OK - '1' Edits
"RTN","IBCBB12",13,0)
 ;            '0' No Edits.
"RTN","IBCBB12",14,0)
 ;       *Note: OK returned if called as function.
"RTN","IBCBB12",15,0)
 ;              Can be called as routine as well.
"RTN","IBCBB12",16,0)
 ;       IBER - Edit error string. Only updated if errors.
"RTN","IBCBB12",17,0)
 ;
"RTN","IBCBB12",18,0)
 ; Patch 432 EDITS:
"RTN","IBCBB12",19,0)
 ;
"RTN","IBCBB12",20,0)
 ; (1) Not all procedures have a Line Level Rendering Provider,
"RTN","IBCBB12",21,0)
 ;     and no Claim Level Rendering Provider.
"RTN","IBCBB12",22,0)
 ;     Error Message in Billing for Prof Rendering.
"RTN","IBCBB12",23,0)
 ;     *Note: Only applies to Rendering Provider Type.
"RTN","IBCBB12",24,0)
 ;
"RTN","IBCBB12",25,0)
 ; (2) All procedures have a Line Level Rendering Provider,
"RTN","IBCBB12",26,0)
 ;     and a Claim Level Rendering Provider who is different
"RTN","IBCBB12",27,0)
 ;     from any of the Line Level Rendering Providers.
"RTN","IBCBB12",28,0)
 ;     Error in Billing.
"RTN","IBCBB12",29,0)
 ;     *Note: Apply to all provider types (Rendering, Referring, Supervising, Attending, Operating, and Other Operating).
"RTN","IBCBB12",30,0)
 ;
"RTN","IBCBB12",31,0)
 N OK
"RTN","IBCBB12",32,0)
 S OK=0  ; Initialize OK=0 for FALSE.
"RTN","IBCBB12",33,0)
 Q:'$G(IBIFN) OK  ; Need claim number IEN to continue.
"RTN","IBCBB12",34,0)
 N IBPRVFUN,IBCLPRV,IBLNPRV,PRVFUN
"RTN","IBCBB12",35,0)
 S:'$G(IBFT) IBFT=$$FT^IBCEF(IBIFN)  ; Form Type for claim.
"RTN","IBCBB12",36,0)
 ; JWS;IB*2.0*592 US1108 - Dental form check
"RTN","IBCBB12",37,0)
 I IBFT'=2,IBFT'=3,IBFT'=7 Q OK  ; Must be CMS-1500 (2) or UB-04 (3) or (7) Dental J430D Form Type.
"RTN","IBCBB12",38,0)
 S:IBFT=2 PRVFUN(2)="RENDERING,REFERRING,SUPERVISING"  ; Allowable line provider functions for CMS-1500.
"RTN","IBCBB12",39,0)
 S:IBFT=3 PRVFUN(3)="RENDERING,REFERRING,OPERATING,OTHER OPERATING"  ; Allowable line provider functions for UB-04.
"RTN","IBCBB12",40,0)
 S:IBFT=7 PRVFUN(7)="RENDERING,REFERRING,SUPERVISING,ASSISTANT SURGEON"  ; Allowable line provider functions for Dental form J430D.
"RTN","IBCBB12",41,0)
 ; JWS;IB*2.0*592 US1108 - end
"RTN","IBCBB12",42,0)
 F PRVFUN("CNT")=1:1:$L(PRVFUN(IBFT),",") S IBPRVFUN=$P(PRVFUN(IBFT),",",PRVFUN("CNT")) D
"RTN","IBCBB12",43,0)
 . I IBFT=2,IBPRVFUN="RENDERING",'$$LNPRV2(IBPRVFUN),'$D(^DGCR(399,IBIFN,"PRV","C",IBPRVFUN)) D  Q  ; Edit Check (1).
"RTN","IBCBB12",44,0)
 .. S OK=1  ; OK=1 indicates we have at least one error.
"RTN","IBCBB12",45,0)
 .. S IBER=IBER_"IB333;"
"RTN","IBCBB12",46,0)
 .. Q
"RTN","IBCBB12",47,0)
 . Q:'$$LNPRV2(IBPRVFUN,.IBLNPRV)  ; Quit if not all the procedures have a line level provider of the same provider type.
"RTN","IBCBB12",48,0)
 . Q:'$D(^DGCR(399,IBIFN,"PRV","C",IBPRVFUN))  ; No claim level provider for this provider type.
"RTN","IBCBB12",49,0)
 . ;
"RTN","IBCBB12",50,0)
 . Q:'$$CLPRV2(IBPRVFUN,.IBCLPRV)  ; Must have provider for provider type IBPRVFUN to continue (Edit (2)).
"RTN","IBCBB12",51,0)
 . ;
"RTN","IBCBB12",52,0)
 . S IBCLPRV=0 F  S IBCLPRV=$O(IBCLPRV(IBPRVFUN,IBCLPRV)) Q:'IBCLPRV  D  ; Edit Check (2).
"RTN","IBCBB12",53,0)
 .. Q:$D(IBLNPRV(IBPRVFUN,IBCLPRV))  ; Check against line provider array IBLNPRV.
"RTN","IBCBB12",54,0)
 .. S OK=1
"RTN","IBCBB12",55,0)
 .. S IBER=IBER_$S(IBPRVFUN="ASSISTANT SURGEON":"IB335;",1:"IB334;")
"RTN","IBCBB12",56,0)
 .. Q
"RTN","IBCBB12",57,0)
 . Q
"RTN","IBCBB12",58,0)
 ;
"RTN","IBCBB12",59,0)
 Q OK
"RTN","IBCBB12",60,0)
 ;
"RTN","IBCBB12",61,0)
LNPRV2(IBPRVFUN,IBLNPRV) ; Function - Edit Check (2) for line level provider.
"RTN","IBCBB12",62,0)
 ; See Edit Check (2) at top of routine for details.
"RTN","IBCBB12",63,0)
 ;
"RTN","IBCBB12",64,0)
 ; Input:
"RTN","IBCBB12",65,0)
 ;       IBPRVFUN - Provider Type (FUNCTION). Example: RENDERING.
"RTN","IBCBB12",66,0)
 ;       IBLNPRV(Array) - Passed by reference. Intially undefined.
"RTN","IBCBB12",67,0)
 ;
"RTN","IBCBB12",68,0)
 ; Output:
"RTN","IBCBB12",69,0)
 ;       OK - If Edit Check (2) line level provider condition has
"RTN","IBCBB12",70,0)
 ;            been met, then OK will return '1' for TRUE, ELSE, '0'
"RTN","IBCBB12",71,0)
 ;            for FALSE.
"RTN","IBCBB12",72,0)
 ;            *See Edit Check (2) at top of routine for details.
"RTN","IBCBB12",73,0)
 ;       IBLNPRV(Array) - If Edit Check (2) condition has been met,
"RTN","IBCBB12",74,0)
 ;                        then IBLNPRV will contain the provider type,
"RTN","IBCBB12",75,0)
 ;                        and provider variable pointer as array
"RTN","IBCBB12",76,0)
 ;                        subscripts, and array element is SET to
"RTN","IBCBB12",77,0)
 ;                        NULL. => IBLNPRV(IBPRVFUN,IBLNPROV)="".
"RTN","IBCBB12",78,0)
 ;
"RTN","IBCBB12",79,0)
 N OK,IBPROCP,IBLPIEN,IBLNPROV
"RTN","IBCBB12",80,0)
 S IBPROCP=0 F  S IBPROCP=$O(^DGCR(399,IBIFN,"CP",IBPROCP)) Q:'IBPROCP  D  I $D(OK),'OK Q
"RTN","IBCBB12",81,0)
 . Q:'($D(^DGCR(399,IBIFN,"CP",IBPROCP,0))#10)
"RTN","IBCBB12",82,0)
 . I '$D(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV","C",IBPRVFUN)) S OK=0 Q  ; No line provider function for this procedure.
"RTN","IBCBB12",83,0)
 . S IBLPIEN=$O(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV","C",IBPRVFUN,0))
"RTN","IBCBB12",84,0)
 . I 'IBLPIEN S OK=0 Q  ; No line provider IEN for this line provider function.
"RTN","IBCBB12",85,0)
 . I '($D(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV",IBLPIEN,0))#10) S OK=0 Q  ; No zero node for line level provider.
"RTN","IBCBB12",86,0)
 . S IBLNPROV=$P(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV",IBLPIEN,0),"^",2)
"RTN","IBCBB12",87,0)
 . I 'IBLNPROV S OK=0 Q  ; No line provider for this line provider function.
"RTN","IBCBB12",88,0)
 . S IBLNPRV(IBPRVFUN,IBLNPROV)=""
"RTN","IBCBB12",89,0)
 . Q
"RTN","IBCBB12",90,0)
 ;
"RTN","IBCBB12",91,0)
 Q:$D(OK) OK  ; OK will never equal '1' for TRUE at this point.
"RTN","IBCBB12",92,0)
 I '$D(OK),'$D(IBLNPRV(IBPRVFUN)) S OK=0 Q OK  ; No line provider array for this line provider function.
"RTN","IBCBB12",93,0)
 S OK=1  ; Edit Check (2) line provider condition has been met.
"RTN","IBCBB12",94,0)
 Q OK
"RTN","IBCBB12",95,0)
 ;
"RTN","IBCBB12",96,0)
CLPRV2(IBPRVFUN,IBCLPRV) ; Function - Edit Check (2) for claim level provider.
"RTN","IBCBB12",97,0)
 ; See Edit Check (2) at top of routine for details.
"RTN","IBCBB12",98,0)
 ;
"RTN","IBCBB12",99,0)
 ; Input:
"RTN","IBCBB12",100,0)
 ;       IBPRVFUN - Provider Type (FUNCTION). Example: RENDERING.
"RTN","IBCBB12",101,0)
 ;       IBCLPRV(Array) - Passed by reference. Intially undefined.
"RTN","IBCBB12",102,0)
 ;
"RTN","IBCBB12",103,0)
 ; Output:
"RTN","IBCBB12",104,0)
 ;       OK - If Edit Check (2) claim level provider condition has
"RTN","IBCBB12",105,0)
 ;            been met, then OK will return '1' for TRUE, ELSE, '0'
"RTN","IBCBB12",106,0)
 ;            for FALSE.
"RTN","IBCBB12",107,0)
 ;            *See Edit Check (2) at top of routine for details.
"RTN","IBCBB12",108,0)
 ;       IBCLPRV(Array) - If Edit Check (2) condition has been met,
"RTN","IBCBB12",109,0)
 ;                        then IBCLPRV will contain the provider type,
"RTN","IBCBB12",110,0)
 ;                        and provider variable pointer as array
"RTN","IBCBB12",111,0)
 ;                        subscripts, and array element is SET to
"RTN","IBCBB12",112,0)
 ;                        NULL. => IBCLPRV(IBPRVFUN,IBCLPROV)="".
"RTN","IBCBB12",113,0)
 ;
"RTN","IBCBB12",114,0)
 N IBCLPIEN,IBCLPROV,OK
"RTN","IBCBB12",115,0)
 S OK=0  ; Initialize OK=0 for FALSE.
"RTN","IBCBB12",116,0)
 S IBCLPIEN=0 F  S IBCLPIEN=$O(^DGCR(399,IBIFN,"PRV","C",IBPRVFUN,IBCLPIEN)) Q:'IBCLPIEN  D  Q:OK
"RTN","IBCBB12",117,0)
 . Q:'($D(^DGCR(399,IBIFN,"PRV",IBCLPIEN,0))#10)
"RTN","IBCBB12",118,0)
 . S IBCLPROV=$P(^DGCR(399,IBIFN,"PRV",IBCLPIEN,0),"^",2)
"RTN","IBCBB12",119,0)
 . Q:'IBCLPROV
"RTN","IBCBB12",120,0)
 . S IBCLPRV(IBPRVFUN,IBCLPROV)=""  ; Set array for Edit Check (2) to compare claim level provider with line level provider.
"RTN","IBCBB12",121,0)
 . S OK=1  ; At this point we have our claim level provider of provider type IBPRVFUN. Set OK=1 for TRUE.
"RTN","IBCBB12",122,0)
 . Q
"RTN","IBCBB12",123,0)
 ;
"RTN","IBCBB12",124,0)
 Q:'OK OK
"RTN","IBCBB12",125,0)
 S OK=1
"RTN","IBCBB12",126,0)
 Q OK
"RTN","IBCBB12",127,0)
 ;
"RTN","IBCBB12",128,0)
OPPROVCK(IBIFN) ; DEM;432 - Other Operating Provider edit checks.
"RTN","IBCBB12",129,0)
 ;
"RTN","IBCBB12",130,0)
 ; Input:
"RTN","IBCBB12",131,0)
 ;       IBIFN - Claim number IEN.
"RTN","IBCBB12",132,0)
 ;
"RTN","IBCBB12",133,0)
 ; Output:
"RTN","IBCBB12",134,0)
 ;       OK - '1' Edits
"RTN","IBCBB12",135,0)
 ;            '0' No Edits.
"RTN","IBCBB12",136,0)
 ;       *Note: OK returned if called as function ($$).
"RTN","IBCBB12",137,0)
 ;              Can be called as routine as well.
"RTN","IBCBB12",138,0)
 ;
"RTN","IBCBB12",139,0)
 ; Patch 432 line level Other Operating Provider Edit checks:
"RTN","IBCBB12",140,0)
 ;
"RTN","IBCBB12",141,0)
 ; (1) If claim level Other Operating Provider, then
"RTN","IBCBB12",142,0)
 ;     (1.1) claim must have claim level Operating Provider.
"RTN","IBCBB12",143,0)
 ;           OR
"RTN","IBCBB12",144,0)
 ;     (1.2) every line must have Operating Provider.
"RTN","IBCBB12",145,0)
 ;
"RTN","IBCBB12",146,0)
 ;  If (1) Passes, then do edit check (2) below.
"RTN","IBCBB12",147,0)
 ;
"RTN","IBCBB12",148,0)
 ;  (2) If any claim line has Other Operating Provider, then
"RTN","IBCBB12",149,0)
 ;      (2.1) must have Operating Provider on same claim line,
"RTN","IBCBB12",150,0)
 ;            OR
"RTN","IBCBB12",151,0)
 ;      (2.2) must have claim level Operating Provider.
"RTN","IBCBB12",152,0)
 ;
"RTN","IBCBB12",153,0)
 N OK
"RTN","IBCBB12",154,0)
 S OK=0  ; Initialize OK=0 for FALSE.
"RTN","IBCBB12",155,0)
 Q:'$G(IBIFN) OK  ; Need claim number IEN to continue.
"RTN","IBCBB12",156,0)
 S:'$G(IBFT) IBFT=$$FT^IBCEF(IBIFN)  ; Form Type for claim.
"RTN","IBCBB12",157,0)
 ; JWS;IB*2.0*592 US1108 - Dental form check 
"RTN","IBCBB12",158,0)
 I IBFT'=2,IBFT'=3,IBFT'=7 Q OK  ; Must be CMS-1500 (2) or UB-04 (3) Form Type or (7) Dental J430D
"RTN","IBCBB12",159,0)
 ;
"RTN","IBCBB12",160,0)
 N IBPRVFUN,IBLNFLAG,IBLNPRV,CLOK,LNOK
"RTN","IBCBB12",161,0)
 ;
"RTN","IBCBB12",162,0)
 ; Note: Claim level provider - OTHER and OTHER OPERATING are the same.
"RTN","IBCBB12",163,0)
 ; Check if condition (1) has been met.
"RTN","IBCBB12",164,0)
 F IBPRVFUN="OTHER","OTHER OPERATING" S CLOK=$$CLOPPRV1(IBPRVFUN) Q:CLOK
"RTN","IBCBB12",165,0)
 Q:'CLOK OK  ; No claim level OTHER OPERATING PROVIDER, then QUIT, no further checks.
"RTN","IBCBB12",166,0)
 S OK=0  ; Initialize OK=0 for FALSE. 
"RTN","IBCBB12",167,0)
 ; Condition (1) has been met, check condtion (1.1).
"RTN","IBCBB12",168,0)
 S CLOK=0  ; Initialize CLOK=0 for FALSE.
"RTN","IBCBB12",169,0)
 I $D(^DGCR(399,IBIFN,"PRV","C","OPERATING")) S IBPRVFUN="OPERATING",CLOK=$$CLOPPRV1(IBPRVFUN)  ; Check condition (1.1).
"RTN","IBCBB12",170,0)
 ; If CLOK at this point, then skip condition check (1.2) and continue to condition (2).
"RTN","IBCBB12",171,0)
 S LNOK=0  ; Initialize LNOK=0 for FALSE.
"RTN","IBCBB12",172,0)
 I 'CLOK S IBPRVFUN="OPERATING",LNOK=$$LNOPPRV1(IBPRVFUN) I 'LNOK S OK=1 Q OK  ; Check condition (1.2). If 'LNOK, then we have an error and QUIT.
"RTN","IBCBB12",173,0)
 ; If LNOK, then continue to condition check (2).
"RTN","IBCBB12",174,0)
 S LNOK=0  ; Initialize LNOK=0 for FALSE.
"RTN","IBCBB12",175,0)
 K IBLNPRV  ; KILL IBLNPRV array before call to $$LNOPPRV1(IBPRVFUN,1,.IBLNPRV).
"RTN","IBCBB12",176,0)
 S IBPRVFUN="OTHER OPERATING",LNOK=$$LNOPPRV1(IBPRVFUN,1,.IBLNPRV)  ; Condition check (2) start.
"RTN","IBCBB12",177,0)
 I '$D(IBLNPRV("PRVFUN")) S OK=0 Q OK  ; If no data in IBLNPRV("PRVFUN") array, then skip rest of checks, no error.
"RTN","IBCBB12",178,0)
 ; If data in IBLNPRV("PRVFUN") array, then check condition (2.1).
"RTN","IBCBB12",179,0)
 S IBPRVFUN="OPERATING",LNOK=$$LNOPPRV1(IBPRVFUN,1,.IBLNPRV)  ; Condition check (2.1) start.
"RTN","IBCBB12",180,0)
 S LNOK=0  ; Initialize LNOK=0 for FALSE.
"RTN","IBCBB12",181,0)
 D:$D(IBLNPRV("PRVFUN"))  ; If data in IBLNPRV("PRVFUN") array, then continue condition check (2.1).
"RTN","IBCBB12",182,0)
 . N IBPROCP
"RTN","IBCBB12",183,0)
 . S IBPROCP=0 F  S IBPROCP=$O(IBLNPRV("PROC",IBPROCP)) Q:'IBPROCP  D  Q:'LNOK
"RTN","IBCBB12",184,0)
 . . I $D(IBLNPRV("PROC",IBPROCP,"OTHER OPERATING")),'$D(IBLNPRV("PROC",IBPROCP,"OPERATING")) S LNOK=0 Q
"RTN","IBCBB12",185,0)
 . . S LNOK=1  ; At this point, we have at least one match. If there wasn't a match, then LNOK=0 and we would have QUIT.
"RTN","IBCBB12",186,0)
 . . Q
"RTN","IBCBB12",187,0)
 . Q
"RTN","IBCBB12",188,0)
 I LNOK S OK=0 Q OK  ; Conditions (2) and (2.1) are met (no error). SET OK=0 and QUIT.
"RTN","IBCBB12",189,0)
 ; If 'LNOK, then continue to condition check (2.2).
"RTN","IBCBB12",190,0)
 S CLOK=0  ; Initialize CLOK=0 for FALSE.
"RTN","IBCBB12",191,0)
 S IBPRVFUN="OPERATING",CLOK=$$CLOPPRV1(IBPRVFUN)  ; Condition check (2.2).
"RTN","IBCBB12",192,0)
 I CLOK S OK=0 Q OK  ; Conditions (2) and (2.2) are met (no error). SET OK=0 and QUIT.
"RTN","IBCBB12",193,0)
 ; At this point, we have an error. SET OK=1, and QUIT.
"RTN","IBCBB12",194,0)
 S OK=1
"RTN","IBCBB12",195,0)
 Q OK
"RTN","IBCBB12",196,0)
 ;
"RTN","IBCBB12",197,0)
CLOPPRV1(IBPRVFUN) ; Claim level provider/provider function check.
"RTN","IBCBB12",198,0)
 ;
"RTN","IBCBB12",199,0)
 ; Check if there is a claim level provider with provider function IBPRVFUN.
"RTN","IBCBB12",200,0)
 ;
"RTN","IBCBB12",201,0)
 ; Input:
"RTN","IBCBB12",202,0)
 ;       IBPRVFUN - PROVIDER FUNCTION.
"RTN","IBCBB12",203,0)
 ;
"RTN","IBCBB12",204,0)
 ; Output:
"RTN","IBCBB12",205,0)
 ;       OK - '1' Claim level provider exist for provider function IBPRVFUN.
"RTN","IBCBB12",206,0)
 ;            '0' No Claim level provider exist for provider function IBPRVFUN.
"RTN","IBCBB12",207,0)
 ;
"RTN","IBCBB12",208,0)
 N OK,IBCLPIEN,IBCLPROV
"RTN","IBCBB12",209,0)
 S OK=0  ; Initialize OK=0 for FALSE.
"RTN","IBCBB12",210,0)
 ;
"RTN","IBCBB12",211,0)
 I $D(^DGCR(399,IBIFN,"PRV","C",IBPRVFUN)) D
"RTN","IBCBB12",212,0)
 . S IBCLPIEN=0 F  S IBCLPIEN=$O(^DGCR(399,IBIFN,"PRV","C",IBPRVFUN,IBCLPIEN)) Q:'IBCLPIEN  D  Q:OK
"RTN","IBCBB12",213,0)
 . . Q:'($D(^DGCR(399,IBIFN,"PRV",IBCLPIEN,0))#10)
"RTN","IBCBB12",214,0)
 . . S IBCLPROV=$P(^DGCR(399,IBIFN,"PRV",IBCLPIEN,0),U,2)
"RTN","IBCBB12",215,0)
 . . Q:'IBCLPROV
"RTN","IBCBB12",216,0)
 . . S OK=1  ; At this point we have claim level provider with provider function IBPRVFUN and can QUIT function/subroutine.
"RTN","IBCBB12",217,0)
 . . Q
"RTN","IBCBB12",218,0)
 . Q
"RTN","IBCBB12",219,0)
 ;
"RTN","IBCBB12",220,0)
 Q OK
"RTN","IBCBB12",221,0)
 ;
"RTN","IBCBB12",222,0)
LNOPPRV1(IBPRVFUN,IBLNFLAG,IBLNPRV,IBPROCHK) ; Check every claim line for provider function IBPRVFUN.
"RTN","IBCBB12",223,0)
 ;
"RTN","IBCBB12",224,0)
 ;
"RTN","IBCBB12",225,0)
 ; Input:
"RTN","IBCBB12",226,0)
 ;       IBPRVFUN - PROVIDER FUNCTION.
"RTN","IBCBB12",227,0)
 ;       IBLNFLAG(Optional) = 1 or 0. 1 indicates return IBLNPRV array passed by reference, otherwise '0' for NO.
"RTN","IBCBB12",228,0)
 ;       IBLNPRV(Optional) - Array passed by reference => IF SET OK=1, then
"RTN","IBCBB12",229,0)
 ;                           I $G(IBLNFLAG) S IBLNPRV("PROC",IBPROCP,IBPRVFUN)="",IBLNPRV("PRVFUN",IBPRVFUN,IBPROCP)=""
"RTN","IBCBB12",230,0)
 ;       IBPROCHK - Condition on PROCEDURE (ICD, CPT, or HCFA procedure codes).
"RTN","IBCBB12",231,0)
 ;
"RTN","IBCBB12",232,0)
 ; Output:
"RTN","IBCBB12",233,0)
 ;       OK - '1' Every line level provider exist for provider function IBPRVFUN.
"RTN","IBCBB12",234,0)
 ;            '0' Not every line level provider exist for provider function IBPRVFUN.
"RTN","IBCBB12",235,0)
 ;
"RTN","IBCBB12",236,0)
 N OK
"RTN","IBCBB12",237,0)
 S OK=0  ; Initialize OK=0 for FALSE.
"RTN","IBCBB12",238,0)
 ;
"RTN","IBCBB12",239,0)
 N IBLPIEN,IBLNPROV,IBPROCP
"RTN","IBCBB12",240,0)
 S IBPROCP=0 F  S IBPROCP=$O(^DGCR(399,IBIFN,"CP",IBPROCP)) Q:'IBPROCP  D  Q:($D(^DGCR(399,IBIFN,"CP",IBPROCP,0))#10)&('OK)
"RTN","IBCBB12",241,0)
 . Q:'($D(^DGCR(399,IBIFN,"CP",IBPROCP,0))#10)  ; No procedure '0' node.
"RTN","IBCBB12",242,0)
 . I $G(IBPROCHK)'="" Q:$P(^DGCR(399,IBIFN,"CP",IBPROCP,0),U,1)'[IBPROCHK
"RTN","IBCBB12",243,0)
 . I '$D(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV","C",IBPRVFUN)) S OK=0 Q  ; No line provider function IBPRVFUN for this procedure.
"RTN","IBCBB12",244,0)
 . S IBLPIEN=$O(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV","C",IBPRVFUN,0))
"RTN","IBCBB12",245,0)
 . I 'IBLPIEN S OK=0 Q  ; No line provider IEN for this line provider function.
"RTN","IBCBB12",246,0)
 . I '($D(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV",IBLPIEN,0))#10) S OK=0 Q  ; No '0' node for line level provider.
"RTN","IBCBB12",247,0)
 . S IBLNPROV=$P(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV",IBLPIEN,0),U,2)
"RTN","IBCBB12",248,0)
 . I 'IBLNPROV S OK=0 Q  ; No line provider for this line provider function.
"RTN","IBCBB12",249,0)
 . ; At this point we have line level provider of type IBPRVFUN.
"RTN","IBCBB12",250,0)
 . ; S OK=1 for this claim line. OK can be changed back to '0', for FALSE, if claim line fails condition.
"RTN","IBCBB12",251,0)
 . ; We would not get to this point if any line level provider with provider function IBPRVFUN didn't exist.
"RTN","IBCBB12",252,0)
 . S OK=1
"RTN","IBCBB12",253,0)
 . I $G(IBLNFLAG) S IBLNPRV("PROC",IBPROCP,IBPRVFUN)="",IBLNPRV("PRVFUN",IBPRVFUN,IBPROCP)=""
"RTN","IBCBB12",254,0)
 . Q
"RTN","IBCBB12",255,0)
 ;
"RTN","IBCBB12",256,0)
 Q OK
"RTN","IBCBB12",257,0)
 ;
"RTN","IBCBB12",258,0)
UBPRVCK(IBIFN) ; DEM;432 - Check if claim requires operating provider.
"RTN","IBCBB12",259,0)
 ;
"RTN","IBCBB12",260,0)
 ; Description: This function checks if claim requires an operating provider.
"RTN","IBCBB12",261,0)
 ;
"RTN","IBCBB12",262,0)
 ;              Checks:
"RTN","IBCBB12",263,0)
 ;
"RTN","IBCBB12",264,0)
 ;              (1) If claim has a claim level operating provider,
"RTN","IBCBB12",265,0)
 ;                  then no further checks (OK=1=TRUE).
"RTN","IBCBB12",266,0)
 ;              (2) If claim doesn't have a claim level operating provider,
"RTN","IBCBB12",267,0)
 ;                  then check:
"RTN","IBCBB12",268,0)
 ;                  (2.1) Is this a UB-04 claim? NO = QUIT (OK=1), YES = Continue to next check.
"RTN","IBCBB12",269,0)
 ;                  (2.2) Check every claim line that includes HCPCS procs - operating provider.
"RTN","IBCBB12",270,0)
 ;                        If every claim line that includes HCPCS procs has an operating provider,
"RTN","IBCBB12",271,0)
 ;                        then we are OK and QUIT (OK=1).
"RTN","IBCBB12",272,0)
 ;                        If any claim line that includes HCPCS procs doesn't have an operating
"RTN","IBCBB12",273,0)
 ;                        provider, then we have an ERROR (OK=0). 
"RTN","IBCBB12",274,0)
 ;
"RTN","IBCBB12",275,0)
 ; Input:
"RTN","IBCBB12",276,0)
 ;       IBIFN = Claim number IEN.
"RTN","IBCBB12",277,0)
 ;
"RTN","IBCBB12",278,0)
 ; Output:
"RTN","IBCBB12",279,0)
 ;        OK = 0 = claim doesn't have an operating provider
"RTN","IBCBB12",280,0)
 ;                 when operating provider or rendering provider required.
"RTN","IBCBB12",281,0)
 ;        OK = 1 = claim has an operating provider, or,
"RTN","IBCBB12",282,0)
 ;                 claim doesn't require operating provider.
"RTN","IBCBB12",283,0)
 ;
"RTN","IBCBB12",284,0)
 N OK
"RTN","IBCBB12",285,0)
 ; If claim doesn't have any procedure codes, then no checks required.
"RTN","IBCBB12",286,0)
 I '$O(^DGCR(399,IBIFN,"CP",0)) S OK=1 Q OK
"RTN","IBCBB12",287,0)
 ;
"RTN","IBCBB12",288,0)
 S OK=$$CLOPPRV1("OPERATING")  ; Do we have a claim level OPERATING PROVIDER (OK=1=TRUE)?
"RTN","IBCBB12",289,0)
 Q:OK OK  ; QUIT, we have a claim level OPERATING PROVIDER (OK=1=TRUE).
"RTN","IBCBB12",290,0)
 ;
"RTN","IBCBB12",291,0)
 N IBFT
"RTN","IBCBB12",292,0)
 S IBFT=($$FT^IBCEF(IBIFN)=3)  ; UB-04 claim (1 = TRUE, 0 = FALSE)?
"RTN","IBCBB12",293,0)
 S OK=1  ; Initialize OK=1.
"RTN","IBCBB12",294,0)
 Q:'IBFT OK  ; QUIT OK=1, not a UB-04 claim.
"RTN","IBCBB12",295,0)
 ;
"RTN","IBCBB12",296,0)
 ; Claim level check did not pass, check claim lines.
"RTN","IBCBB12",297,0)
 ; No claim level OPERATING PROVIDER, so check every PROCEDURE for OPERATING PROVIDER.
"RTN","IBCBB12",298,0)
 S OK=$$UBPRVCK1("") ; Does every procedure have an OPERATING PROVIDER(1=TRUE,0=FALSE)?
"RTN","IBCBB12",299,0)
 ;
"RTN","IBCBB12",300,0)
 Q OK
"RTN","IBCBB12",301,0)
 ;
"RTN","IBCBB12",302,0)
UBPRVCK1(IBPROCHK,IBONE) ; DEM;432 - Continuation of UBPRVCK function.
"RTN","IBCBB12",303,0)
 ;
"RTN","IBCBB12",304,0)
 ; Input:
"RTN","IBCBB12",305,0)
 ;       IBPROCHK(Optional) - Optional condition on PROCEDURE CODE (ICD, CPT, or HCFA procedure codes).
"RTN","IBCBB12",306,0)
 ;       IBONE(Optional) - Quit if at least one line has an OPERATING
"RTN","IBCBB12",307,0)
 ;
"RTN","IBCBB12",308,0)
 ; Output:
"RTN","IBCBB12",309,0)
 ;       OK - '1' Every procedure code that contains IBPROCHK (optional check) has an OPERATING PROVIDER.
"RTN","IBCBB12",310,0)
 ;            or if IBONE, then at least one procedure code that contains IBPROCHK (optional check) has an OPERATING PROVIDER.
"RTN","IBCBB12",311,0)
 ;            '0' Not every procedure code that contains IBPROCHK (optional check) has an OPERATING PROVIDER.
"RTN","IBCBB12",312,0)
 ;            or if IBONE, then NO procedure codes that contain IBPROCHK (optional check) has an OPERATING PROVIDER.
"RTN","IBCBB12",313,0)
 ;
"RTN","IBCBB12",314,0)
 N OK
"RTN","IBCBB12",315,0)
 S OK=0  ; Initialize OK=0 for FALSE.
"RTN","IBCBB12",316,0)
 ;
"RTN","IBCBB12",317,0)
 N IBLPIEN,IBLNPROV,IBPROCP
"RTN","IBCBB12",318,0)
 S IBPROCP=0 F  S IBPROCP=$O(^DGCR(399,IBIFN,"CP",IBPROCP)) Q:'IBPROCP  D  Q:($D(^DGCR(399,IBIFN,"CP",IBPROCP,0))#10)&('OK)&('$G(IBONE))  I $G(IBONE),$G(OK) Q
"RTN","IBCBB12",319,0)
 . Q:'($D(^DGCR(399,IBIFN,"CP",IBPROCP,0))#10)  ; No procedure '0' node.
"RTN","IBCBB12",320,0)
 . I $G(IBPROCHK)'="" Q:$P(^DGCR(399,IBIFN,"CP",IBPROCP,0),U,1)'[IBPROCHK
"RTN","IBCBB12",321,0)
 . I '$D(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV","C","OPERATING")) S OK=0 Q  ; No line OPERATING PROVIDER for this procedure.
"RTN","IBCBB12",322,0)
 . S IBLPIEN=$O(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV","C","OPERATING",0))
"RTN","IBCBB12",323,0)
 . I 'IBLPIEN S OK=0 Q  ; No line provider IEN for this line provider function.
"RTN","IBCBB12",324,0)
 . I '($D(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV",IBLPIEN,0))#10) S OK=0 Q  ; No '0' node for line level provider.
"RTN","IBCBB12",325,0)
 . S IBLNPROV=$P(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV",IBLPIEN,0),U,2)
"RTN","IBCBB12",326,0)
 . I 'IBLNPROV S OK=0 Q  ; No line provider for this line provider function.
"RTN","IBCBB12",327,0)
 . ; At this point we have line level provider of type OPERATING.
"RTN","IBCBB12",328,0)
 . ; S OK=1 for this claim line. OK can be changed back to '0', for FALSE, if claim line fails condition.
"RTN","IBCBB12",329,0)
 . ; We would not get to this point if any line level provider with provider function OPERATING didn't exist.
"RTN","IBCBB12",330,0)
 . S OK=1
"RTN","IBCBB12",331,0)
 . Q
"RTN","IBCBB12",332,0)
 ;
"RTN","IBCBB14")
0^136^B4923293^B5240660
"RTN","IBCBB14",1,0)
IBCBB14 ;ALB/WCJ - CONTINUATION OF EDIT CHECK ROUTINE FOR EPHARM ;15 Mar 2018  9:50 PM
"RTN","IBCBB14",2,0)
 ;;2.0;INTEGRATED BILLING;**591,592**;21-MAR-94;Build 58
"RTN","IBCBB14",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCBB14",4,0)
 ;
"RTN","IBCBB14",5,0)
 Q
"RTN","IBCBB14",6,0)
VALNDC(IBIFN,IBDFN) ; IB*2*363 - validate NDC# between PRESCRIPTION file (#52)
"RTN","IBCBB14",7,0)
 ; and IB BILL/CLAIMS PRESCRIPTION REFILL file (#362.4)
"RTN","IBCBB14",8,0)
 ; input - IBIFN = internal entry number of the billing record in the BILL/CLAIMS file (#399)
"RTN","IBCBB14",9,0)
 ;         IBDFN = internal entry number of patient record in the PATIENT file (#2)
"RTN","IBCBB14",10,0)
 N IBX,IBRXCOL
"RTN","IBCBB14",11,0)
 ; call program that determines if NDC differences exist
"RTN","IBCBB14",12,0)
 D VALNDC^IBEFUNC3(IBIFN,IBDFN,.IBRXCOL)
"RTN","IBCBB14",13,0)
 Q:'$D(IBRXCOL)
"RTN","IBCBB14",14,0)
 ; at least one RX on the IB record has an NDC discrepancy 
"RTN","IBCBB14",15,0)
 S IBX=0 F  S IBX=$O(IBRXCOL(IBX)) Q:'IBX  D WARN^IBCBB11("NDC# on Bill does not equal the NDC# on Rx "_IBRXCOL(IBX))
"RTN","IBCBB14",16,0)
 Q
"RTN","IBCBB14",17,0)
 ;
"RTN","IBCBB14",18,0)
RXNPI(IBIFN) ; check for multiple pharmacy npi's on the same bill
"RTN","IBCBB14",19,0)
 N IBORG,IBRXNPI,IBX,IBY
"RTN","IBCBB14",20,0)
 S IBORG=$$RXSITE^IBCEF73A(IBIFN,.IBORG)
"RTN","IBCBB14",21,0)
 S IBX=0 F  S IBX=$O(IBORG(IBX)) Q:'IBX  S IBY=0 F  S IBY=$O(IBORG(IBX,IBY)) Q:'IBY  S IBRXNPI(+IBORG(IBX,IBY))=""
"RTN","IBCBB14",22,0)
 S (IBX,IBY)=0 F  S IBX=$O(IBRXNPI(IBX)) Q:'IBX  S IBY=IBY+1
"RTN","IBCBB14",23,0)
 I IBY>1 D WARN^IBCBB11("Bill has prescriptions resulting from "_IBY_" different NPI locations")
"RTN","IBCBB14",24,0)
 Q
"RTN","IBCBB14",25,0)
 ;
"RTN","IBCBB14",26,0)
ROICHK(IBIFN,IBDFN,IBINS) ; IB*2.0*384 - check prescriptions that contain the
"RTN","IBCBB14",27,0)
 ; SENSITIVE DIAGNOSIS DRUG field #87 in the DRUG File #50 set to 1 against
"RTN","IBCBB14",28,0)
 ; the Claims Tracking ROI file (#356.25) to see if an ROI is on file
"RTN","IBCBB14",29,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB14",30,0)
 ;         IBDFN = IEN of the patient
"RTN","IBCBB14",31,0)
 ;         IBINS = IEN of the payer insurance company (#36)
"RTN","IBCBB14",32,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB14",33,0)
 ;          1 = a prescription is sensitive and there is no ROI on file
"RTN","IBCBB14",34,0)
 ;
"RTN","IBCBB14",35,0)
 N IBX,IBY0,IBRXIEN,IBDT,IBDRUG,ROIQ
"RTN","IBCBB14",36,0)
 S ROIQ=0
"RTN","IBCBB14",37,0)
 S IBX=0 F  S IBX=$O(^IBA(362.4,"C",IBIFN,IBX)) Q:'IBX  D
"RTN","IBCBB14",38,0)
 .S IBY0=^IBA(362.4,IBX,0),IBRXIEN=$P(IBY0,U,5) I 'IBRXIEN Q
"RTN","IBCBB14",39,0)
 .S IBDT=$P(IBY0,U,3),IBDRUG=$P(IBY0,U,4)
"RTN","IBCBB14",40,0)
 .D ZERO^IBRXUTL(IBDRUG)
"RTN","IBCBB14",41,0)
 .I $$SENS^IBNCPDR(IBDRUG) D  ; Sensitive Diagnosis Drug - check for ROI
"RTN","IBCBB14",42,0)
 .. I $$ROI^IBNCPDR4(IBDFN,IBDRUG,IBINS,IBDT) Q  ;ROI is on file
"RTN","IBCBB14",43,0)
 .. D WARN^IBCBB11("ROI not on file for prescription "_$$RXAPI1^IBNCPUT1(IBRXIEN,.01,"E"))
"RTN","IBCBB14",44,0)
 .. S ROIQ=1
"RTN","IBCBB14",45,0)
ROICHKQ ;
"RTN","IBCBB14",46,0)
 K ^TMP($J,"IBDRUG")
"RTN","IBCBB14",47,0)
 Q ROIQ
"RTN","IBCBB14",48,0)
 ;
"RTN","IBCBB3")
0^98^B41940639^B41965627
"RTN","IBCBB3",1,0)
IBCBB3 ;ALB/TMP - CONTINUATION OF EDIT CHECKS ROUTINE (MEDICARE) ;06/23/98
"RTN","IBCBB3",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,155,349,371,377,432,592**;21-MAR-94;Build 58
"RTN","IBCBB3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCBB3",4,0)
 ;
"RTN","IBCBB3",5,0)
EDITMRA(IBQUIT,IBER,IBIFN,IBFT) ;
"RTN","IBCBB3",6,0)
 ; Requires execution of GVAR^IBCBB, IBIFN defined
"RTN","IBCBB3",7,0)
 ; File IB ERROR (350.8) contains error codes/text
"RTN","IBCBB3",8,0)
 ;
"RTN","IBCBB3",9,0)
 N IBMRATYP,Z,IBZP,IBZP1,IBOK
"RTN","IBCBB3",10,0)
 S IBQUIT=0 ;Flag to say we have too many errors - quit edits
"RTN","IBCBB3",11,0)
 ;
"RTN","IBCBB3",12,0)
 S IBMRATYP=$$MRATYPE^IBEFUNC(IBIFN,"C")
"RTN","IBCBB3",13,0)
 ;
"RTN","IBCBB3",14,0)
 I IBFT=3 D
"RTN","IBCBB3",15,0)
 . D PARTA
"RTN","IBCBB3",16,0)
 I IBFT=2 D PARTB^IBCBB9
"RTN","IBCBB3",17,0)
 ;
"RTN","IBCBB3",18,0)
 K IBXDATA D F^IBCEF("N-ADMITTING DIAGNOSIS",,,IBIFN)
"RTN","IBCBB3",19,0)
 ; Req. for UB-04 type of bills 11x!18x
"RTN","IBCBB3",20,0)
 I $G(IBXDATA)="",IBFT=3 D  Q:IBQUIT
"RTN","IBCBB3",21,0)
 . N Z
"RTN","IBCBB3",22,0)
 . I "^11^18^"[(U_IBTOB12_U) S IBQUIT=$$IBER(.IBER,231) Q
"RTN","IBCBB3",23,0)
 . I $$INPAT^IBCEF(IBIFN,1) S Z="Admitting Diagnosis may be required by payer, please verify" D WARN^IBCBB11(Z)
"RTN","IBCBB3",24,0)
 ;
"RTN","IBCBB3",25,0)
 D GETPRV^IBCEU(IBIFN,"2,3,4",.Z)
"RTN","IBCBB3",26,0)
 S IBOK=1,Z=0,IBZP=U F  S Z=$O(Z(Z)) Q:'Z  S:$S($P($G(Z(Z,1)),U,3)["VA(200":1,1:0) IBZP=IBZP_+$P(Z(Z,1),U,3)_U
"RTN","IBCBB3",27,0)
 D ALLPROC^IBCVA1(IBIFN,.IBZP1)
"RTN","IBCBB3",28,0)
 ;patch 432, enh5:  The IB system shall no longer provide users with a warning message when authorizing a claim when line level and claim level providers are not the same.
"RTN","IBCBB3",29,0)
 ;S Z=0 F  S Z=$O(IBZP1(Z)) Q:'Z  I $P(IBZP1(Z),U,18),IBZP'[(U_$P(IBZP1(Z),U,18)_U) S IBOK=0 Q
"RTN","IBCBB3",30,0)
 ;I 'IBOK D WARN^IBCBB11("At least one provider on a procedure does not match your "_$S(IBFT=2:"render",1:"attend")_"ing or operating provider")
"RTN","IBCBB3",31,0)
 ; JWS;IB*2.0*592 US1108 - Dental form check 
"RTN","IBCBB3",32,0)
 I IBFT=2!(IBFT=7) D EN^IBCBB2
"RTN","IBCBB3",33,0)
 ; edit checks for UB-04 (institutional) forms
"RTN","IBCBB3",34,0)
 I IBFT=3 D EN^IBCBB21(.IBZPRC92)
"RTN","IBCBB3",35,0)
 ;
"RTN","IBCBB3",36,0)
 Q
"RTN","IBCBB3",37,0)
 ;
"RTN","IBCBB3",38,0)
PARTA ; MEDICARE specific edit checks for PART A claims (UB-04 formats)
"RTN","IBCBB3",39,0)
 ;
"RTN","IBCBB3",40,0)
 N IBI,IBJ,IBX,IBCTYP,VADM,VAPA,IBSTOP,IBDXC,IBDXARY,IBPR,IBLABS,REQMRA
"RTN","IBCBB3",41,0)
 N IBS,IBTUNIT,IBCAGE,IBREV1,IBOCCS,IBOCSDT,IBVALCD,IBOCCD,IBNOPR
"RTN","IBCBB3",42,0)
 N IBCCARY1,IBPATST,IBZADMIT,IBZDISCH,IBXIEN,IBXERR,IBXDATA,IBOCSP
"RTN","IBCBB3",43,0)
 N IBCOV,IBNCOV,IBREVC,IBREVDUP,IBBCPT,IBREVC12,IBREVTOT,IBECAT,IBINC
"RTN","IBCBB3",44,0)
 ;
"RTN","IBCBB3",45,0)
 ; Medicare is the current payer, but no diagnosis codes
"RTN","IBCBB3",46,0)
 I $$WNRBILL^IBEFUNC(IBIFN) D SET^IBCSC4D(IBIFN,.IBDX,.IBDXO) I '$P(IBDX,U,2) S IBQUIT=$$IBER(.IBER,120) Q:IBQUIT
"RTN","IBCBB3",47,0)
 ;
"RTN","IBCBB3",48,0)
 ; Type of Bill must be three digits
"RTN","IBCBB3",49,0)
 I IBTOB'?3N S X=$$IBER(.IBER,103) Q
"RTN","IBCBB3",50,0)
 ;
"RTN","IBCBB3",51,0)
 ; Covered Days
"RTN","IBCBB3",52,0)
 S IBCTYP=0
"RTN","IBCBB3",53,0)
 S IBCOV=$P(IBNDU2,U,2),IBNCOV=$P(IBNDU2,U,3)
"RTN","IBCBB3",54,0)
 ;
"RTN","IBCBB3",55,0)
 ; If interim bill, covered days must not be greater than 60
"RTN","IBCBB3",56,0)
 ; remove for IB*2.0*432
"RTN","IBCBB3",57,0)
 ; I "23"[$E(IBTOB,3),IBCOV>60 S IBQUIT=$$IBER(.IBER,"096") Q:IBQUIT
"RTN","IBCBB3",58,0)
 ;
"RTN","IBCBB3",59,0)
 ; I bill type is 11x or 18x or 21x then we need covered days
"RTN","IBCBB3",60,0)
 ; remove for IB*2.0*432
"RTN","IBCBB3",61,0)
 ; I "^11^18^21^"[(U_IBTOB12_U) S IBCTYP=1 I IBCOV="" S IBQUIT=$$IBER(.IBER,106) Q:IBQUIT
"RTN","IBCBB3",62,0)
 ;
"RTN","IBCBB3",63,0)
 S (IBI,IBJ)=0
"RTN","IBCBB3",64,0)
 K IBXDATA D F^IBCEF("N-CONDITION CODES",,,IBIFN)
"RTN","IBCBB3",65,0)
 ; Re-sort the condition codes by code
"RTN","IBCBB3",66,0)
 S IBI=0 F  S IBI=$O(IBXDATA(IBI)) Q:'IBI  S IBCCARY1($P(IBXDATA(IBI),U))=""
"RTN","IBCBB3",67,0)
 ;
"RTN","IBCBB3",68,0)
 ; for condition code 40, covered days must be 0
"RTN","IBCBB3",69,0)
 ; remove for IB*2.0*432
"RTN","IBCBB3",70,0)
 ; I $D(IBCCARY1(40)),IBCOV'=0 S IBQUIT=$$IBER(.IBER,107) Q:IBQUIT
"RTN","IBCBB3",71,0)
 ;
"RTN","IBCBB3",72,0)
 ; cov days+non=to date -from date unless the patient status = 30 (still
"RTN","IBCBB3",73,0)
 ;  pt) or outpatient or if the to date and from date are same then add 1
"RTN","IBCBB3",74,0)
 S IBPATST="",IBX=$P(IBNDU,U,12),IBPATST=$P($G(^DGCR(399.1,+IBX,0)),U,2)
"RTN","IBCBB3",75,0)
 S IBINC=$S(IBPATST=30!(IBFDT=IBTDT):1,1:0)
"RTN","IBCBB3",76,0)
 ; remove for IB*2.0*432
"RTN","IBCBB3",77,0)
 ;I $$INPAT^IBCEF(IBIFN,1),(IBCOV+IBNCOV)'=($$FMDIFF^XLFDT(IBTDT,IBFDT)+IBINC) S IBQUIT=$$IBER(.IBER,108) Q:IBQUIT
"RTN","IBCBB3",78,0)
 ;
"RTN","IBCBB3",79,0)
 ; if covered days >100 and type of bill is 21x or 18x error
"RTN","IBCBB3",80,0)
 ; remove for IB*2.0*432
"RTN","IBCBB3",81,0)
 ; I IBCOV>100,(IBTOB12=18!(IBTOB12=21)) S IBQUIT=$$IBER(.IBER,109) Q:IBQUIT
"RTN","IBCBB3",82,0)
 ;
"RTN","IBCBB3",83,0)
 S (IBJ,IBTUNIT,IBS,IBREVTOT("AC"),IBREVTOT("AI"),IBREVTOT("AO"),IBREVTOT)=0
"RTN","IBCBB3",84,0)
 ;
"RTN","IBCBB3",85,0)
 K IBXDATA D F^IBCEF("N-UB-04 SERVICE LINE (EDI)",,,IBIFN) ;Get rev codes
"RTN","IBCBB3",86,0)
 ;
"RTN","IBCBB3",87,0)
 ; Re-sort the revenue codes by code
"RTN","IBCBB3",88,0)
 ;>> IBREV1(rev code,x)=Rev code^ptr cpt^unit chg^units^total^tot unc
"RTN","IBCBB3",89,0)
 ;   IBREV1(rev code) = revenue code edit category
"RTN","IBCBB3",90,0)
 ;
"RTN","IBCBB3",91,0)
 ; IBNOPR = flag that determines if there are revenue codes with
"RTN","IBCBB3",92,0)
 ;          charges that do not have a procedure - no need to check
"RTN","IBCBB3",93,0)
 ;          for billable MCR procedures if at least one RC is billable
"RTN","IBCBB3",94,0)
 ;          1 = there is at least one billable revenue code without a
"RTN","IBCBB3",95,0)
 ;              procedure
"RTN","IBCBB3",96,0)
 ;
"RTN","IBCBB3",97,0)
 S REQMRA=$$REQMRA^IBEFUNC(IBIFN)
"RTN","IBCBB3",98,0)
 S (IBNOPR,IBI)=0
"RTN","IBCBB3",99,0)
 F  S IBI=$O(IBXDATA(IBI)) Q:'IBI  D
"RTN","IBCBB3",100,0)
 . I REQMRA D GYMODCHK(IBXDATA(IBI))      ; IB*2*377 GY modifier check
"RTN","IBCBB3",101,0)
 . S IBJ=$P(IBXDATA(IBI),U),IBECAT=""
"RTN","IBCBB3",102,0)
 . I 'IBNOPR D
"RTN","IBCBB3",103,0)
 .. I $P(IBXDATA(IBI),U,2)'="" S IBPR($P(IBXDATA(IBI),U,2))=IBI Q
"RTN","IBCBB3",104,0)
 .. S IBNOPR=1 K IBPR
"RTN","IBCBB3",105,0)
 . S:$D(IBREV1(IBJ)) IBECAT=$G(IBREV1(IBJ))
"RTN","IBCBB3",106,0)
 . I '$D(IBREV1(IBJ))!(IBECAT="") D  S IBREV1(IBJ)=IBECAT
"RTN","IBCBB3",107,0)
 . . ;
"RTN","IBCBB3",108,0)
 . . ; Accomodations (AC)
"RTN","IBCBB3",109,0)
 . . I (IBJ'<100&(IBJ'>219))!(IBJ=224) S IBECAT="AC" Q
"RTN","IBCBB3",110,0)
 . . ;
"RTN","IBCBB3",111,0)
 . . ; Ancillary Outpatient (AO)
"RTN","IBCBB3",112,0)
 . . I '$$INPAT^IBCEF(IBIFN,1) S IBECAT="AO" Q
"RTN","IBCBB3",113,0)
 . . ;
"RTN","IBCBB3",114,0)
 . . ; Ancillary Inpatient (AI)
"RTN","IBCBB3",115,0)
 . . S IBECAT="AI"
"RTN","IBCBB3",116,0)
 . ;
"RTN","IBCBB3",117,0)
 . S IBREV1(IBJ,+$O(IBREV1(IBJ,""),-1)+1)=IBXDATA(IBI)
"RTN","IBCBB3",118,0)
 . S IBREVTOT(IBECAT)=IBREVTOT(IBECAT)+$P(IBXDATA(IBI),U,6)
"RTN","IBCBB3",119,0)
 . I IBECAT="AC" S IBTUNIT=IBTUNIT+$P(IBXDATA(IBI),U,4)
"RTN","IBCBB3",120,0)
 ;
"RTN","IBCBB3",121,0)
 I $$NEEDMRA^IBEFUNC(IBIFN),$O(IBPR(""))'="" D  Q:IBQUIT
"RTN","IBCBB3",122,0)
 . ; Don't allow a bill containing only billable procedures for:
"RTN","IBCBB3",123,0)
 . ;    Oxygen, labs, or influenza shots
"RTN","IBCBB3",124,0)
 . ;  OR a bill with prosthetics on it
"RTN","IBCBB3",125,0)
 . ;    to be sent to MEDICARE for an MRA
"RTN","IBCBB3",126,0)
 . D NONMCR(.IBPR,.IBLABS) ; Remove Oxygen, labs, influenza shots
"RTN","IBCBB3",127,0)
 . I $G(IBLABS) D WARN^IBCBB11("There are Lab procedures on this claim."),WARN^IBCBB11("Please verify that MEDICARE does not reimburse these labs at 100%") Q
"RTN","IBCBB3",128,0)
 . I $O(IBPR(""))="" D
"RTN","IBCBB3",129,0)
 .. S IBQUIT=$$IBER(.IBER,"098")
"RTN","IBCBB3",130,0)
 ;
"RTN","IBCBB3",131,0)
 ; covered days+non covered = units of accom rev codes
"RTN","IBCBB3",132,0)
 ; Check room and board
"RTN","IBCBB3",133,0)
 ; remove for IB*2.0*432
"RTN","IBCBB3",134,0)
 ;I IBTUNIT,IBTUNIT'=(IBCOV+IBNCOV) S IBQUIT=$$IBER(.IBER,114) Q:IBQUIT
"RTN","IBCBB3",135,0)
 ;
"RTN","IBCBB3",136,0)
 ; Non Covered Days
"RTN","IBCBB3",137,0)
 ;   required when the type of bill is 11x,18x,21x or covered days=0
"RTN","IBCBB3",138,0)
 ; remove for IB*2.0*432
"RTN","IBCBB3",139,0)
 ; I IBNCOV="",(IBCTYP!(IBCOV=0)) S IBQUIT=$$IBER(.IBER,115) Q:IBQUIT
"RTN","IBCBB3",140,0)
 ;
"RTN","IBCBB3",141,0)
 ; if cc code=40 then non-covered days must be 1
"RTN","IBCBB3",142,0)
 ; remove for IB*2.0*432
"RTN","IBCBB3",143,0)
 ; I $D(IBCCARY1(40)),IBNCOV'=1 S IBQUIT=$$IBER(.IBER,116) Q:IBQUIT
"RTN","IBCBB3",144,0)
 ;
"RTN","IBCBB3",145,0)
 ; Patient Sex
"RTN","IBCBB3",146,0)
 ; must be "M" or "F"
"RTN","IBCBB3",147,0)
 D DEM^VADPT
"RTN","IBCBB3",148,0)
 I $P(VADM(5),U)'="M",$P(VADM(5),U)'="F" S IBQUIT=$$IBER(.IBER,124) Q:IBQUIT
"RTN","IBCBB3",149,0)
 ;
"RTN","IBCBB3",150,0)
 ; esg - 10/17/07 - patch 371
"RTN","IBCBB3",151,0)
 ; For Part A replacement MRA request claims, make sure
"RTN","IBCBB3",152,0)
 ; the Medicare ICN/DCN number is present and also text in FL-80.
"RTN","IBCBB3",153,0)
 I $$REQMRA^IBEFUNC(IBIFN),$F(".137.138.117.118.","."_IBTOB_".") D  Q:IBQUIT
"RTN","IBCBB3",154,0)
 . N IBZ,FL80TXT
"RTN","IBCBB3",155,0)
 . D F^IBCEF("N-CURR INS FORM LOC 64","IBZ",,IBIFN)  ; see CI3-11
"RTN","IBCBB3",156,0)
 . I IBZ="" S IBQUIT=$$IBER(.IBER,205) Q:IBQUIT      ; missing ICN/DCN
"RTN","IBCBB3",157,0)
 . S FL80TXT=$P($G(^DGCR(399,IBIFN,"UF2")),U,3)
"RTN","IBCBB3",158,0)
 . I FL80TXT="" S IBQUIT=$$IBER(.IBER,206) Q:IBQUIT  ; missing FL80 text
"RTN","IBCBB3",159,0)
 . Q
"RTN","IBCBB3",160,0)
 ;
"RTN","IBCBB3",161,0)
 D ^IBCBB4
"RTN","IBCBB3",162,0)
 Q
"RTN","IBCBB3",163,0)
 ;
"RTN","IBCBB3",164,0)
IBER(IBER,ERRNO) ; Sets error list
"RTN","IBCBB3",165,0)
 ; NOTE: add code to check error list > 20 ... If so, display message and
"RTN","IBCBB3",166,0)
 ;   quit so we don't get too many errors at once to handle
"RTN","IBCBB3",167,0)
 ;   Print all if printing list
"RTN","IBCBB3",168,0)
 ;
"RTN","IBCBB3",169,0)
 I '$G(IBQUIT) D
"RTN","IBCBB3",170,0)
 . I ERRNO?1N.N S:$L(ERRNO)<3 ERRNO=$E("00",1,3-$L(ERRNO))_ERRNO
"RTN","IBCBB3",171,0)
 . I $L(IBER,";")>19,'$G(IBPRT("PRT")) S IBER=IBER_"IB999;",IBQUIT=1
"RTN","IBCBB3",172,0)
 . I $G(IBER)'[("IB"_ERRNO_";") S IBER=IBER_"IB"_ERRNO_";"
"RTN","IBCBB3",173,0)
 Q IBQUIT
"RTN","IBCBB3",174,0)
 ;
"RTN","IBCBB3",175,0)
NONMCR(IBPR,IBLABS) ;  Delete all oxygen and lab, flu shot CPT entries from IBPR
"RTN","IBCBB3",176,0)
 ; IBPR = array subscripted by CPT codes from bill
"RTN","IBCBB3",177,0)
 ; IBLABS = flag returned =1 if labs found on bill
"RTN","IBCBB3",178,0)
 N Z S IBLABS=0
"RTN","IBCBB3",179,0)
 ; Oxygen
"RTN","IBCBB3",180,0)
 F Z="A0422","A4575","A4616","A4619","A4620","A4621","E0455","E1353","E1355" K IBPR(Z)
"RTN","IBCBB3",181,0)
 F Z=77:1:85 S Z0="E13"_Z K IBPR(Z0)
"RTN","IBCBB3",182,0)
 ; Labs
"RTN","IBCBB3",183,0)
 S Z="80000" F  S Z=$O(IBPR(Z)) Q:Z'?1"8"4N  S IBLABS=1
"RTN","IBCBB3",184,0)
 ; Flu shots
"RTN","IBCBB3",185,0)
 F Z="90724","G0008","90732","G0009","90657","90658","90659","90660" K IBPR(Z)
"RTN","IBCBB3",186,0)
 Q
"RTN","IBCBB3",187,0)
 ;
"RTN","IBCBB3",188,0)
MCRANUM(IBIFN) ; Determine MEDICARE A provider ID # from bedsection for
"RTN","IBCBB3",189,0)
 ; bill ien IBIFN
"RTN","IBCBB3",190,0)
 N IBX
"RTN","IBCBB3",191,0)
 ; PART A MRA (only) needed - determine if psych/non-psych claim
"RTN","IBCBB3",192,0)
 N IBX,IBI
"RTN","IBCBB3",193,0)
 S IBI=$P($G(^DGCR(399,IBIFN,"U")),U,11)
"RTN","IBCBB3",194,0)
 S IBX=$S($TR($P($G(^DGCR(399.1,+IBI,0)),U),"psych","PSYCH")'["PSYCH":670899,1:674499)
"RTN","IBCBB3",195,0)
 Q IBX
"RTN","IBCBB3",196,0)
 ;
"RTN","IBCBB3",197,0)
MCRACK(IBIFN,X,IBFLD) ; Check for MEDICARE A for bill IBIFN
"RTN","IBCBB3",198,0)
 ; Called from CLAIM STATUS MRA field (#24) xrefs in file 399
"RTN","IBCBB3",199,0)
 ; X = current value of field 399;24
"RTN","IBCBB3",200,0)
 ; IBFLD = 1 for primary ins co, 2 for secondary, 3 for tertiary
"RTN","IBCBB3",201,0)
 N IB
"RTN","IBCBB3",202,0)
 S IB=0
"RTN","IBCBB3",203,0)
 I +X,$$COBN^IBCEF(IBIFN)=IBFLD,$$WNRBILL^IBEFUNC(IBIFN,IBFLD),$$MRATYPE^IBEFUNC(IBIFN,"C")="A" S IB=1
"RTN","IBCBB3",204,0)
 Q IB
"RTN","IBCBB3",205,0)
 ;
"RTN","IBCBB3",206,0)
GYMODCHK(Z) ; GY modifier check procedure.  IB*2*377 - 2/4/08
"RTN","IBCBB3",207,0)
 ; Z is the IBXDATA(IBI) service line EDI
"RTN","IBCBB3",208,0)
 N MODS
"RTN","IBCBB3",209,0)
 I IBER["IB123" Q     ; error already found
"RTN","IBCBB3",210,0)
 S MODS=$P(Z,U,9)     ; list of modifiers separated by commas
"RTN","IBCBB3",211,0)
 I MODS'["GY" Q       ; GY modifier not here on this line item
"RTN","IBCBB3",212,0)
 I $P(Z,U,6) Q        ; non-covered charges exist on this line item
"RTN","IBCBB3",213,0)
 S IBQUIT=$$IBER(.IBER,123)
"RTN","IBCBB3",214,0)
GYMODX ;
"RTN","IBCBB3",215,0)
 Q
"RTN","IBCBB3",216,0)
 ;
"RTN","IBCC")
0^110^B76370923^B75296271
"RTN","IBCC",1,0)
IBCC ;ALB/MJB - CANCEL THIRD PARTY BILL ;Feb 09, 2018@10:11:43
"RTN","IBCC",2,0)
 ;;2.0;INTEGRATED BILLING;**2,19,77,80,51,142,137,161,199,241,155,276,320,358,433,432,447,516,547,597,592**;21-MAR-94;Build 58
"RTN","IBCC",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCC",4,0)
 ;
"RTN","IBCC",5,0)
 ;MAP TO DGCRC
"RTN","IBCC",6,0)
 ;
"RTN","IBCC",7,0)
 I '$D(IBCAN) S IBCAN=1
"RTN","IBCC",8,0)
ASK ;
"RTN","IBCC",9,0)
 ;***
"RTN","IBCC",10,0)
 ;I $D(XRT0) S:'$D(XRTN) XRTN="IBCC" D T1^%ZOSV ;stop rt clock
"RTN","IBCC",11,0)
 ;S XRTL=$ZU(0),XRTN="IBCC-1" D T0^%ZOSV ;start rt clock
"RTN","IBCC",12,0)
 ;
"RTN","IBCC",13,0)
 ; If called at entry point PROCESS, variable IBNOASK will exist.
"RTN","IBCC",14,0)
 ; First time through, IBNOASK=1
"RTN","IBCC",15,0)
 ; Second time through, IBNOASK=2 and it will quit
"RTN","IBCC",16,0)
 I $G(IBNOASK)=2 G Q
"RTN","IBCC",17,0)
 I $G(IBNOASK)=1 S IBNOASK=2
"RTN","IBCC",18,0)
 ;
"RTN","IBCC",19,0)
 G Q:$G(IBCE("EDI"))
"RTN","IBCC",20,0)
 D Q
"RTN","IBCC",21,0)
 ; Release currently locked record IB*2.0*597
"RTN","IBCC",22,0)
 I $G(IBLOCK)'<1 L -^DGCR(399,IBLOCK) K IBLOCK
"RTN","IBCC",23,0)
 ;
"RTN","IBCC",24,0)
 S IBQUIT=0
"RTN","IBCC",25,0)
 N DPTNOFZY S DPTNOFZY=1  ;Suppress PATIENT file fuzzy lookups
"RTN","IBCC",26,0)
 I '$G(IBNOASK) S DIC="^DGCR(399,",DIC(0)="AEMQZ",DIC("A")="Enter BILL NUMBER or Patient NAME: " W !! D ^DIC I Y<1 S IBQUIT=1 G Q1
"RTN","IBCC",27,0)
 K IB364
"RTN","IBCC",28,0)
 ; Lock file entry and display message if lock can't be obtained. IB*2.0*597
"RTN","IBCC",29,0)
 S IBLOCK=Y
"RTN","IBCC",30,0)
 L +^DGCR(399,IBLOCK):$G(DILOCKTM,5) I '$T D LOCKED G ASK
"RTN","IBCC",31,0)
 ;
"RTN","IBCC",32,0)
NOPTF ; Note if IB364 is >0 it will be used as the ien to update in file 364
"RTN","IBCC",33,0)
 N DA,I
"RTN","IBCC",34,0)
 I '$G(IBNOASK) S IBIFN=+$G(Y)
"RTN","IBCC",35,0)
 I '$G(IBIFN) G ASK
"RTN","IBCC",36,0)
 I IBCAN>1 D NOPTF^IBCB2 I 'IBAC1 D NOPTF1^IBCB2 G ASK
"RTN","IBCC",37,0)
 ;
"RTN","IBCC",38,0)
 I $G(IBCNCRD)=1,$P($P($G(^DGCR(399,IBIFN,0)),U),"-",2)>98 D  Q
"RTN","IBCC",39,0)
 .W !!,"Please note that you have exceeded the maximum number of iterations (99) for this claim."
"RTN","IBCC",40,0)
 .W "Copy and cancel (CLON) must be used to correct this bill."
"RTN","IBCC",41,0)
 .I $G(IBLOCK)'<1 L -^DGCR(399,IBLOCK) ; IB*2.0*597
"RTN","IBCC",42,0)
 .S IBQUIT=1 H 3
"RTN","IBCC",43,0)
 ; Check if bill has been referred to Counsel
"RTN","IBCC",44,0)
 I $P($G(^PRCA(430,IBIFN,6)),U,4) D  G ASK
"RTN","IBCC",45,0)
 . W !,"This bill has been referred to Regional Counsel and cannot be 'CANCELLED' in"
"RTN","IBCC",46,0)
 . W !,"Integrated Billing.  Please use the option 'TP Referred Follow-up'"
"RTN","IBCC",47,0)
 . W !,"[PRCA RC ACTION MENU] in Accounts Receivable to request that Regional"
"RTN","IBCC",48,0)
 . W !,"Counsel return the bill to your facility."
"RTN","IBCC",49,0)
 . Q
"RTN","IBCC",50,0)
 ;
"RTN","IBCC",51,0)
 F I=0,"S","U1" S IB(I)=$G(^DGCR(399,IBIFN,I))
"RTN","IBCC",52,0)
 S IBSTAT=$P(IB(0),U,13)
"RTN","IBCC",53,0)
 ; REMOVE New messages for CRD option IB*2.0*433 in IB*2.0*447  IA#5630
"RTN","IBCC",54,0)
 ;I $G(IBCNCRD)=1,IBSTAT'=2,'$$ACCK^PRCAACC(IBIFN) D  Q
"RTN","IBCC",55,0)
 ;.W !!,"This option cannot be used to correct some Billing Rate Types (Example: TRICARE)"
"RTN","IBCC",56,0)
 ;.W "Copy and cancel (CLON) must be used to correct this bill."
"RTN","IBCC",57,0)
 ;.S IBQUIT=1 H 3
"RTN","IBCC",58,0)
 ;
"RTN","IBCC",59,0)
 ; Restrict access to this process for REQUEST MRA bills
"RTN","IBCC",60,0)
 I IBSTAT=2,'$G(IBCE("EDI")),$$MRAWL^IBCEMU2(IBIFN) D  G ASK
"RTN","IBCC",61,0)
 . W !!?4,"This bill is in a status of REQUEST MRA and it does appear on the"
"RTN","IBCC",62,0)
 . W !?4,"MRA Management Work List.  Please use the 'MRA Management Menu' options"
"RTN","IBCC",63,0)
 . W !?4,"for all processing related to this bill."
"RTN","IBCC",64,0)
 . Q
"RTN","IBCC",65,0)
 ;
"RTN","IBCC",66,0)
 ; IB*2.0*432 Restrict access to claims on the new CBW Worklist
"RTN","IBCC",67,0)
 I $P($G(^DGCR(399,IBIFN,"S1")),U,7)=1,$G(IBMRANOT)'=1 D  G ASK
"RTN","IBCC",68,0)
 . W !!?4,"This bill appears on the CBW Management Work List.  Please use the"
"RTN","IBCC",69,0)
 . W !?4,"'CBW Management Menu' options for all processing related to this bill."
"RTN","IBCC",70,0)
 . S IBQUIT=1 ;IB*2.0*592 JRA need to set quit flag after issuing this message
"RTN","IBCC",71,0)
 . Q
"RTN","IBCC",72,0)
 ;
"RTN","IBCC",73,0)
 ; Check if this is a paper claim. If not, check for split EOB.  If split, don't allow CRD unless more than 1 EOB has been returned
"RTN","IBCC",74,0)
 I $G(IBCNCRD)=1,$P($G(^DGCR(399,IBIFN,"TX")),U,8)'=1,$$SPLTMRA^IBCEMU1(IBIFN)=1 D  Q
"RTN","IBCC",75,0)
 .W !!,"There is a split EOB associated with this claim.  You cannot use this option to Correct this claim until the second EOB has been received."
"RTN","IBCC",76,0)
 .I $G(IBLOCK)'<1 L -^DGCR(399,IBLOCK) ; IB*2.0*597
"RTN","IBCC",77,0)
 .S IBQUIT=1 H 3
"RTN","IBCC",78,0)
 .Q
"RTN","IBCC",79,0)
 ;
"RTN","IBCC",80,0)
 ; Warning message if in a REQUEST MRA status with no MRA on file
"RTN","IBCC",81,0)
 ; IB*2.0*516/TAZ,MRD - Forbid the user from using the option CRD
"RTN","IBCC",82,0)
 ; (Correct Rejected/Denied Bill) on an MRA claim if the status is
"RTN","IBCC",83,0)
 ; REQUEST MRA (IBSTAT=2).
"RTN","IBCC",84,0)
 I IBSTAT=2,'$$MRACNT^IBCEMU1(IBIFN) D  I $G(IBQUIT) H 3 Q
"RTN","IBCC",85,0)
 . N REJ
"RTN","IBCC",86,0)
 . D TXSTS^IBCEMU2(IBIFN,,.REJ)
"RTN","IBCC",87,0)
 . ;IB*2.0*516/TAZ - If CRD is from CSA allow a REJected claim to be CRD'ed without displaying a warning.
"RTN","IBCC",88,0)
 . I $G(IBCNCSA),REJ Q
"RTN","IBCC",89,0)
 . W *7,!!?4,$S('$G(IBCNCRD):"Warning!  ",1:""),"This bill is in a status of REQUEST MRA."
"RTN","IBCC",90,0)
 . W !?4,"No MRAs have been received"
"RTN","IBCC",91,0)
 . I REJ W ", but the most recent transmission of this",!?4,"MRA request bill was rejected."
"RTN","IBCC",92,0)
 . I 'REJ W " and there are no rejection messages on file",!?4,"for the most recent transmission of this MRA request bill."
"RTN","IBCC",93,0)
 . I $G(IBCNCRD) S IBQUIT=1 I $G(IBLOCK)'<1 L -^DGCR(399,IBLOCK) ; IB*2.0*597
"RTN","IBCC",94,0)
 . Q
"RTN","IBCC",95,0)
 ;
"RTN","IBCC",96,0)
 I IBCAN=2,IB("S")]"",+$P(IB("S"),U,16),$P(IB("S"),U,17)]"" D  G 1
"RTN","IBCC",97,0)
 . W !!,"This bill was cancelled on " S Y=$P(IB("S"),U,17) X ^DD("DD") W Y," by ",$S($P(IB("S"),U,18)']"":IBU,$D(^VA(200,$P(IB("S"),U,18),0)):$P(^(0),U,1),1:IBU),"."
"RTN","IBCC",98,0)
 . S IBQUIT=1
"RTN","IBCC",99,0)
 ;
"RTN","IBCC",100,0)
 ; IB*2.0*516/TAZ,MRD - Forbid the user from using the option CRD
"RTN","IBCC",101,0)
 ; (Correct Rejected/Denied Bill) on all but primary claims.
"RTN","IBCC",102,0)
 I $G(IBCNCRD),($$COB^IBCEF(IBIFN)'="P") D  Q
"RTN","IBCC",103,0)
 . W !!,"Please note that COB data may exist for this bill."
"RTN","IBCC",104,0)
 . W !,"Copy and cancel (CLON) must be used to correct this bill."
"RTN","IBCC",105,0)
 . I $G(IBLOCK)'<1 L -^DGCR(399,IBLOCK) ; IB*2.0*597
"RTN","IBCC",106,0)
 . S IBQUIT=1
"RTN","IBCC",107,0)
 . H 3
"RTN","IBCC",108,0)
 . Q
"RTN","IBCC",109,0)
 ;
"RTN","IBCC",110,0)
 ; Notify if a payment has been posted to this bill before cancel
"RTN","IBCC",111,0)
 N PRCABILL
"RTN","IBCC",112,0)
 S PRCABILL=$$TPR^PRCAFN(IBIFN)
"RTN","IBCC",113,0)
 I PRCABILL=-1 W !!,"Please note: PRCA was unable to determine if a payment has been posted." I $G(IBCNCRD)=1 W !,"Copy and cancel (CLON) must be used to correct this bill." I $G(IBLOCK)'<1 L -^DGCR(399,IBLOCK) S IBQUIT=1 H 3 Q
"RTN","IBCC",114,0)
 I PRCABILL>0 W !!,"Please note a PAYMENT of **$"_$$TPR^PRCAFN(IBIFN)_"** has been POSTED to this bill."
"RTN","IBCC",115,0)
 ; New message for CRD option
"RTN","IBCC",116,0)
 I $G(IBCNCRD)=1,PRCABILL>0 W !,"Copy and cancel (CLON) must be used to correct this bill." I $G(IBLOCK)'<1 L -^DGCR(399,IBLOCK) S IBQUIT=1 H 3 Q
"RTN","IBCC",117,0)
 ;
"RTN","IBCC",118,0)
 ; If bill was created via Electronic claims process then notify
"RTN","IBCC",119,0)
 ; user that cancellation should occur using ECME package
"RTN","IBCC",120,0)
 I $$GET1^DIQ(399,IBIFN_",",460)]"" D  G:'Y ASK
"RTN","IBCC",121,0)
 . W !!!?5,"This bill was created by the"
"RTN","IBCC",122,0)
 . W !?5,"Electronic Claims Management Engine (ECME)."
"RTN","IBCC",123,0)
 . W !?5,"Cancellation needs to occur in the ECME package by"
"RTN","IBCC",124,0)
 . W !?5,"submitting a REVERSAL to the Payer.",!!
"RTN","IBCC",125,0)
 . K DIR S DIR("A",1)="Has a REVERSAL for this e-Claim already been",DIR("A")="submitted to the payer via the ECME package (Y/N)",DIR(0)="Y",DIR("B")="NO" D ^DIR
"RTN","IBCC",126,0)
 . I Y=0 W !!,"<PLEASE SUBMIT A REVERSAL USING THE APPROPRIATE OPTION IN THE ECME PACKAGE>",$C(7)
"RTN","IBCC",127,0)
 ;
"RTN","IBCC",128,0)
CHK ;
"RTN","IBCC",129,0)
 ; if user came from CLON, make sure they know about the new CRD option  IB*2.0*447 remove TRICARE msg.
"RTN","IBCC",130,0)
 I $G(IBCNCOPY)=1 D
"RTN","IBCC",131,0)
 .W !!,*7,"Warning:  This option should NOT be used to correct Rejected/Denied claims."
"RTN","IBCC",132,0)
 .W !,"          It should ONLY be used to correct DENIED claims which have payments"
"RTN","IBCC",133,0)
 .W !,"          posted against them.***" ; and claims with certain Billing Rate Types (Example: TRICARE)."
"RTN","IBCC",134,0)
 ;
"RTN","IBCC",135,0)
 S (IBCCCC,IBQUIT)=0 I '$G(IBCEAUTO),'$G(IBMCSCAN) W !!,"ARE YOU SURE YOU WANT TO CANCEL THIS BILL" S %=2 D YN^DICN G:%=0 HELP I %'=1 S IBQUIT=1 G NO
"RTN","IBCC",136,0)
 ;
"RTN","IBCC",137,0)
 I '$G(IBCEAUTO) W !!,"LAST CHANCE TO CHANGE YOUR MIND..."
"RTN","IBCC",138,0)
 S DIE=399,DA=IBIFN,DIE("NO^")=""
"RTN","IBCC",139,0)
 S DR="16;S:'X Y=0;19;S IBCCCC=1;"
"RTN","IBCC",140,0)
 I $G(IBCEAUTO) S DR="16////1;19////EDI/MRA TURNED OFF;S IBCCCC=1;"
"RTN","IBCC",141,0)
 ;
"RTN","IBCC",142,0)
 ; esg - 8/23/06 - IB*2*358 - fix semi-colon in free text field
"RTN","IBCC",143,0)
 I $G(IBMCSRSC)'="" S DR="16;S:'X Y=0;19//^S X=IBMCSRSC;S IBCCCC=1;"
"RTN","IBCC",144,0)
 D ^DIE K DIE,DR
"RTN","IBCC",145,0)
 ;
"RTN","IBCC",146,0)
NO I 'IBCCCC W !!,"<NO ACTION TAKEN>",*7 S IBQUIT=1 G ASK:IBCAN<2,Q
"RTN","IBCC",147,0)
 S IBCCR=$P($G(^DGCR(399,IBIFN,"S")),U,19)
"RTN","IBCC",148,0)
 ; update claim # with new iteration  IB*2.0*447 move to later in the process
"RTN","IBCC",149,0)
 ;D:$G(IBCNCRD)=1 CRD
"RTN","IBCC",150,0)
 W !!,"...Bill has been cancelled..." D BULL^IBCBULL,BSTAT^IBCDC(IBIFN),PRIOR^IBCCC2(IBIFN)
"RTN","IBCC",151,0)
 ;
"RTN","IBCC",152,0)
 ; cancelling in ingenix claimsmanager if ingenix is running
"RTN","IBCC",153,0)
 ; clean-up of variables is OK if not coming in from ListMan screen
"RTN","IBCC",154,0)
 I $$CM^IBCIUT1(IBIFN) S IBCISNT=4 D ST2^IBCIST I '$G(IBCICNCL) K IBCISNT,IBCISTAT,IBCIREDT,IBCIERR
"RTN","IBCC",155,0)
 ;
"RTN","IBCC",156,0)
 S IBEDI=$G(IB364)
"RTN","IBCC",157,0)
 I 'IBEDI S IBEDI=+$$LAST364^IBCEF4(IBIFN)
"RTN","IBCC",158,0)
 ; ib*2.0*547 don't cancel MRA if cloning a bill that is secondary to MRA (share the same claim#)
"RTN","IBCC",159,0)
 I IBEDI D UPDEDI^IBCEM(IBEDI,"C",,$S($$MRASEC^IBCEF4(IBIFN):2,1:"")) ;Update EDI files, if needed
"RTN","IBCC",160,0)
 ;
"RTN","IBCC",161,0)
 F I="S","U1" S IB(I)=$S($D(^DGCR(399,IBIFN,I)):^(I),1:"")
"RTN","IBCC",162,0)
 S PRCASV("ARREC")=IBIFN,PRCASV("AMT")=$S(IB("U1")']"":0,1:$P(IB("U1"),"^")),PRCASV("DATE")=$P(IB("S"),"^",17),PRCASV("BY")=$P(IB("S"),"^",18)
"RTN","IBCC",163,0)
 S PRCASV("COMMENT")=$S($P(IB("S"),U,19)]"":$P(IB("S"),U,19),$P(^IBE(350.9,1,2),"^",7)]"":$P(^(2),"^",7),1:"BILL CANCELLED IN MAS")
"RTN","IBCC",164,0)
 S PRCASV("BY")=$S($P(IB("S"),U,18)]"":$P(IB("S"),U,18),1:"")
"RTN","IBCC",165,0)
 ; IA#3374/IB*2.0*433 Pass the CRD flag so FMS knows to send a cancel record before the new E record is sent
"RTN","IBCC",166,0)
 ;S X=$$CANCEL^RCBEIB($G(PRCASV("ARREC")),$G(PRCASV("DATE")),$G(PRCASV("BY")),$G(PRCASV("AMT")),$G(PRCASV("COMMENT")))
"RTN","IBCC",167,0)
 S PRCASV("ARCRD")=$G(IBCNCRD)
"RTN","IBCC",168,0)
 S X=$$CANCEL^RCBEIB($G(PRCASV("ARREC")),$G(PRCASV("DATE")),$G(PRCASV("BY")),$G(PRCASV("AMT")),$G(PRCASV("COMMENT")),$G(PRCASV("ARCRD")))
"RTN","IBCC",169,0)
 W !,$S(X:">> The receivable associated with the claim was cancelled.",1:">> The receivable associated with the claim was not cancelled.")
"RTN","IBCC",170,0)
 I $P(X,U,2)]"" W !,">>> ",$P(X,U,2) ; The reason why the claim can not be cancelled.
"RTN","IBCC",171,0)
 I IBCAN<2 D RNB^IBCC1 ;assign a reason not billable
"RTN","IBCC",172,0)
 G ASK:IBCAN<2,Q
"RTN","IBCC",173,0)
 ;
"RTN","IBCC",174,0)
HELP W !,?3,"Answer 'YES' or 'Y' if you wish to cancel this bill.",!,?3,"Answer 'NO' or 'N' if you want to abort." G CHK
"RTN","IBCC",175,0)
 Q
"RTN","IBCC",176,0)
1 I $P(IB(0),U,13)=1 W !,"This record was re-opened on " S Y=$P(IB(0),U,14) X ^DD("DD") W Y,"." G CHK
"RTN","IBCC",177,0)
 G ASK
"RTN","IBCC",178,0)
Q1 K:IBCAN=1 IBQUIT K IBCAN
"RTN","IBCC",179,0)
Q K %,IBEPAR,IBSTAT,IBARST,IBAC1,IB,DFN,IBX,IBZ,DIC,DIE,DR,PRCASV,PRCASVC,X,Y,IBEDI
"RTN","IBCC",180,0)
 I $G(IBLOCK)'<1 L -^DGCR(399,IBLOCK) K IBLOCK ; IB*2.0*597
"RTN","IBCC",181,0)
 ;***
"RTN","IBCC",182,0)
 ;I $D(XRT0) S:'$D(XRTN) XRTN="IBCC" D T1^%ZOSV ;stop rt clock
"RTN","IBCC",183,0)
 Q
"RTN","IBCC",184,0)
CRD(IBIFN) ; entry to point to add iteration # to claim
"RTN","IBCC",185,0)
 N IBFDA
"RTN","IBCC",186,0)
 S IBITN=$$ITN^IBCCC(IBIFN)
"RTN","IBCC",187,0)
 S IBFDA(399,IBIFN_",",.01)=IBITN
"RTN","IBCC",188,0)
 D FILE^DIE("","IBFDA")
"RTN","IBCC",189,0)
 ; this will re-open the claim, so reset to cancelled
"RTN","IBCC",190,0)
 S DIE=399,DA=IBIFN
"RTN","IBCC",191,0)
 S DR="16////1"
"RTN","IBCC",192,0)
 D ^DIE K DIE,DR
"RTN","IBCC",193,0)
 Q
"RTN","IBCC",194,0)
 ;
"RTN","IBCC",195,0)
PROCESS(IBIFN,IBCAN) ;
"RTN","IBCC",196,0)
 ; Entry point when the bill number is already known.  Use this when
"RTN","IBCC",197,0)
 ; you just want to try to cancel this bill and this bill only.
"RTN","IBCC",198,0)
 ; Input:
"RTN","IBCC",199,0)
 ;   IBIFN - Internal bill# (Required)
"RTN","IBCC",200,0)
 ;   IBCAN - Cancel Flag (optional, defaults to 1 if not included)
"RTN","IBCC",201,0)
 ;
"RTN","IBCC",202,0)
 NEW IBNOASK
"RTN","IBCC",203,0)
 S IBNOASK=1
"RTN","IBCC",204,0)
 S IBCAN=$G(IBCAN,1)
"RTN","IBCC",205,0)
 G ASK
"RTN","IBCC",206,0)
 ;
"RTN","IBCC",207,0)
LOCKED ; -- write record locked message IB*2.0*597
"RTN","IBCC",208,0)
 W !!,"Sorry, another user currently editing this entry."
"RTN","IBCC",209,0)
 W !,"Try again later."
"RTN","IBCC",210,0)
 D PAUSE^VALM1
"RTN","IBCC",211,0)
 Q
"RTN","IBCC",212,0)
 ;IBCC
"RTN","IBCCC")
0^111^B24472869^B22970985
"RTN","IBCCC",1,0)
IBCCC ;ALB/AAS - CANCEL AND CLONE A BILL ;25-JAN-90
"RTN","IBCCC",2,0)
 ;;2.0;INTEGRATED BILLING;**80,109,106,51,320,433,432,447,516,592**;21-MAR-94;Build 58
"RTN","IBCCC",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCCC",4,0)
 ;
"RTN","IBCCC",5,0)
 ;MAP TO DGCRCC
"RTN","IBCCC",6,0)
 ;
"RTN","IBCCC",7,0)
 ;STEP 1 - cancel bill
"RTN","IBCCC",8,0)
 ;STEP 1.5 - entry to clone previously cancelled bill.  (must be cancel)
"RTN","IBCCC",9,0)
 ;STEP 2 - build array of IBIDS call screen that asks ok
"RTN","IBCCC",10,0)
 ;STEP 3 - pass stub entry to ar
"RTN","IBCCC",11,0)
 ;STEP 4 - store stub data in MCCR then x-ref
"RTN","IBCCC",12,0)
 ;STEP 4.5 - store claim clone info on "S1" node.
"RTN","IBCCC",13,0)
 ;STEP 5 - get remainder of data to move and store in MCCR then x-ref
"RTN","IBCCC",14,0)
 ;STEP 6 - go to screens, come out to IBB1 
"RTN","IBCCC",15,0)
EN ;
"RTN","IBCCC",16,0)
 N IBBCF,IBBCT,IBBCB,IBCCR,IBDBC,IBCNCOPY,IBNOCALC
"RTN","IBCCC",17,0)
 S IBDBC=DT    ;date claim was cloned
"RTN","IBCCC",18,0)
 S IBBCB=DUZ   ;user-id of person cloning the claim.
"RTN","IBCCC",19,0)
 S IBCNCOPY=1 ; flag indicating this function is entered as the copy/cancel option
"RTN","IBCCC",20,0)
 ;
"RTN","IBCCC",21,0)
 ; MRD;IB*2.0*516 - Added the flag IBNOCALC.  This flag is set here and
"RTN","IBCCC",22,0)
 ; below.  When charges are recalculated in BILL^IBCRBC, the first time
"RTN","IBCCC",23,0)
 ; that procedure is entered for the new claim, if the IBNOCALC flag is
"RTN","IBCCC",24,0)
 ; set, it will reset the flag and quit out.  That is, it does not re-
"RTN","IBCCC",25,0)
 ; calculate the charges the first time it otherwise would if the user
"RTN","IBCCC",26,0)
 ; is doing either a CRD or CLON.
"RTN","IBCCC",27,0)
 ;
"RTN","IBCCC",28,0)
 S IBNOCALC=1
"RTN","IBCCC",29,0)
 ;
"RTN","IBCCC",30,0)
STEP1 I $G(IBCE("EDI"))>1 G END1
"RTN","IBCCC",31,0)
 S IBCAN=2,IBQUIT=0,IBAC=6,IBU="UNSPECIFIED"
"RTN","IBCCC",32,0)
 I '$G(IBCE("EDI")) D ASK^IBCC
"RTN","IBCCC",33,0)
 I $G(IBCE("EDI"))=1 S IB364="" D NOPTF^IBCC
"RTN","IBCCC",34,0)
 G:IBQUIT END1
"RTN","IBCCC",35,0)
 ;IB*2.0*592 JRA use $G to prevent <UNDEF> error when/if IBCCCC is not defined
"RTN","IBCCC",36,0)
 ;I 'IBCCCC!('$D(IBIFN)) G STEP1:'$G(IBCE("EDI")),END1  ;IB*2.0*592 JRA ';'
"RTN","IBCCC",37,0)
 I '$G(IBCCCC)!('$D(IBIFN)) G STEP1:'$G(IBCE("EDI")),END1  ;IB*2.0*592 JRA add $G for IBCCCC
"RTN","IBCCC",38,0)
 I $G(IBCE("EDI")) S IBCE("EDI")=2
"RTN","IBCCC",39,0)
EN1 ;
"RTN","IBCCC",40,0)
STEP1P5 I '$D(IBIFN) S IBCAN=2,IBQUIT=0,IBAC=6 W !,"Copy Previously Cancelled Bill.",!! S DIC="^DGCR(399,",DIC("S")="I $P(^(0),U,13)=7",DIC(0)="AEMQZ",DIC("A")="Enter BILL NUMBER or Patient NAME: " D ^DIC G:Y<1 END S IBIFN=+Y
"RTN","IBCCC",41,0)
 ;
"RTN","IBCCC",42,0)
 S IBBCF=IBIFN    ;this is the claim we are copying FROM
"RTN","IBCCC",43,0)
 S IBIDS(.15)=IBIFN K IBIFN
"RTN","IBCCC",44,0)
STEP2 S IBND0=^DGCR(399,IBIDS(.15),0) I $D(^("U")) S IBNDU=^("U")
"RTN","IBCCC",45,0)
 ; *** Note - all these fields should also be included in WHERE^IBCCC1
"RTN","IBCCC",46,0)
 ; IB*2.0*432 added check of variable IBSILENT to allow COB copy in background mode
"RTN","IBCCC",47,0)
 F I=2:1:12 S:$P(IBND0,"^",I)]"" IBIDS(I/100)=$P(IBND0,"^",I)
"RTN","IBCCC",48,0)
 F I=16:1:19,21:1:27 S:$P(IBND0,"^",I)]"" IBIDS(I/100)=$P(IBND0,"^",I)
"RTN","IBCCC",49,0)
 F I=151,152,155 S IBIDS(I)=$P(IBNDU,"^",(I-150))
"RTN","IBCCC",50,0)
 S IBIDS(159.5)=$P(IBNDU,U,20)
"RTN","IBCCC",51,0)
 ; ***
"RTN","IBCCC",52,0)
 D:$G(IBSILENT)="" HOME^%ZIS
"RTN","IBCCC",53,0)
 S DFN=IBIDS(.02) D DEM^VADPT
"RTN","IBCCC",54,0)
 I +$G(IBCTCOPY)!$G(IBCE("EDI")) G STEP3
"RTN","IBCCC",55,0)
 D ^IBCA1
"RTN","IBCCC",56,0)
ASK S IBYN=0 W !!,"IS THE ABOVE INFORMATION CORRECT AS SHOWN" S %=1 D YN^DICN G END:%=2,STEP3:%=1 I % G END
"RTN","IBCCC",57,0)
 W !!?4,"YES - If this information is correct as shown and you wish to file the bill.",!?4,"NO  - If you wish to change this information prior to filing."
"RTN","IBCCC",58,0)
 W !?4,"'^' - Enter the up-arrow character to DELETE this Bill at this time." G ASK
"RTN","IBCCC",59,0)
 ;
"RTN","IBCCC",60,0)
STEP3 ;
"RTN","IBCCC",61,0)
 S PRCASV("SER")=$P($G(^IBE(350.9,1,1)),"^",14)
"RTN","IBCCC",62,0)
 S PRCASV("SITE")=$P($$SITE^VASITE,"^",3),IBNWBL="",PRCASV("ARCRD")=$G(IBCNCRD)
"RTN","IBCCC",63,0)
 ; IA#386 & 1992  If user came from CRD option, need to pass old bill # and claim ien, as well as new iteration number
"RTN","IBCCC",64,0)
 I $G(IBCNCRD)=1 D CRD^IBCC(IBBCF) S PRCASV("ARREC")=IBBCF,PRCASV("ARBIL")=PRCASV("SITE")_"-"_$P(IBITN,"-"),PRCASV("ARITN")=PRCASV("SITE")_"-"_IBITN
"RTN","IBCCC",65,0)
 W:$G(IBSILENT)="" !,"Passing bill to Accounts Receivable Module..." D SETUP^PRCASVC3 I $S($P(PRCASV("ARREC"),"^")=-1:1,$P(PRCASV("ARBIL"),"^")=-1:1,1:0) W:$G(IBSILENT)="" *7,"  ",$P(PRCASV("ARREC"),"^",2),$P(PRCASV("ARBIL"),"^",2) G END
"RTN","IBCCC",66,0)
 S IBIDS(.01)=$P(PRCASV("ARBIL"),"-",2),IBIDS(.17)=$S($D(IBIDS(.17)):IBIDS(.17),1:PRCASV("ARREC"))
"RTN","IBCCC",67,0)
 I '$G(IBCE("EDI")) W !,"Billing Record #",IBIDS(.01)," being established for '",VADM(1),"'..." S IBIDS(.02)=DFN,IBHV("IBIFN")=$S($G(IBIFN):IBIFN,1:$G(IBIDS(.15)))
"RTN","IBCCC",68,0)
 G ^IBCCC1 ;go to step4
"RTN","IBCCC",69,0)
 Q
"RTN","IBCCC",70,0)
 ;
"RTN","IBCCC",71,0)
END W:$G(IBSILENT)="" !!,"No Billing Record Set up.  You must manually enter the bill."
"RTN","IBCCC",72,0)
END1 K %,%DT,IBCAN,IBAC,IBND0,IBNDU,IBYN,IBIFN,IB,IBA,IBNWBL,IBBT,IBIDS,IBU,I,J,VA,VADM,X,X1,X2,X3,X4,D,Y  ;IB*2.0*592 JRA remove IBCCCC from KILL
"RTN","IBCCC",73,0)
 ;I '$G(IBQUIT),$S(+$G(IBCNCOPY):1,1:'$G(IBCE("EDI"))) G STEP1
"RTN","IBCCC",74,0)
 I '$G(IBQUIT),$S(+$G(IBCNCOPY)!(+$G(IBCNCRD)):1,1:'$G(IBCE("EDI"))) G STEP1
"RTN","IBCCC",75,0)
 K IBQUIT,IBCNCOPY,IBCNCRD,IBNOCALC,IBCCCC  ;IB*2.0*592 JRA Added IBCCCC to KILL
"RTN","IBCCC",76,0)
 Q
"RTN","IBCCC",77,0)
 ;
"RTN","IBCCC",78,0)
ITN(IBX) ; determine iteration # for rejected or denied claim
"RTN","IBCCC",79,0)
 N IBCF,IBCL
"RTN","IBCCC",80,0)
 S IBCF=$P($G(^DGCR(399,IBX,"S1")),U,2)
"RTN","IBCCC",81,0)
 ; if this claim has never been cloned, iteration # is -01
"RTN","IBCCC",82,0)
 Q:IBCF="" $P($G(^DGCR(399,IBX,0)),U)_"-01"
"RTN","IBCCC",83,0)
 S IBCL=$P($G(^DGCR(399,IBCF,0)),U)
"RTN","IBCCC",84,0)
 ; if claim was a CLON 1st and now a CORRECT, this is the 1st iteration
"RTN","IBCCC",85,0)
 I $P(IBCL,"-")'=$P($P($G(^DGCR(399,IBX,0)),U),"-") Q $P($G(^DGCR(399,IBX,0)),U)_"-01"
"RTN","IBCCC",86,0)
 ; to determine iteration#, need to incriment from claim that was cloned from
"RTN","IBCCC",87,0)
 S IBITN=$P(IBCL,"-",2),IBITN=IBITN+1 I $L(IBITN)=1 S IBITN="0"_IBITN
"RTN","IBCCC",88,0)
 Q $P(IBCL,"-")_"-"_IBITN
"RTN","IBCCC",89,0)
 ;
"RTN","IBCCC",90,0)
CRD ; new entry point if user comes from CRD option instead of CLON  
"RTN","IBCCC",91,0)
 N IBBCF,IBBCT,IBBCB,IBCCR,IBDBC,IBCNCRD,IBITN,IBNOCALC
"RTN","IBCCC",92,0)
 S IBDBC=DT    ;date claim was cloned
"RTN","IBCCC",93,0)
 S IBBCB=DUZ   ;user-id of person cloning the claim.
"RTN","IBCCC",94,0)
 S IBCNCRD=1 ; flag indicating this function is entered as the CRD option
"RTN","IBCCC",95,0)
 ;
"RTN","IBCCC",96,0)
 ; MRD;IB*2.0*516 - Added the flag IBNOCALC.  This flag is set here and
"RTN","IBCCC",97,0)
 ; above.  When charges are recalculated in BILL^IBCRBC, the first time
"RTN","IBCCC",98,0)
 ; that procedure is entered for the new claim, if the IBNOCALC flag is
"RTN","IBCCC",99,0)
 ; set, it will reset the flag and quit out.  That is, it does not re-
"RTN","IBCCC",100,0)
 ; calculate the charges the first time it otherwise would if the user
"RTN","IBCCC",101,0)
 ; is doing either a CRD or CLON.
"RTN","IBCCC",102,0)
 ;
"RTN","IBCCC",103,0)
 S IBNOCALC=1
"RTN","IBCCC",104,0)
 ;
"RTN","IBCCC",105,0)
 G STEP1
"RTN","IBCCC",106,0)
 Q
"RTN","IBCCC",107,0)
 ;
"RTN","IBCCC2")
0^112^B130398035^B116481460
"RTN","IBCCC2",1,0)
IBCCC2 ;ALB/AAS - CANCEL AND CLONE A BILL - CONTINUED ;6/6/03 9:56am
"RTN","IBCCC2",2,0)
 ;;2.0;INTEGRATED BILLING;**80,106,124,138,51,151,137,161,182,211,245,155,296,320,348,349,371,400,433,432,447,516,577,592**;21-MAR-94;Build 58
"RTN","IBCCC2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCCC2",4,0)
 ;
"RTN","IBCCC2",5,0)
 ;MAP TO DGCRCC2
"RTN","IBCCC2",6,0)
 ;
"RTN","IBCCC2",7,0)
 ;STEP 5 - get remainder of data to move and store in MCCR then x-ref
"RTN","IBCCC2",8,0)
 ;STEP 6 - go to screens, come out to IBB1 or something like that
"RTN","IBCCC2",9,0)
 ;
"RTN","IBCCC2",10,0)
STEP5 S IBIFN1=$P(^DGCR(399,IBIFN,0),"^",15) G END:$S(IBIFN1="":1,'$D(^DGCR(399,IBIFN1,0)):1,1:0)
"RTN","IBCCC2",11,0)
 ; NOTE:  any new or changed data nodes may also need to be updated in IBNCPDP5
"RTN","IBCCC2",12,0)
 ;move pure data nodes
"RTN","IBCCC2",13,0)
 ; MRD;IB*2.0*516 - Added "In7" nodes.
"RTN","IBCCC2",14,0)
 F I="I1","I17","I2","I27","I3","I37","M1" I $D(^DGCR(399,IBIFN1,I)) S ^DGCR(399,IBIFN,I)=^DGCR(399,IBIFN1,I)
"RTN","IBCCC2",15,0)
 ;
"RTN","IBCCC2",16,0)
 ;move top level data node. ;Do not move 'TX' node EXCEPT piece 8 (added with IB*2.0*432)
"RTN","IBCCC2",17,0)
 ;F I="U","U1","U2","U3","UF2","UF3","UF31","C","M" I $D(^DGCR(399,IBIFN1,I)) S IBND(I)=^(I) D @I
"RTN","IBCCC2",18,0)
 ; add new data nodes introduced with IB*2.0*432
"RTN","IBCCC2",19,0)
 F I="TX","U","U1","U2","U3","U4","U5","U6","U7","U8","UF2","UF3","UF31","UF32","C","M" I $D(^DGCR(399,IBIFN1,I)) S IBND(I)=^(I) D @I
"RTN","IBCCC2",20,0)
 ;
"RTN","IBCCC2",21,0)
 ;move multiple level data
"RTN","IBCCC2",22,0)
 ;F I="CC","OC","OP","OT","RC","CP","CV","PRV" I $D(^DGCR(399,IBIFN1,I,0)) D @I
"RTN","IBCCC2",23,0)
 ; add new data nodes introduced with IB*2.0*447 BI
"RTN","IBCCC2",24,0)
 F I="CC","OC","OP","OT","RC","CP","CV","PRV","U9" I $D(^DGCR(399,IBIFN1,I,0)) D @I
"RTN","IBCCC2",25,0)
 ;
"RTN","IBCCC2",26,0)
 ;JWS;IB*2.0*592;add new Dental Claim fields; IA# 3820
"RTN","IBCCC2",27,0)
 I $D(^DGCR(399,IBIFN1,"DEN")) S ^DGCR(399,IBIFN,"DEN")=^DGCR(399,IBIFN1,"DEN")
"RTN","IBCCC2",28,0)
 I $D(^DGCR(399,IBIFN1,"DEN1",0)) S ^DGCR(399,IBIFN,"DEN1",0)=^DGCR(399,IBIFN1,"DEN1",0) D
"RTN","IBCCC2",29,0)
 . S K=0 F  S K=$O(^DGCR(399,IBIFN1,"DEN1",K)) Q:'K  S ^DGCR(399,IBIFN,"DEN1",K,0)=^DGCR(399,IBIFN1,"DEN1",K,0)
"RTN","IBCCC2",30,0)
 I $D(^DGCR(399,IBIFN1,"DEN2")) S ^DGCR(399,IBIFN,"DEN2")=^DGCR(399,IBIFN1,"DEN2")
"RTN","IBCCC2",31,0)
 ;
"RTN","IBCCC2",32,0)
 ; IB*2.0*432  ADDED IBSILENT flag so that this can be processed in background
"RTN","IBCCC2",33,0)
 D FTPRV^IBCEU5(IBIFN,$G(IBSILENT)) ; Ask change prov type if form type not the same
"RTN","IBCCC2",34,0)
 D COBCHG(IBIFN,,.IBCOB)
"RTN","IBCCC2",35,0)
 ;
"RTN","IBCCC2",36,0)
 D ^IBCCC3 ; copy table files (362.3)
"RTN","IBCCC2",37,0)
 ;
"RTN","IBCCC2",38,0)
 S I=$G(^DGCR(399,IBIFN1,0)) I $P(I,U,13)=7,$P(I,U,20)=1 D COPYB^IBCDC(IBIFN1,IBIFN) ; update auto bill files
"RTN","IBCCC2",39,0)
 D PRIOR(IBIFN) ; add new bill to previous bills in series, primary/secondary
"RTN","IBCCC2",40,0)
 ;
"RTN","IBCCC2",41,0)
 I +$G(IBCTCOPY) N IBAUTO S IBAUTO=1 D PROC^IBCU7A(IBIFN),BILL^IBCRBC(IBIFN),CPTMOD26^IBCU73(IBIFN) D RECALL^DILFD(399,IBIFN_",",DUZ) G END
"RTN","IBCCC2",42,0)
 ;
"RTN","IBCCC2",43,0)
STEP6 N IBGOEND
"RTN","IBCCC2",44,0)
 ; need to kill CRD flag prior to entering billing screens in case a copy for corresponding claim is needed
"RTN","IBCCC2",45,0)
 K IBCNCRD
"RTN","IBCCC2",46,0)
 ; don't call IB bill edit screens if this is non-MRA background processing
"RTN","IBCCC2",47,0)
 I $G(IBSTSM)=1 G END
"RTN","IBCCC2",48,0)
 I '$G(IBCE("EDI"))!$G(IBCE("EDI","NEW")),'$G(IBCEAUTO) D IBSCEDT G END:$G(IBGOEND)
"RTN","IBCCC2",49,0)
 ;
"RTN","IBCCC2",50,0)
 ;
"RTN","IBCCC2",51,0)
END K DFN,IB,IBA,IBA2,IBAD,IBADD1,IBBNO,IBCAN,IBCCC,IBDA,IBDPT,IBDR,IBDT,IBI,IBI1,IBIDS,IBIFN,IBIFN1,IBND,IBQUIT,IBU,IBUN,IBARST,IBCOB,IBCNCOPY,IBCBCOPY,IBCNCRD,IBKEY
"RTN","IBCCC2",52,0)
 K IBV,IBV1,IBW,IBWW,IBYN,IBZZ,PRCASV,PRCAERCD,PRCAERR,PRCASVC,PRCAT,IBBT,IBCH,IBNDS,IBOA,IBREV,IBX,DGXRF1,VAEL,VAERR,IBAC,IBCCC,IBDD1,IBIN,DGREV,DGREV00,DGREVHDR,IBCHK
"RTN","IBCCC2",53,0)
 K IBBS,IBLS,DGPCM,IBIP,IBND0,IBNDU,IBO,IBPTF,IBST,IBUC,IBDD,D,%,%DT,DIC,VA,VADM,X,X1,X2,X3,X4,Y,I,J,K,DGRVRCAL,DDH,DGACTDT,DGAMNT,DGBR,DGBRN,DGBSI,DGBSLOS,IBA1,IBOD,IBINS,IBN,IBPROC,DGFUNC,DGIFN
"RTN","IBCCC2",54,0)
 Q
"RTN","IBCCC2",55,0)
 ;
"RTN","IBCCC2",56,0)
 ;
"RTN","IBCCC2",57,0)
IBSCEDT ; call the IB bill edit screens and validate the data
"RTN","IBCCC2",58,0)
 N IBV,IBPAR,IBAC,IBHV,IBH,IBCIREDT
"RTN","IBCCC2",59,0)
 ; if the user came from CBW->PC and this is a non-MRA claim w/a paper EOB, set force print flag IB*2.0*432
"RTN","IBCCC2",60,0)
 ; also, if the user came from CBW->PC and this is a non-MRA claim and the only EEOB we have has filing errors, set force print flag
"RTN","IBCCC2",61,0)
 I $G(IBMRANOT)=1,$$COBN^IBCEF(IBIFN)>1,$G(IBFROM)=2 D 
"RTN","IBCCC2",62,0)
 .I $G(IBDA)="" D FORCEPRT^IBCAPP($G(IBIFN)) Q
"RTN","IBCCC2",63,0)
 .I $D(^IBM(361.1,IBDA,"ERR")) D FORCEPRT^IBCAPP($G(IBIFN)) Q
"RTN","IBCCC2",64,0)
 D RECALL^DILFD(399,IBIFN_",",DUZ)
"RTN","IBCCC2",65,0)
ST1 S IBV=0 D ^IBCSCU,^IBCSC1 I $G(IBPOPOUT) S IBGOEND=1 G IBSCX
"RTN","IBCCC2",66,0)
 S IBAC=1
"RTN","IBCCC2",67,0)
 D ^IBCB1
"RTN","IBCCC2",68,0)
 I $G(IBCIREDT) G ST1
"RTN","IBCCC2",69,0)
IBSCX ;
"RTN","IBCCC2",70,0)
 Q
"RTN","IBCCC2",71,0)
 ;
"RTN","IBCCC2",72,0)
 ;
"RTN","IBCCC2",73,0)
TX F J=8 I $P(IBND("TX"),"^",J)]"" S $P(^DGCR(399,IBIFN,"TX"),"^",J)=$P(IBND("TX"),"^",J)
"RTN","IBCCC2",74,0)
 Q
"RTN","IBCCC2",75,0)
U F J=3,4,6:1:17,20 I $P(IBND("U"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U"),"^",J)=$P(IBND("U"),"^",J)
"RTN","IBCCC2",76,0)
 Q
"RTN","IBCCC2",77,0)
U1 F J=1:1:3,15 I $P(IBND("U1"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U1"),"^",J)=$P(IBND("U1"),"^",J)
"RTN","IBCCC2",78,0)
 Q
"RTN","IBCCC2",79,0)
U2 F J=1:1:19 I $P(IBND("U2"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U2"),"^",J)=$P(IBND("U2"),"^",J)
"RTN","IBCCC2",80,0)
 Q
"RTN","IBCCC2",81,0)
U3 F J=1:1:11 I $P(IBND("U3"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U3"),"^",J)=$P(IBND("U3"),"^",J)
"RTN","IBCCC2",82,0)
 Q
"RTN","IBCCC2",83,0)
UF2 F J=1,3 I $P(IBND("UF2"),"^",J)]"" S $P(^DGCR(399,IBIFN,"UF2"),"^",J)=$P(IBND("UF2"),"^",J)
"RTN","IBCCC2",84,0)
 Q
"RTN","IBCCC2",85,0)
UF3 F J=4:1:6 I $P(IBND("UF3"),"^",J)]"" S $P(^DGCR(399,IBIFN,"UF3"),"^",J)=$P(IBND("UF3"),"^",J)
"RTN","IBCCC2",86,0)
 Q
"RTN","IBCCC2",87,0)
U4 F J=1:1:14 I $P(IBND("U4"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U4"),"^",J)=$P(IBND("U4"),"^",J)
"RTN","IBCCC2",88,0)
 Q
"RTN","IBCCC2",89,0)
U5 F J=1:1:6 I $P(IBND("U5"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U5"),"^",J)=$P(IBND("U5"),"^",J)
"RTN","IBCCC2",90,0)
 Q
"RTN","IBCCC2",91,0)
U6 F J=1:1:6 I $P(IBND("U6"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U6"),"^",J)=$P(IBND("U6"),"^",J)
"RTN","IBCCC2",92,0)
 Q
"RTN","IBCCC2",93,0)
U7 F J=1:1:5 I $P(IBND("U7"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U7"),"^",J)=$P(IBND("U7"),"^",J)
"RTN","IBCCC2",94,0)
 Q
"RTN","IBCCC2",95,0)
U8 F J=1:1:3 I $P(IBND("U8"),"^",J)]"" S $P(^DGCR(399,IBIFN,"U8"),"^",J)=$P(IBND("U8"),"^",J)
"RTN","IBCCC2",96,0)
 Q
"RTN","IBCCC2",97,0)
UF31 F J=3 I $P(IBND("UF31"),"^",J)]"" S $P(^DGCR(399,IBIFN,"UF31"),"^",J)=$P(IBND("UF31"),"^",J)
"RTN","IBCCC2",98,0)
 Q
"RTN","IBCCC2",99,0)
UF32 F J=1:1:3 I $P(IBND("UF32"),"^",J)]"" S $P(^DGCR(399,IBIFN,"UF32"),"^",J)=$P(IBND("UF32"),"^",J)
"RTN","IBCCC2",100,0)
 Q
"RTN","IBCCC2",101,0)
C F J=10 I $P(IBND("C"),"^",J)]"" S $P(^DGCR(399,IBIFN,"C"),"^",J)=$P(IBND("C"),"^",J)
"RTN","IBCCC2",102,0)
 I '$D(^DGCR(399,IBIFN1,"CP")) D CP1
"RTN","IBCCC2",103,0)
 Q
"RTN","IBCCC2",104,0)
M F J=1:1:9,11:1:14 I $P(IBND("M"),"^",J)]"" S $P(^DGCR(399,IBIFN,"M"),"^",J)=$P(IBND("M"),"^",J)
"RTN","IBCCC2",105,0)
 Q
"RTN","IBCCC2",106,0)
CC S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",107,0)
 S IBDD=399.04 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",108,0)
OP S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",109,0)
 S IBDD=399.043 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",110,0)
 Q
"RTN","IBCCC2",111,0)
OC S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",112,0)
 S IBDD=399.041 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",113,0)
 Q
"RTN","IBCCC2",114,0)
OT S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",115,0)
 S IBDD=399.048 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",116,0)
 Q
"RTN","IBCCC2",117,0)
CV ; Don't copy value codes from inpatient inst to inpatient prof bills
"RTN","IBCCC2",118,0)
 I $$FT^IBCEF(IBIFN1)'=2,$$FT^IBCEF(IBIFN)=2 Q
"RTN","IBCCC2",119,0)
 S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",120,0)
 S IBDD=399.047 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S ^DGCR(399,IBIFN,I,J,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",121,0)
 Q
"RTN","IBCCC2",122,0)
RC S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",123,0)
 S IBDD=399.042 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S IBND("RC")=^(0) F K=1:1:16 S $P(^DGCR(399,IBIFN,I,J,0),"^",K)=$P(IBND("RC"),"^",K),X=$P(IBND("RC"),"^",K)
"RTN","IBCCC2",124,0)
 Q
"RTN","IBCCC2",125,0)
CP S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0)
"RTN","IBCCC2",126,0)
 I +$G(IBNOCPT) Q
"RTN","IBCCC2",127,0)
 S IBDD=399.0304 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) S IBND("CP")=^(0),IBND("CP1")=$G(^(1)),IBND("CP2")=$G(^(2)),IBND("CP-AUX")=$G(^("AUX")) D
"RTN","IBCCC2",128,0)
 . F K=1:1:7,9:1:14,16:1:22 S $P(^DGCR(399,IBIFN,I,J,0),"^",K)=$P(IBND("CP"),"^",K)
"RTN","IBCCC2",129,0)
 . ; IB*2.0*432 add new 1 node
"RTN","IBCCC2",130,0)
 . ; MRD;IB*2.0*516 - Added pieces 7 & 8 (NDC, Units) to 1-node.
"RTN","IBCCC2",131,0)
 . F K=1:1:8 S $P(^DGCR(399,IBIFN,I,J,1),"^",K)=$P(IBND("CP1"),"^",K)
"RTN","IBCCC2",132,0)
 . ; WCJ;IB*2.0*577 - Added piece 1 (UNITS/BASIS OF MEASUREMENT) to 2-node.
"RTN","IBCCC2",133,0)
 . F K=1:1:1 S $P(^DGCR(399,IBIFN,I,J,2),"^",K)=$P(IBND("CP2"),"^",K)
"RTN","IBCCC2",134,0)
 . ; esg - 11/2/06 - IB*2*348 - 50.09 field was added - AUX piece [9]
"RTN","IBCCC2",135,0)
 . I IBND("CP-AUX")'="" F K=1:1:9 S $P(^DGCR(399,IBIFN,I,J,"AUX"),"^",K)=$P(IBND("CP-AUX"),"^",K)
"RTN","IBCCC2",136,0)
 . ; IB*2.0*432 add new LNPRV multiple
"RTN","IBCCC2",137,0)
 . I $D(^DGCR(399,IBIFN1,I,J,"LNPRV",0)) S ^DGCR(399,IBIFN,I,J,"LNPRV",0)=^DGCR(399,IBIFN1,I,J,"LNPRV",0) D
"RTN","IBCCC2",138,0)
 .. S K=0 F  S K=$O(^DGCR(399,IBIFN1,I,J,"LNPRV",K)) Q:'K  D
"RTN","IBCCC2",139,0)
 ... S ^DGCR(399,IBIFN,I,J,"LNPRV",K,0)=^DGCR(399,IBIFN1,I,J,"LNPRV",K,0)
"RTN","IBCCC2",140,0)
 . I $D(^DGCR(399,IBIFN1,I,J,"MOD",0)) S ^DGCR(399,IBIFN,I,J,"MOD",0)=^DGCR(399,IBIFN1,I,J,"MOD",0) D
"RTN","IBCCC2",141,0)
 .. S K=0 F  S K=$O(^DGCR(399,IBIFN1,I,J,"MOD",K)) Q:'K  D
"RTN","IBCCC2",142,0)
 ... I $G(IBNOTC),$P($$MOD^ICPTMOD(+$P($G(^DGCR(399,IBIFN1,I,J,"MOD",K,0)),U,2),"I"),U,2)="TC" Q  ; Don't copy TC modifier from inst to prof bill
"RTN","IBCCC2",143,0)
 ... S ^DGCR(399,IBIFN,I,J,"MOD",K,0)=^DGCR(399,IBIFN1,I,J,"MOD",K,0)
"RTN","IBCCC2",144,0)
 . ;JWS;IB*2.0*592;add new Dental claim form fields
"RTN","IBCCC2",145,0)
 . I $D(^DGCR(399,IBIFN1,I,J,"DEN")) S ^DGCR(399,IBIFN,I,J,"DEN")=^DGCR(399,IBIFN1,I,J,"DEN")
"RTN","IBCCC2",146,0)
 . I $D(^DGCR(399,IBIFN1,I,J,"DEN1",0)) S ^DGCR(399,IBIFN,I,J,"DEN1",0)=^DGCR(399,IBIFN1,I,J,"DEN1",0) D
"RTN","IBCCC2",147,0)
 .. N IBDL
"RTN","IBCCC2",148,0)
 .. S K=0 F  S K=$O(^DGCR(399,IBIFN1,I,J,"DEN1",K)) Q:'K  D
"RTN","IBCCC2",149,0)
 ... S ^DGCR(399,IBIFN,I,J,"DEN1",K,0)=^DGCR(399,IBIFN1,I,J,"DEN1",K,0)
"RTN","IBCCC2",150,0)
 ... ;JWS;IB*2.0*592;If DENT file 228.2 link, remove it from old invoice.
"RTN","IBCCC2",151,0)
 ... S IBDL=$P($G(^DGCR(399,IBIFN1,I,J,"DEN1",K,0)),"^",7)
"RTN","IBCCC2",152,0)
 ... I IBDL K ^DGCR(399,"ADT",IBDL,IBIFN1)
"RTN","IBCCC2",153,0)
CP1 S IBCOD=$P($G(^DGCR(399,IBIFN,0)),"^",9) Q:IBCOD=""!('$D(^DGCR(399,IBIFN1,"C")))
"RTN","IBCCC2",154,0)
 I IBCOD=9 F DGI=4,5,6 I $P(^DGCR(399,IBIFN1,"C"),"^",DGI) S X=$P(^("C"),"^",DGI)_";ICD0(",DGPROCDT=$P(^("C"),"^",DGI+7) D FILE
"RTN","IBCCC2",155,0)
 I IBCOD=4 F DGI=1,2,3 I $P(^DGCR(399,IBIFN1,"C"),"^",DGI) S X=$P(^("C"),"^",DGI)_";ICPT(",DGPROCDT=$P(^("C"),"^",DGI+10) D FILE
"RTN","IBCCC2",156,0)
 I IBCOD=5 F DGI=7,8,9 I $P(^DGCR(399,IBIFN1,"C"),"^",DGI) S X=$P(^("C"),"^",DGI)_";ICPT(",DGPROCDT=$P(^("C"),"^",DGI+4) D FILE
"RTN","IBCCC2",157,0)
 Q
"RTN","IBCCC2",158,0)
 ;
"RTN","IBCCC2",159,0)
PRV ; Copy providers for cloned claim
"RTN","IBCCC2",160,0)
 N Z,Z0,CNT
"RTN","IBCCC2",161,0)
 S Z=$P($G(^DGCR(399,IBIFN,0)),U,19),Z0=$P($G(^DGCR(399,IBIFN1,0)),U,19),CNT=0
"RTN","IBCCC2",162,0)
 S IBDD=399.0222 F J=0:0 S J=$O(^DGCR(399,IBIFN1,I,J)) Q:'J  I $D(^(J,0)) D
"RTN","IBCCC2",163,0)
 . I $$GETNPI^IBCEF73A($P(^DGCR(399,IBIFN1,I,J,0),U,2))="" Q  ;Don't file provider if no NPI - IB*2*516
"RTN","IBCCC2",164,0)
 . S CNT=CNT+1,^DGCR(399,IBIFN,I,CNT,0)=^DGCR(399,IBIFN1,I,J,0),X=$P(^(0),"^")
"RTN","IBCCC2",165,0)
 . I Z'=Z0,$S(X=3:Z0=3,X=4:Z0=2,1:0) S $P(^DGCR(399,IBIFN,I,CNT,0),U)=(Z0+1)
"RTN","IBCCC2",166,0)
 I CNT S ^DGCR(399,IBIFN,I,0)=^DGCR(399,IBIFN1,I,0),$P(^DGCR(399,IBIFN,I,0),U,3)=CNT,$P(^DGCR(399,IBIFN,I,0),U,4)=CNT
"RTN","IBCCC2",167,0)
 Q
"RTN","IBCCC2",168,0)
 ;
"RTN","IBCCC2",169,0)
U9 ; Added for new data elements in IB*2.0*447 BI
"RTN","IBCCC2",170,0)
 M ^DGCR(399,IBIFN,I)=^DGCR(399,IBIFN1,I)
"RTN","IBCCC2",171,0)
 Q
"RTN","IBCCC2",172,0)
 ;
"RTN","IBCCC2",173,0)
COB S J=0 F  S J=$O(IBCOB(I,J)) Q:'J  S $P(^DGCR(399,IBIFN,I),U,J)=IBCOB(I,J)
"RTN","IBCCC2",174,0)
 Q
"RTN","IBCCC2",175,0)
 ;
"RTN","IBCCC2",176,0)
FILE N DIC,DIE,DR,DA,X,Y,DLAYGO,DD,DO
"RTN","IBCCC2",177,0)
 I '$D(^DGCR(399,IBIFN,"CP",0)) S DIC("P")=$$GETSPEC^IBEFUNC(399,304)
"RTN","IBCCC2",178,0)
 S DIC(0)="L",DLAYGO=399,DA(1)=IBIFN,DIC="^DGCR(399,"_DA(1)_",""CP""," Q:X=""  D FILE^DICN K DO,DD Q:+Y<1  S DA=+Y
"RTN","IBCCC2",179,0)
 S DIE="^DGCR(399,"_DA(1)_",""CP"",",DR="1///"_DGPROCDT D ^DIE
"RTN","IBCCC2",180,0)
 K DGPROCDT
"RTN","IBCCC2",181,0)
 Q
"RTN","IBCCC2",182,0)
 ;
"RTN","IBCCC2",183,0)
INDEX ;index entire file (set logic)
"RTN","IBCCC2",184,0)
 N IBMAED D SAVERC(IBIFN,.IBMAED)  ; IB*2.0*447 BI - Save the value of piece 16 of each RC node before re-indexing.
"RTN","IBCCC2",185,0)
 S DIK="^DGCR(399,",DA=IBIFN D IX1^DIK K DA,DIK
"RTN","IBCCC2",186,0)
 D RESTRC(IBIFN,.IBMAED)  ; IB*2.0*447 BI - Restore the value of piece 16 of each RC node before re-indexing.
"RTN","IBCCC2",187,0)
 Q
"RTN","IBCCC2",188,0)
 ;
"RTN","IBCCC2",189,0)
PRIOR(IBIFN) ; set Secondary/Tertiary Bill #s on prior bills, if the bill is cancelled remove it from prior bills
"RTN","IBCCC2",190,0)
 N IBSEQ,IBSEQN,IBM1,I,IBIFN1
"RTN","IBCCC2",191,0)
 S IBSEQ=$$COB^IBCEF(IBIFN)
"RTN","IBCCC2",192,0)
 S IBSEQN=$S(IBSEQ="S":6,IBSEQ="T":7,1:"") Q:'IBSEQN
"RTN","IBCCC2",193,0)
 ;
"RTN","IBCCC2",194,0)
 S IBM1=$G(^DGCR(399,IBIFN,"M1")) I +$P(^DGCR(399,IBIFN,0),U,13)=7 S IBIFN=""
"RTN","IBCCC2",195,0)
 F I=5,6 I I<IBSEQN  S IBIFN1=+$P(IBM1,U,I) I +IBIFN1,$D(^DGCR(399,+IBIFN1,0)) S $P(^DGCR(399,IBIFN1,"M1"),U,IBSEQN)=IBIFN
"RTN","IBCCC2",196,0)
 Q
"RTN","IBCCC2",197,0)
 ;
"RTN","IBCCC2",198,0)
COBCHG(IBIFN,IBINS,IBCOB) ; Make changes for a new COB payer for bill
"RTN","IBCCC2",199,0)
 ; IBIFN = ien of bill in file 399
"RTN","IBCCC2",200,0)
 ; IBINS = ien of bill's current insurance (optional)
"RTN","IBCCC2",201,0)
 ; IBCOB = array subscripted by node,piece of COB data field change
"RTN","IBCCC2",202,0)
 ;
"RTN","IBCCC2",203,0)
 N I,IBFRMTYP,IBTAXLST
"RTN","IBCCC2",204,0)
 ; Subtract the Prior Payments from the bill's Offset (these are re-added by triggers)
"RTN","IBCCC2",205,0)
 F I=4,5,6  S $P(^DGCR(399,IBIFN,"U1"),U,2)=$P($G(^DGCR(399,IBIFN,"U1")),U,2)-$P($G(^DGCR(399,IBIFN,"U2")),U,I)
"RTN","IBCCC2",206,0)
 ;
"RTN","IBCCC2",207,0)
 I $G(IBINS),$$MCRWNR^IBEFUNC(IBINS) D
"RTN","IBCCC2",208,0)
 . ;MCRWNR is current insurance ... move payer only
"RTN","IBCCC2",209,0)
 . N IBCOBN,IBX
"RTN","IBCCC2",210,0)
 . S IBCOBN=$$COBN^IBCEF(IBIFN)
"RTN","IBCCC2",211,0)
 . S IBCOB(0,21)=$P("S^T^",U,IBCOBN)
"RTN","IBCCC2",212,0)
 . S IBCOB("M1",IBCOBN+4)=IBIFN
"RTN","IBCCC2",213,0)
 . S IBCOB("TX",1)="",IBCOB("TX",2)=""
"RTN","IBCCC2",214,0)
 . S IBX=$$REQMRA^IBEFUNC(IBIFN)
"RTN","IBCCC2",215,0)
 . I IBX=0 S IBCOB("TX",5)=0                         ; MRA not needed
"RTN","IBCCC2",216,0)
 . I IBX["R" S IBCOB("TX",5)="A"                     ; MRA skipped
"RTN","IBCCC2",217,0)
 . I IBX=1,$$CHK^IBCEMU1(IBIFN) S IBCOB("TX",5)="C"  ; MRA on file
"RTN","IBCCC2",218,0)
 . I $G(IBPRCOB) S IBCOB("TX",5)="C"                 ; MRA being proc'd
"RTN","IBCCC2",219,0)
 . D PRIOR(IBIFN)
"RTN","IBCCC2",220,0)
 . Q
"RTN","IBCCC2",221,0)
 ;
"RTN","IBCCC2",222,0)
 ;reset fields for next Sequence Payer
"RTN","IBCCC2",223,0)
 F I=0,"M1","U2","TX" I $D(IBCOB(I)) D COB
"RTN","IBCCC2",224,0)
 ;
"RTN","IBCCC2",225,0)
 ; IB*2.0*211
"RTN","IBCCC2",226,0)
 ; save off Form Type
"RTN","IBCCC2",227,0)
 S IBFRMTYP=$P($G(^DGCR(399,IBIFN,0)),U,19)
"RTN","IBCCC2",228,0)
 ; Save off Taxonomies for providers.
"RTN","IBCCC2",229,0)
 S I=0 F  S I=$O(^DGCR(399,IBIFN,"PRV",I)) Q:'I  S IBTAXLST(I)=$P($G(^DGCR(399,IBIFN,"PRV",I,0)),U,15)
"RTN","IBCCC2",230,0)
 ;
"RTN","IBCCC2",231,0)
 ; fire xrefs set logic
"RTN","IBCCC2",232,0)
 D INDEX
"RTN","IBCCC2",233,0)
 ;
"RTN","IBCCC2",234,0)
 ; Restore Form Type if changed, but don't restore Form Type if
"RTN","IBCCC2",235,0)
 ;   creating CMS-1500 claim from CTCOPY1^IBCCCB
"RTN","IBCCC2",236,0)
 I $G(IBCTCOPY)'=1,IBFRMTYP'=$P($G(^DGCR(399,IBIFN,0)),U,19) N DA,DIE,DR S DA=IBIFN,DIE="^DGCR(399,",DR=".19////"_IBFRMTYP D ^DIE
"RTN","IBCCC2",237,0)
 ;
"RTN","IBCCC2",238,0)
 ; Restore Claim MRA Status field since triggers in fields 101 & 102
"RTN","IBCCC2",239,0)
 ;   will overwrite the correct value when processing the MRA/EOB.
"RTN","IBCCC2",240,0)
 ; If we're processing the MRA/EOB, then a valid MRA has been received.
"RTN","IBCCC2",241,0)
 I $G(IBPRCOB) N DA,DIE,DR S DA=IBIFN,DIE="^DGCR(399,",DR="24////C" D ^DIE
"RTN","IBCCC2",242,0)
 ;
"RTN","IBCCC2",243,0)
 ; Only if cloning, then restore Taxonomies in fields 243 and 244 and 252.
"RTN","IBCCC2",244,0)
 I '$G(IBINS),'$G(IBPRCOB) D
"RTN","IBCCC2",245,0)
 . S I=$P($G(IBND("U3")),U,2)
"RTN","IBCCC2",246,0)
 . I I'=$P($G(^DGCR(399,IBIFN,"U3")),U,2) D
"RTN","IBCCC2",247,0)
 .. N DA,DIE,DR S DA=IBIFN,DIE="^DGCR(399,",DR="243////"_$S(I'="":I,1:"@") D ^DIE
"RTN","IBCCC2",248,0)
 . ;
"RTN","IBCCC2",249,0)
 . S I=$P($G(IBND("U3")),U,3)
"RTN","IBCCC2",250,0)
 . I I'=$P($G(^DGCR(399,IBIFN,"U3")),U,3) D
"RTN","IBCCC2",251,0)
 .. N DA,DIE,DR S DA=IBIFN,DIE="^DGCR(399,",DR="244////"_$S(I'="":I,1:"@") D ^DIE
"RTN","IBCCC2",252,0)
 . ;
"RTN","IBCCC2",253,0)
 . S I=$P($G(IBND("U3")),U,11)
"RTN","IBCCC2",254,0)
 . I I'=$P($G(^DGCR(399,IBIFN,"U3")),U,11) D
"RTN","IBCCC2",255,0)
 .. N DA,DIE,DR S DA=IBIFN,DIE="^DGCR(399,",DR="252////"_$S(I'="":I,1:"@") D ^DIE
"RTN","IBCCC2",256,0)
 . Q
"RTN","IBCCC2",257,0)
 ;
"RTN","IBCCC2",258,0)
 ; Restore Taxonomies in field .15 in sub-file 399.0222.
"RTN","IBCCC2",259,0)
 S IBTAXLST=0 F  S IBTAXLST=$O(IBTAXLST(IBTAXLST)) Q:'IBTAXLST  D
"RTN","IBCCC2",260,0)
 . S I=IBTAXLST(IBTAXLST)
"RTN","IBCCC2",261,0)
 . I I=$P($G(^DGCR(399,IBIFN,"PRV",IBTAXLST,0)),U,15) Q  ; No change
"RTN","IBCCC2",262,0)
 . N DA,DIE,DR
"RTN","IBCCC2",263,0)
 . S DA(1)=IBIFN,DA=IBTAXLST
"RTN","IBCCC2",264,0)
 . S DIE="^DGCR(399,"_DA(1)_",""PRV"",",DR=".15////"_$S(I'="":I,1:"@")
"RTN","IBCCC2",265,0)
 . D ^DIE
"RTN","IBCCC2",266,0)
 . Q
"RTN","IBCCC2",267,0)
 ;
"RTN","IBCCC2",268,0)
 K IBCOB("TX")
"RTN","IBCCC2",269,0)
 Q
"RTN","IBCCC2",270,0)
 ;
"RTN","IBCCC2",271,0)
SAVERC(IBIFN,IBMAED)  ; IB*2.0*447 BI - Save the value of piece 16 of each RC node before re-indexing.
"RTN","IBCCC2",272,0)
 Q:$G(IBCTCOPY)=1  Q:$G(IBCTCOPY)=2
"RTN","IBCCC2",273,0)
 N IBCNT S IBCNT=0
"RTN","IBCCC2",274,0)
 Q:'$G(IBIFN)  Q:'$D(^DGCR(399,IBIFN,"RC"))
"RTN","IBCCC2",275,0)
 F  S IBCNT=$O(^DGCR(399,IBIFN,"RC",IBCNT)) Q:+IBCNT=0  D
"RTN","IBCCC2",276,0)
 . S IBMAED(IBCNT)=$P($G(^DGCR(399,IBIFN,"RC",IBCNT,0)),U,16)
"RTN","IBCCC2",277,0)
 Q
"RTN","IBCCC2",278,0)
 ;
"RTN","IBCCC2",279,0)
RESTRC(IBIFN,IBMAED)  ; IB*2.0*447 BI - Restore the value of piece 16 of each RC node after re-indexing.
"RTN","IBCCC2",280,0)
 Q:$G(IBCTCOPY)=1  Q:$G(IBCTCOPY)=2
"RTN","IBCCC2",281,0)
 N IBCNT S IBCNT=0
"RTN","IBCCC2",282,0)
 Q:'$G(IBIFN)  Q:'$D(^DGCR(399,IBIFN,"RC"))
"RTN","IBCCC2",283,0)
 F  S IBCNT=$O(IBMAED(IBCNT)) Q:+IBCNT=0  D
"RTN","IBCCC2",284,0)
 . S $P(^DGCR(399,IBIFN,"RC",IBCNT,0),U,16)=IBMAED(IBCNT)
"RTN","IBCCC2",285,0)
 Q
"RTN","IBCCCB")
0^113^B69998432^B69153739
"RTN","IBCCCB",1,0)
IBCCCB ;ALB/ARH - COPY BILL FOR COB ;2/13/06 10:46am
"RTN","IBCCCB",2,0)
 ;;2.0;INTEGRATED BILLING;**80,106,51,151,137,182,155,323,436,432,447,547,592**;21-MAR-94;Build 58
"RTN","IBCCCB",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCCCB",4,0)
 ;
"RTN","IBCCCB",5,0)
 ; Copy bill for COB w/out cancelling, update some flds
"RTN","IBCCCB",6,0)
 ; Primary->Secondary->Tertiary
"RTN","IBCCCB",7,0)
ASK ;
"RTN","IBCCCB",8,0)
 S IBCBCOPY=1 ; flag that copy function entered thru Copy COB option
"RTN","IBCCCB",9,0)
 ;
"RTN","IBCCCB",10,0)
 D KVAR S IBCAN=2,IBU="UNSPECIFIED"
"RTN","IBCCCB",11,0)
 ;
"RTN","IBCCCB",12,0)
 S IBX=$$PB^IBJTU2 S:+IBX=2 IBIFN=$P(IBX,U,2) I +IBX=1 S DFN=$P(IBX,U,2),IBV=1,IBAC=5 D DATE^IBCB
"RTN","IBCCCB",13,0)
 I '$G(IBIFN) G EXIT
"RTN","IBCCCB",14,0)
 ;
"RTN","IBCCCB",15,0)
 ; IB*2.0*432 Restrict access to only allow claims that are NOT on the new CBW Worklist
"RTN","IBCCCB",16,0)
 I $P($G(^DGCR(399,IBIFN,"S1")),U,7)=1,$G(IBMRANOT)'=1 D  G ASK
"RTN","IBCCCB",17,0)
 . W !!?4,"This bill appears on the CBW Management Work List.  Please use the"
"RTN","IBCCCB",18,0)
 . W !?4,"'CBW Management Menu' options for all processing related to this bill."
"RTN","IBCCCB",19,0)
 . S IBQUIT=1  ;IB*2.0*592 JRA need to set quit flag after issuing this message
"RTN","IBCCCB",20,0)
 . Q
"RTN","IBCCCB",21,0)
 ; Restrict access to this process for REQUEST MRA bills in 2 Cases:
"RTN","IBCCCB",22,0)
 ; 1. No MRA EOB's on File for bill
"RTN","IBCCCB",23,0)
 I $P($G(^DGCR(399,IBIFN,0)),U,13)=2,'$$CHK^IBCEMU1(IBIFN) D  G ASK
"RTN","IBCCCB",24,0)
 . W !!?4,"This bill is in a status of REQUEST MRA and it has No MRA EOB's"
"RTN","IBCCCB",25,0)
 . W !?4,"on file.  Access to this bill is restricted."
"RTN","IBCCCB",26,0)
 ;
"RTN","IBCCCB",27,0)
 ; 2. At least one MRA EOB appears on the MRA management worklist
"RTN","IBCCCB",28,0)
 I $P($G(^DGCR(399,IBIFN,0)),U,13)=2,$$MRAWL^IBCEMU2(IBIFN) D  G ASK
"RTN","IBCCCB",29,0)
 . W !!?4,"This bill is in a status of REQUEST MRA and it does appear on the"
"RTN","IBCCCB",30,0)
 . W !?4,"MRA Management Work List.  Please use the 'MRA Management Menu' options"
"RTN","IBCCCB",31,0)
 . W !?4,"for all processing related to this bill."
"RTN","IBCCCB",32,0)
 . Q
"RTN","IBCCCB",33,0)
 ;
"RTN","IBCCCB",34,0)
 ; If MRA is Activated and bill is in Entered/Not Reviewed status and current insurance Co. is WNR -->
"RTN","IBCCCB",35,0)
 ; ask if user wants to continue
"RTN","IBCCCB",36,0)
 I $$EDIACTV^IBCEF4(2),$P($G(^DGCR(399,IBIFN,0)),U,13)=1,$$MCRWNR^IBEFUNC(+$$CURR^IBCEF2(IBIFN)) D  I 'Y G ASK
"RTN","IBCCCB",37,0)
 . W !!?4,"This bill is in a status of ENTERED/NOT REVIEWED and current payer is "
"RTN","IBCCCB",38,0)
 . W !?4,"MEDICARE (WNR). No MRA has been requested for this bill."
"RTN","IBCCCB",39,0)
 . S DIR(0)="YA",DIR("B")="NO",DIR("A")="    Are you sure you want to continue to process this bill?: "
"RTN","IBCCCB",40,0)
 . D ^DIR K DIR
"RTN","IBCCCB",41,0)
 ;
"RTN","IBCCCB",42,0)
 ; Display related bills
"RTN","IBCCCB",43,0)
 D DSPRB^IBCCCB0(IBIFN)
"RTN","IBCCCB",44,0)
 ;
"RTN","IBCCCB",45,0)
CHKB ; Entrypoint-COB processing via EDI's COB Mgmt
"RTN","IBCCCB",46,0)
 ; Ask if final EOB was received for previous bill
"RTN","IBCCCB",47,0)
 I '$$FINALEOB^IBCCCB0(IBIFN) S IBSECHK=1
"RTN","IBCCCB",48,0)
 I $G(IBSECHK)=1,$$MCRONBIL^IBEFUNC(IBIFN) G EXIT
"RTN","IBCCCB",49,0)
 ;
"RTN","IBCCCB",50,0)
 ; Warn if previous bill not at least authorized
"RTN","IBCCCB",51,0)
 I '$$MCRONBIL^IBEFUNC(IBIFN) I '$$COBOK^IBCCCB0(IBIFN) G EXIT
"RTN","IBCCCB",52,0)
 ;
"RTN","IBCCCB",53,0)
CHKB1 ; Entry point for Automatic/Silent COB Processing.
"RTN","IBCCCB",54,0)
 ; No writes or reads can occur from this point forward if variable
"RTN","IBCCCB",55,0)
 ; IBSILENT=1.  Any and all error messages should be processed with
"RTN","IBCCCB",56,0)
 ; the ERROR procedure below.
"RTN","IBCCCB",57,0)
 ;
"RTN","IBCCCB",58,0)
 S IBX=$G(^DGCR(399,+IBIFN,0)),DFN=$P(IBX,U,2),IBDT=$P(IBX,U,3)\1,IBER=""
"RTN","IBCCCB",59,0)
 I IBCAN>1 D NOPTF^IBCB2 I 'IBAC1 D NOPTF1^IBCB2 G ASK1
"RTN","IBCCCB",60,0)
 ;
"RTN","IBCCCB",61,0)
 F IBI=0,"S","U1","M","MP","M1" S IB(IBI)=$G(^DGCR(399,IBIFN,IBI))
"RTN","IBCCCB",62,0)
 I IB(0)="" S IBER="Invalid Bill Number" D ERROR G ASK1
"RTN","IBCCCB",63,0)
 ;
"RTN","IBCCCB",64,0)
 ; check to see if the bill has been cancelled
"RTN","IBCCCB",65,0)
 I $P(IB("S"),U,16),$P(IB("S"),U,17) D  G ASK1
"RTN","IBCCCB",66,0)
 . N WHO
"RTN","IBCCCB",67,0)
 . S IBER="This bill was cancelled on "
"RTN","IBCCCB",68,0)
 . S IBER=IBER_$$FMTE^XLFDT($P(IB("S"),U,17),"1Z")_" by "
"RTN","IBCCCB",69,0)
 . S WHO="UNSPECIFIED"
"RTN","IBCCCB",70,0)
 . I $P(IB("S"),U,18) S WHO=$P($G(^VA(200,$P(IB("S"),U,18),0)),U,1)
"RTN","IBCCCB",71,0)
 . S IBER=IBER_WHO_"."
"RTN","IBCCCB",72,0)
 . D ERROR
"RTN","IBCCCB",73,0)
 . Q
"RTN","IBCCCB",74,0)
 ;
"RTN","IBCCCB",75,0)
 S IBCOB=$$COB^IBCEF(IBIFN),IBCOBN=$TR(IBCOB,"PSTA","12")
"RTN","IBCCCB",76,0)
 S IBMRAIO=+$$CURR^IBCEF2(IBIFN),IBMRAO=$$MCRWNR^IBEFUNC(IBMRAIO)
"RTN","IBCCCB",77,0)
 S IBNMOLD=$S(IBCOB="P":"Primary",IBCOB="S":"Secondary",IBCOB="T":"Tertiary",IBCOB="A":"Patient",1:"")_$S(IBMRAO:"-MRA Only",1:"")
"RTN","IBCCCB",78,0)
 S IBINSOLD=$G(^DIC(36,$S(IB("MP"):+IB("MP"),IBMRAO:IBMRAIO,1:0),0))
"RTN","IBCCCB",79,0)
 ;
"RTN","IBCCCB",80,0)
NEXTP ; If current bill=MEDICARE WNR and valid 'next payer', use same
"RTN","IBCCCB",81,0)
 ;  bill for new payer
"RTN","IBCCCB",82,0)
 ; If next valid 'payer' is ins co or MEDICARE WNR, create new bill
"RTN","IBCCCB",83,0)
 S IBCOBN=IBCOBN+1,IBNM=$S(IBCOBN=2:"Secondary Payer",IBCOBN=3:"Tertiary Payer",1:"")
"RTN","IBCCCB",84,0)
 ;
"RTN","IBCCCB",85,0)
 I IBNM="" S IBER=$P(IB(0),U,1)_" is a "_IBNMOLD_" bill, there is no next bill in the series." D ERROR G ASK1
"RTN","IBCCCB",86,0)
 ;
"RTN","IBCCCB",87,0)
 S IBX=+$P(IB("M1"),U,(4+IBCOBN)),IBY=$G(^DGCR(399,+IBX,0)),IBCOBIL(+IBIFN)=""
"RTN","IBCCCB",88,0)
 ;
"RTN","IBCCCB",89,0)
 I $P(IBY,U,13)=7 S IBER="The "_$P(IBNM," ",1)_" bill "_$P(IBY,U,1)_" has been cancelled." D ERROR S IBX=""
"RTN","IBCCCB",90,0)
 ;
"RTN","IBCCCB",91,0)
 I +IBX,$D(IBCOBIL(+IBX)) S IBER="Next bill in series can not be determined." D ERROR G ASK1
"RTN","IBCCCB",92,0)
 I +IBX S IBER=$P(IBNM," ",1)_" bill already defined for this series: "_$P(IBY,U,1) D ERROR S IBIFN=IBX G ASK1
"RTN","IBCCCB",93,0)
 ;
"RTN","IBCCCB",94,0)
 S IBINSN=$P(IB("M"),U,IBCOBN) I 'IBINSN S IBER="There is no "_IBNM_" for "_$P(IB(0),U,1)_"." D ERROR G ASK1
"RTN","IBCCCB",95,0)
 S IBINS=$G(^DIC(36,+IBINSN,0)) I IBINS="" S IBER="The "_IBNM_" for "_$P(IB(0),U,1)_" is not a valid Insurance Co." D ERROR G ASK1
"RTN","IBCCCB",96,0)
 ;
"RTN","IBCCCB",97,0)
 S IBMRA=0
"RTN","IBCCCB",98,0)
 I $P(IBINS,U,2)="N" S IBQ=0 D  G:IBQ NEXTP
"RTN","IBCCCB",99,0)
 . I $$MCRWNR^IBEFUNC(IBINSN) D  Q
"RTN","IBCCCB",100,0)
 .. ; Check if a valid tert ins if MCR WNR secondary
"RTN","IBCCCB",101,0)
 .. I IBCOBN'>2 D
"RTN","IBCCCB",102,0)
 ... N Z
"RTN","IBCCCB",103,0)
 ... S Z=+$P(IB("M"),U,IBCOBN+1)
"RTN","IBCCCB",104,0)
 ... I Z,$D(^DIC(36,Z,0)),$P(^(0),U,2)'="N" S IBMRA=1,IBNM=$P(IBNM," ")_"-MRA.Only"
"RTN","IBCCCB",105,0)
 .. I 'IBMRA S IBER="MEDICARE will not reimburse and no further valid insurance for bill" D ERROR S IBQ=1
"RTN","IBCCCB",106,0)
 . S IBER=$P(IB(0),U,1)_" "_IBNM_", "_$P(IBINS,U,1)_", will not Reimburse" D ERROR S IBQ=1
"RTN","IBCCCB",107,0)
 ;
"RTN","IBCCCB",108,0)
 ; If processing in silent mode, skip over the following reads
"RTN","IBCCCB",109,0)
 I $G(IBSILENT) G SKIP
"RTN","IBCCCB",110,0)
 ;
"RTN","IBCCCB",111,0)
 W !!
"RTN","IBCCCB",112,0)
 S DIR("?")="Enter Yes to "_$S('$G(IBMRAO):"create a new bill in the bill series for this care.  The new bill will be the "_$P(IBNM," ")_" bill ",1:"enter the MRA information and change the payer to the "_$P($P(IBNM,"-")," ")_" payer ")
"RTN","IBCCCB",113,0)
 S DIR("?")=DIR("?")_$S('IBMRA:"with the "_IBNM_" responsible for payment.",1:"and will request an MRA from MEDICARE.")
"RTN","IBCCCB",114,0)
 S DIR(0)="YO",DIR("A")=$S('$G(IBMRAO):"Copy "_$P(IB(0),U,1)_" for a bill to the ",1:"Change payer on bill "_$P(IB(0),U,1)_" to ")_IBNM_", "_$P(IBINS,U,1) D ^DIR K DIR I Y'=1 S IBSECHK=1 G ASK1
"RTN","IBCCCB",115,0)
 ;
"RTN","IBCCCB",116,0)
 W !
"RTN","IBCCCB",117,0)
 S IBQ=0
"RTN","IBCCCB",118,0)
 I '$G(IBMRAO) D  G:IBQ ASK1
"RTN","IBCCCB",119,0)
 . N Z
"RTN","IBCCCB",120,0)
 . S DIR("?")="Enter the amount of the payment from the payer of the "_IBNMOLD_" bill."
"RTN","IBCCCB",121,0)
 . S DIR("?")=DIR("?")_"  This will be added to the new bill as a prior payment and subtracted from the charges due for the new bill."
"RTN","IBCCCB",122,0)
 . S DIR("A")="Prior Payment from "_$P(IB(0),U,1)_" "_IBNMOLD_" Payer, "_$P(IBINSOLD,U,1)_": "
"RTN","IBCCCB",123,0)
 . S Z=$$EOBTOT^IBCEU1(IBIFN,$$COBN^IBCEF(IBIFN))
"RTN","IBCCCB",124,0)
 . S:Z DIR("B")=Z
"RTN","IBCCCB",125,0)
 . S DIR(0)="NOA^0:99999999:2"
"RTN","IBCCCB",126,0)
 . D ^DIR K DIR I Y=""!$D(DIRUT) S IBQ=1
"RTN","IBCCCB",127,0)
 . K IBCOB
"RTN","IBCCCB",128,0)
 . S IBCOB("U2",IBCOBN+2)=Y
"RTN","IBCCCB",129,0)
 . Q
"RTN","IBCCCB",130,0)
 ;
"RTN","IBCCCB",131,0)
SKIP ; Jump here if skipping over the preceeding reads
"RTN","IBCCCB",132,0)
 ;
"RTN","IBCCCB",133,0)
 ; If payer is Medicare (WNR) update payer sequence and quit
"RTN","IBCCCB",134,0)
 I IBMRAO!($G(IBSTSM)=1) D  I $G(IBSTSM)'=1 G END
"RTN","IBCCCB",135,0)
 . N IBPRTOT,IBTOTCHG,IBPTRESP
"RTN","IBCCCB",136,0)
 . S IBTOTCHG=0
"RTN","IBCCCB",137,0)
 . ;
"RTN","IBCCCB",138,0)
 . ; Get Total Charges from BILLS/CLAIMS (#399) file
"RTN","IBCCCB",139,0)
 . S IBTOTCHG=$P($G(^DGCR(399,IBIFN,"U1")),U,1)
"RTN","IBCCCB",140,0)
 . ; Calculate Patient Responsibility for Bill  
"RTN","IBCCCB",141,0)
 . ; IB*2.0*447 If claim's type of plan has effective date multiple, use those calculations
"RTN","IBCCCB",142,0)
 . ;S IBPTRESP=$$PREOBTOT^IBCEU0(IBIFN,$G(IBSTSM))
"RTN","IBCCCB",143,0)
 . ; Calculate Patient Primary/Secondary Prior Payment (field 218 or 219 of File 399)
"RTN","IBCCCB",144,0)
 . ; These fields are stored in DGCR(399,IBIFN,"U2") pieces 4 and 5 respectively
"RTN","IBCCCB",145,0)
 . ; Calculate: Prior Payment= Total Submitted Charges - Patient Responsibility
"RTN","IBCCCB",146,0)
 . S:$G(IBSTSM)'=1 IBPTRESP=$S($$MSEDT^IBCEMU4(IBIFN)'="":$$MSPRE^IBCEMU4(IBIFN),1:$$PREOBTOT^IBCEU0(IBIFN,$G(IBSTSM))),IBPRTOT=IBTOTCHG-IBPTRESP
"RTN","IBCCCB",147,0)
 . S:$G(IBSTSM)=1 IBPRTOT=$$EOBTOT^IBCEU1(IBIFN,$$COBN^IBCEF(IBIFN)) ;Pat Resp for non-medicare
"RTN","IBCCCB",148,0)
 . I IBPRTOT<0 S IBPRTOT=0      ; don't allow negative prior payment or offset
"RTN","IBCCCB",149,0)
 . S IBCOB("U2",IBCOBN+2)=IBPRTOT
"RTN","IBCCCB",150,0)
 . ; IB*2.0*547 don't change status back to 1.5 if auto-creating secondary or tertiary in silent mode
"RTN","IBCCCB",151,0)
 . ; D:$G(IBSTSM)'=1 COBCHG^IBCCC2(IBIFN,IBMRAIO,.IBCOB)
"RTN","IBCCCB",152,0)
 . ; D STAT^IBCEMU2(IBIFN,1.5,1)     ; mra eob status update
"RTN","IBCCCB",153,0)
 . I $G(IBSTSM)'=1 D COBCHG^IBCCC2(IBIFN,IBMRAIO,.IBCOB),STAT^IBCEMU2(IBIFN,1.5,1)     ; mra eob status update
"RTN","IBCCCB",154,0)
 . I $G(IBSILENT) S IBERRMSG=""
"RTN","IBCCCB",155,0)
 . Q
"RTN","IBCCCB",156,0)
 ;
"RTN","IBCCCB",157,0)
 ; We should NOT get to here in silent mode .... just in case
"RTN","IBCCCB",158,0)
 I $G(IBSILENT),$G(IBSTSM)'=1 G END    ; currently only MCRWNR in silent mode
"RTN","IBCCCB",159,0)
 ;
"RTN","IBCCCB",160,0)
 ; Payer is not Medicare (WNR) - Perform additional steps
"RTN","IBCCCB",161,0)
 S IBCOB(0,15)=""
"RTN","IBCCCB",162,0)
 S IBCOB(0,21)=$S(IBCOBN=2:"S",IBCOBN=3:"T",1:"")
"RTN","IBCCCB",163,0)
 I IBCOB(0,21)="" G END
"RTN","IBCCCB",164,0)
 S IBCOB("M1",IBCOBN+3)=IBIFN
"RTN","IBCCCB",165,0)
 S IBIDS(.15)=IBIFN
"RTN","IBCCCB",166,0)
 D KVAR
"RTN","IBCCCB",167,0)
 G STEP2^IBCCC
"RTN","IBCCCB",168,0)
 ;
"RTN","IBCCCB",169,0)
END ;
"RTN","IBCCCB",170,0)
 Q
"RTN","IBCCCB",171,0)
 ;
"RTN","IBCCCB",172,0)
 ;
"RTN","IBCCCB",173,0)
ASK1 ; If entering thru EDI COB processing, don't ask for new bill, quit
"RTN","IBCCCB",174,0)
 I $G(IBCBASK) G EXIT
"RTN","IBCCCB",175,0)
 G ASK
"RTN","IBCCCB",176,0)
 ;
"RTN","IBCCCB",177,0)
ERROR ; Display/Save error message
"RTN","IBCCCB",178,0)
 I '$G(IBSILENT) W !,IBER,!
"RTN","IBCCCB",179,0)
 E  S IBERRMSG=IBER
"RTN","IBCCCB",180,0)
 S IBER=""
"RTN","IBCCCB",181,0)
 I $D(IBSECHK) S IBSECHK=1
"RTN","IBCCCB",182,0)
 Q
"RTN","IBCCCB",183,0)
 ;
"RTN","IBCCCB",184,0)
EXIT K IBCAN,IBCOB,IBU
"RTN","IBCCCB",185,0)
KVAR K IBX,IBY,IBI,IBIFN,DFN,IBDT,IB,IBCOBN,IBNMOLD,IBINSOLD,IBNM,IBINSN,IBINS,IBER,DIR,IBAC,IBAC1,IBV,X,Y,IBDATA,IBT,IBND0,DIRUT,IBCOBIL,IBMRA,IBMRAI,IBMRAO,IBMRAIO,IBCBCOPY
"RTN","IBCCCB",186,0)
 K ^UTILITY($J)
"RTN","IBCCCB",187,0)
 Q
"RTN","IBCCCB",188,0)
 ;
"RTN","IBCCCB",189,0)
DSPRB(IBIFN) ; display related bills
"RTN","IBCCCB",190,0)
 ;
"RTN","IBCCCB",191,0)
 D DSPRB^IBCCCB0(IBIFN) ; Code moved for size too big
"RTN","IBCCCB",192,0)
 Q
"RTN","IBCCCB",193,0)
 ;
"RTN","IBCCCB",194,0)
 ; ==============
"RTN","IBCCCB",195,0)
 ; 
"RTN","IBCCCB",196,0)
 ; Copy a bill for Reasonable Charges without cancelling it, update certain fields
"RTN","IBCCCB",197,0)
 ;
"RTN","IBCCCB",198,0)
 ; there is always both inpt inst (created first) and prof charges, always need both bills
"RTN","IBCCCB",199,0)
 ; there may be both outpt inst (created first) and prof charges, may not need both bills
"RTN","IBCCCB",200,0)
 ; if billing by episode rather than by day (current standard) then may need multiple prof bills per day
"RTN","IBCCCB",201,0)
 ; 
"RTN","IBCCCB",202,0)
 ; Inst bills are copied to create prof Bills automatically
"RTN","IBCCCB",203,0)
 ; Subsequent prof bills may be created if the user wants them
"RTN","IBCCCB",204,0)
 ;
"RTN","IBCCCB",205,0)
 ; Only the first bill in the COB series of bills should be copied for the next prof bill
"RTN","IBCCCB",206,0)
 ; The primary inst bill should be copied to get the secondary inst bill
"RTN","IBCCCB",207,0)
 ; The primary prof bill should be copied to get the secondary prof bill
"RTN","IBCCCB",208,0)
 ;
"RTN","IBCCCB",209,0)
CTCOPY(IBIFN,IBMRA) ; based on the type of bill, copy without cancelling
"RTN","IBCCCB",210,0)
 ; IBMRA = 1 if an MRA bill and copy for prof components is desired
"RTN","IBCCCB",211,0)
 ;
"RTN","IBCCCB",212,0)
 D CTCOPY^IBCCCB0(IBIFN,$G(IBMRA)) ;Moved due to routine size
"RTN","IBCCCB",213,0)
 Q
"RTN","IBCCCB",214,0)
 ;
"RTN","IBCCPT")
0^137^B156624726^B86719137
"RTN","IBCCPT",1,0)
IBCCPT ;ALB/LDB - MCCR OUTPATIENT VISITS LISTING CONT. ;29 MAY 90
"RTN","IBCCPT",2,0)
 ;;2.0;INTEGRATED BILLING;**55,62,52,91,106,125,51,148,174,182,245,266,260,339,432,592**;21-MAR-94;Build 58
"RTN","IBCCPT",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCCPT",4,0)
 ;
"RTN","IBCCPT",5,0)
 ;MAP TO DGCRCPT
"RTN","IBCCPT",6,0)
 ;
"RTN","IBCCPT",7,0)
EN1(IBQUERY,IBHLP) ;
"RTN","IBCCPT",8,0)
 ;JWS;IB*2.0*592;
"RTN","IBCCPT",9,0)
 N IBUSED
"RTN","IBCCPT",10,0)
 K DIR
"RTN","IBCCPT",11,0)
EN D:$D(DIR) HLP W @IOF S DGU=0 K DGCPT,^UTILITY($J) D VST(.IBQUERY)
"RTN","IBCCPT",12,0)
 D CHDR,WRNO
"RTN","IBCCPT",13,0)
 N ICPTVDT S ICPTVDT=$$BDATE^IBACSV($G(IBIFN)) ; Code Text Version
"RTN","IBCCPT",14,0)
 S (DGCNT,DGCNT1)=0 F  S DGCNT=$O(^UTILITY($J,"CPT-CNT",DGCNT)) Q:'DGCNT  S DGNOD=^(DGCNT),DGCPT=+DGNOD,DGDAT=$P(DGNOD,"^",2),DGBIL=$P(DGNOD,"^",3),DGASC=$P(DGNOD,"^",4),DGDIV=$P(DGNOD,"^",5),DGCNT1=DGCNT1+1 D CPRT I DGU="^" S DGCNT=DGCNT-1 Q
"RTN","IBCCPT",15,0)
 I DGU'="^" F Y=$Y:1:IOSL-6 W !
"RTN","IBCCPT",16,0)
OK1 K Y Q:'$D(^UTILITY($J,"CPT-CNT"))!($D(DIR))!($G(IBHLP))
"RTN","IBCCPT",17,0)
OK S DIR(0)="LAO^1:"_DGCNT1_"^K:X[""."" X",DIR("?")="^N DIR D EN1^IBCCPT(.IBQUERY,1)",DIR("A")="SELECT CPT CODE(S) TO INCLUDE IN THIS BILL: "
"RTN","IBCCPT",18,0)
 D ^DIR K DIR I 'Y D Q1^IBCOPV1 Q
"RTN","IBCCPT",19,0)
 S IBFT=+$P(^DGCR(399,IBIFN,0),"^",19)
"RTN","IBCCPT",20,0)
OK2 W !,"YOU HAVE SELECTED CPT CODE(S) NUMBERED-",$E(Y,1,$L(Y)-1),!,"IS THIS CORRECT" S %=1 D YN^DICN I %=-1 S IBOUT=1 D Q^IBCOPV1 Q
"RTN","IBCCPT",21,0)
 I +Y,'% W !,"Respond 'Y'es to include these codes in the bill.",!,"Respond 'N'o to reselect." G OK2
"RTN","IBCCPT",22,0)
 I +Y,%=2 G OK
"RTN","IBCCPT",23,0)
 ;
"RTN","IBCCPT",24,0)
FILE S DGCPT1=Y,(DGCNT,DGCNT2)=0
"RTN","IBCCPT",25,0)
 S DIE="^DGCR(399,",DA=IBIFN,DR=".09///5" D ^DIE K DR,DA,DIE
"RTN","IBCCPT",26,0)
 F I9=1:1 S I1=$P(DGCPT1,",",I9) Q:'I1  I $D(^UTILITY($J,"CPT-CNT",I1)) S DGNOD=^(I1),DGNOD("DX")=$G(^(I1,"DX")) D FILE1
"RTN","IBCCPT",27,0)
 D Q1^IBCOPV1 Q
"RTN","IBCCPT",28,0)
 ;
"RTN","IBCCPT",29,0)
FILE1 ;  file procedures, if BASC, only for 1 visit date
"RTN","IBCCPT",30,0)
 ;JWS;IB*2.0*592; additional Dental questions IOC issue - added NEW statement below
"RTN","IBCCPT",31,0)
 N IBTON,IBSURF,IBTSTAT,IBPSCDS,IBDENHD
"RTN","IBCCPT",32,0)
 N IBDICSAV  ; IB*2.0*432 BI
"RTN","IBCCPT",33,0)
 K DGNOADD S (X,DINUM)=$P(DGNOD,"^",2) D VFILE1^IBCOPV1 K DINUM,X
"RTN","IBCCPT",34,0)
 N IBCPTNM S IBCPTNM=$$CPT^ICPTCOD(+DGNOD,+$P(DGNOD,U,2))
"RTN","IBCCPT",35,0)
 I $D(DGNOADD) W !?10,"Can't add Amb. Surg. ",$P(IBCPTNM,U,2)," without visit date!" Q  ;don't add cpt for date that can't go on bill
"RTN","IBCCPT",36,0)
 I IBFT'=2,+$P(DGNOD,"^",4),$$TOMANY($P(DGNOD,"^",2)) W !?10,"Can't add Billable Amb. Surg. ",$P(IBCPTNM,U,2)," when more than one visit date!",*7 Q
"RTN","IBCCPT",37,0)
 D DSPPRC(IBCPTNM,DGNOD,$G(DGNOD("DX")))
"RTN","IBCCPT",38,0)
 ;
"RTN","IBCCPT",39,0)
 S:'$D(^DGCR(399,IBIFN,"CP",0)) DIC("P")=$$GETSPEC^IBEFUNC(399,304)
"RTN","IBCCPT",40,0)
 ; IB*2.0*432 BI
"RTN","IBCCPT",41,0)
 ;S DLAYGO=399,DA(1)=IBIFN,DIC="^DGCR(399,"_DA(1)_",""CP"",",DIC(0)="L",X=+DGNOD_";ICPT(" K DD,DO D FILE^DICN S (DA,IBPROCP)=+Y K DO,DD,DLAYGO,DIC("P")
"RTN","IBCCPT",42,0)
 S DLAYGO=399,DA(1)=IBIFN,(DIC,IBDICSAV)="^DGCR(399,"_DA(1)_",""CP"",",DIC(0)="L",X=+DGNOD_";ICPT(" K DD,DO D FILE^DICN S (DA,IBPROCP)=+Y K DO,DD,DLAYGO,DIC("P")
"RTN","IBCCPT",43,0)
 S DR="1///"_$P(DGNOD,"^",2)
"RTN","IBCCPT",44,0)
 I +$P(DGNOD,"^",8) S DR=DR_";18///`"_+$P(DGNOD,"^",8)
"RTN","IBCCPT",45,0)
 I +$P(DGNOD,"^",9) S DR=DR_";6///`"_+$P(DGNOD,"^",9)
"RTN","IBCCPT",46,0)
 I +$P(DGNOD,"^",5) S DR=DR_";5////"_+$P(DGNOD,"^",5)
"RTN","IBCCPT",47,0)
 I +$P(DGNOD,"^",11) S DR=DR_";20////"_+$P(DGNOD,"^",11)
"RTN","IBCCPT",48,0)
 ;
"RTN","IBCCPT",49,0)
 ; file assoc dx if exists from pce
"RTN","IBCCPT",50,0)
 D:$G(DGNOD("DX")) ADDDX^IBCCPT1(IBIFN,IBPROCP,DGNOD("DX"),.DR)
"RTN","IBCCPT",51,0)
 ;
"RTN","IBCCPT",52,0)
 S DIC=IBDICSAV  ; IB*2.0*432 BI
"RTN","IBCCPT",53,0)
 S DIE=DIC D ^DIE
"RTN","IBCCPT",54,0)
 D:$P(DGNOD,U,10)'="" ADDMOD(IBIFN,IBPROCP,$P(DGNOD,U,10))
"RTN","IBCCPT",55,0)
 ;
"RTN","IBCCPT",56,0)
 K DR
"RTN","IBCCPT",57,0)
 S DR="16"
"RTN","IBCCPT",58,0)
 ;
"RTN","IBCCPT",59,0)
 ; DEM;432 - $P(DGNOD,"^",8) is the provider pointer for
"RTN","IBCCPT",60,0)
 ;           this outpatient procedure, and if present will
"RTN","IBCCPT",61,0)
 ;           be the default RENDERING PROVIDER for this
"RTN","IBCCPT",62,0)
 ;           procedure if the RENDERING PROVIDER doesn't
"RTN","IBCCPT",63,0)
 ;           already exist for this procedure in file 399.0404.
"RTN","IBCCPT",64,0)
 ;
"RTN","IBCCPT",65,0)
 ; D:$P(DGNOD,"^",8)  ; DEM;432 - Outpatient procedure has provider.
"RTN","IBCCPT",66,0)
 S DIC=IBDICSAV  ; IB*2.0*432 BI
"RTN","IBCCPT",67,0)
 S DIE=DIC D ^DIE  ; DEM;432 - DR=16 (CPT MODIFIER SEQUENCE).
"RTN","IBCCPT",68,0)
 ;JWS;IB*2.0*592; add Dental fields - IOC issue
"RTN","IBCCPT",69,0)
 I IBFT=7 D
"RTN","IBCCPT",70,0)
 . N IBDENH0,STOP,IBDENH,IBVST,IBPSC,IBPSC2,TARGET0
"RTN","IBCCPT",71,0)
 . ;JWS;IB*2.0*592;IOC additional fields
"RTN","IBCCPT",72,0)
 . S IBVST=$P(DGNOD,"^",15)  ;DGNOD[15] = visit ien to ^AUPNVSIT to get dental data.
"RTN","IBCCPT",73,0)
 . ;IA# 2051, 6870, 6871
"RTN","IBCCPT",74,0)
 . ;S IBDENH=$$FIND1^DIC(228.1,,"QX",IBVST,"AV")
"RTN","IBCCPT",75,0)
 . D FIND^DIC(228.1,,"IX","QXP",IBVST,,"AV",,,"TARGET0")
"RTN","IBCCPT",76,0)
 . I +$G(TARGET0("DILIST",0)) S IBDENH0=0 F  S IBDENH0=$O(TARGET0("DILIST",IBDENH0)) Q:'IBDENH0  D  I $G(STOP) Q
"RTN","IBCCPT",77,0)
 .. S IBDENH=$P($G(TARGET0("DILIST",IBDENH0,0)),"^")
"RTN","IBCCPT",78,0)
 .. I IBDENH D
"RTN","IBCCPT",79,0)
 ... N TARGET,TARGET1,IBDENHD0,IBPSCD0,IBPSCD S (IBDENHD0,STOP)=0
"RTN","IBCCPT",80,0)
 ... ;IA# 2051, 6870, 6871
"RTN","IBCCPT",81,0)
 ... D FIND^DIC(228.2,,"IX","QXP",IBDENH,,"AG",,,"TARGET")
"RTN","IBCCPT",82,0)
 ... I +$G(TARGET("DILIST",0)) F  S IBDENHD0=$O(TARGET("DILIST",IBDENHD0)) Q:'IBDENHD0  D  I STOP Q
"RTN","IBCCPT",83,0)
 .... S IBDENHD=$P(TARGET("DILIST",IBDENHD0,0),"^")
"RTN","IBCCPT",84,0)
 .... ;IA# 2056, 6870, 6871
"RTN","IBCCPT",85,0)
 .... S IBPSC=$$GET1^DIQ(228.2,IBDENHD_",",.04)
"RTN","IBCCPT",86,0)
 .... ;;S IBPROV=$$GET1^DIQ(228.2,IBDENHD_",",.03,"I")  ;provider linked to dental transaction
"RTN","IBCCPT",87,0)
 .... I IBPSC'=$$GET1^DIQ(81,$P(DGNOD,"^")_",",.01) Q
"RTN","IBCCPT",88,0)
 .... I $D(^DGCR(399,"ADT",IBDENHD)) Q
"RTN","IBCCPT",89,0)
 .... I $D(IBUSED("D",IBDENHD)) Q
"RTN","IBCCPT",90,0)
 .... S IBUSED("D",IBDENHD)=""
"RTN","IBCCPT",91,0)
 .... ;attempt to pull in the Not Otherwise Classified proc description from the Provider Narrative
"RTN","IBCCPT",92,0)
 .... ;IA# 2051
"RTN","IBCCPT",93,0)
 .... D FIND^DIC(9000010.18,,"IX","QXP",IBVST,,"AD",,,"TARGET1")
"RTN","IBCCPT",94,0)
 .... S IBPSCD0=0,IBPSCDS=""
"RTN","IBCCPT",95,0)
 .... ;IA# 2056
"RTN","IBCCPT",96,0)
 .... F  S IBPSCD0=$O(TARGET1("DILIST",IBPSCD0)) Q:'IBPSCD0  S IBPSCD=$P(TARGET1("DILIST",IBPSCD0,0),"^") I $$GET1^DIQ(9000010.18,IBPSCD_",",.01)=IBPSC,'$D(IBUSED(IBPSCD)),$$CHECK(IBPSCD,DGNOD) D  Q
"RTN","IBCCPT",97,0)
 ..... S IBUSED(IBPSCD)="",IBPSCDS=$$GET1^DIQ(9000010.18,IBPSCD_",",.04,"E") Q
"RTN","IBCCPT",98,0)
 .... S IBPSC2=$$GET1^DIQ(399.0304,IBPROCP_","_IBIFN_",",.01,"I") I $$GET1^DIQ(81,$P(IBPSC2,";")_",",.01)'=IBPSC Q
"RTN","IBCCPT",99,0)
 .... S STOP=1
"RTN","IBCCPT",100,0)
 .... I '$$NOCPROC^IBCU7("^"_IBPSC2,IBPSC,IBDT) S IBPSCDS=""
"RTN","IBCCPT",101,0)
 .... ;IA# 2056, 6870, 6871
"RTN","IBCCPT",102,0)
 .... S IBTON=$$GET1^DIQ(228.2,IBDENHD_",",.15)
"RTN","IBCCPT",103,0)
 .... S IBSURF=$$GET1^DIQ(228.2,IBDENHD_",",.16)
"RTN","IBCCPT",104,0)
 .... S IBTSTAT=$$GET1^DIQ(228.2,IBDENHD_",",.09),IBTSTAT=$S(IBTSTAT="cndMissing":"M",1:"")
"RTN","IBCCPT",105,0)
 .... N I1 F I=1:1:5 S X=$E(IBSURF,I) Q:X=""  I $F(",M,B,D,I,O,L,F,",","_X_",") S I1=$G(I1)+1,IBSURF(I1)=X
"RTN","IBCCPT",106,0)
 .... Q
"RTN","IBCCPT",107,0)
 ... I '$G(STOP) S IBDENHD=""
"RTN","IBCCPT",108,0)
 ... Q
"RTN","IBCCPT",109,0)
 .. Q
"RTN","IBCCPT",110,0)
 . I $G(IBPSC2)["ICPT",$$NOCPROC^IBCU7("^"_$G(IBPSC2),$G(IBPSC),$G(IBDT)) D
"RTN","IBCCPT",111,0)
 .. S DA=IBPROCP,DA(1)=IBIFN  ; The line# on the bill/claim.
"RTN","IBCCPT",112,0)
 .. S DR="51//"_IBPSCDS        ; Field# for PROCEDURE DESCRIPTION
"RTN","IBCCPT",113,0)
 .. D ^DIE
"RTN","IBCCPT",114,0)
 .. Q
"RTN","IBCCPT",115,0)
 . ;JWS;IB*2.0*592;end
"RTN","IBCCPT",116,0)
 K DR
"RTN","IBCCPT",117,0)
 S DR=""
"RTN","IBCCPT",118,0)
 Q:$D(^DGCR(399,DA(1),"CP",DA,"LNPRV","B","RENDERING"))  ; DEM;432 - Quit if RENDERING PROVIDER already exist in 399.0404 for this procedure.
"RTN","IBCCPT",119,0)
 S IBLNPRV("IBCCPT")=$P($G(^VA(200,+$P(DGNOD,U,8),0)),U,1)  ; DEM;432 - Flag for call to routine EN^IBCU7B.
"RTN","IBCCPT",120,0)
 D EN^IBCU7B ; DEM;432 - Call to line level provider user input.
"RTN","IBCCPT",121,0)
 K IBLNPRV("IBCCPT")  ; DEM;432 - Kill flag after return from EN^IBCU7B.
"RTN","IBCCPT",122,0)
 S DA=IBPROCP  ; DEM;432 - DA=IBPROCP before call to EN^IBCU7B.
"RTN","IBCCPT",123,0)
 K DR
"RTN","IBCCPT",124,0)
 ;
"RTN","IBCCPT",125,0)
 I IBFT=3,'$$INPAT^IBCEF(IBIFN) D
"RTN","IBCCPT",126,0)
 . S DR=""
"RTN","IBCCPT",127,0)
 . D ATTACH^IBCU7
"RTN","IBCCPT",128,0)
 . K DR
"RTN","IBCCPT",129,0)
 ;
"RTN","IBCCPT",130,0)
 S DR=""
"RTN","IBCCPT",131,0)
 I '$P(DGNOD,"^",8) S DR=$S(DR'="":DR_";18",1:18)  ; DEM;432 - Added $SELECT since DR can equal field or NULL.
"RTN","IBCCPT",132,0)
 I '$P(DGNOD,"^",9) S DR=$S(DR'="":DR_";6",1:6)  ; DEM;432 - Added $SELECT since DR can equal field or NULL.
"RTN","IBCCPT",133,0)
 I '$P(DGNOD,"^",5) S DR=$S(DR'="":DR_";5",1:5)  ; DEM;432 - Added $SELECT since DR can equal field or NULL.
"RTN","IBCCPT",134,0)
 ;
"RTN","IBCCPT",135,0)
 S:IBFT=2 DR=$S(DR'="":DR_";8;9;17//NO",1:"8;9;17//NO")  ; DEM;432 - Added $SELECT since DR can equal field or NULL.
"RTN","IBCCPT",136,0)
 ;JWS;IB*2.0*592;IOC change, prompt for POS, + dental fields.
"RTN","IBCCPT",137,0)
 I IBFT=7 S DR=$S(DR'="":DR_";6;5//"_$$DEFDIV^IBCU7(IBIFN)_";8;3",1:"6;5//"_$$DEFDIV^IBCU7(IBIFN)_";8;3")
"RTN","IBCCPT",138,0)
 S DIC=IBDICSAV  ; IB*2.0*432 BI
"RTN","IBCCPT",139,0)
 I DR'="" S DIE=DIC D ^DIE  ; DEM;432 - Added contion of DR'="".
"RTN","IBCCPT",140,0)
 S DR=$$SPCUNIT^IBCU7(IBIFN,IBPROCP) I DR'="" D ^DIE ; miles/minutes/hours
"RTN","IBCCPT",141,0)
 ;
"RTN","IBCCPT",142,0)
 ; DSS QuadraMed Interface: CPT Sequence and Diagnosis Linkage for Single CPT
"RTN","IBCCPT",143,0)
 I $$QMED^IBCU1("DX^VEJDIBE1",IBIFN) D DX^VEJDIBE1(IBIFN,IBPROCP)
"RTN","IBCCPT",144,0)
 ;
"RTN","IBCCPT",145,0)
 Q:$D(Y)
"RTN","IBCCPT",146,0)
 ;JWS;IB*2.0*592; IOC changes - prompt for diagnosis code links to procedure code
"RTN","IBCCPT",147,0)
 I IBFT=2!(IBFT=7) D DX^IBCU72(IBIFN,IBPROCP)
"RTN","IBCCPT",148,0)
 I IBFT=2 S X=$$ADDTNL^IBCU7(IBIFN,.DA)
"RTN","IBCCPT",149,0)
 ;JWS;IB*2.0*592;IOC additional questions
"RTN","IBCCPT",150,0)
 I IBFT=7 D
"RTN","IBCCPT",151,0)
 . K DR S DR=""
"RTN","IBCCPT",152,0)
 . I $G(IBPSCDS)'="" S DR="51////"_IBPSCDS
"RTN","IBCCPT",153,0)
 . I DR'="" D ^DIE K DIE,DIC,DA,DINUM,DO,DD,DR
"RTN","IBCCPT",154,0)
 . ;JWS;IB*2.0*592;start;Add tooth # and surfaces to procedure line
"RTN","IBCCPT",155,0)
 . ;JWS;IB*2.0*592;allow for tooth # without surface
"RTN","IBCCPT",156,0)
 . I $G(IBTON)'="" K DA,DR,DIC,DLAYGO D
"RTN","IBCCPT",157,0)
 .. S DIC(0)="L",DIC="^DGCR(399,"_IBIFN_",""CP"","_IBPROCP_",""DEN1"",",DLAYGO=399.30491
"RTN","IBCCPT",158,0)
 .. S DA(2)=IBIFN,DA(1)=IBPROCP
"RTN","IBCCPT",159,0)
 .. S DIC("DR")=".01////"_IBTON_$S($D(IBSURF(1)):";.02////"_$G(IBSURF(1)),1:"")
"RTN","IBCCPT",160,0)
 .. S X=IBTON
"RTN","IBCCPT",161,0)
 .. I $D(IBSURF(2)) S DIC("DR")=DIC("DR")_";.03////"_IBSURF(2)
"RTN","IBCCPT",162,0)
 .. I $D(IBSURF(3)) S DIC("DR")=DIC("DR")_";.04////"_IBSURF(3)
"RTN","IBCCPT",163,0)
 .. I $D(IBSURF(4)) S DIC("DR")=DIC("DR")_";.05////"_IBSURF(4)
"RTN","IBCCPT",164,0)
 .. I $D(IBSURF(5)) S DIC("DR")=DIC("DR")_";.06////"_IBSURF(5)
"RTN","IBCCPT",165,0)
 .. I $G(IBDENHD) S DIC("DR")=DIC("DR")_";.07////"_IBDENHD
"RTN","IBCCPT",166,0)
 .. D FILE^DICN K DIC,DO,DD,DA,DR
"RTN","IBCCPT",167,0)
 .. Q
"RTN","IBCCPT",168,0)
 . I $G(IBTSTAT)'="",$G(IBTON) D
"RTN","IBCCPT",169,0)
 .. S DIC="^DGCR(399,"_IBIFN_",""DEN1"",",DIC(0)="L",DA(1)=IBIFN,X=IBTON,DLAYGO=399.096 K DD,DO D FILE^DICN K DO,DD,DLAYGO
"RTN","IBCCPT",170,0)
 .. S IBTNUM=+Y
"RTN","IBCCPT",171,0)
 .. S DR=".02////"_IBTSTAT
"RTN","IBCCPT",172,0)
 .. S DIE=DIC,DA=IBTNUM D ^DIE K DIE,DIC,DA,DINUM,DO,DD,DR
"RTN","IBCCPT",173,0)
 . ;JWS;IB*2.0*592;end
"RTN","IBCCPT",174,0)
 . S DA(1)=IBIFN,DA=IBPROCP,DIE="^DGCR(399,"_IBIFN_",""CP"","
"RTN","IBCCPT",175,0)
 . D ORAL^IBCU72 W !
"RTN","IBCCPT",176,0)
 L ^DGCR(399,IBIFN):1
"RTN","IBCCPT",177,0)
 K DIE,DIC,DR,DA,IBPROCP
"RTN","IBCCPT",178,0)
 Q
"RTN","IBCCPT",179,0)
 ;
"RTN","IBCCPT",180,0)
CPRT D:$Y+6>IOSL SCR Q:DGU="^"
"RTN","IBCCPT",181,0)
 N IBCPTNM,IBNBM,IBMODS,J,IBZ,IBDATE
"RTN","IBCCPT",182,0)
 S IBDATE=$$BDATE^IBACSV($G(IBIFN))
"RTN","IBCCPT",183,0)
 S IBNBM="",IBCPTNM=$$CPT^ICPTCOD(DGCPT,IBDATE) Q:IBCPTNM'>0
"RTN","IBCCPT",184,0)
 W !,DGCNT,")",?5,$P(IBCPTNM,U,2),?13,$E($P(IBCPTNM,U,3),1,24),?39,$E($P($G(^SC(+$P(DGNOD,U,9),0)),U,1),1,15),?56,$$FMTE^XLFDT(DGDAT,2)
"RTN","IBCCPT",185,0)
 I +DGBIL,+$P($G(DGNOD),U,6) S IBNBM="  *ON BILL/"_$E($P(DGNOD,U,7),1,4)_"*"
"RTN","IBCCPT",186,0)
 I IBNBM="",DGBIL S IBNBM="  *ON THIS BILL*"
"RTN","IBCCPT",187,0)
 I IBNBM="",+$P($G(DGNOD),U,6) S IBNBM="  "_$E($P(DGNOD,U,7),1,12)
"RTN","IBCCPT",188,0)
 W ?64,IBNBM
"RTN","IBCCPT",189,0)
 ;
"RTN","IBCCPT",190,0)
 S IBMODS=$P($G(DGNOD),U,10) F J=1:1 S IBZ=$P(IBMODS,",",J) Q:IBZ=""  S IBZ=$$MOD^ICPTMOD(IBZ,"I",IBDATE) W !,?13,$P(IBZ,U,2),?18,$P(IBZ,U,3)
"RTN","IBCCPT",191,0)
 Q
"RTN","IBCCPT",192,0)
CHDR W @IOF,!,?15,"<<CURRENT PROCEDURAL TERMINOLOGY CODES>>",!!,?10,"LISTING FROM VISIT DATES WITH ASSOCIATED CPT CODES",!,?22,"IN OUTPT ENCOUNTERS FILE",!
"RTN","IBCCPT",193,0)
 K ^TMP("IBVIS",$J)
"RTN","IBCCPT",194,0)
 S L="",$P(L,"=",80)="" W !,L,!,"NO.",?5,"CODE",?13,"SHORT NAME",?39,"CLINIC",?56,"DATE",!,L,! K L
"RTN","IBCCPT",195,0)
 Q
"RTN","IBCCPT",196,0)
ADDMOD(IBIFN,IBY,IBMOD) ; Add modifier(s) from PCE procedure to CPT code mult
"RTN","IBCCPT",197,0)
 N DIE,DR,DIC,DA,DO,DD,IBS,IBM
"RTN","IBCCPT",198,0)
 F IBS=1:1:$L(IBMOD,",") S DA(2)=IBIFN,DA(1)=IBY,X=$O(^DGCR(399,DA(2),"CP",DA(1),"MOD","B",""),-1)+1 S IBM=$P(IBMOD,",",IBS) I IBM'="" D
"RTN","IBCCPT",199,0)
 . S:'$D(^DGCR(399,DA(2),"CP",DA(1),"MOD")) DIC("P")=$$GETSPEC^IBEFUNC(399.0304,16)
"RTN","IBCCPT",200,0)
 . S DIC(0)="L",DIC="^DGCR(399,"_IBIFN_",""CP"","_IBY_",""MOD"",",DLAYGO=399.30416,DIC("DR")=".02////"_IBM
"RTN","IBCCPT",201,0)
 . D FILE^DICN K DIC,DO,DD
"RTN","IBCCPT",202,0)
 Q
"RTN","IBCCPT",203,0)
 ;
"RTN","IBCCPT",204,0)
DSPPRC(CPTNM,NOD,DX) ; display summary of procedure being added
"RTN","IBCCPT",205,0)
 N IBI,IBL,IBMODS,IBMOD,IBPRVTYP,IBPRV,IBDATE,IBP,IBDXT
"RTN","IBCCPT",206,0)
 I $G(CPTNM)=""!($G(NOD)="") Q
"RTN","IBCCPT",207,0)
 S IBMODS=$P(NOD,U,10),IBPRVTYP="",IBPRV=""
"RTN","IBCCPT",208,0)
 I +$P(NOD,U,8) S IBPRV=$P($G(^VA(200,+$P(NOD,U,8),0)),U,1),IBPRVTYP=$P($$PRVTYP^IBCRU6(+$P(NOD,U,8)),U,3) S IBL=$S(($L(IBPRVTYP)+$L(IBPRV))>32:"",1:" - ")
"RTN","IBCCPT",209,0)
 ;
"RTN","IBCCPT",210,0)
 W !!?4,"Adding CPT Procedure: ",$P(CPTNM,U,2),?34,$P(CPTNM,U,3)
"RTN","IBCCPT",211,0)
 S IBDATE=$$BDATE^IBACSV($G(IBIFN))
"RTN","IBCCPT",212,0)
 I IBMODS'="" F IBI=1:1 S IBMOD=$P(IBMODS,",",IBI) Q:'IBMOD  S IBMOD=$$MOD^ICPTMOD(IBMOD,"I",IBDATE) W !,?34,$P(IBMOD,U,2)," - ",$E($P(IBMOD,U,3),1,40)
"RTN","IBCCPT",213,0)
 W !,?34,"Visit: ",$$FMTE^XLFDT(+$P(NOD,U,2),2),", ",$E($P($G(^SC(+$P(NOD,U,9),0)),U,1),1,29)
"RTN","IBCCPT",214,0)
 I IBPRV'="" W !,?34,"Provider: ",$E(IBPRV,1,35) I IBPRVTYP'="" W:IBL="" !,?44 W IBL,IBPRVTYP
"RTN","IBCCPT",215,0)
 I DX F IBP=1:1 Q:'$P(DX,"^",IBP)  S IBDXT=$$ICD9^IBACSV($P(DX,"^",IBP),+$P(NOD,U,2)) W !,?34,"Assoc Dx: ",$E($P(IBDXT,"^")_" "_$P(IBDXT,"^",3),1,35)
"RTN","IBCCPT",216,0)
 W !
"RTN","IBCCPT",217,0)
 Q
"RTN","IBCCPT",218,0)
 ;
"RTN","IBCCPT",219,0)
VST(IBQUERY) ;Procedures for outpatient visits ... If IBQUERY is defined
"RTN","IBCCPT",220,0)
 ;  on entry, the QUERY OBJECT defined by this value will be used for
"RTN","IBCCPT",221,0)
 ;  loop to extract procedures for visits, otherwise, a new QUERY will be opened
"RTN","IBCCPT",222,0)
 ;  If passed by reference, IBQUERY will be ret'd as the new QUERY ref #
"RTN","IBCCPT",223,0)
 S DGCNT=0 I $O(^DGCR(399,IBIFN,"OP",0)) F V=0:0 S V=$O(^DGCR(399,IBIFN,"OP",V)) Q:'V  S (IBOPV1,IBOPV2)=V D PROC(.IBQUERY)
"RTN","IBCCPT",224,0)
 I $O(^DGCR(399,IBIFN,"OP",0)) K ^TMP("IBVIS",$J) G VSTQ
"RTN","IBCCPT",225,0)
 S IBOPV1=$P(^DGCR(399,IBIFN,"U"),"^"),IBOPV2=$P(^("U"),"^",2)
"RTN","IBCCPT",226,0)
 D PROC(.IBQUERY) K ^TMP("IBVIS",$J)
"RTN","IBCCPT",227,0)
VSTQ Q
"RTN","IBCCPT",228,0)
 ;
"RTN","IBCCPT",229,0)
WRNO W:'$O(^UTILITY($J,"CPT-CNT",0)) !,"NO CPT CODES ON FILE FOR THE ",$S($O(^DGCR(399,IBIFN,"OP",0)):"VISIT DATES ON THIS BILL",1:"PERIOD THAT THIS STATEMENT COVERS")
"RTN","IBCCPT",230,0)
 Q
"RTN","IBCCPT",231,0)
SCR Q:DGU="^"  I $E(IOST,1,2)["C-",$Y+6>IOSL F Y=$Y:1:IOSL-5 W !
"RTN","IBCCPT",232,0)
 I  R !,"Press return to continue or ""^"" to exit display ",DGU:DTIME D:DGU'="^" CHDR
"RTN","IBCCPT",233,0)
 Q
"RTN","IBCCPT",234,0)
HLP W !!,"Enter a number between 1 and ",DGCNT1," or a range of numbers separated with commas",!,"or dashes, e.g., 1,3,5 or 2-4,8"
"RTN","IBCCPT",235,0)
 W !,"The number(s) must appear as a selectable number in the sequential list." R H:5 K H Q
"RTN","IBCCPT",236,0)
CPT S DA(1)=IBIFN,IBCCPTZ=$P(^DGCR(399,DA(1),0),U,9),IBCCPTX=$S($D(^DGCR(399,DA(1),"C"))&IBCCPTZ:1,1:0)
"RTN","IBCCPT",237,0)
 K DIK,DGTE,I1 Q
"RTN","IBCCPT",238,0)
 ;
"RTN","IBCCPT",239,0)
PROC(IBQUERY) ;  -find outpatient procedures, flag if billable
"RTN","IBCCPT",240,0)
 ;  -  ^utility($j,cpt-cnt,count)=code^date^on bill^is BASC^divis^nb^nb mess^provider^clinic^mod,mod^Opt Enc Ptr
"RTN","IBCCPT",241,0)
 ;  -  ^utility($j,cpt-cnt,count,"dx")=assoc dx(1)^assoc dx(2)^assoc dx(3)^assoc dx(4)
"RTN","IBCCPT",242,0)
 N IBVAL,IBCBK,IBFILTER
"RTN","IBCCPT",243,0)
 S IBVAL("DFN")=DFN,IBVAL("BDT")=IBOPV1,IBVAL("EDT")=(IBOPV2+.99)
"RTN","IBCCPT",244,0)
 ; Must be a billable appt type and outpt enctr status of CHECKED OUT
"RTN","IBCCPT",245,0)
 S IBFILTER=""
"RTN","IBCCPT",246,0)
 S IBCBK="I '$P(Y0,U,6),$P(Y0,U,7),$$DSP^IBEFUNC($P(Y0,U,10),+Y0),'$D(^TMP(""IBVIS"",$J,+$P(Y0,U,5))) S ^TMP(""IBVIS"",$J,+$P(Y0,U,5))="""" D EXTPROC^IBCCPT(IBIFN,Y,Y0,.DGCNT)"
"RTN","IBCCPT",247,0)
 D SCAN^IBSDU("PATIENT/DATE",.IBVAL,IBFILTER,IBCBK,0,.IBQUERY) K ^TMP("DIERR",$J)
"RTN","IBCCPT",248,0)
 ;
"RTN","IBCCPT",249,0)
 Q
"RTN","IBCCPT",250,0)
EXTPROC(IBIFN,IBOE,IBOE0,IBCNT) ; Extract procedures for an encounter
"RTN","IBCCPT",251,0)
 ; IBIFN = the ien of the bill
"RTN","IBCCPT",252,0)
 ; IBOE0 = 0-node of the outpatient encounter file entry IBOE
"RTN","IBCCPT",253,0)
 ; IBCNT  extracted entry counter
"RTN","IBCCPT",254,0)
 N I2,I7,IBCPT,IBCPTS,IBDIV,IBOED,IBZERR,Z,IBCPTDAT,IBCPTPRV,IBCLINIC,IBZ,IBONBILL,IBMODS,IBARR,IBDT,DFN,IBEX,IBDX,IBOEDP
"RTN","IBCCPT",255,0)
 ; make sure i have this variable
"RTN","IBCCPT",256,0)
 S:$G(IBOE0)="" IBOE0=$$SCE^IBSDU(+IBOE)
"RTN","IBCCPT",257,0)
 D GETCPT^SDOE(IBOE,"IBCPTS","IBZERR")
"RTN","IBCCPT",258,0)
 Q:'$O(IBCPTS(0))  ;No procedures for this encounter
"RTN","IBCCPT",259,0)
 I '$$BDSRC^IBEFUNC3($P($G(IBOE0),U,5)) Q  ; non-billable visit data source
"RTN","IBCCPT",260,0)
 S IBOED=$$NBOE^IBCU81(IBOE,IBOE0)
"RTN","IBCCPT",261,0)
 S I7=IBOE0\1,IBDIV=$P(IBOE0,U,11)
"RTN","IBCCPT",262,0)
 S IBCLINIC="" I +$P(IBOE0,U,4),+$$CLNSCRN^IBCU(I7,+$P(IBOE0,U,4)) S IBCLINIC=+$P(IBOE0,U,4)
"RTN","IBCCPT",263,0)
 S I2=0 F  S I2=$O(IBCPTS(I2)) Q:'I2  D
"RTN","IBCCPT",264,0)
 . S IBCPT=$P(IBCPTS(I2),U)
"RTN","IBCCPT",265,0)
 . S IBCPTPRV=$P($G(IBCPTS(I2,12)),U,4)
"RTN","IBCCPT",266,0)
 . S IBONBILL=0 S IBZ=0 F  S IBZ=$O(^DGCR(399,IBIFN,"CP","B",IBCPT_";ICPT(",IBZ)) Q:'IBZ  I $P($G(^DGCR(399,IBIFN,"CP",IBZ,0)),U,2)=I7 S IBONBILL=1
"RTN","IBCCPT",267,0)
 . S IBMODS="",IBZ=0 F  S IBZ=$O(IBCPTS(I2,1,IBZ)) Q:'IBZ  S IBMODS=IBMODS_$S(IBMODS="":"",1:",")_+$G(IBCPTS(I2,1,IBZ,0))
"RTN","IBCCPT",268,0)
 . ;
"RTN","IBCCPT",269,0)
 . ; look up of a procedure is non-billable and get assoc dx
"RTN","IBCCPT",270,0)
 . S IBOEDP=IBOED I IBOEDP="" S IBOEDP=$$NBOEP^IBCCPT1(IBOE0,IBCPT,.IBDX) I IBOEDP'="" S IBOEDP=4_U_IBOEDP
"RTN","IBCCPT",271,0)
 . S IBCPTDAT=IBCPT_U_I7_U_IBONBILL_U_0_U_IBDIV_U_$P(IBOEDP,U,1)_U_$P(IBOEDP,U,2)_U_IBCPTPRV_U_IBCLINIC_U_IBMODS_U_IBOE
"RTN","IBCCPT",272,0)
 . ;JWS;IB*2.0*592; IOC additional fields
"RTN","IBCCPT",273,0)
 . S $P(IBCPTDAT,U,15)=$P(IBOE0,U,5)
"RTN","IBCCPT",274,0)
 . F Z=1:1:$P(IBCPTS(I2),U,16) S IBCNT=IBCNT+1,^UTILITY($J,"CPT-CNT",IBCNT)=IBCPTDAT,^UTILITY($J,"CPT-CNT",IBCNT,"DX")=$G(IBDX)
"RTN","IBCCPT",275,0)
 . K IBDX
"RTN","IBCCPT",276,0)
 I $O(IBARR("CPT",0)),'$D(^UTILITY($J,"CPT",+IBOE0,0)) S ^(0)="Y"
"RTN","IBCCPT",277,0)
 Q
"RTN","IBCCPT",278,0)
 ;
"RTN","IBCCPT",279,0)
TOMANY(DATE) ;  - returns 1 if more than 1 visit date on bill (for basc)
"RTN","IBCCPT",280,0)
 G TOMANYQ:'$D(DATE)
"RTN","IBCCPT",281,0)
 S DGVCNT=+$P($G(^DGCR(399,IBIFN,"OP",0)),"^",4)
"RTN","IBCCPT",282,0)
 I DGVCNT>1!(DGVCNT=1&('$D(^DGCR(399,IBIFN,"OP",DATE)))) K DGVCNT Q 1
"RTN","IBCCPT",283,0)
TOMANYQ Q 0
"RTN","IBCCPT",284,0)
 ;
"RTN","IBCCPT",285,0)
CHECK(IBPSCD,DGNOD) ;
"RTN","IBCCPT",286,0)
 S RET=1
"RTN","IBCCPT",287,0)
 I $$GET1^DIQ(9000010.18,IBPSCD_",",1204,"I")'=$P(DGNOD,"^",8) S RET=0
"RTN","IBCCPT",288,0)
 Q RET
"RTN","IBCCPT",289,0)
 ;
"RTN","IBCD")
0^82^B12137140^B9905224
"RTN","IBCD",1,0)
IBCD ;ALB/ARH - AUTOMATED BILLER ;8/6/93
"RTN","IBCD",2,0)
 ;;2.0;INTEGRATED BILLING;**312,554,592**;21-MAR-94;Build 58
"RTN","IBCD",3,0)
 ;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCD",4,0)
 ;
"RTN","IBCD",5,0)
 ;This routine is the begining of the auto biller.  No variables are required on entry.  It is be called by the
"RTN","IBCD",6,0)
 ;IB nightly job routine IBAMTC.  It first checks to see if it should run based on the auto biller frequency
"RTN","IBCD",7,0)
 ;site parameter.  It then gathers the Claims Tracking events with an EABD into a temporary file by patient,
"RTN","IBCD",8,0)
 ;event type, and episode date.  This temporary file ("IBACAB") is then used to sort the events into groups
"RTN","IBCD",9,0)
 ;that should be added to individual bills based on the individual event type billing cycle parameters.  This
"RTN","IBCD",10,0)
 ;second temporary file is then used to create the actual bills in IBCD1-2.
"RTN","IBCD",11,0)
 ;
"RTN","IBCD",12,0)
EN ;begin process of finding and creating bills
"RTN","IBCD",13,0)
 ;determine if auto biller should run, check site parameters (350.9,7.01-7.02)
"RTN","IBCD",14,0)
 N IBSWINFO,IBPFSS S IBSWINFO=$$SWSTAT^IBBAPI()            ;IB*2.0*312
"RTN","IBCD",15,0)
 ;
"RTN","IBCD",16,0)
 ;add nightly process for Non VA Care (IB*2.0*554) Currently disabled
"RTN","IBCD",17,0)
 ;D NRUN^IBFBNP1 
"RTN","IBCD",18,0)
 ; End changes by (IB*2.0*554)
"RTN","IBCD",19,0)
 S IBPAR7=$G(^IBE(350.9,1,7)) G:'$P(IBPAR7,U,1) EXIT
"RTN","IBCD",20,0)
 I +IBPAR7,+$P(IBPAR7,U,2),$$FMADD^XLFDT(+$P(IBPAR7,U,2),+IBPAR7)>DT G EXIT
"RTN","IBCD",21,0)
 S IBAUTO=1
"RTN","IBCD",22,0)
 ;begin search for events to bill, create array of events by patient
"RTN","IBCD",23,0)
 ;^TMP("IBCAB",$J, PATIENT, EVENT TYPE, EPISODE DATE, EVENT IFN)=""
"RTN","IBCD",24,0)
 ;adds all events in Claims Tracking that have an EABD not after today
"RTN","IBCD",25,0)
 S IBDFN=0 F  S IBDFN=$O(^IBT(356,"ATOBIL",IBDFN)) Q:'IBDFN  D
"RTN","IBCD",26,0)
 . S IBTYP=0 F  S IBTYP=$O(^IBT(356,"ATOBIL",IBDFN,IBTYP)) Q:'IBTYP  D
"RTN","IBCD",27,0)
 .. S IBEABD=0 F  S IBEABD=$O(^IBT(356,"ATOBIL",IBDFN,IBTYP,IBEABD)) Q:'IBEABD!(IBEABD>DT)  D
"RTN","IBCD",28,0)
 ... S IBTRN=0 F  S IBTRN=$O(^IBT(356,"ATOBIL",IBDFN,IBTYP,IBEABD,IBTRN)) Q:'IBTRN  D
"RTN","IBCD",29,0)
 .... S IBX=$$EVBILL^IBCU81(IBTRN) I 'IBX!(IBX>DT) D TEABD(IBTRN,+IBX) D:$P(IBX,U,2)'="" TERR(IBTRN,0,$P(IBX,U,2)) Q
"RTN","IBCD",30,0)
 .... S IBX=$$EVNTCHK^IBCU82(IBTRN) I +IBX D TEABD(IBTRN,0) D TERR(IBTRN,0,$P(IBX,U,2)) Q
"RTN","IBCD",31,0)
 .... S IBTRND=$G(^IBT(356,IBTRN,0))
"RTN","IBCD",32,0)
 .... I +IBSWINFO D  Q:IBPFSS                               ;IB*2.0*312
"RTN","IBCD",33,0)
 ..... S IBPFSS=1                                         ;IB*2.0*312
"RTN","IBCD",34,0)
 ..... ; Do NOT PROCESS on VistA if DT>=Switch Eff Date   ;CCR-930
"RTN","IBCD",35,0)
 ..... I ($P(IBTRND,"^",6)+1)>$P(IBSWINFO,"^",2) Q        ;IB*2.0*312
"RTN","IBCD",36,0)
 ..... I $P($G(^DPT(IBDFN,.1)),"^")'="" Q                 ;IB*2.0*312
"RTN","IBCD",37,0)
 ..... Q:$$CHKDIS()                                       ;CCR-1081
"RTN","IBCD",38,0)
 ..... S IBPFSS=0     ;Before EffDt & Discharged          ;IB*2.0*312
"RTN","IBCD",39,0)
 .... ;
"RTN","IBCD",40,0)
 .... ;JWS;IB*2.0*592;US1109; IA# 2056 ;If Dental and Plan Coverage Limitation is NO skip, or DO NOT PROCESS Flag set in site parameters
"RTN","IBCD",41,0)
 .... I $F($$GET1^DIQ(9000010,$P(IBTRND,"^",3)_",",.08),"DENTAL"),'$$PTCOV^IBCNSU3(IBDFN,+$P(IBTRND,U,6),"DENTAL")!(+$P(^IBE(350.9,1,8),U,20)=0) Q
"RTN","IBCD",42,0)
 .... S ^TMP("IBCAB",$J,IBDFN,IBTYP,+$P(IBTRND,U,6),IBTRN)=""
"RTN","IBCD",43,0)
 K IBDFN,IBTYP,IBEABD,IBTRN,IBTRND,IBX
"RTN","IBCD",44,0)
 ;
"RTN","IBCD",45,0)
 I $D(^TMP("IBCAB",$J)) D ^IBCD1 ; consolidate events into bills, create bills
"RTN","IBCD",46,0)
 D ^IBCDC ; set comments into file
"RTN","IBCD",47,0)
 S DIE="^IBE(350.9,",DA=1,DR="7.02////"_DT D ^DIE ;reset last date auto biller run
"RTN","IBCD",48,0)
 K ^TMP("IBCAB",$J),^TMP("IBEABD",$J),^TMP("IBCE",$J),^TMP("IBILL",$J)
"RTN","IBCD",49,0)
 F IBX=1:1:10 K ^TMP(("IBC"_IBX),$J)
"RTN","IBCD",50,0)
EXIT K IBX,IBPAR7,DIE,DA,DR,IBAUTO,IBBS,IBSC,IBT
"RTN","IBCD",51,0)
 Q
"RTN","IBCD",52,0)
CHKDIS() ; Returns 1 if discharge was on or after effective date   ;CCR-1081
"RTN","IBCD",53,0)
 N IBADMLNK,IBDISLNK
"RTN","IBCD",54,0)
 S IBADMLNK=$P(IBTRND,"^",5) G:'IBADMLNK CHKDISQ
"RTN","IBCD",55,0)
 S IBDISLNK=$P($G(^DGPM(IBADMLNK,0)),"^",17) G:'IBDISLNK CHKDISQ
"RTN","IBCD",56,0)
 ;
"RTN","IBCD",57,0)
 I (^DGPM(IBDISLNK,0)+1)>$P(IBSWINFO,"^",2) Q 1
"RTN","IBCD",58,0)
CHKDISQ Q 0
"RTN","IBCD",59,0)
 ;
"RTN","IBCD",60,0)
TEABD(TRN,IBDT) ;array contains the list of claims tracking events that need EABD updated, and the new date
"RTN","IBCD",61,0)
 S IBDT=+$G(IBDT),^TMP("IBEABD",$J,TRN,+IBDT)=""
"RTN","IBCD",62,0)
 Q
"RTN","IBCD",63,0)
TERR(TRN,IFN,ER) ;array contains events or bills that need entries created in the comments file, and the comment
"RTN","IBCD",64,0)
 N X S TRN=+$G(TRN),IFN=+$G(IFN),X=+$G(^TMP("IBCE",$J,DT,TRN,IFN))+1
"RTN","IBCD",65,0)
 S ^TMP("IBCE",$J,DT,TRN,IFN,X)=$G(ER),^TMP("IBCE",$J,DT,TRN,IFN)=X
"RTN","IBCD",66,0)
 Q
"RTN","IBCD",67,0)
TBILL(TRN,IFN) ;array contains list of events and bills to be inserted into 356.399
"RTN","IBCD",68,0)
 I '$D(^IBT(356,+$G(TRN),0))!('$D(^DGCR(399,+$G(IFN),0))) Q
"RTN","IBCD",69,0)
 S ^TMP("IBILL",$J,TRN,IFN)=""
"RTN","IBCD",70,0)
 Q
"RTN","IBCD",71,0)
 ;
"RTN","IBCD1")
0^125^B14329608^B14183697
"RTN","IBCD1",1,0)
IBCD1 ;ALB/ARH - AUTOMATED BILLER ; 8/6/93
"RTN","IBCD1",2,0)
 ;;2.0;INTEGRATED BILLING;**55,81,592**;21-MAR-94;Build 58
"RTN","IBCD1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCD1",4,0)
 ;
"RTN","IBCD1",5,0)
SETB ;set up bills  (sort by event date required by types where multiple events can be on one bill)
"RTN","IBCD1",6,0)
 S IBDFN=0 F  S IBDFN=$O(^TMP("IBCAB",$J,IBDFN)) Q:'IBDFN  D
"RTN","IBCD1",7,0)
 . S IBTYP=0 F  S IBTYP=$O(^TMP("IBCAB",$J,IBDFN,IBTYP)) Q:'IBTYP  S IBS="IBC"_IBTYP D
"RTN","IBCD1",8,0)
 .. S IBEVDT=0 F  S IBEVDT=$O(^TMP("IBCAB",$J,IBDFN,IBTYP,IBEVDT)) Q:'IBEVDT  D
"RTN","IBCD1",9,0)
 ... S IBTRN=0 F  S IBTRN=$O(^TMP("IBCAB",$J,IBDFN,IBTYP,IBEVDT,IBTRN)) Q:'IBTRN  D
"RTN","IBCD1",10,0)
 .... S IBX=$P($G(^IBE(356.6,+IBTYP,0)),U,1)
"RTN","IBCD1",11,0)
 .... I IBX="INPATIENT ADMISSION" D INP^IBCD5 Q
"RTN","IBCD1",12,0)
 .... I IBX="PRESCRIPTION REFILL" D RXRF Q
"RTN","IBCD1",13,0)
 .... I IBX="OUTPATIENT VISIT" D OUTP Q
"RTN","IBCD1",14,0)
 .... D TEABD(IBTRN,0),TERR(IBTRN,0,"Event type can not be auto billed.")
"RTN","IBCD1",15,0)
 K IBDFN,IBTYP,IBEVDT,IBTRN,IBS,IBX,IBSTDT,IBTF
"RTN","IBCD1",16,0)
 D NABOUTP
"RTN","IBCD1",17,0)
 D ^IBCD2
"RTN","IBCD1",18,0)
 Q
"RTN","IBCD1",19,0)
 ;
"RTN","IBCD1",20,0)
OUTP ;Outpatient Bills   (IBTRN,IBTYP,IBDFN,IBEVDT)
"RTN","IBCD1",21,0)
 ;get statement from and to dates, based on event date and billing cycle of event type then try to match event to an existing bill cycle, check that event is not already billed and that BC+DD is greater than current date
"RTN","IBCD1",22,0)
 ;^TMP("IBC2",$J, PATIENT , START DT ^ TO DT , EVENT IFN)= TIMEFRAME
"RTN","IBCD1",23,0)
 S IBSTDT=(IBEVDT\1)_"^"_$$BCDT^IBCU8(IBEVDT,IBTYP)
"RTN","IBCD1",24,0)
 S IBX=0 F  S IBX=$O(^TMP(IBS,$J,IBDFN,IBX)) Q:IBX=""!(+IBSTDT<+IBX)  I +IBSTDT'>$P(IBX,U,2) S IBSTDT=IBX Q
"RTN","IBCD1",25,0)
 ;JWS;IB*592 - add 6th parameter to DUPCHK call below for Claims Tracking entry
"RTN","IBCD1",26,0)
 S IBX=$$DUPCHK^IBCU41(IBEVDT,0,0,IBDFN,0,IBTRN) I +IBX D TEABD(IBTRN,0),TERR(IBTRN,0,$P(IBX,U,2)) G OUTPQ
"RTN","IBCD1",27,0)
 S IBX=$$EABD^IBCU81(IBTYP,$P(IBSTDT,U,2)) I +IBX>DT N IBXX S IBXX=$S(+$P($G(^IBT(356,IBTRN,1)),U,1)]"":+$P(^IBT(356,IBTRN,1),U,1)\1,1:$P(IBSTDT,U,1)),IBXX=$$EABD^IBCU81(IBTYP,IBXX) D TEABD(IBTRN,+IBXX) G OUTPQ
"RTN","IBCD1",28,0)
 I $$NABSCT^IBCU81(IBTRN) S ^TMP("IBNAB",$J,IBS,IBDFN,(IBEVDT\1),IBTRN)="" G OUTPQ
"RTN","IBCD1",29,0)
 S ^TMP(IBS,$J,IBDFN,IBSTDT,IBTRN)=1,^TMP("IBNAB1",$J,IBS,IBDFN,(IBEVDT\1))=IBSTDT
"RTN","IBCD1",30,0)
OUTPQ K IBSTDT,IBX
"RTN","IBCD1",31,0)
 Q
"RTN","IBCD1",32,0)
RXRF ;RX Refill (Outpatient) Bills   (IBTRN,IBTYP,IBDFN,IBEVDT)
"RTN","IBCD1",33,0)
 ;get statement from and to dates, based on event date and billing cycle of event type then try to match event to an existing bill cycle, check that event is not already billed and that BC+DD is greater than current date
"RTN","IBCD1",34,0)
 ;^TMP("IBC4",$J, PATIENT , START DT ^ TO DT , EVENT IFN)= TIMEFRAME
"RTN","IBCD1",35,0)
 S IBRXRF=$$RXRF^IBCU81(IBTRN) I IBRXRF="" D TEABD(IBTRN,0),TERR(IBTRN,0,"Can not find rx refill in Pharmacy.") G RXRFQ
"RTN","IBCD1",36,0)
 S IBSTDT=($P(IBRXRF,U,2)\1)_"^"_$$BCDT^IBCU8(+$P(IBRXRF,U,2),IBTYP)
"RTN","IBCD1",37,0)
 S IBX=0 F  S IBX=$O(^TMP(IBS,$J,IBDFN,IBX)) Q:IBX=""!(+IBSTDT<+IBX)  I +IBSTDT'>$P(IBX,U,2) S IBSTDT=IBX Q
"RTN","IBCD1",38,0)
 S IBX=$$RXDUP^IBCU3($P(IBRXRF,U,1),+$P(IBRXRF,U,2),0,0,IBDFN,0) I +IBX D TEABD(IBTRN,0),TERR(IBTRN,0,$P(IBX,U,2)) G RXRFQ
"RTN","IBCD1",39,0)
 S IBX=$$EABD^IBCU81(IBTYP,$P(IBSTDT,U,2)) I +IBX>DT N IBXX S IBXX=$S(+$P($G(^IBT(356,IBTRN,1)),U,1)]"":+$P(^IBT(356,IBTRN,1),U,1)\1,1:$P(IBSTDT,U,1)),IBXX=$$EABD^IBCU81(IBTYP,IBXX) D TEABD(IBTRN,+IBXX) G RXRFQ
"RTN","IBCD1",40,0)
 S ^TMP(IBS,$J,IBDFN,IBSTDT,IBTRN)=1
"RTN","IBCD1",41,0)
RXRFQ K IBSTDT,IBX,IBRXRF
"RTN","IBCD1",42,0)
 Q
"RTN","IBCD1",43,0)
 ;
"RTN","IBCD1",44,0)
NABOUTP ; add opt visits that should not be auto billed but date has been billed
"RTN","IBCD1",45,0)
 N IBDFN,IBS,IBEVDT,IBSTDT,IBTRN S IBS=$O(^TMP("IBNAB",$J,0))
"RTN","IBCD1",46,0)
 I IBS'="" S IBDFN=0 F  S IBDFN=$O(^TMP("IBNAB",$J,IBS,IBDFN)) Q:'IBDFN  D
"RTN","IBCD1",47,0)
 . S IBEVDT=0 F  S IBEVDT=$O(^TMP("IBNAB",$J,IBS,IBDFN,IBEVDT)) Q:'IBEVDT  D
"RTN","IBCD1",48,0)
 .. S IBSTDT=$G(^TMP("IBNAB1",$J,IBS,IBDFN,IBEVDT))
"RTN","IBCD1",49,0)
 .. S IBTRN=0 F  S IBTRN=$O(^TMP("IBNAB",$J,IBS,IBDFN,IBEVDT,IBTRN)) Q:'IBTRN  D
"RTN","IBCD1",50,0)
 ... I IBSTDT'?7N1"^"7N D TEABD(IBTRN,0) Q
"RTN","IBCD1",51,0)
 ... S ^TMP(IBS,$J,IBDFN,IBSTDT,IBTRN)=1
"RTN","IBCD1",52,0)
 K ^TMP("IBNAB",$J),^TMP("IBNAB1",$J)
"RTN","IBCD1",53,0)
 Q
"RTN","IBCD1",54,0)
 ;
"RTN","IBCD1",55,0)
TEABD(TRN,IBDT) ;array contains the list of claims tracking events that need EABD updated, and the new date
"RTN","IBCD1",56,0)
 S IBDT=+$G(IBDT),^TMP("IBEABD",$J,TRN,+IBDT)=""
"RTN","IBCD1",57,0)
 Q
"RTN","IBCD1",58,0)
TERR(TRN,IFN,ER) ;array contains events or bills that need entries created in the comments file, and the comment
"RTN","IBCD1",59,0)
 N X S TRN=+$G(TRN),IFN=+$G(IFN),X=+$G(^TMP("IBCE",$J,DT,TRN,IFN))+1
"RTN","IBCD1",60,0)
 S ^TMP("IBCE",$J,DT,TRN,IFN,X)=$G(ER),^TMP("IBCE",$J,DT,TRN,IFN)=X
"RTN","IBCD1",61,0)
 Q
"RTN","IBCD1",62,0)
TBILL(TRN,IFN) ;array contains list of events and bills to be inserted into 356.399
"RTN","IBCD1",63,0)
 I '$D(^IBT(356,+$G(TRN),0))!('$D(^DGCR(399,+$G(IFN),0))) Q
"RTN","IBCD1",64,0)
 S ^TMP("IBILL",$J,TRN,IFN)=""
"RTN","IBCD1",65,0)
 Q
"RTN","IBCD2")
0^83^B29470256^B27978767
"RTN","IBCD2",1,0)
IBCD2 ;ALB/ARH - AUTOMATED BILLER (CREATE - SETUP/GATHER DATA FIELDS) ; 8/6/93
"RTN","IBCD2",2,0)
 ;;2.0;INTEGRATED BILLING;**4,55,91,106,384,458,592**;21-MAR-94;Build 58
"RTN","IBCD2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCD2",4,0)
 ;
"RTN","IBCD2",5,0)
FIND ;
"RTN","IBCD2",6,0)
 S IBX=$$CHKSYS^IBCD4 I 'IBX D TERR(0,0,$P(IBX,U,2)) G EXIT
"RTN","IBCD2",7,0)
 S IBS="IBC0" F  S IBS=$O(^TMP(IBS)) Q:IBS=""  S IBX=$E(IBS,4,99) Q:$E(IBS,1,3)'="IBC"!'+IBX  D
"RTN","IBCD2",8,0)
 . N IBQUERY
"RTN","IBCD2",9,0)
 . S IBDFN=0 F  S IBDFN=$O(^TMP(IBS,$J,IBDFN)) Q:'IBDFN  D
"RTN","IBCD2",10,0)
 .. S IBSTDT="" F  S IBSTDT=$O(^TMP(IBS,$J,IBDFN,IBSTDT)) Q:IBSTDT=""  D  I $D(IBCT)>9 D CREATE(.IBQUERY)
"RTN","IBCD2",11,0)
 ... K IBCT S IBTRN=0 F  S IBTRN=$O(^TMP(IBS,$J,IBDFN,IBSTDT,IBTRN)) Q:'IBTRN  S IBCT(IBTRN)="",IBTF=^TMP(IBS,$J,IBDFN,IBSTDT,IBTRN)
"RTN","IBCD2",12,0)
 .I $G(IBQUERY) D CLOSE^IBSDU(IBQUERY)
"RTN","IBCD2",13,0)
EXIT K IBS,IBDFN,IBSTDT,IBCT,IBTRN,IBTF,IBX,X,DFN
"RTN","IBCD2",14,0)
 Q
"RTN","IBCD2",15,0)
 ;
"RTN","IBCD2",16,0)
CREATE(IBQUERY) ;set up a bill,  required: IBCT(IBTRN),IBDFN,IBSTDT
"RTN","IBCD2",17,0)
 ; IBQUERY, if defined, will be used to activate the outpt visit QUERY
"RTN","IBCD2",18,0)
 Q:$D(IBCT)<9  K IB
"RTN","IBCD2",19,0)
 S IBSP=$G(^IBE(350.9,1,1)),IBDIV=$P(IBSP,U,25),IBTRN=+$O(IBCT(0))
"RTN","IBCD2",20,0)
 S IBTRND=$G(^IBT(356,IBTRN,0)) I 'IBTRND D TERR(+IBTRN,0,"Claims Tracking Record not found or not complete.") G QUIT
"RTN","IBCD2",21,0)
 S IBTYPE=$P(IBTRND,U,18) S IBX=$$CHK I 'IBX D TERR(+IBTRN,0,$P(IBX,U,2)) G QUIT
"RTN","IBCD2",22,0)
 ;
"RTN","IBCD2",23,0)
 S IBX=$$ARSET I 'IBX D TERR(IBTRN,0,$P(IBX,U,2)) G QUIT
"RTN","IBCD2",24,0)
 S IBIFN=+IBX,IB(.01)=$P(IBX,U,2),IB(.17)=$P(IBX,U,3),IB(.2)=1,IB(.22)=IBDIV
"RTN","IBCD2",25,0)
 S (IB(.02),DFN)=IBDFN,IB(.06)=IBTF
"RTN","IBCD2",26,0)
 S IB(.07)=$O(^DGCR(399.3,"B","REIMBURSABLE INS.",0)) I 'IB(.07) S IB(.07)=8
"RTN","IBCD2",27,0)
 S IBX=$O(^IBT(356.2,"ATRTP",IBTRN,1,"")) I +IBX S IB(163)=$E($P($G(^IBT(356.2,IBX,2)),U,2),1,18) ;pre-cert #
"RTN","IBCD2",28,0)
 ;
"RTN","IBCD2",29,0)
 S IBX=$P($G(^IBE(356.6,+IBTYPE,0)),U,1)
"RTN","IBCD2",30,0)
 I IBX="INPATIENT ADMISSION" D INPT^IBCD5 G CONT
"RTN","IBCD2",31,0)
 I IBX="PRESCRIPTION REFILL" D RXRF G CONT
"RTN","IBCD2",32,0)
 I IBX="OUTPATIENT VISIT" D OUTPT G CONT
"RTN","IBCD2",33,0)
 G QUIT
"RTN","IBCD2",34,0)
 ;
"RTN","IBCD2",35,0)
CONT S IBX=$$BDT^IBCU3(IBDFN,IB(.03)) S IB(.17)=$S(+IBX:IBX,1:IBIFN) ; continuing episode of care
"RTN","IBCD2",36,0)
 ;Note if a primary bill is found for an outpatient bill then it allows them to choose the bill during bill creation,  .17 is not editable on the screens
"RTN","IBCD2",37,0)
 S IB(.18)=$$SC^IBCU3(IBDFN) ; SC at time of care
"RTN","IBCD2",38,0)
 ;
"RTN","IBCD2",39,0)
 ; Note: variable IBQUERY used in this call to ^IBCD3
"RTN","IBCD2",40,0)
 D EN^IBCD3(.IBQUERY) ; create bill
"RTN","IBCD2",41,0)
 ;
"RTN","IBCD2",42,0)
 S IBTRN=0 F  S IBTRN=$O(IBCT(IBTRN)) Q:'IBTRN  D
"RTN","IBCD2",43,0)
 . D TERR(IBTRN,IBIFN,"") ; bill created
"RTN","IBCD2",44,0)
 . I ",2,3,"'[+$G(IB(.06)) D TEABD(IBTRN,0) ; remove eabd for final bills
"RTN","IBCD2",45,0)
 . D TBILL(IBTRN,IBIFN) ; set index for bill and event (356.399)
"RTN","IBCD2",46,0)
 . I $O(IB(43,0)),$$NABSCT^IBCU81(IBTRN) D TERR(IBTRN,IBIFN,"Stop/Clinic flagged to be ignored by auto biller but another visit is billed on same date.")
"RTN","IBCD2",47,0)
 . I $O(IB(43,0)),$$NBOE^IBCU81(+$P($G(^IBT(356,+IBTRN,0)),U,4)) D TERR(IBTRN,IBIFN,"Visit flagged as SC in source file but has no RNB.")
"RTN","IBCD2",48,0)
 ;
"RTN","IBCD2",49,0)
 S IBTRN=$O(IBCT(IBTRN)) Q:'IBTRN  D
"RTN","IBCD2",50,0)
 . I $G(IB(.05))>2,$G(IB(.27))=1,+$G(^DGCR(399,IBIFN,"MP")),'$O(^DGCR(399,IBIFN,"RC",0)) D TERR(IBTRN,IBIFN,"This RC Opt bill appears to have no institutional charges but may have professional charges.")
"RTN","IBCD2",51,0)
 ;
"RTN","IBCD2",52,0)
 S X=$$PRCDIV^IBCU71(IBIFN) ; reset bill division from site default to first procedures division
"RTN","IBCD2",53,0)
 ;
"RTN","IBCD2",54,0)
QUIT K X,Y,IBX,IBY,IBSP,IBDIV,IBTRN,IBTRND,IBTYPE,IB
"RTN","IBCD2",55,0)
 Q
"RTN","IBCD2",56,0)
 ;
"RTN","IBCD2",57,0)
OUTPT S IB(.04)=$S(+$P($G(^DG(40.8,+IBDIV,0)),U,3):7,1:1) ;division outpatient only or hospital
"RTN","IBCD2",58,0)
 S IB(.05)=3,IB(.06)=1,IB(.09)=4
"RTN","IBCD2",59,0)
 ;event dt is date of first visit, stmt from is first visit dt, stmt to is last visit dt on bill
"RTN","IBCD2",60,0)
 S (IB(.03),IB(151))=9999999,IB(152)=""
"RTN","IBCD2",61,0)
 S IBTRNX=0 F  S IBTRNX=$O(IBCT(IBTRNX)) Q:'IBTRNX  S IBX=$P($G(^IBT(356,IBTRNX,0)),U,6)\1 D
"RTN","IBCD2",62,0)
 . S IB(43,+IBX)="" S:IB(152)<IBX IB(152)=IBX F IBI=.03,151 I IB(IBI)>IBX S IB(IBI)=IBX
"RTN","IBCD2",63,0)
 I +$$BILLRATE^IBCRU3(+$G(IB(.07)),IB(.05),IB(.03),"RC") S IB(.27)=1 ; reasonable charges institutional bill
"RTN","IBCD2",64,0)
 ;JWS;IB*2.0*592;US1109;IA# 2056; Identify event as Dental event
"RTN","IBCD2",65,0)
 S IBDENT=$F($$GET1^DIQ(9000010,$P(IBTRND,"^",3)_",",.08),"DENTAL")
"RTN","IBCD2",66,0)
 ;JWS;IB*2.0*592; for dental claims, default
"RTN","IBCD2",67,0)
 ;    BILL CHARGE TYPE (.27) = 2 (PROFESSIONAL)
"RTN","IBCD2",68,0)
 ;    FORM TYPE (.19) = 7
"RTN","IBCD2",69,0)
 ;    TYPE OF ADMISSION (158) = 3 (ELECTIVE)
"RTN","IBCD2",70,0)
 ;    PROCEDURE CODING METHOD (.09) = 5 (HCPCS)
"RTN","IBCD2",71,0)
 I IBDENT S IB(.27)=2,IB(.19)=7,IB(158)=3,IB(.09)=5
"RTN","IBCD2",72,0)
 ;JWS;IB*2.0*592;US1109 - added IBDENT to kill
"RTN","IBCD2",73,0)
 K IBI,IBX,IBTRNX,IBDENT
"RTN","IBCD2",74,0)
 Q
"RTN","IBCD2",75,0)
RXRF S IB(.04)=$S(+$P($G(^DG(40.8,+IBDIV,0)),U,3):7,1:1) ;division outpatient only or hospital
"RTN","IBCD2",76,0)
 S IB(.05)=3,IB(.06)=1
"RTN","IBCD2",77,0)
 ;event dt is date of first visit, stmt from is first visit dt, stmt to is last visit dt on bill
"RTN","IBCD2",78,0)
 S (IB(.03),IB(151))=9999999,IB(152)=""
"RTN","IBCD2",79,0)
 S IBTRNX=0 F  S IBTRNX=$O(IBCT(IBTRNX)) Q:'IBTRNX  S IBRX=$G(^IBT(356,IBTRNX,0)) D
"RTN","IBCD2",80,0)
 . S IBX=$$RXRF^IBCD4(+$P(IBRX,U,8),+$P(IBRX,U,10)),IB(362.4,+$P(IBRX,U,8),+$P(IBRX,U,10))=IBX,IBX=$P(IBX,U,4)
"RTN","IBCD2",81,0)
 . S:IB(152)<IBX IB(152)=IBX F IBI=.03,151 I IB(IBI)>IBX S IB(IBI)=IBX
"RTN","IBCD2",82,0)
 . I $P(IBRX,U,31)>1 D  ;special consent roi
"RTN","IBCD2",83,0)
 .. S IB(155)=1,IB(157)=0 ; is dx sensitive
"RTN","IBCD2",84,0)
 .. I $P(IBRX,U,31)=2 S IB(157)=1 ; ROI obtained
"RTN","IBCD2",85,0)
 K IBI,IBX,IBTRNX,IBRX
"RTN","IBCD2",86,0)
 Q
"RTN","IBCD2",87,0)
 ;
"RTN","IBCD2",88,0)
ARSET() ; set up entry for new bill in AR returns IFN, bill number
"RTN","IBCD2",89,0)
 ;otherwise "0^error meaasge"
"RTN","IBCD2",90,0)
 N X S X="0^Can not set up bill in AR."
"RTN","IBCD2",91,0)
 S PRCASV("SER")=$P($G(^IBE(350.9,1,1)),U,14),PRCASV("SITE")=+$P($$SITE^VASITE,U,3)
"RTN","IBCD2",92,0)
 D SETUP^PRCASVC3
"RTN","IBCD2",93,0)
 I $P(PRCASV("ARBIL"),U)=-1 S X="0^"_$P(PRCASV("ARBIL"),U,2)_" - "_$$ETXT^IBEFUNC($P(PRCASV("ARBIL"),U,2)) G ARSETQ
"RTN","IBCD2",94,0)
 I $P(PRCASV("ARREC"),U)=-1 S X="0^"_$P(PRCASV("ARREC"),U,2)_" - "_$$ETXT^IBEFUNC($P(PRCASV("ARREC"),U,2)) G ARSETQ
"RTN","IBCD2",95,0)
 S X=PRCASV("ARREC")_U_$P(PRCASV("ARBIL"),"-",2)
"RTN","IBCD2",96,0)
ARSETQ K PRCASV
"RTN","IBCD2",97,0)
 Q X
"RTN","IBCD2",98,0)
 ;
"RTN","IBCD2",99,0)
CHK() ;other checks
"RTN","IBCD2",100,0)
 N X S X=1 I $G(^DPT(+$G(IBDFN),0))="" S X="0^Patient information lacking."
"RTN","IBCD2",101,0)
 Q X
"RTN","IBCD2",102,0)
 ;
"RTN","IBCD2",103,0)
TEABD(TRN,IBDT) ;
"RTN","IBCD2",104,0)
 S IBDT=+$G(IBDT),^TMP("IBEABD",$J,+TRN,+IBDT)=""
"RTN","IBCD2",105,0)
 Q
"RTN","IBCD2",106,0)
TERR(TRN,IFN,ER) ;
"RTN","IBCD2",107,0)
 N X S TRN=+$G(TRN),IFN=+$G(IFN),X=+$G(^TMP("IBCE",$J,DT,TRN,IFN))+1
"RTN","IBCD2",108,0)
 S ^TMP("IBCE",$J,DT,TRN,IFN,X)=$G(ER),^TMP("IBCE",$J,DT,TRN,IFN)=X
"RTN","IBCD2",109,0)
 Q
"RTN","IBCD2",110,0)
TBILL(TRN,IFN) ;
"RTN","IBCD2",111,0)
 I '$D(^IBT(356,+$G(TRN),0))!('$D(^DGCR(399,+$G(IFN),0))) Q
"RTN","IBCD2",112,0)
 S ^TMP("IBILL",$J,TRN,IFN)=""
"RTN","IBCD2",113,0)
 Q
"RTN","IBCD3")
0^133^B86658551^B34628725
"RTN","IBCD3",1,0)
IBCD3 ;ALB/ARH - AUTOMATED BILLER (ADD NEW BILL - CREATE BILL ENTRY) ;9/5/93
"RTN","IBCD3",2,0)
 ;;2.0;INTEGRATED BILLING;**14,55,52,91,106,125,51,148,160,137,210,245,260,405,384,516,522,592**;21-MAR-94;Build 58
"RTN","IBCD3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCD3",4,0)
 ;
"RTN","IBCD3",5,0)
 ;Called by IBCD2,IBACUS2
"RTN","IBCD3",6,0)
 ;
"RTN","IBCD3",7,0)
EN(IBQUERY) ;
"RTN","IBCD3",8,0)
 N IBI,IBX,IBY,I,X,X1,X2,IBAC,IBCPY K IBDR,IBDR222 S IBAC=1
"RTN","IBCD3",9,0)
 S X=$P($T(WHERE),";;",2),X2=$P($T(WHERE+1),";;",2) F I=0:0 S I=$O(IB(I)) Q:'I  S X1=$P($E(X,$F(X,I)+1,999),";",1) S:X1="" X1=$P($E(X2,$F(X2,I)+1,999),";",1) I $D(IB(I))=1 S $P(IBDR($P(X1,"^",1)),"^",$P(X1,"^",2))=IB(I)
"RTN","IBCD3",10,0)
 F I=0,"C","M","M1","S","U","U1","U2" I $D(IBDR(I)) S ^DGCR(399,IBIFN,I)=IBDR(I)
"RTN","IBCD3",11,0)
 S $P(^DGCR(399,0),"^",3)=IBIFN,$P(^(0),"^",4)=$P(^(0),"^",4)+1
"RTN","IBCD3",12,0)
 S DIK="^DGCR(399,",DA=IBIFN D IX1^DIK K DA,DIK ; set cross-references
"RTN","IBCD3",13,0)
 ;
"RTN","IBCD3",14,0)
 ; Set the attending/rendering provider into provider multiple
"RTN","IBCD3",15,0)
 I $G(IB("PRV",.01))'="" D
"RTN","IBCD3",16,0)
 . S DIC("DR")="",I=.01
"RTN","IBCD3",17,0)
 . N IBV
"RTN","IBCD3",18,0)
 . ; Only file if the provider has an NPI.  otherwise it's not billable and would have to be removed from the claim later
"RTN","IBCD3",19,0)
 . I $$GETNPI^IBCEF73A($G(IB("PRV",.02)))]"" F  S I=$O(IB("PRV",I)) Q:'I  D
"RTN","IBCD3",20,0)
 .. I IB("PRV",I)="" Q
"RTN","IBCD3",21,0)
 .. S IBV(I)=IB("PRV",I),DIC("DR")=DIC("DR")_$S(DIC("DR")="":"",1:";")_I_"////^S X=IBV("_I_")"
"RTN","IBCD3",22,0)
 . S DIC="^DGCR(399,"_IBIFN_",""PRV"",",DIC(0)="L",DLAYGO=399,DA(1)=IBIFN,X=IB("PRV",.01)
"RTN","IBCD3",23,0)
 . K DO,DD D FILE^DICN K DO,DD,DLAYGO,DA,DIC
"RTN","IBCD3",24,0)
 ;
"RTN","IBCD3",25,0)
 ; Set the occurrence span codes for leave/pass days
"RTN","IBCD3",26,0)
 I $O(IB("OC",0)) D
"RTN","IBCD3",27,0)
 . N I,I1
"RTN","IBCD3",28,0)
 . S I1=0 F  S I1=$O(IB("OC",I1)) Q:'I1  D
"RTN","IBCD3",29,0)
 .. S I=0,DIC("DR")=""
"RTN","IBCD3",30,0)
 .. F  S I=$O(IB("OC",I1,I)) Q:'I  S DIC("DR")=DIC("DR")_$S(DIC("DR")="":"",1:";")_I_"////"_IB("OC",I1,I)
"RTN","IBCD3",31,0)
 .. S DIC="^DGCR(399,"_IBIFN_",""OC"",",DIC(0)="L",DLAYGO=399,DA(1)=IBIFN,DIC("P")=$$GETSPEC^IBEFUNC(399,41),X=IB("OC")
"RTN","IBCD3",32,0)
 .. K DO,DD D FILE^DICN K DO,DD,DLAYGO,DA,DIC
"RTN","IBCD3",33,0)
 ;
"RTN","IBCD3",34,0)
 ; file rx refills, default CPT and Dx if defined
"RTN","IBCD3",35,0)
 I $D(IB(362.4))>2 D  G END
"RTN","IBCD3",36,0)
 . N IBZ
"RTN","IBCD3",37,0)
 . S IBRX=0 F  S IBRX=$O(IB(362.4,IBRX)) Q:'IBRX  S IBY="" F  S IBY=$O(IB(362.4,IBRX,IBY)) Q:IBY=""  D
"RTN","IBCD3",38,0)
 .. S IBX=IB(362.4,IBRX,IBY) Q:IBX=""
"RTN","IBCD3",39,0)
 .. S IBZ=$$ADD^IBCSC5A($P(IBX,U),IBIFN,$P(IBX,U,4),$P(IBX,U,2),+IBRX,$P(IBX,U,3)_U_$P(IBX,U,5)_U_$P(IBX,U,6),IBY)
"RTN","IBCD3",40,0)
 ;
"RTN","IBCD3",41,0)
 ;file outpatient visit dates and find/store outpatient procedures and dx
"RTN","IBCD3",42,0)
 ;NOTE: If IBQUERY is defined at this point, it will be used to perform
"RTN","IBCD3",43,0)
 ;       the scan for outpatient procedures
"RTN","IBCD3",44,0)
 I '$$INPAT^IBCEF(IBIFN) D  G END
"RTN","IBCD3",45,0)
 . I $D(IB(43))>2 D
"RTN","IBCD3",46,0)
 .. S ^DGCR(399,IBIFN,"OP",0)="^399.043DA^" S IBX=0 F  S IBX=$O(IB(43,IBX)) Q:'IBX  D
"RTN","IBCD3",47,0)
 ... S DIC="^DGCR(399,"_IBIFN_",""OP"",",DIC(0)="L",DA(1)=IBIFN,(DINUM,X)=IBX,DLAYGO=399.043 K DD,DO D FILE^DICN K DIC,DA,DINUM,DO,DD,DLAYGO
"RTN","IBCD3",48,0)
 . ;
"RTN","IBCD3",49,0)
 . D VST^IBCCPT(.IBQUERY) I $D(^UTILITY($J,"CPT-CNT")) D
"RTN","IBCD3",50,0)
 .. ;JWS;IB*2.0*592;new of IBUSED
"RTN","IBCD3",51,0)
 .. N IBPRX,IBUSED
"RTN","IBCD3",52,0)
 .. S DIC("P")=$$GETSPEC^IBEFUNC(399,304)
"RTN","IBCD3",53,0)
 .. S IBY=0 F  S IBY=$O(^UTILITY($J,"CPT-CNT",IBY)) Q:'IBY  S IBX=^(IBY) I '$P(IBX,U,6) D
"RTN","IBCD3",54,0)
 ... ;JWS;IB*2.0*592; added New command for var needed for link to DSS DRM data
"RTN","IBCD3",55,0)
 ... N IBPOS,IBTON,IBSURF,IBTSTAT,IBTNUM,IBPSCDS,IBDENHD
"RTN","IBCD3",56,0)
 ... S IBPRX(+$P(IBX,U,8))=""
"RTN","IBCD3",57,0)
 ... S DIC="^DGCR(399,"_IBIFN_",""CP"",",DIC(0)="L",DA(1)=IBIFN,X=+IBX_";ICPT(",DLAYGO=399 K DD,DO D FILE^DICN K DO,DD,DLAYGO Q:Y'>0
"RTN","IBCD3",58,0)
 ... ;
"RTN","IBCD3",59,0)
 ... S IBCPY=+Y
"RTN","IBCD3",60,0)
 ... ;
"RTN","IBCD3",61,0)
 ... ; add dx to 362.3 for associations if they exist
"RTN","IBCD3",62,0)
 ... I $G(^UTILITY($J,"CPT-CNT",IBY,"DX")) D ADDDX^IBCCPT1(IBIFN,IBCPY,^("DX"),.IBDR) I $L($G(IBDR)) S IBDR=IBDR_";"
"RTN","IBCD3",63,0)
 ... ;
"RTN","IBCD3",64,0)
 ... ;JWS;IB*2.0*592;begin;added Dental data from files 228.1 and 228.2; default POS to 22 for Dental, Type of Service to 35 Dental Care
"RTN","IBCD3",65,0)
 ... I $$FT^IBCEF(IBIFN)=7 D
"RTN","IBCD3",66,0)
 .... N IBDENH0,STOP,IBDENH,IBVST,TARGET0
"RTN","IBCD3",67,0)
 .... S IBPOS=$O(^IBE(353.1,"B",22,0)),IBVST=$P($G(IBTRND),"^",3)
"RTN","IBCD3",68,0)
 .... ;S IBTOS=$O(^IBE(353.2,"B",35,0)) ;4/25/18
"RTN","IBCD3",69,0)
 .... ;IA# 2051, 6870, 6871
"RTN","IBCD3",70,0)
 .... ;S IBDENH=$$FIND1^DIC(228.1,,"QX",IBVST,"AV")
"RTN","IBCD3",71,0)
 .... D FIND^DIC(228.1,,"IX","QXP",IBVST,,"AV",,,"TARGET0")
"RTN","IBCD3",72,0)
 .... I +$G(TARGET0("DILIST",0)) S IBDENH0=0 F  S IBDENH0=$O(TARGET0("DILIST",IBDENH0)) Q:'IBDENH0  D  I $G(STOP) Q
"RTN","IBCD3",73,0)
 ..... S IBDENH=$P($G(TARGET0("DILIST",IBDENH0,0)),"^")
"RTN","IBCD3",74,0)
 ..... I IBDENH D
"RTN","IBCD3",75,0)
 ...... N TARGET,TARGET1,IBDENHD0,IBPSCD0,IBPSC,IBPSCD,IBPSC2 S (IBDENHD0,STOP)=0
"RTN","IBCD3",76,0)
 ...... ;IA# 2051, 6870, 6871
"RTN","IBCD3",77,0)
 ...... D FIND^DIC(228.2,,"IX","QXP",IBDENH,,"AG",,,"TARGET")
"RTN","IBCD3",78,0)
 ...... I +$G(TARGET("DILIST",0)) F  S IBDENHD0=$O(TARGET("DILIST",IBDENHD0)) Q:'IBDENHD0  D  I STOP Q
"RTN","IBCD3",79,0)
 ....... S IBDENHD=$P(TARGET("DILIST",IBDENHD0,0),"^")
"RTN","IBCD3",80,0)
 ....... ;IA# 2056, 6870, 6871
"RTN","IBCD3",81,0)
 ....... S IBPSC=$$GET1^DIQ(228.2,IBDENHD_",",.04)
"RTN","IBCD3",82,0)
 ....... ;;S IBPROV=$$GET1^DIQ(228.2,IBDENHD_",",.03,"I")  ;provider linked to dental trans
"RTN","IBCD3",83,0)
 ....... I IBPSC'=$$GET1^DIQ(81,$P(IBX,"^")_",",.01) Q
"RTN","IBCD3",84,0)
 ....... I $D(^DGCR(399,"ADT",IBDENHD)) Q
"RTN","IBCD3",85,0)
 ....... I $D(IBUSED("D",IBDENHD)) Q
"RTN","IBCD3",86,0)
 ....... S IBUSED("D",IBDENHD)=""
"RTN","IBCD3",87,0)
 ....... ;attempt to pull in the Not Otherwise Classified proc description from the Provider Narrative
"RTN","IBCD3",88,0)
 ....... ;IA# 2051
"RTN","IBCD3",89,0)
 ....... D FIND^DIC(9000010.18,,"IX","QXP",IBVST,,"AD",,,"TARGET1")
"RTN","IBCD3",90,0)
 ....... S IBPSCD0=0,IBPSCDS=""
"RTN","IBCD3",91,0)
 ....... ;IA# 2056
"RTN","IBCD3",92,0)
 ....... F  S IBPSCD0=$O(TARGET1("DILIST",IBPSCD0)) Q:'IBPSCD0  S IBPSCD=$P(TARGET1("DILIST",IBPSCD0,0),"^") I $$GET1^DIQ(9000010.18,IBPSCD_",",.01)=IBPSC,'$D(IBUSED(IBPSCD)),$$CHECK^IBCCPT(IBPSCD,IBX) D  Q
"RTN","IBCD3",93,0)
 ........ S IBUSED(IBPSCD)="",IBPSCDS=$$GET1^DIQ(9000010.18,IBPSCD_",",.04,"E") Q
"RTN","IBCD3",94,0)
 ....... S IBPSC2=$$GET1^DIQ(399.0304,IBCPY_","_IBIFN_",",.01,"I") I $$GET1^DIQ(81,$P(IBPSC2,";")_",",.01)'=IBPSC Q
"RTN","IBCD3",95,0)
 ....... S STOP=1
"RTN","IBCD3",96,0)
 ....... N IBPDT S IBPDT=$$GET1^DIQ(399,IBIFN_",",.03,"I")
"RTN","IBCD3",97,0)
 ....... I '$$NOCPROC^IBCU7("^"_IBPSC2,IBPSC,IBPDT) S IBPSCDS=""
"RTN","IBCD3",98,0)
 ....... ;IA# 2056, 6870, 6871
"RTN","IBCD3",99,0)
 ....... S IBTON=$$GET1^DIQ(228.2,IBDENHD_",",.15)
"RTN","IBCD3",100,0)
 ....... S IBSURF=$$GET1^DIQ(228.2,IBDENHD_",",.16)
"RTN","IBCD3",101,0)
 ....... S IBTSTAT=$$GET1^DIQ(228.2,IBDENHD_",",.09),IBTSTAT=$S(IBTSTAT="cndMissing":"M",1:"")
"RTN","IBCD3",102,0)
 ....... N I1 F I=1:1:5 S X=$E(IBSURF,I) Q:X=""  I $F(",M,B,D,I,O,L,F,",","_X_",") S I1=$G(I1)+1,IBSURF(I1)=X
"RTN","IBCD3",103,0)
 ....... Q
"RTN","IBCD3",104,0)
 ...... I '$G(STOP) S IBDENHD=""
"RTN","IBCD3",105,0)
 ...... Q
"RTN","IBCD3",106,0)
 ..... Q
"RTN","IBCD3",107,0)
 .... I $P(IBX,U,8) K DA,DR,DIC D
"RTN","IBCD3",108,0)
 ..... N IBDATA
"RTN","IBCD3",109,0)
 ..... ; Only file if the provider has an NPI.  otherwise it's not billable and would have to be removed from the claim later
"RTN","IBCD3",110,0)
 ..... I $$GETNPI^IBCEF73A($P(IBX,U,8)_";VA(200,")="" Q
"RTN","IBCD3",111,0)
 ..... S DIC(0)="L",DIC="^DGCR(399,"_IBIFN_",""CP"","_IBCPY_",""LNPRV"",",DLAYGO=399.0404
"RTN","IBCD3",112,0)
 ..... S DA(2)=IBIFN,DA(1)=IBCPY,X=3,IBDATA=$P(IBX,U,8)_";VA(200,"
"RTN","IBCD3",113,0)
 ..... S DIC("DR")=".02////^S X=IBDATA"
"RTN","IBCD3",114,0)
 ..... D FILE^DICN K DIC,DO,DD,DA,DR
"RTN","IBCD3",115,0)
 ..... Q
"RTN","IBCD3",116,0)
 .... Q
"RTN","IBCD3",117,0)
 ... ;JWS;IB*2.0*592;end
"RTN","IBCD3",118,0)
 ... S DR=$G(IBDR)_"1////"_$P(IBX,U,2)_$S(+$P(IBX,U,8):";18////"_+$P(IBX,U,8),1:"") K IBDR
"RTN","IBCD3",119,0)
 ... S DR=DR_$S(+$P(IBX,U,9):";6////"_+$P(IBX,U,9),1:"")_$S(+$P(IBX,U,5):";5////"_+$P(IBX,U,5),1:"")
"RTN","IBCD3",120,0)
 ... S DR=DR_$S(+$P(IBX,U,11):";20////"_+$P(IBX,U,11),1:"")
"RTN","IBCD3",121,0)
 ... ;JWS;IB*2.0*592;add place of service default and NOC Procedure Description
"RTN","IBCD3",122,0)
 ... S DR=DR_$S($G(IBPOS):";8////"_$G(IBPOS),1:"")
"RTN","IBCD3",123,0)
 ... ;S DR=DR_$S($G(IBTOS):";9////"_$G(IBTOS),1:"")  ;4/25/18
"RTN","IBCD3",124,0)
 ... I $G(IBPSCDS)'="" S DR=DR_";51////"_IBPSCDS
"RTN","IBCD3",125,0)
 ... S DA(1)=IBIFN,DIE="^DGCR(399,"_IBIFN_",""CP"",",DA=+IBCPY D ^DIE K DIE,DIC,DA,DINUM,DO,DD,DR
"RTN","IBCD3",126,0)
 ... ;JWS;IB*2.0*592;start;Add tooth # and surfaces to procedure line
"RTN","IBCD3",127,0)
 ... ;JWS;IB*2.0*592;allow for tooth # without surface
"RTN","IBCD3",128,0)
 ... I $$FT^IBCEF(IBIFN)=7 D
"RTN","IBCD3",129,0)
 .... I $G(IBTON)'="" K DA,DR,DIC D
"RTN","IBCD3",130,0)
 ..... S DIC(0)="L",DIC="^DGCR(399,"_IBIFN_",""CP"","_IBCPY_",""DEN1"",",DLAYGO=399.30491
"RTN","IBCD3",131,0)
 ..... S DA(2)=IBIFN,DA(1)=IBCPY
"RTN","IBCD3",132,0)
 ..... S DIC("DR")=".01////"_IBTON_$S($D(IBSURF(1)):";.02////"_$G(IBSURF(1)),1:"")
"RTN","IBCD3",133,0)
 ..... S X=IBTON
"RTN","IBCD3",134,0)
 ..... I $D(IBSURF(2)) S DIC("DR")=DIC("DR")_";.03////"_IBSURF(2)
"RTN","IBCD3",135,0)
 ..... I $D(IBSURF(3)) S DIC("DR")=DIC("DR")_";.04////"_IBSURF(3)
"RTN","IBCD3",136,0)
 ..... I $D(IBSURF(4)) S DIC("DR")=DIC("DR")_";.05////"_IBSURF(4)
"RTN","IBCD3",137,0)
 ..... I $D(IBSURF(5)) S DIC("DR")=DIC("DR")_";.06////"_IBSURF(5)
"RTN","IBCD3",138,0)
 ..... I $G(IBDENHD) S DIC("DR")=DIC("DR")_";.07////"_IBDENHD
"RTN","IBCD3",139,0)
 ..... D FILE^DICN K DIC,DO,DD,DA,DR
"RTN","IBCD3",140,0)
 ..... Q
"RTN","IBCD3",141,0)
 .... I $G(IBTSTAT)'="",$G(IBTON) D
"RTN","IBCD3",142,0)
 ..... S DIC="^DGCR(399,"_IBIFN_",""DEN1"",",DIC(0)="L",DA(1)=IBIFN,X=IBTON,DLAYGO=399.096 K DD,DO D FILE^DICN K DO,DD,DLAYGO
"RTN","IBCD3",143,0)
 ..... S IBTNUM=+Y
"RTN","IBCD3",144,0)
 ..... S DR=".02////"_IBTSTAT
"RTN","IBCD3",145,0)
 ..... S DIE=DIC,DA=IBTNUM D ^DIE K DIE,DIC,DA,DINUM,DO,DD,DR
"RTN","IBCD3",146,0)
 .... ;JWS;IB*2.0*592;end
"RTN","IBCD3",147,0)
 ... I $P(IBX,U,10) D ADDMOD^IBCCPT(IBIFN,IBCPY,$P(IBX,U,10)) ;Modifiers
"RTN","IBCD3",148,0)
 .. I $O(IBPRX(""))=$O(IBPRX(""),-1),$O(IBPRX(0)) D
"RTN","IBCD3",149,0)
 ... ;If only 1 provider - make it the rendering
"RTN","IBCD3",150,0)
 ... S IB("PRV",.02)=+$O(IBPRX(0))_";VA(200,",IB("PRV",.01)=3
"RTN","IBCD3",151,0)
 . K DGCNT,V,IBOPV1,IBOPV2,I,DGDIV,I1,DGNOD,DGCPTS,I7,I2,DGCPT,^UTILITY($J,"CPT-CNT")
"RTN","IBCD3",152,0)
 . ;
"RTN","IBCD3",153,0)
 . D OPTDX^IBCSC4D(DFN,IB(151),IB(152),.IBDX) I +IBDX D  K IBDX
"RTN","IBCD3",154,0)
 .. S IBY=0 F  S IBY=$O(IBDX(IBY)) Q:IBY=""  S IBX=IBDX(IBY) I '$P(IBX,U,5) D
"RTN","IBCD3",155,0)
 ... I '$D(^DGCR(399,"AOPV",DFN,(+$P(IBX,U,4)\1),IBIFN)) Q
"RTN","IBCD3",156,0)
 ... S DIC("DR")=".02////"_IBIFN,DIC="^IBA(362.3,",DIC(0)="L",X=+IBX,DLAYGO=362.3 K DD,DO D FILE^DICN
"RTN","IBCD3",157,0)
 ... K DIE,DIC,DA,DLAYGO,DO,DD
"RTN","IBCD3",158,0)
 ;
"RTN","IBCD3",159,0)
 ;store inpatient diagnosis and procedures, default admit dx to first dx found
"RTN","IBCD3",160,0)
 I $$INPAT^IBCEF(IBIFN) D  G END
"RTN","IBCD3",161,0)
 . I $G(^TMP("IBDX",$J))=IB(.08) D  K ^TMP("IBDX",$J)
"RTN","IBCD3",162,0)
 .. N IBXDEF S IBXDEF=0
"RTN","IBCD3",163,0)
 .. S (IBI,IBX)="" F  S IBX=$O(^TMP("IBDX",$J,IBX)) Q:'IBX  S IBY=0 F  S IBY=$O(^TMP("IBDX",$J,IBX,IBY)) Q:'IBY  D
"RTN","IBCD3",164,0)
 ... S IBZ=^TMP("IBDX",$J,IBX,IBY) Q:($$ICD9^IBACSV(+IBZ)="")  S IBI=IBI+1
"RTN","IBCD3",165,0)
 ... S DIC("DR")=".02////"_IBIFN_";.03////"_IBI I $P(IBZ,U,3)'="" S DIC("DR")=DIC("DR")_";.04///"_$P(IBZ,U,3)
"RTN","IBCD3",166,0)
 ... S DIC="^IBA(362.3,",DIC(0)="L",X=+IBZ,DLAYGO=362.3 K DD,DO D FILE^DICN K DIE,DIC,DA,DLAYGO,DO,DD
"RTN","IBCD3",167,0)
 ... I Y>0,'IBXDEF S IBXDEF=1,DR="215////"_+IBZ,DIE="^DGCR(399,",DA=IBIFN D ^DIE
"RTN","IBCD3",168,0)
 . ;
"RTN","IBCD3",169,0)
 . D PTFPRDT^IBCSC4A(+IB(.08),IB(151),IB(152),9) I $D(^UTILITY($J,"IB")) D  K ^UTILITY($J,"IB")
"RTN","IBCD3",170,0)
 .. S ^DGCR(399,IBIFN,"CP",0)="^399.0304AVI^"
"RTN","IBCD3",171,0)
 .. S IBX=0 F  S IBX=$O(^UTILITY($J,"IB",IBX)) Q:'IBX  S IBY=0 F  S IBY=$O(^UTILITY($J,"IB",IBX,IBY)) Q:'IBY  D
"RTN","IBCD3",172,0)
 ... S IBZ=^UTILITY($J,"IB",IBX,IBY) Q:($$ICD0^IBACSV(+IBZ)="")  S IBI=$P(^UTILITY($J,"IB",IBX,1),U,2)
"RTN","IBCD3",173,0)
 ... S DIC="^DGCR(399,"_IBIFN_",""CP"",",DIC(0)="L",DA(1)=IBIFN,X=+IBZ_";ICD0(",DLAYGO=399.0304 K DD,DO D FILE^DICN
"RTN","IBCD3",174,0)
 ... I Y>0 S DIE=DIC,DA=+Y,DR="1////"_(IBI\1) D ^DIE K DIE,DIC,DA,DLAYGO,DO,DD
"RTN","IBCD3",175,0)
 ;
"RTN","IBCD3",176,0)
END S IBX="1^Billing Record #"_$P(^DGCR(399,+IBIFN,0),"^",1)_" established for "_$P($G(^DPT(IBDFN,0)),U,1)
"RTN","IBCD3",177,0)
 ;
"RTN","IBCD3",178,0)
 S IBAUTO=1,DGPTUPDT="" I '$G(IBCHTRN) D PROC^IBCU7A(IBIFN) D ^IBCU6 ; auto calculate/store revenue codes
"RTN","IBCD3",179,0)
 ;
"RTN","IBCD3",180,0)
Q K %,%DT,IBDR,X1,X2,X3,X4,Y,DGDIRA,DGDIRB,DGDIR0,DIR,DGRVRCAL,DIC,DA,DR,DINUM,DGPTUPDT,DGXRF1,IBCHK,IBINDT,IBIDS,DLAYGO
"RTN","IBCD3",181,0)
 Q
"RTN","IBCD3",182,0)
 ;
"RTN","IBCD3",183,0)
WHERE ;;.01^0^1;.02^0^2;.03^0^3;.04^0^4;.05^0^5;.06^0^6;.07^0^7;.08^0^8;.09^0^9;.11^0^11;.17^0^17;.16^0^16;.18^0^18;.19^0^19;.2^0^20;.22^0^22;.27^0^27;112^M^12;151^U^1;152^U^2;155^U^5;157^U^7;101^M^1;158^U^8;159^U^9;160^U^10;161^U^11;162^U^12;
"RTN","IBCD3",184,0)
 ;;217^U2^3;221^U2^7;
"RTN","IBCE837")
0^18^B88399984^B86551026
"RTN","IBCE837",1,0)
IBCE837 ;ALB/TMP - OUTPUT FOR 837 TRANSMISSION ;8/6/03 10:48am
"RTN","IBCE837",2,0)
 ;;2.0;INTEGRATED BILLING;**137,191,197,232,296,349,547,592**;21-MAR-94;Build 58
"RTN","IBCE837",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCE837",4,0)
 ;
"RTN","IBCE837",5,0)
EN ; Auto-txmt
"RTN","IBCE837",6,0)
 N IBSITE8,IBRUN,X,X1,X2,DA,DIE,DR
"RTN","IBCE837",7,0)
 K ^TMP("IBRESUBMIT",$J),^TMP("IBONE",$J)
"RTN","IBCE837",8,0)
 S IBSITE8=$G(^IBE(350.9,1,8)),IBRUN=1
"RTN","IBCE837",9,0)
 Q:'$P(IBSITE8,U,3)!'$P(IBSITE8,U,10)
"RTN","IBCE837",10,0)
 I '$$MGCHK^IBCE(0) Q
"RTN","IBCE837",11,0)
 I $P(IBSITE8,U,5) D  Q:'IBRUN
"RTN","IBCE837",12,0)
 . S X2=+$P(IBSITE8,U,3),X1=$P(IBSITE8,U,5) D C^%DTC
"RTN","IBCE837",13,0)
 . I X>DT S IBRUN=0 Q
"RTN","IBCE837",14,0)
 D QTXMT^IBCE837B(IBSITE8)
"RTN","IBCE837",15,0)
 I $P(IBSITE8,U,5)'=DT S DIE="^IBE(350.9,",DR="8.05////"_DT,DA=1 D ^DIE
"RTN","IBCE837",16,0)
 Q
"RTN","IBCE837",17,0)
 ;
"RTN","IBCE837",18,0)
SETUP(IBEXTRP) ; Txmn set up
"RTN","IBCE837",19,0)
 ; IBEXTRP=1 prnt 837 data
"RTN","IBCE837",20,0)
 N IB
"RTN","IBCE837",21,0)
 K ^TMP("IBXMSG",$J),^TMP("IBTXMT",$J),^TMP("IBHDR",$J),^TMP("IBHDR1",$J),^TMP("IBXERR",$J),IBXERR,^TMP("IBXINS",$J),^TMP("IBTX",$J),^TMP("IBEDI_TEST_BATCH",$J)
"RTN","IBCE837",22,0)
 ; Chk extract running
"RTN","IBCE837",23,0)
 Q:$G(IBEXTRP)
"RTN","IBCE837",24,0)
 ; Chk resubmit tst
"RTN","IBCE837",25,0)
 I $P($G(^TMP("IBRESUBMIT",$J)),U,4) S ^TMP("IBEDI_TEST_BATCH",$J)=1 Q
"RTN","IBCE837",26,0)
 I '$D(^TMP("IBRESUBMIT",$J)),'$D(^TMP("IBONE",$J)) D  Q:$D(IBXERR)
"RTN","IBCE837",27,0)
 . L +^IBA(364,0):5
"RTN","IBCE837",28,0)
 . I '$T D  Q
"RTN","IBCE837",29,0)
 .. S IBXERR=1,^TMP("IBXERR",$J,1)="A PREVIOUS EDI EXTRACT IS RUNNING - ANOTHER CANNOT BE STARTED "_$$FMTE^XLFDT($$NOW^XLFDT(),2)
"RTN","IBCE837",30,0)
 ;
"RTN","IBCE837",31,0)
 I $D(^TMP("IBRESUBMIT",$J)) D  Q:$D(IBXERR)
"RTN","IBCE837",32,0)
 .N Z,Z0
"RTN","IBCE837",33,0)
 .S Z0=$P($G(^TMP("IBRESUBMIT",$J)),U,2),Z=$$LOCK^IBCEM02(364.1,Z0)
"RTN","IBCE837",34,0)
 .I 'Z D
"RTN","IBCE837",35,0)
 ..S IBXERR=1
"RTN","IBCE837",36,0)
 ..S ^TMP("IBRESUBMIT",$J,"IBXERR",1)="Another user is currently processing batch "_Z0_".  Batch NOT resubmitted."
"RTN","IBCE837",37,0)
 .I 'Z D
"RTN","IBCE837",38,0)
 ..S IBXERR=1
"RTN","IBCE837",39,0)
 ..S ^TMP("IBRESUBMIT",$J,"IBXERR",1)="Another user is currently processing batch "_Z0_".  Batch NOT resubmitted."
"RTN","IBCE837",40,0)
 ..S ^TMP("IBRESUBMIT",$J,"IBXERR",2)="Resubmit was attempted by: "_$P($G(^VA(200,DUZ,0)),U)_" ("_DUZ_")"
"RTN","IBCE837",41,0)
 I $D(^TMP("IBONE",$J)) S IB=$G(^($J))+1 D  Q:$D(IBXERR)
"RTN","IBCE837",42,0)
 .N Z,Z0
"RTN","IBCE837",43,0)
 .S Z0=$O(^TMP("IBONE",$J,"")),Z=$$LOCK^IBCEM02(364,Z0)
"RTN","IBCE837",44,0)
 .I 'Z D
"RTN","IBCE837",45,0)
 ..S IBXERR=1
"RTN","IBCE837",46,0)
 ..S ^TMP("IBONE",$J,"IBXERR",1)="Another user is currently processing bill "_$P($G(^DGCR(399,+$G(^IBA(364,Z0,0)),0)),U)_".  Bill NOT "_$P("^re",U,IB)_"submitted."
"RTN","IBCE837",47,0)
 ..S ^TMP("IBONE",$J,"IBXERR",2)=$P("S^Res",U,IB)_"ubmit was attempted by: "_$P($G(^VA(200,DUZ,0)),U)_" ("_DUZ_")"
"RTN","IBCE837",48,0)
 Q
"RTN","IBCE837",49,0)
 ;
"RTN","IBCE837",50,0)
FIND ; Find/sort by CMS-1500/UB-04, test/live, ins ID # & div
"RTN","IBCE837",51,0)
 ;
"RTN","IBCE837",52,0)
 N IBX,IB0,IBCBH,IBINS,IBXIEN,IBNID,IBGBL,IBTXTEST,IBBTYP,IB837R,IBDIV,IBNOTX,IBTXST,IBTEST,IBSEC,IBNF
"RTN","IBCE837",53,0)
 K ^TMP($J,"BILL"),^TMP("IBICT",$J)
"RTN","IBCE837",54,0)
 ;
"RTN","IBCE837",55,0)
 S IBGBL=$S($D(^TMP("IBONE",$J)):"^TMP(""IBONE"","_$J_")",$D(^TMP("IBSELX",$J)):"^TMP(""IBSELX"","_$J_")",'$D(^TMP("IBRESUBMIT",$J)):"^IBA(364,""ASTAT"",""X"")",1:"^TMP(""IBRESUBMIT"","_$J_")")
"RTN","IBCE837",56,0)
 S IBTEST=+$G(^TMP("IBEDI_TEST_BATCH",$J))
"RTN","IBCE837",57,0)
 ;
"RTN","IBCE837",58,0)
 S IBX="" F  S IBX=$O(@IBGBL@(IBX)) Q:'IBX  D
"RTN","IBCE837",59,0)
 .;IB 547, If resubmitting a locally printed claim to test via RCB, there is no entry in 364 yet, so pass the NEW flag
"RTN","IBCE837",60,0)
 .;S IBXIEN=+$G(^IBA(364,IBX,0)),IB0=$G(^DGCR(399,IBXIEN,0))
"RTN","IBCE837",61,0)
 .;S IBTXST=$$TXMT^IBCEF4(IBXIEN,.IBNOTX)
"RTN","IBCE837",62,0)
 .S IBXIEN=+$G(^IBA(364,IBX,0)),IBNF=""
"RTN","IBCE837",63,0)
 .I $G(IBLOC)=1,$G(IBTYPPTC)="TEST" S IBXIEN=IBX,IBNF=1
"RTN","IBCE837",64,0)
 .S IB0=$G(^DGCR(399,IBXIEN,0))
"RTN","IBCE837",65,0)
 .S IBTXST=$$TXMT^IBCEF4(IBXIEN,.IBNOTX,IBNF)
"RTN","IBCE837",66,0)
 .Q:IBTXST=""  ; no txmt
"RTN","IBCE837",67,0)
 .Q:$S(IB0="":1,$P(IB0,U,13)>4&'IBTEST:1,1:$D(^TMP($J,"BILL",$P(IB0,U))))
"RTN","IBCE837",68,0)
 .S IBCBH=$P(IB0,U,21) S:"PST"'[IBCBH!(IBCBH="") IBCBH="P"
"RTN","IBCE837",69,0)
 .S IBINS=$P($G(^DGCR(399,IBXIEN,"I"_($F("PST",IBCBH)-1))),U)
"RTN","IBCE837",70,0)
 .S IBTXTEST=$S(IBTEST:2,1:+$$TEST^IBCEF4(IBXIEN))
"RTN","IBCE837",71,0)
 .;JWS:IB*2.0*592:US131 - EDI Dental Claim
"RTN","IBCE837",72,0)
 .S IBBTYP=$P("P^I^D",U,$S($$FT^IBCEF(IBXIEN)=7:3,1:($$FT^IBCEF(IBXIEN)=3)+1))_"-"_IBTXTEST
"RTN","IBCE837",73,0)
 .Q:$$TESTPT^IBCEU($P(IB0,U,2))&'IBTXTEST  ;Test pt
"RTN","IBCE837",74,0)
 .;
"RTN","IBCE837",75,0)
 .I IBTXTEST=1 D TESTLIM^IBCE837A(.IBINS)
"RTN","IBCE837",76,0)
 .;
"RTN","IBCE837",77,0)
 .I IBINS,$P(IB0,U,2) D
"RTN","IBCE837",78,0)
 .. D SETVAR^IBCE837A(IBXIEN,IBINS,IB0,.IBSEC,.IBNID,.IB837R,.IBDIV)
"RTN","IBCE837",79,0)
 ..S:'$D(^TMP("IBXINS",$J,IBDIV_U_IBBTYP,IBNID)) ^(IBNID)=IBINS S ^TMP("IBTXMT",$J,IBDIV_U_IBBTYP,IB837R_U_IBSEC,IBNID,$P(IB0,U,2),IBXIEN_U_IBX)=IBX
"RTN","IBCE837",80,0)
 .;
"RTN","IBCE837",81,0)
 .S ^TMP($J,"BILL",$P(IB0,U))=""
"RTN","IBCE837",82,0)
 ;
"RTN","IBCE837",83,0)
 I $D(^TMP("IBTXMT",$J)) S ^TMP("IBXDATA",$J)=IBNID
"RTN","IBCE837",84,0)
 K ^TMP($J,"BILL")
"RTN","IBCE837",85,0)
 Q
"RTN","IBCE837",86,0)
 ;
"RTN","IBCE837",87,0)
OUTPUT ; 837
"RTN","IBCE837",88,0)
 ;
"RTN","IBCE837",89,0)
 N IB837,IBSITE,IBMAX,IBQUEUE,IBTQUEUE,IBNID,IBCT,IBCTM,IBSIZE,IBBILL,IBLCNT,IBDFN,IBREF,IBSIZEM,IBPARMS,IBD,IBDESC,IBINS,IBQ,IB3,IBBTYP,IBTXTEST,IBDEFPRT,IB837R,IBBTYPX
"RTN","IBCE837",90,0)
 ;
"RTN","IBCE837",91,0)
 K ^TMP("IBCE-BATCH",$J)
"RTN","IBCE837",92,0)
 S IBSITE=$G(^IBE(350.9,1,8)),IBMAX=$P(IBSITE,U,4),IB837=+$O(^IBE(353,"B","IB 837 TRANSMISSION",0)),IB837=$S($P($G(^IBE(353,+IB837,2)),U,8):$P(^(2),U,8),1:IB837) S:'IBMAX IBMAX=999
"RTN","IBCE837",93,0)
 ;
"RTN","IBCE837",94,0)
 I 'IB837 D  Q
"RTN","IBCE837",95,0)
 . N IBZ,XMBODY
"RTN","IBCE837",96,0)
 . S XMBODY="IBZ"
"RTN","IBCE837",97,0)
 . S IBZ(1)="The transmission form for sending electronic claims is not in your form file",IBZ(2)="NO CLAIMS WERE OUTPUT - FORM = IB 837 TRANSMISSION"
"RTN","IBCE837",98,0)
 . D ERRMSG^IBCE837A(XMBODY)
"RTN","IBCE837",99,0)
 ;
"RTN","IBCE837",100,0)
 S (IBCT,IBCTM,IBSIZE)=0,IBQUEUE=$P(IBSITE,U),IBTQUEUE=$P(IBSITE,U,9),IBDESC=""
"RTN","IBCE837",101,0)
 ;
"RTN","IBCE837",102,0)
 Q:IBQUEUE=""&(IBTQUEUE="")
"RTN","IBCE837",103,0)
 ;
"RTN","IBCE837",104,0)
 S IBQ="",IBBTYPX=""
"RTN","IBCE837",105,0)
 ; Sort: div_^_bill type_-_test stat,ins co transmission destination^sec status,dfn,claim #
"RTN","IBCE837",106,0)
 F  S IBBTYPX=$O(^TMP("IBTXMT",$J,IBBTYPX)),IBBTYP=$P(IBBTYPX,U,2) D:IBCTM CHKNEW^IBCE837A(IBQ,.IBBILL,.IBCTM,IBDESC,IBBTYP,"",IBSITE,.IBSIZE) Q:IBBTYPX=""  D
"RTN","IBCE837",107,0)
 . S IBDEFPRT=$S($E(IBBTYP)="P":"SPRINT",1:"SPRINT")
"RTN","IBCE837",108,0)
 . S IBTXTEST=+$P(IBBTYP,"-",2),IBQ=$S('IBTXTEST:IBQUEUE,IBTXTEST=2:"MCT",1:IBTQUEUE)
"RTN","IBCE837",109,0)
 . Q:IBQ=""  ; Queue
"RTN","IBCE837",110,0)
 . ;
"RTN","IBCE837",111,0)
 . ;JWS:IB*2.0*592:US131 - EDI Dental Claim
"RTN","IBCE837",112,0)
 . S IBD=$S($E(IBBTYP)="P":"PROF",$E(IBBTYP)="D":"DENT",1:"INST")_" CLAIMS-"_$$HTE^XLFDT($H,2)_"  "
"RTN","IBCE837",113,0)
 . S IBDESC=$S('$P(IBSITE,U,7):$S('IBTXTEST:"",1:"TEST ")_IBD,1:"")
"RTN","IBCE837",114,0)
 . ;
"RTN","IBCE837",115,0)
 . S IB837R=""
"RTN","IBCE837",116,0)
 . F  S IB837R=$O(^TMP("IBTXMT",$J,IBBTYPX,IB837R)) D:IBCTM CHKNEW^IBCE837A(IBQ,.IBBILL,.IBCTM,IBDESC,IBBTYP,"",IBSITE,.IBSIZE) Q:IB837R=""  D
"RTN","IBCE837",117,0)
 .. S (IBINS,IBNID)="",IBLCNT=0
"RTN","IBCE837",118,0)
 .. F  S IBNID=$O(^TMP("IBTXMT",$J,IBBTYPX,IB837R,IBNID)) K ^TMP("IBHDR1",$J) D:IBCTM CHKNEW^IBCE837A(IBQ,.IBBILL,.IBCTM,IBDESC,IBBTYP,IBINS,IBSITE,.IBSIZE) Q:IBNID=""  D
"RTN","IBCE837",119,0)
 ...;
"RTN","IBCE837",120,0)
 ...S IBDFN=0,IBINS=+$G(^TMP("IBXINS",$J,IBBTYPX,IBNID))
"RTN","IBCE837",121,0)
 ... ;
"RTN","IBCE837",122,0)
 ...I $P(IBSITE,U,7) D  ; 1 ins/batch
"RTN","IBCE837",123,0)
 .... S IBLCNT=0
"RTN","IBCE837",124,0)
 .... S IBDESC=$E($S('IBTXTEST:"",1:"TEST ")_IBD_$P($G(^DIC(36,IBINS,0)),U),1,80)
"RTN","IBCE837",125,0)
 ... ;
"RTN","IBCE837",126,0)
 ...F  S IBDFN=$O(^TMP("IBTXMT",$J,IBBTYPX,IB837R,IBNID,IBDFN)) Q:'IBDFN  S IBREF="" F  S IBREF=$O(^TMP("IBTXMT",$J,IBBTYPX,IB837R,IBNID,IBDFN,IBREF)) Q:'IBREF  D
"RTN","IBCE837",127,0)
 ....I '(IBCTM#IBMAX),IBCTM D MAILIT^IBCE837A(IBQ,.IBBILL,.IBCTM,"",IBDESC,IBBTYP,IBINS) S IBSIZE=0 ;exceeds max #
"RTN","IBCE837",128,0)
 ....D BILLPARM^IBCEFG0(+IBREF,.IBPARMS)
"RTN","IBCE837",129,0)
 ....S IBSIZEM=$$EXTRACT^IBCEFG(IB837,+IBREF,1,.IBPARMS)
"RTN","IBCE837",130,0)
 ....I (IBSIZEM+IBSIZE)>30000,IBSIZE D  ; exceeds max size
"RTN","IBCE837",131,0)
 .....D MAILIT^IBCE837A(IBQ,.IBBILL,.IBCTM,"",IBDESC,IBBTYP,IBINS) S IBSIZE=0 K ^TMP("IBXDATA",$J) S IBSIZEM=$$EXTRACT^IBCEFG(IB837,+IBREF,1,.IBPARMS)
"RTN","IBCE837",132,0)
 ....I 'IBSIZEM D:'IBCTM  Q
"RTN","IBCE837",133,0)
 ..... D CHKBTCH^IBCE837A(+$G(^TMP("IBHDR",$J))) K ^TMP("IBHDR",$J)
"RTN","IBCE837",134,0)
 ....S IBCT=IBCT+1,IBCTM=IBCTM+1
"RTN","IBCE837",135,0)
 ....D:$D(^TMP("IBXDATA",$J)) MESSAGE(.IBLCNT,$P(IBREF,U,2),.IBBILL,.IBCTM,.IBSIZE,IBSIZEM,"",IBBTYP,IBINS)
"RTN","IBCE837",136,0)
 ..;
"RTN","IBCE837",137,0)
 ..I $G(IBTXTEST)=1 S IBINS=0 F  S IBINS=$O(^TMP("IBICT",$J,IBINS)) Q:'IBINS  S IB3=$G(^DIC(36,IBINS,3)) D
"RTN","IBCE837",138,0)
 ... N DIE,DA,DR
"RTN","IBCE837",139,0)
 ...S DIE="^DIC(36,",DA=IBINS,DR="3.05////"_DT_";3.07////"_($S($P(IB3,U,5)'=DT:0,1:$P(IB3,U,7))+^TMP("IBICT",$J,IBINS)) D ^DIE
"RTN","IBCE837",140,0)
 ;
"RTN","IBCE837",141,0)
 I $O(^TMP("IBXERR",$J,"")) D  ;Error to mail grp
"RTN","IBCE837",142,0)
 .N XMTO,XMBODY,XMDUZ,XMSUBJ,IBCT,IBERR
"RTN","IBCE837",143,0)
 .K ^TMP("IBXMSG",$J)
"RTN","IBCE837",144,0)
 .S ^TMP("IBXMSG",$J,1)="The following authorized bill(s) were not transmitted due to errors indicated.",^(2)="Once the errors are corrected, the bill(s) will be included in the next run.",^(3)=" "
"RTN","IBCE837",145,0)
 .;
"RTN","IBCE837",146,0)
 .S IBERR=0,IBCT=3
"RTN","IBCE837",147,0)
 .F  S IBERR=$O(^TMP("IBXERR",$J,IBERR)) Q:'IBERR  S IBCT=IBCT+1,^TMP("IBXMSG",$J,IBCT)="Bill #: "_$P($G(^DGCR(399,IBERR,0)),U),IBCT=IBCT+1,^TMP("IBXMSG",$J,IBCT)=$J("",5)_^TMP("IBXERR",$J,IBERR)
"RTN","IBCE837",148,0)
 .S XMBODY="^TMP(""IBXMSG"","_$J_")" D ERRMSG^IBCE837A(XMBODY)
"RTN","IBCE837",149,0)
 .;
"RTN","IBCE837",150,0)
 .K ^TMP("IBXMSG",$J),^TMP("IBICT",$J)
"RTN","IBCE837",151,0)
 ;
"RTN","IBCE837",152,0)
 I $O(^TMP("IBCE-BATCH",$J,"")) D
"RTN","IBCE837",153,0)
 .N IB,IB0,IBL,IBT,IBX,XMTO,XMDUZ,XMSUBJ,IBRESUB,IBTESTB,XMZ
"RTN","IBCE837",154,0)
 .S IBRESUB=$D(^TMP("IBRESUBMIT",$J))
"RTN","IBCE837",155,0)
 .;
"RTN","IBCE837",156,0)
 .S IBT(1)="The following batches were "_$S('IBRESUB:"",1:"re-")_"submitted to Austin "_$S(IBTXTEST'=2:"",1:"as TEST ")_$$HTE^XLFDT($H,"2D")_":"
"RTN","IBCE837",157,0)
 .S IBT(2)=$S('IBRESUB:" ",1:"   [Resubmitted by: "_$P($G(^VA(200,+DUZ,0)),U)_" (#"_DUZ_")]") S:IBRESUB IBT(3)=" "
"RTN","IBCE837",158,0)
 .;
"RTN","IBCE837",159,0)
 .S IBL=$S('IBRESUB:2,1:3),IB=""
"RTN","IBCE837",160,0)
 .F  S IB=$O(^TMP("IBCE-BATCH",$J,IB)) Q:IB=""  S IBL=IBL+1,IB0=$G(^(IB)) D
"RTN","IBCE837",161,0)
 .. S IBX=IB
"RTN","IBCE837",162,0)
 .. I $P(IB0,U,3)'="",IBTXTEST=2 S IBX=$P(IB0,U,3)_" (AS BATCH "_IB_")"
"RTN","IBCE837",163,0)
 ..S IBT(IBL)=" "_IBX_" "_$P($G(^IBA(364.1,+IB0,0)),U,8),IBL=IBL+1,IBT(IBL)="    ("_+$P(IB0,U,2)_" bills)"
"RTN","IBCE837",164,0)
 .;
"RTN","IBCE837",165,0)
 .S XMTO("I:G.IB EDI")="",XMDUZ="",XMBODY="IBT",XMSUBJ="EDI 837 "_$S('IBRESUB:"",1:"RE-")_"SUBMISSION BATCH LIST"_$S(IBTXTEST'=2:"",1:" FOR TEST")
"RTN","IBCE837",166,0)
 .D SENDMSG^XMXAPI(XMDUZ,XMSUBJ,XMBODY,.XMTO,,.XMZ)
"RTN","IBCE837",167,0)
 .;
"RTN","IBCE837",168,0)
 .S:IBRESUB ^TMP("IBRESUBMIT",$J,0)=1
"RTN","IBCE837",169,0)
 Q
"RTN","IBCE837",170,0)
 ;
"RTN","IBCE837",171,0)
CLEANUP ; moved
"RTN","IBCE837",172,0)
 D CLEANUP^IBCE837A
"RTN","IBCE837",173,0)
 Q
"RTN","IBCE837",174,0)
 ;
"RTN","IBCE837",175,0)
MESSAGE(IBLCNT,IBIEN,IBBILL,IBCTM,IBSIZE,IBSIZEM,IBDUZ,IBBTYP,IBINS) ; Create msg in ^TMP("IBXMSG",$J)
"RTN","IBCE837",176,0)
 ;IBLCNT = last msg line extracted
"RTN","IBCE837",177,0)
 ;IBIEN = ien file 364 bill entry
"RTN","IBCE837",178,0)
 ;IBBILL = array file 364 ien's of bills being sent
"RTN","IBCE837",179,0)
 ; IBBILL(IEN)=""
"RTN","IBCE837",180,0)
 ;IBSIZE = # bytes in msg
"RTN","IBCE837",181,0)
 ;IBSIZEM = # bytes in record to be added to msg
"RTN","IBCE837",182,0)
 ;IBCTM = # bills in batch
"RTN","IBCE837",183,0)
 ;IBDUZ = user ien running extract (Postmaster if auto)
"RTN","IBCE837",184,0)
 ;IBBTYP = x-y where x = P for prof, I for inst, D for dental  ;JWS:IB*2.0*592:US131 - EDI Dental Claim
"RTN","IBCE837",185,0)
 ;         y = 1 for test, 0 for live txmt
"RTN","IBCE837",186,0)
 ;IBINS = ien of 1 ins co for batch
"RTN","IBCE837",187,0)
 ;
"RTN","IBCE837",188,0)
 N IB,IBL,IB1,IB2,IB3,IBQ,IBREC,IBDEL
"RTN","IBCE837",189,0)
 S IBDEL=$O(^IBA(364.5,"B","N-SEGMENT DELIMITER","")),IBDEL=$P($G(^IBA(364.5,+IBDEL,0)),U,8) S:IBDEL="" IBDEL="~"
"RTN","IBCE837",190,0)
 S IBSIZE=IBSIZE+IBSIZEM,IB1="",IBREC=""
"RTN","IBCE837",191,0)
 F  S IB1=$O(^TMP("IBXDATA",$J,1,IB1)) Q:IB1=""  D
"RTN","IBCE837",192,0)
 .S (IBREC,IB2)=""
"RTN","IBCE837",193,0)
 .F  S IB2=$O(^TMP("IBXDATA",$J,1,IB1,IB2)) Q:$S(IB2="":1,IB1=1:"",1:'$O(^(IB2,1)))  D
"RTN","IBCE837",194,0)
 ..S IB3="",IBREC=""
"RTN","IBCE837",195,0)
 ..F  S IB3=$O(^TMP("IBXDATA",$J,1,IB1,IB2,IB3)) D:IB3=""&($L(IBREC)) SETG Q:IB3=""  S:$S(IB3=1:1,1:$P(IBREC,U)'="") $P(IBREC,U,IB3)=$$UP^XLFSTR(^TMP("IBXDATA",$J,1,IB1,IB2,IB3))
"RTN","IBCE837",196,0)
 S IBBILL(IBIEN)=""
"RTN","IBCE837",197,0)
 K ^TMP("IBXDATA",$J)
"RTN","IBCE837",198,0)
 Q
"RTN","IBCE837",199,0)
 ;
"RTN","IBCE837",200,0)
SETHDR ; hdr for curr batch
"RTN","IBCE837",201,0)
 S ^TMP("IBHDR",$J)=$G(^TMP("IBXDATA",$J,1,5,1,2))
"RTN","IBCE837",202,0)
 Q
"RTN","IBCE837",203,0)
 ;
"RTN","IBCE837",204,0)
SETHDR1 ; hdr node for curr ins
"RTN","IBCE837",205,0)
 S ^TMP("IBHDR1",$J)=$G(^TMP("IBXDATA",$J,1,20,1,8))
"RTN","IBCE837",206,0)
 Q
"RTN","IBCE837",207,0)
 ;
"RTN","IBCE837",208,0)
SETG ; msg global for each segment
"RTN","IBCE837",209,0)
 S IBREC=$TR(IBREC,IBDEL)
"RTN","IBCE837",210,0)
 S IBREC=IBREC_IBDEL,IBSIZE=IBSIZE+$L(IBDEL)
"RTN","IBCE837",211,0)
 S IBLCNT=IBLCNT+1,^TMP("IBXMSG",$J,IBLCNT)=IBREC
"RTN","IBCE837",212,0)
 Q
"RTN","IBCE837",213,0)
 ;
"RTN","IBCE837",214,0)
ONE ; Txmt 1 or more bills for test or in 'X' status for live
"RTN","IBCE837",215,0)
 Q:'$$MGCHK^IBCE(0)
"RTN","IBCE837",216,0)
 D SETUP(0)
"RTN","IBCE837",217,0)
 I '$D(IBXERR) D FIND,OUTPUT
"RTN","IBCE837",218,0)
 D CLEANUP^IBCE837A
"RTN","IBCE837",219,0)
 Q
"RTN","IBCE837",220,0)
 ;
"RTN","IBCE837A")
0^68^B52481474^B49945293
"RTN","IBCE837A",1,0)
IBCE837A ;ALB/TMP - OUTPUT FOR 837 TRANSMISSION - CONTINUED ;8/6/03 10:50am
"RTN","IBCE837A",2,0)
 ;;2.0;INTEGRATED BILLING;**137,191,211,232,296,377,592**;21-MAR-94;Build 58
"RTN","IBCE837A",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCE837A",4,0)
 ;
"RTN","IBCE837A",5,0)
UPD(MSGNUM,BATCH,CNT,BILLS,DESC,IBBTYP,IBINS) ; Upd current batch + bills w/new status
"RTN","IBCE837A",6,0)
 ;MSGNUM = mail msg # for batch
"RTN","IBCE837A",7,0)
 ;BATCH = batch #
"RTN","IBCE837A",8,0)
 ;CNT = # of bills in batch
"RTN","IBCE837A",9,0)
 ;BILLS = array BILLS(bill ien in 364) in batch
"RTN","IBCE837A",10,0)
 ;DESC = 1-80 character description of batch
"RTN","IBCE837A",11,0)
 ;IBBTYP = X-Y where X = P for professional, I for institution, or D for Dental  ;JWS;IB*2.0*592;US131
"RTN","IBCE837A",12,0)
 ;                   Y = 1 for test or 0 for live transmission
"RTN","IBCE837A",13,0)
 ;                         or 2 for live claim resubmitted as test
"RTN","IBCE837A",14,0)
 ;IBINS = ien of single insurance company for the batch (optional)
"RTN","IBCE837A",15,0)
 ;
"RTN","IBCE837A",16,0)
 N DIC,DIE,DR,DA,IBBATCH,IBIFN,IBIEN,IBYY,IBTXTEST,IBMRA
"RTN","IBCE837A",17,0)
 S IBBATCH=$O(^IBA(364.1,"B",+BATCH,"")) Q:'IBBATCH
"RTN","IBCE837A",18,0)
 S IBTXTEST=+$P(IBBTYP,"-",2)
"RTN","IBCE837A",19,0)
 I '$P($G(^IBE(350.9,1,8)),U,7) S IBINS=""
"RTN","IBCE837A",20,0)
 ;
"RTN","IBCE837A",21,0)
 S DIE="^IBA(364.1,",DA=IBBATCH,DR=".02////P;.03///"_CNT_";.04///"_MSGNUM_";.05///0;.07////1;.08///^S X="""_DESC_""""_$S($G(IBINS):";.12////"_IBINS,1:"")
"RTN","IBCE837A",22,0)
 ;
"RTN","IBCE837A",23,0)
 I '$P($G(^TMP("IBRESUBMIT",$J)),U,3) S DR=DR_";1.01///NOW;1.02///.5"
"RTN","IBCE837A",24,0)
 I $P($G(^TMP("IBRESUBMIT",$J)),U,2) S DR=DR_";.15////"_$P(^($J),U,2)
"RTN","IBCE837A",25,0)
 ;JWS;IB*2.0*592;US131
"RTN","IBCE837A",26,0)
 S DR=DR_";.14////"_$S('IBTXTEST:0,1:1)_";.06////"_$S($E(IBBTYP)="P":2,$E(IBBTYP)="D":7,1:3) D ^DIE ; Update batch
"RTN","IBCE837A",27,0)
 ;
"RTN","IBCE837A",28,0)
 I IBTXTEST=2 D ADDTXM^IBCEPTM(.BILLS,IBBATCH,$$NOW^XLFDT()) Q
"RTN","IBCE837A",29,0)
 I IBTXTEST'=2 S IBIEN=0 F  S IBIEN=$O(BILLS(IBIEN)) Q:'IBIEN  D  ;Update each bill
"RTN","IBCE837A",30,0)
 .S DA=IBIEN,DIE="^IBA(364,",DR=".02////"_IBBATCH_";.03///P;.04///NOW" D ^DIE
"RTN","IBCE837A",31,0)
 .S IBIFN=+$G(^IBA(364,IBIEN,0))
"RTN","IBCE837A",32,0)
 . ;
"RTN","IBCE837A",33,0)
 . ; If this claim has just been retransmitted, set the .06 field for the previous transmission entry
"RTN","IBCE837A",34,0)
 . N PRVTXI,PRVTXD
"RTN","IBCE837A",35,0)
 . S PRVTXI=$O(^IBA(364,"B",IBIFN,IBIEN),-1)      ; previous transmission for this claim
"RTN","IBCE837A",36,0)
 . I PRVTXI D
"RTN","IBCE837A",37,0)
 .. S PRVTXD=$G(^IBA(364,PRVTXI,0))
"RTN","IBCE837A",38,0)
 .. I '$F(".R.E.","."_$P(PRVTXD,U,3)_".") Q                 ; prev trans must have status of "R" or "E"
"RTN","IBCE837A",39,0)
 .. I $P(PRVTXD,U,7,8)'=$P($G(^IBA(364,IBIEN,0)),U,7,8) Q   ; test bill and COB must be the same
"RTN","IBCE837A",40,0)
 .. S DA=PRVTXI,DIE=364,DR=".06///"_IBBATCH D ^DIE          ; update the resubmit batch number
"RTN","IBCE837A",41,0)
 .. Q
"RTN","IBCE837A",42,0)
 . ;
"RTN","IBCE837A",43,0)
 .Q:$D(^TMP("IBRESUBMIT",$J))!($P($G(^DGCR(399,IBIFN,0)),U,13)=4)!(+$$TXMT^IBCEF4(IBIEN)=2)
"RTN","IBCE837A",44,0)
 .S IBMRA=$$NEEDMRA^IBEFUNC(IBIFN)
"RTN","IBCE837A",45,0)
 .I IBMRA="C",$P($G(^DGCR(399,IBIFN,0)),U,13)=2 S IBMRA=1
"RTN","IBCE837A",46,0)
 .I IBIFN D
"RTN","IBCE837A",47,0)
 ..S (DIC,DIE)="^DGCR(399,",DA=$P($G(^IBA(364,IBIEN,0)),U),DR="[IB STATUS]",IBYY=$S('IBMRA:"@91",1:"@911") D:DA ^DIE
"RTN","IBCE837A",48,0)
 ..D BSTAT^IBCDC(IBIFN) ; remove from AB list
"RTN","IBCE837A",49,0)
 Q
"RTN","IBCE837A",50,0)
 ;
"RTN","IBCE837A",51,0)
PRE ; Run before processing a bill entry
"RTN","IBCE837A",52,0)
 K IBXSAVE,IBXERR,^UTILITY("VAPA",$J),^TMP("IBXSAVE",$J),^TMP($J),^TMP("DIERR",$J)
"RTN","IBCE837A",53,0)
 Q
"RTN","IBCE837A",54,0)
 ;
"RTN","IBCE837A",55,0)
POST ; Run after processing a bill entry for cleanup
"RTN","IBCE837A",56,0)
 N Q
"RTN","IBCE837A",57,0)
 I $G(IBXERR)'="" D
"RTN","IBCE837A",58,0)
 .S ^TMP("IBXERR",$J,IBXIEN)=IBXERR K ^TMP("IBXDATA",$J)
"RTN","IBCE837A",59,0)
 .K ^TMP("IBHDR1",$J)
"RTN","IBCE837A",60,0)
 .I $D(^TMP("IBRESUBMIT",$J)),'$G(^TMP("IBEDI_TEST_BATCH",$J)) D  ;Set not resub flag for non-test bill
"RTN","IBCE837A",61,0)
 ..N Z,Z0
"RTN","IBCE837A",62,0)
 ..S Z0=$P($G(^TMP("IBRESUBMIT",$J)),U) Q:Z0=""
"RTN","IBCE837A",63,0)
 ..S Z=$O(^IBA(364,"ABABI",+$O(^IBA(364.1,"B",Z0,"")),IBXIEN,""))
"RTN","IBCE837A",64,0)
 ..I Z S ^TMP("IBNOT",$J,Z)=IBXIEN
"RTN","IBCE837A",65,0)
 K IBXSAVE,IBXNOREQ,^TMP("IBXSAVE",$J),^TMP($J)
"RTN","IBCE837A",66,0)
 S Q="VA" F  S Q=$O(^UTILITY(Q)) Q:$E(Q,1,2)'="VA"  I $D(^(Q,$J)) K ^UTILITY(Q,$J)
"RTN","IBCE837A",67,0)
 D CLEAN^DILF
"RTN","IBCE837A",68,0)
 Q
"RTN","IBCE837A",69,0)
 ;
"RTN","IBCE837A",70,0)
MAILIT(IBQUEUE,IBBILL,IBCTM,IBDUZ,IBDESC,IBBTYP,IBINS) ; Send mail msg, update bills
"RTN","IBCE837A",71,0)
 ;IBQUEUE = mail queue name to send 837 transactions to
"RTN","IBCE837A",72,0)
 ;IBBILL = array of ien's in file 364 of bills in batch - IBBILL(IEN)=""
"RTN","IBCE837A",73,0)
 ;IBCTM = # of bills in batch, returned reset to 0
"RTN","IBCE837A",74,0)
 ;IBDUZ = ien of user 'running' extract (if any)
"RTN","IBCE837A",75,0)
 ;IBDESC = description of batch
"RTN","IBCE837A",76,0)
 ;IBBTYP = X-Y where X = P for professional, I for institution, or D for Dental ;JWS;IB*2.0*592;US131
"RTN","IBCE837A",77,0)
 ;                   Y = 1 or 2 for test or 0 for live transmission
"RTN","IBCE837A",78,0)
 ;IBINS = ien of insurance company if only one/batch option (optional)
"RTN","IBCE837A",79,0)
 ;
"RTN","IBCE837A",80,0)
 N DIK,DA,XMTO,XMZ,XMBODY,XMDUZ,XMSUBJ,IBBDA,IBBNO
"RTN","IBCE837A",81,0)
 ;
"RTN","IBCE837A",82,0)
 S IBBNO=+$P($G(^TMP("IBHDR",$J)),U),IBBDA=$O(^IBA(364.1,"B",IBBNO,""))
"RTN","IBCE837A",83,0)
 I '$P($G(^IBE(350.9,1,8)),U,7) S IBINS=""
"RTN","IBCE837A",84,0)
 ;
"RTN","IBCE837A",85,0)
 I IBCTM D
"RTN","IBCE837A",86,0)
 . I +$G(^TMP("IBEDI_TEST_BATCH",$J)) S IBQUEUE="MCT"
"RTN","IBCE837A",87,0)
 . I IBQUEUE'="",IBQUEUE'["@" S XMTO("XXX@Q-"_IBQUEUE_".DOMAIN.EXT")=""
"RTN","IBCE837A",88,0)
 . ;
"RTN","IBCE837A",89,0)
 . ; ******Note to self - remove when going to sites although it shouldn't hurt if you forget - WCJ **********
"RTN","IBCE837A",90,0)
 . I '$$PROD^XUPROD(1) S XMTO("G.CLAIMS4US")=""
"RTN","IBCE837A",91,0)
 . ;
"RTN","IBCE837A",92,0)
 . I IBQUEUE["@" S XMTO(IBQUEUE)=""
"RTN","IBCE837A",93,0)
 . S XMDUZ=$G(IBDUZ),XMBODY="^TMP(""IBXMSG"","_$J_")",XMSUBJ=$S($P(IBBTYP,U,2):"** TEST"_$S($P(IBBTYP,U,2)=2:"/RESUB OF LIVE",1:""),1:"")_" CLAIM BATCH: "_$S(IBQUEUE'["@":IBQUEUE,1:$P(IBQUEUE,"@"))_"/"_IBBNO
"RTN","IBCE837A",94,0)
 . K XMZ
"RTN","IBCE837A",95,0)
 . D SENDMSG^XMXAPI(XMDUZ,XMSUBJ,XMBODY,.XMTO,,.XMZ)
"RTN","IBCE837A",96,0)
 . I $G(XMZ) D
"RTN","IBCE837A",97,0)
 .. D UPD(XMZ,$P($G(^TMP("IBHDR",$J)),U),IBCTM,.IBBILL,IBDESC,IBBTYP,IBINS) ;Update batch/bills
"RTN","IBCE837A",98,0)
 .. S ^TMP("IBCE-BATCH",$J,IBBNO)=IBBDA_U_IBCTM_U_$P($G(^TMP("IBRESUBMIT",$J)),U)
"RTN","IBCE837A",99,0)
MAILQ S IBCTM=0
"RTN","IBCE837A",100,0)
 D CHKBTCH(+$G(^TMP("IBHDR",$J)))
"RTN","IBCE837A",101,0)
 K ^TMP("IBHDR",$J),^TMP("IBHDR1",$J),^TMP("IBXMSG",$J),IBBILL
"RTN","IBCE837A",102,0)
 Q
"RTN","IBCE837A",103,0)
 ;
"RTN","IBCE837A",104,0)
CHKNEW(IBQ,IBBILL,IBCTM,IBDESC,IBBTYP,IBINS,IBSITE,IBSIZE) ;
"RTN","IBCE837A",105,0)
 ;  Determine if ok to send msg
"RTN","IBCE837A",106,0)
 ;  Check for one insurance per batch if IBINS defined
"RTN","IBCE837A",107,0)
 ; Returns IBSIZE, IBCTM, IBBILL (pass by reference)
"RTN","IBCE837A",108,0)
 ;
"RTN","IBCE837A",109,0)
 ; IBQ = data queue name
"RTN","IBCE837A",110,0)
 ; IBBILL = the 'list' of bill #'s in the batch
"RTN","IBCE837A",111,0)
 ; IBCTM = the # of claims output so far to the batch
"RTN","IBCE837A",112,0)
 ; IBDESC = the batch description text
"RTN","IBCE837A",113,0)
 ; IBBTYP = X-Y where X = P for professional, I for institution, or D for Dental
"RTN","IBCE837A",114,0)
 ;                    Y = 1 for test or 0 for live transmission
"RTN","IBCE837A",115,0)
 ; IBINS = the ien of the single insurance co. for the batch (optional)
"RTN","IBCE837A",116,0)
 ; IBSITE = the '8' node of file 350.9 (IB PARAMETERS)
"RTN","IBCE837A",117,0)
 ; IBSIZE = the 'running' size of the output message
"RTN","IBCE837A",118,0)
 ;
"RTN","IBCE837A",119,0)
 Q:$S($G(IBINS)="":0,1:'$P(IBSITE,U,7))
"RTN","IBCE837A",120,0)
 ;
"RTN","IBCE837A",121,0)
 ; New batch needed
"RTN","IBCE837A",122,0)
 I IBCTM D MAILIT(IBQ,.IBBILL,.IBCTM,"",IBDESC,IBBTYP,IBINS) S IBSIZE=0
"RTN","IBCE837A",123,0)
 Q
"RTN","IBCE837A",124,0)
 ;
"RTN","IBCE837A",125,0)
ERRMSG(XMBODY) ; Send bulletin for error message
"RTN","IBCE837A",126,0)
 N XMTO,XMSUBJ
"RTN","IBCE837A",127,0)
 S XMTO("I:G.IB EDI")="",XMSUBJ="EDI 837 TRANSMISSION ERRORS"
"RTN","IBCE837A",128,0)
 ;
"RTN","IBCE837A",129,0)
 D SENDMSG^XMXAPI(,XMSUBJ,XMBODY,.XMTO)
"RTN","IBCE837A",130,0)
 D ALERT("One or more EDI bills were not transmitted.  Check your mail for details","G.IB EDI")
"RTN","IBCE837A",131,0)
 Q
"RTN","IBCE837A",132,0)
 ;
"RTN","IBCE837A",133,0)
CLEANUP ; Cleans up bill transmission environment
"RTN","IBCE837A",134,0)
 ;
"RTN","IBCE837A",135,0)
 N IBTEST
"RTN","IBCE837A",136,0)
 S IBTEST=+$G(^TMP("IBEDI_TEST_BATCH",$J))
"RTN","IBCE837A",137,0)
 L -^IBA(364,0)
"RTN","IBCE837A",138,0)
 I $D(^TMP("IBRESUBMIT",$J,"IBXERR"))!$D(^TMP("IBONE",$J,"IBXERR"))!$D(^TMP("IBSELX",$J,"IBXERR")) D  ;Error message to mail group
"RTN","IBCE837A",139,0)
 . N XMTO,XMBODY,XMDUZ,XMSUBJ,XMZ,IBFUNC
"RTN","IBCE837A",140,0)
 . S IBFUNC=$S($D(^TMP("IBRESUBMIT",$J,"IBXERR")):$S('IBTEST:1,1:4),$D(^TMP("IBONE",$J,"IBXERR")):2,1:3)
"RTN","IBCE837A",141,0)
 . Q:'IBFUNC
"RTN","IBCE837A",142,0)
 . S XMTO("I:G.IB EDI")="",XMDUZ="",XMBODY="^TMP("""_$S(IBFUNC=1!(IBFUNC=4):"IBRESUBMIT",1:"IBONE")_""","_$J_",""IBXERR"")"
"RTN","IBCE837A",143,0)
 . S XMSUBJ="EDI 837 B"_$P("ATCH^ILL^ILL(s)^ILL(s)",U,IBFUNC)_" NOT "_$S($G(^TMP("IBONE",$J)):"RE",1:"")_"SUBMITTED"_$S('IBTEST:"",1:" AS TEST CLAIMS")
"RTN","IBCE837A",144,0)
 . D SENDMSG^XMXAPI(XMDUZ,XMSUBJ,XMBODY,.XMTO,,.XMZ)
"RTN","IBCE837A",145,0)
 . K ^TMP("IBRESUBMIT",$J),^TMP("IBONE",$J)
"RTN","IBCE837A",146,0)
 ;
"RTN","IBCE837A",147,0)
 I $D(^TMP("IBRESUBMIT",$J)),'IBTEST D RESUBUP^IBCEM02 ;Upd resubmtd batch bills
"RTN","IBCE837A",148,0)
 I '$D(^TMP("IBSELX",$J)) K ^TMP("IBCE-BATCH",$J)
"RTN","IBCE837A",149,0)
 K ^TMP("IBXERR",$J),IBXERR
"RTN","IBCE837A",150,0)
 I 'IBTEST D CHKBTCH(+$G(^TMP("IBHDR",$J)))
"RTN","IBCE837A",151,0)
CLEANP ;  Entrypoint for extract data disply
"RTN","IBCE837A",152,0)
 K ^TMP("IBTXMT",$J),^TMP("IBXINS",$J)
"RTN","IBCE837A",153,0)
 K ^TMP("IBRESUBMIT",$J),^TMP("IBRESUB",$J),^TMP("IBNOT",$J),^TMP("IBONE",$J),^TMP("IBHDR",$J),^TMP("IBTX",$J),^TMP("IBEDI_TEST_BATCH",$J)
"RTN","IBCE837A",154,0)
 K ^UTILITY("VADM",$J)
"RTN","IBCE837A",155,0)
 D CLEAN^DILF
"RTN","IBCE837A",156,0)
 K ZTREQ S ZTREQ="@"
"RTN","IBCE837A",157,0)
 Q
"RTN","IBCE837A",158,0)
 ;
"RTN","IBCE837A",159,0)
ALERT(XQAMSG,IBGRP) ; Send alert message
"RTN","IBCE837A",160,0)
 N XQA
"RTN","IBCE837A",161,0)
 S XQA(IBGRP)=""
"RTN","IBCE837A",162,0)
 D SETUP^XQALERT
"RTN","IBCE837A",163,0)
 Q
"RTN","IBCE837A",164,0)
CHKBTCH(IBBNO) ; Delete batch whose batch # is IBBNO if no entries in file 364
"RTN","IBCE837A",165,0)
 ; and not a resubmitted batch
"RTN","IBCE837A",166,0)
 N IBZ,DA,DIK
"RTN","IBCE837A",167,0)
 S IBZ=+$O(^IBA(364.1,"B",+IBBNO,""))
"RTN","IBCE837A",168,0)
 I IBZ,'$O(^IBA(364,"C",IBZ,0)),'$P($G(^IBA(364.1,IBZ,0)),U,14) S DA=IBZ,DIK="^IBA(364.1," D ^DIK
"RTN","IBCE837A",169,0)
 Q
"RTN","IBCE837A",170,0)
 ;
"RTN","IBCE837A",171,0)
TESTLIM(IBINS) ; Check for test bill limit per day has been reached
"RTN","IBCE837A",172,0)
 N IB3,DA,DIK
"RTN","IBCE837A",173,0)
 S IB3=$G(^DIC(36,IBINS,3))
"RTN","IBCE837A",174,0)
 I $P(IB3,U,5)'=DT S $P(IB3,U,7)=0
"RTN","IBCE837A",175,0)
 I ($P(IB3,U,7)+$G(^TMP("IBICT",$J,IBINS))+1)>$P(IB3,U,6) D  Q
"RTN","IBCE837A",176,0)
 . S IBINS="" ;max # hit
"RTN","IBCE837A",177,0)
 . S DA=IBX,DIK="^IBA(364," D ^DIK
"RTN","IBCE837A",178,0)
 S ^TMP("IBICT",$J,IBINS)=$G(^TMP("IBICT",$J,IBINS))+1
"RTN","IBCE837A",179,0)
 Q
"RTN","IBCE837A",180,0)
 ;
"RTN","IBCE837A",181,0)
SETVAR(IBXIEN,IBINS,IB0,IBSEC,IBNID,IB837R,IBDIV) ;
"RTN","IBCE837A",182,0)
 ; Set up variables needed for subscripts in sort global
"RTN","IBCE837A",183,0)
 ; ejk added IBSEC logic for patch 296
"RTN","IBCE837A",184,0)
 ; IBSEC=1 if primary bill, 2 if 2nd/non-MRA, 3 if 2nd/MRA
"RTN","IBCE837A",185,0)
 S IBSEC=$S($$COBN^IBCEF(IBXIEN)=1:1,'$$MRASEC^IBCEF4(IBXIEN):2,1:3)
"RTN","IBCE837A",186,0)
 S IBNID=$$PAYERID^IBCEF2(IBXIEN)
"RTN","IBCE837A",187,0)
 S IB837R=$$RECVR^IBCEF2(IBXIEN)
"RTN","IBCE837A",188,0)
 S IBDIV=$P($S($P(IB0,U,22):$$SITE^VASITE(DT,$P(IB0,U,22)),1:$$SITE^VASITE()),U,3)
"RTN","IBCE837A",189,0)
 I IBNID'="","RPIHS"[$E(IBNID),$E(IBNID,2,$L(IBNID))="PRNT" S IBNID=IBNID_"*"_IBINS
"RTN","IBCE837A",190,0)
 I IBNID="" S IBNID="*"_IBINS
"RTN","IBCE837A",191,0)
 S $P(IBNID,"*",3)=$S($P(IB0,U,22):$P(IB0,U,22),1:"")
"RTN","IBCE837A",192,0)
 Q
"RTN","IBCE837A",193,0)
 ;
"RTN","IBCECOB1")
0^130^B146167511^B144950163
"RTN","IBCECOB1",1,0)
IBCECOB1 ;ALB/CXW - IB COB MANAGEMENT SCREEN/REPORT ;14-JUN-99
"RTN","IBCECOB1",2,0)
 ;;2.0;INTEGRATED BILLING;**137,155,288,348,377,417,432,447,488,516,547,592**;21-MAR-94;Build 58
"RTN","IBCECOB1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCECOB1",4,0)
 ;
"RTN","IBCECOB1",5,0)
 ; IBMRANOT = 1 when dealing with the COB Management Worklist.   
"RTN","IBCECOB1",6,0)
 ;            It is set by the entry action in the option file. 
"RTN","IBCECOB1",7,0)
 ;
"RTN","IBCECOB1",8,0)
BLD ; Build list entrypoint
"RTN","IBCECOB1",9,0)
 ;
"RTN","IBCECOB1",10,0)
 N I,IB3611,IB364,IBAMT,IBAPY,IBB,IBB364,IBBPY,IBDA,IBDA1,IBDAY
"RTN","IBCECOB1",11,0)
 N IBDENDUP,IBDIV,IBDT,IBDTN,IBEOBREV,IBEUT,IBEXPY,IBFND,IBHIS
"RTN","IBCECOB1",12,0)
 N IBIFN,IBINS,IBINS1,IBINS2,IBMRACNT,IBMUT,IBNBAL,IBNDI1,IBNDI2
"RTN","IBCECOB1",13,0)
 N IBNDI3,IBNDM,IBNDS,IBOAM,IBPTNM,IBPTRSP,IBPY,IBQ,IBSEQ,IBSRVC
"RTN","IBCECOB1",14,0)
 N EOBTYPE,MSEFLG,Z,Z0
"RTN","IBCECOB1",15,0)
 ;
"RTN","IBCECOB1",16,0)
 K ^TMP("IBCECOB",$J),^TMP("IBCECOB1",$J),^TMP("IBCOBST",$J),^TMP("IBCOBSTX",$J)
"RTN","IBCECOB1",17,0)
 D CLEAN^VALM10      ; kill data and video control arrays
"RTN","IBCECOB1",18,0)
 S (VALMCNT,MSEFLG)=0,IBHIS=""
"RTN","IBCECOB1",19,0)
 ; IB*2.0*432 IF not MRA, use new CAP index on 399 file
"RTN","IBCECOB1",20,0)
 D:$G(IBMRANOT)=1 CAP^IBCAPP2
"RTN","IBCECOB1",21,0)
 ; since 0 is a valid Review Status, init w/null
"RTN","IBCECOB1",22,0)
 S IBEOBREV=""
"RTN","IBCECOB1",23,0)
 ; get EOB's w/Review Status of 0, 1, 1.5 or 2; If 3 or higher, not needed
"RTN","IBCECOB1",24,0)
 I $G(IBMRANOT)'=1 F  S IBEOBREV=$O(^IBM(361.1,"AMRA",1,IBEOBREV)) Q:IBEOBREV=""  Q:IBEOBREV>2  D
"RTN","IBCECOB1",25,0)
 . S IBDA="A" F  S IBDA=$O(^IBM(361.1,"AMRA",1,IBEOBREV,IBDA),-1) Q:'IBDA  D BLD1
"RTN","IBCECOB1",26,0)
 ;
"RTN","IBCECOB1",27,0)
 ; no data accumulated
"RTN","IBCECOB1",28,0)
 I $O(^TMP("IBCOBST",$J,""))="" D NMAT Q
"RTN","IBCECOB1",29,0)
 ;
"RTN","IBCECOB1",30,0)
 ; display accumulated data
"RTN","IBCECOB1",31,0)
 D SCRN
"RTN","IBCECOB1",32,0)
 Q
"RTN","IBCECOB1",33,0)
 ;
"RTN","IBCECOB1",34,0)
BLD1 ;
"RTN","IBCECOB1",35,0)
 ;
"RTN","IBCECOB1",36,0)
 S MSEFLG=$$ELIG(IBDA) Q:'MSEFLG
"RTN","IBCECOB1",37,0)
 S IBDENDUP=$$DENDUP^IBCEMU4(IBDA,$G(IBMRANOT))
"RTN","IBCECOB1",38,0)
 I '$G(IBMRADUP),IBDENDUP Q     ; don't include denied MRAs/EOBs for Duplicate Claim/Service
"RTN","IBCECOB1",39,0)
 S IB3611=$G(^IBM(361.1,IBDA,0))
"RTN","IBCECOB1",40,0)
 S IBIFN=+IB3611,IB364=$P(IB3611,U,19),IBDT=+$P(IB3611,U,6)
"RTN","IBCECOB1",41,0)
 I $D(^TMP("IBCOBSTX",$J,IBIFN)) Q  ;show each bill once on the worklist
"RTN","IBCECOB1",42,0)
 S IBB=$G(^DGCR(399,IBIFN,0))
"RTN","IBCECOB1",43,0)
 ;
"RTN","IBCECOB1",44,0)
 ; MRD;IB*2.0*516 - User requested the ability to sort the COB Mgmt
"RTN","IBCECOB1",45,0)
 ; Worklist by Division.  To enable this, the Division was added as
"RTN","IBCECOB1",46,0)
 ; a subscript to the ^TMP("IBCOBST") array. For now, that subscript
"RTN","IBCECOB1",47,0)
 ; will always be "UNKNOWN" when building the MRA Worklist.  To turn
"RTN","IBCECOB1",48,0)
 ; on sort-by-division for the MRA Worklist, uncomment out the fol-
"RTN","IBCECOB1",49,0)
 ; lowing two lines and delete the line Setting IBDIV to "UNKNOWN".
"RTN","IBCECOB1",50,0)
 ;S IBDIV=$P(IBB,U,22) I IBDIV="" S IBDIV="UNKNOWN"
"RTN","IBCECOB1",51,0)
 ;I $D(^TMP("IBBIL-DIV",$J)),'$D(^TMP("IBBIL-DIV",$J,IBDIV)) Q
"RTN","IBCECOB1",52,0)
 S IBDIV="UNKNOWN"
"RTN","IBCECOB1",53,0)
 ;
"RTN","IBCECOB1",54,0)
 S IBNDS=$G(^DGCR(399,IBIFN,"S")),IBNDI1=$G(^("I1")),IBNDI2=$G(^("I2")),IBNDI3=$G(^("I3")),IBNDM=$G(^("M"))
"RTN","IBCECOB1",55,0)
 S IBMUT=+$P(IBNDS,U,8),IBEUT=+$P(IBNDS,U,2)
"RTN","IBCECOB1",56,0)
 S IBINS="",IBSEQ=$P(IB3611,U,15)
"RTN","IBCECOB1",57,0)
 F I=1:1:3 S Z="IBNDI"_I I @Z D
"RTN","IBCECOB1",58,0)
 . N Q
"RTN","IBCECOB1",59,0)
 . S Q=(IBSEQ=I)
"RTN","IBCECOB1",60,0)
 . I Q S IBINS1=+@Z_U_$P($G(^DIC(36,+@Z,0)),U)
"RTN","IBCECOB1",61,0)
 . S IBINS=IBINS_$S(IBINS="":"",1:", ")_$P($G(^DIC(36,+@Z,0)),U)
"RTN","IBCECOB1",62,0)
 . Q
"RTN","IBCECOB1",63,0)
 ; Get the payer/insurance company that comes after Medicare WNR
"RTN","IBCECOB1",64,0)
 ; If WNR is Primary, get the secondary ins. co.
"RTN","IBCECOB1",65,0)
 ; If WNR is secondary, get the tertiary ins. co.
"RTN","IBCECOB1",66,0)
 D  I $P($G(IBINS2),U,2)="" S $P(IBINS2,U,2)="UNKNOWN"
"RTN","IBCECOB1",67,0)
 . I $$WNRBILL^IBEFUNC(IBIFN,1) S IBINS2=+IBNDI2_U_$P($G(^DIC(36,+IBNDI2,0)),U) Q
"RTN","IBCECOB1",68,0)
 . S IBINS2=+IBNDI3_U_$P($G(^DIC(36,+IBNDI3,0)),U)
"RTN","IBCECOB1",69,0)
 . Q
"RTN","IBCECOB1",70,0)
 S IBFND=0
"RTN","IBCECOB1",71,0)
 ; biller entry not ALL and no biller, then get entered/edited by user
"RTN","IBCECOB1",72,0)
 I $D(^TMP("IBBIL",$J)) D  Q:'IBFND
"RTN","IBCECOB1",73,0)
 . S IBFND=$S($D(^TMP("IBBIL",$J,IBMUT)):IBMUT,$D(^TMP("IBBIL",$J,IBEUT)):IBEUT,1:0)
"RTN","IBCECOB1",74,0)
 . Q
"RTN","IBCECOB1",75,0)
 S Z=$S(IBFND:IBFND,IBMUT:IBMUT,1:IBEUT)
"RTN","IBCECOB1",76,0)
 S IBMUT=$P($G(^VA(200,+Z,0)),U)_"~"_Z
"RTN","IBCECOB1",77,0)
 S:'$P(IBMUT,"~",2) IBMUT="UNKNOWN~0"
"RTN","IBCECOB1",78,0)
 S IBBPY=+$$COBN^IBCEF(IBIFN),IBQ=1
"RTN","IBCECOB1",79,0)
 ;
"RTN","IBCECOB1",80,0)
 ;IBQ;1=EOB without subsequent insurer,0=COB,2=0 balance
"RTN","IBCECOB1",81,0)
 D  ;I IBQ Q
"RTN","IBCECOB1",82,0)
 . ;Check for no reimbursable subsequent insurance
"RTN","IBCECOB1",83,0)
 . F I=IBBPY+1:1:3 D  Q:'IBQ
"RTN","IBCECOB1",84,0)
 .. S Z="IBNDI"_I,Z=$G(@Z)
"RTN","IBCECOB1",85,0)
 .. I $P($G(^DIC(36,+Z,0)),U,2)="N" S IBQ=0 Q
"RTN","IBCECOB1",86,0)
 .. Q
"RTN","IBCECOB1",87,0)
 . ;Check if next ins doesn't exist or next bill# already created
"RTN","IBCECOB1",88,0)
 . S Z="IBNDI"_(IBBPY+1),Z=$G(@Z)
"RTN","IBCECOB1",89,0)
 . I Z,'$P($G(^DGCR(399,IBIFN,"M1")),U,5+IBBPY) S IBQ=0
"RTN","IBCECOB1",90,0)
 . Q
"RTN","IBCECOB1",91,0)
 ;
"RTN","IBCECOB1",92,0)
 ; Days since transmission of latest bill in COB - IBDAY
"RTN","IBCECOB1",93,0)
 S IBDAY=+$P($G(^DGCR(399,IBIFN,"TX")),U,2) I IBDAY S IBDAY=$$FMDIFF^XLFDT(DT,IBDAY,1)
"RTN","IBCECOB1",94,0)
 ; if no Last Electronic Extract Date on file 399, get it from file 364
"RTN","IBCECOB1",95,0)
 I 'IBDAY D  I IBDAY S IBDAY=$$FMDIFF^XLFDT(DT,IBDAY,1) ;calc. the difference
"RTN","IBCECOB1",96,0)
 . S IBB364=$$LAST364^IBCEF4(IBIFN) I IBB364'="" S IBDAY=+$P($P($G(^IBA(364,IBB364,0)),U,4),".",1)
"RTN","IBCECOB1",97,0)
 ;
"RTN","IBCECOB1",98,0)
 S IBAPY=$$TPR^PRCAFN(IBIFN) ; payment on this bill from A/R
"RTN","IBCECOB1",99,0)
 S IBEXPY=+$G(^IBM(361.1,IBDA,1))       ; payer paid amount
"RTN","IBCECOB1",100,0)
 ; IB*2.0*447 add excess indicator to MRW screen and adjust calcs to include percentages
"RTN","IBCECOB1",101,0)
 S IBPTRSP=$S($$MSEDT^IBCEMU4(IBIFN)'="":$$MSPRE^IBCEMU4(IBIFN,1),1:$$PREOBTOT^IBCEU0(IBIFN)) ; patient resp. function
"RTN","IBCECOB1",102,0)
 S IBPY=$S(IBAPY:IBAPY,1:IBEXPY)
"RTN","IBCECOB1",103,0)
 S IBOAM=+$G(^DGCR(399,IBIFN,"U1"))     ; total charges for bill
"RTN","IBCECOB1",104,0)
 S IBNBAL=IBOAM-IBPY
"RTN","IBCECOB1",105,0)
 I IBNBAL'>0 S IBQ=2
"RTN","IBCECOB1",106,0)
 S IBPTNM=$P($G(^DPT(+$P($G(^DGCR(399,IBIFN,0)),U,2),0)),U) I IBPTNM="" S IBPTNM="UNKNOWN"
"RTN","IBCECOB1",107,0)
 S IBSRVC=$P($G(^DGCR(399,IBIFN,"U")),U)
"RTN","IBCECOB1",108,0)
 ;
"RTN","IBCECOB1",109,0)
 ; MRD;IB*2.0*516 - Added Division as a subscript.
"RTN","IBCECOB1",110,0)
 S Z0=$S(IBSRT="B":IBMUT,IBSRT="D":-IBDAY,IBSRT="I":$P(IBINS2,U,2)_"~"_$P(IBINS2,U),IBSRT="M":$$EXTERNAL^DILFD(361.1,.13,"",$P(IB3611,"^",13)),IBSRT="R":-IBPTRSP,IBSRT="P":IBPTNM,IBSRT="S":+IBSRVC,1:+IBDT)
"RTN","IBCECOB1",111,0)
 S:((IBSRT="M")&(Z0="")) Z0="UNKNOWN"   ;USE UNKNOWN IF NOT SET - BI;IB*2.0*432
"RTN","IBCECOB1",112,0)
 ;I $D(^TMP("IBCOBST",$J,Z0,IBIFN)),$P(^TMP("IBCOBST",$J,Z0,IBIFN),U,19)=-1 S MSEFLG=-1   ; If a MSE was previously found for IBIFN, we want to insure that we don't ignore that by resetting the 19th piece to something else.
"RTN","IBCECOB1",113,0)
 I $D(^TMP("IBCOBST",$J,IBDIV,Z0,IBIFN)),$P(^TMP("IBCOBST",$J,IBDIV,Z0,IBIFN),U,19)=-1 S MSEFLG=-1   ; If a MSE was previously found for IBIFN, we want to insure that we don't ignore that by resetting the 19th piece to something else.
"RTN","IBCECOB1",114,0)
 ;
"RTN","IBCECOB1",115,0)
 ;S ^TMP("IBCOBST",$J,Z0,IBIFN)=IBSRVC_U_IBOAM_U_IBAPY_U_$S(IBNBAL>0:IBNBAL,1:0)_U_$P(IBB,U,5)_U_$P(IBB,U,19)_U_IBBPY_U_$P(IBMUT,"~")_U_IBINS_U_IBDA_U_$$HIS(IBIFN)_U_IBDAY_U_IBDT_U_IBQ_U_IB364_U_IBSEQ_U_IBEXPY_U_IBPTRSP_U_MSEFLG
"RTN","IBCECOB1",116,0)
 ;S ^TMP("IBCOBST",$J,Z0,IBIFN,1)=$$EXTERNAL^DILFD(361.1,.13,"",$P(IB3611,"^",13))_", "_$$FMTE^XLFDT($P($P(IB3611,"^",6),"."))_"^"_$P(IB3611,"^",16)
"RTN","IBCECOB1",117,0)
 S ^TMP("IBCOBST",$J,IBDIV,Z0,IBIFN)=IBSRVC_U_IBOAM_U_IBAPY_U_$S(IBNBAL>0:IBNBAL,1:0)_U_$P(IBB,U,5)_U_$P(IBB,U,19)_U_IBBPY_U_$P(IBMUT,"~")_U_IBINS_U_IBDA_U_$$HIS(IBIFN)_U_IBDAY_U_IBDT_U_IBQ_U_IB364_U_IBSEQ_U_IBEXPY_U_IBPTRSP_U_MSEFLG
"RTN","IBCECOB1",118,0)
 S ^TMP("IBCOBST",$J,IBDIV,Z0,IBIFN,1)=$$EXTERNAL^DILFD(361.1,.13,"",$P(IB3611,"^",13))_", "_$$FMTE^XLFDT($P($P(IB3611,"^",6),"."))_"^"_$P(IB3611,"^",16)
"RTN","IBCECOB1",119,0)
 S ^TMP("IBCOBSTX",$J,IBIFN)=IBDA  ;keep track of compiled IBIFN's
"RTN","IBCECOB1",120,0)
 ;
"RTN","IBCECOB1",121,0)
 ; Save some data when there are multiple MRA's on file for this bill
"RTN","IBCECOB1",122,0)
 S IBMRACNT=$$MRACNT^IBCEMU1(IBIFN,$G(IBMRANOT))   ;WCJ IB*2.0*432
"RTN","IBCECOB1",123,0)
 ;I IBMRACNT>1 S $P(^TMP("IBCOBST",$J,Z0,IBIFN,1),U,1)="Multiple "_$S($G(IBMRANOT):"EOBs",1:"MRA's")_" on file"  ;WCJ IB*2.0*432
"RTN","IBCECOB1",124,0)
 ;S $P(^TMP("IBCOBST",$J,Z0,IBIFN,1),U,3)=IBMRACNT
"RTN","IBCECOB1",125,0)
 ;S $P(^TMP("IBCOBST",$J,Z0,IBIFN,1),U,4)=IBDENDUP
"RTN","IBCECOB1",126,0)
 I IBMRACNT>1 S $P(^TMP("IBCOBST",$J,IBDIV,Z0,IBIFN,1),U,1)="Multiple "_$S($G(IBMRANOT):"EOBs",1:"MRA's")_" on file"  ;WCJ IB*2.0*432
"RTN","IBCECOB1",127,0)
 S $P(^TMP("IBCOBST",$J,IBDIV,Z0,IBIFN,1),U,3)=IBMRACNT
"RTN","IBCECOB1",128,0)
 S $P(^TMP("IBCOBST",$J,IBDIV,Z0,IBIFN,1),U,4)=IBDENDUP
"RTN","IBCECOB1",129,0)
 Q
"RTN","IBCECOB1",130,0)
 ;
"RTN","IBCECOB1",131,0)
HIS(IBIFN) ; COB history
"RTN","IBCECOB1",132,0)
 N A,B,IBST,IBBIL,IBHIS
"RTN","IBCECOB1",133,0)
 S IBHIS="",A=0 F  S A=$O(^IBM(361.1,"ABS",IBIFN,A)) Q:'A  S B=0 F  S B=$O(^IBM(361.1,"ABS",IBIFN,A,B)) Q:'B  D
"RTN","IBCECOB1",134,0)
 . S IBST=$P($G(^IBM(361.1,B,0)),U,4),IBBIL=$P($G(^DGCR(399,IBIFN,"M1")),U,4+A)   ;WCJ IB*2.0*432 added $G
"RTN","IBCECOB1",135,0)
 . Q:IBBIL=""
"RTN","IBCECOB1",136,0)
 . S IBHIS=IBHIS_$S(IBHIS="":"",1:";")_$S(A=1:"PRIMARY",A=2:"SECONDARY",1:"TERTIARY")_" "_$S(IBST:"MRA",1:"EOB")_" RECEIVED - "_IBBIL
"RTN","IBCECOB1",137,0)
 Q IBHIS
"RTN","IBCECOB1",138,0)
 ;
"RTN","IBCECOB1",139,0)
NMAT ;No COB list
"RTN","IBCECOB1",140,0)
 S VALMCNT=2,IBCNT=2
"RTN","IBCECOB1",141,0)
 S ^TMP("IBCECOB",$J,1,0)=" "
"RTN","IBCECOB1",142,0)
 S ^TMP("IBCECOB",$J,2,0)="    No "_$S($G(IBMRANOT)=1:"EOB's",1:"MRA's")_" Matching Selection Criteria Were Found"
"RTN","IBCECOB1",143,0)
 Q
"RTN","IBCECOB1",144,0)
 ;
"RTN","IBCECOB1",145,0)
SCRN ;
"RTN","IBCECOB1",146,0)
 N IB,IBCNT,IBDA,IBDIV,IBIFN,IBFORM,IBK,IBPAT,IBS1,IBX,MSEFLG,X,Z
"RTN","IBCECOB1",147,0)
 ;
"RTN","IBCECOB1",148,0)
 S IBCNT=0
"RTN","IBCECOB1",149,0)
 ; IB*2.0*547 - Add primary insurance company sort, had to break into 2 lines
"RTN","IBCECOB1",150,0)
 S IBS1=$S(IBSRT="B":"BILLER",IBSRT="D":"Days Since Last Transmission",IBSRT="L":"Date Last "_$S($G(IBMRANOT):"EOB",1:"MRA")_" Received",IBSRT="I":"SECONDARY INSURANCE COMPANY",IBSRT="M":$S($G(IBMRANOT):"EOB",1:"MRA")_" Status",1:"")
"RTN","IBCECOB1",151,0)
 S:IBSRT="K" IBS1="PRIMARY INSURANCE COMPANY"
"RTN","IBCECOB1",152,0)
 ;
"RTN","IBCECOB1",153,0)
 ; MRD;IB*2.0*516 - Added Division as a subscript.
"RTN","IBCECOB1",154,0)
 S IBDIV=""
"RTN","IBCECOB1",155,0)
 F  S IBDIV=$O(^TMP("IBCOBST",$J,IBDIV)) Q:IBDIV=""  D
"RTN","IBCECOB1",156,0)
 . I IBCNT D SET("",IBCNT+1)
"RTN","IBCECOB1",157,0)
 . D SET("Division: "_$$GET1^DIQ(40.8,IBDIV_",",.01,"E"),IBCNT+1)
"RTN","IBCECOB1",158,0)
 . ;
"RTN","IBCECOB1",159,0)
 . ;S IBX="" F  S IBX=$O(^TMP("IBCOBST",$J,IBX)) Q:IBX=""  D
"RTN","IBCECOB1",160,0)
 . S IBX="" F  S IBX=$O(^TMP("IBCOBST",$J,IBDIV,IBX)) Q:IBX=""  D
"RTN","IBCECOB1",161,0)
 .. ; P547
"RTN","IBCECOB1",162,0)
 .. ;I IBSRT="B"!(IBSRT="I")!(IBSRT="M") D
"RTN","IBCECOB1",163,0)
 .. I IBSRT="B"!(IBSRT="I")!(IBSRT="M")!(IBSRT="K") D
"RTN","IBCECOB1",164,0)
 ... I IBCNT D SET("",IBCNT+1)
"RTN","IBCECOB1",165,0)
 ... D SET(IBS1_": "_$P(IBX,"~"),IBCNT+1)
"RTN","IBCECOB1",166,0)
 ... Q
"RTN","IBCECOB1",167,0)
 .. ;
"RTN","IBCECOB1",168,0)
 .. ;S IBIFN=0 F  S IBIFN=$O(^TMP("IBCOBST",$J,IBX,IBIFN)) Q:'IBIFN  D
"RTN","IBCECOB1",169,0)
 .. S IBIFN=0 F  S IBIFN=$O(^TMP("IBCOBST",$J,IBDIV,IBX,IBIFN)) Q:'IBIFN  D
"RTN","IBCECOB1",170,0)
 ... ;S IB=$G(^TMP("IBCOBST",$J,IBX,IBIFN))
"RTN","IBCECOB1",171,0)
 ... S IB=$G(^TMP("IBCOBST",$J,IBDIV,IBX,IBIFN))
"RTN","IBCECOB1",172,0)
 ... S Z=$G(^DPT(+$P($G(^DGCR(399,IBIFN,0)),U,2),0))
"RTN","IBCECOB1",173,0)
 ... S IBPAT=$$LJ^XLFSTR($E($P(Z,U),1,18),18," ")_" "_$E($P(Z,U,9),6,9)
"RTN","IBCECOB1",174,0)
 ... S IBDA=$P(IB,U,10) ;361.1-ien
"RTN","IBCECOB1",175,0)
 ... S IBQ=$P(IB,U,14),IB364=$P(IB,U,15)
"RTN","IBCECOB1",176,0)
 ... ; IB*2.0*447 shorten form column to I for Instutional and P for Professional
"RTN","IBCECOB1",177,0)
 ... ;S IBFORM=$$EXTERNAL^DILFD(399,.19,,+$P(IB,U,6))
"RTN","IBCECOB1",178,0)
 ... ;I +$P(IB,U,6)=2 S IBFORM=1500   ; for space reasons
"RTN","IBCECOB1",179,0)
 ... ;JWS;IB*2.0*592;Add 'D' for Dental display
"RTN","IBCECOB1",180,0)
 ... S IBFORM=$S(+$P(IB,U,6)=2:"P",+$P(IB,U,6)=7:"D",1:"I")
"RTN","IBCECOB1",181,0)
 ... S IBPTRSP=$P(IB,U,18)
"RTN","IBCECOB1",182,0)
 ... S MSEFLG=$P(IB,U,19)
"RTN","IBCECOB1",183,0)
 ... S IBAMT=$P(IB,U,2)
"RTN","IBCECOB1",184,0)
 ... S IBCNT=IBCNT+1
"RTN","IBCECOB1",185,0)
 ... S X=""
"RTN","IBCECOB1",186,0)
 ... S X=$$SETFLD^VALM1(IBCNT,X,"NUMBER")
"RTN","IBCECOB1",187,0)
 ... ;;;S X=$$SETFLD^VALM1($$BN1^PRCAFN(IBIFN)_$S($P($G(^DGCR(399,IBIFN,"TX")),U,10)=1:"*",1:""),X,"BILL")
"RTN","IBCECOB1",188,0)
 ... S X=$$SETFLD^VALM1($S(MSEFLG=-1:"!",1:" ")_$$BN1^PRCAFN(IBIFN)_$S($P($G(^DGCR(399,IBIFN,"TX")),U,10)=1:"*",1:""),X,"BILL")  ; per IB*2.0*488
"RTN","IBCECOB1",189,0)
 ... S X=$$SETFLD^VALM1($$DAT1^IBOUTL($P(IB,U)),X,"SERVICE")
"RTN","IBCECOB1",190,0)
 ... S X=$$SETFLD^VALM1(IBPAT,X,"PATNM")
"RTN","IBCECOB1",191,0)
 ... S X=$$SETFLD^VALM1($$RJ^XLFSTR($FN(IBPTRSP,"",2),9," "),X,"PTRESP")
"RTN","IBCECOB1",192,0)
 ... S X=$$SETFLD^VALM1($$RJ^XLFSTR($FN(IBAMT,"",2),9," "),X,"IBAMT")
"RTN","IBCECOB1",193,0)
 ... S X=$$SETFLD^VALM1($E($$TYPE^IBJTLA1($P(IB,U,5)))_"/"_IBFORM,X,"BTYPE")
"RTN","IBCECOB1",194,0)
 ... D SET(X,IBCNT,IBIFN,IBDA,IBQ,IB364,IBX,IB)
"RTN","IBCECOB1",195,0)
 ... ;
"RTN","IBCECOB1",196,0)
 ... ;For R (Pt Resp), P (Pt Name) and S (Service Date) don't display sub-headers
"RTN","IBCECOB1",197,0)
 ... ;I "BIMRPS"'[IBSRT D  IB*2.0*547
"RTN","IBCECOB1",198,0)
 ... I "BIMRPSK"'[IBSRT D
"RTN","IBCECOB1",199,0)
 .... S Z=$S(IBSRT="L":$$DAT1^IBOUTL(IBX),IBSRT="D":-IBX,1:IBX)
"RTN","IBCECOB1",200,0)
 .... D SET("   "_IBS1_": "_Z,IBCNT)
"RTN","IBCECOB1",201,0)
 .... Q
"RTN","IBCECOB1",202,0)
 ... S X=$$SETSTR^VALM1("Insurers:  "_$P(IB,U,9),"",7,74)
"RTN","IBCECOB1",203,0)
 ... D SET(X,IBCNT,IBIFN,IBDA,IBQ,IB364,IBX,IB)
"RTN","IBCECOB1",204,0)
 ... ;
"RTN","IBCECOB1",205,0)
 ... ; line 3 of display:  MRA status/date/split claim indicator
"RTN","IBCECOB1",206,0)
 ... S X=$$SETSTR^VALM1($S($G(IBMRANOT):"EOB",1:"MRA")_" Status:  ","",5,13)
"RTN","IBCECOB1",207,0)
 ... ;S IBK=$G(^TMP("IBCOBST",$J,IBX,IBIFN,1))
"RTN","IBCECOB1",208,0)
 ... S IBK=$G(^TMP("IBCOBST",$J,IBDIV,IBX,IBIFN,1))
"RTN","IBCECOB1",209,0)
 ... S X=$$SETSTR^VALM1($P(IBK,U,1),X,18,63)
"RTN","IBCECOB1",210,0)
 ... I $P(IBK,U,2)=2 S X=$$SETSTR^VALM1("** SPLIT CLAIM **",X,63,18)
"RTN","IBCECOB1",211,0)
 ... I $P(IBK,U,4),$P(IBK,U,2)'=2,$P(IBK,U,3)=1 S X=$$SETSTR^VALM1("** Denied for Duplicate **",X,54,27)
"RTN","IBCECOB1",212,0)
 ... D SET(X,IBCNT,IBIFN,IBDA,IBQ,IB364,IBX,IB)
"RTN","IBCECOB1",213,0)
 ... ;
"RTN","IBCECOB1",214,0)
 ... ; conditionally update video attributes of line 3
"RTN","IBCECOB1",215,0)
 ... I '$D(IOINHI) D ENS^%ZISS
"RTN","IBCECOB1",216,0)
 ... ; split claim
"RTN","IBCECOB1",217,0)
 ... I $P(IBK,U,2)=2 D CNTRL^VALM10(VALMCNT,63,17,IOINHI,IOINORM)
"RTN","IBCECOB1",218,0)
 ... ; multiple mra's on file
"RTN","IBCECOB1",219,0)
 ... I $P(IBK,U,3)>1 D CNTRL^VALM10(VALMCNT,18,22,IOINHI,IOINORM)
"RTN","IBCECOB1",220,0)
 ... ; Denied for Duplicate - no split claim and single MRA only
"RTN","IBCECOB1",221,0)
 ... I $P(IBK,U,4),$P(IBK,U,2)'=2,$P(IBK,U,3)=1 D CNTRL^VALM10(VALMCNT,54,26,IOINHI,IOINORM)
"RTN","IBCECOB1",222,0)
 ... Q
"RTN","IBCECOB1",223,0)
 .. Q
"RTN","IBCECOB1",224,0)
 . Q
"RTN","IBCECOB1",225,0)
 ;
"RTN","IBCECOB1",226,0)
 Q
"RTN","IBCECOB1",227,0)
 ;
"RTN","IBCECOB1",228,0)
SET(X,CNT,IBIFN,IBDA,IBQ,IB364,IBX,IB) ;set up list manager screen array
"RTN","IBCECOB1",229,0)
 S VALMCNT=VALMCNT+1
"RTN","IBCECOB1",230,0)
 S ^TMP("IBCECOB",$J,VALMCNT,0)=X
"RTN","IBCECOB1",231,0)
 S ^TMP("IBCECOB",$J,"IDX",VALMCNT,CNT)=""
"RTN","IBCECOB1",232,0)
 I $G(IBIFN),$G(^TMP("IBCECOB",$J,CNT))="" S ^TMP("IBCECOB",$J,CNT)=VALMCNT_U_IBIFN_U_IB364_U_IBDA_U_IBQ_U_IBX,^TMP("IBCECOB1",$J,CNT)=IB
"RTN","IBCECOB1",233,0)
 Q
"RTN","IBCECOB1",234,0)
 ;
"RTN","IBCECOB1",235,0)
FTYPE(Y) ;type classification
"RTN","IBCECOB1",236,0)
 Q $E($P($G(^IBE(353,Y,0)),U),1,8)
"RTN","IBCECOB1",237,0)
 ;
"RTN","IBCECOB1",238,0)
PTRESPI(IBEOB) ; Function - Computes the Patient's Responsibility based on IBEOB
"RTN","IBCECOB1",239,0)
 ; of 361.1 for Claims/Bills with form type 3=UB
"RTN","IBCECOB1",240,0)
 ; Input IBEOB - a single EOB ien; Required
"RTN","IBCECOB1",241,0)
 ; Output      - Function Returns IBPTRES - Patient Responsibility Amount for the EOB
"RTN","IBCECOB1",242,0)
 ;
"RTN","IBCECOB1",243,0)
 N IBPTRES,IBC,EOBADJ
"RTN","IBCECOB1",244,0)
 S IBPTRES=0,IBEOB=+$G(IBEOB)
"RTN","IBCECOB1",245,0)
 I 'IBEOB Q IBPTRES   ;PTRESPI
"RTN","IBCECOB1",246,0)
 ; filing error
"RTN","IBCECOB1",247,0)
 Q:$D(^IBM(361.1,IBEOB,"ERR")) IBPTRES
"RTN","IBCECOB1",248,0)
 ;
"RTN","IBCECOB1",249,0)
 ; get claim level adjustments
"RTN","IBCECOB1",250,0)
 K EOBADJ M EOBADJ=^IBM(361.1,IBEOB,10)
"RTN","IBCECOB1",251,0)
 S IBPTRES=$$CALCPR^IBCEU0(.EOBADJ)
"RTN","IBCECOB1",252,0)
 ;
"RTN","IBCECOB1",253,0)
 ; get line level adjustments
"RTN","IBCECOB1",254,0)
 S IBC=0 F  S IBC=$O(^IBM(361.1,IBEOB,15,IBC)) Q:'IBC  D
"RTN","IBCECOB1",255,0)
 . K EOBADJ M EOBADJ=^IBM(361.1,IBEOB,15,IBC,1)
"RTN","IBCECOB1",256,0)
 . S IBPTRES=IBPTRES+$$CALCPR^IBCEU0(.EOBADJ)
"RTN","IBCECOB1",257,0)
 Q IBPTRES
"RTN","IBCECOB1",258,0)
 ;
"RTN","IBCECOB1",259,0)
ELIG(IBEOB) ; Function to determine if an EOB entry is eligible for
"RTN","IBCECOB1",260,0)
 ; inclusion on the MRA or COB management worklist or not.
"RTN","IBCECOB1",261,0)
 ; IBEOB - ien into file 361.1 (required)
"RTN","IBCECOB1",262,0)
 ; Returns 1 if EOB should appear on the worklist
"RTN","IBCECOB1",263,0)
 ; Returns 0 if EOB should not appear on the worklist
"RTN","IBCECOB1",264,0)
 ; Returns -1 if EOB contains Message Storage Errors
"RTN","IBCECOB1",265,0)
 ;
"RTN","IBCECOB1",266,0)
 NEW ELIG,IB3611,IBIFN
"RTN","IBCECOB1",267,0)
 S ELIG=0,IBEOB=+$G(IBEOB)
"RTN","IBCECOB1",268,0)
 S IB3611=$G(^IBM(361.1,IBEOB,0))
"RTN","IBCECOB1",269,0)
 I $P(IB3611,U,4)'=1 G ELIGX    ; eob type must be correct for this worklist
"RTN","IBCECOB1",270,0)
 I $P(IB3611,U,16)>2 G ELIGX    ; review status must be <= 2
"RTN","IBCECOB1",271,0)
 S IBIFN=+IB3611
"RTN","IBCECOB1",272,0)
 I $P($G(^DGCR(399,IBIFN,0)),U,13)'=2 G ELIGX  ; Request MRA bill status
"RTN","IBCECOB1",273,0)
 I $D(^IBM(361.1,IBEOB,"ERR")) S ELIG=$S('$G(IBMRANOT):-1,1:ELIG) G ELIGX         ; filing errors - contains Message Storage Errors
"RTN","IBCECOB1",274,0)
 ;
"RTN","IBCECOB1",275,0)
 S ELIG=1    ; this EOB is eligible for the worklist
"RTN","IBCECOB1",276,0)
 ;
"RTN","IBCECOB1",277,0)
ELIGX ;
"RTN","IBCECOB1",278,0)
 Q ELIG
"RTN","IBCECOB1",279,0)
 ;
"RTN","IBCECOB1",280,0)
WLRMV ; REMOVE FROM EOB WORK LIST
"RTN","IBCECOB1",281,0)
 ; IBDA(IBDA)=IBIFN^IB364^ien of 361.1^user selection seq^user name~duz#
"RTN","IBCECOB1",282,0)
 N IBIFN,IBDA,DIR,DTOUT,DUOUT,DA,DIE,DR,X
"RTN","IBCECOB1",283,0)
 D SEL^IBCECOB2(.IBDA,1)
"RTN","IBCECOB1",284,0)
 S VALMBCK="R"
"RTN","IBCECOB1",285,0)
 S IBDA=$O(IBDA(0)) I 'IBDA Q
"RTN","IBCECOB1",286,0)
 S IBIFN=$P(IBDA(IBDA),U,1) I 'IBIFN Q
"RTN","IBCECOB1",287,0)
 S DIR("A",1)=""
"RTN","IBCECOB1",288,0)
 S DIR("A",2)="    Bill #: "_$$GET1^DIQ(399,IBIFN_", ",.01,"E")
"RTN","IBCECOB1",289,0)
 S DIR("A",3)="   Patient: "_$$GET1^DIQ(399,IBIFN_", ",.02,"E")
"RTN","IBCECOB1",290,0)
 S DIR("A",4)=" Bill Type: "_$$GET1^DIQ(399,IBIFN_", ",.05,"E")
"RTN","IBCECOB1",291,0)
 S DIR("A",5)="Bill Dates: "_$$GET1^DIQ(399,IBIFN_", ",151,"E")_" - "_$$GET1^DIQ(399,IBIFN_", ",152,"E")
"RTN","IBCECOB1",292,0)
 S DIR("A",6)=" "
"RTN","IBCECOB1",293,0)
 S DIR("A")="Are you sure remove this claim from the worklist? "
"RTN","IBCECOB1",294,0)
 S DIR("B")="NO"
"RTN","IBCECOB1",295,0)
 S DIR(0)="YA" D ^DIR K DIR
"RTN","IBCECOB1",296,0)
 I $D(DTOUT)!$D(DUOUT)!'Y Q
"RTN","IBCECOB1",297,0)
 ;FLAG IF USER ANSWERS YES
"RTN","IBCECOB1",298,0)
 S X=$$WLRMVF^IBCECOB1(IBIFN,"RM")
"RTN","IBCECOB1",299,0)
 D BLD^IBCECOB1
"RTN","IBCECOB1",300,0)
 Q
"RTN","IBCECOB1",301,0)
 ;
"RTN","IBCECOB1",302,0)
WLRMVF(IBIFN,METHOD,BKFL) ;
"RTN","IBCECOB1",303,0)
 ; BFKL = 1 means background process, remove NOT initiated by a user
"RTN","IBCECOB1",304,0)
 N SOC,SOCCNT,SOCLIST,STATUS,IBDUZ
"RTN","IBCECOB1",305,0)
 S STATUS=0
"RTN","IBCECOB1",306,0)
 Q:'$G(DUZ) STATUS_"^MISSING DUZ"
"RTN","IBCECOB1",307,0)
 Q:'$G(IBIFN) STATUS_"^MISSING IBIFN"
"RTN","IBCECOB1",308,0)
 Q:'$D(^DGCR(399,IBIFN)) STATUS_"^INVALID IBIFN"
"RTN","IBCECOB1",309,0)
 ; if this is a background process, set user who removed to AUTHORIZER,IB REG
"RTN","IBCECOB1",310,0)
 S IBDUZ=$S($G(BKFL)=1:$$IBREG^IBCAPP(),1:$G(DUZ))
"RTN","IBCECOB1",311,0)
 ; GET DICTIONARY SET OF CODES.
"RTN","IBCECOB1",312,0)
 ; SOC("POINTER")="RM:REMOVE ACTION;PC:PROCESS COB ACTION;CL:CLONE ACTION;"
"RTN","IBCECOB1",313,0)
 D FIELD^DID(399,38,"","POINTER","SOC")
"RTN","IBCECOB1",314,0)
 S SOC=$G(SOC("POINTER"))
"RTN","IBCECOB1",315,0)
 F SOCCNT=1:1:$L(SOC,";")-1 S SOCLIST($P($P(SOC,";",SOCCNT),":",1))=""
"RTN","IBCECOB1",316,0)
 Q:$D(SOCLIST(METHOD))=0 STATUS_"^INVALID METHOD"
"RTN","IBCECOB1",317,0)
 S DA=IBIFN
"RTN","IBCECOB1",318,0)
 S DIE="^DGCR(399,"
"RTN","IBCECOB1",319,0)
 S DR="35////4"                ; AUTO PROCESS, NO LONGER ON WORKLIST
"RTN","IBCECOB1",320,0)
 S:IBDUZ'=-1 DR=DR_";"_"37////"_IBDUZ    ; WHO REMOVED FROM WORKLIST
"RTN","IBCECOB1",321,0)
 S DR=DR_";"_"38////"_METHOD   ; METHOD USED TO REMOVE FROM WORKLIST
"RTN","IBCECOB1",322,0)
 S DR=DR_";"_"39///NOW"        ; DATE STAMP WHEN REMOVED FOR WORKLIST
"RTN","IBCECOB1",323,0)
 D ^DIE
"RTN","IBCECOB1",324,0)
 S STATUS=1
"RTN","IBCECOB1",325,0)
 Q STATUS
"RTN","IBCECOB2")
0^114^B186108392^B183699434
"RTN","IBCECOB2",1,0)
IBCECOB2 ;ALB/CXW - IB COB MANAGEMENT SCREEN ;16-JUN-1999
"RTN","IBCECOB2",2,0)
 ;;2.0;INTEGRATED BILLING;**137,155,433,432,447,488,516,592**;21-MAR-1994;Build 58
"RTN","IBCECOB2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCECOB2",4,0)
 ;
"RTN","IBCECOB2",5,0)
EDI ;history detail display
"RTN","IBCECOB2",6,0)
 N IBIFN,IBDA
"RTN","IBCECOB2",7,0)
 D SEL(.IBDA,1)
"RTN","IBCECOB2",8,0)
 S IBDA=+$O(IBDA(0)),IBIFN=+$G(IBDA(IBDA))
"RTN","IBCECOB2",9,0)
 D EDI1(IBIFN)
"RTN","IBCECOB2",10,0)
 S VALMBCK="R"
"RTN","IBCECOB2",11,0)
 Q
"RTN","IBCECOB2",12,0)
 ;
"RTN","IBCECOB2",13,0)
EDI1(IBIFN) ;
"RTN","IBCECOB2",14,0)
 N DFN
"RTN","IBCECOB2",15,0)
 Q:'IBIFN
"RTN","IBCECOB2",16,0)
 S DFN=$P($G(^DGCR(399,IBIFN,0)),U,2)
"RTN","IBCECOB2",17,0)
 D EN^VALM("IBJT EDI STATUS")
"RTN","IBCECOB2",18,0)
 K:$D(IBFASTXT) IBFASTXT
"RTN","IBCECOB2",19,0)
 Q
"RTN","IBCECOB2",20,0)
 ;
"RTN","IBCECOB2",21,0)
EDI2(IBIFN) ;
"RTN","IBCECOB2",22,0)
 N DFN
"RTN","IBCECOB2",23,0)
 Q:'IBIFN
"RTN","IBCECOB2",24,0)
 S DFN=$P($G(^DGCR(399,IBIFN,0)),U,2)
"RTN","IBCECOB2",25,0)
 D EN^VALM("IBJT EDI STATUS ALONE")
"RTN","IBCECOB2",26,0)
 K:$D(IBFASTXT) IBFASTXT
"RTN","IBCECOB2",27,0)
 Q
"RTN","IBCECOB2",28,0)
 ;
"RTN","IBCECOB2",29,0)
CSA ;claims status awaiting resolution
"RTN","IBCECOB2",30,0)
 N IBDAX
"RTN","IBCECOB2",31,0)
 D EN^IBCECSA
"RTN","IBCECOB2",32,0)
 I $D(IBFASTXT) K IBFASTXT
"RTN","IBCECOB2",33,0)
 S VALMBCK="R"
"RTN","IBCECOB2",34,0)
 Q
"RTN","IBCECOB2",35,0)
 ;
"RTN","IBCECOB2",36,0)
RVEOB ;Review EOB
"RTN","IBCECOB2",37,0)
 D FULL^VALM1 W !
"RTN","IBCECOB2",38,0)
 N IBDA,IBIFN,IBCMT,IBSEL
"RTN","IBCECOB2",39,0)
 D SEL(.IBDA,1)
"RTN","IBCECOB2",40,0)
 S IBSEL=+$O(IBDA(0))
"RTN","IBCECOB2",41,0)
 S IBDA=$G(IBDA(IBSEL))
"RTN","IBCECOB2",42,0)
 S IBIFN=$P(IBDA,U),IBDA=$P(IBDA,U,3)
"RTN","IBCECOB2",43,0)
 I 'IBIFN G VEOBQ
"RTN","IBCECOB2",44,0)
 S IBCMT=$G(^TMP("IBCECOB1",$J,IBSEL))
"RTN","IBCECOB2",45,0)
 I IBCMT'="" D EN^VALM("IBCEM MRA REVIEW")
"RTN","IBCECOB2",46,0)
VEOBQ K ^TMP("IBCECOC",$J)
"RTN","IBCECOB2",47,0)
 S VALMBCK="R"
"RTN","IBCECOB2",48,0)
 Q
"RTN","IBCECOB2",49,0)
 ;
"RTN","IBCECOB2",50,0)
TPJI ;Third Party joint Inquiry
"RTN","IBCECOB2",51,0)
 N IBDA,IBIFN
"RTN","IBCECOB2",52,0)
 D SEL(.IBDA,1)
"RTN","IBCECOB2",53,0)
 S IBDA=+$O(IBDA(0)),IBIFN=+$G(IBDA(IBDA))
"RTN","IBCECOB2",54,0)
 I IBDA="" G TPJIQ
"RTN","IBCECOB2",55,0)
 D TPJI1(IBIFN)
"RTN","IBCECOB2",56,0)
TPJIQ S VALMBCK="R"
"RTN","IBCECOB2",57,0)
 Q
"RTN","IBCECOB2",58,0)
 ;
"RTN","IBCECOB2",59,0)
TPJI1(IBIFN) ;
"RTN","IBCECOB2",60,0)
 N DFN,IBNOTPJI
"RTN","IBCECOB2",61,0)
 Q:'IBIFN
"RTN","IBCECOB2",62,0)
 S DFN=$P($G(^DGCR(399,IBIFN,0)),U,2),IBNOTPJI=1
"RTN","IBCECOB2",63,0)
 D EN^VALM("IBJT CLAIM INFO")
"RTN","IBCECOB2",64,0)
 K:$D(IBFASTXT) IBFASTXT
"RTN","IBCECOB2",65,0)
 Q
"RTN","IBCECOB2",66,0)
 ;
"RTN","IBCECOB2",67,0)
PBILL ;Print bill
"RTN","IBCECOB2",68,0)
 N IBIFN,IBDA,IBRESUB
"RTN","IBCECOB2",69,0)
 D SEL(.IBDA,1)
"RTN","IBCECOB2",70,0)
 S IBDA=$O(IBDA(0)),IBIFN=+$G(IBDA(+IBDA))
"RTN","IBCECOB2",71,0)
 I IBDA="" G PBOUT
"RTN","IBCECOB2",72,0)
 S IBRESUB=$$RESUB^IBCECSA4(IBIFN,1,"P")
"RTN","IBCECOB2",73,0)
 I IBRESUB'>0 W !,*7,"This is not a transmittable bill or review not needed" D PAUSE^VALM1 G PBOUT
"RTN","IBCECOB2",74,0)
 I IBRESUB=2 D  G PBOUT
"RTN","IBCECOB2",75,0)
 . N IB364
"RTN","IBCECOB2",76,0)
 . S IB364=+$P($G(IBDA(IBDA)),U,2)
"RTN","IBCECOB2",77,0)
 . D PRINT1^IBCEM03(IBIFN,.IBDA,IB364)
"RTN","IBCECOB2",78,0)
 D PBILL1(IBIFN)
"RTN","IBCECOB2",79,0)
PBOUT S VALMBCK="R"
"RTN","IBCECOB2",80,0)
 Q
"RTN","IBCECOB2",81,0)
 ;
"RTN","IBCECOB2",82,0)
PMRA ;Print MRA
"RTN","IBCECOB2",83,0)
 N IBIFN,IBDA,IBDAX
"RTN","IBCECOB2",84,0)
 D SEL(.IBDA,1)
"RTN","IBCECOB2",85,0)
 ;IB*2.0*592 JRA Fix <UNDEFINED> error occurring when IBDA(+IBDA) does not exist. Also, ensure that IBDAX'=""
"RTN","IBCECOB2",86,0)
 ; since it's used as a subscript to ^IBM.
"RTN","IBCECOB2",87,0)
 ;S IBDA=$O(IBDA(0)),IBIFN=+$G(IBDA(+IBDA)),IBDAX=$P(IBDA(+IBDA),U,3)   ;IB*2.0*592 JRA ';'
"RTN","IBCECOB2",88,0)
 S IBDA=$O(IBDA(0)),IBIFN=+$G(IBDA(+IBDA)),IBDAX=+$P($G(IBDA(+IBDA)),U,3)  ;IB*2.0*592 JRA Add $G to SET of IBDAX and +$P
"RTN","IBCECOB2",89,0)
 G:'IBIFN PRMQ
"RTN","IBCECOB2",90,0)
 I '$G(IBMRANOT),$D(^IBM(361.1,IBDAX,"ERR")),'$$WARNMSE G PRMQ   ; Claim contains Message Storage Errors
"RTN","IBCECOB2",91,0)
 D MRA^IBCEMRAA(.IBIFN)
"RTN","IBCECOB2",92,0)
PRMQ S VALMBCK="R"
"RTN","IBCECOB2",93,0)
 Q
"RTN","IBCECOB2",94,0)
PBILL1(IBIFN) ;
"RTN","IBCECOB2",95,0)
 N IBAC1,IBAC,DFN
"RTN","IBCECOB2",96,0)
 Q:'IBIFN
"RTN","IBCECOB2",97,0)
 S DFN=$P($G(^DGCR(399,IBIFN,0)),U,2)
"RTN","IBCECOB2",98,0)
 S IBAC=4,IBAC1=1
"RTN","IBCECOB2",99,0)
 D 4^IBCB1
"RTN","IBCECOB2",100,0)
 D FULL^VALM1,PAUSE^VALM1
"RTN","IBCECOB2",101,0)
 Q
"RTN","IBCECOB2",102,0)
 ;
"RTN","IBCECOB2",103,0)
CANCEL ;Cancel bill
"RTN","IBCECOB2",104,0)
 ; IBDA(IBDA)=IBIFN^IB364^ien of 361.1^user selection seq^user name~duz#
"RTN","IBCECOB2",105,0)
 ;
"RTN","IBCECOB2",106,0)
 N IBIFN,IBDA,IB364,IBEOBIFN,X,IBDENCT
"RTN","IBCECOB2",107,0)
 ;
"RTN","IBCECOB2",108,0)
 ; Check for security key
"RTN","IBCECOB2",109,0)
 I '$$KCHK^XUSRB("IB AUTHORIZE") D  G CANCELQ
"RTN","IBCECOB2",110,0)
 . D FULL^VALM1 S VALMBCK="R"
"RTN","IBCECOB2",111,0)
 . W !!?5,"You don't hold the proper security key to access this function."
"RTN","IBCECOB2",112,0)
 . W !?5,"The necessary key is IB AUTHORIZE.  Please see your manager."
"RTN","IBCECOB2",113,0)
 . D PAUSE^VALM1
"RTN","IBCECOB2",114,0)
 . Q
"RTN","IBCECOB2",115,0)
 ;
"RTN","IBCECOB2",116,0)
 D SEL(.IBDA,1)
"RTN","IBCECOB2",117,0)
 S IBDA=$O(IBDA(0)),IBIFN=+$G(IBDA(+IBDA)),IB364=$P($G(IBDA(+IBDA)),U,2)
"RTN","IBCECOB2",118,0)
 S IBEOBIFN=$P($G(IBDA(+IBDA)),U,3)
"RTN","IBCECOB2",119,0)
 ;
"RTN","IBCECOB2",120,0)
 ; IB*2.0*432 - if not mra, only allow cancel of denied claims.  If no EOB, check AR status instead
"RTN","IBCECOB2",121,0)
 I 'IBEOBIFN,$G(IBMRANOT)=1,$P($$ARSTATA^IBJTU4(IBIFN),U)="COLLECTED/CLOSED" D  G CANCELQ
"RTN","IBCECOB2",122,0)
 . D FULL^VALM1 S VALMBCK="R"
"RTN","IBCECOB2",123,0)
 . W !!,*7,"You can only cancel denied claims.  This claim is in a COLLECTED/CLOSED status"
"RTN","IBCECOB2",124,0)
 . W !,"Use Remove Action to remove claim from this worklist."
"RTN","IBCECOB2",125,0)
 . D PAUSE^VALM1
"RTN","IBCECOB2",126,0)
 . Q
"RTN","IBCECOB2",127,0)
 ;
"RTN","IBCECOB2",128,0)
 ; IB*2.0*432 - if not mra, only allow cancel of claims with multiple EOBS if none have processed.
"RTN","IBCECOB2",129,0)
 I $G(IBMRANOT)=1,'$$DENCHK(IBIFN,.IBDENCT),$G(IBDENCT)>1 D  G CANCELQ
"RTN","IBCECOB2",130,0)
 . D FULL^VALM1 S VALMBCK="R"
"RTN","IBCECOB2",131,0)
 . W !!,*7,"Multiple EOBs exist for this claim and at least one has EOB status of PROCESSED."
"RTN","IBCECOB2",132,0)
 . W !,"Use Remove Action to remove claim from this worklist."
"RTN","IBCECOB2",133,0)
 . D PAUSE^VALM1
"RTN","IBCECOB2",134,0)
 . Q
"RTN","IBCECOB2",135,0)
 ;
"RTN","IBCECOB2",136,0)
 ; IB*2.0*432 - if not mra, only allow cancel of denied claims
"RTN","IBCECOB2",137,0)
 I IBEOBIFN,$G(IBMRANOT)=1,$P($G(^IBM(361.1,IBEOBIFN,0)),U,13)'=2 D  G CANCELQ
"RTN","IBCECOB2",138,0)
 . D FULL^VALM1 S VALMBCK="R"
"RTN","IBCECOB2",139,0)
 . W !!?5,*7,"You can only cancel denied claims."
"RTN","IBCECOB2",140,0)
 . D PAUSE^VALM1
"RTN","IBCECOB2",141,0)
 . Q
"RTN","IBCECOB2",142,0)
 ;
"RTN","IBCECOB2",143,0)
 I IBDA D
"RTN","IBCECOB2",144,0)
 . I '$$LOCK^IBCEU0(361.1,IBEOBIFN) Q
"RTN","IBCECOB2",145,0)
 . D CANCEL^IBCEM3(.IBDA,IBIFN,IB364)
"RTN","IBCECOB2",146,0)
 . D UNLOCK^IBCEU0(361.1,IBEOBIFN)
"RTN","IBCECOB2",147,0)
 S VALMBCK="R"
"RTN","IBCECOB2",148,0)
 ;
"RTN","IBCECOB2",149,0)
 ; for non-MRA claims cancelled from worklist, set field 38
"RTN","IBCECOB2",150,0)
 I $G(IBMRANOT)=1,$P($G(^DGCR(399,IBIFN,0)),U,13)=7 S X=$$WLRMVF^IBCECOB1($S($G(IBIFN)'="":IBIFN,1:+$G(IBDA(IBDA))),"CA")
"RTN","IBCECOB2",151,0)
 I $G(IBDA)'="" D BLD^IBCECOB1
"RTN","IBCECOB2",152,0)
CANCELQ Q
"RTN","IBCECOB2",153,0)
 ;
"RTN","IBCECOB2",154,0)
CRD ; Correct Rejected/Denied claim protocol action
"RTN","IBCECOB2",155,0)
 N IBCNCRD
"RTN","IBCECOB2",156,0)
 S IBCNCRD=1
"RTN","IBCECOB2",157,0)
CLONE ; 'Copy/cancel bill' protocol action
"RTN","IBCECOB2",158,0)
 N IBDA,IBQ,IBEOBIFN,IBKEY,X,IBDENCT
"RTN","IBCECOB2",159,0)
 ;
"RTN","IBCECOB2",160,0)
 ; Check for security key
"RTN","IBCECOB2",161,0)
 ;IB*2.0*516/TAZ - Remove check for IB CLON
"RTN","IBCECOB2",162,0)
 ;I '$$KCHK^XUSRB("IB AUTHORIZE") D  G CLONEQ
"RTN","IBCECOB2",163,0)
 ;S IBKEY=$S($G(IBCNCRD)=1:"IB AUTHORIZE",1:"IB CLON")
"RTN","IBCECOB2",164,0)
 S IBKEY="IB AUTHORIZE"
"RTN","IBCECOB2",165,0)
 I '$$KCHK^XUSRB(IBKEY) D  G CLONEQ
"RTN","IBCECOB2",166,0)
 . D FULL^VALM1 S VALMBCK="R"
"RTN","IBCECOB2",167,0)
 . ;W !!?5,"You don't hold the proper security key to access this function."
"RTN","IBCECOB2",168,0)
 . ;W !?5,"The necessary key is IB AUTHORIZE.  Please see your manager."
"RTN","IBCECOB2",169,0)
 . W !!?5,"You must hold the "_IBKEY_" security key to access this function."
"RTN","IBCECOB2",170,0)
 . W !?5,"Please see your manager."
"RTN","IBCECOB2",171,0)
 . D PAUSE^VALM1
"RTN","IBCECOB2",172,0)
 . Q
"RTN","IBCECOB2",173,0)
 ;
"RTN","IBCECOB2",174,0)
 D SEL(.IBDA,1)
"RTN","IBCECOB2",175,0)
 S IBDA=$O(IBDA(""))
"RTN","IBCECOB2",176,0)
 I IBDA="" G CLONEQ
"RTN","IBCECOB2",177,0)
 ;
"RTN","IBCECOB2",178,0)
 ; IB*2.0*432 - if not mra, only allow cancel of claims with multiple EOBS if none have processed.
"RTN","IBCECOB2",179,0)
 I $G(IBMRANOT)=1,'$$DENCHK(+IBDA(IBDA),.IBDENCT),$G(IBDENCT)>1 D  G CANCELQ
"RTN","IBCECOB2",180,0)
 . D FULL^VALM1 S VALMBCK="R"
"RTN","IBCECOB2",181,0)
 . W !!,*7,"Multiple EOBs exist for this claim and at least one has EOB status of PROCESSED."
"RTN","IBCECOB2",182,0)
 . W !,"Use Remove Action to remove claim from this worklist."
"RTN","IBCECOB2",183,0)
 . D PAUSE^VALM1
"RTN","IBCECOB2",184,0)
 . Q
"RTN","IBCECOB2",185,0)
 ;
"RTN","IBCECOB2",186,0)
 S IBEOBIFN=$P($G(IBDA(+IBDA)),U,3)
"RTN","IBCECOB2",187,0)
 I '$$LOCK^IBCEU0(361.1,IBEOBIFN) G CLONEQ
"RTN","IBCECOB2",188,0)
 D COPYCLON(+$G(IBDA(IBDA)),$P($G(IBDA(+IBDA)),U,2),.IBQ)
"RTN","IBCECOB2",189,0)
 D UNLOCK^IBCEU0(361.1,IBEOBIFN)
"RTN","IBCECOB2",190,0)
 ;
"RTN","IBCECOB2",191,0)
 ; for non-MRA claims cloned or corrected from worklist, set field 38
"RTN","IBCECOB2",192,0)
 I $G(IBMRANOT)=1,$G(IBQ)'="" S X=$$WLRMVF^IBCECOB1(+$G(IBDA(IBDA)),$S($G(IBCNCRD)=1:"CR",1:"CL"))
"RTN","IBCECOB2",193,0)
 ;
"RTN","IBCECOB2",194,0)
CLONEQ ;
"RTN","IBCECOB2",195,0)
 S VALMBCK="R"
"RTN","IBCECOB2",196,0)
 D:$G(IBQ)'="" BLD^IBCECOB1
"RTN","IBCECOB2",197,0)
 Q
"RTN","IBCECOB2",198,0)
 ;
"RTN","IBCECOB2",199,0)
COPYCLON(IBIFN,IB364,IBQ) ; Generic entry point for clone a bill from EDI processing
"RTN","IBCECOB2",200,0)
 ; IBIFN = original bill ien
"RTN","IBCECOB2",201,0)
 ; IB364 = the ien of the transmission bill entry in file 364
"RTN","IBCECOB2",202,0)
 ; IBQ = If bill is not cancelled, this is returned as null
"RTN","IBCECOB2",203,0)
 ;        - pass by reference -
"RTN","IBCECOB2",204,0)
 ;
"RTN","IBCECOB2",205,0)
 N IBQUIT,IBCCCC,IBHV,Y,IBCAN,IBCE,IBDA,IBCNCOPY
"RTN","IBCECOB2",206,0)
 ;I '$$CANCKS^IBCEM3("CC",IBIFN) S IBQ="" G CCQ
"RTN","IBCECOB2",207,0)
 I $G(IBCNCRD)'=1,'$$CANCKS^IBCEM3("CC",IBIFN) S IBQ="" G CCQ
"RTN","IBCECOB2",208,0)
 ;
"RTN","IBCECOB2",209,0)
 ;S IBCAN=2,IBCE("EDI")=1,Y=IBIFN,IBCCCC=0,IBHV("IBIFN")=IBIFN,IBHV("IBIFN1")="",IBCNCOPY=1
"RTN","IBCECOB2",210,0)
 S IBCAN=2,IBCE("EDI")=1,Y=IBIFN,IBCCCC=0,IBHV("IBIFN")=IBIFN,IBHV("IBIFN1")=""
"RTN","IBCECOB2",211,0)
 I $G(IBCNCRD)'=1 S IBCNCOPY=1 D ^IBCCC
"RTN","IBCECOB2",212,0)
 I $G(IBCNCRD)=1 D CRD^IBCCC
"RTN","IBCECOB2",213,0)
 ;D ^IBCCC
"RTN","IBCECOB2",214,0)
 S IBIFN=IBHV("IBIFN")
"RTN","IBCECOB2",215,0)
 K IBCE("EDI") S IBQ=1
"RTN","IBCECOB2",216,0)
 I $P($G(^DGCR(399,IBIFN,0)),U,13)'=7 S IBQ=""
"RTN","IBCECOB2",217,0)
 I IBHV("IBIFN1") D
"RTN","IBCECOB2",218,0)
 . N IBU
"RTN","IBCECOB2",219,0)
 . S IBU="R"
"RTN","IBCECOB2",220,0)
 . S IBNIEN=+IBHV("IBIFN1")
"RTN","IBCECOB2",221,0)
 . I "23"'[$P($G(^DGCR(399,+IBHV("IBIFN1"),0)),U,13) D
"RTN","IBCECOB2",222,0)
 .. W:'$G(IBCEAUTO) !,*7,"Please note: the new bill was not AUTHORIZED.",!,"It can only be accessed now via the normal, non-EDI functions.",!,"Status of new bill is ",$$EXPAND^IBTRE(399,.13,$P(^DGCR(399,IBHV("IBIFN1"),0),U,13)) S IBU="C"
"RTN","IBCECOB2",223,0)
 . D UPDEDI^IBCEM(IB364,IBU)
"RTN","IBCECOB2",224,0)
 ;
"RTN","IBCECOB2",225,0)
 I '$G(IBCEAUTO) D PAUSE^VALM1
"RTN","IBCECOB2",226,0)
CCQ Q
"RTN","IBCECOB2",227,0)
 ;
"RTN","IBCECOB2",228,0)
PRO ; Copy for secondary/tertiary bill
"RTN","IBCECOB2",229,0)
 N VALMY,IBDA,Z,IBIFN,IBIFNH,IB364,IBCE,IBNCN
"RTN","IBCECOB2",230,0)
 ;I '$P($G(^IBE(350.9,1,8)),U,12) D  G PROQ
"RTN","IBCECOB2",231,0)
 I '$P($G(^IBE(350.9,1,8)),U,12),$G(IBMRANOT)'=1 D  G PROQ
"RTN","IBCECOB2",232,0)
 . D FULL^VALM1
"RTN","IBCECOB2",233,0)
 . W !!?5,"MRA's may not be processed at this time."
"RTN","IBCECOB2",234,0)
 . W !?5,"The IB site parameter ""Allow MRA Processing?"" is set to NO."
"RTN","IBCECOB2",235,0)
 . D PAUSE^VALM1
"RTN","IBCECOB2",236,0)
 . Q
"RTN","IBCECOB2",237,0)
 D SEL(.IBDA,1)
"RTN","IBCECOB2",238,0)
 S Z=$O(IBDA(0)),Z=$G(IBDA(+Z)) G:'Z PROQ
"RTN","IBCECOB2",239,0)
 S IBIFN=$P(Z,U),IB364=$P(Z,U,2),IBDA=$P(Z,U,3),IBIFNH=IBIFN
"RTN","IBCECOB2",240,0)
 I 'IBIFN G PROQ
"RTN","IBCECOB2",241,0)
 I '$G(IBMRANOT),$D(^IBM(361.1,IBDA,"ERR")),'$$WARNMSE G PROQ        ; Claim contains Message Storage Errors
"RTN","IBCECOB2",242,0)
 I '$$LOCK^IBCEU0(361.1,IBDA) G PROQ
"RTN","IBCECOB2",243,0)
 D COBCOPY(IBIFN,IB364,2,IBDA,"BLD^IBCECOB1",.IBNCN)
"RTN","IBCECOB2",244,0)
 D UNLOCK^IBCEU0(361.1,IBDA)
"RTN","IBCECOB2",245,0)
 ;
"RTN","IBCECOB2",246,0)
 ; for non-MRA claims copied from work list, set field 38
"RTN","IBCECOB2",247,0)
 I $G(IBMRANOT)=1,$G(IBNCN)'="",($G(IBNCN)'=$G(IBIFN)) D
"RTN","IBCECOB2",248,0)
 .S X=$$WLRMVF^IBCECOB1($G(IBIFN),"PC")
"RTN","IBCECOB2",249,0)
 .;I $P($G(^DGCR(399,+IBNCN,"S")),U,9)'=1 D
"RTN","IBCECOB2",250,0)
 .;.W:'$G(IBCEAUTO) !,*7,"Please note: the new bill was not AUTHORIZED.",!,"It can only be accessed now via the normal, non-EDI functions.",!,"Status of new bill is ",$$EXPAND^IBTRE(399,.13,$P(^DGCR(399,IBNCN,0),U,13))
"RTN","IBCECOB2",251,0)
 .;.D PAUSE^VALM1
"RTN","IBCECOB2",252,0)
 .D:$G(IBMRANOT)=1 BLD^IBCECOB1
"RTN","IBCECOB2",253,0)
 .Q
"RTN","IBCECOB2",254,0)
 ;
"RTN","IBCECOB2",255,0)
PROQ S VALMBCK="R"
"RTN","IBCECOB2",256,0)
 Q
"RTN","IBCECOB2",257,0)
 ;
"RTN","IBCECOB2",258,0)
COBCOPY(IBIFN,IB364,IBFROM,IBIEN,IBBLD,IBNCN) ; Generic entry point for EDI COB copy
"RTN","IBCECOB2",259,0)
 ; IBIFN = original bill ien
"RTN","IBCECOB2",260,0)
 ; IB364 = the ien of the transmission bill entry in file 364
"RTN","IBCECOB2",261,0)
 ; IBFROM = 1 if called from CSA, 2 if called from COB/EOB processing
"RTN","IBCECOB2",262,0)
 ; IBIEN = entry in 361 (IBFROM=1) or 361.1 (IBFROM=2) being processed
"RTN","IBCECOB2",263,0)
 ; IBBLD = the name of the entrypoint that will rebuild the display
"RTN","IBCECOB2",264,0)
 ; IBNCN = by reference, returns the new claim ien if user completed the Copy process
"RTN","IBCECOB2",265,0)
 ;
"RTN","IBCECOB2",266,0)
 N IBCBASK,IBCBCOPY,IBCAN,IBIFNH,IBNSTAT,IBOSTAT,IBPRCOB,IBSECHK,IBLMVAR,IBAC,IBMRAIEN,IBDA,IBAUTO
"RTN","IBCECOB2",267,0)
 N IBCOB,IBCOBIL,IBCOBN,IBINS,IBINSN,IBINSOLD,IBMRAIO,IBMRAO,IBNMOLD,IBQUIT
"RTN","IBCECOB2",268,0)
 S (IBCBASK,IBCBCOPY,IBCAN,IBAUTO)=1,(IBPRCOB,IBSECHK)=0,(IBMRAIEN,IBDA)=IBIEN
"RTN","IBCECOB2",269,0)
 I $G(IBMRANOT)'=1,'IB364!'IBIFN W !,"Transmission record is missing for this bill" D PAUSE^VALM1 G COBCOPX
"RTN","IBCECOB2",270,0)
 ;
"RTN","IBCECOB2",271,0)
 S IBIFNH=IBIFN
"RTN","IBCECOB2",272,0)
 I IBFROM=2 S IBPRCOB=1
"RTN","IBCECOB2",273,0)
 ; IB*2.0*447 Check PR to include excess and percentages where applicable
"RTN","IBCECOB2",274,0)
 ;I $S($G(IBMRANOT)=1:$$TOT(IBIFN)'>0,1:$$PREOBTOT^IBCEU0(IBIFN,$G(IBMRANOT))'>0) D  G COBCOPX
"RTN","IBCECOB2",275,0)
 I $$TOT(IBIFN,$G(IBMRANOT))'>0 D  G COBCOPX
"RTN","IBCECOB2",276,0)
 . D FULL^VALM1
"RTN","IBCECOB2",277,0)
 . W !!?5,"There is no "_$S($G(IBMRANOT)=1:"balance remaining",1:"patient responsibility and/or excess charges")_" for this claim."
"RTN","IBCECOB2",278,0)
 . W !?5,"This claim may not be processed."
"RTN","IBCECOB2",279,0)
 . D PAUSE^VALM1
"RTN","IBCECOB2",280,0)
 . Q
"RTN","IBCECOB2",281,0)
 ;
"RTN","IBCECOB2",282,0)
 I $G(IBDA)'="",$P($G(^IBM(361.1,IBDA,0)),U,16)="1.5" D  G COBCOPX
"RTN","IBCECOB2",283,0)
 . W !!,"This claim has already been processed as a sec/tert claim."
"RTN","IBCECOB2",284,0)
 . W !,"You will need to complete the authorization process for this claim."
"RTN","IBCECOB2",285,0)
 . D PAUSE^VALM1
"RTN","IBCECOB2",286,0)
 . D AUTH
"RTN","IBCECOB2",287,0)
 . Q
"RTN","IBCECOB2",288,0)
 ;
"RTN","IBCECOB2",289,0)
 ; If multiple EOBs and one is processed, make sure collected closed.
"RTN","IBCECOB2",290,0)
 I $G(IBMRANOT),$$CCCHK(IBIFN)<0 D  G COBCOPX
"RTN","IBCECOB2",291,0)
 . W !,"Multiple EOBs exist for this claim and at least one has EOB status of PROCESSED."
"RTN","IBCECOB2",292,0)
 . W !,"Claim cannot be sent to next payer until AR status is Collected/Closed."
"RTN","IBCECOB2",293,0)
 . D PAUSE^VALM1
"RTN","IBCECOB2",294,0)
 . Q
"RTN","IBCECOB2",295,0)
 ;
"RTN","IBCECOB2",296,0)
 ; Get out if no next payer
"RTN","IBCECOB2",297,0)
 I '$P($G(^DGCR(399,IBIFN,"I"_($$COBN^IBCEF(IBIFN)+1))),U,1) D  G COBCOPX
"RTN","IBCECOB2",298,0)
 . W !,"There is no next payer for this bill"
"RTN","IBCECOB2",299,0)
 . D PAUSE^VALM1
"RTN","IBCECOB2",300,0)
 . Q
"RTN","IBCECOB2",301,0)
 ;
"RTN","IBCECOB2",302,0)
 D DSPRB^IBCCCB0(IBIFN)        ; display related bills
"RTN","IBCECOB2",303,0)
 S IBCE("EDI")=1
"RTN","IBCECOB2",304,0)
 D CHKB^IBCCCB                 ; process COB, create secondary bill
"RTN","IBCECOB2",305,0)
 S IBNCN=$G(IBCE("EDI","NEW")) ; get new claim ien
"RTN","IBCECOB2",306,0)
 S IBIFN=IBIFNH
"RTN","IBCECOB2",307,0)
 I IBSECHK G COBCOPX
"RTN","IBCECOB2",308,0)
 ;
"RTN","IBCECOB2",309,0)
 ; if user came from CBW, no need to view and authorize a 2nd time (already happens in IBCCCB)
"RTN","IBCECOB2",310,0)
 Q:$G(IBMRANOT)=1
"RTN","IBCECOB2",311,0)
 S IBV=1 D VIEW^IBCB2          ; display billing screens
"RTN","IBCECOB2",312,0)
 D AUTH                        ; authorize bill
"RTN","IBCECOB2",313,0)
COBCOPX ;
"RTN","IBCECOB2",314,0)
 Q
"RTN","IBCECOB2",315,0)
 ;
"RTN","IBCECOB2",316,0)
AUTH ; procedure to authorize the claim and refresh the screen
"RTN","IBCECOB2",317,0)
 K ^UTILITY($J) S IBAC=1,IBQUIT=0 D 3^IBCB1
"RTN","IBCECOB2",318,0)
 I '$D(IOUON)!'$D(IORVON) D ENS^%ZISS
"RTN","IBCECOB2",319,0)
 I $P($G(^IBM(361.1,IBMRAIEN,0)),U,16)=3 D UPDEDI^IBCEM(IB364,"Z")
"RTN","IBCECOB2",320,0)
 I $G(IBBLD)'="" D @IBBLD
"RTN","IBCECOB2",321,0)
 D PAUSE^VALM1
"RTN","IBCECOB2",322,0)
AUTHX ;
"RTN","IBCECOB2",323,0)
 Q
"RTN","IBCECOB2",324,0)
 ;
"RTN","IBCECOB2",325,0)
RES ;Resubmit bill by print
"RTN","IBCECOB2",326,0)
 N IBDA,IBIFN,IB364
"RTN","IBCECOB2",327,0)
 D SEL(.IBDA,1)
"RTN","IBCECOB2",328,0)
 S IBDA=+$O(IBDA(0)),IBIFN=+$G(IBDA(+IBDA)),IB364=+$P($G(IBDA(IBDA)),U,2)
"RTN","IBCECOB2",329,0)
 I 'IBIFN G RESQ
"RTN","IBCECOB2",330,0)
 D PRINT1^IBCEM03(IBIFN,.IBDA,IB364)
"RTN","IBCECOB2",331,0)
 D PAUSE^VALM1
"RTN","IBCECOB2",332,0)
 I $G(IBDA)'="" D BLD^IBCECOB1
"RTN","IBCECOB2",333,0)
RESQ S VALMBCK="R"
"RTN","IBCECOB2",334,0)
 Q
"RTN","IBCECOB2",335,0)
 ;
"RTN","IBCECOB2",336,0)
EBI ;View an unauthorized transmitted bill
"RTN","IBCECOB2",337,0)
 N IBFLG,IBDA,IBIFN,IB364,DFN
"RTN","IBCECOB2",338,0)
 K ^TMP($J,"IBBILL")
"RTN","IBCECOB2",339,0)
 D FULL^VALM1
"RTN","IBCECOB2",340,0)
 ;
"RTN","IBCECOB2",341,0)
 D SEL(.IBDA,1)
"RTN","IBCECOB2",342,0)
 S IBDA=+$O(IBDA(""))
"RTN","IBCECOB2",343,0)
 S IBIFN=+$G(IBDA(IBDA)),IB364=+$P($G(IBDA(IBDA)),U,2),DFN=$P($G(^DGCR(399,IBIFN,0)),U,2)
"RTN","IBCECOB2",344,0)
 G:'IBIFN EDITQ
"RTN","IBCECOB2",345,0)
 S IBV=1 D VIEW^IBCB2
"RTN","IBCECOB2",346,0)
 I '$D(IOUON)!'$D(IORVON) D ENS^%ZISS
"RTN","IBCECOB2",347,0)
 D BLD^IBCECOB1
"RTN","IBCECOB2",348,0)
EDITQ S VALMBCK="R"
"RTN","IBCECOB2",349,0)
 Q
"RTN","IBCECOB2",350,0)
 ;
"RTN","IBCECOB2",351,0)
SEL(IBDA,ONE) ; Select entry(s) from list
"RTN","IBCECOB2",352,0)
 ; IBDA = array returned if selections made
"RTN","IBCECOB2",353,0)
 ;    IBDA(n)=ien of bill selected (file 399)
"RTN","IBCECOB2",354,0)
 ; ONE = if set to 1, only one selection can be made at a time
"RTN","IBCECOB2",355,0)
 N IB
"RTN","IBCECOB2",356,0)
 K IBDA
"RTN","IBCECOB2",357,0)
 D FULL^VALM1
"RTN","IBCECOB2",358,0)
 D EN^VALM2($G(XQORNOD(0)),$S('$G(ONE):"",1:"S"))
"RTN","IBCECOB2",359,0)
 S IBDA=0 F  S IBDA=$O(VALMY(IBDA)) Q:'IBDA  S IBDA(IBDA)=$P($G(^TMP("IBCECOB",$J,+IBDA)),U,2,6)
"RTN","IBCECOB2",360,0)
 Q
"RTN","IBCECOB2",361,0)
 ;
"RTN","IBCECOB2",362,0)
EXIT ; Exit out of COB
"RTN","IBCECOB2",363,0)
 D FASTEXIT^IBCEFG4
"RTN","IBCECOB2",364,0)
 I $G(IBFASTXT)=1 S IBFASTXT=5
"RTN","IBCECOB2",365,0)
 Q
"RTN","IBCECOB2",366,0)
 ;
"RTN","IBCECOB2",367,0)
TOT(IBIFN,IBMRANOT) ; calculate if any balance remaining on non-MRA claim
"RTN","IBCECOB2",368,0)
 ; IBIFN = claim ien
"RTN","IBCECOB2",369,0)
 ; IBMRANOT = MRW/CBW flag (1=user came from CBW)  added with IB*2.0*447
"RTN","IBCECOB2",370,0)
 N IBPRTOT,IBBLD,IBCBN,IBU2
"RTN","IBCECOB2",371,0)
 I $G(IBMRANOT)'=1 Q $S($$MSEDT^IBCEMU4(IBIFN)'="":$$MSPRE^IBCEMU4(IBIFN),1:$$PREOBTOT^IBCEU0(IBIFN))
"RTN","IBCECOB2",372,0)
 ; total up the payer paid amounts, if this is a 2ndary claim, be sure to account for what the primary paid also
"RTN","IBCECOB2",373,0)
 S IBU2=$G(^DGCR(399,IBIFN,"U2")),IBCBN=$$COBN^IBCEF(IBIFN),IBPRTOT=$$EOBTOT^IBCEU1(IBIFN,IBCBN)
"RTN","IBCECOB2",374,0)
 S:IBPRTOT<0 IBPRTOT=0      ; don't allow negative prior payment or offset
"RTN","IBCECOB2",375,0)
 S:IBCBN=2 IBPRTOT=IBPRTOT+$P(IBU2,U,4)
"RTN","IBCECOB2",376,0)
 S:IBCBN=3 IBPRTOT=IBPRTOT+$P(IBU2,U,4)+$P(IBU2,U,5)
"RTN","IBCECOB2",377,0)
 S:IBPRTOT<0 IBPRTOT=0      ; don't allow negative prior payment or offset
"RTN","IBCECOB2",378,0)
 ; Subtract payer paid amount from Total Charges from BILLS/CLAIMS (#399) file, don't allow neg
"RTN","IBCECOB2",379,0)
 S IBBLD=$P($G(^DGCR(399,IBIFN,"U1")),U,1)-IBPRTOT
"RTN","IBCECOB2",380,0)
 S:IBBLD<0 IBBLD=0
"RTN","IBCECOB2",381,0)
 Q IBBLD
"RTN","IBCECOB2",382,0)
 ;
"RTN","IBCECOB2",383,0)
CCCHK(IBIFN) ; If there are multiple EOBS on file for this claim, then one of them must be processed and AR status must be collected closed to process.
"RTN","IBCECOB2",384,0)
 ; returns 1 if true
"RTN","IBCECOB2",385,0)
 ;         0 if there are not multiple EOBs or mulitple EOBs and none are processed (all denials)
"RTN","IBCECOB2",386,0)
 ;        -1 if false
"RTN","IBCECOB2",387,0)
 N IBDA,IBCT,IBPROC,IBARSTAT,IBEOBNDX,IBEOB
"RTN","IBCECOB2",388,0)
 S IBCT=0,IBPROC=0
"RTN","IBCECOB2",389,0)
 F IBEOBNDX="B","C" D
"RTN","IBCECOB2",390,0)
 .S IBDA=0 F  S IBDA=$O(^IBM(361.1,IBEOBNDX,IBIFN,IBDA)) Q:'+IBDA  D
"RTN","IBCECOB2",391,0)
 ..Q:$D(IBEOB(IBDA))
"RTN","IBCECOB2",392,0)
 ..Q:$P($G(^IBM(361.1,IBDA,0)),U,4)=1    ; only count EOBs
"RTN","IBCECOB2",393,0)
 ..S IBEOB(IBDA)="",IBCT=IBCT+1
"RTN","IBCECOB2",394,0)
 ..I $P($G(^IBM(361.1,IBDA,0)),U,13)=1 S IBPROC=1
"RTN","IBCECOB2",395,0)
 I IBCT<2 Q 0  ; less than 2 EOBs
"RTN","IBCECOB2",396,0)
 I 'IBPROC Q 0  ; no EOBs with status processed 
"RTN","IBCECOB2",397,0)
 S IBARSTAT=$$ARSTATA^IBJTU4(IBIFN)  ; get status of AR
"RTN","IBCECOB2",398,0)
 I $P(IBARSTAT,U)="COLLECTED/CLOSED" Q 1
"RTN","IBCECOB2",399,0)
 Q -1
"RTN","IBCECOB2",400,0)
 ;
"RTN","IBCECOB2",401,0)
DENCHK(IBIFN,IBCT) ; Make sure all EOBs from this claim are denied.
"RTN","IBCECOB2",402,0)
 ; Input: IBIFN - IEN to 399
"RTN","IBCECOB2",403,0)
 ;        IBCT - by reference. Return count of EOBs.
"RTN","IBCECOB2",404,0)
 ; Output: returns 1 if there is at least one EOB and that none of the EOBS are processed.
"RTN","IBCECOB2",405,0)
 ; otherwise 0
"RTN","IBCECOB2",406,0)
 ;
"RTN","IBCECOB2",407,0)
 N IBDA,IBPROC,IBEOBNDX,IBEOB
"RTN","IBCECOB2",408,0)
 S IBCT=0,IBPROC=0
"RTN","IBCECOB2",409,0)
 F IBEOBNDX="B","C" D
"RTN","IBCECOB2",410,0)
 .S IBDA=0 F  S IBDA=$O(^IBM(361.1,IBEOBNDX,IBIFN,IBDA)) Q:'+IBDA  D
"RTN","IBCECOB2",411,0)
 ..Q:$D(IBEOB(IBDA))
"RTN","IBCECOB2",412,0)
 ..Q:$P($G(^IBM(361.1,IBDA,0)),U,4)=1    ; only count EOBs
"RTN","IBCECOB2",413,0)
 ..S IBEOB(IBDA)="",IBCT=IBCT+1
"RTN","IBCECOB2",414,0)
 ..I $P($G(^IBM(361.1,IBDA,0)),U,13)=1 S IBPROC=1
"RTN","IBCECOB2",415,0)
 I IBCT,'IBPROC Q 1  ; there is at least one EOB and none of the EOBS are processed.
"RTN","IBCECOB2",416,0)
 Q 0  ;
"RTN","IBCECOB2",417,0)
 ;
"RTN","IBCECOB2",418,0)
WARNMSE() ; Display MSE Warning and check if we should continue.
"RTN","IBCECOB2",419,0)
 D FULL^VALM1
"RTN","IBCECOB2",420,0)
 N DIR,X,Y
"RTN","IBCECOB2",421,0)
 S DIR("A",1)="WARNING : The MRA for this claim caused a Data Mismatch/Message Storage Error."
"RTN","IBCECOB2",422,0)
 S DIR("A",2)="If you continue, the secondary claim may not contain the correct data."
"RTN","IBCECOB2",423,0)
 S DIR("A")="Do you wish to continue? ",DIR("B")="NO",DIR(0)="YA" D ^DIR
"RTN","IBCECOB2",424,0)
 I Y>0 Q 1   ; Okay to continue.
"RTN","IBCECOB2",425,0)
 Q 0  ;
"RTN","IBCECOB4")
0^39^B34522884^B34090702
"RTN","IBCECOB4",1,0)
IBCECOB4 ;ALB/CXW - IB EM MANAGEMENT - REVIEW STATUS SCREEN ;16-MAY-2000
"RTN","IBCECOB4",2,0)
 ;;2.0;INTEGRATED BILLING;**137,181,348,349,592**;21-MAR-1994;Build 58
"RTN","IBCECOB4",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCECOB4",4,0)
 ;
"RTN","IBCECOB4",5,0)
EN ; -- main entry point for claims status awaiting resolution detail
"RTN","IBCECOB4",6,0)
 S VALMCNT=0,VALMBG=1
"RTN","IBCECOB4",7,0)
 D EN^VALM("IBCEM EOB REVIEW")
"RTN","IBCECOB4",8,0)
 Q
"RTN","IBCECOB4",9,0)
 ;
"RTN","IBCECOB4",10,0)
HDR ; -- header code
"RTN","IBCECOB4",11,0)
 ;IBDA - ien EOB selection screen
"RTN","IBCECOB4",12,0)
 N IBST
"RTN","IBCECOB4",13,0)
 S IBST=$P($G(^IBM(361.1,IBDA,0)),U,16)
"RTN","IBCECOB4",14,0)
 S VALMHDR(2)="Review Status= "_$S(IBST=1:"REVIEW IN PROCESS",IBST=2:"ACCEPTED-INTERIM EOB",IBST=3:"ACCEPTED-COMPLETE EOB",IBST=4:"REJECTED",IBST=9:"CLAIM CANCELLED",1:"NOT REVIEWED")
"RTN","IBCECOB4",15,0)
 Q
"RTN","IBCECOB4",16,0)
 ;
"RTN","IBCECOB4",17,0)
INIT ; -- init variables and list array
"RTN","IBCECOB4",18,0)
 N I,X,Y,Z,IBZ,IBFST,IBPAT
"RTN","IBCECOB4",19,0)
 K ^TMP("IBCECOC",$J)
"RTN","IBCECOB4",20,0)
SCR S VALMCNT=0
"RTN","IBCECOB4",21,0)
 ; IBCMT = the data extracted into ^TMP("IBCECOB1",$J)
"RTN","IBCECOB4",22,0)
 ; IBIFN = the ien of the bill
"RTN","IBCECOB4",23,0)
 ; IBDA = the ien of the entry in 361.1
"RTN","IBCECOB4",24,0)
 S Z=$G(^DPT(+$P($G(^DGCR(399,IBIFN,0)),U,2),0))
"RTN","IBCECOB4",25,0)
 S IBPAT=$E($P(Z,U),1,25)_"/"_$E($P(Z,U,9),6,9)
"RTN","IBCECOB4",26,0)
 S X=""
"RTN","IBCECOB4",27,0)
 S X=$$SETFLD^VALM1($$BN1^PRCAFN(IBIFN),X,"BILL")
"RTN","IBCECOB4",28,0)
 S X=$$SETFLD^VALM1($$DAT1^IBOUTL($P(IBCMT,U)),X,"SERVICE")
"RTN","IBCECOB4",29,0)
 S X=$$SETFLD^VALM1(IBPAT,X,"PATNM")
"RTN","IBCECOB4",30,0)
 S X=$$SETFLD^VALM1("  "_$P("PRI^SEC^TER",U,+$P(IBCMT,U,16)),X,"SEQ")
"RTN","IBCECOB4",31,0)
 ;JWS;IB*2.0*592:Dental form #7 J430D
"RTN","IBCECOB4",32,0)
 S X=$$SETFLD^VALM1("  "_$$TYPE^IBJTLA1($P(IBCMT,U,5))_"/"_$S(+$P(IBCMT,U,6)=2:"CMS-1500",$P(IBCMT,U,6)=7:"J430D",1:"UB-04"),X,"BTYPE")
"RTN","IBCECOB4",33,0)
 D SET(X)
"RTN","IBCECOB4",34,0)
 S Z=0 F  S Z=$O(^IBM(361.1,IBDA,21,Z)) Q:'Z  S I=$G(^(Z,0)) D
"RTN","IBCECOB4",35,0)
 . S X=$$SETSTR^VALM1("Review Date/Time: "_$$EXPAND^IBTRE(361.121,.01,+I),"",2,40)
"RTN","IBCECOB4",36,0)
 . D SET(X)
"RTN","IBCECOB4",37,0)
 . I $P($G(^VA(200,+$P(I,U,2),0)),U)'="" S X=$$SETSTR^VALM1("Reviewed By: "_$P($G(^VA(200,+$P(I,U,2),0)),U),"",2,50) D SET(X)
"RTN","IBCECOB4",38,0)
 . S (IBFST,Y)=0 F  S Y=$O(^IBM(361.1,IBDA,21,Z,1,Y)) Q:'Y  D
"RTN","IBCECOB4",39,0)
 .. S X=$$SETSTR^VALM1($S('IBFST:"Comments: ",1:"")_$G(^IBM(361.1,IBDA,21,Z,1,Y,0)),"",2,$S('IBFST:140,1:150))
"RTN","IBCECOB4",40,0)
 .. D SET(X)
"RTN","IBCECOB4",41,0)
 .. S IBFST=1
"RTN","IBCECOB4",42,0)
 . D SET("")
"RTN","IBCECOB4",43,0)
INITQ Q
"RTN","IBCECOB4",44,0)
 ;
"RTN","IBCECOB4",45,0)
HELP ; -- help code
"RTN","IBCECOB4",46,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBCECOB4",47,0)
 Q
"RTN","IBCECOB4",48,0)
 ;
"RTN","IBCECOB4",49,0)
EXIT ; -- exit code
"RTN","IBCECOB4",50,0)
 K ^TMP("IBCECOC",$J)
"RTN","IBCECOB4",51,0)
 D CLEAN^VALM10
"RTN","IBCECOB4",52,0)
 Q
"RTN","IBCECOB4",53,0)
 ;
"RTN","IBCECOB4",54,0)
SET(X) ;
"RTN","IBCECOB4",55,0)
 S VALMCNT=VALMCNT+1
"RTN","IBCECOB4",56,0)
 S ^TMP("IBCECOC",$J,VALMCNT,0)=X
"RTN","IBCECOB4",57,0)
 S ^TMP("IBCECOC",$J,"IDX",VALMCNT,1)=""
"RTN","IBCECOB4",58,0)
 S ^TMP("IBCECOC",$J,1)=VALMCNT
"RTN","IBCECOB4",59,0)
 Q
"RTN","IBCECOB4",60,0)
 ;
"RTN","IBCECOB4",61,0)
STATUS ; Edit review status
"RTN","IBCECOB4",62,0)
 ;IBDA - EOB ien
"RTN","IBCECOB4",63,0)
 N DA,DIE,DR,IBOLD,DIC,DO,DD,DLAYGO,IBFINAL,IBO,IBNEW,IBFACT
"RTN","IBCECOB4",64,0)
 D FULL^VALM1
"RTN","IBCECOB4",65,0)
 S DIE="^IBM(361.1,"
"RTN","IBCECOB4",66,0)
 S DA=IBDA
"RTN","IBCECOB4",67,0)
 G:'DA STATUSQ
"RTN","IBCECOB4",68,0)
 S IBOLD=$P($G(^IBM(361.1,DA,0)),U,16),IBFINAL=0,IBO=$S(IBOLD'="":"/"_IBOLD,1:"@")
"RTN","IBCECOB4",69,0)
 S DR="@1;.16;I +X<3 S IBFINAL=0,Y=""@99"";S IBFINAL=1;.2;I X="""" W !,""For a final status, this field is required"" S Y=""@98"";S Y=""@99"";@98;.16///"_IBO_";S Y=""@1"";@99"
"RTN","IBCECOB4",70,0)
 L +^IBM(361.1,IBDA):3 I '$T D  G STATUSQ
"RTN","IBCECOB4",71,0)
 . W !,"Sorry, another user currently editing this entry (#"_IBDA_")."
"RTN","IBCECOB4",72,0)
 D ^DIE
"RTN","IBCECOB4",73,0)
 ;
"RTN","IBCECOB4",74,0)
 I $G(IBFINAL) D  ;Final status selected - let remarks be entered
"RTN","IBCECOB4",75,0)
 . N Z
"RTN","IBCECOB4",76,0)
 . S Z=IBDA
"RTN","IBCECOB4",77,0)
 . N IBDA,Q,DIE,DR,DA,X,Y
"RTN","IBCECOB4",78,0)
 . S IBDA(1)=Z,IBDA=""
"RTN","IBCECOB4",79,0)
 . D ADDCOM(.IBDA,.DUZ,.IBCOM)
"RTN","IBCECOB4",80,0)
 . I $P($G(^IBM(361.1,IBDA(1),0)),U,20)="F",'$O(^IBM(361.1,IBDA(1),21,+IBDA,0)) D   ; Require remarks for 'OTHER ACTION' final status
"RTN","IBCECOB4",81,0)
 .. W !,"Since FILED - NO ACTION final status was selected, you must enter a",!,"   comment explaining the FILED - NO ACTION" D ADDCOM(.IBDA,.DUZ,.IBCOM,1)
"RTN","IBCECOB4",82,0)
 .. I IBDA D
"RTN","IBCECOB4",83,0)
 ... ; Delete entry if just entered without a comment
"RTN","IBCECOB4",84,0)
 ... D KILLREV(.IBDA)
"RTN","IBCECOB4",85,0)
 .. I '$O(^IBM(361.1,IBDA(1),21,+IBDA,0)) S DIE="^IBM(361.1,",DA=IBDA(1),DR=".20///@;.16///"_IBO D ^DIE W !,"The review status was not changed because no comment was entered",! Q
"RTN","IBCECOB4",86,0)
 S IBNEW=$P($G(^IBM(361.1,DA,0)),U,16)
"RTN","IBCECOB4",87,0)
 ;if time out-no change in review status
"RTN","IBCECOB4",88,0)
 S IBFACT=$P($G(^IBM(361.1,DA,0)),U,20)
"RTN","IBCECOB4",89,0)
 I $G(IBFINAL),IBFACT="",IBNEW>1 D  G STATUSQ
"RTN","IBCECOB4",90,0)
 . W !,"The review status was not changed because no final status was selected"
"RTN","IBCECOB4",91,0)
 . S DR=".16////"_IBOLD,DIE="^IBM(361.1," D ^DIE
"RTN","IBCECOB4",92,0)
 I IBNEW>1,$P(^IBM(361.1,DA,0),U,19) D
"RTN","IBCECOB4",93,0)
 . I "CR"'[IBFACT D
"RTN","IBCECOB4",94,0)
 .. N DIR,X,Y
"RTN","IBCECOB4",95,0)
 .. S DIR("?",1)="IF THIS BILL HAS RECEIVED ITS FINAL ELECTRONIC MESSAGE AND NO FURTHER ACTION",DIR("?",2)="WILL BE TAKEN ON IT, ANSWER YES"
"RTN","IBCECOB4",96,0)
 .. S DIR("A")="DO YOU WANT TO CLOSE THE TRANSMISSION RECORD FOR THIS CLAIM?: ",DIR("B")="NO",DIR(0)="YA" D ^DIR
"RTN","IBCECOB4",97,0)
 .. I Y>0 S IBFACT="N"
"RTN","IBCECOB4",98,0)
 . I "NCR"[IBFACT D UPDEDI^IBCEM(+$P(^IBM(361.1,DA,0),U,19),IBFACT) Q
"RTN","IBCECOB4",99,0)
 I IBOLD'=IBNEW D  ;Note the change and who made it
"RTN","IBCECOB4",100,0)
 . N IBIEN,IBTEXT,DA
"RTN","IBCECOB4",101,0)
 . S DA(1)=IBDA,DIC="^IBM(361.1,"_DA(1)_",21,",DIC(0)="L",DLAYGO=361.121
"RTN","IBCECOB4",102,0)
 . S X=$$NOW^XLFDT
"RTN","IBCECOB4",103,0)
 . S DIC("P")=$$GETSPEC^IBEFUNC(361.1,21)
"RTN","IBCECOB4",104,0)
 . D FILE^DICN K DIC,DD,DO,DLAYGO
"RTN","IBCECOB4",105,0)
 . Q:Y'>0
"RTN","IBCECOB4",106,0)
 . S DA(2)=DA(1),DA(1)=+Y,IBIEN=DA(1)_","_DA(2)_",",IBTEXT(1)="REVIEW STATUS CHANGED TO '"_$$EXPAND^IBTRE(361.1,.16,$P(^IBM(361.1,DA(2),0),U,16))_"'  BY: "_$$EXPAND^IBTRE(361.121,.02,+$G(DUZ))
"RTN","IBCECOB4",107,0)
 . D WP^DIE(361.121,IBIEN,1,,"IBTEXT") K ^TMP("DIERR",$J)
"RTN","IBCECOB4",108,0)
 . D HDR,INIT
"RTN","IBCECOB4",109,0)
 L -^IBM(361.1,DA)
"RTN","IBCECOB4",110,0)
STATUSQ ;
"RTN","IBCECOB4",111,0)
 D PAUSE^VALM1
"RTN","IBCECOB4",112,0)
 S VALMBCK="R"
"RTN","IBCECOB4",113,0)
 Q
"RTN","IBCECOB4",114,0)
 ;
"RTN","IBCECOB4",115,0)
ADDCOM(IBDA,DUZ,IBCOM,ADD) ; Add review comment to file 361.1
"RTN","IBCECOB4",116,0)
 ; IBDA = array containing the DA references for the file add -
"RTN","IBCECOB4",117,0)
 ;        pass by reference
"RTN","IBCECOB4",118,0)
 ; DUZ = ien of the user
"RTN","IBCECOB4",119,0)
 ; ADD = flag when set to 1 says the review date exists,
"RTN","IBCECOB4",120,0)
 ;       just allow comment entry
"RTN","IBCECOB4",121,0)
 ; Returns IBDA = the entry # of the comment
"RTN","IBCECOB4",122,0)
 ;          and IBCOM array referencing any comments added by the user
"RTN","IBCECOB4",123,0)
 ;
"RTN","IBCECOB4",124,0)
 N DA,DIC,DD,DO,DLAYGO,X,Y
"RTN","IBCECOB4",125,0)
 S DR=$S($G(DUZ):".02////"_DUZ_";",1:"")_"1"
"RTN","IBCECOB4",126,0)
 I '$G(ADD) D
"RTN","IBCECOB4",127,0)
 . K DO,DD
"RTN","IBCECOB4",128,0)
 . S DIC="^IBM(361.1,"_IBDA(1)_",21,",DA(1)=IBDA(1),X=$$NOW^XLFDT
"RTN","IBCECOB4",129,0)
 . W !,"New Review Date: "_$$FMTE^XLFDT(X,2)
"RTN","IBCECOB4",130,0)
 . S DIC("DR")=DR,DLAYGO=361.121
"RTN","IBCECOB4",131,0)
 . S DIC(0)="L",DIC("P")=$$GETSPEC^IBEFUNC(361.1,21)
"RTN","IBCECOB4",132,0)
 . D FILE^DICN K DIC,DD,DO,DLAYGO
"RTN","IBCECOB4",133,0)
 . S IBDA=+Y
"RTN","IBCECOB4",134,0)
 I IBDA>0 D
"RTN","IBCECOB4",135,0)
 . I $G(ADD) S DIE="^IBM(361.1,"_IBDA(1)_",21,",DA(1)=IBDA(1),DA=IBDA D ^DIE
"RTN","IBCECOB4",136,0)
 . I '$O(^IBM(361.1,IBDA(1),21,IBDA,0)) D KILLREV(.IBDA) Q
"RTN","IBCECOB4",137,0)
 . S IBCOM(DUZ,IBDA)=""
"RTN","IBCECOB4",138,0)
 Q
"RTN","IBCECOB4",139,0)
 ;
"RTN","IBCECOB4",140,0)
KILLREV(IBDA) ; Deletes a review date if no comments entered
"RTN","IBCECOB4",141,0)
 N DA,DIK
"RTN","IBCECOB4",142,0)
 S DA=IBDA,DA(1)=IBDA(1),DIK="^IBM(361.1,"_IBDA(1)_",21,"
"RTN","IBCECOB4",143,0)
 K IBCOM(DUZ,IBDA)
"RTN","IBCECOB4",144,0)
 D ^DIK
"RTN","IBCECOB4",145,0)
 Q
"RTN","IBCECOB4",146,0)
 ;
"RTN","IBCECSA5")
0^40^B95064070^B92877287
"RTN","IBCECSA5",1,0)
IBCECSA5 ;ALB/CXW - VIEW EOB SCREEN ;01-OCT-1999
"RTN","IBCECSA5",2,0)
 ;;2.0;INTEGRATED BILLING;**137,135,263,280,155,349,489,488,547,592**;21-MAR-1994;Build 58
"RTN","IBCECSA5",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCECSA5",4,0)
 ;
"RTN","IBCECSA5",5,0)
 ; reference to $$VFILE^DILFD allowed with IA#2055  (IB*2.0*547)
"RTN","IBCECSA5",6,0)
 ;
"RTN","IBCECSA5",7,0)
EN ; -- main entry point for VIEW EOB
"RTN","IBCECSA5",8,0)
 N VALMCNT,VALMBG,VALMHDR
"RTN","IBCECSA5",9,0)
 S VALMCNT=0,VALMBG=1
"RTN","IBCECSA5",10,0)
 D EN^VALM("IBCEM VIEW EOB")
"RTN","IBCECSA5",11,0)
 Q
"RTN","IBCECSA5",12,0)
 ;
"RTN","IBCECSA5",13,0)
INIT ; -- init variables and list array
"RTN","IBCECSA5",14,0)
 I '$G(IBIFN) S VALMQUIT="" G INITQ    ; bill# is required
"RTN","IBCECSA5",15,0)
 D HDR^IBCEOB2                         ; build the VALMHDR array
"RTN","IBCECSA5",16,0)
 K IBCNT,IBONE,^TMP("IBCECSD",$J)      ; kill vars and scratch global
"RTN","IBCECSA5",17,0)
 ;
"RTN","IBCECSA5",18,0)
 ; 8/13/03 - If variable IBEOBIFN is set, then this is the 361.1 ien
"RTN","IBCECSA5",19,0)
 ;           that the user selected from a list.  Build the detail.
"RTN","IBCECSA5",20,0)
 I $G(IBEOBIFN) S IBCNT=IBEOBIFN,IBONE=1 D BLD^IBCECSA6,EOBERR G INITQ
"RTN","IBCECSA5",21,0)
 ;
"RTN","IBCECSA5",22,0)
 D BLD^IBCEOB2   ; build ^TMP("IBCEOB",$J) containing MRA/EOB lister
"RTN","IBCECSA5",23,0)
 S IBONE=0
"RTN","IBCECSA5",24,0)
 M ^TMP("IBCECSD",$J)=^TMP("IBCEOB",$J)
"RTN","IBCECSA5",25,0)
 ;
"RTN","IBCECSA5",26,0)
 ; 4/7/03 - If only 1 EOB record found for this bill, then set the
"RTN","IBCECSA5",27,0)
 ;          IBCNT variable, the IBONE one-time flag, and build the
"RTN","IBCECSA5",28,0)
 ;          detail sections of this list.
"RTN","IBCECSA5",29,0)
 I $G(VALMCNT)=1 S IBCNT=$P($G(^TMP("IBCECSD",$J,1)),U,2),IBONE=1 I IBCNT D BLD^IBCECSA6
"RTN","IBCECSA5",30,0)
 D EOBERR   ; IB*2.0*488  (vd)
"RTN","IBCECSA5",31,0)
 ;
"RTN","IBCECSA5",32,0)
INITQ Q
"RTN","IBCECSA5",33,0)
 ;
"RTN","IBCECSA5",34,0)
HELP ; -- help code
"RTN","IBCECSA5",35,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBCECSA5",36,0)
 Q
"RTN","IBCECSA5",37,0)
 ;
"RTN","IBCECSA5",38,0)
EXIT ; -- exit code
"RTN","IBCECSA5",39,0)
 K ^TMP("IBCECSD",$J)
"RTN","IBCECSA5",40,0)
 D CLEAR^VALM1,CLEAN^VALM10
"RTN","IBCECSA5",41,0)
 Q
"RTN","IBCECSA5",42,0)
MIN ;
"RTN","IBCECSA5",43,0)
 N IBREC1,IBRM1,IBRM2,IBRM3,IBRM4,IBRM5,IBRL,IBTYPE,IBT,IBTX,IBD
"RTN","IBCECSA5",44,0)
 ; flag for inpatient mra
"RTN","IBCECSA5",45,0)
 S IBTYPE=$S($G(IBSRC):1,$$INPAT^IBCEF(+IBREC):1,1:0)
"RTN","IBCECSA5",46,0)
 ;
"RTN","IBCECSA5",47,0)
 S IB=$$SETSTR^VALM1("MEDICARE INFORMATION:","",1,50)
"RTN","IBCECSA5",48,0)
 D SET(IB)
"RTN","IBCECSA5",49,0)
 I '$G(IBSRC) D
"RTN","IBCECSA5",50,0)
 . D CNTRL^VALM10(VALMCNT,1,21,IORVON,IORVOFF)
"RTN","IBCECSA5",51,0)
 . S ^TMP("IBCECSD",$J,"X",5)=VALMCNT
"RTN","IBCECSA5",52,0)
 I $G(IBSRC),'$D(^IBM(361.1,IBCNT,4)) Q
"RTN","IBCECSA5",53,0)
 I '$G(IBSRC),'$$INPAT^IBCEF(+IBREC) Q
"RTN","IBCECSA5",54,0)
 D SET(" INPATIENT:")
"RTN","IBCECSA5",55,0)
 S IBREC1=$G(^IBM(361.1,IBCNT,4)),(IB,IBRL)=""
"RTN","IBCECSA5",56,0)
 ;
"RTN","IBCECSA5",57,0)
 F IBT=2:1 S IBTX=$P($T(MINDAT+IBT),";",3) Q:IBTX=""  D
"RTN","IBCECSA5",58,0)
 . S IBD=$P(IBREC1,"^",+IBTX)
"RTN","IBCECSA5",59,0)
 . I $L($P(IBTX,"^",4)) X $P(IBTX,"^",4) E  N IBFULL S IBFULL=1
"RTN","IBCECSA5",60,0)
 . I $S(IBFULL:1,1:IBD) D
"RTN","IBCECSA5",61,0)
 .. I $L($P(IBTX,"^",4)) X $P(IBTX,"^",4) I  Q
"RTN","IBCECSA5",62,0)
 .. X "S IBD="_$S($L($P(IBTX,"^",3)):$P(IBTX,"^",3),1:"$$A10(IBD)")
"RTN","IBCECSA5",63,0)
 .. S IB=$$SETSTR^VALM1($P(IBTX,"^",2)_IBD,IB,$S('IBRL:4,1:37),$S('IBRL:41,1:38))
"RTN","IBCECSA5",64,0)
 .. S IBRL=$S(IBRL:0,1:1)
"RTN","IBCECSA5",65,0)
 .. I 'IBRL D SET(IB,IBRL) S IB=""
"RTN","IBCECSA5",66,0)
 ;
"RTN","IBCECSA5",67,0)
 D:IBRL'="" SET(IB)
"RTN","IBCECSA5",68,0)
 D REMARK
"RTN","IBCECSA5",69,0)
 Q
"RTN","IBCECSA5",70,0)
 ;
"RTN","IBCECSA5",71,0)
MINDAT ; data for MIN tag
"RTN","IBCECSA5",72,0)
 ; format:  piece^label^special format code^special decision for disp
"RTN","IBCECSA5",73,0)
 ;;1^Cov Days/Visit Ct  : ^$$RJ(+IBD)^I $G(IBSRC)
"RTN","IBCECSA5",74,0)
 ;;3^Claim DRG Amt      : 
"RTN","IBCECSA5",75,0)
 ;;2^Lifetm Psych Dy Ct : ^$$RJ(IBD)
"RTN","IBCECSA5",76,0)
 ;;5^Disprop Share Amt  : ^^I IBTYPE
"RTN","IBCECSA5",77,0)
 ;;4^Cap Exception Amt  : 
"RTN","IBCECSA5",78,0)
 ;;7^PPS Capital Amt    : ^^I IBTYPE
"RTN","IBCECSA5",79,0)
 ;;6^MSP Pass Thru Amt  : 
"RTN","IBCECSA5",80,0)
 ;;9^PPS Cap HSP-DRG Amt: ^^I IBTYPE
"RTN","IBCECSA5",81,0)
 ;;8^PPS Cap FSP-DRG Amt: ^^I IBTYPE
"RTN","IBCECSA5",82,0)
 ;;11^Old Capital Amt    : ^^I IBTYPE
"RTN","IBCECSA5",83,0)
 ;;10^PPS Cap DSH-DRG Amt: ^^I IBTYPE
"RTN","IBCECSA5",84,0)
 ;;13^PPS Op Hos DRG Amt : 
"RTN","IBCECSA5",85,0)
 ;;12^PPS Capital IME Amt: ^^I IBTYPE
"RTN","IBCECSA5",86,0)
 ;;15^PPS Op Fed DRG Amt : ^^I IBTYPE
"RTN","IBCECSA5",87,0)
 ;;14^Cost Report Day Ct : ^$$RJ(IBD)^I IBTYPE
"RTN","IBCECSA5",88,0)
 ;;17^Indirect Teach Amt : ^^I IBTYPE
"RTN","IBCECSA5",89,0)
 ;;16^PPS Cap Outlier Amt: ^^I IBTYPE
"RTN","IBCECSA5",90,0)
 ;;18^Non-Pay Prof Comp  : ^$$RJ(IBD)
"RTN","IBCECSA5",91,0)
 ;;19^Non-Covered Days Ct: ^$$RJ(+IBD)^I IBTYPE
"RTN","IBCECSA5",92,0)
 ;;
"RTN","IBCECSA5",93,0)
 ;
"RTN","IBCECSA5",94,0)
REMARK ; set up remarks and line level details
"RTN","IBCECSA5",95,0)
 N IBREC1,IBP,IBT,IBX,RCODE,RDESC,REXIST
"RTN","IBCECSA5",96,0)
 Q:$G(IBREM)  S IBREM=1
"RTN","IBCECSA5",97,0)
 D SET(" ")
"RTN","IBCECSA5",98,0)
 D SET(" Claim Level Remark Information")
"RTN","IBCECSA5",99,0)
 D SET("   Code     Description")
"RTN","IBCECSA5",100,0)
 I '$G(IBSRC) D
"RTN","IBCECSA5",101,0)
 . D CNTRL^VALM10(VALMCNT,4,4,IOUON,IOUOFF)
"RTN","IBCECSA5",102,0)
 . D CNTRL^VALM10(VALMCNT,13,11,IOUON,IOUOFF)
"RTN","IBCECSA5",103,0)
 . Q
"RTN","IBCECSA5",104,0)
 ;
"RTN","IBCECSA5",105,0)
 S IBREC1=$P($G(^IBM(361.1,IBCNT,3)),U,3,7)
"RTN","IBCECSA5",106,0)
 I $P(IBREC1,U,1)="" S IBREC1=$P($G(^IBM(361.1,IBCNT,5)),U,1,5)
"RTN","IBCECSA5",107,0)
 S REXIST=0
"RTN","IBCECSA5",108,0)
 ;
"RTN","IBCECSA5",109,0)
 F IBP=1:1:5 D
"RTN","IBCECSA5",110,0)
 . S RCODE=$P(IBREC1,U,IBP)
"RTN","IBCECSA5",111,0)
 . S RDESC=$G(^IBM(361.1,IBCNT,"RM"_IBP))
"RTN","IBCECSA5",112,0)
 . ; IB*2.0*547 - get RARC desription from new AR file 346 when available
"RTN","IBCECSA5",113,0)
 . I '$$VFILE^DILFD(346),RCODE="",RDESC="" Q
"RTN","IBCECSA5",114,0)
 . K IBT
"RTN","IBCECSA5",115,0)
 . Q:RCODE=""
"RTN","IBCECSA5",116,0)
 . I '$$VFILE^DILFD(346) S REXIST=1,IBT(IBP)=RDESC
"RTN","IBCECSA5",117,0)
 . I $$VFILE^DILFD(346) S REXIST=$$CARC(RCODE,346,60,"IBT") Q:REXIST<1
"RTN","IBCECSA5",118,0)
 . D TXT1(.IBT,0,60)
"RTN","IBCECSA5",119,0)
 . D SET("   "_$$LJ^XLFSTR(RCODE,6)_"-  "_$G(IBT(1)))
"RTN","IBCECSA5",120,0)
 . S IBX=1
"RTN","IBCECSA5",121,0)
 . F  S IBX=$O(IBT(IBX)) Q:'IBX  D SET($J("",12)_IBT(IBX))
"RTN","IBCECSA5",122,0)
 . Q
"RTN","IBCECSA5",123,0)
 ;
"RTN","IBCECSA5",124,0)
 I 'REXIST D SET("   No claim level remarks on file")
"RTN","IBCECSA5",125,0)
 D SET(" ")
"RTN","IBCECSA5",126,0)
 Q:$G(IBSRC)  ; MRA Only
"RTN","IBCECSA5",127,0)
 ;
"RTN","IBCECSA5",128,0)
MRALLA S IB=$$SETSTR^VALM1("LINE LEVEL ADJUSTMENTS:","",1,50)
"RTN","IBCECSA5",129,0)
 D SET(IB)
"RTN","IBCECSA5",130,0)
 I '$G(IBSRC) D
"RTN","IBCECSA5",131,0)
 . D CNTRL^VALM10(VALMCNT,1,23,IORVON,IORVOFF)
"RTN","IBCECSA5",132,0)
 . S ^TMP("IBCECSD",$J,"X",7)=VALMCNT
"RTN","IBCECSA5",133,0)
 I '$D(^IBM(361.1,IBCNT,15,0)) D SET(" NONE") Q  ; only if there is info
"RTN","IBCECSA5",134,0)
 ;
"RTN","IBCECSA5",135,0)
 ; look up all billed data
"RTN","IBCECSA5",136,0)
 N IBZDATA,IBFORM,IBX2,IBX3,IBREC2,IBREC3,IBTX,IBT,IBRC,IBZ,IBTXL
"RTN","IBCECSA5",137,0)
 ;JWS;IB*2.0*592:Dental form #7 do same as CMS-1500
"RTN","IBCECSA5",138,0)
 S IBFORM=0                         ; cms-1500 & J430D
"RTN","IBCECSA5",139,0)
 I $$FT^IBCEF(+IBREC)=3 S IBFORM=1  ; UB-04
"RTN","IBCECSA5",140,0)
 ;JWS;IB*2.0*592:Dental form #7
"RTN","IBCECSA5",141,0)
 D F^IBCEF("N-"_$S(IBFORM=1:"UB-04",$$FT^IBCEF(+IBREC)=7:"J430D",1:"HCFA 1500")_" SERVICE LINE (EDI)","IBZDATA",,+IBREC)
"RTN","IBCECSA5",142,0)
 S IBX=0 F  S IBX=$O(^IBM(361.1,IBCNT,15,IBX)) Q:IBX<1  S IBREC1=^IBM(361.1,IBCNT,15,IBX,0) D
"RTN","IBCECSA5",143,0)
 . NEW RVL
"RTN","IBCECSA5",144,0)
 . D SET("  #   SV DT   REVCD  PROC  MOD  UNITS  BILLED  DEDUCT  COINS    ALLOW     PYMT")
"RTN","IBCECSA5",145,0)
 . S RVL=+$P(IBREC1,U,12)       ; referenced Vista line#
"RTN","IBCECSA5",146,0)
 . I 'RVL S RVL=IBX             ; use the EOB line# if not there
"RTN","IBCECSA5",147,0)
 . S IBT=$$RJ($P(IBREC1,"^"),3) ;             line number
"RTN","IBCECSA5",148,0)
 . S IBT=IBT_" "_$$RJ($$DAT1^IBOUTL($P($P(IBREC1,"^",16),".")),8) ; service date
"RTN","IBCECSA5",149,0)
 . S IBT=IBT_" "_$$RJ($$EXTERNAL^DILFD(361.115,.1,"",$P(IBREC1,"^",10)),6) ;                                                revcd
"RTN","IBCECSA5",150,0)
 . S IBT=IBT_" "_$$RJ($P(IBREC1,"^",4),5) ;   procedure
"RTN","IBCECSA5",151,0)
 . S IBT=IBT_" "_$$RJ($P($G(^IBM(361.1,IBCNT,15,IBX,2,1,0)),"^"),3)_$S($D(^IBM(361.1,IBCNT,15,IBX,2,2,0)):"+",1:" ") ;      modifiers
"RTN","IBCECSA5",152,0)
 . S IBT=IBT_" "_$$RJ($FN($P(IBREC1,"^",11),"",0),5) ; units
"RTN","IBCECSA5",153,0)
 . ;JWS;IB*2.0*592:Dental form #7 do same as CMS-1500 no change, just comment
"RTN","IBCECSA5",154,0)
 . S IBT=IBT_" "_$$RJ($FN($S(IBFORM:$P($G(IBZDATA(RVL)),"^",5),1:$P($G(IBZDATA(RVL)),"^",8)*$P($G(IBZDATA(RVL)),"^",9)),"",2),8) ;    billed
"RTN","IBCECSA5",155,0)
 . S IBT=IBT_" "_$$RJ($FN($P($G(^IBM(361.1,IBCNT,15,IBX,1,+$O(^IBM(361.1,IBCNT,15,IBX,1,"B","PR",0)),1,+$O(^IBM(361.1,IBCNT,15,IBX,1,+$O(^IBM(361.1,IBCNT,15,IBX,1,"B","PR",0)),1,"B",1,0)),0)),"^",2),"",2),7) ;  deduct
"RTN","IBCECSA5",156,0)
 . S IBT=IBT_" "_$$RJ($FN($P($G(^IBM(361.1,IBCNT,15,IBX,1,+$O(^IBM(361.1,IBCNT,15,IBX,1,"B","PR",0)),1,+$O(^IBM(361.1,IBCNT,15,IBX,1,+$O(^IBM(361.1,IBCNT,15,IBX,1,"B","PR",0)),1,"B",2,0)),0)),"^",2),"",2),6) ;   coins
"RTN","IBCECSA5",157,0)
 . S IBT=IBT_" "_$$RJ($FN($P(IBREC1,"^",13),"",2),8) ; allow
"RTN","IBCECSA5",158,0)
 . S IBT=IBT_" "_$$RJ($FN($P(IBREC1,"^",3),"",2),8) ;  payment
"RTN","IBCECSA5",159,0)
 . D SET(IBT)
"RTN","IBCECSA5",160,0)
 . S IBX2=0 F  S IBX2=$O(^IBM(361.1,IBCNT,15,IBX,1,IBX2)) Q:IBX2<1  D
"RTN","IBCECSA5",161,0)
 .. S IBREC2=^IBM(361.1,IBCNT,15,IBX,1,IBX2,0),IBX3=0
"RTN","IBCECSA5",162,0)
 .. F  S IBX3=$O(^IBM(361.1,IBCNT,15,IBX,1,IBX2,1,IBX3)) Q:IBX3<1  D
"RTN","IBCECSA5",163,0)
 ... S IBREC3=^IBM(361.1,IBCNT,15,IBX,1,IBX2,1,IBX3,0)
"RTN","IBCECSA5",164,0)
 ... ; line level adjustments; don't display kludges (esg 10/23/03)
"RTN","IBCECSA5",165,0)
 ... I $P(IBREC2,U,1)="PR",$P(IBREC3,U,1)="AAA" Q
"RTN","IBCECSA5",166,0)
 ... I $P(IBREC2,U,1)="OA",$P(IBREC3,U,1)="AB3" Q
"RTN","IBCECSA5",167,0)
 ... I $P(IBREC2,U,1)="LQ" Q
"RTN","IBCECSA5",168,0)
 ... ; IB*2.0*547 - get CARC description from AR file 345, when ready
"RTN","IBCECSA5",169,0)
 ... I '$$VFILE^DILFD(345) S IBTX(1)="ADJ: "_$P(IBREC2,"^")_"  "_$P(IBREC3,"^")_"  "_$P(IBREC3,"^",4) D TXT1(.IBTX,0,79) S IBT=0 F  S IBT=$O(IBTX(IBT)) Q:IBT<1  D SET(IBTX(IBT))
"RTN","IBCECSA5",170,0)
 ... I $$VFILE^DILFD(345) S IBT=$$CARC($P(IBREC3,"^"),345,79,"IBTX"),IBTX(1)="ADJ: "_$P(IBREC2,"^")_"  "_$P(IBREC3,"^")_":  "_$G(IBTX(1)) D TXT1(.IBTX,0,79) S IBT=0 F  S IBT=$O(IBTX(IBT)) Q:IBT<1  D SET(IBTX(IBT))
"RTN","IBCECSA5",171,0)
 ... K IBTX
"RTN","IBCECSA5",172,0)
 ... D SET("ADJ AMT: "_$FN($P(IBREC3,"^",2),"",2))
"RTN","IBCECSA5",173,0)
 . S IBRC=0
"RTN","IBCECSA5",174,0)
 . F  S IBRC=$O(^IBM(361.1,IBCNT,15,IBX,4,IBRC)) Q:'IBRC  S IBREC2=$G(^(IBRC,0)) I IBREC2 K IBTX,IBZ S IBTX(1)="  -REMARK CODE("_+IBREC2_"): ",IBTXL=$L(IBTX(1)) D
"RTN","IBCECSA5",175,0)
 .. ; IB*2.0*547 - get RARC description from AR file 346, when ready
"RTN","IBCECSA5",176,0)
 .. I '$$VFILE^DILFD(346) S IBTX(1)=IBTX(1)_$P(IBREC2,U,2)_"  "_$P(IBREC2,U,3)
"RTN","IBCECSA5",177,0)
 .. I $$VFILE^DILFD(346) S IBT=$$CARC($P(IBREC2,U,2),346,79,"IBTX"),IBTX(1)=IBTX(1)_$P(IBREC2,U,2)_"  "_$G(IBT(1))
"RTN","IBCECSA5",178,0)
 .. I $L(IBTX(1))>79 D
"RTN","IBCECSA5",179,0)
 ... D TXT1(.IBTX,0,79) D SET(IBTX(1)) M IBZ=IBTX K IBTX S IBTX(1)="",IBT=1 F  S IBT=$O(IBZ(IBT)) Q:'IBT  S IBTX(1)=IBTX(1)_IBZ(IBT)_" "
"RTN","IBCECSA5",180,0)
 .. E  D
"RTN","IBCECSA5",181,0)
 ... S IBTXL=0
"RTN","IBCECSA5",182,0)
 .. D TXT1(.IBTX,IBTXL,79) S IBT=0 F  S IBT=$O(IBTX(IBT)) Q:IBT<1  D SET(IBTX(IBT))
"RTN","IBCECSA5",183,0)
 . D SET(" ")
"RTN","IBCECSA5",184,0)
 D SET(" ")
"RTN","IBCECSA5",185,0)
 Q
"RTN","IBCECSA5",186,0)
 ;
"RTN","IBCECSA5",187,0)
 ;/Beginning IB*2.0*488 (vd)
"RTN","IBCECSA5",188,0)
EOBERR ; Display information about any 361.1 message storage or filing errors
"RTN","IBCECSA5",189,0)
 N ERRTXT,DASHES,Z
"RTN","IBCECSA5",190,0)
 S DASHES="---------------------------------------------------------------------"
"RTN","IBCECSA5",191,0)
 I '$O(^IBM(361.1,IBCNT,"ERR",0)) Q
"RTN","IBCECSA5",192,0)
 D SET("VistA could not match all of the Line Level data received in the EEOB")
"RTN","IBCECSA5",193,0)
 D SET("(835 Record 40) to the claim in VistA.")
"RTN","IBCECSA5",194,0)
 D SET(" ")
"RTN","IBCECSA5",195,0)
 S Z=0 F  S Z=$O(^IBM(361.1,IBCNT,"ERR",Z)) Q:'Z  D
"RTN","IBCECSA5",196,0)
 .S ERRTXT=$G(^IBM(361.1,IBCNT,"ERR",Z,0))
"RTN","IBCECSA5",197,0)
 .I ERRTXT["##RAW DATA" S ERRTXT=DASHES
"RTN","IBCECSA5",198,0)
 .D SET(ERRTXT)
"RTN","IBCECSA5",199,0)
 Q
"RTN","IBCECSA5",200,0)
 ;/End of IB*2.0*488 (vd)
"RTN","IBCECSA5",201,0)
 ;
"RTN","IBCECSA5",202,0)
TXT(IBRM,IBLN,IBXY) ;display text over 79 chars
"RTN","IBCECSA5",203,0)
 ;IBRM - text, IBLN - length, IBXY - position
"RTN","IBCECSA5",204,0)
 S IBRM=$E(IBRM,IBLN+1,999)
"RTN","IBCECSA5",205,0)
REP I $E(IBRM,1,IBLN)'="" S IB=$$SETSTR^VALM1($E(IBRM,1,IBLN),"",IBXY,IBLN) D SET(IB) S IBRM=$E(IBRM,IBLN+1,999) G REP
"RTN","IBCECSA5",206,0)
 Q
"RTN","IBCECSA5",207,0)
 ;
"RTN","IBCECSA5",208,0)
SET(IB,IBSAV) ;
"RTN","IBCECSA5",209,0)
 I '$G(IBSAV) D SET^IBCECSA6($G(IBSRC),IB,+$G(CNT),IBCNT)
"RTN","IBCECSA5",210,0)
 Q
"RTN","IBCECSA5",211,0)
 ;
"RTN","IBCECSA5",212,0)
A10(X) ;
"RTN","IBCECSA5",213,0)
 Q $$A10^IBCECSA6(X)
"RTN","IBCECSA5",214,0)
 ;
"RTN","IBCECSA5",215,0)
A7(X) ; returns a dollar amount right justified to 7 characters
"RTN","IBCECSA5",216,0)
 Q $$RJ($FN(X,"",2),7)
"RTN","IBCECSA5",217,0)
 ;
"RTN","IBCECSA5",218,0)
TXT1(IBT,DIWL,DIWR) ; sets up text for over 79 chars
"RTN","IBCECSA5",219,0)
 ; IBT - pass by ref, array of text to be formatted back in array
"RTN","IBCECSA5",220,0)
 ; DIWL - left margin, DIWR = right margin
"RTN","IBCECSA5",221,0)
 N IBX,X,DIWF,IBS K ^UTILITY($J,"W")
"RTN","IBCECSA5",222,0)
 S DIWF="|I"_DIWL
"RTN","IBCECSA5",223,0)
 S IBX=0 F  S IBX=$O(IBT(IBX)) Q:IBX<1  S X=IBT(IBX) D ^DIWP
"RTN","IBCECSA5",224,0)
 K IBT F  S IBX=$O(^UTILITY($J,"W",DIWL,IBX)) Q:IBX<1  S IBT(IBX)=^UTILITY($J,"W",DIWL,IBX,0)
"RTN","IBCECSA5",225,0)
 K ^UTILITY($J,"W")
"RTN","IBCECSA5",226,0)
 Q
"RTN","IBCECSA5",227,0)
 ;
"RTN","IBCECSA5",228,0)
RJ(X,Y) ; right just, default is 10
"RTN","IBCECSA5",229,0)
 Q $$RJ^XLFSTR(X,$G(Y,10)," ")
"RTN","IBCECSA5",230,0)
 ;
"RTN","IBCECSA5",231,0)
CARC(IBCDE,IBF,IBML,IBARY) ;new CARC/RACR API for IB*2.0*547
"RTN","IBCECSA5",232,0)
 ; IBCDE = reason code from EOB to lookup in carc/rarc file (REQUIRED)
"RTN","IBCECSA5",233,0)
 ; IBF = file# to do lookup (either 345-CARC or 346-RARC) *REQUIRED*
"RTN","IBCECSA5",234,0)
 ; IBML = max length for each line (default is 79)
"RTN","IBCECSA5",235,0)
 ; IBARY = (required) subscripted array to return description data in:
"RTN","IBCECSA5",236,0)
 ;  array(1)=first line of word-processed description
"RTN","IBCECSA5",237,0)
 ;  array(2)= 2nd line of wp description, and so on
"RTN","IBCECSA5",238,0)
 ;
"RTN","IBCECSA5",239,0)
 ; Returns total # of lines in description
"RTN","IBCECSA5",240,0)
 ;
"RTN","IBCECSA5",241,0)
 N IBY,IBX,IBC,IBI,IBN,IBALN,IBSTP,IBDSC
"RTN","IBCECSA5",242,0)
 S IBC=0
"RTN","IBCECSA5",243,0)
 Q:$G(IBARY)="" IBC
"RTN","IBCECSA5",244,0)
 Q:$G(IBCDE)="" IBC
"RTN","IBCECSA5",245,0)
 Q:$G(IBF)="" IBC
"RTN","IBCECSA5",246,0)
 S:$G(IBML)="" IBML=79
"RTN","IBCECSA5",247,0)
 S IBY=$$FIND1^DIC(IBF,,"BX",IBCDE) Q:IBY<1 IBC
"RTN","IBCECSA5",248,0)
 S IBX=$$GET1^DIQ(IBF,IBY_",",4,"","IBDSC")
"RTN","IBCECSA5",249,0)
 S IBI=0 F  S IBI=$O(IBDSC(IBI)) Q:'IBI  D
"RTN","IBCECSA5",250,0)
 .S IBC=IBC+1,IBSTP=0,IBALN=$L(IBDSC(IBI))
"RTN","IBCECSA5",251,0)
 .S @IBARY@(IBI)=$E(IBDSC(IBI),1,IBML) Q:IBML>IBALN
"RTN","IBCECSA5",252,0)
 .S IBDSC(IBI+1)=($E(IBDSC(IBI),(IBML+1),IBALN)_" "_$G(IBDSC(IBI+1)))
"RTN","IBCECSA5",253,0)
 .; make sure we don't break words in 2
"RTN","IBCECSA5",254,0)
 .Q:$E(@IBARY@(IBI),IBML)=" "
"RTN","IBCECSA5",255,0)
 .F IBN=IBML:-1:1 Q:$G(IBSTP)=1  D
"RTN","IBCECSA5",256,0)
 ..Q:$E(IBDSC(IBI),IBN)'=" " 
"RTN","IBCECSA5",257,0)
 ..S @IBARY@(IBI)=$E(IBDSC(IBI),1,IBN),IBDSC(IBI+1)=($E(IBDSC(IBI),(IBN+1),IBML)_$G(IBDSC(IBI+1))),IBSTP=1 Q
"RTN","IBCECSA5",258,0)
 Q IBC
"RTN","IBCECSA5",259,0)
 ;
"RTN","IBCEDP")
0^37^B34247980^B32525754
"RTN","IBCEDP",1,0)
IBCEDP ;ALB/ESG - EDI CLAIM STATUS REPORT PRINT ;13-DEC-2007
"RTN","IBCEDP",2,0)
 ;;2.0;INTEGRATED BILLING;**377,592**;21-MAR-94;Build 58
"RTN","IBCEDP",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEDP",4,0)
 ;
"RTN","IBCEDP",5,0)
 Q
"RTN","IBCEDP",6,0)
 ;
"RTN","IBCEDP",7,0)
PRINT ; entry point to print the report
"RTN","IBCEDP",8,0)
 NEW CRT,IBPAGE,IBSTOP,IBCT,SV1,SV2,SV3,IEN,DATA,NEWHDR
"RTN","IBCEDP",9,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIROUT,DIRUT
"RTN","IBCEDP",10,0)
 I IOST["C-" S CRT=1
"RTN","IBCEDP",11,0)
 E  S CRT=0
"RTN","IBCEDP",12,0)
 ;
"RTN","IBCEDP",13,0)
 S IBPAGE=0,IBSTOP=0,IBCT=0,NEWHDR=0
"RTN","IBCEDP",14,0)
 ;
"RTN","IBCEDP",15,0)
 I '$D(^TMP($J,"IBCEDC")) D HDR W !!?5,"No data found for this report." G PX
"RTN","IBCEDP",16,0)
 I $G(ZTSTOP) D HDR W !!?5,"This report was halted during compilation by TaskManager Request." G PX
"RTN","IBCEDP",17,0)
 ;
"RTN","IBCEDP",18,0)
 D HDR   ; initial header display
"RTN","IBCEDP",19,0)
 S SV1=""
"RTN","IBCEDP",20,0)
 F  S SV1=$O(^TMP($J,"IBCEDC",SV1)) Q:SV1=""!IBSTOP  D SD(SV1) D  Q:IBSTOP
"RTN","IBCEDP",21,0)
 . S SV2=""
"RTN","IBCEDP",22,0)
 . F  S SV2=$O(^TMP($J,"IBCEDC",SV1,SV2)) Q:SV2=""!IBSTOP  D  Q:IBSTOP
"RTN","IBCEDP",23,0)
 .. S SV3=""
"RTN","IBCEDP",24,0)
 .. F  S SV3=$O(^TMP($J,"IBCEDC",SV1,SV2,SV3)) Q:SV3=""!IBSTOP  D  Q:IBSTOP
"RTN","IBCEDP",25,0)
 ... S IEN=0
"RTN","IBCEDP",26,0)
 ... F  S IEN=$O(^TMP($J,"IBCEDC",SV1,SV2,SV3,IEN)) Q:'IEN!IBSTOP  D  Q:IBSTOP
"RTN","IBCEDP",27,0)
 .... S DATA=$G(^TMP($J,"IBCEDC",SV1,SV2,SV3,IEN))
"RTN","IBCEDP",28,0)
 .... D PRT(DATA)
"RTN","IBCEDP",29,0)
 .... Q
"RTN","IBCEDP",30,0)
 ... Q
"RTN","IBCEDP",31,0)
 .. Q
"RTN","IBCEDP",32,0)
 . Q
"RTN","IBCEDP",33,0)
 ;
"RTN","IBCEDP",34,0)
 I IBSTOP G PRINTX
"RTN","IBCEDP",35,0)
 D:$Y>(IOSL-4) HDR G:IBSTOP PRINTX
"RTN","IBCEDP",36,0)
 W !!?5,"Total number of EDI Claims:  ",IBCT
"RTN","IBCEDP",37,0)
 D:$Y>(IOSL-4) HDR G:IBSTOP PRINTX
"RTN","IBCEDP",38,0)
 W !!,"*** End of Report ***"
"RTN","IBCEDP",39,0)
 ;
"RTN","IBCEDP",40,0)
PX ;
"RTN","IBCEDP",41,0)
 I CRT,'$D(ZTQUEUED) S DIR(0)="E" D ^DIR K DIR
"RTN","IBCEDP",42,0)
PRINTX ;
"RTN","IBCEDP",43,0)
 Q
"RTN","IBCEDP",44,0)
 ;
"RTN","IBCEDP",45,0)
PRT(Z) ; print a line on the report
"RTN","IBCEDP",46,0)
 ; Z - data from the scratch global node
"RTN","IBCEDP",47,0)
 N DIV,PAY,ADDR1,TAB  ;JRA IB*2.0*592 Added TAB
"RTN","IBCEDP",48,0)
 D:$Y>(IOSL-3) HDR G:IBSTOP PRTX
"RTN","IBCEDP",49,0)
 S IBCT=IBCT+1
"RTN","IBCEDP",50,0)
 S DIV=$P($G(^DG(40.8,+$P(Z,U,10),0)),U,2)      ; division abbr
"RTN","IBCEDP",51,0)
 S PAY=$P($G(^DIC(36,+$P(Z,U,12),0)),U,1)       ; payer name
"RTN","IBCEDP",52,0)
 S ADDR1=$P($G(^DIC(36,+$P(Z,U,12),.11)),U,1)   ; payer address line 1
"RTN","IBCEDP",53,0)
 ;
"RTN","IBCEDP",54,0)
 W !,$P(Z,U,1)                                            ; claim#
"RTN","IBCEDP",55,0)
 ;JRA IB*2*592 Add Condition for Dental Form Type 7
"RTN","IBCEDP",56,0)
 ;W ?9,$S($P(Z,U,2)=2:1500,1:"UB04")                       ; form type  ;JRA IB*2.0*592 ';'
"RTN","IBCEDP",57,0)
 ;JRA IB*2.0*592 Dental Form Type is 5 chars vs. 4, so set TAB accordingly
"RTN","IBCEDP",58,0)
 S TAB=$S($P(Z,U,2)=7:8,1:9)                              ; Set tab per form type ;JRA IB*2.0*592
"RTN","IBCEDP",59,0)
 W ?TAB,$S($P(Z,U,2)=2:"1500",$P(Z,U,2)=7:"J430D",1:"UB04") ; form type  ;JRA IB*2.0*592
"RTN","IBCEDP",60,0)
 W ?14,$S($P(Z,U,3):"INPT",1:"OUTPT")                     ; inpat/outpat
"RTN","IBCEDP",61,0)
 W ?21,$P(Z,U,4)                                          ; payer sequence
"RTN","IBCEDP",62,0)
 W ?25,$P(Z,U,5)                                          ; EDI status code
"RTN","IBCEDP",63,0)
 W ?29,$E($P(Z,U,13),1,9)                                 ; IB status abbr
"RTN","IBCEDP",64,0)
 W ?39,$E($P(Z,U,11),1,2)                                 ; ar status abbr
"RTN","IBCEDP",65,0)
 W ?44,$$FMTE^XLFDT($P(Z,U,6)\1,"2Z")                     ; last transmit date
"RTN","IBCEDP",66,0)
 W ?55,$J($P(Z,U,7),4)                                    ; age in days
"RTN","IBCEDP",67,0)
 W ?62,$P(Z,U,8)                                          ; batch#
"RTN","IBCEDP",68,0)
 W ?69,$J($FN($P(Z,U,9),"",2),9)                          ; balance due
"RTN","IBCEDP",69,0)
 W ?81,DIV                                                ; division
"RTN","IBCEDP",70,0)
 W ?89,$E(PAY,1,23)                                       ; payer name
"RTN","IBCEDP",71,0)
 W ?114,$E(ADDR1,1,18)                                    ; payer address line 1
"RTN","IBCEDP",72,0)
 ;
"RTN","IBCEDP",73,0)
 S NEWHDR=0  ; toggle new header flag
"RTN","IBCEDP",74,0)
PRTX ;
"RTN","IBCEDP",75,0)
 Q
"RTN","IBCEDP",76,0)
 ;
"RTN","IBCEDP",77,0)
HDR ; report header
"RTN","IBCEDP",78,0)
 ;
"RTN","IBCEDP",79,0)
 ; if screen output and page# already exists, do a page break at the bottom of the screen
"RTN","IBCEDP",80,0)
 I IBPAGE,CRT D  I IBSTOP G HDRX
"RTN","IBCEDP",81,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCEDP",82,0)
 . I 'Y S IBSTOP=1
"RTN","IBCEDP",83,0)
 . Q
"RTN","IBCEDP",84,0)
 ;
"RTN","IBCEDP",85,0)
 ; if screen output OR page# already exists, do a form feed
"RTN","IBCEDP",86,0)
 I IBPAGE!CRT W @IOF
"RTN","IBCEDP",87,0)
 I 'IBPAGE,'CRT W $C(13)   ; first printer page - left margin set
"RTN","IBCEDP",88,0)
 ;
"RTN","IBCEDP",89,0)
 S IBPAGE=IBPAGE+1
"RTN","IBCEDP",90,0)
 ;
"RTN","IBCEDP",91,0)
 W "EDI Claim Status Report",?96,$$FMTE^XLFDT($$NOW^XLFDT),"   Page: ",IBPAGE
"RTN","IBCEDP",92,0)
 W !,"** A claim may appear multiple times if transmitted more than once. **"
"RTN","IBCEDP",93,0)
 W !?3,"Sorted by ",$$SD^IBCEDS1($G(IBSORT1))
"RTN","IBCEDP",94,0)
 I $G(IBSORT2)'="" W ", then by ",$$SD^IBCEDS1(IBSORT2)
"RTN","IBCEDP",95,0)
 I $G(IBSORT3)'="" W ", then by ",$$SD^IBCEDS1(IBSORT3)
"RTN","IBCEDP",96,0)
 ;
"RTN","IBCEDP",97,0)
 ; display column headers
"RTN","IBCEDP",98,0)
 W !?25,"*-- Statuses --*"
"RTN","IBCEDP",99,0)
 W !,"Claim",?9,"Form",?14,"Type",?20,"Seq",?25,"EDI",?31,"IB",?39,"AR",?44,"Trans Dt",?56,"Age",?62,"Batch#",?71,"Bal Due"
"RTN","IBCEDP",100,0)
 W ?81,"Div",?89,"Payer"
"RTN","IBCEDP",101,0)
 ;
"RTN","IBCEDP",102,0)
 N Z S Z="",$P(Z,"-",133)="" W !,Z
"RTN","IBCEDP",103,0)
 ;
"RTN","IBCEDP",104,0)
 S NEWHDR=1    ; flag indicating a new page header was just printed
"RTN","IBCEDP",105,0)
 ;
"RTN","IBCEDP",106,0)
 ; check for a TaskManager stop request
"RTN","IBCEDP",107,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD() D  G HDRX
"RTN","IBCEDP",108,0)
 . S (ZTSTOP,IBSTOP)=1
"RTN","IBCEDP",109,0)
 . W !!!?5,"*** Report Halted by TaskManager Request ***"
"RTN","IBCEDP",110,0)
 . Q
"RTN","IBCEDP",111,0)
 ;
"RTN","IBCEDP",112,0)
HDRX ;
"RTN","IBCEDP",113,0)
 Q
"RTN","IBCEDP",114,0)
 ;
"RTN","IBCEDP",115,0)
SD(SV) ; primary sort value display break.  This procedure is to display a break whenever the primary sort value changes
"RTN","IBCEDP",116,0)
 ; SV - subscript value of the primary sort
"RTN","IBCEDP",117,0)
 I IBSORT1=4!(IBSORT1=6) G SDX  ; don't display a break for current balance or for claim# primary sorts
"RTN","IBCEDP",118,0)
 ;
"RTN","IBCEDP",119,0)
 D:$Y>(IOSL-4) HDR G:IBSTOP SDX
"RTN","IBCEDP",120,0)
 I 'NEWHDR W !     ; an extra line break if a page header was not just printed
"RTN","IBCEDP",121,0)
 I $E(SV)="-",$D(IBSORTOR(IBSORT1)) S SV=$E(SV,2,999)    ; remove leading "-" on descending numerical sorts
"RTN","IBCEDP",122,0)
 ;
"RTN","IBCEDP",123,0)
 I IBSORT1=1 S SV=$$FMTE^XLFDT(SV,"5Z")   ; last transmitted date/time
"RTN","IBCEDP",124,0)
 I IBSORT1=2 D                            ; payer name and address
"RTN","IBCEDP",125,0)
 . N INS,ADDR
"RTN","IBCEDP",126,0)
 . S INS=+$P(SV,U,2)                      ; ins co ien 2nd piece of subscript
"RTN","IBCEDP",127,0)
 . S ADDR=$$INSADD^IBCNSC02(INS)          ; address fields
"RTN","IBCEDP",128,0)
 . S SV=$P(SV,U,1)_"   "_$P(ADDR,U,2)_" "_$P(ADDR,U,6)_" "_$P(ADDR,U,5)
"RTN","IBCEDP",129,0)
 . Q
"RTN","IBCEDP",130,0)
 I IBSORT1=3 S SV=SV_" - "_$$EXTERNAL^DILFD(364,.03,,SV)   ; edi claim status and description
"RTN","IBCEDP",131,0)
 I IBSORT1=5 D                                             ; division
"RTN","IBCEDP",132,0)
 . N DZ,DIVNM
"RTN","IBCEDP",133,0)
 . S DZ=+$O(^DG(40.8,"C",SV,""))                           ; division ien
"RTN","IBCEDP",134,0)
 . S DIVNM=$P($G(^DG(40.8,DZ,0)),U,1)                      ; division name
"RTN","IBCEDP",135,0)
 . S SV=SV_" - "_DIVNM
"RTN","IBCEDP",136,0)
 . Q
"RTN","IBCEDP",137,0)
 I IBSORT1=7 D                                             ; AR status
"RTN","IBCEDP",138,0)
 . N AZ,ANM
"RTN","IBCEDP",139,0)
 . S AZ=+$O(^PRCA(430.3,"C",SV,""))                        ; AR status ien
"RTN","IBCEDP",140,0)
 . S ANM=$P($G(^PRCA(430.3,AZ,0)),U,1)                     ; AR status description
"RTN","IBCEDP",141,0)
 . S SV=SV_" - "_ANM
"RTN","IBCEDP",142,0)
 . Q
"RTN","IBCEDP",143,0)
 I IBSORT1=8 S SV=SV_" Days"
"RTN","IBCEDP",144,0)
 ;
"RTN","IBCEDP",145,0)
 S SV=$$SD^IBCEDS1(IBSORT1)_": "_SV
"RTN","IBCEDP",146,0)
 W !,SV
"RTN","IBCEDP",147,0)
SDX ;
"RTN","IBCEDP",148,0)
 Q
"RTN","IBCEDP",149,0)
 ;
"RTN","IBCEF1")
0^41^B72471671^B71584644
"RTN","IBCEF1",1,0)
IBCEF1 ;ALB/TMP - FORMATTER SPECIFIC BILL FUNCTIONS - CONT ;30-JAN-96
"RTN","IBCEF1",2,0)
 ;;2.0;INTEGRATED BILLING;**52,124,51,137,210,155,349,371,447,547,574,592**;21-MAR-94;Build 58
"RTN","IBCEF1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEF1",4,0)
 ;
"RTN","IBCEF1",5,0)
OCC(IBIFN,REL,TEXT) ;Sets up an arrays of occurrence codes for various cks
"RTN","IBCEF1",6,0)
 ;RETURNS 1^additional data for entry IBXSAVE("OCC",n) if REL or TEXT
"RTN","IBCEF1",7,0)
 ;   parameters have been met or null if conditions not met
"RTN","IBCEF1",8,0)
 ;If no REL or TEXT parameters sent, just extract codes array
"RTN","IBCEF1",9,0)
 ; IBIFN = bill ien
"RTN","IBCEF1",10,0)
 ; REL = 'OCC RELATED TO' value to check for
"RTN","IBCEF1",11,0)
 ; TEXT = text to check for the .01 field of 399.1 entry pointed to
"RTN","IBCEF1",12,0)
 ;         by the occurrence code
"RTN","IBCEF1",13,0)
 N OCC,SORT,ARR,N,DATA,CODE,CT
"RTN","IBCEF1",14,0)
 I '$D(IBXSAVE("OCC")),'$D(IBXSAVE("OCCS")) D
"RTN","IBCEF1",15,0)
 .N IBI,Z,CT1,CT2,Z0 S (IBI,CT1,CT2)=0
"RTN","IBCEF1",16,0)
 .F  S IBI=$O(^DGCR(399,IBIFN,"OC",IBI)) Q:'IBI  S Z=$G(^(IBI,0)) D
"RTN","IBCEF1",17,0)
 ..S Z0=$G(^DGCR(399.1,+Z,0))
"RTN","IBCEF1",18,0)
 ..Q:'$P(Z0,U,10)&'$P(Z0,U,4)  ;Not an occurrence code
"RTN","IBCEF1",19,0)
 ..I $P(Z0,U,10) S CT2=CT2+1,IBXSAVE("OCCS",CT2)=$S($P(Z0,U,4):$P(Z0,U,2)_U_$P(Z,U,2),1:U)_U_$P(Z,U,4)_U_$P(Z0,U)_U_$P(Z0,U,9)_U_$P(Z,U,3)_U_$P(Z,U,2)
"RTN","IBCEF1",20,0)
 ..I '$P(Z0,U,10) S CT1=CT1+1,IBXSAVE("OCC",CT1)=$S($P(Z0,U,4):$P(Z0,U,2)_U_$P(Z,U,2),1:U)_U_U_$P(Z0,U)_U_$P(Z0,U,9)_U_$P(Z,U,3)_U_$P(Z,U,2)
"RTN","IBCEF1",21,0)
 I '$D(IBXSAVE("OCC"))&'$D(IBXSAVE("OCCS")) S IBXSAVE("OCC")="" G OCCQ
"RTN","IBCEF1",22,0)
 ;
"RTN","IBCEF1",23,0)
 ; esg - IB*2*349 - order the occurrence codes
"RTN","IBCEF1",24,0)
 ;       Build the SORT array sorted by the occ code
"RTN","IBCEF1",25,0)
 F ARR="OCC","OCCS" S N=0 F  S N=$O(IBXSAVE(ARR,N)) Q:'N  S DATA=$G(IBXSAVE(ARR,N)) I $P(DATA,U,1)'="" S CODE=" "_$P(DATA,U,1),SORT(ARR,CODE,N)=DATA
"RTN","IBCEF1",26,0)
 ;       Loop thru the SORT array and re-build the IBXSAVE array
"RTN","IBCEF1",27,0)
 F ARR="OCC","OCCS" K IBXSAVE(ARR) S CODE="",CT=0 F  S CODE=$O(SORT(ARR,CODE)) Q:CODE=""  S N=0 F  S N=$O(SORT(ARR,CODE,N)) Q:'N  S CT=CT+1,IBXSAVE(ARR,CT)=SORT(ARR,CODE,N)
"RTN","IBCEF1",28,0)
 ;
"RTN","IBCEF1",29,0)
 I $G(REL)'=""!($G(TEXT)'="") D OCC1("",.OCC,$G(REL),$G(TEXT)) D:'$D(OCC) OCC1("S",.OCC,$G(REL),$G(TEXT))
"RTN","IBCEF1",30,0)
OCCQ Q $G(OCC)
"RTN","IBCEF1",31,0)
 ;
"RTN","IBCEF1",32,0)
OCC1(ARR,OCC,REL,TEXT) ; Search thru local array for parameters met
"RTN","IBCEF1",33,0)
 ; ARR = null to search OCC subscript, "S" to search OCCS subscript
"RTN","IBCEF1",34,0)
 N Z
"RTN","IBCEF1",35,0)
 S ARR="OCC"_ARR,Z=0
"RTN","IBCEF1",36,0)
 F  S Z=$O(IBXSAVE(ARR,Z)) Q:'Z  D
"RTN","IBCEF1",37,0)
 .I $G(REL)'="",$P(IBXSAVE(ARR,Z),U,5)=REL S OCC="1"_$S(REL=2:U_$P(IBXSAVE(ARR,Z),U,6),1:"") Q
"RTN","IBCEF1",38,0)
 .I $G(TEXT)'="",$P(IBXSAVE(ARR,Z),U,4)=TEXT S OCC="1^"_$P(IBXSAVE(ARR,Z),U,7)
"RTN","IBCEF1",39,0)
 Q
"RTN","IBCEF1",40,0)
 ;
"RTN","IBCEF1",41,0)
RX(IBIFN) ; Format billable prescription data for refills for 837
"RTN","IBCEF1",42,0)
 N Z,IBXDATA,CT
"RTN","IBCEF1",43,0)
 I '$D(IBXSAVE("BOX24")) D B24^IBCEF3(.IBXSAVE,IBIFN,1)
"RTN","IBCEF1",44,0)
 S Z="",CT=0
"RTN","IBCEF1",45,0)
 F  S Z=$O(IBXSAVE("BOX24",Z)) Q:Z=""  I $D(IBXSAVE("BOX24",Z,"RX")) S CT=CT+1,IBXDATA(Z)=IBXSAVE("BOX24",Z,"RX")
"RTN","IBCEF1",46,0)
RXQ Q CT
"RTN","IBCEF1",47,0)
 ;
"RTN","IBCEF1",48,0)
OTHPAY(IBIFN,SEQ) ; Return the other insurance payment amount for bill
"RTN","IBCEF1",49,0)
 ;  IBIFN and payer sequence SEQ (1-3)
"RTN","IBCEF1",50,0)
 N AMT,IBIFN1,PRP
"RTN","IBCEF1",51,0)
 S IBIFN1=$P($G(^DGCR(399,IBIFN,"M1")),U,SEQ+4),PRP=0
"RTN","IBCEF1",52,0)
 I IBIFN1 D
"RTN","IBCEF1",53,0)
 . ; IB*2.0*547 if Medicare on bill, make sure you are pulling amt paid from correct sequence
"RTN","IBCEF1",54,0)
 . ; code was leaving out MRA amt on tertiary bills and cloned secondary where MRA claim# does NOT match current claim#
"RTN","IBCEF1",55,0)
 . ;I $$MCRWNR^IBEFUNC(+$G(^DGCR(399,IBIFN,"I"_SEQ))) S AMT=$$MCRPAY^IBCEU0(IBIFN) Q
"RTN","IBCEF1",56,0)
 . I $$MCRWNR^IBEFUNC(+$G(^DGCR(399,IBIFN,"I"_SEQ))) S AMT=$$MCRPAY^IBCEU0(IBIFN1),PRP=1 Q
"RTN","IBCEF1",57,0)
 . S AMT=+$$TPR^PRCAFN(IBIFN1) I AMT S PRP=1 Q  ; A/R amount
"RTN","IBCEF1",58,0)
 . ; IB*2.0*547 - moved this line because it was not getting executed if IBIFN1 was not defined, which it won't be for 
"RTN","IBCEF1",59,0)
 . ; manually created secondary and tertiary claims.  Using new flag PRP to indicate if prior payment already found.
"RTN","IBCEF1",60,0)
 . ; S AMT=+$P($G(^DGCR(399,IBIFN,"U2")),U,SEQ+3) ; amount on bill
"RTN","IBCEF1",61,0)
 S:PRP=0 AMT=+$P($G(^DGCR(399,IBIFN,"U2")),U,SEQ+3) ; amount on bill
"RTN","IBCEF1",62,0)
 Q $G(AMT)
"RTN","IBCEF1",63,0)
 ;
"RTN","IBCEF1",64,0)
OUTPT(IBIFN,IBPRINT) ; Moved for space
"RTN","IBCEF1",65,0)
 D OUTPT^IBCEF11(IBIFN,$G(IBPRINT))
"RTN","IBCEF1",66,0)
 Q
"RTN","IBCEF1",67,0)
 ;
"RTN","IBCEF1",68,0)
OCC92 ;Reformats IBXSAVE("OCC") and IBXSAVE("OCCS") to fit blocks on UB-04
"RTN","IBCEF1",69,0)
 ; Set up IBXSAVE(32-36) arrays
"RTN","IBCEF1",70,0)
 N IBPG,IB32,IB33,IB34,IB35,IB36,IBFL,Z,Z0,PG
"RTN","IBCEF1",71,0)
 S IBPG=0
"RTN","IBCEF1",72,0)
 F Z=32:1:36 K IBFL(Z) S IBFL(Z)=0
"RTN","IBCEF1",73,0)
 M IB32=IBXSAVE("OCC"),IB36=IBXSAVE("OCCS")
"RTN","IBCEF1",74,0)
 S IB32=$O(IB32(""),-1),IB36=$O(IB36(""),-1),PG=1
"RTN","IBCEF1",75,0)
 D OCC^IBCF32
"RTN","IBCEF1",76,0)
 F Z=32:1:36 S Z0="" F  S Z0=$O(IBFL(Z,Z0)) Q:'Z0  S IBXSAVE("OC92",Z,Z0)=$P(IBFL(Z,Z0),U,1,3)
"RTN","IBCEF1",77,0)
 Q
"RTN","IBCEF1",78,0)
 ;
"RTN","IBCEF1",79,0)
BATCH() ; Moved for space IB*2*349
"RTN","IBCEF1",80,0)
 Q $$BATCH^IBCEF11()
"RTN","IBCEF1",81,0)
 ;
"RTN","IBCEF1",82,0)
PROC(T,TYPE) ; Find procedure code, strip '.' Function returns result
"RTN","IBCEF1",83,0)
 ; T = Procedure internal entry #;file reference
"RTN","IBCEF1",84,0)
 ; TYPE = "CPT" for only CPT/HCPCS valid
"RTN","IBCEF1",85,0)
 ;        "ICD" for only ICD9 valid or null for either
"RTN","IBCEF1",86,0)
 N Q,S
"RTN","IBCEF1",87,0)
 S Q="",S="^"_$P($P(T,";",2),"(")
"RTN","IBCEF1",88,0)
 I $G(TYPE)="" D
"RTN","IBCEF1",89,0)
 . I $E(S,2,3)="IC" S Q=$P($$PRCD(T),U) Q
"RTN","IBCEF1",90,0)
 . I T["DIC(81.3" S Q=$$MOD^ICPTMOD(+T,"I") S Q=$S(Q>0:$P(Q,U,4),1:"")
"RTN","IBCEF1",91,0)
 I $G(TYPE)="CPT",$E(S,2,3)="IC" S Q=$$PRCD(T) Q
"RTN","IBCEF1",92,0)
 I $G(TYPE)="ICD",T["ICD0" S Q=$P($$ICD0^IBACSV(+T),U)
"RTN","IBCEF1",93,0)
 Q $TR(Q,".")
"RTN","IBCEF1",94,0)
 ;
"RTN","IBCEF1",95,0)
FACILITY(IBIFN) ;return the Facility (Institution pointer-#4) for a bill
"RTN","IBCEF1",96,0)
 ; the institution of the Bill Division (399,.22) if defined, otherwise the Facility Name (350.9,.02)
"RTN","IBCEF1",97,0)
 ;
"RTN","IBCEF1",98,0)
 N IB0,IBIN S IBIN=0
"RTN","IBCEF1",99,0)
 S IB0=$G(^DGCR(399,+$G(IBIFN),0)) I +$P(IB0,U,22) S IBIN=$$SITE^VASITE(+$P(IB0,U,3),+$P(IB0,U,22))
"RTN","IBCEF1",100,0)
 I IBIN'>0 S IBIN=+$P($G(^IBE(350.9,1,0)),U,2)
"RTN","IBCEF1",101,0)
 Q +IBIN
"RTN","IBCEF1",102,0)
 ;
"RTN","IBCEF1",103,0)
ISRX(IBIFN) ; Function to determine if bill is a prescription refill bill
"RTN","IBCEF1",104,0)
 ; Returns 0 if no Rx on bill or 1 if there is.
"RTN","IBCEF1",105,0)
 ;
"RTN","IBCEF1",106,0)
 N IBRX
"RTN","IBCEF1",107,0)
 I $D(^IBA(362.4,"AIFN"_IBIFN)) S IBRX=1
"RTN","IBCEF1",108,0)
 Q +$G(IBRX)
"RTN","IBCEF1",109,0)
 ;
"RTN","IBCEF1",110,0)
ISPROS(IBIFN) ; Function to determine if bill is a prosthetics bill
"RTN","IBCEF1",111,0)
 ; Returns 0 if no Prosthetics on bill or 1 if there is.
"RTN","IBCEF1",112,0)
 ;
"RTN","IBCEF1",113,0)
 N IBPROS
"RTN","IBCEF1",114,0)
 I $D(^IBA(362.5,"AIFN"_IBIFN)) S IBPROS=1
"RTN","IBCEF1",115,0)
 Q +$G(IBPROS)
"RTN","IBCEF1",116,0)
 ;
"RTN","IBCEF1",117,0)
FINDINS(IBIFN,IBSEQ) ; Returns the internal entry number of the insurance
"RTN","IBCEF1",118,0)
 ;  company for bill ien IBIFN for payer sequence IBSEQ (or current if
"RTN","IBCEF1",119,0)
 ;  IBSEQ is null)
"RTN","IBCEF1",120,0)
 Q $P($G(^DGCR(399,IBIFN,"I"_$$COBN^IBCEF(IBIFN,$G(IBSEQ)))),U)
"RTN","IBCEF1",121,0)
 ;
"RTN","IBCEF1",122,0)
TOB(IBIFN) ; Returns UB-04 type of bill from data in the output formatter
"RTN","IBCEF1",123,0)
 N IBTOB,IBZ1,IBZ2,IBZ3
"RTN","IBCEF1",124,0)
 D F^IBCEF("N-UB-04 LOCATION OF CARE","IBZ1",,IBIFN)
"RTN","IBCEF1",125,0)
 D F^IBCEF("N-UB-04 BILL CLASSIFICATION","IBZ2",,IBIFN)
"RTN","IBCEF1",126,0)
 D F^IBCEF("N-UB-04 TIMEFRAME OF BILL","IBZ3",,IBIFN)
"RTN","IBCEF1",127,0)
 S IBTOB=IBZ1_IBZ2_IBZ3
"RTN","IBCEF1",128,0)
 Q IBTOB
"RTN","IBCEF1",129,0)
 ;
"RTN","IBCEF1",130,0)
PRCD(PRIEN,ALL,EDT) ; Function returns the code that corresponds to the variable
"RTN","IBCEF1",131,0)
 ; pointer data in PRIEN (ien;file)
"RTN","IBCEF1",132,0)
 ; ALL = if ALL=1, returns the entire $$CPT^ICPTCOD for CPT or
"RTN","IBCEF1",133,0)
 ;       ^code^name format for ICD result
"RTN","IBCEF1",134,0)
 ;       or null if lookup fails
"RTN","IBCEF1",135,0)
 ; EDT = Effective date to check (not used if +$G(ALL)=0)
"RTN","IBCEF1",136,0)
 N CODE,IBX
"RTN","IBCEF1",137,0)
 S CODE=""
"RTN","IBCEF1",138,0)
 ;Modified for Code Set Versioning
"RTN","IBCEF1",139,0)
 I PRIEN["ICPT" S IBX=$$CPT^ICPTCOD(+PRIEN,$G(EDT)) G:IBX'>0 PRCDQ S CODE=$S($G(ALL):IBX,1:$P(IBX,U,2))
"RTN","IBCEF1",140,0)
 I PRIEN["ICD0" S IBX=$$ICD0^IBACSV(+PRIEN,$G(EDT)) G:IBX="" PRCDQ S CODE=$S($G(ALL):U_$P(IBX,U)_U_$P(IBX,U,4),1:$P(IBX,U))
"RTN","IBCEF1",141,0)
PRCDQ Q CODE
"RTN","IBCEF1",142,0)
 ;
"RTN","IBCEF1",143,0)
NFT(FT,IBIFN) ; Returns 1 if bill IBIFN is not of form type FT (internal)
"RTN","IBCEF1",144,0)
 ; so the data element should not be required
"RTN","IBCEF1",145,0)
 S FT=$S($$FT^IBCEF(IBIFN)=FT:0,1:1)
"RTN","IBCEF1",146,0)
 Q FT
"RTN","IBCEF1",147,0)
 ;
"RTN","IBCEF1",148,0)
REQ(FT,INP,IBIFN) ; Determine if bill IBIFN is of form type FT and
"RTN","IBCEF1",149,0)
 ; Inpatient (I) or Outpatient (O) status INP [or either if (null)] 
"RTN","IBCEF1",150,0)
 ;
"RTN","IBCEF1",151,0)
 ;Returns 1 if both conditions FT and INP match for the bill
"RTN","IBCEF1",152,0)
 ; or 0 if either of these conditions are not true
"RTN","IBCEF1",153,0)
 ; I $$REQ^IBCEF1(2,"I",1) would mean if bill entry #1 is
"RTN","IBCEF1",154,0)
 ;                         CMS-1500/inpatient the data would be required
"RTN","IBCEF1",155,0)
 ; I '$$REQ^IBCEF1(2,"I",1) would mean if bill entry #1 is anything but
"RTN","IBCEF1",156,0)
 ;                          CMS-1500/inpatient, the data would not be
"RTN","IBCEF1",157,0)
 ;                          required
"RTN","IBCEF1",158,0)
 N Z
"RTN","IBCEF1",159,0)
 S Z=1
"RTN","IBCEF1",160,0)
 S:$$NFT(FT,IBIFN) Z=0 ; Not the form type for requirement
"RTN","IBCEF1",161,0)
 I Z,$G(INP)'="" D
"RTN","IBCEF1",162,0)
 . S Z0=$$INPAT^IBCEF(IBIFN,1),INP=$G(INP)
"RTN","IBCEF1",163,0)
 . S Z=$S(Z0:INP="I",1:INP="O") ;Check if I/O matches required state
"RTN","IBCEF1",164,0)
 Q Z
"RTN","IBCEF1",165,0)
 ;
"RTN","IBCEF1",166,0)
SET1(IBIFN,A,IBZ,IBXDATA,IBXNOREQ) ; Utility to set variables for output
"RTN","IBCEF1",167,0)
 ; formatter for professional EDI 
"RTN","IBCEF1",168,0)
 ; Returns values of A, IBXDATA, IBZ, IBXNOREQ
"RTN","IBCEF1",169,0)
 N Z,CT
"RTN","IBCEF1",170,0)
 S A="^TMP($J,""IBLCT"")"
"RTN","IBCEF1",171,0)
 S (Z,CT)=0
"RTN","IBCEF1",172,0)
 F  S Z=$O(IBXDATA(Z)) Q:'Z  D  ; Don't transmit 0-charges
"RTN","IBCEF1",173,0)
 . ;IB*2.0*447/TAZ - Transmit $0 charges.
"RTN","IBCEF1",174,0)
 . ;I $P(IBXDATA(Z),U,9),$P(IBXDATA(Z),U,8) S CT=CT+1 M IBZ(CT)=IBXDATA(Z)
"RTN","IBCEF1",175,0)
 . ;JWS;IB*2.0*592:US131
"RTN","IBCEF1",176,0)
 . I $P(IBXDATA(Z),U,9) S CT=CT+1 M IBZ(CT)=IBXDATA(Z)
"RTN","IBCEF1",177,0)
 . ;IB*2.0*447
"RTN","IBCEF1",178,0)
 K IBXDATA
"RTN","IBCEF1",179,0)
 ;JWS;IB*2.0*592:US131
"RTN","IBCEF1",180,0)
 I $$FT^IBCEF(IBXIEN)'=7 S IBXNOREQ='$$REQ(2,"O",IBIFN)
"RTN","IBCEF1",181,0)
 Q
"RTN","IBCEF1",182,0)
 ;
"RTN","IBCEF1",183,0)
CIADDR(IBXDATA,IBXSAVE,LINE,FORM) ; Format current ins co address line LINE for FORM
"RTN","IBCEF1",184,0)
 ; FORM = 1 for CMS-1500, 2 for UB-04
"RTN","IBCEF1",185,0)
 ; Called from output formatter - both IBXDATA, IBXSAVE parameters are
"RTN","IBCEF1",186,0)
 ;  passed by reference
"RTN","IBCEF1",187,0)
 ;
"RTN","IBCEF1",188,0)
 K IBXDATA
"RTN","IBCEF1",189,0)
 I $G(FORM)'=1 D
"RTN","IBCEF1",190,0)
 . ;
"RTN","IBCEF1",191,0)
 . ; esg - 11/17/06 - IB*2*349 - UB-04 FL-38 contains the payer name
"RTN","IBCEF1",192,0)
 . ;       and address on 4 lines within this 5 line box.  All 5 lines
"RTN","IBCEF1",193,0)
 . ;       are formatted here into the IBXDATA array.  This is the
"RTN","IBCEF1",194,0)
 . ;       address that shows through the envelope window.
"RTN","IBCEF1",195,0)
 . ;
"RTN","IBCEF1",196,0)
 . ; esg - 9/13/07 - IB*2*371 - Line 1 of this box contains the print
"RTN","IBCEF1",197,0)
 . ;       status (i.e. copy, 2nd notice, 3rd notice, MRA needed).
"RTN","IBCEF1",198,0)
 . ;
"RTN","IBCEF1",199,0)
 . N Z,Z1,LM,Q,ADDR,X,IBPSTAT
"RTN","IBCEF1",200,0)
 . S LM=$P($G(^IBE(350.9,1,1)),U,31)   ; UB address column parameter
"RTN","IBCEF1",201,0)
 . S Z=""
"RTN","IBCEF1",202,0)
 . I LM S $P(Z," ",LM)=""              ; beginning spaces indent
"RTN","IBCEF1",203,0)
 . S ADDR=$G(IBXSAVE("CADR"))          ; address data string
"RTN","IBCEF1",204,0)
 . ;
"RTN","IBCEF1",205,0)
 . D F^IBCEF("N-PRINT BILL SUBMIT STATUS","IBPSTAT",,+$G(IBXIEN))
"RTN","IBCEF1",206,0)
 . S Z1=Z I Z1="" S Z1=" "     ; line 1 can't start in column 1
"RTN","IBCEF1",207,0)
 . S IBXDATA(1)=Z1_$G(IBPSTAT),Q=1             ; line 1 print status
"RTN","IBCEF1",208,0)
 . S Q=Q+1
"RTN","IBCEF1",209,0)
 . S IBXDATA(Q)=Z_$G(IBXSAVE("CADR_NAME"))     ; line 2 payer name
"RTN","IBCEF1",210,0)
 . S X=$P(ADDR,U,1)
"RTN","IBCEF1",211,0)
 . I X'="" S Q=Q+1,IBXDATA(Q)=Z_X              ; address line 1
"RTN","IBCEF1",212,0)
 . S X=$P(ADDR,U,2)
"RTN","IBCEF1",213,0)
 . I X'="" S Q=Q+1,IBXDATA(Q)=Z_X D            ; address line 2
"RTN","IBCEF1",214,0)
 .. S X=$P(ADDR,U,3)
"RTN","IBCEF1",215,0)
 .. I X'="" S IBXDATA(Q)=IBXDATA(Q)_" "_X      ; address line 3
"RTN","IBCEF1",216,0)
 .. Q
"RTN","IBCEF1",217,0)
 . S Q=Q+1                                     ; city,st,zip on last line
"RTN","IBCEF1",218,0)
 . S IBXDATA(Q)=Z_$P(ADDR,U,4)_", "_$$STATE^IBCEFG1($P(ADDR,U,5))_" "_$P(ADDR,U,6)
"RTN","IBCEF1",219,0)
 . KILL IBXSAVE("CADR_NAME"),IBXSAVE("CADR")   ; cleanup
"RTN","IBCEF1",220,0)
 . Q
"RTN","IBCEF1",221,0)
 ;
"RTN","IBCEF1",222,0)
 I $G(FORM)=1 D           ; CMS-1500
"RTN","IBCEF1",223,0)
 . N CT,X,Z
"RTN","IBCEF1",224,0)
 . S:'$D(IBXSAVE("INDENT")) Z="",$P(Z," ",+$P($G(^IBE(350.9,1,1)),U,27)+1)="",IBXSAVE("INDENT")=Z
"RTN","IBCEF1",225,0)
 . S CT=0
"RTN","IBCEF1",226,0)
 . S X=$P(IBXSAVE("CADR"),U) S:X'="" CT=CT+1,IBXDATA(CT)=IBXSAVE("INDENT")_X
"RTN","IBCEF1",227,0)
 . S X=$S($P(IBXSAVE("CADR"),U,2)'="":$P(IBXSAVE("CADR"),U,2),1:"")_$S($P(IBXSAVE("CADR"),U,2)'="":" ",1:"")_$P(IBXSAVE("CADR"),U,3) S:X'="" CT=CT+1,IBXDATA(CT)=IBXSAVE("INDENT")_X
"RTN","IBCEF1",228,0)
 . S CT=CT+1,IBXDATA(CT)=IBXSAVE("INDENT")_$P(IBXSAVE("CADR"),U,4)_", "_$$STATE^IBCEFG1($P(IBXSAVE("CADR"),U,5))_" "_$P(IBXSAVE("CADR"),U,6)
"RTN","IBCEF1",229,0)
 . Q
"RTN","IBCEF1",230,0)
 ;
"RTN","IBCEF1",231,0)
 Q
"RTN","IBCEF1",232,0)
 ;
"RTN","IBCEF1",233,0)
HHLTH(IBIFN,OUT) ; determine if claim is hospice/home health and needs episode of care date  **574**
"RTN","IBCEF1",234,0)
 ; per NUBC, date the episode of care began is needed for all outpatient CMS-1500 Home Health and Hospice claims and
"RTN","IBCEF1",235,0)
 ; UB-04: 012x,022x,032x,034x,081x & 082x claims
"RTN","IBCEF1",236,0)
 ; this string is zero + the Bill Type field from screens 6&7 of enter/edit Bill: 0_field#.24(LOC OF CARE)_.25(BILL CLASS)_.26(TIMEFRAME)
"RTN","IBCEF1",237,0)
 ; required - IBIFN = internal claim#
"RTN","IBCEF1",238,0)
 ; optional - OUT = optional flag to pass to INPAT^IBCEF
"RTN","IBCEF1",239,0)
 ; returns a 1 if date should be included on bill and a 0 if it should NOT be included on bill
"RTN","IBCEF1",240,0)
 ;
"RTN","IBCEF1",241,0)
 N IB0,IBL,IBC,IBT
"RTN","IBCEF1",242,0)
 Q:$G(IBIFN)="" 0
"RTN","IBCEF1",243,0)
 ; all inpatient claims include date
"RTN","IBCEF1",244,0)
 I $$INPAT^IBCEF(IBIFN,+$G(OUT))'=0 Q 1
"RTN","IBCEF1",245,0)
 S IB0=$G(^DGCR(399,IBIFN,0)),IBL=$P(IB0,U,24)
"RTN","IBCEF1",246,0)
 ; Per Lisa Duncan, all Home health must have date, not just 032x & 034x
"RTN","IBCEF1",247,0)
 Q:IBL=3 1
"RTN","IBCEF1",248,0)
 ; not home health or hospice if LOC OF CARE = 7
"RTN","IBCEF1",249,0)
 Q:IBL=7 0
"RTN","IBCEF1",250,0)
 S IBC=$P($G(^DGCR(399.1,+$P(IB0,U,25),0)),U,2)
"RTN","IBCEF1",251,0)
 ; not home health or hospice if BILL CLASS is 3 or a number greater than 4
"RTN","IBCEF1",252,0)
 Q:IBC>4 0
"RTN","IBCEF1",253,0)
 Q:IBC=3 0
"RTN","IBCEF1",254,0)
 S IBT=IBL_IBC
"RTN","IBCEF1",255,0)
 ; any claim where the location of care_bill classification combo is 12,22,32,34,81 or 82 must have date
"RTN","IBCEF1",256,0)
 Q:"^12^22^32^34^81^82^"[IBT 1
"RTN","IBCEF1",257,0)
 Q 0
"RTN","IBCEF11")
0^42^B92999922^B86419290
"RTN","IBCEF11",1,0)
IBCEF11 ;ALB/TMP - FORMATTER SPECIFIC BILL FUNCTIONS - CONT ;30-JAN-96
"RTN","IBCEF11",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,155,309,335,348,349,371,432,447,473,516,577,592**;21-MAR-94;Build 58
"RTN","IBCEF11",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEF11",4,0)
 ;
"RTN","IBCEF11",5,0)
BOX24D(A,IB) ; Returns the lines for boxes 19-24 of the CMS-1500 display
"RTN","IBCEF11",6,0)
 ; IB = flag is 1 if only box 24 is needed
"RTN","IBCEF11",7,0)
 Q $S('$G(IB):"36",1:"44")_"^55"
"RTN","IBCEF11",8,0)
 ;
"RTN","IBCEF11",9,0)
RCBOX() ; Returns the lines for revenue code boxes of the UB-04 display
"RTN","IBCEF11",10,0)
 Q "19^41"
"RTN","IBCEF11",11,0)
 ;
"RTN","IBCEF11",12,0)
OUTPT(IBIFN,IBPRINT) ; Returns an array of service line data from
"RTN","IBCEF11",13,0)
 ;                 CMS-1500 box 24.  Output is in IBXDATA(n)
"RTN","IBCEF11",14,0)
 ; IBPRINT = print flag  1: return print fields
"RTN","IBCEF11",15,0)
 ;                       0: return EDI fields
"RTN","IBCEF11",16,0)
 ; Uses diagnosis array ^TMP("IBXSAVE",$J,"DX",IBIFN,DIAG CODE)=SEQ #
"RTN","IBCEF11",17,0)
 ;   if it already exists. If not, it builds it from N-DIAGNOSES element
"RTN","IBCEF11",18,0)
 ;
"RTN","IBCEF11",19,0)
 ; For EDI call: Returns IBXDATA(n)=
"RTN","IBCEF11",20,0)
 ;   begin date(YYYYMMDD) ^ end date(YYYYMMDD) ^ pos ^ tos ^
"RTN","IBCEF11",21,0)
 ;   proc code/revenue code - if no procedure (not the pointers) ^
"RTN","IBCEF11",22,0)
 ;   type of code ^ dx pointer(s ) ^ unit charge ^ units ^ modifiers separated by ;
"RTN","IBCEF11",23,0)
 ;   ^ purchased charge amount ^ anesthesia minutes ^ emergency indicator ^
"RTN","IBCEF11",24,0)
 ;   lab-type service flag ^ NDC ^ Units/Quantity ^ Unit/Basis of Measurement (vd/IB*2*577)
"RTN","IBCEF11",25,0)
 ;
"RTN","IBCEF11",26,0)
 ;   Also Returns IBXDATA(IBI,"COB",COB,m) with COB data for each line
"RTN","IBCEF11",27,0)
 ;      item found in an accepted EOB for the bill and = the reference
"RTN","IBCEF11",28,0)
 ;      line in the first '^' piece followed by the '0' node data of file
"RTN","IBCEF11",29,0)
 ;      361.115 (LINE LEVEL ADJUSTMENTS)
"RTN","IBCEF11",30,0)
 ;       COB = COB sequence # of adjustment's ins co, m = seq #
"RTN","IBCEF11",31,0)
 ;         -- AND --
"RTN","IBCEF11",32,0)
 ;    IBXDATA(IBI,"COB",COB,m,z,p)=
"RTN","IBCEF11",33,0)
 ;           the data on the '0' node for each subordinate entry of file
"RTN","IBCEF11",34,0)
 ;           361.11511 (REASONS) (Only first 3 pieces for 837 output)
"RTN","IBCEF11",35,0)
 ;       z = group code, sometimes preceeded by a space   p = seq #
"RTN","IBCEF11",36,0)
 ;
"RTN","IBCEF11",37,0)
 ; For Print call: Returns begin date(DDMMYYYY)^end date(DDMMYYYY) or
"RTN","IBCEF11",38,0)
 ;   null if equal to begin date^pos^tos^bedsection name(if no procedure)
"RTN","IBCEF11",39,0)
 ;   or procedure code(not the pointer)^ ... refer to EDI call results
"RTN","IBCEF11",40,0)
 ;   Also, IBXDATA(n,"TEXT")=the text to print on first line of box 24,
"RTN","IBCEF11",41,0)
 ;   If no procedure code, returns IBXDATA(n,"A")=rev code abbrev
"RTN","IBCEF11",42,0)
 ;
"RTN","IBCEF11",43,0)
 ;  For both calls, returns IBXDATA(n,item type,item ptr)=""
"RTN","IBCEF11",44,0)
 ;      -- AND --
"RTN","IBCEF11",45,0)
 ;   IBXDATA(n,"RX")=RX#^drug name^NDC^refill #^(re)fill date^qty^days
"RTN","IBCEF11",46,0)
 ;                   ^chrge^ien of file 362.4^NDC format
"RTN","IBCEF11",47,0)
 ;           If line references a prescription
"RTN","IBCEF11",48,0)
 ;      -- AND --
"RTN","IBCEF11",49,0)
 ;   If no revenue code for a prescription, returns IBXDATA(n,"ARX")=""
"RTN","IBCEF11",50,0)
 ;      -- AND --
"RTN","IBCEF11",51,0)
 ;   IBXDATA(n,"AUX")='AUX' node of the procedure entry
"RTN","IBCEF11",52,0)
 ;
"RTN","IBCEF11",53,0)
 ; Also returns IBXDATA(n,"CPLNK") = soft link to corresponding entry in PROCEDURES multiple of file 399
"RTN","IBCEF11",54,0)
 ;
"RTN","IBCEF11",55,0)
 N IB,IBI,IBJ,IBFLD,IBDXI,IBXIEN,Z,IBXTRA,IBRX,IBRX0,IBRX1,Z0,Z1
"RTN","IBCEF11",56,0)
 ;
"RTN","IBCEF11",57,0)
 K ^TMP($J,"IBITEM")
"RTN","IBCEF11",58,0)
 S ^TMP($J,"IBITEM")=""
"RTN","IBCEF11",59,0)
 ; Build diagnosis array if not already built
"RTN","IBCEF11",60,0)
 I $O(^TMP("IBXSAVE",$J,"DX",IBIFN,""))="",$O(^IBA(362.3,"AIFN"_IBIFN,"")) D
"RTN","IBCEF11",61,0)
 .N Z,IBXDATA D F^IBCEF("N-DIAGNOSES",,,IBIFN)
"RTN","IBCEF11",62,0)
 .S Z="" F  S Z=$O(IBXDATA(Z)) K:$O(IBXDATA(0))=""&(Z="") IBXDATA Q:Z=""  S:$P(IBXDATA(Z),U,2) ^TMP("IBXSAVE",$J,"DX",IBIFN,$P(IBXDATA(Z),U,2))=Z
"RTN","IBCEF11",63,0)
 ;
"RTN","IBCEF11",64,0)
 S IB(0)=$G(^DGCR(399,IBIFN,0)),IB("U")=$G(^("U")),IB("U1")=$G(^("U1"))
"RTN","IBCEF11",65,0)
 S IBI="" F  S IBI=$O(^TMP("IBXSAVE",$J,"DX",IBIFN,IBI)) Q:IBI=""  S IBDXI(IBI)=^(IBI)
"RTN","IBCEF11",66,0)
 I '$G(IBPRINT) D RVCE^IBCF23(IBIFN,IBIFN)
"RTN","IBCEF11",67,0)
 I $G(IBPRINT) D RVCE^IBCF23(,IBIFN)
"RTN","IBCEF11",68,0)
 ; Returns IBFLD(24) = begin date ^ end date ^ pos ^ tos ^
"RTN","IBCEF11",69,0)
 ;     proc/bedsection/revenue code ^ dx pointer ^ unit charge ^
"RTN","IBCEF11",70,0)
 ;     units ^ modifiers ^ purchased charge amount ^ anesthesia minutes ^
"RTN","IBCEF11",71,0)
 ;     emergency indicator ^ soft pointer to PROCEDURES multiple in file 399 ^
"RTN","IBCEF11",72,0)
 ;     NDC ^ Units
"RTN","IBCEF11",73,0)
 ;         IBFLD(24,n,type,item)=""
"RTN","IBCEF11",74,0)
 ;         IBFLD(24,n_"A") = revenue code abbreviation if no procedure
"RTN","IBCEF11",75,0)
 ;         IBFLD(24,n,"AUX") = 'AUX' node of line item 
"RTN","IBCEF11",76,0)
 ;         IBFLD(24,n,"RX") = soft pointer to file 362.4 from 'item' fld
"RTN","IBCEF11",77,0)
 ;                            (can be null)
"RTN","IBCEF11",78,0)
 ;
"RTN","IBCEF11",79,0)
 D SET^IBCSC5A(IBIFN,.IBRX) ;prescriptions
"RTN","IBCEF11",80,0)
 ; IBRX1(ien 362.4)=RX#^drug ien^NDC^refil #^(re)fil date^qty^days^chrge
"RTN","IBCEF11",81,0)
 I IBRX S IBRX="" F  S IBRX=$O(IBRX(IBRX)) Q:IBRX=""  S IBRX0=0 F  S IBRX0=$O(IBRX(IBRX,IBRX0)) Q:'IBRX0  D
"RTN","IBCEF11",82,0)
 . N IBRXH
"RTN","IBCEF11",83,0)
 . S IBRXH=IBRX(IBRX,IBRX0)
"RTN","IBCEF11",84,0)
 . ; **IB*2.0*432** added _U_$P(IBRXH,U,9) (Rx Date) to Output Formatter
"RTN","IBCEF11",85,0)
 . S IBRX1(+IBRXH)=IBRX_U_$P(IBRXH,U,2)_U_$P(IBRXH,U,5)_U_$P(IBRXH,U,7)_U_IBRX0_U_$P(IBRXH,U,4)_U_$P(IBRXH,U,3)_U_$P(IBRXH,U,6)_U_+IBRXH_U_$P(IBRXH,U,8)_U_$P(IBRXH,U,9)
"RTN","IBCEF11",86,0)
 K IBRX
"RTN","IBCEF11",87,0)
 ;
"RTN","IBCEF11",88,0)
 ; for EDI, remove any $0 line items from the IBFLD array before 
"RTN","IBCEF11",89,0)
 ; dropping down into the next loop (IB*2*371)
"RTN","IBCEF11",90,0)
 ; Start IB*2.0*447 BI - Code removed to allow 0 dollars to print.
"RTN","IBCEF11",91,0)
 ;I '$G(IBPRINT) D
"RTN","IBCEF11",92,0)
 ;. NEW IBZ,IBI,Z
"RTN","IBCEF11",93,0)
 ;. M IBZ=IBFLD K IBFLD
"RTN","IBCEF11",94,0)
 ;. S (IBI,Z)=0
"RTN","IBCEF11",95,0)
 ;. F  S IBI=$O(IBZ(24,IBI)) Q:IBI'=+IBI  D
"RTN","IBCEF11",96,0)
 ;.. I $P(IBZ(24,IBI),U,7)*$P(IBZ(24,IBI),U,8)'>0 Q
"RTN","IBCEF11",97,0)
 ;.. S Z=Z+1
"RTN","IBCEF11",98,0)
 ;.. M IBFLD(24,Z)=IBZ(24,IBI)
"RTN","IBCEF11",99,0)
 ;.. S IBFLD(24)=Z
"RTN","IBCEF11",100,0)
 ;.. Q
"RTN","IBCEF11",101,0)
 ;. Q
"RTN","IBCEF11",102,0)
 ; End IB*2.0*447 BI
"RTN","IBCEF11",103,0)
 ;
"RTN","IBCEF11",104,0)
 S IBI=0
"RTN","IBCEF11",105,0)
 F  S IBI=$O(IBFLD(24,IBI)) Q:IBI'=+IBI  D
"RTN","IBCEF11",106,0)
 . S IBRX1=0
"RTN","IBCEF11",107,0)
 . S IBXDATA(IBI)=$P(IBFLD(24,IBI),U)_U_$P(IBFLD(24,IBI),U,$S($P(IBFLD(24,IBI),U,2)=""&'$G(IBPRINT):1,1:2))
"RTN","IBCEF11",108,0)
 . S $P(IBXDATA(IBI),U,3,5)=$P(IBFLD(24,IBI),U,3,5)
"RTN","IBCEF11",109,0)
 . S $P(IBXDATA(IBI),U,6)=$S($D(IBFLD(24,IBI_"X")):"CJ",1:"HC")
"RTN","IBCEF11",110,0)
 . S $P(IBXDATA(IBI),U,7,13)=$P(IBFLD(24,IBI),U,6,12)
"RTN","IBCEF11",111,0)
 . S $P(IBXDATA(IBI),U,14)=+$$ISLAB(IBXDATA(IBI))
"RTN","IBCEF11",112,0)
 . ; MRD;IB*2.0*516 - Added NDC and Units to line level of claim,
"RTN","IBCEF11",113,0)
 . ; pieces 14 & 15 of IBFLD, pieces 15 & 16 of IBXDATA. Print
"RTN","IBCEF11",114,0)
 . ; in Box 24 by setting in IBXDATA(IBI,"TEXT").
"RTN","IBCEF11",115,0)
 . ;S $P(IBXDATA(IBI),U,15,16)=$P(IBFLD(24,IBI),U,14,15)
"RTN","IBCEF11",116,0)
 . ;I $P(IBFLD(24,IBI),U,14)'="" S IBXDATA(IBI,"TEXT")="N4"_$P(IBFLD(24,IBI),U,14)_" UN"_$P(IBFLD(24,IBI),U,15)
"RTN","IBCEF11",117,0)
 . ; vd/IB*2*577 - Added Unit/Basis of Measurement to line level of claim,
"RTN","IBCEF11",118,0)
 . ; piece 16 of IBFLD, piece 17 of IBXDATA.
"RTN","IBCEF11",119,0)
 . ; Print in Box 24 by setting in IBXDATA(IBI,"TEXT").
"RTN","IBCEF11",120,0)
 . S $P(IBXDATA(IBI),U,15,17)=$P(IBFLD(24,IBI),U,14,16)
"RTN","IBCEF11",121,0)
 . I $P(IBFLD(24,IBI),U,14)'="" S IBXDATA(IBI,"TEXT")="N4"_$P(IBFLD(24,IBI),U,14)_" "_$P(IBFLD(24,IBI),U,16)_$P(IBFLD(24,IBI),U,15)
"RTN","IBCEF11",122,0)
 . ;
"RTN","IBCEF11",123,0)
 . I $D(IBFLD(24,IBI,"RX")) D  ;Rx
"RTN","IBCEF11",124,0)
 .. S IBRX1=1
"RTN","IBCEF11",125,0)
 .. I $P($G(IBFLD(24,IBI,"AUX")),U,8)'="" S $P(IBFLD(24,IBI,"AUX"),U,8)="",$P(IBFLD(24,IBI,"AUX"),U,9)=""  ;No free text allowed for rx's
"RTN","IBCEF11",126,0)
 .. I $D(IBRX1(+IBFLD(24,IBI,"RX"))) D  Q  ;Soft link exists
"RTN","IBCEF11",127,0)
 ...D ZERO^IBRXUTL(+$P(IBRX1(+IBFLD(24,IBI,"RX")),U,2))
"RTN","IBCEF11",128,0)
 ... S IBXDATA(IBI,"RX")=IBRX1(+IBFLD(24,IBI,"RX")),$P(IBXDATA(IBI,"RX"),U,2)=$E($G(^TMP($J,"IBDRUG",+$P(IBRX1(+IBFLD(24,IBI,"RX")),U,2),.01)),1,30)
"RTN","IBCEF11",129,0)
 ... K IBRX1(+IBFLD(24,IBI,"RX"))
"RTN","IBCEF11",130,0)
 ... ; No soft link - must find the first Rx with the same charge
"RTN","IBCEF11",131,0)
 .. S IBRX="" F  S IBRX=$O(IBRX1(IBRX)) Q:'IBRX  I +$P(IBRX1(IBRX),U,8)=+$P(IBXDATA(IBI),U,8) D  Q
"RTN","IBCEF11",132,0)
 ... D ZERO^IBRXUTL(+$P(IBRX1(IBRX),U,2))
"RTN","IBCEF11",133,0)
 ... S IBXDATA(IBI,"RX")=IBRX1(IBRX),$P(IBXDATA(IBI,"RX"),U,2)=$E($G(^TMP($J,"IBDRUG",+$P(IBRX1(IBRX),U,2),.01)),1,30) K IBRX1(IBRX) Q
"RTN","IBCEF11",134,0)
 ... Q
"RTN","IBCEF11",135,0)
 .. Q
"RTN","IBCEF11",136,0)
 . ;
"RTN","IBCEF11",137,0)
 . ; MRD;IB*2.0*516 - If additional service line comments to appear in
"RTN","IBCEF11",138,0)
 . ; Box 24, concatenate to front if something (NDC) is already there.
"RTN","IBCEF11",139,0)
 . I $G(IBFLD(24,IBI,"AUX"))'="" D
"RTN","IBCEF11",140,0)
 .. I $G(IBPRINT),$P(IBFLD(24,IBI,"AUX"),U,8)'="" D
"RTN","IBCEF11",141,0)
 ... I $G(IBXDATA(IBI,"TEXT"))'="" S IBXDATA(IBI,"TEXT")=$E($P(IBFLD(24,IBI,"AUX"),U,8)_" "_IBXDATA(IBI,"TEXT"),1,59)
"RTN","IBCEF11",142,0)
 ... E  S IBXDATA(IBI,"TEXT")=$P(IBFLD(24,IBI,"AUX"),U,8)
"RTN","IBCEF11",143,0)
 ... S $P(IBFLD(24,IBI,"AUX"),U,8)=""
"RTN","IBCEF11",144,0)
 ... Q
"RTN","IBCEF11",145,0)
 .. S IBXDATA(IBI,"AUX")=IBFLD(24,IBI,"AUX")
"RTN","IBCEF11",146,0)
 .. Q
"RTN","IBCEF11",147,0)
 . ;
"RTN","IBCEF11",148,0)
 . ;JWS;IB*2.0*592:US131
"RTN","IBCEF11",149,0)
 . I $G(IBFLD(24,IBI,"DEN"))'="" S IBXDATA(IBI,"DEN")=IBFLD(24,IBI,"DEN")
"RTN","IBCEF11",150,0)
 . I $G(IBFLD(24,IBI,"DEND"))'="" S IBXDATA(IBI,"DEND")=$P(IBFLD(24,IBI,"DEND"),"^",4)
"RTN","IBCEF11",151,0)
 . I $O(IBFLD(24,IBI,"DEN1",0)) M IBXDATA(IBI,"DEN1")=IBFLD(24,IBI,"DEN1")
"RTN","IBCEF11",152,0)
 . ;end - ;JWS;IB*2.0*592:US131
"RTN","IBCEF11",153,0)
 . I $G(IBPRINT) D
"RTN","IBCEF11",154,0)
 .. ; START IB*2.0*447 BI ZERO DOLLAR CHANGES
"RTN","IBCEF11",155,0)
 .. ; I '$P(IBXDATA(IBI),U,8),'$G(IBXDATA(IBI,"RX")) D  Q
"RTN","IBCEF11",156,0)
 .. I $P(IBXDATA(IBI),U,8)="",'$G(IBXDATA(IBI,"RX")) D  Q
"RTN","IBCEF11",157,0)
 ... ; END IB*2.0*447 BI ZERO DOLLAR CHANGES
"RTN","IBCEF11",158,0)
 ... I $G(IBNOSHOW) Q    ; don't show errors/warnings
"RTN","IBCEF11",159,0)
 ... S IBXDATA(IBI,"TEXT")="Warning:** REV CODE UNITS < #PROCEDURES, THEY MUST BE ="
"RTN","IBCEF11",160,0)
 ... I $D(IBXDATA(IBI,"AUX")) S $P(IBXDATA(IBI,"AUX"),U,9)=""
"RTN","IBCEF11",161,0)
 ... Q
"RTN","IBCEF11",162,0)
 .. ;
"RTN","IBCEF11",163,0)
 .. I $G(IBFLD(24,IBI_"A"))'="" D  Q
"RTN","IBCEF11",164,0)
 ... S IBXDATA(IBI,"A")=IBFLD(24,IBI_"A")
"RTN","IBCEF11",165,0)
 ... I $G(IBNOSHOW) Q    ; don't show errors/warnings
"RTN","IBCEF11",166,0)
 ... S IBXDATA(IBI,"TEXT")="Warning:** REV CODE UNITS > #PROCEDURES, THEY MUST BE=: "_IBFLD(24,IBI_"A")
"RTN","IBCEF11",167,0)
 ... I $D(IBXDATA(IBI,"AUX")) S $P(IBXDATA(IBI,"AUX"),U,9)=""
"RTN","IBCEF11",168,0)
 ... Q
"RTN","IBCEF11",169,0)
 .. ;
"RTN","IBCEF11",170,0)
 .. S IBRX=$G(IBXDATA(IBI,"RX"))
"RTN","IBCEF11",171,0)
 .. I IBRX'="" D  ;Format Rx detail
"RTN","IBCEF11",172,0)
 ... N Z
"RTN","IBCEF11",173,0)
 ... S Z=$P(IBRX,U)
"RTN","IBCEF11",174,0)
 ... S Z=$S(Z'="":"Rx#"_Z_" ",1:"RX: ")
"RTN","IBCEF11",175,0)
 ... S IBXDATA(IBI,"TEXT")=Z_$S($P(IBRX,U,3)'="":"NDC: "_$P(IBRX,U,3),1:"NOC: "_$P(IBRX,U,2))_" Qty: "_$P(IBRX,U,6)_" Days: "_$P(IBRX,U,7)
"RTN","IBCEF11",176,0)
 ... S $P(IBXDATA(IBI,"AUX"),U,9)="N4"   ; service line comment qualifier for RX's
"RTN","IBCEF11",177,0)
 ... Q
"RTN","IBCEF11",178,0)
 .. Q
"RTN","IBCEF11",179,0)
 . S IBXDATA(IBI,"CPLNK")=$P(IBFLD(24,IBI),U,13)
"RTN","IBCEF11",180,0)
 . I '$G(IBPRINT) D COBLINE^IBCEU6(IBIFN,IBI,.IBXDATA,,.IBXTRA)
"RTN","IBCEF11",181,0)
 . Q
"RTN","IBCEF11",182,0)
 ;
"RTN","IBCEF11",183,0)
 I $G(IBPRINT) D
"RTN","IBCEF11",184,0)
 . S IBRX=0 F  S IBRX=$O(IBRX1(IBRX)) Q:'IBRX  D
"RTN","IBCEF11",185,0)
 .. S IBI=+$O(IBXDATA(""),-1)+1
"RTN","IBCEF11",186,0)
 .. S IBXDATA(IBI)=$$DATE($P(IBRX1(IBRX),U,5))
"RTN","IBCEF11",187,0)
 .. S IBXDATA(IBI,"TEXT")="**** ERROR - NO PROC LINK TO REV CODE FOR DRUG: RX#: "_$P(IBRX1(IBRX),U)_"  NDC #: "_$P(IBRX1(IBRX),U,3)
"RTN","IBCEF11",188,0)
 .. I $D(IBXDATA(IBI,"AUX")) S $P(IBXDATA(IBI,"AUX"),U,9)=""
"RTN","IBCEF11",189,0)
 .. S IBXDATA(IBI,"ARX")=""
"RTN","IBCEF11",190,0)
 .. D ZERO^IBRXUTL(+$P(IBRX1(IBRX),U,2))
"RTN","IBCEF11",191,0)
 .. S IBXDATA(IBI,"RX")=IBRX1(IBRX),$P(IBXDATA(IBI,"RX"),U,2)=$E($G(^TMP($J,"IBDRUG",+$P(IBRX1(IBRX),U,2),.01)),1,30) K IBRX1(IBRX)
"RTN","IBCEF11",192,0)
 .. Q
"RTN","IBCEF11",193,0)
 . Q
"RTN","IBCEF11",194,0)
 ;
"RTN","IBCEF11",195,0)
 I '$G(IBPRINT),$D(IBXTRA) D COMBO^IBCEU2(.IBXDATA,.IBXTRA,0) ;Handle bundled/unbundled lines
"RTN","IBCEF11",196,0)
 K ^TMP($J,"IBDRUG")
"RTN","IBCEF11",197,0)
 Q
"RTN","IBCEF11",198,0)
 ;
"RTN","IBCEF11",199,0)
ISLAB(LDATA) ; Returns 0/1 if line item data indicates the item is a lab (1)
"RTN","IBCEF11",200,0)
 ; 'LAB' is defined here as type of service = 5
"RTN","IBCEF11",201,0)
 Q $E($P(LDATA,U,4))="5"
"RTN","IBCEF11",202,0)
 ;
"RTN","IBCEF11",203,0)
FMT(DATA,DLEN,FLEN) ; Returns a string in DATA with a max length of DLEN
"RTN","IBCEF11",204,0)
 ;  and a field length of FLEN
"RTN","IBCEF11",205,0)
 Q $E($E(DATA,1,DLEN)_$J("",FLEN),1,FLEN)
"RTN","IBCEF11",206,0)
 ;
"RTN","IBCEF11",207,0)
DATE(X,DEL) ;  Returns FM date in X as MMxDDxYYYY  where x=DEL
"RTN","IBCEF11",208,0)
 S DEL=$G(DEL)
"RTN","IBCEF11",209,0)
 S X=$$DATE^IBCF2(X,1,1)
"RTN","IBCEF11",210,0)
 I X'="" S X=$E(X,1,2)_DEL_$E(X,3,4)_DEL_$E(X,5,8)
"RTN","IBCEF11",211,0)
 Q X
"RTN","IBCEF11",212,0)
 ;
"RTN","IBCEF11",213,0)
BATCH() ; Sets up record for and stores/returns the next batch number
"RTN","IBCEF11",214,0)
 N NUM,FAC,DO,DD,DLAYGO,DIC,X,Y
"RTN","IBCEF11",215,0)
 ;Keep latest batch number for view/print edi bill extract data option
"RTN","IBCEF11",216,0)
 I $D(IBVNUM) S NUM=IBVNUM G BATCHQ
"RTN","IBCEF11",217,0)
 ;Check for batch resubmit - if yes, use same number as original batch
"RTN","IBCEF11",218,0)
 I $P($G(^TMP("IBRESUBMIT",$J)),U,3)=1 S NUM=$P(^($J),U) G BATCHQ
"RTN","IBCEF11",219,0)
 L +^IBA(364.1,0):5 I '$T Q 0
"RTN","IBCEF11",220,0)
 S FAC=+$P($$SITE^VASITE(),U,3),NUM=$O(^IBA(364.1,"B",""),-1)
"RTN","IBCEF11",221,0)
 I $D(^IBA(364.1,+NUM,0)),$P(^(0),U,2)="" F  D  Q:'NUM!($P($G(^IBA(364.1,+NUM,0)),U,2)'="")
"RTN","IBCEF11",222,0)
 . I $D(^IBA(364.1,NUM,0)) S DA=NUM,DIK="^IBA(364.1," D ^DIK
"RTN","IBCEF11",223,0)
 . S NUM=$O(^IBA(364.1,"B",""),-1)
"RTN","IBCEF11",224,0)
 F  S NUM=$S($P(NUM,FAC,2)'="":NUM+1,1:FAC_"0000001") Q:'$D(^IBA(364.1,"B",NUM))
"RTN","IBCEF11",225,0)
 K DO,DD S DIC="^IBA(364.1,",DLAYGO=364.1,DIC(0)="L",X=NUM D FILE^DICN K DD,DO I Y'>0 S NUM=0
"RTN","IBCEF11",226,0)
 L -^IBA(364.1,0)
"RTN","IBCEF11",227,0)
BATCHQ Q NUM
"RTN","IBCEF11",228,0)
 ;
"RTN","IBCEF11",229,0)
GETLDAT(IBXIEN) ; Extract data for 837 transmission LDAT record
"RTN","IBCEF11",230,0)
 ; IBXIEN - ien in file 399
"RTN","IBCEF11",231,0)
 ; Sets up IBXSAVE("LDAT",n) array:
"RTN","IBCEF11",232,0)
 ; Attachment report type ^ Attachment report transmission code ^ Attachment control number ^ 
"RTN","IBCEF11",233,0)
 ; OB Anesthesia Additional Units ^ Purchase Service Provider ID ^ Purchase Service Amount ^
"RTN","IBCEF11",234,0)
 N CPIEN,FTYPE,IBXDATA,IDS,IBIDS,NODE1,PSAMNT,PSPID,Z,PCE1,LINE
"RTN","IBCEF11",235,0)
 I '+$G(IBXIEN) Q
"RTN","IBCEF11",236,0)
 K IBXSAVE("LDAT")
"RTN","IBCEF11",237,0)
 S FTYPE=$$FT^IBCEF(IBXIEN)
"RTN","IBCEF11",238,0)
 ;JWS;IB*2.0*592; added Dental form
"RTN","IBCEF11",239,0)
 I FTYPE=2!(FTYPE=7) D OUTPT(IBXIEN,0)
"RTN","IBCEF11",240,0)
 I FTYPE=3 D HOS^IBCEF2(IBXIEN)
"RTN","IBCEF11",241,0)
 D ALLIDS^IBCEFP(IBXIEN,.IDS,1)
"RTN","IBCEF11",242,0)
 S (PSPID,PSAMNT)=""
"RTN","IBCEF11",243,0)
 ; IB*2.0*473/TAZ - Convert PROVIDER code to function call to PSID^IBCEFP
"RTN","IBCEF11",244,0)
 I $$SUB1OK^IBCEP8A(IBXIEN),(FTYPE=2) D
"RTN","IBCEF11",245,0)
 . D PSID^IBCEFP(IBXIEN,.IDS,.IBIDS)
"RTN","IBCEF11",246,0)
 . S PSPID=$G(IBIDS(0)) I PSPID="" S PSPID=$P($G(IBIDS(1)),U,1)
"RTN","IBCEF11",247,0)
 ;IB*2.0*473/TAZ - END
"RTN","IBCEF11",248,0)
 S Z=0 F  S Z=$O(IBXDATA(Z)) Q:'Z  D
"RTN","IBCEF11",249,0)
 . S CPIEN=+$G(IBXDATA(Z,"CPLNK")) ;I 'CPIEN Q
"RTN","IBCEF11",250,0)
 . I FTYPE=2,$$SUB1OK^IBCEP8A(IBXIEN) S PSAMNT=$$DOLLAR^IBCEFG1($P($G(IBXDATA(Z)),U,11))
"RTN","IBCEF11",251,0)
 . S (PCE1,NODE1)=""
"RTN","IBCEF11",252,0)
 . I CPIEN D
"RTN","IBCEF11",253,0)
 . . S NODE1=$G(^DGCR(399,IBXIEN,"CP",CPIEN,1))
"RTN","IBCEF11",254,0)
 . . S PCE1=$$GET1^DIQ(399.0304,CPIEN_","_IBXIEN_",",71)
"RTN","IBCEF11",255,0)
 . . Q
"RTN","IBCEF11",256,0)
 . ; MRD;IB*2.0*516 - Added addl. procedure description as piece 7 
"RTN","IBCEF11",257,0)
 . ; of IBXSAVE, which will exist only if the procedure ends in '99'
"RTN","IBCEF11",258,0)
 . ; or is an 'NOC/NOS' procedure.
"RTN","IBCEF11",259,0)
 . ;JWS;IB*2.0*592;do not include NOC description here for Dental claims
"RTN","IBCEF11",260,0)
 . S IBXSAVE("LDAT",Z)=PCE1_U_$P(NODE1,U,3)_U_$P(NODE1,U)_U_$P(NODE1,U,5)_U_$G(PSPID)_U_$G(PSAMNT)_U_$S(FTYPE=7:"",1:$P(NODE1,U,4))
"RTN","IBCEF11",261,0)
 . Q
"RTN","IBCEF11",262,0)
 Q
"RTN","IBCEF12")
0^64^B43571832^n/a
"RTN","IBCEF12",1,0)
IBCEF12 ;EDE/JWS - OUTPUT FORMATTER SPECIFIC DENTAL FUNCTIONS ;30-JAN-96
"RTN","IBCEF12",2,0)
 ;;2.0;INTEGRATED BILLING;**592**;21-MAR-94;Build 58
"RTN","IBCEF12",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEF12",4,0)
 ;
"RTN","IBCEF12",5,0)
 ;JWS;IB*2.0*592;US131
"RTN","IBCEF12",6,0)
TNUM(IBIFN) ; Extract code for 364.5 field 383 N-TOOTH NUMBER
"RTN","IBCEF12",7,0)
 N IB,IB1
"RTN","IBCEF12",8,0)
 K ^TMP("IBXSAVE",$J,"TO")
"RTN","IBCEF12",9,0)
 ;IA# 3820
"RTN","IBCEF12",10,0)
 S IB=0 F  S IB=$O(^DGCR(399,IBIFN,"DEN1",IB)) Q:'IB  S IB1=^(IB,0),^TMP("IBXSAVE",$J,"TO",IBIFN,IB)=IB1_U_"JP"
"RTN","IBCEF12",11,0)
 Q
"RTN","IBCEF12",12,0)
 ;
"RTN","IBCEF12",13,0)
DEN ; Output formatter Format Code for file DEN, field 2
"RTN","IBCEF12",14,0)
 ;JWS;IB*2.0*592;US131
"RTN","IBCEF12",15,0)
 N A,Z,Q,IBZ K IBXSAVE("OUTPT")
"RTN","IBCEF12",16,0)
 D SET1^IBCEF1(IBXIEN,.A,.IBZ,.IBXDATA,.IBXNOREQ)
"RTN","IBCEF12",17,0)
 S (Q,Z)=0  ;,Q=$G(@A)
"RTN","IBCEF12",18,0)
 F  S Z=$O(IBZ(Z)) S:'Z @A=Q Q:'Z  M IBXSAVE("OUTPT",Z)=IBZ(Z) S Q=Q+1,IBXDATA(Z)=Q D:Z>1 ID^IBCEF2(Z,"DEN ") D SVITM^IBCEF2(.IBXSAVE,Z)
"RTN","IBCEF12",19,0)
 Q
"RTN","IBCEF12",20,0)
 ;
"RTN","IBCEF12",21,0)
DEN1 ; Output formatter Format Code for file DEN1, field 2
"RTN","IBCEF12",22,0)
 ;JWS;IB*2.0*592;US131
"RTN","IBCEF12",23,0)
 N A,Z,Q,IBZ K IBXSAVE("OUTPT")
"RTN","IBCEF12",24,0)
 D SET1^IBCEF1(IBXIEN,.A,.IBZ,.IBXDATA,.IBXNOREQ)
"RTN","IBCEF12",25,0)
 S (Q,Z)=0  ;,Q=$G(@A)
"RTN","IBCEF12",26,0)
 F  S Z=$O(IBZ(Z)) S:'Z @A=Q Q:'Z  M IBXSAVE("OUTPT",Z)=IBZ(Z) S Q=Q+1,IBXDATA(Z)=Q D:Z>1 ID^IBCEF2(Z,"DEN1") D SVITM^IBCEF2(.IBXSAVE,Z)
"RTN","IBCEF12",27,0)
 Q
"RTN","IBCEF12",28,0)
 ;
"RTN","IBCEF12",29,0)
DEN2 ; Output formatter Format Code for file DEN2, fields 2
"RTN","IBCEF12",30,0)
 ;JWS;IB*2.0*592;US131
"RTN","IBCEF12",31,0)
 N A,Z,Z1,CT
"RTN","IBCEF12",32,0)
 D SET1^IBCEF1(IBXIEN,.A,.IBZ,.IBXDATA,.IBXNOREQ)
"RTN","IBCEF12",33,0)
 S (CT,Z)=0  ;,Q=$G(@A)
"RTN","IBCEF12",34,0)
 F  S Z=$O(IBZ(Z)) Q:'Z  D
"RTN","IBCEF12",35,0)
 . S Z1=0 F  S Z1=$O(IBXSAVE("OUTPT",Z,"DEN1",Z1)) Q:'Z1  D  I CT=1,$P($G(IBXSAVE("OUTPT",Z)),U,9)'=1 Q
"RTN","IBCEF12",36,0)
 .. S CT=CT+1 D ID^IBCEF2(CT,"DEN2")
"RTN","IBCEF12",37,0)
 .. S IBXDATA(CT)=Z
"RTN","IBCEF12",38,0)
 .. D SETGBL^IBCEFG(IBXPG,CT,2,Z,.IBXSIZE)
"RTN","IBCEF12",39,0)
 K IBXDATA
"RTN","IBCEF12",40,0)
 Q
"RTN","IBCEF12",41,0)
 ;
"RTN","IBCEF12",42,0)
DEN23 ; Output formatter format code for file DEN2, field 3 (8,186.2,1,3)
"RTN","IBCEF12",43,0)
 ;JWS;IB*2.0*592;US131
"RTN","IBCEF12",44,0)
 N Z,Z0,CT
"RTN","IBCEF12",45,0)
 S (CT,Z)=0
"RTN","IBCEF12",46,0)
 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  D
"RTN","IBCEF12",47,0)
 . S Z0=0 F  S Z0=$O(IBXSAVE("OUTPT",Z,"DEN1",Z0)) Q:'Z0  D
"RTN","IBCEF12",48,0)
 .. S CT=CT+1
"RTN","IBCEF12",49,0)
 .. S IBXDATA(CT)="JP"
"RTN","IBCEF12",50,0)
 .. D SETGBL^IBCEFG(IBXPG,CT,3,"JP",.IBXSIZE)
"RTN","IBCEF12",51,0)
 K IBXDATA
"RTN","IBCEF12",52,0)
 Q
"RTN","IBCEF12",53,0)
 ;
"RTN","IBCEF12",54,0)
DEN24 ; Output formatter Format Code for file DEN2, field 4
"RTN","IBCEF12",55,0)
 ;JWS;IB*2.0*592;US131
"RTN","IBCEF12",56,0)
 N Z,ZO,CT K IBXSAVE("DONE")
"RTN","IBCEF12",57,0)
 S (CT,Z)=0
"RTN","IBCEF12",58,0)
 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  D
"RTN","IBCEF12",59,0)
 . S Z0=0 F  S Z0=$O(IBXSAVE("OUTPT",Z,"DEN1",Z0)) Q:'Z0  D
"RTN","IBCEF12",60,0)
 .. S CT=CT+1
"RTN","IBCEF12",61,0)
 .. I $D(IBXSAVE("DONE",Z,Z0)) Q
"RTN","IBCEF12",62,0)
 .. S IBXSAVE("DONE",Z,Z0)=""
"RTN","IBCEF12",63,0)
 .. ;IA# 2056
"RTN","IBCEF12",64,0)
 .. S IBXDATA(CT)=$$GET1^DIQ(356.022,$P(IBXSAVE("OUTPT",Z,"DEN1",Z0,0),U),.01)
"RTN","IBCEF12",65,0)
 .. D SETGBL^IBCEFG(IBXPG,CT,4,IBXDATA(CT),.IBXSIZE)
"RTN","IBCEF12",66,0)
 K IBXDATA
"RTN","IBCEF12",67,0)
 Q
"RTN","IBCEF12",68,0)
 ;
"RTN","IBCEF12",69,0)
DEN25 ; Output formatter Format Code for file DEN2, field 5
"RTN","IBCEF12",70,0)
 ;JWS;IB*2.0*592;US131
"RTN","IBCEF12",71,0)
 N Z,ZO,CT K IBXSAVE("DONE")
"RTN","IBCEF12",72,0)
 S (CT,Z)=0
"RTN","IBCEF12",73,0)
 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  D
"RTN","IBCEF12",74,0)
 . S Z0=0 F  S Z0=$O(IBXSAVE("OUTPT",Z,"DEN1",Z0)) Q:'Z0  D
"RTN","IBCEF12",75,0)
 .. S CT=CT+1
"RTN","IBCEF12",76,0)
 .. I $D(IBXSAVE("DONE",Z,Z0)) Q
"RTN","IBCEF12",77,0)
 .. S IBXSAVE("DONE",Z,Z0)=""
"RTN","IBCEF12",78,0)
 .. S IBXDATA(CT)=$P(IBXSAVE("OUTPT",Z,"DEN1",Z0,0),U,2)
"RTN","IBCEF12",79,0)
 .. D SETGBL^IBCEFG(IBXPG,CT,5,IBXDATA(CT),.IBXSIZE)
"RTN","IBCEF12",80,0)
 K IBXDATA
"RTN","IBCEF12",81,0)
 Q
"RTN","IBCEF12",82,0)
 ;
"RTN","IBCEF12",83,0)
DEN26 ; Output formatter Format Code for file DEN2, field 6
"RTN","IBCEF12",84,0)
 ;JWS;IB*2.0*592;US131
"RTN","IBCEF12",85,0)
 N Z,ZO,CT K IBXSAVE("DONE")
"RTN","IBCEF12",86,0)
 S (CT,Z)=0
"RTN","IBCEF12",87,0)
 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  D
"RTN","IBCEF12",88,0)
 . S Z0=0 F  S Z0=$O(IBXSAVE("OUTPT",Z,"DEN1",Z0)) Q:'Z0  D
"RTN","IBCEF12",89,0)
 .. S CT=CT+1
"RTN","IBCEF12",90,0)
 .. I $D(IBXSAVE("DONE",Z,Z0)) Q
"RTN","IBCEF12",91,0)
 .. S IBXSAVE("DONE",Z,Z0)=""
"RTN","IBCEF12",92,0)
 .. S IBXDATA(CT)=$P(IBXSAVE("OUTPT",Z,"DEN1",Z0,0),U,3)
"RTN","IBCEF12",93,0)
 .. D SETGBL^IBCEFG(IBXPG,CT,6,IBXDATA(CT),.IBXSIZE)
"RTN","IBCEF12",94,0)
 K IBXDATA
"RTN","IBCEF12",95,0)
 Q
"RTN","IBCEF12",96,0)
 ;
"RTN","IBCEF12",97,0)
DEN27 ; Output formatter Format Code for file DEN2, field 7
"RTN","IBCEF12",98,0)
 ;JWS;IB*2.0*592;US131
"RTN","IBCEF12",99,0)
 N Z,ZO,CT K IBXSAVE("DONE")
"RTN","IBCEF12",100,0)
 S (CT,Z)=0
"RTN","IBCEF12",101,0)
 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  D
"RTN","IBCEF12",102,0)
 . S Z0=0 F  S Z0=$O(IBXSAVE("OUTPT",Z,"DEN1",Z0)) Q:'Z0  D
"RTN","IBCEF12",103,0)
 .. S CT=CT+1
"RTN","IBCEF12",104,0)
 .. I $D(IBXSAVE("DONE",Z,Z0)) Q
"RTN","IBCEF12",105,0)
 .. S IBXSAVE("DONE",Z,Z0)=""
"RTN","IBCEF12",106,0)
 .. S IBXDATA(CT)=$P(IBXSAVE("OUTPT",Z,"DEN1",Z0,0),U,4)
"RTN","IBCEF12",107,0)
 .. D SETGBL^IBCEFG(IBXPG,CT,7,IBXDATA(CT),.IBXSIZE)
"RTN","IBCEF12",108,0)
 K IBXDATA
"RTN","IBCEF12",109,0)
 Q
"RTN","IBCEF12",110,0)
 ;
"RTN","IBCEF12",111,0)
DEN28 ; Output formatter Format Code for file DEN2, field 8
"RTN","IBCEF12",112,0)
 ;JWS;IB*2.0*592;US131
"RTN","IBCEF12",113,0)
 N Z,ZO,CT K IBXSAVE("DONE")
"RTN","IBCEF12",114,0)
 S (CT,Z)=0
"RTN","IBCEF12",115,0)
 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  D
"RTN","IBCEF12",116,0)
 . S Z0=0 F  S Z0=$O(IBXSAVE("OUTPT",Z,"DEN1",Z0)) Q:'Z0  D
"RTN","IBCEF12",117,0)
 .. S CT=CT+1
"RTN","IBCEF12",118,0)
 .. I $D(IBXSAVE("DONE",Z,Z0)) Q
"RTN","IBCEF12",119,0)
 .. S IBXSAVE("DONE",Z,Z0)=""
"RTN","IBCEF12",120,0)
 .. S IBXDATA(CT)=$P(IBXSAVE("OUTPT",Z,"DEN1",Z0,0),U,5)
"RTN","IBCEF12",121,0)
 .. D SETGBL^IBCEFG(IBXPG,CT,8,IBXDATA(CT),.IBXSIZE)
"RTN","IBCEF12",122,0)
 K IBXDATA
"RTN","IBCEF12",123,0)
 Q
"RTN","IBCEF12",124,0)
 ;
"RTN","IBCEF12",125,0)
DEN29 ; Output formatter Format Code for file DEN2, field 9
"RTN","IBCEF12",126,0)
 ;JWS;IB*2.0*592;US131
"RTN","IBCEF12",127,0)
 N Z,ZO,CT K IBXSAVE("DONE")
"RTN","IBCEF12",128,0)
 S (CT,Z)=0
"RTN","IBCEF12",129,0)
 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  D
"RTN","IBCEF12",130,0)
 . S Z0=0 F  S Z0=$O(IBXSAVE("OUTPT",Z,"DEN1",Z0)) Q:'Z0  D
"RTN","IBCEF12",131,0)
 .. S CT=CT+1
"RTN","IBCEF12",132,0)
 .. I $D(IBXSAVE("DONE",Z,Z0)) Q
"RTN","IBCEF12",133,0)
 .. S IBXSAVE("DONE",Z,Z0)=""
"RTN","IBCEF12",134,0)
 .. S IBXDATA(CT)=$P(IBXSAVE("OUTPT",Z,"DEN1",Z0,0),U,6)
"RTN","IBCEF12",135,0)
 .. D SETGBL^IBCEFG(IBXPG,CT,9,IBXDATA(CT),.IBXSIZE)
"RTN","IBCEF12",136,0)
 K IBXDATA
"RTN","IBCEF12",137,0)
 Q
"RTN","IBCEF12",138,0)
 ;
"RTN","IBCEF12",139,0)
TRANS ; Output formatter Format Code for file DN1, field 6
"RTN","IBCEF12",140,0)
 ;JWS;IB*2.0*592;US131; IA# 2056
"RTN","IBCEF12",141,0)
 I $$GET1^DIQ(399,IBXIEN_",",93)'="",$$GET1^DIQ(399,IBXIEN_",",94)'="" K IBXDATA
"RTN","IBCEF12",142,0)
 S IBXDATA=$E($G(IBXDATA)) I IBXDATA'="Y" K IBXDATA
"RTN","IBCEF12",143,0)
 Q
"RTN","IBCEF12",144,0)
 ;
"RTN","IBCEF12",145,0)
SRVDT ; Output formatter Format Code for file DEN, field 4 Service date
"RTN","IBCEF12",146,0)
 ;JWS;IB*2.0*592;US131
"RTN","IBCEF12",147,0)
 ;;S IBXNOREQ=$$NFT^IBCEF1(7,IBXIEN)
"RTN","IBCEF12",148,0)
 N Z,IBCDT
"RTN","IBCEF12",149,0)
 S IBCDT=$$GET1^DIQ(399,IBXIEN_",",.03,"I"),IBCDT=$$FMTHL7^XLFDT(IBCDT)
"RTN","IBCEF12",150,0)
 S Z=0
"RTN","IBCEF12",151,0)
 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  D
"RTN","IBCEF12",152,0)
 . I $P($G(IBXSAVE("OUTPT",Z,"DEN")),U,11)'="" Q  ;treatment start date
"RTN","IBCEF12",153,0)
 . I $P($G(IBXSAVE("OUTPT",Z,"DEN")),U,12)'="" Q  ;treatment completion date
"RTN","IBCEF12",154,0)
 . I $P($G(IBXSAVE("OUTPT",Z)),U)=IBCDT Q  ;if procedure date is same as event date, don't send
"RTN","IBCEF12",155,0)
 . I $P($G(IBXSAVE("OUTPT",Z)),U)'="" S IBXDATA(Z)=$P(IBXSAVE("OUTPT",Z),U)
"RTN","IBCEF12",156,0)
 . Q
"RTN","IBCEF12",157,0)
 Q
"RTN","IBCEF12",158,0)
 ;
"RTN","IBCEF12",159,0)
SRVDTQ ; Output formatter Format Code for file DEN, field 3 Date/Time Qualifier
"RTN","IBCEF12",160,0)
 ;JWS;IB*2.0*592;US131
"RTN","IBCEF12",161,0)
 N Z,IBCDT
"RTN","IBCEF12",162,0)
 S IBCDT=$$GET1^DIQ(399,IBXIEN_",",.03,"I"),IBCDT=$$FMTHL7^XLFDT(IBCDT)
"RTN","IBCEF12",163,0)
 S Z=0
"RTN","IBCEF12",164,0)
 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  D
"RTN","IBCEF12",165,0)
 . I $P($G(IBXSAVE("OUTPT",Z,"DEN")),U,11)'="" Q  ;treatment start date
"RTN","IBCEF12",166,0)
 . I $P($G(IBXSAVE("OUTPT",Z,"DEN")),U,12)'="" Q  ;treatment completion date
"RTN","IBCEF12",167,0)
 . I $P($G(IBXSAVE("OUTPT",Z)),U)=IBCDT Q  ;if procedure date is same as event date, don't send
"RTN","IBCEF12",168,0)
 . I $P($G(IBXSAVE("OUTPT",Z)),U)'="" S IBXDATA(Z)=472
"RTN","IBCEF12",169,0)
 Q
"RTN","IBCEF12",170,0)
 ;
"RTN","IBCEF12",171,0)
PROC ; Output formatter Format Code for file DEN1, field 3 Procedure Count
"RTN","IBCEF12",172,0)
 N Z S Z=0
"RTN","IBCEF12",173,0)
 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  D
"RTN","IBCEF12",174,0)
 . S IBXDATA(Z)=$P($G(IBXSAVE("OUTPT",Z)),U,9)
"RTN","IBCEF12",175,0)
 . I IBXDATA(Z)=1 S IBXDATA(Z)=""  ;number of units (default=1, therefore must be blank if =1)
"RTN","IBCEF12",176,0)
 . Q
"RTN","IBCEF12",177,0)
 Q
"RTN","IBCEF12",178,0)
 ;
"RTN","IBCEF12",179,0)
POS ; Output formatter Format Code for File DEN, field 13 Place of Service
"RTN","IBCEF12",180,0)
 N IBZ,W,DEFPOS,POS,HOF,Z
"RTN","IBCEF12",181,0)
 ;perform logic to obtain CL1-33 Place of Service (Claim Level) to compare to line level
"RTN","IBCEF12",182,0)
 D F^IBCEF("N-HCFA SERVICE LINE CALLABLE","IBZ",,IBXIEN)
"RTN","IBCEF12",183,0)
 S DEFPOS="",W=0
"RTN","IBCEF12",184,0)
 F  S W=$O(IBZ(W)) Q:'W  S POS=$P($G(IBZ(W)),U,3),HOF=(POS=11!(POS=12)) S:DEFPOS=""!HOF DEFPOS=POS Q:HOF
"RTN","IBCEF12",185,0)
 ;
"RTN","IBCEF12",186,0)
 S Z=0 F  S Z=$O(IBXSAVE("OUTPT",Z)) Q:'Z  I $P(IBXSAVE("OUTPT",Z),U,3)'="",$P(IBXSAVE("OUTPT",Z),U,3)'=DEFPOS S IBXDATA(Z)=$P(IBXSAVE("OUTPT",Z),U,3)
"RTN","IBCEF12",187,0)
 Q
"RTN","IBCEF12",188,0)
 ;
"RTN","IBCEF12",189,0)
OIT ; Output formatter Format Code for File OI1, field 8 Other Insurance Type
"RTN","IBCEF12",190,0)
 I $$FT^IBCEF(IBXIEN)'=7 Q
"RTN","IBCEF12",191,0)
 I A'=3 S IBXDATA(Z)=""
"RTN","IBCEF12",192,0)
 Q
"RTN","IBCEF12",193,0)
 ;
"RTN","IBCEF12",194,0)
CHK(IBIEN) ;DIC("S") screen for OCCURRENCE CODE 399.041, .01 field
"RTN","IBCEF12",195,0)
 N IBCHK
"RTN","IBCEF12",196,0)
 I $D(IBIFN) S IBIEN=IBIFN
"RTN","IBCEF12",197,0)
 I $$FT^IBCEF(IBIEN)'=7 Q 1
"RTN","IBCEF12",198,0)
 S IBCHK=$P($G(^DGCR(399.1,Y,0)),"^",2)
"RTN","IBCEF12",199,0)
 I $F(",01,02,03,04,05,",","_IBCHK_",") Q 1
"RTN","IBCEF12",200,0)
 Q 0
"RTN","IBCEF12",201,0)
 ;
"RTN","IBCEF2")
0^43^B81532163^B78152141
"RTN","IBCEF2",1,0)
IBCEF2 ;ALB/TMP - FORMATTER SPECIFIC BILL FUNCTIONS ;8/6/03 10:54am
"RTN","IBCEF2",2,0)
 ;;2.0;INTEGRATED BILLING;**52,85,51,137,232,155,296,349,403,400,432,488,461,547,592**;21-MAR-94;Build 58
"RTN","IBCEF2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEF2",4,0)
 ;
"RTN","IBCEF2",5,0)
HOS(IBIFN) ; Extract rev codes for inst. episode into IBXDATA
"RTN","IBCEF2",6,0)
 ; Moved for space
"RTN","IBCEF2",7,0)
 D HOS^IBCEF22(IBIFN)
"RTN","IBCEF2",8,0)
 Q
"RTN","IBCEF2",9,0)
 ;
"RTN","IBCEF2",10,0)
OTHINS(IBIFN) ;Determine 'other insurance' node (I1,I2)
"RTN","IBCEF2",11,0)
 ; If primary bill, other ins is secondary
"RTN","IBCEF2",12,0)
 ; If sec or tert bill, other ins is primary
"RTN","IBCEF2",13,0)
 ;IBIFN = bill ien
"RTN","IBCEF2",14,0)
 N Z
"RTN","IBCEF2",15,0)
 S Z=$$COBN^IBCEF(IBIFN)
"RTN","IBCEF2",16,0)
 Q "I"_$S(Z=1:2,1:1)
"RTN","IBCEF2",17,0)
 ;
"RTN","IBCEF2",18,0)
OTHINS1(IBIFN) ; Returns the COB #'s of all 'other insurance' as a string
"RTN","IBCEF2",19,0)
 ;IBIFN = bill ien
"RTN","IBCEF2",20,0)
 N IBC,Z
"RTN","IBCEF2",21,0)
 S Z=$$COBN^IBCEF(IBIFN)
"RTN","IBCEF2",22,0)
 I Z=1 S IBC=$S($D(^DGCR(399,IBIFN,"I2")):$S($D(^DGCR(399,IBIFN,"I3")):23,1:2),1:"") ;Primary=>2 or 23
"RTN","IBCEF2",23,0)
 I Z=2 S IBC="1"_$S($D(^DGCR(399,IBIFN,"I3")):3,1:"") ;Secondary=>1 or 13
"RTN","IBCEF2",24,0)
 I Z=3 S IBC="12" ;Tertiary =>12
"RTN","IBCEF2",25,0)
OTHQ Q IBC
"RTN","IBCEF2",26,0)
 ;
"RTN","IBCEF2",27,0)
RECVR(IBIFN) ; Returns the V.A. internal routing id of the current ins
"RTN","IBCEF2",28,0)
 ; co for 837
"RTN","IBCEF2",29,0)
 ;IBIFN = bill ien
"RTN","IBCEF2",30,0)
 N MCR,NUM,IBPH
"RTN","IBCEF2",31,0)
 ;JWS;IB*2.0*592:Dental form #7
"RTN","IBCEF2",32,0)
 S IBPH=$P("P^H^^^^DENTAL",U,$$FT^IBCEF(IBIFN)-1)
"RTN","IBCEF2",33,0)
 S NUM=$S($$FT^IBCEF(IBIFN)=7:IBPH,1:"ENVOY"_IBPH)
"RTN","IBCEF2",34,0)
 ; If rate type is CHAMPVA, send 'CHAMVA'
"RTN","IBCEF2",35,0)
 I $P($G(^DGCR(399.3,+$P($G(^DGCR(399,IBIFN,0)),U,7),0)),U)="CHAMPVA" S NUM="CHAMV"_IBPH
"RTN","IBCEF2",36,0)
 I NUM["ENVOY",$$MCRWNR^IBEFUNC(+$$CURR(IBIFN)) D
"RTN","IBCEF2",37,0)
 . ;JWS;IB*2.0*592:Dental form #7
"RTN","IBCEF2",38,0)
 . S MCR=$P("B^A^^^^B",U,$$FT^IBCEF(IBIFN)-1)    ; PART A/B for MEDICARE
"RTN","IBCEF2",39,0)
 . S NUM="PART"_MCR
"RTN","IBCEF2",40,0)
 Q NUM
"RTN","IBCEF2",41,0)
 ;
"RTN","IBCEF2",42,0)
ALLPAYID(IBIFN,IBXDATA,SEQ) ; Returns clearinghouse id for all (SEQ="")
"RTN","IBCEF2",43,0)
 ;  or a specific (SEQ=1,2,3) ins co's for 837 in IBXDATA(n) for bill ien
"RTN","IBCEF2",44,0)
 ;  IBIFN
"RTN","IBCEF2",45,0)
 ; EJK *296* Add IBMRA - MRA Claim type. 
"RTN","IBCEF2",46,0)
 ; EJK *296* Add IBEBI - Electronic Billing ID
"RTN","IBCEF2",47,0)
 ;
"RTN","IBCEF2",48,0)
 ;WCJ;IB*2.0*547 - added IBM2
"RTN","IBCEF2",49,0)
 ;N Z,Z0,Z1,A,IBM,IBINST,IBMCR,IBX,IBMRA,IBEBI
"RTN","IBCEF2",50,0)
 N Z,Z0,Z1,A,IBM,IBM2,IBINST,IBMCR,IBX,IBMRA,IBEBI
"RTN","IBCEF2",51,0)
 ;S IBXDATA="",IBM=$G(^DGCR(399,IBIFN,"M"))
"RTN","IBCEF2",52,0)
 S IBXDATA="",IBM=$G(^DGCR(399,IBIFN,"M")),IBM2=$G(^DGCR(399,IBIFN,"M2"))
"RTN","IBCEF2",53,0)
 F Z=1:1:3 I $S('$G(SEQ):1,1:Z=SEQ) S Z0=$P(IBM,U,Z) I Z0 D  S:A'="" IBXDATA(Z)=A
"RTN","IBCEF2",54,0)
 . S A=""
"RTN","IBCEF2",55,0)
 . ;WCJ;IB*2.0*547
"RTN","IBCEF2",56,0)
 . I $P(IBM2,U,Z*2)]"" S A=$P(IBM2,U,Z*2) Q  ; grab new alternate payer IDs from bill if they exist
"RTN","IBCEF2",57,0)
 . ;
"RTN","IBCEF2",58,0)
 . S IBINST=($$FT^IBCEF(IBIFN)=3) ;Is bill UB-04?
"RTN","IBCEF2",59,0)
 . ; EJK *296* Get IBEBI based on Prof. or Inst. claim
"RTN","IBCEF2",60,0)
 . I IBINST S IBEBI=$P($G(^DIC(36,Z0,3)),U,4)
"RTN","IBCEF2",61,0)
 . I 'IBINST S IBEBI=$P($G(^DIC(36,Z0,3)),U,2)
"RTN","IBCEF2",62,0)
 . ;JWS;IB*2.0*592;Dental payer id;IA# 5292
"RTN","IBCEF2",63,0)
 . I $$FT^IBCEF(IBIFN)=7 S IBEBI=$P($G(^DIC(36,Z0,3)),U,15)
"RTN","IBCEF2",64,0)
 . S IBEBI=$$UP^XLFSTR(IBEBI)
"RTN","IBCEF2",65,0)
 . ; EJK *296* If this is a Medicare claim, it may be printed or transmitted. 
"RTN","IBCEF2",66,0)
 . S IBMRA=$$MRASEC^IBCEF4(IBIFN)   ;Is claim 2ndary to an MRA? 
"RTN","IBCEF2",67,0)
 . S IBMCR=$$MCRONBIL^IBEFUNC(IBIFN),Z1=$G(^DGCR(399,IBIFN,"TX"))
"RTN","IBCEF2",68,0)
 . Q:$P(Z1,U,8)=1!$S('$P(Z1,U,9):0,1:$$MRASEC^IBCEF4(IBIFN))  ;Force local prnt
"RTN","IBCEF2",69,0)
 . ;JWS;IB*2.0*592;9/1/17 add Dental Payer ID;IA# 5292
"RTN","IBCEF2",70,0)
 . S A=$S($P(Z1,U,8)'=2:$P($G(^DIC(36,Z0,3)),U,$S(IBINST:4,$$FT^IBCEF(IBIFN)=7:15,1:2)),1:"")
"RTN","IBCEF2",71,0)
 . S A=$$UP^XLFSTR(A)
"RTN","IBCEF2",72,0)
 . ;
"RTN","IBCEF2",73,0)
 . ; RPRNT = CMS-1500 Rx bills
"RTN","IBCEF2",74,0)
 . ; IPRNT = Inst MRA secondary claims
"RTN","IBCEF2",75,0)
 . ; PPRNT = Prof MRA secondary claims
"RTN","IBCEF2",76,0)
 . ; HPRNT = inst printed bills (non-MRA, force print at clearinghouse)
"RTN","IBCEF2",77,0)
 . ; SPRNT = prof printed bills (non-MRA, force print at clearinghouse)
"RTN","IBCEF2",78,0)
 . ;
"RTN","IBCEF2",79,0)
 . ; Default to appropriate 'xPRNT' if Rx bill or COB bill or forced to
"RTN","IBCEF2",80,0)
 . ;    print - claims must print at clearinghouse
"RTN","IBCEF2",81,0)
 . ;
"RTN","IBCEF2",82,0)
 . ; Rx bills on CMS-1500
"RTN","IBCEF2",83,0)
 . ;IB*2.0*432/TAZ Claims no longer print at clearinghouse
"RTN","IBCEF2",84,0)
 . ;I 'IBINST,$$ISRX^IBCEF1(IBIFN) S A="RPRNT" Q
"RTN","IBCEF2",85,0)
 . ;
"RTN","IBCEF2",86,0)
 . ; Claim forced to print at clearinghouse (Field #27)
"RTN","IBCEF2",87,0)
 . I $P(Z1,U,8)=2 S A=$S(IBINST:"H",1:"S")_"PRNT" Q
"RTN","IBCEF2",88,0)
 . ;
"RTN","IBCEF2",89,0)
 . ; EJK *296* Send IBEBI for MRA secondary claims if it exists
"RTN","IBCEF2",90,0)
 . I Z>1,IBMRA,IBEBI'="" S A=IBEBI Q
"RTN","IBCEF2",91,0)
 . ;
"RTN","IBCEF2",92,0)
 . ; MRA secondary claim
"RTN","IBCEF2",93,0)
 . I Z>1,IBMCR=1,$P(Z1,U,5)="C" S A=$S(IBINST:"I",1:"P")_"PRNT" Q
"RTN","IBCEF2",94,0)
 . ;
"RTN","IBCEF2",95,0)
 . ; Medicare is current payer (MRA request claim)
"RTN","IBCEF2",96,0)
 . I $$WNRBILL^IBEFUNC(IBIFN,Z) S A=$S(IBINST:"12M61",1:"SMTX1") Q
"RTN","IBCEF2",97,0)
 . ;
"RTN","IBCEF2",98,0)
 . ; IB*296 - Do not modify the payer ID for CHAMPVA (HAC)
"RTN","IBCEF2",99,0)
 . I A=84146 Q
"RTN","IBCEF2",100,0)
 . I A=84147 Q
"RTN","IBCEF2",101,0)
 . ;
"RTN","IBCEF2",102,0)
 . ; If not a primary bill force to print
"RTN","IBCEF2",103,0)
 . ;IB*2.0*432/TAZ secondary bills will now be processed
"RTN","IBCEF2",104,0)
 . ;I Z>1,Z=$$COBN^IBCEF(IBIFN) S A=$S(IBINST:"H",1:"S")_"PRNT" Q
"RTN","IBCEF2",105,0)
 . Q
"RTN","IBCEF2",106,0)
 ;
"RTN","IBCEF2",107,0)
 Q
"RTN","IBCEF2",108,0)
 ;
"RTN","IBCEF2",109,0)
PAYERID(IBIFN) ; Returns clearinghouse id for current ins co
"RTN","IBCEF2",110,0)
 ; IBIFN = bill ien
"RTN","IBCEF2",111,0)
 N NUM,IBSEQ
"RTN","IBCEF2",112,0)
 ; Determine the current ins co's # to identify at WEBMD
"RTN","IBCEF2",113,0)
 ; Envoy changed to WEBMD in patch 232
"RTN","IBCEF2",114,0)
 S IBSEQ=+$$COBN^IBCEF(IBIFN)
"RTN","IBCEF2",115,0)
 D ALLPAYID(IBIFN,.NUM,IBSEQ) S NUM=$G(NUM(IBSEQ))
"RTN","IBCEF2",116,0)
 Q $G(NUM)
"RTN","IBCEF2",117,0)
 ;
"RTN","IBCEF2",118,0)
CURR(IBIFN) ; Returns ien of the current insurance
"RTN","IBCEF2",119,0)
 ; company for bill ien IBIFN
"RTN","IBCEF2",120,0)
 Q $$FINDINS^IBCEF1(IBIFN)
"RTN","IBCEF2",121,0)
 ;
"RTN","IBCEF2",122,0)
ADMDT(IBIFN,NOOUTCK) ; Calculate admission/start of care date/time
"RTN","IBCEF2",123,0)
 D ADMDT^IBCEF21(IBIFN,$G(NOOUTCK))      ; Moved for space
"RTN","IBCEF2",124,0)
 Q
"RTN","IBCEF2",125,0)
 ;
"RTN","IBCEF2",126,0)
DISDT(IBIFN) ; Calculate discharge date
"RTN","IBCEF2",127,0)
 D DISDT^IBCEF21(IBIFN)                  ; Moved for space
"RTN","IBCEF2",128,0)
 Q
"RTN","IBCEF2",129,0)
 ;
"RTN","IBCEF2",130,0)
INDTS(IBIFN) ; Function returns the admit ^ discharge date/time of admission if patient is an inpatient on bill's event date
"RTN","IBCEF2",131,0)
 N Z,Z0,DFN,VAINDT,VAIN S Z0=""
"RTN","IBCEF2",132,0)
 S Z=$G(^DGCR(399,+$G(IBIFN),0)),DFN=$P(Z,U,2),VAINDT=$P(Z,U,3)
"RTN","IBCEF2",133,0)
 I +DFN,+VAINDT D INP^VADPT I +VAIN(1) S Z0=+VAIN(7)_U_+$G(^DGPM(+$P($G(^DGPM(+VAIN(1),0)),U,17),0))
"RTN","IBCEF2",134,0)
 Q Z0
"RTN","IBCEF2",135,0)
 ;
"RTN","IBCEF2",136,0)
TXMT(IBIFN) ; Function moved - use new call in IBCEF4
"RTN","IBCEF2",137,0)
 Q $$TXMT^IBCEF4(IBIFN)
"RTN","IBCEF2",138,0)
 ;
"RTN","IBCEF2",139,0)
 ;
"RTN","IBCEF2",140,0)
ID(LN,VAL) ; Set EXTRACT GLOBAL for multi-valued record
"RTN","IBCEF2",141,0)
 ; ids for Austin
"RTN","IBCEF2",142,0)
 ; LN = the line # being extracted
"RTN","IBCEF2",143,0)
 ; VAL = the value of the element being extracted
"RTN","IBCEF2",144,0)
 ;
"RTN","IBCEF2",145,0)
 ; Assumes IBXPG exists
"RTN","IBCEF2",146,0)
 ;
"RTN","IBCEF2",147,0)
 Q:LN<2
"RTN","IBCEF2",148,0)
 D SETGBL^IBCEFG(IBXPG,LN,1,VAL,.IBXSIZE)
"RTN","IBCEF2",149,0)
 Q
"RTN","IBCEF2",150,0)
 ;
"RTN","IBCEF2",151,0)
ID1(LN,DX,CT,DCT,ECT) ;Special entry point for diagnoses to 'save' the fact
"RTN","IBCEF2",152,0)
 ;   a dx code is an e-code.
"RTN","IBCEF2",153,0)
 ; LN is last entry # output, returned as the entry # (IBXLINE) to assign to this entry
"RTN","IBCEF2",154,0)
 ; DX = the actual Dx code array(RECORD ID). Pass by reference, DX returned null if
"RTN","IBCEF2",155,0)
 ;      dx was not output
"RTN","IBCEF2",156,0)
 ; CT = the ct on the 'DC' entry.  pass by reference, returned null if
"RTN","IBCEF2",157,0)
 ;      the end of the valid dx codes has been reached
"RTN","IBCEF2",158,0)
 ; DCT= Count of regular DX codes. UB-04 can have 25 non External Cause codes.
"RTN","IBCEF2",159,0)
 ; ECT= Count of External Cause codes. UB-04 can have 12 External Cause codes.
"RTN","IBCEF2",160,0)
 ; External Cause of Injury codes and qualifier changed with ICD-10: E-codes in ICD-9, V,X,W,Y-codes in ICD-10
"RTN","IBCEF2",161,0)
 N IBINS,VAL,CNT,DXIEN,DXQ,EDX,I,POA,ICDV
"RTN","IBCEF2",162,0)
 S IBINS=($$FT^IBCEF(IBXIEN)=3)
"RTN","IBCEF2",163,0)
 S VAL="DC"_CT
"RTN","IBCEF2",164,0)
 S VAL=$E(VAL_" ",1,4)
"RTN","IBCEF2",165,0)
 S DCT=+$G(DCT),ECT=+$G(ECT) ;Make sure variables are initialized.
"RTN","IBCEF2",166,0)
 ;
"RTN","IBCEF2",167,0)
 S EDX=0,DX=$G(DX)
"RTN","IBCEF2",168,0)
 S ICDV=$$ICD9VER^IBACSV(+$G(DX(CT)))
"RTN","IBCEF2",169,0)
 I ICDV=1,$E(DX)="E" S EDX=1 ; TRUE if ECI ICD-9 Dx (e-code)
"RTN","IBCEF2",170,0)
 I ICDV=30,"VWXY"[$E(DX) S EDX=1 ; TRUE if ECI ICD-10 Dx
"RTN","IBCEF2",171,0)
 ;
"RTN","IBCEF2",172,0)
 S I=$S(EDX:3,1:2)
"RTN","IBCEF2",173,0)
 ;
"RTN","IBCEF2",174,0)
 S:'EDX DXQ=$S(+$G(^TMP("DCX",$J,2))>0:"BF",1:"BK") ; first non e-code DX is principal (qualifier "BK"), the rest have qualifier "BF"
"RTN","IBCEF2",175,0)
 ;
"RTN","IBCEF2",176,0)
 I IBINS D  I DX="" G IDX1
"RTN","IBCEF2",177,0)
 .;I CT>28 S CT="" Q     ; Max of 28 codes for institutional/UB
"RTN","IBCEF2",178,0)
 .I EDX S ECT=ECT+1 I ECT>12 S DX="" Q  ;Only 12 E-codes allowed
"RTN","IBCEF2",179,0)
 .I 'EDX S DCT=DCT+1 I DCT>25 S DX="" Q  ;Only 25 DX codes allowed
"RTN","IBCEF2",180,0)
 .S DXIEN=$P(DX(CT),U,2) Q:DXIEN=""
"RTN","IBCEF2",181,0)
 .; IB*2.0*547 - no longer stuff a 1 for POA, send a blank if null
"RTN","IBCEF2",182,0)
 .S POA=$P($G(^IBA(362.3,DXIEN,0)),U,4) ; I POA="",$$INPAT^IBCEF(IBXIEN) S POA=1 ; POA indicator defaults to "1", if not present on inpatient claim
"RTN","IBCEF2",183,0)
 .S:EDX DXQ="BN" ; e-code DX qualifier
"RTN","IBCEF2",184,0)
 .Q
"RTN","IBCEF2",185,0)
 ;
"RTN","IBCEF2",186,0)
 I 'IBINS S:EDX DXQ="BF" S POA="" ; on CMS-1500 e-code DX qualifiers are "BF" and there's no POA
"RTN","IBCEF2",187,0)
 ;
"RTN","IBCEF2",188,0)
 I ICDV=30 S DXQ="A"_DXQ ; adjust Qualifier for ICD-10 codes
"RTN","IBCEF2",189,0)
 ;
"RTN","IBCEF2",190,0)
 ;Changed 8 to 12 so we can transmit 12 codes. BAA *488*
"RTN","IBCEF2",191,0)
 I 'IBINS,CT>12 S ^TMP("IBXSAVE",$J,"DX",IBXIEN)=$G(^TMP("IBXSAVE",$J,"DX",IBXIEN))+1,^TMP("IBXSAVE",$J,"DX",IBXIEN,$P(DX(+^TMP("IBXSAVE",$J,"DX",IBXIEN)),U,2))=$G(^TMP("IBXSAVE",$J,"DX",IBXIEN)) S DX="" Q
"RTN","IBCEF2",192,0)
 ;
"RTN","IBCEF2",193,0)
 I CT'="",DX'="" D
"RTN","IBCEF2",194,0)
 .; populate ^TMP("DCX") scratch global
"RTN","IBCEF2",195,0)
 .S ^TMP("DCX",$J,1)=CT,CNT=$G(^TMP("DCX",$J,I))+1,^TMP("DCX",$J,I)=CNT
"RTN","IBCEF2",196,0)
 .S (^TMP("DCX",$J,I,CNT),^TMP("DCX",$J,1,CT))=DX_U_DXQ_U_POA
"RTN","IBCEF2",197,0)
 .S LN=LN+1 D ID(LN,VAL) S ^TMP("IBXSAVE",$J,"DX",IBXIEN,$P(DX(LN),U,2))=LN,^TMP("IBXSAVE",$J,"DX",IBXIEN)=CT,CT=CT+1
"RTN","IBCEF2",198,0)
 .Q
"RTN","IBCEF2",199,0)
 ;
"RTN","IBCEF2",200,0)
IDX1 ;
"RTN","IBCEF2",201,0)
 Q
"RTN","IBCEF2",202,0)
 ;
"RTN","IBCEF2",203,0)
M(CT) ; Calculate multi-valued field for 837 extract
"RTN","IBCEF2",204,0)
 ; CT = passed by reference/the record ID counter
"RTN","IBCEF2",205,0)
 S CT=CT+1
"RTN","IBCEF2",206,0)
 ;IB*2.0*547/TAZ Increase counter to 25
"RTN","IBCEF2",207,0)
 ;Q $E(CT#12+$S(CT#12:0,1:12)_" ",1,2)
"RTN","IBCEF2",208,0)
 Q $E(CT#25+$S(CT#25:0,1:25)_" ",1,2)
"RTN","IBCEF2",209,0)
 ;
"RTN","IBCEF2",210,0)
SVITM(IBA,LINE) ; Saves the linked items from the bill data extract into
"RTN","IBCEF2",211,0)
 ; an array the formatter will use to link Rxs and prosthetics
"RTN","IBCEF2",212,0)
 ; to an SV1 or SV2 line item, if possible.  Kills off IBA array entries
"RTN","IBCEF2",213,0)
 ; after they are 'moved'
"RTN","IBCEF2",214,0)
 ; IBA = array that contains the data to be saved
"RTN","IBCEF2",215,0)
 ;   subscripts are (line #,item type,item pointer)=ct
"RTN","IBCEF2",216,0)
 N Z0,Z1
"RTN","IBCEF2",217,0)
 S Z0="" F  S Z0=$O(IBA("OUTPT",LINE,Z0)) Q:Z0=""  I Z0?1N.N  S Z1="" F  S Z1=$O(IBA("OUTPT",LINE,Z0,Z1)) Q:Z1=""  S ^TMP($J,"IBITEM",Z0,Z1,LINE)=IBA("OUTPT",LINE,Z0,Z1) K IBA("OUTPT",LINE,Z0,Z1)
"RTN","IBCEF2",218,0)
 Q
"RTN","IBCEF2",219,0)
 ;
"RTN","IBCEF2",220,0)
LINK(IBTYP,IBDATA) ; Link the item with a service line, if possible
"RTN","IBCEF2",221,0)
 ; IBTYP = the code for the type of item
"RTN","IBCEF2",222,0)
 ;         returned incremented if no link is made
"RTN","IBCEF2",223,0)
 ; IBDATA = the extracted data string that identifies the item. 
"RTN","IBCEF2",224,0)
 ; Returns the line to link to or null if no link
"RTN","IBCEF2",225,0)
 N IBLN,IBKEY,Z
"RTN","IBCEF2",226,0)
 S IBLN=""
"RTN","IBCEF2",227,0)
 S IBKEY=$S(IBTYP=3:$P(IBDATA,U,9),IBTYP=5:$P(IBDATA,U,4),1:"") Q:IBKEY=""
"RTN","IBCEF2",228,0)
 I $D(^TMP($J,"IBITEM",IBTYP,IBKEY)) D  G:IBLN LINKQ
"RTN","IBCEF2",229,0)
 .S Z=0 F  S Z=$O(^TMP($J,"IBITEM",IBTYP,IBKEY,Z)) Q:'Z  I ^TMP($J,"IBITEM",IBTYP,IBKEY,Z) S IBLN=Z,^TMP($J,"IBITEM",IBTYP,IBKEY,Z)=^TMP($J,"IBITEM",IBTYP,IBKEY,Z)-1 Q
"RTN","IBCEF2",230,0)
 I $D(^TMP($J,"IBITEM",IBTYP,0)) S IBKEY=0 D
"RTN","IBCEF2",231,0)
 .S Z=0 F  S Z=$O(^TMP($J,"IBITEM",IBTYP,IBKEY,Z)) Q:'Z  I ^TMP($J,"IBITEM",IBTYP,IBKEY,Z) S IBLN=Z,^TMP($J,"IBITEM",IBTYP,IBKEY,Z)=^TMP($J,"IBITEM",IBTYP,IBKEY,Z)-1 Q
"RTN","IBCEF2",232,0)
LINKQ Q IBLN
"RTN","IBCEF2",233,0)
 ;
"RTN","IBCEF2",234,0)
COID(IBIFN) ; Claim office ID - moved for space
"RTN","IBCEF2",235,0)
 Q $$COID^IBCEF21(IBIFN)
"RTN","IBCEF2",236,0)
 ;
"RTN","IBCEF2",237,0)
PPOL(IBIFN,COB) ; return IFN of patient policy on a bill defined by COB (fields 399,112-114)
"RTN","IBCEF2",238,0)
 N X,Y,PPOL S PPOL=""
"RTN","IBCEF2",239,0)
 I +$G(IBIFN) S X=$G(^DGCR(399,+IBIFN,"M")) I +$G(COB),COB<4 S Y=COB+11,PPOL=$P(X,U,Y)
"RTN","IBCEF2",240,0)
 Q PPOL
"RTN","IBCEF2",241,0)
 ;
"RTN","IBCEF2",242,0)
LADJ(SUB,LINE,SEQ1,GRP,IBXSAVE,PIECE) ; Extract line level adjustments
"RTN","IBCEF2",243,0)
 ; SUB     = 1st subscript in IBXSAVE array to use
"RTN","IBCEF2",244,0)
 ; LINE    = 2nd subscript
"RTN","IBCEF2",245,0)
 ; SEQ1    = 4th subscript
"RTN","IBCEF2",246,0)
 ; GRP     = 5th subscript
"RTN","IBCEF2",247,0)
 ; IBXSAVE = array that has the data for COB line level adjustments
"RTN","IBCEF2",248,0)
 ; PIECE   = # of the piece on the 0-node of the line level
"RTN","IBCEF2",249,0)
 ;           adjustment reason to be extracted
"RTN","IBCEF2",250,0)
 ;
"RTN","IBCEF2",251,0)
 N A,B
"RTN","IBCEF2",252,0)
 S (A,B)=0
"RTN","IBCEF2",253,0)
 F  S A=$O(IBXSAVE(SUB,LINE,"COB",SEQ1,GRP,A)) Q:'A  D
"RTN","IBCEF2",254,0)
 . S B=B+1,IBXDATA(B)=$P(IBXSAVE(SUB,LINE,"COB",SEQ1,GRP,A),U,PIECE)
"RTN","IBCEF2",255,0)
 Q
"RTN","IBCEF2",256,0)
 ;
"RTN","IBCEF2",257,0)
ESGHPST(IBIFN,COB) ; return insureds employ status if bill policy defined by COB is an Employer Sponsored Group Health Plan
"RTN","IBCEF2",258,0)
 Q $$ESGHPST^IBCEF21(IBIFN,COB) ;Tag moved
"RTN","IBCEF2",259,0)
 ;
"RTN","IBCEF2",260,0)
ESGHPNL(IBIFN,COB) ; return employer name and location if bill policy defined by COB is an Employer Sponsored Group Health Plan
"RTN","IBCEF2",261,0)
 Q $$ESGHPNL^IBCEF21(IBIFN,COB) ;Tag moved
"RTN","IBCEF2",262,0)
 ;
"RTN","IBCEF2",263,0)
AMTOUT(A,B,C,IBXSAVE) ; format output amount
"RTN","IBCEF2",264,0)
 ;
"RTN","IBCEF2",265,0)
 N Z,K,IBZ,IBARR K IBXDATA S (IBZ,K)=0,IBARR="IBXSAVE("""_A_""")" F  S IBZ=$O(@IBARR@(IBZ)) Q:'IBZ  S K=K+1,Z=0 F  S Z=$O(@IBARR@(IBZ,Z)) Q:'Z  I $P($G(@IBARR@(IBZ,Z,B)),U,C) S IBXDATA(K)=$$DOLLAR^IBCEFG1($G(IBXDATA(K))+$P(@IBARR@(IBZ,Z,B),U,C))
"RTN","IBCEF2",266,0)
 Q
"RTN","IBCEF21")
0^99^B25961485^B23973664
"RTN","IBCEF21",1,0)
IBCEF21 ;ALB/TMP - FORMATTER SPECIFIC BILL FUNCTIONS CONTINUED ; 3/9/11 1:12pm
"RTN","IBCEF21",2,0)
 ;;2.0;INTEGRATED BILLING;**51,296,371,389,448,516,592**;21-MAR-94;Build 58
"RTN","IBCEF21",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEF21",4,0)
 ;
"RTN","IBCEF21",5,0)
COID(IBIFN) ; Claim office ID
"RTN","IBCEF21",6,0)
 N IBCOID,IBCOID1,IBIN
"RTN","IBCEF21",7,0)
 S IBIN=$$CURR^IBCEF2(IBIFN),IBCOID1="",IBCOID=$P($$ADDRESS^IBCNSC0(IBIN,.11,5),U,11)
"RTN","IBCEF21",8,0)
 ;
"RTN","IBCEF21",9,0)
 I IBIN D
"RTN","IBCEF21",10,0)
 . I $D(^IBA(364.2,"C",IBIFN)) S IBCOID1=$P($$ADDRESS^IBCNSC0(IBIN,.18,5),U,11) Q  ;Rx
"RTN","IBCEF21",11,0)
 . I $P($G(^DGCR(399,IBIFN,0)),U,5)<3 S IBCOID1=$P($$ADDRESS^IBCNSC0(IBIN,.12,5),U,11) Q  ;Inpt
"RTN","IBCEF21",12,0)
 . I $P($G(^DGCR(399,IBIFN,0)),U,5)'<3 S IBCOID1=$P($$ADDRESS^IBCNSC0(IBIN,.16,5),U,11) Q  ;Outpt
"RTN","IBCEF21",13,0)
 . ;JWS;IB*2.0*592;Dental insurance mailing address info
"RTN","IBCEF21",14,0)
 . I $$FT^IBCEF(IBIFN)=7 S IBCOID1=$P($$ADDRESS^IBCNSC0(IBIN,.19,11),U,11) Q  ;Dental
"RTN","IBCEF21",15,0)
 ;
"RTN","IBCEF21",16,0)
 Q $S(IBCOID1'="":IBCOID1,1:IBCOID)
"RTN","IBCEF21",17,0)
 ;
"RTN","IBCEF21",18,0)
ESGHPST(IBIFN,COB) ; return insureds employment status if the bill policy defined by COB is an Employer Sponsored Group Health Plan
"RTN","IBCEF21",19,0)
 ; ESGHP FLAG (2.312,2.1) ^ the employment status (2.312,2.11)
"RTN","IBCEF21",20,0)
 ;
"RTN","IBCEF21",21,0)
 N PPOL,DFN,X,Y S Y=""
"RTN","IBCEF21",22,0)
 S PPOL=$$PPOL^IBCEF2($G(IBIFN),$G(COB)),DFN=$P($G(^DGCR(399,+$G(IBIFN),0)),U,2)
"RTN","IBCEF21",23,0)
 I +PPOL,+DFN S X=$G(^DPT(DFN,.312,+PPOL,2)) S Y=+$P(X,U,10)_U_$P(X,U,11)
"RTN","IBCEF21",24,0)
 Q Y
"RTN","IBCEF21",25,0)
 ;
"RTN","IBCEF21",26,0)
ESGHPNL(IBIFN,COB) ; return employer name and location if the bill policy defined by COB is an Employer Sponsored Group Health Plan
"RTN","IBCEF21",27,0)
 ; ESGHP FLAG (2.312,2.1) ^ employer name (2.312,2.015) ^ employer city (2.312,2.05) 
"RTN","IBCEF21",28,0)
 ;                        ^ employer state abbr (2.312,2.06) ^ employer state ifn  (2.312,2.06)
"RTN","IBCEF21",29,0)
 ;
"RTN","IBCEF21",30,0)
 N PPOL,DFN,X,Y S Y=""
"RTN","IBCEF21",31,0)
 S PPOL=$$PPOL^IBCEF2($G(IBIFN),$G(COB)),DFN=$P($G(^DGCR(399,+$G(IBIFN),0)),U,2)
"RTN","IBCEF21",32,0)
 I +PPOL,+DFN S X=$G(^DPT(DFN,.312,+PPOL,2)) S Y=+$P(X,U,10)_U_$P(X,U,9)_U_$P(X,U,5)_U_$P($G(^DIC(5,+$P(X,U,6),0)),U,2)_U_$P(X,U,6)
"RTN","IBCEF21",33,0)
 Q Y
"RTN","IBCEF21",34,0)
 ;
"RTN","IBCEF21",35,0)
REMARKS(IBIFN) ; Compile array of bill remarks
"RTN","IBCEF21",36,0)
 ;IBIFN = bill ien
"RTN","IBCEF21",37,0)
 N Z,Z0,Z1,IBARRAY,IBSM
"RTN","IBCEF21",38,0)
 S Z=0
"RTN","IBCEF21",39,0)
 ;S:$P($G(^DGCR(399,IBIFN,"U1")),U,2) Z=Z+1,Z0=$P(^("U1"),U,2),IBXDATA(Z)="OFFSET AMOUNT: "_"$"_+$P(Z0,".")_"."_$E($P(Z0,".",2)_"00",1,2)
"RTN","IBCEF21",40,0)
 S:$P($G(^DGCR(399,IBIFN,"U1")),U,8)'="" Z=Z+1,IBXDATA(Z)=$P(^("U1"),U,8) ;Bill comment on bill
"RTN","IBCEF21",41,0)
 S Z0=$G(^DGCR(399,IBIFN,0)),Z1=$G(^DGCR(399.3,+$P(Z0,U,7),0))
"RTN","IBCEF21",42,0)
 D SET^IBCSC5B(IBIFN,.IBARRAY)
"RTN","IBCEF21",43,0)
 I $P($G(IBARRAY),U,2) D  ;Prosthetics
"RTN","IBCEF21",44,0)
 . S Z0=0 F  S Z0=$O(IBARRAY(Z0)) Q:Z0=""  S Z1=0 F  S Z1=$O(IBARRAY(Z0,Z1)) Q:'Z1  S Z=Z+1,IBXDATA(Z)="Prosthetic: "_$E($$PINB^IBCSC5B(+IBARRAY(Z0,Z1)),1,39)_" "_$E(Z0,4,5)_"/"_$E(Z0,6,7)_"/"_$E(Z0,1,2)
"RTN","IBCEF21",45,0)
 Q
"RTN","IBCEF21",46,0)
 ;
"RTN","IBCEF21",47,0)
CREM(IBIFN) ; Compile array of bill remarks common to every bill
"RTN","IBCEF21",48,0)
 ;IBIFN = bill ien
"RTN","IBCEF21",49,0)
 N Z
"RTN","IBCEF21",50,0)
 S Z=0
"RTN","IBCEF21",51,0)
 S:$P($G(^IBE(350.9,1,1)),U,4)'="" Z=Z+1,IBXDATA(Z)=$P(^(1),U,4) ;Site specific 'every bill' comment
"RTN","IBCEF21",52,0)
 Q
"RTN","IBCEF21",53,0)
 ;
"RTN","IBCEF21",54,0)
ADMDT(IBIFN,NOOUTCK) ; Calculate admission/start of care date/time
"RTN","IBCEF21",55,0)
 ; IBIFN = bill ien
"RTN","IBCEF21",56,0)
 ; NOOUTCK = flag that will:
"RTN","IBCEF21",57,0)
 ;          (1) no check for inpt episode overlap for outpt
"RTN","IBCEF21",58,0)
 ;          (0 or null) performs check for inpt episode overlap for outpt
"RTN","IBCEF21",59,0)
 ;                                      
"RTN","IBCEF21",60,0)
 ; Returns IBXDATA = fileman date format
"RTN","IBCEF21",61,0)
 N Z,Z0,Z1
"RTN","IBCEF21",62,0)
 ;JWS;IB*2.0*592;send Event Date for Admission Date for Dental claims; IA# 2056
"RTN","IBCEF21",63,0)
 I $$FT^IBCEF(IBIFN)=7 S IBXDATA=$$GET1^DIQ(399,IBIFN_",",.03,"I") Q
"RTN","IBCEF21",64,0)
 S Z=$G(^DGCR(399,IBIFN,0)),Z1=$P($G(^("U")),U,20),Z0=$$INPAT^IBCEF(IBIFN,1)
"RTN","IBCEF21",65,0)
 S IBXDATA=$S(Z0&$P(Z,U,8):$P($G(^DGPT(+$P(Z,U,8),0)),U,2),1:"")
"RTN","IBCEF21",66,0)
 S:'IBXDATA IBXDATA=$P(Z,U,3)_$S(Z0&(Z1<25):"."_$E("0",$L(Z1))_Z1,1:"")
"RTN","IBCEF21",67,0)
 ; Check to see if outpt episode (date in event date) overlaps inpt
"RTN","IBCEF21",68,0)
 ;  episode - use admit date if it does
"RTN","IBCEF21",69,0)
 I 'Z0,IBXDATA,'$G(NOOUTCK) D
"RTN","IBCEF21",70,0)
 . N VAINDT,VAIN,DFN
"RTN","IBCEF21",71,0)
 . S VAINDT=IBXDATA,DFN=$P($G(^DGCR(399,IBIFN,0)),U,2)
"RTN","IBCEF21",72,0)
 . D INP^VADPT S IBXDATA=+VAIN(7) S:'IBXDATA IBXDATA=""
"RTN","IBCEF21",73,0)
 I 'IBXDATA,'Z0 S IBXDATA=$$SERVDT^IBCEF(IBIFN,,2)
"RTN","IBCEF21",74,0)
 Q
"RTN","IBCEF21",75,0)
 ;
"RTN","IBCEF21",76,0)
DISDT(IBIFN) ; Calculate discharge date
"RTN","IBCEF21",77,0)
 ; IBIFN = bill ien
"RTN","IBCEF21",78,0)
 N Z,Z0
"RTN","IBCEF21",79,0)
 ;JWS;IB*2.0*592;do not send for Discharge Date for Dental claims
"RTN","IBCEF21",80,0)
 I $$FT^IBCEF(IBIFN)=7 S IBXDATA="" Q
"RTN","IBCEF21",81,0)
 S Z=$$INPAT^IBCEF(IBIFN,1),Z0=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEF21",82,0)
 I Z S IBXDATA=+$G(^DGPT(+$P(Z0,U,8),70)) S:'IBXDATA IBXDATA=$P(Z0,U,16)
"RTN","IBCEF21",83,0)
 I 'Z N VAINDT,VAIN,DFN S DFN=$P($G(^DGCR(399,IBIFN,0)),U,2) D INP^VADPT I VAIN(1) S IBXDATA=+$G(^DGPM(+$P($G(^DGPM(+VAIN(1),0)),U,17),0))
"RTN","IBCEF21",84,0)
 Q
"RTN","IBCEF21",85,0)
 ;
"RTN","IBCEF21",86,0)
INSSECID(IBIFN,TYPE,SEQ) ; Extract subscriber and patient prim/sec ID's
"RTN","IBCEF21",87,0)
 ; IBIFN required
"RTN","IBCEF21",88,0)
 ; TYPE is either "PAT" or "SUB" to indicate we need to extract either
"RTN","IBCEF21",89,0)
 ;          patient or subscriber ID information.  Default="SUB".
"RTN","IBCEF21",90,0)
 ; SEQ is the insurance sequence# (1,2,3).  Default is current ins seq#.
"RTN","IBCEF21",91,0)
 ;
"RTN","IBCEF21",92,0)
 ; Output:
"RTN","IBCEF21",93,0)
 ; Function returns an 8-piece string as follows.
"RTN","IBCEF21",94,0)
 ;   [1] primary qualifier
"RTN","IBCEF21",95,0)
 ;   [2] primary ID
"RTN","IBCEF21",96,0)
 ;   [3] secondary qual(1)
"RTN","IBCEF21",97,0)
 ;   [4] secondary ID(1)
"RTN","IBCEF21",98,0)
 ;   [5] secondary qual(2)
"RTN","IBCEF21",99,0)
 ;   [6] secondary ID(2)
"RTN","IBCEF21",100,0)
 ;   [7] secondary qual(3)
"RTN","IBCEF21",101,0)
 ;   [8] secondary ID(3)
"RTN","IBCEF21",102,0)
 ;
"RTN","IBCEF21",103,0)
 NEW DATA,DFN,POL,IB0,IB5,REL
"RTN","IBCEF21",104,0)
 S DATA=""
"RTN","IBCEF21",105,0)
 S IBIFN=+$G(IBIFN) I 'IBIFN G INSSX
"RTN","IBCEF21",106,0)
 I $G(TYPE)="" S TYPE="SUB"               ; default type of ID's to get
"RTN","IBCEF21",107,0)
 I '$F(".PAT.SUB.","."_TYPE_".") G INSSX
"RTN","IBCEF21",108,0)
 I '$G(SEQ) S SEQ=$$COBN^IBCEF(IBIFN)     ; default current ins seq#
"RTN","IBCEF21",109,0)
 I '$F(".1.2.3.","."_SEQ_".") G INSSX
"RTN","IBCEF21",110,0)
 S DFN=+$P($G(^DGCR(399,IBIFN,0)),U,2) I 'DFN G INSSX
"RTN","IBCEF21",111,0)
 S POL=+$P($G(^DGCR(399,IBIFN,"M")),U,SEQ+11) I 'POL G INSSX
"RTN","IBCEF21",112,0)
 ;IB*2.0*516/baa - Use HIPAA compliant fields
"RTN","IBCEF21",113,0)
 ;S IB0=$G(^DPT(DFN,.312,POL,0)) I IB0="" G INSSX ;516 - baa
"RTN","IBCEF21",114,0)
 S IB0=$$ZND^IBCNS1(DFN,POL) I IB0="" G INSSX  ;516 - baa
"RTN","IBCEF21",115,0)
 S IB5=$G(^DPT(DFN,.312,POL,5))
"RTN","IBCEF21",116,0)
 S REL=+$P(IB0,U,16)                      ; pat rel to insured
"RTN","IBCEF21",117,0)
 S $P(DATA,U,1)="MI"
"RTN","IBCEF21",118,0)
 S $P(DATA,U,2)=$P(IB0,U,2)               ; subscriber primary ID 
"RTN","IBCEF21",119,0)
 S $P(DATA,U,3,8)=$P(IB5,U,2,7)           ; subscriber secondary data
"RTN","IBCEF21",120,0)
 I TYPE="PAT",REL'=1 D
"RTN","IBCEF21",121,0)
 . S $P(DATA,U,2)=$P(IB5,U,1)             ; patient primary ID
"RTN","IBCEF21",122,0)
 . S $P(DATA,U,3,8)=$P(IB5,U,8,13)        ; patient secondary data
"RTN","IBCEF21",123,0)
 . Q
"RTN","IBCEF21",124,0)
 ;
"RTN","IBCEF21",125,0)
 S DATA=$$SCRUB(DATA)     ; scrub the data
"RTN","IBCEF21",126,0)
INSSX ;
"RTN","IBCEF21",127,0)
 Q DATA
"RTN","IBCEF21",128,0)
 ;
"RTN","IBCEF21",129,0)
SCRUB(DATA) ; Scrub the 8-piece string gathered above
"RTN","IBCEF21",130,0)
 NEW PCE
"RTN","IBCEF21",131,0)
 ;
"RTN","IBCEF21",132,0)
 ; make sure you can't have an ID without a qualifier or a qualifier
"RTN","IBCEF21",133,0)
 ; without an ID.  Check all 4 pairs.
"RTN","IBCEF21",134,0)
 F PCE=1,3,5,7 D
"RTN","IBCEF21",135,0)
 . I $P(DATA,U,PCE)'="",$P(DATA,U,PCE+1)'="" Q
"RTN","IBCEF21",136,0)
 . S ($P(DATA,U,PCE),$P(DATA,U,PCE+1))=""
"RTN","IBCEF21",137,0)
 . Q
"RTN","IBCEF21",138,0)
 ;
"RTN","IBCEF21",139,0)
 ; fill in secondary gaps.  If Set1 and Set2 are blank, but Set3 exists
"RTN","IBCEF21",140,0)
 ; then move Set3 to Set1 and delete Set3.
"RTN","IBCEF21",141,0)
 I $P(DATA,U,3)="",$P(DATA,U,5)="",$P(DATA,U,7)'="" D
"RTN","IBCEF21",142,0)
 . S $P(DATA,U,3)=$P(DATA,U,7),$P(DATA,U,4)=$P(DATA,U,8)
"RTN","IBCEF21",143,0)
 . S ($P(DATA,U,7),$P(DATA,U,8))=""
"RTN","IBCEF21",144,0)
 . Q
"RTN","IBCEF21",145,0)
 ;
"RTN","IBCEF21",146,0)
 ; fill in secondary gaps more generically.
"RTN","IBCEF21",147,0)
 ; If Set(n) is blank, but Set(n+1) exists, then move it up.
"RTN","IBCEF21",148,0)
 F PCE=3,5 D
"RTN","IBCEF21",149,0)
 . I $P(DATA,U,PCE)="",$P(DATA,U,PCE+2)'="" D
"RTN","IBCEF21",150,0)
 .. S $P(DATA,U,PCE)=$P(DATA,U,PCE+2)
"RTN","IBCEF21",151,0)
 .. S $P(DATA,U,PCE+1)=$P(DATA,U,PCE+3)
"RTN","IBCEF21",152,0)
 .. S ($P(DATA,U,PCE+2),$P(DATA,U,PCE+3))=""
"RTN","IBCEF21",153,0)
 .. Q
"RTN","IBCEF21",154,0)
 . Q
"RTN","IBCEF21",155,0)
 ;
"RTN","IBCEF21",156,0)
 Q DATA
"RTN","IBCEF21",157,0)
 ;
"RTN","IBCEF3")
0^52^B48678188^B47786755
"RTN","IBCEF3",1,0)
IBCEF3 ;ALB/TMP - FORMATTER SPECIFIC BILL FLD FUNCTIONS ;17-JUNE-96
"RTN","IBCEF3",2,0)
 ;;2.0;INTEGRATED BILLING;**52,84,121,51,152,210,155,348,349,389,488,516,592**;21-MAR-94;Build 58
"RTN","IBCEF3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEF3",4,0)
 ;
"RTN","IBCEF3",5,0)
MPG(PG,FLDS,FORM) ; Set static flds on pages after page 1
"RTN","IBCEF3",6,0)
 ;        for either 1500 or UB
"RTN","IBCEF3",7,0)
 ;  PG = page #
"RTN","IBCEF3",8,0)
 ; FORM= 1 for UB, otherwise for 1500
"RTN","IBCEF3",9,0)
 ;  FLDS: array passed by reference and containing lines OR
"RTN","IBCEF3",10,0)
 ;        line/column from pg 1 to repeat on subsequent pages
"RTN","IBCEF3",11,0)
 ;        Format: FLDS(LINE,COL)  or  FLDS(LINE) for whole line
"RTN","IBCEF3",12,0)
 ;   CMS-1500:        LINES 1-5,7-43,57 from col 1 to 50, 58-63
"RTN","IBCEF3",13,0)
 ;         UB:        see CKPGUB for lines and columns
"RTN","IBCEF3",14,0)
 ;
"RTN","IBCEF3",15,0)
 N Z,Z0,Z1,LPG
"RTN","IBCEF3",16,0)
 S FORM=$S($G(FORM)=1:3,1:2)
"RTN","IBCEF3",17,0)
 ;JRA IB*2.0*592 Treat Dental Form 7 (J430D) same as the 1500
"RTN","IBCEF3",18,0)
 ;I FORM=2 D  ; print page # on each pg, totals on last page of 1500  ;JRA IB*2.0*592 ';'
"RTN","IBCEF3",19,0)
 I FORM=2!(FORM=7) D  ; print page # on each pg, totals on last page of 1500 (or J430D)  ;JRA IB*2.0*592
"RTN","IBCEF3",20,0)
 . S LPG=+$O(^TMP("IBXDATA",$J,IBXREC,""),-1)
"RTN","IBCEF3",21,0)
 . S Z="[Page "_PG_" of "_LPG_"]"
"RTN","IBCEF3",22,0)
 . S Z=$$FO^IBCNEUT1(Z,17,"R")
"RTN","IBCEF3",23,0)
 . D SETGBL^IBCEFG(PG,6,61,Z,.IBXSIZE)
"RTN","IBCEF3",24,0)
 . I PG=2 S Z=$P(Z,"[",1)_"[Page 1 of "_LPG_"]" D SETGBL^IBCEFG(1,6,61,Z,.IBXSIZE)
"RTN","IBCEF3",25,0)
 . I LPG=PG D
"RTN","IBCEF3",26,0)
 .. ;
"RTN","IBCEF3",27,0)
 .. ; esg - IB*2*348 - update dollar format for last page of 1500
"RTN","IBCEF3",28,0)
 .. ;
"RTN","IBCEF3",29,0)
 .. D SETGBL^IBCEFG(PG,57,51,$$DOL^IBCEF77($G(IBXSAVE("TOT")),9),.IBXSIZE)
"RTN","IBCEF3",30,0)
 .. D SETGBL^IBCEFG(PG,57,62,$$DOL^IBCEF77($G(IBXSAVE("PAID")),8),.IBXSIZE)
"RTN","IBCEF3",31,0)
 .. ;IB*2.0*516/DRF - Blank Box 30 on last page of multi-page claims
"RTN","IBCEF3",32,0)
 .. ;D SETGBL^IBCEFG(PG,57,71,$$DOL^IBCEF77($G(IBXSAVE("BDUE")),8),.IBXSIZE)
"RTN","IBCEF3",33,0)
 .. K IBXSAVE("PTOT"),IBXSAVE("TOT"),IBXSAVE("BDUE"),IBXSAVE("PAID")
"RTN","IBCEF3",34,0)
 ;
"RTN","IBCEF3",35,0)
 S Z=0 F  S Z=$O(FLDS(Z)) Q:'Z  D
"RTN","IBCEF3",36,0)
 . I $O(FLDS(Z,""))="" D  Q  ;repeats line
"RTN","IBCEF3",37,0)
 .. S Z0=0 F  S Z0=$O(^TMP("IBXDATA",$J,IBXREC,1,Z,Z0)) Q:'Z0  S Z1=$G(^(Z0)) I Z1'="" D SETGBL^IBCEFG(PG,Z,Z0,Z1,.IBXSIZE)
"RTN","IBCEF3",38,0)
 . S Z0=0 F  S Z0=$O(FLDS(Z,Z0)) Q:'Z0  S Z1=$G(^TMP("IBXDATA",$J,IBXREC,1,Z,Z0)) I Z1'="" D SETGBL^IBCEFG(PG,Z,Z0,Z1,.IBXSIZE)
"RTN","IBCEF3",39,0)
 . I FORM=2,LPG'=PG D
"RTN","IBCEF3",40,0)
 .. D SETGBL^IBCEFG(PG,57,51,"",.IBXSIZE)
"RTN","IBCEF3",41,0)
 .. D SETGBL^IBCEFG(PG,57,71,"",.IBXSIZE)
"RTN","IBCEF3",42,0)
 Q
"RTN","IBCEF3",43,0)
 ;
"RTN","IBCEF3",44,0)
NONSERV(Z,Z0) ; Set variable if non-service/non-text data is present for box
"RTN","IBCEF3",45,0)
 ;  24 of CMS-1500
"RTN","IBCEF3",46,0)
 ; Z = sequence of IBXSAVE being processed
"RTN","IBCEF3",47,0)
 ; Z0 = sequnce within IBXDATA to indicate actual line #
"RTN","IBCEF3",48,0)
 I $P(IBXSAVE("BOX24",Z),U)="" S IBXSAVE("NON-SERV",Z0)=""
"RTN","IBCEF3",49,0)
 Q
"RTN","IBCEF3",50,0)
 ;
"RTN","IBCEF3",51,0)
PG(VAL,LNCT) ;Set next pg for CMS-1500 lines
"RTN","IBCEF3",52,0)
 ;VAL = value of fld
"RTN","IBCEF3",53,0)
 ;LNCT = line # from IBXSAVE("BOX24") array
"RTN","IBCEF3",54,0)
 N IBP,IBL
"RTN","IBCEF3",55,0)
 S IBP=LNCT\12+(LNCT#12>0),IBL=LNCT-(12*(IBP-1))-1
"RTN","IBCEF3",56,0)
 I IBL'<0 S VAL=$$FORMAT(VAL,$G(IBXLOOP("IBX0")),$G(IBXDA)) D SETGBL^IBCEFG(IBP,IBXLN+IBL,IBXCOL,VAL,.IBXSIZE)
"RTN","IBCEF3",57,0)
 K IBXDATA(LNCT)
"RTN","IBCEF3",58,0)
 Q
"RTN","IBCEF3",59,0)
 ;
"RTN","IBCEF3",60,0)
MPGUB(PG,OFFSET,VAL,IBLN,IBCOL,NOFORM) ; Set up pages > 1 for UB overflows
"RTN","IBCEF3",61,0)
 ; PG = Page # to set (REQUIRED)
"RTN","IBCEF3",62,0)
 ; OFFSET = offset from first line this should be extracted into
"RTN","IBCEF3",63,0)
 ;          0 = first line (REQUIRED)
"RTN","IBCEF3",64,0)
 ; VAL = value to set (REQUIRED)
"RTN","IBCEF3",65,0)
 ; IBLN = line to set data at (if null, uses IBXLN)
"RTN","IBCEF3",66,0)
 ; IBCOL = column to set data at (if null, uses IBXCOL)
"RTN","IBCEF3",67,0)
 ; NOFORM = don't format, just output data as passed
"RTN","IBCEF3",68,0)
 ; Assumes formatter IBXLN,IBXCOL variables exist
"RTN","IBCEF3",69,0)
 ;
"RTN","IBCEF3",70,0)
 I $G(IBLN)="" S IBLN=IBXLN
"RTN","IBCEF3",71,0)
 I $G(IBCOL)="" S IBCOL=IBXCOL
"RTN","IBCEF3",72,0)
 S:'$G(NOFORM) VAL=$$FORMAT(VAL,$G(IBXLOOP("IBX0")),$G(IBXDA))
"RTN","IBCEF3",73,0)
 D SETGBL^IBCEFG(PG,IBLN+OFFSET,IBCOL,VAL,.IBXSIZE)
"RTN","IBCEF3",74,0)
 Q
"RTN","IBCEF3",75,0)
 ;
"RTN","IBCEF3",76,0)
CKREV(CT,VAL) ; Check too many rev code lines to fit on page
"RTN","IBCEF3",77,0)
 ; This procedure is only called when CT>22 (i.e. 23 or more)
"RTN","IBCEF3",78,0)
 ;
"RTN","IBCEF3",79,0)
 D MPGUB((CT-1)\22+1,CT-1#22,VAL) ; 22 codes on a single page
"RTN","IBCEF3",80,0)
 Q
"RTN","IBCEF3",81,0)
 ;
"RTN","IBCEF3",82,0)
CKPGUB ; Check to see if multiple UB pages are needed then populate
"RTN","IBCEF3",83,0)
 ; static flds from page 1, add page numbers
"RTN","IBCEF3",84,0)
 ;
"RTN","IBCEF3",85,0)
 N FLDS,LPG,IBPG,IBP,Z,Z0,TOT1,TOT2
"RTN","IBCEF3",86,0)
 ;
"RTN","IBCEF3",87,0)
 S LPG=$O(^TMP("IBXDATA",$J,IBXREC,""),-1),IBP=0
"RTN","IBCEF3",88,0)
 S Z="" F  S Z=$O(^TMP("IBXDATA",$J,IBXREC,LPG,Z),-1) Q:'Z  S Z0=0 F  S Z0=$O(^TMP("IBXDATA",$J,IBXREC,LPG,Z,Z0)) Q:'Z0  I $G(^(Z0))'="" S IBP=1 Q
"RTN","IBCEF3",89,0)
 I 'IBP K ^TMP("IBXDATA",$J,IBXREC,LPG) S LPG=$O(^TMP("IBXDATA",$J,IBXREC,""),-1) Q:LPG=1
"RTN","IBCEF3",90,0)
 ;
"RTN","IBCEF3",91,0)
 ; Static flds
"RTN","IBCEF3",92,0)
 F Z=2:1:7 S FLDS(Z)=""    ; FL-1 thru FL-9
"RTN","IBCEF3",93,0)
 F Z=1,10,13,19,22,25,28,31 S FLDS(9,Z)=""    ; FL-10 thru FL-17
"RTN","IBCEF3",94,0)
 F Z=13:1:17 S FLDS(Z,1)=""   ; payer address in FL-38
"RTN","IBCEF3",95,0)
 S FLDS(41,46)=""     ; creation date
"RTN","IBCEF3",96,0)
 F Z=42,43,44,45,47,48,49,51,52,53 S FLDS(Z)=""   ; FL-50 thru FL-65
"RTN","IBCEF3",97,0)
 F Z=57,59,61,63 S (FLDS(Z,59),FLDS(Z,72),FLDS(Z,74))=""   ; FL-76-79 ID's
"RTN","IBCEF3",98,0)
 F Z=58,60,62,64 S (FLDS(Z,53),FLDS(Z,71))=""    ; FL-76-79 Names
"RTN","IBCEF3",99,0)
 ;
"RTN","IBCEF3",100,0)
 F IBPG=1:1:LPG D
"RTN","IBCEF3",101,0)
 . ; Add pg # to last line of rev codes if multiple pages
"RTN","IBCEF3",102,0)
 . N IB,IBP
"RTN","IBCEF3",103,0)
 . S IB=$G(^TMP("IBXDATA",$J,IBXREC,IBPG,41,6))
"RTN","IBCEF3",104,0)
 . D MPGUB(IBPG,0,IBPG,41,10,1)
"RTN","IBCEF3",105,0)
 . D MPGUB(IBPG,0,LPG,41,16,1)
"RTN","IBCEF3",106,0)
 . D:IBPG>1 MPG(IBPG,.FLDS,1)
"RTN","IBCEF3",107,0)
 . Q
"RTN","IBCEF3",108,0)
 ; print totals on line 41 of the last page
"RTN","IBCEF3",109,0)
 S (TOT1,TOT2)=0
"RTN","IBCEF3",110,0)
 F Z=1:1 Q:'$D(^TMP($J,"IBC-RC",Z))  S Z0=^(Z) I +Z0=1 S TOT1=TOT1+$P(Z0,U,7),TOT2=TOT2+$P(Z0,U,8)
"RTN","IBCEF3",111,0)
 ; Make sure totals are only 9 digits => baa IB*2.0*488
"RTN","IBCEF3",112,0)
 S TOT1=$$DOL^IBCEF77(TOT1,9)
"RTN","IBCEF3",113,0)
 S TOT1=$E(TOT1,1,9)
"RTN","IBCEF3",114,0)
 S TOT2=$$DOL^IBCEF77(TOT2,9)
"RTN","IBCEF3",115,0)
 S TOT2=$E(TOT2,1,9)
"RTN","IBCEF3",116,0)
 D MPGUB(IBPG,0,"0001",41,1,1)
"RTN","IBCEF3",117,0)
 D MPGUB(IBPG,0,TOT1,41,61,1)
"RTN","IBCEF3",118,0)
 D MPGUB(IBPG,0,TOT2,41,71,1)
"RTN","IBCEF3",119,0)
 ;End changes => baa IB*2.0*488
"RTN","IBCEF3",120,0)
 Q
"RTN","IBCEF3",121,0)
 ;
"RTN","IBCEF3",122,0)
HCPC(R) ;FORMAT HCPC fld FOR UB (returns formatted value)
"RTN","IBCEF3",123,0)
 ; R = flag for type of fld (1/2/3) being printed in rev code block
"RTN","IBCEF3",124,0)
 Q R  ;No longer used as of patch IB*2.0*51
"RTN","IBCEF3",125,0)
 ;
"RTN","IBCEF3",126,0)
PROS(IBIFN) ; Extract billable prosthetics for 837
"RTN","IBCEF3",127,0)
 N IBARRAY,Z,Z0,CT,PROS
"RTN","IBCEF3",128,0)
 D SET^IBCSC5B(IBIFN,.IBARRAY)
"RTN","IBCEF3",129,0)
 I '$P(IBARRAY,U,2) S CT="" G PROSQ
"RTN","IBCEF3",130,0)
 S Z="",CT=0
"RTN","IBCEF3",131,0)
 F  S Z=$O(IBARRAY(Z)) Q:Z=""  S Z0="" F  S Z0=$O(IBARRAY(Z,Z0)) Q:Z0=""  S CT=CT+1 D
"RTN","IBCEF3",132,0)
 .S PROS=$$PINB^IBCSC5B(+IBARRAY(Z,Z0)) ; P389 removed p2 - item ptr file 661
"RTN","IBCEF3",133,0)
 .;date^^short descr^entry # in file 362.5
"RTN","IBCEF3",134,0)
 .S IBXDATA(CT)=Z_U_U_PROS_U_+IBARRAY(Z,Z0)
"RTN","IBCEF3",135,0)
PROSQ Q CT
"RTN","IBCEF3",136,0)
 ;
"RTN","IBCEF3",137,0)
B24(IBXSV,IBIFN,IBNOSHOW) ; Code to execute to set up IBXSV("BOX24") for
"RTN","IBCEF3",138,0)
 ;   print or IBXSAVE("OUTPT") for transmit - called by output formatter
"RTN","IBCEF3",139,0)
 ; IBNOSHOW = 1 if not to show error/warning text lines
"RTN","IBCEF3",140,0)
 ; Pass IBXSV by reference
"RTN","IBCEF3",141,0)
 N IBSUB
"RTN","IBCEF3",142,0)
 S IBSUB=$S('$G(^TMP("IBTX",$J,IBIFN)):"BOX24",1:"OUTPT")
"RTN","IBCEF3",143,0)
 K IBXSV(IBSUB)
"RTN","IBCEF3",144,0)
 I '$D(IBIFN) S IBIFN=$G(IBXIEN)
"RTN","IBCEF3",145,0)
 I IBIFN D F^IBCEF("N-HCFA 1500 SERVICE"_$S(IBSUB["24":"S (PRINT",1:" LINE (EDI")_")",,,IBIFN)
"RTN","IBCEF3",146,0)
 I $S(IBSUB'["24":1,1:'$G(IBNOSHOW)) D
"RTN","IBCEF3",147,0)
 . M IBXSV(IBSUB)=IBXDATA
"RTN","IBCEF3",148,0)
 E  D
"RTN","IBCEF3",149,0)
 . N Z,CT
"RTN","IBCEF3",150,0)
 . S (Z,CT)=0 F  S Z=$O(IBXDATA(Z)) Q:'Z  I '$D(IBXDATA(Z,"ARX")) S CT=CT+1 M IBXSV(IBSUB,CT)=IBXDATA(Z)
"RTN","IBCEF3",151,0)
 Q
"RTN","IBCEF3",152,0)
 ;
"RTN","IBCEF3",153,0)
 ; esg - 11/14/03 - Moved the below functions due to space constraints
"RTN","IBCEF3",154,0)
 ;
"RTN","IBCEF3",155,0)
ALLTYP(IBIFN) Q $$ALLTYP^IBCEF31(IBIFN)
"RTN","IBCEF3",156,0)
INSTYP(IBIFN,SEQ) Q $$INSTYP^IBCEF31(IBIFN,$G(SEQ))
"RTN","IBCEF3",157,0)
POLTYP(IBIFN,IBSEQ) Q $$POLTYP^IBCEF31(IBIFN,$G(IBSEQ))
"RTN","IBCEF3",158,0)
ALLPTYP(IBIFN) Q $$ALLPTYP^IBCEF31(IBIFN)
"RTN","IBCEF3",159,0)
 ;
"RTN","IBCEF3",160,0)
FILL(Z) ;
"RTN","IBCEF3",161,0)
 Q
"RTN","IBCEF3",162,0)
 ;
"RTN","IBCEF3",163,0)
 ;  ***** 
"RTN","IBCEF3",164,0)
 ;  The following code performs the multi-page set up for
"RTN","IBCEF3",165,0)
 ;  printing overflow data on the UB
"RTN","IBCEF3",166,0)
 ;  *****
"RTN","IBCEF3",167,0)
 ;
"RTN","IBCEF3",168,0)
XPROC(DATA,CT) ; Output any UB procedures after 6 on new page(s)
"RTN","IBCEF3",169,0)
 ; DATA = output data from IBXSAVE("PROC",CT)
"RTN","IBCEF3",170,0)
 ; CT = array sequence # of the procedure being output
"RTN","IBCEF3",171,0)
 ; Only used for local prints
"RTN","IBCEF3",172,0)
 N OFFSET,PG,COL,PRCODE,Q
"RTN","IBCEF3",173,0)
 S Q=(CT-1)\3#2,OFFSET=$S('Q:0,1:2)
"RTN","IBCEF3",174,0)
 S PG=(CT-1)\6+1,COL=1+(CT-1#3*15)
"RTN","IBCEF3",175,0)
 D MPGUB(PG,OFFSET,$P(DATA,U,1),58,COL)
"RTN","IBCEF3",176,0)
 D MPGUB(PG,OFFSET,$P(DATA,U,2),58,COL+9)
"RTN","IBCEF3",177,0)
 Q
"RTN","IBCEF3",178,0)
 ;
"RTN","IBCEF3",179,0)
XDIAG(DATA,CT) ; Output any UB other diagnoses after 8 on new page(s)
"RTN","IBCEF3",180,0)
 ; DATA = output data from IBXSAVE("DX",CT)
"RTN","IBCEF3",181,0)
 ; CT = array sequence # of the diagnosis being output
"RTN","IBCEF3",182,0)
 ; Only used for local prints
"RTN","IBCEF3",183,0)
 N COL,PG
"RTN","IBCEF3",184,0)
 S PG=(CT-1)\8+1,COL=8+(CT-1#9*7)
"RTN","IBCEF3",185,0)
 S DATA=$P($$ICD9^IBACSV(+DATA),U,1)
"RTN","IBCEF3",186,0)
 D MPGUB(PG,0,DATA,56,COL)
"RTN","IBCEF3",187,0)
 Q
"RTN","IBCEF3",188,0)
 ;
"RTN","IBCEF3",189,0)
XVAL(DATA,CT) ; Output any UB value codes after 12 on new page(s)
"RTN","IBCEF3",190,0)
 ; DATA = output data from IBXSAVE("VC",CT)
"RTN","IBCEF3",191,0)
 ; CT = array sequence # of the value code being output
"RTN","IBCEF3",192,0)
 ;
"RTN","IBCEF3",193,0)
 N COL,PG,OFFSET
"RTN","IBCEF3",194,0)
 S PG=(CT-1)\12+1,COL=44+(CT-1#3*13),OFFSET=(CT-(12*(PG-1))-1)\3
"RTN","IBCEF3",195,0)
 D MPGUB(PG,OFFSET,$P(DATA,U,1),14,COL)
"RTN","IBCEF3",196,0)
 D MPGUB(PG,OFFSET,$P(DATA,U,2),14,COL+3)
"RTN","IBCEF3",197,0)
 Q
"RTN","IBCEF3",198,0)
 ;
"RTN","IBCEF3",199,0)
XCC(DATA,CT) ; Output any UB condition codes after 11 on new page(s)
"RTN","IBCEF3",200,0)
 ; 11 condition codes per page, starting columns 34 thru 64
"RTN","IBCEF3",201,0)
 ; DATA = output data from IBXSAVE("CC",CT)
"RTN","IBCEF3",202,0)
 ; CT = array sequence # of the condition code being output
"RTN","IBCEF3",203,0)
 ;
"RTN","IBCEF3",204,0)
 N COL,PG
"RTN","IBCEF3",205,0)
 S PG=(CT-1)\11+1,COL=34+(CT-1#11*3)
"RTN","IBCEF3",206,0)
 D MPGUB(PG,0,DATA,9,COL)
"RTN","IBCEF3",207,0)
 Q
"RTN","IBCEF3",208,0)
 ;
"RTN","IBCEF3",209,0)
XOCC(DATA,CT,FL) ; Output any UB occurrence codes after 8 (2 per form
"RTN","IBCEF3",210,0)
 ;  locators 31-34) on new page(s)
"RTN","IBCEF3",211,0)
 ; DATA = data from IBXSAVE("OCC",z) to be output
"RTN","IBCEF3",212,0)
 ; CT = array sequence # of occurrence code being output
"RTN","IBCEF3",213,0)
 ; FL = # of form locator being populated with the occ code
"RTN","IBCEF3",214,0)
 ;
"RTN","IBCEF3",215,0)
 N COL,PG,OFFSET
"RTN","IBCEF3",216,0)
 S PG=(CT-1)\2+1,COL=1+((FL-31)*10),OFFSET=$S(CT#2:0,1:1)
"RTN","IBCEF3",217,0)
 D MPGUB(PG,OFFSET,$P(DATA,U,1),11,COL)
"RTN","IBCEF3",218,0)
 D MPGUB(PG,OFFSET,$P(DATA,U,2),11,COL+4)
"RTN","IBCEF3",219,0)
 Q
"RTN","IBCEF3",220,0)
 ;
"RTN","IBCEF3",221,0)
XOCCS(DATA,CT,FL) ; Output any UB occurrence span codes after 4 on new page(s)
"RTN","IBCEF3",222,0)
 ; DATA = data from IBXSAVE("OCCS",z) to be output
"RTN","IBCEF3",223,0)
 ; CT = array sequence # of occurrence span code being output
"RTN","IBCEF3",224,0)
 ; FL = # of form locator being populated (either FL 35 or 36)
"RTN","IBCEF3",225,0)
 ;
"RTN","IBCEF3",226,0)
 N COL,PG,OFFSET
"RTN","IBCEF3",227,0)
 S PG=(CT-1)\2+1,OFFSET=$S(CT#2:0,1:1)
"RTN","IBCEF3",228,0)
 S COL=41+((FL-35)*17)
"RTN","IBCEF3",229,0)
 D MPGUB(PG,OFFSET,$P(DATA,U,1),11,COL)
"RTN","IBCEF3",230,0)
 D MPGUB(PG,OFFSET,$P(DATA,U,2),11,COL+4)
"RTN","IBCEF3",231,0)
 D MPGUB(PG,OFFSET,$P(DATA,U,3),11,COL+11)
"RTN","IBCEF3",232,0)
 Q
"RTN","IBCEF3",233,0)
 ;
"RTN","IBCEF3",234,0)
FORMAT(VAL,IBX0,IBXDA) ;
"RTN","IBCEF3",235,0)
 I IBX0'="",IBXDA S VAL=$$FORMAT^IBCEFG(VAL,$P($G(^IBA(364.6,+IBXDA,0)),U,9),$P(IBX0,U,7),IBX0)
"RTN","IBCEF3",236,0)
 Q VAL
"RTN","IBCEF3",237,0)
 ;
"RTN","IBCEF3",238,0)
OUTPDT(IBIFN,IBXSAVE,IBXDATA) ; Returns outpatient service to date
"RTN","IBCEF3",239,0)
 ;  formatted CCYYMMDD for UB 837
"RTN","IBCEF3",240,0)
 ; IBIFN = ien of bill (file 399)
"RTN","IBCEF3",241,0)
 ; IBXSAVE = pass by reference for IBXSAVE("INPT") and IBXSAVE("DATE")
"RTN","IBCEF3",242,0)
 ; IBXDATA = array with formatted date or each line item - CCYYMMDD
"RTN","IBCEF3",243,0)
 N Z
"RTN","IBCEF3",244,0)
 S Z=0 F  S Z=$O(IBXSAVE("INPT",Z)) Q:'Z  S IBXDATA(Z)=$S($P(IBXSAVE("INPT",Z),U,10):$$DT^IBCEFG1($P(IBXSAVE("INPT",Z),U,10),,"D8"),1:IBXSAVE("DATE"))
"RTN","IBCEF3",245,0)
 K IBXSAVE("DATE")
"RTN","IBCEF3",246,0)
 Q
"RTN","IBCEF3",247,0)
 ;
"RTN","IBCEF31")
0^53^B15832177^B14588723
"RTN","IBCEF31",1,0)
IBCEF31 ;ALB/ESG - FORMATTER SPECIFIC BILL FLD FUNCTIONS - CONT ;14-NOV-03
"RTN","IBCEF31",2,0)
 ;;2.0;INTEGRATED BILLING;**155,296,349,400,432,488,516,592**;21-MAR-94;Build 58
"RTN","IBCEF31",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEF31",4,0)
 ;
"RTN","IBCEF31",5,0)
 Q
"RTN","IBCEF31",6,0)
 ;
"RTN","IBCEF31",7,0)
ALLTYP(IBIFN) ; returns codes to translate to ALL ins types on a bill
"RTN","IBCEF31",8,0)
 ; IBIFN = ien of bill
"RTN","IBCEF31",9,0)
 N IBX,Z
"RTN","IBCEF31",10,0)
 F Z=1:1:3 S $P(IBX,U,Z)=$$INSTYP(IBIFN,Z)
"RTN","IBCEF31",11,0)
 ; IBX = primary code^secondary code^tertiary code
"RTN","IBCEF31",12,0)
 Q IBX
"RTN","IBCEF31",13,0)
 ;
"RTN","IBCEF31",14,0)
INSTYP(IBIFN,SEQ) ; Returns insurance type code for an ins on a bill
"RTN","IBCEF31",15,0)
 ; IBIFN = ien of bill
"RTN","IBCEF31",16,0)
 ; SEQ = sequence (1,2,3) of insurance wanted - prim, second, tert
"RTN","IBCEF31",17,0)
 ;       Default is current insurance co
"RTN","IBCEF31",18,0)
 ;
"RTN","IBCEF31",19,0)
 N IBA,Z
"RTN","IBCEF31",20,0)
 ;
"RTN","IBCEF31",21,0)
 I '$G(SEQ) S SEQ=$$COBN^IBCEF(IBIFN)
"RTN","IBCEF31",22,0)
 S Z=+$G(^DGCR(399,IBIFN,"I"_SEQ))
"RTN","IBCEF31",23,0)
 ;Codes 1:HMO;2:COMMERCIAL;3:MEDICARE;4:MEDICAID;5:GROUP POLICY;9:OTHER
"RTN","IBCEF31",24,0)
 I Z D
"RTN","IBCEF31",25,0)
 . S IBA=$P($G(^DIC(36,Z,3)),U,9)
"RTN","IBCEF31",26,0)
 . I $$MCRWNR^IBEFUNC(Z) S IBA=3   ; force Medicare (WNR) definition to be correct
"RTN","IBCEF31",27,0)
 . I IBA="" S IBA=5 ;Default is group policy - 5 if blank
"RTN","IBCEF31",28,0)
 ;
"RTN","IBCEF31",29,0)
 Q $G(IBA)
"RTN","IBCEF31",30,0)
 ;
"RTN","IBCEF31",31,0)
POLTYP(IBIFN,IBSEQ) ; Returns ins electronic policy type code for one
"RTN","IBCEF31",32,0)
 ;   ins policy on a bill
"RTN","IBCEF31",33,0)
 ; IBIFN = ien of bill
"RTN","IBCEF31",34,0)
 ; IBSEQ = sequence (1,2,3) of ins policy wanted - prim, second, tert
"RTN","IBCEF31",35,0)
 ;       Default is current insurance co
"RTN","IBCEF31",36,0)
 ;
"RTN","IBCEF31",37,0)
 N IBPLAN,IBPLTYP
"RTN","IBCEF31",38,0)
 ;
"RTN","IBCEF31",39,0)
 I '$G(IBSEQ) S IBSEQ=+$$COBN^IBCEF(IBIFN)
"RTN","IBCEF31",40,0)
 S IBPLAN=$G(^IBA(355.3,+$P($G(^DGCR(399,IBIFN,"I"_IBSEQ)),U,18),0))
"RTN","IBCEF31",41,0)
 S IBPLTYP=$P(IBPLAN,U,15)
"RTN","IBCEF31",42,0)
 ;
"RTN","IBCEF31",43,0)
 ; esg - 06/30/05 - IB*2.0*296 - Force Medicare (WNR) to be correct
"RTN","IBCEF31",44,0)
 ;JRA IB*2.0*592 Treat Dental Form 7 (J430D) the same as CMS-1500
"RTN","IBCEF31",45,0)
 ;I $$WNRBILL^IBEFUNC(IBIFN,IBSEQ),$$FT^IBCEF(IBIFN)=2 S IBPLTYP="MB"   ; CMS-1500 ----> Medicare Part B  ;JRA IB*2.0*592 ';'
"RTN","IBCEF31",46,0)
 ;I $$WNRBILL^IBEFUNC(IBIFN,IBSEQ),$$FT^IBCEF(IBIFN)=3 S IBPLTYP="MA"   ; UB-04 -------> Medicare Part A
"RTN","IBCEF31",47,0)
 N FT S FT=$$FT^IBCEF(IBIFN)  ;JRA IB*2.0*592
"RTN","IBCEF31",48,0)
 I $$WNRBILL^IBEFUNC(IBIFN,IBSEQ),(FT=2!(FT=7)) S IBPLTYP="MB"   ; CMS-1500 ----> Medicare Part B  ;JRA IB*2.0*592 same for J430D
"RTN","IBCEF31",49,0)
 I $$WNRBILL^IBEFUNC(IBIFN,IBSEQ),FT=3 S IBPLTYP="MA"   ; UB-04 -------> Medicare Part A  ;JRA IB*2.0*592 Use 'FT' vs function call
"RTN","IBCEF31",50,0)
 ;
"RTN","IBCEF31",51,0)
 I IBPLTYP="" S IBPLTYP="CI" ;Default is commercial - 'CI'
"RTN","IBCEF31",52,0)
 I IBPLTYP="MX" D
"RTN","IBCEF31",53,0)
 . I $P(IBPLAN,U,14)'="","AB"[$P(IBPLAN,U,14) S IBPLTYP="M"_$P(IBPLAN,U,14) Q
"RTN","IBCEF31",54,0)
 . S IBPLTYP="CI"
"RTN","IBCEF31",55,0)
 Q $G(IBPLTYP)
"RTN","IBCEF31",56,0)
 ;
"RTN","IBCEF31",57,0)
ALLPTYP(IBIFN) ; returns insurance policy type codes for ALL ins on a bill
"RTN","IBCEF31",58,0)
 ; IBIFN = ien of bill
"RTN","IBCEF31",59,0)
 N IBX,Z S IBX=""
"RTN","IBCEF31",60,0)
 F Z=1:1:3 I $D(^DGCR(399,IBIFN,"I"_Z)) S $P(IBX,U,Z)=$$POLTYP(IBIFN,Z)
"RTN","IBCEF31",61,0)
 ; IBX = primary code^secondary code^tertiary code
"RTN","IBCEF31",62,0)
 Q IBX
"RTN","IBCEF31",63,0)
 ;
"RTN","IBCEF31",64,0)
PGDX(DXCNT,IBX0,IBXDA,IBXLN,IBXCOL,IBXSIZE,IBXSAVE) ; Subroutine - Checks for Diagnosis Codes (Dx) beyond 
"RTN","IBCEF31",65,0)
 ; the first four, that relate to the current Dx position passed in DXCNT.
"RTN","IBCEF31",66,0)
 ; This subroutine stores the Diagnosis Codes in output global using display parameters (IBXLN,IBXCOL)
"RTN","IBCEF31",67,0)
 ;  THE PAGE IS ALWAYS 1 NOW SO WE DON'T NEED 4 LINES BELOW  BAA *488*
"RTN","IBCEF31",68,0)
 ; If DXCNT is 1, check for Dx's 5,9,...etc & display on pages 2,3,...etc
"RTN","IBCEF31",69,0)
 ; If DXCNT is 2, check for Dx's 6,10,...etc & display on pages 2,3,...etc
"RTN","IBCEF31",70,0)
 ; If DXCNT is 3, check for Dx's 7,11,...etc & display on pages 2,3,...etc
"RTN","IBCEF31",71,0)
 ; If DXCNT is 4, check for Dx's 8,12,...etc & display on pages 2,3,...etc
"RTN","IBCEF31",72,0)
 ;
"RTN","IBCEF31",73,0)
 ; Input: DXCNT= position of current Dx (from 1 to 4)
"RTN","IBCEF31",74,0)
 ;        IBX0= zero-level of file 364.7 of current Dx
"RTN","IBCEF31",75,0)
 ;        IBXDA= ien# of file 364.6 of current Dx
"RTN","IBCEF31",76,0)
 ;        IBXLN IBXCOL= line# & Column# of current Dx
"RTN","IBCEF31",77,0)
 ;        IBXSIZE= size counter
"RTN","IBCEF31",78,0)
 ;        IBXSAVE("DX")= local array with all Dx's on current bill
"RTN","IBCEF31",79,0)
 ;
"RTN","IBCEF31",80,0)
 ;  For patch *488* 
"RTN","IBCEF31",81,0)
 ;  S DXNM = 12  This is the number of diagnosis on a 1500 form  
"RTN","IBCEF31",82,0)
 ;  S IBPG=1  This is the page number.  All 12 print on page 1
"RTN","IBCEF31",83,0)
 N IBPG,VAL
"RTN","IBCEF31",84,0)
 S IBPG=1
"RTN","IBCEF31",85,0)
 I '$D(IBXSAVE("DX",DXCNT)) Q
"RTN","IBCEF31",86,0)
 S VAL=$P($$ICD9^IBACSV(+IBXSAVE("DX",DXCNT)),U)   ; resolve Dx pointer
"RTN","IBCEF31",87,0)
 S VAL=$$FORMAT^IBCEF3(VAL,$G(IBX0),$G(IBXDA))  ;format Dx value
"RTN","IBCEF31",88,0)
 D SETGBL^IBCEFG(IBPG,IBXLN,IBXCOL,VAL,.IBXSIZE) ;store in output global
"RTN","IBCEF31",89,0)
 Q  ;PGDX
"RTN","IBCEF31",90,0)
 ;
"RTN","IBCEF31",91,0)
DXSV(IB,IBXSAVE) ; output formatter subroutine
"RTN","IBCEF31",92,0)
 ; save off DX codes in IBXSAVE("DX")
"RTN","IBCEF31",93,0)
 N Z,IBCT
"RTN","IBCEF31",94,0)
 S (Z,IBCT)=0
"RTN","IBCEF31",95,0)
 F  S Z=$O(IB(Z)) Q:'Z  I $G(IB(Z)) S IBCT=IBCT+1 M IBXSAVE("DX",IBCT)=IB(Z)
"RTN","IBCEF31",96,0)
 Q
"RTN","IBCEF31",97,0)
 ;
"RTN","IBCEF31",98,0)
AUTRF(IBXIEN,IBL,Z) ; returns auth # and referral# if room for both, separated by a space - IB*2.0*432
"RTN","IBCEF31",99,0)
 ; IBXIEN=  claim ien
"RTN","IBCEF31",100,0)
 ; IBL   =  field length-1 to allow for 1 blank space between numbers (28 for CMS 1500, 30 for UB-04)
"RTN","IBCEF31",101,0)
 ; Z     =  1 for PRIMARY, 2 for SECONDARY, 3 for TERTIARY
"RTN","IBCEF31",102,0)
 ; 
"RTN","IBCEF31",103,0)
 N IBXDATA,IBZ
"RTN","IBCEF31",104,0)
 Q:$G(IBXIEN)="" ""
"RTN","IBCEF31",105,0)
 ; if CMS 1500, find current codes
"RTN","IBCEF31",106,0)
 I $G(Z)="",$G(IBL)=28 S Z=$$COBN^IBCEF(IBXIEN)
"RTN","IBCEF31",107,0)
 Q:$G(Z)="" ""
"RTN","IBCEF31",108,0)
 ; if length not defined, default to shortest
"RTN","IBCEF31",109,0)
 S:IBL="" IBL=28
"RTN","IBCEF31",110,0)
 D F^IBCEF("N-"_$P("PRIMARY^SECONDARY^TERTIARY",U,Z)_" AUTH CODE",,,IBXIEN)
"RTN","IBCEF31",111,0)
 D F^IBCEF("N-"_$P("PRIMARY^SECONDARY^TERTIARY",U,Z)_" REFERRAL NUMBER","IBZ",,IBXIEN)
"RTN","IBCEF31",112,0)
 ; if length of auth and referral combined is too long, only return auth code
"RTN","IBCEF31",113,0)
 Q $S(IBZ="":IBXDATA,IBXDATA="":IBZ,$L(IBXDATA)+$L(IBZ)>IBL:IBXDATA,1:IBXDATA_" "_IBZ)
"RTN","IBCEF31",114,0)
 ;
"RTN","IBCEF31",115,0)
GRPNAME(IBIEN,IBXDATA) ; Populate IBXDATA with the Group Name(s).
"RTN","IBCEF31",116,0)
 ; MRD;IB*2.0*516 - Created this procedure as extract code for
"RTN","IBCEF31",117,0)
 ; ^IBA(364.5,199), N-ALL INSURANCE GROUP NAME.
"RTN","IBCEF31",118,0)
 N A,Z
"RTN","IBCEF31",119,0)
 F Z=1:1:3 I $D(^DGCR(399,IBIEN,"I"_Z)) D
"RTN","IBCEF31",120,0)
 . S IBXDATA(Z)=$$POLICY^IBCEF(IBIEN,15,Z) I IBXDATA(Z)'="" Q
"RTN","IBCEF31",121,0)
 . S A=$$POLICY^IBCEF(IBIEN,1,Z)           ; Pull piece 1, Ins. Type.
"RTN","IBCEF31",122,0)
 . I A'="" S IBXDATA(Z)=$P($G(^DIC(36,+A,0)),U)
"RTN","IBCEF31",123,0)
 . Q
"RTN","IBCEF31",124,0)
 Q
"RTN","IBCEF31",125,0)
 ;
"RTN","IBCEF31",126,0)
GRPNUM(IBXIEN,IBXDATA) ; Populate IBXDATA with the Group Number(s).
"RTN","IBCEF31",127,0)
 ; MRD;IB*2.0*516 - Created this procedure as extract code for
"RTN","IBCEF31",128,0)
 ; ^IBA(364.5,200), N-ALL INSURANCE GROUP NUMBER.
"RTN","IBCEF31",129,0)
 N Z
"RTN","IBCEF31",130,0)
 F Z=1:1:3 I $D(^DGCR(399,IBXIEN,"I"_Z)) S IBXDATA(Z)=$$POLICY^IBCEF(IBXIEN,3,Z)
"RTN","IBCEF31",131,0)
 Q
"RTN","IBCEF31",132,0)
 ;
"RTN","IBCEF4")
0^69^B30113231^B29271038
"RTN","IBCEF4",1,0)
IBCEF4 ;ALB/TMP - MRA/EDI ACTIVATED UTILITIES ;06-FEB-96
"RTN","IBCEF4",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,232,155,296,327,349,592**;21-MAR-94;Build 58
"RTN","IBCEF4",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEF4",4,0)
 ;
"RTN","IBCEF4",5,0)
EDIACTV(IBEDIMRA) ; Returns 0 if EDI or MRA is not active, 
"RTN","IBCEF4",6,0)
 ; otherwise, returns 1
"RTN","IBCEF4",7,0)
 ; IBEDIMRA : 1= checking if EDI is active, 2= checking if MRA is active
"RTN","IBCEF4",8,0)
 N IBEDI
"RTN","IBCEF4",9,0)
 S IBEDI=$P($G(^IBE(350.9,1,8)),U,10)
"RTN","IBCEF4",10,0)
 Q $S('IBEDI:0,IBEDI=3:1,1:IBEDI=IBEDIMRA)
"RTN","IBCEF4",11,0)
 ;
"RTN","IBCEF4",12,0)
RATEOK(IBIFN) ; Returns 1 if rate type of bill IBIFN is transmittable
"RTN","IBCEF4",13,0)
 Q +$P($G(^DGCR(399.3,+$P($G(^DGCR(399,IBIFN,0)),U,7),0)),U,10)
"RTN","IBCEF4",14,0)
 ;
"RTN","IBCEF4",15,0)
INSOK(INS) ; Determine EDI activation status of insurance co
"RTN","IBCEF4",16,0)
 Q +$G(^DIC(36,INS,3))  ;1 = TEST, 2 = LIVE, 0 = NOT ACTIVE FOR EDI
"RTN","IBCEF4",17,0)
 ;
"RTN","IBCEF4",18,0)
BSTATX(IBIFN) ; Returns internal value of bill's latest transmission status
"RTN","IBCEF4",19,0)
 N IBDA
"RTN","IBCEF4",20,0)
 Q $P($G(^IBA(364,+$$LAST364(IBIFN),0)),U,3)
"RTN","IBCEF4",21,0)
 ;
"RTN","IBCEF4",22,0)
LAST364(IBIFN) ; Determine ien of latest transmit bill record for a bill
"RTN","IBCEF4",23,0)
 Q +$O(^IBA(364,"ABDT",IBIFN,+$O(^IBA(364,"ABDT",IBIFN,""),-1),""),-1)
"RTN","IBCEF4",24,0)
 ;
"RTN","IBCEF4",25,0)
TXMT(IBIFN,IBWHY,IBNEW) ; Determine if bill # IBIFN is 'transmittable'
"RTN","IBCEF4",26,0)
 ; IBNEW = flag is 1 if new entry - don't check for entry in file 364
"RTN","IBCEF4",27,0)
 ; Function returns:
"RTN","IBCEF4",28,0)
 ;        0 if not transmittable
"RTN","IBCEF4",29,0)
 ;        if transmittable, the entire node 3 of the insurance company
"RTN","IBCEF4",30,0)
 ;  and, if passed by reference IBWHY = reason not transmittable
"RTN","IBCEF4",31,0)
 ;                    1 if local print
"RTN","IBCEF4",32,0)
 ;                    2 if EDI/MRA not active
"RTN","IBCEF4",33,0)
 ;                    3 if rate type not transmittable
"RTN","IBCEF4",34,0)
 ;                    4 if no transmit for insurance co
"RTN","IBCEF4",35,0)
 ;                    5 if failed txmn rules
"RTN","IBCEF4",36,0)
 ;                      and IBWHY(0) = ien of rule failed
"RTN","IBCEF4",37,0)
 ;                    6 if Rx with missing/invalid NDC format
"RTN","IBCEF4",38,0)
 ;
"RTN","IBCEF4",39,0)
 N IB,IB0,IBOK,IBCOB,IBMCR,X1
"RTN","IBCEF4",40,0)
 S IBOK=1,IB=IBIFN,IBWHY=""
"RTN","IBCEF4",41,0)
 ;
"RTN","IBCEF4",42,0)
 S IBCOB=$$COBN^IBCEF(IB),IB(.07)=+$G(^DGCR(399,IB,"I"_IBCOB))
"RTN","IBCEF4",43,0)
 S IBMCR=$$MCRWNR^IBEFUNC(IB(.07))
"RTN","IBCEF4",44,0)
 ; Does bill have force local print flag set?
"RTN","IBCEF4",45,0)
 I 'IBMCR D  G:IBWHY TXMTQ  ; MCR WNR not curr ins
"RTN","IBCEF4",46,0)
 . I $S($$MRASEC(IBIFN):$P($G(^DGCR(399,IBIFN,"TX")),U,9)=1,1:$P($G(^DGCR(399,IBIFN,"TX")),U,8)=1) S IBOK=0,IBWHY=1
"RTN","IBCEF4",47,0)
 I '$G(IBNEW),'$O(^IBA(364,"B",IBIFN,0)),$P($G(^DGCR(399,IBIFN,0)),U,13)>2,'$$RETN^PRCAFN(IBIFN) S IBOK=0 G TXMTQ ; Not recognized as transmittable when it was authorized
"RTN","IBCEF4",48,0)
 I $O(^IBA(364,"B",IBIFN,0)),$$INSOK(IB(.07)),$$BSTATX(IBIFN)'="X" G TXMTQ ;Already determined to be transmittable - entry exists for bill in transmit bill file
"RTN","IBCEF4",49,0)
 S IB(.03)=$S('IBMCR:1,1:2) ; EDI(1) or MRA(2)
"RTN","IBCEF4",50,0)
 S IB(.04)=$S('$$INPAT^IBCEF(IB,1):1,1:2) ;Outpt(1) or Inpt(2)
"RTN","IBCEF4",51,0)
 S IB(.05)=$S($$FT^IBCEF(IB)=3:1,1:2) ;Inst(1) or Prof(2)
"RTN","IBCEF4",52,0)
 ; Execute unmodifiable, general edits
"RTN","IBCEF4",53,0)
 S X1=$$EDIACTV(IB(.03))
"RTN","IBCEF4",54,0)
 I 'X1 S IBWHY=2
"RTN","IBCEF4",55,0)
 I 'IBWHY S X1=$$RATEOK(IBIFN) S:'X1 IBWHY=3
"RTN","IBCEF4",56,0)
 I 'IBWHY S X1=$$INSOK(+IB(.07)) S:'X1 IBWHY=4
"RTN","IBCEF4",57,0)
 I 'IBWHY,$$ISRX^IBCEF1(IBIFN) D  ;S:'X1 IBWHY=6
"RTN","IBCEF4",58,0)
 . ; Check for Rxs and NDC # format valid (5-4-2)
"RTN","IBCEF4",59,0)
 . ;IF THIS IS A UB FORM DO NOT SEND ELECTRONIC
"RTN","IBCEF4",60,0)
 . I $$FT^IBCEF(IBIFN)=3 S IBWHY=1
"RTN","IBCEF4",61,0)
 . ;
"RTN","IBCEF4",62,0)
 . Q  ;;CHECK REMOVAL SO NON NDC FORMAT NUMBERS WILL GO
"RTN","IBCEF4",63,0)
 . N Z,Z0,Z00
"RTN","IBCEF4",64,0)
 . S Z="" F  S Z=$O(^IBA(362.4,"AIFN"_IBIFN,Z)) Q:Z=""!'X1  D  Q:'X1
"RTN","IBCEF4",65,0)
 .. S Z0=0 F  S Z0=$O(^IBA(362.4,"AIFN"_IBIFN,Z,Z0)) Q:'Z0  D  Q:'X1
"RTN","IBCEF4",66,0)
 ... S Z00=$G(^IBA(362.4,Z0,0))
"RTN","IBCEF4",67,0)
 ... Q:$S($P(Z00,U,8)="":1,1:$L($P(Z00,U,8))=11)
"RTN","IBCEF4",68,0)
 ... I $P(Z00,U,9)'=4 S X1=0
"RTN","IBCEF4",69,0)
 ; Only continue if general edits are passed
"RTN","IBCEF4",70,0)
 I $$COB^IBCEF(IB)="S" D
"RTN","IBCEF4",71,0)
 . S COBINS=$P($G(^DGCR(399,IB,"M")),U,IBCOB+1)
"RTN","IBCEF4",72,0)
 . I 'COBINS Q
"RTN","IBCEF4",73,0)
 . I IBMCR S IBWHY=1,$P(^DGCR(399,IBIFN,"TX"),U,8)=1
"RTN","IBCEF4",74,0)
 I IBWHY S IBOK=0 G TXMTQ
"RTN","IBCEF4",75,0)
 S IBOK=$$EDIT(IBIFN,.IB,.IBWHY)
"RTN","IBCEF4",76,0)
 G:'IBOK TXMTQ
"RTN","IBCEF4",77,0)
 ;
"RTN","IBCEF4",78,0)
TXMTQ ;
"RTN","IBCEF4",79,0)
 I IBOK S IBOK=$G(^DIC(36,+IB(.07),3))
"RTN","IBCEF4",80,0)
 Q IBOK
"RTN","IBCEF4",81,0)
 ;
"RTN","IBCEF4",82,0)
MRASEC(IBIFN) ; Returns 1 if current bill is secondary to MCR WNR
"RTN","IBCEF4",83,0)
 N IBSEQ,IB,Z
"RTN","IBCEF4",84,0)
 S IB=0
"RTN","IBCEF4",85,0)
 ; Chk if MCR WNR is prev insurer with MRA on file
"RTN","IBCEF4",86,0)
 S IBSEQ=$$COBN^IBCEF(IBIFN)-1
"RTN","IBCEF4",87,0)
 S Z=$$MCRONBIL^IBEFUNC(IBIFN,IBSEQ) I +Z=1,$P(Z,U,2)=1,$$CHK^IBCEMU1(IBIFN) S IB=1
"RTN","IBCEF4",88,0)
 Q IB
"RTN","IBCEF4",89,0)
 ;
"RTN","IBCEF4",90,0)
EDIT(IBIFN,IB,IBWHY) ; Find, execute edits applying to bill to see if transmittable
"RTN","IBCEF4",91,0)
 ; IBIFN = ien of bill in file 399
"RTN","IBCEF4",92,0)
 ; IB = array containing necessary data for xref search from bill
"RTN","IBCEF4",93,0)
 ;      subscripted by field # in file 364.4
"RTN","IBCEF4",94,0)
 ;
"RTN","IBCEF4",95,0)
 ;  Matrix entries:
"RTN","IBCEF4",96,0)
 ;    IB(.03): 1=EDI specific, 2=MRA specific
"RTN","IBCEF4",97,0)
 ;    IB(.04): 1=Outpatient or 2=inpatient only (currently defaults to 3)
"RTN","IBCEF4",98,0)
 ;    IB(.05): 1=Only institutional or 2=only professional
"RTN","IBCEF4",99,0)
 ;          X: Anything valid
"RTN","IBCEF4",100,0)
 ;
"RTN","IBCEF4",101,0)
 ;                 MRA-EDI    IN-OUT     INST-PROF
"RTN","IBCEF4",102,0)
 ;  Level          -------    ------     ---------
"RTN","IBCEF4",103,0)
 ;    1               X          X           X
"RTN","IBCEF4",104,0)
 ;    2               X          X        IB(.05)
"RTN","IBCEF4",105,0)
 ;    3               X       IB(.04)        X
"RTN","IBCEF4",106,0)
 ;    4               X       IB(.04)     IB(.05)
"RTN","IBCEF4",107,0)
 ;    5            IB(.03)       X           X
"RTN","IBCEF4",108,0)
 ;    6            IB(.03)       X        IB(.05) 
"RTN","IBCEF4",109,0)
 ;    7            IB(.03)    IB(.04)        X
"RTN","IBCEF4",110,0)
 ;    8            IB(.03)    IB(.04)     IB(.05)
"RTN","IBCEF4",111,0)
 ;
"RTN","IBCEF4",112,0)
 N IB0,IB1,IB2,IB3,IB4,IBDA,IBFT,IBPASS,IBSEQ,IBT,IBNOCK
"RTN","IBCEF4",113,0)
 I '$G(IB(.03)) S IBPASS=0 G EDITQ
"RTN","IBCEF4",114,0)
 S IBFT=$$FT^IBCEF(IBIFN)
"RTN","IBCEF4",115,0)
 ;
"RTN","IBCEF4",116,0)
 S IBPASS=1
"RTN","IBCEF4",117,0)
 F IBSEQ=1:1:8 D  Q:'IBPASS  ; Loop thru levels in matrix
"RTN","IBCEF4",118,0)
 . F IB1=1:1:3 Q:'IBPASS  F IB2=1:1:3 Q:'IBPASS  F IB3=1:1:3 Q:'IBPASS  D
"RTN","IBCEF4",119,0)
 .. S IB4=0 F  S IB4=$O(^IBE(364.4,"AD",IB1,IB2,IB3,IB4)) Q:'IB4  I $O(^(IB4,0)) D  Q:'IBPASS
"RTN","IBCEF4",120,0)
 ... S IBDA=0
"RTN","IBCEF4",121,0)
 ... F   S IBDA=$O(^IBE(364.4,"AD",IB1,IB2,IB3,IB4,IBDA)) Q:'IBDA  S IB0=$G(^IBE(364.4,IBDA,0)) I IB0'="",'$D(IBNOCK(IBDA)) D  Q:'IBPASS
"RTN","IBCEF4",122,0)
 .... I $P(IB0,U,2)>DT S IBNOCK(IBDA)="" Q  ; Not activated yet
"RTN","IBCEF4",123,0)
 .... I $P(IB0,U,6),$P(IB0,U,6)'>DT  S IBNOCK(IBDA)="" Q  ; Inactive
"RTN","IBCEF4",124,0)
 .... ;JWS;IB*2.0*592;dental form #7, same as CMS-1500
"RTN","IBCEF4",125,0)
 .... I $P(IB0,U,11),IB3'=3,$S(IBFT=3:IB3'=1,IBFT=2:IB3'=2,IBFT=7:IB3'=2,1:0) S IBNOCK(IBDA)="" Q  ; Form type not included - not used for form type rule (0)
"RTN","IBCEF4",126,0)
 .... I IB4=1,'$D(^IBE(364.4,IBDA,3,"B",+IB(.07))) S IBNOCK(IBDA)="" Q  ; Ins not included for rule
"RTN","IBCEF4",127,0)
 .... I IB4=2,$D(^IBE(364.4,IBDA,2,"B",+IB(.07))) S IBNOCK(IBDA)="" Q  ; Ins is excluded from rule
"RTN","IBCEF4",128,0)
 .... S IBT=$G(^IBE(364.4,IBDA,1))
"RTN","IBCEF4",129,0)
 .... ; Code can assume IBIFN, IBDA and IB(.03 thru .05 and .07) exist
"RTN","IBCEF4",130,0)
 .... I IBT'="" X IBT I '$T S IBPASS=0,IBWHY(0)=IBDA,IBWHY=5
"RTN","IBCEF4",131,0)
EDITQ Q IBPASS
"RTN","IBCEF4",132,0)
 ;
"RTN","IBCEF4",133,0)
STATUS(IBIFN) ; Function returns whether or not bill currently has a status
"RTN","IBCEF4",134,0)
 ;  message or EOB message not yet fully reviewed -
"RTN","IBCEF4",135,0)
 ; (only for transmittable bills)
"RTN","IBCEF4",136,0)
 ; IBIFN = ien of bill in file 399
"RTN","IBCEF4",137,0)
 ; Returns:
"RTN","IBCEF4",138,0)
 ; 0 = None found
"RTN","IBCEF4",139,0)
 ; If found, returns a pieced string as follows:
"RTN","IBCEF4",140,0)
 ;
"RTN","IBCEF4",141,0)
 ;   [1] ien of transmit bill entry (file 364) associated with an
"RTN","IBCEF4",142,0)
 ;       entry in file 361 with an unreviewed status message
"RTN","IBCEF4",143,0)
 ;   [2] ien of transmit bill entry (file 364) associated with an
"RTN","IBCEF4",144,0)
 ;       entry in file 361.1 with an unreviewed EOB
"RTN","IBCEF4",145,0)
 ;
"RTN","IBCEF4",146,0)
 N IB,Z,Z0
"RTN","IBCEF4",147,0)
 S IB=""
"RTN","IBCEF4",148,0)
 S Z="" F  S Z=$O(^IBM(361,"B",IBIFN,Z),-1) Q:'Z  I $P($G(^IBM(361,Z,0)),U,9)<2,$P(^(0),U,11) S $P(IB,U)=$P(^(0),U,11) Q
"RTN","IBCEF4",149,0)
 ;
"RTN","IBCEF4",150,0)
 S Z="" F  S Z=$O(^IBM(361.1,"B",IBIFN,Z),-1) Q:'Z  I $P($G(^IBM(361.1,Z,0)),U,16)<2,$P(^(0),U,19) S $P(IB,U,2)=$P(^(0),U,19) Q
"RTN","IBCEF4",151,0)
 ;
"RTN","IBCEF4",152,0)
 Q IB
"RTN","IBCEF4",153,0)
 ;
"RTN","IBCEF4",154,0)
TEST(IBIFN) ; Returns 1 if bill IBIFN is a transmission test bill, 0 if not
"RTN","IBCEF4",155,0)
 Q +$S($G(^TMP("IBEDI_TEST_BATCH",$J)):1,1:+$P($G(^IBA(364,+$$LAST364(IBIFN),0)),U,7))
"RTN","IBCEF4",156,0)
 ;
"RTN","IBCEF7")
0^54^B53413406^B50797975
"RTN","IBCEF7",1,0)
IBCEF7 ;WOIFO/SS - FORMATTER AND EXTRACTOR SPECIFIC BILL FUNCTIONS ;8/6/03 10:56am
"RTN","IBCEF7",2,0)
 ;;2.0;INTEGRATED BILLING;**232,349,432,592**;21-MAR-94;Build 58
"RTN","IBCEF7",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEF7",4,0)
 ;
"RTN","IBCEF7",5,0)
ALLPROV ;called from #364.5 entry "N-ALL CUR/OTH PROVIDER INFO"
"RTN","IBCEF7",6,0)
 ;*342/TAZ - Added call to LPRV^IBCEF80 for line level providers; restructured due to line length
"RTN","IBCEF7",7,0)
 I +$G(IBXSAVE("PROVINF",IBXIEN))=0 D
"RTN","IBCEF7",8,0)
 . N IBZ
"RTN","IBCEF7",9,0)
 . D PROVIDER(IBXIEN,"C",.IBZ),PROVIDER(IBXIEN,"O",.IBZ) S IBXSAVE("PROVINF",IBXIEN)=IBXIEN M IBXSAVE("PROVINF",IBXIEN)=IBZ
"RTN","IBCEF7",10,0)
 Q
"RTN","IBCEF7",11,0)
 ;for PRV1
"RTN","IBCEF7",12,0)
 ;Input:
"RTN","IBCEF7",13,0)
 ; IB399 ien of #399
"RTN","IBCEF7",14,0)
PRV1(IB399) ;
"RTN","IBCEF7",15,0)
 N IBN,IBZ,IBZ1,IBZN,IBZD,IBRES,IBIND,IBDEF,IBDEFTYP,IBQ,IBFRMTYP,IBZNAME
"RTN","IBCEF7",16,0)
 S IBFRMTYP=+$$FT^IBCEF(IB399)
"RTN","IBCEF7",17,0)
 S IBN=0,IBIND=0,IBRES="",IBQ=0
"RTN","IBCEF7",18,0)
 S IBDEF=$P($G(^DGCR(399,IB399,"M1")),U,$$COBN^IBCEF(IB399)+1),IBDEFTYP=""
"RTN","IBCEF7",19,0)
 I IBDEF'="" S IBDEFTYP=$$SOP^IBCEP2B(IB399,"")
"RTN","IBCEF7",20,0)
 ;JRA IB*2.0*592 Treat new Dental form 7 (J430D)
"RTN","IBCEF7",21,0)
 ;I IBDEFTYP'="",$$CHCKPRV1^IBCEF73($S(IBFRMTYP=2:2,IBFRMTYP=3:1,1:0),IBDEFTYP)=0 S (IBDEF,IBDEFTYP)=""  ;JRA IB*2.0*592 ';'
"RTN","IBCEF7",22,0)
 I IBDEFTYP'="",$$CHCKPRV1^IBCEF73($S(IBFRMTYP=7:7,IBFRMTYP=2:2,IBFRMTYP=3:1,1:0),IBDEFTYP)=0 S (IBDEF,IBDEFTYP)=""  ;JRA IB*2.0*592
"RTN","IBCEF7",23,0)
 I IBDEF'="",IBDEFTYP'="" S IBIND=IBIND+2,$P(IBRES,U,IBIND)=(IBDEFTYP_U_IBDEF)
"RTN","IBCEF7",24,0)
 F  S IBN=$O(^IBE(355.97,IBN)) Q:+IBN=0!(IBQ=1)  D
"RTN","IBCEF7",25,0)
 . S IBZ=$G(^IBE(355.97,IBN,0)),IBZ1=$G(^(1))
"RTN","IBCEF7",26,0)
 . Q:$P(IBZ,"^",4)=""!$P(IBZ1,U,9)  ;if no FACILITY'S DEFAULT ID #
"RTN","IBCEF7",27,0)
 . Q:$P(IBZ1,"^",4)!(IBDEFTYP=$P(IBZ,U,3))
"RTN","IBCEF7",28,0)
 . S IBZN=$P(IBZ,"^",3),IBZNAME=$P(IBZ,"^",1)
"RTN","IBCEF7",29,0)
 . ;I IBFRMTYP=2 Q:IBZN="1A"!(IBZNAME="MEDICARE PART A")  ;1500  ;JRA IB*2.0*592 ';'
"RTN","IBCEF7",30,0)
 . I IBFRMTYP=2!(IBFRMTYP=7) Q:IBZN="1A"!(IBZNAME="MEDICARE PART A")  ;1500 or J430D ;JRA IB*2.0*592
"RTN","IBCEF7",31,0)
 . I IBFRMTYP=3 Q:IBZN="1B"!(IBZNAME="MEDICARE PART B")  ;UB
"RTN","IBCEF7",32,0)
 . ;Q:$$CHCKPRV1^IBCEF73($S(IBFRMTYP=2:2,IBFRMTYP=3:1,1:0),IBZN)=0  ;JRA IB*2.0*592 ';'
"RTN","IBCEF7",33,0)
 . Q:$$CHCKPRV1^IBCEF73($S(IBFRMTYP=7:7,IBFRMTYP=2:2,IBFRMTYP=3:1,1:0),IBZN)=0  ;JRA IB*2.0*592
"RTN","IBCEF7",34,0)
 . I $P(IBZ,"^",2)=0!($P(IBZ,"^",2)=2) D
"RTN","IBCEF7",35,0)
 . . S IBIND=IBIND+2
"RTN","IBCEF7",36,0)
 . . I IBIND>14 S IBQ=1 Q
"RTN","IBCEF7",37,0)
 . . S $P(IBRES,"^",IBIND)=IBZN_"^"_$P(IBZ,"^",4)
"RTN","IBCEF7",38,0)
 ;Remove any duplicate entries
"RTN","IBCEF7",39,0)
 N I,Q,QUAL,QUALC,IBRESTMP,SEQ
"RTN","IBCEF7",40,0)
 F I=2:2:($L(IBRES,"^")-1) D
"RTN","IBCEF7",41,0)
 . S QUAL=$P(IBRES,"^",I)
"RTN","IBCEF7",42,0)
 . I $G(IBRESTMP(QUAL))="" S IBRESTMP(QUAL)=$P(IBRES,"^",(I+1))
"RTN","IBCEF7",43,0)
 S Q=2
"RTN","IBCEF7",44,0)
 S I="",QUAL=""
"RTN","IBCEF7",45,0)
 K IBRES
"RTN","IBCEF7",46,0)
 S IBRES=""
"RTN","IBCEF7",47,0)
 S SEQ=0
"RTN","IBCEF7",48,0)
 F  S QUAL=$O(IBRESTMP(QUAL)) Q:QUAL=""  D
"RTN","IBCEF7",49,0)
 . S SEQ=SEQ+2
"RTN","IBCEF7",50,0)
 . S $P(IBRES,"^",SEQ)=QUAL,$P(IBRES,"^",(SEQ+1))=IBRESTMP(QUAL)
"RTN","IBCEF7",51,0)
 Q IBRES
"RTN","IBCEF7",52,0)
 ;
"RTN","IBCEF7",53,0)
 ; creates array of SUBSCR IDs for all "other insurances"
"RTN","IBCEF7",54,0)
 ;Input :
"RTN","IBCEF7",55,0)
 ; IBXIEN - ien in #399
"RTN","IBCEF7",56,0)
 ;Output:
"RTN","IBCEF7",57,0)
 ; IBZOUT(Z) - array with ien of #36 
"RTN","IBCEF7",58,0)
OTHSBID(IBXIEN,IBZOUT) ;
"RTN","IBCEF7",59,0)
 N Z,Z0,Z1,IBZ,C
"RTN","IBCEF7",60,0)
 D F^IBCEF("N-ALL INSURANCE CO 837 ID","IBZ")
"RTN","IBCEF7",61,0)
 F Z=1,2,3 S IBZ(Z)=$$POLICY^IBCEF(IBXIEN,2,$E("PST",Z))
"RTN","IBCEF7",62,0)
 K IBXDATA
"RTN","IBCEF7",63,0)
 S C=$$OTHINS1^IBCEF2(IBXIEN)
"RTN","IBCEF7",64,0)
 F Z=1,2 I $G(IBZ(Z))'="",$E(C,Z) D
"RTN","IBCEF7",65,0)
 . S IBZOUT(Z)=IBZ(+$E(C,Z))
"RTN","IBCEF7",66,0)
 Q
"RTN","IBCEF7",67,0)
 ;Input :
"RTN","IBCEF7",68,0)
 ; IBXIEN - ien in #399
"RTN","IBCEF7",69,0)
 ; IBP - # piece in address string : STR LINE1|STR LINE2|CITY|STATE|ZIP
"RTN","IBCEF7",70,0)
 ;Output:
"RTN","IBCEF7",71,0)
 ; IBARR - output array m by reference
"RTN","IBCEF7",72,0)
ELMADD2(IBXIEN,IBP,IBARR) ;
"RTN","IBCEF7",73,0)
 N IBZZZ,A,CHECK,IB1
"RTN","IBCEF7",74,0)
 I '$D(IBXSAVE("OTH_INSURED_ADDR")) D OTHADD2(IBXIEN,.IBZZZ) M IBXSAVE("OTH_INSURED_ADDR")=IBZZZ
"RTN","IBCEF7",75,0)
 S IB1=0
"RTN","IBCEF7",76,0)
 F  S IB1=$O(IBXSAVE("OTH_INSURED_ADDR",IB1)) Q:'IB1  D
"RTN","IBCEF7",77,0)
 . ;IF ANY PORTION OF ADDRESS IS NULL SET CHECK VALUE, ERASE ENTRY
"RTN","IBCEF7",78,0)
 . S CHECK=0
"RTN","IBCEF7",79,0)
 . F A=1,3,4,5 I $P(IBXSAVE("OTH_INSURED_ADDR",IB1),"|",A)="" S CHECK=1 K IBXSAVE("OTH_INSURED_ADDR",IB1) Q
"RTN","IBCEF7",80,0)
 . I 'CHECK D
"RTN","IBCEF7",81,0)
 . . I IBP=0 S IBARR(IB1)=$G(IBXSAVE("OTH_INSURED_ADDR",IB1)) Q
"RTN","IBCEF7",82,0)
 . . S IBARR(IB1)=$P($G(IBXSAVE("OTH_INSURED_ADDR",IB1)),"|",IBP)
"RTN","IBCEF7",83,0)
 Q
"RTN","IBCEF7",84,0)
 ;creates an array with address info for all other insured persons
"RTN","IBCEF7",85,0)
 ;Input :
"RTN","IBCEF7",86,0)
 ; IBXIEN - ien in #399
"RTN","IBCEF7",87,0)
 ;Output:
"RTN","IBCEF7",88,0)
 ; IBZOUT(Z) - array with STR LINE1|STR LINE2|CITY|STATE|ZIP 
"RTN","IBCEF7",89,0)
OTHADD2(IBXIEN,IBZOUT) ;
"RTN","IBCEF7",90,0)
 N C,Z,Z0,Z1,IBZ,IBZIP,IB1,IBDFN1
"RTN","IBCEF7",91,0)
 S IBZOUT=""
"RTN","IBCEF7",92,0)
 D OTHP36^IBCEF72(IBXIEN,.IBZ) ;array with iens of file #36
"RTN","IBCEF7",93,0)
 K IBXDATA
"RTN","IBCEF7",94,0)
 S C=$$OTHINS1^IBCEF2(IBXIEN)
"RTN","IBCEF7",95,0)
 F Z=1,2 I $G(IBZ(Z))'="",$E(C,Z) D
"RTN","IBCEF7",96,0)
 . S IBINS=+IBZ(+$E(C,Z))
"RTN","IBCEF7",97,0)
 . S IBDFN1=$P($G(^DGCR(399,IBXIEN,0)),"^",2)
"RTN","IBCEF7",98,0)
 . S IBZOUT(Z)=$$FR2PAT(IBDFN1,IBINS)
"RTN","IBCEF7",99,0)
 Q
"RTN","IBCEF7",100,0)
 ;Input:
"RTN","IBCEF7",101,0)
 ; IBDFN-patient ien
"RTN","IBCEF7",102,0)
 ; IBINS - input array with insurance pointers to 36
"RTN","IBCEF7",103,0)
 ;Output 
"RTN","IBCEF7",104,0)
 ; STR LINE1|STR LINE2|CITY|STATE|ZIP
"RTN","IBCEF7",105,0)
FR2PAT(IBDFN,IBINS) ;information about "other insured" address
"RTN","IBCEF7",106,0)
 N Z3,Z4,Z5,IBZIP
"RTN","IBCEF7",107,0)
 S Z3=$O(^DPT(IBDFN,.312,"B",$G(IBINS),0))
"RTN","IBCEF7",108,0)
 Q:+Z3=0 "||||"
"RTN","IBCEF7",109,0)
 S Z4=$G(^DPT(IBDFN,.312,Z3,3))
"RTN","IBCEF7",110,0)
 S IBZIP=$P($G(^DIC(5,+$P(Z4,"^",9),0)),"^",2)
"RTN","IBCEF7",111,0)
 S Z5=$P(Z4,"^",6,8)_"^"_IBZIP_"^"_$P(Z4,"^",10)
"RTN","IBCEF7",112,0)
 Q $TR(Z5,"^","|")
"RTN","IBCEF7",113,0)
 ;
"RTN","IBCEF7",114,0)
 ;Input :
"RTN","IBCEF7",115,0)
 ; IBXIEN - ien in #399
"RTN","IBCEF7",116,0)
 ; IBP - # piece in address string : STR LINE1|STR LINE2|CITY|STATE|ZIP
"RTN","IBCEF7",117,0)
 ; if IBP=0 then returns whole string
"RTN","IBCEF7",118,0)
 ;Output:
"RTN","IBCEF7",119,0)
 ; IBARR - output array m by reference
"RTN","IBCEF7",120,0)
ELMADDR(IBXIEN,IBP,IBARR) ;
"RTN","IBCEF7",121,0)
 N IB1,A,CHECK
"RTN","IBCEF7",122,0)
 D:'$D(IBXSAVE("OTH_PROV_ADDR")) OTHADDR(IBXIEN)
"RTN","IBCEF7",123,0)
 S IB1=0
"RTN","IBCEF7",124,0)
 F  S IB1=$O(IBXSAVE("OTH_PROV_ADDR",IB1)) Q:'IB1  D
"RTN","IBCEF7",125,0)
 . S CHECK=0
"RTN","IBCEF7",126,0)
 . ;EXCLUDE ADD LINE 2 SECOND PC SINCE IT'S OK FOR THAT TO BE EMPTY
"RTN","IBCEF7",127,0)
 . F A=1,3,4,5 I $P(IBXSAVE("OTH_PROV_ADDR",IB1),"|",A)="" D  Q
"RTN","IBCEF7",128,0)
 . . ;IF ANY PORTION OF ADDRESS IS NULL SET CHECK VALUE, ERASE ENTRY
"RTN","IBCEF7",129,0)
 . . S CHECK=1 K IBXSAVE("OTH_PROV_ADDR",IB1)
"RTN","IBCEF7",130,0)
 . I 'CHECK D
"RTN","IBCEF7",131,0)
 . . I IBP=0 S IBARR(IB1)=$G(IBXSAVE("OTH_PROV_ADDR",IB1)) Q
"RTN","IBCEF7",132,0)
 . . S IBARR(IB1)=$P($G(IBXSAVE("OTH_PROV_ADDR",IB1)),"|",IBP)
"RTN","IBCEF7",133,0)
 Q
"RTN","IBCEF7",134,0)
 ;
"RTN","IBCEF7",135,0)
 ;creates an array with address info for all insurances
"RTN","IBCEF7",136,0)
 ;Input :
"RTN","IBCEF7",137,0)
 ; IBXIEN - ien in #399
"RTN","IBCEF7",138,0)
 ;Output:
"RTN","IBCEF7",139,0)
 ; IBXSAVE("OTH_PROV_ADDR",Z) 
"RTN","IBCEF7",140,0)
OTHADDR(IBXIEN) ;
"RTN","IBCEF7",141,0)
 N C,Z,Z0,Z1,IBZ,IBZIP,IB1,IBINS
"RTN","IBCEF7",142,0)
 D F^IBCEF("N-OTH INSURANCE CO IEN 36") ;array with iens of file #36
"RTN","IBCEF7",143,0)
 M IBZ=IBXDATA
"RTN","IBCEF7",144,0)
 K IBXDATA
"RTN","IBCEF7",145,0)
 S C=$$OTHINS1^IBCEF2(IBXIEN)
"RTN","IBCEF7",146,0)
 F Z=1,2 I $G(IBZ(Z))'="",$E(C,Z) D
"RTN","IBCEF7",147,0)
 . S IBINS=+IBZ(+$E(C,Z))
"RTN","IBCEF7",148,0)
 . S IBZIP=$P($G(^DIC(5,+$P($G(^DIC(36,IBINS,.11)),"^",5),0)),"^",2)
"RTN","IBCEF7",149,0)
 . S IB1=$P($G(^DIC(36,IBINS,.11)),"^",1,2)_"^"_$P($G(^DIC(36,IBINS,.11)),"^",4)_"^"_IBZIP_"^"_$P($G(^DIC(36,IBINS,.11)),"^",6)
"RTN","IBCEF7",150,0)
 . S IBXSAVE("OTH_PROV_ADDR",Z)=$TR(IB1,"^","|")
"RTN","IBCEF7",151,0)
 Q
"RTN","IBCEF7",152,0)
 ;
"RTN","IBCEF7",153,0)
 ;Retrieves pointer to get info about the service provider
"RTN","IBCEF7",154,0)
 ;IBIEN399 - ien in #399
"RTN","IBCEF7",155,0)
 ;IBFUNC -function (3-RENDERING,etc)
"RTN","IBCEF7",156,0)
 ;Output: VARIABLE POINTER (PTR;file_root)
"RTN","IBCEF7",157,0)
PROVPTR(IBIEN399,IBFUNC) ;
"RTN","IBCEF7",158,0)
 ;*432/TAZ - No longer used for IBXSAVE array setup
"RTN","IBCEF7",159,0)
 N IBN
"RTN","IBCEF7",160,0)
 S IBN=$O(^DGCR(399,IBIEN399,"PRV","B",IBFUNC,0))
"RTN","IBCEF7",161,0)
 I +IBN=0 Q 0
"RTN","IBCEF7",162,0)
 Q $P($G(^DGCR(399,IBIEN399,"PRV",+IBN,0)),"^",2)
"RTN","IBCEF7",163,0)
 ;
"RTN","IBCEF7",164,0)
 ;Retrieves SSN from #200
"RTN","IBCEF7",165,0)
 ;IBPTR-  VARIABLE POINTER to #200
"RTN","IBCEF7",166,0)
PROVSSN(IBIEN399) ;
"RTN","IBCEF7",167,0)
 N IBRETVAL S IBRETVAL=""
"RTN","IBCEF7",168,0)
 N IBPTR,IBFT
"RTN","IBCEF7",169,0)
 F IBFT=1:1:9 D
"RTN","IBCEF7",170,0)
 . S IBPTR=$$PROVPTR(IBIEN399,IBFT)
"RTN","IBCEF7",171,0)
 . S $P(IBRETVAL,"^",IBFT)=$$GETSSN^IBCEF72(IBPTR)
"RTN","IBCEF7",172,0)
 Q IBRETVAL
"RTN","IBCEF7",173,0)
 ;
"RTN","IBCEF7",174,0)
 ;Input:
"RTN","IBCEF7",175,0)
 ; IBPTR- ptr to ^VA(200 or ^IBA(355.93
"RTN","IBCEF7",176,0)
 ;Output:
"RTN","IBCEF7",177,0)
 ; SSN or null
"RTN","IBCEF7",178,0)
GETNMEL(IBFULL,IBEL) ;Get name element
"RTN","IBCEF7",179,0)
 D NAMECOMP^XLFNAME(.IBFULL)
"RTN","IBCEF7",180,0)
 Q $G(IBFULL(IBEL))
"RTN","IBCEF7",181,0)
 ;-
"RTN","IBCEF7",182,0)
 ;PROVIDER
"RTN","IBCEF7",183,0)
 ;Input:
"RTN","IBCEF7",184,0)
 ; IB399 - ien of #399
"RTN","IBCEF7",185,0)
 ; IBPROV:
"RTN","IBCEF7",186,0)
 ;   "C"- to get info for CURRENT provider
"RTN","IBCEF7",187,0)
 ;   "O"- to get info for all others (in this case the array will contain info fot two providers
"RTN","IBCEF7",188,0)
 ; IBRES - array for results (by reference)
"RTN","IBCEF7",189,0)
 ;
"RTN","IBCEF7",190,0)
 ;Output:
"RTN","IBCEF7",191,0)
 ; IBRES - array to get back info (by reference)
"RTN","IBCEF7",192,0)
 ; IBRES(IBPROV,PRNUM,PRTYPE,SEQ#)=PROV^INSUR^IDTYPE^ID^FORMTYP^CARETYP
"RTN","IBCEF7",193,0)
 ; where:
"RTN","IBCEF7",194,0)
 ; IBPROV - see input parameter
"RTN","IBCEF7",195,0)
 ; PRNUM: 1=primary insurance provider, 2= secondary, 3 -tretiary
"RTN","IBCEF7",196,0)
 ; PRTYPE: Provider type(FUNCTION) 
"RTN","IBCEF7",197,0)
 ; SEQ# : sequence number (1st is used for ID1, 2nd - for ID2, etc)
"RTN","IBCEF7",198,0)
 ; PROV : provider/VARIABLEPTR
"RTN","IBCEF7",199,0)
 ; INSUR: Insurance PTR #36 or NONE
"RTN","IBCEF7",200,0)
 ; IDTYPE: ID type
"RTN","IBCEF7",201,0)
 ; ID: ID 
"RTN","IBCEF7",202,0)
 ; FORMTYP: Form type 1=UB,2=1500
"RTN","IBCEF7",203,0)
 ; CARETYP: Care type 0=both inp/outp,1=inpatient, 2=outpatient
"RTN","IBCEF7",204,0)
PROVIDER(IB399,IBPROV,IBRES) ;
"RTN","IBCEF7",205,0)
 N IBCURR,IBZ,IBRESARR
"RTN","IBCEF7",206,0)
 S IBRESARR=""
"RTN","IBCEF7",207,0)
 S IBCURR=$$COB^IBCEF(IB399) ;current bill payer sequence
"RTN","IBCEF7",208,0)
 Q:IBPROV="A"  ;PATIENT's bill
"RTN","IBCEF7",209,0)
 I IBPROV="C" D
"RTN","IBCEF7",210,0)
 . D:$$ISINSUR^IBCEF71(IBCURR,IB399) PROVINF(IB399,$S(IBCURR="T":3,IBCURR="S":2,IBCURR="P":1,1:1),.IBRESARR,1,IBPROV)
"RTN","IBCEF7",211,0)
 I IBPROV="O" D
"RTN","IBCEF7",212,0)
 . I IBCURR="P" D:$$ISINSUR^IBCEF71("S",IB399) PROVINF(IB399,2,.IBRESARR,1,IBPROV) D:$$ISINSUR^IBCEF71("T",IB399) PROVINF(IB399,3,.IBRESARR,2,IBPROV)
"RTN","IBCEF7",213,0)
 . I IBCURR="S" D:$$ISINSUR^IBCEF71("P",IB399) PROVINF(IB399,1,.IBRESARR,1,IBPROV) D:$$ISINSUR^IBCEF71("T",IB399) PROVINF(IB399,3,.IBRESARR,2,IBPROV)
"RTN","IBCEF7",214,0)
 . I IBCURR="T" D:$$ISINSUR^IBCEF71("P",IB399) PROVINF(IB399,1,.IBRESARR,1,IBPROV) D:$$ISINSUR^IBCEF71("S",IB399) PROVINF(IB399,2,.IBRESARR,2,IBPROV)
"RTN","IBCEF7",215,0)
 M IBRES(IBPROV)=IBRESARR
"RTN","IBCEF7",216,0)
 Q
"RTN","IBCEF7",217,0)
 ;
"RTN","IBCEF7",218,0)
PROVINF(IB399,IBPRNUM,IBRES,IBSORT,IBINSTP) ;
"RTN","IBCEF7",219,0)
 D PROVINF^IBCEF74(IB399,IBPRNUM,.IBRES,IBSORT,IBINSTP)
"RTN","IBCEF7",220,0)
 Q
"RTN","IBCEF7",221,0)
 ;
"RTN","IBCEF7",222,0)
PSPRV(IBIFN) ; Returns information for bill ien IBIFN for purchased svc 
"RTN","IBCEF7",223,0)
 ; Returns 4 digit data in following format:
"RTN","IBCEF7",224,0)
 ;  1st digit: 0 if not outside facility
"RTN","IBCEF7",225,0)
 ;             1 if outside facility
"RTN","IBCEF7",226,0)
 ;  2nd digit: 0 if not non-VA provider for rendering/attending
"RTN","IBCEF7",227,0)
 ;             1 if non-VA provider for rendering/attending
"RTN","IBCEF7",228,0)
 ;  3rd digit: 0 if not purchased svc
"RTN","IBCEF7",229,0)
 ;             1 if purchased svc
"RTN","IBCEF7",230,0)
 ;  4th digit: 0 if 1500 bill
"RTN","IBCEF7",231,0)
 ;             1 if UB bill
"RTN","IBCEF7",232,0)
 N IBSVC,Z,Z0,IBU2
"RTN","IBCEF7",233,0)
 S IBSVC="000"_+$$INSFT^IBCEU5(IBIFN),IBU2=$G(^DGCR(399,IBIFN,"U2"))
"RTN","IBCEF7",234,0)
 I $P(IBU2,U,10) S $E(IBSVC,1)=1 ; NON-VA FACILITY
"RTN","IBCEF7",235,0)
 S Z=($$FT^IBCEF(IBIFN)=3)+3,Z0=+$O(^DGCR(399,IBIFN,"PRV","B",Z,0))
"RTN","IBCEF7",236,0)
 I $P($G(^DGCR(399,IBIFN,"PRV",Z0,0)),U,2)["IBA(355.93" S $E(IBSVC,2)=1
"RTN","IBCEF7",237,0)
 I $P(IBU2,U,11)>0,$P(IBU2,U,11)'>2 S $E(IBSVC,3)=1
"RTN","IBCEF7",238,0)
PSPRVQ Q IBSVC
"RTN","IBCEF7",239,0)
 ;
"RTN","IBCEF7",240,0)
CHKADD ;CHECK ALL ADDRESS ELEMENTS PRESENT IF NOT KILL ALL ADDRESS ELEMENTS
"RTN","IBCEF7",241,0)
 ;EXPECT IBXSAVE("CADR") AS SOURCE ARRAY
"RTN","IBCEF7",242,0)
 N Z,CHECK
"RTN","IBCEF7",243,0)
 S Z="",CHECK=0
"RTN","IBCEF7",244,0)
 F Z=1,4,5,6 D
"RTN","IBCEF7",245,0)
 . I $P($G(IBXSAVE("CADR")),"^",Z)="" S CHECK=1
"RTN","IBCEF7",246,0)
 I CHECK=1 S IBXSAVE("CADR")=""
"RTN","IBCEF7",247,0)
 Q
"RTN","IBCEF7",248,0)
 ;
"RTN","IBCEF71")
0^70^B69769908^B65598873
"RTN","IBCEF71",1,0)
IBCEF71 ;WOIFO/SS - FORMATTER AND EXTRACTOR SPECIFIC BILL FUNCTIONS ;31-JUL-03
"RTN","IBCEF71",2,0)
 ;;2.0;INTEGRATED BILLING;**232,155,288,320,349,432,592**;21-MAR-94;Build 58
"RTN","IBCEF71",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEF71",4,0)
 ;
"RTN","IBCEF71",5,0)
 ;---------
"RTN","IBCEF71",6,0)
 ;OTHPAYC - from FORMAT code for OP1,OP2 ...
"RTN","IBCEF71",7,0)
 ;Input:
"RTN","IBCEF71",8,0)
 ;IBXIEN - ien #399
"RTN","IBCEF71",9,0)
 ;IBSAVE - "in" array (i.e. IBXSAVE)
"RTN","IBCEF71",10,0)
 ;IBDATA - "out" array (i.e. IBXDATA)
"RTN","IBCEF71",11,0)
 ;IBFUNC - FUNCTION from #399 (1-refering,2-operating,etc)
"RTN","IBCEF71",12,0)
 ;IBVAL - output value
"RTN","IBCEF71",13,0)
 ;Output:
"RTN","IBCEF71",14,0)
 ; IBDATA with formatted output
"RTN","IBCEF71",15,0)
OTHPAYC(IBXIEN,IBSAVE,IBDATA,IBFUNC,IBVAL) ;
"RTN","IBCEF71",16,0)
 N IB1,IB2,IBINS,IBFL
"RTN","IBCEF71",17,0)
 S IBFL=$S(IBFUNC=3!(IBFUNC=4):1,1:0)
"RTN","IBCEF71",18,0)
 F IB1=1,2 D
"RTN","IBCEF71",19,0)
 . I $$ISINSUR($G(IBSAVE("PROVINF",IBXIEN,"O",IB1)),IBXIEN) D  Q  ;don't create anything if no such insurance
"RTN","IBCEF71",20,0)
 .. ;*432/TAZ Attending/Rendering is no longer either/or so there can be both
"RTN","IBCEF71",21,0)
 .. ;I IBFL S IBFUNC=$S($O(IBSAVE("PROVINF",IBXIEN,"O",IB1,3,0)):3,1:4)
"RTN","IBCEF71",22,0)
 .. S:$O(IBSAVE("PROVINF",IBXIEN,"O",IB1,IBFUNC,0)) IBDATA(IB1)=IBVAL
"RTN","IBCEF71",23,0)
 Q
"RTN","IBCEF71",24,0)
 ;----
"RTN","IBCEF71",25,0)
 ;OTHPAYV - called from FORMAT code for OP1,OP2 ...
"RTN","IBCEF71",26,0)
 ;Input:
"RTN","IBCEF71",27,0)
 ;IBXIEN - ien #399
"RTN","IBCEF71",28,0)
 ;IBSAVE - "in" array (i.e. IBXSAVE)
"RTN","IBCEF71",29,0)
 ;IBDATA - "out" array (i.e. IBXDATA)
"RTN","IBCEF71",30,0)
 ;IBFUNC - FUNCTION from #399 (1-refering, 2-operating, etc)
"RTN","IBCEF71",31,0)
 ;IBSEQN - seq # of ID/QUAL
"RTN","IBCEF71",32,0)
 ;IBFLDTYP
"RTN","IBCEF71",33,0)
 ; "I" - ID  "Q" - ID QUAL
"RTN","IBCEF71",34,0)
 ;Output:
"RTN","IBCEF71",35,0)
 ; IBDATA with formatted output
"RTN","IBCEF71",36,0)
OTHPAYV(IBXIEN,IBSAVE,IBDATA,IBFUNC,IBFLDTYP,IBSEQN) ;
"RTN","IBCEF71",37,0)
 N IB1,IB2,IBPIECE,IBINS,IBFL
"RTN","IBCEF71",38,0)
 S IBFL=$S(IBFUNC=3!(IBFUNC=4):1,1:0)
"RTN","IBCEF71",39,0)
 S IBPIECE=$S(IBFLDTYP="I":4,IBFLDTYP="Q":3,1:3)
"RTN","IBCEF71",40,0)
 F IB1=1,2 D
"RTN","IBCEF71",41,0)
 . ;JWS;IB*2.0*592; no sec id for Dental
"RTN","IBCEF71",42,0)
 . I $$FT^IBCEF(IBXIEN)=7 Q
"RTN","IBCEF71",43,0)
 . I $$ISINSUR($G(IBSAVE("PROVINF",IBXIEN,"O",IB1)),IBXIEN) D  Q  ;don't create anything if there is no such insurance
"RTN","IBCEF71",44,0)
 .. ;*432/TAZ Attending/Rendering is no longer either/or so there can be both
"RTN","IBCEF71",45,0)
 .. ;I IBFL S IBFUNC=$S($O(IBSAVE("PROVINF",IBXIEN,"O",IB1,3,0)):3,1:4),IBFL=0
"RTN","IBCEF71",46,0)
 .. S IBDATA(IB1)=$P($G(IBSAVE("PROVINF",IBXIEN,"O",IB1,IBFUNC,IBSEQN)),U,IBPIECE)
"RTN","IBCEF71",47,0)
 Q
"RTN","IBCEF71",48,0)
 ;
"RTN","IBCEF71",49,0)
 ;chk for ins
"RTN","IBCEF71",50,0)
 ;Input:
"RTN","IBCEF71",51,0)
 ; IBINS = "P","S","T"
"RTN","IBCEF71",52,0)
 ; IBXIEN - ien file #399
"RTN","IBCEF71",53,0)
 ;Output:
"RTN","IBCEF71",54,0)
 ; returns 1-exists , 0-doesn't
"RTN","IBCEF71",55,0)
ISINSUR(IBINS,IBXIEN) ;
"RTN","IBCEF71",56,0)
 N IBINSNOD
"RTN","IBCEF71",57,0)
 S IBINSNOD=$S(IBINS="P":"I1",IBINS="S":"I2",IBINS="T":"I3",1:"")
"RTN","IBCEF71",58,0)
 I IBINSNOD="" Q 0
"RTN","IBCEF71",59,0)
 Q $D(^DGCR(399,IBXIEN,IBINSNOD))
"RTN","IBCEF71",60,0)
 ;
"RTN","IBCEF71",61,0)
 ;---PRACT----
"RTN","IBCEF71",62,0)
 ;Get list of all 355.9 or 355.93 records for prov
"RTN","IBCEF71",63,0)
 ;Input: 
"RTN","IBCEF71",64,0)
 ;IB399INS - ins co for bill to match PRACTIONER from 355.9
"RTN","IBCEF71",65,0)
 ;IB399FRM - form type (0=unknwn/both,1=UB,2=1500) to match PRACTIONER from 355.9
"RTN","IBCEF71",66,0)
 ;IB399CAR - BILL CARE (0=unknwn or both inp/outp,1=inpatient,
"RTN","IBCEF71",67,0)
 ;                      2=outpatient/3=Rx) to match PROV from 355.9
"RTN","IBCEF71",68,0)
 ;           OR   - DIVISION PTR to file 40.8 for entries in file 355.92
"RTN","IBCEF71",69,0)
 ;IBPROV - VARIABLE PTR VA prov
"RTN","IBCEF71",70,0)
 ;IBARR - array by reference for result
"RTN","IBCEF71",71,0)
 ;IBPROVTP- function (2-operating, 3-RENDERING,etc 0-facility)
"RTN","IBCEF71",72,0)
 ;IBINSTP - "C" -current ins , "O"-other
"RTN","IBCEF71",73,0)
 ;IBFILE - 355.92 for facility ids or 355.9 (default) for provider ids
"RTN","IBCEF71",74,0)
 ;IBINS - 1 if to include ids for the ins co for all provs
"RTN","IBCEF71",75,0)
 ;Ouput:
"RTN","IBCEF71",76,0)
 ;IBARR - array by ref for result
"RTN","IBCEF71",77,0)
 ; prov var ptr^ins ptr^X12 id cd^ID^form typ^care typ or division ptr^st ptr^id rec ptr^id type ptr
"RTN","IBCEF71",78,0)
PRACT(IB399INS,IB399FRM,IB399CAR,IBPROV,IBARR,IBPROVTP,IBINSTP,IBFILE,IBINS) ;
"RTN","IBCEF71",79,0)
 N IB1,IB2,IBDAT,IBF,IBFX,IB3559,IBINSCO,IBFRMTYP,IBIDTYP,IBID,IBIDT,IBDIV,IBQ,IBS1,IBS2,IBARRX,Z,Z1,Z2,IBCARE
"RTN","IBCEF71",80,0)
 I $G(IBFILE)="" S IBFILE=355.9
"RTN","IBCEF71",81,0)
 S IBINS=$G(IBINS)
"RTN","IBCEF71",82,0)
 S (IBARR,IB3559,IB1)=0
"RTN","IBCEF71",83,0)
 F IBF="",1 Q:IBF=1&$S(IBFILE'=355.9:1,1:'IBINS)  S IBFX=IBFILE_IBF F IB2=1:1 S IB3559=$O(^IBA(IBFX,"B",$S(IBFILE=355.9&(IBF=""):IBPROV,1:IB399INS),IB3559)) Q:IB3559=""  D
"RTN","IBCEF71",84,0)
 . S IBINSCO=$P($G(^IBA(IBFX,IB3559,0)),"^",$S(IBFILE=355.9&(IBF=""):2,1:1)) ;ins co. ptr
"RTN","IBCEF71",85,0)
 . I IBINSCO'="" I IBINSCO'=IB399INS Q  ;exclude if different ins
"RTN","IBCEF71",86,0)
 . S:IBINSCO="" IBINSCO="NONE" ;NONE will be included in the array
"RTN","IBCEF71",87,0)
 . S IBFRMTYP=+$P($G(^IBA(IBFX,IB3559,0)),"^",4) ;form type (0=both,1=UB,2=1500)
"RTN","IBCEF71",88,0)
 . ;JWS;IB*2.0*592 - if dental, no secondary id's
"RTN","IBCEF71",89,0)
 . I IB399FRM=7 Q
"RTN","IBCEF71",90,0)
 . I '(IBFRMTYP=0!(IB399FRM=0)) Q:IBFRMTYP'=IB399FRM  ;exclude if not "both" and different
"RTN","IBCEF71",91,0)
 . S IBCARE=+$P($G(^IBA(IBFX,IB3559,0)),"^",5) ;0=both(inp and outp),1=inp,2=outp,3=prescr  -- OR -- division ptr
"RTN","IBCEF71",92,0)
 . I $S(IBFILE=355.92:0,1:IBCARE=3) I IB399CAR'=3 Q  ; Id is only for Rx
"RTN","IBCEF71",93,0)
 . I $S(IBFILE=355.92:0,1:IBCARE=1!(IBCARE=2)) I IB399CAR=1!(IB399CAR=2) Q:IBCARE'=IB399CAR  ;both is OK
"RTN","IBCEF71",94,0)
 . I IBFILE=355.92,IBCARE Q:IB399CAR'=IBCARE  ; Division doesn't match
"RTN","IBCEF71",95,0)
 . S IBIDTYP=+$P($G(^IBA(IBFX,IB3559,0)),"^",6) ;prov ID type
"RTN","IBCEF71",96,0)
 . I IBFILE=355.9,IBIDTYP=$$TAXID^IBCEP8(),$S(IBPROV["VA(200":1,1:$P($G(^IBA(355.93,+IBPROV,0)),U,2)=2) Q  ; Don't extract tax id # id for indiv prov
"RTN","IBCEF71",97,0)
 . S IBIDT=IBIDTYP
"RTN","IBCEF71",98,0)
 . S IBIDTYP=$P($G(^IBE(355.97,IBIDTYP,0)),"^",3)
"RTN","IBCEF71",99,0)
 . Q:$P($G(^IBE(355.97,+IBIDT,1)),U,9)
"RTN","IBCEF71",100,0)
 . Q:IBFILE=355.9&(IBIDTYP="X4")  ;exclude CLIA #
"RTN","IBCEF71",101,0)
 . S IBID=$P($G(^IBA(IBFX,IB3559,0)),"^",7) ;prov ID value
"RTN","IBCEF71",102,0)
 . I $G(IBPROVTP)'="",$G(IBINSTP)'="",IBPROVTP'=0 I '$$CHCKSEC^IBCEF73(IB399FRM,IBPROVTP,IBINSTP,IBIDTYP) Q  ; No qualifier chk for fac
"RTN","IBCEF71",103,0)
 . I IBID'="" S IBDAT=IBPROV_"^"_IBINSCO_"^"_IBIDTYP_"^"_IBID_"^"_IBFRMTYP_"^"_IBCARE_"^"_"^"_IB3559_U_IBIDT,IBS2=$S(IBFX'=355.91:"",1:"INS DEF^")_IB3559
"RTN","IBCEF71",104,0)
 . I IBFILE'=355.92,IBID'="",IB399CAR=3 S IBQ=0 D  Q:IBQ
"RTN","IBCEF71",105,0)
 .. I $G(IBARRX(IBIDT))!(IBCARE=1) S IBQ=1 Q
"RTN","IBCEF71",106,0)
 .. I IBCARE=3&(IB399CAR=3) S IBARRX(IBIDT)=1 Q  ; Rx match
"RTN","IBCEF71",107,0)
 .. I IBCARE=0!(IBCARE=2) S IBARRX(IBIDT,IBINSCO,IBS2)=IBDAT,IBQ=1 Q
"RTN","IBCEF71",108,0)
 . I IBID'="" S IBARR(IBINSCO,IBS2)=IBDAT
"RTN","IBCEF71",109,0)
 ;
"RTN","IBCEF71",110,0)
 I IB399CAR=3 S Z=0 F  S Z=$O(IBARRX(Z)) Q:'Z  I '$G(IBARRX(Z)) D
"RTN","IBCEF71",111,0)
 . S Z1="" F  S Z1=$O(IBARRX(Z,Z1)) Q:Z1=""  S Z2="" F  S Z2=$O(IBARRX(Z,Z1,Z2)) Q:Z2=""  S IBARR(Z1,Z2)=IBARRX(Z,Z1,Z2)
"RTN","IBCEF71",112,0)
 ;
"RTN","IBCEF71",113,0)
 I IBPROV["VA(200," D  ; Get lic #s from file 2 for VA providers
"RTN","IBCEF71",114,0)
 . N Z,IBLIC
"RTN","IBCEF71",115,0)
 . ;JWS;IB*2.0*592 - if dental, no secondary id's
"RTN","IBCEF71",116,0)
 . I IB399FRM=7 Q
"RTN","IBCEF71",117,0)
 . S IBLIC=+IBPROV,IBLIC=$$GETLIC^IBCEP5D(.IBLIC)
"RTN","IBCEF71",118,0)
 . S IBIDTYP=$P($G(^IBE(355.97,+$$STLIC^IBCEP8(),0)),U,3)
"RTN","IBCEF71",119,0)
 . S Z=0 F  S Z=$O(IBLIC(Z)) Q:'Z  S:$$CHCKSEC^IBCEF73(IB399FRM,IBPROVTP,IBINSTP,IBIDTYP) IBARR("NONE","LIC"_Z_"^"_IBPROV)=IBPROV_U_"NONE"_U_IBIDTYP_U_IBLIC(Z)_U_"0"_U_"0"_U_Z_U_U_+$$STLIC^IBCEP8()
"RTN","IBCEF71",120,0)
 I IBPROV["IBA(355.93" D
"RTN","IBCEF71",121,0)
 . ;JWS;IB*2.0*592 - if dental, no secondary id's
"RTN","IBCEF71",122,0)
 . I IB399FRM=7 Q
"RTN","IBCEF71",123,0)
 . Q:$P($G(^IBA(355.93,+IBPROV,0)),U,12)=""
"RTN","IBCEF71",124,0)
 . S IBIDTYP=$P($G(^IBE(355.97,+$$STLIC^IBCEP8(),0)),U,3)
"RTN","IBCEF71",125,0)
 . I $$CHCKSEC^IBCEF73(IB399FRM,IBPROVTP,IBINSTP,IBIDTYP) D
"RTN","IBCEF71",126,0)
 . . S IBARR("NONE","LIC"_$P($G(^DIC(5,+$P(^IBA(355.93,+IBPROV,0),U,7),0)),U,2)_"^"_IBPROV)=IBPROV_U_"NONE"_U_IBIDTYP_U_$P(^IBA(355.93,+IBPROV,0),U,12)_U_"0"_U_"0"_U_$P(^IBA(355.93,+IBPROV,0),U,7)_U_U_+IBPROV
"RTN","IBCEF71",127,0)
 Q
"RTN","IBCEF71",128,0)
 ;
"RTN","IBCEF71",129,0)
ALLPRFAC(IBXIEN,IBXSAVE) ; Return all non-VA/outside facility prov ids
"RTN","IBCEF71",130,0)
 ; and all VA alternate prov ids
"RTN","IBCEF71",131,0)
 ; IBXIEN = ien file 399
"RTN","IBCEF71",132,0)
 ; IBXSAVE = subscripted array returned
"RTN","IBCEF71",133,0)
 N IBPROV,IBFRMTYP,IBCARE,IBRETARR,IBRET1,IBCOBN,Z,Z0,Z1,ZZ
"RTN","IBCEF71",134,0)
 K IBXSAVE("PROVINF_FAC",IBXIEN) ; Always rebuild this
"RTN","IBCEF71",135,0)
 S IBCOBN=+$$COBN^IBCEF(IBXIEN)
"RTN","IBCEF71",136,0)
 ;JWS;IB*2.0*592;Dental form 7 - no sec provider ids
"RTN","IBCEF71",137,0)
 S IBFRMTYP=$$FT^IBCEF(IBXIEN),IBFRMTYP=$S(IBFRMTYP=2:2,IBFRMTYP=3:1,IBFRMTYP=7:7,1:0)
"RTN","IBCEF71",138,0)
 S IBPROV=$P($G(^DGCR(399,IBXIEN,"U2")),U,10)
"RTN","IBCEF71",139,0)
 ; IB patch 320 - Build IBPROV variable better when a non-VA facility exists
"RTN","IBCEF71",140,0)
 I IBPROV S IBPROV=IBPROV_";IBA(355.93,"
"RTN","IBCEF71",141,0)
 I 'IBPROV S IBCARE=$P($G(^DGCR(399,IBXIEN,0)),U,22)
"RTN","IBCEF71",142,0)
 I IBPROV D
"RTN","IBCEF71",143,0)
 . S IBCARE=$S($$ISRX^IBCEF1(IBXIEN):3,1:0) ;if Rx refill bill
"RTN","IBCEF71",144,0)
 . S:IBCARE=0 IBCARE=$$INPAT^IBCEF(IBXIEN,1) S:'IBCARE IBCARE=2 ;1-inp, 2-out
"RTN","IBCEF71",145,0)
 F Z=1:1:3 K IBRETARR I $G(^DGCR(399,IBXIEN,"I"_Z)) D
"RTN","IBCEF71",146,0)
 . D PRACT(+^DGCR(399,IBXIEN,"I"_Z),IBFRMTYP,IBCARE,IBPROV,.IBRETARR,0,$S(Z=IBCOBN:"C",1:"O"),$S('IBPROV:355.92,1:355.9))
"RTN","IBCEF71",147,0)
 . K IBRET1
"RTN","IBCEF71",148,0)
 . S Z0="" F  S Z0=$O(IBRETARR(Z0)) Q:Z0=""  S Z1="" F  S Z1=$O(IBRETARR(Z0,Z1)) Q:Z1=""  D
"RTN","IBCEF71",149,0)
 .. ; Sort by div/id type
"RTN","IBCEF71",150,0)
 .. S IBRET1($S(IBPROV:0,1:+$P(IBRETARR(Z0,Z1),U,6)),+$P(IBRETARR(Z0,Z1),U,9))=IBRETARR(Z0,Z1)
"RTN","IBCEF71",151,0)
 .. Q
"RTN","IBCEF71",152,0)
 . ;
"RTN","IBCEF71",153,0)
 . S Z0=$O(IBRET1(""),-1) Q:Z0=""  D
"RTN","IBCEF71",154,0)
 .. ; IB patch 320 - loop thru all ID's
"RTN","IBCEF71",155,0)
 .. S Z1="" F  S Z1=$O(IBRET1(Z0,Z1)) Q:Z1=""  D
"RTN","IBCEF71",156,0)
 ... I Z=IBCOBN S IBXSAVE("PROVINF_FAC",IBXIEN,"C",1,0,$O(IBXSAVE("PROVINF_FAC",IBXIEN,"C",1,0," "),-1)+1)=IBRET1(Z0,Z1) Q
"RTN","IBCEF71",157,0)
 ... S ZZ=$S(Z=1:1,Z=2:(IBCOBN=3)+1,1:2)
"RTN","IBCEF71",158,0)
 ... S IBXSAVE("PROVINF_FAC",IBXIEN,"O",ZZ,0,$O(IBXSAVE("PROVINF_FAC",IBXIEN,"O",ZZ,0," "),-1)+1)=IBRET1(Z0,Z1),IBXSAVE("PROVINF_FAC",IBXIEN,"O",ZZ)=$E("PST",Z)
"RTN","IBCEF71",159,0)
 ... Q
"RTN","IBCEF71",160,0)
 .. Q
"RTN","IBCEF71",161,0)
 . Q
"RTN","IBCEF71",162,0)
 ;
"RTN","IBCEF71",163,0)
 S IBXSAVE("PROVINF_FAC",IBXIEN)=IBXIEN,IBXSAVE("PROVINF_FAC",IBXIEN,"C",1)=$E("PST",IBCOBN)
"RTN","IBCEF71",164,0)
 Q
"RTN","IBCEF71",165,0)
 ;
"RTN","IBCEF71",166,0)
OTHID(IBXSAVE,IBXDATA,IBXIEN,PRIDSEQ,PRTYP,IBQ,IBFAC) ; From data in IBXSAVE,
"RTN","IBCEF71",167,0)
 ;  determine id or qualifier to output in the 837 records OP*
"RTN","IBCEF71",168,0)
 ; Returns IBXDATA array IBXDATA(n)=data
"RTN","IBCEF71",169,0)
 ; IBXIEN = ien of the bill-file 399
"RTN","IBCEF71",170,0)
 ; PRIDSEQ = sequence of the payer id needed
"RTN","IBCEF71",171,0)
 ; PRTYP = provider type to check for data
"RTN","IBCEF71",172,0)
 ; IBQ = 1 if qualifier needed, 0/null if id needed
"RTN","IBCEF71",173,0)
 ; IBFAC = 1 if facility id, 0 for individual provider id
"RTN","IBCEF71",174,0)
 ; 
"RTN","IBCEF71",175,0)
 N Z,Z0,Z1
"RTN","IBCEF71",176,0)
 S Z0="PROVINF"_$S('$G(IBFAC):"",1:"_FAC"),Z1=$S($G(IBQ):3,1:4)
"RTN","IBCEF71",177,0)
 S Z=0 F  S Z=$O(IBXSAVE("OSQ",Z)) Q:'Z  D
"RTN","IBCEF71",178,0)
 . I $P($G(IBXSAVE(Z0,IBXIEN,"O",Z,+$G(PRTYP),+$G(PRIDSEQ))),U,4)'="" S IBXDATA(IBXSAVE("OSQ",Z))=$P(IBXSAVE(Z0,IBXIEN,"O",Z,+$G(PRTYP),+$G(PRIDSEQ)),U,Z1)
"RTN","IBCEF71",179,0)
 Q
"RTN","IBCEF71",180,0)
 ;
"RTN","IBCEF71",181,0)
SETSEQ(IBXIEN,IBXSAVE,IBXDATA,PRTYP,IBFAC,IBOP) ; Sets up IBXSAVE("OSQ")
"RTN","IBCEF71",182,0)
 ;  array for other id seq in 837 records OP*
"RTN","IBCEF71",183,0)
 ; Returns IBXDATA(n)=cob seq indicator for ids
"RTN","IBCEF71",184,0)
 ; IBXIEN = ien of bill-399
"RTN","IBCEF71",185,0)
 ; PRTYP = the provider type to check for data for indiv provider
"RTN","IBCEF71",186,0)
 ; IBFAC = 1 if facility id, 0 for individual provider id
"RTN","IBCEF71",187,0)
 ; IBOP = segement # in OP being output
"RTN","IBCEF71",188,0)
 N C,Z,Z0,Z1,OK
"RTN","IBCEF71",189,0)
 S C=0,Z0="PROVINF"_$S('$G(IBFAC):"",1:"_FAC")
"RTN","IBCEF71",190,0)
 S:$G(IBFAC) PRTYP=0
"RTN","IBCEF71",191,0)
 S Z=0 F  S Z=$O(IBXSAVE(Z0,IBXIEN,"O",Z)) Q:'Z  S OK=0 D
"RTN","IBCEF71",192,0)
 . N Z1 F Z1=1:1 Q:'$D(IBXSAVE(Z0,IBXIEN,"O",Z,+$G(PRTYP),Z1))  I $P(IBXSAVE(Z0,IBXIEN,"O",Z,+$G(PRTYP),Z1),U,4)'="""" S OK=1 Q
"RTN","IBCEF71",193,0)
 . I OK S C=C+1,IBXSAVE("OSQ",Z)=C
"RTN","IBCEF71",194,0)
 S Z=0 F  S Z=$O(IBXSAVE("OSQ",Z)) Q:'Z  S IBXDATA(IBXSAVE("OSQ",Z))=$G(IBXSAVE(Z0,IBXIEN,"O",Z)) D:IBXSAVE("OSQ",Z)>1 ID^IBCEF2(IBXSAVE("OSQ",Z),"OP"_$G(IBOP)_" ")
"RTN","IBCEF71",195,0)
 Q
"RTN","IBCEF71",196,0)
 ;
"RTN","IBCEF71",197,0)
PSPRV(IBIFN) ;
"RTN","IBCEF71",198,0)
 Q $$PSPRV^IBCEF7(IBIFN) ; Moved
"RTN","IBCEF71",199,0)
 ;
"RTN","IBCEF72")
0^91^B59075267^B57296289
"RTN","IBCEF72",1,0)
IBCEF72 ;WOIFO/SS - FORMATTER AND EXTRACTOR SPECIFIC BILL FUNCTIONS ;8/6/03 10:56am
"RTN","IBCEF72",2,0)
 ;;2.0;INTEGRATED BILLING;**232,320,349,432,516,592**;21-MAR-94;Build 58
"RTN","IBCEF72",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEF72",4,0)
 ;
"RTN","IBCEF72",5,0)
 ;
"RTN","IBCEF72",6,0)
 ;Input:
"RTN","IBCEF72",7,0)
 ;IBINSCO - ptr to #36
"RTN","IBCEF72",8,0)
 ;IBFRMTYP 0=unknwn/both,1=UB,2=1500,7=J430D
"RTN","IBCEF72",9,0)
 ;IBCARE - 0=unknwn or both inp/outp,1=inpatient, 2=outpatient, 3 -RX
"RTN","IBCEF72",10,0)
 ;Output: X12 IDtype^ID^ID TYPE ptr to file 355.97
"RTN","IBCEF72",11,0)
CH35591(IBINSCO,IBFRMTYP,IBCARE) ;
"RTN","IBCEF72",12,0)
 N IB35591,IBRET,IB1
"RTN","IBCEF72",13,0)
 S IB35591=0,IBRET=""
"RTN","IBCEF72",14,0)
 F  S IB35591=$O(^IBA(355.91,"B",IBINSCO,IB35591)) Q:+IB35591=0  Q:IBRET'=""  D
"RTN","IBCEF72",15,0)
 . S IB1=$G(^IBA(355.91,IB35591,0))
"RTN","IBCEF72",16,0)
 . I '($P(IB1,"^",4)=0!(IBFRMTYP=0)) Q:$P(IB1,"^",4)'=IBFRMTYP  ;if wrong form type
"RTN","IBCEF72",17,0)
 . I ($P(IB1,"^",5)=3)!(IBCARE=3) Q:IBCARE'=$P(IB1,"^",5)  ;if not RX
"RTN","IBCEF72",18,0)
 . ;JWS;IB*2.0*592 - if dental, no secondary id's
"RTN","IBCEF72",19,0)
 . I IBFRMTYP=7 Q
"RTN","IBCEF72",20,0)
 . I ($P(IB1,"^",5)=1)!($P(IB1,"^",5)=2) I (IBCARE=1)!(IBCARE=2) Q:$P(IB1,"^",5)'=IBCARE  ;if wrong care type
"RTN","IBCEF72",21,0)
 . S IBRET=$P($G(^IBE(355.97,+$P(IB1,"^",6),0)),"^",3)_"^"_$P(IB1,"^",7)_U_+$P(IB1,U,6)
"RTN","IBCEF72",22,0)
 Q IBRET
"RTN","IBCEF72",23,0)
 ;
"RTN","IBCEF72",24,0)
FINDEIN(IBXIEN,IBPROV,IBFAC,IBS) ; find EIN for facility/ SSN for person
"RTN","IBCEF72",25,0)
 ; IBXIEN = ien of bill entry file 399
"RTN","IBCEF72",26,0)
 ; IBFAC = 1 if facility, 0 if individual provider
"RTN","IBCEF72",27,0)
 ; IBPROV = ien of provider (vp format)
"RTN","IBCEF72",28,0)
 ; IBS = 1 if person's EIN should be returned if there, otherwise SSN
"RTN","IBCEF72",29,0)
 ; FUNCTION RETURNS 
"RTN","IBCEF72",30,0)
 ;    EIN or SSN ^ 24 for EIN, 34 for SSN or null if none found
"RTN","IBCEF72",31,0)
 N Z,Z0,IBARR,IBEIN,IBSSN
"RTN","IBCEF72",32,0)
 S (IBEIN,IBSSN)=""
"RTN","IBCEF72",33,0)
 D ALLID^IBCEP8(IBPROV,"",.IBARR)
"RTN","IBCEF72",34,0)
 S Z=0 F  S Z=$O(IBARR(Z)) Q:'Z  D  Q:IBEIN'=""
"RTN","IBCEF72",35,0)
 . I $G(IBFAC) Q:$P(IBARR(Z),U,7)'="EI"  S IBEIN=$P(IBARR(Z),U,2)_U_24 Q
"RTN","IBCEF72",36,0)
 . I $P(IBARR(Z),U,7)="SY" D  Q
"RTN","IBCEF72",37,0)
 .. I $G(IBS) S IBSSN=$P(IBARR(Z),U,2)_U_34 Q
"RTN","IBCEF72",38,0)
 . S IBEIN=$P(IBARR(Z),U,2)_U_24
"RTN","IBCEF72",39,0)
 . I $G(IBS),$P(IBARR(Z),U,7)="EI" S IBEIN=$P(IBARR(Z),U,2)_U_24
"RTN","IBCEF72",40,0)
 I $G(IBS),IBEIN="" S IBEIN=IBSSN
"RTN","IBCEF72",41,0)
 Q IBEIN
"RTN","IBCEF72",42,0)
 ;
"RTN","IBCEF72",43,0)
 ;
"RTN","IBCEF72",44,0)
NONVAID(IBXIEN,IBX,IBFAC,IBS) ; Find the non-VA provider default id
"RTN","IBCEF72",45,0)
 ; IBXIEN = the ien of the bill (file 399)
"RTN","IBCEF72",46,0)
 ; IBX = id data returned if passed by reference
"RTN","IBCEF72",47,0)
 ; IBFAC = 1 if getting the id for the facility or 0 for rendering prov
"RTN","IBCEF72",48,0)
 ; IBS = 1 if getting id for person, but need the EIN if there
"RTN","IBCEF72",49,0)
 ; Function returns the id^type of id^person/facility flag:
"RTN","IBCEF72",50,0)
 ;   Type of id: 1 = SSN    2 = EIN   0 = not found
"RTN","IBCEF72",51,0)
 ;   person/facility: 1 = person   2 = facility
"RTN","IBCEF72",52,0)
 N Z,IBXSAVE,IBU2,IBTYPE,IBZ,IBF,IBPROV,Q,Q0
"RTN","IBCEF72",53,0)
 S IBTYPE=2,IBU2=$G(^DGCR(399,IBXIEN,"U2")),IBF=2,IBPROV=""
"RTN","IBCEF72",54,0)
 ;
"RTN","IBCEF72",55,0)
 S Z=$P(IBU2,U,10)
"RTN","IBCEF72",56,0)
 I 'Z S IBX="",IBTYPE=0 G NONVAQ ; Not a non-VA facility
"RTN","IBCEF72",57,0)
 S IBPROV=Z_";IBA(355.93,"
"RTN","IBCEF72",58,0)
 ;
"RTN","IBCEF72",59,0)
 ; Get EIN
"RTN","IBCEF72",60,0)
 I $G(IBFAC) D  G NONVAQ
"RTN","IBCEF72",61,0)
 . S IBX=$P($$FINDEIN(IBXIEN,IBPROV,IBFAC),U),IBTYPE=2
"RTN","IBCEF72",62,0)
 ;
"RTN","IBCEF72",63,0)
 ; Get EIN/SSN
"RTN","IBCEF72",64,0)
 I '$G(IBFAC) D  G NONVAQ
"RTN","IBCEF72",65,0)
 . S IBX="",IBF=1
"RTN","IBCEF72",66,0)
 . S Q0=($$FT^IBCEF(IBXIEN)=3)+3 ; 3 for rendering/4 for attending
"RTN","IBCEF72",67,0)
 . S Q=+$O(^DGCR(399,IBXIEN,"PRV","B",Q0,0))
"RTN","IBCEF72",68,0)
 . S IBPROV=$P($G(^DGCR(399,IBXIEN,"PRV",Q,0)),U,2)
"RTN","IBCEF72",69,0)
 . I IBPROV S IBX=$$FINDEIN(IBXIEN,IBPROV,IBFAC,$G(IBS)),IBTYPE=$S($P(IBX,U,2)=24:2,$P(IBX,U,2)=34:1,1:0),IBX=$P(IBX,U)
"RTN","IBCEF72",70,0)
 ;
"RTN","IBCEF72",71,0)
NONVAQ I IBTYPE,IBX="",$P(IBU2,U,12)'="" S IBX=$P(IBU2,U,12) ; pull from 399
"RTN","IBCEF72",72,0)
 S IBX=$G(IBX)
"RTN","IBCEF72",73,0)
 Q IBX_U_IBTYPE_U_IBF
"RTN","IBCEF72",74,0)
 ;----
"RTN","IBCEF72",75,0)
 ;checks if there is data for OP* segments and 
"RTN","IBCEF72",76,0)
 ;then populates PROV COB SEQ
"RTN","IBCEF72",77,0)
 ;Input:
"RTN","IBCEF72",78,0)
 ;IBXIEN - ien in #399
"RTN","IBCEF72",79,0)
 ;IBSAVE - "in" array (i.e. IBXSAVE)
"RTN","IBCEF72",80,0)
 ;IBDATA - "out" array (i.e. IBXDATA)
"RTN","IBCEF72",81,0)
 ;IBFUNC - FUNCTION from #399 (1-refering, 2 -operating, etc)
"RTN","IBCEF72",82,0)
 ;IBSEGM - segment record ID, optional
"RTN","IBCEF72",83,0)
 ;Output:
"RTN","IBCEF72",84,0)
 ; IBDATA with formatted output
"RTN","IBCEF72",85,0)
PROVSEQ(IBXIEN,IBSAVE,IBDATA,IBFUNC,IBSEGM) ;
"RTN","IBCEF72",86,0)
 N IB1,IBINS,IBFL
"RTN","IBCEF72",87,0)
 ;S IBFL=$S(IBFUNC=3!(IBFUNC=4):1,1:0)
"RTN","IBCEF72",88,0)
 F IB1=1,2 D
"RTN","IBCEF72",89,0)
 . I '$$ISINSUR^IBCEF71($G(IBSAVE("PROVINF",IBXIEN,"O",IB1)),IBXIEN) Q  ;don't create anything if there is no such insurance
"RTN","IBCEF72",90,0)
 . ;*432/TAZ - Removed. Attending and Rendering can be on same bill now.
"RTN","IBCEF72",91,0)
 . ;I IBFL S IBFUNC=$S($O(IBSAVE("PROVINF",IBXIEN,"O",IB1,3,0)):3,1:4)
"RTN","IBCEF72",92,0)
 . I '$O(IBSAVE("PROVINF",IBXIEN,"O",IB1,IBFUNC,0)) Q
"RTN","IBCEF72",93,0)
 . S IBDATA(IB1)=$G(IBSAVE("PROVINF",IBXIEN,"O",IB1))
"RTN","IBCEF72",94,0)
 . I $G(IBSEGM)'="" D ID^IBCEF2(IB1,IBSEGM)
"RTN","IBCEF72",95,0)
 Q
"RTN","IBCEF72",96,0)
 ;
"RTN","IBCEF72",97,0)
OUTPRVID(IBXIEN,IBXSAVE) ; Extract the outside provider or facility ids
"RTN","IBCEF72",98,0)
 ; into IBXSAVE array
"RTN","IBCEF72",99,0)
 ; Function returns 1 if person or 2 if facility ids or "" if neither
"RTN","IBCEF72",100,0)
 N Z,IBXDATA,IBPERSON,TAG
"RTN","IBCEF72",101,0)
 ;WCJ;11/1/2005 Extract the first 3 chars of Z instead.
"RTN","IBCEF72",102,0)
 S Z=$E($$PSPRV^IBCEF7(IBXIEN),1,3),IBPERSON=""
"RTN","IBCEF72",103,0)
 ;EJK 8/23/05 IB*320 - CHANGED Z=101 TO Z=1010. Z WILL ALWAYS BE A 4 DIGIT #. 
"RTN","IBCEF72",104,0)
 ; WCJ 11/1/2005 ; Removed EJK's change and added above change
"RTN","IBCEF72",105,0)
 I Z=111!(Z=101) S TAG=$S(Z=101:"OUTSIDE FAC PROVIDER INF",1:"CUR/OTH PROVIDER INFO") D F^IBCEF("N-ALL "_TAG) S IBPERSON=$S('$E(Z,2):2,1:1)
"RTN","IBCEF72",106,0)
 Q IBPERSON
"RTN","IBCEF72",107,0)
 ;
"RTN","IBCEF72",108,0)
OUTPRV(IBREC,IBXIEN,IBXSAVE) ; Extract the outside provider or facility ids
"RTN","IBCEF72",109,0)
 ; into IBXSAVE array
"RTN","IBCEF72",110,0)
 ; Function returns 1 if person or 2 if facility ids or "" if neither
"RTN","IBCEF72",111,0)
 ; IBREC = the record whose ids should be returned
"RTN","IBCEF72",112,0)
 N IBPERSON,IBFRM,IBTYPE,IBFAC
"RTN","IBCEF72",113,0)
 I IBREC="SUB1"!(IBREC="OP6") D
"RTN","IBCEF72",114,0)
 . K IBXSAVE("PROVINF",IBXIEN),IBXSAVE("PROVINF_FAC",IBXIEN)
"RTN","IBCEF72",115,0)
 . S IBPERSON=$$OUTPRVID(IBXIEN,.IBXSAVE),IBFAC=$S(IBPERSON=1:0,1:1)
"RTN","IBCEF72",116,0)
 E  D
"RTN","IBCEF72",117,0)
 . K IBXSAVE("PROVINF_FAC",IBXIEN)
"RTN","IBCEF72",118,0)
 . D F^IBCEF("N-ALL OUTSIDE FAC PROVIDER INF")
"RTN","IBCEF72",119,0)
 . S IBPERSON=2,IBFAC=1
"RTN","IBCEF72",120,0)
 S IBFRM=$$FT^IBCEF(IBXIEN),IBFRM=$S(IBFRM=2:2,1:1)
"RTN","IBCEF72",121,0)
 S IBTYPE=$S(IBREC["SUB":"C",1:"O")
"RTN","IBCEF72",122,0)
 D CHCKSUB^IBCEF73(IBFRM,IBREC,IBFAC,IBTYPE,.IBXSAVE)
"RTN","IBCEF72",123,0)
 Q IBPERSON
"RTN","IBCEF72",124,0)
 ;
"RTN","IBCEF72",125,0)
 ;get IENs in file #36 for other insurances
"RTN","IBCEF72",126,0)
OTHINS(IB399,IBRES) ;
"RTN","IBCEF72",127,0)
 N IBFRMTYP,Z,Z1,Z2,Z4
"RTN","IBCEF72",128,0)
 S Z=$$COBN^IBCEF(IB399),Z0=0
"RTN","IBCEF72",129,0)
 F Z1=1:1:3 I Z1'=Z,$D(^DGCR(399,IB399,"I"_Z1)) D
"RTN","IBCEF72",130,0)
 . S Z0=Z0+1
"RTN","IBCEF72",131,0)
 . ; MRD;IB*2.0*516 - Added HPID as second piece.
"RTN","IBCEF72",132,0)
 . S IBRES(Z0)=+$G(^DGCR(399,IB399,"I"_Z1))_U_$P(^DGCR(399,IB399,"M1"),U,12+Z1)
"RTN","IBCEF72",133,0)
 . Q
"RTN","IBCEF72",134,0)
 Q
"RTN","IBCEF72",135,0)
 ;
"RTN","IBCEF72",136,0)
 ;get other insurance EDI ID NUMBERs
"RTN","IBCEF72",137,0)
OTHINSID(IB399,IBRES) ;insurance EDI 
"RTN","IBCEF72",138,0)
 N IBFRMTYP,IBZ,Z0,Z1,Z4
"RTN","IBCEF72",139,0)
 ;JWS;IB*2.0*592;Dental form
"RTN","IBCEF72",140,0)
 S IBFRMTYP=$$FT^IBCEF(IB399),IBFRMTYP=$S(IBFRMTYP=2:2,IBFRMTYP=3:1,IBFRMTYP=7:7,1:0)
"RTN","IBCEF72",141,0)
 S Z4=$S(IBFRMTYP=1:4,IBFRMTYP=7:15,1:2) ;UB - piece4,DENTAL - piece 15, 1500 or BOTH -piece 2, 
"RTN","IBCEF72",142,0)
 D OTHINS(IB399,.IBZ)
"RTN","IBCEF72",143,0)
 S Z1=0
"RTN","IBCEF72",144,0)
 F Z0=1,2 I $G(IBZ(Z0)) D
"RTN","IBCEF72",145,0)
 . S IBRES(Z0)=$S($$MCRWNR^IBEFUNC(+IBZ(Z0)):$S(IBFRMTYP=1:"12M61",1:"SMTX1"),1:$P($G(^DIC(36,+IBZ(Z0),3)),U,Z4))
"RTN","IBCEF72",146,0)
 . ; MRD;IB*2.0*516 - Added HPID as second piece.
"RTN","IBCEF72",147,0)
 . S $P(IBRES(Z0),U,2)=$P(IBZ(Z0),U,2)
"RTN","IBCEF72",148,0)
 . Q
"RTN","IBCEF72",149,0)
 Q
"RTN","IBCEF72",150,0)
 ;
"RTN","IBCEF72",151,0)
 ;get other insurance addresses
"RTN","IBCEF72",152,0)
OTHINADR(IB399,IBRES,IBADDFLD) ;insurance EDI
"RTN","IBCEF72",153,0)
 N IBZ,Z0,Z1,Z4
"RTN","IBCEF72",154,0)
 D OTHINS(IB399,.IBZ)
"RTN","IBCEF72",155,0)
 S Z1=0
"RTN","IBCEF72",156,0)
 I IBADDFLD=18 D  Q
"RTN","IBCEF72",157,0)
 . F Z0=1:1:2 I $G(IBZ(Z0)) D
"RTN","IBCEF72",158,0)
 . . S IBRES(Z0)=$P($G(^DIC(36,+IBZ(Z0),.11)),U,1)
"RTN","IBCEF72",159,0)
 . . S IBRES(Z0)=$E(IBRES(Z0),1,55)
"RTN","IBCEF72",160,0)
 I IBADDFLD=18.9 D  Q
"RTN","IBCEF72",161,0)
 . F Z0=1:1:2 I $G(IBZ(Z0)) D
"RTN","IBCEF72",162,0)
 . . S IBRES(Z0)=$P($G(^DIC(36,+IBZ(Z0),.11)),U,1)
"RTN","IBCEF72",163,0)
 . . S Z4=$P($G(^DIC(36,+IBZ(Z0),.11)),U,2) S:Z4'="" IBRES(Z0)=IBRES(Z0)_", "_Z4
"RTN","IBCEF72",164,0)
 . . S Z4=$P($G(^DIC(36,+IBZ(Z0),.11)),U,3) S:Z4'="" IBRES(Z0)=IBRES(Z0)_", "_Z4
"RTN","IBCEF72",165,0)
 . . S Z4=$P($G(^DIC(36,+IBZ(Z0),.11)),U,4) S:Z4'="" IBRES(Z0)=IBRES(Z0)_", "_Z4
"RTN","IBCEF72",166,0)
 . . S Z4=$P($G(^DIC(5,+$P($G(^DIC(36,+IBZ(Z0),.11)),U,5),0)),U,2) S:Z4'="" IBRES(Z0)=IBRES(Z0)_", "_Z4
"RTN","IBCEF72",167,0)
 . . S Z4=$P($G(^DIC(36,+IBZ(Z0),.11)),U,6) S:Z4'="" IBRES(Z0)=IBRES(Z0)_", "_Z4
"RTN","IBCEF72",168,0)
 . . S IBRES(Z0)=$E(IBRES(Z0),1,157)
"RTN","IBCEF72",169,0)
 I IBADDFLD=19 D  Q
"RTN","IBCEF72",170,0)
 . F Z0=1:1:2 I $G(IBZ(Z0)) D
"RTN","IBCEF72",171,0)
 . . S IBRES(Z0)=$P($G(^DIC(36,+IBZ(Z0),.11)),U,2)
"RTN","IBCEF72",172,0)
 . . S IBRES(Z0)=IBRES(Z0)_" "_$P($G(^DIC(36,+IBZ(Z0),.11)),U,3)
"RTN","IBCEF72",173,0)
 . . S IBRES(Z0)=$E(IBRES(Z0),1,55)
"RTN","IBCEF72",174,0)
 I IBADDFLD=20 D  Q
"RTN","IBCEF72",175,0)
 . F Z0=1:1:2 I $G(IBZ(Z0)) D
"RTN","IBCEF72",176,0)
 . . S IBRES(Z0)=$P($G(^DIC(36,+IBZ(Z0),.11)),U,4)
"RTN","IBCEF72",177,0)
 . . S IBRES(Z0)=$E(IBRES(Z0),1,30)
"RTN","IBCEF72",178,0)
 I IBADDFLD=21 D  Q
"RTN","IBCEF72",179,0)
 . F Z0=1:1:2 I $G(IBZ(Z0)) D
"RTN","IBCEF72",180,0)
 . . S IBRES(Z0)=$P($G(^DIC(5,+$P($G(^DIC(36,+IBZ(Z0),.11)),U,5),0)),U,2)
"RTN","IBCEF72",181,0)
 . . S IBRES(Z0)=$E(IBRES(Z0),1,2)
"RTN","IBCEF72",182,0)
 I IBADDFLD=22 D  Q
"RTN","IBCEF72",183,0)
 . F Z0=1:1:2 I $G(IBZ(Z0)) D
"RTN","IBCEF72",184,0)
 . . S IBRES(Z0)=$P($G(^DIC(36,+IBZ(Z0),.11)),U,6)
"RTN","IBCEF72",185,0)
 . . S IBRES(Z0)=$E(IBRES(Z0),1,15)
"RTN","IBCEF72",186,0)
 Q
"RTN","IBCEF72",187,0)
 ;
"RTN","IBCEF72",188,0)
SFIDQ(IBXIEN,IBXSAVE,IBXDATA) ; Find the service facility id qualifier for
"RTN","IBCEF72",189,0)
 ; 837 record SUB2-5
"RTN","IBCEF72",190,0)
 ;IBXIEN = ien of 399
"RTN","IBCEF72",191,0)
 ;Pass by reference: IBXSAVE (input/output)  IBXDATA (output)
"RTN","IBCEF72",192,0)
 N B,Z
"RTN","IBCEF72",193,0)
 K IBXSAVE("NVID")
"RTN","IBCEF72",194,0)
 D  ; protect IBXDATA
"RTN","IBCEF72",195,0)
 . N IBXDATA
"RTN","IBCEF72",196,0)
 . D F^IBCEF("N-RENDERING INSTITUTION")
"RTN","IBCEF72",197,0)
 . S:IBXDATA'="" IBXSAVE("IBFAC")=IBXDATA
"RTN","IBCEF72",198,0)
 I $P($G(IBXSAVE("IBFAC")),U,2)'=1 K IBXDATA Q
"RTN","IBCEF72",199,0)
 S Z=$$PSPRV^IBCEF7(IBXIEN)
"RTN","IBCEF72",200,0)
 ;WCJ 11/04/2005 If a Non-VA facility 
"RTN","IBCEF72",201,0)
 I $E(Z) D
"RTN","IBCEF72",202,0)
 . S IBXSAVE("NVID")=$$NONVAID^IBCEF72(IBXIEN,.B,$E(Z),1)
"RTN","IBCEF72",203,0)
 .; S IBXSAVE("NVID")=$$NONVAID^IBCEF72(IBXIEN,.B,'$E(Z,2),1)
"RTN","IBCEF72",204,0)
 . S IBXDATA=$P("^34^24",U,$P(IBXSAVE("NVID"),U,2)+1)
"RTN","IBCEF72",205,0)
 ;S Z=$$PSPRV^IBCEF7(IBXIEN),IBXSAVE("NVID")=$$NONVAID^IBCEF72(IBXIEN,.B,'$E(Z,2),1),IBXDATA=24
"RTN","IBCEF72",206,0)
 Q
"RTN","IBCEF72",207,0)
 ;
"RTN","IBCEF72",208,0)
OTHP36(IBXIEN,IBZOUT)   ;
"RTN","IBCEF72",209,0)
 N Z,Z0,Z1,IBZ
"RTN","IBCEF72",210,0)
 D F^IBCEF("N-ALL INSURANCE CO 837 ID","IBZ")
"RTN","IBCEF72",211,0)
 F Z=1,2,3 S IBZOUT(Z)=+$$POLICY^IBCEF(IBXIEN,1,$E("PST",Z))
"RTN","IBCEF72",212,0)
 Q
"RTN","IBCEF72",213,0)
 ;
"RTN","IBCEF72",214,0)
 ;---------SORT-----------
"RTN","IBCEF72",215,0)
 ;IBPRNUM - seq #
"RTN","IBCEF72",216,0)
 ;IBPRTYP - type of provider (use FUNCTION value from file 399, fld 222)
"RTN","IBCEF72",217,0)
 ;IB399 = ien file 399
"RTN","IBCEF72",218,0)
 ;IBSRC,IBDST - source,destination arrays
"RTN","IBCEF72",219,0)
 ;IBN - starting #
"RTN","IBCEF72",220,0)
 ;Output:
"RTN","IBCEF72",221,0)
 ; IBDST(1-primary/2-secondary provider,Provider type(FUNCTION),N)=
"RTN","IBCEF72",222,0)
 ; =provider/VARIABLEPTR^Insurance PTR #36 or NONE^ID type^ID^Form type^Care type^state ptr #5 for state license #
"RTN","IBCEF72",223,0)
 ; where N is numeration (1 for ID1, 2 for ID2, etc)
"RTN","IBCEF72",224,0)
GETSSN(IBPTR)   ;look for SSN in #200 first and if not found then look at #355.9
"RTN","IBCEF72",225,0)
 ;if in file #200
"RTN","IBCEF72",226,0)
 I $P(IBPTR,";",2)="VA(200," Q $$SSN200^IBCEF73(IBPTR)
"RTN","IBCEF72",227,0)
 ;if in 355.93 then use 355.9
"RTN","IBCEF72",228,0)
 Q $$SSN3559^IBCEF73(IBPTR)
"RTN","IBCEF72",229,0)
 ;--
"RTN","IBCEF72",230,0)
 ;SSN3559
"RTN","IBCEF72",231,0)
 ;Find SSN from 355.9
"RTN","IBCEF72",232,0)
 ;Input:
"RTN","IBCEF72",233,0)
 ; Variable pointer to ^VA(200 or ^IBA(355.93
"RTN","IBCEF72",234,0)
 ;Output:
"RTN","IBCEF72",235,0)
 ; SSN or null
"RTN","IBCEF72",236,0)
 ;
"RTN","IBCEF72",237,0)
PADNDC(Z) ;PAD LEADING ZERO'S INTO A NON 5-4-2 FORMAT NDC NUMBER
"RTN","IBCEF72",238,0)
 ;Z IS ITERATION, ONLY PAD CURRENT NDC NUMBER
"RTN","IBCEF72",239,0)
 N NDC
"RTN","IBCEF72",240,0)
 S NDC=$P(IBXSAVE("OUTPT",Z,"RX"),"^",3)
"RTN","IBCEF72",241,0)
 Q:$L(NDC)=13
"RTN","IBCEF72",242,0)
 I $L(NDC)=14 D  Q
"RTN","IBCEF72",243,0)
 . S $P(NDC,"-",1)=$E($P(NDC,"-",1),2,$L($P(NDC,"-",1)))
"RTN","IBCEF72",244,0)
 . S $P(IBXSAVE("OUTPT",Z,"RX"),"^",3)=NDC
"RTN","IBCEF72",245,0)
 I $L($P(NDC,"-",1))'=5 S $P(NDC,"-",1)="0"_$P(NDC,"-",1)
"RTN","IBCEF72",246,0)
 I $L($P(NDC,"-",2))'=4 S $P(NDC,"-",2)="0"_$P(NDC,"-",2)
"RTN","IBCEF72",247,0)
 I $L($P(NDC,"-",3))'=2 S $P(NDC,"-",3)="0"_$P(NDC,"-",3)
"RTN","IBCEF72",248,0)
 S $P(IBXSAVE("OUTPT",Z,"RX"),"^",3)=NDC
"RTN","IBCEF72",249,0)
 Q
"RTN","IBCEF72",250,0)
 ;
"RTN","IBCEF73")
0^71^B61881067^B59655554
"RTN","IBCEF73",1,0)
IBCEF73 ;WOIFO/SS - FORMATTER AND EXTRACTOR SPECIFIC BILL FUNCTIONS ;8/6/03 10:56am
"RTN","IBCEF73",2,0)
 ;;2.0;INTEGRATED BILLING;**232,320,358,349,377,592**;21-MAR-94;Build 58
"RTN","IBCEF73",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEF73",4,0)
 ;
"RTN","IBCEF73",5,0)
 ;check qualifier
"RTN","IBCEF73",6,0)
 ;IBFRM 0-both, 1=UB,2=1500, 7=J430D
"RTN","IBCEF73",7,0)
 ;IBPROV - function in #399 (1-referring, 2-operating,etc)
"RTN","IBCEF73",8,0)
 ;IBTYPE - "C"-current insurance, "O"-other insurance
"RTN","IBCEF73",9,0)
 ;IBVAL - value to check
"RTN","IBCEF73",10,0)
CHCKSEC(IBFRM,IBPROV,IBTYPE,IBVAL) ;
"RTN","IBCEF73",11,0)
 I IBFRM=0 Q:$$CHSEC(1,IBPROV,IBTYPE,IBVAL) 1  Q $$CHSEC(2,IBPROV,IBTYPE,IBVAL)
"RTN","IBCEF73",12,0)
 Q $$CHSEC(IBFRM,IBPROV,IBTYPE,IBVAL)
"RTN","IBCEF73",13,0)
 ;
"RTN","IBCEF73",14,0)
CHSEC(IBFRM,IBPROV,IBTYPE,IBVAL) ;
"RTN","IBCEF73",15,0)
 N IBSTR S IBSTR=""
"RTN","IBCEF73",16,0)
 ;referring
"RTN","IBCEF73",17,0)
 I IBPROV=1 S IBSTR=$S(IBTYPE="C":$$OPR5(IBFRM),IBTYPE="O":$$OP4(IBFRM),1:"")
"RTN","IBCEF73",18,0)
 ;operating
"RTN","IBCEF73",19,0)
 I IBPROV=2 S IBSTR=$S(IBTYPE="C":$$OPR3(IBFRM),IBTYPE="O":$$OP2(IBFRM),1:"")
"RTN","IBCEF73",20,0)
 ;rendering
"RTN","IBCEF73",21,0)
 I IBPROV=3 S IBSTR=$S(IBTYPE="C":$$OPR2(IBFRM),IBTYPE="O":$$OP1(IBFRM),1:"")
"RTN","IBCEF73",22,0)
 ;attending
"RTN","IBCEF73",23,0)
 I IBPROV=4 S IBSTR=$S(IBTYPE="C":$$OPR2(IBFRM),IBTYPE="O":$$OP1(IBFRM),1:"")
"RTN","IBCEF73",24,0)
 ;supervising
"RTN","IBCEF73",25,0)
 I IBPROV=5 S IBSTR=$S(IBTYPE="C":$$OPR8(IBFRM),IBTYPE="O":$$OP8(IBFRM),1:"")
"RTN","IBCEF73",26,0)
 ;JWS;IB*2.0*592;assistant surgeon Dental
"RTN","IBCEF73",27,0)
 I IBPROV=6 S IBSTR=$S(IBTYPE="C":$$OPRB(IBFRM),IBTYPE="O":$$OPRB(IBFRM),1:"")
"RTN","IBCEF73",28,0)
 ;other
"RTN","IBCEF73",29,0)
 I IBPROV=9 S IBSTR=$S(IBTYPE="C":$$OPR4(IBFRM),IBTYPE="O":$$OP9(IBFRM),1:"")
"RTN","IBCEF73",30,0)
 Q:IBPROV=0!(IBSTR="") 1  ;if "" or facility id always return 1
"RTN","IBCEF73",31,0)
 Q IBSTR[("^"_IBVAL_"^")
"RTN","IBCEF73",32,0)
 ;
"RTN","IBCEF73",33,0)
 ;Filter invalid qualifier entries for records SUB1,SUB2,OP6,OP7,OP3
"RTN","IBCEF73",34,0)
 ; Rebuild the IBXSAVE("PROVINF" or IBXSAVE("PROVINF_FAC" array with
"RTN","IBCEF73",35,0)
 ;  only ids that have valid qualifiers
"RTN","IBCEF73",36,0)
 ;IBFRM 0-both, 1=UB,2=1500
"RTN","IBCEF73",37,0)
 ;IBREC record ID whose ids are being filtered (SUB1,SUB2,etc)
"RTN","IBCEF73",38,0)
 ;IBFAC - 1 if facility check, 0 if attending/rendering check
"RTN","IBCEF73",39,0)
 ;IBTYPE - "C"-current insurance, "O"-other insurance
"RTN","IBCEF73",40,0)
 ;IBXSAVE - the array of provider ids extracted, returned filtered -
"RTN","IBCEF73",41,0)
 ;   passed by reference
"RTN","IBCEF73",42,0)
CHCKSUB(IBFRM,IBREC,IBFAC,IBTYPE,IBXSAVE) ;
"RTN","IBCEF73",43,0)
 N Z,Z0,Z1,Z2,CT,IBSAVE
"RTN","IBCEF73",44,0)
 S Z="PROVINF"_$P("^_FAC",U,$G(IBFAC)+1)
"RTN","IBCEF73",45,0)
 I '$G(IBXSAVE(Z,IBXIEN)) D
"RTN","IBCEF73",46,0)
 . D F^IBCEF("N-ALL "_$S($G(IBFAC):"OUTSIDE FAC PROVIDER INF",1:"CUR/OTH PROVIDER INFO"))
"RTN","IBCEF73",47,0)
 M IBSAVE(Z,IBXIEN,IBTYPE)=IBXSAVE(Z,IBXIEN,IBTYPE) K IBXSAVE(Z,IBXIEN,IBTYPE)
"RTN","IBCEF73",48,0)
 S Z0=0 F  S Z0=$O(IBSAVE(Z,IBXIEN,IBTYPE,Z0)) Q:'Z0  S Z1="" F  S Z1=$O(IBSAVE(Z,IBXIEN,IBTYPE,Z0,Z1)) Q:Z1=""  S (Z2,CT)=0 F  S Z2=$O(IBSAVE(Z,IBXIEN,IBTYPE,Z0,Z1,Z2)) Q:'Z2  D
"RTN","IBCEF73",49,0)
 . N IBVAL
"RTN","IBCEF73",50,0)
 . S IBVAL=$P(IBSAVE(Z,IBXIEN,IBTYPE,Z0,Z1,Z2),U,3)
"RTN","IBCEF73",51,0)
 . I IBFRM=0 D  Q
"RTN","IBCEF73",52,0)
 .. I $S($$CHSUB(1,IBREC,IBVAL):1,1:$$CHSUB(2,IBPROV,IBTYPE,IBVAL)) D
"RTN","IBCEF73",53,0)
 ... S CT=CT+1,IBXSAVE(Z,IBXIEN,IBTYPE,Z0,Z1,CT)=IBSAVE(Z,IBXIEN,IBTYPE,Z0,Z1,Z2)
"RTN","IBCEF73",54,0)
 ... I $G(IBXSAVE(Z,IBXIEN,IBTYPE,Z0))="",$G(IBSAVE(Z,IBXIEN,IBTYPE,Z0))'="" S IBXSAVE(Z,IBXIEN,IBTYPE,Z0)=IBSAVE(Z,IBXIEN,IBTYPE,Z0)
"RTN","IBCEF73",55,0)
 . I $$CHSUB(IBFRM,IBREC,IBVAL) D
"RTN","IBCEF73",56,0)
 .. S CT=CT+1,IBXSAVE(Z,IBXIEN,IBTYPE,Z0,Z1,CT)=IBSAVE(Z,IBXIEN,IBTYPE,Z0,Z1,Z2)
"RTN","IBCEF73",57,0)
 .. I $G(IBXSAVE(Z,IBXIEN,IBTYPE,Z0))="",$G(IBSAVE(Z,IBXIEN,IBTYPE,Z0))'="" S IBXSAVE(Z,IBXIEN,IBTYPE,Z0)=IBSAVE(Z,IBXIEN,IBTYPE,Z0)
"RTN","IBCEF73",58,0)
 Q
"RTN","IBCEF73",59,0)
 ;
"RTN","IBCEF73",60,0)
 ; Check if valid qualifier
"RTN","IBCEF73",61,0)
 ;IBFRM 0-both, 1=UB,2=1500
"RTN","IBCEF73",62,0)
 ;IBREC record ID whose ids are being filtered (SUB1,SUB2,etc)
"RTN","IBCEF73",63,0)
 ;IBVAL - value to check
"RTN","IBCEF73",64,0)
CHSUB(IBFRM,IBREC,IBVAL) ;
"RTN","IBCEF73",65,0)
 N IBSTR
"RTN","IBCEF73",66,0)
 I IBREC="SUB1" S IBSTR=$$SUB1(IBFRM)
"RTN","IBCEF73",67,0)
 I IBREC="SUB2" S IBSTR=$$SUB2(IBFRM)
"RTN","IBCEF73",68,0)
 I IBREC="OP7" S IBSTR=$$OP7(IBFRM)
"RTN","IBCEF73",69,0)
 I IBREC="OP3" S IBSTR=$$OP3(IBFRM)
"RTN","IBCEF73",70,0)
 I IBREC="OP6" S IBSTR=$$OP6(IBFRM)
"RTN","IBCEF73",71,0)
 Q:$G(IBSTR)="" 1  ;if "" always return 1
"RTN","IBCEF73",72,0)
 Q IBSTR[("^"_IBVAL_"^")
"RTN","IBCEF73",73,0)
 ;
"RTN","IBCEF73",74,0)
 ;IBFRM 0-both, 1=UB,2=1500
"RTN","IBCEF73",75,0)
OPR2(IBFRM) ;
"RTN","IBCEF73",76,0)
 Q:IBFRM=1 "^0B^1A^1B^1C^1D^1G^1H^EI^G2^LU^N5^SY^X5^"
"RTN","IBCEF73",77,0)
 Q:IBFRM=2 "^0B^1B^1C^1D^1G^1H^EI^G2^LU^N5^SY^X5^"
"RTN","IBCEF73",78,0)
 Q ""
"RTN","IBCEF73",79,0)
 ;
"RTN","IBCEF73",80,0)
 ;IBFRM 0-both, 1=UB,2=1500
"RTN","IBCEF73",81,0)
OP1(IBFRM) ;
"RTN","IBCEF73",82,0)
 Q:IBFRM=1 "^1A^1B^1C^1D^1G^1H^EI^G2^LU^N5^"
"RTN","IBCEF73",83,0)
 Q:IBFRM=2 "^1B^1C^1D^EI^G2^LU^N5^"
"RTN","IBCEF73",84,0)
 Q ""
"RTN","IBCEF73",85,0)
 ;
"RTN","IBCEF73",86,0)
 ;IBFRM 0-both, 1=UB,2=1500
"RTN","IBCEF73",87,0)
OPR3(IBFRM) ;
"RTN","IBCEF73",88,0)
 Q:IBFRM=1 "^0B^1A^1B^1C^1D^1G^1H^EI^G2^LU^N5^SY^X5^"
"RTN","IBCEF73",89,0)
 Q ""
"RTN","IBCEF73",90,0)
 ;
"RTN","IBCEF73",91,0)
 ;IBFRM 0-both, 1=UB,2=1500
"RTN","IBCEF73",92,0)
OP2(IBFRM) ;
"RTN","IBCEF73",93,0)
 Q:IBFRM=1 "^1A^1B^1C^1D^1G^1H^EI^G2^LU^N5^"
"RTN","IBCEF73",94,0)
 Q ""
"RTN","IBCEF73",95,0)
 ;
"RTN","IBCEF73",96,0)
 ;IBFRM 0-both, 1=UB,2=1500
"RTN","IBCEF73",97,0)
SUB1(IBFRM) ;
"RTN","IBCEF73",98,0)
 Q:IBFRM=1 "^0B^1A^1B^1C^1D^1G^1H^EI^G2^LU^N5^SY^X5^"
"RTN","IBCEF73",99,0)
 Q:IBFRM=2 "^0B^1A^1B^1C^1D^1G^1H^EI^G2^LU^N5^U3^SY^X5^"
"RTN","IBCEF73",100,0)
 Q ""
"RTN","IBCEF73",101,0)
 ;
"RTN","IBCEF73",102,0)
 ;IBFRM 0-both, 1=UB,2=1500
"RTN","IBCEF73",103,0)
OPR4(IBFRM) ;
"RTN","IBCEF73",104,0)
 Q:IBFRM=1 "^0B^1A^1B^1C^1D^1G^1H^EI^G2^LU^N5^SY^X5^"
"RTN","IBCEF73",105,0)
 Q ""
"RTN","IBCEF73",106,0)
 ;
"RTN","IBCEF73",107,0)
 ;IBFRM 0-both, 1=UB,2=1500
"RTN","IBCEF73",108,0)
OP9(IBFRM) ;
"RTN","IBCEF73",109,0)
 Q:IBFRM=1 "^1A^1B^1C^1D^1G^1H^EI^G2^LU^N5^"
"RTN","IBCEF73",110,0)
 Q ""
"RTN","IBCEF73",111,0)
 ;
"RTN","IBCEF73",112,0)
 ;IBFRM 0-both, 1=UB,2=1500
"RTN","IBCEF73",113,0)
SUB2(IBFRM) ;
"RTN","IBCEF73",114,0)
 Q:IBFRM=1 "^0B^1A^1B^1C^1G^1H^1J^EI^FH^G2^G5^LU^N5^X5^TJ^B3^BQ^SY^U3^"
"RTN","IBCEF73",115,0)
 Q:IBFRM=2 "^0B^X4^1A^1B^1C^1G^1H^G2^LU^X5^TJ^B3^BQ^SY^U3^"
"RTN","IBCEF73",116,0)
 Q ""
"RTN","IBCEF73",117,0)
 ;
"RTN","IBCEF73",118,0)
 ;IBFRM 0-both, 1=UB,2=1500
"RTN","IBCEF73",119,0)
OP3(IBFRM) ;
"RTN","IBCEF73",120,0)
 Q:IBFRM=1 "^1B^1C^EI^G2^LU^N5^"
"RTN","IBCEF73",121,0)
 Q ""
"RTN","IBCEF73",122,0)
 ;
"RTN","IBCEF73",123,0)
 ;IBFRM 0-both, 1=UB,2=1500
"RTN","IBCEF73",124,0)
OPR5(IBFRM) ;
"RTN","IBCEF73",125,0)
 Q:IBFRM=2 "^0B^1B^1C^1D^1G^1H^EI^G2^LU^N5^SY^X5^"
"RTN","IBCEF73",126,0)
 Q ""
"RTN","IBCEF73",127,0)
 ;
"RTN","IBCEF73",128,0)
 ;IBFRM 0-both, 1=UB,2=1500
"RTN","IBCEF73",129,0)
OPR8(IBFRM) ;
"RTN","IBCEF73",130,0)
 Q:IBFRM=2 "^0B^1B^1C^1D^1G^1H^EI^G2^LU^N5^SY^X5^"
"RTN","IBCEF73",131,0)
 Q ""
"RTN","IBCEF73",132,0)
 ;
"RTN","IBCEF73",133,0)
 ;IBFRM 0-both, 1=UB,2=1500
"RTN","IBCEF73",134,0)
OP4(IBFRM) ;
"RTN","IBCEF73",135,0)
 Q:IBFRM=2 "^1B^1C^1D^EI^G2^LU^N5^"
"RTN","IBCEF73",136,0)
 Q ""
"RTN","IBCEF73",137,0)
 ;
"RTN","IBCEF73",138,0)
 ;IBFRM 0-both, 1=UB,2=1500
"RTN","IBCEF73",139,0)
OP8(IBFRM) ;
"RTN","IBCEF73",140,0)
 Q:IBFRM=2 "^1B^1C^1D^EI^G2^N5^"
"RTN","IBCEF73",141,0)
 Q ""
"RTN","IBCEF73",142,0)
 ;
"RTN","IBCEF73",143,0)
 ;IBFRM 0-both, 1=UB,2=1500
"RTN","IBCEF73",144,0)
OP6(IBFRM) ;
"RTN","IBCEF73",145,0)
 Q:IBFRM=2 "^1A^1B^1C^G2^LU^N5^"
"RTN","IBCEF73",146,0)
 Q ""
"RTN","IBCEF73",147,0)
 ;
"RTN","IBCEF73",148,0)
 ;IBFRM 0-both, 1=UB,2=1500
"RTN","IBCEF73",149,0)
OP7(IBFRM) ;
"RTN","IBCEF73",150,0)
 Q:IBFRM=2 "^1A^1B^1C^G2^LU^N5^"
"RTN","IBCEF73",151,0)
 Q ""
"RTN","IBCEF73",152,0)
 ;
"RTN","IBCEF73",153,0)
 ;IBFRM 0-both, 1=UB,2=1500
"RTN","IBCEF73",154,0)
OPRB(IBFRM) ;
"RTN","IBCEF73",155,0)
 Q:IBFRM=4 "^0B^1G^G2^LU^"
"RTN","IBCEF73",156,0)
 Q ""
"RTN","IBCEF73",157,0)
 ;
"RTN","IBCEF73",158,0)
 ;check qualifier for PRV1
"RTN","IBCEF73",159,0)
 ;IBFRM 0-both, 1=UB,2=1500
"RTN","IBCEF73",160,0)
 ;IBVAL - value to check
"RTN","IBCEF73",161,0)
CHCKPRV1(IBFRM,IBVAL) ;
"RTN","IBCEF73",162,0)
 I IBFRM=0 Q:$$CHPRV1(1,IBVAL) 1  Q $$CHPRV1(2,IBVAL)
"RTN","IBCEF73",163,0)
 Q $$CHPRV1(IBFRM,IBVAL)
"RTN","IBCEF73",164,0)
 ;IBFRM 0-both, 1=UB,2=1500
"RTN","IBCEF73",165,0)
CHPRV1(IBFRM,IBVAL) ;
"RTN","IBCEF73",166,0)
 N IBSTR S IBSTR=""
"RTN","IBCEF73",167,0)
 S IBSTR=$$PRV1(IBFRM)
"RTN","IBCEF73",168,0)
 Q:IBSTR="" 1
"RTN","IBCEF73",169,0)
 Q IBSTR[("^"_IBVAL_"^")
"RTN","IBCEF73",170,0)
 ;
"RTN","IBCEF73",171,0)
PRV1(IBFRM) ;
"RTN","IBCEF73",172,0)
 Q:IBFRM=1 "^1A^1C^1D^1G^1H^1J^B3^BQ^EI^FH^G2^G5^LU^SY^X5^"
"RTN","IBCEF73",173,0)
 Q:IBFRM=2 "^1B^1C^1D^1G^1H^1J^B3^BQ^EI^FH^G2^G5^LU^U3^SY^X5^"
"RTN","IBCEF73",174,0)
 Q ""
"RTN","IBCEF73",175,0)
 ;
"RTN","IBCEF73",176,0)
PTSELF ;This tag is for the CI2 segment. If the IBXSAVE("IADR") is empty
"RTN","IBCEF73",177,0)
 ;check to see if the relationship to pt is 18 (self) if so pull info
"RTN","IBCEF73",178,0)
 ;from PT1 calls
"RTN","IBCEF73",179,0)
 ;See if relationship to insured is 18 if not or if "" quit
"RTN","IBCEF73",180,0)
 N IBZ
"RTN","IBCEF73",181,0)
 D F^IBCEF("N-ALL INSURED PT RELATION","IBZ",,IBXIEN)
"RTN","IBCEF73",182,0)
 S IBZ=$G(IBZ(+$$COBN^IBCEF(IBXIEN)))
"RTN","IBCEF73",183,0)
 S IBZ=$$PRELCNV^IBCNSP1(IBZ,1)
"RTN","IBCEF73",184,0)
 I IBZ'="18" S IBXDATA="" Q
"RTN","IBCEF73",185,0)
 N IBZ D F^IBCEF("N-PATIENT STREET ADDRESS 1-3","IBZ",,IBXIEN)
"RTN","IBCEF73",186,0)
 S IBXDATA="18"
"RTN","IBCEF73",187,0)
 Q
"RTN","IBCEF73",188,0)
 ;
"RTN","IBCEF73",189,0)
NOPUNCT(X,SPACE,EXC) ; Strip punctuation from data in X
"RTN","IBCEF73",190,0)
 ; SPACE = flag if 1 strip SPACES
"RTN","IBCEF73",191,0)
 ; EXC = list of punct not to strip
"RTN","IBCEF73",192,0)
 ;
"RTN","IBCEF73",193,0)
 N PUNCT,Z
"RTN","IBCEF73",194,0)
 S PUNCT=".,-+(){}[]\/><:;?|=_*&%$#@!~`^'"""
"RTN","IBCEF73",195,0)
 I $G(SPACE) S PUNCT=PUNCT_" "
"RTN","IBCEF73",196,0)
 I $G(EXC)'="" S PUNCT=$TR(PUNCT,EXC)
"RTN","IBCEF73",197,0)
 N L S L=""
"RTN","IBCEF73",198,0)
 F  S L=$O(X(L)) Q:L=""  D
"RTN","IBCEF73",199,0)
 . S X(L)=$TR(X(L),PUNCT)
"RTN","IBCEF73",200,0)
 I $G(X)'="" D
"RTN","IBCEF73",201,0)
 . S X=$TR(X,PUNCT)
"RTN","IBCEF73",202,0)
 Q
"RTN","IBCEF73",203,0)
 ;
"RTN","IBCEF73",204,0)
PROVID(IBXIEN) ;This modified version of prov id call is to acquire the SSN
"RTN","IBCEF73",205,0)
 ;first, if the ssn is not available then we need to get the tax id.
"RTN","IBCEF73",206,0)
 ;we also need to provide the modifier for which value it is
"RTN","IBCEF73",207,0)
 Q:+$G(IBXIEN)=0 ""
"RTN","IBCEF73",208,0)
 S IBXSAVE("ID")=""
"RTN","IBCEF73",209,0)
 S IBXSAVE=""
"RTN","IBCEF73",210,0)
 S IBXSAVE=$$PROVSSN^IBCEF7(IBXIEN)
"RTN","IBCEF73",211,0)
 N I
"RTN","IBCEF73",212,0)
 F I=1:1:9 D
"RTN","IBCEF73",213,0)
 . I $P(IBXSAVE,"^",I)]"" S $P(IBXSAVE("ID"),U,I)="34"
"RTN","IBCEF73",214,0)
 ;If no ibxdata go look in 355.97 for 24 
"RTN","IBCEF73",215,0)
 N IBRETVAL S IBRETVAL=""
"RTN","IBCEF73",216,0)
 N IBPTR,IBFT
"RTN","IBCEF73",217,0)
 F IBFT=1:1:9 D
"RTN","IBCEF73",218,0)
 . Q:$P(IBXSAVE,U,IBFT)]""
"RTN","IBCEF73",219,0)
 . S IBPTR=$$PROVPTR^IBCEF7(IBXIEN,IBFT)
"RTN","IBCEF73",220,0)
 . S $P(IBRETVAL,"^",IBFT)=$$TAX3559(IBPTR)
"RTN","IBCEF73",221,0)
 . I $P(IBRETVAL,U,IBFT)]"" D
"RTN","IBCEF73",222,0)
 . . S $P(IBXSAVE,U,IBFT)=$P(IBRETVAL,U,IBFT)
"RTN","IBCEF73",223,0)
 . . S $P(IBXSAVE("ID"),U,IBFT)="24"
"RTN","IBCEF73",224,0)
 Q IBXSAVE
"RTN","IBCEF73",225,0)
 ;
"RTN","IBCEF73",226,0)
TAX3559(IBPROV) ;
"RTN","IBCEF73",227,0)
 I $P(IBPROV,";",2)'["IBA(355.9" Q ""
"RTN","IBCEF73",228,0)
 N IB2,IB3559,IBIDTYP,IBID,IBQFL
"RTN","IBCEF73",229,0)
 S (IB3559,IBQFL)=0
"RTN","IBCEF73",230,0)
 S IBID=""
"RTN","IBCEF73",231,0)
 Q:+$G(IBPROV)=0 ""
"RTN","IBCEF73",232,0)
 F IB2=1:1 S IB3559=$O(^IBA(355.9,"B",IBPROV,IB3559)) Q:IB3559=""!IBQFL  D
"RTN","IBCEF73",233,0)
 . S IBIDTYP=+$P($G(^IBA(355.9,IB3559,0)),"^",6) ;provider ID type, ptr to #355.97
"RTN","IBCEF73",234,0)
 . S IBIDTYP=$P($G(^IBE(355.97,IBIDTYP,0)),"^",3)
"RTN","IBCEF73",235,0)
 . S:IBIDTYP="EI" IBID=$P($G(^IBA(355.9,IB3559,0)),"^",7),IBQFL=1
"RTN","IBCEF73",236,0)
 ; if nothing found yet, look in file 355.93 for Facility Default ID
"RTN","IBCEF73",237,0)
 I IBID="",IBPROV["IBA(355.93" D
"RTN","IBCEF73",238,0)
 .N IB0,IBFID,IBQ
"RTN","IBCEF73",239,0)
 .S IB0=$G(^IBA(355.93,+IBPROV,0)) Q:IB0=""!($P(IB0,U,2)'=1)  ; not a facility - bail out
"RTN","IBCEF73",240,0)
 .S IBFID=$P(IB0,U,9) Q:IBFID=""  ; no default id on file - bail out
"RTN","IBCEF73",241,0)
 .S IBQ=$P(IB0,U,13) I +IBQ>0,$P($G(^IBE(355.97,IBQ,0)),U,3)=24 S IBID=IBFID
"RTN","IBCEF73",242,0)
 .Q
"RTN","IBCEF73",243,0)
 Q $$NOPUNCT^IBCEF(IBID)
"RTN","IBCEF73",244,0)
 ;
"RTN","IBCEF73",245,0)
 ;IBFULL-full name
"RTN","IBCEF73",246,0)
 ;IBEL - Name element : "FAMILY","GIVEN","MIDDLE","SUFFIX"
"RTN","IBCEF73",247,0)
 ;
"RTN","IBCEF73",248,0)
SSN200(IBPTR)   ;
"RTN","IBCEF73",249,0)
 I $P(IBPTR,";",2)'="VA(200," Q ""
"RTN","IBCEF73",250,0)
 Q $$NOPUNCT^IBCEF($$GET1^DIQ(200,+$P(IBPTR,";")_",",9))
"RTN","IBCEF73",251,0)
 ;
"RTN","IBCEF73",252,0)
 ;Input:
"RTN","IBCEF73",253,0)
 ; IBIEN399 - ien in #399
"RTN","IBCEF73",254,0)
 ;Output:
"RTN","IBCEF73",255,0)
 ; returns a string with "^" delimiters that contains SSNs (if any)
"RTN","IBCEF73",256,0)
 ; in the position that equal to FUNCTION number
"RTN","IBCEF73",257,0)
 ; i.e. if RENDERING function # is 3 then SSN will be
"RTN","IBCEF73",258,0)
 ; in $P(return value,"^",3), etc.
"RTN","IBCEF73",259,0)
 ;
"RTN","IBCEF73",260,0)
SSN3559(IBPROV) ;
"RTN","IBCEF73",261,0)
 N IB2,IB3559,IBIDTYP,IBID,IBQFL
"RTN","IBCEF73",262,0)
 S (IB3559,IBQFL)=0
"RTN","IBCEF73",263,0)
 S IBID=""
"RTN","IBCEF73",264,0)
 Q:+$G(IBPROV)=0 ""
"RTN","IBCEF73",265,0)
 F IB2=1:1 S IB3559=$O(^IBA(355.9,"B",IBPROV,IB3559)) Q:IB3559=""!IBQFL  D
"RTN","IBCEF73",266,0)
 . S IBIDTYP=+$P($G(^IBA(355.9,IB3559,0)),"^",6)
"RTN","IBCEF73",267,0)
 . S IBIDTYP=$P($G(^IBE(355.97,IBIDTYP,0)),"^",3)
"RTN","IBCEF73",268,0)
 . S:IBIDTYP="SY" IBID=$P($G(^IBA(355.9,IB3559,0)),"^",7),IBQFL=1
"RTN","IBCEF73",269,0)
 Q $$NOPUNCT^IBCEF(IBID)
"RTN","IBCEF73",270,0)
 ;
"RTN","IBCEF73",271,0)
 ;IBIDTYP-provider ID type, ptr to #355.97
"RTN","IBCEF73",272,0)
 ;IBFULL-full name
"RTN","IBCEF73",273,0)
 ;IBEL - Name element : "FAMILY","GIVEN","MIDDLE","SUFFIX"
"RTN","IBCEF73",274,0)
 ;
"RTN","IBCEF73",275,0)
PRV1FMT(P) ;FORMAT CODE FOR PRV1 SEGMENT THAT WON'T FIT ON LINE
"RTN","IBCEF73",276,0)
 K IBXDATA
"RTN","IBCEF73",277,0)
 S:'$D(IBXSAVE("BIL-PROV-SEC")) IBXSAVE("BIL-PROV-SEC")=$$PRV1^IBCEF7(IBXIEN)
"RTN","IBCEF73",278,0)
 S IBXDATA=$P($G(IBXSAVE("BIL-PROV-SEC")),"^",P)
"RTN","IBCEF73",279,0)
 I $G(IBXDATA)'="" S IBXDATA=$$NOPUNCT^IBCEF(IBXDATA,1)
"RTN","IBCEF73",280,0)
 Q
"RTN","IBCEF73",281,0)
 ;
"RTN","IBCEF73A")
0^128^B44170679^B43076924
"RTN","IBCEF73A",1,0)
IBCEF73A ;ALB/KJH - FORMATTER AND EXTRACTOR SPECIFIC (NPI) BILL FUNCTIONS ;30 Aug 2006  10:38 AM
"RTN","IBCEF73A",2,0)
 ;;2.0;INTEGRATED BILLING;**343,374,395,391,400,432,516,592**;21-MAR-94;Build 58
"RTN","IBCEF73A",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEF73A",4,0)
 Q
"RTN","IBCEF73A",5,0)
 ;
"RTN","IBCEF73A",6,0)
PROVNPI(IBIEN399,IBNONPI) ;
"RTN","IBCEF73A",7,0)
 ;Retrieves NPIs from #200 or 355.93
"RTN","IBCEF73A",8,0)
 ; Input:
"RTN","IBCEF73A",9,0)
 ;       IBIEN399 - IEN of record in BILL/CLAIMS file 399
"RTN","IBCEF73A",10,0)
 ;       IBNONPI - variable to pass info on missing NPI to calling routine.  Pass by reference
"RTN","IBCEF73A",11,0)
 ; Output:
"RTN","IBCEF73A",12,0)
 ;       NPI codes for all providers
"RTN","IBCEF73A",13,0)
 ;       IBNONPI - U-delimited list of provider types with missing NPIs
"RTN","IBCEF73A",14,0)
 N IBRETVAL,IBPTR,IBFT
"RTN","IBCEF73A",15,0)
 S IBRETVAL="",IBNONPI=""
"RTN","IBCEF73A",16,0)
 F IBFT=1:1:9 D
"RTN","IBCEF73A",17,0)
 . S IBPTR=$$PROVPTR^IBCEF7(IBIEN399,IBFT)
"RTN","IBCEF73A",18,0)
 . I IBPTR S $P(IBRETVAL,"^",IBFT)=$$GETNPI(IBPTR)
"RTN","IBCEF73A",19,0)
 Q IBRETVAL
"RTN","IBCEF73A",20,0)
GETNPI(IBPTR) ;look for NPI in #200 or #355.93
"RTN","IBCEF73A",21,0)
 ;Input: IBPTR from 399.0222, field .02
"RTN","IBCEF73A",22,0)
 ;Output: NPI
"RTN","IBCEF73A",23,0)
 ;if in file #200
"RTN","IBCEF73A",24,0)
 N NPI
"RTN","IBCEF73A",25,0)
 S NPI=""
"RTN","IBCEF73A",26,0)
 ;if in 200 then get it from 200
"RTN","IBCEF73A",27,0)
 I $P(IBPTR,";",2)="VA(200," S NPI=$P($$NPI^XUSNPI("Individual_ID",$P(IBPTR,";")),U) S:NPI<1 NPI=""
"RTN","IBCEF73A",28,0)
 ;if in 355.93 then use 355.93
"RTN","IBCEF73A",29,0)
 I $P(IBPTR,";",2)="IBA(355.93," S NPI=$$NPIGET^IBCEP81($P(IBPTR,";"))
"RTN","IBCEF73A",30,0)
 I NPI="",$D(IBNONPI) S IBNONPI=$S(IBNONPI="":IBFT,1:IBNONPI_U_IBFT)
"RTN","IBCEF73A",31,0)
 Q NPI
"RTN","IBCEF73A",32,0)
 ;
"RTN","IBCEF73A",33,0)
SPECTAX(IBIEN399,IBNOSPEC) ;
"RTN","IBCEF73A",34,0)
 ;Retrieves Specialty Codes from Current Taxonomy entries for a claim from #399
"RTN","IBCEF73A",35,0)
 ; Input:
"RTN","IBCEF73A",36,0)
 ;       IBIEN399 - IEN of record in BILL/CLAIMS file 399
"RTN","IBCEF73A",37,0)
 ;       IBNOSPEC - variable to pass info on missing taxonomies to calling routine.  Pass by reference
"RTN","IBCEF73A",38,0)
 ; Output:
"RTN","IBCEF73A",39,0)
 ;       Taxonomy Specialty Codes for all providers
"RTN","IBCEF73A",40,0)
 ;       IBNOSPEC - U-delimited list of provider types with missing Taxonomy Specialty codes
"RTN","IBCEF73A",41,0)
 N IBRETVAL,IBN,IBFT,IBSPEC,SPEC
"RTN","IBCEF73A",42,0)
 S IBRETVAL="",IBNOSPEC=""
"RTN","IBCEF73A",43,0)
 I $G(IBIEN399)="" Q ""
"RTN","IBCEF73A",44,0)
 F IBFT=1:1:9 D
"RTN","IBCEF73A",45,0)
 . S IBN=$O(^DGCR(399,IBIEN399,"PRV","B",IBFT,0))
"RTN","IBCEF73A",46,0)
 . I +IBN=0 Q
"RTN","IBCEF73A",47,0)
 . S IBSPEC=$P($G(^DGCR(399,IBIEN399,"PRV",+IBN,0)),"^",15)
"RTN","IBCEF73A",48,0)
 . S SPEC=$$GET1^DIQ(8932.1,IBSPEC,"SPECIALTY CODE")
"RTN","IBCEF73A",49,0)
 . S $P(IBRETVAL,"^",IBFT)=SPEC
"RTN","IBCEF73A",50,0)
 . I SPEC="",$D(IBNOSPEC) S IBNOSPEC=$S(IBNOSPEC="":IBFT,1:IBNOSPEC_U_IBFT)
"RTN","IBCEF73A",51,0)
 Q IBRETVAL
"RTN","IBCEF73A",52,0)
 ;
"RTN","IBCEF73A",53,0)
PROVTAX(IBIEN399,IBNOTAX) ;
"RTN","IBCEF73A",54,0)
 ;Retrieves Current Taxonomy entries for a claim from #399
"RTN","IBCEF73A",55,0)
 ; Input:
"RTN","IBCEF73A",56,0)
 ;       IBIEN399 - IEN of record in BILL/CLAIMS file 399
"RTN","IBCEF73A",57,0)
 ;       IBNOTAX - variable to pass info on missing taxonomies to calling routine.  Pass by reference
"RTN","IBCEF73A",58,0)
 ; Output:
"RTN","IBCEF73A",59,0)
 ;       Taxonomy X12 codes for all providers
"RTN","IBCEF73A",60,0)
 ;       IBNOTAX - U-delimited list of provider types with missing Taxonomy X12 codes
"RTN","IBCEF73A",61,0)
 N IBRETVAL,IBN,IBFT,IBTAX,TAX
"RTN","IBCEF73A",62,0)
 S IBRETVAL="",IBNOTAX=""
"RTN","IBCEF73A",63,0)
 I $G(IBIEN399)="" Q ""
"RTN","IBCEF73A",64,0)
 F IBFT=1:1:9 D
"RTN","IBCEF73A",65,0)
 . S IBN=$O(^DGCR(399,IBIEN399,"PRV","B",IBFT,0))
"RTN","IBCEF73A",66,0)
 . I +IBN=0 Q
"RTN","IBCEF73A",67,0)
 . S IBTAX=$P($G(^DGCR(399,IBIEN399,"PRV",+IBN,0)),"^",15)
"RTN","IBCEF73A",68,0)
 . S TAX=$$GET1^DIQ(8932.1,IBTAX,"X12 CODE")
"RTN","IBCEF73A",69,0)
 . S $P(IBRETVAL,"^",IBFT)=TAX
"RTN","IBCEF73A",70,0)
 . I TAX="",$D(IBNOTAX) S IBNOTAX=$S(IBNOTAX="":IBFT,1:IBNOTAX_U_IBFT)
"RTN","IBCEF73A",71,0)
 Q IBRETVAL
"RTN","IBCEF73A",72,0)
GETTAX(IBPTR,IBDTEV) ;look for Taxonomy in #200 or #355.93
"RTN","IBCEF73A",73,0)
 ;Input: IBPTR from 399.0222, field .02, IBDTEV from 399, field .03
"RTN","IBCEF73A",74,0)
 ;       IBPTR can be from 399.0404, field .02, as well (DEM;432)
"RTN","IBCEF73A",75,0)
 ;Output: Taxonomy X12 code_"^"_IEN
"RTN","IBCEF73A",76,0)
 N TAX,IBX12
"RTN","IBCEF73A",77,0)
 S TAX="^",IBX12=""
"RTN","IBCEF73A",78,0)
 S:'$G(IBDTEV) IBDTEV=DT
"RTN","IBCEF73A",79,0)
 ;if in 200 then get it from 200
"RTN","IBCEF73A",80,0)
 I $P(IBPTR,";",2)="VA(200," S IBX12=$P($$GET^XUA4A72($P(IBPTR,";"),IBDTEV),U,1),TAX=$S(IBX12'>0:TAX,1:$$GET1^DIQ(8932.1,IBX12,6)_U_IBX12)
"RTN","IBCEF73A",81,0)
 ;if in 355.93 then use 355.93
"RTN","IBCEF73A",82,0)
 I $P(IBPTR,";",2)="IBA(355.93," S TAX=$$TAXGET^IBCEP81($P(IBPTR,";"))
"RTN","IBCEF73A",83,0)
 Q TAX
"RTN","IBCEF73A",84,0)
 ;
"RTN","IBCEF73A",85,0)
ORGNPI(IBIEN399,IBNONPI) ; Extract NPIs for organizations on this claim
"RTN","IBCEF73A",86,0)
 ; Input
"RTN","IBCEF73A",87,0)
 ;       IBIEN399 - Claim IEN in file 399
"RTN","IBCEF73A",88,0)
 ;       IBNONPI - Variable to pass info on missing NPI back to calling routine.  Pass by reference.
"RTN","IBCEF73A",89,0)
 ; Output - NPI codes for facilities
"RTN","IBCEF73A",90,0)
 ;        Piece 1) Service Facility NPI code (with IB patch 400, a claim may not have a service facility)
"RTN","IBCEF73A",91,0)
 ;        Piece 2) Non-VA Service Facility NPI code
"RTN","IBCEF73A",92,0)
 ;        Piece 3) Billing Provider NPI code (IB patch 400 definition)
"RTN","IBCEF73A",93,0)
 ;
"RTN","IBCEF73A",94,0)
 N IBRETVAL,IBORG,IBEVDT,IBDIV,NPI,BSZ
"RTN","IBCEF73A",95,0)
 S IBNONPI=""
"RTN","IBCEF73A",96,0)
 I $G(IBIEN399)="" Q ""
"RTN","IBCEF73A",97,0)
 S IBRETVAL=""
"RTN","IBCEF73A",98,0)
 S BSZ=$$B^IBCEF79(IBIEN399)    ; get billing provider/service facility information
"RTN","IBCEF73A",99,0)
 ;
"RTN","IBCEF73A",100,0)
 ; MRD;IB*2.0*516 - The field used as the switchback flag is being
"RTN","IBCEF73A",101,0)
 ; marked for deletion, to be deleted after 3/15/2018.  That flag
"RTN","IBCEF73A",102,0)
 ; will now always be null.  The following section of code was
"RTN","IBCEF73A",103,0)
 ; commented out because of this.  This section can be deleted in
"RTN","IBCEF73A",104,0)
 ; the future.
"RTN","IBCEF73A",105,0)
 ;
"RTN","IBCEF73A",106,0)
 ;S SWBCK=(+$$INSFLGS^IBCEF79(IBIEN399)>0)    ; pre-patch 400 switchback flag & processing
"RTN","IBCEF73A",107,0)
 ;I SWBCK D  G ORGNPIX
"RTN","IBCEF73A",108,0)
 ;. N PHARM,DPORG,PHARMNPI
"RTN","IBCEF73A",109,0)
 ;. S PHARM=+$$ISRX^IBCEF1(IBIEN399)          ; pharmacy claim flag switchback
"RTN","IBCEF73A",110,0)
 ;. S PHARMNPI=""
"RTN","IBCEF73A",111,0)
 ;. I PHARM S DPORG=$$RXSITE(IBIEN399) I DPORG S PHARMNPI=$P($$NPI^XUSNPI("Organization_ID",DPORG),U,1)
"RTN","IBCEF73A",112,0)
 ;. ;
"RTN","IBCEF73A",113,0)
 ;. ; service facility NPI switchback
"RTN","IBCEF73A",114,0)
 ;. S NPI=""
"RTN","IBCEF73A",115,0)
 ;. S IBORG=+$P(BSZ,U,4)    ; service facility ien (either ptr file 4 or 355.93)
"RTN","IBCEF73A",116,0)
 ;. I $P(BSZ,U,3)=0,IBORG S NPI=$P($$NPI^XUSNPI("Organization_ID",IBORG),U,1)    ; file 4
"RTN","IBCEF73A",117,0)
 ;. I $P(BSZ,U,3)=1,IBORG S NPI=$$NPIGET^IBCEP81(IBORG)                          ; file 355.93
"RTN","IBCEF73A",118,0)
 ;. I PHARM S NPI=PHARMNPI      ; in switchback mode for pharmacy claims, use the pharmacy NPI
"RTN","IBCEF73A",119,0)
 ;. I NPI>0 S $P(IBRETVAL,U,1)=NPI
"RTN","IBCEF73A",120,0)
 ;. I NPI<1 S IBNONPI=1
"RTN","IBCEF73A",121,0)
 ;. ;
"RTN","IBCEF73A",122,0)
 ;. ; non-VA facility NPI switchback
"RTN","IBCEF73A",123,0)
 ;. S IBORG=$$GET1^DIQ(399,IBIEN399_",",232,"I")
"RTN","IBCEF73A",124,0)
 ;. I IBORG S NPI=$$NPIGET^IBCEP81(IBORG),$P(IBRETVAL,U,2)=NPI I 'NPI S IBNONPI=$S(IBNONPI="":2,1:IBNONPI_U_2)
"RTN","IBCEF73A",125,0)
 ;. ;
"RTN","IBCEF73A",126,0)
 ;. ; billing provider NPI switchback
"RTN","IBCEF73A",127,0)
 ;. S IBORG=+$P(BSZ,U,1),NPI=""
"RTN","IBCEF73A",128,0)
 ;. I IBORG S NPI=$P($$NPI^XUSNPI("Organization_ID",IBORG),U,1)
"RTN","IBCEF73A",129,0)
 ;. I PHARM S NPI=PHARMNPI      ; in switchback mode for pharmacy claims, use the pharmacy NPI
"RTN","IBCEF73A",130,0)
 ;. I NPI>0 S $P(IBRETVAL,U,3)=NPI
"RTN","IBCEF73A",131,0)
 ;. I NPI<1 S IBNONPI=$S(IBNONPI="":3,1:IBNONPI_U_3)
"RTN","IBCEF73A",132,0)
 ;. ;
"RTN","IBCEF73A",133,0)
 ;. Q
"RTN","IBCEF73A",134,0)
 ;
"RTN","IBCEF73A",135,0)
 ; service facility NPI regular
"RTN","IBCEF73A",136,0)
 S NPI=""
"RTN","IBCEF73A",137,0)
 S IBORG=+$P(BSZ,U,4)    ; service facility ien (either ptr file 4 or 355.93)
"RTN","IBCEF73A",138,0)
 I $P(BSZ,U,3)=0,IBORG S NPI=$P($$NPI^XUSNPI("Organization_ID",IBORG),U,1)    ; file 4
"RTN","IBCEF73A",139,0)
 I $P(BSZ,U,3)=1,IBORG S NPI=$$NPIGET^IBCEP81(IBORG)                          ; file 355.93
"RTN","IBCEF73A",140,0)
 I NPI>0 S $P(IBRETVAL,U,1)=NPI
"RTN","IBCEF73A",141,0)
 I NPI<1,$P(BSZ,U,3)=1 S IBNONPI=1   ; only report missing service facility NPI for non-VA facilities
"RTN","IBCEF73A",142,0)
 ;
"RTN","IBCEF73A",143,0)
 ; non-VA facility NPI regular
"RTN","IBCEF73A",144,0)
 S IBORG=$$GET1^DIQ(399,IBIEN399_",",232,"I")
"RTN","IBCEF73A",145,0)
 ; Let this one (#2) override #1 if both #1 and #2 are missing
"RTN","IBCEF73A",146,0)
 I IBORG S NPI=$$NPIGET^IBCEP81(IBORG),$P(IBRETVAL,U,2)=NPI I 'NPI S IBNONPI=2
"RTN","IBCEF73A",147,0)
 ;
"RTN","IBCEF73A",148,0)
 ; billing provider NPI regular
"RTN","IBCEF73A",149,0)
 S IBORG=+$P(BSZ,U,1),NPI=""
"RTN","IBCEF73A",150,0)
 I IBORG S NPI=$P($$NPI^XUSNPI("Organization_ID",IBORG),U,1) S:NPI>0 $P(IBRETVAL,U,3)=NPI
"RTN","IBCEF73A",151,0)
 I NPI<1 S IBNONPI=$S(IBNONPI="":3,1:IBNONPI_U_3)
"RTN","IBCEF73A",152,0)
 ;
"RTN","IBCEF73A",153,0)
 ;ORGNPIX ; MRD;IB*2.0*516 - Delete this label when deleting
"RTN","IBCEF73A",154,0)
 ; above code commented out.
"RTN","IBCEF73A",155,0)
 ;
"RTN","IBCEF73A",156,0)
 Q IBRETVAL
"RTN","IBCEF73A",157,0)
 ;
"RTN","IBCEF73A",158,0)
ORGTAX(IBIEN399,IBNOTAX) ; Extract Taxonomies for organizations on this claim
"RTN","IBCEF73A",159,0)
 ; Input
"RTN","IBCEF73A",160,0)
 ;       IBIEN399 - Claim IEN in file 399
"RTN","IBCEF73A",161,0)
 ;       IBNOTAX - Variable to pass info on missing taxonomies back to calling routine.  Pass by reference.
"RTN","IBCEF73A",162,0)
 ; Output - Taxonomy X12 codes for facilities
"RTN","IBCEF73A",163,0)
 ;        Piece 1) Service Facility Taxonomy X12 code (with IB patch 400, a claim may not have a service facility)
"RTN","IBCEF73A",164,0)
 ;        Piece 2) Non-VA Service Facility Taxonomy X12 code
"RTN","IBCEF73A",165,0)
 ;        Piece 3) Billing Provider Taxonomy X12 code (IB patch 400 definition)
"RTN","IBCEF73A",166,0)
 N IBRETVAL,IBTAX,TAX,BSZ
"RTN","IBCEF73A",167,0)
 ;
"RTN","IBCEF73A",168,0)
 S BSZ=$$B^IBCEF79(IBIEN399)    ; get billing provider/service facility information
"RTN","IBCEF73A",169,0)
 ;
"RTN","IBCEF73A",170,0)
 ; claim field# 243 - service facility taxonomy code
"RTN","IBCEF73A",171,0)
 I $P(BSZ,U,3)="" S (IBTAX,TAX)=""     ; no service facility
"RTN","IBCEF73A",172,0)
 I $P(BSZ,U,3)'="" S IBTAX=$$GET1^DIQ(399,IBIEN399_",",243,"I"),TAX=$$GET1^DIQ(8932.1,IBTAX,"X12 CODE")
"RTN","IBCEF73A",173,0)
 S $P(IBRETVAL,U,1)=TAX
"RTN","IBCEF73A",174,0)
 ; only record service facility taxonomy code missing if there is a service facility
"RTN","IBCEF73A",175,0)
 I '$L(TAX),$D(IBNOTAX),$P(BSZ,U,3)'="" S IBNOTAX=1
"RTN","IBCEF73A",176,0)
 ;
"RTN","IBCEF73A",177,0)
 ; claim field# 244 - non-VA facility taxonomy code
"RTN","IBCEF73A",178,0)
 S IBTAX=$$GET1^DIQ(399,IBIEN399_",",244,"I")
"RTN","IBCEF73A",179,0)
 S TAX=$$GET1^DIQ(8932.1,IBTAX,"X12 CODE")
"RTN","IBCEF73A",180,0)
 S $P(IBRETVAL,U,2)=TAX
"RTN","IBCEF73A",181,0)
 I '$L(TAX),$$GET1^DIQ(399,IBIEN399_",",232,"I"),$D(IBNOTAX) S IBNOTAX=$S(IBNOTAX="":2,1:IBNOTAX_U_2)
"RTN","IBCEF73A",182,0)
 ;
"RTN","IBCEF73A",183,0)
 ; claim field# 252 - billing provider taxonomy code
"RTN","IBCEF73A",184,0)
 S IBTAX=$$GET1^DIQ(399,IBIEN399_",",252,"I")
"RTN","IBCEF73A",185,0)
 S TAX=$$GET1^DIQ(8932.1,IBTAX,"X12 CODE")
"RTN","IBCEF73A",186,0)
 ;JWS;IB*2.0*592; if a Dental Claim, never send Billing Provider Taxonomy, since different from Rendering/Assistant Surgeon
"RTN","IBCEF73A",187,0)
 I $$FT^IBCEF(IBIEN399)=7 S TAX=""
"RTN","IBCEF73A",188,0)
 S $P(IBRETVAL,U,3)=TAX
"RTN","IBCEF73A",189,0)
 I '$L(TAX),$D(IBNOTAX) S IBNOTAX=$S(IBNOTAX="":3,1:IBNOTAX_U_3)
"RTN","IBCEF73A",190,0)
 ;JWS;IB*2.0*592; if a Dental Claim, never send Billing Provider Taxonomy, since different from Rendering/Assistant Surgeon
"RTN","IBCEF73A",191,0)
 I $$FT^IBCEF(IBIEN399)=7 S IBNOTAX=""
"RTN","IBCEF73A",192,0)
 Q IBRETVAL
"RTN","IBCEF73A",193,0)
 ;
"RTN","IBCEF73A",194,0)
RXSITE(IBIEN399,IBLIST) ; returns prescription organization (file 4) pointer
"RTN","IBCEF73A",195,0)
 ; for the given bill.  If IBLIST passed by reference, then a list of
"RTN","IBCEF73A",196,0)
 ; the possible organizations are returned for a bill, since a bill may
"RTN","IBCEF73A",197,0)
 ; have more than one prescription.  If more than one rx on the bill, the
"RTN","IBCEF73A",198,0)
 ; $$ return is the pointer of the last prescription found.
"RTN","IBCEF73A",199,0)
 ; IBLIST(rx ien,fill date)=ORGINATION (file 4 pointer)
"RTN","IBCEF73A",200,0)
 ;
"RTN","IBCEF73A",201,0)
 N IBX,IBDATA,IBORG,IBRX,IBDT,IBY,IBRXN,DFN
"RTN","IBCEF73A",202,0)
 K ^TMP($J,"IBCEF73A")
"RTN","IBCEF73A",203,0)
 S IBORG=0,DFN=$P($G(^DGCR(399,IBIEN399,0)),"^",2),IBLIST="IBCEF73A"
"RTN","IBCEF73A",204,0)
 S IBRXN=0 F  S IBRXN=$O(^IBA(362.4,"AIFN"_IBIEN399,IBRXN)) Q:'IBRXN  S IBX=0 F  S IBX=$O(^IBA(362.4,"AIFN"_IBIEN399,IBRXN,IBX)) Q:'IBX  D
"RTN","IBCEF73A",205,0)
 . S IBDATA=$G(^IBA(362.4,IBX,0))
"RTN","IBCEF73A",206,0)
 . S IBRX=$P(IBDATA,"^",5),IBDT=$P(IBDATA,"^",3) Q:'IBRX!('IBDT)
"RTN","IBCEF73A",207,0)
 . D RX^PSO52API(DFN,IBLIST,IBRX,,"0,2,R")
"RTN","IBCEF73A",208,0)
 . I IBDT=+$G(^TMP($J,"IBCEF73A",DFN,IBRX,22)) S (IBORG,IBLIST(IBRX,IBDT))=$$PSONPI(+$G(^TMP($J,"IBCEF73A",DFN,IBRX,20))) Q
"RTN","IBCEF73A",209,0)
 . S IBY=0 F  S IBY=$O(^TMP($J,"IBCEF73A",DFN,IBRX,"RF",IBY)) Q:'IBY  I IBDT=+$G(^TMP($J,"IBCEF73A",DFN,IBRX,"RF",IBY,.01)) S (IBORG,IBLIST(IBRX,IBDT))=$$PSONPI(+$G(^TMP($J,"IBCEF73A",DFN,IBRX,"RF",IBY,8))) Q
"RTN","IBCEF73A",210,0)
 K ^TMP($J,"IBCEF73A")
"RTN","IBCEF73A",211,0)
 Q IBORG
"RTN","IBCEF73A",212,0)
 ;
"RTN","IBCEF73A",213,0)
PSONPI(IB59IEN) ; returns institution ien for a file 59 ien
"RTN","IBCEF73A",214,0)
 N IB4IEN
"RTN","IBCEF73A",215,0)
 K ^TMP($J,"IBCEF59")
"RTN","IBCEF73A",216,0)
 D PSS^PSO59(IB59IEN,,"IBCEF59")
"RTN","IBCEF73A",217,0)
 S IB4IEN=+$G(^TMP($J,"IBCEF59",IB59IEN,101))
"RTN","IBCEF73A",218,0)
 K ^TMP($J,"IBCEF59")
"RTN","IBCEF73A",219,0)
 Q IB4IEN
"RTN","IBCEF74")
0^72^B50291931^B47493658
"RTN","IBCEF74",1,0)
IBCEF74 ;WOIFO/SS - FORMATTER/EXTRACT BILL FUNCTIONS ;31-JUL-03
"RTN","IBCEF74",2,0)
 ;;2.0;INTEGRATED BILLING;**232,280,155,290,291,320,358,343,374,432,592**;21-MAR-94;Build 58
"RTN","IBCEF74",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEF74",4,0)
 ;
"RTN","IBCEF74",5,0)
SORT(IBPRNUM,IBPRTYP,IB399,IBSRC,IBDST,IBN,IBEXC,IBSEQ,IBLIMIT) ;
"RTN","IBCEF74",6,0)
 D SORT^IBCEF77($G(IBPRNUM),$G(IBPRTYP),$G(IB399),.IBSRC,.IBDST,$G(IBN),$G(IBEXC),$G(IBSEQ),$G(IBLIMIT))
"RTN","IBCEF74",7,0)
 Q
"RTN","IBCEF74",8,0)
 ;
"RTN","IBCEF74",9,0)
 ;-- PROVINF --
"RTN","IBCEF74",10,0)
 ;Create array with prov info
"RTN","IBCEF74",11,0)
 ;Input:
"RTN","IBCEF74",12,0)
 ; IB399 - ien #399
"RTN","IBCEF74",13,0)
 ; IBPRNUM - 1=prim ins, 2= sec, 3 -tert
"RTN","IBCEF74",14,0)
 ; IBRES - for results
"RTN","IBCEF74",15,0)
 ; IBSORT - to sort OTHER INSURANCE data 
"RTN","IBCEF74",16,0)
 ;  if PROVINF is called for "C" mode of PROVIDER subroutine then 
"RTN","IBCEF74",17,0)
 ;    IBSORT can be any (say 1)
"RTN","IBCEF74",18,0)
 ;  if PROVINF is called for "O" mode then can be more than set of data
"RTN","IBCEF74",19,0)
 ;    - need to sort array to use it (like IBXDATA(1) and IBXDATA(2))
"RTN","IBCEF74",20,0)
 ;    for mode "O" it should be 1 or 2 (see PROVIDER section)
"RTN","IBCEF74",21,0)
 ;IBINSTP -  "C" -current ins, "O"-other
"RTN","IBCEF74",22,0)
 ;Output:
"RTN","IBCEF74",23,0)
 ; IBRES(PRNUM,PRTYPE,SEQ#)=PROV^INSUR^IDTYPE^ID^FORMTYP^CARETYP
"RTN","IBCEF74",24,0)
 ; where:(see PROVIDER)
"RTN","IBCEF74",25,0)
PROVINF(IB399,IBPRNUM,IBRES,IBSORT,IBINSTP) ;
"RTN","IBCEF74",26,0)
 I $G(IB399)="" Q
"RTN","IBCEF74",27,0)
 I +$G(IBSORT)=0 S IBSORT=$G(IBPRNUM)
"RTN","IBCEF74",28,0)
 N IBPRTYP,IBINSCO,IBPROV,IBFRMTYP,IBCARE,IB35591,IBN,IBCURR,IBEXC,IBLIMIT
"RTN","IBCEF74",29,0)
 S IBN=0
"RTN","IBCEF74",30,0)
 S IBINSCO=+$P($G(^DGCR(399,IB399,"M")),"^",IBPRNUM)
"RTN","IBCEF74",31,0)
 ;JRA IB*2.0*592 Modify for Dental form 7 - treat the same as CMS-1500
"RTN","IBCEF74",32,0)
 ;S IBFRMTYP=$$FT^IBCEF(IB399),IBFRMTYP=$S(IBFRMTYP=2:2,IBFRMTYP=3:1,1:0)  ;JRA IB*2.0*592 ';'
"RTN","IBCEF74",33,0)
 S IBFRMTYP=$$FT^IBCEF(IB399),IBFRMTYP=$S(IBFRMTYP=2:2,IBFRMTYP=7:7,IBFRMTYP=3:1,1:0)  ;JWS 8/30/17;IB*2.0*592;JRA IB*2.0*592
"RTN","IBCEF74",34,0)
 S IBCARE=$S($$ISRX^IBCEF1(IB399):3,1:0) ;if an Rx refill bill
"RTN","IBCEF74",35,0)
 S:IBCARE=0 IBCARE=$$INPAT^IBCEF(IB399,1) S:'IBCARE IBCARE=2 ;1-inp,2-out
"RTN","IBCEF74",36,0)
 S IBLIMIT=$S($G(IBINSTP)="C":5,1:3)  ; Limits on secondary IDs
"RTN","IBCEF74",37,0)
 F IBPRTYP=1:1:9 D
"RTN","IBCEF74",38,0)
 . N Z,IB355OV
"RTN","IBCEF74",39,0)
 . S IBPROV=$$PROVPTR^IBCEF7(IB399,IBPRTYP)
"RTN","IBCEF74",40,0)
 . Q:+IBPROV=0
"RTN","IBCEF74",41,0)
 . ;don't create anything if form type not CMS-1500 or UB
"RTN","IBCEF74",42,0)
 . Q:IBFRMTYP=0
"RTN","IBCEF74",43,0)
 . N IBRETARR S IBRETARR=0
"RTN","IBCEF74",44,0)
 . D PRACT^IBCEF71(IBINSCO,IBFRMTYP,IBCARE,IBPROV,.IBRETARR,IBPRTYP,$G(IBINSTP))
"RTN","IBCEF74",45,0)
 . S IB355OV="",IBEXC=""
"RTN","IBCEF74",46,0)
 . S Z=$O(^DGCR(399,IB399,"PRV","B",IBPRTYP,0))
"RTN","IBCEF74",47,0)
 . I Z S Z=$G(^DGCR(399,IB399,"PRV",Z,0)) D
"RTN","IBCEF74",48,0)
 .. I $P(Z,U,IBPRNUM+4)'="",$P(Z,U,IBPRNUM+11)'="" S IB355OV=$P(Z,U,IBPRNUM+4)_U_$P(Z,U,IBPRNUM+11)
"RTN","IBCEF74",49,0)
 . S IBCURR=$$COB^IBCEF(IB399)
"RTN","IBCEF74",50,0)
 . S IBN=0,IB35591=$$CH35591^IBCEF72(IBINSCO,IBFRMTYP,IBCARE)
"RTN","IBCEF74",51,0)
 . ;JRA IB*2.0*592 Modify for Dental form 7 - treat the same as CMS-1500
"RTN","IBCEF74",52,0)
 . I $G(IBINSTP)="C",$G(IBPRNUM)=1,"34"[$G(IBPRTYP),"P"[$G(IBCURR),($G(IBFRMTYP)=2!($G(IBFRMTYP)=7)),$$MCRONBIL^IBEFUNC(IB399) S IB355OV=$$MCR24K^IBCEU3(IB399)_"^12"  ;JRA IB*2.0*592
"RTN","IBCEF74",53,0)
 . ;Calculate MEDICARE (WNR) specific provider qualifier and ID for CMS-1500 secondary claim  ;JRA IB*2.0*592
"RTN","IBCEF74",54,0)
 . I $G(IBINSTP)="O","34"[$G(IBPRTYP),"ST"[$G(IBCURR),($G(IBFRMTYP)=2!($G(IBFRMTYP)=7)),$$MCRONBIL^IBEFUNC(IB399) S IB355OV=$$MCR24K^IBCEU3(IB399)_"^12"
"RTN","IBCEF74",55,0)
 . I $P(IB355OV,U,2) D
"RTN","IBCEF74",56,0)
 .. I $$CHCKSEC^IBCEF73(IBFRMTYP,IBPRTYP,$G(IBINSTP),$P($G(^IBE(355.97,+$P(IB355OV,U,2),0)),U,3)) D
"RTN","IBCEF74",57,0)
 ... S IBEXC=$P(IB355OV,U,2),IBN=IBN+1,IBRES(IBSORT,IBPRTYP,IBN)="OVERRIDE^"_IBINSCO_U_$P($G(^IBE(355.97,+IBEXC,0)),U,3)_U_$P(IB355OV,U)_"^^^^^"_+IBEXC
"RTN","IBCEF74",58,0)
 . I IB35591'="",IBEXC'=$P(IB35591,U,3) S:$$CHCKSEC^IBCEF73(IBFRMTYP,IBPRTYP,$G(IBINSTP),$P(IB35591,"^")) IBN=IBN+1,IBRES(IBSORT,IBPRTYP,IBN)="DEFAULT^"_IBINSCO_"^"_IB35591_"^^",$P(IBRES(IBSORT,IBPRTYP,IBN),U,9)=$P(IB35591,U,3)
"RTN","IBCEF74",59,0)
 . D SORT(IBSORT,IBPRTYP,IB399,.IBRETARR,.IBRES,IBN,IBEXC,IBPRNUM,IBLIMIT)
"RTN","IBCEF74",60,0)
 . S IBRES(IBSORT,IBPRTYP)=IBPROV
"RTN","IBCEF74",61,0)
 S IBRES(IBSORT)=$S(IBPRNUM=3:"T",IBPRNUM=2:"S",1:"P")
"RTN","IBCEF74",62,0)
 Q
"RTN","IBCEF74",63,0)
 ;
"RTN","IBCEF74",64,0)
SECIDCK(IBIFN,IBSEQ,IBTYP,IBIFN1) ; Function returns 1 if ID type ptr in
"RTN","IBCEF74",65,0)
 ;  IBTYP is valid X12 code for the claim/prov function (IBPROVF)
"RTN","IBCEF74",66,0)
 ;  as a sec id
"RTN","IBCEF74",67,0)
 ; IBSEQ = COB seq being checked
"RTN","IBCEF74",68,0)
 ; IBIFN1 = entry # in PRV multiple being checked
"RTN","IBCEF74",69,0)
 ;  Called from input transform of fields .12-.14, subfile 399.0222
"RTN","IBCEF74",70,0)
 I $G(IBIFN)="" Q
"RTN","IBCEF74",71,0)
 N IBOK,IBFRM,IBCOBN,IBX12,IBPROVF
"RTN","IBCEF74",72,0)
 S IBPROVF=+$G(^DGCR(399,IBIFN,"PRV",IBIFN1,0))
"RTN","IBCEF74",73,0)
 S IBFRM=$$FT^IBCEF(IBIFN),IBFRM=$S(IBFRM=3:1,1:2) ; Form type
"RTN","IBCEF74",74,0)
 S IBCOBN=$$COBN^IBCEF(IBIFN) S:'IBCOBN IBCOBN=1 ; Current COB seq
"RTN","IBCEF74",75,0)
 S IBX12=$P($G(^IBE(355.97,+IBTYP,0)),U,3) ; X12 code for prov id typ
"RTN","IBCEF74",76,0)
 Q $$CHSEC^IBCEF73(IBFRM,IBPROVF,$S(IBSEQ=IBCOBN:"C",1:"O"),IBX12)
"RTN","IBCEF74",77,0)
 ;
"RTN","IBCEF74",78,0)
DEFID(IBIFN,IBPRV) ;
"RTN","IBCEF74",79,0)
 ; IBIFN = ien of bill
"RTN","IBCEF74",80,0)
 ; IBPRV = ien of entry subfile 399.0222
"RTN","IBCEF74",81,0)
 ;  Function returns default ids: prim id def^sec id def^tert id def
"RTN","IBCEF74",82,0)
 ;  SSN cannot be the default ID
"RTN","IBCEF74",83,0)
 I $G(IBIFN)="" Q ""
"RTN","IBCEF74",84,0)
 N Z,Z1,ID,IBZ,IBINS,IBINS4,IBUB
"RTN","IBCEF74",85,0)
 S IBZ=""
"RTN","IBCEF74",86,0)
 S IBUB=($$FT^IBCEF(IBIFN)=3)
"RTN","IBCEF74",87,0)
 D F^IBCEF("N-ALL ATT/REND PROV SSN/EI","IBZ","",IBIFN)
"RTN","IBCEF74",88,0)
 S Z=$G(^DGCR(399,IBIFN,"PRV",IBPRV,0)),ID=$P(Z,U,5,7)
"RTN","IBCEF74",89,0)
 F Z1=1:1:3 I $P(ID,U,Z1)="" D
"RTN","IBCEF74",90,0)
 . Q:'$G(^DGCR(399,IBIFN,"I"_Z1))  S IBINS=+^("I"_Z1)
"RTN","IBCEF74",91,0)
 . S $P(ID,U,Z1)=$$GETID^IBCEP2(IBIFN,2,$P(Z,U,2),Z1)
"RTN","IBCEF74",92,0)
 . ; Set default if null
"RTN","IBCEF74",93,0)
 . I $P(ID,U,Z1)="" S $P(ID,U,Z1)="VAD000"
"RTN","IBCEF74",94,0)
 Q ID
"RTN","IBCEF74",95,0)
 ;
"RTN","IBCEF74",96,0)
DISPID(IBXIEN) ; Display list of all prov and fac ids that will
"RTN","IBCEF74",97,0)
 ; extract for this bill if transmitted electronically
"RTN","IBCEF74",98,0)
 I $G(IBXIEN)="" Q
"RTN","IBCEF74",99,0)
 N IBID,IBID1,IBZ,IBCT,IBFRM,IBCOBN,IBQUIT,IBTYP,DIR,IBIFN,X,Y,Z,Z0,Z1,CO,IBN,IBCODE
"RTN","IBCEF74",100,0)
 S IBIFN=IBXIEN
"RTN","IBCEF74",101,0)
 S IBFRM=$$FT^IBCEF(IBIFN),IBCOBN=$$COBN^IBCEF(IBIFN)
"RTN","IBCEF74",102,0)
 W @IOF
"RTN","IBCEF74",103,0)
 W !,"If this bill is transmitted electronically, the following IDs will be sent:"
"RTN","IBCEF74",104,0)
 ; Returns all prov sec ids to be transmitted in indicated segments
"RTN","IBCEF74",105,0)
 S Z=+$G(^DGCR(399,IBIFN,"I1")) I Z W !,"  Primary Ins Co: ",$$EXTERNAL^DILFD(399,101,"",Z) I IBCOBN=1 W ?54,"<<<Current Ins"
"RTN","IBCEF74",106,0)
 S Z=+$G(^DGCR(399,IBIFN,"I2")) I Z W !,"Secondary Ins Co: ",$$EXTERNAL^DILFD(399,101,"",Z) I IBCOBN=2 W ?54,"<<<Current Ins"
"RTN","IBCEF74",107,0)
 S Z=+$G(^DGCR(399,IBIFN,"I3")) I Z W !," Tertiary Ins Co: ",$$EXTERNAL^DILFD(399,101,"",Z) I IBCOBN=3 W ?54,"<<<Current Ins"
"RTN","IBCEF74",108,0)
 ;JWS;IB*2.0*592;added Assistant Surgeon records to header display
"RTN","IBCEF74",109,0)
 W !!,"Provider IDs: (VistA Records OP1,OP2,OP4,OP8,OP9,OP10,OPR,OPR1,OPR2,OPR3,OPR4,",!?29,"OPR5,OPR7,OPR8,OPR9,OPRA,OPRB,OPRC):"
"RTN","IBCEF74",110,0)
 ;F Z=1:1:3 I $G(^DGCR(399,IBIFN,"I"_Z)) D PROVINF(IBIFN,Z,.IBID,"",$S(IBCOBN=Z:"C",1:"O"))
"RTN","IBCEF74",111,0)
 ;*432/TAZ - Added call to gather line providers and apply business rules
"RTN","IBCEF74",112,0)
 D ALLIDS^IBCEFP(IBIFN,.IBID)
"RTN","IBCEF74",113,0)
 ;*432/TAZ - Rewrote following code to take info from the IBID array instead of File 399.  This allows changes from the application of the business rules.
"RTN","IBCEF74",114,0)
 S IBQUIT=0
"RTN","IBCEF74",115,0)
 ;
"RTN","IBCEF74",116,0)
 ;JWS;IB*2.0*592; added assistant surgeon
"RTN","IBCEF74",117,0)
 F IBPRV=4,3,1,2,5,6,9 D  ; Process providers in order: Attending, Rendering, Referring, Operating, Supervising, and Other Operating if they exist
"RTN","IBCEF74",118,0)
 . I '$D(IBID("PROVINF",IBIFN,"C",1,IBPRV)) Q
"RTN","IBCEF74",119,0)
 . I ($Y+5)>IOSL S IBQUIT=$$NOMORE() Q:IBQUIT
"RTN","IBCEF74",120,0)
 . W !!?5,$$EXTERNAL^DILFD(399.0222,.01,"",IBPRV),": "_$$EXTERNAL^DILFD(399.0222,.02,"",$P(IBID("PROVINF",IBIFN,"C",1,IBPRV),U))
"RTN","IBCEF74",121,0)
 . W !?8,"NPI: ",?40,$S($P($G(IBID("PROVINF",IBIFN,"C",1,IBPRV,0)),U,4)]"":$P(IBID("PROVINF",IBIFN,"C",1,IBPRV,0),U,4),1:"***MISSING***")
"RTN","IBCEF74",122,0)
 . K IBTYP
"RTN","IBCEF74",123,0)
 . F CO="C","O" D
"RTN","IBCEF74",124,0)
 .. F IBN=1,2 I $D(IBID("PROVINF",IBIFN,CO,IBN,IBPRV)) D
"RTN","IBCEF74",125,0)
 ... F Z0=1:1 Q:'$D(IBID("PROVINF",IBIFN,CO,IBN,IBPRV,Z0))!IBQUIT  D
"RTN","IBCEF74",126,0)
 .... S IBCODE=+$P(IBID("PROVINF",IBIFN,CO,IBN,IBPRV,Z0),U,9)
"RTN","IBCEF74",127,0)
 .... Q:$D(IBTYP(IBCODE))  ;1st of each type transmits
"RTN","IBCEF74",128,0)
 .... I ($Y+5)>IOSL S IBQUIT=$$NOMORE() Q:IBQUIT
"RTN","IBCEF74",129,0)
 .... S IBTYP(IBCODE)=""
"RTN","IBCEF74",130,0)
 .... W !,?8,"(",IBID("PROVINF",IBIFN,CO,IBN),") ",$$EXTERNAL^DILFD(36,4.01,"",IBCODE),?40,$P(IBID("PROVINF",IBIFN,CO,IBN,IBPRV,Z0),U,4)
"RTN","IBCEF74",131,0)
 ;
"RTN","IBCEF74",132,0)
 I IBQUIT G DISPIDX
"RTN","IBCEF74",133,0)
 ;
"RTN","IBCEF74",134,0)
 ; IB*2*320 - display additional IDs for ?ID
"RTN","IBCEF74",135,0)
 D EN^IBCEF74A(IBIFN,.IBQUIT,.IBID)
"RTN","IBCEF74",136,0)
 ;
"RTN","IBCEF74",137,0)
DISPIDX ;
"RTN","IBCEF74",138,0)
 I '$G(IBQUIT) S DIR(0)="EA",DIR("A")="Press RETURN to continue " W ! D ^DIR K DIR
"RTN","IBCEF74",139,0)
 Q
"RTN","IBCEF74",140,0)
 ;
"RTN","IBCEF74",141,0)
NOMORE() ;
"RTN","IBCEF74",142,0)
 S DIR(0)="EA",DIR("A")="Press RETURN for more IDs or '^' to exit: " W ! D ^DIR
"RTN","IBCEF74",143,0)
 W @IOF
"RTN","IBCEF74",144,0)
 Q (Y'=1)
"RTN","IBCEF74",145,0)
 ;
"RTN","IBCEF74",146,0)
DEFSEC(IBIFN,IBARR) ; Returns array in IBARR for default prov sec ids for ien IBIFN
"RTN","IBCEF74",147,0)
 ; IBARR if passed by ref is returned   IBARR(prov function,COBN)=def id
"RTN","IBCEF74",148,0)
 I $G(IBIFN)=""
"RTN","IBCEF74",149,0)
 N IBCAR,IBCOBN,IBPC,IBINS,IBARRX,Q,Z,Z0,ZINS,X
"RTN","IBCEF74",150,0)
 K IBARR
"RTN","IBCEF74",151,0)
 S ZINS="",IBCOBN=$$COBN^IBCEF(IBIFN),IBPC=$S($$FT^IBCEF(IBIFN)=3:2,1:1)
"RTN","IBCEF74",152,0)
 S IBCAR=$$INPAT^IBCEF(IBIFN,1),IBCAR=$S('IBCAR:2,1:1)
"RTN","IBCEF74",153,0)
 F Z=1:1:3 S ZINS=ZINS_+$G(^DGCR(399,IBIFN,"I"_Z))_U
"RTN","IBCEF74",154,0)
 F Z=1:1:3 I $P(ZINS,U,Z),'$P($G(^DIC(36,+$P(ZINS,U,Z),4)),U,IBPC) S $P(ZINS,U,Z)=""
"RTN","IBCEF74",155,0)
 S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"PRV",Z)) Q:'Z  S Z0=$G(^(Z,0)) D
"RTN","IBCEF74",156,0)
 . F Q=1:1:3 D
"RTN","IBCEF74",157,0)
 .. I $P(Z0,U,Q+4)'="" S IBARR(+Z0,Q)=$P(Z0,U,Q+4) Q  ; Override
"RTN","IBCEF74",158,0)
 .. S IBINS=$P(ZINS,U,Q)
"RTN","IBCEF74",159,0)
 .. Q:'IBINS
"RTN","IBCEF74",160,0)
 .. S X=$$IDFIND^IBCEP2(IBIFN,"",$P(Z0,U,2),Q,1)
"RTN","IBCEF74",161,0)
 .. I X'="" S IBARR(+Z0,Q)=X
"RTN","IBCEF74",162,0)
 Q
"RTN","IBCEF74",163,0)
 ;
"RTN","IBCEF74A")
0^90^B40140947^B39038241
"RTN","IBCEF74A",1,0)
IBCEF74A ;ALB/ESG - Provider ID maint ?ID continuation ;7 Mar 2006
"RTN","IBCEF74A",2,0)
 ;;2.0;INTEGRATED BILLING;**320,343,349,395,400,432,516,592**;21-MAR-94;Build 58
"RTN","IBCEF74A",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEF74A",4,0)
 ;
"RTN","IBCEF74A",5,0)
 Q
"RTN","IBCEF74A",6,0)
 ;
"RTN","IBCEF74A",7,0)
EN(IBIFN,IBQUIT,IBID) ; Display billing provider and service provider IDs as part
"RTN","IBCEF74A",8,0)
 ; of the ?ID display/help in the billing screens.
"RTN","IBCEF74A",9,0)
 ; Called from DISPID^IBCEF74.
"RTN","IBCEF74A",10,0)
 NEW IBX,Z,ZI,ZN,SEQ,PSIN,DATA,QUALNM,IDNUM,FACNAME,IBZ,ORGNPI,BPZ,BPNAME,BPNPI,BPTAX,SFNPI,SFTAX
"RTN","IBCEF74A",11,0)
 ;
"RTN","IBCEF74A",12,0)
 ;D ALLIDS^IBCEF75(IBIFN,.IBID)
"RTN","IBCEF74A",13,0)
 ;
"RTN","IBCEF74A",14,0)
 ; Re-sort array by insurance sequence (P/S/T)
"RTN","IBCEF74A",15,0)
 K IBX
"RTN","IBCEF74A",16,0)
 F Z="BILLING PRV","LAB/FAC" F ZI="C","O" S ZN=0 F  S ZN=$O(IBID(Z,IBIFN,ZI,ZN)) Q:'ZN  D
"RTN","IBCEF74A",17,0)
 . S SEQ=$P($G(IBID(Z,IBIFN,ZI,ZN)),U,1) Q:SEQ=""
"RTN","IBCEF74A",18,0)
 . S IBX(Z,SEQ,ZI,ZN)=""
"RTN","IBCEF74A",19,0)
 . Q
"RTN","IBCEF74A",20,0)
 ;
"RTN","IBCEF74A",21,0)
 ; Display billing provider information - IB*2*400
"RTN","IBCEF74A",22,0)
 S BPZ=$$B^IBCEF79(IBIFN)
"RTN","IBCEF74A",23,0)
 D GETBP^IBCEF79(IBIFN,"",+BPZ,"?ID",.IBZ)
"RTN","IBCEF74A",24,0)
 S ORGNPI=$$ORGNPI^IBCEF73A(IBIFN)
"RTN","IBCEF74A",25,0)
 I ($Y+5)>IOSL S IBQUIT=$$NOMORE^IBCEF74() I IBQUIT G EX
"RTN","IBCEF74A",26,0)
 W !!,"Billing Provider Name and ID Information"
"RTN","IBCEF74A",27,0)
 S BPNAME=$G(IBZ("?ID","NAME"))
"RTN","IBCEF74A",28,0)
 I BPNAME="" S BPNAME="***MISSING***"
"RTN","IBCEF74A",29,0)
 I ($Y+5)>IOSL S IBQUIT=$$NOMORE^IBCEF74() I IBQUIT G EX
"RTN","IBCEF74A",30,0)
 W !,"Billing Provider:  ",BPNAME
"RTN","IBCEF74A",31,0)
 ;
"RTN","IBCEF74A",32,0)
 S BPNPI=$P(ORGNPI,U,3)
"RTN","IBCEF74A",33,0)
 I BPNPI="" S BPNPI="***MISSING***"
"RTN","IBCEF74A",34,0)
 I ($Y+5)>IOSL S IBQUIT=$$NOMORE^IBCEF74() I IBQUIT G EX
"RTN","IBCEF74A",35,0)
 W !?5,"Billing Provider NPI:  ",BPNPI
"RTN","IBCEF74A",36,0)
 ;
"RTN","IBCEF74A",37,0)
 S BPTAX=$$NOPUNCT^IBCEF($P($G(^IBE(350.9,1,1)),U,5),1)
"RTN","IBCEF74A",38,0)
 I BPTAX="" S BPTAX="***MISSING***"
"RTN","IBCEF74A",39,0)
 I ($Y+5)>IOSL S IBQUIT=$$NOMORE^IBCEF74() I IBQUIT G EX
"RTN","IBCEF74A",40,0)
 W !?5,"Billing Provider Tax ID (VistA Record PRV):  ",BPTAX
"RTN","IBCEF74A",41,0)
 ;
"RTN","IBCEF74A",42,0)
 ; Display billing provider secondary ID's (current ins only)
"RTN","IBCEF74A",43,0)
 I ($Y+5)>IOSL S IBQUIT=$$NOMORE^IBCEF74() I IBQUIT G EX
"RTN","IBCEF74A",44,0)
 W !?5,"Billing Provider Secondary IDs (VistA Record CI1A):"
"RTN","IBCEF74A",45,0)
 S Z="BILLING PRV"
"RTN","IBCEF74A",46,0)
 D SECID(Z,.IBQUIT)
"RTN","IBCEF74A",47,0)
 I IBQUIT G EX
"RTN","IBCEF74A",48,0)
 ;
"RTN","IBCEF74A",49,0)
 ; Now display the lab or facility primary and secondary IDs
"RTN","IBCEF74A",50,0)
 ; This is the service facility information
"RTN","IBCEF74A",51,0)
 ; IB*2*400 - check to make sure there is a service facility
"RTN","IBCEF74A",52,0)
 ;
"RTN","IBCEF74A",53,0)
 I $P(BPZ,U,3)="" G LPRV     ; no service facility information to display
"RTN","IBCEF74A",54,0)
 ;
"RTN","IBCEF74A",55,0)
 ; Service facility name, similar code as found in SUB-2
"RTN","IBCEF74A",56,0)
 I ($Y+5)>IOSL S IBQUIT=$$NOMORE^IBCEF74() I IBQUIT G EX
"RTN","IBCEF74A",57,0)
 W !!,"Service Facility Name and ID Information"
"RTN","IBCEF74A",58,0)
 ;
"RTN","IBCEF74A",59,0)
 ; MRD;IB*2.0*516 - Due to fields being marked for deletion, the
"RTN","IBCEF74A",60,0)
 ; function $$SENDSF^IBCEF79 will always return '1'.  Refer to
"RTN","IBCEF74A",61,0)
 ; that function and INSFLGS^IBCEF79 for more information.
"RTN","IBCEF74A",62,0)
 ;
"RTN","IBCEF74A",63,0)
 ; Display note if ins co flag to suppress lab/fac data is set (only applies in switchback mode)
"RTN","IBCEF74A",64,0)
 ;I '$$SENDSF^IBCEF79(IBIFN) D  I IBQUIT G EX
"RTN","IBCEF74A",65,0)
 ;. I ($Y+5)>IOSL S IBQUIT=$$NOMORE^IBCEF74() Q:IBQUIT
"RTN","IBCEF74A",66,0)
 ;. W !!,"Note:  Service Facility Data not sent for Current Insurance"
"RTN","IBCEF74A",67,0)
 ;. W !,"       'Send VA Lab/Facility IDs or Facility Data for VAMC?' is set to NO",!
"RTN","IBCEF74A",68,0)
 ;. Q
"RTN","IBCEF74A",69,0)
 ;
"RTN","IBCEF74A",70,0)
 S FACNAME=$$GETFAC^IBCEP8(+$P(BPZ,U,4),$P(BPZ,U,3),0)
"RTN","IBCEF74A",71,0)
 I FACNAME="" S FACNAME="***MISSING***"
"RTN","IBCEF74A",72,0)
 I ($Y+5)>IOSL S IBQUIT=$$NOMORE^IBCEF74() I IBQUIT G EX
"RTN","IBCEF74A",73,0)
 W !?5,"Facility:  ",FACNAME
"RTN","IBCEF74A",74,0)
 ;
"RTN","IBCEF74A",75,0)
 S SFNPI=$P(ORGNPI,U,1)
"RTN","IBCEF74A",76,0)
 I SFNPI="" S SFNPI="***MISSING***"
"RTN","IBCEF74A",77,0)
 I ($Y+5)>IOSL S IBQUIT=$$NOMORE^IBCEF74() I IBQUIT G EX
"RTN","IBCEF74A",78,0)
 W !?5,"Lab or Facility NPI:  ",SFNPI
"RTN","IBCEF74A",79,0)
 ;
"RTN","IBCEF74A",80,0)
 S SFTAX=$$NOPUNCT^IBCEF($$EIN^IBCEP8A(IBIFN),1)
"RTN","IBCEF74A",81,0)
 I SFTAX="" S SFTAX="***MISSING***"
"RTN","IBCEF74A",82,0)
 I ($Y+5)>IOSL S IBQUIT=$$NOMORE^IBCEF74() I IBQUIT G EX
"RTN","IBCEF74A",83,0)
 W !?5,"Lab or Facility Tax ID (VistA Record SUB):  ",SFTAX
"RTN","IBCEF74A",84,0)
 ;
"RTN","IBCEF74A",85,0)
 ; lab/fac secondary IDs
"RTN","IBCEF74A",86,0)
 I ($Y+5)>IOSL S IBQUIT=$$NOMORE^IBCEF74() I IBQUIT G EX
"RTN","IBCEF74A",87,0)
 W !?5,"Lab or Facility Secondary IDs (VistA Records SUB1,SUB2,OP3,OP6,OP7):"
"RTN","IBCEF74A",88,0)
 S Z="LAB/FAC"
"RTN","IBCEF74A",89,0)
 D SECID(Z,.IBQUIT)
"RTN","IBCEF74A",90,0)
 I IBQUIT G EX
"RTN","IBCEF74A",91,0)
 ;
"RTN","IBCEF74A",92,0)
LPRV ;Service Line Providers
"RTN","IBCEF74A",93,0)
 I '$D(IBID("L-PROV")) G EX  ; No Line Level Providers
"RTN","IBCEF74A",94,0)
 N IBSLC,IBN,CO,IBCODE,IBTYP,IBPRTYP,Z0
"RTN","IBCEF74A",95,0)
 S IBSLC=0
"RTN","IBCEF74A",96,0)
 W !!,"Service Line Providers"
"RTN","IBCEF74A",97,0)
 F  S IBSLC=$O(IBID("L-PROV",IBIFN,IBSLC)) Q:'IBSLC  D  I IBQUIT Q
"RTN","IBCEF74A",98,0)
 . I ($Y+6)>IOSL S IBQUIT=$$NOMORE^IBCEF74() I IBQUIT Q
"RTN","IBCEF74A",99,0)
 . W !!?5,"Service Line: ",IBSLC
"RTN","IBCEF74A",100,0)
 . ;JWS;IB*2.0*592; 6 - Assistant Surgeon
"RTN","IBCEF74A",101,0)
 . F IBPRTYP=4,3,1,2,5,6,9 I $D(IBID("L-PROV",IBIFN,IBSLC,"C",1,IBPRTYP)) D  ; Process providers in order: Attending, Rendering, Referring, Operating, Supervising, Assistant Surgeon and Other Operating if they exist
"RTN","IBCEF74A",102,0)
 .. I ($Y+5)>IOSL S IBQUIT=$$NOMORE^IBCEF74() I IBQUIT Q
"RTN","IBCEF74A",103,0)
 .. W !?5,$$EXTERNAL^DILFD(399.0404,.01,"",IBPRTYP),": ",$$EXTERNAL^DILFD(399.0404,.02,"",$P(IBID("L-PROV",IBIFN,IBSLC,"C",1,IBPRTYP),U,1))
"RTN","IBCEF74A",104,0)
 .. W !?8,"NPI:",?40,$S($P(IBID("L-PROV",IBIFN,IBSLC,"C",1,IBPRTYP,0),U,4)]"":$P(IBID("L-PROV",IBIFN,IBSLC,"C",1,IBPRTYP,0),U,4),1:"***MISSING***")
"RTN","IBCEF74A",105,0)
 .. K IBTYP
"RTN","IBCEF74A",106,0)
 .. F CO="C","O" D
"RTN","IBCEF74A",107,0)
 ... F IBN=1,2 D
"RTN","IBCEF74A",108,0)
 .... F Z0=1:1 Q:'$D(IBID("L-PROV",IBIFN,IBSLC,CO,IBN,IBPRTYP,Z0))!IBQUIT  D
"RTN","IBCEF74A",109,0)
 ..... S IBCODE=$P(IBID("L-PROV",IBIFN,IBSLC,CO,IBN,IBPRTYP,Z0),U,9)
"RTN","IBCEF74A",110,0)
 ..... Q:$D(IBTYP(IBCODE))  ; 1st of each type transmits
"RTN","IBCEF74A",111,0)
 ..... I ($Y+5)>IOSL S IBQUIT=$$NOMORE^IBCEF74() Q:IBQUIT
"RTN","IBCEF74A",112,0)
 ..... S IBTYP(IBCODE)=""
"RTN","IBCEF74A",113,0)
 ..... W !,?8,"(",IBID("L-PROV",IBIFN,IBSLC,CO,IBN),") ",$$EXTERNAL^DILFD(36,4.01,"",IBCODE),?40,$P(IBID("L-PROV",IBIFN,IBSLC,CO,IBN,IBPRTYP,Z0),U,4)
"RTN","IBCEF74A",114,0)
 ;
"RTN","IBCEF74A",115,0)
EX ;
"RTN","IBCEF74A",116,0)
 Q
"RTN","IBCEF74A",117,0)
 ;
"RTN","IBCEF74A",118,0)
QUAL(Z,FORMTYPE) ; turn the qualifier code into a qualifier description
"RTN","IBCEF74A",119,0)
 NEW QUAL,IEN
"RTN","IBCEF74A",120,0)
 S QUAL=""
"RTN","IBCEF74A",121,0)
 I $G(Z)="" G QUALX
"RTN","IBCEF74A",122,0)
 I Z="1C" D  G QUALX   ; qualifier for Medicare Part ?
"RTN","IBCEF74A",123,0)
 . I $G(FORMTYPE)=2 S QUAL="MEDICARE PART B"   ; 1500
"RTN","IBCEF74A",124,0)
 . I $G(FORMTYPE)=3 S QUAL="MEDICARE PART A"   ; ub
"RTN","IBCEF74A",125,0)
 . Q
"RTN","IBCEF74A",126,0)
 I Z=34 S Z="SY"       ; qualifier for SSN
"RTN","IBCEF74A",127,0)
 S IEN=+$O(^IBE(355.97,"C",Z,"")) I 'IEN G QUALX
"RTN","IBCEF74A",128,0)
 S QUAL=$P($G(^IBE(355.97,IEN,0)),U,1)
"RTN","IBCEF74A",129,0)
QUALX ;
"RTN","IBCEF74A",130,0)
 Q QUAL
"RTN","IBCEF74A",131,0)
 ;
"RTN","IBCEF74A",132,0)
SECID(Z,IBQUIT) ; Display secondary ID and qualifier information
"RTN","IBCEF74A",133,0)
 ; Z is the type of IDs passed in; either BILLING PRV or LAB/FAC
"RTN","IBCEF74A",134,0)
 ; IBQUIT is returned if passed by reference
"RTN","IBCEF74A",135,0)
 NEW SEQ,ZI,ZN,PSIN,DATA,QUALNM,IDNUM,NODATA
"RTN","IBCEF74A",136,0)
 S IBQUIT=0,NODATA=1
"RTN","IBCEF74A",137,0)
 F SEQ="P","S","T" D  Q:IBQUIT
"RTN","IBCEF74A",138,0)
 . ;
"RTN","IBCEF74A",139,0)
 . ; current ins only for billing provider secondary IDs
"RTN","IBCEF74A",140,0)
 . I Z="BILLING PRV",SEQ'=$$COB^IBCEF(IBIFN) Q
"RTN","IBCEF74A",141,0)
 . S ZI=""
"RTN","IBCEF74A",142,0)
 . F  S ZI=$O(IBX(Z,SEQ,ZI)) Q:ZI=""  D  Q:IBQUIT
"RTN","IBCEF74A",143,0)
 .. S ZN=0
"RTN","IBCEF74A",144,0)
 .. F  S ZN=$O(IBX(Z,SEQ,ZI,ZN)) Q:'ZN  D  Q:IBQUIT
"RTN","IBCEF74A",145,0)
 ... S PSIN=0   ; start at 0 to skip primary IDs
"RTN","IBCEF74A",146,0)
 ... ;*432/TAZ - Changed Q:PSIN="" to Q:'PSIN to prevent "CONTACTS" node from printing as secondary ID
"RTN","IBCEF74A",147,0)
 ... F  S PSIN=$O(IBID(Z,IBIFN,ZI,ZN,PSIN)) Q:'PSIN  D  Q:IBQUIT
"RTN","IBCEF74A",148,0)
 .... S DATA=$G(IBID(Z,IBIFN,ZI,ZN,PSIN))
"RTN","IBCEF74A",149,0)
 .... S QUALNM=$$QUAL($P(DATA,U,1),$$FT^IBCEF(IBIFN))
"RTN","IBCEF74A",150,0)
 .... S IDNUM=$P(DATA,U,2)
"RTN","IBCEF74A",151,0)
 .... I ($Y+5)>IOSL S IBQUIT=$$NOMORE^IBCEF74() Q:IBQUIT
"RTN","IBCEF74A",152,0)
 .... S NODATA=0
"RTN","IBCEF74A",153,0)
 .... W !?8,"(",SEQ,") ",QUALNM,?40,IDNUM
"RTN","IBCEF74A",154,0)
 .... I Z="LAB/FAC",$D(^DGCR(399,IBIFN,"I2")),SEQ=$$COB^IBCEF(IBIFN) W ?54,"<<<Current Ins"
"RTN","IBCEF74A",155,0)
 .... I Z="BILLING PRV",PSIN=1 W ?54,"<<<System Generated ID"
"RTN","IBCEF74A",156,0)
 .... Q
"RTN","IBCEF74A",157,0)
 ... Q
"RTN","IBCEF74A",158,0)
 .. Q
"RTN","IBCEF74A",159,0)
 . Q
"RTN","IBCEF74A",160,0)
 I NODATA,'IBQUIT W !?8,"(-) None Found"
"RTN","IBCEF74A",161,0)
SECIDX ;
"RTN","IBCEF74A",162,0)
 Q
"RTN","IBCEF74A",163,0)
 ;
"RTN","IBCEF75")
0^75^B25634015^B24683660
"RTN","IBCEF75",1,0)
IBCEF75 ;ALB/WCJ - Provider ID functions ;13 Feb 2006
"RTN","IBCEF75",2,0)
 ;;2.0;INTEGRATED BILLING;**320,371,400,432,592**;21-MAR-94;Build 58
"RTN","IBCEF75",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEF75",4,0)
 ;
"RTN","IBCEF75",5,0)
 G AWAY
"RTN","IBCEF75",6,0)
AWAY Q
"RTN","IBCEF75",7,0)
 ;
"RTN","IBCEF75",8,0)
ALLIDS(IBIFN,IBXSAVE,IBSTRIP,SEG) ; Return all of the Provider IDS 
"RTN","IBCEF75",9,0)
 I '$D(IBSTRIP) S IBSTRIP=0
"RTN","IBCEF75",10,0)
 I '$D(SEG) S SEG=""
"RTN","IBCEF75",11,0)
 N IBXIEN,ARINFO,ARID,ARQ,IBFRMTYP,ARIEN,ARINS,Z0,DAT,I,SORT1,SORT2,SORT3,COB,IBCCOB
"RTN","IBCEF75",12,0)
 ;
"RTN","IBCEF75",13,0)
 S IBXIEN=IBIFN
"RTN","IBCEF75",14,0)
 D ALLPROV^IBCEF7    ; Get the Person ID's (Returns IBXSAVE)
"RTN","IBCEF75",15,0)
 S DAT=$$PROVID^IBCEF73(IBIFN)
"RTN","IBCEF75",16,0)
 S DAT("QUAL")=IBXSAVE("ID")  ; this value was also passed back by above function
"RTN","IBCEF75",17,0)
 S SORT1="" F  S SORT1=$O(IBXSAVE("PROVINF",IBIFN,SORT1)) Q:SORT1=""  D
"RTN","IBCEF75",18,0)
 . S SORT2=0 F  S SORT2=$O(IBXSAVE("PROVINF",IBIFN,SORT1,SORT2)) Q:SORT2=""  D
"RTN","IBCEF75",19,0)
 .. S SORT3=0 F  S SORT3=$O(IBXSAVE("PROVINF",IBIFN,SORT1,SORT2,SORT3))  Q:SORT3=""  D
"RTN","IBCEF75",20,0)
 ... ;*432/TAZ - Primary node now points to NPI
"RTN","IBCEF75",21,0)
 ... N IBPRVPTR,IBNPI
"RTN","IBCEF75",22,0)
 ... S IBPRVPTR=IBXSAVE("PROVINF",IBIFN,SORT1,SORT2,SORT3),IBNPI=$$GETNPI^IBCEF73A(IBPRVPTR)
"RTN","IBCEF75",23,0)
 ... S IBXSAVE("PROVINF",IBIFN,SORT1,SORT2,SORT3,0)="PRIMARY"_U_U_$$STRIP^IBCEF76($S(IBNPI]"":"XX",1:"")_U_IBNPI,1,U,IBSTRIP)
"RTN","IBCEF75",24,0)
 ... F I=1:1 Q:'$D(IBXSAVE("PROVINF",IBIFN,SORT1,SORT2,SORT3,I))  D
"RTN","IBCEF75",25,0)
 .... S $P(IBXSAVE("PROVINF",IBIFN,SORT1,SORT2,SORT3,I),U,3,4)=$$STRIP^IBCEF76($P(IBXSAVE("PROVINF",IBIFN,SORT1,SORT2,SORT3,I),U,3,4),1,U,IBSTRIP)
"RTN","IBCEF75",26,0)
 ;
"RTN","IBCEF75",27,0)
 D LFIDS^IBCEF76(IBIFN,.IBXSAVE,IBSTRIP,SEG)   ; Get the Lab/Facility IDs
"RTN","IBCEF75",28,0)
 ;
"RTN","IBCEF75",29,0)
 S IBFRMTYP=$$FT^IBCEF(IBIFN)
"RTN","IBCEF75",30,0)
 ;JWS;IB*2.0*592; Dental form 7
"RTN","IBCEF75",31,0)
 S ARIEN=$S(IBFRMTYP=2:3,IBFRMTYP=7:3,1:4)
"RTN","IBCEF75",32,0)
 S IBCCOB=$$COBN^IBCEF(IBIFN)  ; Current Insurance
"RTN","IBCEF75",33,0)
 F COB=1:1:3 D
"RTN","IBCEF75",34,0)
 . S SORT1=$S(COB=IBCCOB:"C",1:"O")
"RTN","IBCEF75",35,0)
 . S SORT2=$S(SORT1="C":1,COB=1:1,COB=2&(IBCCOB=1):1,1:2)
"RTN","IBCEF75",36,0)
 . S ARINFO=$G(IBXSAVE("PROVINF",IBIFN,SORT1,SORT2,ARIEN,1))
"RTN","IBCEF75",37,0)
 . ;
"RTN","IBCEF75",38,0)
 . D BPIDS(IBIFN,.IBXSAVE,SORT1,SORT2,COB,IBSTRIP,SEG)
"RTN","IBCEF75",39,0)
 Q
"RTN","IBCEF75",40,0)
 ; 
"RTN","IBCEF75",41,0)
BPIDS(IBIFN,IDS,SORT1,SORT2,COB,IBSTRIP,SEG) ; Get all the billing provider IDs and qualifiers from the claim and file 355.92
"RTN","IBCEF75",42,0)
 N DAT,IBFRMTYP,IBCARE,IBDIV,IBINS,MAIN,IBCCOB,USED,PLANTYPE,I,CNT,QUAL,ARF,M1,DEF,IDDIV,IBLIMIT,IEN,ID,IB2
"RTN","IBCEF75",43,0)
 ;
"RTN","IBCEF75",44,0)
 S DAT=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEF75",45,0)
 ;JWS;IB*2.0*592
"RTN","IBCEF75",46,0)
 S IBFRMTYP=$$FT^IBCEF(IBIFN),IBFRMTYP=$S(IBFRMTYP=2:2,IBFRMTYP=3:1,IBFRMTYP=7:7,1:0)
"RTN","IBCEF75",47,0)
 S IBCARE=$S($$ISRX^IBCEF1(IBIFN):3,1:0) ;if an Rx refill bill
"RTN","IBCEF75",48,0)
 S:IBCARE=0 IBCARE=$$INPAT^IBCEF(IBIFN) S:'IBCARE IBCARE=2 ;1-inp,2-out
"RTN","IBCEF75",49,0)
 S IBDIV=+$P(DAT,U,22)
"RTN","IBCEF75",50,0)
 S MAIN=$$MAIN^IBCEP2B()  ; get the IEN for main Division
"RTN","IBCEF75",51,0)
 S IBCCOB=$$COBN^IBCEF(IBIFN)  ; Current Insurance
"RTN","IBCEF75",52,0)
 S IBINS=$P($G(^DGCR(399,IBIFN,"I"_COB)),U)
"RTN","IBCEF75",53,0)
 Q:IBINS=""
"RTN","IBCEF75",54,0)
 ;
"RTN","IBCEF75",55,0)
 S IDS("BILLING PRV",IBIFN,SORT1,SORT2)=$E("PST",COB)
"RTN","IBCEF75",56,0)
 ;
"RTN","IBCEF75",57,0)
 ; Primary ID
"RTN","IBCEF75",58,0)
 S IDS("BILLING PRV",IBIFN,SORT1,SORT2,0)=$$STRIP^IBCEF76($$TAXID(),1,U,IBSTRIP)
"RTN","IBCEF75",59,0)
 S USED($P(IDS("BILLING PRV",IBIFN,SORT1,SORT2,0),U))=""
"RTN","IBCEF75",60,0)
 ;
"RTN","IBCEF75",61,0)
 ; Secondary #1 - This is the ID Emdeon uses for sorting
"RTN","IBCEF75",62,0)
 S IDS("BILLING PRV",IBIFN,SORT1,SORT2,1)=$$STRIP^IBCEF76($$BPSID1(IBDIV),1,U,IBSTRIP)
"RTN","IBCEF75",63,0)
 S USED($P(IDS("BILLING PRV",IBIFN,SORT1,SORT2,1),U))=""
"RTN","IBCEF75",64,0)
 ;
"RTN","IBCEF75",65,0)
 ; Check if this is a plan type which gets no secondary IDs
"RTN","IBCEF75",66,0)
 S M1=$G(^DGCR(399,IBIFN,"M1"))
"RTN","IBCEF75",67,0)
 ; the following check is the current value of the flag, not when the claim was created. 
"RTN","IBCEF75",68,0)
 S PLANTYPE=$$POLTYP^IBCEF3(IBIFN,COB)
"RTN","IBCEF75",69,0)
 I PLANTYPE]"",$D(^DIC(36,IBINS,13,"B",PLANTYPE)) Q 
"RTN","IBCEF75",70,0)
 ;
"RTN","IBCEF75",71,0)
 ; Secondary #2
"RTN","IBCEF75",72,0)
 ; If there is a ID  send with quailifer (stored or computed)
"RTN","IBCEF75",73,0)
 I $TR($P(M1,U,COB+1)," ")]"" D
"RTN","IBCEF75",74,0)
 . S QUAL=""
"RTN","IBCEF75",75,0)
 . S DAT=$P(M1,U,COB+9)
"RTN","IBCEF75",76,0)
 . I DAT S QUAL=$$STRIP^IBCEF76($P($G(^IBE(355.97,DAT,0)),U,3),1,,IBSTRIP)
"RTN","IBCEF75",77,0)
 . ; the null check is needed to be backwards compatible
"RTN","IBCEF75",78,0)
 . I QUAL=""!(QUAL="1J") S QUAL=$$STRIP^IBCEF76($$OLDWAY(IBIFN,COB),1,,IBSTRIP)
"RTN","IBCEF75",79,0)
 . S IB2=QUAL_U_$$STRIP^IBCEF76($P(M1,U,COB+1),1,,IBSTRIP)
"RTN","IBCEF75",80,0)
 ;
"RTN","IBCEF75",81,0)
 ;WCJ;IB*2.0*432;START
"RTN","IBCEF75",82,0)
 ;I $TR($P(M1,U,COB+1)," ")="" S IB2=$$STRIP^IBCEF76($$OLDWAY(IBIFN,COB),1,,IBSTRIP)_U_$$STRIP^IBCEF76($$GET1^DIQ(350.9,1,1.05),1,,IBSTRIP)
"RTN","IBCEF75",83,0)
 ;
"RTN","IBCEF75",84,0)
 I $G(IB2)]"",$P(IB2,U)]"",$P(IB2,U,2)]"" D  ;TAZ - Changed $G(IB2) to $G(IB2)]""
"RTN","IBCEF75",85,0)
 . S IDS("BILLING PRV",IBIFN,SORT1,SORT2,2)=IB2
"RTN","IBCEF75",86,0)
 . ;S IDS("BILLING PRV",IBIFN,SORT1,SORT2,2,"PTQ")=$$OLDWAY(IBIFN,COB)
"RTN","IBCEF75",87,0)
 . S USED($P(IB2,U))=""
"RTN","IBCEF75",88,0)
 ;WCJ;IB*2.0*432
"RTN","IBCEF75",89,0)
 ;
"RTN","IBCEF75",90,0)
 S CNT=$S('$D(IDS("BILLING PRV",IBIFN,SORT1,SORT2,2)):2,1:3)
"RTN","IBCEF75",91,0)
 S IBLIMIT=8
"RTN","IBCEF75",92,0)
 S IEN=0 F  S IEN=$O(^IBA(355.92,"B",IBINS,IEN)) Q:IEN=""  D  Q:CNT>IBLIMIT
"RTN","IBCEF75",93,0)
 . S DAT=$G(^IBA(355.92,IEN,0))
"RTN","IBCEF75",94,0)
 . Q:$P(DAT,U,8)'="A"   ; only allow additional IDs
"RTN","IBCEF75",95,0)
 . Q:$P(DAT,U,7)=""  ; No Provider ID
"RTN","IBCEF75",96,0)
 . Q:$P(DAT,U,6)=""  ; No ID Qualifier
"RTN","IBCEF75",97,0)
 . I IBFRMTYP=1 Q:$P(DAT,U,4)=2
"RTN","IBCEF75",98,0)
 . I IBFRMTYP=2 Q:$P(DAT,U,4)=1
"RTN","IBCEF75",99,0)
 . ;JWS;IB*2.0*592;Dental form
"RTN","IBCEF75",100,0)
 . I IBFRMTYP=7 Q
"RTN","IBCEF75",101,0)
 . ;
"RTN","IBCEF75",102,0)
 . ; Check if we already have one of these
"RTN","IBCEF75",103,0)
 . S QUAL=$$STRIP^IBCEF76($P(DAT,U,6),1,,IBSTRIP)
"RTN","IBCEF75",104,0)
 . S QUAL=$P($G(^IBE(355.97,QUAL,0)),U,3)
"RTN","IBCEF75",105,0)
 . Q:QUAL=""
"RTN","IBCEF75",106,0)
 . Q:$D(USED(QUAL))
"RTN","IBCEF75",107,0)
 . ;
"RTN","IBCEF75",108,0)
 . S IDS("BILLING PRV",IBIFN,SORT1,SORT2,CNT)=QUAL_U_$$STRIP^IBCEF76($P(DAT,U,7),1,,IBSTRIP)
"RTN","IBCEF75",109,0)
 . S CNT=CNT+1,USED(QUAL)=""
"RTN","IBCEF75",110,0)
 ;
"RTN","IBCEF75",111,0)
 Q
"RTN","IBCEF75",112,0)
 ;
"RTN","IBCEF75",113,0)
OLDWAY(IBIFN,COB) ; Figure out the qualifier the old way if it's not stored with the claim.
"RTN","IBCEF75",114,0)
 ; It's based on the plan type.  This is used for Billing Provider Secondary ID #2
"RTN","IBCEF75",115,0)
 N PLANTYPE
"RTN","IBCEF75",116,0)
 S PLANTYPE=$$POLTYP^IBCEF3(IBIFN,COB)
"RTN","IBCEF75",117,0)
 Q $$SOP^IBCEP2B(IBIFN,PLANTYPE)
"RTN","IBCEF75",118,0)
 ;
"RTN","IBCEF75",119,0)
BPSID1(DIV) ; Return the Billing Provider Secondary ID #1 and qualifier which Emdeon uses to sort IBIFNs
"RTN","IBCEF75",120,0)
 N DATA
"RTN","IBCEF75",121,0)
 S DATA=$P($$SITE^VASITE(DT,$S(DIV:DIV,1:+$$PRIM^VASITE(DT))),U,3)
"RTN","IBCEF75",122,0)
 S DATA=$E("0000",1,7-$L(DATA))_$E(DATA,4,7)
"RTN","IBCEF75",123,0)
 Q "G5"_U_DATA
"RTN","IBCEF75",124,0)
 ;
"RTN","IBCEF75",125,0)
TAXID() ; Return the Billing Provider Primary ID and qualifier which is the TAXID for the site and also the qualifier
"RTN","IBCEF75",126,0)
 N DATA
"RTN","IBCEF75",127,0)
 S DATA=$P($G(^IBE(350.9,1,1)),U,5)
"RTN","IBCEF75",128,0)
 S DATA=$$NOPUNCT^IBCEF(DATA,1)
"RTN","IBCEF75",129,0)
 Q 24_U_DATA
"RTN","IBCEF75",130,0)
 ;
"RTN","IBCEF75",131,0)
CLEANUP(IBXSAVE) ; Clean up 
"RTN","IBCEF75",132,0)
 K IBXSAVE("PROVINF")
"RTN","IBCEF75",133,0)
 K IBXSAVE("LAB/FAC")
"RTN","IBCEF75",134,0)
 K IBXSAVE("BILLING PRV")
"RTN","IBCEF75",135,0)
 K IBXSAVE("ID")
"RTN","IBCEF75",136,0)
 Q
"RTN","IBCEF76")
0^74^B51808638^B48153213
"RTN","IBCEF76",1,0)
IBCEF76 ;ALB/WCJ - Provider ID functions ;13 Feb 2006
"RTN","IBCEF76",2,0)
 ;;2.0;INTEGRATED BILLING;**320,349,400,432,516,592**;21-MAR-94;Build 58
"RTN","IBCEF76",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEF76",4,0)
 ;
"RTN","IBCEF76",5,0)
 G AWAY
"RTN","IBCEF76",6,0)
AWAY Q
"RTN","IBCEF76",7,0)
 ;
"RTN","IBCEF76",8,0)
LFIDS(IBIFN,IDS,IBSTRIP,SEG) ;
"RTN","IBCEF76",9,0)
 ;  Pass in the the internal claim number and return the array of IDS.
"RTN","IBCEF76",10,0)
 ;  IDS("C"urrent or "O"ther, Order of Insurance within subscript 1, order of ID within subscript 2)
"RTN","IBCEF76",11,0)
 ;  IDS("C",1)="P"
"RTN","IBCEF76",12,0)
 ;  IDS("C",1,0)=Qualifier^Primary ID
"RTN","IBCEF76",13,0)
 ;  IDS("C",1,1)=Qualifier^Sec ID #1
"RTN","IBCEF76",14,0)
 ;  IDS("C",1,2)=Qualifier^Sec ID #2
"RTN","IBCEF76",15,0)
 ;
"RTN","IBCEF76",16,0)
 N DAT,IBFRMTYP,IBCARE,IBDIV,IBINS,OUTFAC,MAIN,IBCCOB,TMPIDS,COB,IBSORT1,IBSORT2,IBLIMIT,IBLF
"RTN","IBCEF76",17,0)
 ;
"RTN","IBCEF76",18,0)
 S DAT=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEF76",19,0)
 ;JWS;IB*2.0*592;Dental claim form 7
"RTN","IBCEF76",20,0)
 S IBFRMTYP=$$FT^IBCEF(IBIFN),IBFRMTYP=$S(IBFRMTYP=2:2,IBFRMTYP=3:1,IBFRMTYP=7:7,1:0)
"RTN","IBCEF76",21,0)
 S IBCARE=$S($$ISRX^IBCEF1(IBIFN):3,1:0) ;if an Rx refill bill
"RTN","IBCEF76",22,0)
 S:IBCARE=0 IBCARE=$$INPAT^IBCEF(IBIFN) S:'IBCARE IBCARE=2 ;1-inp,2-out
"RTN","IBCEF76",23,0)
 S IBDIV=+$P(DAT,U,22)
"RTN","IBCEF76",24,0)
 S OUTFAC=$P($G(^DGCR(399,IBIFN,"U2")),U,10)
"RTN","IBCEF76",25,0)
 S MAIN=$$MAIN^IBCEP2B()  ; get the IEN for main Division
"RTN","IBCEF76",26,0)
 ;
"RTN","IBCEF76",27,0)
 S IBCCOB=$$COBN^IBCEF(IBIFN)
"RTN","IBCEF76",28,0)
 F COB=1:1:3 D
"RTN","IBCEF76",29,0)
 . S IBSORT1=$S(COB=IBCCOB:"C",1:"O")
"RTN","IBCEF76",30,0)
 . S IBSORT2=$S(IBSORT1="C":1,COB=1:1,COB=2&(IBCCOB=1):1,1:2)
"RTN","IBCEF76",31,0)
 . S IBLIMIT=$S(IBSORT1="C":5,1:3)  ; Limit secondary IDs
"RTN","IBCEF76",32,0)
 . S DAT=$G(^DGCR(399,IBIFN,"I"_COB))
"RTN","IBCEF76",33,0)
 . ;
"RTN","IBCEF76",34,0)
 . S IBINS=$P(DAT,U)  ; insurance PTR 36
"RTN","IBCEF76",35,0)
 . Q:IBINS=""
"RTN","IBCEF76",36,0)
 . ;
"RTN","IBCEF76",37,0)
 . ; IB*2*400 - esg - 9/24/08, 2/24/09 - if there is no service facility for this claim at this COB, then get out
"RTN","IBCEF76",38,0)
 . S IBLF=$$B^IBCEF79(IBIFN,COB)       ; billing provider/service facility function
"RTN","IBCEF76",39,0)
 . I $P(IBLF,U,3)="" Q                 ; no service facility data at this COB, don't build this "LAB/FAC" area
"RTN","IBCEF76",40,0)
 . ;
"RTN","IBCEF76",41,0)
 . I OUTFAC]"" D  Q
"RTN","IBCEF76",42,0)
 .. D NONVALF(IBIFN,OUTFAC_";IBA(355.93,",IBINS,IBFRMTYP,IBCARE,.IDS,IBSORT1,IBSORT2,COB,IBLIMIT,IBSTRIP,SEG)
"RTN","IBCEF76",43,0)
 . ;
"RTN","IBCEF76",44,0)
 . I OUTFAC="" D
"RTN","IBCEF76",45,0)
 .. ;
"RTN","IBCEF76",46,0)
 .. ; MRD;IB*2.0*516 - Due to fields being marked for deletion, the
"RTN","IBCEF76",47,0)
 .. ; function $$SENDSF^IBCEF79 will always return '1'.  Refer to
"RTN","IBCEF76",48,0)
 .. ; that function and INSFLGS^^IBCEF79 for more information.
"RTN","IBCEF76",49,0)
 .. ;
"RTN","IBCEF76",50,0)
 .. ; if ins co flag says to not send svc fac data and we're sending an EDI claim, then get out
"RTN","IBCEF76",51,0)
 .. ;I '$$SENDSF^IBCEF79(IBIFN,COB),$G(^TMP("IBTX",$J,IBIFN)) Q
"RTN","IBCEF76",52,0)
 .. ;
"RTN","IBCEF76",53,0)
 .. ;IB*2.0*432/TAZ Moved Taxid setup inside VALF look to send as secondary ID for Medicare claims.
"RTN","IBCEF76",54,0)
 .. ;S IDS("LAB/FAC",IBIFN,IBSORT1,IBSORT2,0)=$$STRIP($$TAXID^IBCEF75(),1,U,IBSTRIP)
"RTN","IBCEF76",55,0)
 .. D VALF(IBIFN,IBINS,IBFRMTYP,IBDIV,.IDS,IBSORT1,IBSORT2,COB,IBLIMIT,IBSTRIP,SEG)
"RTN","IBCEF76",56,0)
 Q
"RTN","IBCEF76",57,0)
 ;
"RTN","IBCEF76",58,0)
VALF(IBIFN,INS,FT,DIV,IDS,SORT1,SORT2,COB,IBLIMIT,IBSTRIP,SEG) ; Get VA Lab/Fac Secondary IDs
"RTN","IBCEF76",59,0)
 ; Pass in INS - IEN to file 36
"RTN","IBCEF76",60,0)
 ; FT - 1 = UB 2 = 1500, 7 = J430D
"RTN","IBCEF76",61,0)
 ; DIV - PTR to 40.8
"RTN","IBCEF76",62,0)
 ;
"RTN","IBCEF76",63,0)
 N Z,Z0,ID,QUAL,MAIN,IDTBL,CNT,Z,IBMCR
"RTN","IBCEF76",64,0)
 S MAIN=$$MAIN^IBCEP2B()  ; get the IEN for main Division
"RTN","IBCEF76",65,0)
 S Z=0 F  S Z=$O(^IBA(355.92,"B",INS,Z)) Q:'Z  D
"RTN","IBCEF76",66,0)
 . ;JWS;IB*2.0*592 - if a Dental Claim, skip, no secondary IDs for Dental
"RTN","IBCEF76",67,0)
 . I $$FT^IBCEF(IBIFN)=7 Q
"RTN","IBCEF76",68,0)
 . S Z0=$G(^IBA(355.92,Z,0))
"RTN","IBCEF76",69,0)
 . Q:$P(Z0,U,8)'="LF"   ; Screen out anything other than Lab or Facility
"RTN","IBCEF76",70,0)
 . I +$P(Z0,U,4) Q:$P(Z0,U,4)'=FT   ; Form type must match that passed in or be a 0 which allows both
"RTN","IBCEF76",71,0)
 . S ID=$$STRIP($P(Z0,U,7),1,,IBSTRIP)
"RTN","IBCEF76",72,0)
 . S QUAL=$$STRIP($P(Z0,U,6),1,,IBSTRIP)
"RTN","IBCEF76",73,0)
 . Q:QUAL=""   ; Needs a qualifier
"RTN","IBCEF76",74,0)
 . S QUAL=$P($G(^IBE(355.97,QUAL,0)),U,3)
"RTN","IBCEF76",75,0)
 . I FT=1,SORT1="O" Q:$$OP3^IBCEF73(FT)'[(U_QUAL_U)  ; Institutional
"RTN","IBCEF76",76,0)
 . I FT=2,SORT1="O" Q:$$OP7^IBCEF73(FT)'[(U_QUAL_U)  ; Professional
"RTN","IBCEF76",77,0)
 . I $P(Z0,U,5)=""!($P(Z0,U,5)=0)!($P(Z0,U,5)=MAIN) S IDTBL("DEF",QUAL)=ID  ; set up default for main division
"RTN","IBCEF76",78,0)
 . I $P(Z0,U,5)=DIV S IDTBL("DIV",QUAL)=ID  ; set up default for division
"RTN","IBCEF76",79,0)
 S CNT=0
"RTN","IBCEF76",80,0)
 S IDS("LAB/FAC",IBIFN,SORT1,SORT2)=$E("PST",COB)
"RTN","IBCEF76",81,0)
 ;IB*2.0*432/TAZ If Medicare send Tax ID as 1st Secondary ID ; only if it's not a printed form
"RTN","IBCEF76",82,0)
 S IBMCR=""
"RTN","IBCEF76",83,0)
 ;JWS;IB*2.0*592;Dental
"RTN","IBCEF76",84,0)
 I '(($G(IBXFORM)=2)!($G(IBXFORM)=3)!($G(IBXFORM)=7)) S IBMCR=$$MCRONBIL^IBEFUNC(IBIFN)
"RTN","IBCEF76",85,0)
 I IBMCR S CNT=CNT+1,IDS("LAB/FAC",IBIFN,SORT1,SORT2,CNT)="LU"_U_$$STRIP($P($$TAXID^IBCEF75(),U,2),1,U,IBSTRIP)
"RTN","IBCEF76",86,0)
 I $D(IDTBL("DIV")) D  Q
"RTN","IBCEF76",87,0)
 . S Z="" F  S Z=$O(IDTBL("DIV",Z)) Q:Z=""  D
"RTN","IBCEF76",88,0)
 .. ;IB*2.0*432/TAZ If Medicare, screen out Tax ID
"RTN","IBCEF76",89,0)
 .. I IBMCR,(Z=24) Q
"RTN","IBCEF76",90,0)
 .. S CNT=CNT+1,IDS("LAB/FAC",IBIFN,SORT1,SORT2,CNT)=Z_U_IDTBL("DIV",Z) Q:CNT=IBLIMIT
"RTN","IBCEF76",91,0)
 I $D(IDTBL("DEF")) D  Q
"RTN","IBCEF76",92,0)
 . S Z="" F  S Z=$O(IDTBL("DEF",Z)) Q:Z=""  D
"RTN","IBCEF76",93,0)
 .. ;IB*2.0*432/TAZ If Medicare, screen out Tax ID
"RTN","IBCEF76",94,0)
 .. I IBMCR,(Z=24) Q
"RTN","IBCEF76",95,0)
 .. S CNT=CNT+1,IDS("LAB/FAC",IBIFN,SORT1,SORT2,CNT)=Z_U_IDTBL("DEF",Z) Q:CNT=IBLIMIT
"RTN","IBCEF76",96,0)
 Q
"RTN","IBCEF76",97,0)
 ;
"RTN","IBCEF76",98,0)
NONVALF(IBIFN,PRV,INS,FT,PT,IDS,SORT1,SORT2,COB,IBLIMIT,IBSTRIP,SEG) ; Get Non VA Lab/Fac Secondary IDs
"RTN","IBCEF76",99,0)
 ; Pass in PRV - VPTR - PTR to 355.93 (in format of variabel pointer IEN;IBA(355.93,
"RTN","IBCEF76",100,0)
 ; Pass in INS - PTR to 36 of null (not provide by insurance company)
"RTN","IBCEF76",101,0)
 ; FT - 1 = UB 2 = 1500 7 = J430D
"RTN","IBCEF76",102,0)
 ; PT - Patient Type - 1 inpatient 2 outpatient
"RTN","IBCEF76",103,0)
 ; IDS array being returned
"RTN","IBCEF76",104,0)
 ; SORT1 - "C"urrent or "O"ther
"RTN","IBCEF76",105,0)
 ; SORT2 - 1 if current or (1 or 2 if other)
"RTN","IBCEF76",106,0)
 N Z,Z0,ID,QUAL,IDTBL,CNT,IBMCR
"RTN","IBCEF76",107,0)
 S Z=0 F  S Z=$O(^IBA(355.9,"B",PRV,Z)) Q:'Z  D
"RTN","IBCEF76",108,0)
 . ;JWS;IB*2.0*592 - if a Dental Claim, skip, no secondary IDs for Dental
"RTN","IBCEF76",109,0)
 . I $$FT^IBCEF(IBIFN)=7 Q
"RTN","IBCEF76",110,0)
 . S Z0=$G(^IBA(355.9,Z,0))
"RTN","IBCEF76",111,0)
 . I +$P(Z0,U,4) Q:$P(Z0,U,4)'=FT   ; Form type must match that passed in or be a 0 which allows both UB and 1500
"RTN","IBCEF76",112,0)
 . I +$P(Z0,U,5) Q:$P(Z0,U,5)'=PT   ; Patient type must match that passed in or be a 0 which allows both in patient and outpatient
"RTN","IBCEF76",113,0)
 . I INS]"",$P(Z0,U,2)]"",INS'=$P(Z0,U,2) Q
"RTN","IBCEF76",114,0)
 . S ID=$$STRIP($P(Z0,U,7),1,,IBSTRIP)
"RTN","IBCEF76",115,0)
 . Q:ID=""
"RTN","IBCEF76",116,0)
 . S QUAL=$$STRIP($P(Z0,U,6),1,,IBSTRIP)
"RTN","IBCEF76",117,0)
 . Q:QUAL=""   ; Needs a qualifier
"RTN","IBCEF76",118,0)
 . S QUAL=$P($G(^IBE(355.97,QUAL,0)),U,3)
"RTN","IBCEF76",119,0)
 . Q:QUAL=""
"RTN","IBCEF76",120,0)
 . I FT=1,SORT1="O" Q:$$OP3^IBCEF73(FT)'[(U_QUAL_U)  ; Institutional
"RTN","IBCEF76",121,0)
 . I FT=2,SORT1="O" Q:$$OP7^IBCEF73(FT)'[(U_QUAL_U)  ; Professional
"RTN","IBCEF76",122,0)
 . I $G(SEG)="SUB1" Q:$$SUB1^IBCEF73(FT)'[(U_QUAL_U)
"RTN","IBCEF76",123,0)
 . I $P(Z0,U,2)="" S IDTBL("OWN",QUAL)=ID  ; set up default of lab or facilities own ids
"RTN","IBCEF76",124,0)
 . I $P(Z0,U,2)=INS S IDTBL("INS",QUAL)=ID  ; set up default for division
"RTN","IBCEF76",125,0)
 ;
"RTN","IBCEF76",126,0)
 S CNT=0
"RTN","IBCEF76",127,0)
 S IDS("LAB/FAC",IBIFN,SORT1,SORT2)=$E("PST",COB)_U_PRV
"RTN","IBCEF76",128,0)
 S IDS("LAB/FAC",IBIFN,SORT1,SORT2,"CONTACT")=$G(^IBA(355.93,+PRV,1))
"RTN","IBCEF76",129,0)
 ; get primary
"RTN","IBCEF76",130,0)
 S Z0=$G(^IBA(355.93,+PRV,0))
"RTN","IBCEF76",131,0)
 ;IB*2.0*432/TAZ If Medicare send Tax ID as 1st Secondary ID
"RTN","IBCEF76",132,0)
 S IBMCR=""
"RTN","IBCEF76",133,0)
 ;JWS;IB*2.0*592;Dental
"RTN","IBCEF76",134,0)
 I '(($G(IBXFORM)=2)!($G(IBXFORM)=3)!($G(IBXFORM)=7)) S IBMCR=$$MCRONBIL^IBEFUNC(IBIFN)
"RTN","IBCEF76",135,0)
 ;I $P(Z0,U,9)]"",$P(Z0,U,13)]"",IBMCR S CNT=CNT+1,IDS("LAB/FAC",IBIFN,SORT1,SORT2,CNT)="LU"_U_$$STRIP($P($G(^IBE(355.97,$P(Z0,U,13),0)),U,3)_U_$P(Z0,U,9),1,U,IBSTRIP)
"RTN","IBCEF76",136,0)
 I $P(Z0,U,9)]"",$P(Z0,U,13)]"",IBMCR S CNT=CNT+1,IDS("LAB/FAC",IBIFN,SORT1,SORT2,CNT)="LU"_U_$$STRIP($P(Z0,U,9),1,U,IBSTRIP)
"RTN","IBCEF76",137,0)
 ; get secondarys in order
"RTN","IBCEF76",138,0)
 I $D(IDTBL("INS")) D
"RTN","IBCEF76",139,0)
 . N Z S Z="" F  S Z=$O(IDTBL("INS",Z)) Q:Z=""  D
"RTN","IBCEF76",140,0)
 .. ;IB*2.0*432/TAZ If Medicare, screen out Tax ID
"RTN","IBCEF76",141,0)
 .. I IBMCR,(Z=24) Q
"RTN","IBCEF76",142,0)
 .. S CNT=CNT+1,IDS("LAB/FAC",IBIFN,SORT1,SORT2,CNT)=Z_U_IDTBL("INS",Z) Q:CNT=IBLIMIT
"RTN","IBCEF76",143,0)
 I $D(IDTBL("OWN")),CNT'=IBLIMIT D
"RTN","IBCEF76",144,0)
 . N Z S Z="" F  S Z=$O(IDTBL("OWN",Z)) Q:Z=""  D
"RTN","IBCEF76",145,0)
 .. ;IB*2.0*432/TAZ If Medicare, screen out Tax ID
"RTN","IBCEF76",146,0)
 .. I IBMCR,(Z=24) Q
"RTN","IBCEF76",147,0)
 .. I '$D(IDTBL("INS",Z)) S CNT=CNT+1,IDS("LAB/FAC",IBIFN,SORT1,SORT2,CNT)=Z_U_IDTBL("OWN",Z) Q:CNT=IBLIMIT
"RTN","IBCEF76",148,0)
 Q
"RTN","IBCEF76",149,0)
 ;
"RTN","IBCEF76",150,0)
STRIP(X,SPACE,EXC,IBSTRIP) ;
"RTN","IBCEF76",151,0)
 ; Strip punctuation from data in X
"RTN","IBCEF76",152,0)
 ; SPACE = flag if 1 strip SPACES
"RTN","IBCEF76",153,0)
 ; EXC = list of punct not to strip
"RTN","IBCEF76",154,0)
 ; 
"RTN","IBCEF76",155,0)
 Q:'$G(IBSTRIP) X
"RTN","IBCEF76",156,0)
 Q $$NOPUNCT^IBCEF(X,$G(SPACE),$G(EXC))
"RTN","IBCEF76",157,0)
 ;
"RTN","IBCEF76",158,0)
OTH(IBIFN,IBXSAVE,IBXDATA,COND,SEG) ; Procedure used in piece 2 of some output
"RTN","IBCEF76",159,0)
 ; formatter segments for other insurance
"RTN","IBCEF76",160,0)
 ; COND = 0/1 value passed in that determines whether or not to call the
"RTN","IBCEF76",161,0)
 ;        provider ID function
"RTN","IBCEF76",162,0)
 ;  SEG = name of segment for use in calling ID^IBCEF2 (4 characters)
"RTN","IBCEF76",163,0)
 ;
"RTN","IBCEF76",164,0)
 N Z
"RTN","IBCEF76",165,0)
 ;*432/TAZ - Changed Clean up and Setup routines to IBCEFP*
"RTN","IBCEF76",166,0)
 ;D CLEANUP^IBCEF75(.IBXSAVE)
"RTN","IBCEF76",167,0)
 ;I COND D ALLIDS^IBCEF75(IBIFN,.IBXSAVE,1)
"RTN","IBCEF76",168,0)
 D CLEANUP^IBCEFP1(.IBXSAVE)
"RTN","IBCEF76",169,0)
 I COND D ALLIDS^IBCEFP(IBIFN,.IBXSAVE,1)
"RTN","IBCEF76",170,0)
 ;
"RTN","IBCEF76",171,0)
 ; Special Check:  if Other Insurance #2 has secondary ID's while Other
"RTN","IBCEF76",172,0)
 ; Insurance #1 does not, then move up #2 to be #1 here.  This is to
"RTN","IBCEF76",173,0)
 ; ensure the output formatter IBXDATA array is built properly.
"RTN","IBCEF76",174,0)
 ;
"RTN","IBCEF76",175,0)
 I $O(IBXSAVE("LAB/FAC",IBIFN,"O",2,0)),'$O(IBXSAVE("LAB/FAC",IBIFN,"O",1,0)) D
"RTN","IBCEF76",176,0)
 . K IBXSAVE("LAB/FAC",IBIFN,"O",1)
"RTN","IBCEF76",177,0)
 . M IBXSAVE("LAB/FAC",IBIFN,"O",1)=IBXSAVE("LAB/FAC",IBIFN,"O",2)
"RTN","IBCEF76",178,0)
 . K IBXSAVE("LAB/FAC",IBIFN,"O",2)
"RTN","IBCEF76",179,0)
 . Q
"RTN","IBCEF76",180,0)
 ;
"RTN","IBCEF76",181,0)
 K IBXDATA
"RTN","IBCEF76",182,0)
 S Z=0
"RTN","IBCEF76",183,0)
 F  S Z=$O(IBXSAVE("LAB/FAC",IBIFN,"O",Z)) Q:'Z  D
"RTN","IBCEF76",184,0)
 . I '$O(IBXSAVE("LAB/FAC",IBIFN,"O",Z,0)) Q
"RTN","IBCEF76",185,0)
 . S IBXDATA(Z)=$P($G(IBXSAVE("LAB/FAC",IBIFN,"O",Z)),U,1)
"RTN","IBCEF76",186,0)
 . I Z>1 D ID^IBCEF2(Z,SEG)
"RTN","IBCEF76",187,0)
 . Q
"RTN","IBCEF76",188,0)
OTHX ;
"RTN","IBCEF76",189,0)
 Q
"RTN","IBCEF76",190,0)
 ;
"RTN","IBCEF77")
0^85^B29162956^B27726430
"RTN","IBCEF77",1,0)
IBCEF77 ;WOIFO/SS - FORMATTER/EXTRACT BILL FUNCTIONS ;31-JUL-03
"RTN","IBCEF77",2,0)
 ;;2.0;INTEGRATED BILLING;**232,280,155,290,291,320,348,349,516,577,592**;21-MAR-94;Build 58
"RTN","IBCEF77",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEF77",4,0)
 ;
"RTN","IBCEF77",5,0)
SORT(IBPRNUM,IBPRTYP,IB399,IBSRC,IBDST,IBN,IBEXC,IBSEQ,IBLIMIT) ;
"RTN","IBCEF77",6,0)
 N IBXIEN,IBXDATA,IBNET,IBTRI,IB1,IB2,IBID,Z,IBZ,IBZ1,IBSVP
"RTN","IBCEF77",7,0)
 S (IB1,IB2,IBZ,IBZ1,IBTRI)=""
"RTN","IBCEF77",8,0)
 D F^IBCEF("N-ALL ATT/RENDERING PROV SSN","IBZ",,IB399)
"RTN","IBCEF77",9,0)
 S IBZ1=$$ALLPTYP^IBCEF3(IB399)
"RTN","IBCEF77",10,0)
 F Z=1:1:3 S $P(IBZ1,U,Z)=$S($P(IBZ1,U,Z)="CH":1,1:"") S:$P(IBZ1,U,Z) IBTRI=1
"RTN","IBCEF77",11,0)
 S IBNET=$$NETID^IBCEP() ; netwrk id type
"RTN","IBCEF77",12,0)
 I $G(IBN) D
"RTN","IBCEF77",13,0)
 . S Z=0 F  S Z=$O(IBDST(IBPRNUM,IBPRTYP,Z)) Q:'Z  S IBID(+$P(IBDST(IBPRNUM,IBPRTYP,Z),U,9))=""
"RTN","IBCEF77",14,0)
 F  S IB1=$O(IBSRC(IB1)) Q:IB1=""  D  Q:IBN=IBLIMIT
"RTN","IBCEF77",15,0)
 . N OK,IBSTLIC
"RTN","IBCEF77",16,0)
 . S IBSTLIC=""
"RTN","IBCEF77",17,0)
 . F  S IB2=$O(IBSRC(IB1,IB2)) Q:IB2=""  D  Q:IBN=IBLIMIT
"RTN","IBCEF77",18,0)
 . . S IBSVP=$P(IBSRC(IB1,IB2),U)
"RTN","IBCEF77",19,0)
 . . ; If ID overridden, output no others of this type
"RTN","IBCEF77",20,0)
 . . I $G(IBEXC),$P($G(IBSRC(IB1,IB2)),U,9)=IBEXC Q
"RTN","IBCEF77",21,0)
 . . ; Ck state of care/lic match if st lic#
"RTN","IBCEF77",22,0)
 . . I $P($G(IBSRC(IB1,IB2)),U,3)="0B" S OK=1 D  Q:'OK
"RTN","IBCEF77",23,0)
 . . . I +$$CAREST^IBCEP2A(IB399)'=$P(IBSRC(IB1,IB2),U,7) S IBSTLIC=1 Q
"RTN","IBCEF77",24,0)
 . . . I $G(IBSTLIC(0))'="" S OK=0 Q
"RTN","IBCEF77",25,0)
 . . . S IBSTLIC(0)=$G(IBSRC(IB1,IB2)),OK=0
"RTN","IBCEF77",26,0)
 . . ; Exclude SSN from sec ids unless required
"RTN","IBCEF77",27,0)
 . . I $P($G(IBSRC(IB1,IB2)),U,3)="SY" Q
"RTN","IBCEF77",28,0)
 . . ; Only 1 of each prov id type
"RTN","IBCEF77",29,0)
 . . Q:$D(IBID(+$P($G(IBSRC(IB1,IB2)),U,9)))
"RTN","IBCEF77",30,0)
 . . S IBN=IBN+1,IBID(+$P($G(IBSRC(IB1,IB2)),U,9))=""
"RTN","IBCEF77",31,0)
 . . S IBDST(IBPRNUM,IBPRTYP,IBN)=$G(IBSRC(IB1,IB2))
"RTN","IBCEF77",32,0)
 . I IBN'=IBLIMIT,'$G(IBSTLIC),$G(IBSTLIC(0))'="" S IBN=IBN+1,IBDST(IBPRNUM,IBPRTYP,IBN)=IBSTLIC(0)
"RTN","IBCEF77",33,0)
 ;JRA IB*2.0*592 Treat Dental Form 7 (J430D) same as CMS-1500 - added 'FT'
"RTN","IBCEF77",34,0)
 ;I $$FT^IBCEF(IB399)=2,$G(IBID(IBNET))="",IBTRI,$P(IBZ1,U,IBSEQ) D    ; WCJ 02/13/2006  ;JRA IB*2.0*592 ';'
"RTN","IBCEF77",35,0)
 N FT S FT=$$FT^IBCEF(IB399)  ;JRA IB*2.0*592
"RTN","IBCEF77",36,0)
 I (FT=2!(FT=7)),$G(IBID(IBNET))="",IBTRI,$P(IBZ1,U,IBSEQ) D  ;JRA IB*2.0*592
"RTN","IBCEF77",37,0)
 . Q:$P(IBZ,U,IBPRTYP)=""
"RTN","IBCEF77",38,0)
 . ; here, no network id & TRICARE ins co.
"RTN","IBCEF77",39,0)
 . N Z
"RTN","IBCEF77",40,0)
 . S Z=+$O(^DGCR(399,IB399,"PRV","B",IBPRTYP,0)),Z=$P($G(^DGCR(399,IB399,"PRV",Z,0)),U,2)
"RTN","IBCEF77",41,0)
 . S IBN=IBN+1,IBDST(IBPRNUM,IBPRTYP,IBN)=Z_U_+$$POLICY^IBCEF(IB399,1,IBSEQ)_U_$P($G(^IBE(355.97,IBNET,0)),U,3)_U_$P(IBZ,U,IBPRTYP)_U_"0^0^^^"_IBNET
"RTN","IBCEF77",42,0)
 Q
"RTN","IBCEF77",43,0)
 ;
"RTN","IBCEF77",44,0)
 ; esg - 8/25/06 - IB*2*348 - CFIDS function
"RTN","IBCEF77",45,0)
 ;
"RTN","IBCEF77",46,0)
CFIDS(IBIFN,PRVTYP,ALLOWIDS) ; Claim Form IDs for human providers
"RTN","IBCEF77",47,0)
 ; Function returns a 3 piece string:  [1] default secondary ID qual
"RTN","IBCEF77",48,0)
 ;                                     [2] default secondary ID
"RTN","IBCEF77",49,0)
 ;                                     [3] NPI
"RTN","IBCEF77",50,0)
 ; Input:   IBIFN - internal claim#
"RTN","IBCEF77",51,0)
 ;         PRVTYP - internal provider type ID number
"RTN","IBCEF77",52,0)
 ;                - 1:REFER;2:OPER;3:REND;4:ATT;5:SUPER;9:OTHER
"RTN","IBCEF77",53,0)
 ;                - if blank, then default Att/Rend based on form type
"RTN","IBCEF77",54,0)
 ;         ALLOWIDS - List of allowable Secondary IDS ^ delimited. 
"RTN","IBCEF77",55,0)
 ;                  ex "^1A^1B^1C^1H^G2^LU^N5^"
"RTN","IBCEF77",56,0)
 ;                  UB-04 only wants IDs provided by the payer, not the providers own IDS
"RTN","IBCEF77",57,0)
 ;                  Also, they want the qualifier to be G2 (Commercial)
"RTN","IBCEF77",58,0)
 ;                  if it is a payer provided ID
"RTN","IBCEF77",59,0)
 NEW ID,FT,IBZ,IBQ,IBSID,IBNPI,I,OK
"RTN","IBCEF77",60,0)
 S ID=""
"RTN","IBCEF77",61,0)
 I '$G(IBIFN) G CFIDSX
"RTN","IBCEF77",62,0)
 S FT=$$FT^IBCEF(IBIFN)
"RTN","IBCEF77",63,0)
 I '$G(PRVTYP) S PRVTYP=3 I FT=3 S PRVTYP=4
"RTN","IBCEF77",64,0)
 D ALLIDS^IBCEF75(IBIFN,.IBZ,1)
"RTN","IBCEF77",65,0)
 S OK=0 I $G(ALLOWIDS)="" S OK=1
"RTN","IBCEF77",66,0)
 F I=1:1 D  Q:OK
"RTN","IBCEF77",67,0)
 . S IBQ=$P($G(IBZ("PROVINF",IBIFN,"C",1,PRVTYP,I)),U,3)    ; qualifier
"RTN","IBCEF77",68,0)
 . S IBSID=$P($G(IBZ("PROVINF",IBIFN,"C",1,PRVTYP,I)),U,4)  ; ID#
"RTN","IBCEF77",69,0)
 . I IBQ="",IBSID="" S OK=1 Q
"RTN","IBCEF77",70,0)
 . Q:OK
"RTN","IBCEF77",71,0)
 . I $G(ALLOWIDS)[(U_IBQ_U) S OK=1,IBQ="G2" Q
"RTN","IBCEF77",72,0)
 . S (IBQ,IBSID)=""
"RTN","IBCEF77",73,0)
 S IBNPI=""
"RTN","IBCEF77",74,0)
 D F^IBCEF("N-PROVIDER NPI CODES","IBNPI",,IBIFN)
"RTN","IBCEF77",75,0)
 S IBNPI=$P(IBNPI,U,PRVTYP)                               ; NPI
"RTN","IBCEF77",76,0)
 ;
"RTN","IBCEF77",77,0)
 ; special check for the referring doc
"RTN","IBCEF77",78,0)
 I PRVTYP=1,$D(IBZ("PROVINF",IBIFN,"C",1,PRVTYP)),IBQ="",IBSID="" S IBQ="1G",IBSID="VAD000"
"RTN","IBCEF77",79,0)
 ;
"RTN","IBCEF77",80,0)
 ; If UB-04 and no IDs, use VA UPIN as deafult
"RTN","IBCEF77",81,0)
 I $D(IBZ("PROVINF",IBIFN,"C",1,PRVTYP)),FT=3,IBQ="",IBSID="" S IBQ="1G",IBSID="VAD000"
"RTN","IBCEF77",82,0)
 ;
"RTN","IBCEF77",83,0)
 ; determine if legacy ID's should be displayed
"RTN","IBCEF77",84,0)
 I '$$PRTLID(IBIFN,IBNPI) S (IBQ,IBSID)=""
"RTN","IBCEF77",85,0)
 ;
"RTN","IBCEF77",86,0)
 S ID=IBQ_U_IBSID_U_IBNPI
"RTN","IBCEF77",87,0)
CFIDSX ;
"RTN","IBCEF77",88,0)
 Q ID
"RTN","IBCEF77",89,0)
 ;
"RTN","IBCEF77",90,0)
DOL(AMT,LEN,DEC) ; format dollar amounts for printed claim forms
"RTN","IBCEF77",91,0)
 ; AMT = amount to be formatted
"RTN","IBCEF77",92,0)
 ; LEN = length of field - right justified to this length
"RTN","IBCEF77",93,0)
 ; DEC = flag to include the decimal point or not
"RTN","IBCEF77",94,0)
 ;       DEFAULT value is to not include the decimal point
"RTN","IBCEF77",95,0)
 ;       if DEC is not defined or 0, assume no decimal point
"RTN","IBCEF77",96,0)
 ;       so 15 will be returned as 1500, 6.77 will be returned as 677
"RTN","IBCEF77",97,0)
 ;       if DEC is 1, then the decimal point will be included
"RTN","IBCEF77",98,0)
 ;
"RTN","IBCEF77",99,0)
 S LEN=$G(LEN,10),DEC=$G(DEC,0)     ; defaults
"RTN","IBCEF77",100,0)
 S AMT=$FN(+$G(AMT),"",2)           ; format # with 2 decimals
"RTN","IBCEF77",101,0)
 I 'DEC S AMT=$TR(AMT,".")          ; strip or leave decimal
"RTN","IBCEF77",102,0)
 S AMT=$J(AMT,LEN)                  ; right justify
"RTN","IBCEF77",103,0)
 Q AMT
"RTN","IBCEF77",104,0)
 ;
"RTN","IBCEF77",105,0)
PRTLID(IBIFN,NPI) ; YMG; Print Legacy IDs on the CMS-1500 or UB-04 form
"RTN","IBCEF77",106,0)
 ; Function fetches form type associated with given claim number
"RTN","IBCEF77",107,0)
 ; (values: 2 - CMS-1500 form, 3 - UB-04 form), then looks at
"RTN","IBCEF77",108,0)
 ; "Print Legacy ID" site parameter for this particular form type.
"RTN","IBCEF77",109,0)
 ; 
"RTN","IBCEF77",110,0)
 ; Possible site parameter values are:
"RTN","IBCEF77",111,0)
 ;   "Y" - always print Legacy ID
"RTN","IBCEF77",112,0)
 ;   "N" - never print Legacy ID
"RTN","IBCEF77",113,0)
 ;   "C" - only print Legacy ID if NPI is not available.
"RTN","IBCEF77",114,0)
 ;   
"RTN","IBCEF77",115,0)
 ; This information is used to determine if Legacy ID should be printed
"RTN","IBCEF77",116,0)
 ; for claim number in question.
"RTN","IBCEF77",117,0)
 ; 
"RTN","IBCEF77",118,0)
 ; Note: Situation when "Print Legacy ID" site parameter is not set is treated
"RTN","IBCEF77",119,0)
 ;       as if this parameter was set to "Y" - always print Legacy ID.
"RTN","IBCEF77",120,0)
 ; 
"RTN","IBCEF77",121,0)
 ; Input:
"RTN","IBCEF77",122,0)
 ;             IBIFN - internal claim number
"RTN","IBCEF77",123,0)
 ;       NPI   - NPI number (or "" if no NPI is available)
"RTN","IBCEF77",124,0)
 ; 
"RTN","IBCEF77",125,0)
 ; Returns:
"RTN","IBCEF77",126,0)
 ;       0  - Legacy ID should not be printed
"RTN","IBCEF77",127,0)
 ;       1  - Legacy ID should be printed
"RTN","IBCEF77",128,0)
 ;
"RTN","IBCEF77",129,0)
 ;JRA IB*2.0*592 Treat Dental Form 7 (J430D) same as CMS-1500 - added 'FT'
"RTN","IBCEF77",130,0)
 ;Q $S(NPI="":"YC",1:"Y")[$P($G(^IBE(350.9,1,1)),U,$S($$FT^IBCEF(IBIFN)=2:32,1:33))  ;JRA IB*2.0*592 ';'
"RTN","IBCEF77",131,0)
 N FT S FT=$$FT^IBCEF(IBIFN)  ;JRA IB*2.0*592
"RTN","IBCEF77",132,0)
 ;JWS;IB*2.0*592 - NO legacy id's for dental
"RTN","IBCEF77",133,0)
 I FT=7 Q 0
"RTN","IBCEF77",134,0)
 Q $S(NPI="":"YC",1:"Y")[$P($G(^IBE(350.9,1,1)),U,$S(FT=2:32,1:33))  ;JRA IB*2.0*592
"RTN","IBCEF77",135,0)
 ;
"RTN","IBCEF77",136,0)
REMARK(IBIFN,IBXDATA,OFLG) ; procedure to return array of UB-04 remark text
"RTN","IBCEF77",137,0)
 ; for claim IBIFN.  Data pulled from field# 402 of file 399 and
"RTN","IBCEF77",138,0)
 ; formatted into an array IBXDATA(n) where each line is not greater
"RTN","IBCEF77",139,0)
 ; than 24 characters long.  This will fit into UB-04 FL-80.
"RTN","IBCEF77",140,0)
 ;
"RTN","IBCEF77",141,0)
 ; OFLG=1 only when called in the output formatter.  In this case, only
"RTN","IBCEF77",142,0)
 ; 4 lines in IBXDATA will be returned.
"RTN","IBCEF77",143,0)
 ;
"RTN","IBCEF77",144,0)
 NEW TEXT,LEN,IBZ,J,PCE,CHS,NEWCHS,IBK,J,TX,IBCP1
"RTN","IBCEF77",145,0)
 K IBXDATA
"RTN","IBCEF77",146,0)
 ;
"RTN","IBCEF77",147,0)
 ; MRD;IB*2.0*516 - Pull the Bill Remarks for the claim.  If this was
"RTN","IBCEF77",148,0)
 ; called from the Output Formatter, then look at lines of claim for
"RTN","IBCEF77",149,0)
 ; NDC's.  If any are found, they should be added to the end of TEXT.
"RTN","IBCEF77",150,0)
 ;
"RTN","IBCEF77",151,0)
 S TEXT=$P($G(^DGCR(399,+$G(IBIFN),"UF2")),U,3)
"RTN","IBCEF77",152,0)
 ; VAD/ Begin of IB*2*577 changes
"RTN","IBCEF77",153,0)
 ; NDC, Quantity, and Unit of Measure now printed in FL-43
"RTN","IBCEF77",154,0)
 ; instead of here in FL-80
"RTN","IBCEF77",155,0)
 ;I $G(OFLG) D
"RTN","IBCEF77",156,0)
 ;. S J=0
"RTN","IBCEF77",157,0)
 ;. F  S J=$O(^DGCR(399,+$G(IBIFN),"CP",J)) Q:'J  S IBCP1=$G(^(J,1)) I $P(IBCP1,U,7)'="" D
"RTN","IBCEF77",158,0)
 ;. . I TEXT'="" S TEXT=TEXT_" "
"RTN","IBCEF77",159,0)
 ;. . S TEXT=TEXT_"N4"_$TR($P(IBCP1,U,7),"-")_" UN"_$P(IBCP1,U,8)
"RTN","IBCEF77",160,0)
 ;. . Q
"RTN","IBCEF77",161,0)
 ;. Q
"RTN","IBCEF77",162,0)
 ; VAD/ End of IB*2*577 changes
"RTN","IBCEF77",163,0)
 ;
"RTN","IBCEF77",164,0)
 ; If there's nothing in TEXT, then Quit.
"RTN","IBCEF77",165,0)
 ;
"RTN","IBCEF77",166,0)
 I TEXT="" Q
"RTN","IBCEF77",167,0)
 ;
"RTN","IBCEF77",168,0)
 ; need to break up large words for word wrapping purposes to get
"RTN","IBCEF77",169,0)
 ; as many characters as possible in the box.
"RTN","IBCEF77",170,0)
 S LEN=17
"RTN","IBCEF77",171,0)
 F PCE=1:1 Q:PCE>$L(TEXT," ")  S CHS=$P(TEXT," ",PCE) I $L(CHS)>LEN D
"RTN","IBCEF77",172,0)
 . S NEWCHS=$E(CHS,1,LEN)_" "_$E(CHS,LEN+1,999)
"RTN","IBCEF77",173,0)
 . S $P(TEXT," ",PCE)=NEWCHS
"RTN","IBCEF77",174,0)
 . Q
"RTN","IBCEF77",175,0)
 ;
"RTN","IBCEF77",176,0)
 ; When calling FSTRNG^IBJU1 which calls ^DIWP, FileMan builds the
"RTN","IBCEF77",177,0)
 ; array with strings of max length=1 less than what you tell it.
"RTN","IBCEF77",178,0)
 ;
"RTN","IBCEF77",179,0)
 S LEN=20                             ; line 1 is 19 chars
"RTN","IBCEF77",180,0)
 D FSTRNG^IBJU1(TEXT,LEN,.IBZ)        ; build IBZ array
"RTN","IBCEF77",181,0)
 S IBK=$$TRIM^XLFSTR($G(IBZ(1)))      ; save off the first line
"RTN","IBCEF77",182,0)
 S TEXT=$P(TEXT,IBK,2,99)             ; restore the rest of the text
"RTN","IBCEF77",183,0)
 S TEXT=$$TRIM^XLFSTR(TEXT)           ; trim spaces
"RTN","IBCEF77",184,0)
 ;
"RTN","IBCEF77",185,0)
 S LEN=25                             ; the rest is 24 chars
"RTN","IBCEF77",186,0)
 D FSTRNG^IBJU1(TEXT,LEN,.IBZ)        ; build IBZ array
"RTN","IBCEF77",187,0)
 S IBXDATA(1)="     "_IBK             ; line 1
"RTN","IBCEF77",188,0)
 S J=0 F  S J=$O(IBZ(J)) Q:'J  D      ; lines 2-n
"RTN","IBCEF77",189,0)
 . I J>3,$G(OFLG) Q                   ; only 4 lines for output formatter
"RTN","IBCEF77",190,0)
 . S TX=$$TRIM^XLFSTR($G(IBZ(J)))
"RTN","IBCEF77",191,0)
 . I TX'="" S IBXDATA(J+1)=TX
"RTN","IBCEF77",192,0)
 . Q
"RTN","IBCEF77",193,0)
 Q
"RTN","IBCEF77",194,0)
 ;
"RTN","IBCEF77",195,0)
B43(NDCDATA) ; This is passed a string and properly formats if there is NDC drug information.
"RTN","IBCEF77",196,0)
 ; The drug information is in pieces 21-23 of that string.
"RTN","IBCEF77",197,0)
 ; It was part of the output formatter entry 364.7[1406] used for FL43 but that got too big for a FileMan Mumps data element
"RTN","IBCEF77",198,0)
 ; It returns a string with N4 - the NDC Drug qualifier
"RTN","IBCEF77",199,0)
 ;                        NDC Code without the hyphens
"RTN","IBCEF77",200,0)
 ;                        a space
"RTN","IBCEF77",201,0)
 ;                        Units qualifier
"RTN","IBCEF77",202,0)
 ;                        Units
"RTN","IBCEF77",203,0)
 ; Ex "N412345678901 ML1.5"
"RTN","IBCEF77",204,0)
 I NDCDATA="" Q ""
"RTN","IBCEF77",205,0)
 S NDCDATA=$P(NDCDATA,U,21,23)
"RTN","IBCEF77",206,0)
 Q:$P(NDCDATA,U)="" ""
"RTN","IBCEF77",207,0)
 Q "N4"_$TR($P(NDCDATA,U),"-")_" "_$TR($P(NDCDATA,U,2,3),U)
"RTN","IBCEF77",208,0)
 ;
"RTN","IBCEF78")
0^73^B7178151^B7140538
"RTN","IBCEF78",1,0)
IBCEF78 ;ALB/WCJ - Provider ID functions ;13 May 2007
"RTN","IBCEF78",2,0)
 ;;2.0;INTEGRATED BILLING;**371,516,592**;21-MAR-94;Build 58
"RTN","IBCEF78",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEF78",4,0)
 ;;
"RTN","IBCEF78",5,0)
 G AWAY
"RTN","IBCEF78",6,0)
AWAY Q
"RTN","IBCEF78",7,0)
 ;
"RTN","IBCEF78",8,0)
PAYERIDS(IBXIEN,IBRET) ; This function returns all the PAYER IDS for the current and other insurance(s)
"RTN","IBCEF78",9,0)
 ; 
"RTN","IBCEF78",10,0)
 D PRIPAYID(IBXIEN,.IBRET)
"RTN","IBCEF78",11,0)
 D SECPAYID(IBXIEN,.IBRET)
"RTN","IBCEF78",12,0)
 Q
"RTN","IBCEF78",13,0)
 ;
"RTN","IBCEF78",14,0)
PRIPAYID(IBXIEN,IBXRET) ; Primary Payer IDs
"RTN","IBCEF78",15,0)
 ; Incoming:
"RTN","IBCEF78",16,0)
 ; IBXIEN = IEN for File # 399
"RTN","IBCEF78",17,0)
 ; IBXRET = Return Array for Qualifiers and IDs
"RTN","IBCEF78",18,0)
 ;
"RTN","IBCEF78",19,0)
 ; Outgoing
"RTN","IBCEF78",20,0)
 ; IBXRET("CI_PID",1)=QUAL^ID
"RTN","IBCEF78",21,0)
 ; IBXRET("OI_PID",#)=QUAL^ID
"RTN","IBCEF78",22,0)
 ; 
"RTN","IBCEF78",23,0)
 N RET,I
"RTN","IBCEF78",24,0)
 S RET=$$PAYERID^IBCEF2(IBXIEN)
"RTN","IBCEF78",25,0)
 I RET]"" S IBXRET("CI_PID",1)="PI"_U_RET
"RTN","IBCEF78",26,0)
 ;
"RTN","IBCEF78",27,0)
 ; MRD;IB*2.0*516 - Added HPID here (CI) and below (OI).
"RTN","IBCEF78",28,0)
 S RET=$$HPID(IBXIEN)
"RTN","IBCEF78",29,0)
 I RET]"" S IBXRET("CI_HPID",1)="XV"_U_RET
"RTN","IBCEF78",30,0)
 ;
"RTN","IBCEF78",31,0)
 S RET=""
"RTN","IBCEF78",32,0)
 D OTHINSID^IBCEF72(IBXIEN,.RET)
"RTN","IBCEF78",33,0)
 F I=1,2 D
"RTN","IBCEF78",34,0)
 . I $P($G(RET(I)),U)]"" S IBXRET("OI_PID",I)="PI"_U_$P(RET(I),U)
"RTN","IBCEF78",35,0)
 . I $P($G(RET(I)),U,2)]"" S IBXRET("OI_HPID",I)="XV"_U_$P(RET(I),U,2)
"RTN","IBCEF78",36,0)
 . Q
"RTN","IBCEF78",37,0)
 Q
"RTN","IBCEF78",38,0)
 ;
"RTN","IBCEF78",39,0)
SECPAYID(IBXIEN,IBXRET) ; This returns all of the secondary payer IDs from file #36 
"RTN","IBCEF78",40,0)
 ; for the insurance companies on a given claim
"RTN","IBCEF78",41,0)
 ; 
"RTN","IBCEF78",42,0)
 ; Incoming:
"RTN","IBCEF78",43,0)
 ; IBXIEN = IEN for File # 399
"RTN","IBCEF78",44,0)
 ; IBXRET = Return Array for Qualifiers and IDs
"RTN","IBCEF78",45,0)
 ;
"RTN","IBCEF78",46,0)
 ; Outgoing
"RTN","IBCEF78",47,0)
 ; IBXRET("CI_PSIDS",1)=QUAL^ID^QUAL^ID
"RTN","IBCEF78",48,0)
 ; IBXRET("OI_PSIDS",#)=QUAL^ID^QUAL^ID
"RTN","IBCEF78",49,0)
 ;
"RTN","IBCEF78",50,0)
 N Z,C,IBZ,Z0,FT
"RTN","IBCEF78",51,0)
 F Z=1:1:3 S IBZ(Z)=$$POLICY^IBCEF(IBXIEN,1,Z)
"RTN","IBCEF78",52,0)
 S Z0=0,C=$$COBN^IBCEF(IBXIEN),FT=$$FT^IBCEF(IBXIEN)
"RTN","IBCEF78",53,0)
 F Z=1:1:3 S:C'=Z Z0=Z0+1 S IBXRET($S(C=Z:"CI_PSIDS",1:"OI_PSIDS"),$S(C=Z:1,1:Z0))=$$SPIDS(+IBZ(Z),FT)
"RTN","IBCEF78",54,0)
 Q
"RTN","IBCEF78",55,0)
 ;
"RTN","IBCEF78",56,0)
SPIDS(INS,FT) ;
"RTN","IBCEF78",57,0)
 ; FT = FORM TYPE (2 PROFESSIONAL 3 INSTITUTIONAL)
"RTN","IBCEF78",58,0)
 ; INS = INSURANCE COMPANY (FILE #36) IEN
"RTN","IBCEF78",59,0)
 ; Returns String (^ delimited)
"RTN","IBCEF78",60,0)
 ; [1] = QUAL 1
"RTN","IBCEF78",61,0)
 ; [2] = PAYER ID 1
"RTN","IBCEF78",62,0)
 ; [3] = QUAL 2
"RTN","IBCEF78",63,0)
 ; [4] = PAYER ID 2
"RTN","IBCEF78",64,0)
 Q:'+INS ""
"RTN","IBCEF78",65,0)
 ;
"RTN","IBCEF78",66,0)
 N DATA,PCE
"RTN","IBCEF78",67,0)
 ;JWS;IB*2.0*592;Dental form 7 same as form 2 - no secondaries for Dental
"RTN","IBCEF78",68,0)
 S DATA=$S(FT=3:$P($G(^DIC(36,+INS,6)),U,1,4),FT=2:$P($G(^DIC(36,+INS,6)),U,5,8),1:"")
"RTN","IBCEF78",69,0)
 ;
"RTN","IBCEF78",70,0)
 ; Check for dangling IDs/Qualifiers
"RTN","IBCEF78",71,0)
 F PCE=1,3 D
"RTN","IBCEF78",72,0)
 . I $P(DATA,U,PCE)'="",$P(DATA,U,PCE+1)'="" Q
"RTN","IBCEF78",73,0)
 . S ($P(DATA,U,PCE),$P(DATA,U,PCE+1))=""
"RTN","IBCEF78",74,0)
 ;
"RTN","IBCEF78",75,0)
 ; fill in the gap if there is one
"RTN","IBCEF78",76,0)
 I $P(DATA,U,1)="",$P(DATA,U,3)'="" D
"RTN","IBCEF78",77,0)
 . S $P(DATA,U,1)=$P(DATA,U,3)
"RTN","IBCEF78",78,0)
 . S $P(DATA,U,2)=$P(DATA,U,4)
"RTN","IBCEF78",79,0)
 . S ($P(DATA,U,3),$P(DATA,U,4))=""
"RTN","IBCEF78",80,0)
 ;
"RTN","IBCEF78",81,0)
 Q DATA
"RTN","IBCEF78",82,0)
 ;
"RTN","IBCEF78",83,0)
HPID(IBXIEN) ; Determine HPID for current payer.
"RTN","IBCEF78",84,0)
 ; MRD;IB*2.0*516 - Added HPID.
"RTN","IBCEF78",85,0)
 ;
"RTN","IBCEF78",86,0)
 N IBHPID,IBSEQ
"RTN","IBCEF78",87,0)
 S IBSEQ=$$COBN^IBCEF(IBXIEN)  ; IBSEQ should be 1, 2 or 3.
"RTN","IBCEF78",88,0)
 I IBSEQ S IBHPID=$P($G(^DGCR(399,IBXIEN,"M1")),U,12+IBSEQ)  ; Pull piece 13, 14 or 15.
"RTN","IBCEF78",89,0)
 Q IBHPID
"RTN","IBCEF78",90,0)
 ;
"RTN","IBCEF78",91,0)
CLEANUP(IBRET) ;
"RTN","IBCEF78",92,0)
 K IBRET("CI_PID"),IBRET("OI_PID"),IBRET("CI_PSIDS"),IBRET("OI_PSIDS"),IBRET("CI_HPID"),IBRET("OI_HPID")
"RTN","IBCEF78",93,0)
 Q
"RTN","IBCEF78",94,0)
 ;
"RTN","IBCEF80")
0^115^B54228173^B53774560
"RTN","IBCEF80",1,0)
IBCEF80 ;ALB/TAZ - Provider ID functions ;13 Feb 2006
"RTN","IBCEF80",2,0)
 ;;2.0;INTEGRATED BILLING;**432,592**;21-MAR-94;Build 58
"RTN","IBCEF80",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEF80",4,0)
 ;
"RTN","IBCEF80",5,0)
 G AWAY
"RTN","IBCEF80",6,0)
AWAY Q
"RTN","IBCEF80",7,0)
 ;
"RTN","IBCEF80",8,0)
LPRV(IBIFN,IBXSAVE,IBSTRIP,SEG) ; Return array of Line Providers
"RTN","IBCEF80",9,0)
 N IBCARE,IBCURR,IBFRMTYP,IBINSCO,IBLIMIT,IBPRTYP,IBXIEN,IBXDATA,IBZ,Z,SLC,CPLNK
"RTN","IBCEF80",10,0)
 ;
"RTN","IBCEF80",11,0)
 I '$D(IBSTRIP) S IBSTRIP=0
"RTN","IBCEF80",12,0)
 I '$D(SEG) S SEG=""
"RTN","IBCEF80",13,0)
 S IBXIEN=IBIFN
"RTN","IBCEF80",14,0)
 ;JWS;IB*2.0*592;add J430D form #7
"RTN","IBCEF80",15,0)
 S IBFRMTYP=$$FT^IBCEF(IBXIEN),IBFRMTYP=$S(IBFRMTYP=2:2,IBFRMTYP=7:7,IBFRMTYP=3:1,1:0)
"RTN","IBCEF80",16,0)
 I 'IBFRMTYP G LPRVX
"RTN","IBCEF80",17,0)
 I IBFRMTYP=2 D OUTPT^IBCEF11(IBXIEN,0)
"RTN","IBCEF80",18,0)
 I IBFRMTYP=1 D HOS^IBCEF22(IBXIEN)
"RTN","IBCEF80",19,0)
 S IBCURR=$$COB^IBCEF(IBXIEN) ;current bill payer sequence
"RTN","IBCEF80",20,0)
 S SLC=0
"RTN","IBCEF80",21,0)
 F  S SLC=$O(IBXDATA(SLC)) Q:'SLC   S IBXSAVE("SLC")=+SLC D
"RTN","IBCEF80",22,0)
 . S CPLNK=$G(IBXDATA(SLC,"CPLNK")) I 'CPLNK Q
"RTN","IBCEF80",23,0)
 . K IBZ
"RTN","IBCEF80",24,0)
 . D PROVIDER(IBXIEN,CPLNK,"C",.IBZ,IBCURR),PROVIDER(IBXIEN,CPLNK,"O",.IBZ,IBCURR)
"RTN","IBCEF80",25,0)
 . M IBXSAVE("L-PROV",IBXIEN,SLC)=IBZ
"RTN","IBCEF80",26,0)
 D EN^IBCEF81(.IBXSAVE)
"RTN","IBCEF80",27,0)
 S SLC=0 F  S SLC=$O(IBXSAVE("L-PROV",IBXIEN,SLC)) Q:'SLC  D
"RTN","IBCEF80",28,0)
 . F Z="C","O" I '$O(IBXSAVE("L-PROV",IBXIEN,SLC,Z,"")) K IBXSAVE("L-PROV",IBXIEN,SLC,Z)
"RTN","IBCEF80",29,0)
 ;
"RTN","IBCEF80",30,0)
LPRVX ;Exit Line Provider Setup
"RTN","IBCEF80",31,0)
 Q
"RTN","IBCEF80",32,0)
 ;
"RTN","IBCEF80",33,0)
PROVIDER(IB399,IBCPIEN,IBPROV,IBRES,IBCURR) ;
"RTN","IBCEF80",34,0)
 N IBZ,IBRESARR
"RTN","IBCEF80",35,0)
 S IBRESARR=""
"RTN","IBCEF80",36,0)
 Q:IBPROV="A"  ;PATIENT's bill
"RTN","IBCEF80",37,0)
 I IBPROV="C" D
"RTN","IBCEF80",38,0)
 . D:$$ISINSUR^IBCEF71(IBCURR,IB399) PROVINF(IB399,$S(IBCURR="T":3,IBCURR="S":2,IBCURR="P":1,1:1),.IBRESARR,1,IBPROV,IBCPIEN)
"RTN","IBCEF80",39,0)
 I IBPROV="O" D
"RTN","IBCEF80",40,0)
 . I IBCURR="P" D:$$ISINSUR^IBCEF71("S",IB399) PROVINF(IB399,2,.IBRESARR,1,IBPROV,IBCPIEN) D:$$ISINSUR^IBCEF71("T",IB399) PROVINF(IB399,3,.IBRESARR,2,IBPROV,IBCPIEN)
"RTN","IBCEF80",41,0)
 . I IBCURR="S" D:$$ISINSUR^IBCEF71("P",IB399) PROVINF(IB399,1,.IBRESARR,1,IBPROV,IBCPIEN) D:$$ISINSUR^IBCEF71("T",IB399) PROVINF(IB399,3,.IBRESARR,2,IBPROV,IBCPIEN)
"RTN","IBCEF80",42,0)
 . I IBCURR="T" D:$$ISINSUR^IBCEF71("P",IB399) PROVINF(IB399,1,.IBRESARR,1,IBPROV,IBCPIEN) D:$$ISINSUR^IBCEF71("S",IB399) PROVINF(IB399,2,.IBRESARR,2,IBPROV,IBCPIEN)
"RTN","IBCEF80",43,0)
 M IBRES(IBPROV)=IBRESARR
"RTN","IBCEF80",44,0)
 Q
"RTN","IBCEF80",45,0)
 ;
"RTN","IBCEF80",46,0)
  ;-- PROVINF --
"RTN","IBCEF80",47,0)
 ;Create array with prov info
"RTN","IBCEF80",48,0)
 ;Input:
"RTN","IBCEF80",49,0)
 ; IB399 - ien #399
"RTN","IBCEF80",50,0)
 ; IBPRNUM - 1=prim ins, 2= sec, 3 -tert
"RTN","IBCEF80",51,0)
 ; IBRES - for results (IBRESARR passed by reference)
"RTN","IBCEF80",52,0)
 ; IBSORT - to sort OTHER INSURANCE data 
"RTN","IBCEF80",53,0)
 ;  if PROVINF is called for "C" mode of PROVIDER subroutine then 
"RTN","IBCEF80",54,0)
 ;    IBSORT can be any (say 1)
"RTN","IBCEF80",55,0)
 ;  if PROVINF is called for "O" mode then can be more than set of data
"RTN","IBCEF80",56,0)
 ;    - need to sort array to use it (like IBXDATA(1) and IBXDATA(2))
"RTN","IBCEF80",57,0)
 ;    for mode "O" it should be 1 or 2 (see PROVIDER section)
"RTN","IBCEF80",58,0)
 ;IBINSTP -  "C" -current ins, "O"-other
"RTN","IBCEF80",59,0)
 ;IBCPPTR - Pointer to the Procedure Global
"RTN","IBCEF80",60,0)
 ;Output:
"RTN","IBCEF80",61,0)
 ; IBRES(PRNUM,PRTYPE,SEQ#)=PROV^INSUR^IDTYPE^ID^FORMTYP^CARETYP
"RTN","IBCEF80",62,0)
 ; where:(see PROVIDER)
"RTN","IBCEF80",63,0)
PROVINF(IB399,IBPRNUM,IBRES,IBSORT,IBINSTP,IBCPPTR) ;
"RTN","IBCEF80",64,0)
 I $G(IB399)="" Q
"RTN","IBCEF80",65,0)
 I +$G(IBSORT)=0 S IBSORT=$G(IBPRNUM)
"RTN","IBCEF80",66,0)
 N IBPRTYP,IBINSCO,IBPRVPTR,IBCARE,IB35591,IBN,IBCURR,IBEXC,IBALLSSN,IBSSNIEN,IBLIMIT,IBSSN,I
"RTN","IBCEF80",67,0)
 S IBN=0
"RTN","IBCEF80",68,0)
 S IBINSCO=+$P($G(^DGCR(399,IB399,"M")),"^",IBPRNUM) ;Current insurance company ien
"RTN","IBCEF80",69,0)
 S IBCARE=$S($$ISRX^IBCEF1(IB399):3,1:0) ;if an Rx refill bill
"RTN","IBCEF80",70,0)
 S:IBCARE=0 IBCARE=$$INPAT^IBCEF(IB399,1) S:'IBCARE IBCARE=2 ;1-inp,2-out
"RTN","IBCEF80",71,0)
 S IBLIMIT=$S($G(IBINSTP)="C":5,1:3)  ; Limits on secondary IDs
"RTN","IBCEF80",72,0)
 S IBCURR=$$COB^IBCEF(IB399) ; current insurance company position (P,S,T)
"RTN","IBCEF80",73,0)
 F IBPRTYP=1:1:9 D
"RTN","IBCEF80",74,0)
 . N Z,IB355OV,IBNPI,IBSSN,IBTAXID
"RTN","IBCEF80",75,0)
 . S IBPRVPTR=$$PROVPTR(IB399,IBPRTYP,IBCPPTR) Q:'+IBPRVPTR
"RTN","IBCEF80",76,0)
 . S $P(IBSSN,U,IBPRTYP)=$$GETSSN^IBCEF72(IBPRVPTR) I '$P(IBSSN,U,IBPRTYP)="" S $P(IBSSN,U,IBPRTYP)=$$TAX3559^IBCEF73(IBPRVPTR)
"RTN","IBCEF80",77,0)
 . N IBRETARR S IBRETARR=0
"RTN","IBCEF80",78,0)
 . ;params: ins co ien, form type, inpt/outpt/rx, prov ptr, return array, provider type, Current/Other
"RTN","IBCEF80",79,0)
 . D PRACT^IBCEF71(IBINSCO,IBFRMTYP,IBCARE,IBPRVPTR,.IBRETARR,IBPRTYP,$G(IBINSTP))
"RTN","IBCEF80",80,0)
 . S IB355OV="",IBEXC=""
"RTN","IBCEF80",81,0)
 . S Z=$O(^DGCR(399,IB399,"CP",IBCPPTR,"LNPRV","B",IBPRTYP,0))
"RTN","IBCEF80",82,0)
 . I Z S Z=$G(^DGCR(399,IB399,"CP",IBCPPTR,"LNPRV",Z,0)) D
"RTN","IBCEF80",83,0)
 .. I $P(Z,U,IBPRNUM+4)'="",$P(Z,U,IBPRNUM+11)'="" S IB355OV=$P(Z,U,IBPRNUM+4)_U_$P(Z,U,IBPRNUM+11)
"RTN","IBCEF80",84,0)
 . S IBN=0,IB35591=$$CH35591^IBCEF72(IBINSCO,IBFRMTYP,IBCARE)
"RTN","IBCEF80",85,0)
 . I $G(IBINSTP)="C",$G(IBPRNUM)=1,"34"[$G(IBPRTYP),"P"[$G(IBCURR),$G(IBFRMTYP)=2,$$MCRONBIL^IBEFUNC(IB399) S IB355OV=$$MCR24K^IBCEU3(IB399)_"^12"
"RTN","IBCEF80",86,0)
 . I $G(IBINSTP)="O","34"[$G(IBPRTYP),"ST"[$G(IBCURR),$G(IBFRMTYP)=2,$$MCRONBIL^IBEFUNC(IB399) S IB355OV=$$MCR24K^IBCEU3(IB399)_"^12" ;Calculate MEDICARE (WNR) specific provider qualifier and ID for CMS-1500 secondary claims
"RTN","IBCEF80",87,0)
 . I $P(IB355OV,U,2) D
"RTN","IBCEF80",88,0)
 .. ;params: form type, provider type, current/other
"RTN","IBCEF80",89,0)
 .. I $$CHCKSEC^IBCEF73(IBFRMTYP,IBPRTYP,$G(IBINSTP),$P($G(^IBE(355.97,+$P(IB355OV,U,2),0)),U,3)) D
"RTN","IBCEF80",90,0)
 ... S IBEXC=$P(IB355OV,U,2),IBN=IBN+1,IBRES(IBSORT,IBPRTYP,IBN)="OVERRIDE^"_IBINSCO_U_$P($G(^IBE(355.97,+IBEXC,0)),U,3)_U_$P(IB355OV,U)_"^^^^^"_+IBEXC
"RTN","IBCEF80",91,0)
 . I IB35591'="",IBEXC'=$P(IB35591,U,3) S:$$CHCKSEC^IBCEF73(IBFRMTYP,IBPRTYP,$G(IBINSTP),$P(IB35591,"^")) IBN=IBN+1,IBRES(IBSORT,IBPRTYP,IBN)="DEFAULT^"_IBINSCO_"^"_IB35591_"^^",$P(IBRES(IBSORT,IBPRTYP,IBN),U,9)=$P(IB35591,U,3)
"RTN","IBCEF80",92,0)
 . D SORT(IBSORT,IBPRTYP,IB399,.IBRETARR,.IBRES,IBN,IBEXC,IBPRNUM,IBLIMIT,IBSSN,IBCPPTR)
"RTN","IBCEF80",93,0)
 . S IBRES(IBSORT,IBPRTYP)=IBPRVPTR
"RTN","IBCEF80",94,0)
 . S IBNPI=$$GETNPI^IBCEF73A(IBPRVPTR)
"RTN","IBCEF80",95,0)
 . S IBRES(IBSORT,IBPRTYP,0)="PRIMARY"_U_U_$$STRIP^IBCEF76($S(IBNPI]"":"XX",1:"")_U_IBNPI,1,U,IBSTRIP)
"RTN","IBCEF80",96,0)
 . F I=1:1 Q:'$D(IBRES(IBSORT,IBPRTYP,I))  D
"RTN","IBCEF80",97,0)
 .. S $P(IBRES(IBSORT,IBPRTYP,I),U,3,4)=$$STRIP^IBCEF76($P(IBRES(IBSORT,IBPRTYP,I),U,3,4),1,U,IBSTRIP)
"RTN","IBCEF80",98,0)
 I $O(IBRES(IBSORT,"")) S IBRES(IBSORT)=$S(IBPRNUM=3:"T",IBPRNUM=2:"S",1:"P")
"RTN","IBCEF80",99,0)
 Q
"RTN","IBCEF80",100,0)
 ;
"RTN","IBCEF80",101,0)
PROVPTR(IBIEN399,IBFUNC,IBCP) ;
"RTN","IBCEF80",102,0)
 N IBN
"RTN","IBCEF80",103,0)
 S IBN=$O(^DGCR(399,IBIEN399,"CP",IBCP,"LNPRV","B",IBFUNC,0))
"RTN","IBCEF80",104,0)
 I +IBN=0 Q 0
"RTN","IBCEF80",105,0)
 Q $P($G(^DGCR(399,IBIEN399,"CP",IBCP,"LNPRV",+IBN,0)),U,2)
"RTN","IBCEF80",106,0)
 ;
"RTN","IBCEF80",107,0)
 ;SORT
"RTN","IBCEF80",108,0)
 ; Input
"RTN","IBCEF80",109,0)
 ;  IBPRNUM - 1 or 2
"RTN","IBCEF80",110,0)
 ;  IBPRTYP - Provide Type
"RTN","IBCEF80",111,0)
 ;  IB399   - IEN of Bill/Claim file
"RTN","IBCEF80",112,0)
 ;  IBSRC   - Source Array - IBRETARR passed by reference
"RTN","IBCEF80",113,0)
 ;  IBDST   - Destination Array - IBRES passed by reference
"RTN","IBCEF80",114,0)
 ;  IBN     - 
"RTN","IBCEF80",115,0)
 ;  IBEXC   - Override the ID
"RTN","IBCEF80",116,0)
 ;  IBSEQ   - 
"RTN","IBCEF80",117,0)
 ;  IBLIMIT - Limits on secondary ID's
"RTN","IBCEF80",118,0)
 ;  IBZ     - String containing SSN/EIN for the line providers
"RTN","IBCEF80",119,0)
 ;  IBCPPTR - Pointer to the Procedure Global
"RTN","IBCEF80",120,0)
SORT(IBPRNUM,IBPRTYP,IB399,IBSRC,IBDST,IBN,IBEXC,IBSEQ,IBLIMIT,IBZ,IBCPPTR) ;
"RTN","IBCEF80",121,0)
 N IBXIEN,IBXDATA,IBNET,IBTRI,IB1,IB2,IBID,Z,IBZ1,IBSVP
"RTN","IBCEF80",122,0)
 S (IB1,IB2,IBZ1,IBTRI)=""
"RTN","IBCEF80",123,0)
 ;IBZ1=All policy types on Bill
"RTN","IBCEF80",124,0)
 S IBZ1=$$ALLPTYP^IBCEF3(IB399)
"RTN","IBCEF80",125,0)
 F Z=1:1:3 S $P(IBZ1,U,Z)=$S($P(IBZ1,U,Z)="CH":1,1:"") S:$P(IBZ1,U,Z) IBTRI=1
"RTN","IBCEF80",126,0)
 S IBNET=$$NETID^IBCEP() ; netwrk id type
"RTN","IBCEF80",127,0)
 I $G(IBN) D
"RTN","IBCEF80",128,0)
 . S Z=0 F  S Z=$O(IBDST(IBPRNUM,IBPRTYP,Z)) Q:'Z  S IBID(+$P(IBDST(IBPRNUM,IBPRTYP,Z),U,9))=""
"RTN","IBCEF80",129,0)
 F  S IB1=$O(IBSRC(IB1)) Q:IB1=""  D  Q:IBN=IBLIMIT
"RTN","IBCEF80",130,0)
 . N OK,IBSTLIC
"RTN","IBCEF80",131,0)
 . S IBSTLIC=""
"RTN","IBCEF80",132,0)
 . F  S IB2=$O(IBSRC(IB1,IB2)) Q:IB2=""  D  Q:IBN=IBLIMIT
"RTN","IBCEF80",133,0)
 . . S IBSVP=$P(IBSRC(IB1,IB2),U)
"RTN","IBCEF80",134,0)
 . . ; If ID overridden, output no others of this type
"RTN","IBCEF80",135,0)
 . . I $G(IBEXC),$P($G(IBSRC(IB1,IB2)),U,9)=IBEXC Q
"RTN","IBCEF80",136,0)
 . . ; Ck state of care/lic match if st lic#
"RTN","IBCEF80",137,0)
 . . I $P($G(IBSRC(IB1,IB2)),U,3)="0B" S OK=1 D  Q:'OK
"RTN","IBCEF80",138,0)
 . . . I +$$CAREST^IBCEP2A(IB399)'=$P(IBSRC(IB1,IB2),U,7) S IBSTLIC=1 Q
"RTN","IBCEF80",139,0)
 . . . I $G(IBSTLIC(0))'="" S OK=0 Q
"RTN","IBCEF80",140,0)
 . . . S IBSTLIC(0)=$G(IBSRC(IB1,IB2)),OK=0
"RTN","IBCEF80",141,0)
 . . ; Exclude SSN from sec ids unless required
"RTN","IBCEF80",142,0)
 . . I $P($G(IBSRC(IB1,IB2)),U,3)="SY" Q
"RTN","IBCEF80",143,0)
 . . ; Only 1 of each prov id type
"RTN","IBCEF80",144,0)
 . . Q:$D(IBID(+$P($G(IBSRC(IB1,IB2)),U,9)))
"RTN","IBCEF80",145,0)
 . . S IBN=IBN+1,IBID(+$P($G(IBSRC(IB1,IB2)),U,9))=""
"RTN","IBCEF80",146,0)
 . . S IBDST(IBPRNUM,IBPRTYP,IBN)=$G(IBSRC(IB1,IB2))
"RTN","IBCEF80",147,0)
 . I IBN'=IBLIMIT,'$G(IBSTLIC),$G(IBSTLIC(0))'="" S IBN=IBN+1,IBDST(IBPRNUM,IBPRTYP,IBN)=IBSTLIC(0)
"RTN","IBCEF80",148,0)
 I $$FT^IBCEF(IB399)=2,$G(IBID(IBNET))="",IBTRI,$P(IBZ1,U,IBSEQ) D    ; WCJ 02/13/2006
"RTN","IBCEF80",149,0)
 . Q:$P(IBZ,U,IBPRTYP)=""
"RTN","IBCEF80",150,0)
 . ; here, no network id & TRICARE ins co.
"RTN","IBCEF80",151,0)
 . N Z
"RTN","IBCEF80",152,0)
 . S Z=+$O(^DGCR(399,IB399,"CP",IBCPPTR,"LNPRV","B",IBPRTYP,0)),Z=$P($G(^DGCR(399,IB399,"CP",IBCPPTR,"LNPRV",Z,0)),U,2)
"RTN","IBCEF80",153,0)
 . S IBN=IBN+1,IBDST(IBPRNUM,IBPRTYP,IBN)=Z_U_+$$POLICY^IBCEF(IB399,1,IBSEQ)_U_$P($G(^IBE(355.97,IBNET,0)),U,3)_U_$P(IBZ,U,IBPRTYP)_U_"0^0^^^"_IBNET
"RTN","IBCEF80",154,0)
 Q
"RTN","IBCEF81")
0^89^B109761369^B108877759
"RTN","IBCEF81",1,0)
IBCEF81 ;ALB/BI - PROVIDER ADJUSTMENTS ;11-OCT-2010
"RTN","IBCEF81",2,0)
 ;;2.0;INTEGRATED BILLING;**432,473,592**;21-MAR-94;Build 58
"RTN","IBCEF81",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEF81",4,0)
 ;
"RTN","IBCEF81",5,0)
 Q
"RTN","IBCEF81",6,0)
 ;
"RTN","IBCEF81",7,0)
EN(INPUT)  ; FIRST ENTRY POINT
"RTN","IBCEF81",8,0)
 N INSLEVEL,PRTYPE,OUTPUT,IBIEN,CMODE,CPRNUM,STATUS
"RTN","IBCEF81",9,0)
 S STATUS=1
"RTN","IBCEF81",10,0)
 I $D(INPUT)=0 S STATUS=0 Q STATUS
"RTN","IBCEF81",11,0)
 I (($G(IBXFORM)=2)!($G(IBXFORM)=3)) D EN^IBCEF82(.INPUT) Q STATUS    ; PERFORM LOCAL PRINT BUSINESS RULES
"RTN","IBCEF81",12,0)
 K OUTPUT M OUTPUT=INPUT
"RTN","IBCEF81",13,0)
 D CINIT1 Q:IBIEN="" STATUS
"RTN","IBCEF81",14,0)
 F INSLEVEL="P","S","T" D    ; P=PRIMARY, S=SECONDARY, T=TERTIARY
"RTN","IBCEF81",15,0)
 . D CINIT2
"RTN","IBCEF81",16,0)
 . ;JWS;IB*2.0*592; 6 assistant surgeon for dental
"RTN","IBCEF81",17,0)
 . F PRTYPE=1,2,3,5,6,9 D    ; 1=REFERRING, 2=OPERATING, 3=RENDERING, 5=SUPERVISING, 6=ASSISTANT SURGEON, 9=OTHER OPERATING
"RTN","IBCEF81",18,0)
 .. D START(INSLEVEL,PRTYPE,.OUTPUT)
"RTN","IBCEF81",19,0)
 K INPUT M INPUT=OUTPUT
"RTN","IBCEF81",20,0)
 Q STATUS
"RTN","IBCEF81",21,0)
START(INSLEVEL,PRTYPE,OUTPUT)  ; START PROCESSING
"RTN","IBCEF81",22,0)
 N INTERM,PROVINFO,MAXAINFO,FIRSTINF
"RTN","IBCEF81",23,0)
 S INTERM="A"
"RTN","IBCEF81",24,0)
 S INTERM=INTERM_$$TEST1  ; Does Claim Level Provider Exist, 0=NO, 1=YES
"RTN","IBCEF81",25,0)
 S INTERM=INTERM_$$TEST2  ; All procedures have a line level provider, 0=NO, 1=YES
"RTN","IBCEF81",26,0)
 S INTERM=INTERM_$$TEST3  ; One Line Level provider is most significant, 0=NO, 1=YES
"RTN","IBCEF81",27,0)
 S INTERM=INTERM_$$TEST4  ; At least one line level provider matches the claim level provider, 0=NO, 1=YES
"RTN","IBCEF81",28,0)
 S INTERM=INTERM_$$TEST5  ; There is only one procedure without a line level provider, 0=NO, 1=YES
"RTN","IBCEF81",29,0)
 D @INTERM
"RTN","IBCEF81",30,0)
 Q 
"RTN","IBCEF81",31,0)
 ;
"RTN","IBCEF81",32,0)
TEST1()  ; Does Claim Level Provider Exist, 0=NO, 1=YES
"RTN","IBCEF81",33,0)
 N PROVX,PROVY
"RTN","IBCEF81",34,0)
 I $D(CMODE(INSLEVEL))#10=0 Q 0
"RTN","IBCEF81",35,0)
 I $D(CPRNUM(INSLEVEL))#10=0 Q 0
"RTN","IBCEF81",36,0)
 S (PROVX,PROVY)=$G(INPUT("PROVINF",IBIEN,CMODE(INSLEVEL),CPRNUM(INSLEVEL),PRTYPE)) Q:PROVX="" 0
"RTN","IBCEF81",37,0)
 S PROVX="^"_$P(PROVX,";",2)_$P(PROVX,";",1)_")"
"RTN","IBCEF81",38,0)
 I $D(@PROVX) D  Q 1    ;CLAIM PROVIDER EXISTS, RETURN TRUE.
"RTN","IBCEF81",39,0)
 . ; LOAD CLAIM LEVEL PROVIDER INFORMATION
"RTN","IBCEF81",40,0)
 . S PROVINFO=PROVY
"RTN","IBCEF81",41,0)
 . S PROVINFO("PROVINF",IBIEN)=IBIEN
"RTN","IBCEF81",42,0)
 . S PROVINFO("PROVINF",IBIEN,CMODE(INSLEVEL))=""
"RTN","IBCEF81",43,0)
 . S PROVINFO("PROVINF",IBIEN,CMODE(INSLEVEL),CPRNUM(INSLEVEL))=INSLEVEL
"RTN","IBCEF81",44,0)
 . M PROVINFO("PROVINF",IBIEN,CMODE(INSLEVEL),CPRNUM(INSLEVEL),PRTYPE)=INPUT("PROVINF",IBIEN,CMODE(INSLEVEL),CPRNUM(INSLEVEL),PRTYPE)
"RTN","IBCEF81",45,0)
 Q 0
"RTN","IBCEF81",46,0)
 ;
"RTN","IBCEF81",47,0)
TEST2()  ; All procedures have a line level provider, 0=NO, 1=YES
"RTN","IBCEF81",48,0)
 N SLC,RESULT,LMODE,LPRNUM,PROVX,LINECNT
"RTN","IBCEF81",49,0)
 S SLC=0,RESULT=1,LINECNT=0
"RTN","IBCEF81",50,0)
 F  S SLC=$$LINIT1(SLC) Q:+SLC=0  D
"RTN","IBCEF81",51,0)
 . S LINECNT=LINECNT+1
"RTN","IBCEF81",52,0)
 . D LINIT2
"RTN","IBCEF81",53,0)
 . I $D(LMODE(INSLEVEL))#10=0 S RESULT=0 Q
"RTN","IBCEF81",54,0)
 . I $D(LPRNUM(INSLEVEL))#10=0 S RESULT=0 Q
"RTN","IBCEF81",55,0)
 . S PROVX=$G(INPUT("L-PROV",IBIEN,SLC,LMODE(INSLEVEL),LPRNUM(INSLEVEL),PRTYPE))
"RTN","IBCEF81",56,0)
 . I PROVX="" D  Q
"RTN","IBCEF81",57,0)
 .. S RESULT=RESULT*0
"RTN","IBCEF81",58,0)
 . S PROVX="^"_$P(PROVX,";",2)_$P(PROVX,";",1)_")"
"RTN","IBCEF81",59,0)
 . S RESULT=RESULT*($D(@PROVX)'=0)
"RTN","IBCEF81",60,0)
 I +$G(INPUT("SLC"))'=0,INPUT("SLC")>LINECNT S RESULT=0
"RTN","IBCEF81",61,0)
 Q RESULT
"RTN","IBCEF81",62,0)
 ;
"RTN","IBCEF81",63,0)
TEST3()  ; One Line Level provider is most significant, 0=NO, 1=YES
"RTN","IBCEF81",64,0)
 N SLC,RESULT,LMODE,LPRNUM,PCOUNT,PCOUNTF,PCOUNTL,PROVX,TEMPNODE
"RTN","IBCEF81",65,0)
 S SLC=0,RESULT=0
"RTN","IBCEF81",66,0)
 F  S SLC=$$LINIT1(SLC) Q:+SLC=0  D
"RTN","IBCEF81",67,0)
 . D LINIT2
"RTN","IBCEF81",68,0)
 . I $D(LMODE(INSLEVEL))#10=0 Q
"RTN","IBCEF81",69,0)
 . I $D(LPRNUM(INSLEVEL))#10=0 Q
"RTN","IBCEF81",70,0)
 . S PROVX=$G(INPUT("L-PROV",IBIEN,SLC,LMODE(INSLEVEL),LPRNUM(INSLEVEL),PRTYPE)) Q:PROVX=""
"RTN","IBCEF81",71,0)
 . I $D(FIRSTINF)=0 D
"RTN","IBCEF81",72,0)
 .. ; LOAD FIRST AVAILABLE PROVIDER INFORMATION
"RTN","IBCEF81",73,0)
 .. S FIRSTINF=$G(INPUT("L-PROV",IBIEN,SLC,LMODE(INSLEVEL),LPRNUM(INSLEVEL),PRTYPE))
"RTN","IBCEF81",74,0)
 .. S FIRSTINF("L-PROV",IBIEN)=IBIEN
"RTN","IBCEF81",75,0)
 .. S FIRSTINF("L-PROV",IBIEN,LMODE(INSLEVEL),LPRNUM(INSLEVEL))=INSLEVEL
"RTN","IBCEF81",76,0)
 .. M FIRSTINF("L-PROV",IBIEN,LMODE(INSLEVEL),LPRNUM(INSLEVEL),PRTYPE)=INPUT("L-PROV",IBIEN,SLC,LMODE(INSLEVEL),LPRNUM(INSLEVEL),PRTYPE)
"RTN","IBCEF81",77,0)
 . S PCOUNT(PROVX)=$P($G(PCOUNT(PROVX)),"^",1)+1_"^"_SLC_"^"_LMODE(INSLEVEL)_"^"_LPRNUM(INSLEVEL)_"^"_PRTYPE
"RTN","IBCEF81",78,0)
 S PROVX="" F  S PROVX=$O(PCOUNT(PROVX)) Q:PROVX=""  D
"RTN","IBCEF81",79,0)
 . S PCOUNTF($P(PCOUNT(PROVX),"^",1),PROVX)=$P(PCOUNT(PROVX),"^",2,5)
"RTN","IBCEF81",80,0)
 S PCOUNTL(1)=$O(PCOUNTF(""),-1) Q:PCOUNTL(1)="" RESULT
"RTN","IBCEF81",81,0)
 S PCOUNTL(2,1)=$O(PCOUNTF(PCOUNTL(1),""),-1) Q:PCOUNTL(2,1)="" RESULT
"RTN","IBCEF81",82,0)
 S PCOUNTL(2,2)=$O(PCOUNTF(PCOUNTL(1),PCOUNTL(2,1)),-1)
"RTN","IBCEF81",83,0)
 I PCOUNTL(2,2)="" D
"RTN","IBCEF81",84,0)
 . S RESULT=1
"RTN","IBCEF81",85,0)
 . ; LOAD MOST SIGNIFICANT LINE LEVEL PROVIDER INFORMATION
"RTN","IBCEF81",86,0)
 . S MAXAINFO=PCOUNTL(2,1)
"RTN","IBCEF81",87,0)
 . S TEMPNODE=PCOUNTF(PCOUNTL(1),PCOUNTL(2,1))
"RTN","IBCEF81",88,0)
 . S MAXAINFO("L-PROV",IBIEN)=IBIEN
"RTN","IBCEF81",89,0)
 . S MAXAINFO("L-PROV",IBIEN,$P(TEMPNODE,"^",2),$P(TEMPNODE,"^",3))=INSLEVEL
"RTN","IBCEF81",90,0)
 . M MAXAINFO("L-PROV",IBIEN,$P(TEMPNODE,"^",2),$P(TEMPNODE,"^",3),$P(TEMPNODE,"^",4))=INPUT("L-PROV",IBIEN,$P(TEMPNODE,"^",1),$P(TEMPNODE,"^",2),$P(TEMPNODE,"^",3),$P(TEMPNODE,"^",4))
"RTN","IBCEF81",91,0)
 Q RESULT
"RTN","IBCEF81",92,0)
 ;
"RTN","IBCEF81",93,0)
TEST4()  ; At least one line level provider matches the claim level provider, 0=NO, 1=YES
"RTN","IBCEF81",94,0)
 N CPROV,RESULT,LMODE,LPRNUM,LPROV,SLC
"RTN","IBCEF81",95,0)
 I $D(CMODE(INSLEVEL))#10=0 Q 0
"RTN","IBCEF81",96,0)
 I $D(CPRNUM(INSLEVEL))#10=0 Q 0
"RTN","IBCEF81",97,0)
 S CPROV=$G(INPUT("PROVINF",IBIEN,CMODE(INSLEVEL),CPRNUM(INSLEVEL),PRTYPE)) Q:CPROV="" 0
"RTN","IBCEF81",98,0)
 S SLC=0,RESULT=0
"RTN","IBCEF81",99,0)
 F  S SLC=$$LINIT1(SLC) Q:+SLC=0  D
"RTN","IBCEF81",100,0)
 . D LINIT2
"RTN","IBCEF81",101,0)
 . I $D(LMODE(INSLEVEL))#10=0 Q
"RTN","IBCEF81",102,0)
 . I $D(LPRNUM(INSLEVEL))#10=0 Q
"RTN","IBCEF81",103,0)
 . S LPROV=$G(INPUT("L-PROV",IBIEN,SLC,LMODE(INSLEVEL),LPRNUM(INSLEVEL),PRTYPE))  Q:LPROV=""
"RTN","IBCEF81",104,0)
 . I LPROV=CPROV S RESULT=1
"RTN","IBCEF81",105,0)
 Q RESULT
"RTN","IBCEF81",106,0)
 ;
"RTN","IBCEF81",107,0)
TEST5()  ; There is only one procedure without a line level provider, 0=NO, 1=YES
"RTN","IBCEF81",108,0)
 N SLC,LMODE,LPRNUM,PROVCNT,RESULT
"RTN","IBCEF81",109,0)
 S SLC=0,PROVCNT=0,RESULT=0
"RTN","IBCEF81",110,0)
 F  S SLC=$$LINIT1(SLC) Q:+SLC=0  D
"RTN","IBCEF81",111,0)
 . D LINIT2
"RTN","IBCEF81",112,0)
 . I $D(LMODE(INSLEVEL))#10=0 Q
"RTN","IBCEF81",113,0)
 . I $D(LPRNUM(INSLEVEL))#10=0 Q
"RTN","IBCEF81",114,0)
 . S PROVX=$G(INPUT("L-PROV",IBIEN,SLC,LMODE(INSLEVEL),LPRNUM(INSLEVEL),PRTYPE))
"RTN","IBCEF81",115,0)
 . S:PROVX'="" PROVCNT=PROVCNT+1
"RTN","IBCEF81",116,0)
 I +$G(INPUT("SLC"))'=0,INPUT("SLC")=(PROVCNT+1) S RESULT=1
"RTN","IBCEF81",117,0)
 Q RESULT
"RTN","IBCEF81",118,0)
 ;
"RTN","IBCEF81",119,0)
A00000  ;  Case 1
"RTN","IBCEF81",120,0)
 ; TESTS: Does Claim Level Provider Exist: 0=NO
"RTN","IBCEF81",121,0)
 ;        All procedures have a line level provider: 0=NO
"RTN","IBCEF81",122,0)
 ;        One Line Level provider is most significant: 0=NO
"RTN","IBCEF81",123,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF81",124,0)
 ;        There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF81",125,0)
 ;
"RTN","IBCEF81",126,0)
 ; Move the first available line level provider to the claim level.
"RTN","IBCEF81",127,0)
 I $G(FIRSTINF)="" Q
"RTN","IBCEF81",128,0)
 M OUTPUT("PROVINF",IBIEN)=FIRSTINF("L-PROV",IBIEN)
"RTN","IBCEF81",129,0)
 ;
"RTN","IBCEF81",130,0)
 ; Remove the claim lines associated with the primary provider.
"RTN","IBCEF81",131,0)
 S PROVINFO=FIRSTINF
"RTN","IBCEF81",132,0)
 D REMOVELN
"RTN","IBCEF81",133,0)
 Q
"RTN","IBCEF81",134,0)
 ;
"RTN","IBCEF81",135,0)
A00001  ;  Case 2
"RTN","IBCEF81",136,0)
 ; TESTS: Does Claim Level Provider Exist: 0=NO
"RTN","IBCEF81",137,0)
 ;        All procedures have a line level provider: 0=NO
"RTN","IBCEF81",138,0)
 ;        One Line Level provider is most significant: 0=NO
"RTN","IBCEF81",139,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF81",140,0)
 ;        There is only one procedure without a line level provider: 1=YES
"RTN","IBCEF81",141,0)
 ;
"RTN","IBCEF81",142,0)
 ; Move the first available line level provider to the claim level.
"RTN","IBCEF81",143,0)
 I $G(FIRSTINF)="" Q
"RTN","IBCEF81",144,0)
 M OUTPUT("PROVINF",IBIEN)=FIRSTINF("L-PROV",IBIEN)
"RTN","IBCEF81",145,0)
 ;
"RTN","IBCEF81",146,0)
 ; Remove the claim lines associated with the primary provider.
"RTN","IBCEF81",147,0)
 S PROVINFO=FIRSTINF
"RTN","IBCEF81",148,0)
 D REMOVELN
"RTN","IBCEF81",149,0)
 Q
"RTN","IBCEF81",150,0)
 ;
"RTN","IBCEF81",151,0)
A00010  ;  Case 3 - This case can never happen!
"RTN","IBCEF81",152,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF81",153,0)
 Q
"RTN","IBCEF81",154,0)
 ;
"RTN","IBCEF81",155,0)
A00011  ;  Case 4 - This case can never happen!
"RTN","IBCEF81",156,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF81",157,0)
 Q
"RTN","IBCEF81",158,0)
 ;
"RTN","IBCEF81",159,0)
A00100  ;  Case 5
"RTN","IBCEF81",160,0)
 ; TESTS: Does Claim Level Provider Exist: 0=NO
"RTN","IBCEF81",161,0)
 ;        All procedures have a line level provider: 0=NO
"RTN","IBCEF81",162,0)
 ;        One Line Level provider is most significant: 1=YES
"RTN","IBCEF81",163,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF81",164,0)
 ;        There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF81",165,0)
 ;
"RTN","IBCEF81",166,0)
 ; Set the claim level provider equal to the most significant line level provider.
"RTN","IBCEF81",167,0)
 I $G(MAXAINFO)="" Q
"RTN","IBCEF81",168,0)
 M OUTPUT("PROVINF",IBIEN)=MAXAINFO("L-PROV",IBIEN)
"RTN","IBCEF81",169,0)
 ;
"RTN","IBCEF81",170,0)
 ; Remove the claim lines associated with the primary provider.
"RTN","IBCEF81",171,0)
 S PROVINFO=MAXAINFO
"RTN","IBCEF81",172,0)
 D REMOVELN
"RTN","IBCEF81",173,0)
 ;
"RTN","IBCEF81",174,0)
 Q
"RTN","IBCEF81",175,0)
 ;
"RTN","IBCEF81",176,0)
A00101  ;  Case 6
"RTN","IBCEF81",177,0)
 ; TESTS: Does Claim Level Provider Exist: 0=NO
"RTN","IBCEF81",178,0)
 ;        All procedures have a line level provider: 0=NO
"RTN","IBCEF81",179,0)
 ;        One Line Level provider is most significant: 1=YES
"RTN","IBCEF81",180,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF81",181,0)
 ;        There is only one procedure without a line level provider: 1=YES
"RTN","IBCEF81",182,0)
 ;
"RTN","IBCEF81",183,0)
 ; Set the claim level provider equal to the most significant line level provider.
"RTN","IBCEF81",184,0)
 I $G(MAXAINFO)="" Q
"RTN","IBCEF81",185,0)
 M OUTPUT("PROVINF",IBIEN)=MAXAINFO("L-PROV",IBIEN)
"RTN","IBCEF81",186,0)
 ;
"RTN","IBCEF81",187,0)
 ; Remove the claim lines associated with the primary provider.
"RTN","IBCEF81",188,0)
 S PROVINFO=MAXAINFO
"RTN","IBCEF81",189,0)
 D REMOVELN
"RTN","IBCEF81",190,0)
 ;
"RTN","IBCEF81",191,0)
 Q
"RTN","IBCEF81",192,0)
 ;
"RTN","IBCEF81",193,0)
A00110  ;  Case 7 - This case can never happen!
"RTN","IBCEF81",194,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF81",195,0)
 Q
"RTN","IBCEF81",196,0)
 ;
"RTN","IBCEF81",197,0)
A00111  ;  Case 8 - This case can never happen!
"RTN","IBCEF81",198,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF81",199,0)
 Q
"RTN","IBCEF81",200,0)
 ;
"RTN","IBCEF81",201,0)
A01000  ;  Case 9
"RTN","IBCEF81",202,0)
 ; TESTS: Does Claim Level Provider Exist: 0=NO
"RTN","IBCEF81",203,0)
 ;        All procedures have a line level provider: 1=YES
"RTN","IBCEF81",204,0)
 ;        One Line Level provider is most significant: 0=NO
"RTN","IBCEF81",205,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF81",206,0)
 ;        There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF81",207,0)
 ;
"RTN","IBCEF81",208,0)
 ; Move the first available line level provider to the claim level.
"RTN","IBCEF81",209,0)
 ; Set the claim level provider equal to the most significant line level provider.
"RTN","IBCEF81",210,0)
 I $G(FIRSTINF)="" Q
"RTN","IBCEF81",211,0)
 M OUTPUT("PROVINF",IBIEN)=FIRSTINF("L-PROV",IBIEN)
"RTN","IBCEF81",212,0)
 ;
"RTN","IBCEF81",213,0)
 ; Remove the claim lines associated with the primary provider.
"RTN","IBCEF81",214,0)
 S PROVINFO=FIRSTINF
"RTN","IBCEF81",215,0)
 D REMOVELN
"RTN","IBCEF81",216,0)
 Q
"RTN","IBCEF81",217,0)
 ;
"RTN","IBCEF81",218,0)
A01001  ; Case 10 - This case can never happen!
"RTN","IBCEF81",219,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF81",220,0)
 Q
"RTN","IBCEF81",221,0)
 ;
"RTN","IBCEF81",222,0)
A01010  ; Case 11 - This case can never happen!
"RTN","IBCEF81",223,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF81",224,0)
 Q
"RTN","IBCEF81",225,0)
 ;
"RTN","IBCEF81",226,0)
A01011  ; Case 12 - This case can never happen!
"RTN","IBCEF81",227,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF81",228,0)
 Q
"RTN","IBCEF81",229,0)
 ;
"RTN","IBCEF81",230,0)
A01100  ; Case 13
"RTN","IBCEF81",231,0)
 ; TESTS: Does Claim Level Provider Exist: 0=NO
"RTN","IBCEF81",232,0)
 ;        All procedures have a line level provider: 1=YES
"RTN","IBCEF81",233,0)
 ;        One Line Level provider is most significant: 1=YES
"RTN","IBCEF81",234,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF81",235,0)
 ;        There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF81",236,0)
 ;
"RTN","IBCEF81",237,0)
 ; Set the claim level provider equal to the most significant line level provider.
"RTN","IBCEF81",238,0)
 I $G(MAXAINFO)="" Q
"RTN","IBCEF81",239,0)
 M OUTPUT("PROVINF",IBIEN)=MAXAINFO("L-PROV",IBIEN)
"RTN","IBCEF81",240,0)
 ;
"RTN","IBCEF81",241,0)
 ; Remove the claim lines associated with the primary provider.
"RTN","IBCEF81",242,0)
 S PROVINFO=MAXAINFO
"RTN","IBCEF81",243,0)
 D REMOVELN
"RTN","IBCEF81",244,0)
 ;
"RTN","IBCEF81",245,0)
 Q
"RTN","IBCEF81",246,0)
 ;
"RTN","IBCEF81",247,0)
A01101  ; Case 14 - This case can never happen!
"RTN","IBCEF81",248,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF81",249,0)
 Q
"RTN","IBCEF81",250,0)
 ;
"RTN","IBCEF81",251,0)
A01110  ; Case 15 - This case can never happen!
"RTN","IBCEF81",252,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF81",253,0)
 Q
"RTN","IBCEF81",254,0)
 ;
"RTN","IBCEF81",255,0)
A01111  ; Case 16 - This case can never happen!
"RTN","IBCEF81",256,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF81",257,0)
 Q
"RTN","IBCEF81",258,0)
 ;
"RTN","IBCEF81",259,0)
A10000  ; Case 17
"RTN","IBCEF81",260,0)
 ; TESTS: Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF81",261,0)
 ;        All procedures have a line level provider: 0=NO
"RTN","IBCEF81",262,0)
 ;        One Line Level provider is most significant: 0=NO
"RTN","IBCEF81",263,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF81",264,0)
 ;        There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF81",265,0)
 ;
"RTN","IBCEF81",266,0)
 ; ACTIONS: Transmit as is.
"RTN","IBCEF81",267,0)
 ;
"RTN","IBCEF81",268,0)
 Q
"RTN","IBCEF81",269,0)
 ;
"RTN","IBCEF81",270,0)
A10001   ; Case 18
"RTN","IBCEF81",271,0)
 ; TESTS: Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF81",272,0)
 ;        All procedures have a line level provider: 0=NO
"RTN","IBCEF81",273,0)
 ;        One Line Level provider is most significant: 0=NO
"RTN","IBCEF81",274,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF81",275,0)
 ;        There is only one procedure without a line level provider: 1=YES
"RTN","IBCEF81",276,0)
 ;
"RTN","IBCEF81",277,0)
 ; ACTIONS: Transmit as is.
"RTN","IBCEF81",278,0)
 ;
"RTN","IBCEF81",279,0)
 Q
"RTN","IBCEF81",280,0)
 ;
"RTN","IBCEF81",281,0)
A10010   ; Case 19
"RTN","IBCEF81",282,0)
 ; TESTS: Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF81",283,0)
 ;        All procedures have a line level provider: 0=NO
"RTN","IBCEF81",284,0)
 ;        One Line Level provider is most significant: 0=NO
"RTN","IBCEF81",285,0)
 ; At least one line level provider matches the claim level provider: 1=YES
"RTN","IBCEF81",286,0)
 ;        There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF81",287,0)
 ;
"RTN","IBCEF81",288,0)
 ; Remove the claim lines associated with the claim level provider.
"RTN","IBCEF81",289,0)
 D REMOVELN
"RTN","IBCEF81",290,0)
 ;
"RTN","IBCEF81",291,0)
 Q
"RTN","IBCEF81",292,0)
 ;
"RTN","IBCEF81",293,0)
A10011   ; Case 20
"RTN","IBCEF81",294,0)
 ; TESTS: Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF81",295,0)
 ;        All procedures have a line level provider: 0=NO
"RTN","IBCEF81",296,0)
 ;        One Line Level provider is most significant: 0=NO
"RTN","IBCEF81",297,0)
 ; At least one line level provider matches the claim level provider: 1=YES
"RTN","IBCEF81",298,0)
 ;        There is only one procedure without a line level provider: 1=YES
"RTN","IBCEF81",299,0)
 ;
"RTN","IBCEF81",300,0)
 ; Remove the claim lines associated with the claim level provider.
"RTN","IBCEF81",301,0)
 D REMOVELN
"RTN","IBCEF81",302,0)
 ;
"RTN","IBCEF81",303,0)
 Q
"RTN","IBCEF81",304,0)
 ;
"RTN","IBCEF81",305,0)
A10100   ; Case 21
"RTN","IBCEF81",306,0)
 ; TESTS: Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF81",307,0)
 ;        All procedures have a line level provider: 0=NO
"RTN","IBCEF81",308,0)
 ;        One Line Level provider is most significant: 1=YES
"RTN","IBCEF81",309,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF81",310,0)
 ;        There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF81",311,0)
 ;
"RTN","IBCEF81",312,0)
 ; ACTIONS: Transmit as is.
"RTN","IBCEF81",313,0)
 ;
"RTN","IBCEF81",314,0)
 Q
"RTN","IBCEF81",315,0)
 ;
"RTN","IBCEF81",316,0)
A10101   ; Case 22
"RTN","IBCEF81",317,0)
 ; TESTS: Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF81",318,0)
 ;        All procedures have a line level provider: 0=NO
"RTN","IBCEF81",319,0)
 ;        One Line Level provider is most significant: 1=YES
"RTN","IBCEF81",320,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF81",321,0)
 ;        There is only one procedure without a line level provider: 1=YES
"RTN","IBCEF81",322,0)
 ;
"RTN","IBCEF81",323,0)
 ; ACTIONS: Transmit as is.
"RTN","IBCEF81",324,0)
 ;
"RTN","IBCEF81",325,0)
 Q
"RTN","IBCEF81",326,0)
 ;
"RTN","IBCEF81",327,0)
A10110   ; Case 23
"RTN","IBCEF81",328,0)
 ; TESTS: Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF81",329,0)
 ;        All procedures have a line level provider: 0=NO
"RTN","IBCEF81",330,0)
 ;        One Line Level provider is most significant: 1=YES
"RTN","IBCEF81",331,0)
 ; At least one line level provider matches the claim level provider: 1=YES
"RTN","IBCEF81",332,0)
 ;        There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF81",333,0)
 ;
"RTN","IBCEF81",334,0)
 ; Remove the claim lines associated with the claim level provider.
"RTN","IBCEF81",335,0)
 D REMOVELN
"RTN","IBCEF81",336,0)
 ;
"RTN","IBCEF81",337,0)
 Q
"RTN","IBCEF81",338,0)
 ;
"RTN","IBCEF81",339,0)
A10111   ; Case 24
"RTN","IBCEF81",340,0)
 ; TESTS: Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF81",341,0)
 ;        All procedures have a line level provider: 0=NO
"RTN","IBCEF81",342,0)
 ;        One Line Level provider is most significant: 1=YES
"RTN","IBCEF81",343,0)
 ; At least one line level provider matches the claim level provider: 1=YES
"RTN","IBCEF81",344,0)
 ;        There is only one procedure without a line level provider: 1=YES
"RTN","IBCEF81",345,0)
 ;
"RTN","IBCEF81",346,0)
 ; Remove the claim lines associated with the claim level provider.
"RTN","IBCEF81",347,0)
 D REMOVELN
"RTN","IBCEF81",348,0)
 ;
"RTN","IBCEF81",349,0)
 Q
"RTN","IBCEF81",350,0)
 ;
"RTN","IBCEF81",351,0)
A11000   ; Case 25
"RTN","IBCEF81",352,0)
 ; TESTS: Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF81",353,0)
 ;        All procedures have a line level provider: 1=YES
"RTN","IBCEF81",354,0)
 ;        One Line Level provider is most significant: 0=NO
"RTN","IBCEF81",355,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF81",356,0)
 ;        There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF81",357,0)
 ;
"RTN","IBCEF81",358,0)
 S STATUS="0^CASE 25 ERROR"
"RTN","IBCEF81",359,0)
 ;
"RTN","IBCEF81",360,0)
 Q
"RTN","IBCEF81",361,0)
 ;
"RTN","IBCEF81",362,0)
A11001   ; Case 26 - This case can never happen!
"RTN","IBCEF81",363,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF81",364,0)
 Q
"RTN","IBCEF81",365,0)
 ;
"RTN","IBCEF81",366,0)
A11010   ; Case 27
"RTN","IBCEF81",367,0)
 ; TESTS: Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF81",368,0)
 ;        All procedures have a line level provider: 1=YES
"RTN","IBCEF81",369,0)
 ;        One Line Level provider is most significant: 0=NO
"RTN","IBCEF81",370,0)
 ; At least one line level provider matches the claim level provider: 1=YES
"RTN","IBCEF81",371,0)
 ;        There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF81",372,0)
 ;
"RTN","IBCEF81",373,0)
 ; Remove the claim lines associated with the claim level provider.
"RTN","IBCEF81",374,0)
 D REMOVELN
"RTN","IBCEF81",375,0)
 ;
"RTN","IBCEF81",376,0)
 Q
"RTN","IBCEF81",377,0)
 ;
"RTN","IBCEF81",378,0)
A11011   ; Case 28 - This case can never happen!
"RTN","IBCEF81",379,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF81",380,0)
 Q
"RTN","IBCEF81",381,0)
 ;
"RTN","IBCEF81",382,0)
A11100   ; Case 29
"RTN","IBCEF81",383,0)
 ; TESTS: Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF81",384,0)
 ;        All procedures have a line level provider: 1=YES
"RTN","IBCEF81",385,0)
 ;        One Line Level provider is most significant: 1=YES
"RTN","IBCEF81",386,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF81",387,0)
 ;        There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF81",388,0)
 ;
"RTN","IBCEF81",389,0)
 S STATUS="0^CASE 29 ERROR"
"RTN","IBCEF81",390,0)
 ;
"RTN","IBCEF81",391,0)
 Q
"RTN","IBCEF81",392,0)
 ;
"RTN","IBCEF81",393,0)
A11101   ; Case 30 - This case can never happen!
"RTN","IBCEF81",394,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF81",395,0)
 Q
"RTN","IBCEF81",396,0)
 ;
"RTN","IBCEF81",397,0)
A11110   ; Case 31
"RTN","IBCEF81",398,0)
 ; TESTS: Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF81",399,0)
 ;        All procedures have a line level provider: 1=YES
"RTN","IBCEF81",400,0)
 ;        One Line Level provider is most significant: 1=YES
"RTN","IBCEF81",401,0)
 ; At least one line level provider matches the claim level provider: 1=YES
"RTN","IBCEF81",402,0)
 ;        There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF81",403,0)
 ;
"RTN","IBCEF81",404,0)
 ; Remove the claim lines associated with the claim level provider.
"RTN","IBCEF81",405,0)
 D REMOVELN
"RTN","IBCEF81",406,0)
 ;
"RTN","IBCEF81",407,0)
 Q
"RTN","IBCEF81",408,0)
 ;
"RTN","IBCEF81",409,0)
A11111   ; Case 32 - This case can never happen!
"RTN","IBCEF81",410,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF81",411,0)
 Q
"RTN","IBCEF81",412,0)
 ;
"RTN","IBCEF81",413,0)
CINIT1    ; Claim level initiation
"RTN","IBCEF81",414,0)
 S IBIEN=$O(INPUT("L-PROV",0))
"RTN","IBCEF81",415,0)
 I IBIEN="" S IBIEN=$O(INPUT("PROVINF",0))
"RTN","IBCEF81",416,0)
 I IBIEN="" S IBIEN=$O(INPUT("LAB/FAC",0))
"RTN","IBCEF81",417,0)
 Q
"RTN","IBCEF81",418,0)
 ;
"RTN","IBCEF81",419,0)
CINIT2    ; Claim level initiation
"RTN","IBCEF81",420,0)
 N MODEX,PRNUMX,PROVX
"RTN","IBCEF81",421,0)
 F MODEX="C","O" D
"RTN","IBCEF81",422,0)
 . S PRNUMX=0 F  S PRNUMX=$O(INPUT("PROVINF",IBIEN,MODEX,PRNUMX)) Q:+PRNUMX=0  D
"RTN","IBCEF81",423,0)
 .. I $G(INPUT("PROVINF",IBIEN,MODEX,PRNUMX))="" Q
"RTN","IBCEF81",424,0)
 .. I INPUT("PROVINF",IBIEN,MODEX,PRNUMX)=INSLEVEL S CMODE(INSLEVEL)=MODEX,CPRNUM(INSLEVEL)=PRNUMX
"RTN","IBCEF81",425,0)
 Q
"RTN","IBCEF81",426,0)
 ;
"RTN","IBCEF81",427,0)
LINIT1(SLC)    ; Line level initiation
"RTN","IBCEF81",428,0)
 Q $O(INPUT("L-PROV",IBIEN,SLC))
"RTN","IBCEF81",429,0)
 ;
"RTN","IBCEF81",430,0)
LINIT2    ; Line level initiation
"RTN","IBCEF81",431,0)
 N MODEX,PRNUMX,PROVX
"RTN","IBCEF81",432,0)
 F MODEX="C","O" D
"RTN","IBCEF81",433,0)
 . S PRNUMX=0 F  S PRNUMX=$O(INPUT("L-PROV",IBIEN,SLC,MODEX,PRNUMX)) Q:+PRNUMX=0  D
"RTN","IBCEF81",434,0)
 .. I INPUT("L-PROV",IBIEN,SLC,MODEX,PRNUMX)=INSLEVEL S LMODE(INSLEVEL)=MODEX,LPRNUM(INSLEVEL)=PRNUMX
"RTN","IBCEF81",435,0)
 Q
"RTN","IBCEF81",436,0)
 ;
"RTN","IBCEF81",437,0)
REMOVELN    ; Remove the claim lines associated with the claim level provider.
"RTN","IBCEF81",438,0)
 N MODEX,PRNUMX,PROVX
"RTN","IBCEF81",439,0)
 S SLC=0 F  S SLC=$O(OUTPUT("L-PROV",IBIEN,SLC)) Q:+SLC=0  D
"RTN","IBCEF81",440,0)
 . F MODEX="C","O" D
"RTN","IBCEF81",441,0)
 .. S PRNUMX=0 F  S PRNUMX=$O(OUTPUT("L-PROV",IBIEN,SLC,MODEX,PRNUMX)) Q:+PRNUMX=0  D
"RTN","IBCEF81",442,0)
 ... Q:$G(PROVINFO)=""
"RTN","IBCEF81",443,0)
 ... I $G(OUTPUT("L-PROV",IBIEN,SLC,MODEX,PRNUMX,PRTYPE))=PROVINFO D
"RTN","IBCEF81",444,0)
 .... K OUTPUT("L-PROV",IBIEN,SLC,MODEX,PRNUMX,PRTYPE)
"RTN","IBCEF81",445,0)
 .... I $D(OUTPUT("L-PROV",IBIEN,SLC,MODEX,PRNUMX))=1 K OUTPUT("L-PROV",IBIEN,SLC,MODEX,PRNUMX)
"RTN","IBCEF81",446,0)
 .... I $D(OUTPUT("L-PROV",IBIEN,SLC,MODEX))=1 K OUTPUT("L-PROV",IBIEN,SLC,MODEX)
"RTN","IBCEF81",447,0)
 .... I $D(OUTPUT("L-PROV",IBIEN,SLC))=1 K OUTPUT("L-PROV",IBIEN,SLC)
"RTN","IBCEF81",448,0)
 Q
"RTN","IBCEFP")
0^65^B118488673^B115631357
"RTN","IBCEFP",1,0)
IBCEFP ;ALB/TAZ - Provider ID functions ;28-OCT-10
"RTN","IBCEFP",2,0)
 ;;2.0;INTEGRATED BILLING;**432,447,473,516,592**;21-MAR-94;Build 58
"RTN","IBCEFP",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEFP",4,0)
 ;
"RTN","IBCEFP",5,0)
 Q
"RTN","IBCEFP",6,0)
 ;
"RTN","IBCEFP",7,0)
ALLIDS(IBIFN,IBXSAVE,IBSTRIP,SEG) ; Return all of the Provider IDS
"RTN","IBCEFP",8,0)
 I '$D(IBSTRIP) S IBSTRIP=0
"RTN","IBCEFP",9,0)
 I '$D(SEG) S SEG=""
"RTN","IBCEFP",10,0)
 N IBXIEN,ARINFO,ARID,ARQ,IBFRMTYP,ARIEN,ARINS,Z0,DAT,I,SORT1,SORT2,SORT3,COB,IBCCOB,IBCARE,IBCURR,IBXDATA,NPI,CUROTH
"RTN","IBCEFP",11,0)
 ;JWS;IB*2.0*592;US131
"RTN","IBCEFP",12,0)
 S IBFRMTYP=$$FT^IBCEF(IBIFN),IBFRMTYP=$S(IBFRMTYP=2:2,IBFRMTYP=3:1,IBFRMTYP=7:7,1:0)
"RTN","IBCEFP",13,0)
 S IBCARE=$S($$ISRX^IBCEF1(IBIFN):3,1:0) ;if an Rx refill bill
"RTN","IBCEFP",14,0)
 S:IBCARE=0 IBCARE=$$INPAT^IBCEF(IBIFN,1) S:'IBCARE IBCARE=2 ;1-inp,2-out
"RTN","IBCEFP",15,0)
 S IBCURR=$$COB^IBCEF(IBIFN) ;current bill payer sequence
"RTN","IBCEFP",16,0)
 ;don't create anything if form type not CMS-1500 or UB or J430D
"RTN","IBCEFP",17,0)
 I IBFRMTYP,'+$G(IBXSAVE("PROVINF",IBIFN)) D
"RTN","IBCEFP",18,0)
 . N IBZ,CUROTH
"RTN","IBCEFP",19,0)
 . ;JWS;IB*2.0*592;US131
"RTN","IBCEFP",20,0)
 . I IBFRMTYP=2!(IBFRMTYP=7) D OUTPT^IBCEF11(IBIFN,0)
"RTN","IBCEFP",21,0)
 . I IBFRMTYP=1 D HOS^IBCEF22(IBIFN)
"RTN","IBCEFP",22,0)
 . ; START IB*2.0*447 BI
"RTN","IBCEFP",23,0)
 . I IBCURR="A" D  Q
"RTN","IBCEFP",24,0)
 .. N IBRESARR
"RTN","IBCEFP",25,0)
 .. S IBLIMIT=5
"RTN","IBCEFP",26,0)
 .. D PROVINF(IBIFN,1,.IBRESARR,1,"C",IBFRMTYP,IBCARE,IBLIMIT,IBCURR,.IBXDATA)
"RTN","IBCEFP",27,0)
 .. M IBXSAVE=IBRESARR
"RTN","IBCEFP",28,0)
 .. S IBXSAVE("PROVINF",IBIFN)=IBIFN
"RTN","IBCEFP",29,0)
 . ; END IB*2.0*447 BI
"RTN","IBCEFP",30,0)
 . F CUROTH="C","O" D PROVIDER(IBIFN,CUROTH,.IBZ,IBFRMTYP,IBCARE,IBCURR,.IBXDATA) M IBXSAVE=IBZ
"RTN","IBCEFP",31,0)
 . S IBXSAVE("PROVINF",IBIFN)=IBIFN
"RTN","IBCEFP",32,0)
 . Q
"RTN","IBCEFP",33,0)
 ;
"RTN","IBCEFP",34,0)
 D LFIDS^IBCEF76(IBIFN,.IBXSAVE,IBSTRIP,SEG)   ; Get the Lab/Facility IDs
"RTN","IBCEFP",35,0)
 S NPI=$P($$ORGNPI^IBCEF73A(IBIFN),U,1)
"RTN","IBCEFP",36,0)
 F CUROTH="C","O" D
"RTN","IBCEFP",37,0)
 . S IBXSAVE("LAB/FAC",IBIFN,CUROTH,1,0)=$S(NPI]"":"XX",1:"")_U_NPI
"RTN","IBCEFP",38,0)
 ;
"RTN","IBCEFP",39,0)
 S IBFRMTYP=$$FT^IBCEF(IBIFN)
"RTN","IBCEFP",40,0)
 S ARIEN=$S(IBFRMTYP=2:3,1:4)
"RTN","IBCEFP",41,0)
 S IBCCOB=$$COBN^IBCEF(IBIFN)  ; Current Insurance
"RTN","IBCEFP",42,0)
 F COB=1:1:3 D
"RTN","IBCEFP",43,0)
 . S SORT1=$S(COB=IBCCOB:"C",1:"O")
"RTN","IBCEFP",44,0)
 . S SORT2=$S(SORT1="C":1,COB=1:1,COB=2&(IBCCOB=1):1,1:2)
"RTN","IBCEFP",45,0)
 . S ARINFO=$G(IBXSAVE("PROVINF",IBIFN,SORT1,SORT2,ARIEN,1))
"RTN","IBCEFP",46,0)
 . ;
"RTN","IBCEFP",47,0)
 . D BPIDS^IBCEF75(IBIFN,.IBXSAVE,SORT1,SORT2,COB,IBSTRIP,SEG)
"RTN","IBCEFP",48,0)
 ;
"RTN","IBCEFP",49,0)
 D EN^IBCEF81(.IBXSAVE)
"RTN","IBCEFP",50,0)
 ;
"RTN","IBCEFP",51,0)
 I SEG="OPR1" D
"RTN","IBCEFP",52,0)
 . I '$D(IBXSAVE("PROVINF",IBIFN,"C",1,3)) D  G ALLIDSQ
"RTN","IBCEFP",53,0)
 .. N SLC,CRED S SLC=0
"RTN","IBCEFP",54,0)
 .. F  S SLC=$O(IBXSAVE("L-PROV",IBIFN,SLC)) Q:'SLC  D  I $D(IBXSAVE("PROVINF",IBIFN,"C",1,3,"NAME")) Q
"RTN","IBCEFP",55,0)
 ... S CRED=$P($G(IBXSAVE("L-PROV",IBIFN,SLC,"C",1,3,"NAME")),U,4)
"RTN","IBCEFP",56,0)
 ... I CRED]"" S $P(IBXSAVE("PROVINF",IBIFN,"C",1,3,"NAME"),U,4)=CRED
"RTN","IBCEFP",57,0)
 ;
"RTN","IBCEFP",58,0)
 I SEG="LPUR"!(SEG="LPUR1"),$$SUB1OK^IBCEP8A(IBIFN),$G(IBXSAVE("SLC")) D  G ALLIDSQ
"RTN","IBCEFP",59,0)
 . N IBCNT,OUT
"RTN","IBCEFP",60,0)
 . ;IB*2.0*473/TAZ - Moved ID lookup into seperate function.
"RTN","IBCEFP",61,0)
 . D PSID(IBIFN,.IBXSAVE,.IDS)
"RTN","IBCEFP",62,0)
 . ;IB*2.0*473/TAZ - END
"RTN","IBCEFP",63,0)
 . S $P(OUT,U,6)=IDS(0)
"RTN","IBCEFP",64,0)
 . S $P(OUT,U,7,8)=IDS(1) ; secondary id (1) ^ secondary id qualifier(1)
"RTN","IBCEFP",65,0)
 . F IBCNT=1:1:IBXSAVE("SLC") S IBXSAVE("SLPRV",IBCNT)=OUT,IBXSAVE("SLPRV",IBCNT,"SLC")=IBCNT
"RTN","IBCEFP",66,0)
 ;
"RTN","IBCEFP",67,0)
 I SEG="LOPE" D SLPRV(IBIFN,.IBXSAVE,2) G ALLIDSQ
"RTN","IBCEFP",68,0)
 I SEG="LOP1" D SLPRV(IBIFN,.IBXSAVE,9) G ALLIDSQ
"RTN","IBCEFP",69,0)
 I SEG="LREN" D SLPRV(IBIFN,.IBXSAVE,3) G ALLIDSQ
"RTN","IBCEFP",70,0)
 I SEG="LSUP" D SLPRV(IBIFN,.IBXSAVE,5) G ALLIDSQ
"RTN","IBCEFP",71,0)
 I SEG="LREF" D SLPRV(IBIFN,.IBXSAVE,1) G ALLIDSQ
"RTN","IBCEFP",72,0)
 ;JWS;IB*2.0*592;US131
"RTN","IBCEFP",73,0)
 I SEG="LSUR" D SLPRV(IBIFN,.IBXSAVE,6) G ALLIDSQ
"RTN","IBCEFP",74,0)
 I SEG="LSR1" D SLPRV(IBIFN,.IBXSAVE,6) G ALLIDSQ
"RTN","IBCEFP",75,0)
 ;
"RTN","IBCEFP",76,0)
ALLIDSQ ;
"RTN","IBCEFP",77,0)
 Q
"RTN","IBCEFP",78,0)
 ;
"RTN","IBCEFP",79,0)
PSID(IBIFN,IBXPROV,IBXIDS) ; Build array of either the Fac/Lab ID or Rendering Provider IDs
"RTN","IBCEFP",80,0)
 ;IB*2.0*473/TAZ - Created a function to standardize IDs in LDAT and LPUR
"RTN","IBCEFP",81,0)
 ; Input:
"RTN","IBCEFP",82,0)
 ;   IBXIEN - Internal Entry Number of claim
"RTN","IBCEFP",83,0)
 ;   IBXPROV - Provider Array
"RTN","IBCEFP",84,0)
 ;   IBXIDS - Array for IDs
"RTN","IBCEFP",85,0)
 ; Output:
"RTN","IBCEFP",86,0)
 ;   IBXIDS(0) - Primary ID
"RTN","IBCEFP",87,0)
 ;   IBXIDS(1) - Secondary ID
"RTN","IBCEFP",88,0)
 ;
"RTN","IBCEFP",89,0)
 N LINE,PLINE,PID,SID,SIDQ
"RTN","IBCEFP",90,0)
 K IBXIDS
"RTN","IBCEFP",91,0)
 ; Get Lab/Facility IDs
"RTN","IBCEFP",92,0)
 S (PID,SID,SIDQ)=""
"RTN","IBCEFP",93,0)
 S PID=$P($G(IBXPROV("LAB/FAC",IBIFN,"C",1,0)),U,2)
"RTN","IBCEFP",94,0)
 F LINE=1:1 Q:'$D(IBXPROV("LAB/FAC",IBIFN,"C",1,LINE))  D  I SID'="" Q
"RTN","IBCEFP",95,0)
 . S SIDQ=$P($G(IBXPROV("LAB/FAC",IBIFN,"C",1,LINE)),U) I ",0B,1G,G2,"'[(","_SIDQ_",") S SIDQ="" Q
"RTN","IBCEFP",96,0)
 . S SID=$P($G(IBXPROV("LAB/FAC",IBIFN,"C",1,LINE)),U,2)
"RTN","IBCEFP",97,0)
 I $L(PID)!$L(SID) S IBXIDS(0)=PID,IBXIDS(1)=SID_U_SIDQ G PSIDQ
"RTN","IBCEFP",98,0)
 ; Get Claim Level Rendering Provider IDs
"RTN","IBCEFP",99,0)
 S PID=$P($G(IBXPROV("PROVINF",IBIFN,"C",1,3,0)),U,4)  ; Get claim level Rendering Provider NPI
"RTN","IBCEFP",100,0)
 F LINE=1:1 Q:'$D(IBXPROV("PROVINF",IBIFN,"C",1,3,LINE))  D  I SID'="" Q
"RTN","IBCEFP",101,0)
 . S SIDQ=$P($G(IBXPROV("PROVINF",IBIFN,"C",1,3,LINE)),U,3) I ",0B,1G,G2,"'[(","_SIDQ_",") S SIDQ="" Q
"RTN","IBCEFP",102,0)
 . S SID=$P($G(IBXPROV("PROVINF",IBIFN,"C",1,3,LINE)),U,4)
"RTN","IBCEFP",103,0)
 I $L(PID)!$L(SID) S IBXIDS(0)=PID,IBXIDS(1)=SID_U_SIDQ G PSIDQ
"RTN","IBCEFP",104,0)
 ; Get Line Level Rendering Provider IDs
"RTN","IBCEFP",105,0)
 F PLINE=1:1 Q:'$D(IBXPROV("L-PROV",IBIFN,PLINE))  D  I $L(PID)!$L(SID) Q
"RTN","IBCEFP",106,0)
 . S PID=$P($G(IBXPROV("L-PROV",IBIFN,PLINE,"C",1,3,0)),U,4)
"RTN","IBCEFP",107,0)
 . F LINE=1:1 Q:'$D(IBXPROV("L-PROV",IBIFN,PLINE,"C",1,3,LINE))  D  I SID'="" Q
"RTN","IBCEFP",108,0)
 .. S SIDQ=$P($G(IBXPROV("L-PROV",IBIFN,PLINE,"C",1,3,LINE)),U,3) I ",0B,1G,G2,"'[(","_SIDQ_",") S SIDQ="" Q
"RTN","IBCEFP",109,0)
 .. S SID=$P($G(IBXPROV("L-PROV",IBIFN,PLINE,"C",1,3,LINE)),U,4)
"RTN","IBCEFP",110,0)
 I $L(PID)!$L(SID) S IBXIDS(0)=PID,IBXIDS(1)=SID_U_SIDQ
"RTN","IBCEFP",111,0)
PSIDQ ;
"RTN","IBCEFP",112,0)
 Q
"RTN","IBCEFP",113,0)
 ;
"RTN","IBCEFP",114,0)
SLPRV(IBXIEN,IBX,PRTYPE) ;Build SLPRV nodes for the line provider type record
"RTN","IBCEFP",115,0)
 N SLC,DATA,IBCNT,NAME,OUT
"RTN","IBCEFP",116,0)
 S (SLC,IBCNT)=0
"RTN","IBCEFP",117,0)
 F  S SLC=$O(IBX("L-PROV",IBXIEN,SLC)) Q:'SLC  D
"RTN","IBCEFP",118,0)
 . I '$D(IBX("L-PROV",IBXIEN,SLC,"C",1,PRTYPE)) Q
"RTN","IBCEFP",119,0)
 . S NAME=$G(IBX("L-PROV",IBXIEN,SLC,"C",1,PRTYPE,"NAME"))
"RTN","IBCEFP",120,0)
 . S OUT=$P(NAME,U,1,3)_U_$P(NAME,U,5)_U_$G(IBX("L-PROV",IBXIEN,SLC,"C",1,PRTYPE,"TAXONOMY"))_U_$P($G(IBX("L-PROV",IBXIEN,SLC,"C",1,PRTYPE,0)),U,4)
"RTN","IBCEFP",121,0)
 . F IBN=1:1 Q:'$D(IBX("L-PROV",IBXIEN,SLC,"C",1,PRTYPE,IBN))  D
"RTN","IBCEFP",122,0)
 .. S DATA=$G(IBX("L-PROV",IBXIEN,SLC,"C",1,PRTYPE,IBN))
"RTN","IBCEFP",123,0)
 .. I ",0B,1G,G2,LU,"[(","_$P(DATA,U,3)_",") S OUT=OUT_U_$P(DATA,U,4)_U_$P(DATA,U,3)
"RTN","IBCEFP",124,0)
 . S IBCNT=IBCNT+1
"RTN","IBCEFP",125,0)
 . S IBX("SLPRV",IBCNT)=OUT
"RTN","IBCEFP",126,0)
 . S IBX("SLPRV",IBCNT,"SLC")=SLC
"RTN","IBCEFP",127,0)
SLPRVQ ;
"RTN","IBCEFP",128,0)
 Q
"RTN","IBCEFP",129,0)
 ;
"RTN","IBCEFP",130,0)
 ;PROVIDER
"RTN","IBCEFP",131,0)
 ;Input:
"RTN","IBCEFP",132,0)
 ; IB399 - ien of #399
"RTN","IBCEFP",133,0)
 ; IBPROV:
"RTN","IBCEFP",134,0)
 ;   "C"- to get info for CURRENT provider
"RTN","IBCEFP",135,0)
 ;   "O"- to get info for all others (in this case the array will contain info fot two providers
"RTN","IBCEFP",136,0)
 ; IBRES - array for results (by reference)
"RTN","IBCEFP",137,0)
 ; IBFRMTYP - Form Type
"RTN","IBCEFP",138,0)
 ; IBCARE - Care Type
"RTN","IBCEFP",139,0)
 ; IBCURR - current bill payer sequence
"RTN","IBCEFP",140,0)
 ;
"RTN","IBCEFP",141,0)
 ;Output:
"RTN","IBCEFP",142,0)
 ; IBRES - array to get back info (by reference)
"RTN","IBCEFP",143,0)
 ; IBRES(IBPROV,PRNUM,PRTYPE,SEQ#)=PROV^INSUR^IDTYPE^ID^FORMTYP^CARETYP
"RTN","IBCEFP",144,0)
 ; where:
"RTN","IBCEFP",145,0)
 ; IBPROV - see input parameter
"RTN","IBCEFP",146,0)
 ; PRNUM: 1=primary insurance provider, 2= secondary, 3 -tretiary
"RTN","IBCEFP",147,0)
 ; PRTYPE: Provider type(FUNCTION) 
"RTN","IBCEFP",148,0)
 ; SEQ# : sequence number (1st is used for ID1, 2nd - for ID2, etc)
"RTN","IBCEFP",149,0)
 ; PROV : provider/VARIABLEPTR
"RTN","IBCEFP",150,0)
 ; INSUR: Insurance PTR #36 or NONE
"RTN","IBCEFP",151,0)
 ; IDTYPE: ID type
"RTN","IBCEFP",152,0)
 ; ID: ID 
"RTN","IBCEFP",153,0)
 ; FORMTYP: Form type 1=UB,2=1500
"RTN","IBCEFP",154,0)
 ; CARETYP: Care type 0=both inp/outp,1=inpatient, 2=outpatient
"RTN","IBCEFP",155,0)
PROVIDER(IB399,IBPROV,IBRES,IBFRMTYP,IBCARE,IBCURR,IBXDATA) ;
"RTN","IBCEFP",156,0)
 N IBZ,IBRESARR,IBLIMIT
"RTN","IBCEFP",157,0)
 S IBRESARR=""
"RTN","IBCEFP",158,0)
 Q:IBCURR="A"  ;PATIENT's bill IB*2.0*447 BI Changes IBPROV to IBCURR
"RTN","IBCEFP",159,0)
 I IBPROV="C" D
"RTN","IBCEFP",160,0)
 . S IBLIMIT=5
"RTN","IBCEFP",161,0)
 . D:$$ISINSUR^IBCEF71(IBCURR,IB399) PROVINF(IB399,$S(IBCURR="T":3,IBCURR="S":2,IBCURR="P":1,1:1),.IBRESARR,1,IBPROV,IBFRMTYP,IBCARE,IBLIMIT,IBCURR,.IBXDATA)
"RTN","IBCEFP",162,0)
 I IBPROV="O" D
"RTN","IBCEFP",163,0)
 . S IBLIMIT=3
"RTN","IBCEFP",164,0)
 . I IBCURR="P" D
"RTN","IBCEFP",165,0)
 .. D:$$ISINSUR^IBCEF71("S",IB399) PROVINF(IB399,2,.IBRESARR,1,IBPROV,IBFRMTYP,IBCARE,IBLIMIT,IBCURR,.IBXDATA)
"RTN","IBCEFP",166,0)
 .. D:$$ISINSUR^IBCEF71("T",IB399) PROVINF(IB399,3,.IBRESARR,2,IBPROV,IBFRMTYP,IBCARE,IBLIMIT,IBCURR,.IBXDATA)
"RTN","IBCEFP",167,0)
 . I IBCURR="S" D
"RTN","IBCEFP",168,0)
 .. D:$$ISINSUR^IBCEF71("P",IB399) PROVINF(IB399,1,.IBRESARR,1,IBPROV,IBFRMTYP,IBCARE,IBLIMIT,IBCURR,.IBXDATA)
"RTN","IBCEFP",169,0)
 .. D:$$ISINSUR^IBCEF71("T",IB399) PROVINF(IB399,3,.IBRESARR,2,IBPROV,IBFRMTYP,IBCARE,IBLIMIT,IBCURR,.IBXDATA)
"RTN","IBCEFP",170,0)
 . I IBCURR="T" D
"RTN","IBCEFP",171,0)
 .. D:$$ISINSUR^IBCEF71("P",IB399) PROVINF(IB399,1,.IBRESARR,1,IBPROV,IBFRMTYP,IBCARE,IBLIMIT,IBCURR,.IBXDATA)
"RTN","IBCEFP",172,0)
 .. D:$$ISINSUR^IBCEF71("S",IB399) PROVINF(IB399,2,.IBRESARR,2,IBPROV,IBFRMTYP,IBCARE,IBLIMIT,IBCURR,.IBXDATA)
"RTN","IBCEFP",173,0)
 M IBRES=IBRESARR
"RTN","IBCEFP",174,0)
 Q
"RTN","IBCEFP",175,0)
 ;
"RTN","IBCEFP",176,0)
 ;-- PROVINF --
"RTN","IBCEFP",177,0)
 ;Create array with prov info
"RTN","IBCEFP",178,0)
 ;Input:
"RTN","IBCEFP",179,0)
 ; IB399 - ien #399
"RTN","IBCEFP",180,0)
 ; IBPRNUM - 1=prim ins, 2= sec, 3 -tert
"RTN","IBCEFP",181,0)
 ; IBRES - for results
"RTN","IBCEFP",182,0)
 ; IBSORT - to sort OTHER INSURANCE data 
"RTN","IBCEFP",183,0)
 ;  if PROVINF is called for "C" mode of PROVIDER subroutine then 
"RTN","IBCEFP",184,0)
 ;    IBSORT can be any (say 1)
"RTN","IBCEFP",185,0)
 ;  if PROVINF is called for "O" mode then can be more than set of data
"RTN","IBCEFP",186,0)
 ;    - need to sort array to use it (like IBXDATA(1) and IBXDATA(2))
"RTN","IBCEFP",187,0)
 ;    for mode "O" it should be 1 or 2 (see PROVIDER section)
"RTN","IBCEFP",188,0)
 ;IBINSTP -  "C" -current ins, "O"-other
"RTN","IBCEFP",189,0)
 ;IBFRMTYP - Form Type
"RTN","IBCEFP",190,0)
 ;IBCARE - Care Type
"RTN","IBCEFP",191,0)
 ;IBLIMIT - Limits on Secondary
"RTN","IBCEFP",192,0)
 ;IBCURR - Current Insurance
"RTN","IBCEFP",193,0)
 ;IBXDAYA - Revenue Code Array
"RTN","IBCEFP",194,0)
 ;Output:
"RTN","IBCEFP",195,0)
 ; IBRES(PRNUM,PRTYPE,SEQ#)=PROV^INSUR^IDTYPE^ID^FORMTYP^CARETYP
"RTN","IBCEFP",196,0)
 ; where:(see PROVIDER)
"RTN","IBCEFP",197,0)
PROVINF(IB399,IBPRNUM,IBRES,IBSORT,IBINSTP,IBFRMTYP,IBCARE,IBLIMIT,IBCURR,IBXDATA) ;
"RTN","IBCEFP",198,0)
 I $G(IB399)="" G PROVINFQ
"RTN","IBCEFP",199,0)
 I $G(IBINSTP)="" G PROVINFQ
"RTN","IBCEFP",200,0)
 I +$G(IBSORT)=0 S IBSORT=$G(IBPRNUM)
"RTN","IBCEFP",201,0)
 N IBPRTYP,IBINSCO,IBPROV,IB35591,IBN,IBEXC
"RTN","IBCEFP",202,0)
 S IBN=0
"RTN","IBCEFP",203,0)
 S IBINSCO=+$P($G(^DGCR(399,IB399,"M")),"^",IBPRNUM)
"RTN","IBCEFP",204,0)
 S IB35591=$$CH35591^IBCEF72(IBINSCO,IBFRMTYP,IBCARE)
"RTN","IBCEFP",205,0)
 S IBPRTYP=0
"RTN","IBCEFP",206,0)
 F  S IBPRTYP=$O(^DGCR(399,IB399,"PRV","B",IBPRTYP)) Q:'IBPRTYP  D
"RTN","IBCEFP",207,0)
 . N Z,IB355OV,IBPROV,IBARR
"RTN","IBCEFP",208,0)
 . S IBPROV=$$PROVPTR(IB399,IBPRTYP,0),IBEXC=""
"RTN","IBCEFP",209,0)
 . Q:+IBPROV=0
"RTN","IBCEFP",210,0)
 . S Z=$O(^DGCR(399,IB399,"PRV","B",IBPRTYP,0)) I Z S Z=$G(^DGCR(399,IB399,"PRV",Z,0))
"RTN","IBCEFP",211,0)
 . D GETPRV(IBINSCO,IBFRMTYP,IBCARE,IBPROV,.IBARR,IBPRTYP,IBINSTP,Z)
"RTN","IBCEFP",212,0)
 . M IBRES("PROVINF",IB399,IBINSTP)=IBARR
"RTN","IBCEFP",213,0)
 I $D(IBRES("PROVINF",IB399,IBINSTP,IBSORT))>1 S IBRES("PROVINF",IB399,IBINSTP,IBSORT)=$S(IBPRNUM=3:"T",IBPRNUM=2:"S",1:"P")
"RTN","IBCEFP",214,0)
 N SLC,CPLNK
"RTN","IBCEFP",215,0)
 S SLC=0
"RTN","IBCEFP",216,0)
 F  S SLC=$O(IBXDATA(SLC)) Q:'SLC   S IBXSAVE("SLC")=+SLC D
"RTN","IBCEFP",217,0)
 . S CPLNK=$G(IBXDATA(SLC,"CPLNK")) I 'CPLNK Q
"RTN","IBCEFP",218,0)
 . S IBPRTYP=0
"RTN","IBCEFP",219,0)
 . F  S IBPRTYP=$O(^DGCR(399,IB399,"CP",CPLNK,"LNPRV","B",IBPRTYP)) Q:'IBPRTYP  D
"RTN","IBCEFP",220,0)
 .. N Z,IBPROV,IBARR
"RTN","IBCEFP",221,0)
 .. S IBPROV=$$PROVPTR(IB399,IBPRTYP,CPLNK),IBEXC=""
"RTN","IBCEFP",222,0)
 .. Q:'+IBPROV
"RTN","IBCEFP",223,0)
 .. S Z=$O(^DGCR(399,IB399,"CP",CPLNK,"LNPRV","B",IBPRTYP,0)) I Z S Z=$G(^DGCR(399,IB399,"CP",CPLNK,"LNPRV",Z,0))
"RTN","IBCEFP",224,0)
 .. D GETPRV(IBINSCO,IBFRMTYP,IBCARE,IBPROV,.IBARR,IBPRTYP,IBINSTP,Z)
"RTN","IBCEFP",225,0)
 .. M IBRES("L-PROV",IB399,SLC,IBINSTP)=IBARR
"RTN","IBCEFP",226,0)
 . I $D(IBRES("L-PROV",IB399,SLC,IBINSTP,IBSORT))>1 S IBRES("L-PROV",IB399,SLC,IBINSTP,IBSORT)=$S(IBPRNUM=3:"T",IBPRNUM=2:"S",1:"P")
"RTN","IBCEFP",227,0)
 ;
"RTN","IBCEFP",228,0)
PROVINFQ ;Exit PROVINF
"RTN","IBCEFP",229,0)
 Q
"RTN","IBCEFP",230,0)
 ;
"RTN","IBCEFP",231,0)
GETPRV(IBINSCO,IBFRMTYP,IBCARE,IBPROV,IBRES,IBPRTYP,IBINSTP,IBD) ;
"RTN","IBCEFP",232,0)
 I "CO"'[$G(IBINSTP) G GETPRVQ
"RTN","IBCEFP",233,0)
 N IBRETARR,IBNPI,IBN,IBMRAND,IB355OV S IBRETARR=0,IB355OV=""
"RTN","IBCEFP",234,0)
 D PRACT^IBCEF71(IBINSCO,IBFRMTYP,IBCARE,IBPROV,.IBRETARR,IBPRTYP,$G(IBINSTP))
"RTN","IBCEFP",235,0)
 I $P(IBD,U,IBPRNUM+4)'="",$P(IBD,U,IBPRNUM+11)'="" S IB355OV=$P(IBD,U,IBPRNUM+4)_U_$P(IBD,U,IBPRNUM+11)
"RTN","IBCEFP",236,0)
 S IBN=0,IBMRAND=$$MCRONBIL^IBEFUNC(IB399)
"RTN","IBCEFP",237,0)
 ;Calculate MEDICARE (WNR) specific provider qualifier and ID for CMS-1500 secondary claims
"RTN","IBCEFP",238,0)
 I "34"[$G(IBPRTYP),$G(IBFRMTYP)=2,IBMRAND S IB355OV=$$MCR24K^IBCEU3(IB399,IBPROV)_"^12"
"RTN","IBCEFP",239,0)
 I $P(IB355OV,U,2) D
"RTN","IBCEFP",240,0)
 . I $$CHCKSEC^IBCEF73(IBFRMTYP,IBPRTYP,$G(IBINSTP),$P($G(^IBE(355.97,+$P(IB355OV,U,2),0)),U,3)) D
"RTN","IBCEFP",241,0)
 .. S IBEXC=$P(IB355OV,U,2),IBN=IBN+1,IBRES(IBSORT,IBPRTYP,IBN)="OVERRIDE^"_IBINSCO_U_$P($G(^IBE(355.97,+IBEXC,0)),U,3)_U_$P(IB355OV,U)_"^^^^^"_+IBEXC
"RTN","IBCEFP",242,0)
 I IB35591'="",IBEXC'=$P(IB35591,U,3) I $$CHCKSEC^IBCEF73(IBFRMTYP,IBPRTYP,$G(IBINSTP),$P(IB35591,"^")) D
"RTN","IBCEFP",243,0)
 . S IBN=IBN+1,IBRES(IBSORT,IBPRTYP,IBN)="DEFAULT^"_IBINSCO_"^"_IB35591_"^^",$P(IBRES(IBSORT,IBPRTYP,IBN),U,9)=$P(IB35591,U,3)
"RTN","IBCEFP",244,0)
 S IBNPI=$$NPI^IBCEFP1(IBPROV)
"RTN","IBCEFP",245,0)
 D SORT^IBCEF77(IBSORT,IBPRTYP,IB399,.IBRETARR,.IBRES,IBN,IBEXC,IBPRNUM,IBLIMIT)
"RTN","IBCEFP",246,0)
 S IBRES(IBSORT,IBPRTYP,0)="PRIMARY"_U_U_$$STRIP^IBCEF76($S(IBNPI]"":"XX",1:"")_U_IBNPI,1,U,IBSTRIP)
"RTN","IBCEFP",247,0)
 F IBN=1:1 Q:'$D(IBRES(IBSORT,IBPRTYP,IBN))  S $P(IBRES(IBSORT,IBPRTYP,IBN),U,3,4)=$$STRIP^IBCEF76($P(IBRES(IBSORT,IBPRTYP,IBN),U,3,4),1,U,IBSTRIP)
"RTN","IBCEFP",248,0)
 S IBRES(IBSORT,IBPRTYP,"NAME")=$$NAME^IBCEFP1(IBPROV,IBIFN,$P(IBD,U,3),$P(IBD,U,8))
"RTN","IBCEFP",249,0)
 S IBRES(IBSORT,IBPRTYP,"ENTITY TYPE")=$S(IBPROV'["355.93,":1,$P($G(^IBA(355.93,+IBPROV,0)),U,2)=2:1,1:2)
"RTN","IBCEFP",250,0)
 S IBRES(IBSORT,IBPRTYP,"TAXONOMY")=$$TAXON^IBCEFP1(IBPROV,$P(IBD,U,15))
"RTN","IBCEFP",251,0)
 S IBRES(IBSORT,IBPRTYP,"COBID")=$$COBID^IBCEFP1(IB399,IBPRTYP,IBMRAND,IBD)
"RTN","IBCEFP",252,0)
 S IBRES(IBSORT,IBPRTYP)=IBPROV
"RTN","IBCEFP",253,0)
GETPRVQ ;
"RTN","IBCEFP",254,0)
 Q
"RTN","IBCEFP",255,0)
 ;
"RTN","IBCEFP",256,0)
PROVPTR(IBIEN399,IBFUNC,IBCP) ; Retrieve Provider Pointer from appropriate file
"RTN","IBCEFP",257,0)
 N IBN,RSLT
"RTN","IBCEFP",258,0)
 S IBCP=+$G(IBCP)
"RTN","IBCEFP",259,0)
 I 'IBCP D
"RTN","IBCEFP",260,0)
 . S IBN=$O(^DGCR(399,IBIEN399,"PRV","B",IBFUNC,0))
"RTN","IBCEFP",261,0)
 . I +IBN=0 S RSLT=0 Q
"RTN","IBCEFP",262,0)
 . S RSLT=$P($G(^DGCR(399,IBIEN399,"PRV",+IBN,0)),U,2)
"RTN","IBCEFP",263,0)
 I IBCP D
"RTN","IBCEFP",264,0)
 . S IBN=$O(^DGCR(399,IBIEN399,"CP",IBCP,"LNPRV","B",IBFUNC,0))
"RTN","IBCEFP",265,0)
 . I +IBN=0 S RSLT=0 Q
"RTN","IBCEFP",266,0)
 . S RSLT=$P($G(^DGCR(399,IBIEN399,"CP",IBCP,"LNPRV",+IBN,0)),U,2)
"RTN","IBCEFP",267,0)
 Q RSLT
"RTN","IBCEFP",268,0)
 ;
"RTN","IBCEFP",269,0)
 ;Input:
"RTN","IBCEFP",270,0)
 ;IBXIEN - Internal Entry Number for the current bill/claim
"RTN","IBCEFP",271,0)
 ;IBXSAVE - Array for returning the data
"RTN","IBCEFP",272,0)
 ;
"RTN","IBCEFP",273,0)
 ;Output:
"RTN","IBCEFP",274,0)
 ;IBXSAVE - Data Array
"RTN","IBCEFP",275,0)
AMB(IBXIEN,IBXSAVE) ; Gather Ambulance Data for AMB Record(s) - IB*2.0*447/TAZ
"RTN","IBCEFP",276,0)
 N NODE,CODE,CNT,IBXDATA
"RTN","IBCEFP",277,0)
 K IBXSAVE("AMB")
"RTN","IBCEFP",278,0)
 F NODE="U5","U6","U7" S IBXDATA=$G(^DGCR(399,IBXIEN,NODE)) I $TR(IBXDATA,U)'="" S IBXSAVE("AMB",NODE)=IBXDATA
"RTN","IBCEFP",279,0)
 S CODE="",CNT=0
"RTN","IBCEFP",280,0)
 F  S CODE=$O(^DGCR(399,IBXIEN,"U9","B",CODE)) Q:'CODE  D
"RTN","IBCEFP",281,0)
 . S IBXDATA=$P($G(^IBE(353.5,CODE,0)),U,1) I IBXDATA="" Q
"RTN","IBCEFP",282,0)
 . S CNT=CNT+1,IBXSAVE("AMB","U9",CNT)=IBXDATA
"RTN","IBCEFP",283,0)
 Q
"RTN","IBCEFP",284,0)
 ;
"RTN","IBCEFP",285,0)
SNDS2(IBXDATA,PIECE) ;Determine if a SUB2 record is necessary.
"RTN","IBCEFP",286,0)
 ; Input: IBXDATA
"RTN","IBCEFP",287,0)
 ;       May contain data from field 232 of file 399.
"RTN","IBCEFP",288,0)
 ; Output: IBXDATA
"RTN","IBCEFP",289,0)
 ;       Returns Output for piece 2 or 3 or 1 for any other piece (like 1.5)
"RTN","IBCEFP",290,0)
 ;Any time that ONE of the following criteria is met we should send a SUB2 record
"RTN","IBCEFP",291,0)
 ; 1. Incoming IBXDATA is not null SEND - Non-VA facility in field 232 of file 399
"RTN","IBCEFP",292,0)
 ; 2. If the service facility is a VA Institution in file 4 or a non-VA facility in file 355.93 SEND
"RTN","IBCEFP",293,0)
 ; 3. Not a switchback payer $$SENDSF^IBCEF79(IBXIEN)'=0 SEND
"RTN","IBCEFP",294,0)
 ;
"RTN","IBCEFP",295,0)
 ; MRD;IB*2.0*516 - Due to fields being marked for deletion, the
"RTN","IBCEFP",296,0)
 ; function $$SENDSF^IBCEF79 will always return '1'.  Refer to
"RTN","IBCEFP",297,0)
 ; that function and INSFLGS^^IBCEF79 for more information.
"RTN","IBCEFP",298,0)
 ;
"RTN","IBCEFP",299,0)
 I IBXDATA="" D
"RTN","IBCEFP",300,0)
 . N Z
"RTN","IBCEFP",301,0)
 . S Z=$P($$B^IBCEF79(IBXIEN),U,3)
"RTN","IBCEFP",302,0)
 . ;S Z1=$$SENDSF^IBCEF79(IBXIEN)
"RTN","IBCEFP",303,0)
 . ;S IBXDATA=$S(Z="":0,'Z1:0,1:1)
"RTN","IBCEFP",304,0)
 . S IBXDATA=$S(Z="":0,1:1)
"RTN","IBCEFP",305,0)
 . Q
"RTN","IBCEFP",306,0)
 I 'IBXDATA S IBXDATA=""
"RTN","IBCEFP",307,0)
 I IBXDATA'="" S IBXDATA=$S(PIECE=2:77,PIECE=3:2,1:1)
"RTN","IBCEFP",308,0)
 Q IBXDATA
"RTN","IBCEM03")
0^78^B46770743^B45643062
"RTN","IBCEM03",1,0)
IBCEM03 ;ALB/TMP - 837 EDI RESUBMIT INDIVIDUAL BILL PROCESSING ;17-SEP-96
"RTN","IBCEM03",2,0)
 ;;2.0;INTEGRATED BILLING;**137,199,296,348,349,592**;21-MAR-94;Build 58
"RTN","IBCEM03",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEM03",4,0)
 Q
"RTN","IBCEM03",5,0)
 ;
"RTN","IBCEM03",6,0)
BILL2 ; Resubmit a transmitted bill with a new batch #
"RTN","IBCEM03",7,0)
 N DIC,DIR,DIE,DA,DR,IB,IB0,IBDA,IBDA1,IBE,IBSTAT,IBBDA,IBOK,IBNEW,Y,ZTSK,IBTEST
"RTN","IBCEM03",8,0)
 K ^TMP("IBEDI_TEST_BATCH",$J)
"RTN","IBCEM03",9,0)
 ;
"RTN","IBCEM03",10,0)
 S DIR("A")="ARE YOU RESUBMITTING CLAIMS FOR TESTING?: ",DIR("B")="NO",DIR(0)="YA" D ^DIR K DIR
"RTN","IBCEM03",11,0)
 I $D(DTOUT)!$D(DUOUT) Q
"RTN","IBCEM03",12,0)
 I +Y S ^TMP("IBEDI_TEST_BATCH",$J)=1
"RTN","IBCEM03",13,0)
ASK N DPTNOFZY S DPTNOFZY=1  ;Suppress PATIENT file fuzzy lookups
"RTN","IBCEM03",14,0)
 S IBTEST=+$G(^TMP("IBEDI_TEST_BATCH",$J))
"RTN","IBCEM03",15,0)
 ; Only auth or printed transmittable bill valid for non-test
"RTN","IBCEM03",16,0)
 ; All previously transmitted valid for test
"RTN","IBCEM03",17,0)
 S DIC="^DGCR(399,",DIC(0)="AEMQ",DIC("S")=$S('IBTEST:"I $P($G(^(""TX"")),U,2),$P($G(^(0)),U,13)'="""",""234""[$P($G(^(0)),U,13)",1:"I $O(^IBA(364,""B"",+Y,0))")
"RTN","IBCEM03",18,0)
 I IBTEST S DIC("A")="Select BILL/CLAIMS BILL NUMBER (FOR RESUBMIT AS TEST): "
"RTN","IBCEM03",19,0)
 D ^DIC K DIC
"RTN","IBCEM03",20,0)
 I Y<0 D  Q
"RTN","IBCEM03",21,0)
 . Q:'IBTEST
"RTN","IBCEM03",22,0)
 . I $O(^TMP("IBEDI_TEST_BATCH",$J,0)) D
"RTN","IBCEM03",23,0)
 .. M ^TMP("IBRESUBMIT",$J)=^TMP("IBEDI_TEST_BATCH",$J)
"RTN","IBCEM03",24,0)
 .. D ONE^IBCE837
"RTN","IBCEM03",25,0)
 . ;
"RTN","IBCEM03",26,0)
 . K ^TMP("IBEDI_TEST_BATCH",$J),^TMP("IBRESUBMIT",$J)
"RTN","IBCEM03",27,0)
 ;
"RTN","IBCEM03",28,0)
 S IBIFN=+Y,IBDA=+$$LAST364^IBCEF4(IBIFN),IB0=$G(^IBA(364,IBDA,0)),IBSTAT=$P(IB0,U,3)
"RTN","IBCEM03",29,0)
 ;
"RTN","IBCEM03",30,0)
 I IB0="" W !,"Bill does not exist in BILL TRANSMISSION file" G ASK
"RTN","IBCEM03",31,0)
 I IBTEST,$D(^TMP("IBEDI_TEST_BATCH",$J,IBDA)) W !,"Bill already selected for test transmission" G ASK
"RTN","IBCEM03",32,0)
 I $$COBN^IBCEF(IBIFN)=1,IBTEST S IBOK=1 D  G:'IBOK ASK
"RTN","IBCEM03",33,0)
 . S DIR("A")="BILL IS A PRIMARY BILL, ARE YOU SURE YOU WANT TO SEND IT AS A TEST CLAIM?: "
"RTN","IBCEM03",34,0)
 . S DIR("B")="NO",DIR(0)="YA" W ! D ^DIR K DIR
"RTN","IBCEM03",35,0)
 . I Y'=1 S IBOK=0
"RTN","IBCEM03",36,0)
 ;
"RTN","IBCEM03",37,0)
 I 'IBTEST,IBSTAT="X" W !,"Bill is currently awaiting extract - will be submitted with next batch run" G ASK
"RTN","IBCEM03",38,0)
 S IBBDA=+$P(IB0,U,2),IB=$P($G(^IBA(364.1,IBBDA,0)),U,9)
"RTN","IBCEM03",39,0)
 ;
"RTN","IBCEM03",40,0)
 I IB,'IBTEST D  G:'IBOK ASK
"RTN","IBCEM03",41,0)
 . S IBOK=1,ZTSK=IB D STAT^%ZTLOAD
"RTN","IBCEM03",42,0)
 . I ZTSK(0)=0 S DIE="^IBA(364.1,",DA=IBBDA,DR=".09///@" D ^DIE Q  ;Task not scheduled - delete task #
"RTN","IBCEM03",43,0)
 . I "125"[ZTSK(1) W *7,!,"Cannot resubmit this bill.",!,"This bill's current batch is already ",$S("2"[ZTSK(1):"being resubmitted",1:"scheduled for resubmission")," - Task # is: ",IB,! S IBOK=0
"RTN","IBCEM03",44,0)
 ;
"RTN","IBCEM03",45,0)
 W !
"RTN","IBCEM03",46,0)
 S DIR("A",1)="   Previously In Batch #: "_$$EXPAND^IBTRE(364,.02,$P(IB0,U,2))
"RTN","IBCEM03",47,0)
 S DIR("A",2)="Bill Transmission Status: "_$$EXPAND^IBTRE(364,.03,IBSTAT)
"RTN","IBCEM03",48,0)
 S DIR("A",3)="             Status Date: "_$$FMTE^XLFDT($P(IB0,U,4),2)
"RTN","IBCEM03",49,0)
 S DIR("A",5)=" "
"RTN","IBCEM03",50,0)
 S DIR("A",4)="     Current Bill Status: "_$$EXPAND^IBTRE(399,.13,$P($G(^DGCR(399,+IBIFN,0)),U,13))
"RTN","IBCEM03",51,0)
 I 'IBTEST,IBSTAT'="P" S DIR("A",11)="WARNING - BILL TRANSMITTED PREVIOUSLY" S:IBSTAT?1"A".E DIR("A",11)=DIR("A",11)_" & CONFIRMED AS RECEIVED BY "_$P("AUSTIN^GENTRAN^INTERMEDIARY^CARRIER",U,$TR(IBSTAT,"A")+1)
"RTN","IBCEM03",52,0)
 S DIR("A")="ARE YOU SURE YOU WANT TO RESUBMIT THIS BILL"_$S('IBTEST:"",1:" AS A TEST CLAIM")_"?: "
"RTN","IBCEM03",53,0)
 S DIR(0)="YA",DIR("B")="NO"
"RTN","IBCEM03",54,0)
 D ^DIR K DIR
"RTN","IBCEM03",55,0)
 ;
"RTN","IBCEM03",56,0)
 W ! G:'Y ASK
"RTN","IBCEM03",57,0)
 ;
"RTN","IBCEM03",58,0)
 I IBTEST S ^TMP("IBEDI_TEST_BATCH",$J,IBDA)="" G ASK
"RTN","IBCEM03",59,0)
 ;
"RTN","IBCEM03",60,0)
 S IBDA1=+$$ADDTBILL^IBCB1(IBIFN) ;Add a new transmit bill record
"RTN","IBCEM03",61,0)
 ;
"RTN","IBCEM03",62,0)
 S Y=$$TX1^IBCB1(IBDA1,1)
"RTN","IBCEM03",63,0)
 ;
"RTN","IBCEM03",64,0)
 I 'Y D  G ASK
"RTN","IBCEM03",65,0)
 . W !,*7,"An error has occurred ... bill NOT re-submitted!!"
"RTN","IBCEM03",66,0)
 . S DIK="^IBA(364,",DA=IBDA1 D:DA ^DIK
"RTN","IBCEM03",67,0)
 . L -^IBA(364,IBDA)
"RTN","IBCEM03",68,0)
 ;
"RTN","IBCEM03",69,0)
 S IBNEW=$P($G(^IBA(364,+IBDA1,0)),U,2)
"RTN","IBCEM03",70,0)
 ;
"RTN","IBCEM03",71,0)
 ;Update the old transmit bill record
"RTN","IBCEM03",72,0)
 D UPDEDI^IBCEM(IBDA,"R")
"RTN","IBCEM03",73,0)
 ;
"RTN","IBCEM03",74,0)
 W !,"Bill # ",$P($G(^DGCR(399,+IB0,0)),U)," was re-submitted in batch # ",$P($G(^IBA(364.1,+IBNEW,0)),U)
"RTN","IBCEM03",75,0)
 ;
"RTN","IBCEM03",76,0)
 L -^IBA(364,IBDA)
"RTN","IBCEM03",77,0)
 G ASK
"RTN","IBCEM03",78,0)
 ;
"RTN","IBCEM03",79,0)
PRINT1(IBIFN,IBDA,IB364,IBRESUB) ; Print bill, submit manually as resolution
"RTN","IBCEM03",80,0)
 ; for a returned message
"RTN","IBCEM03",81,0)
 ; IBIFN = ien of bill in file 399
"RTN","IBCEM03",82,0)
 ; IBDA = array returned from selection of message
"RTN","IBCEM03",83,0)
 ; IB364 = ien of transmit bill entry in file 364
"RTN","IBCEM03",84,0)
 ; IBRESUB = flag to indicate if bill is being resubmitted via print
"RTN","IBCEM03",85,0)
 ;
"RTN","IBCEM03",86,0)
 N IBAC,IBV,IB399,DFN,ZTSK,PRCASV,IBHOLD,IBTXPRT
"RTN","IBCEM03",87,0)
 W !
"RTN","IBCEM03",88,0)
 I IBIFN="" S IBDA="" G PRINT1Q
"RTN","IBCEM03",89,0)
 S IB399=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEM03",90,0)
 I "34"'[$P(IB399,U,13) W !,*7,"Bill status must be AUTHORIZED or PRNT/TX to print the bill" S IBDA="" G PRINT1Q
"RTN","IBCEM03",91,0)
 ;
"RTN","IBCEM03",92,0)
 I $P($G(^DGCR(399,IBIFN,"S")),U,14)=DT W !,*7,"This bill was last printed today.  You must wait at least 1 day from the last",!,"print date to print this bill using this function." S IBDA="" D PAUSE^VALM1 G PRINT1Q
"RTN","IBCEM03",93,0)
 ;
"RTN","IBCEM03",94,0)
 S IBV=1,IBAC=4,DFN=$P(IB399,U,2),IBTXPRT=0
"RTN","IBCEM03",95,0)
 M IBHOLD("IBDA")=IBDA
"RTN","IBCEM03",96,0)
 D 4^IBCB1,ENS^%ZISS
"RTN","IBCEM03",97,0)
 M IBDA=IBHOLD("IBDA")
"RTN","IBCEM03",98,0)
 ;
"RTN","IBCEM03",99,0)
 I 'IBTXPRT W !,"Bill was not printed" S IBDA="" G PRINT1Q
"RTN","IBCEM03",100,0)
 ;
"RTN","IBCEM03",101,0)
 D UPDEDI^IBCEM(IB364,"P")
"RTN","IBCEM03",102,0)
 ;
"RTN","IBCEM03",103,0)
PRINT1Q Q
"RTN","IBCEM03",104,0)
 ;
"RTN","IBCEM03",105,0)
SUB1 ; Select bills in ready for extract status to transmit individually
"RTN","IBCEM03",106,0)
 N IB0,IB399,IBDA,IBIFN,IBSEL,IBU,X,Y,DA,DIC,Z,DIR
"RTN","IBCEM03",107,0)
 K ^TMP("IBSELX",$J)
"RTN","IBCEM03",108,0)
 ;
"RTN","IBCEM03",109,0)
 S IBSEL=""
"RTN","IBCEM03",110,0)
 F  D  Q:'IBSEL
"RTN","IBCEM03",111,0)
 . S DIR("S")="I $P(^(0),U,3)=""X"""
"RTN","IBCEM03",112,0)
 . S DIR(0)="PAO^364:AEMQ",DIR("A")="SELECT "_$S($D(^TMP("IBSELX",$J)):"NEXT ",1:"")_"BILL TO TRANSMIT: "
"RTN","IBCEM03",113,0)
 . S DIR("?")="ONLY BILLS IN 'READY FOR EXTRACT' STATUS CAN BE TRANSMITTED WITH THIS OPTION"
"RTN","IBCEM03",114,0)
 . D ^DIR K DIR
"RTN","IBCEM03",115,0)
 . I Y'>0 K:Y=U ^TMP("IBSELX",$J) S IBSEL="" Q
"RTN","IBCEM03",116,0)
 . S IBSEL=+Y
"RTN","IBCEM03",117,0)
 . S IBDA=+Y,IB0=$G(^IBA(364,IBDA,0)),IBIFN=+IB0,IBU=$G(^DGCR(399,IBIFN,"U")),IB399=$G(^(0))
"RTN","IBCEM03",118,0)
 . S Z=+$$NEEDMRA^IBEFUNC(IBIFN)
"RTN","IBCEM03",119,0)
 . I '$$TXMT^IBCEF4(IBIFN,.IBNOTX),IBNOTX=2 D  Q
"RTN","IBCEM03",120,0)
 .. W !,$S(Z:"MRA",1:"EDI")_" TRANSMISSION PARAMETER HAS BEEN TURNED OFF",!!,"BILL CANNOT BE SELECTED"
"RTN","IBCEM03",121,0)
 . ;
"RTN","IBCEM03",122,0)
 . W !
"RTN","IBCEM03",123,0)
 . ;JWS;IB*2.0*592; added form #7 J430D to display
"RTN","IBCEM03",124,0)
 . S DIR("A",1)="      YOU HAVE SELECTED BILL #: "_$P(IB399,U)_"  ("_$S($$INPAT^IBCEF(IBIFN):"INPATIENT",1:"OUTPATIENT")_"/"_$S($$FT^IBCEF(IBIFN)=3:"UB-04",$$FT^IBCEF(IBIFN)=7:"J430D",1:"CMS-1500")_" FORMAT)"
"RTN","IBCEM03",125,0)
 . S DIR("A",2)="                  PATIENT NAME: "_$E($P($G(^DPT(+$P(IB399,U,2),0)),U)_$J("",28),1,28)_"  SSN: "_$P($G(^DPT(+$P(IB399,U,2),0)),U,9)
"RTN","IBCEM03",126,0)
 . S DIR("A",3)="                  CARE DATE(S): "_$$EXPAND^IBTRE(399,151,$P(IBU,U))_" - "_$$EXPAND^IBTRE(399,152,$P(IBU,U,2))
"RTN","IBCEM03",127,0)
 . S DIR("A",4)="'READY TO EXTRACT' STATUS DATE: "_$$EXPAND^IBTRE(364,.04,$P(IB0,U,4))
"RTN","IBCEM03",128,0)
 . S DIR("?",1)=" "
"RTN","IBCEM03",129,0)
 . S DIR("A",5)=" ",DIR("?")="IF THIS IS THE BILL YOU WANT TO TRANSMIT, RESPOND YES, OTHERWISE, RESPOND NO"
"RTN","IBCEM03",130,0)
 . S DIR("A")="ARE YOU SURE THIS IS THE CORRECT BILL TO TRANSMIT?: "
"RTN","IBCEM03",131,0)
 . S DIR(0)="YAO",DIR("B")="NO" D ^DIR K DIR W !
"RTN","IBCEM03",132,0)
 . I Y'=1 W !,"BILL NOT SELECTED" Q
"RTN","IBCEM03",133,0)
 . ;
"RTN","IBCEM03",134,0)
 . S ^TMP("IBSELX",$J,IBDA)=""
"RTN","IBCEM03",135,0)
 ;
"RTN","IBCEM03",136,0)
 I '$O(^TMP("IBSELX",$J,0)) G SUB1Q
"RTN","IBCEM03",137,0)
 ;
"RTN","IBCEM03",138,0)
 W !,"Bills to be transmitted: "
"RTN","IBCEM03",139,0)
 S Z=0 F  S Z=$O(^TMP("IBSELX",$J,Z)) Q:'Z  W !,?8,$P($G(^DGCR(399,+$G(^IBA(364,Z,0)),0)),U)
"RTN","IBCEM03",140,0)
 W !
"RTN","IBCEM03",141,0)
 S DIR("A")="OK TO TRANSMIT NOW?: ",DIR(0)="YA0",DIR("B")="NO" D ^DIR K DIR
"RTN","IBCEM03",142,0)
 G:Y'=1 SUB1Q
"RTN","IBCEM03",143,0)
 W !
"RTN","IBCEM03",144,0)
 S ^TMP("IBSELX",$J)=0
"RTN","IBCEM03",145,0)
 D ONE^IBCE837
"RTN","IBCEM03",146,0)
 W !,"BILL(s) TRANSMITTED ... BATCH #(s): "
"RTN","IBCEM03",147,0)
 S Z=0 F  S Z=$O(^TMP("IBCE-BATCH",$J,Z)) Q:'Z  W Z,$S($O(^(Z)):", ",1:"")
"RTN","IBCEM03",148,0)
 I '$O(^TMP("IBCE-BATCH",$J,0)) W !,"NO BILL(S) TRANSMITTED - CHECK ALERTS/MAIL FOR DETAILS"
"RTN","IBCEM03",149,0)
 ;
"RTN","IBCEM03",150,0)
SUB1Q D PAUSE^VALM1
"RTN","IBCEM03",151,0)
 K ^TMP("IBSELX",$J),^TMP("IBCE-BATCH",$J)
"RTN","IBCEM03",152,0)
 Q
"RTN","IBCEM03",153,0)
 ;
"RTN","IBCEMQA")
0^127^B15379680^B15212408
"RTN","IBCEMQA",1,0)
IBCEMQA ;DAOU/ESG - MRA QUIET BILL AUTHORIZATION ;25-MAR-2003
"RTN","IBCEMQA",2,0)
 ;;2.0;INTEGRATED BILLING;**155,432,592**;21-MAR-94;Build 58
"RTN","IBCEMQA",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEMQA",4,0)
 ;
"RTN","IBCEMQA",5,0)
 Q   ; must be called at proper entry point
"RTN","IBCEMQA",6,0)
 ;
"RTN","IBCEMQA",7,0)
 ;
"RTN","IBCEMQA",8,0)
AUTOCOB(IBIFN,IBEOB,ERRMSG,IBMRANOT,IBNCN) ; This procedure mimics and automates the
"RTN","IBCEMQA",9,0)
 ; Process COB action on the MRA management screen.  This is intended
"RTN","IBCEMQA",10,0)
 ; to be called in background mode (no user interface).
"RTN","IBCEMQA",11,0)
 ;
"RTN","IBCEMQA",12,0)
 ; Input
"RTN","IBCEMQA",13,0)
 ;    IBIFN - bill#
"RTN","IBCEMQA",14,0)
 ;    IBEOB - ien of entry in file 361.1 (MRA)
"RTN","IBCEMQA",15,0)
 ;    IBMRANOT - 1 indicates process is NOT from MRA
"RTN","IBCEMQA",16,0)
 ;    IBNCN - By Reference.  Need to pass back the new claim number
"RTN","IBCEMQA",17,0)
 ;
"RTN","IBCEMQA",18,0)
 ; Output
"RTN","IBCEMQA",19,0)
 ;    ERRMSG - optional output parameter, passed by reference
"RTN","IBCEMQA",20,0)
 ;           - error message text
"RTN","IBCEMQA",21,0)
 ;
"RTN","IBCEMQA",22,0)
 ;JWS;IB*2.0*592; added IBQUIT to new - SQA
"RTN","IBCEMQA",23,0)
 NEW MRADATA,IB364,IBCBASK,IBCBCOPY,IBCAN,IBIFNH,IBAUTO,IBDA,IBQUIT
"RTN","IBCEMQA",24,0)
 NEW IBCE,IBSILENT,IBPRCOB,IBERRMSG,IBSTSM
"RTN","IBCEMQA",25,0)
 NEW IBCOB,IBCOBIL,IBCOBN,IBINS,IBINSN,IBINSOLD,IBMRAIO,IBMRAO,IBNMOLD
"RTN","IBCEMQA",26,0)
 S (IBIFN,IBIFNH)=+$G(IBIFN),IBEOB=+$G(IBEOB),ERRMSG=""
"RTN","IBCEMQA",27,0)
 ;
"RTN","IBCEMQA",28,0)
 S MRADATA=$G(^IBM(361.1,IBEOB,0))
"RTN","IBCEMQA",29,0)
 ; IB*2.0*432 - Add auto-process of non-MRA's
"RTN","IBCEMQA",30,0)
 I $G(IBMRANOT)'=1,$P(MRADATA,U,1)'=IBIFN S ERRMSG="Incorrect Bill or MRA EOB" G AUCOBX
"RTN","IBCEMQA",31,0)
 I $G(IBMRANOT)'=1,$P(MRADATA,U,4)'=1 S ERRMSG="EOB is not a Medicare MRA" G AUCOBX
"RTN","IBCEMQA",32,0)
 S IB364=+$P(MRADATA,U,19)
"RTN","IBCEMQA",33,0)
 I $G(IBMRANOT)'=1,'IB364 S ERRMSG="Missing or incorrect Transmission record" G AUCOBX
"RTN","IBCEMQA",34,0)
 ;
"RTN","IBCEMQA",35,0)
 I '$P($G(^DGCR(399,IBIFN,"I"_($$COBN^IBCEF(IBIFN)+1))),U,1) D  G AUCOBX
"RTN","IBCEMQA",36,0)
 . S ERRMSG="No next payer for this bill"
"RTN","IBCEMQA",37,0)
 . Q
"RTN","IBCEMQA",38,0)
 ;
"RTN","IBCEMQA",39,0)
 ; Make sure that Medicare WNR is the current insurance for this bill if MRA processing
"RTN","IBCEMQA",40,0)
 I $G(IBMRANOT)'=1,'$$WNRBILL^IBEFUNC(IBIFN) D  G AUCOBX
"RTN","IBCEMQA",41,0)
 . S ERRMSG="Medicare (WNR) is not the current payer for this bill"
"RTN","IBCEMQA",42,0)
 . Q
"RTN","IBCEMQA",43,0)
 ;
"RTN","IBCEMQA",44,0)
 ; Set variable flags for use in IBCCCB/IBCCC2
"RTN","IBCEMQA",45,0)
 S (IBCBASK,IBCBCOPY,IBCAN,IBAUTO,IBCE("EDI"),IBSILENT,IBPRCOB)=1
"RTN","IBCEMQA",46,0)
 ; IB*2.0*432 - if non-MRA processing, set Secondary/Tertiary Silent mode=1
"RTN","IBCEMQA",47,0)
 S:$G(IBMRANOT)=1 IBSTSM=1
"RTN","IBCEMQA",48,0)
 S IBDA=IBEOB
"RTN","IBCEMQA",49,0)
 ;
"RTN","IBCEMQA",50,0)
 D CHKB1^IBCCCB
"RTN","IBCEMQA",51,0)
 ;
"RTN","IBCEMQA",52,0)
 I $G(IBMRANOT)=1 S IBNCN=$S($G(IBCE("EDI","NEW")):IBCE("EDI","NEW"),1:$G(IBHV("IBIFN1")))
"RTN","IBCEMQA",53,0)
 S IBIFN=IBIFNH                                   ; restore bill#
"RTN","IBCEMQA",54,0)
 I $G(IBERRMSG)'="" S ERRMSG=IBERRMSG G AUCOBX    ; error message
"RTN","IBCEMQA",55,0)
 D UPDEDI^IBCEM(IB364,"Z")                        ; status updates
"RTN","IBCEMQA",56,0)
AUCOBX ;
"RTN","IBCEMQA",57,0)
 Q
"RTN","IBCEMQA",58,0)
 ;
"RTN","IBCEMQA",59,0)
 ;
"RTN","IBCEMQA",60,0)
AUTH(IBIFN,ERRMSG,IBMRANOT) ; Entry Point
"RTN","IBCEMQA",61,0)
 ; This procedure's job is to authorize this bill.  The manual
"RTN","IBCEMQA",62,0)
 ; process to authorize a bill is found in routine IBCB1.  This
"RTN","IBCEMQA",63,0)
 ; routine borrows heavily from that routine.
"RTN","IBCEMQA",64,0)
 ;
"RTN","IBCEMQA",65,0)
 ; *** Any changes here should be considered also in IBCB1 ***
"RTN","IBCEMQA",66,0)
 ;
"RTN","IBCEMQA",67,0)
 ; This routine is called when receiving an incoming MRA from
"RTN","IBCEMQA",68,0)
 ; Medicare.  If that MRA/EOB meets certain criteria, then the bill
"RTN","IBCEMQA",69,0)
 ; will become a secondary bill and we will try to authorize it (using
"RTN","IBCEMQA",70,0)
 ; this procedure) and put it in the EDI queue ready for extract.
"RTN","IBCEMQA",71,0)
 ;
"RTN","IBCEMQA",72,0)
 ; Input
"RTN","IBCEMQA",73,0)
 ;    IBIFN - internal bill#
"RTN","IBCEMQA",74,0)
 ;    IBMRANOT - 1 indicates process is NOT from MRA
"RTN","IBCEMQA",75,0)
 ;
"RTN","IBCEMQA",76,0)
 ; Output
"RTN","IBCEMQA",77,0)
 ;    ERRMSG - optional output parameter, passed by reference
"RTN","IBCEMQA",78,0)
 ;           - error message text
"RTN","IBCEMQA",79,0)
 ;
"RTN","IBCEMQA",80,0)
 NEW CST,IBTXSTAT,IB364,PRCASV,DFN,STSMSG
"RTN","IBCEMQA",81,0)
 NEW DIE,DA,DR,IBYY
"RTN","IBCEMQA",82,0)
 ;
"RTN","IBCEMQA",83,0)
 ; Check the bill, make sure the current status is valid
"RTN","IBCEMQA",84,0)
 S IBIFN=+$G(IBIFN),ERRMSG=""
"RTN","IBCEMQA",85,0)
 S CST=$P($G(^DGCR(399,IBIFN,0)),U,13)
"RTN","IBCEMQA",86,0)
 I CST="" S ERRMSG="Bill has no current status defined." G AUTHX
"RTN","IBCEMQA",87,0)
 ; IB*2.0*432  add auto-processing of non-MRA's
"RTN","IBCEMQA",88,0)
 I $G(IBMRANOT)'=1,CST'=2 S ERRMSG="This bill's status is "_$$GET1^DIQ(399,IBIFN_",",.13)_".  It must be REQUEST MRA." G AUTHX
"RTN","IBCEMQA",89,0)
 ;
"RTN","IBCEMQA",90,0)
 ; authorize the bill quietly
"RTN","IBCEMQA",91,0)
 S DIE=399,DA=IBIFN,DR="[IB STATUS]",IBYY="@902" D ^DIE
"RTN","IBCEMQA",92,0)
 ;
"RTN","IBCEMQA",93,0)
 ; Update the review status for all EOB's on file
"RTN","IBCEMQA",94,0)
 D STAT^IBCEMU2(IBIFN,3)     ; Accepted - Complete EOB
"RTN","IBCEMQA",95,0)
 ;
"RTN","IBCEMQA",96,0)
 ; Checks for need to add any codes to bill for EDI (call in quiet mode)
"RTN","IBCEMQA",97,0)
 D AUTOCK^IBCEU2(IBIFN,1)
"RTN","IBCEMQA",98,0)
 ;
"RTN","IBCEMQA",99,0)
 ; Calculate transmittable status
"RTN","IBCEMQA",100,0)
 ;   0 = not transmittable
"RTN","IBCEMQA",101,0)
 ;   1 = yes, live transmittable
"RTN","IBCEMQA",102,0)
 ;   2 = yes, test transmittable
"RTN","IBCEMQA",103,0)
 ; P432 add MRANOT flag so it will create new entry in trans file for non-MRA's
"RTN","IBCEMQA",104,0)
 S IBTXSTAT=+$$TXMT^IBCEF4(IBIFN,,$G(IBMRANOT))
"RTN","IBCEMQA",105,0)
 ;
"RTN","IBCEMQA",106,0)
 ; If transmittable, add this bill to the bill transmission file
"RTN","IBCEMQA",107,0)
 I IBTXSTAT D  I ERRMSG'="" G AUTHX
"RTN","IBCEMQA",108,0)
 . S IB364=$$ADDTBILL^IBCB1(IBIFN,IBTXSTAT)
"RTN","IBCEMQA",109,0)
 . I '$P(IB364,U,3) S ERRMSG="Error loading bill into transmit file."
"RTN","IBCEMQA",110,0)
 . Q
"RTN","IBCEMQA",111,0)
 ;
"RTN","IBCEMQA",112,0)
 ; Pass completed bill to Accounts Receivable (quietly)
"RTN","IBCEMQA",113,0)
 D ARPASS^IBCB1(IBIFN,0)
"RTN","IBCEMQA",114,0)
 I '$G(PRCASV("OKAY")) S ERRMSG="Error while passing bill to A/R." G AUTHX
"RTN","IBCEMQA",115,0)
 ;
"RTN","IBCEMQA",116,0)
 ; Find and process any IB charges on hold
"RTN","IBCEMQA",117,0)
 S DFN=+$P($G(^DGCR(399,IBIFN,0)),U,2)
"RTN","IBCEMQA",118,0)
 D FIND^IBOHCK(DFN,IBIFN)
"RTN","IBCEMQA",119,0)
 ;
"RTN","IBCEMQA",120,0)
 ; If transmittable, check for unreviewed items & update 364 status
"RTN","IBCEMQA",121,0)
 I IBTXSTAT D
"RTN","IBCEMQA",122,0)
 . S STSMSG=$$STATUS^IBCEF4(IBIFN)
"RTN","IBCEMQA",123,0)
 . I $P(STSMSG,U,1) D UPDEDI^IBCEM($P(STSMSG,U,1),"E")
"RTN","IBCEMQA",124,0)
 . I $P(STSMSG,U,2),$P(STSMSG,U,2)'=$P(STSMSG,U,1) D UPDEDI^IBCEM($P(STSMSG,U,2),"E")
"RTN","IBCEMQA",125,0)
 . Q
"RTN","IBCEMQA",126,0)
 ;
"RTN","IBCEMQA",127,0)
AUTHX ;
"RTN","IBCEMQA",128,0)
 Q
"RTN","IBCEMQA",129,0)
 ;
"RTN","IBCEMU4")
0^55^B31295284^B29651910
"RTN","IBCEMU4",1,0)
IBCEMU4 ;ALB/ESG - MRA UTILITIES ;25-OCT-2004
"RTN","IBCEMU4",2,0)
 ;;2.0;INTEGRATED BILLING;**288,432,447,592**;21-MAR-94;Build 58
"RTN","IBCEMU4",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEMU4",4,0)
 ;
"RTN","IBCEMU4",5,0)
 Q
"RTN","IBCEMU4",6,0)
 ;
"RTN","IBCEMU4",7,0)
DENDUP(IBEOB,IBMRANOT) ; Denied for Duplicate Function ;WCJ IB*2.0*432
"RTN","IBCEMU4",8,0)
 ; Function returns true if MRA is Denied AND Reason code 18 is present (Duplicate claim/service)
"RTN","IBCEMU4",9,0)
 NEW IBX,IBM,LINE,DUP,ADJ
"RTN","IBCEMU4",10,0)
 S IBX=0,IBM=$G(^IBM(361.1,+$G(IBEOB),0))
"RTN","IBCEMU4",11,0)
 I '$G(IBMRANOT),$P(IBM,U,4)'=1 G DENDUPX    ; not an MRA  ;WCJ IB*2.0*432
"RTN","IBCEMU4",12,0)
 I $G(IBMRANOT),$P(IBM,U,4)'=0 G DENDUPX    ; not an EOB ;WCJ IB*2.0*432
"RTN","IBCEMU4",13,0)
 I $P(IBM,U,13)'=2 G DENDUPX   ; not Denied
"RTN","IBCEMU4",14,0)
 ;
"RTN","IBCEMU4",15,0)
 ; check line item adjustments for reason code 18
"RTN","IBCEMU4",16,0)
 S LINE=0,DUP=0
"RTN","IBCEMU4",17,0)
 F  S LINE=$O(^IBM(361.1,IBEOB,15,LINE)) Q:'LINE  D  Q:DUP
"RTN","IBCEMU4",18,0)
 . S ADJ=0
"RTN","IBCEMU4",19,0)
 . F  S ADJ=$O(^IBM(361.1,IBEOB,15,LINE,1,ADJ)) Q:'ADJ  D  Q:DUP
"RTN","IBCEMU4",20,0)
 .. I $D(^IBM(361.1,IBEOB,15,LINE,1,ADJ,1,"B",18)) S DUP=1 Q
"RTN","IBCEMU4",21,0)
 .. Q
"RTN","IBCEMU4",22,0)
 . Q
"RTN","IBCEMU4",23,0)
 ;
"RTN","IBCEMU4",24,0)
 I DUP S IBX=1
"RTN","IBCEMU4",25,0)
DENDUPX ;
"RTN","IBCEMU4",26,0)
 Q IBX
"RTN","IBCEMU4",27,0)
 ;
"RTN","IBCEMU4",28,0)
 ; the remaining functions are all new w/ IB*2.0*447 and have to do with calculating
"RTN","IBCEMU4",29,0)
 ; different amounts based on percentages stored in the effective date multiple of
"RTN","IBCEMU4",30,0)
 ; the TYPE OF PLAN file (#355.1) for Medicare Supplemental plans
"RTN","IBCEMU4",31,0)
 ;
"RTN","IBCEMU4",32,0)
MSPRE(IBIFN,IBEXF,IBTYPLAN) ; Medicare supplemental PR and Excess calculations
"RTN","IBCEMU4",33,0)
 ; determine PR amount in order to calculate balance due after medicare for secondary/tertiary
"RTN","IBCEMU4",34,0)
 ; if type of plan is a Medicare supplemental or EGHP plan secondary to Medicare, PR 
"RTN","IBCEMU4",35,0)
 ; calculations are determined based on the effective date multiple in the TYPE OF PLAN file
"RTN","IBCEMU4",36,0)
 ; and may or may not included Excess charges (CO-45), based on Plan Type.
"RTN","IBCEMU4",37,0)
 ; need to pass in:
"RTN","IBCEMU4",38,0)
 ;  IBIFN (REQUIRED) = claim ien
"RTN","IBCEMU4",39,0)
 ;  IBEXF = Excess Flag, set to 1 if NOT to include excess charges in calculation but to
"RTN","IBCEMU4",40,0)
 ;          return "e" (IBE) for excess indicator if plan allows excess and there are 
"RTN","IBCEMU4",41,0)
 ;          excess charges.  Used by PR column of MRW screen to show PR without excess
"RTN","IBCEMU4",42,0)
 ;          amounts included in calculation.
"RTN","IBCEMU4",43,0)
 ;  IBTYPLAN = ien in TYPE OF PLAN file (355.1)
"RTN","IBCEMU4",44,0)
 ;  returns "" if no effective date for type of plan to calculate on
"RTN","IBCEMU4",45,0)
 ;
"RTN","IBCEMU4",46,0)
 N IBFRMTYP,IBPNCAT,IBINPAT,IBMGBD,IBEOB,LNLVL,EOBADJ,IBPCE,IBEDT,IBE,IBTOT
"RTN","IBCEMU4",47,0)
 Q:$G(IBIFN)="" ""
"RTN","IBCEMU4",48,0)
 S:$G(IBTYPLAN)="" IBTYPLAN=$$TYPLN(IBIFN)
"RTN","IBCEMU4",49,0)
 S IBEDT=$$MSEDT(IBIFN,IBTYPLAN) Q:IBEDT="" ""
"RTN","IBCEMU4",50,0)
 S IBINPAT=$$INPAT^IBCEF(IBIFN)     ;Inpat/Outpat Flag
"RTN","IBCEMU4",51,0)
 S IBFRMTYP=$P($G(^DGCR(399,IBIFN,0)),U,19)  ; Form Type 2=1500, 3=UB, 7=J430D  ;JRA IB*2.0*592 Add Dental form 7
"RTN","IBCEMU4",52,0)
 ; plan category - PART A is Inpatient Institutional, B is all Outpatient and Inpatient Professional
"RTN","IBCEMU4",53,0)
 S IBPNCAT="B"
"RTN","IBCEMU4",54,0)
 I IBINPAT=1,IBFRMTYP=3 S IBPNCAT="A" Q:IBPNCAT="" ""
"RTN","IBCEMU4",55,0)
 ; Medicare supplemental plan  Offset amount = total charges - what medicare secondary plan will pay
"RTN","IBCEMU4",56,0)
 ; so balance due = whatever medicare secondary will pay
"RTN","IBCEMU4",57,0)
 ;
"RTN","IBCEMU4",58,0)
 ; plan category - PART A =1st piece of AEDT Index, B =2nd
"RTN","IBCEMU4",59,0)
 S IBPCE=$S(IBPNCAT="B":2,1:1)
"RTN","IBCEMU4",60,0)
 S IBMGBD=0,IBEOB=0
"RTN","IBCEMU4",61,0)
 F  S IBEOB=$O(^IBM(361.1,"B",IBIFN,IBEOB)) Q:'IBEOB  D
"RTN","IBCEMU4",62,0)
 .N I
"RTN","IBCEMU4",63,0)
 .F I=0,1,2 S IBEOB(I)=$G(^IBM(361.1,IBEOB,I))
"RTN","IBCEMU4",64,0)
 .I $P(IBEOB(0),U,4)'=1 Q  ;make sure it's an MRA
"RTN","IBCEMU4",65,0)
 .;
"RTN","IBCEMU4",66,0)
 .; Handle CMS-1500 Form Type and UB Outpatient:
"RTN","IBCEMU4",67,0)
 .;JRA IB*2.0*592 Do the same for Dental J430D as for CMS-1500
"RTN","IBCEMU4",68,0)
 .;I IBFRMTYP=2!('IBINPAT) D  Q  ;JRA IB*2.0*592 ';'
"RTN","IBCEMU4",69,0)
 .I IBFRMTYP=2!(IBFRMTYP=7!('IBINPAT)) D  Q  ;JRA IB*2.0*592
"RTN","IBCEMU4",70,0)
 ..; calculate Medicare unpaid amount from line-level (outpatient)
"RTN","IBCEMU4",71,0)
 ..S LNLVL=0 F  S LNLVL=$O(^IBM(361.1,IBEOB,15,LNLVL)) Q:'LNLVL  D  ;
"RTN","IBCEMU4",72,0)
 ...K EOBADJ
"RTN","IBCEMU4",73,0)
 ...M EOBADJ=^IBM(361.1,IBEOB,15,LNLVL,1)
"RTN","IBCEMU4",74,0)
 ...; Total up the Medicare Contract Adjustment across ALL Service Lines to find
"RTN","IBCEMU4",75,0)
 ...; Medicare supplemental Balance Due
"RTN","IBCEMU4",76,0)
 ...S IBTOT=$$CALC(.EOBADJ,IBTYPLAN,IBPCE,IBEDT,$G(IBEXF)),IBE=$P(IBTOT,U,2)
"RTN","IBCEMU4",77,0)
 ...S IBMGBD=$G(IBMGBD)+$P(IBTOT,U)
"RTN","IBCEMU4",78,0)
 .;
"RTN","IBCEMU4",79,0)
 .; Handle Inpatient UB Form Type Next:  Calculate from Claim level data
"RTN","IBCEMU4",80,0)
 .K EOBADJ
"RTN","IBCEMU4",81,0)
 .M EOBADJ=^IBM(361.1,IBEOB,10)
"RTN","IBCEMU4",82,0)
 .S IBTOT=$$CALC(.EOBADJ,IBTYPLAN,IBPCE,IBEDT,$G(IBEXF)),IBE=$P(IBTOT,U,2)
"RTN","IBCEMU4",83,0)
 .S IBMGBD=$G(IBMGBD)+$P(IBTOT,U)
"RTN","IBCEMU4",84,0)
 Q IBMGBD_$G(IBE)
"RTN","IBCEMU4",85,0)
 ;
"RTN","IBCEMU4",86,0)
CALC(EOBADJ,IBTYPLAN,IBPCE,IBEDT,IBEXF) ; FUNCTION - Calculate Medicare Supplemental Balance due
"RTN","IBCEMU4",87,0)
 ; Sums up Amounts on ALL Reason Codes under ALL Group Codes = 'PR' and CO/Reason code=45.
"RTN","IBCEMU4",88,0)
 ; If those reason codes have an entry in the effective date mutliple, multiples that
"RTN","IBCEMU4",89,0)
 ; reason amount by the % the Type of plan will pay.  If no entry, assume 100% payment for PR.
"RTN","IBCEMU4",90,0)
 ; any other Group and reason codes would be 0%. 
"RTN","IBCEMU4",91,0)
 ; Adds up all those sums and returns that value as the total PR&CO the Medicare 
"RTN","IBCEMU4",92,0)
 ; Supplemental plan will pay.
"RTN","IBCEMU4",93,0)
 ;
"RTN","IBCEMU4",94,0)
 ; Input  EOBADJ = Array of Group Codes & Reason Codes from either the Claim 
"RTN","IBCEMU4",95,0)
 ;                 Level (10) or Service Line Level (15) of EOB file (#361.1)
"RTN","IBCEMU4",96,0)
 ; IBTYPLAN = ien in TYPE OF PLAN file 
"RTN","IBCEMU4",97,0)
 ; IBPCE = 2 for PART A, 3 for PART B - REQUIRED
"RTN","IBCEMU4",98,0)
 ; IBEDT = effective date of plan rates 
"RTN","IBCEMU4",99,0)
 ; IBEXF = Excess Flag, set to 1 if NOT to include excess charges in calculation but to
"RTN","IBCEMU4",100,0)
 ;          return "e" for excess indicator if plan allows excess and there are excess 
"RTN","IBCEMU4",101,0)
 ;          charges.   Used by PR column of MRW screen to show PR without excess
"RTN","IBCEMU4",102,0)
 ;          amounts included in calculation.
"RTN","IBCEMU4",103,0)
 ; Output  amount that Medicare supplemental plan will pay
"RTN","IBCEMU4",104,0)
 ;
"RTN","IBCEMU4",105,0)
 N GRPLVL,RSNLVL,RSNAMT,MCA,GRPCD,RSNCD,RSN0,CALC,IBIND
"RTN","IBCEMU4",106,0)
 Q:$G(IBPCE)="" ""
"RTN","IBCEMU4",107,0)
 S:$G(IBTYPLAN)="" IBTYPLAN=$$TYPLN(IBIFN)
"RTN","IBCEMU4",108,0)
 I $G(IBEDT)="" S IBEDT=$$MSEDT(IBIFN,IBTYPLAN) Q:IBEDT="" ""
"RTN","IBCEMU4",109,0)
 S (GRPLVL,MCA)=0
"RTN","IBCEMU4",110,0)
 F  S GRPLVL=$O(EOBADJ(GRPLVL)) Q:'GRPLVL  D 
"RTN","IBCEMU4",111,0)
 .S GRPCD=$P($G(EOBADJ(GRPLVL,0)),U)
"RTN","IBCEMU4",112,0)
 .; For now they want to calculate all PR but only apply %age calcs to PR-1,2 & 3 
"RTN","IBCEMU4",113,0)
 .I GRPCD'="PR" Q:'$D(^IBE(355.1,IBTYPLAN,14,"AEDT",IBEDT,GRPCD))
"RTN","IBCEMU4",114,0)
 .S RSNLVL=0
"RTN","IBCEMU4",115,0)
 .F  S RSNLVL=$O(EOBADJ(GRPLVL,1,RSNLVL)) Q:'RSNLVL  D  ;
"RTN","IBCEMU4",116,0)
 ..S RSN0=$G(EOBADJ(GRPLVL,1,RSNLVL,0)),RSNAMT=$P(RSN0,U,2),RSNCD=$P(RSN0,U)
"RTN","IBCEMU4",117,0)
 ..I GRPCD="PR",RSNCD="AAA" Q  ; ignore PR-AAA
"RTN","IBCEMU4",118,0)
 ..; For now they want to calculate all PR but only apply %age calcs to PR-1,2 & 3
"RTN","IBCEMU4",119,0)
 ..I GRPCD="PR","1^2^3"'[RSNCD,'$D(^IBE(355.1,IBTYPLAN,14,"AEDT",IBEDT,GRPCD,RSNCD)) S MCA=MCA+RSNAMT Q
"RTN","IBCEMU4",120,0)
 ..Q:'$D(^IBE(355.1,IBTYPLAN,14,"AEDT",IBEDT,GRPCD,RSNCD))
"RTN","IBCEMU4",121,0)
 ..; if there is an entry in the effective date multiple for this grp/rsn code use it to calculate amount for PART A and B.
"RTN","IBCEMU4",122,0)
 ..; for MRW, don't add up excess charges if IBEXF=1, just send back an "e" indicator to alert user of excess  
"RTN","IBCEMU4",123,0)
 ..I $G(IBEXF)=1,GRPCD="CO",RSNCD=45,$P($G(^IBE(355.1,IBTYPLAN,14,"AEDT",IBEDT,GRPCD,RSNCD)),U,IBPCE)>0 S IBIND="e" Q
"RTN","IBCEMU4",124,0)
 ..S CALC=$P($G(^IBE(355.1,IBTYPLAN,14,"AEDT",IBEDT,GRPCD,RSNCD)),U,IBPCE)/100
"RTN","IBCEMU4",125,0)
 ..S MCA=MCA+(RSNAMT*CALC)
"RTN","IBCEMU4",126,0)
 Q MCA_U_$G(IBIND)
"RTN","IBCEMU4",127,0)
 ;
"RTN","IBCEMU4",128,0)
MSEDT(IBIFN,IBTYPLAN) ; does this claim's TYPE OF PLAN have an effective date multiple on or before the
"RTN","IBCEMU4",129,0)
 ; claim 'statement covers from' date
"RTN","IBCEMU4",130,0)
 ; IBIFN = claim ien - REQUIRED
"RTN","IBCEMU4",131,0)
 ; IBTYPLAN = Type of Plan ien
"RTN","IBCEMU4",132,0)
 ; returns eff.date calculation multiple to use or null
"RTN","IBCEMU4",133,0)
 ; called from SKIP^IBCCCB, BLD^IBCECOB1, TOT^IBCECOB2, CRIT^IBCEMQC, & SECOND^IBCEMSR
"RTN","IBCEMU4",134,0)
 ;
"RTN","IBCEMU4",135,0)
 ; IB*2.0*447:  the below quit statement has been added because CBO has decided not to implement
"RTN","IBCEMU4",136,0)
 ; these changes with patch 447 after all.  Once a long-term maintenance plan for the plan type
"RTN","IBCEMU4",137,0)
 ; calculations can be worked out and CBO is ready to implement the special calculations, the
"RTN","IBCEMU4",138,0)
 ; below quit statement and these comments should be removed and the type of plan special calculations 
"RTN","IBCEMU4",139,0)
 ; will immediately take effect.  For now, returning a null will allow existing code to bypass 
"RTN","IBCEMU4",140,0)
 ; the special calculation table in file 355.1 and calculate everything as 100% of Patient Responsibility (PR).
"RTN","IBCEMU4",141,0)
 Q ""
"RTN","IBCEMU4",142,0)
 ;
"RTN","IBCEMU4",143,0)
 N IBSVDT
"RTN","IBCEMU4",144,0)
 Q:$G(IBIFN)="" ""
"RTN","IBCEMU4",145,0)
 S:$G(IBTYPLAN)="" IBTYPLAN=+$$TYPLN(IBIFN)
"RTN","IBCEMU4",146,0)
 S IBSVDT=+$P($G(^DGCR(399,IBIFN,"U")),U)
"RTN","IBCEMU4",147,0)
 Q:$D(^IBE(355.1,IBTYPLAN,14,"B",IBSVDT)) IBSVDT
"RTN","IBCEMU4",148,0)
 Q $O(^IBE(355.1,IBTYPLAN,14,"B",IBSVDT),-1)
"RTN","IBCEMU4",149,0)
 ;
"RTN","IBCEMU4",150,0)
TYPLN(IBIFN) ; find type of plan for claim
"RTN","IBCEMU4",151,0)
 ; IBIFN = claim ien - REQUIRED
"RTN","IBCEMU4",152,0)
 ; returns ien from file 355.1 or null if none found
"RTN","IBCEMU4",153,0)
 ;
"RTN","IBCEMU4",154,0)
 Q:$G(IBIFN)="" ""
"RTN","IBCEMU4",155,0)
 N IBCOBN,IBGRPNO
"RTN","IBCEMU4",156,0)
 S IBCOBN=$$COBN^IBCEF(IBIFN)+1 ;find next payer
"RTN","IBCEMU4",157,0)
 S IBGRPNO=+$P($G(^DGCR(399,IBIFN,"I"_IBCOBN)),U,18) ; group plan number
"RTN","IBCEMU4",158,0)
 Q $P($G(^IBA(355.3,IBGRPNO,0)),U,9) ; type of plan - IEN
"RTN","IBCEMU4",159,0)
 ;
"RTN","IBCEOB1")
0^138^B108553745^B106424337
"RTN","IBCEOB1",1,0)
IBCEOB1 ;ALB/TMP/PJH - 835 EDI EOB MSG PROCESSING ;Feb 09, 2018@10:11:43
"RTN","IBCEOB1",2,0)
 ;;2.0;INTEGRATED BILLING;**137,135,155,296,356,349,431,488,597,592**;21-MAR-94;Build 58
"RTN","IBCEOB1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEOB1",4,0)
 Q
"RTN","IBCEOB1",5,0)
 ;
"RTN","IBCEOB1",6,0)
STORE(A,IB0,IBEOB,LEVEL) ;
"RTN","IBCEOB1",7,0)
 ; A = the string of data to extract and try to store
"RTN","IBCEOB1",8,0)
 ;       each ^ piece is a field to store
"RTN","IBCEOB1",9,0)
 ;         within each ^ piece, there are 5 ';' pieces:
"RTN","IBCEOB1",10,0)
 ;            1 = piece to extract from the data string;
"RTN","IBCEOB1",11,0)
 ;            2 = field to update;
"RTN","IBCEOB1",12,0)
 ;            3 = flag for dollar amt (1=YES);
"RTN","IBCEOB1",13,0)
 ;            4 = flag for 4-slash stuff without transform (1=YES);
"RTN","IBCEOB1",14,0)
 ;            5 = flag for numeric/non-dollar amt (1=Yes, 0=No,
"RTN","IBCEOB1",15,0)
 ;                 Dn = the field is numeric with 'n' decimal places
"RTN","IBCEOB1",16,0)
 ; IB0 = the record being processed
"RTN","IBCEOB1",17,0)
 ; IBEOB = the ien of the EOB entry in file 361.1
"RTN","IBCEOB1",18,0)
 ; LEVEL = the array that contains the DIE and DA values if stuffing at a
"RTN","IBCEOB1",19,0)
 ;         level other than the top level
"RTN","IBCEOB1",20,0)
 ;
"RTN","IBCEOB1",21,0)
 N B,IBPC,IBFLD,DA,DR,DIE,X,Y
"RTN","IBCEOB1",22,0)
 S DR=";"
"RTN","IBCEOB1",23,0)
 ;
"RTN","IBCEOB1",24,0)
 I '$G(LEVEL) S DIE="^IBM(361.1,",DA=IBEOB
"RTN","IBCEOB1",25,0)
 ;
"RTN","IBCEOB1",26,0)
 I $G(LEVEL) D
"RTN","IBCEOB1",27,0)
 . N Q
"RTN","IBCEOB1",28,0)
 . S DIE=$G(LEVEL("DIE"))
"RTN","IBCEOB1",29,0)
 . S Q=0 F  S Q=$O(LEVEL(Q)) Q:'Q  S DA(Q)=LEVEL(Q)
"RTN","IBCEOB1",30,0)
 . S DA=LEVEL(0)
"RTN","IBCEOB1",31,0)
 ;
"RTN","IBCEOB1",32,0)
 I $G(DA) F B=1:1:$L(A,U) D
"RTN","IBCEOB1",33,0)
 . S IBPC=$P(A,U,B),IBFLD=$P(IBPC,";",2)
"RTN","IBCEOB1",34,0)
 . I $P(IB0,U,+IBPC)'="",IBFLD D
"RTN","IBCEOB1",35,0)
 .. N VAL
"RTN","IBCEOB1",36,0)
 .. ; For dollar amts, add full cents; For numerics, strip leading
"RTN","IBCEOB1",37,0)
 .. ;   0's; For non-numeric/non-dollar amts, make any ; in data into |
"RTN","IBCEOB1",38,0)
 .. S VAL=$S($P(IBPC,";",3):$$DOLLAR^IBCEOB($P(IB0,U,+IBPC)),$P(IBPC,";",5):+$P(IB0,U,+IBPC),$P($P(IBPC,";",5),"D",2):$P(IB0,U,+IBPC)/(10**$P($P(IBPC,";",5),"D",2)),1:$TR($P(IB0,U,+IBPC),";","|"))
"RTN","IBCEOB1",39,0)
 .. I $P(IBPC,";",3),VAL S VAL=$P(VAL,".")_"."_$E($P(VAL,".",2)_"00",1,2)
"RTN","IBCEOB1",40,0)
 .. S DR=DR_IBFLD_"///"_$S($P(IBPC,";",4):"/",1:"")_VAL_";"
"RTN","IBCEOB1",41,0)
 ;
"RTN","IBCEOB1",42,0)
 S DR=$P(DR,";",2,$L(DR,";")-1)
"RTN","IBCEOB1",43,0)
 I DR'="" D ^DIE
"RTN","IBCEOB1",44,0)
 Q ($D(Y)=0) ;Successfully stored all the data it was sent if $D(Y)=0
"RTN","IBCEOB1",45,0)
 ;
"RTN","IBCEOB1",46,0)
HDR(IB0,IBEGBL,IBEOB,HIPAA) ; Store header data for EOB
"RTN","IBCEOB1",47,0)
 ; IB0 = the record being processed from the msg
"RTN","IBCEOB1",48,0)
 ; IBEOB = the ien of the EOB entry in file 361.1
"RTN","IBCEOB1",49,0)
 ;
"RTN","IBCEOB1",50,0)
 N IBDT,IBDTP,DA,DR,DIE,X,Y
"RTN","IBCEOB1",51,0)
 K IBXSAVE("XTRA"),IBZSAVE
"RTN","IBCEOB1",52,0)
 ;
"RTN","IBCEOB1",53,0)
 S HIPAA=+$P(IB0,U,16) ;HIPAA Version code
"RTN","IBCEOB1",54,0)
 S IBDT=$P(IB0,U,3),IBDT=$E(IBDT,1,4)-1700_$E(IBDT,5,8)_"."_$P(IB0,U,4)
"RTN","IBCEOB1",55,0)
 S IBDTP=$P(IB0,U,9)
"RTN","IBCEOB1",56,0)
 I IBDTP S IBDTP=$E(IBDTP,1,4)-1700_$E(IBDTP,5,8)
"RTN","IBCEOB1",57,0)
 S DR=$S($P(IB0,U,7)'="":".03////"_$P(IB0,U,7)_";",1:"")_".05////"_IBDT_";.04////"_($P(IB0,U,5)="Y")_";.15///"_$$COBN^IBCEF(+$G(^IBM(361.1,IBEOB,0)))_";.07///"_$P(IB0,U,8)_$S(IBDTP:";.06////"_IBDTP,1:"")
"RTN","IBCEOB1",58,0)
 S DIE="^IBM(361.1,",DA=IBEOB
"RTN","IBCEOB1",59,0)
 D ^DIE
"RTN","IBCEOB1",60,0)
 I $D(Y)'=0 D
"RTN","IBCEOB1",61,0)
 . S ^TMP(IBEGBL,$J,+$O(^TMP(IBEGBL,$J,""),-1)+1)="Bad header data"
"RTN","IBCEOB1",62,0)
 Q ($D(Y)=0)
"RTN","IBCEOB1",63,0)
 ;
"RTN","IBCEOB1",64,0)
FINDLN(IB0,IBEOB,IBZDATA,PLREF,ERRCOD) ; Find corresponding billed line for the adj
"RTN","IBCEOB1",65,0)
 ; IB0 = the record being processed
"RTN","IBCEOB1",66,0)
 ;       NOTE: pieces 3,4,16 are already reformatted
"RTN","IBCEOB1",67,0)
 ; IBEOB = the ien of the EOB entry in file 361.1
"RTN","IBCEOB1",68,0)
 ; IBZDATA = the array from the output formatter containing line
"RTN","IBCEOB1",69,0)
 ;           items for the bill.  This is passed in so this data only has
"RTN","IBCEOB1",70,0)
 ;           to be extracted once for each bill (the first time in, it
"RTN","IBCEOB1",71,0)
 ;           will be undefined)
"RTN","IBCEOB1",72,0)
 ; PLREF = Provider Line Reference
"RTN","IBCEOB1",73,0)
 ; OUTPUT = Line # in the original bill that this adjustment relates to
"RTN","IBCEOB1",74,0)
 ;          ^ paid procedure code if different from original procedure OR
"RTN","IBCEOB1",75,0)
 ;            paid rev code if different from original and no proc code
"RTN","IBCEOB1",76,0)
 ; ERRCOD = Contains any error condition that may have been encountered
"RTN","IBCEOB1",77,0)
 ;            while conducting the field matching tests.
"RTN","IBCEOB1",78,0)
 ;
"RTN","IBCEOB1",79,0)
 N IBLN,IBLN1,IBBNDL,OCHG,OCHG2,OPROC,OREVCD,IBIFN,IBXARRAY,IBXARRY
"RTN","IBCEOB1",80,0)
 N IBXERR,UNITS,UNITS2,UNITS3,IBMOD,Z,Z0,EOBCHG,IBZVLA,IBAMIN,MATCHED,MOD837S
"RTN","IBCEOB1",81,0)
 ;
"RTN","IBCEOB1",82,0)
 S (IBLN,IBLN1)="",IBIFN=+$G(^IBM(361.1,IBEOB,0)),(ERRCOD,MATCHED)=0
"RTN","IBCEOB1",83,0)
 S EOBCHG=+$$DOLLAR^IBCEOB($P(IB0,U,15))   ; charges on EOB 40 record
"RTN","IBCEOB1",84,0)
 ;
"RTN","IBCEOB1",85,0)
 ; if original procedure exists and is different than the 835 procedure,
"RTN","IBCEOB1",86,0)
 ; the procedure or revenue code originally billed will be in piece 10
"RTN","IBCEOB1",87,0)
 ; of the '40' record of the 835 flat file.  Otherwise, pc 10 is null.
"RTN","IBCEOB1",88,0)
 S IBBNDL=$S($P(IB0,U,10)'="":1,1:0)
"RTN","IBCEOB1",89,0)
 ;
"RTN","IBCEOB1",90,0)
 ; If this is a split MRA, build array of Vista line#'s from other split MRA's
"RTN","IBCEOB1",91,0)
 I $P($G(^IBM(361.1,IBEOB,0)),U,4)=1,$$SPLIT^IBCEMU1(IBEOB) D
"RTN","IBCEOB1",92,0)
 . N IEN S IEN=0
"RTN","IBCEOB1",93,0)
 . F  S IEN=$O(^IBM(361.1,"B",IBIFN,IEN)) Q:'IEN  I IEN'=IBEOB D
"RTN","IBCEOB1",94,0)
 .. I $P($G(^IBM(361.1,IEN,0)),U,4)'=1 Q    ; not an MRA
"RTN","IBCEOB1",95,0)
 .. I '$$SPLIT^IBCEMU1(IEN) Q               ; not a split EOB
"RTN","IBCEOB1",96,0)
 .. M IBZVLA=^IBM(361.1,IEN,15,"AC")
"RTN","IBCEOB1",97,0)
 .. Q
"RTN","IBCEOB1",98,0)
 . Q
"RTN","IBCEOB1",99,0)
 ;
"RTN","IBCEOB1",100,0)
 I $P($G(^DGCR(399,IBIFN,0)),U,19)=3 D  G FINDLNX     ; UB-04 format
"RTN","IBCEOB1",101,0)
 . I '$D(IBZDATA) D F^IBCEF("N-UB-04 SERVICE LINE (EDI)","IBZDATA",,IBIFN)
"RTN","IBCEOB1",102,0)
 . ; Quit if a Line Item CTRL # exist, skip mismatching process.
"RTN","IBCEOB1",103,0)
 . I +PLREF,$D(IBZDATA(+PLREF)) S IBLN=+PLREF_U_$P(IB0,U,10) Q
"RTN","IBCEOB1",104,0)
 . ;
"RTN","IBCEOB1",105,0)
 . S Z=0 F  S Z=$O(IBZDATA(Z)) Q:'Z  D  Q:+MATCHED
"RTN","IBCEOB1",106,0)
 .. ; Quit if processing an MRA and this VistA line# has already been filed
"RTN","IBCEOB1",107,0)
 .. I $P($G(^IBM(361.1,IBEOB,0)),U,4)=1,$D(^IBM(361.1,IBEOB,15,"AC",Z)) Q
"RTN","IBCEOB1",108,0)
 .. ; Quit if split MRA and this VistA line# has already been filed
"RTN","IBCEOB1",109,0)
 .. I $D(IBZVLA(Z)) Q
"RTN","IBCEOB1",110,0)
 .. I $G(IBZDATA(Z))="" Q
"RTN","IBCEOB1",111,0)
 .. ;
"RTN","IBCEOB1",112,0)
 .. ; CHECKING FOR A MATCHING RECORD ON FIRST PASS.
"RTN","IBCEOB1",113,0)
 .. D GTPRCD(IBBNDL,.OPROC,.OREVCD,IBZDATA(Z))      ; Get the Procedure Code values.
"RTN","IBCEOB1",114,0)
 .. ; if not bundled/unbundled
"RTN","IBCEOB1",115,0)
 .. I 'IBBNDL D  Q
"RTN","IBCEOB1",116,0)
 ... I OPROC="",OREVCD,OREVCD'=$P(IB0,U,4) Q      ; revenue code
"RTN","IBCEOB1",117,0)
 ... I OPROC'="",OPROC'=$P(IB0,U,3) Q             ; procedure code
"RTN","IBCEOB1",118,0)
 ... S MATCHED=Z
"RTN","IBCEOB1",119,0)
 .. ;
"RTN","IBCEOB1",120,0)
 .. ; if bundled/unbundled
"RTN","IBCEOB1",121,0)
 .. I IBBNDL D  Q
"RTN","IBCEOB1",122,0)
 ... I OPROC="",OREVCD,OREVCD'=+$P(IB0,U,10) Q    ; revenue code
"RTN","IBCEOB1",123,0)
 ... I OPROC'="",OPROC'=$P(IB0,U,10) Q            ; procedure code
"RTN","IBCEOB1",124,0)
 ... S MATCHED=Z
"RTN","IBCEOB1",125,0)
 .. Q
"RTN","IBCEOB1",126,0)
 . ;
"RTN","IBCEOB1",127,0)
 . I 'MATCHED D  Q
"RTN","IBCEOB1",128,0)
 .. I $G(IBZDATA(1))="" Q  ;if no data in IBZDATA(1) Quit to avoid undefined error - *597
"RTN","IBCEOB1",129,0)
 .. D GTPRCD(IBBNDL,.OPROC,.OREVCD,IBZDATA(1))  ; Due to no matches, get the info from the 1st line item.
"RTN","IBCEOB1",130,0)
 .. I 'IBBNDL D  Q
"RTN","IBCEOB1",131,0)
 ... I OPROC="",OREVCD,OREVCD'=$P(IB0,U,4) S ERRCOD=1 Q      ; revenue code
"RTN","IBCEOB1",132,0)
 ... I OPROC'="",OPROC'=$P(IB0,U,3) S ERRCOD=2 Q             ; procedure code
"RTN","IBCEOB1",133,0)
 .. I IBBNDL D  Q
"RTN","IBCEOB1",134,0)
 ... I OPROC="",OREVCD,OREVCD'=+$P(IB0,U,10) S ERRCOD=1 Q    ; revenue code
"RTN","IBCEOB1",135,0)
 ... I OPROC'="",OPROC'=$P(IB0,U,10) S ERRCOD=2 Q            ; procedure code
"RTN","IBCEOB1",136,0)
 .. Q
"RTN","IBCEOB1",137,0)
 . ;
"RTN","IBCEOB1",138,0)
 . ; FOUND A MATCHING PROCEDURE CODE...SO LET'S SEE IF EVERYTHING ELSE MATCHES.
"RTN","IBCEOB1",139,0)
 . S Z=MATCHED
"RTN","IBCEOB1",140,0)
 . D GTPRCD(IBBNDL,.OPROC,.OREVCD,IBZDATA(Z))      ; Get the Procedure Code values.
"RTN","IBCEOB1",141,0)
 . S OCHG=$P(IBZDATA(Z),U,3)*$P(IBZDATA(Z),U,4) ; Total charge from bill
"RTN","IBCEOB1",142,0)
 . S OCHG2=+$P(IBZDATA(Z),U,5)
"RTN","IBCEOB1",143,0)
 . I OCHG'=EOBCHG,OCHG2=EOBCHG S OCHG=OCHG2     ; update OCHG
"RTN","IBCEOB1",144,0)
 . ;
"RTN","IBCEOB1",145,0)
 . ; if not bundled/unbundled
"RTN","IBCEOB1",146,0)
 . I 'IBBNDL D  Q
"RTN","IBCEOB1",147,0)
 .. I +$P(IBZDATA(Z),U,4)'=$P(IB0,U,16) S ERRCOD=3 Q        ; original units
"RTN","IBCEOB1",148,0)
 .. I +OCHG'=EOBCHG S ERRCOD=4 Q                            ; original charges
"RTN","IBCEOB1",149,0)
 .. I '$$MODMATCH($P(IBZDATA(Z),U,9),$P(IB0,U,5,8),.MOD837S),'$$MODMATCH($P($P(IBZDATA(Z),U,9),",",1),$P(IB0,U,5),.MOD837S) S ERRCOD=5_U_MOD837S Q    ; modifiers
"RTN","IBCEOB1",150,0)
 .. S IBLN=Z
"RTN","IBCEOB1",151,0)
 .. Q
"RTN","IBCEOB1",152,0)
 . ;
"RTN","IBCEOB1",153,0)
 . ; if bundled/unbundled
"RTN","IBCEOB1",154,0)
 . I IBBNDL D  Q
"RTN","IBCEOB1",155,0)
 .. I +$P(IBZDATA(Z),U,4)'=$P(IB0,U,16) S ERRCOD=3 Q        ; original units
"RTN","IBCEOB1",156,0)
 .. I +OCHG'=EOBCHG S ERRCOD=4 Q                            ; original charges
"RTN","IBCEOB1",157,0)
 .. I '$$MODMATCH($P(IBZDATA(Z),U,9),$P(IB0,U,11,14),.MOD837S),'$$MODMATCH($P($P(IBZDATA(Z),U,9),",",1),$P(IB0,U,11),.MOD837S) S ERRCOD=5_U_MOD837S Q    ; modifiers
"RTN","IBCEOB1",158,0)
 .. S IBLN=Z_U_$S(OPROC'="":OPROC,1:OREVCD)
"RTN","IBCEOB1",159,0)
 .. Q
"RTN","IBCEOB1",160,0)
 . ; When dealing with Inpatient UB-04's, check for revenue code roll-ups
"RTN","IBCEOB1",161,0)
 . I 'IBLN,$$INPAT^IBCEF(IBIFN,1) D RCRU^IBCEOB00(.IBZDATA,IB0,.IBLN)
"RTN","IBCEOB1",162,0)
 . ; If only 1 rev code and charges are the same, assume a match
"RTN","IBCEOB1",163,0)
 . I 'IBLN,'$P($G(^IBM(361.1,IBEOB,0)),U,4),$O(IBZDATA(""),-1)=$O(IBZDATA("")),+OCHG=EOBCHG S IBLN=+$O(IBZDATA(""))_U_OREVCD
"RTN","IBCEOB1",164,0)
 ;
"RTN","IBCEOB1",165,0)
 ; At this point, we can assume the claim is CMS-1500 format
"RTN","IBCEOB1",166,0)
 ;JWS;IB*2.0*592;need to be form specific with line level data collection call using output formatter
"RTN","IBCEOB1",167,0)
 I '$D(IBZDATA) D
"RTN","IBCEOB1",168,0)
 . I $$FT^IBCEF(IBIFN)=2 D F^IBCEF("N-HCFA 1500 SERVICE LINE (EDI)","IBZDATA",,IBIFN) Q
"RTN","IBCEOB1",169,0)
 . I $$FT^IBCEF(IBIFN)=7 D F^IBCEF("N-HCFA SERVICE LINE CALLABLE","IBZDATA",,IBIFN)
"RTN","IBCEOB1",170,0)
 I +PLREF,$D(IBZDATA(+PLREF)) S IBLN=PLREF_U_$P(IB0,U,10) G FINDLNX   ; If a Line Item CTRL # exist, skip mismatching process.
"RTN","IBCEOB1",171,0)
 ;
"RTN","IBCEOB1",172,0)
 S Z=0 F  S Z=$O(IBZDATA(Z)) Q:'Z  D  Q:+MATCHED
"RTN","IBCEOB1",173,0)
 . ; Quit if processing an MRA and this VistA line# has already been filed
"RTN","IBCEOB1",174,0)
 . I $P($G(^IBM(361.1,IBEOB,0)),U,4)=1,$D(^IBM(361.1,IBEOB,15,"AC",Z)) Q
"RTN","IBCEOB1",175,0)
 . ; Quit if split MRA and this VistA line# has already been filed
"RTN","IBCEOB1",176,0)
 . I $D(IBZVLA(Z)) Q
"RTN","IBCEOB1",177,0)
 . I $G(IBZDATA(Z))="" Q
"RTN","IBCEOB1",178,0)
 . ;
"RTN","IBCEOB1",179,0)
 . ; CHECKING FOR A MATCHING RECORD ON FIRST PASS.
"RTN","IBCEOB1",180,0)
 . D GTPRCD(IBBNDL,.OPROC,.OREVCD,IBZDATA(Z))      ; Get the Procedure Code values.
"RTN","IBCEOB1",181,0)
 . I OPROC'=$S('IBBNDL:$P(IB0,U,3),1:$P(IB0,U,10)) Q   ;procedure code.
"RTN","IBCEOB1",182,0)
 . S MATCHED=Z
"RTN","IBCEOB1",183,0)
 . Q
"RTN","IBCEOB1",184,0)
 ;
"RTN","IBCEOB1",185,0)
 I 'MATCHED D  G FINDLNX
"RTN","IBCEOB1",186,0)
 . I $G(IBZDATA(1))="" Q  ;if no data in IBZDATA(1) Quit to avoid undefined error - *597
"RTN","IBCEOB1",187,0)
 . D GTPRCD(IBBNDL,.OPROC,.OREVCD,IBZDATA(1))  ; Because no matches, get the information from the 1st line item.
"RTN","IBCEOB1",188,0)
 . I OPROC'=$S('IBBNDL:$P(IB0,U,3),1:$P(IB0,U,10)) S ERRCOD=2   ; Mis-matched Proc Code.
"RTN","IBCEOB1",189,0)
 ;
"RTN","IBCEOB1",190,0)
 ; FOUND A MATCHING PROCEDURE CODE...SO LET'S SEE IF EVERYTHING ELSE MATCHES.
"RTN","IBCEOB1",191,0)
 S Z=MATCHED
"RTN","IBCEOB1",192,0)
 ; Quit if processing an MRA and this VistA line# has already been filed
"RTN","IBCEOB1",193,0)
 I $P($G(^IBM(361.1,IBEOB,0)),U,4)=1,$D(^IBM(361.1,IBEOB,15,"AC",Z)) G FINDLNX
"RTN","IBCEOB1",194,0)
 ; Quit if split MRA and this VistA line# has already been filed
"RTN","IBCEOB1",195,0)
 I $D(IBZVLA(Z)) G FINDLNX
"RTN","IBCEOB1",196,0)
 I $G(IBZDATA(Z))="" G FINDLNX
"RTN","IBCEOB1",197,0)
 ;
"RTN","IBCEOB1",198,0)
 S OCHG=$P(IBZDATA(Z),U,8)*$P(IBZDATA(Z),U,9) ; charge from bill
"RTN","IBCEOB1",199,0)
 S IBAMIN=""
"RTN","IBCEOB1",200,0)
 I $P(IBZDATA(Z),U,12)'="" S IBAMIN=$P(IBZDATA(Z),U,12)  ;anesthesia minutes
"RTN","IBCEOB1",201,0)
 S UNITS=$S('IBAMIN:$P(IBZDATA(Z),U,9),1:IBAMIN/15)
"RTN","IBCEOB1",202,0)
 ; original units from bill or anesthesia minutes calculation
"RTN","IBCEOB1",203,0)
 I $P(UNITS,".",2) S UNITS=$FN(UNITS,"",1)    ; round to a single decimal place for fractional units
"RTN","IBCEOB1",204,0)
 I $P($P(IB0,U,16),".",2) S $P(IB0,U,16)=$FN($P(IB0,U,16),"",1)
"RTN","IBCEOB1",205,0)
 S UNITS2=$P(IBZDATA(Z),U,9)     ; just the units
"RTN","IBCEOB1",206,0)
 ; UNITS3 is the number of anesthesia minutes divided by 10, or nil.
"RTN","IBCEOB1",207,0)
 ; Solution to get around the Trailblazers bug for MRAs
"RTN","IBCEOB1",208,0)
 S UNITS3=""
"RTN","IBCEOB1",209,0)
 I IBAMIN'=0 S UNITS3=IBAMIN/10
"RTN","IBCEOB1",210,0)
 ;
"RTN","IBCEOB1",211,0)
 I UNITS'=$P(IB0,U,16),UNITS2'=$P(IB0,U,16),UNITS3'=$P(IB0,U,16),IBAMIN'=$P(IB0,U,16) S ERRCOD=3 G FINDLNX  ; Original units
"RTN","IBCEOB1",212,0)
 I $$DOLLAR^IBCEFG1(OCHG)'=+$P(IB0,U,15) S ERRCOD=4 G FINDLNX  ; original charges.
"RTN","IBCEOB1",213,0)
 I $S($P(IB0,U,19):$P(IB0,U,19)=$P(IBZDATA(Z),U),1:1) D  G:+ERRCOD FINDLNX
"RTN","IBCEOB1",214,0)
 . ;Original procedure/chg/units/date have matched in order to get here
"RTN","IBCEOB1",215,0)
 . ;Check matching original modifiers
"RTN","IBCEOB1",216,0)
 . I '$$MODMATCH($$MODLST^IBEFUNC2($P(IBZDATA(Z),U,10)),$S('IBBNDL:$P(IB0,U,5,8),1:$P(IB0,U,11,14)),.MOD837S) S ERRCOD=5_U_MOD837S Q   ; modifiers.
"RTN","IBCEOB1",217,0)
 . S IBLN=Z_$S(IBBNDL:U_OPROC,1:"")
"RTN","IBCEOB1",218,0)
 I 'IBLN,IBLN1 S IBLN=IBLN1
"RTN","IBCEOB1",219,0)
 ;
"RTN","IBCEOB1",220,0)
FINDLNX ;
"RTN","IBCEOB1",221,0)
 Q IBLN
"RTN","IBCEOB1",222,0)
 ;
"RTN","IBCEOB1",223,0)
GTPRCD(IBBNDL,OPROC,OREVCD,IBZREC) ; Set up the Procedure Code/Revenue Code fields.
"RTN","IBCEOB1",224,0)
 N CPT
"RTN","IBCEOB1",225,0)
 ;
"RTN","IBCEOB1",226,0)
 I $P($G(^DGCR(399,IBIFN,0)),U,19)=3 D  Q   ; For UB-04s
"RTN","IBCEOB1",227,0)
 . S CPT=$P(IBZREC,U,2)                        ; proc from bill
"RTN","IBCEOB1",228,0)
 . I CPT'?.N,CPT'="" S CPT=$O(^ICPT("B",CPT,""))   ; non-numeric proc
"RTN","IBCEOB1",229,0)
 . S OPROC=$$PRCD^IBCEF1(+CPT_";ICPT(")            ; ext proc code
"RTN","IBCEOB1",230,0)
 . S OREVCD=+$P($G(^DGCR(399.2,+IBZREC,0)),U)  ; Rev cd from bill
"RTN","IBCEOB1",231,0)
 ;
"RTN","IBCEOB1",232,0)
 ; For CMS-1500s
"RTN","IBCEOB1",233,0)
 S CPT=$P(IBZREC,U,5)        ; proc from bill
"RTN","IBCEOB1",234,0)
 I CPT'?.N,CPT'="" S CPT=$O(^ICPT("B",CPT,""))   ; non-numeric proc
"RTN","IBCEOB1",235,0)
 S OPROC=$$PRCD^IBCEF1(+CPT_";ICPT(")            ; ext proc code
"RTN","IBCEOB1",236,0)
 Q
"RTN","IBCEOB1",237,0)
 ;
"RTN","IBCEOB1",238,0)
MODMATCH(IB,MODLST,MOD837S) ; Match modifiers
"RTN","IBCEOB1",239,0)
 ; IB = the list of modifiers iens from the bill, comma delimited
"RTN","IBCEOB1",240,0)
 ; MODLST = the 4 '^' pieces of the reported modifiers
"RTN","IBCEOB1",241,0)
 ;
"RTN","IBCEOB1",242,0)
 N MODOK,Q,Z0,IBMOD,MMOD
"RTN","IBCEOB1",243,0)
 S MODOK=1,MOD837S=""
"RTN","IBCEOB1",244,0)
 I $TR(IB,",")'="" F Q=1:1:$L(IB,",") S Z0=$P(IB,",",Q) I Z0'="" D
"RTN","IBCEOB1",245,0)
 . S IBMOD(Z0)=$G(IBMOD(Z0))+1
"RTN","IBCEOB1",246,0)
 . I '$L(MOD837S) S MOD837S=Z0 Q
"RTN","IBCEOB1",247,0)
 . S MOD837S=MOD837S_","_Z0
"RTN","IBCEOB1",248,0)
 I $TR(MODLST,U)="",$O(IBMOD(""))="" G MODQ ; No modifiers used
"RTN","IBCEOB1",249,0)
 ;
"RTN","IBCEOB1",250,0)
 ; No match if no VistA modifiers, but there are MRA modifiers
"RTN","IBCEOB1",251,0)
 I $TR(MODLST,U)'="",$O(IBMOD(""))="" S MODOK=0 G MODQ
"RTN","IBCEOB1",252,0)
 ;
"RTN","IBCEOB1",253,0)
 ; Evaluate each MRA modifier
"RTN","IBCEOB1",254,0)
 F Z0=1:1:4 D
"RTN","IBCEOB1",255,0)
 . S MMOD=$P(MODLST,U,Z0) Q:MMOD=""     ; individual MRA modifier
"RTN","IBCEOB1",256,0)
 . I '$D(IBMOD(MMOD)) Q                 ; not in array so just quit
"RTN","IBCEOB1",257,0)
 . S IBMOD(MMOD)=IBMOD(MMOD)-1          ; decrement array counter
"RTN","IBCEOB1",258,0)
 . I 'IBMOD(MMOD) KILL IBMOD(MMOD)      ; if 0, then kill array entry
"RTN","IBCEOB1",259,0)
 . Q
"RTN","IBCEOB1",260,0)
 ;
"RTN","IBCEOB1",261,0)
 I $O(IBMOD(""))'="" S MODOK=0 ; All submitted mods not matched
"RTN","IBCEOB1",262,0)
MODQ Q MODOK
"RTN","IBCEOB1",263,0)
 ;
"RTN","IBCEP")
0^77^B21911838^B21937532
"RTN","IBCEP",1,0)
IBCEP ;ALB/TMP - Functions for PROVIDER ID MAINT - INS CO PARAMS ;11-02-00
"RTN","IBCEP",2,0)
 ;;2.0;INTEGRATED BILLING;**137,232,320,348,349,592**;21-MAR-94;Build 58
"RTN","IBCEP",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEP",4,0)
 ;
"RTN","IBCEP",5,0)
EN ; -- main entry point for IBCE PRV INS PARAMS
"RTN","IBCEP",6,0)
 N IBINS,IBCUINC ; Variable should be available throughout actions
"RTN","IBCEP",7,0)
 D FULL^VALM1
"RTN","IBCEP",8,0)
 D EN^VALM("IBCE PRV INS PARAMS")
"RTN","IBCEP",9,0)
 Q
"RTN","IBCEP",10,0)
 ;
"RTN","IBCEP",11,0)
HDR ; -- header code
"RTN","IBCEP",12,0)
 K VALMHDR
"RTN","IBCEP",13,0)
 I $G(IBINS) S VALMHDR(1)="INSURANCE CO: "_$P($G(^DIC(36,+IBINS,0)),U)
"RTN","IBCEP",14,0)
 Q
"RTN","IBCEP",15,0)
 ;
"RTN","IBCEP",16,0)
INIT ; Initialization
"RTN","IBCEP",17,0)
 N DIR,DIC,DA,X,Y,DTOUT,DUOUT
"RTN","IBCEP",18,0)
 S DIC(0)="AEMQ",DIC="^DIC(36," D ^DIC
"RTN","IBCEP",19,0)
 I Y'>0 D
"RTN","IBCEP",20,0)
 . S VALMQUIT=1
"RTN","IBCEP",21,0)
 E  D
"RTN","IBCEP",22,0)
 . S DIR="YA",DIR("A")="DO YOU WANT TO INCLUDE ANY CARE UNIT DETAIL?: ",DIR("?",1)="If you want to see the specific care unit defined for the insurance co",DIR("?")="you should respond yes here"
"RTN","IBCEP",23,0)
 . W ! D ^DIR K DIR W !
"RTN","IBCEP",24,0)
 . I $D(DTOUT)!$D(DUOUT) S VALMQUIT=1 Q
"RTN","IBCEP",25,0)
 . S IBCUINC=(Y=1)
"RTN","IBCEP",26,0)
 . S IBINS=+Y D BLD(IBINS,IBCUINC)
"RTN","IBCEP",27,0)
 Q
"RTN","IBCEP",28,0)
 ;
"RTN","IBCEP",29,0)
BLD(IBINS,IBCUINC) ; Build display for ins co level provider ID parameters
"RTN","IBCEP",30,0)
 ; IBINS = ien of ins co (file 36)
"RTN","IBCEP",31,0)
 ; IBCUINC = flag:
"RTN","IBCEP",32,0)
 ;    = 1 if care unit list should be included  or 0 if not
"RTN","IBCEP",33,0)
 N A,A0,A1,A2,A3,Z0,IB1,IB12,IB4,IBLCT,IBPTYP
"RTN","IBCEP",34,0)
 S IBLCT=0
"RTN","IBCEP",35,0)
 S IB4=$G(^DIC(36,IBINS,4))
"RTN","IBCEP",36,0)
 K ^TMP("IBPRV_INS_ID_PARAMS",$J)
"RTN","IBCEP",37,0)
 ;
"RTN","IBCEP",38,0)
 S Z0="Perf Prov Secondary ID Type (1500): "_$E($$EXPAND^IBTRE(36,4.01,+$P(IB4,U))_$J("",20),1,20) D SET1(.IBLCT,Z0)
"RTN","IBCEP",39,0)
 S Z0="Perf Prov Secondary ID Type (UB04): "_$E($$EXPAND^IBTRE(36,4.02,+$P(IB4,U,2))_$J("",20),1,20) D SET1(.IBLCT,Z0)
"RTN","IBCEP",40,0)
 S Z0=$J("",20)_"Required: "_$$EXPAND^IBTRE(36,4.03,$P(IB4,U,3)) D SET1(.IBLCT,Z0)
"RTN","IBCEP",41,0)
 S Z0=$J("",10)_"Care Unit Name: "_$$EXPAND^IBTRE(36,4.09,$P(IB4,U,9)) D SET1(.IBLCT,Z0)
"RTN","IBCEP",42,0)
 S Z0=""  D SET1(.IBLCT,Z0)
"RTN","IBCEP",43,0)
 ;
"RTN","IBCEP",44,0)
 I '$D(^IBA(355.96,"D",IBINS)) D  G BLDQ ;No care unit needed
"RTN","IBCEP",45,0)
 . S Z0=$J("",7)_"*** NO CARE UNITS DEFINED FOR THIS INS CO PROVIDER SECONDARY ID ***" D SET1(.IBLCT,Z0)
"RTN","IBCEP",46,0)
 ;
"RTN","IBCEP",47,0)
 S Z0=$J("",17)_"VALID CARE UNITS FOR THIS INSURANCE COMPANY" D SET1(.IBLCT,Z0),CNTRL^VALM10(IBLCT,18,46,IORVON,IORVOFF)
"RTN","IBCEP",48,0)
 S A=0
"RTN","IBCEP",49,0)
 F  S A=$O(^IBA(355.96,"AC",IBINS,A)) Q:'A  S IBPTYP=$P($G(^IBE(355.97,A,0)),U) I IBPTYP'="" D
"RTN","IBCEP",50,0)
 . S A2=IBPTYP_U_A,^TMP("IBPRV_INS_ID_PARAMS_SORT",$J,A2)=""
"RTN","IBCEP",51,0)
 . S A0=0 F  S A0=$O(^IBA(355.96,"AC",IBINS,A,A0)) Q:'A0  S A1=$G(^IBA(355.96,A0,0)) D
"RTN","IBCEP",52,0)
 .. I '$G(IBCUINC) S:'$D(^TMP("IBPRV_INS_ID_PARAMS_SORT",$J,A2,$P(A1,U,4)_U_$P(A1,U,5))) ^($P(A1,U,4)_U_$P(A1,U,5))="" Q
"RTN","IBCEP",53,0)
 .. I $P(A1,U,4)'="",$P(A1,U,5)'="" D
"RTN","IBCEP",54,0)
 ... S A3=$E($P($G(^IBE(355.95,+A1,0)),U)_$J("",1,30),1,30)_U_$S($P($G(^(0)),U,2)'="":$P(^(0),U,2),1:"<No description available>")
"RTN","IBCEP",55,0)
 ... I '$D(^TMP("IBPRV_INS_ID_PARAMS_SORT",$J,A2,$P(A1,U,4)_U_$P(A1,U,5),$P(A3,U))) S ^($P(A3,U))=$P(A3,U,2)
"RTN","IBCEP",56,0)
 . ; records are fully sorted
"RTN","IBCEP",57,0)
 S A=""
"RTN","IBCEP",58,0)
 F  S A=$O(^TMP("IBPRV_INS_ID_PARAMS_SORT",$J,A)) Q:'A  S A2="PROVIDER ID TYPE: "_$P(A,U),IB1=1 D:'IB1 SET1(.IBLCT,"") D SET1(.IBLCT,A2) S IB12=1 S:$G(IBCUINC) IB1=0 D
"RTN","IBCEP",59,0)
 . S A0="" F  S A0=$O(^TMP("IBPRV_INS_ID_PARAMS_SORT",$J,A,A0)) Q:A0=""  D
"RTN","IBCEP",60,0)
 .. S Z0=$J("",5)_"FORM TYPE: "_$E($$EXPAND^IBTRE(355.96,.04,$P(A0,U))_$J("",25),1,25)_"  CARE TYPE: "_$E($$EXPAND^IBTRE(355.96,.05,$P(A0,U,2))_$J("",25),1,25)
"RTN","IBCEP",61,0)
 .. D:'IB12 SET1(.IBLCT,"") D SET1(.IBLCT,Z0)
"RTN","IBCEP",62,0)
 .. Q:'$G(IBCUINC)
"RTN","IBCEP",63,0)
 .. S IB12=0
"RTN","IBCEP",64,0)
 .. S A1="" F  S A1=$O(^TMP("IBPRV_INS_ID_PARAMS_SORT",$J,A,A0,A1)) Q:A1=""  S Z0=$J("",10)_A1_$G(^(A1)) D SET1(.IBLCT,Z0)
"RTN","IBCEP",65,0)
 ;
"RTN","IBCEP",66,0)
BLDQ K ^TMP("IBPRV_INS_ID_PARAMS_SORT",$J)
"RTN","IBCEP",67,0)
 S VALMCNT=IBLCT,VALMBG=1
"RTN","IBCEP",68,0)
 Q
"RTN","IBCEP",69,0)
 ;
"RTN","IBCEP",70,0)
SET1(IBLCT,Z0) ;
"RTN","IBCEP",71,0)
 S IBLCT=IBLCT+1 D SET^VALM10(IBLCT,Z0)
"RTN","IBCEP",72,0)
 Q
"RTN","IBCEP",73,0)
 ;
"RTN","IBCEP",74,0)
EXPND ;
"RTN","IBCEP",75,0)
 Q
"RTN","IBCEP",76,0)
 ;
"RTN","IBCEP",77,0)
HELP ;
"RTN","IBCEP",78,0)
 Q
"RTN","IBCEP",79,0)
 ;
"RTN","IBCEP",80,0)
EXIT ;
"RTN","IBCEP",81,0)
 K ^TMP("IBPRV_INS_ID_PARAMS",$J)
"RTN","IBCEP",82,0)
 D CLEAN^VALM10
"RTN","IBCEP",83,0)
 Q
"RTN","IBCEP",84,0)
 ;
"RTN","IBCEP",85,0)
EDIT ; Entrypoint called from IBCSCE to invoke provider id edit functions
"RTN","IBCEP",86,0)
 Q
"RTN","IBCEP",87,0)
 ;
"RTN","IBCEP",88,0)
EDIT1 ; Edit parameters
"RTN","IBCEP",89,0)
 N IB,IBY,IBCNS,DIE,DR,X,Y
"RTN","IBCEP",90,0)
 D FULL^VALM1
"RTN","IBCEP",91,0)
 S IBCNS=IBINS,IBY=12
"RTN","IBCEP",92,0)
 D MAIN^IBCNSC1
"RTN","IBCEP",93,0)
 S VALMBCK="R"
"RTN","IBCEP",94,0)
 Q
"RTN","IBCEP",95,0)
 ;
"RTN","IBCEP",96,0)
NETID() ; Returns the ien of the entry in file 355.97 that is designated as the
"RTN","IBCEP",97,0)
 ; NETWORK ID
"RTN","IBCEP",98,0)
 N Z S Z=0 F  S Z=$O(^IBE(355.97,Z)) Q:'Z  Q:$P($G(^(Z,1)),U,6)
"RTN","IBCEP",99,0)
 Q Z
"RTN","IBCEP",100,0)
 ;
"RTN","IBCEP",101,0)
EMCID() ; Returns the ien of the entry in file 355.97 that is designated as the
"RTN","IBCEP",102,0)
 ; EMC ID
"RTN","IBCEP",103,0)
 N Z S Z=0 F  S Z=$O(^IBE(355.97,Z)) Q:'Z  Q:$P($G(^(Z,1)),U,5)
"RTN","IBCEP",104,0)
 Q Z
"RTN","IBCEP",105,0)
 ;
"RTN","IBCEP",106,0)
UPIN() ; Returns the ien of the entry in file 355.97 that is designated as the
"RTN","IBCEP",107,0)
 ; UPIN ID
"RTN","IBCEP",108,0)
 Q +$O(^IBE(355.97,"B","UPIN",0))
"RTN","IBCEP",109,0)
 ;
"RTN","IBCEP",110,0)
EDITID(IBCNS) ; Edit provider id's from insurance co enter/edit
"RTN","IBCEP",111,0)
 ; IBCNS = ien of file 36
"RTN","IBCEP",112,0)
 Q   ; WCJ 12/30/2005
"RTN","IBCEP",113,0)
 N X,Y,Z4,DIR
"RTN","IBCEP",114,0)
 S Z4=$G(^DIC(36,IBCNS,4))
"RTN","IBCEP",115,0)
 I 'Z4,'$P(Z4,U,2) Q
"RTN","IBCEP",116,0)
 S DIR("A",1)="USE PROVIDER ID MAINTENANCE TO ENTER/EDIT PROV SECONDARY ID'S FOR THIS CO.",DIR("A")="PRESS RETURN TO CONTINUE: ",DIR(0)="EA" W ! D ^DIR K DIR
"RTN","IBCEP",117,0)
 Q
"RTN","IBCEP",118,0)
 ;
"RTN","IBCEP0")
0^56^B73482476^B72988183
"RTN","IBCEP0",1,0)
IBCEP0 ;ALB/TMP - Functions for PROVIDER ID MAINTENANCE ;13-DEC-99
"RTN","IBCEP0",2,0)
 ;;2.0;INTEGRATED BILLING;**137,191,239,232,320,348,349,377,592**;21-MAR-94;Build 58
"RTN","IBCEP0",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEP0",4,0)
 ;
"RTN","IBCEP0",5,0)
EN ; -- main entry point for IBCE PRV INS ID
"RTN","IBCEP0",6,0)
 N IBINS,IBDSP,IBSORT,IBPRV ; Variables should be available throughout actions
"RTN","IBCEP0",7,0)
 K IBFASTXT
"RTN","IBCEP0",8,0)
 D FULL^VALM1
"RTN","IBCEP0",9,0)
 D EN^VALM("IBCE PRVINS ID")
"RTN","IBCEP0",10,0)
 Q
"RTN","IBCEP0",11,0)
 ;
"RTN","IBCEP0",12,0)
EN1(IBINS) ; Entrypoint from insurance co maintenance
"RTN","IBCEP0",13,0)
 N IBDSP,IBSORT ; Variables should be available throughout actions
"RTN","IBCEP0",14,0)
 D FULL^VALM1
"RTN","IBCEP0",15,0)
 D EN^VALM("IBCE PRVINS ID FROM INS MAINT")
"RTN","IBCEP0",16,0)
 Q
"RTN","IBCEP0",17,0)
 ;
"RTN","IBCEP0",18,0)
HDR ; -- header code
"RTN","IBCEP0",19,0)
 N Z,Z0,Z1,IBCT,IBPPTYP,IBEMCTYP
"RTN","IBCEP0",20,0)
 S IBCT=1
"RTN","IBCEP0",21,0)
 K VALMHDR
"RTN","IBCEP0",22,0)
 I $G(IBINS) D
"RTN","IBCEP0",23,0)
 . N PCF,PCDISP
"RTN","IBCEP0",24,0)
 . S PCF=$P($G(^DIC(36,+IBINS,3)),U,13)
"RTN","IBCEP0",25,0)
 . S PCDISP=$S(PCF="C":"(Child)",PCF="P":"(Parent)",1:"")
"RTN","IBCEP0",26,0)
 . S VALMHDR(1)="Insurance Co: "_$P($G(^DIC(36,+IBINS,0)),U)_" "_PCDISP
"RTN","IBCEP0",27,0)
 . ; Get performing provider id type for insurance co
"RTN","IBCEP0",28,0)
 . S IBPPTYP=$$PPTYP(IBINS)
"RTN","IBCEP0",29,0)
 . ; Get ien of EMC ID from file 355.97
"RTN","IBCEP0",30,0)
 . S IBEMCTYP=+$$EMCID^IBCEP()
"RTN","IBCEP0",31,0)
 . I $G(IBSORT)="ALL"!($G(IBDSP)="I")!($G(IBSORT)=IBPPTYP)!($G(IBSORT)=IBEMCTYP) D
"RTN","IBCEP0",32,0)
 .. ; Look for care unit in either of these id types - if there, report on line 2 of header
"RTN","IBCEP0",33,0)
 .. I $G(IBSORT)=IBPPTYP S IBEMCTYP=0
"RTN","IBCEP0",34,0)
 .. I $G(IBSORT)=IBEMCTYP S IBPPTYP=0
"RTN","IBCEP0",35,0)
 .. F Z0=IBPPTYP_"P",IBEMCTYP_"E" S Z1="" F  S Z1=$O(^IBA(355.96,"D",+IBINS,+Z0,Z1)) Q:Z1=""  I Z1'="*N/A*" S Z($E(Z0,$L(Z0)))=1 Q
"RTN","IBCEP0",36,0)
 .. I $D(Z("P"))!$D(Z("E")) D
"RTN","IBCEP0",37,0)
 ... S IBCT=IBCT+1
"RTN","IBCEP0",38,0)
 ... S VALMHDR(IBCT)="  "_$S($D(Z("P")):"PERFORMING PROV ID"_$S($D(Z("E")):" AND ",1:""),1:"")_$S($D(Z("E")):"EMC PROV ID",1:"")_" MAY REQUIRE CARE UNIT"
"RTN","IBCEP0",39,0)
 . I $D(Z("P"))!$D(Z("E")) S IBCT=IBCT+1,VALMHDR(IBCT)=" "
"RTN","IBCEP0",40,0)
 . S IBCT=IBCT+1,VALMHDR(IBCT)="     PROVIDER "_$S($G(IBDSP)="I":"ID TYPE",1:"NAME   ")_$J("",6)_"FORM   CARE TYPE    CARE UNIT       ID#"
"RTN","IBCEP0",41,0)
 Q
"RTN","IBCEP0",42,0)
 ;
"RTN","IBCEP0",43,0)
INIT ; Initialization
"RTN","IBCEP0",44,0)
 K ^TMP("IB_EDITED_IDS",$J)  ; This will be to keep track of ID's edited during this session
"RTN","IBCEP0",45,0)
 D INSID(.IBINS,.IBDSP,.IBSORT)
"RTN","IBCEP0",46,0)
 I $G(IBDSP)="I",$G(IBSORT) S IBPRV=IBSORT
"RTN","IBCEP0",47,0)
 I '$G(IBINS) S VALMQUIT=1
"RTN","IBCEP0",48,0)
 Q
"RTN","IBCEP0",49,0)
 ;
"RTN","IBCEP0",50,0)
INSID(IBINS,IBDSP,IBSORT) ;
"RTN","IBCEP0",51,0)
 N DIC,DIR,DA,X,Y,IBOK,DTOUT,DUOUT
"RTN","IBCEP0",52,0)
 S IBOK=1
"RTN","IBCEP0",53,0)
 I '$G(IBINS) D
"RTN","IBCEP0",54,0)
 . S DIC(0)="AEMQ",DIC="^DIC(36," D ^DIC
"RTN","IBCEP0",55,0)
 . I Y'>0 S IBOK=0 Q
"RTN","IBCEP0",56,0)
 . S IBINS=+Y
"RTN","IBCEP0",57,0)
 I '$G(IBINS) S IBOK=0
"RTN","IBCEP0",58,0)
 I 'IBOK G INSIDQ
"RTN","IBCEP0",59,0)
 ;
"RTN","IBCEP0",60,0)
 S DIR(0)="SA^D:INSURANCE CO DEFAULT IDS;I:INDIVIDUAL PROVIDER IDS FURNISHED BY THE INS CO;A:ALL IDS FURNISHED BY THE INS CO BY PROVIDER TYPE"
"RTN","IBCEP0",61,0)
 S DIR("A")="SELECT DISPLAY CONTENT: ",DIR("B")="A"
"RTN","IBCEP0",62,0)
 S DIR("?",1)="(D) DISPLAY CONTAINS ONLY THOSE IDS ASSIGNED AS DEFAULTS TO THE FACILITY BY",DIR("?",2)="    THE INSURANCE COMPANY"
"RTN","IBCEP0",63,0)
 S DIR("?",3)="(I) DISPLAY CONTAINS ONLY THOSE IDS ASSIGNED TO INDIVIDUAL PROVIDERS BY THE",DIR("?",4)="    INSURANCE COMPANY"
"RTN","IBCEP0",64,0)
 S DIR("?",5)="(A) DISPLAY CONTAINS ALL IDS ASSIGNED BY THE INSURANCE COMPANY FOR ONE OR ALL",DIR("?")="    PROVIDER ID TYPES"
"RTN","IBCEP0",65,0)
 W ! D ^DIR K DIR W !
"RTN","IBCEP0",66,0)
 I $D(DTOUT)!$D(DUOUT)!("DIA"'[Y) S IBOK=0 G INSIDQ
"RTN","IBCEP0",67,0)
 S IBDSP=Y,IBSORT=""
"RTN","IBCEP0",68,0)
 I IBDSP="A"!(IBDSP="I") F  D  Q:'IBOK!(IBSORT'="")
"RTN","IBCEP0",69,0)
 . ;
"RTN","IBCEP0",70,0)
 . I IBDSP="A" D
"RTN","IBCEP0",71,0)
 .. S DIR("A")="Display only IDs with a specific ID Qualifier?: "
"RTN","IBCEP0",72,0)
 .. S DIR("?",1)="Answer Yes to select a specific ID Qualifier by which to display IDs."
"RTN","IBCEP0",73,0)
 .. S DIR("?")="Answer No to display all IDs."
"RTN","IBCEP0",74,0)
 .. Q
"RTN","IBCEP0",75,0)
 . ;
"RTN","IBCEP0",76,0)
 . I IBDSP="I" D
"RTN","IBCEP0",77,0)
 .. S DIR("A")="Display IDs for a specific Provider?: "
"RTN","IBCEP0",78,0)
 .. S DIR("?",1)="Answer Yes to select a specific Provider."
"RTN","IBCEP0",79,0)
 .. S DIR("?")="Answer No to display all Providers."
"RTN","IBCEP0",80,0)
 .. Q
"RTN","IBCEP0",81,0)
 . ;
"RTN","IBCEP0",82,0)
 . S DIR("B")="NO",DIR(0)="YA"
"RTN","IBCEP0",83,0)
 . W ! D ^DIR K DIR W !
"RTN","IBCEP0",84,0)
 . I $D(DTOUT)!$D(DUOUT) S IBOK=0 Q
"RTN","IBCEP0",85,0)
 . I Y'=1 S IBSORT="ALL" Q
"RTN","IBCEP0",86,0)
 . ;
"RTN","IBCEP0",87,0)
 . I IBDSP="A" D  Q
"RTN","IBCEP0",88,0)
 .. S DIC(0)="AEMQ",DIC="^IBE(355.97,",DIC("S")="I $S('$P(^(0),U,2):1,1:$P(^(0),U,2)=3)"
"RTN","IBCEP0",89,0)
 .. S DIC("A")="Select type of ID Qualifier: "
"RTN","IBCEP0",90,0)
 .. D ^DIC K DIC
"RTN","IBCEP0",91,0)
 .. I Y>0 S IBSORT=+Y Q
"RTN","IBCEP0",92,0)
 .. I $D(DTOUT)!$D(DUOUT) S IBOK=0
"RTN","IBCEP0",93,0)
 . ;
"RTN","IBCEP0",94,0)
 . I IBDSP="I" D  Q
"RTN","IBCEP0",95,0)
 .. N DA
"RTN","IBCEP0",96,0)
 .. S DIR(0)="399.0222,.02A",DIR("A")="SELECT PROVIDER: "
"RTN","IBCEP0",97,0)
 .. W ! D ^DIR K DIR W !
"RTN","IBCEP0",98,0)
 .. I Y>0 S IBSORT=Y Q
"RTN","IBCEP0",99,0)
 .. I $D(DTOUT)!$D(DUOUT) S IBOK=0 Q
"RTN","IBCEP0",100,0)
 . S IBOK=0 Q
"RTN","IBCEP0",101,0)
 ;
"RTN","IBCEP0",102,0)
 G:'IBOK INSIDQ
"RTN","IBCEP0",103,0)
 D BLD(IBINS,IBDSP,IBSORT)
"RTN","IBCEP0",104,0)
INSIDQ I 'IBOK S VALMQUIT=1
"RTN","IBCEP0",105,0)
 Q
"RTN","IBCEP0",106,0)
 ;
"RTN","IBCEP0",107,0)
BLD(IBINS,IBDSP,IBSORT) ; Build display for Insurance co level provider ID's
"RTN","IBCEP0",108,0)
 N IB,IBENT,IBLCT,IBCT,IBPRV,IBSRT1,IBSRT2,IBOSRT1,IBOSRT2,CU,FT,PT,CT,Z,Z0
"RTN","IBCEP0",109,0)
 K ^TMP("IBPRV_INS_ID",$J),^TMP("IBPRV_INS_SORT",$J)
"RTN","IBCEP0",110,0)
 ;
"RTN","IBCEP0",111,0)
 S (IBENT,IBCT,IBLCT)=0
"RTN","IBCEP0",112,0)
 ;
"RTN","IBCEP0",113,0)
 I "DA"[$G(IBDSP) D
"RTN","IBCEP0",114,0)
 . S CU="" F  S CU=$O(^IBA(355.91,"AUNIQ",IBINS,CU)) Q:CU=""  S FT="" F  S FT=$O(^IBA(355.91,"AUNIQ",IBINS,CU,FT)) Q:FT=""  D
"RTN","IBCEP0",115,0)
 .. S CT="" F  S CT=$O(^IBA(355.91,"AUNIQ",IBINS,CU,FT,CT)) Q:CT=""  S PT=0 F  S PT=$S(IBDSP="A"&IBSORT:IBSORT,1:$O(^IBA(355.91,"AUNIQ",IBINS,CU,FT,CT,PT))) Q:'PT  D  Q:IBDSP="A"&IBSORT
"RTN","IBCEP0",116,0)
 ... S Z=0 F  S Z=$O(^IBA(355.91,"AUNIQ",IBINS,CU,FT,CT,PT,Z)) Q:'Z  S IB=$G(^IBA(355.91,Z,0)) S ^TMP("IBPRV_INS_SORT",$J,PT,"^<<INS CO DEFAULT>>",FT,CT,CU,Z)=$P(IB,U,7)_U
"RTN","IBCEP0",117,0)
 ;
"RTN","IBCEP0",118,0)
 I "IA"[$G(IBDSP) D
"RTN","IBCEP0",119,0)
 . S IBPRV=""
"RTN","IBCEP0",120,0)
 . N IB1,IB2
"RTN","IBCEP0",121,0)
 . F  S IBPRV=$O(^IBA(355.9,"AE",IBINS,IBPRV)) Q:'IBPRV  S Z=0 F  S Z=$O(^IBA(355.9,"AE",IBINS,IBPRV,Z)) Q:'Z  S IB=$G(^IBA(355.9,Z,0)) D
"RTN","IBCEP0",122,0)
 .. Q:$P(IB,U,4)=""!($P(IB,U,5)="")!($P(IB,U,6)="")!($P(IB,U,16)="")
"RTN","IBCEP0",123,0)
 .. I IBSORT,$S(IBDSP="I":IBPRV'=IBSORT,1:$P(IB,U,6)'=IBSORT) Q
"RTN","IBCEP0",124,0)
 .. S IB1=$S(IBDSP="A":$P(IB,U,6),1:U_$$EXPAND^IBTRE(355.9,.01,IBPRV)_U_IBPRV)
"RTN","IBCEP0",125,0)
 .. S IB2=$S(IBDSP="I":$P(IB,U,6),1:U_$$EXPAND^IBTRE(355.9,.01,IBPRV)_U_IBPRV)
"RTN","IBCEP0",126,0)
 .. S ^TMP("IBPRV_INS_SORT",$J,IB1,IB2,$P(IB,U,4),$P(IB,U,5),$P(IB,U,16),Z)=$P(IB,U,7)_U_IBPRV
"RTN","IBCEP0",127,0)
 ;
"RTN","IBCEP0",128,0)
 S IBOSRT1=""
"RTN","IBCEP0",129,0)
 S IBSRT1="" F  S IBSRT1=$O(^TMP("IBPRV_INS_SORT",$J,IBSRT1)) Q:IBSRT1=""  D
"RTN","IBCEP0",130,0)
 . S IBSRT2="",IBOSRT2=""
"RTN","IBCEP0",131,0)
 . F  S IBSRT2=$O(^TMP("IBPRV_INS_SORT",$J,IBSRT1,IBSRT2)) Q:IBSRT2=""  D
"RTN","IBCEP0",132,0)
 .. I IBOSRT1'=IBSRT1 D
"RTN","IBCEP0",133,0)
 ... I IBOSRT1'="" S IBLCT=IBLCT+1 D SET^VALM10(IBLCT," ",IBCT+1)
"RTN","IBCEP0",134,0)
 ... S IBLCT=IBLCT+1 D SET^VALM10(IBLCT,$S(IBDSP'="I":"ID Qualifier",1:"Provider")_": "_$S(IBDSP'="I":$$EXPAND^IBTRE(355.91,.06,IBSRT1),1:$P(IBSRT1,U,2_$S($P(IBSRT2,U,3)["VA(200":" (VA)",1:"(NON-VA)"))),IBCT+1)
"RTN","IBCEP0",135,0)
 ... S IBOSRT1=IBSRT1
"RTN","IBCEP0",136,0)
 .. ;
"RTN","IBCEP0",137,0)
 .. S FT="" F  S FT=$O(^TMP("IBPRV_INS_SORT",$J,IBSRT1,IBSRT2,FT)) Q:FT=""  S CT="" F  S CT=$O(^TMP("IBPRV_INS_SORT",$J,IBSRT1,IBSRT2,FT,CT)) Q:CT=""  D
"RTN","IBCEP0",138,0)
 ... S CU="" F  S CU=$O(^TMP("IBPRV_INS_SORT",$J,IBSRT1,IBSRT2,FT,CT,CU)) Q:CU=""  S Z=0 F  S Z=$O(^TMP("IBPRV_INS_SORT",$J,IBSRT1,IBSRT2,FT,CT,CU,Z)) Q:'Z  S IB=$G(^(Z)) D
"RTN","IBCEP0",139,0)
 .... S IBLCT=IBLCT+1,IBCT=IBCT+1
"RTN","IBCEP0",140,0)
 .... S Z0=$E(IBCT_$J("",4),1,4)_" "
"RTN","IBCEP0",141,0)
 .... I IBDSP'="I" S Z0=Z0_$E($S(IBOSRT2'=IBSRT2:$P(IBSRT2,U,2),1:"")_$J("",20),1,20)
"RTN","IBCEP0",142,0)
 .... I IBDSP="I" S Z0=Z0_$E($S(IBOSRT2'=IBSRT2:$$EXPAND^IBTRE(355.9,.06,IBSRT2),1:"")_$J("",20),1,20)
"RTN","IBCEP0",143,0)
 .... S IBOSRT2=IBSRT2
"RTN","IBCEP0",144,0)
 .... ;JRA IB*2.0*592
"RTN","IBCEP0",145,0)
 .... S Z0=Z0_"  "_$S(FT=1:"UB-04",FT=2:"1500",1:"BOTH ")_"  "_$E($S(CT=3:"RX",CT=1:"INPT",CT=2:"OUTPT",1:"INPT/OUTPT")_$J("",11),1,11)  ;JWS;JRA IB*2.0*592
"RTN","IBCEP0",146,0)
 .... S Z0=Z0_"  "_$E($S(CU'="*N/A*":$P($G(^IBA(355.95,+$P($G(^IBA(355.96,+CU,0)),U),0)),U),1:"")_$J("",15),1,15)  ;JWS;JRA IB*2.0*592
"RTN","IBCEP0",147,0)
 .... D SET^VALM10(IBLCT,Z0_" "_$P(IB,U),IBCT)
"RTN","IBCEP0",148,0)
 .... S ^TMP("IBPRV_INS_ID",$J,"ZIDX",IBCT)=Z,^(IBCT,"PRV")=$P(IB,U,2)
"RTN","IBCEP0",149,0)
 .... I '$D(^TMP("IBPRV_INS_ID",$J,$S(IBDSP="I":"ZXPRV",1:"ZXPTYP"),IBSRT1)) S ^(IBSRT1)=IBLCT-1
"RTN","IBCEP0",150,0)
 K ^TMP("IBPRV_INS_SORT",$J)
"RTN","IBCEP0",151,0)
 ;
"RTN","IBCEP0",152,0)
 I IBLCT=0 D  G BLDQ ; No entries found
"RTN","IBCEP0",153,0)
 . D SET^VALM10(1," ")
"RTN","IBCEP0",154,0)
 . S Z="  No "_$S(IBDSP="D":"default ",1:"")
"RTN","IBCEP0",155,0)
 . S Z=Z_"ID's found for "_$S(IBDSP="I":"provider "_$S(IBSORT:"("_$$EXPAND^IBTRE(355.9,.01,IBSORT)_") ",1:"")_"and ",IBDSP="A":"provider type "_$S(IBSORT:"("_$$EXPAND^IBTRE(355.9,.06,IBSORT)_") ",1:"")_"and ",1:"")_"insurance co"
"RTN","IBCEP0",156,0)
 . D SET^VALM10(2,Z)
"RTN","IBCEP0",157,0)
 . S IBLCT=2
"RTN","IBCEP0",158,0)
 ;
"RTN","IBCEP0",159,0)
BLDQ S VALMCNT=IBLCT,VALMBG=1
"RTN","IBCEP0",160,0)
 Q
"RTN","IBCEP0",161,0)
 ;
"RTN","IBCEP0",162,0)
EXPND ;
"RTN","IBCEP0",163,0)
 Q
"RTN","IBCEP0",164,0)
 ;
"RTN","IBCEP0",165,0)
HELP ;
"RTN","IBCEP0",166,0)
 Q
"RTN","IBCEP0",167,0)
 ;
"RTN","IBCEP0",168,0)
EXIT ;
"RTN","IBCEP0",169,0)
 K IBFASTXT
"RTN","IBCEP0",170,0)
 D COPYPROV^IBCEP5A(IBINS)
"RTN","IBCEP0",171,0)
 K ^TMP("IBPRV_INS_ID",$J)
"RTN","IBCEP0",172,0)
 D CLEAN^VALM10
"RTN","IBCEP0",173,0)
 Q
"RTN","IBCEP0",174,0)
 ;
"RTN","IBCEP0",175,0)
SEL(IBDA,MANY) ; Select from provider id list
"RTN","IBCEP0",176,0)
 ; IBDA is passed by reference and IBDA(1) returned containing
"RTN","IBCEP0",177,0)
 ;  ien's of the provider id records selected (file 355.9).
"RTN","IBCEP0",178,0)
 ; If > 1 entry can be selected, MANY is set to 1
"RTN","IBCEP0",179,0)
 N Z
"RTN","IBCEP0",180,0)
 S IBDA=0
"RTN","IBCEP0",181,0)
 D EN^VALM2($G(XQORNOD(0)),$S($G(MANY):"",1:"S"))
"RTN","IBCEP0",182,0)
 S Z=0 F  S Z=$O(VALMY(Z)) Q:'Z  S IBDA=IBDA+1,IBDA(IBDA)=+$G(^TMP("IBPRV_INS_ID",$J,"ZIDX",Z))_U_$G(^(Z,"PRV"))
"RTN","IBCEP0",183,0)
 Q
"RTN","IBCEP0",184,0)
 ;
"RTN","IBCEP0",185,0)
ENX(IBINS1) ; Insurance co level defaults for all providers or
"RTN","IBCEP0",186,0)
 ; for all providers by care unit
"RTN","IBCEP0",187,0)
 N DIC,DIE,DR,DA,X,Y,DLAYGO
"RTN","IBCEP0",188,0)
 I '$G(IBINS1) D  G:'$G(IBINS1) ENQ
"RTN","IBCEP0",189,0)
 . S DIC="^IBA(355.91,",DIC(0)="AELMQ",DLAYGO=355.91 D ^DIC
"RTN","IBCEP0",190,0)
 . I Y>0 S IBINS1=+Y
"RTN","IBCEP0",191,0)
 S DIE="^IBA(355.91,",DA=IBINS1,DR=".01;.06;.04;.05;.03;.07" D ^DIE
"RTN","IBCEP0",192,0)
 ;
"RTN","IBCEP0",193,0)
ENQ Q
"RTN","IBCEP0",194,0)
 ;
"RTN","IBCEP0",195,0)
PPTYP(IBINS) ; Returns the ien of the default performing provider type for 
"RTN","IBCEP0",196,0)
 ;  insurance company IBINS (ien file 36)
"RTN","IBCEP0",197,0)
 Q +$G(^DIC(36,+IBINS,4))
"RTN","IBCEP0",198,0)
 ;
"RTN","IBCEP0",199,0)
SCREEN(WHICH) ; This screen is used the menu protocol to screen out the ID functions if it is a child ins co
"RTN","IBCEP0",200,0)
 Q:'$G(DA) 0
"RTN","IBCEP0",201,0)
 Q:'$G(DA(1)) 0
"RTN","IBCEP0",202,0)
 N FILE,IENS,FIELD,FLAG,TARGET
"RTN","IBCEP0",203,0)
 S FILE=101.01,IENS=DA_","_DA(1),FIELD=".01",FLAG="I"
"RTN","IBCEP0",204,0)
 D GETS^DIQ(FILE,IENS,FIELD,FLAG,"TARGET")
"RTN","IBCEP0",205,0)
 Q:'$D(TARGET) 0
"RTN","IBCEP0",206,0)
 N IEN
"RTN","IBCEP0",207,0)
 S IEN=$G(TARGET(FILE,IENS_",",FIELD,FLAG))
"RTN","IBCEP0",208,0)
 Q:'+IEN 0
"RTN","IBCEP0",209,0)
 S FILE=101,FIELD=1,FLAG="E"
"RTN","IBCEP0",210,0)
 K TARGET
"RTN","IBCEP0",211,0)
 D GETS^DIQ(FILE,IEN,FIELD,FLAG,"TARGET")
"RTN","IBCEP0",212,0)
 Q:'$D(TARGET) 0
"RTN","IBCEP0",213,0)
 I $G(TARGET(FILE,IEN_",",FIELD,FLAG))'[WHICH Q 1
"RTN","IBCEP0",214,0)
 Q:'$G(IBINS) 0
"RTN","IBCEP0",215,0)
 N PCF
"RTN","IBCEP0",216,0)
 S PCF=$P($G(^DIC(36,+IBINS,3)),U,13)
"RTN","IBCEP0",217,0)
 I PCF="C" Q 0
"RTN","IBCEP0",218,0)
 Q 1
"RTN","IBCEP2")
0^57^B56529632^B54308373
"RTN","IBCEP2",1,0)
IBCEP2 ;ALB/TMP - EDI UTILITIES for provider ID ;13-DEC-99
"RTN","IBCEP2",2,0)
 ;;2.0;INTEGRATED BILLING;**137,181,232,280,320,349,432,592**;21-MAR-94;Build 58
"RTN","IBCEP2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEP2",4,0)
 ; DBIA for access to fields 53.2,54.1,54.2 in file 200: 224
"RTN","IBCEP2",5,0)
 ;
"RTN","IBCEP2",6,0)
GETID(IBIFN,IBTYPE,IBPROV,IBSEQ,IBT,IBT1,IBFUNC) ; Extract IBTYPE id for the bill
"RTN","IBCEP2",7,0)
 ; IBIFN = bill ien (file 399)
"RTN","IBCEP2",8,0)
 ; IBTYPE = 2:PERFORMING PROVIDER ID (1 and 3 deleted)
"RTN","IBCEP2",9,0)
 ; IBSEQ = numeric COB sequence of the insurance on bill
"RTN","IBCEP2",10,0)
 ; IBFUNC = 1:REFERRING;2:OPERATING;3:RENDERING;4:ATTENDING;5:SUPERVISING;6:ASSISTANT SURGEON;9:OTHER;
"RTN","IBCEP2",11,0)
 ; Returns IBT = ien of the provider id type^ien of entry^file # for id
"RTN","IBCEP2",12,0)
 ;
"RTN","IBCEP2",13,0)
 S IBT=0
"RTN","IBCEP2",14,0)
 Q:IBTYPE'=2 ""
"RTN","IBCEP2",15,0)
 N IBID,IBPTYP
"RTN","IBCEP2",16,0)
 S IBID=$$IDFIND(IBIFN,"",IBPROV,IBSEQ,1,.IBT,$G(IBFUNC))
"RTN","IBCEP2",17,0)
 I IBID="" S IBT=""
"RTN","IBCEP2",18,0)
 ;
"RTN","IBCEP2",19,0)
 Q IBID
"RTN","IBCEP2",20,0)
 ;
"RTN","IBCEP2",21,0)
IDFIND(IBIFN,IBPTYP,IBPROV,IBSEQ,IBPERF,IBT,IBFUNC) ;Loop thru source levels
"RTN","IBCEP2",22,0)
 ;   (if id definition allows) to find correct ID
"RTN","IBCEP2",23,0)
 ; IBIFN = bill ien (file 399)
"RTN","IBCEP2",24,0)
 ; IBPTYP = ien of the provider id type in file 355.97 or if null,
"RTN","IBCEP2",25,0)
 ;          the default performing provider ID type for the ins co. in
"RTN","IBCEP2",26,0)
 ;          COB sequence IBSEQ will be calculated
"RTN","IBCEP2",27,0)
 ; IBPROV = (variable pointer syntax) provider on bill IBIFN
"RTN","IBCEP2",28,0)
 ; IBSEQ = numeric COB sequence of the bill
"RTN","IBCEP2",29,0)
 ; IBPERF = 1 if the performing provider id is needed
"RTN","IBCEP2",30,0)
 ; IBFUNC = 1:REFERRING;2:OPERATING;3:RENDERING;4:ATTENDING;5:SUPERVISING;9:OTHER;
"RTN","IBCEP2",31,0)
 ; Returns IBT = ptr to file 355.97^entry #^file #
"RTN","IBCEP2",32,0)
 ;
"RTN","IBCEP2",33,0)
 S IBT=+$G(IBPTYP)
"RTN","IBCEP2",34,0)
 Q:'$G(IBPERF)!'$G(IBPROV) ""
"RTN","IBCEP2",35,0)
 N IBSPEC,IBINS,IBINS4,IBSRC,IBUP,IBID,IBALT,IBPROF,Z
"RTN","IBCEP2",36,0)
 I $G(IBSEQ)="" S IBSEQ=+$$COBN^IBCEF(IBIFN) ; Default to current COB seq
"RTN","IBCEP2",37,0)
 S IBINS=+$P($G(^DGCR(399,IBIFN,"I"_IBSEQ)),U),IBINS4=$G(^DIC(36,+IBINS,4))
"RTN","IBCEP2",38,0)
 ;JRA IB*2.0*592 Same logic for Dental Form 7 as for CMS-1500
"RTN","IBCEP2",39,0)
 ;S IBPROF=($$FT^IBCEF(IBIFN)=2) S:'IBPROF IBPROF=2  ;JRA IB*2.0*592 ';'
"RTN","IBCEP2",40,0)
 N FT S FT=$$FT^IBCEF(IBIFN)  ;JRA IB*2.0*592 Added 'FT'
"RTN","IBCEP2",41,0)
 S IBPROF=(FT=2!(FT=7)) S:'IBPROF IBPROF=2  ;JRA IB*2.0*592
"RTN","IBCEP2",42,0)
 ; form type is CMS-1500 or J430D (prof)=1, UB-04 (inst)=2
"RTN","IBCEP2",43,0)
 ;JWS;IB*2.0*592; No Dental default ID
"RTN","IBCEP2",44,0)
 I $G(IBPTYP)="",FT=7,$G(IBFUNC)=1,IBPROF=1 S (IBT,IBPTYP)=0 Q ""
"RTN","IBCEP2",45,0)
 I $G(IBPTYP)="",$G(IBFUNC)=1,IBPROF=1 S (IBT,IBPTYP)=+$P(IBINS4,U,4) ; Referring Default ID on CMS-1500
"RTN","IBCEP2",46,0)
 I $G(IBPTYP)="" S (IBT,IBPTYP)=+$P(IBINS4,U,IBPROF) ; Def to perf prv typ for form
"RTN","IBCEP2",47,0)
 I 'IBPTYP Q ""  ; No default id type
"RTN","IBCEP2",48,0)
 S IBSPEC=$G(^IBE(355.97,IBPTYP,1)),IBSRC=$P($G(^IBE(355.97,+IBPTYP,0)),U,2),IBSRC=$S('IBSRC:5,1:IBSRC),IBUP=1
"RTN","IBCEP2",49,0)
 S IBALT=0
"RTN","IBCEP2",50,0)
 ;
"RTN","IBCEP2",51,0)
 F  D  Q:'IBUP!($G(IBID)'="")  S IBSRC=IBSRC-1 Q:'IBSRC
"RTN","IBCEP2",52,0)
 . ;
"RTN","IBCEP2",53,0)
 . I IBSRC=1,$TR($P(IBSPEC,U,1,3),"^0")'="" D  Q  ; Indiv prov default
"RTN","IBCEP2",54,0)
 .. N IBSTATE
"RTN","IBCEP2",55,0)
 .. I $P(IBSPEC,U,2) D  Q  ; Federal DEA # from field 53.2 file 200
"RTN","IBCEP2",56,0)
 ... S IBID=$P($G(^VA(200,+IBPROV,"PS")),U,2) ; DBIA224
"RTN","IBCEP2",57,0)
 ... S $P(IBT,U,2,3)=(IBPROV_U_200)
"RTN","IBCEP2",58,0)
 .. S IBSTATE=+$$CAREST^IBCEP2A(IBIFN)
"RTN","IBCEP2",59,0)
 .. I $P(IBSPEC,U) D  Q  ; State issued DEA # needed
"RTN","IBCEP2",60,0)
 ... Q:'IBSTATE
"RTN","IBCEP2",61,0)
 ... ; Extract the state issuing DEA # from field 54.2 file 200
"RTN","IBCEP2",62,0)
 ... S Z=+$O(^VA(200,+IBPROV,"PS2","B",IBSTATE,0)),IBID=$P($G(^VA(200,+IBPROV,"PS2",Z,0)),U,2) ; DBIA224
"RTN","IBCEP2",63,0)
 ... S $P(IBT,U,2,3)=(+IBPROV_";"_Z_U_200)
"RTN","IBCEP2",64,0)
 .. I $P(IBSPEC,U,3) D  Q  ; State license # needed
"RTN","IBCEP2",65,0)
 ... Q:'IBSTATE
"RTN","IBCEP2",66,0)
 ... ; Extract the state license # from field 54.1 file 200
"RTN","IBCEP2",67,0)
 ... I IBPROV["VA(200" S Z=+$O(^VA(200,+IBPROV,"PS1","B",IBSTATE,0)),IBID=$P($G(^VA(200,+IBPROV,"PS1",Z,0)),U,2),$P(IBT,U,2,3)=(+IBPROV_";"_IBSTATE_U_200) ; DBIA224
"RTN","IBCEP2",68,0)
 ... I IBPROV["IBA(355.93" S IBID=$P($G(^IBA(355.93,+IBPROV,0)),U,12),$P(IBT,U,2,3)=(+IBPROV_U_355.93)
"RTN","IBCEP2",69,0)
 . ;
"RTN","IBCEP2",70,0)
 . I IBSRC=2,$P(IBSPEC,U,4) D  Q  ; FACILITY FED TAX ID #
"RTN","IBCEP2",71,0)
 .. N IBXDATA
"RTN","IBCEP2",72,0)
 .. D F^IBCEF("N-FEDERAL TAX ID",,,IBIFN)
"RTN","IBCEP2",73,0)
 .. S IBID=IBXDATA,$P(IBT,U,2,3)=(U_350.9)
"RTN","IBCEP2",74,0)
 . ;
"RTN","IBCEP2",75,0)
 . I IBSRC=1 S IBID=$$SRC1(IBIFN,"*ALL*",IBPTYP,IBPROV,.IBT) Q
"RTN","IBCEP2",76,0)
 . ;
"RTN","IBCEP2",77,0)
 . I IBSRC=2 S IBID=$$SRC2(IBPTYP,.IBT) Q
"RTN","IBCEP2",78,0)
 . ;
"RTN","IBCEP2",79,0)
 . I IBSRC=3 S IBID=$$SRC3(IBIFN,IBINS,IBPTYP,.IBT) Q
"RTN","IBCEP2",80,0)
 . ; 
"RTN","IBCEP2",81,0)
 . I IBSRC=4 S IBID=$$SRC4(IBIFN,IBINS,IBPTYP,IBPROV,.IBT) Q
"RTN","IBCEP2",82,0)
 . ;
"RTN","IBCEP2",83,0)
 . I IBSRC=5 S IBID=$$SRC5(IBIFN,IBINS,IBPTYP,IBSEQ,.IBT,$G(IBFUNC)) Q
"RTN","IBCEP2",84,0)
 . ;
"RTN","IBCEP2",85,0)
 . I IBSRC=6 S IBID=$$SRC6(IBIFN,IBINS,IBPTYP,IBPROV,IBSEQ,.IBT) Q
"RTN","IBCEP2",86,0)
 ;
"RTN","IBCEP2",87,0)
 Q $G(IBID)
"RTN","IBCEP2",88,0)
 ;
"RTN","IBCEP2",89,0)
GETALL(IBTYPE,IBIFN,IBPROV,IBPID) ; Extract all performing prov id's for a
"RTN","IBCEP2",90,0)
 ; provider (IBPROV - vp format) on bill IBIFN
"RTN","IBCEP2",91,0)
 ; IBTYPE = type of ID to return (see GETID above)
"RTN","IBCEP2",92,0)
 ;
"RTN","IBCEP2",93,0)
 ; Returns array IBPID(COB SEQ #)=id (pass by reference) AND
"RTN","IBCEP2",94,0)
 ;   IBPID(COB SEQ #,1)=ien of id type (ptr to 355.97)
"RTN","IBCEP2",95,0)
 ;   IBPID = current insurance co's id
"RTN","IBCEP2",96,0)
 ;
"RTN","IBCEP2",97,0)
 N Z,COB,Z1,IBT
"RTN","IBCEP2",98,0)
 S COB=$$COBN^IBCEF(IBIFN)
"RTN","IBCEP2",99,0)
 F Z=1:1:3 Q:'$D(^DGCR(399,IBIFN,"I"_Z))  S IBPID(Z)=$$GETID(IBTYPE,IBIFN,IBPROV,Z,.IBT),IBPID(Z,1)=IBT I Z=COB S Z1=IBPID(Z)
"RTN","IBCEP2",100,0)
 Q $G(Z1)
"RTN","IBCEP2",101,0)
 ;
"RTN","IBCEP2",102,0)
SRC1(IBIFN,IBINS,IBPTYP,IBPROV,IBT) ; Licensing/gov't issued # - provider specific
"RTN","IBCEP2",103,0)
 ; Parameter definitions for SRC1, SRC3, SRC4, SRC5, SRC6:
"RTN","IBCEP2",104,0)
 ;   IBIFN = ien of bill (file 399)
"RTN","IBCEP2",105,0)
 ;   IBINS = ien of insurance co (file 36) or *ALL* for all insurance
"RTN","IBCEP2",106,0)
 ;           (always *ALL* for SRC1)
"RTN","IBCEP2",107,0)
 ;   IBPTYP = ien of the provider id type in file 355.97
"RTN","IBCEP2",108,0)
 ;   IBPROV = (variable pointer syntax) provider on bill IBIFN
"RTN","IBCEP2",109,0)
 ;   IBT = returned as type ien^file ien^file #
"RTN","IBCEP2",110,0)
 ;
"RTN","IBCEP2",111,0)
 N IBID,IB,IBRX,IBIDSV
"RTN","IBCEP2",112,0)
 S IBID="",IB=0,IBRX=$$ISRX^IBCEF1(IBIFN),IBIDSV=""
"RTN","IBCEP2",113,0)
 I $G(IBPROV) F  S IB=$O(^IBA(355.9,"AD",IBPTYP,IBPROV,IBINS,IB)) Q:'IB  D  Q:IBID'=""
"RTN","IBCEP2",114,0)
 . S IBID=$$UNIQ1(IBIFN,IBINS,IBPTYP,IBPROV,"",IB)
"RTN","IBCEP2",115,0)
 . I IBRX,$P($G(^IBA(355.9,IB,0)),U,5)'=3 S:IBIDSV="" IBIDSV=IBID S IBID="" ; Save 1st 'match' if no rx specific id
"RTN","IBCEP2",116,0)
 I IBID="",IBIDSV'="" S IBID=IBIDSV
"RTN","IBCEP2",117,0)
 Q IBID
"RTN","IBCEP2",118,0)
 ;
"RTN","IBCEP2",119,0)
SRC2(IB35597,IBT) ; Facility default - all providers
"RTN","IBCEP2",120,0)
 ; IB35597 = ien of the provider id type entry in file 355.97
"RTN","IBCEP2",121,0)
 ; IBT = returned as type ien^file ien^file #
"RTN","IBCEP2",122,0)
 ;
"RTN","IBCEP2",123,0)
 S $P(IBT,U,2,3)=(+IB35597_U_355.97)
"RTN","IBCEP2",124,0)
 Q $P($G(^IBE(355.97,+IB35597,0)),U,4)
"RTN","IBCEP2",125,0)
 ;
"RTN","IBCEP2",126,0)
SRC3(IBIFN,IBINS,IBPTYP,IBT) ; Ins co/all providers
"RTN","IBCEP2",127,0)
 ; See SRC1 for parameter definitions
"RTN","IBCEP2",128,0)
 N IB,IBID,IBRX,IBIDSV
"RTN","IBCEP2",129,0)
 S IBID="",IB=0,IBRX=$$ISRX^IBCEF1(IBIFN),IBIDSV=""
"RTN","IBCEP2",130,0)
 F  S IB=$O(^IBA(355.91,"AC",IBINS,IBPTYP,"*N/A*",IB)) Q:'IB  D  Q:IBID'=""
"RTN","IBCEP2",131,0)
 . S IBID=$$UNIQ2(IBIFN,IBINS,IBPTYP,"",IB,.IBT)
"RTN","IBCEP2",132,0)
 . I IBRX,$P($G(^IBA(355.91,IB,0)),U,5)'=3 S:IBIDSV="" IBIDSV=IBID S IBID="" ; Save 1st 'match' if no rx specific id
"RTN","IBCEP2",133,0)
 I IBID="",IBIDSV'="" S IBID=IBIDSV
"RTN","IBCEP2",134,0)
 Q IBID
"RTN","IBCEP2",135,0)
 ;
"RTN","IBCEP2",136,0)
SRC4(IBIFN,IBINS,IBPTYP,IBPROV,IBT) ;  Insurance co/individual provider
"RTN","IBCEP2",137,0)
 ; See SRC1 for parameter definitions
"RTN","IBCEP2",138,0)
 ;
"RTN","IBCEP2",139,0)
 N IBID,IB,IBRX,IBIDSV
"RTN","IBCEP2",140,0)
 S IBID="",IB=0,IBRX=$$ISRX^IBCEF1(IBIFN),IBIDSV=""
"RTN","IBCEP2",141,0)
 I $G(IBPROV) F  S IB=$O(^IBA(355.9,"AD",IBPTYP,IBPROV,IBINS,IB)) Q:'IB  D  Q:IBID'=""
"RTN","IBCEP2",142,0)
 . S IBID=$$UNIQ1(IBIFN,IBINS,IBPTYP,IBPROV,"",IB,.IBT)
"RTN","IBCEP2",143,0)
 . I IBRX,$P($G(^IBA(355.9,IB,0)),U,5)'=3 S:IBIDSV="" IBIDSV=IBID S IBID="" ; Save 1st 'match' if no rx specific id
"RTN","IBCEP2",144,0)
 I IBID="",IBIDSV'="" S IBID=IBIDSV
"RTN","IBCEP2",145,0)
 Q IBID
"RTN","IBCEP2",146,0)
 ;
"RTN","IBCEP2",147,0)
SRC5(IBIFN,IBINS,IBPTYP,IBSEQ,IBT,IBFUNC) ; Ins co/all providers/care unit
"RTN","IBCEP2",148,0)
 ; See SRC1 for missing parameter definitions
"RTN","IBCEP2",149,0)
 ; IBSEQ = the numeric COB sequence of the insurance on the bill
"RTN","IBCEP2",150,0)
 ;
"RTN","IBCEP2",151,0)
 Q ""  ;DEM;432 - Pieces 9, 10, and 11 were deleted in 2006. So, code doesn't do anything other than return NULL.
"RTN","IBCEP2",152,0)
 N IBP,IBUNIT,IBID,IB,Z,IBIDSV,IBRX
"RTN","IBCEP2",153,0)
 S IBID="",Z=0,IBRX=$$ISRX^IBCEF1(IBIFN),IBIDSV=""
"RTN","IBCEP2",154,0)
 ; DEM;432 - IBLNPRV variable is a flag to indicate if user input
"RTN","IBCEP2",155,0)
 ;           is claim level provider or line level provider user input.
"RTN","IBCEP2",156,0)
 ; DEM;432 - Line provider interested in fuction 1 and 3, referring and rendering respectively.
"RTN","IBCEP2",157,0)
 I '$G(IBLNPRV) S IBP=+$O(^DGCR(399,IBIFN,"PRV","B",$S($G(IBFUNC)=1:1,$$FT^IBCEF(IBIFN)=3:4,1:3),0)),IBUNIT=$P($G(^DGCR(399,IBIFN,"PRV",IBP,0)),U,8+IBSEQ)
"RTN","IBCEP2",158,0)
 I $G(IBLNPRV) S IBP=+$O(^DGCR(399,IBIFN,"CP",IBLNPRV("PROCIEN"),"LNPRV","B",$S($G(IBFUNC)=1:1,1:3),0)),IBUNIT=$P($G(^DGCR(399,IBIFN,"CP",IBLNPRV("PROCIEN"),"LNPRV",IBP,0)),U,8+IBSEQ)
"RTN","IBCEP2",159,0)
 I IBUNIT'="" F  S Z=$O(^IBA(355.96,"AC",IBINS,IBPTYP,Z)) Q:'Z  D  Q:IBID'=""
"RTN","IBCEP2",160,0)
 . S IB=0 F  S IB=$O(^IBA(355.91,"ACARE",Z,IB)) Q:'IB  D  Q:IBID'=""
"RTN","IBCEP2",161,0)
 .. S IBID=$$UNIQ2(IBIFN,IBINS,IBPTYP,IBUNIT,IB,.IBT)
"RTN","IBCEP2",162,0)
 .. I IBRX,$P($G(^IBA(355.91,IB,0)),U,5)'=3 S:IBIDSV="" IBIDSV=IBID S IBID="" ; Save 1st 'match' if no rx specific id
"RTN","IBCEP2",163,0)
 I IBID="",IBIDSV'="" S IBID=IBIDSV
"RTN","IBCEP2",164,0)
 Q IBID
"RTN","IBCEP2",165,0)
 ;
"RTN","IBCEP2",166,0)
SRC6(IBIFN,IBINS,IBPTYP,IBPROV,IBSEQ,IBT) ; Ins co/ind provider/care unit
"RTN","IBCEP2",167,0)
 ; See SRC1 for missing parameter definitions
"RTN","IBCEP2",168,0)
 ; IBSEQ = the numeric COB sequence of the insurance on the bill
"RTN","IBCEP2",169,0)
 ;
"RTN","IBCEP2",170,0)
 Q ""  ;DEM;432 - Pieces 9, 10, and 11 were deleted in 2006. So, code doesn't do anything other than return NULL.
"RTN","IBCEP2",171,0)
 N IBUNIT,IBP,IBID,IB
"RTN","IBCEP2",172,0)
 S IBID="",IB=0
"RTN","IBCEP2",173,0)
 I '$G(IBLNPRV) S IBP=+$O(^DGCR(399,"PRV","B",$S($$FT^IBCEF(IBIFN)=3:3,1:4),0)),IBUNIT=$P($G(^DGCR(399,IBIFN,"PRV",IBP,0)),U,8+IBSEQ)
"RTN","IBCEP2",174,0)
 I $G(IBLNPRV) S IBP=+$O(^DGCR(399,IBIFN,"CP",IBLNPRV("PROCIEN"),"LNPRV","B",$S($$FT^IBCEF(IBIFN)=3:3,1:4),0)),IBUNIT=$P($G(^DGCR(399,IBIFN,"CP",IBLNPRV("PROCIEN"),"LNPRV",IBP,0)),U,8+IBSEQ)
"RTN","IBCEP2",175,0)
 I $G(IBPROV),IBUNIT'="" F  S IB=$O(^IBA(355.9,"AD",IBPTYP,IBPROV,IBINS,IB)) Q:'IB  D  Q:IBID'=""
"RTN","IBCEP2",176,0)
 . S IBID=$$UNIQ1(IBIFN,IBINS,IBPTYP,IBPROV,IBUNIT,IB,.IBT)
"RTN","IBCEP2",177,0)
 Q IBID
"RTN","IBCEP2",178,0)
 ;
"RTN","IBCEP2",179,0)
UNIQ1(IBIFN,IBINS,IBPTYP,IBPROV,IBUNIT,IBCU,IBT) ; Match most-least specific
"RTN","IBCEP2",180,0)
 ; *** SEE PARAMETER DEFINITIONS IN IBCEP3 ***
"RTN","IBCEP2",181,0)
 ;
"RTN","IBCEP2",182,0)
 ; Start in file 355.9 (Specific Provider)
"RTN","IBCEP2",183,0)
 ;   IBPROV = (variable pointer syntax) provider on bill IBIFN
"RTN","IBCEP2",184,0)
 ;
"RTN","IBCEP2",185,0)
 Q $$UNIQ1^IBCEP2A($G(IBIFN),$G(IBINS),$G(IBPTYP),$G(IBPROV),$G(IBUNIT),$G(IBCU),$G(IBT))
"RTN","IBCEP2",186,0)
 ;
"RTN","IBCEP2",187,0)
UNIQ2(IBIFN,IBINS,IBPTYP,IBUNIT,IBCU,IBT) ; Match on most-least specific
"RTN","IBCEP2",188,0)
 ; *** SEE PARAMETER DEFINITIONS IN IBCEP3 ***
"RTN","IBCEP2",189,0)
 ;
"RTN","IBCEP2",190,0)
 ; Start in file 355.91 (Specific Insurance)
"RTN","IBCEP2",191,0)
 ;
"RTN","IBCEP2",192,0)
 Q $$UNIQ2^IBCEP2A($G(IBIFN),$G(IBINS),$G(IBPTYP),$G(IBUNIT),$G(IBCU),$G(IBT))
"RTN","IBCEP2A")
0^58^B51873578^B50289544
"RTN","IBCEP2A",1,0)
IBCEP2A ;ALB/TMP - EDI UTILITIES for provider ID ;25-APR-01
"RTN","IBCEP2A",2,0)
 ;;2.0;INTEGRATED BILLING;**137,232,320,348,349,400,592**;21-MAR-94;Build 58
"RTN","IBCEP2A",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEP2A",4,0)
 ;
"RTN","IBCEP2A",5,0)
ALT(IBPERF,IBSRC,IBALT,IBINS4,IBPTYP) ; set source level to next higher level 
"RTN","IBCEP2A",6,0)
 ; or set the alternate type and source if performing provider id
"RTN","IBCEP2A",7,0)
 ; alternate type and source exist
"RTN","IBCEP2A",8,0)
 ; IBPERF = 1 if performing provider id is requested
"RTN","IBCEP2A",9,0)
 ; IBINS4 = '4' node of insurance co (file 36)
"RTN","IBCEP2A",10,0)
 ; Pass IBPTYP by reference to get alternate provider id type
"RTN","IBCEP2A",11,0)
 ; Pass IBALT by reference.  Set to 1 if alternate id is to be used next
"RTN","IBCEP2A",12,0)
 ;
"RTN","IBCEP2A",13,0)
 I '$G(IBPERF)!($P(IBINS4,U,3)=1) S IBSRC=IBSRC-1 G ALTQ
"RTN","IBCEP2A",14,0)
 S IBSRC=""
"RTN","IBCEP2A",15,0)
 I '$G(IBALT),$P(IBINS4,U,3)=2,$P(IBINS4,U,10),$P(IBINS4,U,11) S IBALT=1,IBSRC=$P(IBINS4,U,11),IBPTYP=$P(IBINS4,U,10) S:IBPTYP="" IBPTYP=$P(IBINS4,U)
"RTN","IBCEP2A",16,0)
 ;
"RTN","IBCEP2A",17,0)
ALTQ Q IBSRC
"RTN","IBCEP2A",18,0)
 ;
"RTN","IBCEP2A",19,0)
IDSET(IBPTYP,IBINS4,IBPERF,IBSPEC,IBSRC,IBUP) ; set variables for provider id type search
"RTN","IBCEP2A",20,0)
 N Z
"RTN","IBCEP2A",21,0)
 S IBSPEC=$G(^IBE(355.97,+IBPTYP,1))
"RTN","IBCEP2A",22,0)
 S Z=$S($G(IBPERF):2,$P(IBSPEC,U,5):6,$P(IBSPEC,U,6):4,1:2)
"RTN","IBCEP2A",23,0)
 S IBSRC=$P(IBINS4,U,Z),IBUP=$P(IBINS4,U,$S(IBSRC:Z+1,1:0))
"RTN","IBCEP2A",24,0)
 Q
"RTN","IBCEP2A",25,0)
 ;
"RTN","IBCEP2A",26,0)
CAREST(IBIFN) ; Return state file ien of state where care was performed
"RTN","IBCEP2A",27,0)
 ; IBIFN = ien of bill in file 399
"RTN","IBCEP2A",28,0)
 N STATE,IBU2,NVAFAC,IB0,EVDT,IBDIV,INST
"RTN","IBCEP2A",29,0)
 S STATE=""
"RTN","IBCEP2A",30,0)
 ;
"RTN","IBCEP2A",31,0)
 ; non-VA care
"RTN","IBCEP2A",32,0)
 S IBU2=$G(^DGCR(399,IBIFN,"U2"))
"RTN","IBCEP2A",33,0)
 S NVAFAC=+$P(IBU2,U,10)          ; non-VA facility
"RTN","IBCEP2A",34,0)
 I NVAFAC S STATE=+$P($G(^IBA(355.93,NVAFAC,0)),U,7) G CARESTX
"RTN","IBCEP2A",35,0)
 ;
"RTN","IBCEP2A",36,0)
 ; VA care
"RTN","IBCEP2A",37,0)
 S IB0=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEP2A",38,0)
 S EVDT=$P(IB0,U,3)                         ; claim event date
"RTN","IBCEP2A",39,0)
 I 'EVDT S EVDT=DT                          ;   - default today if undefined
"RTN","IBCEP2A",40,0)
 S IBDIV=+$P(IB0,U,22)                      ; division ptr file 40.8
"RTN","IBCEP2A",41,0)
 I 'IBDIV S IBDIV=$$PRIM^VASITE(EVDT)       ;   - default primary division as of event date
"RTN","IBCEP2A",42,0)
 I IBDIV'>0 S IBDIV=$$PRIM^VASITE()         ;   - default main division as of today's date
"RTN","IBCEP2A",43,0)
 S INST=+$$SITE^VASITE(EVDT,IBDIV)          ; division institution ptr file 4
"RTN","IBCEP2A",44,0)
 I INST'>0 S INST=+$$SITE^VASITE(DT,IBDIV)  ;   - default div as of today's date
"RTN","IBCEP2A",45,0)
 I INST'>0 S INST=+$$SITE^VASITE            ;   - default main institution
"RTN","IBCEP2A",46,0)
 S STATE=+$P($G(^DIC(4,INST,0)),U,2)        ; state file ien from Institution file
"RTN","IBCEP2A",47,0)
 ;
"RTN","IBCEP2A",48,0)
CARESTX ;
"RTN","IBCEP2A",49,0)
 Q STATE
"RTN","IBCEP2A",50,0)
 ;
"RTN","IBCEP2A",51,0)
RECALCA(IBIFN) ; Recalculate all performing provider id's on bill IBIFN
"RTN","IBCEP2A",52,0)
 ; IBIFN = ien of bill entry (file 399)
"RTN","IBCEP2A",53,0)
 N IBZ,IBZ0,IBX,IBP,IBSEQ,DA,DIE,DR,DIR,X,Y
"RTN","IBCEP2A",54,0)
 ;
"RTN","IBCEP2A",55,0)
 D EN^DDIOL("THIS FUNCTION HAS BEEN DISABLED",,"!") Q
"RTN","IBCEP2A",56,0)
 ;
"RTN","IBCEP2A",57,0)
 S DA(1)=IBIFN
"RTN","IBCEP2A",58,0)
 I '$D(^XUSEC("IB SUPERVISOR",DUZ)) D EN^DDIOL("YOU ARE NOT AUTHORIZED TO PERFORM THIS FUNCTION",,"!")
"RTN","IBCEP2A",59,0)
 S IBZ=0 F  S IBZ=$O(^DGCR(399,IBIFN,"PRV",IBZ)) Q:'IBZ  S IBP=$G(^(IBZ,0)) I $P(IBP,U,2)'="" D
"RTN","IBCEP2A",60,0)
 . S DA=IBZ
"RTN","IBCEP2A",61,0)
 . F IBZ0=5:1:7 Q:'$G(^DGCR(399,IBIFN,"I"_(IBZ0-4)))  D
"RTN","IBCEP2A",62,0)
 .. S IBSEQ=$$EXPAND^IBTRE(399.0222,.01,+IBP)_" "_$P("PRIMARY^SECONDARY^TERTIARY",U,IBZ0-4)_" PROVIDER ID "
"RTN","IBCEP2A",63,0)
 .. S IBX=$$RECALC(.DA,IBZ0-4,$P(IBP,U,IBZ0),1)
"RTN","IBCEP2A",64,0)
 .. I IBX'="",IBX=$P(IBP,U,IBZ0) D EN^DDIOL(IBSEQ_"NO CHANGE NEEDED",,"!") Q
"RTN","IBCEP2A",65,0)
 .. I IBX'="",IBX'=$P(IBP,U,IBZ0) D  Q
"RTN","IBCEP2A",66,0)
 ... S DR=(IBZ0/100)_"////"_IBX,DIE="^DGCR(399,"_DA(1)_",""PRV""," D ^DIE
"RTN","IBCEP2A",67,0)
 ... D EN^DDIOL(IBSEQ_"CHANGED TO "_IBX,,"!")
"RTN","IBCEP2A",68,0)
 .. D EN^DDIOL(IBSEQ_"NOT FOUND",,"!")
"RTN","IBCEP2A",69,0)
 Q
"RTN","IBCEP2A",70,0)
 ;
"RTN","IBCEP2A",71,0)
RECALC(IBDA,IBSEQ,IBX,IBD) ; Recalculate id #, if possible - called
"RTN","IBCEP2A",72,0)
 ;   from input transforms in subfile 399.0222, fields .05-.07
"RTN","IBCEP2A",73,0)
 ; IBDA = DA array of the provider entry (file 399.0222)
"RTN","IBCEP2A",74,0)
 ; IBSEQ = the numeric COB sequence of the provider id (1-3)
"RTN","IBCEP2A",75,0)
 ; IBX = the current value of the id in the subfile
"RTN","IBCEP2A",76,0)
 ; IBD = flag that if set to 1 will suppress the display text
"RTN","IBCEP2A",77,0)
 ;
"RTN","IBCEP2A",78,0)
 N IBPN,IBZ
"RTN","IBCEP2A",79,0)
 S IBPN=$P($G(^DGCR(399,IBDA(1),"PRV",IBDA,0)),U,2)
"RTN","IBCEP2A",80,0)
 I IBPN="" D:'$G(IBD) EN^DDIOL("   CAN'T CALCULATE WITHOUT A PROVIDER NAME","","?0") G RECALCQ
"RTN","IBCEP2A",81,0)
 S IBZ=$$GETID^IBCEP2(IBDA(1),2,IBPN,IBSEQ)
"RTN","IBCEP2A",82,0)
 I IBZ="" D:'$G(IBD) EN^DDIOL("   ID COULD NOT BE DETERMINED","","?0") G RECALCQ
"RTN","IBCEP2A",83,0)
 D:'$G(IBD) EN^DDIOL("  "_IBZ_$S(IBZ'=IBX:"",1:" (no change)"),"","?0")
"RTN","IBCEP2A",84,0)
 S IBX=IBZ
"RTN","IBCEP2A",85,0)
 ;
"RTN","IBCEP2A",86,0)
RECALCQ Q IBX
"RTN","IBCEP2A",87,0)
 ;
"RTN","IBCEP2A",88,0)
PERFPRV(IBIFN) ; Returns the variable pointer of the 'performing provider'
"RTN","IBCEP2A",89,0)
 ; (attending or rendering) for a bill IBIFN
"RTN","IBCEP2A",90,0)
 N IBP,IBPT,IBQ,Z
"RTN","IBCEP2A",91,0)
 S Z=$$FT^IBCEF(IBIFN),IBPT=$S(Z=2:3,Z=3:4,1:0)
"RTN","IBCEP2A",92,0)
 D GETPRV^IBCEU(IBIFN,IBPT,.IBP)
"RTN","IBCEP2A",93,0)
 Q $P($G(IBP(IBPT,1)),U,3)
"RTN","IBCEP2A",94,0)
 ;
"RTN","IBCEP2A",95,0)
INSPAR(IBIFN,SEQ) ;
"RTN","IBCEP2A",96,0)
 N Z,Z4,Z0
"RTN","IBCEP2A",97,0)
 Q:$G(X)'="??"
"RTN","IBCEP2A",98,0)
 S:'$G(SEQ) SEQ=$$COBN^IBCEF(IBIFN)
"RTN","IBCEP2A",99,0)
 S Z=+$G(^DGCR(399,IBIFN,"I"_SEQ)),Z4=$G(^DIC(36,Z,4))
"RTN","IBCEP2A",100,0)
 I Z D
"RTN","IBCEP2A",101,0)
 . D EN^DDIOL(">"_$J("",20)_"-- PERFORMING PROVIDER ID PARAMETERS --",,"!")
"RTN","IBCEP2A",102,0)
 . S Z0=$P("  PRIMARY^SECONDARY^ TERTIARY",U,SEQ)_" INSURANCE: "_$P($G(^DIC(36,Z,0)),U)
"RTN","IBCEP2A",103,0)
 . D EN^DDIOL(">"_$J("",(80-$L(Z0))\2)_Z0,,"!")
"RTN","IBCEP2A",104,0)
 . D EN^DDIOL(">  Secondary Perf Prov ID Type (1500): "_$$EXPAND^IBTRE(36,4.01,+Z4),,"!")
"RTN","IBCEP2A",105,0)
 . D EN^DDIOL(">  Secondary Perf Prov ID Type (UB04): "_$$EXPAND^IBTRE(36,4.02,$P(Z4,U,2)),,"!")
"RTN","IBCEP2A",106,0)
 . D EN^DDIOL(">    Secondary Perf Prov IDs Required: "_$$EXPAND^IBTRE(36,4.03,$P(Z4,U,3)),,"!")
"RTN","IBCEP2A",107,0)
 . D EN^DDIOL(" ",,"!")
"RTN","IBCEP2A",108,0)
 Q
"RTN","IBCEP2A",109,0)
 ;
"RTN","IBCEP2A",110,0)
GETTYP(IBXIEN,IBCOBN,IBFUNC) ; Function returns provider id type for insurance co
"RTN","IBCEP2A",111,0)
 ; with COB of IBCOBN on claim ien IBXIEN in first ^ pc and 1 in second
"RTN","IBCEP2A",112,0)
 ; ^ piece if the id is required
"RTN","IBCEP2A",113,0)
 ; 
"RTN","IBCEP2A",114,0)
 ; IBFUNC=1:REFERRING;2:OPERATING;3:RENDERING;4:ATTENDING;5:SUPERVISING;6:ASSISTANT SURGEON;9:OTHER
"RTN","IBCEP2A",115,0)
 ; 
"RTN","IBCEP2A",116,0)
 N A,R,Z,Z0
"RTN","IBCEP2A",117,0)
 S A="",R=0
"RTN","IBCEP2A",118,0)
 S:'$G(IBCOBN)!(IBCOBN>3) IBCOBN=$$COBN^IBCEF(IBXIEN)
"RTN","IBCEP2A",119,0)
 S Z=+$G(^DGCR(399,IBXIEN,"I"_+IBCOBN))
"RTN","IBCEP2A",120,0)
 I Z D
"RTN","IBCEP2A",121,0)
 . S Z0=$$FT^IBCEF(IBXIEN)
"RTN","IBCEP2A",122,0)
 . ;JWS;IB*2.0*592;no secondary provider ID's for Dental
"RTN","IBCEP2A",123,0)
 . I Z0=7 Q
"RTN","IBCEP2A",124,0)
 . S A=+$P($G(^DIC(36,Z,4)),U,$S(Z0=2&($G(IBFUNC)=1):4,Z0=2:1,1:2))
"RTN","IBCEP2A",125,0)
 . I A,$G(IBFUNC)'=1 S R=$P($G(^DIC(36,Z,4)),U,3),R=$S('R:0,R=3:1,R=1:Z0=2,R=2:Z0=3,1:0)
"RTN","IBCEP2A",126,0)
 . I A,$G(IBFUNC)=1 S R=+$P($G(^DIC(36,Z,4)),U,5),R=$S('R:0,Z0'=2:0,1:1)
"RTN","IBCEP2A",127,0)
 Q A_U_R
"RTN","IBCEP2A",128,0)
 ;
"RTN","IBCEP2A",129,0)
UNIQ1(IBIFN,IBINS,IBPTYP,IBPROV,IBUNIT,IBCU,IBT) ; Match most-least specific
"RTN","IBCEP2A",130,0)
 ; *** SEE PARAMETER DEFINITIONS IN IBCEP3 ***
"RTN","IBCEP2A",131,0)
 ;
"RTN","IBCEP2A",132,0)
 ; Start in file 355.9 (Specific Provider)
"RTN","IBCEP2A",133,0)
 ;   IBPROV = (variable pointer syntax) provider on bill IBIFN
"RTN","IBCEP2A",134,0)
 ;
"RTN","IBCEP2A",135,0)
 N Q,Z0,Z1,Z2,IBID,IBX
"RTN","IBCEP2A",136,0)
 S IBID=""
"RTN","IBCEP2A",137,0)
 S IBX=$P($G(^IBA(355.9,+IBCU,0)),U,3) S:"0"[IBX IBX="*N/A*"
"RTN","IBCEP2A",138,0)
 S Z0=$$FT^IBCEF(IBIFN)
"RTN","IBCEP2A",139,0)
 ;JWS;IB*2.0*592;If Dental quit
"RTN","IBCEP2A",140,0)
 I Z0=7 G UNIQ1Q
"RTN","IBCEP2A",141,0)
 S Z0=$S(Z0=2:2,Z0=3:1,1:0),Z1=$$INPAT^IBCEF(IBIFN) S:'Z1 Z1=2 S Z2=$$ISRX^IBCEF1(IBIFN)
"RTN","IBCEP2A",142,0)
 ;
"RTN","IBCEP2A",143,0)
 ; Match all elements
"RTN","IBCEP2A",144,0)
 F Q=$S(Z2:3,1:Z1),$S(Z2:Z1,1:"") I Q'="",$D(^IBA(355.9,"AUNIQ",IBPROV,IBINS,IBX,Z0,Q,IBPTYP,IBCU)) S IBID=$P($G(^IBA(355.9,IBCU,0)),U,7),$P(IBT,U,2,3)=(IBCU_U_355.9) Q
"RTN","IBCEP2A",145,0)
 G:IBID'="" UNIQ1Q
"RTN","IBCEP2A",146,0)
 ;
"RTN","IBCEP2A",147,0)
 ; Match both form types,specific I/O element
"RTN","IBCEP2A",148,0)
 F Q=$S(Z2:3,1:Z1),$S(Z2:Z1,1:"") I Q'="",$D(^IBA(355.9,"AUNIQ",IBPROV,IBINS,IBX,0,Q,IBPTYP,IBCU)) S IBID=$P($G(^IBA(355.9,IBCU,0)),U,7),$P(IBT,U,2,3)=(IBCU_U_355.9) Q
"RTN","IBCEP2A",149,0)
 G:IBID'="" UNIQ1Q
"RTN","IBCEP2A",150,0)
 ;
"RTN","IBCEP2A",151,0)
 ; Match specific form type, both I/O element or Rx
"RTN","IBCEP2A",152,0)
 F Q=$S(Z2:3,1:0),$S(Z2:0,1:"") I Q'="",$D(^IBA(355.9,"AUNIQ",IBPROV,IBINS,IBX,Z0,Q,IBPTYP,IBCU)) S IBID=$P($G(^IBA(355.9,IBCU,0)),U,7),$P(IBT,U,2,3)=(IBCU_U_355.9) Q
"RTN","IBCEP2A",153,0)
 G:IBID'="" UNIQ1Q
"RTN","IBCEP2A",154,0)
 ;
"RTN","IBCEP2A",155,0)
 ; Match both form types, both I/O element or Rx
"RTN","IBCEP2A",156,0)
 F Q=$S(Z2:3,1:0),$S(Z2:0,1:"") I Q'="",$D(^IBA(355.9,"AUNIQ",IBPROV,IBINS,IBX,0,Q,IBPTYP,IBCU)) S IBID=$P($G(^IBA(355.9,IBCU,0)),U,7),$P(IBT,U,2,3)=(IBCU_U_355.9) Q
"RTN","IBCEP2A",157,0)
 ;
"RTN","IBCEP2A",158,0)
UNIQ1Q Q IBID
"RTN","IBCEP2A",159,0)
 ;
"RTN","IBCEP2A",160,0)
UNIQ2(IBIFN,IBINS,IBPTYP,IBUNIT,IBCU,IBT) ; Match on most-least specific
"RTN","IBCEP2A",161,0)
 ; *** SEE PARAMETER DEFINITIONS IN IBCEP3 ***
"RTN","IBCEP2A",162,0)
 ;
"RTN","IBCEP2A",163,0)
 ; Start in file 355.91 (Specific Insurance)
"RTN","IBCEP2A",164,0)
 ;
"RTN","IBCEP2A",165,0)
 N Q,Z0,Z1,Z2,IBID,IBX
"RTN","IBCEP2A",166,0)
 S IBID="" S:"0"[$G(IBUNIT) IBUNIT="*N/A*"
"RTN","IBCEP2A",167,0)
 S Z0=$$FT^IBCEF(IBIFN)
"RTN","IBCEP2A",168,0)
 ;JWS;IB*2.0*592;If Dental quit
"RTN","IBCEP2A",169,0)
 I Z0=7 G UNIQ2Q
"RTN","IBCEP2A",170,0)
 S Z0=$S(Z0=2:2,Z0=3:1,1:0),Z1=$$INPAT^IBCEF(IBIFN) S:'Z1 Z1=2 S Z2=$$ISRX^IBCEF1(IBIFN)
"RTN","IBCEP2A",171,0)
 ;
"RTN","IBCEP2A",172,0)
 ; Match all elements
"RTN","IBCEP2A",173,0)
 F Q=$S(Z2:3,1:Z1),$S(Z2:Z1,1:"") I Q'="",$D(^IBA(355.91,"AUNIQ",IBINS,IBUNIT,Z0,Q,IBPTYP,IBCU)) S IBID=$P($G(^IBA(355.91,IBCU,0)),U,7),$P(IBT,U,2,3)=(IBCU_U_355.91) Q
"RTN","IBCEP2A",174,0)
 G:IBID'="" UNIQ2Q
"RTN","IBCEP2A",175,0)
 ;
"RTN","IBCEP2A",176,0)
 ; Match both form types,specific I/O element
"RTN","IBCEP2A",177,0)
 F Q=$S(Z2:3,1:Z1),$S(Z2:Z1,1:"") I Q'="",$D(^IBA(355.91,"AUNIQ",IBINS,IBUNIT,0,Q,IBPTYP,IBCU)) S IBID=$P($G(^IBA(355.91,IBCU,0)),U,7),$P(IBT,U,2,3)=(IBCU_U_355.91) Q
"RTN","IBCEP2A",178,0)
 G:IBID'="" UNIQ2Q
"RTN","IBCEP2A",179,0)
 ;
"RTN","IBCEP2A",180,0)
 ; Match specific form type, both I/O element or Rx
"RTN","IBCEP2A",181,0)
 F Q=$S(Z2:3,1:0),$S(Z2:0,1:"") I Q'="",$D(^IBA(355.91,"AUNIQ",IBINS,IBUNIT,Z0,Q,IBPTYP,IBCU)) S IBID=$P($G(^IBA(355.91,IBCU,0)),U,7),$P(IBT,U,2,3)=(IBCU_U_355.91) Q
"RTN","IBCEP2A",182,0)
 G:IBID'="" UNIQ2Q
"RTN","IBCEP2A",183,0)
 ;
"RTN","IBCEP2A",184,0)
 ; Match both form types, both I/O elements or Rx
"RTN","IBCEP2A",185,0)
 F Q=$S(Z2:3,1:0),$S(Z2:0,1:"") I Q'="",$D(^IBA(355.91,"AUNIQ",IBINS,IBUNIT,0,Q,IBPTYP,IBCU)) S IBID=$P($G(^IBA(355.91,IBCU,0)),U,7),$P(IBT,U,2,3)=(IBCU_U_355.91) Q
"RTN","IBCEP2A",186,0)
 ;
"RTN","IBCEP2A",187,0)
UNIQ2Q Q IBID
"RTN","IBCEP2A",188,0)
 ;
"RTN","IBCEP2B")
0^59^B61892658^B59761091
"RTN","IBCEP2B",1,0)
IBCEP2B ;ALB/TMP - EDI UTILITIES for provider ID ;18-MAY-04
"RTN","IBCEP2B",2,0)
 ;;2.0;INTEGRATED BILLING;**232,320,400,432,592**;21-MAR-94;Build 58
"RTN","IBCEP2B",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEP2B",4,0)
 ;
"RTN","IBCEP2B",5,0)
PROVID(IBIFN,IBPRIEN,IBCOBN,DIPA) ; Provider id entry on billing screen 10, and line level provider input on billing screens 4&5.
"RTN","IBCEP2B",6,0)
 ; IBIFN = ien file 399
"RTN","IBCEP2B",7,0)
 ; IBPRIEN = ien file 399.0222, or ien file 399.0404.
"RTN","IBCEP2B",8,0)
 ; IBCOBN = the COB number of the id being edited
"RTN","IBCEP2B",9,0)
 ; DIPA = passed by ref, returned with id data
"RTN","IBCEP2B",10,0)
 ; DIPA("EDIT")=-1 if no id editing  = 1 if edit id   = 2 if stuff id
"RTN","IBCEP2B",11,0)
 ; DIPA("PRID")= id to stuff   DIPA("PRIDT")= id type to stuff
"RTN","IBCEP2B",12,0)
 N PRN0,Z
"RTN","IBCEP2B",13,0)
 Q:'$G(^DGCR(399,IBIFN,"I1"))
"RTN","IBCEP2B",14,0)
 I $G(IBLNPRV),'$G(IBLNPRV("LNPRVIEN")),'$G(IBLNPRV("PROCIEN")) Q  ; DEM;432 - If line provider user input.
"RTN","IBCEP2B",15,0)
 ; DEM;432 - Updated variable PRNO to be equal to line level provider if we are coming from line level provider user input.
"RTN","IBCEP2B",16,0)
 S PRN0=$S($G(IBLNPRV):$G(^DGCR(399,IBIFN,"CP",IBLNPRV("PROCIEN"),"LNPRV",IBLNPRV("LNPRVIEN"),0)),1:$G(^DGCR(399,IBIFN,"PRV",IBPRIEN,0)))
"RTN","IBCEP2B",17,0)
 S DIPA("EDIT")=1,(DIPA("PRID"),DIPA("PRIDT"))=""
"RTN","IBCEP2B",18,0)
 W @IOF
"RTN","IBCEP2B",19,0)
 W !,?19,"**** SECONDARY PERFORMING PROVIDER IDs ****"
"RTN","IBCEP2B",20,0)
 W !!,$P("PRIMARY^SECONDARY^TERTIARY",U,IBCOBN)_" INSURANCE CO: "_$P($G(^DIC(36,+$G(^DGCR(399,IBIFN,"I"_IBCOBN)),0)),U)
"RTN","IBCEP2B",21,0)
 ; DEM;432 - Added line and conditions if line level provider user input.
"RTN","IBCEP2B",22,0)
 I '$G(IBLNPRV) W !,"PROVIDER: "_$$EXTERNAL^DILFD(399.0222,.02,"",$P(PRN0,U,2))_" ("_$$EXTERNAL^DILFD(399.0222,.01,"",+PRN0)_")",!
"RTN","IBCEP2B",23,0)
 I $G(IBLNPRV) W !,"Line Level Provider: "_$$EXTERNAL^DILFD(399.0404,.02,"",$P(PRN0,U,2))_" ("_$$EXTERNAL^DILFD(399.0404,.01,"",+PRN0)_")",!
"RTN","IBCEP2B",24,0)
 ;
"RTN","IBCEP2B",25,0)
 I $P(PRN0,U,4+IBCOBN)="" K DIPA("PRID"),DIPA("PRIDT") D NEWID(IBIFN,IBPRIEN,IBCOBN,.DIPA) ; No id currently exists for the ins seq/prov
"RTN","IBCEP2B",26,0)
 ;
"RTN","IBCEP2B",27,0)
 Q
"RTN","IBCEP2B",28,0)
 ;
"RTN","IBCEP2B",29,0)
NEWID(IBIFN,IBPRIEN,IBCOBN,DIPA) ;
"RTN","IBCEP2B",30,0)
 N IBDEF,IBCT,IBNUM,IBINS,IBFRM,IBCAR,IBARR,IBARRS,IB0,IBM,IBQUIT,IBSEL,PRN,PRT,PRN,PRN0,DIR,X,Y,Z,Z0,IBZ,IBZ1,IBTYP,IBREQ,IBREQT,IBTYPN,IBID,IBUSED
"RTN","IBCEP2B",31,0)
 S IBREQ=0,IBREQT=""
"RTN","IBCEP2B",32,0)
 Q:($G(IBLNPRV))&('$G(IBLNPRV("LNPRVIEN"))&'$G(IBLNPRV("PROCIEN")))  ; DEM;432 - If line provider user input.
"RTN","IBCEP2B",33,0)
 ; DEM;432 - Updated variable PRNO to be equal to line level provider if we are coming from line level provider user input.
"RTN","IBCEP2B",34,0)
 S PRN0=$S($G(IBLNPRV):$G(^DGCR(399,IBIFN,"CP",IBLNPRV("PROCIEN"),"LNPRV",IBLNPRV("LNPRVIEN"),0)),1:$G(^DGCR(399,IBIFN,"PRV",IBPRIEN,0)))
"RTN","IBCEP2B",35,0)
 S Z(IBCOBN)=$S($G(DIPA("I"_IBCOBN)):$$GETTYP^IBCEP2A(IBIFN,IBCOBN,$P(PRN0,U)),1:"")
"RTN","IBCEP2B",36,0)
 S IBINS=+$G(^DGCR(399,IBIFN,"I"_IBCOBN)),IB0=$S($G(IBLNPRV):$G(^DGCR(399,IBIFN,"CP",IBLNPRV("PROCIEN"),"LNPRV",IBLNPRV("LNPRVIEN"),0)),1:$G(^DGCR(399,IBIFN,"PRV",IBPRIEN,0)))
"RTN","IBCEP2B",37,0)
 S IBCAR=$$INPAT^IBCEF(IBIFN),IBCAR=$S('IBCAR:2,1:1)
"RTN","IBCEP2B",38,0)
 ;JRA IB*2.0*592 Dental Form 7
"RTN","IBCEP2B",39,0)
 ;S IBFRM=$$FT^IBCEF(IBIFN),IBFRM=$S(IBFRM=2:2,1:1)  ;JRA IB*2.0*592 ';'
"RTN","IBCEP2B",40,0)
 S IBFRM=$$FT^IBCEF(IBIFN),IBFRM=$S(IBFRM=2:2,IBFRM=7:7,1:1)  ;JWS;JRA IB*2.0*592
"RTN","IBCEP2B",41,0)
 I $P(Z(IBCOBN),U) D
"RTN","IBCEP2B",42,0)
 . W !,"INS. COMPANY'S DEFAULT SECONDARY ID TYPE IS: "_$$EXTERNAL^DILFD(36,4.01,"",$P(Z(IBCOBN),U)) S IBREQT=+Z(IBCOBN)
"RTN","IBCEP2B",43,0)
 . I $P(Z(IBCOBN),U,2) W !,?2," AND IS REQUIRED TO BE ENTERED FOR THIS CLAIM" S IBREQ=1
"RTN","IBCEP2B",44,0)
 I $$CUNEED^IBCEP3(IBIFN,IBCOBN) W !,"CARE UNITS ARE DEFINED"_$S($P($G(^DIC(36,IBINS,4)),U,9)'="":" AS "_$P(^(4),U,9),1:"")_" FOR THESE IDs"
"RTN","IBCEP2B",45,0)
 D PRACT^IBCEF71(IBINS,IBFRM,IBCAR,$P(IB0,U,2),.IBARR,$P(IB0,U),$S($$COBN^IBCEF(IBIFN)=IBCOBN:"C",1:"O"),355.9,1)
"RTN","IBCEP2B",46,0)
 S (IBNUM,IBCT)=0,IBDEF=""
"RTN","IBCEP2B",47,0)
 I $O(IBARR(""))="" S IBCT=IBCT+1,DIR("A",IBCT)="NO SECONDARY IDS ARE DEFINED FOR THIS PROV THAT ARE VALID FOR THIS CLAIM"
"RTN","IBCEP2B",48,0)
 S IBCT=IBCT+1,DIR("A",IBCT)="SELECT A SECONDARY ID OR ACTION FROM THE LIST BELOW: ",IBCT=IBCT+1,DIR("A",IBCT)=" "
"RTN","IBCEP2B",49,0)
 ;
"RTN","IBCEP2B",50,0)
 S IBCT=IBCT+1,IBNUM=IBNUM+1,DIR("A",IBCT)="  "_$E(IBNUM_$J("",3),1,3)_" -  NO SECONDARY ID NEEDED",IBNUM=IBNUM+1,IBCT=IBCT+1,DIR("A",IBCT)="  "_$E(IBNUM_$J("",3),1,3)_" -  ADD AN ID FOR THIS CLAIM ONLY"
"RTN","IBCEP2B",51,0)
 I $O(IBARR(""))="" S IBDEF=1,DIPA("EDIT")=$$SELID(.DIR,IBDEF,.IBID,.DIPA,IBNUM) Q
"RTN","IBCEP2B",52,0)
 ;
"RTN","IBCEP2B",53,0)
 S PRN=$$GETID^IBCEP2(IBIFN,2,$P(PRN0,U,2),IBCOBN,.PRT,,$P(PRN0,U)),IBDEF=""
"RTN","IBCEP2B",54,0)
 ;
"RTN","IBCEP2B",55,0)
 I PRN'="",PRT D
"RTN","IBCEP2B",56,0)
 . N PRT1
"RTN","IBCEP2B",57,0)
 . S PRT1=$P($G(^IBE(355.97,+PRT,0)),U)
"RTN","IBCEP2B",58,0)
 . I $P($G(^IBE(355.97,+PRT,1)),U,3) S PRT1="ST LIC("_$P($G(^DIC(5,+$$CAREST^IBCEP2A(IBIFN),0)),U,2)_")"
"RTN","IBCEP2B",59,0)
 . S IBCT=IBCT+1,IBNUM=IBNUM+1
"RTN","IBCEP2B",60,0)
 . S DIR("A",IBCT)="  "_$E(IBNUM_$J("",3),1,3)_" -  "_$E("<DEFAULT> "_PRN_$J("",29),1,29)_"  "_$E(PRT1_$J("",15),1,15)
"RTN","IBCEP2B",61,0)
 . S DIR("A",IBCT)=DIR("A",IBCT)_"  "_$S($P(PRT,U,3)'["355.9":"",$P($G(^IBA(+$P(PRT,U,3),+$P(PRT,U,2),0)),U,3)'="":$$EXTERNAL^DILFD(355.9,.03,"",$P($G(^IBA(+$P(PRT,U,3),+$P(PRT,U,2),0)),U,3)),1:"")
"RTN","IBCEP2B",62,0)
 . S IBID(IBNUM)=PRN_U_+PRT,IBDEF=IBNUM,IBID(IBNUM,1)=DIR("A",IBCT),IBDEF=IBNUM,IBDEF("IEN")=$P(PRT,U,2,3)
"RTN","IBCEP2B",63,0)
 . S IBUSED(PRT,PRN,0)=""
"RTN","IBCEP2B",64,0)
 ;
"RTN","IBCEP2B",65,0)
 S IBQUIT=0,IBSEL=1
"RTN","IBCEP2B",66,0)
 ; Sort ids by id type
"RTN","IBCEP2B",67,0)
 S IBZ="" F  S IBZ=$O(IBARR(IBZ)) Q:IBZ=""  S IBZ1="" F  S IBZ1=$O(IBARR(IBZ,IBZ1)) Q:IBZ1=""  D
"RTN","IBCEP2B",68,0)
 . S IBTYP=+$P(IBARR(IBZ,IBZ1),U,9)
"RTN","IBCEP2B",69,0)
 . I $P(IBARR(IBZ,IBZ1),U,4)]"" Q:$D(IBUSED(IBTYP,$P(IBARR(IBZ,IBZ1),U,4),+$P(IBARR(IBZ,IBZ1),U,7)))
"RTN","IBCEP2B",70,0)
 . I $P($G(IBDEF("IEN")),U,2)["355.9",$P(IBARR(IBZ,IBZ1),U,8),$P(IBARR(IBZ,IBZ1),U,8)=+$G(IBDEF("IEN")) Q:$S($P(IBZ1,U)'["INS DEF":$P($G(IBDEF("IEN")),U,2)=355.9,1:$P($G(IBDEF("IEN")),U,2)=355.91)
"RTN","IBCEP2B",71,0)
 . S IBARRS(IBTYP,IBZ,IBZ1)=IBARR(IBZ,IBZ1)
"RTN","IBCEP2B",72,0)
 . I $P(IBARR(IBZ,IBZ1),U,4)]"" S IBUSED(IBTYP,$P(IBARR(IBZ,IBZ1),U,4),+$P(IBARR(IBZ,IBZ1),U,7))=""
"RTN","IBCEP2B",73,0)
 S IBTYP="" F  S IBTYP=$O(IBARRS(IBTYP)) Q:IBTYP=""  S IBZ="" F  S IBZ=$O(IBARRS(IBTYP,IBZ)) Q:IBZ=""  D  Q:IBQUIT
"RTN","IBCEP2B",74,0)
 . S IBZ1="" F  S IBZ1=$O(IBARRS(IBTYP,IBZ,IBZ1)) Q:IBZ1=""  S IBCT=IBCT+1,IBNUM=IBNUM+1 D  Q:IBQUIT
"RTN","IBCEP2B",75,0)
 .. S Z0=IBARRS(IBTYP,IBZ,IBZ1)
"RTN","IBCEP2B",76,0)
 .. S IBARR=$S($P(Z0,U,8)&(IBZ1'["LIC"):$G(^IBA("355.9"_$S($P(IBZ1,U)'="INS DEF":"",1:1),+$P(Z0,U,8),0)),1:"")
"RTN","IBCEP2B",77,0)
 .. S IBTYPN=$S(IBTYP=+$$STLIC^IBCEP8():"ST LIC ("_$P($G(^DIC(5,+$P(Z0,U,7),0)),U,2)_")",1:$P($G(^IBE(355.97,IBTYP,0)),U))
"RTN","IBCEP2B",78,0)
 .. S DIR("A",IBCT)="  "_$E(IBNUM_$J("",3),1,3)_" -  "_$E($S($P(IBZ1,U)="INS DEF":"<INS DEF> ",1:"")_$P(Z0,U,4)_$J("",29),1,29)_"  "_$E(IBTYPN_$J("",15),1,15)_"  "_$S($P(IBARR,U,3):$$EXTERNAL^DILFD(355.9,.03,"",$P(IBARR,U,3)),1:"")
"RTN","IBCEP2B",79,0)
 .. S IBID(IBNUM,1)=DIR("A",IBCT),IBID(IBNUM)=$P(Z0,U,4)_U_IBTYP
"RTN","IBCEP2B",80,0)
 .. I (IBNUM#15)=0 S IBM=$$MORE(.DIR) D  Q:IBQUIT
"RTN","IBCEP2B",81,0)
 ... I IBM<0 S IBQUIT=1,IBSEL=0 Q  ; User aborted list
"RTN","IBCEP2B",82,0)
 ... I 'IBM S IBQUIT=1 Q  ; User wants to select
"RTN","IBCEP2B",83,0)
 ... W ! K DIR S IBCT=1
"RTN","IBCEP2B",84,0)
 I 'IBSEL S DIPA("EDIT")=-1
"RTN","IBCEP2B",85,0)
 I IBSEL S:IBDEF=""&$G(IBREQ) IBDEF=2 S DIPA("EDIT")=$$SELID(.DIR,IBDEF,.IBID,.DIPA,IBNUM)
"RTN","IBCEP2B",86,0)
 Q
"RTN","IBCEP2B",87,0)
 ;
"RTN","IBCEP2B",88,0)
SELID(DIR,IBDEF,IBID,DIPA,IBNUM) ; Returns the selection from the array of possible IDs/ID actions
"RTN","IBCEP2B",89,0)
 N IDACT,IDSEL,X,Y
"RTN","IBCEP2B",90,0)
 S IDACT=""
"RTN","IBCEP2B",91,0)
 S DIR("B")=$S('$G(IBDEF):1,1:IBDEF),DIR("A",+$O(DIR("A",""),-1)+1)=" "
"RTN","IBCEP2B",92,0)
 S DIR(0)="NA^1:"_IBNUM,DIR("A")="Selection: " W ! D ^DIR K DIR
"RTN","IBCEP2B",93,0)
 I $D(DTOUT)!$D(DUOUT)!(Y=1) S IDACT=-1 G SELIDQ
"RTN","IBCEP2B",94,0)
 I Y=2 S IDACT=1 G SELIDQ
"RTN","IBCEP2B",95,0)
 S IDSEL=Y
"RTN","IBCEP2B",96,0)
 S DIR("A",1)="ID SELECTED:",DIR("A",2)="  "_$G(IBID(+Y,1)),DIR("A")="IS THIS CORRECT?: ",DIR("B")="YES",DIR(0)="YA" W ! D ^DIR K DIR
"RTN","IBCEP2B",97,0)
 I Y'=1 S IDACT=-1 G SELIDQ
"RTN","IBCEP2B",98,0)
 S DIPA("PRID")=$P(IBID(IDSEL),U),DIPA("PRIDT")=$P(IBID(IDSEL),U,2),IDACT=2
"RTN","IBCEP2B",99,0)
 ;
"RTN","IBCEP2B",100,0)
SELIDQ Q IDACT
"RTN","IBCEP2B",101,0)
 ;
"RTN","IBCEP2B",102,0)
MORE(DIR) ;
"RTN","IBCEP2B",103,0)
 N DIR,X,Y,DUOUT,DTOUT
"RTN","IBCEP2B",104,0)
 S DIR(0)="YA",DIR("A")="MORE?: ",DIR("B")="NO" W ! D ^DIR K DIR("B")
"RTN","IBCEP2B",105,0)
 Q $S($D(DTOUT)!$D(DUOUT):-1,1:Y)
"RTN","IBCEP2B",106,0)
 ;
"RTN","IBCEP2B",107,0)
 ; IBFIDFL = E = Electronic Form Type
"RTN","IBCEP2B",108,0)
 ;           A = Additional ID's
"RTN","IBCEP2B",109,0)
 ;           LF - VA Lab/Facility
"RTN","IBCEP2B",110,0)
FACID(IBINS,IBFIDFL) ; Enter/edit billing facility ids
"RTN","IBCEP2B",111,0)
 ; IBINS = ien of ins co (file 36)
"RTN","IBCEP2B",112,0)
 N IBID,Z,Z0,Y
"RTN","IBCEP2B",113,0)
 K ^TMP($J,"IBBF_ID")
"RTN","IBCEP2B",114,0)
 W @IOF
"RTN","IBCEP2B",115,0)
 D GETBPNUM(IBINS)
"RTN","IBCEP2B",116,0)
 K ^TMP("IBCE_PRVFAC_MAINT_INS",$J)
"RTN","IBCEP2B",117,0)
 S ^TMP("IBCE_PRVFAC_MAINT_INS",$J)=IBFIDFL_U_IBINS_U_"1"
"RTN","IBCEP2B",118,0)
 D EN^VALM("IBCE PRVFAC MAINT")
"RTN","IBCEP2B",119,0)
 K ^TMP("IBCE_PRVFAC_MAINT_INS",$J)
"RTN","IBCEP2B",120,0)
 W @IOF
"RTN","IBCEP2B",121,0)
 D FULL^VALM1
"RTN","IBCEP2B",122,0)
 Q
"RTN","IBCEP2B",123,0)
 ;
"RTN","IBCEP2B",124,0)
GETBPNUM(IBINS) ;
"RTN","IBCEP2B",125,0)
 N Z,Z0,IBID,IBMAIN
"RTN","IBCEP2B",126,0)
 S IBMAIN=$$MAIN(),^TMP($J,"IBBF_ID")=IBMAIN
"RTN","IBCEP2B",127,0)
 S IBID=$$BF^IBCU()
"RTN","IBCEP2B",128,0)
 S Z=0 F  S Z=$O(^IBA(355.92,"B",IBINS,Z)) Q:'Z  D
"RTN","IBCEP2B",129,0)
 . S Z0=$G(^IBA(355.92,Z,0))
"RTN","IBCEP2B",130,0)
 . Q:$P(Z0,U,8)'="E"  ; WCJ 1/13/06  There are several ID types in this file 
"RTN","IBCEP2B",131,0)
 . Q:$P(Z0,U,3)]""
"RTN","IBCEP2B",132,0)
 . S ^TMP($J,"IBBF_ID",$S($P(Z0,U,5)=IBMAIN:0,1:+$P(Z0,U,5)),+$P(Z0,U,4))=$P(Z0,U,7)
"RTN","IBCEP2B",133,0)
 . S ^TMP($J,"IBBF_ID",$S($P(Z0,U,5)=IBMAIN:0,1:+$P(Z0,U,5)),+$P(Z0,U,4),"QUAL")=$P(Z0,U,6)
"RTN","IBCEP2B",134,0)
 Q
"RTN","IBCEP2B",135,0)
 ;
"RTN","IBCEP2B",136,0)
MAIN() ; Returns ien of main division of the database
"RTN","IBCEP2B",137,0)
 Q +$$PRIM^VASITE()
"RTN","IBCEP2B",138,0)
 ;
"RTN","IBCEP2B",139,0)
FACNUM(IBIFN,IBCOB,IBQF) ; Function returns the current division's fac billing
"RTN","IBCEP2B",140,0)
 ; prov id for the COB insurance sequence from file 355.92
"RTN","IBCEP2B",141,0)
 ; IBIFN = ien file 399
"RTN","IBCEP2B",142,0)
 ; IBCOB = # of COB ins seq or if "", current assumed
"RTN","IBCEP2B",143,0)
 ; IBQF - 1 if qualifier is to be returned instead of ID
"RTN","IBCEP2B",144,0)
 N Z,IBDIV,IBFT,X,BPZ
"RTN","IBCEP2B",145,0)
 S X="",IBDIV=0
"RTN","IBCEP2B",146,0)
 S:'$G(IBCOB) IBCOB=+$$COBN^IBCEF(IBIFN)
"RTN","IBCEP2B",147,0)
 ;
"RTN","IBCEP2B",148,0)
 ; IB*2*400 - esg - 11/7/08 - Determine the division associated with the billing provider first
"RTN","IBCEP2B",149,0)
 S BPZ=+$$B^IBCEF79(IBIFN,IBCOB)                     ; Inst file pointer as the billing provider for payer seq IBCOB
"RTN","IBCEP2B",150,0)
 I BPZ S IBDIV=+$O(^DG(40.8,"AD",BPZ,0))             ; Billing Provider division (may not exist)
"RTN","IBCEP2B",151,0)
 ;
"RTN","IBCEP2B",152,0)
 I 'IBDIV S IBDIV=+$P($G(^DGCR(399,IBIFN,0)),U,22)   ; Division on claim
"RTN","IBCEP2B",153,0)
 I 'IBDIV S IBDIV=$$MAIN()                           ; main division
"RTN","IBCEP2B",154,0)
 ;JWS;IB*2.0*592;
"RTN","IBCEP2B",155,0)
 S IBFT=$$FT^IBCEF(IBIFN),IBFT=$S(IBFT=3:1,IBFT=7:7,1:2)
"RTN","IBCEP2B",156,0)
 K ^TMP($J,"IBBF_ID")
"RTN","IBCEP2B",157,0)
 D GETBPNUM(+$P($G(^DGCR(399,IBIFN,"M")),U,IBCOB))
"RTN","IBCEP2B",158,0)
 I IBDIV=+$G(^TMP($J,"IBBF_ID")) S IBDIV=0
"RTN","IBCEP2B",159,0)
 I '$G(IBQF) S X=$S($D(^TMP($J,"IBBF_ID",IBDIV,IBFT)):^(IBFT),1:$G(^TMP($J,"IBBF_ID",0,IBFT)))
"RTN","IBCEP2B",160,0)
 I $G(IBQF) S X=$S($D(^TMP($J,"IBBF_ID",IBDIV,IBFT,"QUAL")):^("QUAL"),1:$G(^TMP($J,"IBBF_ID",0,IBFT,"QUAL")))
"RTN","IBCEP2B",161,0)
 K ^TMP($J,"IBBF_ID")
"RTN","IBCEP2B",162,0)
 Q X
"RTN","IBCEP2B",163,0)
 ;
"RTN","IBCEP2B",164,0)
SOP(IBIFN,IBZD) ; Returns X12 current source of pay code for bill ien IBIFN
"RTN","IBCEP2B",165,0)
 ; IBZD = the current ins policy type, if known
"RTN","IBCEP2B",166,0)
 N IBZ,IBFT  ;JRA IB*2.0*592 Added 'IBFT'
"RTN","IBCEP2B",167,0)
 S IBZ=""
"RTN","IBCEP2B",168,0)
 I $G(IBZD)="" D F^IBCEF("N-CURRENT INS POLICY TYPE","IBZD",,IBIFN)
"RTN","IBCEP2B",169,0)
 S IBFT=$$FT^IBCEF(IBIFN)  ;JRA IB*2.0*592
"RTN","IBCEP2B",170,0)
 ;S IBZ=$S($G(IBZD)="":"G2","MAMB16"[IBZD:"1C",IBZD="TV"!(IBZD="MC"):"1D",IBZD="CH":"1H",IBZD="BL":$S($$FT^IBCEF(IBIFN)=2:"1B",1:"1A"),1:"G2")  ;JRA IB*2.0*592 ';'
"RTN","IBCEP2B",171,0)
 S IBZ=$S($G(IBZD)="":"G2","MAMB16"[IBZD:"1C",IBZD="TV"!(IBZD="MC"):"1D",IBZD="CH":"1H",IBZD="BL":$S((IBFT=2!(IBFT=7)):"1B",1:"1A"),1:"G2")  ;JRA IB*2.0*592
"RTN","IBCEP2B",172,0)
 Q IBZ
"RTN","IBCEP2B",173,0)
 ;
"RTN","IBCEP3")
0^76^B37284126^B36442740
"RTN","IBCEP3",1,0)
IBCEP3 ;ALB/TMP - EDI UTILITIES for provider ID ;25-SEP-00
"RTN","IBCEP3",2,0)
 ;;2.0;INTEGRATED BILLING;**137,207,232,280,349,592**;21-MAR-94;Build 58
"RTN","IBCEP3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEP3",4,0)
 ;
"RTN","IBCEP3",5,0)
CUNEED(IBIFN,IBSEQ,IBPTYP,IBRET,IBEMC) ; Determine if care unit needed for
"RTN","IBCEP3",6,0)
 ; provider type and insurance company(s) on bill
"RTN","IBCEP3",7,0)
 ; IBIFN = ien of bill (file 399)
"RTN","IBCEP3",8,0)
 ; IBSEQ = specific COB sequence to check or null for check all
"RTN","IBCEP3",9,0)
 ; IBPTYP = the ien of the provider id type in file 355.97 or if null,
"RTN","IBCEP3",10,0)
 ;          the default performing provider ID type for the ins co's.
"RTN","IBCEP3",11,0)
 ; IBRET = flag to return insurance ien (0) or file 355.97 ien (1)
"RTN","IBCEP3",12,0)
 ; IBEMC = no longer used
"RTN","IBCEP3",13,0)
 ;
"RTN","IBCEP3",14,0)
 ; Function returns care unit needed flag (0=not needed, 1=needed) ^
"RTN","IBCEP3",15,0)
 ; AND   if IBSEQ="": primary ins or 355.97 ien if care unit needed ^
"RTN","IBCEP3",16,0)
 ;                    secondary ins or 355.97 ien if care unit needed ^
"RTN","IBCEP3",17,0)
 ;                    tertiary ins or 355.97 ien if care unit needed
"RTN","IBCEP3",18,0)
 ;                    (these would be '^' pieces 2,3,4)
"RTN","IBCEP3",19,0)
 ;       if IBSEQ   : IBSEQ seq ins or 355.97 ien if care unit needed
"RTN","IBCEP3",20,0)
 ;                    (this would be '^' piece 2)
"RTN","IBCEP3",21,0)
 ;
"RTN","IBCEP3",22,0)
 Q:$G(IBEMC) 0
"RTN","IBCEP3",23,0)
 N Q,Z,Z0,Z4,IB,IBCTYP,IBFTYP,IBQ,IBRX,IBPT
"RTN","IBCEP3",24,0)
 S (IBRX,IB)=0
"RTN","IBCEP3",25,0)
 S IBFTYP=$$FT^IBCEF(IBIFN),IBCTYP=$$INPAT^IBCEF(IBIFN,1)
"RTN","IBCEP3",26,0)
 ;JWS;IB*2.0*592; If Dental quit
"RTN","IBCEP3",27,0)
 I IBFTYP=7 Q IB
"RTN","IBCEP3",28,0)
 S IBFTYP=$S(IBFTYP=3:1,1:2) S:IBCTYP'=1 IBCTYP=2
"RTN","IBCEP3",29,0)
 I IBCTYP=2 S IBRX=$$ISRX^IBCEF1(IBIFN) ; Outpatient pharmacy
"RTN","IBCEP3",30,0)
 S IBPT=$G(IBPTYP)
"RTN","IBCEP3",31,0)
 ;
"RTN","IBCEP3",32,0)
 S (Z,IBQ)=0
"RTN","IBCEP3",33,0)
 F  D  Q:IBQ
"RTN","IBCEP3",34,0)
 . I $G(IBSEQ) S Z=IBSEQ,IBQ=1 ; Only once for specific COB sequence
"RTN","IBCEP3",35,0)
 . I '$G(IBSEQ) S Z=Z+1,IBPTYP=IBPT I Z>3 S IBQ=1 Q  ; Up to 3 times - all ins
"RTN","IBCEP3",36,0)
 . S Z0=$$INSSEQ^IBCEP1(IBIFN,Z),Z4=$G(^DIC(36,+Z0,4))
"RTN","IBCEP3",37,0)
 . I '$G(IBPTYP) S IBPTYP=+Z4
"RTN","IBCEP3",38,0)
 . I 'Z0!'IBPTYP S:'Z0 IBQ=1 Q
"RTN","IBCEP3",39,0)
 . S Q=+$$CAREUN(Z0,IBPTYP,IBFTYP,IBCTYP,IBRX)
"RTN","IBCEP3",40,0)
 . I Q S $P(IB,U,$S($G(IBSEQ):Z+1,1:2))=$S($G(IBRET):Q,1:Z0)
"RTN","IBCEP3",41,0)
 ;
"RTN","IBCEP3",42,0)
 I $TR(IB,"^0") S $P(IB,U)=1
"RTN","IBCEP3",43,0)
 Q IB
"RTN","IBCEP3",44,0)
 ;
"RTN","IBCEP3",45,0)
CAREUN(IBINS,IBPTYP,IBFTYP,IBCTYP,IBRX) ; Find ien (file 355.96) for care
"RTN","IBCEP3",46,0)
 ; unit for the combination of ins co, prov type, form type and
"RTN","IBCEP3",47,0)
 ; care type
"RTN","IBCEP3",48,0)
 ; IBINS = ien of ins co (file 36)
"RTN","IBCEP3",49,0)
 ; IBPTYP = ien of provider id type (file 355.97)
"RTN","IBCEP3",50,0)
 ; IBFTYP = form type (1=UB,2=1500)
"RTN","IBCEP3",51,0)
 ; IBCTYP = care type (1=inpat,2=outpat)
"RTN","IBCEP3",52,0)
 ; IBRX = 1 if outpat/Rx bill
"RTN","IBCEP3",53,0)
 ;
"RTN","IBCEP3",54,0)
 N IB
"RTN","IBCEP3",55,0)
 S IB=""
"RTN","IBCEP3",56,0)
 ;
"RTN","IBCEP3",57,0)
 I $G(IBRX) D
"RTN","IBCEP3",58,0)
 . N T
"RTN","IBCEP3",59,0)
 . S T=$O(^IBA(355.96,"AD",IBINS,IBFTYP,3,IBPTYP,0))
"RTN","IBCEP3",60,0)
 . I 'T S T=$O(^IBA(355.96,"AD",IBINS,0,3,IBPTYP,0))
"RTN","IBCEP3",61,0)
 . I T S IB=T
"RTN","IBCEP3",62,0)
 ;
"RTN","IBCEP3",63,0)
 I 'IB D  ; Find from most specific to least specific
"RTN","IBCEP3",64,0)
 . I $O(^IBA(355.96,"AD",IBINS,IBFTYP,IBCTYP,IBPTYP,0)) S IB=+$O(^(0)) Q
"RTN","IBCEP3",65,0)
 . I $O(^IBA(355.96,"AD",IBINS,IBFTYP,0,IBPTYP,0)) S IB=+$O(^(0)) Q
"RTN","IBCEP3",66,0)
 . I $O(^IBA(355.96,"AD",IBINS,0,IBCTYP,IBPTYP,0)) S IB=+$O(^(0)) Q
"RTN","IBCEP3",67,0)
 . I $O(^IBA(355.96,"AD",IBINS,0,0,IBPTYP,0)) S IB=+$O(^(0)) Q
"RTN","IBCEP3",68,0)
 ;
"RTN","IBCEP3",69,0)
 Q IB
"RTN","IBCEP3",70,0)
 ;
"RTN","IBCEP3",71,0)
DISP(IBINS,IBTYPE) ; Return the name of the type of care unit needed
"RTN","IBCEP3",72,0)
 ; IBINS = ien of ins co (file 36)
"RTN","IBCEP3",73,0)
 ; IBTYPE = 2:PERFORMING PROVIDER ID
"RTN","IBCEP3",74,0)
 I $G(IBTYPE)'=2 Q ""
"RTN","IBCEP3",75,0)
 Q $P($G(^DIC(36,+IBINS,4)),U,9)
"RTN","IBCEP3",76,0)
 ;
"RTN","IBCEP3",77,0)
DELID(IBIFN,IBSEQ,IBX) ; Delete all provider data specific to an ins co
"RTN","IBCEP3",78,0)
 ; represented by the COB sequence IBSEQ for bill IBIFN
"RTN","IBCEP3",79,0)
 ; IBX = 1 if called from care unit prompt - don't delete value
"RTN","IBCEP3",80,0)
 N IBZ,IBDR,X,Y,Z0,Z1
"RTN","IBCEP3",81,0)
 S IBZ=0
"RTN","IBCEP3",82,0)
 Q:'$G(IBSEQ)!($G(IBSEQ)>3)
"RTN","IBCEP3",83,0)
 F  S IBZ=$O(^DGCR(399,IBIFN,"PRV",IBZ)) Q:'IBZ  S Z0=$G(^(IBZ,0)),Z1=$G(^(1)) D
"RTN","IBCEP3",84,0)
 . ; Delete provider id's
"RTN","IBCEP3",85,0)
 . I $P(Z0,U,4+IBSEQ)'="" S IBDR(399.0222,IBZ_","_IBIFN_",",(4+IBSEQ/100))="@"
"RTN","IBCEP3",86,0)
 . ; Delete provider id types
"RTN","IBCEP3",87,0)
 . I $P(Z0,U,11+IBSEQ)'="" S IBDR(399.0222,IBZ_","_IBIFN_",",(11+IBSEQ/100))="@"
"RTN","IBCEP3",88,0)
 . I $D(IBDR) D FILE^DIE(,"IBDR")
"RTN","IBCEP3",89,0)
 Q
"RTN","IBCEP3",90,0)
 ;
"RTN","IBCEP3",91,0)
SETID(IBIFN,IBSEQ) ; Default provider id for bill IBIFN and ins co for COB
"RTN","IBCEP3",92,0)
 ; sequence IBSEQ
"RTN","IBCEP3",93,0)
 N IBZ,X,Y,IBDR,IBT
"RTN","IBCEP3",94,0)
 S IBZ=0
"RTN","IBCEP3",95,0)
 Q  ; No longer used as of patch 232
"RTN","IBCEP3",96,0)
 ;Q:'$G(IBSEQ)!($G(IBSEQ)>3)
"RTN","IBCEP3",97,0)
 ;F  S IBZ=$O(^DGCR(399,IBIFN,"PRV",IBZ)) Q:'IBZ  S Z0=$G(^(IBZ,0)),Z1=$G(^(1)) D
"RTN","IBCEP3",98,0)
 ;. ; Update provider id's if no care unit is needed
"RTN","IBCEP3",99,0)
 ;. I $P(Z0,U,2)'="" D
"RTN","IBCEP3",100,0)
 ;.. S Z=$$GETID^IBCEP2(IBIFN,2,$P(Z0,U,2),IBSEQ,.IBT)
"RTN","IBCEP3",101,0)
 ;.. I Z'="",IBT S IBDR(399.0222,IBZ_","_IBIFN_",",(4+IBSEQ/100))=Z,IBDR(399.0222,IBZ_","_IBIFN_",",(11+IBSEQ/100))=+IBT
"RTN","IBCEP3",102,0)
 ;. I $D(IBDR) D FILE^DIE(,"IBDR")
"RTN","IBCEP3",103,0)
 Q
"RTN","IBCEP3",104,0)
 ;
"RTN","IBCEP3",105,0)
ALLID(IBIFN,IBFLD,IBFUNC) ; If form type or care type (I/O/RX) changes,
"RTN","IBCEP3",106,0)
 ; determine new provider id values if possible and update them
"RTN","IBCEP3",107,0)
 ; this includes primary, secondary, tertiary id's
"RTN","IBCEP3",108,0)
 ; IBIFN = ien of claim (file 399)
"RTN","IBCEP3",109,0)
 ; IBFLD = ien of the field being changed when this call is made
"RTN","IBCEP3",110,0)
 ;         (.19 = form type   .25 = care type)
"RTN","IBCEP3",111,0)
 ; IBFUNC = 1 to add,  2 to delete
"RTN","IBCEP3",112,0)
 N Z,Z0,IBC,IBDR,IBT
"RTN","IBCEP3",113,0)
 S Z=0
"RTN","IBCEP3",114,0)
 F  S Z=$O(^DGCR(399,IBIFN,"PRV",Z)) Q:'Z  S Z0=$G(^(Z,0)) D
"RTN","IBCEP3",115,0)
 . F IBC=5:1:7 I $S(IBFUNC=2:$P(Z0,U,IBC)'="",1:1) S IBDR(399.0222,IBC_","_IBIFN_",",(IBC/100))=$S(IBFUNC=2:"@",1:$$GETID^IBCEP2(IBIFN,2,$P(Z0,U,2),IBC-4,.IBT))
"RTN","IBCEP3",116,0)
 I $D(IBDR) D FILE^DIE(,"IBDR")
"RTN","IBCEP3",117,0)
 Q
"RTN","IBCEP3",118,0)
 ;
"RTN","IBCEP3",119,0)
CUMNT ; Add/edit care unit
"RTN","IBCEP3",120,0)
 N D,DIE,DIC,DIK,DIR,DA,X,Y,IB,IBINS,IBF,IBCT,IBOK,IBPTYP,IBOLD,IBY,IBINS1,IBPTYP1,DUOUT,DTOUT
"RTN","IBCEP3",121,0)
INS F  D  Q:Y'>0
"RTN","IBCEP3",122,0)
 . S DIC="^DIC(36,",DIC(0)="AEMQ" D ^DIC K DIC
"RTN","IBCEP3",123,0)
 . I $D(DUOUT)!$D(DTOUT) S Y=-1 Q
"RTN","IBCEP3",124,0)
 . I Y'>0 S DIR(0)="EA",DIR("A")="Insurance Co is required - press enter to continue: " D ^DIR K DIR Q
"RTN","IBCEP3",125,0)
 . S IBINS=+Y,IBF="A",IBINS1=$P(Y,U,2)
"RTN","IBCEP3",126,0)
 I $O(^IBA(355.96,"D",IBINS,""))'="" D
"RTN","IBCEP3",127,0)
 . W ! S DIR("A")="(A)dd or (E)dit entries?: ",DIR("B")="Add",DIR(0)="SA^A:Add;E:Edit" D ^DIR W ! K DIR
"RTN","IBCEP3",128,0)
 . S IBF=Y
"RTN","IBCEP3",129,0)
 Q:$G(IBF)=""!("AE"'[$G(IBF))
"RTN","IBCEP3",130,0)
 ;
"RTN","IBCEP3",131,0)
 I IBINS>0 D
"RTN","IBCEP3",132,0)
 . I IBF="A" D NEW^IBCEP4A(1)
"RTN","IBCEP3",133,0)
 . I IBF="E" D CHANGE^IBCEP4A(1)
"RTN","IBCEP3",134,0)
 ;
"RTN","IBCEP3",135,0)
 Q
"RTN","IBCEP3",136,0)
 ;
"RTN","IBCEP3",137,0)
DUP(IBDA,IBOLD,IBFUNC) ; Check if the combination of ins co, prov type, care
"RTN","IBCEP3",138,0)
 ; type and form already exists in file 355.96
"RTN","IBCEP3",139,0)
 ; IBDA = ien of entry in file 355.96
"RTN","IBCEP3",140,0)
 ; IBOLD = the 0-node before changes were made - used to reset the fields
"RTN","IBCEP3",141,0)
 N DUP,IB0,DR,X,Y,DIK,DIE,DA
"RTN","IBCEP3",142,0)
 S IB0=$G(^IBA(355.96,IBDA,0)),DUP=0
"RTN","IBCEP3",143,0)
 ;
"RTN","IBCEP3",144,0)
 I $O(^IBA(355.96,"AUNIQ",+$P(IB0,U,3),+IB0,+$P(IB0,U,4),+$P(IB0,U,5),+$P(IB0,U,6),0))'=IBDA!($O(^IBA(355.96,"AUNIQ",+$P(IB0,U,3),+IB0,+$P(IB0,U,4),+$P(IB0,U,5),+$P(IB0,U,6),""),-1)'=IBDA) D
"RTN","IBCEP3",145,0)
 . S DUP=1
"RTN","IBCEP3",146,0)
 . I IBFUNC="E" D
"RTN","IBCEP3",147,0)
 .. S DR=";.01///"_$P(IBOLD,U)_";.03///"_$S($P(IBOLD,U,3)'="":"/"_$P(IBOLD,U,3),1:"@")_";.04///"_$S($P(IBOLD,U,4)'="":"/"_$P(IBOLD,U,4),1:"@")
"RTN","IBCEP3",148,0)
 .. S DR=DR_";05///"_$S($P(IBOLD,U,5)'="":"/"_$P(IBOLD,U,5),1:"@")_";.06///"_$S($P(IBOLD,U,6)'="":"/"_$P(IBOLD,U,6),1:"@")
"RTN","IBCEP3",149,0)
 .. S DA=IBDA,DIE="^IBA(355.96," D ^DIE
"RTN","IBCEP3",150,0)
 . I IBFUNC="A" D
"RTN","IBCEP3",151,0)
 .. S DA=IBDA,DIK="^IBA(355.96," D ^DIK
"RTN","IBCEP3",152,0)
 Q DUP
"RTN","IBCEP3",153,0)
 ;
"RTN","IBCEP3",154,0)
PROFID(IBIFN,IBSEQ,IBID) ; Return id and type of rendering provider id
"RTN","IBCEP3",155,0)
 ; used for insurance co at COB seq IBSEQ for bill ien IBIFN
"RTN","IBCEP3",156,0)
 ; RETURN VALUES:
"RTN","IBCEP3",157,0)
 ; piece 1:
"RTN","IBCEP3",158,0)
 ;  1 = FEDERAL TAX ID
"RTN","IBCEP3",159,0)
 ;  2 = INSURANCE CO SPECIFIC ID
"RTN","IBCEP3",160,0)
 ;  3 = NETWORK ID
"RTN","IBCEP3",161,0)
 ; "" = not a CMS-1500 bill or no id found
"RTN","IBCEP3",162,0)
 ; piece 2:
"RTN","IBCEP3",163,0)
 ;  the id #
"RTN","IBCEP3",164,0)
 N IBTYP,IBXDATA,IBZ
"RTN","IBCEP3",165,0)
 S:'$G(IBSEQ) IBSEQ=+$$COBN^IBCEF(IBXIEN)
"RTN","IBCEP3",166,0)
 S IBTYP=""_U_$G(IBID)
"RTN","IBCEP3",167,0)
 ;JWS;IB*2.0*592
"RTN","IBCEP3",168,0)
 I $$FT^IBCEF(IBIFN)'=2,$$FT^IBCEF(IBIFN)'=7 G PROFIDQ
"RTN","IBCEP3",169,0)
 I '$D(IBID) D F^IBCEF("N-ALL ATT/RENDERING PROV ID","IBZ",,IBIFN) S IBID=$$NOPUNCT^IBCEF($P(IBZ,U,IBSEQ+1))
"RTN","IBCEP3",170,0)
 G:IBID="" PROFIDQ
"RTN","IBCEP3",171,0)
 S IBTYP=$S($$NOPUNCT^IBCEF(IBID)=$$NOPUNCT^IBCEF($P($G(^IBE(350.9,1,1)),U,5)):1,$$NETWRK(IBIFN,IBID,IBSEQ):3,1:2)
"RTN","IBCEP3",172,0)
 S IBTYP=IBTYP_U_IBID
"RTN","IBCEP3",173,0)
 ;
"RTN","IBCEP3",174,0)
PROFIDQ Q IBTYP
"RTN","IBCEP3",175,0)
 ;
"RTN","IBCEP3",176,0)
NETWRK(IBIFN,IBID,IBSEQ) ; Determine if ID number IBID is the same as the
"RTN","IBCEP3",177,0)
 ; network id for the insurance co
"RTN","IBCEP3",178,0)
 ;  IBIFN = bill ien (file 399)
"RTN","IBCEP3",179,0)
 ;  IBSEQ = COB seq # of bill
"RTN","IBCEP3",180,0)
 ;   Returns 1 if network ID match is found for bill IBIFN, COB seq IBSEQ
"RTN","IBCEP3",181,0)
 N IBINS,IBNET
"RTN","IBCEP3",182,0)
 S IBNET=0
"RTN","IBCEP3",183,0)
 Q IBNET
"RTN","IBCEP3",184,0)
 ; This section needs work *********
"RTN","IBCEP3",185,0)
 I '$G(IBSEQ) S IBSEQ=+$$COBN^IBCEF(IBXIEN)
"RTN","IBCEP3",186,0)
 S IBINS=+$G(^DGCR(399,IBIFN,"I"_IBSEQ))
"RTN","IBCEP3",187,0)
 I $P($G(^IBE(355.97,+$$PPTYP^IBCEP0(IBINS),1)),U,6) D
"RTN","IBCEP3",188,0)
 . ; performing provider id type is a network id type
"RTN","IBCEP3",189,0)
 . I $$NOPUNCT^IBCEF($G(IBID))=$$NOPUNCT^IBCEF($$GETID^IBCEP2(IBIFN,3,$$PERFPRV^IBCEP2A(IBIFN),IBSEQ)) S IBNET=1
"RTN","IBCEP3",190,0)
 Q IBNET
"RTN","IBCEP3",191,0)
 ;
"RTN","IBCEP3",192,0)
 ;
"RTN","IBCEP3",193,0)
 ; Parameter definitions for UNIQ1 and UNIQ2 in IBCEP2
"RTN","IBCEP3",194,0)
 ;   IBIFN = ien of bill (file 399)
"RTN","IBCEP3",195,0)
 ;   IBINS = ien of insurance co (file 36) or *ALL* for all insurance
"RTN","IBCEP3",196,0)
 ;   IBPTYP = the ien of the provider id type in file 355.97
"RTN","IBCEP3",197,0)
 ;   IBUNIT = the value of the specific care unit to use for a match
"RTN","IBCEP3",198,0)
 ;            or *N/A* if none needed
"RTN","IBCEP3",199,0)
 ;   IBCU = the ien of the entry being matched in start file
"RTN","IBCEP3",200,0)
 ;   IBT = the second and third pieces are set to the entry ien^file #
"RTN","IBCEP4")
0^60^B23569043^B23601105
"RTN","IBCEP4",1,0)
IBCEP4 ;ALB/TMP - EDI UTILITIES for provider ID ;29-SEP-00
"RTN","IBCEP4",2,0)
 ;;2.0;INTEGRATED BILLING;**137,320,348,349,377,592**;21-MAR-94;Build 58
"RTN","IBCEP4",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEP4",4,0)
 ;
"RTN","IBCEP4",5,0)
EN ; -- main entry point
"RTN","IBCEP4",6,0)
 N IBINS,IBALL,IB95
"RTN","IBCEP4",7,0)
 D ENX
"RTN","IBCEP4",8,0)
 Q
"RTN","IBCEP4",9,0)
 ;
"RTN","IBCEP4",10,0)
EN1(IBINS) ; -- Entry point from provider number maintenence
"RTN","IBCEP4",11,0)
 N IBPRV,IBALL,IB95
"RTN","IBCEP4",12,0)
 S VALMBCK="R"
"RTN","IBCEP4",13,0)
 D ENX
"RTN","IBCEP4",14,0)
 Q
"RTN","IBCEP4",15,0)
 ;
"RTN","IBCEP4",16,0)
ENX ; Common call to list template for dual entry points
"RTN","IBCEP4",17,0)
 N IBSLEV,DIR,Y
"RTN","IBCEP4",18,0)
 K IBFASTXT
"RTN","IBCEP4",19,0)
 D FULL^VALM1
"RTN","IBCEP4",20,0)
 S DIR(0)="SA^1:Performing Provider Care Units;2:Billing Provider Care Units"
"RTN","IBCEP4",21,0)
 S DIR("A")="Enter Type of Care Unit: ",DIR("B")=$P($P(DIR(0),":",2),";",1)
"RTN","IBCEP4",22,0)
 W ! D ^DIR K DIR W !
"RTN","IBCEP4",23,0)
 I Y'>0 Q
"RTN","IBCEP4",24,0)
 S IBSLEV=+Y
"RTN","IBCEP4",25,0)
 I IBSLEV=2 D EN^VALM("IBCE 2ND PRVID CARE UNIT MAINT") Q
"RTN","IBCEP4",26,0)
 D EN^VALM("IBCE PRVCARE UNIT MAINT")
"RTN","IBCEP4",27,0)
 Q
"RTN","IBCEP4",28,0)
 ;
"RTN","IBCEP4",29,0)
HDR ; -- header
"RTN","IBCEP4",30,0)
 K VALMHDR
"RTN","IBCEP4",31,0)
 S VALMHDR(1)=" "
"RTN","IBCEP4",32,0)
 S VALMHDR(2)="Insurance Co: "_$S('$G(IBALL)&$G(IBINS):$P($G(^DIC(36,+IBINS,0)),U),1:"ALL")
"RTN","IBCEP4",33,0)
 Q
"RTN","IBCEP4",34,0)
 ;
"RTN","IBCEP4",35,0)
INIT ; -- init variables, list array
"RTN","IBCEP4",36,0)
 N Z,IB,IBLCT,IBENT,IBNM,IB0,Z0,Z1,IBQ,DIR,Y,X
"RTN","IBCEP4",37,0)
 I $G(IBINS) S Y=IBINS ; For entrypoint from provider number maintenance
"RTN","IBCEP4",38,0)
 ;
"RTN","IBCEP4",39,0)
 I '$G(IBINS) D
"RTN","IBCEP4",40,0)
 . S DIR(0)="PA^DIC(36,:AEMQ",DIR("A")="Select INSURANCE CO: ",DIR("?")="Select an INSURANCE CO to display its care units"
"RTN","IBCEP4",41,0)
 . D ^DIR K DIR
"RTN","IBCEP4",42,0)
 . I $D(DTOUT)!$D(DUOUT) S Y=-2 Q
"RTN","IBCEP4",43,0)
 . I Y>0 S IBINS=+Y Q
"RTN","IBCEP4",44,0)
 ;
"RTN","IBCEP4",45,0)
 I Y'=-2 D
"RTN","IBCEP4",46,0)
 . D BLD
"RTN","IBCEP4",47,0)
 E  D
"RTN","IBCEP4",48,0)
 . S VALMQUIT=1
"RTN","IBCEP4",49,0)
 Q
"RTN","IBCEP4",50,0)
 ;
"RTN","IBCEP4",51,0)
BLD ;  Bld display  - IBINS must = ien of file 36
"RTN","IBCEP4",52,0)
 K ^TMP("IBPRV_CU",$J)
"RTN","IBCEP4",53,0)
 ;
"RTN","IBCEP4",54,0)
 I $G(IBSLEV)=2 Q
"RTN","IBCEP4",55,0)
 ;
"RTN","IBCEP4",56,0)
 S (IBENT,IBLCT)=0,IBNM=""
"RTN","IBCEP4",57,0)
 F  S IBNM=$O(^IBA(355.95,"C",IBINS,IBNM)) Q:IBNM=""  S Z=0 F  S Z=$O(^IBA(355.95,"C",IBINS,IBNM,Z)) Q:'Z  S IB=$G(^IBA(355.95,Z,0)) I IB'="",$P(IB,U,4)="" D
"RTN","IBCEP4",58,0)
 . S IBLCT=IBLCT+1,IBENT=IBENT+1
"RTN","IBCEP4",59,0)
 . I '$D(^IBA(355.96,"AUNIQ",IBINS,Z)) D SET^VALM10(IBLCT,$E(IBENT_"    ",1,4)_$E($P(IB,U)_$J("",30),1,30)_"  "_$E($P(IB,U,2)_$J("",20),1,20)_" (NO COMBINATIONS FOUND)",IBENT) Q
"RTN","IBCEP4",60,0)
 . D SET^VALM10(IBLCT,$E(IBENT_"    ",1,4)_$E($P(IB,U)_$J("",30),1,30)_"  "_$E($P(IB,U,2)_$J("",20),1,20),IBENT)
"RTN","IBCEP4",61,0)
 . S ^TMP("IBPRV_CU",$J,"ZIDX",IBENT)=Z
"RTN","IBCEP4",62,0)
 . S Z0=0 F  S Z0=$O(^IBA(355.96,"AE",Z,Z0)) Q:'Z0  S Z1=0 F  S Z1=$O(^IBA(355.96,"AE",Z,Z0,Z1)) Q:'Z1  S IB0=$G(^IBA(355.96,Z1,0)) I IB0'="" D
"RTN","IBCEP4",63,0)
 .. S IBLCT=IBLCT+1
"RTN","IBCEP4",64,0)
 .. S IBQ=$J("",28)_"o "_$E($$EXPAND^IBTRE(355.96,.06,+$P(IB0,U,6))_$J("",20),1,20)
"RTN","IBCEP4",65,0)
 .. S IBQ=IBQ_"  "_$E($P("Both Form Types^UB-04 Only^CMS-1500 Only",U,$P(IB0,U,4)+1)_$J("",15),1,15)_"  "_$E($P("Inpt/Outpt^Inpt Only^Outpt Only^RX Only",U,+$P(IB0,U,5)+1)_$J("",10),1,10)
"RTN","IBCEP4",66,0)
 .. D SET^VALM10(IBLCT,IBQ,IBENT)
"RTN","IBCEP4",67,0)
 ;
"RTN","IBCEP4",68,0)
 I 'IBLCT D SET^VALM10(1,"No CARE UNITs Found"_$S('$G(IBINS):"",1:" for Insurance Co")) S IBLCT=1
"RTN","IBCEP4",69,0)
 S VALMCNT=IBLCT,VALMBG=1
"RTN","IBCEP4",70,0)
 Q
"RTN","IBCEP4",71,0)
 ;
"RTN","IBCEP4",72,0)
HELP ; -- help
"RTN","IBCEP4",73,0)
 ;
"RTN","IBCEP4",74,0)
 I $G(IBSLEV)=2 Q
"RTN","IBCEP4",75,0)
 ;
"RTN","IBCEP4",76,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBCEP4",77,0)
 Q
"RTN","IBCEP4",78,0)
 ;
"RTN","IBCEP4",79,0)
EXIT ; -- exit
"RTN","IBCEP4",80,0)
 D CLEAN^VALM10
"RTN","IBCEP4",81,0)
 K ^TMP("IBPRV_CU",$J),IBINS,IBALL
"RTN","IBCEP4",82,0)
 Q
"RTN","IBCEP4",83,0)
 ;
"RTN","IBCEP4",84,0)
EXPND ;
"RTN","IBCEP4",85,0)
 Q
"RTN","IBCEP4",86,0)
 ;
"RTN","IBCEP4",87,0)
SEL(IBDA,MANY) ; Select from care unit list
"RTN","IBCEP4",88,0)
 ; IBDA is passed by reference and IBDA(1) returned containing
"RTN","IBCEP4",89,0)
 ;  ien's of the care unit selected (file 355.95).
"RTN","IBCEP4",90,0)
 ; If > 1 entry can be selected, MANY is set to 1
"RTN","IBCEP4",91,0)
 N Z
"RTN","IBCEP4",92,0)
 S IBDA=0
"RTN","IBCEP4",93,0)
 D EN^VALM2($G(XQORNOD(0)),$S($G(MANY):"",1:"S"))
"RTN","IBCEP4",94,0)
 S Z=0 F  S Z=$O(VALMY(Z)) Q:'Z  S IBDA=IBDA+1,IBDA(IBDA)=+$G(^TMP("IBPRV_CU",$J,"ZIDX",Z))
"RTN","IBCEP4",95,0)
 Q
"RTN","IBCEP4",96,0)
 ;
"RTN","IBCEP4",97,0)
DISP(IBVAR,IBINS,IBPTYP,IBFT,IBCT,START,END) ; Set up display array for
"RTN","IBCEP4",98,0)
 ; provider id
"RTN","IBCEP4",99,0)
 N Z
"RTN","IBCEP4",100,0)
 S START=$S($G(START):START,1:1)
"RTN","IBCEP4",101,0)
 S (Z,END)=$G(START)
"RTN","IBCEP4",102,0)
 S @IBVAR@(START)="INSURANCE: "_$S(IBINS:$P($G(^DIC(36,+IBINS,0)),U),1:"ALL INSURANCE")
"RTN","IBCEP4",103,0)
 S @IBVAR@(START+1)="PROV TYPE: "_$$EXPAND^IBTRE(355.96,.06,IBPTYP)
"RTN","IBCEP4",104,0)
 S @IBVAR@(START+2)="FORM TYPE: "_$$EXPAND^IBTRE(355.96,.04,IBFT)
"RTN","IBCEP4",105,0)
 S @IBVAR@(START+3)="CARE TYPE: "_$$EXPAND^IBTRE(355.96,.05,IBCT)
"RTN","IBCEP4",106,0)
 S END=$G(START)+3
"RTN","IBCEP4",107,0)
 Q
"RTN","IBCEP4",108,0)
 ;
"RTN","IBCEP4",109,0)
CAREUOK(IBIFN,IBCU,IBTYPE,IBSEQ) ; Returns 1 if care unit is appropriate 
"RTN","IBCEP4",110,0)
 ; for bill based on provider type, care type, bill type and insurance co
"RTN","IBCEP4",111,0)
 ; IBIFN = ien of bill (file 399)
"RTN","IBCEP4",112,0)
 ; IBCU = the ien of the care unit (file 355.96)
"RTN","IBCEP4",113,0)
 ; IBTYPE = type of ID being checked (1=performing, 2=EMC)
"RTN","IBCEP4",114,0)
 ; IBSEQ = the COB seq being checked (1-3)
"RTN","IBCEP4",115,0)
 N Z,IBOK,IBINS,IBCT,IBFT,IBPTYP,IBRX
"RTN","IBCEP4",116,0)
 S IBOK=0
"RTN","IBCEP4",117,0)
 S IBINS=+$$FINDINS^IBCEF1(IBIFN,+IBSEQ),IBFT=$S($$FT^IBCEF(IBIFN)=2:2,1:1)
"RTN","IBCEP4",118,0)
 S IBPTYP=+$S(IBTYPE=1:$$PPTYP^IBCEP0(IBINS),1:$$EMCID^IBCEP())
"RTN","IBCEP4",119,0)
 S IBRX=$$ISRX^IBCEF1(IBIFN)
"RTN","IBCEP4",120,0)
 S IBCT=$S('IBRX:$S($$INPAT^IBCEF(IBIFN,1):1,1:2),1:3)
"RTN","IBCEP4",121,0)
 ;Check from most general to most specific
"RTN","IBCEP4",122,0)
 I $D(^IBA(355.96,"AD",IBINS,0,0,IBPTYP,IBCU)) S IBOK=1 G CAREOKQ
"RTN","IBCEP4",123,0)
 I 'IBRX,$D(^IBA(355.96,"AD",IBINS,IBFT,0,IBPTYP,IBCU)) S IBOK=1 G CAREOKQ
"RTN","IBCEP4",124,0)
 I $D(^IBA(355.96,"AD",IBINS,0,IBCT,IBPTYP,IBCU)) S IBOK=1 G CAREOKQ
"RTN","IBCEP4",125,0)
 I $D(^IBA(355.96,"AD",IBINS,IBFT,IBCT,IBPTYP,IBCU)) S IBOK=1 G CAREOKQ
"RTN","IBCEP4",126,0)
 ;
"RTN","IBCEP4",127,0)
CAREOKQ Q IBOK
"RTN","IBCEP4",128,0)
 ;
"RTN","IBCEP5")
0^61^B59355056^B48717212
"RTN","IBCEP5",1,0)
IBCEP5 ;ALB/TMP - EDI UTILITIES for provider ID ;29-SEP-00
"RTN","IBCEP5",2,0)
 ;;2.0;INTEGRATED BILLING;**137,232,320,348,349,377,592**;21-MAR-94;Build 58
"RTN","IBCEP5",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEP5",4,0)
 ;
"RTN","IBCEP5",5,0)
EN ; -- main entry point for IBCE PRV MAINT
"RTN","IBCEP5",6,0)
 N IBPRV,IBINS
"RTN","IBCEP5",7,0)
EN1 ; Entrypoint for non-VA provider ID maintenance hook
"RTN","IBCEP5",8,0)
 N IBSLEV,DIR,Y,X,IBPRMPT,IBNVAFL,IBIF
"RTN","IBCEP5",9,0)
 K IBFASTXT
"RTN","IBCEP5",10,0)
 S IBIF="" I $G(IBPRV) S IBIF=$$GET1^DIQ(355.93,IBPRV,.02,"I")
"RTN","IBCEP5",11,0)
 D FULL^VALM1
"RTN","IBCEP5",12,0)
 S IBPRMPT=$S(IBIF=1:"LAB OR FACILITY",1:"PROVIDER")
"RTN","IBCEP5",13,0)
 S DIR(0)="SA^1:"_IBPRMPT_"'S OWN IDS;2:"_IBPRMPT_" IDS FURNISHED BY AN INSURANCE COMPANY"
"RTN","IBCEP5",14,0)
 S DIR("A")="SELECT SOURCE OF ID: ",DIR("B")=$P($P(DIR(0),":",2),";")
"RTN","IBCEP5",15,0)
 W ! D ^DIR K DIR W !
"RTN","IBCEP5",16,0)
 I Y'>0 Q
"RTN","IBCEP5",17,0)
 S IBSLEV=+Y
"RTN","IBCEP5",18,0)
 D EN^VALM("IBCE PRVPRV MAINT")
"RTN","IBCEP5",19,0)
 Q
"RTN","IBCEP5",20,0)
 ;
"RTN","IBCEP5",21,0)
HDR ; -- header code
"RTN","IBCEP5",22,0)
 N IBC,Z,IBIF
"RTN","IBCEP5",23,0)
 S IBIF="" I $G(IBNPRV) S IBIF=$$GET1^DIQ(355.93,IBNPRV,.02,"I")
"RTN","IBCEP5",24,0)
 K VALMHDR
"RTN","IBCEP5",25,0)
 S IBC=1
"RTN","IBCEP5",26,0)
 S IBPRMPT=$S(IBIF=1:"Lab or Facility",1:"Performing Provider")
"RTN","IBCEP5",27,0)
 S Z="** "_$S($G(IBSLEV)=1:IBPRMPT_"'s Own IDs (No Specific Insurance Co)",1:IBPRMPT_" IDs from Insurance Co")_" **"
"RTN","IBCEP5",28,0)
 S VALMHDR(IBC)=$J("",80-$L(Z)\2)_Z,IBC=IBC+1
"RTN","IBCEP5",29,0)
 I $G(IBPRV),'+IBIF S VALMHDR(IBC)="PROVIDER   : "_$$EXPAND^IBTRE(355.9,.01,IBPRV)_$S(IBPRV["VA(200":" (VA PROVIDER)",1:" (NON-VA PROVIDER)"),IBC=IBC+1
"RTN","IBCEP5",30,0)
 I $G(IBPRV),+IBIF S VALMHDR(IBC)="Provider: "_$$EXPAND^IBTRE(355.9,.01,IBPRV)_$S(IBIF=1:"(Non-VA Lab or Facility)",1:""),IBC=IBC+1
"RTN","IBCEP5",31,0)
 I $G(IBINS) D
"RTN","IBCEP5",32,0)
 . N PCF,PCDISP
"RTN","IBCEP5",33,0)
 . S PCF=$P($G(^DIC(36,+IBINS,3)),"^",13)
"RTN","IBCEP5",34,0)
 . S PCDISP=$S($G(IBSLEV)'=2!($G(IBPRV)'["VA(200,"):"",PCF="C":"(Child)",PCF="P":"(Parent)",1:"")
"RTN","IBCEP5",35,0)
 . S VALMHDR(IBC)=$S(IBIF:"Insurance Co: ",1:"INSURANCE CO: ")_$P($G(^DIC(36,+IBINS,0)),U)_" "_PCDISP
"RTN","IBCEP5",36,0)
 Q
"RTN","IBCEP5",37,0)
 ;
"RTN","IBCEP5",38,0)
INIT ; -- init variables and list array
"RTN","IBCEP5",39,0)
 N IBFILE,DIR,DIC,Y,X,DTOUT,DUOUT,IBIF,AGAIN
"RTN","IBCEP5",40,0)
 ;
"RTN","IBCEP5",41,0)
 K ^TMP("IB_EDITED_IDS",$J)  ; This will be to keep track of ID's edited during this session
"RTN","IBCEP5",42,0)
 S IBIF="" I $G(IBNPRV) S IBIF=$$GET1^DIQ(355.93,IBNPRV,.02,"I")
"RTN","IBCEP5",43,0)
 ;
"RTN","IBCEP5",44,0)
 ; Removing Care Unit under certain conditions
"RTN","IBCEP5",45,0)
 ; This list is used for multiple purposes and not all have Care Units Associated with them
"RTN","IBCEP5",46,0)
 ; Also, a different protocol menu is used with these
"RTN","IBCEP5",47,0)
 ; IBNPRV is a non VA provider
"RTN","IBCEP5",48,0)
 ; IBIF = 1 means this is a group or facility, not an individual.
"RTN","IBCEP5",49,0)
 ; 
"RTN","IBCEP5",50,0)
 I $G(IBNPRV),$G(IBIF)=1 D
"RTN","IBCEP5",51,0)
 . S VALM("TITLE")="Secondary Provider ID"
"RTN","IBCEP5",52,0)
 . K VALMDDF("CAREUNIT")
"RTN","IBCEP5",53,0)
 . I VALMCAP["Care Unit" S VALMCAP=$P(VALMCAP,"Care Unit")_"         "_$P(VALMCAP,"Care Unit",2)
"RTN","IBCEP5",54,0)
 . K VALM("PROTOCOL")
"RTN","IBCEP5",55,0)
 . S Y=$$FIND1^DIC(101,,,"IBCE PRVNVA LOF MAINT")
"RTN","IBCEP5",56,0)
 . I Y S VALM("PROTOCOL")=+Y_";ORD(101,"
"RTN","IBCEP5",57,0)
 ;
"RTN","IBCEP5",58,0)
 I $G(IBPRV) S IBFILE="IBA(355.93,",IBPRV=+IBPRV_";"_IBFILE
"RTN","IBCEP5",59,0)
 I '$G(IBPRV) D  G:$G(VALMQUIT) INITQ
"RTN","IBCEP5",60,0)
 . S DIR(0)="SAO^V:VA PROVIDER;N:NON-VA PROVIDER",DIR("A")="(V)A or (N)on-VA provider: ",DIR("B")="V"
"RTN","IBCEP5",61,0)
 . D ^DIR K DIR
"RTN","IBCEP5",62,0)
 . I "NV"'[Y!(Y="") S VALMQUIT=1 Q
"RTN","IBCEP5",63,0)
 . S IBFILE=$S(Y="V":"VA(200,",1:"IBA(355.93,")
"RTN","IBCEP5",64,0)
 . S DIC=U_IBFILE,DIC(0)="AEMQ"_$S(IBFILE["355.93":"L",1:"")
"RTN","IBCEP5",65,0)
 . S DIC("A")="Select "_$S(IBFILE["355.93":"NON-",1:"")_"V.A. PROVIDER NAME: "
"RTN","IBCEP5",66,0)
 . S:IBFILE["355.93" DIC("DR")=".02////2;.03;.04"
"RTN","IBCEP5",67,0)
 . F  D  I $G(IBPRV)!$G(VALMQUIT) K DIC Q
"RTN","IBCEP5",68,0)
 .. D ^DIC
"RTN","IBCEP5",69,0)
 .. I $D(DTOUT)!$D(DUOUT) S VALMQUIT=1 Q
"RTN","IBCEP5",70,0)
 .. I Y'>0 W !,*7,"This is a required response. Enter '^' to exit" Q
"RTN","IBCEP5",71,0)
 .. S IBPRV=+Y_";"_IBFILE
"RTN","IBCEP5",72,0)
 ;
"RTN","IBCEP5",73,0)
AGAIN I $G(IBSLEV)=2 D  G:$G(AGAIN) AGAIN G:$G(VALMQUIT) INITQ
"RTN","IBCEP5",74,0)
 . S AGAIN=0
"RTN","IBCEP5",75,0)
 . S DIR(0)="PA^DIC(36,:AEMQ",DIR("A")="Select INSURANCE CO: ",DIR("?",1)="Select an INSURANCE CO to display its provider ID's"
"RTN","IBCEP5",76,0)
 . D ^DIR K DIR
"RTN","IBCEP5",77,0)
 . I $D(DTOUT)!$D(DUOUT) S VALMQUIT=1 Q
"RTN","IBCEP5",78,0)
 . S IBINS=$S(Y>0:+Y,1:"NO")
"RTN","IBCEP5",79,0)
 . I $G(IBPRV)'["VA(200," Q    ; Only VA providers
"RTN","IBCEP5",80,0)
 . I $P($G(^DIC(36,+IBINS,3)),"^",13)="C" D  S AGAIN=1 Q
"RTN","IBCEP5",81,0)
 .. W !,*7,"This is a Child Insurance Company.  Editing IDs is not permitted."
"RTN","IBCEP5",82,0)
 ;
"RTN","IBCEP5",83,0)
 E  D
"RTN","IBCEP5",84,0)
 . S IBINS="NO"
"RTN","IBCEP5",85,0)
 D BLD
"RTN","IBCEP5",86,0)
INITQ Q
"RTN","IBCEP5",87,0)
 ;
"RTN","IBCEP5",88,0)
BLD ;  Build initial display
"RTN","IBCEP5",89,0)
 ; Assumes IBPRV = the variable ptr for prov id file (355.9)
"RTN","IBCEP5",90,0)
 ;         IBINS = the ien of the ins co or if null, ALL is assumed
"RTN","IBCEP5",91,0)
 ;         IBSLEV = 1 to display only provider default ids
"RTN","IBCEP5",92,0)
 ;                = 2 to display all provider/insurance co ids
"RTN","IBCEP5",93,0)
 N IB,IBLCT,IBCT,CT,PT,CU,INS,FT,Z,IBENT,IB1,IBIF,FORM,CAREUNT,CARETYP  ;JRA IB*2.0*592 Added: FORM,CAREUNT,CARETYP
"RTN","IBCEP5",94,0)
 ;
"RTN","IBCEP5",95,0)
 S IBIF="" I $G(IBPRV)[355.93 S IBIF=$$GET1^DIQ(355.93,+IBPRV,.02,"I")
"RTN","IBCEP5",96,0)
 ;
"RTN","IBCEP5",97,0)
 K ^TMP("IBPRV_",$J),^TMP("IBPRV_SORT",$J)
"RTN","IBCEP5",98,0)
 K Z0
"RTN","IBCEP5",99,0)
 S (IBENT,IBCT,IBLCT)=0,INS="",IB1=1
"RTN","IBCEP5",100,0)
 F  S INS=$S($G(IBINS):IBINS,IBSLEV=1:"*ALL*",1:$O(^IBA(355.9,"AUNIQ",IBPRV,INS))) Q:$S(INS="":1,$G(IBINS)!(IBSLEV=1):$D(CU),1:0)  S CU="",IB1=0 F  S CU=$O(^IBA(355.9,"AUNIQ",IBPRV,INS,CU)) Q:CU=""  D
"RTN","IBCEP5",101,0)
 . S FT="" F  S FT=$O(^IBA(355.9,"AUNIQ",IBPRV,INS,CU,FT)) Q:FT=""  S CT="" F  S CT=$O(^IBA(355.9,"AUNIQ",IBPRV,INS,CU,FT,CT)) Q:CT=""  S PT=0 F  S PT=$O(^IBA(355.9,"AUNIQ",IBPRV,INS,CU,FT,CT,PT)) Q:'PT  D
"RTN","IBCEP5",102,0)
 .. S Z=0 F  S Z=$O(^IBA(355.9,"AUNIQ",IBPRV,INS,CU,FT,CT,PT,Z)) Q:'Z  S IB=$G(^IBA(355.9,Z,0)) D
"RTN","IBCEP5",103,0)
 ... S ^TMP("IBPRV_SORT",$J,$S(INS:$P($G(^DIC(36,+INS,0)),U)_" ",1:" ALL"),PT,FT,CT,CU,Z)=$P(IB,U,7)
"RTN","IBCEP5",104,0)
 ;
"RTN","IBCEP5",105,0)
 I IBSLEV=1,IBPRV["IBA(355.93",$P($G(^IBA(355.93,+IBPRV,0)),U,12)'="" S ^TMP("IBPRV_SORT",$J," ALL",+$$STLIC^IBCEP8(),0,0,"*N/A*",0)=$P(^IBA(355.93,+IBPRV,0),U,12)
"RTN","IBCEP5",106,0)
 S INS="" F  S INS=$O(^TMP("IBPRV_SORT",$J,INS)) Q:INS=""  D
"RTN","IBCEP5",107,0)
 . I '$G(IBINS),'IBIF D:IBLCT SET^VALM10(IBLCT+1," ",IBCT) S IBLCT=$S(IBLCT:IBLCT+2,1:1) D SET^VALM10(IBLCT,"INSURANCE CO: "_$S($E(INS)=" ":"ALL INSURANCE",1:INS),$S(IBCT:IBCT,1:1))
"RTN","IBCEP5",108,0)
 . S PT=""
"RTN","IBCEP5",109,0)
 . F  S PT=$O(^TMP("IBPRV_SORT",$J,INS,PT)) Q:PT=""  S FT="" F  S FT=$O(^TMP("IBPRV_SORT",$J,INS,PT,FT)) Q:FT=""  S CT="" F  S CT=$O(^TMP("IBPRV_SORT",$J,INS,PT,FT,CT)) Q:CT=""  D
"RTN","IBCEP5",110,0)
 .. S CU="" F  S CU=$O(^TMP("IBPRV_SORT",$J,INS,PT,FT,CT,CU)) Q:CU=""  S Z="" F  S Z=$O(^TMP("IBPRV_SORT",$J,INS,PT,FT,CT,CU,Z)) Q:Z=""  S IB=$G(^(Z)) D
"RTN","IBCEP5",111,0)
 ... S IBLCT=IBLCT+1,IBCT=IBCT+1
"RTN","IBCEP5",112,0)
 ... ;JRA IB*2.0*592 Modify to accommodate Dental Form 7 (FT=4)
"RTN","IBCEP5",113,0)
 ... ;S Z0=$E(IBCT_"     ",1,4)_" "_$E($$EXPAND^IBTRE(355.9,.06,PT)_$S(PT=$$STLIC^IBCEP8():"("_$P($G(^DIC(5,+$P($G(^IBA(355.93,+IBPRV,0)),U,7),0)),U,2)_")",1:"")_$J("",20),1,20)_"  "_$S(FT=1:"UB-04",FT=2:"1500 ",1:"BOTH ")  ;JRA IB*2.0*592 ';'
"RTN","IBCEP5",114,0)
 ... S FORM=$S(FT=1:"UB-04",FT=2:"1500",1:"BOTH")
"RTN","IBCEP5",115,0)
 ... S Z0=$E(IBCT_"     ",1,4)_" "_$E($$EXPAND^IBTRE(355.9,.06,PT)_$S(PT=$$STLIC^IBCEP8():"("_$P($G(^DIC(5,+$P($G(^IBA(355.93,+IBPRV,0)),U,7),0)),U,2)_")",1:"")_$J("",20),1,20)_"  "_FORM  ;JRA IB*2.0*592
"RTN","IBCEP5",116,0)
 ... ;S Z0=Z0_"  "_$E($S(CT=3:"RX",CT=1:"INPT",CT=2:"OUTPT",1:"INPT/OUTPT")_$J("",11),1,11)  ;JRA IB*2.0*592 ';'
"RTN","IBCEP5",117,0)
 ... S CARETYP=$E($S(CT=3:"RX",CT=1:"INPT",CT=2:"OUTPT",1:"INPT/OUTPT"),1,10)  ;JRA IB*2.0*592
"RTN","IBCEP5",118,0)
 ... S Z0=Z0_$J("",11-$L(FORM))_CARETYP  ;JRA IB*2.0*592
"RTN","IBCEP5",119,0)
 ... ;S Z0=Z0_"  "_$E($S(CU'="*N/A*":$P($G(^IBA(355.95,+$G(^IBA(355.96,CU,0)),0)),U),1:"")_$J("",15),1,15)_"|" I Z0["MEDICINE" X "*"  ;JRA IB*2.0*592 ';'
"RTN","IBCEP5",120,0)
 ... S CAREUNT=$E($S(CU'="*N/A*":$P($G(^IBA(355.95,+$G(^IBA(355.96,CU,0)),0)),U),1:""),1,12)  ;JRA IB*2.0*592
"RTN","IBCEP5",121,0)
 ... S CAREUNT=CAREUNT_$J("",12-$L(CAREUNT)+1) ;JRA IB*2.0*592
"RTN","IBCEP5",122,0)
 ... S Z0=Z0_($J("",(12-$L(CARETYP)+1)))  ;JRA IB*2.0*592
"RTN","IBCEP5",123,0)
 ... S Z0=Z0_CAREUNT  ;JRA IB*2.0*592
"RTN","IBCEP5",124,0)
 ... ;D SET^VALM10(IBLCT,Z0_" "_IB,IBCT)  ;JRA IB*2.0*592 ';'
"RTN","IBCEP5",125,0)
 ... ;IA# 10117;IB*2.0*592
"RTN","IBCEP5",126,0)
 ... D SET^VALM10(IBLCT,Z0_IB,IBCT)  ;JRA IB*2.0*592
"RTN","IBCEP5",127,0)
 ... S ^TMP("IBPRV_",$J,"ZIDX",IBCT)=$S(Z'=0:Z,1:"LIC^"_IBPRV)
"RTN","IBCEP5",128,0)
 I IBSLEV=1,IBPRV["VA(200" D
"RTN","IBCEP5",129,0)
 . N IBP
"RTN","IBCEP5",130,0)
 . S IBP=+IBPRV
"RTN","IBCEP5",131,0)
 . Q:'$$GETLIC^IBCEP5D(.IBP)
"RTN","IBCEP5",132,0)
 . I IBCT S IBLCT=IBLCT+1 D SET^VALM10(IBLCT," ",IBCT)
"RTN","IBCEP5",133,0)
 . S Z=0 F  S Z=$O(IBP(Z)) Q:'Z  D
"RTN","IBCEP5",134,0)
 .. S IBLCT=IBLCT+1,IBCT=IBCT+1
"RTN","IBCEP5",135,0)
 .. D SET^VALM10(IBLCT,$E(IBCT_"     ",1,4)_$E($P($G(^DIC(5,+Z,0)),U,2)_" STATE LICENSE #"_$J("",20),1,20)_$J("",39)_IBP(Z),IBCT)
"RTN","IBCEP5",136,0)
 .. S ^TMP("IBPRV_",$J,"ZIDX",IBCT)="LIC^"_+IBPRV
"RTN","IBCEP5",137,0)
 K ^TMP("IBPRV_SORT",$J)
"RTN","IBCEP5",138,0)
 ;
"RTN","IBCEP5",139,0)
 I IBLCT=0 D  G BLDQ ; No entries for ins co selected
"RTN","IBCEP5",140,0)
 . D SET^VALM10(1," ")
"RTN","IBCEP5",141,0)
 . D SET^VALM10(2,"  No ID's found for provider "_$S('$G(IBINS):"",1:"and selected insurance co"))
"RTN","IBCEP5",142,0)
 . S IBLCT=2
"RTN","IBCEP5",143,0)
 ;
"RTN","IBCEP5",144,0)
BLDQ K VALMCNT,VALMBG
"RTN","IBCEP5",145,0)
 S VALMCNT=IBLCT,VALMBG=1
"RTN","IBCEP5",146,0)
 Q
"RTN","IBCEP5",147,0)
 ;
"RTN","IBCEP5",148,0)
HELP ; -- help code
"RTN","IBCEP5",149,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBCEP5",150,0)
 Q
"RTN","IBCEP5",151,0)
 ;
"RTN","IBCEP5",152,0)
EXIT ; -- exit code
"RTN","IBCEP5",153,0)
 D COPYPROV^IBCEP5A(IBINS)
"RTN","IBCEP5",154,0)
 K IBPRV
"RTN","IBCEP5",155,0)
 D CLEAN^VALM10
"RTN","IBCEP5",156,0)
 K ^TMP("IBPRV_",$J),^TMP("IBPRV_SORT",$J),IBINS,IBALL
"RTN","IBCEP5",157,0)
 Q
"RTN","IBCEP5",158,0)
 ;
"RTN","IBCEP5",159,0)
EXPND ; -- expand code
"RTN","IBCEP5",160,0)
 Q
"RTN","IBCEP5",161,0)
 ;
"RTN","IBCEP5",162,0)
SEL(IBDA,MANY) ; Select from provider id list
"RTN","IBCEP5",163,0)
 ; IBDA is passed by reference and IBDA(1) returned containing
"RTN","IBCEP5",164,0)
 ;  ien's of the provider id records selected (file 355.9).
"RTN","IBCEP5",165,0)
 ; If > 1 entry can be selected, MANY is set to 1
"RTN","IBCEP5",166,0)
 N Z
"RTN","IBCEP5",167,0)
 S IBDA=0
"RTN","IBCEP5",168,0)
 D EN^VALM2($G(XQORNOD(0)),$S($G(MANY):"",1:"S"))
"RTN","IBCEP5",169,0)
 S Z=0 F  S Z=$O(VALMY(Z)) Q:'Z  S IBDA=IBDA+1,IBDA(IBDA)=$G(^TMP("IBPRV_",$J,"ZIDX",Z))
"RTN","IBCEP5",170,0)
 Q
"RTN","IBCEP5",171,0)
 ;
"RTN","IBCEP5A")
0^131^B26669569^B26443385
"RTN","IBCEP5A",1,0)
IBCEP5A ;ALB/TMP - EDI UTILITIES for provider ID ;29-SEP-00
"RTN","IBCEP5A",2,0)
 ;;2.0;INTEGRATED BILLING;**137,232,320,348,447,592**;21-MAR-94;Build 58
"RTN","IBCEP5A",3,0)
 ;
"RTN","IBCEP5A",4,0)
NEW(IBPRV,IBINS) ; Add new prov id
"RTN","IBCEP5A",5,0)
 D FULL^VALM1
"RTN","IBCEP5A",6,0)
 N DIC,DIR,X,Y,DA,DO,DD,DLAYGO,IBQ,IBIEN,IBPRV0,DTOUT,DUOUT,IBIF,IBSIC
"RTN","IBCEP5A",7,0)
 S IBQ=0,IBPRV0=$S(IBPRV'["355.93":"",1:$G(^IBA(355.93,+IBPRV,0)))
"RTN","IBCEP5A",8,0)
 ;
"RTN","IBCEP5A",9,0)
 ; Only 5 secondary providers allowed for lab/facilities
"RTN","IBCEP5A",10,0)
 S IBIF=$P(IBPRV0,U,2)
"RTN","IBCEP5A",11,0)
 S IBSIC=$O(^TMP("IBPRV_",$J,"ZIDX",""),-1)
"RTN","IBCEP5A",12,0)
 I IBIF=1,IBSIC>4 D  G NEWQ
"RTN","IBCEP5A",13,0)
 . S DIR(0)="EA",DIR("A",1)="A maximum of 5 secondary IDs are allowed for a lab/facility.",DIR("A")="PRESS ENTER TO CONTINUE " D ^DIR K DIR W !
"RTN","IBCEP5A",14,0)
 ;
"RTN","IBCEP5A",15,0)
 S DIR(0)="PAr^355.97:AEMQ"
"RTN","IBCEP5A",16,0)
 S DIR("A")="Enter Provider ID Qualifier: "
"RTN","IBCEP5A",17,0)
 ;JWS;IB*2.0*592 - corrected spelling error
"RTN","IBCEP5A",18,0)
 S DIR("?")="Enter a Qualifier to identify the type of ID number you are entering."
"RTN","IBCEP5A",19,0)
 ;
"RTN","IBCEP5A",20,0)
 ;S DIR("S")=$S($G(IBINS):"I ""04""[+$P($G(^(0)),U,2)",1:"I +$P($G(^(1)),U,7)&'$G(^(1))&$S($P(IBPRV0,U,2)'=1:1,1:$P(^(0),U,3)'=""SY"")")
"RTN","IBCEP5A",21,0)
 I $G(IBINS) D
"RTN","IBCEP5A",22,0)
 . I $P(IBPRV0,U,2)=1 S DIR("S")="I $$LFINS^IBCEPU(Y)" Q   ; Lab or Facility ID provided by ins
"RTN","IBCEP5A",23,0)
 . S DIR("S")="I $$RAINS^IBCEPU(Y)" Q   ; Non VA Ind provided by ins
"RTN","IBCEP5A",24,0)
 I '$G(IBINS) D
"RTN","IBCEP5A",25,0)
 . I $P(IBPRV0,U,2)=1 D  Q
"RTN","IBCEP5A",26,0)
 .. I IBPRV["VA(200," S DIR("S")="I $$LFINS^IBCEPU(Y)" Q   ; VA facility own IDS
"RTN","IBCEP5A",27,0)
 .. S DIR("S")="I $$NVALFOWN^IBCEPU(Y)" Q   ; Non -VA facility own
"RTN","IBCEP5A",28,0)
 . S DIR("S")="I $$RAOWN^IBCEPU(Y)"   ; FACILITY/GROUP;PROVIDER'S OWN PERSONAL NUMBER
"RTN","IBCEP5A",29,0)
 ;
"RTN","IBCEP5A",30,0)
 D ^DIR K DIR
"RTN","IBCEP5A",31,0)
 I $D(DTOUT)!$D(DUOUT) S IBQ=1 G NEWQ
"RTN","IBCEP5A",32,0)
 I $P($G(^IBE(355.97,+Y,1)),U,3),IBPRV["355.93" D  G NEWQ
"RTN","IBCEP5A",33,0)
 . K DIE,DR
"RTN","IBCEP5A",34,0)
 . S DIE="^IBA(355.93,",DA=+IBPRV
"RTN","IBCEP5A",35,0)
 . ;S DR="S Y=""@5"";@1;.07;@5;I $P($G(^IBA(355.93,DA,0)),U,7)'="""" S Y=""@2"";W !!,""YOU MUST HAVE A STATE TO USE LICENSE # AS AN ID!!"",! S Y=""@1"";@2;W !!,""LICENSING STATE: "",$P($G(^DIC(5,+$P($G(^IBA(355.93,DA,0)),U,7),0)),U,2);.12"
"RTN","IBCEP5A",36,0)
 . ; Changed with IB*2.0*447 BI
"RTN","IBCEP5A",37,0)
 . S DR="S Y=""@5"";@1;.16;@5;I $P($G(^IBA(355.93,DA,0)),U,16)'="""" S Y=""@2"";"
"RTN","IBCEP5A",38,0)
 . S DR=DR_"W !!,""YOU MUST HAVE A LICENSE STATE TO USE LICENSE # AS AN ID!!"",! S Y=""@1"";"
"RTN","IBCEP5A",39,0)
 . S DR=DR_"@2;W !!,""LICENSING STATE: "",$P($G(^DIC(5,+$P($G(^IBA(355.93,DA,0)),U,16),0)),U,2);.12"
"RTN","IBCEP5A",40,0)
 . D ^DIE
"RTN","IBCEP5A",41,0)
 . I '$D(Y) D BLD^IBCEP5
"RTN","IBCEP5A",42,0)
 K IB3559(.06)
"RTN","IBCEP5A",43,0)
 S IB3559(.06)=+Y
"RTN","IBCEP5A",44,0)
 ;
"RTN","IBCEP5A",45,0)
 I $G(IBINS)'="NO",'$G(IBINS),'$P($G(^IBE(355.97,IB3559(.06),1)),U,8) D  G:IBQ NEWQ
"RTN","IBCEP5A",46,0)
 . S DIR(0)="PA^DIC(36,:AEMQ",DIR("A")="Select INSURANCE CO: ",DIR("?")="Select the INSURANCE CO that is furnishing you with the provider ID"
"RTN","IBCEP5A",47,0)
 . D ^DIR K DIR
"RTN","IBCEP5A",48,0)
 . I $D(DTOUT)!$D(DUOUT) S IBQ=1 Q
"RTN","IBCEP5A",49,0)
 . S IBINS=$S(Y>0:+Y,1:"")
"RTN","IBCEP5A",50,0)
 S IB3559(.02)=$S($G(IBINS):IBINS,1:"*ALL*")
"RTN","IBCEP5A",51,0)
 ;
"RTN","IBCEP5A",52,0)
 I '$P($G(^IBE(355.97,IB3559(.06),1)),U,8) D  G:'IBIEN NEWQ
"RTN","IBCEP5A",53,0)
 . S DIC(0)="L",DLAYGO=355.9,DIC="^IBA(355.9,",X=IBPRV
"RTN","IBCEP5A",54,0)
 . S:$G(IBINS) DIC("DR")=".02////"_IBINS
"RTN","IBCEP5A",55,0)
 . D FILE^DICN K DIC,DLAYGO,DD,DO
"RTN","IBCEP5A",56,0)
 . I Y'>0!$D(DUOUT)!$D(DTOUT) S IBIEN=0 Q
"RTN","IBCEP5A",57,0)
 . S IBIEN=+Y
"RTN","IBCEP5A",58,0)
 . D NEWID^IBCEP5B(355.9,IB3559(.02),IBPRV,IB3559(.06),IBIEN,1)
"RTN","IBCEP5A",59,0)
 ;
"RTN","IBCEP5A",60,0)
 E  D  ; Provider-specific id stored outside of billing
"RTN","IBCEP5A",61,0)
 . N DIR,X,Y,Z
"RTN","IBCEP5A",62,0)
 . ; State License # is stored in file 200
"RTN","IBCEP5A",63,0)
 . ; DEA# may not be edited in IB
"RTN","IBCEP5A",64,0)
 . S Z=$G(^IBE(355.97,IB3559(.06),1))
"RTN","IBCEP5A",65,0)
 . I +Z D  Q
"RTN","IBCEP5A",66,0)
 .. W ! S DIR(0)="EA",DIR("A",1)="DEA # CANNOT BE EDITED WITHIN THE BILLING SOFTWARE",DIR("A")="PRESS ENTER TO CONTINUE " D ^DIR K DIR W !
"RTN","IBCEP5A",67,0)
 . I $P(Z,U,3) D
"RTN","IBCEP5A",68,0)
 .. D PRVED(+IBPRV)
"RTN","IBCEP5A",69,0)
 D BLD^IBCEP5
"RTN","IBCEP5A",70,0)
NEWQ K VALMBCK
"RTN","IBCEP5A",71,0)
 S VALMBCK="R"
"RTN","IBCEP5A",72,0)
 Q
"RTN","IBCEP5A",73,0)
 ;
"RTN","IBCEP5A",74,0)
DEL1 ; Delete Provider specific ID's
"RTN","IBCEP5A",75,0)
 N IBDA,DA,DIE,DR
"RTN","IBCEP5A",76,0)
 D FULL^VALM1
"RTN","IBCEP5A",77,0)
 D SEL^IBCEP5(.IBDA)
"RTN","IBCEP5A",78,0)
 G:'$O(IBDA(0)) DEL1Q
"RTN","IBCEP5A",79,0)
 S IBDA=+$O(IBDA("")),IBDA=$G(IBDA(IBDA))
"RTN","IBCEP5A",80,0)
 G:'IBDA&($E($P(IBDA,U),1,3)'="LIC") DEL1Q
"RTN","IBCEP5A",81,0)
 I IBDA>0 D DEL^IBCEP5B(355.9,IBDA,""),BLD^IBCEP5
"RTN","IBCEP5A",82,0)
 E  D  ; check for state license
"RTN","IBCEP5A",83,0)
 . Q:$E($P(IBDA,U),1,3)'="LIC"
"RTN","IBCEP5A",84,0)
 . I $P(IBDA,U,2)["IBA(355.93" D
"RTN","IBCEP5A",85,0)
 .. S DA=+$P(IBDA,U,2),DR=".12///@;.16///@",DIE="^IBA(355.93," D ^DIE
"RTN","IBCEP5A",86,0)
 . E  D
"RTN","IBCEP5A",87,0)
 .. D PRVED(+$P(IBDA,U,2))
"RTN","IBCEP5A",88,0)
 . D BLD^IBCEP5
"RTN","IBCEP5A",89,0)
DEL1Q S VALMBCK="R"
"RTN","IBCEP5A",90,0)
 Q
"RTN","IBCEP5A",91,0)
 ;
"RTN","IBCEP5A",92,0)
CHG1 ; Edit Provider ID's
"RTN","IBCEP5A",93,0)
 N IBDA,DIR,DA,DIE,DR,Z
"RTN","IBCEP5A",94,0)
 D FULL^VALM1
"RTN","IBCEP5A",95,0)
 D SEL^IBCEP5(.IBDA)
"RTN","IBCEP5A",96,0)
 G:'$O(IBDA(0)) CHG1Q
"RTN","IBCEP5A",97,0)
 S IBDA=+$O(IBDA("")),IBDA=$G(IBDA(IBDA))
"RTN","IBCEP5A",98,0)
 I IBDA>0 D
"RTN","IBCEP5A",99,0)
 . D CHG^IBCEP5B(355.9,IBDA),BLD^IBCEP5
"RTN","IBCEP5A",100,0)
 ; check for state license
"RTN","IBCEP5A",101,0)
 E  D
"RTN","IBCEP5A",102,0)
 . Q:$E($P(IBDA,U),1,3)'="LIC"
"RTN","IBCEP5A",103,0)
 . I $P(IBDA,U,2)["IBA(355.93" D
"RTN","IBCEP5A",104,0)
 .. S DA=+$P(IBDA,U,2),DIE="^IBA(355.93,"
"RTN","IBCEP5A",105,0)
 .. ;S DR="S Y=""@5"";@1;.07;@5;I $P($G(^IBA(355.93,DA,0)),U,7)'="""" S Y=""@2"";W !,""YOU MUST HAVE A STATE TO USE LICENSE # AS AN ID!!"" S Y=""@1"";@2;W !!,""LICENSING STATE: "",$P($G(^DIC(5,+$P($G(^IBA(355.93,DA,0)),U,7),0)),U,2);.12"
"RTN","IBCEP5A",106,0)
 .. ; Changed with IB*2.0*447 BI
"RTN","IBCEP5A",107,0)
 .. S DR=".16;S Y=""@5"";@1;.16;@5;I $P($G(^IBA(355.93,DA,0)),U,16)'="""" S Y=""@2"";"
"RTN","IBCEP5A",108,0)
 .. S DR=DR_"W !,""YOU MUST HAVE A LICENSE STATE TO USE LICENSE # AS AN ID!!"" S Y=""@1"";@2;"
"RTN","IBCEP5A",109,0)
 .. S DR=DR_"W !!,""LICENSING STATE: "",$P($G(^DIC(5,+$P($G(^IBA(355.93,DA,0)),U,16),0)),U,2);.12"
"RTN","IBCEP5A",110,0)
 .. D ^DIE
"RTN","IBCEP5A",111,0)
 . E  D
"RTN","IBCEP5A",112,0)
 .. D PRVED(+$P(IBDA,U,2))
"RTN","IBCEP5A",113,0)
 . D BLD^IBCEP5
"RTN","IBCEP5A",114,0)
CHG1Q S VALMBCK="R"
"RTN","IBCEP5A",115,0)
 Q
"RTN","IBCEP5A",116,0)
 ;
"RTN","IBCEP5A",117,0)
PRVED(IBPRV) ; Maintain license #'s for VA provider ien IBPRV
"RTN","IBCEP5A",118,0)
 S IBPRV=IBPRV_";VA(200,"
"RTN","IBCEP5A",119,0)
 D EN^IBCEP5D
"RTN","IBCEP5A",120,0)
 Q
"RTN","IBCEP5A",121,0)
 ;
"RTN","IBCEP5A",122,0)
COPYPROV(IBINS) ; Check if any ID's were edited and this is a parent insurance company
"RTN","IBCEP5A",123,0)
 ; IBINS = IEN into Insurance co file
"RTN","IBCEP5A",124,0)
 ; 
"RTN","IBCEP5A",125,0)
 Q:'$D(^TMP("IB_EDITED_IDS",$J))
"RTN","IBCEP5A",126,0)
 K ^TMP("IB_EDITED_IDS",$J)
"RTN","IBCEP5A",127,0)
 D COPY^IBCEPCID(IBINS)
"RTN","IBCEP5A",128,0)
 Q
"RTN","IBCEP5A",129,0)
 ;
"RTN","IBCEP5A",130,0)
 ; Get the next number so that the edits can be replicated in order for other providers/insurance companies
"RTN","IBCEP5A",131,0)
NEXTONE() ;
"RTN","IBCEP5A",132,0)
 Q $O(^TMP("IB_EDITED_IDS",$J,""),-1)+1
"RTN","IBCEP5B")
0^62^B41537754^B41204243
"RTN","IBCEP5B",1,0)
IBCEP5B ;ALB/TMP - EDI UTILITIES for prov ID ;29-SEP-00
"RTN","IBCEP5B",2,0)
 ;;2.0;INTEGRATED BILLING;**137,239,232,320,348,349,592**;21-MAR-94;Build 58
"RTN","IBCEP5B",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEP5B",4,0)
 ;
"RTN","IBCEP5B",5,0)
NEWID(IBFILE,IBINS,IBPRV,IBPTYP,IBIEN,IBF) ; Generic add prov id
"RTN","IBCEP5B",6,0)
 ; at both prov (file 355.9) and ins co levels (355.91)
"RTN","IBCEP5B",7,0)
 ; IBFILE = 355.9 or 355.91 - the file being edited
"RTN","IBCEP5B",8,0)
 ; IBINS = ien of ins co (36) or *ALL* for all ins co
"RTN","IBCEP5B",9,0)
 ; IBPRV = vp ien of billing prov
"RTN","IBCEP5B",10,0)
 ; IBPTYP = ien of prov type (file 355.97)
"RTN","IBCEP5B",11,0)
 ; IBIEN = ien of entry being added (req'd)
"RTN","IBCEP5B",12,0)
 ; IBF = 1 if deleting from ins-related options, "" from prov-related
"RTN","IBCEP5B",13,0)
 N DIC,DIR,X,Y,Z,DA,DR,DIE,DO,DD,DLAYGO,DTOUT,DUOUT,IBQ,IBCUND,IB3559,IB35591,Q,IBDR,IBID,AFT
"RTN","IBCEP5B",14,0)
 S IB35591(.03)="",IBPTYP=$G(IBPTYP)
"RTN","IBCEP5B",15,0)
 F Z=.04,.05,.03 D  G:Z="" NEWQ
"RTN","IBCEP5B",16,0)
 . I $S(Z'=.03:1,1:$S('$G(IBINS):0,1:$G(IBCUND))) D  Q:Z=""
"RTN","IBCEP5B",17,0)
 .. N DA
"RTN","IBCEP5B",18,0)
 .. I Z'=.03 S DIR(0)=IBFILE_","_Z
"RTN","IBCEP5B",19,0)
 .. I Z=.03 D
"RTN","IBCEP5B",20,0)
 ... S DIR(0)="PAO^355.95:AEMQ"
"RTN","IBCEP5B",21,0)
 ... S DIR("S")="I $O(^IBA(355.96,""AUNIQ"","_IBINS_",Y,"_$G(IB3559(.04))_","_$G(IB3559(.05))_","_IBPTYP_",0))!($O(^IBA(355.96,""AUNIQ"","_IBINS_",Y,"_$G(IB3559(.04))_",0,"_IBPTYP_",0)))"
"RTN","IBCEP5B",22,0)
 ... S DIR("S")=DIR("S")_"!($O(^IBA(355.96,""AUNIQ"","_IBINS_",Y,0,"_$G(IB3559(.05))_","_IBPTYP_",0)))!($O(^IBA(355.96,""AUNIQ"","_IBINS_",Y,0,0,"_IBPTYP_",0)))"
"RTN","IBCEP5B",23,0)
 ... S DIR("?",1)="Care unit describes areas of service and is assigned by the payer, if",DIR("?")="  applicable.  Use Care Unit Maintenance to add or modify care units."
"RTN","IBCEP5B",24,0)
 .. ;
"RTN","IBCEP5B",25,0)
 .. I Z=.04,IBPRV["355.93",$$GET1^DIQ(355.93,+IBPRV,.02,"I")=1 D
"RTN","IBCEP5B",26,0)
 ... I $$GET1^DIQ(355.97,IBPTYP,.03,"I")="EI" S $P(DIR(0),U,3)="K:Y'=1 X",DIR("?")="Provider ID Qualifier selected only allows institutional (UB type) forms" Q
"RTN","IBCEP5B",27,0)
 ... I $$GET1^DIQ(355.97,IBPTYP,.03,"I")="TJ" S $P(DIR(0),U,3)="K:Y'=2 X",DIR("?")="Provider ID Qualifier selected only allows professional (CMS-1500) forms" Q
"RTN","IBCEP5B",28,0)
 ... ;IA# 2056;IB*2.0*592
"RTN","IBCEP5B",29,0)
 ... N AFT
"RTN","IBCEP5B",30,0)
 ... S AFT=$$GET1^DIQ(355.97,IBPTYP,.07,"I")  ; get allowable form type for this Provider ID Type
"RTN","IBCEP5B",31,0)
 ... I AFT="B" S $P(DIR(0),U,3)="K:"".0.1.2.4.""'[("".""_Y_""."") X",DIR("?")="Provider ID Qualifier selected allows institutional, professional or both" Q
"RTN","IBCEP5B",32,0)
 ... I AFT="P" S $P(DIR(0),U,3)="K:Y'=2 X",DIR("?")="Provider ID Qualifier selected only allows professional (CMS-1500) forms" Q
"RTN","IBCEP5B",33,0)
 ... I AFT="I" S $P(DIR(0),U,3)="K:Y'=1 X",DIR("?")="Provider ID Qualifier selected only allows institutional (UB type) forms" Q
"RTN","IBCEP5B",34,0)
 .. ;
"RTN","IBCEP5B",35,0)
 .. S DA=0
"RTN","IBCEP5B",36,0)
 .. I Z=.04,$P($G(^IBE(355.97,+IBPTYP,0)),U,3)="1A" D SETDIR(.DIR)
"RTN","IBCEP5B",37,0)
 .. D ^DIR K DIR
"RTN","IBCEP5B",38,0)
 .. I $D(DTOUT)!$D(DUOUT) S Z="" K IB3559,IB35591 Q
"RTN","IBCEP5B",39,0)
 .. S IB3559(Z)=$S(Z'=.03:$P(Y,U),1:$S($P(Y,U)>0:$P(Y,U),1:"*N/A*"))
"RTN","IBCEP5B",40,0)
 . I Z=.05 D
"RTN","IBCEP5B",41,0)
 .. S IBCUND=$$CAREUN^IBCEP3(IBINS,IBPTYP,IB3559(.04),IB3559(.05),IB3559(.05)=3)
"RTN","IBCEP5B",42,0)
 .. S:'IBCUND!($G(IB3559(.03))=0) IB3559(.03)="*N/A*"
"RTN","IBCEP5B",43,0)
 .. I '$G(IBINS) S IBINS="*ALL*"
"RTN","IBCEP5B",44,0)
 . I Z=.03 D CAREUN^IBCEP5C
"RTN","IBCEP5B",45,0)
 ;
"RTN","IBCEP5B",46,0)
 I $D(IB3559) D
"RTN","IBCEP5B",47,0)
 . N Q,Z2,Z3,Z4,Z5,Z6,IBLAST,IBOK,DIR,Y,X
"RTN","IBCEP5B",48,0)
 . S IBLAST=0
"RTN","IBCEP5B",49,0)
 . D DISP^IBCEP4("Q",IBINS,IBPTYP,IB3559(.04),IB3559(.05),1)
"RTN","IBCEP5B",50,0)
 . W !!,"THE FOLLOWING WAS CHOSEN:"
"RTN","IBCEP5B",51,0)
 . S Q=0 F  S Q=$O(Q(Q)) Q:'Q  W !,?3,Q(Q)
"RTN","IBCEP5B",52,0)
 . I IBCUND W !,?3,"CARE UNIT: "_$$EXPAND^IBTRE(355.96,.01,IB3559(.03))
"RTN","IBCEP5B",53,0)
 . S Z2=IBINS,Z3=IB35591(.03),Z4=IB3559(.04),Z5=IB3559(.05),Z6=IBPTYP
"RTN","IBCEP5B",54,0)
 . S IBOK=1
"RTN","IBCEP5B",55,0)
 . ; If both forms, chk for specific
"RTN","IBCEP5B",56,0)
 . I 'Z4 S IBOK=$$COMBOK^IBCEP5C(IBFILE,IBPRV_U_4_U_Z2_U_Z3_U_Z4_U_Z5_U_Z6,1,$G(IBFILE)=355.91)
"RTN","IBCEP5B",57,0)
 . ; If specific form, chk for all
"RTN","IBCEP5B",58,0)
 . I IBOK,Z4 S IBOK=$$COMBOK^IBCEP5C(IBFILE,IBPRV_U_4_U_Z2_U_Z3_U_Z4_U_Z5_U_Z6,0,$G(IBFILE)=355.91)
"RTN","IBCEP5B",59,0)
 . ; If both care types, chk for specific
"RTN","IBCEP5B",60,0)
 . I IBOK,'Z5 S IBOK=$$COMBOK^IBCEP5C(IBFILE,IBPRV_U_5_U_Z2_U_Z3_U_Z4_U_Z5_U_Z6,1,$G(IBFILE)=355.91)
"RTN","IBCEP5B",61,0)
 . ; If specific care type, chk for all
"RTN","IBCEP5B",62,0)
 . I IBOK,Z5 S IBOK=$$COMBOK^IBCEP5C(IBFILE,IBPRV_U_5_U_Z2_U_Z3_U_Z4_U_Z5_U_Z6,0,$G(IBFILE)=355.91)
"RTN","IBCEP5B",63,0)
 . I 'IBOK K IB3559,IB35591
"RTN","IBCEP5B",64,0)
 . I IBOK D
"RTN","IBCEP5B",65,0)
 .. S DIR(0)=IBFILE_",.07"
"RTN","IBCEP5B",66,0)
 .. W ! D ^DIR K DIR
"RTN","IBCEP5B",67,0)
 .. S IBID=Y
"RTN","IBCEP5B",68,0)
 .. I $D(DTOUT)!$D(DUOUT) K IB3559,IB35591 S IBOK=0 Q
"RTN","IBCEP5B",69,0)
 .. S IBDR=$S(IBFILE=355.9:$S($G(IBINS):".02////"_IBINS_";",1:""),1:"")_$S($G(IBCUND):".03////"_$S(IB35591(.03):IB35591(.03),1:"*N/A*")_";",1:"")_".04////"_IB3559(.04)_";.05////"_IB3559(.05)_";.06////"_IBPTYP_$S(IBID'="":";.07////"_IBID,1:"")
"RTN","IBCEP5B",70,0)
 .. ;
"RTN","IBCEP5B",71,0)
 .. I $G(IBIEN) D
"RTN","IBCEP5B",72,0)
 ... S DR=IBDR,DA=IBIEN,DIE="^IBA("_IBFILE_","
"RTN","IBCEP5B",73,0)
 ... D ^DIE
"RTN","IBCEP5B",74,0)
 ... I $D(Y) K IB3559,IB35591 S IBOK=0
"RTN","IBCEP5B",75,0)
 ;
"RTN","IBCEP5B",76,0)
NEWQ ;
"RTN","IBCEP5B",77,0)
 I '$D(IB3559),$G(IBIEN) D  Q
"RTN","IBCEP5B",78,0)
 . N DIR,DIK,DA,X,Y
"RTN","IBCEP5B",79,0)
 . S DA=IBIEN,DIK="^IBA("_IBFILE_"," D ^DIK
"RTN","IBCEP5B",80,0)
 . S DIR(0)="EA",DIR("A",1)=$S('$G(IBOK):"",1:"PROBLEM ENCOUNTERED FILING THE RECORD - ")_"RECORD NOT ADDED",DIR("A")="PRESS ENTER to continue " W ! D ^DIR K DIR
"RTN","IBCEP5B",81,0)
 ;
"RTN","IBCEP5B",82,0)
 ; Save this for Copy ID actions
"RTN","IBCEP5B",83,0)
 I $G(IBIEN) D
"RTN","IBCEP5B",84,0)
 . I IBFILE=355.91!(IBFILE=355.9&($P($G(^IBA(IBFILE,IBIEN,0)),U)["VA(200,")) D
"RTN","IBCEP5B",85,0)
 .. N NEXTONE S NEXTONE=$$NEXTONE^IBCEP5A()
"RTN","IBCEP5B",86,0)
 .. S ^TMP("IB_EDITED_IDS",$J,NEXTONE)=IBIEN_U_"ADD"_U_IBFILE
"RTN","IBCEP5B",87,0)
 .. S ^TMP("IB_EDITED_IDS",$J,NEXTONE,0)=$G(^IBA(IBFILE,IBIEN,0))
"RTN","IBCEP5B",88,0)
 Q
"RTN","IBCEP5B",89,0)
 ;
"RTN","IBCEP5B",90,0)
CHG(IBFILE,IBDA) ; Generic call - edit prov id
"RTN","IBCEP5B",91,0)
 ; IBFILE = 355.9 or 355.91 (file being edited)
"RTN","IBCEP5B",92,0)
 ; IBDA = ien in file
"RTN","IBCEP5B",93,0)
 ;
"RTN","IBCEP5B",94,0)
 N DIR,DIE,DA,DR,IBCUCHK,IBOK,IB0,IBOLD,X,Y,Z
"RTN","IBCEP5B",95,0)
 F Z=1:1:3 L +^IBA(IBFILE,IBDA):5 Q:$T  W !,"Attempting to lock record"
"RTN","IBCEP5B",96,0)
 I '$T D  G CHGQ
"RTN","IBCEP5B",97,0)
 . W !,"RECORD LOCKED BY ANOTHER USER - TRY AGAIN LATER"
"RTN","IBCEP5B",98,0)
 . D ENTER(.DIR)
"RTN","IBCEP5B",99,0)
 . W ! D ^DIR K DIR W !
"RTN","IBCEP5B",100,0)
 S (IB0,IBOLD)=$G(^IBA(IBFILE,IBDA,0))
"RTN","IBCEP5B",101,0)
 G:IB0="" CHGQ
"RTN","IBCEP5B",102,0)
 F Z=.04,.05,.06,.03 S IBOK=$$EDIT(IBFILE,Z,IB0,IBOLD,IBDA,0) S:IBOK="*ALL*" IBOK="" Q:$P(IBOK,U,2)  S $P(IB0,U,Z*100)=$P(IBOK,U)
"RTN","IBCEP5B",103,0)
 I $P(IBOK,U,2) S DIR(0)="EA",DIR("A")="NO CHANGES MADE, PRESS ENTER TO CONTINUE: " W ! D ^DIR K DIR W ! G CHGQ
"RTN","IBCEP5B",104,0)
 S IBOK=$$EDIT(IBFILE,.07,IB0,IBOLD,IBDA,1)
"RTN","IBCEP5B",105,0)
 I '$P(IBOK,U,2) S $P(IB0,U,7)=$P(IBOK,U)
"RTN","IBCEP5B",106,0)
 I $P(IBOK,U,2)!(IB0=IBOLD) S DIR(0)="EA",DIR("A")="NO CHANGES MADE, PRESS ENTER TO CONTINUE: " W ! D ^DIR K DIR W ! G CHGQ
"RTN","IBCEP5B",107,0)
 S IBCUCHK=$$CUCHK^IBCEP5C(IBDA,IB0) G:IBCUCHK CHGQ
"RTN","IBCEP5B",108,0)
 S DR=""
"RTN","IBCEP5B",109,0)
 F Z=2,4:1:7,3 I $P(IB0,U,Z)'=$P(IBOLD,U,Z) S DR=DR_$S(DR'="":";",1:"")_(Z/100)_"///"_$S($P(IB0,U,Z)'="@":"/",1:"")_$P(IB0,U,Z)
"RTN","IBCEP5B",110,0)
 I DR'="" D
"RTN","IBCEP5B",111,0)
 . I IBFILE=355.91!(IBFILE=355.9&($P(IB0,U)["VA(200,")) D
"RTN","IBCEP5B",112,0)
 .. N NEXTONE
"RTN","IBCEP5B",113,0)
 .. S NEXTONE=$$NEXTONE^IBCEP5A()
"RTN","IBCEP5B",114,0)
 .. S ^TMP("IB_EDITED_IDS",$J,NEXTONE)=IBDA_U_"MOD"_U_IBFILE_U_IBDA
"RTN","IBCEP5B",115,0)
 .. S ^TMP("IB_EDITED_IDS",$J,NEXTONE,"OLD0")=IBOLD
"RTN","IBCEP5B",116,0)
 .. S ^TMP("IB_EDITED_IDS",$J,NEXTONE,0)=IB0
"RTN","IBCEP5B",117,0)
 . S DIE="^IBA("_IBFILE_",",DA=IBDA D ^DIE
"RTN","IBCEP5B",118,0)
CHGQ L -^IBA(IBFILE,IBDA)
"RTN","IBCEP5B",119,0)
 Q
"RTN","IBCEP5B",120,0)
 ;
"RTN","IBCEP5B",121,0)
DEL(IBFILE,IBDA,IBF) ; Delete prov specific ID's
"RTN","IBCEP5B",122,0)
 ; IBFILE = 355.9 or 355.91 for the file
"RTN","IBCEP5B",123,0)
 ; IBDA = ien of entry in file IBFILE
"RTN","IBCEP5B",124,0)
 ; IBF = 1 if deleting from ins co-related options, ""
"RTN","IBCEP5B",125,0)
 ;       from prov-related options
"RTN","IBCEP5B",126,0)
 D DEL^IBCEP5C(IBFILE,IBDA,$G(IBF))
"RTN","IBCEP5B",127,0)
 Q
"RTN","IBCEP5B",128,0)
 ;
"RTN","IBCEP5B",129,0)
EDIT(IBFILE,IBFLD,IB0,IBOLD,IBIEN,IBCK1) ; Generic edit flds
"RTN","IBCEP5B",130,0)
 Q $$EDIT^IBCEP5D($G(IBFILE),$G(IBFLD),$G(IB0),$G(IBOLD),$G(IBIEN),$G(IBCK1))
"RTN","IBCEP5B",131,0)
 ;
"RTN","IBCEP5B",132,0)
SETDIR(DIR) ; Sets dir for BLUE CROSS only UB-04 form type
"RTN","IBCEP5B",133,0)
 S DIR("B")="UB-04",$P(DIR(0),U,3)="K:Y'=1 X",DIR("?")="ONLY UB-04 FORM TYPE IS VALID FOR BLUE CROSS ID"
"RTN","IBCEP5B",134,0)
 Q
"RTN","IBCEP5B",135,0)
 ;
"RTN","IBCEP5B",136,0)
ENTER(DIR) ;
"RTN","IBCEP5B",137,0)
 S DIR(0)="EA",DIR("A")="PRESS ENTER TO CONTINUE: "
"RTN","IBCEP5B",138,0)
 Q
"RTN","IBCEP5C")
0^86^B44174252^B44199946
"RTN","IBCEP5C",1,0)
IBCEP5C ;ALB/TMP - EDI UTILITIES for provider ID ;02-NOV-00
"RTN","IBCEP5C",2,0)
 ;;2.0;INTEGRATED BILLING;**137,239,232,320,348,349,592**;21-MAR-94;Build 58
"RTN","IBCEP5C",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEP5C",4,0)
 ;
"RTN","IBCEP5C",5,0)
COMBOK(IBFILE,IBDAT,IBALL,IBF) ; Generic ask if conflict, should id rec still
"RTN","IBCEP5C",6,0)
 ;  be added?
"RTN","IBCEP5C",7,0)
 ; IBFILE = 355.9 or 355.91 for the file being edited
"RTN","IBCEP5C",8,0)
 ; IBDAT = var ptr prov ien (355.9) ^ pc to check ^
"RTN","IBCEP5C",9,0)
 ;           ins co ien or *ALL* ^ care unit or *N/A* ^
"RTN","IBCEP5C",10,0)
 ;           form type code ^ care type code ^ prov id type ptr
"RTN","IBCEP5C",11,0)
 ; IBALL = flag:
"RTN","IBCEP5C",12,0)
 ;   0 = Individual entry selected - check for existing ALL entry
"RTN","IBCEP5C",13,0)
 ;   1 = 'ALL' selected - check for existing individual ones
"RTN","IBCEP5C",14,0)
 ; IBF = 1 if deleting from ins co-related options, ""
"RTN","IBCEP5C",15,0)
 ;       from provider-related options
"RTN","IBCEP5C",16,0)
 ; Returns 1 if ok to continue, 0 if not
"RTN","IBCEP5C",17,0)
 ;
"RTN","IBCEP5C",18,0)
 N X,Y,Q,DIR,Z,IBD,IBDD,IBOK,IBSPEC
"RTN","IBCEP5C",19,0)
 S IBALL=$G(IBALL),IBOK=1
"RTN","IBCEP5C",20,0)
 S IBD=+$P(IBDAT,U,2),IBDD=$S(IBD=4:5,1:4)
"RTN","IBCEP5C",21,0)
 F Z=2:1:6 D
"RTN","IBCEP5C",22,0)
 . I IBD'=Z,$P(IBDAT,U,Z+1)'="" S Z(Z)=$P(IBDAT,U,Z+1) Q
"RTN","IBCEP5C",23,0)
 . I IBD=Z S IBD(Z)=$P(IBDAT,U,Z+1)
"RTN","IBCEP5C",24,0)
 K IBSPEC
"RTN","IBCEP5C",25,0)
 I IBALL D  ; Check for specific
"RTN","IBCEP5C",26,0)
 . N X0,X1
"RTN","IBCEP5C",27,0)
 . S X1=0
"RTN","IBCEP5C",28,0)
 . F  S X1=$O(^IBA(IBFILE,"AC",$S(IBFILE=355.9:Z(6),1:Z(2)),$S(IBFILE=355.9:Z(2),1:Z(6)),$S(IBFILE=355.9:$P(IBDAT,U),1:Z(3)),X1)) Q:'X1  S X0=$G(^IBA(IBFILE,X1,0)) I $S(IBFILE=355.9:$P(X0,U,3)=Z(3),1:1) D
"RTN","IBCEP5C",29,0)
 .. I $P(X0,U,IBD)'=IBD(IBD),"12"[$P(X0,U,IBD),($P(X0,U,IBDD)=Z(IBDD)!($P(X0,U,IBDD)=0)!(Z(IBDD)=0&(IBD(IBD)=0))) S X1($P(X0,U,IBD))=X1 Q
"RTN","IBCEP5C",30,0)
 .. I IBD(IBD)=0,Z(IBDD)=0 S X1(0)=X1
"RTN","IBCEP5C",31,0)
 . S X0=0 F  S X0=$O(X1(X0)) Q:X0=""  D
"RTN","IBCEP5C",32,0)
 .. S IBSPEC=$S($G(IBSPEC)'="":IBSPEC_"  ",1:"")_$P($S(IBD=4:"UB-04^CMS-1500",1:"INPT^OUTPT"),U,X0)_" ONLY"
"RTN","IBCEP5C",33,0)
 . I $D(X1(0)) S IBSPEC=$S($G(IBSPEC)'="":IBSPEC_"  ",1:"")_$S(IBD=4:"BOTH UB-04 and CMS-1500 form type  AND  BOTH INPT and OUTPT care type",1:"BOTH INPT and OUTPT care type  AND  BOTH UB-04 and CMS-1500 form type")
"RTN","IBCEP5C",34,0)
 . ;
"RTN","IBCEP5C",35,0)
 I 'IBALL D
"RTN","IBCEP5C",36,0)
 . N X0,X1
"RTN","IBCEP5C",37,0)
 . S X1=0
"RTN","IBCEP5C",38,0)
 . F  S X1=$O(^IBA(IBFILE,"AC",$S(IBFILE=355.9:Z(6),1:Z(2)),$S(IBFILE=355.9:Z(2),1:Z(6)),$S(IBFILE=355.9:$P(IBDAT,U),1:Z(3)),X1)) Q:'X1  D
"RTN","IBCEP5C",39,0)
 .. S X0=$G(^IBA(IBFILE,X1,0))
"RTN","IBCEP5C",40,0)
 .. I $S(IBFILE=355.9:$P(X0,U,16)=Z(3),1:1),$P(X0,U,IBD)=0,$S($P(X0,U,IBDD)=Z(IBDD):1,1:$P(X0,U,IBDD)=0) S IBSPEC=""
"RTN","IBCEP5C",41,0)
 ;
"RTN","IBCEP5C",42,0)
 I $D(IBSPEC) D
"RTN","IBCEP5C",43,0)
 . N X0,X1,TEXT,IBWHAT
"RTN","IBCEP5C",44,0)
 . S IBWHAT=$S(IBFILE=355.9:$S($G(IBF):"INS CO AND PROVIDER",1:"PROVIDER"),1:"INSURANCE CO")
"RTN","IBCEP5C",45,0)
 . S X0=$S($D(IBD(4)):"UB-04^CMS-1500",1:"INPT^OUTPT")
"RTN","IBCEP5C",46,0)
 . S X1=$S($D(IBD(4)):"FORM TYPE",1:"CARE TYPE")
"RTN","IBCEP5C",47,0)
 . S DIR(0)="YA"
"RTN","IBCEP5C",48,0)
 . S TEXT(1)="WARNING ... POTENTIAL CONFLICT DETECTED!!"
"RTN","IBCEP5C",49,0)
 . S TEXT(2)=" YOUR NEW COMBINATION APPLIES TO "_$S(IBALL:"BOTH "_$S(IBD=4:"FORM ",1:"INPT AND OUTPT CARE ")_"TYPES",1:"ONLY "_$P(X0,U,IBD(IBD))_" "_X1)
"RTN","IBCEP5C",50,0)
 . S TEXT(3)=" THIS SAME COMBINATION ALREADY EXISTS FOR THE "_IBWHAT_" & "_$S('IBALL:"ALL "_X1_"S",1:"SPECIFIC "_X1_"(S):")
"RTN","IBCEP5C",51,0)
 . S:IBSPEC'="" TEXT(4)=$J("",4)_IBSPEC
"RTN","IBCEP5C",52,0)
 . S TEXT($S($D(TEXT(4)):5,1:4))=" "
"RTN","IBCEP5C",53,0)
 . S DIR("A")="ARE YOU SURE YOU STILL WANT TO ADD THIS RECORD?: "
"RTN","IBCEP5C",54,0)
 . S DIR("?",1)=" "
"RTN","IBCEP5C",55,0)
 . S DIR("?",2)="This combination appears to be conflicting with one(s) already on file."
"RTN","IBCEP5C",56,0)
 . S DIR("?",3)="It has already been defined for the "_$$LOW^XLFSTR(IBWHAT)_" for "_$S(IBALL:"at least 1 specific ",1:"ALL ")_$S(IBD=4:"form",1:"care")_" type"_$S(IBALL:".",1:"s.")
"RTN","IBCEP5C",57,0)
 . S DIR("?")="Respond NO to reject this conflicting record or YES to continue on to add it in spite of the apparent conflict.",DIR("B")="NO"
"RTN","IBCEP5C",58,0)
 . W !! F Q=1:1 Q:'$D(TEXT(Q))  W TEXT(Q),!
"RTN","IBCEP5C",59,0)
 . D ^DIR K DIR W !
"RTN","IBCEP5C",60,0)
 . S IBOK=(Y=1)
"RTN","IBCEP5C",61,0)
 Q IBOK
"RTN","IBCEP5C",62,0)
 ;
"RTN","IBCEP5C",63,0)
CAREUN ;Called from NEWID^IBCEP5B to check for existing record combination
"RTN","IBCEP5C",64,0)
 N DIR
"RTN","IBCEP5C",65,0)
 I IBFILE'=355.9 D
"RTN","IBCEP5C",66,0)
 . S IB35591(.03)=IB3559(.03)
"RTN","IBCEP5C",67,0)
 . I "0"[IB35591(.03) S IB35591(.03)="*N/A*"
"RTN","IBCEP5C",68,0)
 . I IB35591(.03)'="*N/A*" S IB35591(.03)=$O(^IBA(355.96,"AUNIQ",IBINS,IB3559(.03),IB3559(.04),IB3559(.05),IBPTYP,"")) I 'IB35591(.03) D
"RTN","IBCEP5C",69,0)
 .. S IB35591(.03)=$O(^IBA(355.96,"AUNIQ",IBINS,IB3559(.03),IB3559(.04),0,IBPTYP,"")) I 'IB35591(.03) D
"RTN","IBCEP5C",70,0)
 ... S IB35591(.03)=$O(^IBA(355.96,"AUNIQ",IBINS,IB3559(.03),0,IB3559(.05),IBPTYP,"")) I 'IB35591(.03) D
"RTN","IBCEP5C",71,0)
 .... S IB35591(.03)=$O(^IBA(355.96,"AUNIQ",IBINS,IB3559(.03),0,0,IBPTYP,""))
"RTN","IBCEP5C",72,0)
 . I $D(^IBA(355.91,"AUNIQ",IBINS,IB35591(.03),IB3559(.04),IB3559(.05),IBPTYP)) D  Q
"RTN","IBCEP5C",73,0)
 .. S DIR(0)="EA",DIR("A",1)="This record already exists - NOT ADDED",DIR("A")="PRESS the ENTER key to continue" W ! D ^DIR K DIR,IB3559,IB35591 W !
"RTN","IBCEP5C",74,0)
 I IBFILE=355.9 D
"RTN","IBCEP5C",75,0)
 . S IB35591(.03)=IB3559(.03)
"RTN","IBCEP5C",76,0)
 . I "0"[IB35591(.03) S IB35591(.03)="*N/A*"
"RTN","IBCEP5C",77,0)
 . I IB35591(.03)'="*N/A*" S IB35591(.03)=$O(^IBA(355.96,"AUNIQ",IBINS,IB3559(.03),IB3559(.04),IB3559(.05),IBPTYP,"")) I 'IB35591(.03) D
"RTN","IBCEP5C",78,0)
 .. S IB35591(.03)=$O(^IBA(355.96,"AUNIQ",IBINS,IB3559(.03),IB3559(.04),0,IBPTYP,"")) I 'IB35591(.03) D
"RTN","IBCEP5C",79,0)
 ... S IB35591(.03)=$O(^IBA(355.96,"AUNIQ",IBINS,IB3559(.03),0,IB3559(.05),IBPTYP,"")) I 'IB35591(.03) D
"RTN","IBCEP5C",80,0)
 .... S IB35591(.03)=$O(^IBA(355.96,"AUNIQ",IBINS,IB3559(.03),0,0,IBPTYP,""))
"RTN","IBCEP5C",81,0)
 . I $D(^IBA(355.9,"AUNIQ",IBPRV,IBINS,IB35591(.03),IB3559(.04),IB3559(.05),IBPTYP)) D  Q
"RTN","IBCEP5C",82,0)
 .. S DIR(0)="EA",DIR("A",1)="This record already exists - NOT ADDED",DIR("A")="PRESS the ENTER key to continue" W ! D ^DIR K DIR,IB3559,IB35591 W !
"RTN","IBCEP5C",83,0)
 Q
"RTN","IBCEP5C",84,0)
 ;
"RTN","IBCEP5C",85,0)
DEL(IBFILE,IBDA,IBF) ; Delete prov specific ID's
"RTN","IBCEP5C",86,0)
 ; IBFILE = 355.9 or 355.91 for the file
"RTN","IBCEP5C",87,0)
 ; IBDA = ien of entry in file IBFILE
"RTN","IBCEP5C",88,0)
 ; IBF = 1 if deleting from ins co-related options, ""
"RTN","IBCEP5C",89,0)
 ;       from prov-related options
"RTN","IBCEP5C",90,0)
 N IB0,IBLAST,IBX,DIK,DA,DIR,X,Y,Z
"RTN","IBCEP5C",91,0)
 F Z=1:1:3 L +^IBA(IBFILE,IBDA):5 Q:$T
"RTN","IBCEP5C",92,0)
 I '$T D  G DELQ
"RTN","IBCEP5C",93,0)
 . W !,"RECORD IS LOCKED BY ANOTHER USER - TRY AGAIN LATER"
"RTN","IBCEP5C",94,0)
 . D ENTER^IBCEP5B(.DIR)
"RTN","IBCEP5C",95,0)
 . W ! D ^DIR K DIR W !
"RTN","IBCEP5C",96,0)
 S IB0=$G(^IBA(IBFILE,IBDA,0))
"RTN","IBCEP5C",97,0)
 S IBX=0
"RTN","IBCEP5C",98,0)
 S IBX=IBX+1,DIR("A",IBX)=" PROVIDER: "_$S(IBFILE=355.9:$$EXPAND^IBTRE(355.9,.01,$P(IB0,U)),1:"*ALL*")
"RTN","IBCEP5C",99,0)
 D DISP^IBCEP4("DIR(""A"")",$P(IB0,U,$S(IBFILE=355.9:2,1:1)),$P(IB0,U,6),$P(IB0,U,4),$P(IB0,U,5),IBX+1,.IBLAST)
"RTN","IBCEP5C",100,0)
 I $P(IB0,U,3)'="" S DIR("A",IBLAST+1)="CARE UNIT: "_$$EXPAND^IBTRE(355.91,.03,$P(IB0,U,3))
"RTN","IBCEP5C",101,0)
 S DIR("A",IBLAST+2)="  PROV ID: "_$P(IB0,U,7),DIR("A",IBLAST+3)=" "
"RTN","IBCEP5C",102,0)
 S DIR("A")="OK TO DELETE THIS "_$S($G(IBF):"INSURANCE COMPANY ",1:"")_"PROVIDER ID RECORD?: ",DIR("B")="NO"
"RTN","IBCEP5C",103,0)
 S DIR(0)="YA"
"RTN","IBCEP5C",104,0)
 W ! D ^DIR K DIR W !
"RTN","IBCEP5C",105,0)
 I Y'=1 G DELQ
"RTN","IBCEP5C",106,0)
 I IBDA>0 D
"RTN","IBCEP5C",107,0)
 . I IBFILE=355.91!(IBFILE=355.9&($P($G(^IBA(IBFILE,IBDA,0)),U)["VA(200,")) D
"RTN","IBCEP5C",108,0)
 .. N NEXTONE S NEXTONE=$$NEXTONE^IBCEP5A()
"RTN","IBCEP5C",109,0)
 .. S ^TMP("IB_EDITED_IDS",$J,NEXTONE)=IBDA_U_"DEL"_U_IBFILE_U_IBDA
"RTN","IBCEP5C",110,0)
 .. S ^TMP("IB_EDITED_IDS",$J,NEXTONE,0)=$G(^IBA(IBFILE,IBDA,0))
"RTN","IBCEP5C",111,0)
 . S DA=IBDA,DIK="^IBA("_IBFILE_"," D ^DIK
"RTN","IBCEP5C",112,0)
DELQ L -^IBA(IBFILE,IBDA)
"RTN","IBCEP5C",113,0)
 Q
"RTN","IBCEP5C",114,0)
 ;
"RTN","IBCEP5C",115,0)
CUCHK(IBDA,IB0) ;Called from CHG^IBCEP5B to check for existing combination
"RTN","IBCEP5C",116,0)
 ; during edit 
"RTN","IBCEP5C",117,0)
 ; IBDA = the ien of the record being edited
"RTN","IBCEP5C",118,0)
 ; IB0 = Proposed changed 0 node of the entry in the file
"RTN","IBCEP5C",119,0)
 ; FUNCTION RETURNS 0 if no duplicate found, 1 if record already exists
"RTN","IBCEP5C",120,0)
 N Z,IBCUCHK,DIR,X,Y
"RTN","IBCEP5C",121,0)
 S IBCUCHK=0
"RTN","IBCEP5C",122,0)
 I IBFILE=355.91 S Z=+$O(^IBA(355.91,"AUNIQ",$P(IB0,U,1),$S($P(IB0,U,3)="@":"*N/A*",$P(IB0,U,3):$P(IB0,U,3),1:$P(IB0,U,10)),$P(IB0,U,4),$P(IB0,U,5),$P(IB0,U,6),0)) I Z,Z'=IBDA S IBCUCHK=1
"RTN","IBCEP5C",123,0)
 I IBFILE=355.9 D
"RTN","IBCEP5C",124,0)
 . N X,X1
"RTN","IBCEP5C",125,0)
 . S X=$S($P(IB0,U,2):$P(IB0,U,2),1:$P(IB0,U,15)) S:X="" X="*ALL*"
"RTN","IBCEP5C",126,0)
 . S X1=$S($P(IB0,U,3):$P(IB0,U,3),$P(IB0,U,3)="@":"",1:$P(IB0,U,16)) S:X1="" X1="*N/A*"
"RTN","IBCEP5C",127,0)
 . S Z=+$O(^IBA(355.9,"AUNIQ",$P(IB0,U,1),X,X1,$P(IB0,U,4),$P(IB0,U,5),$P(IB0,U,6),0)) I Z,Z'=IBDA S IBCUCHK=1
"RTN","IBCEP5C",128,0)
 I IBCUCHK D
"RTN","IBCEP5C",129,0)
 . S DIR(0)="EA",DIR("A",1)="This combination already exists - RECORD NOT CHANGED",DIR("A")="PRESS the ENTER key to continue" W ! D ^DIR K DIR W !
"RTN","IBCEP5C",130,0)
 Q IBCUCHK
"RTN","IBCEP5C",131,0)
 ;
"RTN","IBCEP5D")
0^132^B63033959^B62438221
"RTN","IBCEP5D",1,0)
IBCEP5D ;ALB/JEH - EDI UTILITIES - for State License ;29-MAR-01
"RTN","IBCEP5D",2,0)
 ;;2.0;INTEGRATED BILLING;**137,320,348,349,592**;21-MAR-94;Build 58
"RTN","IBCEP5D",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCEP5D",4,0)
 ;
"RTN","IBCEP5D",5,0)
 ; STATE LICENSE # ADD/EDIT DBIA ==> DBIA 224
"RTN","IBCEP5D",6,0)
EN ;Add/edit state and license number
"RTN","IBCEP5D",7,0)
 N IBDA,DIR,DIC,DD,DA,DR,IBSTAT,IBLIC,IBQ,Y
"RTN","IBCEP5D",8,0)
 D FULL^VALM1
"RTN","IBCEP5D",9,0)
 I '$G(IBPRV) D  G:IBQ STATQ
"RTN","IBCEP5D",10,0)
 . S IBQ=0
"RTN","IBCEP5D",11,0)
 . S DIC="^VA(200,",DIC(0)="AEMQ",DIC("A")="Select VA Provider: " D ^DIC K DIC
"RTN","IBCEP5D",12,0)
 . I $D(DTOUT)!$D(DUOUT)!(Y<0) S IBQ=1 Q
"RTN","IBCEP5D",13,0)
 . S IBDA=+Y
"RTN","IBCEP5D",14,0)
 I $G(IBPRV)["VA" S IBDA=+IBPRV
"RTN","IBCEP5D",15,0)
 I $G(IBPRV),$G(IBPRV)'["VA" D  G STATQ
"RTN","IBCEP5D",16,0)
 . S DIR("A",1)="You have selected a Non-VA provider"
"RTN","IBCEP5D",17,0)
 . S DIR("A",2)="State license # can only be entered for VA providers"
"RTN","IBCEP5D",18,0)
 . S DIR("A",3)=""
"RTN","IBCEP5D",19,0)
 . S DIR("A")="Press enter to continue"
"RTN","IBCEP5D",20,0)
 . S DIR(0)="EA" W ! D ^DIR K DIR W !
"RTN","IBCEP5D",21,0)
STALIC ;Add/edit file 200 field 54.1 multiple,state(.01) and license#(1) - DBIA 224
"RTN","IBCEP5D",22,0)
 ;
"RTN","IBCEP5D",23,0)
 S DA(1)=IBDA,DIC="^VA(200,"_DA(1)_",""PS1"",",DIC(0)="QEAL"
"RTN","IBCEP5D",24,0)
 D ^DIC I Y=-1 K DIC,DA G STATQ
"RTN","IBCEP5D",25,0)
 F Z=1:1:3 L +^VA(200,IBDA):5 Q:$T
"RTN","IBCEP5D",26,0)
 I '$T D  G STATQ
"RTN","IBCEP5D",27,0)
 . W !,"Another user is editing this entry.  Try again later"
"RTN","IBCEP5D",28,0)
 . S DIR(0)="EA",DIR("A")="Press enter to continue"
"RTN","IBCEP5D",29,0)
 . W ! D ^DIR K DIR W !
"RTN","IBCEP5D",30,0)
 S DIE=DIC K DIC S DA=+Y,DR=".01;1"
"RTN","IBCEP5D",31,0)
 D ^DIE K DIE,DR,DA,Y
"RTN","IBCEP5D",32,0)
 L -^VA(200,IBDA)
"RTN","IBCEP5D",33,0)
STATQ ;
"RTN","IBCEP5D",34,0)
 S VALMBCK="R"
"RTN","IBCEP5D",35,0)
 Q
"RTN","IBCEP5D",36,0)
 ;
"RTN","IBCEP5D",37,0)
GETLIC(IBPRV) ; Get license # for provider in file 200 IBPRV
"RTN","IBCEP5D",38,0)
 ; Pass IBPRV by reference to retrieve #'s by state
"RTN","IBCEP5D",39,0)
 ; IBPRV(state ien)=id
"RTN","IBCEP5D",40,0)
 ; Returns 0 if no license # found
"RTN","IBCEP5D",41,0)
 N Z
"RTN","IBCEP5D",42,0)
 S Z=0 F  S Z=$O(^VA(200,IBPRV,"PS1",Z)) Q:'Z  S Z0=$G(^(Z,0)) I $P(Z0,U,2)'="" S IBPRV(+Z0)=$P(Z0,U,2)
"RTN","IBCEP5D",43,0)
 Q +$O(IBPRV(0))
"RTN","IBCEP5D",44,0)
 ;
"RTN","IBCEP5D",45,0)
EDIT(IBFILE,IBFLD,IB0,IBOLD,IBIEN,IBCK1) ; Generic edit flds
"RTN","IBCEP5D",46,0)
 N DIR,Y,X,IB,IB1,IBCUVAL,IBCUY,IBFLD0,IBNEW,IBPRV,IBVAL,IBIVAL,IBINS,IBCUCHK,IBOK,DUOUT,DTOUT
"RTN","IBCEP5D",47,0)
 I IBFILE=355.91,IBFLD=.02 S IBNEW="" G EDITQ ; No .02 in file 355.91
"RTN","IBCEP5D",48,0)
 S IBCUCHK=1,IBCUVAL=""
"RTN","IBCEP5D",49,0)
 S IBFLD0=IBFLD*100,IBPRV=$S(IBFILE=355.9:$P(IB0,U),1:""),IBNEW=""
"RTN","IBCEP5D",50,0)
 S IBPRV0=$S(IBPRV'["355.93":"",1:$G(^IBA(355.93,+IBPRV,0)))
"RTN","IBCEP5D",51,0)
 S IBINS=$P(IB0,U,$S(IBFILE=355.9:2,1:1))
"RTN","IBCEP5D",52,0)
 I IBFLD'=.03 S IBVAL=$$EXPAND^IBTRE(IBFILE,IBFLD,$P(IB0,U,IBFLD0)),IBIVAL=$P(IB0,U,IBFLD0)
"RTN","IBCEP5D",53,0)
 I IBFLD=.03,$S('IBINS:1,1:'$$CAREUN^IBCEP3(IBINS,$P(IB0,U,6),$P(IB0,U,4),$P(IB0,U,5),$P(IB0,U,5)=3)) S:$P(IB0,U,3) IBNEW="@" G EDITQ
"RTN","IBCEP5D",54,0)
 I IBFLD=.03 S IBVAL=$P($G(^IBA(355.95,+$G(^IBA(355.96,+$P(IB0,U,3),0)),0)),U),IBIVAL=$P(IB0,U,3) D
"RTN","IBCEP5D",55,0)
 . S IBCUCHK=0,IBCUVAL=$P($G(^IBA(355.96,+IBIVAL,0)),U,1) I IBCUVAL="" Q
"RTN","IBCEP5D",56,0)
 . I $O(^IBA(355.96,"AUNIQ",IBINS,IBCUVAL,$P(IB0,U,4),$P(IB0,U,5),$P(IB0,U,6),"")) S IBCUCHK=1 Q
"RTN","IBCEP5D",57,0)
 . I $O(^IBA(355.96,"AUNIQ",IBINS,IBCUVAL,$P(IB0,U,4),0,$P(IB0,U,6),""))  S IBCUCHK=1 Q
"RTN","IBCEP5D",58,0)
 . I $O(^IBA(355.96,"AUNIQ",IBINS,IBCUVAL,0,$P(IB0,U,5),$P(IB0,U,6),"")) S IBCUCHK=1 Q
"RTN","IBCEP5D",59,0)
 . I $O(^IBA(355.96,"AUNIQ",IBINS,IBCUVAL,0,0,$P(IB0,U,6),"")) S IBCUCHK=1 Q
"RTN","IBCEP5D",60,0)
 . S IBIVAL="@"
"RTN","IBCEP5D",61,0)
 ;
"RTN","IBCEP5D",62,0)
 I IBFLD'=.02 D
"RTN","IBCEP5D",63,0)
 . N DA
"RTN","IBCEP5D",64,0)
 . S DIR(0)=$S(IBFLD'=.03:IBFILE_","_IBFLD_"AO",1:"PAO^355.95:AEMQ")
"RTN","IBCEP5D",65,0)
 . I IBFLD=.03 D  Q:$P(IB0,U,4)=""!($P(IB0,U,5)="")!($P(IB0,U,6)="")
"RTN","IBCEP5D",66,0)
 .. S DIR("A")="CARE UNIT: "
"RTN","IBCEP5D",67,0)
 .. S DIR("S")="I $D(^IBA(355.96,""AUNIQ"",IBINS,Y,$P(IB0,U,4),$P(IB0,U,5),$P(IB0,U,6)))!($D(^IBA(355.96,""AUNIQ"",IBINS,Y,$P(IB0,U,4),0,$P(IB0,U,6))))"
"RTN","IBCEP5D",68,0)
 .. S DIR("S")=DIR("S")_"!($D(^IBA(355.96,""AUNIQ"",IBINS,Y,0,$P(IB0,U,5),$P(IB0,U,6))))!($D(^IBA(355.96,""AUNIQ"",IBINS,Y,0,0,$P(IB0,U,6))))"
"RTN","IBCEP5D",69,0)
 . I IBFLD'=.03 S DIR("A")=$$GET1^DID(IBFILE,IBFLD,,"LABEL")_": "
"RTN","IBCEP5D",70,0)
 . S:IBVAL'=""&(IBCUCHK) DIR("A")=DIR("A")_IBVAL_"// "
"RTN","IBCEP5D",71,0)
 .; If field .04, Set DIR(0)[3] up to make sure the form type selected is allowed for this ID type.
"RTN","IBCEP5D",72,0)
 . I Z=.04,IBPRV["355.93",$$GET1^DIQ(355.93,+IBPRV,.02,"I")=1 D
"RTN","IBCEP5D",73,0)
 .. I $$GET1^DIQ(355.97,$P(IB0,U,6),.03,"I")="EI" S $P(DIR(0),U,3)="K:Y'=1 X",DIR("?")="Provider ID Qualifier selected only allows institutional (UB type) forms" Q
"RTN","IBCEP5D",74,0)
 .. I $$GET1^DIQ(355.97,$P(IB0,U,6),.03,"I")="TJ" S $P(DIR(0),U,3)="K:Y'=2 X",DIR("?")="Provider ID Qualifier selected only allows professional (CMS-1500) forms" Q
"RTN","IBCEP5D",75,0)
 .. N AFT
"RTN","IBCEP5D",76,0)
 .. S AFT=$$GET1^DIQ(355.97,$P(IB0,U,6),.07,"I")  ; get allowable form type for this Provider ID Type
"RTN","IBCEP5D",77,0)
 .. I AFT="B" S $P(DIR(0),U,3)="K:"".0.1.2.""'[("".""_X_""."") X",DIR("?")="Provider ID Qualifier selected allows institutional, professional or both" Q   ; allow proff, inst, or both
"RTN","IBCEP5D",78,0)
 .. I AFT="I" S $P(DIR(0),U,3)="K:X'=1 X",DIR("?")="Provider ID Qualifier selected only allows institutional (UB type) forms" Q  ; allow institutional
"RTN","IBCEP5D",79,0)
 .. I AFT="P" S $P(DIR(0),U,3)="K:X'=2 X",DIR("?")="Provider ID Qualifier selected only allows professional (CMS-1500) forms" Q  ; allow professional
"RTN","IBCEP5D",80,0)
 . ;
"RTN","IBCEP5D",81,0)
 . ; field .06 (ID qualifier)
"RTN","IBCEP5D",82,0)
 . I Z=.06 D   ;,IBPRV["355.93" D
"RTN","IBCEP5D",83,0)
 .. S DIR(0)="PAOr^355.97:AEMQ"
"RTN","IBCEP5D",84,0)
 .. ;JWS'IB*2.0*592 - corrected spelling error
"RTN","IBCEP5D",85,0)
 .. S DIR("?")="Enter a Qualifier to identify the type of ID number you are entering."
"RTN","IBCEP5D",86,0)
 .. N TAG
"RTN","IBCEP5D",87,0)
 .. S TAG=$S($G(IBSLEV)=1&($$GET1^DIQ(355.93,+IBPRV,.02,"I")=1):"NVALFOWN",$G(IBSLEV)=1:"RAOWN",$$GET1^DIQ(355.93,+IBPRV,.02,"I")=1:"LFINS",1:"RAINS")
"RTN","IBCEP5D",88,0)
 .. N AFT
"RTN","IBCEP5D",89,0)
 .. S AFT=$S($P(IB0,U,4)]"":$P(IB0,U,4),1:$P(IBOLD,U,4))
"RTN","IBCEP5D",90,0)
 .. D
"RTN","IBCEP5D",91,0)
 ... I AFT=1 S DIR("S")="I $$"_TAG_"^IBCEPU(Y),$$GET1^DIQ(355.97,+Y,.07,""I"")'=""P""",DIR("?")="Provider ID Qualifier selected only allows institutional (UB type) forms" Q
"RTN","IBCEP5D",92,0)
 ... I AFT=2 S DIR("S")="I $$"_TAG_"^IBCEPU(Y),$$GET1^DIQ(355.97,+Y,.07,""I"")'=""I""",DIR("?")="Provider ID Qualifier selected only allows professional (CMS-1500) forms" Q
"RTN","IBCEP5D",93,0)
 ... S DIR("S")="I $$"_TAG_"^IBCEPU(Y)"
"RTN","IBCEP5D",94,0)
 .. I $$GET1^DIQ(355.93,+IBPRV,.02,"I")=1 D
"RTN","IBCEP5D",95,0)
 ... I AFT=1 S DIR("S")=DIR("S")_",$$GET1^DIQ(355.97,+Y,.03)'=""TJ""" Q
"RTN","IBCEP5D",96,0)
 ... I AFT=2 S DIR("S")=DIR("S")_",$$GET1^DIQ(355.97,+Y,.03)'=""EI""" Q
"RTN","IBCEP5D",97,0)
 ... I 'AFT S DIR("S")=DIR("S")_","".EI.TJ.""'[("".""_$$GET1^DIQ(355.97,+Y,.03)_""."")" Q
"RTN","IBCEP5D",98,0)
 . ;
"RTN","IBCEP5D",99,0)
 . S DA=0
"RTN","IBCEP5D",100,0)
 . F  D ^DIR S IBOK=0 D  Q:IBOK
"RTN","IBCEP5D",101,0)
 .. I $D(DUOUT)!$D(DTOUT) S IBOK=1 Q
"RTN","IBCEP5D",102,0)
 .. I X="",$P(IB0,U,(IBFLD*100))'="" S (X,Y)=$P(IB0,U,(IBFLD*100))
"RTN","IBCEP5D",103,0)
 .. I IBFLD=.06,$P(IB0,U,4)'=1,$P($G(^IBE(355.97,$S(+Y:+Y,1:+$P(IB0,U,6)),0)),U,3)="1A" W !,"BLUE CROSS IS ONLY ALLOWED FOR UB-04 ONLY" Q
"RTN","IBCEP5D",104,0)
 .. S IBOK=1
"RTN","IBCEP5D",105,0)
 . K DIR
"RTN","IBCEP5D",106,0)
 . I IBFLD=.03,'$D(DTOUT),'$D(DUOUT) D  S Y=IBCUY
"RTN","IBCEP5D",107,0)
 .. S IBCUVAL=+$G(^IBA(355.96,+Y,0))
"RTN","IBCEP5D",108,0)
 .. S IBCUY=+$O(^IBA(355.96,"AUNIQ",IBINS,IBCUVAL,$P(IB0,U,4),$P(IB0,U,5),$P(IB0,U,6),0))
"RTN","IBCEP5D",109,0)
 .. I 'IBCUY S IBCUY=+$O(^IBA(355.96,"AUNIQ",IBINS,IBCUVAL,$P(IB0,U,4),0,$P(IB0,U,6),0))
"RTN","IBCEP5D",110,0)
 .. I 'IBCUY S IBCUY=+$O(^IBA(355.96,"AUNIQ",IBINS,IBCUVAL,0,$P(IB0,U,5),$P(IB0,U,6),0))
"RTN","IBCEP5D",111,0)
 .. I 'IBCUY S IBCUY=+$O(^IBA(355.96,"AUNIQ",IBINS,IBCUVAL,0,0,$P(IB0,U,6),0))
"RTN","IBCEP5D",112,0)
 .. I 'IBCUY S IBCUY="@"
"RTN","IBCEP5D",113,0)
 . I IBIVAL'="",IBCUCHK,($P(Y,U)=IBIVAL!(X="")) S IBNEW=IBIVAL Q
"RTN","IBCEP5D",114,0)
 . I 'IBCUCHK,X="" S IBNEW=IBIVAL Q
"RTN","IBCEP5D",115,0)
 . I X'="@",($S(X="":IBIVAL'="",1:0)!$D(DTOUT)!$D(DUOUT)) S IBNEW="^1" Q
"RTN","IBCEP5D",116,0)
 . S IBNEW=$S(X'="@":$P(Y,U),1:X)
"RTN","IBCEP5D",117,0)
 . I IBFLD=.03,X="" S IBNEW="" ; No care unit selected
"RTN","IBCEP5D",118,0)
 I IBFLD=.02 D  ; Only file 355.9
"RTN","IBCEP5D",119,0)
 . N DIR,X,Y,DIC,DA,IBIT
"RTN","IBCEP5D",120,0)
 . S IBIT=$$GET1^DID(355.9,.02,,"INPUT TRANSFORM")
"RTN","IBCEP5D",121,0)
 . S DIR(0)="FAO^1:30"
"RTN","IBCEP5D",122,0)
 . S DIR("A")="INSURANCE CO: "_$S(IBVAL'="":IBVAL_"// ",1:" "),DIR("?")="^N IBHELP,Z D HELP^DIE(355.9,,.02,""A"",""IBHELP"") S Z=0 F  S Z=$O(IBHELP(""DIHELP"",Z)) Q:'Z  W !,IBHELP(""DIHELP"",Z)"
"RTN","IBCEP5D",123,0)
 . F  W ! D ^DIR D  I IBNEW'="" K DIR Q
"RTN","IBCEP5D",124,0)
 .. I $D(DTOUT)!$D(DUOUT) S IBNEW="^1" Q
"RTN","IBCEP5D",125,0)
 .. I IBIVAL'="",($P(Y,U)=IBIVAL!(X="")) S IBNEW=IBIVAL Q
"RTN","IBCEP5D",126,0)
 .. I X="@" S IBNEW="@" Q
"RTN","IBCEP5D",127,0)
 .. I X="",IBIVAL="" S IBNEW="*ALL*" Q
"RTN","IBCEP5D",128,0)
 .. S DIC="^DIC(36,",DIC(0)="EMQ",DIC("S")="X IBIT I $D(X)" D ^DIC
"RTN","IBCEP5D",129,0)
 .. I Y>0 S IBNEW=$P(Y,U) Q
"RTN","IBCEP5D",130,0)
 .. S Y="",IBNEW="^1"
"RTN","IBCEP5D",131,0)
 G:IBNEW="^1"!(IBNEW=IBIVAL)!(IBFLD=.07) EDITQ
"RTN","IBCEP5D",132,0)
 I $G(IBCK1) D
"RTN","IBCEP5D",133,0)
 . N X1,X2,X3,X4,X5,X6
"RTN","IBCEP5D",134,0)
 . S X1=$S(IBFILE=355.9:$S(IBFLD'=.01:IBPRV,1:IBNEW),1:"")
"RTN","IBCEP5D",135,0)
 . S X2=$S(IBFILE=355.9:$S(IBFLD'=.02:$P(IB0,U,2),1:IBNEW),1:$S(IBFLD'=.01:$P(IB0,U),1:IBNEW))
"RTN","IBCEP5D",136,0)
 . S X3=$S(IBFLD'=.03:$P(IB0,U,3),1:IBNEW),X4=$S(IBFLD'=.04:$P(IB0,U,4),1:IBNEW),X5=$S(IBFLD'=.05:$P(IB0,U,5),1:IBNEW),X6=$S(IBFLD'=.06:$P(IB0,U,6),1:IBNEW)
"RTN","IBCEP5D",137,0)
 . I X2="" S X2="*ALL*"
"RTN","IBCEP5D",138,0)
 . I X3="" S X3="*N/A*"
"RTN","IBCEP5D",139,0)
 . I IBFILE=355.9,$S(X4=""!(X5="")!(X6=""):1,$O(^IBA(355.9,"AUNIQ",X1,X2,X3,X4,X5,X6,0)):$O(^(0))'=IBIEN,1:0) S IBNEW=IBNEW_"^2" Q
"RTN","IBCEP5D",140,0)
 . I IBFILE=355.91,$S(X4=""!(X5="")!(X6=""):1,$O(^IBA(355.91,"AUNIQ",X2,X3,X4,X5,X6,0)):$O(^(0))'=IBIEN,1:0) S IBNEW=IBNEW_"^2" Q
"RTN","IBCEP5D",141,0)
 . F IB=2,3 D  Q:$P(IBNEW,U,3)=3
"RTN","IBCEP5D",142,0)
 .. S IB1=(X2="*ALL*"!(X3="*N/A*"))
"RTN","IBCEP5D",143,0)
 .. I IBFILE=355.9,IB=2,$S($P(IBOLD,U,2)="":X2'="*ALL*",1:$P(IBOLD,U,2)'=X2) S X2=""
"RTN","IBCEP5D",144,0)
 .. I IB=3,$S($P(IBOLD,U,3)="":X3'="*N/A*",1:$P(IBOLD,U,3)'=X3) S X3=""
"RTN","IBCEP5D",145,0)
 .. I '$$COMBOK^IBCEP5C(IBFILE,IBPRV_U_(IBFLD*100)_U_X2_U_X3_U_X4_U_X5_U_X6,IB1) S IBNEW="^3"
"RTN","IBCEP5D",146,0)
 ;
"RTN","IBCEP5D",147,0)
EDITQ Q IBNEW
"RTN","IBCEP7")
0^49^B48990711^B49016405
"RTN","IBCEP7",1,0)
IBCEP7 ;ALB/TMP - Functions for fac level PROVIDER ID MAINT ;11-07-00
"RTN","IBCEP7",2,0)
 ;;2.0;INTEGRATED BILLING;**137,232,320,348,349,592**;21-MAR-94;Build 58
"RTN","IBCEP7",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEP7",4,0)
 ;
"RTN","IBCEP7",5,0)
HDR ; -- hdr code
"RTN","IBCEP7",6,0)
 I '$D(^TMP("IBCE_PRVFAC_MAINT",$J)) D INIT
"RTN","IBCEP7",7,0)
 N IBINS,PCF,PCDISP,IBPARAM,IBEFTFL
"RTN","IBCEP7",8,0)
 K VALMHDR
"RTN","IBCEP7",9,0)
 S IBPARAM=$G(^TMP("IBCE_PRVFAC_MAINT_INS",$J))
"RTN","IBCEP7",10,0)
 S IBEFTFL=$P(IBPARAM,U)  ; Electronic Form type flag
"RTN","IBCEP7",11,0)
 S IBINS=+$P(IBPARAM,U,2)  ; Insurance co
"RTN","IBCEP7",12,0)
 S PCF=$P($G(^DIC(36,+IBINS,3)),U,13),PCDISP=$S(PCF="P":"(Parent)",1:"")
"RTN","IBCEP7",13,0)
 S VALMHDR(1)="Insurance Co: "_$P($G(^DIC(36,+IBINS,0)),U)_PCDISP
"RTN","IBCEP7",14,0)
 S VALMHDR(1)=VALMHDR(1)_$S(IBEFTFL="E":"   Billing Provider Secondary IDs",IBEFTFL="A":"   Additional Billing Provider Sec. IDs",IBEFTFL="LF":"   VA-Lab/Facility Secondary IDs",1:"")
"RTN","IBCEP7",15,0)
 I IBEFTFL="LF" S VALMHDR(2)="VA-Lab/Facility Primary ID: Federal Tax ID"
"RTN","IBCEP7",16,0)
 Q
"RTN","IBCEP7",17,0)
 ;
"RTN","IBCEP7",18,0)
INIT ; Initialize
"RTN","IBCEP7",19,0)
 N IBCT,IBD,Z,Z0,Z00,Z1,IBS,IBX,IBDIV,IBEFTFL,IBINS,IBPARAM,IBLCT,IBCU
"RTN","IBCEP7",20,0)
 K ^TMP("IBCE_PRVFAC_MAINT",$J)
"RTN","IBCEP7",21,0)
 S (IBLCT,IBCT)=0
"RTN","IBCEP7",22,0)
 S IBPARAM=$G(^TMP("IBCE_PRVFAC_MAINT_INS",$J))
"RTN","IBCEP7",23,0)
 S IBEFTFL=$P(IBPARAM,U)  ; Electronic Form type flag
"RTN","IBCEP7",24,0)
 S IBINS=+$P(IBPARAM,U,2)  ; Insurance co
"RTN","IBCEP7",25,0)
 ;
"RTN","IBCEP7",26,0)
 I IBEFTFL="A" D
"RTN","IBCEP7",27,0)
 . K VALM("PROTOCOL")
"RTN","IBCEP7",28,0)
 . S Y=$$FIND1^DIC(101,,,"IBCE PRVFAC ADDIDS MAINT")
"RTN","IBCEP7",29,0)
 . I Y S VALM("PROTOCOL")=+Y_";ORD(101,"
"RTN","IBCEP7",30,0)
 ;
"RTN","IBCEP7",31,0)
 I IBEFTFL="LF" D
"RTN","IBCEP7",32,0)
 . S VALM("TITLE")="VA-Lab/Facility IDs"
"RTN","IBCEP7",33,0)
 . K VALM("PROTOCOL")
"RTN","IBCEP7",34,0)
 . S Y=$$FIND1^DIC(101,,,"IBCE PRVFAC VALF MAINT")
"RTN","IBCEP7",35,0)
 . I Y S VALM("PROTOCOL")=+Y_";ORD(101,"
"RTN","IBCEP7",36,0)
 ;
"RTN","IBCEP7",37,0)
 ; Compile the appropriate list of IDs
"RTN","IBCEP7",38,0)
 S Z=0 F  S Z=$O(^IBA(355.92,"B",IBINS,Z)) Q:'Z  D
"RTN","IBCEP7",39,0)
 . S Z0=$G(^IBA(355.92,Z,0))
"RTN","IBCEP7",40,0)
 . Q:'$P(Z0,U,6)!($P(Z0,U,7)="")  ; Quit if no provider id or id type
"RTN","IBCEP7",41,0)
 . Q:'($P(Z0,U,8)=IBEFTFL)
"RTN","IBCEP7",42,0)
 . ;Q:$S($P(IBPARAM,U,3)=1:'$P($G(^IBE(355.97,+$P(Z0,U,6),1)),U,9),1:$P($G(^IBE(355.97,+$P(Z0,U,6),1)),U,9))
"RTN","IBCEP7",43,0)
 . S Z1=$G(^IBE(355.97,+$P(Z0,U,6),0))
"RTN","IBCEP7",44,0)
 . S IBS(+$P(Z0,U,5),+$P(Z0,U,3),+$P(Z1,U,2)_";"_Z,$P(Z1,U))=+$P(Z0,U,6)_U_$P(Z0,U,7)_U_Z
"RTN","IBCEP7",45,0)
 ;
"RTN","IBCEP7",46,0)
 S IBD="" F  S IBD=$O(IBS(IBD)) Q:IBD=""  D
"RTN","IBCEP7",47,0)
 . D:IBCT SET1(.IBLCT," ",IBCT+1)
"RTN","IBCEP7",48,0)
 . D SET1(.IBLCT,"Division: "_$$DIV(IBD),IBCT+1)
"RTN","IBCEP7",49,0)
 . S IBCU="" F  S IBCU=$O(IBS(IBD,IBCU)) Q:IBCU=""  D
"RTN","IBCEP7",50,0)
 .. I IBCU D SET1(.IBLCT,"  Care Unit: "_$$EXTERNAL^DILFD(355.92,.03,"",IBCU),IBCT+1)
"RTN","IBCEP7",51,0)
 .. S Z="" F  S Z=$O(IBS(IBD,IBCU,Z),-1) Q:Z=""  D
"RTN","IBCEP7",52,0)
 ... S Z0="" F  S Z0=$O(IBS(IBD,IBCU,Z,Z0)) Q:Z0=""  S IBX=IBS(IBD,IBCU,Z,Z0) D
"RTN","IBCEP7",53,0)
 .... S IBCT=IBCT+1
"RTN","IBCEP7",54,0)
 .... I $P(Z,";",2) D  Q
"RTN","IBCEP7",55,0)
 ..... S Z00=$G(^IBA(355.92,+$P(Z,";",2),0))
"RTN","IBCEP7",56,0)
 ..... S Z1=$E(IBCT_$J("",3),1,3)_"  "_$E(Z0_$J("",25),1,25)_"   "_$E($S($P(IBX,U,2)'="":$P(IBX,U,2),1:$$IDNUM^IBCEP7A(+IBX))_$J("",15),1,15)_"  "_$P("BOTH^UB04^1500^RX",U,$P(Z00,U,4)+1)
"RTN","IBCEP7",57,0)
 ..... D SET1(.IBLCT,Z1,IBCT)
"RTN","IBCEP7",58,0)
 ..... S ^TMP("IBCE_PRVFAC_MAINT",$J,"ZIDX",IBCT)=+$P(Z,";",2)
"RTN","IBCEP7",59,0)
 ;
"RTN","IBCEP7",60,0)
 I 'IBLCT D
"RTN","IBCEP7",61,0)
 . D SET1(1," ")
"RTN","IBCEP7",62,0)
 . N TEXT
"RTN","IBCEP7",63,0)
 . I IBEFTFL="E" S TEXT="No Billing Provider Secondary IDs found"
"RTN","IBCEP7",64,0)
 . I IBEFTFL="A" S TEXT="No Billing Provider Additional IDs found"
"RTN","IBCEP7",65,0)
 . I IBEFTFL="LF" S TEXT="No VA Lab/Facility IDs found"
"RTN","IBCEP7",66,0)
 . D SET1(2,TEXT)
"RTN","IBCEP7",67,0)
 . S IBLCT=2
"RTN","IBCEP7",68,0)
 S VALMBG=1,VALMCNT=IBLCT
"RTN","IBCEP7",69,0)
 Q
"RTN","IBCEP7",70,0)
 ;
"RTN","IBCEP7",71,0)
SET1(IBLCT,TEXT,IBCT) ;
"RTN","IBCEP7",72,0)
 S IBLCT=IBLCT+1 D SET^VALM10(IBLCT,TEXT,$G(IBCT))
"RTN","IBCEP7",73,0)
 Q
"RTN","IBCEP7",74,0)
 ;
"RTN","IBCEP7",75,0)
DIV(IBD) ; Returns 'ALL/DEFAULT' or div NAME whose ien=IBD
"RTN","IBCEP7",76,0)
 N MAIN
"RTN","IBCEP7",77,0)
 I IBD Q $$EXTERNAL^DILFD(355.92,.05,"",IBD)
"RTN","IBCEP7",78,0)
 S MAIN=$$MAIN^IBCEP2B()
"RTN","IBCEP7",79,0)
 S MAIN=$$EXTERNAL^DILFD(355.92,.05,"",MAIN)
"RTN","IBCEP7",80,0)
 S MAIN=MAIN_"/Default for All Divisions"
"RTN","IBCEP7",81,0)
 Q MAIN
"RTN","IBCEP7",82,0)
 ;
"RTN","IBCEP7",83,0)
EDIT1 ;
"RTN","IBCEP7",84,0)
 N IBFUNC,IBINS,IBDA,Z,DIR,X,Y,DTOUT,DUOUT,DP,IBPARAM,IBEFTFL
"RTN","IBCEP7",85,0)
 D FULL^VALM1
"RTN","IBCEP7",86,0)
 S IBPARAM=$G(^TMP("IBCE_PRVFAC_MAINT_INS",$J))
"RTN","IBCEP7",87,0)
 S IBEFTFL=$P(IBPARAM,U)  ; Electronic Form type flag
"RTN","IBCEP7",88,0)
 S IBINS=+$P(IBPARAM,U,2)  ; Insurance co
"RTN","IBCEP7",89,0)
 S IBFUNC="E"
"RTN","IBCEP7",90,0)
 D SEL
"RTN","IBCEP7",91,0)
 I $G(IBDA) S Z=$$EDITFAC(IBDA,IBFUNC,IBEFTFL) I Z D INIT
"RTN","IBCEP7",92,0)
 ;
"RTN","IBCEP7",93,0)
EDIT1Q S VALMBCK="R"
"RTN","IBCEP7",94,0)
 Q
"RTN","IBCEP7",95,0)
EXPND ;
"RTN","IBCEP7",96,0)
 Q
"RTN","IBCEP7",97,0)
HELP ;
"RTN","IBCEP7",98,0)
 Q
"RTN","IBCEP7",99,0)
EXIT ;
"RTN","IBCEP7",100,0)
 N IBPARAM,IBEFTFL
"RTN","IBCEP7",101,0)
 S IBPARAM=$G(^TMP("IBCE_PRVFAC_MAINT_INS",$J))
"RTN","IBCEP7",102,0)
 S IBEFTFL=$P(IBPARAM,U)  ; Electronic Form type flag
"RTN","IBCEP7",103,0)
 I IBEFTFL="A" D COPYPROV^IBCEP5A(0)
"RTN","IBCEP7",104,0)
 ;
"RTN","IBCEP7",105,0)
 S (IBLCT,IBCT)=0
"RTN","IBCEP7",106,0)
 K ^TMP("IBCE_PRVFAC_MAINT",$J),^TMP("IBCE_PRVFAC_MAINT_INS",$J)
"RTN","IBCEP7",107,0)
 D CLEAN^VALM10
"RTN","IBCEP7",108,0)
 Q
"RTN","IBCEP7",109,0)
SEL ;
"RTN","IBCEP7",110,0)
 N Z
"RTN","IBCEP7",111,0)
 K IBDA
"RTN","IBCEP7",112,0)
 D FULL^VALM1,EN^VALM2($G(XQORNOD(0)),"OS")
"RTN","IBCEP7",113,0)
 S Z=+$O(VALMY(0)) Q:'Z
"RTN","IBCEP7",114,0)
 ; fac/ins co default
"RTN","IBCEP7",115,0)
 S IBDA=$G(^TMP("IBCE_PRVFAC_MAINT",$J,"ZIDX",Z))
"RTN","IBCEP7",116,0)
 Q
"RTN","IBCEP7",117,0)
 ;
"RTN","IBCEP7",118,0)
EDITFAC(IBDA,IBFUNC,IBEFTFL) ; edits ins co facility id (355.92), entry IBDA
"RTN","IBCEP7",119,0)
 N IBRBLD,Z,Z0,DIK,DIE,DP,DA,DR,DIR,X,Y,IBDA0,IBDIV,IBITYP,IBFORM,IBCAREUN,NEXTONE
"RTN","IBCEP7",120,0)
 S IBRBLD=0 S:$G(IBDA) IBDA0=$G(^IBA(355.92,+IBDA,0))
"RTN","IBCEP7",121,0)
 ; "E"diting 355.92 entry
"RTN","IBCEP7",122,0)
 I IBFUNC="E" D
"RTN","IBCEP7",123,0)
 . S Z0=$TR(IBDA0,U)
"RTN","IBCEP7",124,0)
 . Q:'$$FACFLDS^IBCEP7C(IBDA,IBINS,.IBITYP,.IBFORM,.IBDIV,"E",.IBCAREUN,IBEFTFL)
"RTN","IBCEP7",125,0)
 . S DIE="^IBA(355.92,",DA=IBDA
"RTN","IBCEP7",126,0)
 . S DR=".03////"_$S($G(IBCAREUN)]""&($G(IBCAREUN)'="*N/A*"):IBCAREUN,1:"")_";.04////"_IBFORM_$S(IBDIV:";.05////"_IBDIV,1:"")_";.06////"_IBITYP_";"
"RTN","IBCEP7",127,0)
 . S DR=DR_".07"_$S(IBEFTFL="E"!(IBEFTFL="A"):"Billing Provider Secondary ID",1:"VA Lab or Facility Secondary ID")
"RTN","IBCEP7",128,0)
 . I IBEFTFL="A" D
"RTN","IBCEP7",129,0)
 .. S NEXTONE=$$NEXTONE()
"RTN","IBCEP7",130,0)
 .. S ^TMP("IB_EDITED_IDS",$J,NEXTONE)=IBDA_U_"MOD"_U_355.92
"RTN","IBCEP7",131,0)
 .. S ^TMP("IB_EDITED_IDS",$J,NEXTONE,"OLD0")=^IBA(355.92,IBDA,0)
"RTN","IBCEP7",132,0)
 . D ^DIE
"RTN","IBCEP7",133,0)
 . I IBEFTFL="A" S ^TMP("IB_EDITED_IDS",$J,NEXTONE,0)=^IBA(355.92,IBDA,0)
"RTN","IBCEP7",134,0)
 . I $TR($G(^IBA(355.92,IBDA,0)),U)'=Z0 S IBRBLD=1
"RTN","IBCEP7",135,0)
 ;
"RTN","IBCEP7",136,0)
 ; "D"eleting 355.92 entry
"RTN","IBCEP7",137,0)
 I IBFUNC="D" D
"RTN","IBCEP7",138,0)
 . W !!," Insurance Co: ",$P($G(^DIC(36,+IBDA0,0)),U)
"RTN","IBCEP7",139,0)
 . W !,"     Division: ",$$DIV($P(IBDA0,U,5))
"RTN","IBCEP7",140,0)
 . W:$P(IBDA0,U,3)]"" !,"    Care Unit: ",$$EXTERNAL^DILFD(355.92,.03,"",$P(IBDA0,U,3))
"RTN","IBCEP7",141,0)
 . W !," ID Qualifier: ",$$EXTERNAL^DILFD(355.92,.06,"",$P(IBDA0,U,6))
"RTN","IBCEP7",142,0)
 . W !,"    Form Type: ",$$EXTERNAL^DILFD(355.92,.04,"",$P(IBDA0,U,4))
"RTN","IBCEP7",143,0)
 . W !,"           ID: ",$P(IBDA0,U,7),!
"RTN","IBCEP7",144,0)
 . S DIR(0)="YA",DIR("A")="ARE YOU SURE YOU WANT TO DELETE THIS ID RECORD?: ",DIR("B")="NO" D ^DIR K DIR
"RTN","IBCEP7",145,0)
 . S DIR("A")="NOTHING DELETED - PRESS RETURN TO CONTINUE: "
"RTN","IBCEP7",146,0)
 . I Y=1 D
"RTN","IBCEP7",147,0)
 .. S DIK="^IBA(355.92,",DA=IBDA
"RTN","IBCEP7",148,0)
 .. D ^DIK
"RTN","IBCEP7",149,0)
 .. I IBEFTFL="A" D
"RTN","IBCEP7",150,0)
 ... N NEXTONE
"RTN","IBCEP7",151,0)
 ... S NEXTONE=$$NEXTONE()
"RTN","IBCEP7",152,0)
 ... S ^TMP("IB_EDITED_IDS",$J,NEXTONE)=IBDA_U_"DEL"_U_355.92
"RTN","IBCEP7",153,0)
 ... S ^TMP("IB_EDITED_IDS",$J,NEXTONE,0)=IBDA0
"RTN","IBCEP7",154,0)
 .. S DIR("A")="ID DELETED - PRESS RETURN TO CONTINUE: ",IBRBLD=1
"RTN","IBCEP7",155,0)
 .. S DIR(0)="EA" W ! D ^DIR K DIR
"RTN","IBCEP7",156,0)
 ;
"RTN","IBCEP7",157,0)
 Q IBRBLD
"RTN","IBCEP7",158,0)
 ;
"RTN","IBCEP7",159,0)
FACID(Y) ;
"RTN","IBCEP7",160,0)
 N Z,Z1,Z2
"RTN","IBCEP7",161,0)
 S Z=U_$P($G(^IBE(355.97,+Y,0)),U,3)_U,Z1=$$SUB2^IBCEF73(1),Z2=$$SUB2^IBCEF73(2)
"RTN","IBCEP7",162,0)
 I Z1[Z!(Z2[Z) Q 1
"RTN","IBCEP7",163,0)
 Q 0
"RTN","IBCEP7",164,0)
 ;
"RTN","IBCEP7",165,0)
ADD1 ;
"RTN","IBCEP7",166,0)
 N IBFUNC,IBINS,IBDA,Z,DIR,X,Y,DTOUT,DUOUT,DP,IBPARAM,IBEFTFL,IBINS
"RTN","IBCEP7",167,0)
 D FULL^VALM1
"RTN","IBCEP7",168,0)
 ;
"RTN","IBCEP7",169,0)
 S IBPARAM=$G(^TMP("IBCE_PRVFAC_MAINT_INS",$J))
"RTN","IBCEP7",170,0)
 S IBEFTFL=$P(IBPARAM,U)  ; Electronic Form type flag
"RTN","IBCEP7",171,0)
 S IBINS=+$P(IBPARAM,U,2)  ; Insurance co        ;
"RTN","IBCEP7",172,0)
 ;
"RTN","IBCEP7",173,0)
 S Z=$$ADDFAC^IBCEP7A(IBINS,IBEFTFL) I Z D INIT
"RTN","IBCEP7",174,0)
 ;
"RTN","IBCEP7",175,0)
ADD1Q S VALMBCK="R"
"RTN","IBCEP7",176,0)
 Q
"RTN","IBCEP7",177,0)
 ;
"RTN","IBCEP7",178,0)
DEL1 ;
"RTN","IBCEP7",179,0)
 N IBFUNC,IBINS,IBDA,Z,DIR,X,Y,DTOUT,DUOUT,DP,IBPARAM,IBEFTDL,IBINS
"RTN","IBCEP7",180,0)
 D FULL^VALM1
"RTN","IBCEP7",181,0)
 ;       
"RTN","IBCEP7",182,0)
 S IBPARAM=$G(^TMP("IBCE_PRVFAC_MAINT_INS",$J))
"RTN","IBCEP7",183,0)
 S IBEFTFL=$P(IBPARAM,U)  ; Electronic Form type flag
"RTN","IBCEP7",184,0)
 S IBINS=+$P(IBPARAM,U,2)  ; Insurance co
"RTN","IBCEP7",185,0)
 ;
"RTN","IBCEP7",186,0)
 S IBFUNC="D"
"RTN","IBCEP7",187,0)
 D SEL
"RTN","IBCEP7",188,0)
 I $G(IBDA) S Z=$$EDITFAC(IBDA,IBFUNC,IBEFTFL) I Z D INIT
"RTN","IBCEP7",189,0)
 ;
"RTN","IBCEP7",190,0)
DEL1Q S VALMBCK="R"
"RTN","IBCEP7",191,0)
 Q
"RTN","IBCEP7",192,0)
 ;
"RTN","IBCEP7",193,0)
 ; Get the next number so that the edits can be replicated in order for other providers/insurance companies
"RTN","IBCEP7",194,0)
NEXTONE() ;
"RTN","IBCEP7",195,0)
 Q $O(^TMP("IB_EDITED_IDS",$J,""),-1)+1
"RTN","IBCEP7B")
0^50^B7363951^B7401780
"RTN","IBCEP7B",1,0)
IBCEP7B ;ALB/TMP - Functions for PROVIDER ID ;1-16-05
"RTN","IBCEP7B",2,0)
 ;;2.0;INTEGRATED BILLING;**320,348,349,592**;16-JAN-2005;Build 58
"RTN","IBCEP7B",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEP7B",4,0)
 Q
"RTN","IBCEP7B",5,0)
 ;
"RTN","IBCEP7B",6,0)
GETID(CLAIM,COB) ;
"RTN","IBCEP7B",7,0)
 N DIR,X,Y,DTOUT,DUOUT,WHICH,ID,IBMAIN,IBDIV,DIC,IBINS,DA,DIC,Z,Z0,IBCU,OK,IBCU
"RTN","IBCEP7B",8,0)
 ;
"RTN","IBCEP7B",9,0)
 S ID=""
"RTN","IBCEP7B",10,0)
 S IBINS=$P($G(^DGCR(399,CLAIM,"I"_COB)),U)
"RTN","IBCEP7B",11,0)
 I IBINS="" Q ID
"RTN","IBCEP7B",12,0)
 ;
"RTN","IBCEP7B",13,0)
 ; Make sure they have careunits IDS defined for this insurance company before we bother asking
"RTN","IBCEP7B",14,0)
 S OK=0
"RTN","IBCEP7B",15,0)
 S Z=0 F  S Z=$O(^IBA(355.92,"B",IBINS,Z)) Q:'Z  D  Q:OK
"RTN","IBCEP7B",16,0)
 . S Z0=$G(^IBA(355.92,Z,0))
"RTN","IBCEP7B",17,0)
 . Q:$P(Z0,U,8)'="E"
"RTN","IBCEP7B",18,0)
 . Q:$P(Z0,U,3)=""
"RTN","IBCEP7B",19,0)
 . S OK=1
"RTN","IBCEP7B",20,0)
 I 'OK Q ID
"RTN","IBCEP7B",21,0)
 ;
"RTN","IBCEP7B",22,0)
 S WHICH=$S(COB=1:"Primary",COB=2:"Secondary",1:"Tertiary")
"RTN","IBCEP7B",23,0)
 S DIR("A")="Define "_WHICH_" Payer ID by Care Unit? "
"RTN","IBCEP7B",24,0)
 S DIR("B")="No"
"RTN","IBCEP7B",25,0)
 S DIR(0)="YA"
"RTN","IBCEP7B",26,0)
 S DIR("?",1)="Enter No to select "_WHICH_" Provider # by Division."
"RTN","IBCEP7B",27,0)
 S DIR("?")="Enter Yes to select "_WHICH_" Provider # for a specific Care Unit."
"RTN","IBCEP7B",28,0)
 D ^DIR
"RTN","IBCEP7B",29,0)
 I Y'=1 Q ID
"RTN","IBCEP7B",30,0)
 ;
"RTN","IBCEP7B",31,0)
 ; Get the Division
"RTN","IBCEP7B",32,0)
 S IBMAIN=$$MAIN^IBCEP2B()
"RTN","IBCEP7B",33,0)
 S IBDIV=$$EXTERNAL^DILFD(399,.22,"",$P($G(^DGCR(399,CLAIM,0)),U,22))
"RTN","IBCEP7B",34,0)
 S DIR("A")="Division: ",DIR(0)="355.92,.05AOr"
"RTN","IBCEP7B",35,0)
 ; Default Division
"RTN","IBCEP7B",36,0)
 S DIR("B")=$S(IBDIV]"":IBDIV,1:IBMAIN)
"RTN","IBCEP7B",37,0)
 D ^DIR K DIR
"RTN","IBCEP7B",38,0)
 S IBDIV=+$S(Y>0:+Y,1:0)
"RTN","IBCEP7B",39,0)
 I Y<0 Q ID
"RTN","IBCEP7B",40,0)
 ;
"RTN","IBCEP7B",41,0)
 ; Get the Care Unit
"RTN","IBCEP7B",42,0)
 S DIC("A")="Care Unit: "
"RTN","IBCEP7B",43,0)
 S DIC("W")="W ""   "",$P(^(0),U,2)"
"RTN","IBCEP7B",44,0)
 S DIC=355.95,DIC("S")="I $P(^(0),U,3)=+$G(IBINS),$P(^(0),U,4)=+$G(IBDIV)",DIC(0)="AEMQ"
"RTN","IBCEP7B",45,0)
 D ^DIC
"RTN","IBCEP7B",46,0)
 I Y<0 Q ID
"RTN","IBCEP7B",47,0)
 S IBCU=+Y
"RTN","IBCEP7B",48,0)
 ;
"RTN","IBCEP7B",49,0)
 ; Compile the appropriate list of IDs
"RTN","IBCEP7B",50,0)
 S Z=0 F  S Z=$O(^IBA(355.92,"B",IBINS,Z)) Q:'Z  D  Q:ID]""
"RTN","IBCEP7B",51,0)
 . S Z0=$G(^IBA(355.92,Z,0))
"RTN","IBCEP7B",52,0)
 . Q:$P(Z0,U,8)'="E"
"RTN","IBCEP7B",53,0)
 . Q:$P(Z0,U,3)'=IBCU
"RTN","IBCEP7B",54,0)
 . S ID=$P(Z0,U,7)_U_$P(Z0,U,6)
"RTN","IBCEP7B",55,0)
 Q ID
"RTN","IBCEP7B",56,0)
 ;
"RTN","IBCEP7B",57,0)
 ; See if the insurance company flag is set to send the ATT/REND ID as the Billing Provider
"RTN","IBCEP7B",58,0)
ATTREND(CLAIM,COB) ;
"RTN","IBCEP7B",59,0)
 N ID,IBINS
"RTN","IBCEP7B",60,0)
 S ID=""
"RTN","IBCEP7B",61,0)
 S IBINS=$P($G(^DGCR(399,CLAIM,"I"_COB)),U)
"RTN","IBCEP7B",62,0)
 I IBINS="" Q 0
"RTN","IBCEP7B",63,0)
 I $$FT^IBCEF(CLAIM)=2,$$GET1^DIQ(36,IBINS,4.06,"I") Q 1  ; 1500
"RTN","IBCEP7B",64,0)
 ;IA# 2056;IB*2.0*592
"RTN","IBCEP7B",65,0)
 I $$FT^IBCEF(CLAIM)=3,$$GET1^DIQ(36,IBINS,4.08,"I") Q 1  ; ub
"RTN","IBCEP7B",66,0)
 Q 0
"RTN","IBCEP7B",67,0)
 ;
"RTN","IBCEP7B",68,0)
 ; Get a list of the plan types that supress Billing Provider Secondary IDs for this  Insurance Co
"RTN","IBCEP7B",69,0)
 ; and see if the current plan type is one of them.
"RTN","IBCEP7B",70,0)
SUPPPT(CLAIM,COB) ;
"RTN","IBCEP7B",71,0)
 N IBINS,SUPPFL
"RTN","IBCEP7B",72,0)
 S SUPPFL=0
"RTN","IBCEP7B",73,0)
 S IBINS=$P($G(^DGCR(399,CLAIM,"I"_COB)),U)
"RTN","IBCEP7B",74,0)
 I IBINS="" Q SUPPFL
"RTN","IBCEP7B",75,0)
 ;
"RTN","IBCEP7B",76,0)
 I $D(^DIC(36,IBINS,13)) D
"RTN","IBCEP7B",77,0)
 . N PLAN,PLANTYPE
"RTN","IBCEP7B",78,0)
 . S PLAN=$P($G(^DGCR(399,CLAIM,"I"_COB)),U,18) Q:'PLAN
"RTN","IBCEP7B",79,0)
 . S PLANTYPE=$P($G(^IBA(355.3,PLAN,0)),U,15) Q:PLANTYPE=""
"RTN","IBCEP7B",80,0)
 . Q:'$D(^DIC(36,IBINS,13,"B",PLANTYPE))
"RTN","IBCEP7B",81,0)
 . S SUPPFL=1
"RTN","IBCEP7B",82,0)
 Q SUPPFL
"RTN","IBCEP7C")
0^51^B59082632^B59638074
"RTN","IBCEP7C",1,0)
IBCEP7C ;ALB/TMP - Functions for fac level PROVIDER ID MAINT ;11-07-00
"RTN","IBCEP7C",2,0)
 ;;2.0;INTEGRATED BILLING;**137,232,320,348,349,592**;21-MAR-94;Build 58
"RTN","IBCEP7C",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEP7C",4,0)
 ;
"RTN","IBCEP7C",5,0)
 G AWAY
"RTN","IBCEP7C",6,0)
AWAY Q
"RTN","IBCEP7C",7,0)
 ;
"RTN","IBCEP7C",8,0)
 ; IBDA - IEN for file 355.92
"RTN","IBCEP7C",9,0)
 ; IBFUNC = "A"dd or "E"dit
"RTN","IBCEP7C",10,0)
FACFLDS(IBDA,IBINS,IBITYP,IBFORM,IBDIV,IBFUNC,IBCAREUN,IBEFTFL) ; Chk for dups on fac id fld combos
"RTN","IBCEP7C",11,0)
 ;
"RTN","IBCEP7C",12,0)
 N IB,IBOK,DIC,DIR,X,Y,DTOUT,DUOUT,Z,Z0,DIE,DA,IBMAIN,IBQUIT,IBPARAM,IBCUF,IBDA0,IBCNTADD,I,IBLIMIT
"RTN","IBCEP7C",13,0)
 ;
"RTN","IBCEP7C",14,0)
 S IBOK=0,IBDA0=""
"RTN","IBCEP7C",15,0)
 I $G(IBDA) S IBDA0=$G(^IBA(355.92,IBDA,0))
"RTN","IBCEP7C",16,0)
 S IBPARAM=$G(^TMP("IBCE_PRVFAC_MAINT_INS",$J))
"RTN","IBCEP7C",17,0)
 S IBCUF=$S($P(IBDA0,U,3)]"":1,1:0)  ; Care Unit Flag
"RTN","IBCEP7C",18,0)
 ;
"RTN","IBCEP7C",19,0)
 I IBEFTFL="E",IBFUNC="A" D  G:$D(DTOUT)!$D(DUOUT) FLDSQ
"RTN","IBCEP7C",20,0)
 . K DIR
"RTN","IBCEP7C",21,0)
 . S DIR("A")="Define Billing Provider Secondary IDs by Care Units? "
"RTN","IBCEP7C",22,0)
 . S DIR("B")="No"
"RTN","IBCEP7C",23,0)
 . S DIR(0)="YAO"
"RTN","IBCEP7C",24,0)
 . S DIR("?",1)="Enter No to define a Billing Provider Secondary ID for the Division."
"RTN","IBCEP7C",25,0)
 . S DIR("?",2)="Enter Yes to define a Billing Provider Secondary ID for a specific Care Unit."
"RTN","IBCEP7C",26,0)
 . S DIR("?",3)="If no Care Unit is entered on Billing Screen 3, the Billing Provider"
"RTN","IBCEP7C",27,0)
 . S DIR("?")="Secondary ID defined for the Division will be transmitted in the claim."
"RTN","IBCEP7C",28,0)
 . D ^DIR
"RTN","IBCEP7C",29,0)
 . S IBCUF=$G(Y)  ; Care Unit Flag
"RTN","IBCEP7C",30,0)
 ;
"RTN","IBCEP7C",31,0)
 ; Get the Division
"RTN","IBCEP7C",32,0)
 S IBMAIN=$$MAIN^IBCEP2B()
"RTN","IBCEP7C",33,0)
 S IBDIV=0
"RTN","IBCEP7C",34,0)
 I IBEFTFL="E"!(IBEFTFL="LF") D  G:$D(DTOUT)!$D(DUOUT) FLDSQ
"RTN","IBCEP7C",35,0)
 . K DIR
"RTN","IBCEP7C",36,0)
 . S (IBQUIT,IBOK)=0,DA=$G(IBDA)
"RTN","IBCEP7C",37,0)
 . S DIR("A")="Division: ",DIR(0)="355.92,.05AOr"
"RTN","IBCEP7C",38,0)
 . ; Default Division - Main if adding or Existing if editing
"RTN","IBCEP7C",39,0)
 . I IBFUNC="E" S DIR("B")=$P($$DIV^IBCEP7($P(IBDA0,U,5)),"/")
"RTN","IBCEP7C",40,0)
 . I IBFUNC="A" S DIR("B")=$P($$EXTERNAL^DILFD(355.92,.05,"",IBMAIN),"/")
"RTN","IBCEP7C",41,0)
 . D ^DIR K DIR
"RTN","IBCEP7C",42,0)
 . Q:$D(DTOUT)!$D(DUOUT)
"RTN","IBCEP7C",43,0)
 . S IBDIV=+$S(Y>0:+Y,1:0)
"RTN","IBCEP7C",44,0)
 ;
"RTN","IBCEP7C",45,0)
 ; See if there are any Care Units
"RTN","IBCEP7C",46,0)
 S IBCAREUN="*N/A*"
"RTN","IBCEP7C",47,0)
 I IBEFTFL="E",IBCUF D
"RTN","IBCEP7C",48,0)
 . N TAR
"RTN","IBCEP7C",49,0)
 . D LIST^DIC(355.95,,.01,,,,,,"I $P(^(0),U,3)=+$G(IBINS),$P(^(0),U,4)=+$G(IBDIV)",,"TAR")
"RTN","IBCEP7C",50,0)
 . Q:+$G(TAR("DILIST",0))
"RTN","IBCEP7C",51,0)
 . S IBCUF=0
"RTN","IBCEP7C",52,0)
 . W !!,"There are no Care Units defined for this Division.",!
"RTN","IBCEP7C",53,0)
 ;
"RTN","IBCEP7C",54,0)
 ; Get the Care Unit
"RTN","IBCEP7C",55,0)
 I IBEFTFL="E",IBCUF D  I Y<1 G FLDSQ
"RTN","IBCEP7C",56,0)
 . K DIC
"RTN","IBCEP7C",57,0)
 . S DIC("A")="Care Unit: "
"RTN","IBCEP7C",58,0)
 . I IBFUNC="E" D  ; default only if editing
"RTN","IBCEP7C",59,0)
 .. Q:IBDIV'=$P(IBDA0,U,5)  ; don't default if division has changed
"RTN","IBCEP7C",60,0)
 .. S DIC("B")=$$EXTERNAL^DILFD(355.92,.03,"",$P(IBDA0,U,3))
"RTN","IBCEP7C",61,0)
 . S DIC=355.95,DIC("S")="I $P(^(0),U,3)=+$G(IBINS),$P(^(0),U,4)=+$G(IBDIV)",DIC(0)="AEMQ"
"RTN","IBCEP7C",62,0)
 . D ^DIC
"RTN","IBCEP7C",63,0)
 . I Y>0 S IBCAREUN=+Y
"RTN","IBCEP7C",64,0)
 ;
"RTN","IBCEP7C",65,0)
 ; Think this is done for sorting purposes.  Makes the main division first
"RTN","IBCEP7C",66,0)
 I IBDIV=IBMAIN S IBDIV=0
"RTN","IBCEP7C",67,0)
 ;
"RTN","IBCEP7C",68,0)
 ; Get the Provider ID Type
"RTN","IBCEP7C",69,0)
 K DIR
"RTN","IBCEP7C",70,0)
 S IBQUIT=0
"RTN","IBCEP7C",71,0)
 I $P(IBPARAM,U,3)'=1 D
"RTN","IBCEP7C",72,0)
 . S DIR("?")="Can NOT be State LIC # or Billing Facility Primary"
"RTN","IBCEP7C",73,0)
 . S DIR("A")="ID Qualifier: "
"RTN","IBCEP7C",74,0)
 . S DIR(0)="355.92,.06A^^K:'$$FACID^IBCEP7(+Y)!$P($G(^IBE(355.97,+Y,1)),U,9)!($P($G(^(0)),U,3)=""0B"") X"
"RTN","IBCEP7C",75,0)
 . W ! D ^DIR K DIR
"RTN","IBCEP7C",76,0)
 . I $D(DTOUT)!$D(DUOUT) S IBQUIT=1
"RTN","IBCEP7C",77,0)
 E  D  G:$D(DTOUT)!$D(DUOUT) FLDSQ
"RTN","IBCEP7C",78,0)
 . S DIR("A")="ID Qualifier: "    ;,DIR(0)="355.92,.06Ar"
"RTN","IBCEP7C",79,0)
 . S DIR(0)="PAr^355.97:AEMQ"
"RTN","IBCEP7C",80,0)
 . S DIR("?")="Enter a Qualifier to identify the type of ID number you are entering."
"RTN","IBCEP7C",81,0)
 . ; Default Type of ID - Electronic Plan Type if adding or Existing if editing
"RTN","IBCEP7C",82,0)
 . N PITIEN S PITIEN=$S(IBFUNC="A"&(IBEFTFL="E"):$$BF^IBCU(),IBFUNC="E":$P(IBDA0,U,6),1:"")
"RTN","IBCEP7C",83,0)
 . I PITIEN]"" S DIR("B")=$P($G(^IBE(355.97,PITIEN,0)),U)
"RTN","IBCEP7C",84,0)
 . I IBEFTFL="E" D
"RTN","IBCEP7C",85,0)
 .. S DIR("?",1)=" The current default ID Qualifier is based upon the Electronic Plan Type."
"RTN","IBCEP7C",86,0)
 .. S DIR("?",2)=" You may change the ID Qualifier and the change will apply to all Plan"
"RTN","IBCEP7C",87,0)
 .. S DIR("?")=" Types."
"RTN","IBCEP7C",88,0)
 .. S DIR("S")="I ($P($G(^(0)),U,3)=$P($G(^IBE(355.97,PITIEN,0)),U,3))!$$BPS^IBCEPU(Y)"
"RTN","IBCEP7C",89,0)
 . I IBEFTFL="A" S DIR("S")="I $$BPS^IBCEPU(Y)"
"RTN","IBCEP7C",90,0)
 . I IBEFTFL="LF" S DIR("S")="I $$LFINS^IBCEPU(Y)"
"RTN","IBCEP7C",91,0)
 . D ^DIR K DIR
"RTN","IBCEP7C",92,0)
 G:IBQUIT FLDSQ
"RTN","IBCEP7C",93,0)
 S IBITYP=$P(Y,U)
"RTN","IBCEP7C",94,0)
 ;
"RTN","IBCEP7C",95,0)
 ; Get Form Type
"RTN","IBCEP7C",96,0)
 K DIR
"RTN","IBCEP7C",97,0)
 S DIR("A")="Form Type: "
"RTN","IBCEP7C",98,0)
 S DIR(0)=$S(IBEFTFL="LF":"SA^0:BOTH;1:UB-04;2:CMS-1500",1:"SA^1:UB-04;2:CMS-1500")
"RTN","IBCEP7C",99,0)
 I $G(IBDA) S DIR("B")=$S(+$P($G(^IBA(355.92,IBDA,0)),U,4)=0:"BOTH",1:$P("UB-04^CMS-1500",U,+$P($G(^IBA(355.92,IBDA,0)),U,4)))
"RTN","IBCEP7C",100,0)
 D ^DIR K DIR
"RTN","IBCEP7C",101,0)
 G:$D(DTOUT)!$D(DUOUT) FLDSQ
"RTN","IBCEP7C",102,0)
 S IBFORM=$P(Y,U)
"RTN","IBCEP7C",103,0)
 ;
"RTN","IBCEP7C",104,0)
 ; Set up array of exisiting IDs by form type, divison, and care units to avoid duplications
"RTN","IBCEP7C",105,0)
 S Z=0 F  S Z=$O(^IBA(355.92,"B",IBINS,Z)) Q:'Z  D
"RTN","IBCEP7C",106,0)
 . S Z0=$G(^IBA(355.92,Z,0))
"RTN","IBCEP7C",107,0)
 . I '(IBFUNC="E"&(Z=IBDA)) D
"RTN","IBCEP7C",108,0)
 .. I IBEFTFL="LF",$P(Z0,U,8)'="LF" Q   ; If lab/facility ID, it only needs to be unique among lab/facility IDs
"RTN","IBCEP7C",109,0)
 .. I IBEFTFL'="LF",$P(Z0,U,8)="LF" Q   ; If not lab/facility ID, it must be unigue for the others (secondary and additional)
"RTN","IBCEP7C",110,0)
 .. I IBEFTFL="A",$P(Z0,U,8)="E" Q
"RTN","IBCEP7C",111,0)
 .. I $P(Z0,U,8)="E",IBEFTFL'="A" S IB("*N/A*",$P(Z0,U,4),+$P(Z0,U,5),$S($P(Z0,U,3)]"":$P(Z0,U,3),1:"*N/A*"))=Z
"RTN","IBCEP7C",112,0)
 .. S IB($P(Z0,U,6),$P(Z0,U,4),+$P(Z0,U,5),$S($P(Z0,U,3)]"":$P(Z0,U,3),1:"*N/A*"))=Z
"RTN","IBCEP7C",113,0)
 . ;
"RTN","IBCEP7C",114,0)
 . ; count them
"RTN","IBCEP7C",115,0)
 . I IBFUNC="A",$P(Z0,U,8)=IBEFTFL,IBDIV=$P(Z0,U,5)!(IBDIV=0&($P(Z0,U,5)="")) D
"RTN","IBCEP7C",116,0)
 .. I ".1.2."[("."_$P(Z0,U,4)_".") S IBCNTADD($P(Z0,U,4))=$G(IBCNTADD($P(Z0,U,4)))+1 Q
"RTN","IBCEP7C",117,0)
 .. N I
"RTN","IBCEP7C",118,0)
 .. F I=1,2 S IBCNTADD(I)=$G(IBCNTADD(I))+1
"RTN","IBCEP7C",119,0)
 ; Check for duplications
"RTN","IBCEP7C",120,0)
 S IBOK=1
"RTN","IBCEP7C",121,0)
 ; Don't check if nothing is being changed.  The ID itself can be changed after return to calling program.
"RTN","IBCEP7C",122,0)
 I IBFUNC="E" S Z0=$G(^IBA(355.92,IBDA,0)) I $P(Z0,U,3)=IBCAREUN!($P(Z0,U,3)=""&(IBCAREUN="*N/A*")),IBFORM=$P(Z0,U,4),IBDIV=$P(Z0,U,5),IBITYP=$P(Z0,U,6) G FLDSQ
"RTN","IBCEP7C",123,0)
 I $G(IB($S(IBEFTFL="E":"*N/A*",1:IBITYP),IBFORM,IBDIV,IBCAREUN)) D
"RTN","IBCEP7C",124,0)
 . N Z,ZPC8 S Z=$G(IB($S(IBEFTFL="E":"*N/A*",1:IBITYP),IBFORM,IBDIV,IBCAREUN))
"RTN","IBCEP7C",125,0)
 . S ZPC8=""
"RTN","IBCEP7C",126,0)
 . I +Z S ZPC8=$P($G(^IBA(355.92,Z,0)),U,8)
"RTN","IBCEP7C",127,0)
 . S IBOK="0^DUPLICATE"_U_ZPC8
"RTN","IBCEP7C",128,0)
 I IBOK,IBFORM=0,$S($D(IB($S(IBEFTFL="E":"*N/A*",1:IBITYP),1,IBDIV,IBCAREUN))!$D(IB($S(IBEFTFL="E":"*N/A*",1:IBITYP),2,IBDIV,IBCAREUN)):1,1:0) S IBOK="0^FORM^SPECIFIC"
"RTN","IBCEP7C",129,0)
 I IBOK,IBFORM'=0,IBFORM'=3,$S($D(IB($S(IBEFTFL="E":"*N/A*",1:IBITYP),0,IBDIV,IBCAREUN)):1,1:0) S IBOK="0^FORM^BOTH"
"RTN","IBCEP7C",130,0)
 ;
"RTN","IBCEP7C",131,0)
 S IBLIMIT=$S(IBEFTFL="A":6,IBEFTFL="LF":5,1:"")
"RTN","IBCEP7C",132,0)
 I IBOK,IBFUNC="A",IBEFTFL'="E" D
"RTN","IBCEP7C",133,0)
 . I ".1.2."[("."_IBFORM_".") D  Q
"RTN","IBCEP7C",134,0)
 .. I $G(IBCNTADD(IBFORM))>(IBLIMIT-1) S IBOK="0^LIMIT"
"RTN","IBCEP7C",135,0)
 . N I
"RTN","IBCEP7C",136,0)
 . I IBFORM=0 F I=1,2 I $G(IBCNTADD(I))>IBLIMIT S IBOK="0^LIMIT" Q
"RTN","IBCEP7C",137,0)
 ;
"RTN","IBCEP7C",138,0)
 I 'IBOK D
"RTN","IBCEP7C",139,0)
 . I $P(IBOK,U,2)="DUPLICATE" D  Q
"RTN","IBCEP7C",140,0)
 .. S DIR("A",1)="This ID combination is already defined",DIR("A",2)=""
"RTN","IBCEP7C",141,0)
 .. ; under "_$S($P(IBOK,U,3)="A":" Additional IDs",$P(IBOK,U,3)="E":"Billing Provider Secondary ID",1:"VA Lab/Facility IDs")_$S(IBFUNC="A":" - try editing it instead",1:""),DIR("A",2)=" "
"RTN","IBCEP7C",142,0)
 . ;
"RTN","IBCEP7C",143,0)
 . I $P(IBOK,U,2)="BOTH" D  Q
"RTN","IBCEP7C",144,0)
 .. S DIR("A",1)="An ID combination for both form types already exists.  Delete this one",DIR("A",2)="before defining a form specific ID"_$S(IBDIV:" for this division"),DIR("A",4)=" "
"RTN","IBCEP7C",145,0)
 . ;
"RTN","IBCEP7C",146,0)
 . I $P(IBOK,U,2)="FORM" D  Q
"RTN","IBCEP7C",147,0)
 .. I $P(IBOK,U,3)="BOTH" S DIR("A",1)="This ID already exists for both form types - Delete it to enter this ID for",DIR("A",2)=" a specific form type",DIR("A",3)=" " Q
"RTN","IBCEP7C",148,0)
 .. S DIR("A",1)="This ID already exists for a specific form type - Delete specific form type",DIR("A",2)=" ID(s) before entering one for both form types",DIR("A",3)=" "
"RTN","IBCEP7C",149,0)
 . ;
"RTN","IBCEP7C",150,0)
 . I $P(IBOK,U,2)="LIMIT" D  Q
"RTN","IBCEP7C",151,0)
 .. S DIR("A",1)="Limit is "_IBLIMIT_" IDs for each form type",DIR("A",2)=" "
"RTN","IBCEP7C",152,0)
 .. I IBEFTFL="A" D
"RTN","IBCEP7C",153,0)
 ... S DIR("A",1)="A maximum of 6 Additional Billing Provider Sec IDs can be entered for each Form"
"RTN","IBCEP7C",154,0)
 ... S DIR("A",2)="Type.  Before you can add another ID, you must delete an existing ID."
"RTN","IBCEP7C",155,0)
 ... S DIR("A",3)=" "
"RTN","IBCEP7C",156,0)
 ;
"RTN","IBCEP7C",157,0)
 I 'IBOK S DIR(0)="EA",DIR("A")="PRESS RETURN TO CONTINUE: " W ! D ^DIR K DIR
"RTN","IBCEP7C",158,0)
 ;
"RTN","IBCEP7C",159,0)
FLDSQ Q +IBOK
"RTN","IBCEP8A")
0^48^B27427687^B25658990
"RTN","IBCEP8A",1,0)
IBCEP8A ;ALB/ESG - Functions for provider ID maint ;12/27/2005
"RTN","IBCEP8A",2,0)
 ;;2.0;INTEGRATED BILLING;**320,349,592**;21-MAR-94;Build 58
"RTN","IBCEP8A",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEP8A",4,0)
 ;
"RTN","IBCEP8A",5,0)
 Q
"RTN","IBCEP8A",6,0)
 ;
"RTN","IBCEP8A",7,0)
CLIA(IBIFN) ; Default CLIA# for claim
"RTN","IBCEP8A",8,0)
 NEW CLIA,NONVA,DIV,INST
"RTN","IBCEP8A",9,0)
 S CLIA="",IBIFN=+$G(IBIFN)
"RTN","IBCEP8A",10,0)
 S NONVA=+$P($G(^DGCR(399,IBIFN,"U2")),U,10)    ; non-VA facility ptr
"RTN","IBCEP8A",11,0)
 I NONVA S CLIA=$$CLIANVA^IBCEP8(IBIFN) G CLIAX
"RTN","IBCEP8A",12,0)
 ;
"RTN","IBCEP8A",13,0)
 ; retrieve the default VA clia# based on claim data
"RTN","IBCEP8A",14,0)
 S DIV=+$P($G(^DGCR(399,IBIFN,0)),U,22)         ; claim's division
"RTN","IBCEP8A",15,0)
 I 'DIV G CLIAX
"RTN","IBCEP8A",16,0)
 S INST=+$P($G(^DG(40.8,DIV,0)),U,7)            ; inst file pointer
"RTN","IBCEP8A",17,0)
 I 'INST G CLIAX
"RTN","IBCEP8A",18,0)
 S CLIA=$$ID^XUAF4("CLIA",INST)                 ; API for clia#
"RTN","IBCEP8A",19,0)
CLIAX ;
"RTN","IBCEP8A",20,0)
 Q CLIA
"RTN","IBCEP8A",21,0)
 ;
"RTN","IBCEP8A",22,0)
LAB(IBIFN) ; Function determines if LAB type of service is on claim
"RTN","IBCEP8A",23,0)
 ; Claim must be a CMS-1500 claim form type
"RTN","IBCEP8A",24,0)
 N LAB,LN,IBXDATA
"RTN","IBCEP8A",25,0)
 S LAB=0
"RTN","IBCEP8A",26,0)
 ;JWS;IB*2.0*592;Dental form #7 J430D
"RTN","IBCEP8A",27,0)
 I $$FT^IBCEF(IBIFN)'=2,$$FT^IBCEF(IBIFN)'=7 G LABX  ;cms-1500 and Dental J430D form types only
"RTN","IBCEP8A",28,0)
 D F^IBCEF("N-HCFA 1500 SERVICES (PRINT)",,,IBIFN)
"RTN","IBCEP8A",29,0)
 S LN=0
"RTN","IBCEP8A",30,0)
 F  S LN=$O(IBXDATA(LN)) Q:'LN  I $P(IBXDATA(LN),U,4)=5 S LAB=1 Q
"RTN","IBCEP8A",31,0)
LABX ;
"RTN","IBCEP8A",32,0)
 Q LAB
"RTN","IBCEP8A",33,0)
 ;
"RTN","IBCEP8A",34,0)
CLIAREQ(IBIFN) ; Function determines if the CLIA# is required for claim
"RTN","IBCEP8A",35,0)
 ; Return value=1 Yes, the CLIA# is required; otherwise 0.
"RTN","IBCEP8A",36,0)
 N REQ S REQ=0
"RTN","IBCEP8A",37,0)
 ;JWS;IB*2.0*592;Dental form #7 J430D
"RTN","IBCEP8A",38,0)
 I $$FT^IBCEF(IBIFN)'=2,$$FT^IBCEF(IBIFN)'=7 G CLIAREQX  ; cms-1500 and Dental J430D
"RTN","IBCEP8A",39,0)
 I '$$LAB(IBIFN) G CLIAREQX  ; lab type of service
"RTN","IBCEP8A",40,0)
 ;
"RTN","IBCEP8A",41,0)
 ; this is required for VA facility
"RTN","IBCEP8A",42,0)
 I '$P($G(^DGCR(399,IBIFN,"U2")),U,10) S REQ=1 G CLIAREQX
"RTN","IBCEP8A",43,0)
 ;
"RTN","IBCEP8A",44,0)
 ; for non-VA facility, further check non-VA care type
"RTN","IBCEP8A",45,0)
 ;     Codes 1 and 3 are specifically Non-Lab
"RTN","IBCEP8A",46,0)
 I '$F(".1.3.","."_$P($G(^DGCR(399,IBIFN,"U2")),U,11)_".") S REQ=1
"RTN","IBCEP8A",47,0)
CLIAREQX ;
"RTN","IBCEP8A",48,0)
 Q REQ
"RTN","IBCEP8A",49,0)
 ;
"RTN","IBCEP8A",50,0)
MAMMO(IBIFN,IBMC) ; Function to determine the default mammography certification
"RTN","IBCEP8A",51,0)
 ; number for the claim
"RTN","IBCEP8A",52,0)
 ; Array IBMC is returned if passed by reference
"RTN","IBCEP8A",53,0)
 ;   IBMC = # of associated mammo#'s
"RTN","IBCEP8A",54,0)
 ;   IBMC(n) = [1] coding system or "" for Non-VA Facilities
"RTN","IBCEP8A",55,0)
 ;             [2] mammo cert#
"RTN","IBCEP8A",56,0)
 NEW MAMMO,NONVA,INST,CODSYS,IBMCID,CDSYS
"RTN","IBCEP8A",57,0)
 S MAMMO="",IBIFN=+$G(IBIFN),IBMC=0
"RTN","IBCEP8A",58,0)
 S NONVA=+$P($G(^DGCR(399,IBIFN,"U2")),U,10)    ; non-VA facility ptr
"RTN","IBCEP8A",59,0)
 I NONVA D  G MAMMOX
"RTN","IBCEP8A",60,0)
 . S MAMMO=$P($G(^IBA(355.93,NONVA,0)),U,15) Q:MAMMO=""
"RTN","IBCEP8A",61,0)
 . S IBMC=1,IBMC(1)=""_U_MAMMO
"RTN","IBCEP8A",62,0)
 . Q
"RTN","IBCEP8A",63,0)
 ;
"RTN","IBCEP8A",64,0)
 ; retrieve the default VA mammo# based on claim data
"RTN","IBCEP8A",65,0)
 S INST=+$$SITE^VASITE()                            ; inst file pointer
"RTN","IBCEP8A",66,0)
 I 'INST G MAMMOX
"RTN","IBCEP8A",67,0)
 ;
"RTN","IBCEP8A",68,0)
 ; Kernel API from XU*8*394 to get a list of coding systems
"RTN","IBCEP8A",69,0)
 D LCDSYS^XUAF4(.CDSYS)
"RTN","IBCEP8A",70,0)
 S CODSYS="MAMMO"
"RTN","IBCEP8A",71,0)
 F  S CODSYS=$O(CDSYS(CODSYS)) Q:$E(CODSYS,1,5)'="MAMMO"  D
"RTN","IBCEP8A",72,0)
 . S IBMCID=$$ID^XUAF4(CODSYS,INST) Q:IBMCID=""
"RTN","IBCEP8A",73,0)
 . S IBMC=IBMC+1
"RTN","IBCEP8A",74,0)
 . S IBMC(IBMC)=$P(CODSYS,"-",2)_U_IBMCID
"RTN","IBCEP8A",75,0)
 . I $P(CODSYS,"-",2)="FDA" S MAMMO=IBMCID    ; FDA is default ID#
"RTN","IBCEP8A",76,0)
 . Q
"RTN","IBCEP8A",77,0)
 I IBMC,MAMMO="" S MAMMO=$P(IBMC(1),U,2)
"RTN","IBCEP8A",78,0)
MAMMOX ;
"RTN","IBCEP8A",79,0)
 Q MAMMO
"RTN","IBCEP8A",80,0)
 ;
"RTN","IBCEP8A",81,0)
MAMMODP(IBIFN) ; Procedure to display a listing of default mammo cert#'s
"RTN","IBCEP8A",82,0)
 ; Used during input template on screen 8 for CMS-1500 claims
"RTN","IBCEP8A",83,0)
 NEW IBMC,IBZ
"RTN","IBCEP8A",84,0)
 I $$MAMMO(IBIFN,.IBMC)
"RTN","IBCEP8A",85,0)
 I 'IBMC W !!?3,"No default mammography certification numbers on file.",! G MAMMODPX
"RTN","IBCEP8A",86,0)
 W !!?3,"The Mammography Certification #" W:IBMC>1 "'s"
"RTN","IBCEP8A",87,0)
 W " defined for this " W:$P($G(^DGCR(399,IBIFN,"U2")),U,10) "non-"
"RTN","IBCEP8A",88,0)
 W "VA facility " W:IBMC>1 "are:" W:IBMC'>1 "is:"
"RTN","IBCEP8A",89,0)
 S IBZ=0
"RTN","IBCEP8A",90,0)
 F  S IBZ=$O(IBMC(IBZ)) Q:'IBZ  W !?7,$P(IBMC(IBZ),U,2),?21,$P(IBMC(IBZ),U,1)
"RTN","IBCEP8A",91,0)
 W !?3,"If you enter a different number it will be sent with this claim only."
"RTN","IBCEP8A",92,0)
 I $P($G(^DGCR(399,IBIFN,"U2")),U,10) W !?3,"To change the defined Mammography Certification #, use Prov ID Maint."
"RTN","IBCEP8A",93,0)
 W !
"RTN","IBCEP8A",94,0)
MAMMODPX ;
"RTN","IBCEP8A",95,0)
 Q
"RTN","IBCEP8A",96,0)
 ;
"RTN","IBCEP8A",97,0)
XRAY(IBIFN) ; Function determines if X-RAY type of service is on claim
"RTN","IBCEP8A",98,0)
 ; Claim must be a CMS-1500 claim form type
"RTN","IBCEP8A",99,0)
 NEW XRAY,LN,IBXDATA
"RTN","IBCEP8A",100,0)
 S XRAY=0
"RTN","IBCEP8A",101,0)
 ;JWS;IB*2.0*592;Dental form #7 J430D
"RTN","IBCEP8A",102,0)
 I $$FT^IBCEF(IBIFN)'=2,$$FT^IBCEF(IBIFN)'=7 G XRAYX  ;cms-1500 and Dental J430D form types only
"RTN","IBCEP8A",103,0)
 D F^IBCEF("N-HCFA 1500 SERVICES (PRINT)",,,IBIFN)
"RTN","IBCEP8A",104,0)
 S LN=0
"RTN","IBCEP8A",105,0)
 F  S LN=$O(IBXDATA(LN)) Q:'LN  I $P(IBXDATA(LN),U,4)=4 S XRAY=1 Q
"RTN","IBCEP8A",106,0)
XRAYX ;
"RTN","IBCEP8A",107,0)
 Q XRAY
"RTN","IBCEP8A",108,0)
 ;
"RTN","IBCEP8A",109,0)
EIN(IBIFN) ; Function to return the EIN/tax ID for either the VA facility
"RTN","IBCEP8A",110,0)
 ; or the non-VA facility.  Used for SUB-9.
"RTN","IBCEP8A",111,0)
 NEW ID,IBU2,NONVA
"RTN","IBCEP8A",112,0)
 S ID="",IBU2=$G(^DGCR(399,IBIFN,"U2"))
"RTN","IBCEP8A",113,0)
 S NONVA=+$P(IBU2,U,10)                         ; non-VA facility ptr
"RTN","IBCEP8A",114,0)
 I NONVA D  G EINX
"RTN","IBCEP8A",115,0)
 . S ID=$P($G(^IBA(355.93,NONVA,0)),U,9)        ; ID# from file 355.93
"RTN","IBCEP8A",116,0)
 . ;
"RTN","IBCEP8A",117,0)
 . ; if not defined in file 355.93, then use legacy field# 234 in file
"RTN","IBCEP8A",118,0)
 . ; 399 - non-va care id#.  See NONVAID^IBCEF72.
"RTN","IBCEP8A",119,0)
 . I ID="",$P(IBU2,U,12)'="" S ID=$P(IBU2,U,12)
"RTN","IBCEP8A",120,0)
 . Q
"RTN","IBCEP8A",121,0)
 ;
"RTN","IBCEP8A",122,0)
 ; VA facility
"RTN","IBCEP8A",123,0)
 S ID=$P($G(^IBE(350.9,1,1)),U,5)    ; Federal tax id from site params
"RTN","IBCEP8A",124,0)
EINX ;
"RTN","IBCEP8A",125,0)
 Q ID
"RTN","IBCEP8A",126,0)
 ;
"RTN","IBCEP8A",127,0)
BOX324(IBIFN,IBXSAVE,IBXDATA) ; Procedure which further defines and formats
"RTN","IBCEP8A",128,0)
 ; form 1500, box 32, line 4.
"RTN","IBCEP8A",129,0)
 ; *** THIS IS NOT USED FOR THE NEW CMS-1500 CLAIM FORM ***
"RTN","IBCEP8A",130,0)
 ; This is either the facility Tax ID or it is the mammography
"RTN","IBCEP8A",131,0)
 ; certification number.
"RTN","IBCEP8A",132,0)
 ;  Input:  IBIFN, IBXSAVE array (pass by ref), IBXDATA (pass by ref)
"RTN","IBCEP8A",133,0)
 ; Output:  IBXDATA (pass by ref)
"RTN","IBCEP8A",134,0)
 ;
"RTN","IBCEP8A",135,0)
 NEW IBZ
"RTN","IBCEP8A",136,0)
 ;
"RTN","IBCEP8A",137,0)
 ; retrieve the mammo# if it exists into variable IBZ
"RTN","IBCEP8A",138,0)
 D F^IBCEF("N-MAMMOGRAPHY CERT#","IBZ",,IBIFN)
"RTN","IBCEP8A",139,0)
 ;
"RTN","IBCEP8A",140,0)
 ; If the claim is for the main VAMC and there is no mammo# then print
"RTN","IBCEP8A",141,0)
 ; nothing here.  See 364.7 iens# 348, 319, 327 for similar
"RTN","IBCEP8A",142,0)
 I '$G(IBXSAVE("REMOTE")),IBZ="" KILL IBXDATA G BOX32X
"RTN","IBCEP8A",143,0)
 ;
"RTN","IBCEP8A",144,0)
 ; If the mammo# exists, then display that
"RTN","IBCEP8A",145,0)
 I IBZ'="" S IBXDATA="Mammography Cert# "_IBZ G BOX32X
"RTN","IBCEP8A",146,0)
 ;
"RTN","IBCEP8A",147,0)
 ; Otherwise, display the facility tax id
"RTN","IBCEP8A",148,0)
 S IBXDATA="FAC. ID:"_$G(IBXDATA)
"RTN","IBCEP8A",149,0)
BOX32X ;
"RTN","IBCEP8A",150,0)
 KILL IBXSAVE("OFAC"),IBXSAVE("REMOTE")   ; cleanup
"RTN","IBCEP8A",151,0)
 Q
"RTN","IBCEP8A",152,0)
 ;
"RTN","IBCEP8A",153,0)
SUB1OK(IBIFN) ; This function determines if the claim meets the criteria
"RTN","IBCEP8A",154,0)
 ; for being eligible to output a SUB1 segment which is for professional
"RTN","IBCEP8A",155,0)
 ; purchased services.  Must be CMS-1500, non-VA facility, and Fee Basis.
"RTN","IBCEP8A",156,0)
 ;
"RTN","IBCEP8A",157,0)
 NEW OK,IBU2
"RTN","IBCEP8A",158,0)
 S OK=0,IBU2=$G(^DGCR(399,IBIFN,"U2"))
"RTN","IBCEP8A",159,0)
 ;
"RTN","IBCEP8A",160,0)
 ;JWS;IB*2.0*592;Dental form #7 J430D
"RTN","IBCEP8A",161,0)
 I $$FT^IBCEF(IBIFN)'=2,$$FT^IBCEF(IBIFN)'=7 G SX  ; must be cms-1500 or Dental J430D
"RTN","IBCEP8A",162,0)
 I '$P(IBU2,U,10) G SX                            ; must be non-VA fac
"RTN","IBCEP8A",163,0)
 I '$F(".1.2.","."_$P(IBU2,U,11)_".") G SX        ; must be FEE services
"RTN","IBCEP8A",164,0)
 ;
"RTN","IBCEP8A",165,0)
 S OK=1    ; all checks passed, OK for SUB1 output
"RTN","IBCEP8A",166,0)
SX ;
"RTN","IBCEP8A",167,0)
 Q OK
"RTN","IBCEP8A",168,0)
 ;
"RTN","IBCEP9")
0^47^B73643393^B73704936
"RTN","IBCEP9",1,0)
IBCEP9 ;ALB/TMP - MASS UPDATE OF PROVIDER ID FROM FILE OR MANUAL ;08-NOV-00
"RTN","IBCEP9",2,0)
 ;;2.0;INTEGRATED BILLING;**137,200,320,348,349,592**;21-MAR-94;Build 58
"RTN","IBCEP9",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEP9",4,0)
 ;
"RTN","IBCEP9",5,0)
EN ; Get parameters and mass input provider id by ins co
"RTN","IBCEP9",6,0)
 N A,DA,DIC,DIE,DIK,DIR,DR,POP,Q,Q0,X,Y,Y3,Z,Z0
"RTN","IBCEP9",7,0)
 N IBCND,IBCU,IBCT,IBDELIM,IBFILE,IBFILEN,IBFILEP,IBFORMAT
"RTN","IBCEP9",8,0)
 N IBFT,IBINFILE,IBINS,IBL,IBN,IBOK,IBOPEN,IBPOS,IBPT,IBQUIT
"RTN","IBCEP9",9,0)
 N IBQUIT1,IBQUOTES,IBRA,IBS,IBSA,IBSTART,IBSRC,IBVERIFY,IBVNAME
"RTN","IBCEP9",10,0)
 K ^TMP("IBPID_IN",$J),^TMP("IBPID-ERR",$J),^TMP("IBPID",$J)
"RTN","IBCEP9",11,0)
 S IBQUIT=0
"RTN","IBCEP9",12,0)
1 ; Select INSURANCE COMPANY NAME:
"RTN","IBCEP9",13,0)
 G:IBQUIT ENQ
"RTN","IBCEP9",14,0)
 S IBQUIT1=0
"RTN","IBCEP9",15,0)
 S DIC("S")="I $P($G(^DIC(36,+Y,3)),U,13)'=""C"""
"RTN","IBCEP9",16,0)
 S DIC(0)="AEMQ",DIC="^DIC(36," D ^DIC
"RTN","IBCEP9",17,0)
 I Y'>0 G ENQ
"RTN","IBCEP9",18,0)
 S IBINS=+Y
"RTN","IBCEP9",19,0)
 S IBQUIT=$$LOCK^IBCEP9B(IBINS)
"RTN","IBCEP9",20,0)
 I IBQUIT,$G(IBINS) D  G 1
"RTN","IBCEP9",21,0)
 . D UNLOCK^IBCEP9B(IBINS)
"RTN","IBCEP9",22,0)
 . S IBINS="",IBQUIT=0
"RTN","IBCEP9",23,0)
 . W !!,"Unable to lock all associated insurance companies.",!,"Please try again later.",!!
"RTN","IBCEP9",24,0)
 ;
"RTN","IBCEP9",25,0)
2 ; get data source
"RTN","IBCEP9",26,0)
 S IBQUIT1=0
"RTN","IBCEP9",27,0)
 S DIR(0)="SA^M:Manual Entry;F:Entry from file"
"RTN","IBCEP9",28,0)
 S DIR("A")="PROVIDER ID DATA SOURCE: ",DIR("B")="Manual Entry"
"RTN","IBCEP9",29,0)
 S Y=$$DIR(.DIR,.IBQUIT,.IBQUIT1)
"RTN","IBCEP9",30,0)
 I Y=""!("FM"'[Y)!IBQUIT1 D UNLOCK^IBCEP9B(IBINS) G 1
"RTN","IBCEP9",31,0)
 S IBSRC=Y,IBVERIFY=0
"RTN","IBCEP9",32,0)
 S IBVERIFY=(Y="M")
"RTN","IBCEP9",33,0)
 I 'IBVERIFY D  G:IBQUIT ENQ G:IBQUIT 2
"RTN","IBCEP9",34,0)
 . S DIR(0)="YA",DIR("A")="DO YOU WANT TO VIEW/VERIFY EACH ENTRY BEFORE IT GETS UPDATED?: "
"RTN","IBCEP9",35,0)
 . S Y=$$DIR(.DIR,.IBQUIT,.IBQUIT1)
"RTN","IBCEP9",36,0)
 . I Y=1 S IBVERIFY=1
"RTN","IBCEP9",37,0)
 ;
"RTN","IBCEP9",38,0)
 G:IBSRC="M" 4
"RTN","IBCEP9",39,0)
21 ; get parameters for file type
"RTN","IBCEP9",40,0)
 G:IBQUIT ENQ
"RTN","IBCEP9",41,0)
 S IBQUIT1=0
"RTN","IBCEP9",42,0)
 S DIR(0)="SA^D:DELIMITED;F:FIXED LENGTH",DIR("B")="D",DIR("A")="SELECT FILE FORMAT: "
"RTN","IBCEP9",43,0)
 S Y=$$DIR(.DIR,.IBQUIT,.IBQUIT1)
"RTN","IBCEP9",44,0)
 I IBQUIT1 G 2
"RTN","IBCEP9",45,0)
 S IBPOS=Y
"RTN","IBCEP9",46,0)
 I IBPOS="D" D  G:IBQUIT1 21
"RTN","IBCEP9",47,0)
 . S DIR(0)="FA^1:1",DIR("B")=",",DIR("A")="DELIMITER CHARACTER: "
"RTN","IBCEP9",48,0)
 . S Y=$$DIR(.DIR,.IBQUIT,.IBQUIT1)
"RTN","IBCEP9",49,0)
 . Q:IBQUIT1
"RTN","IBCEP9",50,0)
 . S $P(IBPOS,U,2)=Y
"RTN","IBCEP9",51,0)
 . S DIR(0)="YA",DIR("B")="NO",DIR("A")="ARE QUOTES WITHIN A FIELD DOUBLE QUOTED?: "
"RTN","IBCEP9",52,0)
 . S Y=$$DIR(.DIR,.IBQUIT,.IBQUIT1,,,1)
"RTN","IBCEP9",53,0)
 . Q:IBQUIT1
"RTN","IBCEP9",54,0)
 . S $P(IBPOS,U,3)=Y
"RTN","IBCEP9",55,0)
3 ; select external file name
"RTN","IBCEP9",56,0)
 G:IBQUIT ENQ
"RTN","IBCEP9",57,0)
 S IBQUIT1=0
"RTN","IBCEP9",58,0)
 G:IBSRC="M" 2
"RTN","IBCEP9",59,0)
 S DIR(0)="FA^1:60"
"RTN","IBCEP9",60,0)
 S DIR("A")="FILE NAME PATH: ",DIR("B")=$$PWD^%ZISH
"RTN","IBCEP9",61,0)
 S Y=$$DIR(.DIR,.IBQUIT,.IBQUIT1)
"RTN","IBCEP9",62,0)
 G:IBQUIT1 2
"RTN","IBCEP9",63,0)
 S IBFILEP=$P(Y,U)
"RTN","IBCEP9",64,0)
 S DIR(0)="FA^1:60"
"RTN","IBCEP9",65,0)
 S DIR("A")="FILE NAME: "
"RTN","IBCEP9",66,0)
 S IBSA("*")=""
"RTN","IBCEP9",67,0)
 S DIR("?")="^S Y3=$$LIST^%ZISH(IBFILEP,""IBSA"",""IBRA"") I Y3=1 S Y3="""" F  S Y3=$O(IBRA(Y3)) Q:Y3=""""  W !,Y3"
"RTN","IBCEP9",68,0)
 S Y=$$DIR(.DIR,.IBQUIT,.IBQUIT1,,,1)
"RTN","IBCEP9",69,0)
 G:IBQUIT1 2
"RTN","IBCEP9",70,0)
 S IBFILEN=$P(Y,U)
"RTN","IBCEP9",71,0)
 K ^TMP($J),IBRA,Y3
"RTN","IBCEP9",72,0)
 N Y S Y=$$FTG^%ZISH(IBFILEP,IBFILEN,$NA(^TMP($J,1)),2)
"RTN","IBCEP9",73,0)
 I Y=0 W !,"FILE ",IBFILEP,IBFILEN," COULD NOT BE FOUND OR COULD NOT BE OPENED",! G 3
"RTN","IBCEP9",74,0)
 S IBFILE=IO
"RTN","IBCEP9",75,0)
4 ; select Provider ID Type
"RTN","IBCEP9",76,0)
 G:IBQUIT ENQ
"RTN","IBCEP9",77,0)
 S IBQUIT1=0
"RTN","IBCEP9",78,0)
 S DIR(0)="355.9,.06"
"RTN","IBCEP9",79,0)
 I IBSRC="M" S Z=$P($G(^IBE(355.97,+$$PPTYP^IBCEP0(IBINS),0)),U) S:Z'="" DIR("B")=Z
"RTN","IBCEP9",80,0)
 S Y=$$DIR(.DIR,.IBQUIT,.IBQUIT1)
"RTN","IBCEP9",81,0)
 G:Y=""!IBQUIT1 3
"RTN","IBCEP9",82,0)
 S IBPTYP=$P(Y,U)
"RTN","IBCEP9",83,0)
5 ; select Forms Type
"RTN","IBCEP9",84,0)
 G:IBQUIT ENQ
"RTN","IBCEP9",85,0)
 S IBQUIT1=0
"RTN","IBCEP9",86,0)
 S DIR(0)="355.9,.04r",DIR("B")="UB-04 and CMS-1500 FORMS"
"RTN","IBCEP9",87,0)
 S Y=$$DIR(.DIR,.IBQUIT,.IBQUIT1)
"RTN","IBCEP9",88,0)
 G:IBQUIT1 4
"RTN","IBCEP9",89,0)
 I Y=""!("012"'[Y) G 5
"RTN","IBCEP9",90,0)
 S IBFT=$P(Y,U)
"RTN","IBCEP9",91,0)
6 ; select Bill Care Type
"RTN","IBCEP9",92,0)
 G:IBQUIT ENQ
"RTN","IBCEP9",93,0)
 S IBQUIT1=0
"RTN","IBCEP9",94,0)
 S DIR(0)="355.9,.05r",DIR("B")="BOTH INPATIENT AND OUTPATIENT"
"RTN","IBCEP9",95,0)
 S Y=$$DIR(.DIR,.IBQUIT,.IBQUIT1)
"RTN","IBCEP9",96,0)
 G:IBQUIT1 5
"RTN","IBCEP9",97,0)
 I Y=""!("0123"'[$P(Y,U)) G 6
"RTN","IBCEP9",98,0)
 S IBCT=$P(Y,U)
"RTN","IBCEP9",99,0)
 ;
"RTN","IBCEP9",100,0)
 S IBCND=$$CAREUN^IBCEP3(IBINS,IBPTYP,IBFT,IBCT,IBCT=3)
"RTN","IBCEP9",101,0)
7 ; get Care Unit
"RTN","IBCEP9",102,0)
 G:IBQUIT ENQ
"RTN","IBCEP9",103,0)
 S IBQUIT1=0
"RTN","IBCEP9",104,0)
 I IBCND D  G:IBQUIT1 6
"RTN","IBCEP9",105,0)
 . S DIR(0)="355.9,.03O"
"RTN","IBCEP9",106,0)
 . S Y=$$DIR(.DIR,.IBQUIT,.IBQUIT1)
"RTN","IBCEP9",107,0)
 . Q:IBQUIT1
"RTN","IBCEP9",108,0)
 . S IBCU=$P(Y,U)
"RTN","IBCEP9",109,0)
 . I IBCU="" W !!,$J("",22),"***** WARNING *****",!," YOU WILL NEED TO MANUALLY ENTER THE CARE UNIT FOR EACH PROVIDER",!!
"RTN","IBCEP9",110,0)
 ;
"RTN","IBCEP9",111,0)
 ; Manual entry to get providers from VistA
"RTN","IBCEP9",112,0)
 I IBSRC="M" D MANUAL^IBCEP9B G:IBQUIT1 6
"RTN","IBCEP9",113,0)
 ; For 'OTHER' files ask position/length or delimiter/piece for data
"RTN","IBCEP9",114,0)
 I IBSRC="F" D  I IBQUIT1 G:'IBCND 6 G 7
"RTN","IBCEP9",115,0)
 . F Z="PROV. SSN^SSN^15^1","PROV. NAME^NAM^30","PROV. 1500 ID^PROF_ID^15","PROV. UB-04 ID^INST_ID^15" D  Q:IBQUIT1
"RTN","IBCEP9",116,0)
 .. I $P(IBPOS,U)'="D" D
"RTN","IBCEP9",117,0)
 ... N X
"RTN","IBCEP9",118,0)
 ... I IBFT=0!(IBFT=1) Q:Z["PROF_ID"  I Z["INST_ID" S $P(Z,U)="PROV. ID"
"RTN","IBCEP9",119,0)
 ... I IBFT=2 Q:Z["INST_ID"
"RTN","IBCEP9",120,0)
 ... S DIR("A")="START POSITION OF "_$P(Z,U)_" FIELD: "
"RTN","IBCEP9",121,0)
 ... S DIR(0)="NA"_$S($P(Z,U,4)!($P(Z,U)["PROV. ID")!($P(Z,U)["_ID"):"",1:"O")_"^1:250"
"RTN","IBCEP9",122,0)
 ... W ! S X=$$DIR1^IBCEP9B(.DIR,Z,.IBQUIT,.IBQUIT1)
"RTN","IBCEP9",123,0)
 ... Q:IBQUIT1
"RTN","IBCEP9",124,0)
 ... I X>0 D
"RTN","IBCEP9",125,0)
 .... S IBPOS($P(Z,U,2))=X
"RTN","IBCEP9",126,0)
 .... S DIR("A")="LENGTH OF "_$P(Z,U)_" FIELD: "
"RTN","IBCEP9",127,0)
 .... S DIR(0)="NA"_$S($P(Z,U,3):"^1:"_$P(Z,U,3),1:"")
"RTN","IBCEP9",128,0)
 .... S X=$$DIR1^IBCEP9B(.DIR,Z,.IBQUIT,.IBQUIT1)
"RTN","IBCEP9",129,0)
 .... Q:IBQUIT1
"RTN","IBCEP9",130,0)
 .... S $P(IBPOS($P(Z,U,2)),U,2)=IBPOS($P(Z,U,2))+X-1
"RTN","IBCEP9",131,0)
 .. ;
"RTN","IBCEP9",132,0)
 .. I $P(IBPOS,U)="D" D
"RTN","IBCEP9",133,0)
 ... I IBFT=0!(IBFT=1) Q:Z["PROF_ID"  I Z["INST_ID" S $P(Z,U)="PROV. ID"
"RTN","IBCEP9",134,0)
 ... I IBFT=2 Q:Z["INST_ID"
"RTN","IBCEP9",135,0)
 ... W ! S DIR("A")="STARTING '"_$P(IBPOS,U,2)_"' PIECE # OF "_$P(Z,U)_" FIELD: "
"RTN","IBCEP9",136,0)
 ... S DIR(0)="NA"_$S($P(Z,U,4)!($P(Z,U)["PROV. ID")!($P(Z,U)["_ID"):"",1:"O")
"RTN","IBCEP9",137,0)
 ... S X=$$DIR1^IBCEP9B(.DIR,Z,.IBQUIT,.IBQUIT1)
"RTN","IBCEP9",138,0)
 ... Q:IBQUIT1
"RTN","IBCEP9",139,0)
 ... I X>0 D
"RTN","IBCEP9",140,0)
 .... S (DIR("B"),IBPOS($P(Z,U,2)))=X
"RTN","IBCEP9",141,0)
 .... S DIR("A")="ENDING '"_$P(IBPOS,U,2)_"' PIECE # OF "_$P(Z,U)_" FIELD: "
"RTN","IBCEP9",142,0)
 .... S DIR(0)="NA"_$S($P(Z,U,4):"",1:"O")_U_(IBPOS($P(Z,U,2)))_":99"
"RTN","IBCEP9",143,0)
 .... S DIR("?")="JUST PRESS THE ENTER KEY IF THIS FIELD IS CONTAINED IN ONLY 1 PIECE"
"RTN","IBCEP9",144,0)
 .... S Y=$$DIR1^IBCEP9B(.DIR,Z,.IBQUIT,.IBQUIT1)
"RTN","IBCEP9",145,0)
 .... Q:IBQUIT1
"RTN","IBCEP9",146,0)
 .... W ! I Y>0,Y'=IBPOS($P(Z,U,2)) S $P(IBPOS($P(Z,U,2)),U,2)=Y
"RTN","IBCEP9",147,0)
 .. ;
"RTN","IBCEP9",148,0)
 . Q:IBQUIT1
"RTN","IBCEP9",149,0)
 . D READFILE^IBCEP9B
"RTN","IBCEP9",150,0)
 . ;
"RTN","IBCEP9",151,0)
P1 ;
"RTN","IBCEP9",152,0)
 S Z="" F  S Z=$O(^TMP("IBPID_IN",$J,Z)) Q:Z=""  S Z0=0 F  S Z0=$O(^TMP("IBPID_IN",$J,Z,Z0)) Q:'Z0  S Q=$G(^(Z0)) D  G:IBQUIT ENQ
"RTN","IBCEP9",153,0)
 . ;
"RTN","IBCEP9",154,0)
 . I IBSRC="M" D  Q
"RTN","IBCEP9",155,0)
 .. D DISP^IBCEP9B(Q,0,IBINS,IBPTYP,IBFT,IBCT,$G(IBCU),,IBSRC)
"RTN","IBCEP9",156,0)
 .. ; Manually add IDs
"RTN","IBCEP9",157,0)
 .. S IBN=$$DUP(+Z0_";VA(200,",IBINS,$S($G(IBCU)'="":IBCU,1:"*N/A*"),IBFT,IBCT,IBPTYP)
"RTN","IBCEP9",158,0)
 .. I 'IBN D  Q:IBQUIT!(IBN'>0)
"RTN","IBCEP9",159,0)
 ... S IBN=$$ADDID^IBCEP9B(Z0,IBINS,$G(IBCU),IBFT,IBCT,IBPTYP,,.IBQUIT)
"RTN","IBCEP9",160,0)
 .. S DIE="^IBA(355.9,",DR=".07",DA=+IBN D ^DIE
"RTN","IBCEP9",161,0)
 .. I $D(Y)!($P($G(^IBA(355.9,+IBN,0)),U,7)="") D
"RTN","IBCEP9",162,0)
 ... I $P(IBN,U,3) S DA=+IBN,DIK="^IBA(355.9," D ^DIK
"RTN","IBCEP9",163,0)
 ... S DIR(0)="YA",DIR("B")="NO",DIR("A")="DO YOU WANT TO STOP ENTERING PROVIDER IDs?: "
"RTN","IBCEP9",164,0)
 ... S Y=$$DIR(.DIR,.IBQUIT,.IBQUIT1,,1,1)
"RTN","IBCEP9",165,0)
 ... I Y=1 S IBQUIT=1
"RTN","IBCEP9",166,0)
 .. S IBID=$P($G(^IBA(355.9,+IBN,0)),U,7)
"RTN","IBCEP9",167,0)
 .. S:$L(IBID) ^TMP("IBPID_IN",$J,U,Z0,"INST_ID")=IBID
"RTN","IBCEP9",168,0)
 .. I IBID="" K ^TMP("IBPID_IN",$J,U,Z0)
"RTN","IBCEP9",169,0)
 .. I IBQUIT=1 F  S Z0=$O(^TMP("IBPID_IN",$J,U,Z0)) Q:Z0=""  K ^TMP("IBPID_IN",$J,U,Z0) ; user wants to stop, remove all remaining names from list
"RTN","IBCEP9",170,0)
 . ;
"RTN","IBCEP9",171,0)
 . S IBOK=1
"RTN","IBCEP9",172,0)
 . N IBX,IBID
"RTN","IBCEP9",173,0)
 . M IBX=^TMP("IBPID_IN",$J,Z,Z0)
"RTN","IBCEP9",174,0)
 . I IBSRC="F" S IBID=$S(IBFT=0!(IBFT=1):$G(IBX("INST_ID")),1:$G(IBX("PROF_ID")))
"RTN","IBCEP9",175,0)
 . I $G(IBVERIFY) D  ; Display record, ask OK to file id's
"RTN","IBCEP9",176,0)
 .. D DISP^IBCEP9B(Q,0,IBINS,IBPTYP,IBFT,IBCT,$G(IBCU),,IBSRC)
"RTN","IBCEP9",177,0)
 .. W !,"PROVIDER ID: ",IBID
"RTN","IBCEP9",178,0)
 .. S DIR("A")="OK TO FILE THIS ID FOR THIS PROVIDER?: ",DIR(0)="YA",DIR("B")="NO"
"RTN","IBCEP9",179,0)
 .. S Y=$$DIR(.DIR,,,,1,1)
"RTN","IBCEP9",180,0)
 .. I Y'=1 D  Q  ; Send to error array
"RTN","IBCEP9",181,0)
 ... S IBOK=0
"RTN","IBCEP9",182,0)
 ... S ^TMP("IBPID-ERR",$J,2,$P(IBX,U),$P(IBX,U,2)_" ","PROV ID")=IBID
"RTN","IBCEP9",183,0)
 ... S ^TMP("IBPID_IN",$J,U,Z0,0)="NO PRINT"
"RTN","IBCEP9",184,0)
 ... N Z1
"RTN","IBCEP9",185,0)
 ... S Z1="" F  S Z1=$O(IBX(Z1)) Q:Z1=""  I $G(IBX(Z1))'="",Z1'["_ID" S ^TMP("IBPID-ERR",$J,2,$P(IBX,U),$P(IBX,U,2)_" ",Z1)=IBX(Z1)
"RTN","IBCEP9",186,0)
 . I IBOK D  ; Add/update the record
"RTN","IBCEP9",187,0)
 .. I IBSRC="F" D
"RTN","IBCEP9",188,0)
 ... I IBID'="" D
"RTN","IBCEP9",189,0)
 .... S IBN=$$ADDID^IBCEP9B(+Z0,IBINS,$G(IBCU),IBFT,IBCT,IBPTYP,,.IBQUIT)
"RTN","IBCEP9",190,0)
 .... I IBQUIT D:IBN>0  Q
"RTN","IBCEP9",191,0)
 ..... S DA=+IBN,DIK="^IBA(355.9," D ^DIK
"RTN","IBCEP9",192,0)
 .... I IBN>0 S DIE="^IBA(355.9,",DA=+IBN,DR=".07////"_IBID D ^DIE
"RTN","IBCEP9",193,0)
 .. ;
"RTN","IBCEP9",194,0)
 ;
"RTN","IBCEP9",195,0)
ENQ ; Print report, exit
"RTN","IBCEP9",196,0)
 I $G(IBINS) D
"RTN","IBCEP9",197,0)
 . D COPY^IBCEPCID(IBINS)
"RTN","IBCEP9",198,0)
 . D UNLOCK^IBCEP9B(IBINS)
"RTN","IBCEP9",199,0)
 ;
"RTN","IBCEP9",200,0)
 I ($D(^TMP("IBPID-ERR",$J)))!($D(^TMP("IBPID_IN",$J))) D
"RTN","IBCEP9",201,0)
 . N %ZIS,ZTSAVE,ZTRTN,ZTDESC,IBDUZ
"RTN","IBCEP9",202,0)
 . S IBDUZ=$G(DUZ)
"RTN","IBCEP9",203,0)
 . S %ZIS="QM" D ^%ZIS Q:POP
"RTN","IBCEP9",204,0)
 . I $D(IO("Q")) K IO("Q") D  D ^%ZTLOAD K ZTSK D HOME^%ZIS Q
"RTN","IBCEP9",205,0)
 .. S ZTRTN="PRTERR^IBCEP9B",ZTSAVE("^TMP(""IBPID-ERR"",$J,")=""
"RTN","IBCEP9",206,0)
 .. S ZTSAVE("^TMP(""IBPID_IN"",$J,")="",ZTSAVE("IB*")=""
"RTN","IBCEP9",207,0)
 .. S ZTDESC="IB - PROVIDER ID BATCH UPDATE ERROR LOG"
"RTN","IBCEP9",208,0)
 . U IO
"RTN","IBCEP9",209,0)
 . D PRTERR^IBCEP9B
"RTN","IBCEP9",210,0)
 K ^TMP("IBPID_IN",$J),^TMP("IBPID-ERR",$J),^TMP("IBPID",$J)
"RTN","IBCEP9",211,0)
 U IO(0)
"RTN","IBCEP9",212,0)
 Q
"RTN","IBCEP9",213,0)
 ;
"RTN","IBCEP9",214,0)
DUP(IBPRV,IBINS,IBCU,IBFT,IBCT,IBPTYP) ; Check if provider id record already exists in file 355.9
"RTN","IBCEP9",215,0)
 Q +$O(^IBA(355.9,"AUNIQ",IBPRV,IBINS,IBCU,IBFT,IBCT,IBPTYP,0))
"RTN","IBCEP9",216,0)
 ;
"RTN","IBCEP9",217,0)
ERREOF ; Traps EOF error on file read for non-DSM systems
"RTN","IBCEP9",218,0)
 N IBERROR S IBERROR=$$EC^%ZOSV
"RTN","IBCEP9",219,0)
 I IBERROR["ENDOFFILE" D CLOSE(.IBOPEN) G ENQ
"RTN","IBCEP9",220,0)
 D ^%ZTER
"RTN","IBCEP9",221,0)
 Q
"RTN","IBCEP9",222,0)
 ;
"RTN","IBCEP9",223,0)
CLOSE(IBOPEN) ; Close file
"RTN","IBCEP9",224,0)
 D CLOSE^%ZISH("IBINFILE") S IBOPEN=0
"RTN","IBCEP9",225,0)
 Q
"RTN","IBCEP9",226,0)
 ;
"RTN","IBCEP9",227,0)
DIR(DIR,IBQUIT,IBQUIT1,X,IBW1,IBW2) ; Standard call to ^DIR
"RTN","IBCEP9",228,0)
 ;  Inputs DIR array
"RTN","IBCEP9",229,0)
 ;  Returns IBQUIT,IBQUIT1,X if passed by reference
"RTN","IBCEP9",230,0)
 ;    AND
"RTN","IBCEP9",231,0)
 ;      FUNCTION returns the value of Y
"RTN","IBCEP9",232,0)
 ;  IBW1 = 1 if initial write ! should be done
"RTN","IBCEP9",233,0)
 ;  IBW2 = 1 if last write ! should be done
"RTN","IBCEP9",234,0)
 N DIROUT,DTOUT,DUOUT,DA
"RTN","IBCEP9",235,0)
 W:$G(IBW1) ! D ^DIR K DIR W:$G(IBW2) !
"RTN","IBCEP9",236,0)
 S (IBQUIT,IBQUIT1)=0
"RTN","IBCEP9",237,0)
 S DIR("?")="Enter '^' to back up one prompt or '^^' to exit the option"
"RTN","IBCEP9",238,0)
 I $D(DIROUT) S (IBQUIT,IBQUIT1)=1
"RTN","IBCEP9",239,0)
 I $D(DTOUT)!$D(DUOUT) S IBQUIT1=1
"RTN","IBCEP9",240,0)
 Q Y
"RTN","IBCEP9",241,0)
 ;
"RTN","IBCEP9",242,0)
ERR ; Error list
"RTN","IBCEP9",243,0)
 ;; INVALID OR MISSING SSN - NO PROVIDER MATCH FOUND
"RTN","IBCEP9",244,0)
 ;; NO UPDATE PER USER REQUEST
"RTN","IBCEP9",245,0)
 ;;
"RTN","IBCEPB")
0^63^B7208459^B7598816
"RTN","IBCEPB",1,0)
IBCEPB ;ALB/WCJ - Insurance company ID parameters ;22-DEC-2005
"RTN","IBCEPB",2,0)
 ;;2.0;INTEGRATED BILLING;**320,348,349,400,516,592**;21-MAR-94;Build 58
"RTN","IBCEPB",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEPB",4,0)
EN ; -- main entry point for IBCE INSCO ID MAINT
"RTN","IBCEPB",5,0)
 D EN^VALM("IBCE INSCO ID MAINT")
"RTN","IBCEPB",6,0)
 Q
"RTN","IBCEPB",7,0)
 ;
"RTN","IBCEPB",8,0)
HDR ; -- header code
"RTN","IBCEPB",9,0)
 N PCF,PCDISP
"RTN","IBCEPB",10,0)
 I '$D(IBCNS) N IBCNS S IBCNS=IBINS
"RTN","IBCEPB",11,0)
 S PCF=$P($G(^DIC(36,+IBCNS,3)),U,13),PCDISP=$S(PCF="P":"(Parent)",1:"")
"RTN","IBCEPB",12,0)
 S VALMHDR(1)="Insurance Co: "_$P($G(^DIC(36,+IBCNS,0)),U)_PCDISP
"RTN","IBCEPB",13,0)
 Q
"RTN","IBCEPB",14,0)
 ;
"RTN","IBCEPB",15,0)
INIT ; Initialize
"RTN","IBCEPB",16,0)
 D CLEAN^VALM10
"RTN","IBCEPB",17,0)
 I '$D(IBCNS) N IBCNS S IBCNS=IBINS
"RTN","IBCEPB",18,0)
 N IBLCT
"RTN","IBCEPB",19,0)
 S IBLCT=0
"RTN","IBCEPB",20,0)
 ; Display the list
"RTN","IBCEPB",21,0)
 D SET1(.IBLCT,"Attending/Rendering Provider Secondary ID")
"RTN","IBCEPB",22,0)
 D SET1(.IBLCT,"Default ID (1500): "_$$GET1^DIQ(36,IBCNS,4.01))
"RTN","IBCEPB",23,0)
 D SET1(.IBLCT,"Default ID (UB-04): "_$$GET1^DIQ(36,IBCNS,4.02))
"RTN","IBCEPB",24,0)
 D SET1(.IBLCT,"Require ID on Claim: "_$$GET1^DIQ(36,IBCNS,4.03))
"RTN","IBCEPB",25,0)
 D SET1(.IBLCT," ")
"RTN","IBCEPB",26,0)
 D SET1(.IBLCT,"Referring Provider Secondary ID")
"RTN","IBCEPB",27,0)
 D SET1(.IBLCT,"Default ID (1500): "_$$GET1^DIQ(36,IBCNS,4.04))
"RTN","IBCEPB",28,0)
 D SET1(.IBLCT,"Require ID on Claim: "_$$GET1^DIQ(36,IBCNS,4.05))
"RTN","IBCEPB",29,0)
 D SET1(.IBLCT," ")
"RTN","IBCEPB",30,0)
 D SET1(.IBLCT,"Billing Provider Secondary IDs")
"RTN","IBCEPB",31,0)
 D SET1(.IBLCT,"Use Att/Rend ID as Billing Provider Sec. ID (1500)?: "_$$GET1^DIQ(36,IBCNS,4.06))
"RTN","IBCEPB",32,0)
 D SET1(.IBLCT,"Use Att/Rend ID as Billing Provider Sec. ID (UB-04)?: "_$$GET1^DIQ(36,IBCNS,4.08))
"RTN","IBCEPB",33,0)
 D SET1(.IBLCT,"Transmit no Billing Provider Sec ID for the following Electronic Plan Types:")
"RTN","IBCEPB",34,0)
 D LIST^DIC(36.013,","_IBCNS_",",".01",,10,,,,,,"TAR","ERR")
"RTN","IBCEPB",35,0)
 F I=1:1:+$G(TAR("DILIST",0)) D
"RTN","IBCEPB",36,0)
 . D SET1(.IBLCT,TAR("DILIST",1,I))
"RTN","IBCEPB",37,0)
 D SET1(.IBLCT," ")
"RTN","IBCEPB",38,0)
 ;JWS;IB*2.0*592;This header was left around after the 516 patch change below, not necessary
"RTN","IBCEPB",39,0)
 ;D SET1(.IBLCT,"Billing Provider/Service Facility")
"RTN","IBCEPB",40,0)
 ;S IBCNS4=$G(^DIC(36,+IBCNS,4))
"RTN","IBCEPB",41,0)
 ; MRD;IB*2.0*516 - Marked fields 4.07, 4.11, 4.12 and 4.13 for
"RTN","IBCEPB",42,0)
 ; deletion and removed all references to them.
"RTN","IBCEPB",43,0)
 ;D SET1(.IBLCT,"Always use main VAMC as Billing Provider (1500)?: "_$$EXPAND^IBTRE(36,4.11,+$P(IBCNS4,U,11)))
"RTN","IBCEPB",44,0)
 ;D SET1(.IBLCT,"Always use main VAMC as Billing Provider (UB-04)?: "_$$EXPAND^IBTRE(36,4.12,+$P(IBCNS4,U,12)))
"RTN","IBCEPB",45,0)
 ;I $P(IBCNS4,U,11)!($P(IBCNS4,U,12)) D
"RTN","IBCEPB",46,0)
 ;.D SET1(.IBLCT,"Send VA Lab/Facility IDs or Facility Data for VAMC?: "_$$EXPAND^IBTRE(36,4.07,+$P(IBCNS4,U,7)))
"RTN","IBCEPB",47,0)
 ;.D SET1(.IBLCT,"Use the Billing Prov (VAMC) Name and Street Address?: "_$$EXPAND^IBTRE(36,4.13,+$P(IBCNS4,U,13)))
"RTN","IBCEPB",48,0)
 ;.Q
"RTN","IBCEPB",49,0)
 ;
"RTN","IBCEPB",50,0)
 S VALMBG=1,VALMCNT=IBLCT
"RTN","IBCEPB",51,0)
 Q
"RTN","IBCEPB",52,0)
 ;
"RTN","IBCEPB",53,0)
SET1(IBLCT,TEXT,IBCT) ;
"RTN","IBCEPB",54,0)
 S IBLCT=IBLCT+1 D SET^VALM10(IBLCT,TEXT)
"RTN","IBCEPB",55,0)
 Q
"RTN","IBCEPB",56,0)
 ;
"RTN","IBCEPB",57,0)
EXPND ;
"RTN","IBCEPB",58,0)
 Q
"RTN","IBCEPB",59,0)
HELP ;
"RTN","IBCEPB",60,0)
 Q
"RTN","IBCEPB",61,0)
EXIT ;
"RTN","IBCEPB",62,0)
 D CLEAN^VALM10
"RTN","IBCEPB",63,0)
 Q
"RTN","IBCEPB",64,0)
 ;
"RTN","IBCEPB",65,0)
IDPARAM ;
"RTN","IBCEPB",66,0)
 D FULL^VALM1
"RTN","IBCEPB",67,0)
 N DIE,DA,DR
"RTN","IBCEPB",68,0)
 I '$D(IBCNS) N IBCNS S IBCNS=IBINS
"RTN","IBCEPB",69,0)
 S DIE="^DIC(36,",(DA,Y)=IBCNS,DR="[IBEDIT INS CO1]"
"RTN","IBCEPB",70,0)
 I '$D(IBY) N IBY S IBY=",12,"
"RTN","IBCEPB",71,0)
 D ^DIE K DIE
"RTN","IBCEPB",72,0)
 K ^TMP("IBCE_PRVFAC_MAINT",$J)
"RTN","IBCEPB",73,0)
 D INIT
"RTN","IBCEPB",74,0)
 S VALMBCK="R"
"RTN","IBCEPB",75,0)
 Q
"RTN","IBCEPB",76,0)
 ;
"RTN","IBCEPB",77,0)
BILLPRVP ;
"RTN","IBCEPB",78,0)
 D FULL^VALM1
"RTN","IBCEPB",79,0)
 D EN^IBCEPC
"RTN","IBCEPB",80,0)
 D INIT
"RTN","IBCEPB",81,0)
 K ^TMP("IBCE_PRVFAC_MAINT",$J)
"RTN","IBCEPB",82,0)
 S VALMBCK="R"
"RTN","IBCEPB",83,0)
 Q
"RTN","IBCEPTC")
0^44^B93542817^B92340697
"RTN","IBCEPTC",1,0)
IBCEPTC ;ALB/TMK - EDI PREVIOUSLY TRANSMITTED CLAIMS ; 4/12/05 11:15am
"RTN","IBCEPTC",2,0)
 ;;2.0;INTEGRATED BILLING;**296,320,348,349,547,592**;21-MAR-94;Build 58
"RTN","IBCEPTC",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEPTC",4,0)
 ;
"RTN","IBCEPTC",5,0)
EN ; Main entrypoint
"RTN","IBCEPTC",6,0)
 ; IBDT1,IBDT2 = last transmit date range to use
"RTN","IBCEPTC",7,0)
 ; IBSORT = primary sort criteria to use B=BATCH #,I=INS CO NAME
"RTN","IBCEPTC",8,0)
 ; IBFORM = form type to limit selection to U=UB-04,C=CMS-1500,J=J430D, OR A=ALL
"RTN","IBCEPTC",9,0)
 ; IBCRIT = the additional sort criteria needed
"RTN","IBCEPTC",10,0)
 ; IBPTCCAN = whether or not to include cancelled claims
"RTN","IBCEPTC",11,0)
 ; IBRCBFPC = whether or not to include force print @ clearinghouse
"RTN","IBCEPTC",12,0)
 ; ^TMP("IB_PREV_CLAIM_INS",$J) = 1 for specific ins co/null for all
"RTN","IBCEPTC",13,0)
 ;                        ^($J,1,ien)="" for ien of each ins co selected
"RTN","IBCEPTC",14,0)
 ;                        ^($J,2,payer ID,ien)="" if selected
"RTN","IBCEPTC",15,0)
 ; IBREP = format output should be put in R=report,S=Listman
"RTN","IBCEPTC",16,0)
 ;
"RTN","IBCEPTC",17,0)
 N DIR,DIC,X,Y,Z,Z0,Z1,IBHOW,IBACT,IBCT,IBREP,IBCRIT,IBDT1,IBDT2,IBLOC
"RTN","IBCEPTC",18,0)
 N IBFORM,IBOK,IBQUIT,IBSORT,IBY,DTOUT,DUOUT,%ZIS,ZTSAVE,ZTRTN,ZTDESC
"RTN","IBCEPTC",19,0)
 N POP,IBPAYER,EDI,INST,PROF,IBPTCCAN,DIROUT,DIRUT,DTOUT,DUOUT,IBRCBFPC
"RTN","IBCEPTC",20,0)
 ;
"RTN","IBCEPTC",21,0)
 W !!,"*** Please Note ***"
"RTN","IBCEPTC",22,0)
 W ?20,"2 '^' are needed to abort this option (^^)"
"RTN","IBCEPTC",23,0)
 W !?20,"1 '^' brings you back to the previous prompt (^)"
"RTN","IBCEPTC",24,0)
 W !
"RTN","IBCEPTC",25,0)
 ; IB*2.0*547 add new prompt for locally printed vs. transmitted claims
"RTN","IBCEPTC",26,0)
 S DIR(0)="SA^P:Printed;T:Transmitted",DIR("A")="Run report for (P)rinted or (T)ransmitted claims?: ",DIR("B")="Transmitted"
"RTN","IBCEPTC",27,0)
 D ^DIR K DIR
"RTN","IBCEPTC",28,0)
 I $D(DTOUT)!$D(DUOUT) G ENQ
"RTN","IBCEPTC",29,0)
 ; Set a flag here to indicate user wants locally printed claims and use that to control how the rest of the prompts act.
"RTN","IBCEPTC",30,0)
 S IBLOC=$S(Y="T":"",1:1)
"RTN","IBCEPTC",31,0)
 ;
"RTN","IBCEPTC",32,0)
Q1 ;
"RTN","IBCEPTC",33,0)
 W !
"RTN","IBCEPTC",34,0)
 ;S DIR(0)="SA^C:Claim;B:Batch;L:List",DIR("A")="Select By: (C)laim, (B)atch or see a (L)ist to pick from?: ",DIR("B")="List"
"RTN","IBCEPTC",35,0)
 S DIR(0)="SA^C:Claim;"_$S(IBLOC:"",1:"B:Batch;")_"L:List",DIR("A")="Select By: (C)laim"_$S(IBLOC:"",1:", (B)atch")_" or see a (L)ist to pick from?: ",DIR("B")="List"
"RTN","IBCEPTC",36,0)
 D ^DIR K DIR
"RTN","IBCEPTC",37,0)
 I $D(DTOUT)!$D(DUOUT) G ENQ
"RTN","IBCEPTC",38,0)
 S IBHOW=Y
"RTN","IBCEPTC",39,0)
 I IBLOC=1 W !,"Previously printed claims to a payer that does not accept EDI are omitted."
"RTN","IBCEPTC",40,0)
 I IBHOW="L" G Q1A
"RTN","IBCEPTC",41,0)
 ;
"RTN","IBCEPTC",42,0)
 S IBQUIT=0,IBCT=0
"RTN","IBCEPTC",43,0)
 K ^TMP($J,IBHOW)
"RTN","IBCEPTC",44,0)
 F  D  Q:IBQUIT
"RTN","IBCEPTC",45,0)
 .;I IBHOW="C" S DIR("A")="Select a"_$S(IBCT:"nother",1:"")_" Claim: ",DIR(0)="PA^364:AEMQZ",DIR("S")="I '$P(^(0),U,7),'$O(^IBA(364,""B"",+^(0),Y))"
"RTN","IBCEPTC",46,0)
 . I IBHOW="C",IBLOC="" S DIR("A")="Select a"_$S(IBCT:"nother",1:"")_" Claim: ",DIR(0)="PA^364:AEMQZ",DIR("S")="I '$P(^(0),U,7),'$O(^IBA(364,""B"",+^(0),Y))"
"RTN","IBCEPTC",47,0)
 . I IBHOW="C",IBLOC=1 S DIR("A")="Select a"_$S(IBCT:"nother",1:"")_" Locally Printed Claim: ",DIR(0)="PA^399:AEMQZ",DIR("S")="I '$D(^IBA(364,""B"",Y)),$$INSOK^IBCEF4(+$$CURR^IBCEF2(Y))"
"RTN","IBCEPTC",48,0)
 . I IBHOW="B" S DIR("A")="Select a"_$S(IBCT:"nother",1:"")_" Batch: ",DIR(0)="PA^IBA(364.1,:AEMQ^W ""  "",$P(^(0),U,3),"" Claims""",DIR("S")="I '$P(^(0),U,14)"
"RTN","IBCEPTC",49,0)
 . S DIR("?")="^D SELDSP^IBCEPTC(IBHOW)"
"RTN","IBCEPTC",50,0)
 . S:IBCT $P(DIR(0),U)=$P(DIR(0),U)_"O" ; Optional prompt after one is selected
"RTN","IBCEPTC",51,0)
 . D ^DIR K DIR
"RTN","IBCEPTC",52,0)
 . I Y'>0 S IBQUIT=$S(X="^":2,X="^^":3,1:1) Q
"RTN","IBCEPTC",53,0)
 . S IBY=$S(IBHOW="C":+Y,1:""),Y=$S(IBHOW="C":+Y(0),1:Y) S:IBLOC=1 Y=IBY
"RTN","IBCEPTC",54,0)
 . I '$D(^TMP($J,IBHOW,+Y)) S IBCT=IBCT+1,^TMP($J,IBHOW,+Y)=IBY
"RTN","IBCEPTC",55,0)
 ;
"RTN","IBCEPTC",56,0)
 G:IBQUIT=3 ENQ
"RTN","IBCEPTC",57,0)
 G:IBQUIT=2!'$O(^TMP($J,IBHOW,0)) Q1
"RTN","IBCEPTC",58,0)
 S Z=0
"RTN","IBCEPTC",59,0)
 I IBHOW="C" F  S Z=$O(^TMP($J,"C",Z)) Q:'Z  S ^TMP("IB_PREV_CLAIM_SELECT",$J,Z,0)=^TMP($J,"C",Z)
"RTN","IBCEPTC",60,0)
 I IBHOW="B" S (Z,IBCT)=0 F  S Z=$O(^TMP($J,"B",Z)) Q:'Z  D
"RTN","IBCEPTC",61,0)
 . S Z0=0 F  S Z0=$O(^IBA(364,"C",Z,Z0)) Q:'Z0  S Z1=+$G(^IBA(364,Z0,0)) I Z1,'$D(^TMP("IB_PREV_CLAIM_SELECT",$J,Z1,0)) S ^(0)=Z0,IBCT=IBCT+1
"RTN","IBCEPTC",62,0)
 S ^TMP("IB_PREV_CLAIM_SELECT",$J)=IBCT
"RTN","IBCEPTC",63,0)
 D RESUB^IBCEPTC3
"RTN","IBCEPTC",64,0)
 G ENQ
"RTN","IBCEPTC",65,0)
 ;
"RTN","IBCEPTC",66,0)
Q1A K ^TMP("IB_PREV_CLAIM_INS",$J)
"RTN","IBCEPTC",67,0)
 S DIR(0)="SA^A:All Payers;S:Selected Payers"
"RTN","IBCEPTC",68,0)
 S DIR("A")="Run for (A)ll Payers or (S)elected Payers?: " S DIR("B")="Selected Payers"
"RTN","IBCEPTC",69,0)
 W !!,"PAYER SELECTION:" D ^DIR K DIR
"RTN","IBCEPTC",70,0)
 I X="^^" G ENQ
"RTN","IBCEPTC",71,0)
 I $D(DTOUT)!$D(DUOUT) G Q1
"RTN","IBCEPTC",72,0)
 ;
"RTN","IBCEPTC",73,0)
 I Y="A" S ^TMP("IB_PREV_CLAIM_INS",$J)="" G Q2
"RTN","IBCEPTC",74,0)
 ;
"RTN","IBCEPTC",75,0)
 ; esg - 11/21/05 - patch 320 question
"RTN","IBCEPTC",76,0)
 W !
"RTN","IBCEPTC",77,0)
 S DIR(0)="Y",DIR("A")="   Include all payers with the same electronic Payer ID",DIR("B")="Yes" D ^DIR K DIR
"RTN","IBCEPTC",78,0)
 I $D(DIROUT) G ENQ
"RTN","IBCEPTC",79,0)
 I $D(DIRUT) G Q1A
"RTN","IBCEPTC",80,0)
 S IBPAYER=Y
"RTN","IBCEPTC",81,0)
 W !
"RTN","IBCEPTC",82,0)
 ;
"RTN","IBCEPTC",83,0)
 S ^TMP("IB_PREV_CLAIM_INS",$J)=1
"RTN","IBCEPTC",84,0)
 S IBQUIT=0
"RTN","IBCEPTC",85,0)
 F  D  Q:IBQUIT
"RTN","IBCEPTC",86,0)
 . ; IB*2.0*547 allow lookup by EDI#'s using new cross-ref
"RTN","IBCEPTC",87,0)
 . ;S DIC(0)="AEMQ",DIC=36,DIC("A")="   Select Insurance Company: "
"RTN","IBCEPTC",88,0)
 . S DIC(0)="AEMQn",DIC=36,DIC("A")="   Select Insurance Company: "
"RTN","IBCEPTC",89,0)
 . I $O(^TMP("IB_PREV_CLAIM_INS",$J,1,"")) S DIC("A")="   Select Another Insurance Company: "
"RTN","IBCEPTC",90,0)
 . S DIC("W")="D INSLIST^IBCEMCA(Y)"
"RTN","IBCEPTC",91,0)
 . ;D ^DIC K DIC                   ; lookup
"RTN","IBCEPTC",92,0)
 . N D S D="B^AEI^AEP" D MIX^DIC1 K DIC,D
"RTN","IBCEPTC",93,0)
 . I X="^^" S IBQUIT=2 Q          ; user entered "^^"
"RTN","IBCEPTC",94,0)
 . I +Y'>0 S IBQUIT=1 Q           ; user is done
"RTN","IBCEPTC",95,0)
 . W !
"RTN","IBCEPTC",96,0)
 . S ^TMP("IB_PREV_CLAIM_INS",$J,1,+Y)=""
"RTN","IBCEPTC",97,0)
 . I 'IBPAYER Q
"RTN","IBCEPTC",98,0)
 . S EDI=$$UP^XLFSTR($G(^DIC(36,+Y,3)))
"RTN","IBCEPTC",99,0)
 . S PROF=$P(EDI,U,2),INST=$P(EDI,U,4)
"RTN","IBCEPTC",100,0)
 . I PROF'="",PROF'["PRNT" S ^TMP("IB_PREV_CLAIM_INS",$J,2,PROF,+Y)=""
"RTN","IBCEPTC",101,0)
 . I INST'="",INST'["PRNT" S ^TMP("IB_PREV_CLAIM_INS",$J,2,INST,+Y)=""
"RTN","IBCEPTC",102,0)
 . Q
"RTN","IBCEPTC",103,0)
 ;
"RTN","IBCEPTC",104,0)
 I IBQUIT=2 G ENQ
"RTN","IBCEPTC",105,0)
 ;
"RTN","IBCEPTC",106,0)
 I '$O(^TMP("IB_PREV_CLAIM_INS",$J,1,0)) D  G Q1A
"RTN","IBCEPTC",107,0)
 . W *7,!!?3,"No payers have been selected.  Please try again."
"RTN","IBCEPTC",108,0)
 . Q
"RTN","IBCEPTC",109,0)
 ;
"RTN","IBCEPTC",110,0)
Q2 ;; JWS;IB*2.0*592 US1108 - Dental EDI 837D / form J430D
"RTN","IBCEPTC",111,0)
 ;IA# 10026
"RTN","IBCEPTC",112,0)
 S DIR(0)="SA^C:CMS-1500;U:UB-04;J:J430D;A:All",DIR("B")="All"
"RTN","IBCEPTC",113,0)
 S DIR("A")="Run for (U)B-04, (C)MS-1500, (J)430D or (A)ll: "
"RTN","IBCEPTC",114,0)
 W !!,"BILL FORM TYPE SELECTION:" D ^DIR K DIR
"RTN","IBCEPTC",115,0)
 I X="^^" G ENQ
"RTN","IBCEPTC",116,0)
 I $D(DTOUT)!$D(DUOUT) G Q1A
"RTN","IBCEPTC",117,0)
 S IBFORM=Y
"RTN","IBCEPTC",118,0)
 ;
"RTN","IBCEPTC",119,0)
Q3 S DIR(0)="DA^0:9999999:EPX",DIR("A")="Start with Date "_$S(IBLOC:"First Printed:  ",1:"Last Transmitted: ")
"RTN","IBCEPTC",120,0)
 ;S DIR("?",1)="This is the earliest date on which a batch that you want to include on this",DIR("?",2)=" report was last transmitted. You may choose a maximum date range of 90 days.",DIR("?")=" "
"RTN","IBCEPTC",121,0)
 S DIR("?",1)="This is the earliest date on which a batch that you want to include on this",DIR("?",2)=" report was "_$S(IBLOC=1:"first printed",1:"last transmitted")_". You may choose a maximum date range of 90 days.",DIR("?")=" "
"RTN","IBCEPTC",122,0)
 ;W !!,"LAST BATCH TRANSMIT DATE RANGE SELECTION:" D ^DIR K DIR
"RTN","IBCEPTC",123,0)
 W !!,$S(IBLOC:"FIRST PRINT",1:"LAST BATCH TRANSMIT")_" DATE RANGE SELECTION:" D ^DIR K DIR
"RTN","IBCEPTC",124,0)
 I X="^^" G ENQ
"RTN","IBCEPTC",125,0)
 I $D(DTOUT)!$D(DUOUT) G Q2
"RTN","IBCEPTC",126,0)
 S IBDT1=Y
"RTN","IBCEPTC",127,0)
 S IBDT2=$$FMADD^XLFDT(IBDT1,90) I IBDT2>DT S IBDT2=DT
"RTN","IBCEPTC",128,0)
 S DIR("?",1)="This is the latest date on which a batch that you want to include on this",DIR("?",2)=" report was "_$S(IBLOC:"first printed",1:"last transmitted")_". You may choose a maximum date range of 90 days.",DIR("?")=" "
"RTN","IBCEPTC",129,0)
 S DIR("B")=$$FMTE^XLFDT(IBDT2,2),DIR(0)="DA^"_IBDT1_":"_IBDT2_":EPX"
"RTN","IBCEPTC",130,0)
 S DIR("A")="Go to Date "_$S(IBLOC:"First Printed",1:"Last Transmitted")_":("_$$FMTE^XLFDT(IBDT1,2)_"-"_$$FMTE^XLFDT(IBDT2,2)_"): " D ^DIR K DIR
"RTN","IBCEPTC",131,0)
 I X="^^" G ENQ
"RTN","IBCEPTC",132,0)
 I $D(DTOUT)!$D(DUOUT) G Q3
"RTN","IBCEPTC",133,0)
 S IBDT2=Y
"RTN","IBCEPTC",134,0)
 ;
"RTN","IBCEPTC",135,0)
Q4 ; Additional selection criteria
"RTN","IBCEPTC",136,0)
 S DIR(0)="SAO^1:MRA Secondary Only;2:Primary Claims Only;3:Secondary Claims Only;4:Claims Previously Printed at Clearinghouse"
"RTN","IBCEPTC",137,0)
 S DIR("A",1)="ADDITIONAL SELECTION CRITERIA:",DIR("A",2)=" ",DIR("A",3)="1 - MRA Secondary Only",DIR("A",4)="2 - Primary Claims Only",DIR("A",5)="3 - Secondary Claims Only"
"RTN","IBCEPTC",138,0)
 S DIR("A",6)=$S(IBLOC:"",1:"4 - Claims Sent to Print at Clearinghouse Only"),DIR("A",7)=" ",DIR("A")="Select Additional Limiting Criteria (optional): "
"RTN","IBCEPTC",139,0)
 S DIR("?")="Select one of the listed criteria to further limit the claims to include"
"RTN","IBCEPTC",140,0)
 W ! D ^DIR K DIR
"RTN","IBCEPTC",141,0)
 I X="^^" G ENQ
"RTN","IBCEPTC",142,0)
 I $D(DTOUT)!$D(DUOUT) G Q3
"RTN","IBCEPTC",143,0)
 S IBCRIT=Y
"RTN","IBCEPTC",144,0)
 ;
"RTN","IBCEPTC",145,0)
Q41 ; Ask user if they want to include cancelled claims
"RTN","IBCEPTC",146,0)
 S DIR(0)="Y",DIR("B")="No",DIR("A")="Would you like to include cancelled claims"
"RTN","IBCEPTC",147,0)
 W ! D ^DIR K DIR
"RTN","IBCEPTC",148,0)
 I X="^^" G ENQ
"RTN","IBCEPTC",149,0)
 I $D(DIRUT) G Q4
"RTN","IBCEPTC",150,0)
 S IBPTCCAN=Y
"RTN","IBCEPTC",151,0)
 ; IB*2.0*547 skip next 2 questions if looking for locally printed claims
"RTN","IBCEPTC",152,0)
 I IBLOC S IBSORT=2,IBRCBFPC=0 G Q6
"RTN","IBCEPTC",153,0)
 ;
"RTN","IBCEPTC",154,0)
Q42 ; Include claims that are forced to print at clearinghouse?
"RTN","IBCEPTC",155,0)
 S DIR(0)="Y",DIR("B")="No",DIR("A")="Would you like to include claims Forced to Print at the Clearinghouse"
"RTN","IBCEPTC",156,0)
 W ! D ^DIR K DIR
"RTN","IBCEPTC",157,0)
 I X="^^" G ENQ
"RTN","IBCEPTC",158,0)
 I $D(DIRUT) G Q41
"RTN","IBCEPTC",159,0)
 S IBRCBFPC=Y
"RTN","IBCEPTC",160,0)
 ;
"RTN","IBCEPTC",161,0)
Q5 S DIR("L",1)="Select one of the following: ",DIR("L",2)=" ",DIR("L",3)=$J("",10)_"1         Batch By Last Transmitted Date (Claims within a Batch)",DIR("L",4)=$J("",10)_"2         Current Payer (Insurance Company)"
"RTN","IBCEPTC",162,0)
 S DIR("L",5)=" "
"RTN","IBCEPTC",163,0)
 S DIR(0)="SA^1:Batch By Last Transmitted Date (Claims within a Batch);2:Current Payer (Insurance Company)",DIR("B")="Current Payer"
"RTN","IBCEPTC",164,0)
 S DIR("A")="Sort By: "
"RTN","IBCEPTC",165,0)
 W ! D ^DIR K DIR
"RTN","IBCEPTC",166,0)
 I X="^^" G ENQ
"RTN","IBCEPTC",167,0)
 I $D(DTOUT)!$D(DUOUT) G Q42
"RTN","IBCEPTC",168,0)
 S IBSORT=Y
"RTN","IBCEPTC",169,0)
 ;
"RTN","IBCEPTC",170,0)
Q6 S DIR(0)="SA^R:Report;S:Screen List"
"RTN","IBCEPTC",171,0)
 S DIR("A")="Do you want a (R)eport or a (S)creen List format?: "
"RTN","IBCEPTC",172,0)
 S DIR("B")="Screen List"
"RTN","IBCEPTC",173,0)
 W ! D ^DIR K DIR
"RTN","IBCEPTC",174,0)
 I X="^^" G ENQ
"RTN","IBCEPTC",175,0)
 I $D(DTOUT)!$D(DUOUT) G Q5
"RTN","IBCEPTC",176,0)
 S IBREP=Y
"RTN","IBCEPTC",177,0)
 ; IB *2.0*547 call new SUB-routine for locally printed claims (not in file 364)
"RTN","IBCEPTC",178,0)
 I IBREP="S",IBLOC D LOC^IBCEPTC0 G ENQ
"RTN","IBCEPTC",179,0)
 ;
"RTN","IBCEPTC",180,0)
 I IBREP="S",'IBLOC D LIST^IBCEPTC0 G ENQ
"RTN","IBCEPTC",181,0)
 ;
"RTN","IBCEPTC",182,0)
Q7 ; Select device
"RTN","IBCEPTC",183,0)
 F  S IBACT=0 D DEVSEL(.IBACT) Q:IBACT
"RTN","IBCEPTC",184,0)
 I IBACT=99 G ENQ
"RTN","IBCEPTC",185,0)
 U IO
"RTN","IBCEPTC",186,0)
 ; IB *2.0*547 call new SUB-routine for locally printed claims (not in file 364)
"RTN","IBCEPTC",187,0)
 D:'IBLOC LIST^IBCEPTC0
"RTN","IBCEPTC",188,0)
 D:IBLOC LOC^IBCEPTC0
"RTN","IBCEPTC",189,0)
 ;
"RTN","IBCEPTC",190,0)
ENQ K ^TMP("IB_PREV_CLAIM_INS",$J),^TMP("IB_PREV_CLAIM_SELECT",$J)
"RTN","IBCEPTC",191,0)
 Q
"RTN","IBCEPTC",192,0)
 ;
"RTN","IBCEPTC",193,0)
DEVSEL(IBACT) ;
"RTN","IBCEPTC",194,0)
 N DIR,POP,X,Y,ZTRTN,ZTSAVE
"RTN","IBCEPTC",195,0)
 W !!,"You will need a 132 column printer for this report!"
"RTN","IBCEPTC",196,0)
 S %ZIS="QM" D ^%ZIS I POP S IBACT=99 G DEVSELQ
"RTN","IBCEPTC",197,0)
 I $G(IOM),IOM<132 S IBOK=1 D  I 'IBOK S IBACT=0 G DEVSELQ
"RTN","IBCEPTC",198,0)
 . S DIR(0)="YA",DIR("A",1)="This report requires output to a 132 column device.",DIR("A",2)="The device you have chosen is only set for "_IOM_".",DIR("A")="Are you sure you want to continue?: ",DIR("B")="No"
"RTN","IBCEPTC",199,0)
 . W ! D ^DIR K DIR
"RTN","IBCEPTC",200,0)
 . I Y'=1 S IBOK=0 W !
"RTN","IBCEPTC",201,0)
 I $D(IO("Q")) D  S IBACT=99 G DEVSELQ
"RTN","IBCEPTC",202,0)
 . K IO("Q")
"RTN","IBCEPTC",203,0)
 . S ZTRTN="LIST^IBCEPTC0",ZTSAVE("IBCRIT(")="",ZTSAVE("IB*")="",ZTSAVE("^TMP(""IB_PREV_CLAIM_INS"",$J)")="",ZTSAVE("^TMP(""IB_PREV_CLAIM_INS"",$J,")="",ZTDESC="IB - Previously Transmitted Claims Report"
"RTN","IBCEPTC",204,0)
 . D ^%ZTLOAD K ZTSK D HOME^%ZIS
"RTN","IBCEPTC",205,0)
 S IBACT=1
"RTN","IBCEPTC",206,0)
DEVSELQ Q
"RTN","IBCEPTC",207,0)
 ;
"RTN","IBCEPTC",208,0)
SELDSP(IBHOW) ; Display list of selected claims/batches
"RTN","IBCEPTC",209,0)
 ; IBHOW = "C" for claims   "B" for batches
"RTN","IBCEPTC",210,0)
 N Z,DIR,CT,QUIT
"RTN","IBCEPTC",211,0)
 I '$O(^TMP($J,IBHOW,0)) Q
"RTN","IBCEPTC",212,0)
 S (CT,QUIT)=0
"RTN","IBCEPTC",213,0)
 W !!,$S(IBHOW="C":"Claims",1:"Batches")," Already Selected:"
"RTN","IBCEPTC",214,0)
 S Z=0 F  S Z=$O(^TMP($J,IBHOW,Z)) Q:'Z!QUIT  S Z0=$G(^(Z)) D  Q:QUIT
"RTN","IBCEPTC",215,0)
 . I IBHOW="C" W !,?3,$P($G(^DGCR(399,Z,0)),U) Q
"RTN","IBCEPTC",216,0)
 . W !,?3,$P($G(^IBA(364.1,Z,0)),U),"  ",$P(^(0),U,3)," Claims"
"RTN","IBCEPTC",217,0)
 . S CT=CT+1
"RTN","IBCEPTC",218,0)
 . I '(CT#10),$O(^TMP($J,IBHOW,Z)) S DIR("A")="Press return for more or '^' to exit ",DIR(0)="EA" W ! D ^DIR K DIR I $D(DTOUT)!$D(DUOUT) S QUIT=1
"RTN","IBCEPTC",219,0)
 W !
"RTN","IBCEPTC",220,0)
 Q
"RTN","IBCEPTC",221,0)
 ;
"RTN","IBCEPTC0")
0^45^B41663325^B40575166
"RTN","IBCEPTC0",1,0)
IBCEPTC0 ;ALB/ESG - EDI PREVIOUSLY TRANSMITTED CLAIMS CONT ; 12/19/05
"RTN","IBCEPTC0",2,0)
 ;;2.0;INTEGRATED BILLING;**320,348,547,592**;21-MAR-94;Build 58
"RTN","IBCEPTC0",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEPTC0",4,0)
 ;
"RTN","IBCEPTC0",5,0)
 Q
"RTN","IBCEPTC0",6,0)
 ;
"RTN","IBCEPTC0",7,0)
LIST ; Queued report format entrypoint
"RTN","IBCEPTC0",8,0)
 ; variables pre-defined: IBREP,IBSORT,IBFORM,IBDT1,IBDT2,
"RTN","IBCEPTC0",9,0)
 ;                        IBCRIT,IBPTCCAN,IBRCBFPC
"RTN","IBCEPTC0",10,0)
 ;  ^TMP("IB_PREV_CLAIM_INS,$J) global
"RTN","IBCEPTC0",11,0)
 K ^TMP("IB_PREV_CLAIM",$J)
"RTN","IBCEPTC0",12,0)
 N IBBDA,IBBDA0,IBCURI,IBDA,IBDT,IBFT,IBIFN,IBS1,IBS2,IBDTX
"RTN","IBCEPTC0",13,0)
 N INCLUDE,EDI,PROF,INST,IB0,IBZ1,DATA,IB364,CURSEQ,IBZ,IBZDAT
"RTN","IBCEPTC0",14,0)
 I IBREP="R" N IBPAGE,IBSTOP,IBHDRDT S (IBPAGE,IBSTOP)=0
"RTN","IBCEPTC0",15,0)
 ;
"RTN","IBCEPTC0",16,0)
 ; evaluate claim transmission data from files 364.1 and 364
"RTN","IBCEPTC0",17,0)
 S IBDT=IBDT1-.1
"RTN","IBCEPTC0",18,0)
 F  S IBDT=$O(^IBA(364.1,"ALT",IBDT)) Q:'IBDT!((IBDT\1)>IBDT2)  S IBBDA=0 F  S IBBDA=$O(^IBA(364.1,"ALT",IBDT,IBBDA)) Q:'IBBDA  D
"RTN","IBCEPTC0",19,0)
 . S IBDTX=IBDT\1
"RTN","IBCEPTC0",20,0)
 . S IBDA=0 F  S IBDA=$O(^IBA(364,"C",IBBDA,IBDA)) Q:'IBDA  D
"RTN","IBCEPTC0",21,0)
 .. D STORE(IBDA,IBBDA,IBDTX,$P($G(^IBA(364,IBDA,0)),U,7)+1)
"RTN","IBCEPTC0",22,0)
 .. Q
"RTN","IBCEPTC0",23,0)
 . Q
"RTN","IBCEPTC0",24,0)
 ;
"RTN","IBCEPTC0",25,0)
 ; evaluate the test transmissions from file 361.4 (SRS 3.2.10.3)
"RTN","IBCEPTC0",26,0)
 S IBDT=IBDT1-.1
"RTN","IBCEPTC0",27,0)
 F  S IBDT=$O(^IBM(361.4,"ALT",IBDT)) Q:'IBDT!(IBDT>IBDT2)  S IBIFN=0 F  S IBIFN=$O(^IBM(361.4,"ALT",IBDT,IBIFN)) Q:'IBIFN  S IBZ1=0 F  S IBZ1=$O(^IBM(361.4,IBIFN,1,IBZ1)) Q:'IBZ1  D
"RTN","IBCEPTC0",28,0)
 . S DATA=$G(^IBM(361.4,IBIFN,1,IBZ1,0)) Q:DATA=""
"RTN","IBCEPTC0",29,0)
 . S IBDTX=$P(DATA,U,1)\1    ; transmit date
"RTN","IBCEPTC0",30,0)
 . Q:IBDTX<IBDT1             ;  too early
"RTN","IBCEPTC0",31,0)
 . Q:IBDTX>IBDT2             ;  too late
"RTN","IBCEPTC0",32,0)
 . S IBBDA=+$P(DATA,U,2)     ; batch ien
"RTN","IBCEPTC0",33,0)
 . Q:'IBBDA
"RTN","IBCEPTC0",34,0)
 . ;
"RTN","IBCEPTC0",35,0)
 . ; attempt to find the corresponding entry in file 364 for this one
"RTN","IBCEPTC0",36,0)
 . S IB364="",CURSEQ=$TR(+$P(DATA,U,4),"123","PST")
"RTN","IBCEPTC0",37,0)
 . S IBZ=" " F  S IBZ=$O(^IBA(364,"B",IBIFN,IBZ),-1) Q:'IBZ  D  Q:IB364
"RTN","IBCEPTC0",38,0)
 .. S IBZDAT=$G(^IBA(364,IBZ,0))
"RTN","IBCEPTC0",39,0)
 .. I $P(IBZDAT,U,8)'=CURSEQ Q      ; no match on payer sequence
"RTN","IBCEPTC0",40,0)
 .. I $F(".X.P.","."_$P(IBZDAT,U,3)_".") Q    ; transmission status must be farther than this
"RTN","IBCEPTC0",41,0)
 .. S IB364=IBZ Q
"RTN","IBCEPTC0",42,0)
 .. Q
"RTN","IBCEPTC0",43,0)
 . ;
"RTN","IBCEPTC0",44,0)
 . I 'IB364 Q      ; need to have an entry in file 364 to proceed
"RTN","IBCEPTC0",45,0)
 . ;
"RTN","IBCEPTC0",46,0)
 . D STORE(IB364,IBBDA,IBDTX,3)
"RTN","IBCEPTC0",47,0)
 . Q
"RTN","IBCEPTC0",48,0)
 ;
"RTN","IBCEPTC0",49,0)
 I IBREP="R" D RPT^IBCEPTC1(IBSORT,IBDT1,IBDT2) G END  ; Output report
"RTN","IBCEPTC0",50,0)
 ;
"RTN","IBCEPTC0",51,0)
 D EN^VALM("IBCE VIEW PREV TRANS"_IBSORT) ; List Manager
"RTN","IBCEPTC0",52,0)
 ;
"RTN","IBCEPTC0",53,0)
END K ^TMP("IB_PREV_CLAIM",$J),^TMP("IB_PREV_CLAIM_INS",$J)
"RTN","IBCEPTC0",54,0)
 Q
"RTN","IBCEPTC0",55,0)
 ;
"RTN","IBCEPTC0",56,0)
LOC ; new sub-routine for locally printed claims (use LIST & STORE tags as a guide)
"RTN","IBCEPTC0",57,0)
 ; Use the existing AP x-ref to narrow down the list of claims by date, then checks for existence in file 364 (EDI TRANSMIT BILL).
"RTN","IBCEPTC0",58,0)
 ; If a claim is NOT in file 364, it is a printed-only claim
"RTN","IBCEPTC0",59,0)
 ; variables pre-defined: IBREP,IBSORT,IBFORM,IBDT1,IBDT2,
"RTN","IBCEPTC0",60,0)
 ;        IBCRIT,IBPTCCAN,IBRCBFPC
"RTN","IBCEPTC0",61,0)
 ;  ^TMP("IB_PREV_CLAIM_INS,$J) global
"RTN","IBCEPTC0",62,0)
 K ^TMP("IB_PREV_CLAIM",$J)
"RTN","IBCEPTC0",63,0)
 N IBBDA,IBBDA0,IBCURI,IBDA,IBDT,IBFT,IBIFN,IBS1,IBS2,IBDTX
"RTN","IBCEPTC0",64,0)
 N INCLUDE,EDI,PROF,INST,IB0,IBZ1,DATA,IB364,CURSEQ,IBZ,IBZDAT
"RTN","IBCEPTC0",65,0)
 I IBREP="R" N IBPAGE,IBSTOP,IBHDRDT S (IBPAGE,IBSTOP)=0
"RTN","IBCEPTC0",66,0)
 S IBDT=IBDT1-.1
"RTN","IBCEPTC0",67,0)
 F  S IBDT=$O(^DGCR(399,"AP",IBDT)) Q:'IBDT!(IBDT>IBDT2)  S IBIFN=0 F  S IBIFN=$O(^DGCR(399,"AP",IBDT,IBIFN)) Q:'IBIFN  D
"RTN","IBCEPTC0",68,0)
 .; if it's in the transmit file it is not a printed claim
"RTN","IBCEPTC0",69,0)
 .Q:$D(^IBA(364,"B",IBIFN))
"RTN","IBCEPTC0",70,0)
 .S IB0=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEPTC0",71,0)
 .S IBFT=$$FT^IBCEF(IBIFN)   ; form type of claim
"RTN","IBCEPTC0",72,0)
 .;JWS;IB*2.0*592 US1108 - Dental EDI 837D / form J430D
"RTN","IBCEPTC0",73,0)
 .I IBFORM'="A",$S(IBFT=3:IBFORM='"U",IBFT=2:IBFORM'="C",IBFT=7:IBFORM'="J",1:1) Q
"RTN","IBCEPTC0",74,0)
 .S IBCURI=$$CURR^IBCEF2(IBIFN) I 'IBCURI Q   ; current ins ien
"RTN","IBCEPTC0",75,0)
 .S EDI=$$UP^XLFSTR($G(^DIC(36,IBCURI,3)))   ; 3 node EDI data
"RTN","IBCEPTC0",76,0)
 .; do not include claims where the ins.co. still cannot transmit electronically
"RTN","IBCEPTC0",77,0)
 .Q:+$P(EDI,U)=0
"RTN","IBCEPTC0",78,0)
 .S PROF=$P(EDI,U,2),INST=$P(EDI,U,4)        ; payer IDs
"RTN","IBCEPTC0",79,0)
 .;
"RTN","IBCEPTC0",80,0)
 .; screen for user selected insurance companies/payers
"RTN","IBCEPTC0",81,0)
 .I +$G(^TMP("IB_PREV_CLAIM_INS",$J)) D  I 'INCLUDE Q
"RTN","IBCEPTC0",82,0)
 ..S INCLUDE=0
"RTN","IBCEPTC0",83,0)
 ..I $D(^TMP("IB_PREV_CLAIM_INS",$J,1,IBCURI)) S INCLUDE=1 Q
"RTN","IBCEPTC0",84,0)
 ..I '$D(^TMP("IB_PREV_CLAIM_INS",$J,2)) Q
"RTN","IBCEPTC0",85,0)
 ..I PROF'="",$D(^TMP("IB_PREV_CLAIM_INS",$J,2,PROF)) S INCLUDE=1 Q
"RTN","IBCEPTC0",86,0)
 ..I INST'="",$D(^TMP("IB_PREV_CLAIM_INS",$J,2,INST)) S INCLUDE=1 Q
"RTN","IBCEPTC0",87,0)
 ..Q
"RTN","IBCEPTC0",88,0)
 .;
"RTN","IBCEPTC0",89,0)
 .I IBCRIT=1,'$$MRASEC^IBCEF4(IBIFN) Q
"RTN","IBCEPTC0",90,0)
 .I IBCRIT=2,($$COBN^IBCEF(IBIFN)>1) Q
"RTN","IBCEPTC0",91,0)
 .I IBCRIT=3,($$COBN^IBCEF(IBIFN)=1) Q
"RTN","IBCEPTC0",92,0)
 .I IBCRIT=4,'$P($G(^DGCR(399,IBIFN,"TX")),U,7) Q
"RTN","IBCEPTC0",93,0)
 .;
"RTN","IBCEPTC0",94,0)
 .; skip cancelled claims conditionally
"RTN","IBCEPTC0",95,0)
 .I $P(IB0,U,13)=7,'IBPTCCAN Q
"RTN","IBCEPTC0",96,0)
 .;
"RTN","IBCEPTC0",97,0)
 .S IBS1=$P($G(^DIC(36,+IBCURI,0)),U)_U_+IBCURI,IBS2=IBDT
"RTN","IBCEPTC0",98,0)
 .;
"RTN","IBCEPTC0",99,0)
 .; Meets all selection criteria - extract to sort global
"RTN","IBCEPTC0",100,0)
 .S:IBS1="" IBS1=" " S:IBS2="" IBS2=" "
"RTN","IBCEPTC0",101,0)
 .I '$D(^TMP("IB_PREV_CLAIM",$J,IBS1)) S ^TMP("IB_PREV_CLAIM",$J,IBS1)=IBIFN
"RTN","IBCEPTC0",102,0)
 .S ^TMP("IB_PREV_CLAIM",$J,IBS1,IBS2,IBIFN)=3 ; 3 = test transmission
"RTN","IBCEPTC0",103,0)
 ;
"RTN","IBCEPTC0",104,0)
 I IBREP="R" D RPT^IBCEPTC1(IBSORT,IBDT1,IBDT2) G END  ; Output report
"RTN","IBCEPTC0",105,0)
 ;
"RTN","IBCEPTC0",106,0)
 D EN^VALM("IBCE VIEW LOC PRINT") ; List Manager, new one for sort =2
"RTN","IBCEPTC0",107,0)
 ;
"RTN","IBCEPTC0",108,0)
 D END
"RTN","IBCEPTC0",109,0)
 Q
"RTN","IBCEPTC0",110,0)
 ;
"RTN","IBCEPTC0",111,0)
STORE(IB364,IBBDA,IBDTX,IBTYP) ; Check and store transmission data
"RTN","IBCEPTC0",112,0)
 ; Parameters
"RTN","IBCEPTC0",113,0)
 ; IB364 - ien to file 364 (claim transmission ien)
"RTN","IBCEPTC0",114,0)
 ; IBBDA - ien to file 364.1 (batch ien)
"RTN","IBCEPTC0",115,0)
 ; IBDTX - fm transmit date (no time) (either from 364.1 or 361.41)
"RTN","IBCEPTC0",116,0)
 ; IBTYP - 1 = transmission data from file 364 (field .07 is live)
"RTN","IBCEPTC0",117,0)
 ;         2 = transmission data from file 364 (field .07 is test)
"RTN","IBCEPTC0",118,0)
 ;         3 = transmission data from file 361.41 (test always)
"RTN","IBCEPTC0",119,0)
 ; Note:
"RTN","IBCEPTC0",120,0)
 ; Variables IBFORM, IBCRIT, IBPTCCAN, IBRCBFPC, and IBSORT are
"RTN","IBCEPTC0",121,0)
 ;     assumed to exist here in this procedure.
"RTN","IBCEPTC0",122,0)
 ;
"RTN","IBCEPTC0",123,0)
 NEW IBIFN,IB0,IBFT,IBCURI,INCLUDE,EDI,PROF,INST,IBBDA0,IBS1,IBS2
"RTN","IBCEPTC0",124,0)
 ;
"RTN","IBCEPTC0",125,0)
 S IBIFN=+$G(^IBA(364,IB364,0))
"RTN","IBCEPTC0",126,0)
 S IB0=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEPTC0",127,0)
 S IBFT=$$FT^IBCEF(IBIFN)   ; form type of claim
"RTN","IBCEPTC0",128,0)
 ;JWS;IB*2.0*592 US1108 - Dental EDI 837D / form J430D
"RTN","IBCEPTC0",129,0)
 I IBFORM'="A",$S(IBFT=3:IBFORM'="U",IBFT=2:IBFORM'="C",IBFT=7:IBFORM'="J",1:1) G STOREX
"RTN","IBCEPTC0",130,0)
 S IBCURI=$$CURR^IBCEF2(IBIFN) I 'IBCURI G STOREX   ; current ins ien
"RTN","IBCEPTC0",131,0)
 S EDI=$$UP^XLFSTR($G(^DIC(36,IBCURI,3)))           ; 3 node EDI data
"RTN","IBCEPTC0",132,0)
 S PROF=$P(EDI,U,2),INST=$P(EDI,U,4)                ; payer IDs
"RTN","IBCEPTC0",133,0)
 ;
"RTN","IBCEPTC0",134,0)
 ; screen for user selected insurance companies/payers
"RTN","IBCEPTC0",135,0)
 I +$G(^TMP("IB_PREV_CLAIM_INS",$J)) D  I 'INCLUDE G STOREX
"RTN","IBCEPTC0",136,0)
 . S INCLUDE=0
"RTN","IBCEPTC0",137,0)
 . I $D(^TMP("IB_PREV_CLAIM_INS",$J,1,IBCURI)) S INCLUDE=1 Q
"RTN","IBCEPTC0",138,0)
 . I '$D(^TMP("IB_PREV_CLAIM_INS",$J,2)) Q
"RTN","IBCEPTC0",139,0)
 . I PROF'="",$D(^TMP("IB_PREV_CLAIM_INS",$J,2,PROF)) S INCLUDE=1 Q
"RTN","IBCEPTC0",140,0)
 . I INST'="",$D(^TMP("IB_PREV_CLAIM_INS",$J,2,INST)) S INCLUDE=1 Q
"RTN","IBCEPTC0",141,0)
 . Q
"RTN","IBCEPTC0",142,0)
 ;
"RTN","IBCEPTC0",143,0)
 I IBCRIT=1,'$$MRASEC^IBCEF4(IBIFN) G STOREX
"RTN","IBCEPTC0",144,0)
 I IBCRIT=2,($$COBN^IBCEF(IBIFN)>1) G STOREX
"RTN","IBCEPTC0",145,0)
 I IBCRIT=3,($$COBN^IBCEF(IBIFN)=1) G STOREX
"RTN","IBCEPTC0",146,0)
 I IBCRIT=4,'$P($G(^DGCR(399,IBIFN,"TX")),U,7) G STOREX
"RTN","IBCEPTC0",147,0)
 ;
"RTN","IBCEPTC0",148,0)
 ; skip cancelled claims conditionally
"RTN","IBCEPTC0",149,0)
 I $P(IB0,U,13)=7,'IBPTCCAN G STOREX
"RTN","IBCEPTC0",150,0)
 ;
"RTN","IBCEPTC0",151,0)
 ; skip claims forced to print at clearinghouse (claim check)
"RTN","IBCEPTC0",152,0)
 I $P($G(^DGCR(399,IBIFN,"TX")),U,8)=2,'IBRCBFPC G STOREX
"RTN","IBCEPTC0",153,0)
 ;
"RTN","IBCEPTC0",154,0)
 ; skip claims forced to print at clearinghouse (payer check)
"RTN","IBCEPTC0",155,0)
 I IBFT=2,PROF["PRNT",'IBRCBFPC G STOREX    ; 1500, prof payer ID
"RTN","IBCEPTC0",156,0)
 I IBFT=3,INST["PRNT",'IBRCBFPC G STOREX    ;   ub, inst payer ID
"RTN","IBCEPTC0",157,0)
 ;
"RTN","IBCEPTC0",158,0)
 S IBBDA0=$G(^IBA(364.1,+IBBDA,0))             ; 0 node of batch
"RTN","IBCEPTC0",159,0)
 ;
"RTN","IBCEPTC0",160,0)
 S IBS1=$S(IBSORT=1:(99999999-IBDTX)_U_$P(IBBDA0,U)_U_$P(IBBDA0,U,14)_U_+$P(IBBDA0,U,5),1:$P($G(^DIC(36,+IBCURI,0)),U)_U_+IBCURI)
"RTN","IBCEPTC0",161,0)
 S IBS2=$S(IBSORT=1:$P(IB0,U,1),1:99999999-IBDTX)
"RTN","IBCEPTC0",162,0)
 ;
"RTN","IBCEPTC0",163,0)
 ; Meets all selection criteria - extract to sort global
"RTN","IBCEPTC0",164,0)
 S:IBS1="" IBS1=" " S:IBS2="" IBS2=" "
"RTN","IBCEPTC0",165,0)
 I '$D(^TMP("IB_PREV_CLAIM",$J,IBS1)) S ^TMP("IB_PREV_CLAIM",$J,IBS1)=$S(IBSORT=1:$$FMTE^XLFDT(IBDTX,"1"),1:IBIFN)
"RTN","IBCEPTC0",166,0)
 S ^TMP("IB_PREV_CLAIM",$J,IBS1,IBS2,IB364)=IBTYP
"RTN","IBCEPTC0",167,0)
 ;
"RTN","IBCEPTC0",168,0)
STOREX ;
"RTN","IBCEPTC0",169,0)
 Q
"RTN","IBCEPTC0",170,0)
 ;
"RTN","IBCEPTC1")
0^123^B19946124^B19060601
"RTN","IBCEPTC1",1,0)
IBCEPTC1 ;ALB/TMK - EDI PREV TRANSMITTED CLAIMS REPORT OUTPUT ;01/20/05
"RTN","IBCEPTC1",2,0)
 ;;2.0;INTEGRATED BILLING;**296,320,547,592**;21-MAR-94;Build 58
"RTN","IBCEPTC1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEPTC1",4,0)
 ;
"RTN","IBCEPTC1",5,0)
RPT(IBSORT,IBDT1,IBDT2) ; Output transmitted claims report
"RTN","IBCEPTC1",6,0)
 ; global ^TMP("IB_PREV_CLAIM",$J,srt1,srt2,ien of entry file 364)=""
"RTN","IBCEPTC1",7,0)
 ; IB*2.0*547 Variable IBLOC is pre-defined (in IBCEPTC)
"RTN","IBCEPTC1",8,0)
 N IBDA,IBIFN,IBPAGE,IBSTOP,IBHDR,IBS1,IBS2,Z,IBZ,IBREP
"RTN","IBCEPTC1",9,0)
 S (IBPAGE,IBSTOP)=0,IBPAGE(0)="",IBPAGE(1)="",IBREP="R"
"RTN","IBCEPTC1",10,0)
 ; IB*2.0*547 adds ability for locally printed as well as transmitted claims
"RTN","IBCEPTC1",11,0)
 S IBHDR=$S(IBLOC:"Printed",1:"Transmitted")_" Claims Report for period covering "_$$FMTE^XLFDT(IBDT1,1)_" thru "_$$FMTE^XLFDT(IBDT2,1)_$J("",14)_$$HTE^XLFDT($H,"1M"),IBHDR=IBHDR_$J("",124-$L(IBHDR))_"Page"
"RTN","IBCEPTC1",12,0)
 S IBS1="" F  S IBS1=$O(^TMP("IB_PREV_CLAIM",$J,IBS1)) Q:IBS1=""  D  Q:IBSTOP
"RTN","IBCEPTC1",13,0)
 . ; First level sort
"RTN","IBCEPTC1",14,0)
 . D:($Y+6)>IOSL!'IBPAGE HDR(IBHDR,IBSORT,.IBPAGE,.IBSTOP) Q:IBSTOP
"RTN","IBCEPTC1",15,0)
 . S IBPAGE(1)=IBS1,IBPAGE(0)="" ; Hold data for hdr repeated on new pg
"RTN","IBCEPTC1",16,0)
 . D HDR1(IBSORT,IBS1,.IBPAGE,.IBSTOP) Q:IBSTOP
"RTN","IBCEPTC1",17,0)
 . ;
"RTN","IBCEPTC1",18,0)
 . S IBPAGE(0)=1
"RTN","IBCEPTC1",19,0)
 . S IBS2="" F  S IBS2=$O(^TMP("IB_PREV_CLAIM",$J,IBS1,IBS2)) Q:IBS2=""!IBSTOP  S IBDA=0 F  S IBDA=$O(^TMP("IB_PREV_CLAIM",$J,IBS1,IBS2,IBDA)) Q:'IBDA!IBSTOP  D
"RTN","IBCEPTC1",20,0)
 .. S IBIFN=$S(IBLOC:+IBDA,1:+$G(^IBA(364,+IBDA,0)))
"RTN","IBCEPTC1",21,0)
 .. ;
"RTN","IBCEPTC1",22,0)
 .. D:($Y+5)>IOSL!'IBPAGE HDR(IBHDR,IBSORT,.IBPAGE,.IBSTOP) Q:IBSTOP
"RTN","IBCEPTC1",23,0)
 .. D WRT^IBCEPTC2(IBS1,IBS2,IBDA,IBIFN,IBSORT,IBREP,"",.IBPAGE,.IBSTOP) Q:IBSTOP
"RTN","IBCEPTC1",24,0)
 . S IBPAGE(0)=""
"RTN","IBCEPTC1",25,0)
 ;
"RTN","IBCEPTC1",26,0)
 G:IBSTOP STOP
"RTN","IBCEPTC1",27,0)
 I 'IBPAGE D WRT^IBCEPTC2("NO PREVIOUSLY "_$S(IBLOC:"PRINTED",1:"TRANSMITTED")_" CLAIMS EXIST TO MATCH THE SEARCH CRITERIA SELECTED","",0,0,IBSORT,IBREP,IBHDR,0,0)
"RTN","IBCEPTC1",28,0)
 ;
"RTN","IBCEPTC1",29,0)
 I $E(IOST,1,2)["C-" K DIR S DIR(0)="E" D ^DIR K DIR
"RTN","IBCEPTC1",30,0)
 ;
"RTN","IBCEPTC1",31,0)
STOP I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCEPTC1",32,0)
 I '$D(ZTQUEUED) W ! D ^%ZISC
"RTN","IBCEPTC1",33,0)
 ;
"RTN","IBCEPTC1",34,0)
 Q
"RTN","IBCEPTC1",35,0)
 ;
"RTN","IBCEPTC1",36,0)
HDR1(IBSORT,IBDATA,IBPAGE,IBSTOP) ; First level report sort headers
"RTN","IBCEPTC1",37,0)
 ; IBSORT = sort type
"RTN","IBCEPTC1",38,0)
 ; IBDATA = data at the 1st sort level
"RTN","IBCEPTC1",39,0)
 I ($Y+11)>IOSL D HDR(IBHDR,IBSORT,.IBPAGE,.IBSTOP) Q:IBSTOP
"RTN","IBCEPTC1",40,0)
 N Z,X,Y,Q
"RTN","IBCEPTC1",41,0)
 I IBSORT=1 D
"RTN","IBCEPTC1",42,0)
 . S Q=$S(IBLOC:"",1:"Batch Number: ")_$P(IBDATA,U,2)_$S('$P(IBDATA,U,4):"",1:"  ** This batch was rejected **")_$S('$P(IBDATA,U,3):"",1:"  ** This batch was a test batch **")
"RTN","IBCEPTC1",43,0)
 . W !!,Q W:$G(IBPAGE(0)) $J("",120-$L(Q)),"(Continued)" W !,"Date Last "_$S(IBLOC:"Printed: ",1:"Transmitted: "),$$FMTE^XLFDT(99999999-IBDATA,1)
"RTN","IBCEPTC1",44,0)
 . S Z="",$P(Z,"=",133)="" W !,Z
"RTN","IBCEPTC1",45,0)
 . ;JWS;IB*2.0*592 - move Type column header over 1 char
"RTN","IBCEPTC1",46,0)
 . W !,"Claim #   Form  Type Seq  Status      A/R  Current Payer",$J("",13),"Payer Address",$J("",17),"Other Payer(s)  Patient Name",!
"RTN","IBCEPTC1",47,0)
 ;
"RTN","IBCEPTC1",48,0)
 I IBSORT=2 D
"RTN","IBCEPTC1",49,0)
 . N IBZ,IBIFN
"RTN","IBCEPTC1",50,0)
 . S IBIFN=""
"RTN","IBCEPTC1",51,0)
 . I IBDATA'="" S IBIFN=+$G(^TMP("IB_PREV_CLAIM",$J,IBDATA))
"RTN","IBCEPTC1",52,0)
 . S Q="Current Payer: "_$P(IBDATA,U)
"RTN","IBCEPTC1",53,0)
 . D F^IBCEF("N-CURR INS CO FULL ADDRESS","IBZ",,IBIFN)
"RTN","IBCEPTC1",54,0)
 . S Q=Q_"  "_$G(IBZ(1))_$S($G(IBZ(1))'="":",",1:"")_" "_$G(IBZ(4))_$S($G(IBZ(4))'="":",",1:"")_" "_$P($G(^DIC(5,+$G(IBZ(5)),0)),U,2)
"RTN","IBCEPTC1",55,0)
 . W !!,Q
"RTN","IBCEPTC1",56,0)
 . I $G(IBPAGE(0)) D
"RTN","IBCEPTC1",57,0)
 .. I $L(Q)>119 S Q="" W !
"RTN","IBCEPTC1",58,0)
 .. W $J("",120-$L(Q)),"(Continued)"
"RTN","IBCEPTC1",59,0)
 . S Z="",$P(Z,"=",133)="" W !,Z
"RTN","IBCEPTC1",60,0)
 . ;JWS;IB*2.0*592; move Type column header over 1 char
"RTN","IBCEPTC1",61,0)
 . W !,"Claim #   Form  Type Seq  Status      A/R    Other Payer(s)",$J("",6),"Patient Name",$J("",10),"Last "_$S(IBLOC:"Printed",1:"Transmit    Batch Number"),!
"RTN","IBCEPTC1",62,0)
 ;
"RTN","IBCEPTC1",63,0)
 Q
"RTN","IBCEPTC1",64,0)
 ;
"RTN","IBCEPTC1",65,0)
HDR(IBHDR,IBSORT,IBPAGE,IBSTOP) ; Report header
"RTN","IBCEPTC1",66,0)
 ;
"RTN","IBCEPTC1",67,0)
 N Z,DIR,X,Y
"RTN","IBCEPTC1",68,0)
 I IBPAGE D  Q:IBSTOP
"RTN","IBCEPTC1",69,0)
 . I $E(IOST,1,2)["C-" K DIR S DIR(0)="E" D ^DIR K DIR S IBSTOP=('Y) Q:IBSTOP
"RTN","IBCEPTC1",70,0)
 . W @IOF
"RTN","IBCEPTC1",71,0)
 S IBPAGE=IBPAGE+1,Z=IBHDR_$J(IBPAGE,4)
"RTN","IBCEPTC1",72,0)
 W !,Z
"RTN","IBCEPTC1",73,0)
 W:IBLOC'=1 !,"** A claim may appear on this report multiple times if it has been transmitted more than once. **"
"RTN","IBCEPTC1",74,0)
 I IBSORT=2,IBLOC'=1 D
"RTN","IBCEPTC1",75,0)
 . W !,"** T indicates the claim was transmitted as a test claim prior to turning on EDI live for the payer. **"
"RTN","IBCEPTC1",76,0)
 . W !,"** R indicates that the batch was rejected. **"
"RTN","IBCEPTC1",77,0)
 I IBPAGE>1,$G(IBPAGE(0)) D HDR1(IBSORT,IBPAGE(1),.IBPAGE,.IBSTOP)
"RTN","IBCEPTC1",78,0)
 Q
"RTN","IBCEPTC1",79,0)
 ;
"RTN","IBCEPTC2")
0^46^B53543437^B52666304
"RTN","IBCEPTC2",1,0)
IBCEPTC2 ;ALB/TMK - EDI PREVIOUSLY TRANSMITTED CLAIMS LIST MGR ;01/20/05
"RTN","IBCEPTC2",2,0)
 ;;2.0;INTEGRATED BILLING;**296,320,348,349,547,592**;21-MAR-94;Build 58
"RTN","IBCEPTC2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEPTC2",4,0)
 ; IA 3337 for file 430.3
"RTN","IBCEPTC2",5,0)
 ; IB*2.0*547 Variable IBLOC is pre-defined (in IBCEPTC)
"RTN","IBCEPTC2",6,0)
 ;
"RTN","IBCEPTC2",7,0)
HDR ;
"RTN","IBCEPTC2",8,0)
 K VALMHDR
"RTN","IBCEPTC2",9,0)
 I IBLOC S VALMHDR(1)="Claims Selected: "_+$G(^TMP("IB_PREV_CLAIM_SELECT",$J))_" (marked with *)" Q
"RTN","IBCEPTC2",10,0)
 S VALMHDR(1)="** A claim may appear multiple times if transmitted more than once. **"
"RTN","IBCEPTC2",11,0)
 ;
"RTN","IBCEPTC2",12,0)
 I $G(IBSORT)=1 D
"RTN","IBCEPTC2",13,0)
 . S VALMHDR(2)="Claims Selected: "_+$G(^TMP("IB_PREV_CLAIM_SELECT",$J))_" (marked with *)"
"RTN","IBCEPTC2",14,0)
 . Q
"RTN","IBCEPTC2",15,0)
 ;
"RTN","IBCEPTC2",16,0)
 I $G(IBSORT)=2 D
"RTN","IBCEPTC2",17,0)
 . S VALMHDR(2)="** T = Test Claim   ** R = Batch Rejected"
"RTN","IBCEPTC2",18,0)
 . S VALMHDR(3)="Claims Selected: "_+$G(^TMP("IB_PREV_CLAIM_SELECT",$J))_" (marked with *)"
"RTN","IBCEPTC2",19,0)
 . Q
"RTN","IBCEPTC2",20,0)
 ;
"RTN","IBCEPTC2",21,0)
 Q
"RTN","IBCEPTC2",22,0)
 ;
"RTN","IBCEPTC2",23,0)
INIT ;
"RTN","IBCEPTC2",24,0)
 S VALMCNT=0,VALMBG=1
"RTN","IBCEPTC2",25,0)
 D BLD
"RTN","IBCEPTC2",26,0)
 Q
"RTN","IBCEPTC2",27,0)
 ;
"RTN","IBCEPTC2",28,0)
BLD ; Build display lines
"RTN","IBCEPTC2",29,0)
 N IBDA,IBS1,IBS2,IBIFN,IB0,IBX,IBCNT,IBLEV1,IBBDA
"RTN","IBCEPTC2",30,0)
 K ^TMP("IB_PREV_CLAIM_LIST",$J),^TMP("IB_PREV_CLAIM_SELECT",$J),^TMP("IB_PREV_CLAIM_BATCH",$J)
"RTN","IBCEPTC2",31,0)
 S IBCNT=0
"RTN","IBCEPTC2",32,0)
 I $O(^TMP("IB_PREV_CLAIM",$J,""))="" D  G BLDQ
"RTN","IBCEPTC2",33,0)
 . S IBX=" ** NO PREVIOUSLY "_$S(IBLOC:"PRINTED",1:"TRANSMITTED")_" CLAIMS EXIST FOR SEARCH CRITERIA SELECTED **"
"RTN","IBCEPTC2",34,0)
 . D WRT(IBX,"",0,0,"","S","",.IBCNT,0)
"RTN","IBCEPTC2",35,0)
 ;
"RTN","IBCEPTC2",36,0)
 S IBS1="" F  S IBS1=$O(^TMP("IB_PREV_CLAIM",$J,IBS1)) Q:IBS1=""  D
"RTN","IBCEPTC2",37,0)
 . ; First level sort
"RTN","IBCEPTC2",38,0)
 . ; for sort by batch, display batch ID and transmit date
"RTN","IBCEPTC2",39,0)
 . I IBSORT=1 D
"RTN","IBCEPTC2",40,0)
 .. S IBLEV1="  Batch: "_$P(IBS1,U,2)_"  Last Transmitted: "_$G(^TMP("IB_PREV_CLAIM",$J,IBS1))
"RTN","IBCEPTC2",41,0)
 .. S IBBDA=+$O(^IBA(364.1,"B",$P(IBS1,U,2),0))
"RTN","IBCEPTC2",42,0)
 .. I $P(IBS1,U,3) S IBLEV1=IBLEV1_" ** Test"
"RTN","IBCEPTC2",43,0)
 .. I $P(IBS1,U,4) S IBLEV1=IBLEV1_" ** Rejected"
"RTN","IBCEPTC2",44,0)
 .. Q
"RTN","IBCEPTC2",45,0)
 . ;
"RTN","IBCEPTC2",46,0)
 . ; for sort by payer, display ins co name and payer address
"RTN","IBCEPTC2",47,0)
 . I IBSORT=2 D
"RTN","IBCEPTC2",48,0)
 .. S IBLEV1="  "_$P(IBS1,U)_"  "_$$CURRINS(+$G(^TMP("IB_PREV_CLAIM",$J,IBS1)),0)
"RTN","IBCEPTC2",49,0)
 .. Q
"RTN","IBCEPTC2",50,0)
 . ;
"RTN","IBCEPTC2",51,0)
 . ; output sort header line
"RTN","IBCEPTC2",52,0)
 . D WRT(IBLEV1,"",0,0,IBSORT,"S","",IBCNT,0) ; Add header line
"RTN","IBCEPTC2",53,0)
 . ;
"RTN","IBCEPTC2",54,0)
 . I IBSORT=1,IBBDA S ^TMP("IB_PREV_CLAIM_BATCH",$J,IBBDA)=VALMCNT
"RTN","IBCEPTC2",55,0)
 . S IBS2="" F  S IBS2=$O(^TMP("IB_PREV_CLAIM",$J,IBS1,IBS2)) Q:IBS2=""  S IBDA=0 F  S IBDA=$O(^TMP("IB_PREV_CLAIM",$J,IBS1,IBS2,IBDA)) Q:'IBDA  D
"RTN","IBCEPTC2",56,0)
 .. N IBX,IBTEST
"RTN","IBCEPTC2",57,0)
 .. ;S IBIFN=+$G(^IBA(364,+IBDA,0)),IB0=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEPTC2",58,0)
 .. S IBIFN=$S(IBLOC:+IBDA,1:+$G(^IBA(364,+IBDA,0))),IB0=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEPTC2",59,0)
 .. S IBX=$P(^TMP("IB_PREV_CLAIM",$J,IBS1,IBS2,IBDA),U,1)
"RTN","IBCEPTC2",60,0)
 .. I IBX=1 S IBTEST=0    ; live 364 transmission
"RTN","IBCEPTC2",61,0)
 .. I IBX=2 S IBTEST=1    ; test 364 transmission
"RTN","IBCEPTC2",62,0)
 .. I IBX=3 S IBTEST=1    ; test 361.4 transmission
"RTN","IBCEPTC2",63,0)
 .. D WRT(IBS1,IBS2,IBDA,IBIFN,IBSORT,"S","",.IBCNT,0,IBTEST)
"RTN","IBCEPTC2",64,0)
 .. I IBSORT=1,IBBDA S ^TMP("IB_PREV_CLAIM_BATCH",$J,IBBDA,VALMCNT)=IBIFN_U_IBCNT
"RTN","IBCEPTC2",65,0)
 .. Q
"RTN","IBCEPTC2",66,0)
 . Q
"RTN","IBCEPTC2",67,0)
 ;
"RTN","IBCEPTC2",68,0)
BLDQ Q
"RTN","IBCEPTC2",69,0)
 ;
"RTN","IBCEPTC2",70,0)
EXIT ; Clean up code
"RTN","IBCEPTC2",71,0)
 ;
"RTN","IBCEPTC2",72,0)
 K ^TMP("IB_PREV_CLAIM_LIST",$J)
"RTN","IBCEPTC2",73,0)
 K ^TMP("IB_PREV_CLAIM_SELECT",$J)
"RTN","IBCEPTC2",74,0)
 K ^TMP("IB_PREV_CLAIM_LIST_DX",$J)
"RTN","IBCEPTC2",75,0)
 K ^TMP("IB_PREV_CLAIM_BATCH",$J)
"RTN","IBCEPTC2",76,0)
 D CLEAR^VALM1
"RTN","IBCEPTC2",77,0)
 Q
"RTN","IBCEPTC2",78,0)
 ;
"RTN","IBCEPTC2",79,0)
WRT(IBS1,IBS2,IBDA,IBIFN,IBSORT,IBREP,IBHDR,IBPAGE,IBSTOP,IBTEST) ; Wrt/output
"RTN","IBCEPTC2",80,0)
 ;
"RTN","IBCEPTC2",81,0)
 N IBX,IB0,Z,IBCNT,ARSTAT
"RTN","IBCEPTC2",82,0)
 S IBCNT=IBPAGE
"RTN","IBCEPTC2",83,0)
 ;
"RTN","IBCEPTC2",84,0)
 I 'IBIFN D  G WRTQ
"RTN","IBCEPTC2",85,0)
 . ;
"RTN","IBCEPTC2",86,0)
 . ; for report output
"RTN","IBCEPTC2",87,0)
 . I IBREP="R" D  Q
"RTN","IBCEPTC2",88,0)
 .. S Z="",$P(Z,"=",133)=""
"RTN","IBCEPTC2",89,0)
 .. D SET(Z,1,IBDA,IBREP,IBHDR,1,0,.IBPAGE,.IBSTOP)
"RTN","IBCEPTC2",90,0)
 .. D SET(IBS1,2,IBDA,IBREP,IBHDR,1,0,.IBPAGE,.IBSTOP)
"RTN","IBCEPTC2",91,0)
 .. Q
"RTN","IBCEPTC2",92,0)
 . ;
"RTN","IBCEPTC2",93,0)
 . ; for ListMan screen output
"RTN","IBCEPTC2",94,0)
 . D SET(IBS1,0,IBDA,IBREP,IBHDR,IBCNT+1,.VALMCNT,.IBPAGE,.IBSTOP)
"RTN","IBCEPTC2",95,0)
 . Q
"RTN","IBCEPTC2",96,0)
 ;
"RTN","IBCEPTC2",97,0)
 S IB0=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEPTC2",98,0)
 S IBX=$$FO^IBCNEUT1($P(IB0,U,1),8)        ; claim#
"RTN","IBCEPTC2",99,0)
 S IBX=IBX_$S(IBSORT=2&$G(IBTEST):"T",1:" ")_" "
"RTN","IBCEPTC2",100,0)
 ;JWS;IB*2.0*592 US1108 - Dental EDI 837D / form J430D
"RTN","IBCEPTC2",101,0)
 S IBX=IBX_$S($P(IB0,U,19)=2:"1500 ",$P(IB0,U,19)=7:"J430D",1:"UB04 ")_" "
"RTN","IBCEPTC2",102,0)
 S Z=$$INPAT^IBCEF(IBIFN) S IBX=IBX_$S(Z:"INPT ",1:"OUTPT")
"RTN","IBCEPTC2",103,0)
 S IBX=IBX_$J($P(IB0,U,21),3)_"  "
"RTN","IBCEPTC2",104,0)
 S Z=$$EXTERNAL^DILFD(399,.13,"",$P(IB0,U,13))
"RTN","IBCEPTC2",105,0)
 S IBX=IBX_$$FO^IBCNEUT1(Z,11)_"  "             ; claim status
"RTN","IBCEPTC2",106,0)
 S ARSTAT=+$P($$BILL^RCJIBFN2(IBIFN),U,2)       ; ien
"RTN","IBCEPTC2",107,0)
 S ARSTAT=$P($G(^PRCA(430.3,ARSTAT,0)),U,2)     ; abbreviation
"RTN","IBCEPTC2",108,0)
 S IBX=IBX_$$FO^IBCNEUT1(ARSTAT,4)              ; a/r status display
"RTN","IBCEPTC2",109,0)
 ;
"RTN","IBCEPTC2",110,0)
 I IBSORT=1 D                    ; sort by batch
"RTN","IBCEPTC2",111,0)
 . N Z,IBZ,IBXDATA
"RTN","IBCEPTC2",112,0)
 . ; Print current payer, payer address, other payers, pat name
"RTN","IBCEPTC2",113,0)
 . D F^IBCEF("N-CURR INSURANCE COMPANY NAME","IBZ",,IBIFN)
"RTN","IBCEPTC2",114,0)
 . S IBX=IBX_$$FO^IBCNEUT1(IBZ,25)_" "                     ; ins co name
"RTN","IBCEPTC2",115,0)
 . S IBX=IBX_$$FO^IBCNEUT1($$CURRINS(IBIFN,1),29)_" "      ; address
"RTN","IBCEPTC2",116,0)
 . K IBZ D F^IBCEF("N-OTH INSURANCE CO. NAME","IBZ",,IBIFN)
"RTN","IBCEPTC2",117,0)
 . S IBX=IBX_$$FO^IBCNEUT1($P($G(IBZ(1)),U,1),15)_" "      ; other payer
"RTN","IBCEPTC2",118,0)
 . S Z=$P($G(^DPT(+$P(IB0,U,2),0)),U,1)
"RTN","IBCEPTC2",119,0)
 . S IBX=IBX_$E(Z,1,18)                       ; patient name
"RTN","IBCEPTC2",120,0)
 . ;
"RTN","IBCEPTC2",121,0)
 . ; set line into list
"RTN","IBCEPTC2",122,0)
 . S IBCNT=IBCNT+1
"RTN","IBCEPTC2",123,0)
 . D SET(.IBX,1,IBDA,IBREP,IBHDR,IBCNT,.VALMCNT,.IBPAGE,.IBSTOP)
"RTN","IBCEPTC2",124,0)
 . S IBX=""
"RTN","IBCEPTC2",125,0)
 . ;
"RTN","IBCEPTC2",126,0)
 . I $G(IBZ(2))'="" D    ; other payer #2 if it exists ;;IB*2.0*592 changed $J("",98) to 99
"RTN","IBCEPTC2",127,0)
 .. S IBX=$J("",99)_$E($P(IBZ(2),U,1),1,15)
"RTN","IBCEPTC2",128,0)
 .. D SET(.IBX,1,IBDA,IBREP,IBHDR,IBCNT,.VALMCNT,.IBPAGE,.IBSTOP)
"RTN","IBCEPTC2",129,0)
 .. Q
"RTN","IBCEPTC2",130,0)
 . Q
"RTN","IBCEPTC2",131,0)
 ;
"RTN","IBCEPTC2",132,0)
 I IBSORT=2 D                    ; sort by payer
"RTN","IBCEPTC2",133,0)
 . N Z,IBZ
"RTN","IBCEPTC2",134,0)
 . S IBX=IBX_"  "
"RTN","IBCEPTC2",135,0)
 . ; Print other payers, patient name, date last trans, batch #, reject flag
"RTN","IBCEPTC2",136,0)
 . D F^IBCEF("N-OTH INSURANCE CO. NAME","IBZ",,IBIFN)
"RTN","IBCEPTC2",137,0)
 . S IBX=IBX_$$FO^IBCNEUT1($P($G(IBZ(1)),U,1),18)_"  "   ; oth payer#1
"RTN","IBCEPTC2",138,0)
 . S Z=$P($G(^DPT(+$P(IB0,U,2),0)),U,1)
"RTN","IBCEPTC2",139,0)
 . S IBX=IBX_$$FO^IBCNEUT1(Z,18)_"    "                  ; patient name
"RTN","IBCEPTC2",140,0)
 . ;
"RTN","IBCEPTC2",141,0)
 . S Z=+$P($G(^IBA(364,+IBDA,0)),U,2) ; Batch ptr
"RTN","IBCEPTC2",142,0)
 . S:IBLOC IBX=IBX_$$FO^IBCNEUT1($$FMTE^XLFDT($P($G(^DGCR(399,IBIFN,"S")),U,14),"1"),17)     ; date last printed *547*
"RTN","IBCEPTC2",143,0)
 . S:'IBLOC IBX=IBX_$$FO^IBCNEUT1($$FMTE^XLFDT($P($G(^IBA(364.1,+Z,1)),U,3)\1,"1"),17)     ; date last transmitted
"RTN","IBCEPTC2",144,0)
 . S:'IBLOC IBX=IBX_$$FO^IBCNEUT1($P($G(^IBA(364.1,Z,0)),U,1),10)   ; batch#
"RTN","IBCEPTC2",145,0)
 . S:IBLOC IBX=IBX_"" ; no batch#
"RTN","IBCEPTC2",146,0)
 . S IBX=IBX_$S($P($G(^IBA(364.1,Z,0)),U,5):" R",1:"")  ; batch rejected flag
"RTN","IBCEPTC2",147,0)
 . ;
"RTN","IBCEPTC2",148,0)
 . ; set line into list
"RTN","IBCEPTC2",149,0)
 . S IBCNT=IBCNT+1
"RTN","IBCEPTC2",150,0)
 . D SET(.IBX,1,IBDA,IBREP,IBHDR,IBCNT,.VALMCNT,.IBPAGE,.IBSTOP)
"RTN","IBCEPTC2",151,0)
 . S IBX=""
"RTN","IBCEPTC2",152,0)
 . ;
"RTN","IBCEPTC2",153,0)
 . I $G(IBZ(2))'="" D       ; other payer#2 if it exists
"RTN","IBCEPTC2",154,0)
 .. S IBX=$J("",45)_$E($P(IBZ(2),U),1,18)
"RTN","IBCEPTC2",155,0)
 .. D SET(.IBX,1,IBDA,IBREP,IBHDR,IBCNT,.VALMCNT,.IBPAGE,.IBSTOP)
"RTN","IBCEPTC2",156,0)
 .. Q
"RTN","IBCEPTC2",157,0)
 . Q
"RTN","IBCEPTC2",158,0)
 ;
"RTN","IBCEPTC2",159,0)
WRTQ I IBREP="S" S IBPAGE=IBCNT
"RTN","IBCEPTC2",160,0)
 Q
"RTN","IBCEPTC2",161,0)
 ;
"RTN","IBCEPTC2",162,0)
SET(IBX,IBLINE,IBDA,IBREP,IBHDR,IBCNT,VALMCNT,IBPAGE,IBSTOP) ;
"RTN","IBCEPTC2",163,0)
 N Q,Z,IBZ
"RTN","IBCEPTC2",164,0)
 S IBZ=IBX,IBX=""
"RTN","IBCEPTC2",165,0)
 I IBREP="R" D  Q
"RTN","IBCEPTC2",166,0)
 . D:($Y+5)>IOSL!'IBPAGE HDR^IBCEPTC1(IBHDR,IBSORT,.IBPAGE,.IBSTOP) D
"RTN","IBCEPTC2",167,0)
 . I IBLINE F Z=1:1:IBLINE W !
"RTN","IBCEPTC2",168,0)
 . W:'IBSTOP IBZ
"RTN","IBCEPTC2",169,0)
 . Q
"RTN","IBCEPTC2",170,0)
 ;
"RTN","IBCEPTC2",171,0)
 ; only display the counter if we have a line with the claim#
"RTN","IBCEPTC2",172,0)
 S VALMCNT=VALMCNT+1
"RTN","IBCEPTC2",173,0)
 I IBDA,$TR($E(IBZ,1,8)," ")'="" S IBZ=$$FO^IBCNEUT1($J(IBCNT,3),6)_IBZ
"RTN","IBCEPTC2",174,0)
 I IBDA,$TR($E(IBZ,1,8)," ")="" S IBZ="      "_IBZ
"RTN","IBCEPTC2",175,0)
 ;
"RTN","IBCEPTC2",176,0)
 S ^TMP("IB_PREV_CLAIM_LIST",$J,VALMCNT,0)=IBZ
"RTN","IBCEPTC2",177,0)
 S ^TMP("IB_PREV_CLAIM_LIST",$J,"IDX",VALMCNT,IBCNT)=""
"RTN","IBCEPTC2",178,0)
 I IBDA,$TR($E(IBZ,1,8)," ")'="" S ^TMP("IB_PREV_CLAIM_LIST_DX",$J,IBCNT)=VALMCNT_U_IBDA
"RTN","IBCEPTC2",179,0)
 Q
"RTN","IBCEPTC2",180,0)
 ;
"RTN","IBCEPTC2",181,0)
CURRINS(IBIFN,TRUNC) ; Returns Current insurance address for given claim
"RTN","IBCEPTC2",182,0)
 ; TRUNC = truncate flag; 1 to truncate the address and city
"RTN","IBCEPTC2",183,0)
 N IBX,IBZ,L1,CITY,ST
"RTN","IBCEPTC2",184,0)
 D F^IBCEF("N-CURR INS CO FULL ADDRESS","IBZ",,IBIFN)
"RTN","IBCEPTC2",185,0)
 S L1=$G(IBZ(1)) I +$G(TRUNC) S L1=$E(L1,1,15)
"RTN","IBCEPTC2",186,0)
 S CITY=$G(IBZ(4)) I +$G(TRUNC) S CITY=$E(CITY,1,10)
"RTN","IBCEPTC2",187,0)
 S ST=$G(IBZ(5))
"RTN","IBCEPTC2",188,0)
 I ST S ST=$P($G(^DIC(5,ST,0)),U,2)
"RTN","IBCEPTC2",189,0)
 S IBX=L1_" "_CITY
"RTN","IBCEPTC2",190,0)
 I CITY'="",ST'="" S IBX=IBX_","_ST
"RTN","IBCEPTC2",191,0)
 E  S IBX=IBX_" "_ST
"RTN","IBCEPTC2",192,0)
 Q IBX
"RTN","IBCEPTC2",193,0)
 ;
"RTN","IBCEPTR")
0^36^B103893317^B102679616
"RTN","IBCEPTR",1,0)
IBCEPTR ;ALB/ESG - Test Claim Messages Report ;28-JAN-2005
"RTN","IBCEPTR",2,0)
 ;;2.0;INTEGRATED BILLING;**296,320,348,349,592**;21-MAR-94;Build 58
"RTN","IBCEPTR",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEPTR",4,0)
 ;
"RTN","IBCEPTR",5,0)
 ; eClaims Plus
"RTN","IBCEPTR",6,0)
 ; Report on Test Claim Transmissions and Status Messages
"RTN","IBCEPTR",7,0)
 ;
"RTN","IBCEPTR",8,0)
EN ; Entry Point
"RTN","IBCEPTR",9,0)
 NEW STOP,IBRMETH,IBRDATA
"RTN","IBCEPTR",10,0)
 D SELECT I STOP G EXIT
"RTN","IBCEPTR",11,0)
 D DEVICE
"RTN","IBCEPTR",12,0)
EXIT ; Exit Point
"RTN","IBCEPTR",13,0)
 Q
"RTN","IBCEPTR",14,0)
 ;
"RTN","IBCEPTR",15,0)
SELECT ; Determine which claim#'s or batch#'s to report on
"RTN","IBCEPTR",16,0)
 NEW DIC,DIR,X,Y,DIRUT,DTOUT,DUOUT,DIROUT,D
"RTN","IBCEPTR",17,0)
 S STOP=0
"RTN","IBCEPTR",18,0)
 W @IOF
"RTN","IBCEPTR",19,0)
 W !!?23,"Test Claim EDI Transmission Report"
"RTN","IBCEPTR",20,0)
 W !!?7,"This report will display EDI transmission data and returned status"
"RTN","IBCEPTR",21,0)
 W !?7,"message data for selected test claims.  You may select test claims"
"RTN","IBCEPTR",22,0)
 W !?7,"by claim number or by batch number or you may search for claims that"
"RTN","IBCEPTR",23,0)
 W !?7,"were transmitted within a date range.",!
"RTN","IBCEPTR",24,0)
 S DIR(0)="SO^C:Claim;B:Batch;D:Date Range (Date Transmitted)"
"RTN","IBCEPTR",25,0)
 S DIR("A")="Selection Method",DIR("B")="D"
"RTN","IBCEPTR",26,0)
 D ^DIR K DIR
"RTN","IBCEPTR",27,0)
 I $D(DIRUT) S STOP=1 G SELECTX
"RTN","IBCEPTR",28,0)
 S IBRMETH=Y
"RTN","IBCEPTR",29,0)
 I IBRMETH'="C",IBRMETH'="B",IBRMETH'="D" S STOP=1 G SELECTX
"RTN","IBCEPTR",30,0)
 ;
"RTN","IBCEPTR",31,0)
 K IBRDATA
"RTN","IBCEPTR",32,0)
 I IBRMETH="C" D
"RTN","IBCEPTR",33,0)
 . F  D  Q:Y'>0
"RTN","IBCEPTR",34,0)
 .. W !
"RTN","IBCEPTR",35,0)
 .. S DIC("A")="Test Claim: "
"RTN","IBCEPTR",36,0)
 .. I $O(IBRDATA("")) S DIC("A")="Another Test Claim: "
"RTN","IBCEPTR",37,0)
 .. S DIC("W")="D CLMLST^IBCEPTR(Y)"
"RTN","IBCEPTR",38,0)
 .. S DIC=361.4,DIC(0)="AEMQ",D="B" D MIX^DIC1
"RTN","IBCEPTR",39,0)
 .. Q:Y'>0
"RTN","IBCEPTR",40,0)
 .. S IBRDATA(+Y)=""
"RTN","IBCEPTR",41,0)
 .. Q
"RTN","IBCEPTR",42,0)
 . Q
"RTN","IBCEPTR",43,0)
 ;
"RTN","IBCEPTR",44,0)
 I IBRMETH="B" D
"RTN","IBCEPTR",45,0)
 . F  D  Q:Y'>0
"RTN","IBCEPTR",46,0)
 .. W !
"RTN","IBCEPTR",47,0)
 .. S DIC("A")="Test Batch: "
"RTN","IBCEPTR",48,0)
 .. I $O(IBRDATA("")) S DIC("A")="Another Test Batch: "
"RTN","IBCEPTR",49,0)
 .. S DIC("S")="I $P(^(0),U,14),$O(^IBM(361.4,""C"",+Y,0))"
"RTN","IBCEPTR",50,0)
 .. S DIC=364.1,DIC(0)="AEMQ",D="B^C" D MIX^DIC1
"RTN","IBCEPTR",51,0)
 .. Q:Y'>0
"RTN","IBCEPTR",52,0)
 .. S IBRDATA(+Y)=""
"RTN","IBCEPTR",53,0)
 .. Q
"RTN","IBCEPTR",54,0)
 . Q
"RTN","IBCEPTR",55,0)
 ;
"RTN","IBCEPTR",56,0)
 I IBRMETH="D" D
"RTN","IBCEPTR",57,0)
 . W !
"RTN","IBCEPTR",58,0)
 . S DIR(0)="DAO^:"_DT_":AEX",DIR("A")="  Earliest Date Claims Transmitted: "
"RTN","IBCEPTR",59,0)
 . D ^DIR K DIR
"RTN","IBCEPTR",60,0)
 . I $D(DIRUT)!'Y Q
"RTN","IBCEPTR",61,0)
 . S IBRDATA(1)=Y
"RTN","IBCEPTR",62,0)
 . W !
"RTN","IBCEPTR",63,0)
 . S DIR(0)="DAO^"_Y_":"_DT_":AEX",DIR("A")="    Latest Date Claims Transmitted: ",DIR("B")="Today"
"RTN","IBCEPTR",64,0)
 . D ^DIR K DIR
"RTN","IBCEPTR",65,0)
 . I $D(DIRUT)!'Y Q
"RTN","IBCEPTR",66,0)
 . S IBRDATA(2)=Y
"RTN","IBCEPTR",67,0)
 . Q
"RTN","IBCEPTR",68,0)
 ;
"RTN","IBCEPTR",69,0)
 I '$O(IBRDATA("")) S STOP=1 G SELECTX
"RTN","IBCEPTR",70,0)
 I IBRMETH="D",'$G(IBRDATA(1)) S STOP=1 G SELECTX
"RTN","IBCEPTR",71,0)
 I IBRMETH="D",'$G(IBRDATA(2)) S STOP=1 G SELECTX
"RTN","IBCEPTR",72,0)
 ;
"RTN","IBCEPTR",73,0)
SELECTX ;
"RTN","IBCEPTR",74,0)
 Q
"RTN","IBCEPTR",75,0)
 ;
"RTN","IBCEPTR",76,0)
DEVICE ; standard device selection
"RTN","IBCEPTR",77,0)
 NEW ZTRTN,ZTDESC,ZTSAVE,POP
"RTN","IBCEPTR",78,0)
 W !!!,"This report is 80 characters wide.",!
"RTN","IBCEPTR",79,0)
 S ZTRTN="COMPILE^IBCEPTR"
"RTN","IBCEPTR",80,0)
 S ZTDESC="Test Claim EDI Transmission Report"
"RTN","IBCEPTR",81,0)
 S ZTSAVE("IBRMETH")=""
"RTN","IBCEPTR",82,0)
 S ZTSAVE("IBRDATA")=""
"RTN","IBCEPTR",83,0)
 D EN^XUTMDEVQ(ZTRTN,ZTDESC,.ZTSAVE,"QM")
"RTN","IBCEPTR",84,0)
DEVX ;
"RTN","IBCEPTR",85,0)
 Q
"RTN","IBCEPTR",86,0)
 ;
"RTN","IBCEPTR",87,0)
COMPILE ; compile the data into a scratch global
"RTN","IBCEPTR",88,0)
 NEW RTN,EXTBCH,IBIFN,BCHIEN,TXDATM
"RTN","IBCEPTR",89,0)
 S RTN="IBCEPTR"
"RTN","IBCEPTR",90,0)
 KILL ^TMP($J,RTN)  ; init scratch global
"RTN","IBCEPTR",91,0)
 ;
"RTN","IBCEPTR",92,0)
 I IBRMETH="C" D    ; claim search
"RTN","IBCEPTR",93,0)
 . S EXTBCH=0
"RTN","IBCEPTR",94,0)
 . S IBIFN=0
"RTN","IBCEPTR",95,0)
 . F  S IBIFN=$O(IBRDATA(IBIFN)) Q:'IBIFN  D STORE(IBIFN)
"RTN","IBCEPTR",96,0)
 . Q
"RTN","IBCEPTR",97,0)
 ;
"RTN","IBCEPTR",98,0)
 I IBRMETH="B" D    ; batch search
"RTN","IBCEPTR",99,0)
 . S BCHIEN=0
"RTN","IBCEPTR",100,0)
 . F  S BCHIEN=$O(IBRDATA(BCHIEN)) Q:'BCHIEN  D
"RTN","IBCEPTR",101,0)
 .. S EXTBCH=$P($G(^IBA(364.1,BCHIEN,0)),U,1)
"RTN","IBCEPTR",102,0)
 .. I EXTBCH="" S EXTBCH="~unknown"
"RTN","IBCEPTR",103,0)
 .. S IBIFN=0
"RTN","IBCEPTR",104,0)
 .. F  S IBIFN=$O(^IBM(361.4,"C",BCHIEN,IBIFN)) Q:'IBIFN  D STORE(IBIFN)
"RTN","IBCEPTR",105,0)
 .. Q
"RTN","IBCEPTR",106,0)
 . Q
"RTN","IBCEPTR",107,0)
 ;
"RTN","IBCEPTR",108,0)
 I IBRMETH="D" D    ; date range search
"RTN","IBCEPTR",109,0)
 . S EXTBCH=0
"RTN","IBCEPTR",110,0)
 . S TXDATM=$O(^IBM(361.4,"ATD",IBRDATA(1)),-1)
"RTN","IBCEPTR",111,0)
 . F  S TXDATM=$O(^IBM(361.4,"ATD",TXDATM)) Q:'TXDATM  Q:(TXDATM\1)>IBRDATA(2)  D
"RTN","IBCEPTR",112,0)
 .. S IBIFN=0
"RTN","IBCEPTR",113,0)
 .. F  S IBIFN=$O(^IBM(361.4,"ATD",TXDATM,IBIFN)) Q:'IBIFN  D STORE(IBIFN)
"RTN","IBCEPTR",114,0)
 .. Q
"RTN","IBCEPTR",115,0)
 . Q
"RTN","IBCEPTR",116,0)
 ;
"RTN","IBCEPTR",117,0)
 D PRINT                           ; print the report
"RTN","IBCEPTR",118,0)
 D ^%ZISC                          ; close the device
"RTN","IBCEPTR",119,0)
 KILL ^TMP($J,RTN)                 ; clean up scratch global
"RTN","IBCEPTR",120,0)
 I $D(ZTQUEUED) S ZTREQ="@"        ; purge the task record
"RTN","IBCEPTR",121,0)
COMPX ;
"RTN","IBCEPTR",122,0)
 Q
"RTN","IBCEPTR",123,0)
 ;
"RTN","IBCEPTR",124,0)
STORE(IBIFN) ; Input = internal bill#; continue compilation
"RTN","IBCEPTR",125,0)
 NEW IB0,CLAIM,IBRTXD0,TXIEN,SMIEN,DATA,TXDTM
"RTN","IBCEPTR",126,0)
 S IB0=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEPTR",127,0)
 S CLAIM=$P(IB0,U,1)  ; external claim#
"RTN","IBCEPTR",128,0)
 I CLAIM="" S CLAIM="~unknown"
"RTN","IBCEPTR",129,0)
 S IBRTXD0=99999999   ; initial value for earliest transmission date
"RTN","IBCEPTR",130,0)
 ;
"RTN","IBCEPTR",131,0)
 I IBRMETH="C" D   ; claim search for transmission data (all)
"RTN","IBCEPTR",132,0)
 . S TXIEN=0
"RTN","IBCEPTR",133,0)
 . F  S TXIEN=$O(^IBM(361.4,IBIFN,1,TXIEN)) Q:'TXIEN  D STORETX(IBIFN,TXIEN)
"RTN","IBCEPTR",134,0)
 . Q
"RTN","IBCEPTR",135,0)
 ;
"RTN","IBCEPTR",136,0)
 I IBRMETH="B" D   ; batch search for transmission data ("C" x-ref)
"RTN","IBCEPTR",137,0)
 . S TXIEN=0
"RTN","IBCEPTR",138,0)
 . F  S TXIEN=$O(^IBM(361.4,"C",BCHIEN,IBIFN,TXIEN)) Q:'TXIEN  D STORETX(IBIFN,TXIEN)
"RTN","IBCEPTR",139,0)
 . Q
"RTN","IBCEPTR",140,0)
 ;
"RTN","IBCEPTR",141,0)
 I IBRMETH="D" D   ; date range search for transmission data ("ATD" xref)
"RTN","IBCEPTR",142,0)
 . S TXIEN=0
"RTN","IBCEPTR",143,0)
 . F  S TXIEN=$O(^IBM(361.4,"ATD",TXDATM,IBIFN,TXIEN)) Q:'TXIEN  D STORETX(IBIFN,TXIEN)
"RTN","IBCEPTR",144,0)
 . Q
"RTN","IBCEPTR",145,0)
 ;
"RTN","IBCEPTR",146,0)
 ; loop thru all returned messages for claim
"RTN","IBCEPTR",147,0)
 S SMIEN=0
"RTN","IBCEPTR",148,0)
 F  S SMIEN=$O(^IBM(361.4,IBIFN,2,SMIEN)) Q:'SMIEN  D
"RTN","IBCEPTR",149,0)
 . S DATA=$G(^IBM(361.4,IBIFN,2,SMIEN,0)) Q:DATA=""   ; received msg data
"RTN","IBCEPTR",150,0)
 . S TXDTM=$P(DATA,U,1) Q:'TXDTM    ; msg rec'd date/time
"RTN","IBCEPTR",151,0)
 . ;
"RTN","IBCEPTR",152,0)
 . ; Batch only: if this status message was received before the
"RTN","IBCEPTR",153,0)
 . ; earliest transmission for this batch, then don't include it
"RTN","IBCEPTR",154,0)
 . I IBRMETH="B",TXDTM'>IBRTXD0 Q
"RTN","IBCEPTR",155,0)
 . ;
"RTN","IBCEPTR",156,0)
 . ; Date range search only:  make sure the date/time the status message
"RTN","IBCEPTR",157,0)
 . ; was received is inside the user specified date range for this report
"RTN","IBCEPTR",158,0)
 . I IBRMETH="D",(TXDTM\1)<IBRDATA(1) Q    ; rec'd too early
"RTN","IBCEPTR",159,0)
 . I IBRMETH="D",(TXDTM\1)>IBRDATA(2) Q    ; rec'd too late
"RTN","IBCEPTR",160,0)
 . ;
"RTN","IBCEPTR",161,0)
 . ; store it
"RTN","IBCEPTR",162,0)
 . M ^TMP($J,RTN,EXTBCH,CLAIM,TXDTM,2,SMIEN)=^IBM(361.4,IBIFN,2,SMIEN)
"RTN","IBCEPTR",163,0)
 . Q
"RTN","IBCEPTR",164,0)
STOREX ;
"RTN","IBCEPTR",165,0)
 Q
"RTN","IBCEPTR",166,0)
 ;
"RTN","IBCEPTR",167,0)
STORETX(IBIFN,TXIEN) ; store transmission info
"RTN","IBCEPTR",168,0)
 NEW DATA,TXDTM
"RTN","IBCEPTR",169,0)
 S DATA=$G(^IBM(361.4,IBIFN,1,TXIEN,0))
"RTN","IBCEPTR",170,0)
 I DATA="" G STTXXX
"RTN","IBCEPTR",171,0)
 S TXDTM=$P(DATA,U,1)   ; transmit date/time
"RTN","IBCEPTR",172,0)
 I 'TXDTM G STTXXX
"RTN","IBCEPTR",173,0)
 I TXDTM<IBRTXD0 S IBRTXD0=TXDTM
"RTN","IBCEPTR",174,0)
 ;
"RTN","IBCEPTR",175,0)
 ; store it
"RTN","IBCEPTR",176,0)
 M ^TMP($J,RTN,EXTBCH,CLAIM,TXDTM,1,TXIEN)=^IBM(361.4,IBIFN,1,TXIEN)
"RTN","IBCEPTR",177,0)
STTXXX ;
"RTN","IBCEPTR",178,0)
 Q
"RTN","IBCEPTR",179,0)
 ;
"RTN","IBCEPTR",180,0)
PRINT ; print the report to the specified device
"RTN","IBCEPTR",181,0)
 NEW MAXCNT,CRT,PAGECNT,STOP,DIR,X,Y,DIRUT,DUOUT,DTOUT,DIROUT
"RTN","IBCEPTR",182,0)
 NEW BATCH,CLAIM,IBIFN,CLMD,TXD,TYPE,IEN
"RTN","IBCEPTR",183,0)
 I IOST["C-" S MAXCNT=IOSL-3,CRT=1
"RTN","IBCEPTR",184,0)
 E  S MAXCNT=IOSL-6,CRT=0
"RTN","IBCEPTR",185,0)
 S PAGECNT=0,STOP=0
"RTN","IBCEPTR",186,0)
 ;
"RTN","IBCEPTR",187,0)
 I '$D(^TMP($J,RTN)) D HEADER W !!!?5,"No Data Found"
"RTN","IBCEPTR",188,0)
 ;
"RTN","IBCEPTR",189,0)
 S BATCH=""
"RTN","IBCEPTR",190,0)
 F  S BATCH=$O(^TMP($J,RTN,BATCH)) Q:BATCH=""  D  Q:STOP
"RTN","IBCEPTR",191,0)
 . D HEADER Q:STOP
"RTN","IBCEPTR",192,0)
 . I BATCH'=0 W !!,"Batch#:  ",BATCH
"RTN","IBCEPTR",193,0)
 . S CLAIM=""
"RTN","IBCEPTR",194,0)
 . F  S CLAIM=$O(^TMP($J,RTN,BATCH,CLAIM)) Q:CLAIM=""  D  Q:STOP
"RTN","IBCEPTR",195,0)
 .. I $Y+2>MAXCNT!'PAGECNT D HEADER Q:STOP
"RTN","IBCEPTR",196,0)
 .. I BATCH=0 W !
"RTN","IBCEPTR",197,0)
 .. W !,"Claim#:  ",CLAIM
"RTN","IBCEPTR",198,0)
 .. S IBIFN=+$O(^DGCR(399,"B",CLAIM,""))
"RTN","IBCEPTR",199,0)
 .. I IBIFN S CLMD=$$BT(IBIFN) W ?18,$E($P(CLMD,U,3),1,20),?40,"(",$P(CLMD,U,1),")"
"RTN","IBCEPTR",200,0)
 .. W !,$$RJ^XLFSTR("",80,"-")
"RTN","IBCEPTR",201,0)
 .. ;
"RTN","IBCEPTR",202,0)
 .. S TXD=0
"RTN","IBCEPTR",203,0)
 .. F  S TXD=$O(^TMP($J,RTN,BATCH,CLAIM,TXD)) Q:'TXD!STOP  S TYPE=0 F  S TYPE=$O(^TMP($J,RTN,BATCH,CLAIM,TXD,TYPE)) Q:'TYPE!STOP  S IEN=0 F  S IEN=$O(^TMP($J,RTN,BATCH,CLAIM,TXD,TYPE,IEN)) Q:'IEN!STOP  D  Q:STOP
"RTN","IBCEPTR",204,0)
 ... I TYPE=1 D TXPRT
"RTN","IBCEPTR",205,0)
 ... I TYPE=2 D SMPRT
"RTN","IBCEPTR",206,0)
 ... Q
"RTN","IBCEPTR",207,0)
 .. Q
"RTN","IBCEPTR",208,0)
 . Q
"RTN","IBCEPTR",209,0)
 ;
"RTN","IBCEPTR",210,0)
 I STOP G PRINTX
"RTN","IBCEPTR",211,0)
 I $Y+2>MAXCNT!'PAGECNT D HEADER I STOP G PRINTX
"RTN","IBCEPTR",212,0)
 W !!?5,"*** End of Report ***"
"RTN","IBCEPTR",213,0)
 I CRT,'$D(ZTQUEUED) S DIR(0)="E" D ^DIR K DIR
"RTN","IBCEPTR",214,0)
PRINTX ;
"RTN","IBCEPTR",215,0)
 Q
"RTN","IBCEPTR",216,0)
 ;
"RTN","IBCEPTR",217,0)
TXPRT ; print transmission information
"RTN","IBCEPTR",218,0)
 NEW DATA,TXDTM,EXTBCH,TXBY,INSIEN,PAYER,PSEQ,INZ
"RTN","IBCEPTR",219,0)
 S DATA=$G(^TMP($J,RTN,BATCH,CLAIM,TXD,TYPE,IEN,0)) I DATA="" G TXPRTX
"RTN","IBCEPTR",220,0)
 S TXDTM=$$FMTE^XLFDT($P(DATA,U,1),"5Z")
"RTN","IBCEPTR",221,0)
 S EXTBCH=$$EXTERNAL^DILFD(361.41,.02,,$P(DATA,U,2))  ; batch
"RTN","IBCEPTR",222,0)
 S TXBY=$$EXTERNAL^DILFD(361.41,.03,,$P(DATA,U,3))    ; who tx
"RTN","IBCEPTR",223,0)
 S INSIEN=+$$FINDINS^IBCEF1(IBIFN,$P(DATA,U,4))       ; insurance
"RTN","IBCEPTR",224,0)
 S INZ=$$INSADD^IBCNSC02(INSIEN)                      ; ins name/addr
"RTN","IBCEPTR",225,0)
 S PAYER=$P(INZ,U,1)                                  ; ins name
"RTN","IBCEPTR",226,0)
 S PSEQ=$TR($P(DATA,U,4),"123","PST")                 ; payer seq
"RTN","IBCEPTR",227,0)
 ;
"RTN","IBCEPTR",228,0)
 I $Y+2>MAXCNT!'PAGECNT D HEADER I STOP G TXPRTX
"RTN","IBCEPTR",229,0)
 W !,"Transmission Information"
"RTN","IBCEPTR",230,0)
 W !?1,TXDTM,?22,"Bch#",+$E(EXTBCH,4,99),?33,$E(TXBY,1,15),?50,$E(PAYER,1,20),"  (",PSEQ,")"
"RTN","IBCEPTR",231,0)
 ; display address info if not Medicare
"RTN","IBCEPTR",232,0)
 I '$$MCRWNR^IBEFUNC(INSIEN) W !?50,$E($P(INZ,U,2),1,15),",",$E($P(INZ,U,3),1,11),",",$E($P(INZ,U,4),1,2)
"RTN","IBCEPTR",233,0)
 W !
"RTN","IBCEPTR",234,0)
TXPRTX ;
"RTN","IBCEPTR",235,0)
 Q
"RTN","IBCEPTR",236,0)
 ;
"RTN","IBCEPTR",237,0)
SMPRT ; print returned status message information
"RTN","IBCEPTR",238,0)
 NEW DATA,TXDTM,SEVERITY,Z
"RTN","IBCEPTR",239,0)
 S DATA=$G(^TMP($J,RTN,BATCH,CLAIM,TXD,TYPE,IEN,0)) I DATA="" G SMPRTX
"RTN","IBCEPTR",240,0)
 S TXDTM=$$FMTE^XLFDT($P(DATA,U,1),"5Z")
"RTN","IBCEPTR",241,0)
 S SEVERITY=$$EXTERNAL^DILFD(361.42,.02,,$P(DATA,U,2))  ; msg severity
"RTN","IBCEPTR",242,0)
 ;
"RTN","IBCEPTR",243,0)
 I $Y+2>MAXCNT!'PAGECNT D HEADER I STOP G SMPRTX
"RTN","IBCEPTR",244,0)
 W !,"Status Message Information"
"RTN","IBCEPTR",245,0)
 W !?1,TXDTM,?22,SEVERITY,?65,"Msg#",$P(DATA,U,3)
"RTN","IBCEPTR",246,0)
 S Z=0
"RTN","IBCEPTR",247,0)
 F  S Z=$O(^TMP($J,RTN,BATCH,CLAIM,TXD,TYPE,IEN,1,Z)) Q:'Z  D  Q:STOP
"RTN","IBCEPTR",248,0)
 . I $Y+1>MAXCNT!'PAGECNT D HEADER Q:STOP
"RTN","IBCEPTR",249,0)
 . W !?2,$G(^TMP($J,RTN,BATCH,CLAIM,TXD,TYPE,IEN,1,Z,0))
"RTN","IBCEPTR",250,0)
 . Q
"RTN","IBCEPTR",251,0)
 W !
"RTN","IBCEPTR",252,0)
SMPRTX ;
"RTN","IBCEPTR",253,0)
 Q
"RTN","IBCEPTR",254,0)
 ;
"RTN","IBCEPTR",255,0)
HEADER ; page break and header
"RTN","IBCEPTR",256,0)
 NEW LIN,HDR,TAB
"RTN","IBCEPTR",257,0)
 S STOP=0
"RTN","IBCEPTR",258,0)
 I CRT,PAGECNT>0,'$D(ZTQUEUED) D  I STOP G HEADX
"RTN","IBCEPTR",259,0)
 . I MAXCNT<51 F LIN=1:1:(MAXCNT-$Y) W !
"RTN","IBCEPTR",260,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCEPTR",261,0)
 . I 'Y S STOP=1 Q
"RTN","IBCEPTR",262,0)
 . Q
"RTN","IBCEPTR",263,0)
 ;
"RTN","IBCEPTR",264,0)
 S PAGECNT=PAGECNT+1
"RTN","IBCEPTR",265,0)
 W @IOF,!
"RTN","IBCEPTR",266,0)
 ;
"RTN","IBCEPTR",267,0)
 W "Test Claim EDI Transmission Report"
"RTN","IBCEPTR",268,0)
 S HDR="Page: "_PAGECNT,TAB=80-$L(HDR)-1
"RTN","IBCEPTR",269,0)
 W ?TAB,HDR
"RTN","IBCEPTR",270,0)
 W !,"Selected ",$S(IBRMETH="B":"Batches",IBRMETH="C":"Claims",1:"Date Range")
"RTN","IBCEPTR",271,0)
 S HDR=$$FMTE^XLFDT($$NOW^XLFDT,"1Z"),TAB=80-$L(HDR)-1
"RTN","IBCEPTR",272,0)
 W ?TAB,HDR
"RTN","IBCEPTR",273,0)
 W !,$$RJ^XLFSTR("",80,"=")
"RTN","IBCEPTR",274,0)
 ;
"RTN","IBCEPTR",275,0)
 ; check for a stop request
"RTN","IBCEPTR",276,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD() D  G HEADX
"RTN","IBCEPTR",277,0)
 . S (ZTSTOP,STOP)=1
"RTN","IBCEPTR",278,0)
 . W !!!?5,"*** Report Halted by TaskManager Request ***"
"RTN","IBCEPTR",279,0)
 . Q
"RTN","IBCEPTR",280,0)
 ;
"RTN","IBCEPTR",281,0)
HEADX ;
"RTN","IBCEPTR",282,0)
 Q
"RTN","IBCEPTR",283,0)
 ;
"RTN","IBCEPTR",284,0)
BT(IBIFN) ; bill type and info
"RTN","IBCEPTR",285,0)
 ; [1] TYPE (form type, charge type, inp/outp)
"RTN","IBCEPTR",286,0)
 ; [2] claim#
"RTN","IBCEPTR",287,0)
 ; [3] patient name
"RTN","IBCEPTR",288,0)
 NEW TYPE,IB0,F,C,S S TYPE=""
"RTN","IBCEPTR",289,0)
 S IB0=$G(^DGCR(399,+$G(IBIFN),0)) I IB0="" Q ""
"RTN","IBCEPTR",290,0)
 ;S F=$P(IB0,U,19),F=$S(F=2:"1500",1:"UB04"))  ;JRA IB*2.0*592 ';'
"RTN","IBCEPTR",291,0)
 S F=$P(IB0,U,19),F=$S(F=2:"1500",F=7:"J430D",1:"UB04")  ;JRA IB*2.0*592 Add Dental Form 'J430D'
"RTN","IBCEPTR",292,0)
 S C=$P(IB0,U,27),C=$S(C=1:"Inst",1:"Prof")
"RTN","IBCEPTR",293,0)
 S S=$$INPAT^IBCEF(IBIFN),S=$S(S=1:"Inpat",1:"Outpat")
"RTN","IBCEPTR",294,0)
 S TYPE=F_", "_C_", "_S
"RTN","IBCEPTR",295,0)
 Q TYPE_U_$P(IB0,U,1)_U_$P($G(^DPT(+$P(IB0,U,2),0)),U,1)
"RTN","IBCEPTR",296,0)
 ;
"RTN","IBCEPTR",297,0)
CLMLST(IBIFN) ; DIC lister
"RTN","IBCEPTR",298,0)
 NEW TYPE,LTD,N1,N2
"RTN","IBCEPTR",299,0)
 S TYPE=$P($$BT(IBIFN),U,1)
"RTN","IBCEPTR",300,0)
 S LTD=$$FMTE^XLFDT($P($G(^IBM(361.4,IBIFN,0)),U,2),"2Z")
"RTN","IBCEPTR",301,0)
 S N1=+$P($G(^IBM(361.4,IBIFN,1,0)),U,4)  ; # transmissions
"RTN","IBCEPTR",302,0)
 S N2=+$P($G(^IBM(361.4,IBIFN,2,0)),U,4)  ; # return messages
"RTN","IBCEPTR",303,0)
 W " ",TYPE,?34," ",LTD,?45," ",N1," Transmission",$S(N1'=1:"s",1:"")
"RTN","IBCEPTR",304,0)
 W ?63," ",N2," Message",$S(N2'=1:"s",1:"")
"RTN","IBCEPTR",305,0)
CLMLSTX ;
"RTN","IBCEPTR",306,0)
 Q
"RTN","IBCEPTR",307,0)
 ;
"RTN","IBCEQ1")
0^34^B30436450^B30648682
"RTN","IBCEQ1",1,0)
IBCEQ1 ;BSL,ALB/TMK - PROVIDER ID QUERY ;25-AUG-03
"RTN","IBCEQ1",2,0)
 ;;2.0;INTEGRATED BILLING;**232,356,349,592**;21-MAR-94;Build 58
"RTN","IBCEQ1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEQ1",4,0)
 ;
"RTN","IBCEQ1",5,0)
 ;QUERY TOOL HELPS IDENTIFY PLANS THAT ARE LACKING PROVIDER ID
"RTN","IBCEQ1",6,0)
 ;INFO OR HAVE BAD PROVIDER ID DATA FOR E-BILLING
"RTN","IBCEQ1",7,0)
 ;
"RTN","IBCEQ1",8,0)
 ;CONDITIONS TO IDENTIFY:
"RTN","IBCEQ1",9,0)
 ;1-BLUE CROSS LINKED TO 1500 ONLY (1) HARD ERROR
"RTN","IBCEQ1",10,0)
 ;2-BLUE SHIELD LINKED TO UB-04 ONLY (2) WARNING
"RTN","IBCEQ1",11,0)
 ;3-BLUE CROSS ID APPLIED TO BOTH FORMS (0) WARNING
"RTN","IBCEQ1",12,0)
 ;4-BLUE CROSS OR BLUE SHIELD IDs EXIST FOR AN INS CO, BUT ONE OR
"RTN","IBCEQ1",13,0)
 ;  MORE OF THE INSURANCE COMPANY'S PLANS DOES NOT HAVE AN
"RTN","IBCEQ1",14,0)
 ;  ELECTRONIC PLAN TYPE OF 'BL'
"RTN","IBCEQ1",15,0)
 ;5-NON BLUE CROSS/SHIELD ID FOR AN INS COMPANY WITH BLUE PLAN(S)
"RTN","IBCEQ1",16,0)
 ;6-VAD000 as an ID but not flagged as a UPIN
"RTN","IBCEQ1",17,0)
 ;
"RTN","IBCEQ1",18,0)
EN ;
"RTN","IBCEQ1",19,0)
 N POP,%ZIS,ZTSK,ZTRTN,ZTDESC,IBREBLD,IBSENDM,IBTO,DIR,X,Y,DUOUT,DTOUT,Z
"RTN","IBCEQ1",20,0)
 S IBREBLD=$S('$D(^XTMP("IB_PLAN232")):1,1:0)
"RTN","IBCEQ1",21,0)
 I $D(^XTMP("IB_PLAN232")) D
"RTN","IBCEQ1",22,0)
 . S DIR("?")="IF YOU ANSWER NO, REPORT WILL BE RUN FROM THE EXISTING QUERY DATA",DIR("?",1)="IF YOU ANSWER YES, A NEW QUERY WILL BE RUN"
"RTN","IBCEQ1",23,0)
 . S DIR(0)="YA",DIR("A",1)="THE EXTRACT GLOBAL FOR THIS QUERY ALREADY EXISTS",DIR("A")="DO YOU WANT TO DELETE IT AND RERUN THE QUERY?: ",DIR("B")="NO" W ! D ^DIR K DIR
"RTN","IBCEQ1",24,0)
 . Q:$D(DUOUT)!$D(DTOUT)!'Y
"RTN","IBCEQ1",25,0)
 . S IBREBLD=1
"RTN","IBCEQ1",26,0)
 ;
"RTN","IBCEQ1",27,0)
 N XMINSTR,Z,ZTSAVE
"RTN","IBCEQ1",28,0)
 K ^TMP("XMY",$J),^TMP("XMY0",$J)
"RTN","IBCEQ1",29,0)
 S XMINSTR("ADDR FLAGS")="R"
"RTN","IBCEQ1",30,0)
 D TOWHOM^XMXAPIU(DUZ,"","S",.XMINSTR)
"RTN","IBCEQ1",31,0)
 S Z="" F  S Z=$O(^TMP("XMY",$J,Z)) Q:Z=""  S IBTO(Z)=""
"RTN","IBCEQ1",32,0)
 K ^TMP("XMY",$J),^TMP("XMY0",$J)
"RTN","IBCEQ1",33,0)
 ;
"RTN","IBCEQ1",34,0)
 S %ZIS="QM" D ^%ZIS G:POP EN1Q
"RTN","IBCEQ1",35,0)
 I $D(IO("Q")) D  G EN1Q
"RTN","IBCEQ1",36,0)
 . S ZTRTN="ENT^IBCEQ1("_IBREBLD_",.IBTO)",ZTDESC="IB - HIPAA ENHANCEMENTS PROV ID QUERY",ZTSAVE("IBTO(")=""
"RTN","IBCEQ1",37,0)
 . D ^%ZTLOAD
"RTN","IBCEQ1",38,0)
 . W !!,$S($D(ZTSK):"Task # "_ZTSK_" has been queued.",1:"Unable to queue this job.")
"RTN","IBCEQ1",39,0)
 . K ZTSK,IO("Q") D HOME^%ZIS
"RTN","IBCEQ1",40,0)
 U IO
"RTN","IBCEQ1",41,0)
 D ENT(IBREBLD,.IBTO)
"RTN","IBCEQ1",42,0)
EN1Q Q
"RTN","IBCEQ1",43,0)
 ;
"RTN","IBCEQ1",44,0)
ENT(IBREBLD,IBTO) ; Queued job enter here
"RTN","IBCEQ1",45,0)
 ;
"RTN","IBCEQ1",46,0)
 N LOOP,Z
"RTN","IBCEQ1",47,0)
 K ^TMP($J,"SENDMSG")
"RTN","IBCEQ1",48,0)
 S ^TMP($J,"SENDMSG")=$S(IBREBLD:1,1:0)
"RTN","IBCEQ1",49,0)
 S Z="" F  S Z=$O(IBTO(Z)) Q:Z=""  S ^TMP($J,"SENDMSG",0,Z)=""
"RTN","IBCEQ1",50,0)
 I $G(IBREBLD) D
"RTN","IBCEQ1",51,0)
 . ; Rebld query
"RTN","IBCEQ1",52,0)
 . K ^XTMP("IB_PLAN232")
"RTN","IBCEQ1",53,0)
 . S ^XTMP("IB_PLAN232")="",^XTMP("IB_PLAN232",0)=$$FMADD^XLFDT(DT,45)_U_DT_"^IB PATCH 232 PROV ID QUERY"
"RTN","IBCEQ1",54,0)
 . ;
"RTN","IBCEQ1",55,0)
 . ; loop thru 355.91 (IB INSURANCE CO LEVEL BILLING PROV ID)
"RTN","IBCEQ1",56,0)
 . ;   then 355.9 (IB BILLING PRACTITIONER ID)
"RTN","IBCEQ1",57,0)
 . F LOOP=355.91,355.9 D LP
"RTN","IBCEQ1",58,0)
 . ;
"RTN","IBCEQ1",59,0)
 ;
"RTN","IBCEQ1",60,0)
 D RPTOUT^IBCEQ1A
"RTN","IBCEQ1",61,0)
 K ^TMP($J,"SENDMSG")
"RTN","IBCEQ1",62,0)
 Q
"RTN","IBCEQ1",63,0)
 ;
"RTN","IBCEQ1",64,0)
LP ; Loop through ids
"RTN","IBCEQ1",65,0)
 N IB,PTYP,PAYER,PLANIEN,FTA,IEPLAN,IPROV,PPROV,EDII,EDIP,PAYERP,TYPCOV,IBPMBPID,PTYPNM,IBI3,IBI0,SEQ,BLUE,TOT,NBLUE,DIR,DTOUT,DUOUT,X,Z,Z0,Z1,BL,UPIN,BCR,BSH
"RTN","IBCEQ1",66,0)
 S (SEQ,X,TOT,NBLUE,BLUE)=0,(BCR,BSH,UPIN)=""
"RTN","IBCEQ1",67,0)
 S Z="" F  S Z=$O(^IBE(355.97,Z)) Q:'Z  S Z0=$G(^(Z,0)) D
"RTN","IBCEQ1",68,0)
 . I $P(Z,U)["BLUE CROSS" S BCR=Z Q
"RTN","IBCEQ1",69,0)
 . I $P(Z,U)["BLUE SHIELD" S BSH=Z Q
"RTN","IBCEQ1",70,0)
 . I $P(Z,U)["UPIN" S UPIN=Z Q
"RTN","IBCEQ1",71,0)
 S:UPIN="" UPIN=22 S:BCR="" BCR=1 S:BSH="" BSH=2
"RTN","IBCEQ1",72,0)
 F  S X=$O(^IBA(LOOP,X)) Q:+X=0  D
"RTN","IBCEQ1",73,0)
 . S (PAYER,FTA,PLANIEN,IEPLAN,IPROV,PPROV,EDII,EDIP,PAYERP,TYPCOV,IBPMBPID,PTYPNM)=""
"RTN","IBCEQ1",74,0)
 . S SEQ=SEQ+1
"RTN","IBCEQ1",75,0)
 . S IB=$G(^IBA(LOOP,X,0))
"RTN","IBCEQ1",76,0)
 . S PTYP=$P(IB,U,6) ; prov id type ien
"RTN","IBCEQ1",77,0)
 . Q:PTYP=""  ; no prov type
"RTN","IBCEQ1",78,0)
 . S PTYPNM=$P($G(^IBE(355.97,PTYP,0)),U) ; prov id type desc
"RTN","IBCEQ1",79,0)
 . S PAYERP=$S(LOOP[".91":+IB,1:+$P(IB,U,2)) ;ins co ien
"RTN","IBCEQ1",80,0)
 . S IBI0=$G(^DIC(36,PAYERP,0)),IBI3=$G(^(3)),PAYER=$P(IBI0,U)
"RTN","IBCEQ1",81,0)
 . Q:$P(IBI0,U,5)!(IBI0="")  ; ins co inactive/deleted
"RTN","IBCEQ1",82,0)
 . S EDIP=$P(IBI3,U,2) ; edi id# prof
"RTN","IBCEQ1",83,0)
 . S EDII=$P(IBI3,U,4) ; edi id# inst
"RTN","IBCEQ1",84,0)
 . S IEPLAN=$P(IBI3,U,9) ; elec ins type ?1N
"RTN","IBCEQ1",85,0)
 . S PPROV=$P(IBI0,U,17) ; prof. prov#
"RTN","IBCEQ1",86,0)
 . S IPROV=$P(IBI0,U,11) ; hosp. prov#
"RTN","IBCEQ1",87,0)
 . S TYPCOV=$P(IBI0,U,13) ; type of cov ien;file 355.2
"RTN","IBCEQ1",88,0)
 . S FTA=$P(IB,U,4) ; form type applied; 0:both, 1:ub, 2:1500
"RTN","IBCEQ1",89,0)
 . S IBPMBPID=X_";"_LOOP
"RTN","IBCEQ1",90,0)
 . I $P(IB,U,7)="VAD000",PTYP'=UPIN D SET(6)
"RTN","IBCEQ1",91,0)
 . I PTYP'=BCR&(PTYP'=BSH) D  Q    ; not BC/BS
"RTN","IBCEQ1",92,0)
 .. ; Only do following check once per insurance co
"RTN","IBCEQ1",93,0)
 .. Q:$D(^XTMP("IB_PLAN232",3,PAYERP))
"RTN","IBCEQ1",94,0)
 .. S ^XTMP("IB_PLAN232",3,PAYERP)=""
"RTN","IBCEQ1",95,0)
 .. ; Check if BC/BS ids exist at all for ins co
"RTN","IBCEQ1",96,0)
 .. Q:$O(^IBA(355.9,"AC",1,PAYERP,0))!$O(^IBA(355.9,"AC",2,PAYERP,0))!$O(^IBA(355.91,"AC",PAYERP,1,0))!$O(^IBA(355.91,"AC",PAYERP,2,0))
"RTN","IBCEQ1",97,0)
 .. S BL=0
"RTN","IBCEQ1",98,0)
 .. S Z1=0 F  S Z1=$O(^IBA(355.3,"B",PAYERP,Z1)) Q:'Z1  D
"RTN","IBCEQ1",99,0)
 ... I '$P($G(^IBA(355.3,Z1,0)),U,11),$P($G(^(0)),U,15)="BL" S PLANIEN=Z1,BL=1 D SET(5)
"RTN","IBCEQ1",100,0)
 .. S:BL NBLUE=NBLUE+1
"RTN","IBCEQ1",101,0)
 . ;
"RTN","IBCEQ1",102,0)
 . S BLUE=BLUE+1
"RTN","IBCEQ1",103,0)
 . ; ERROR - FORM TYPE=2:1500 AND PTYP=1:BC
"RTN","IBCEQ1",104,0)
 . I PTYP=1&(FTA=2) D SET(1) Q
"RTN","IBCEQ1",105,0)
 . I PTYP=2&(FTA=1) D SET(2) Q  ; BS applied to just UB
"RTN","IBCEQ1",106,0)
 . I FTA=0&(PTYP=1) D SET(3) Q  ; BC applied to both forms
"RTN","IBCEQ1",107,0)
 . ;
"RTN","IBCEQ1",108,0)
 . ; Only do following check once per insurance co
"RTN","IBCEQ1",109,0)
 . I '$D(^XTMP("IB_PLAN232",2,PAYERP)) D  ; Checks plans not BL
"RTN","IBCEQ1",110,0)
 .. S Z1=0,^XTMP("IB_PLAN232",2,PAYERP)=""
"RTN","IBCEQ1",111,0)
 .. F  S Z1=$O(^IBA(355.3,"B",PAYERP,Z1)) Q:'Z1  D
"RTN","IBCEQ1",112,0)
 ... I $P($G(^IBA(355.3,Z1,0)),U,15)'="BL",'$P(^(0),U,11) S PLANIEN=Z1 D SET(4) Q
"RTN","IBCEQ1",113,0)
 ;
"RTN","IBCEQ1",114,0)
 ; 3RD PC XTMP(IB_PLAN232)=TOTAL BLUES WITH NO BLUE IDS
"RTN","IBCEQ1",115,0)
 S $P(^XTMP("IB_PLAN232"),U,3)=$P($G(^XTMP("IB_PLAN232")),U,3)+NBLUE
"RTN","IBCEQ1",116,0)
 ;
"RTN","IBCEQ1",117,0)
 ; 4TH PC XTMP(IB_PLAN232)=TOT NUMBER SCANNED
"RTN","IBCEQ1",118,0)
 S $P(^XTMP("IB_PLAN232"),U,4)=$P($G(^XTMP("IB_PLAN232")),U,4)+SEQ
"RTN","IBCEQ1",119,0)
 ;
"RTN","IBCEQ1",120,0)
 ; 5TH PC XTMP(IB_PLAN232)=TOT BLUES IDS FOUND
"RTN","IBCEQ1",121,0)
 S $P(^XTMP("IB_PLAN232"),U,5)=$P($G(^XTMP("IB_PLAN232")),U,5)+BLUE
"RTN","IBCEQ1",122,0)
 ;
"RTN","IBCEQ1",123,0)
 ; 6TH PC XTMP(IB_PLAN232)=TOTAL ERRORS FOUND
"RTN","IBCEQ1",124,0)
 S $P(^XTMP("IB_PLAN232"),U,6)=$P($G(^XTMP("IB_PLAN232")),U,6)+TOT
"RTN","IBCEQ1",125,0)
 Q
"RTN","IBCEQ1",126,0)
 ;
"RTN","IBCEQ1",127,0)
SET(Z) ;SET VALUES INTO SAVE GLOBAL
"RTN","IBCEQ1",128,0)
 ; Z=REASON WHY WE'RE SETTING IT
"RTN","IBCEQ1",129,0)
 ; 1. PAYER-ins co name (36)
"RTN","IBCEQ1",130,0)
 ; 2. PLAN-grp name (355.3)
"RTN","IBCEQ1",131,0)
 ; 3. GROUP-grp # (355.3)
"RTN","IBCEQ1",132,0)
 ; 4. FTA-form typ (355.9)
"RTN","IBCEQ1",133,0)
 ; 5. EPLAN-"BL" (355.3)
"RTN","IBCEQ1",134,0)
 ; 6. IEPLAN-elec ins typ (36)
"RTN","IBCEQ1",135,0)
 ; 7. IPROV-hosp prov# (36)
"RTN","IBCEQ1",136,0)
 ; 8. PPROV-prof prov# (36)
"RTN","IBCEQ1",137,0)
 ; 9. EDII-inst edi id# (36)
"RTN","IBCEQ1",138,0)
 ;10. EDIP-prof edi id# (36)
"RTN","IBCEQ1",139,0)
 ;11. PAYERP-ins co ien (36)
"RTN","IBCEQ1",140,0)
 ;12. TYPCOV-type of cov ien (36)
"RTN","IBCEQ1",141,0)
 ;13. PLANIEN-ien of file (355.3)
"RTN","IBCEQ1",142,0)
 ;14. IBPMBPID-355.9 or 355.91;ien of file
"RTN","IBCEQ1",143,0)
 ;15. PTYPNM-prov id type desc (355.9)
"RTN","IBCEQ1",144,0)
 ;16. Z-reason
"RTN","IBCEQ1",145,0)
 ;
"RTN","IBCEQ1",146,0)
 N A,DUP
"RTN","IBCEQ1",147,0)
 ;
"RTN","IBCEQ1",148,0)
 S A=$O(^XTMP("IB_PLAN232",1," "),-1)+1,TOT=TOT+1
"RTN","IBCEQ1",149,0)
 S ^XTMP("IB_PLAN232",1,A,0)=PAYER_U_""_U_""_U_FTA_U_""_U_IEPLAN_U_""_U_""_U_""_U_""_U_PAYERP_U_TYPCOV_U_PLANIEN_U_IBPMBPID_U_PTYPNM_U_Z
"RTN","IBCEQ1",150,0)
 Q
"RTN","IBCEQ1",151,0)
 ;
"RTN","IBCEQ1A")
0^35^B67393403^B67430449
"RTN","IBCEQ1A",1,0)
IBCEQ1A ;ALB/BSL,TMK - PROVIDER ID QUERY REPORT ;25-AUG-03
"RTN","IBCEQ1A",2,0)
 ;;2.0;INTEGRATED BILLING;**232,348,349,516,592**;21-MAR-94;Build 58
"RTN","IBCEQ1A",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEQ1A",4,0)
 ;
"RTN","IBCEQ1A",5,0)
RPTOUT ; Print from data in ^XTMP
"RTN","IBCEQ1A",6,0)
 N IBP,IBA,IBI,IBIN,IBPNM,IBPNUM,IBSTOP,IBX,IBZ,IBPG,IBICONT,Z
"RTN","IBCEQ1A",7,0)
 K ^TMP($J,"IBZ232")
"RTN","IBCEQ1A",8,0)
 F Z=1:1:6 S ^TMP($J,"IBZ232",Z)=""
"RTN","IBCEQ1A",9,0)
 S (IBPG,IBSTOP)=0
"RTN","IBCEQ1A",10,0)
 S IBA=0 F  S IBA=$O(^XTMP("IB_PLAN232",1,IBA)) Q:'IBA  D
"RTN","IBCEQ1A",11,0)
 . S IBX=$G(^XTMP("IB_PLAN232",1,IBA,0))
"RTN","IBCEQ1A",12,0)
 . ; Sort by err type, ins co ien
"RTN","IBCEQ1A",13,0)
 . S ^TMP($J,"IBZ232",+$P(IBX,U,16),+$P(IBX,U,11),IBA)=IBX
"RTN","IBCEQ1A",14,0)
 ;
"RTN","IBCEQ1A",15,0)
 S IBZ=0 F  S IBZ=$O(^TMP($J,"IBZ232",IBZ)) Q:'IBZ!IBSTOP!(IBZ>6)  D HDR1(.IBPG,.IBSTOP,IBZ,0) S IBI=0 F  S IBI=$O(^TMP($J,"IBZ232",IBZ,IBI)) Q:'IBI!IBSTOP  D
"RTN","IBCEQ1A",16,0)
 . S IBIN=$P($G(^DIC(36,+IBI,0)),U)_" ("_$S(+$G(^(3))=1:"",1:"NOT ")_"SET TO TRANSMIT LIVE)"
"RTN","IBCEQ1A",17,0)
 . D INSHDR(.IBPG,.IBSTOP,IBIN,IBZ,0) S IBICONT=0
"RTN","IBCEQ1A",18,0)
 . S IBA=0 F  S IBA=$O(^TMP($J,"IBZ232",IBZ,IBI,IBA)) Q:'IBA!IBSTOP  S IBX=$G(^(IBA)) D
"RTN","IBCEQ1A",19,0)
 .. I ($Y+5)>IOSL D INSHDR(.IBPG,.IBSTOP,IBIN,IBZ,IBICONT) Q:IBSTOP
"RTN","IBCEQ1A",20,0)
 .. ;
"RTN","IBCEQ1A",21,0)
 .. I IBZ'=4,IBZ'=5 D
"RTN","IBCEQ1A",22,0)
 ... S IBP=+$P(IBX,U,14)
"RTN","IBCEQ1A",23,0)
 ... I $P(IBX,U,14)[".91" S IBPNM="ALL PROVIDERS"
"RTN","IBCEQ1A",24,0)
 ... I $P(IBX,U,14)'[".91" D
"RTN","IBCEQ1A",25,0)
 .... N Z
"RTN","IBCEQ1A",26,0)
 .... S Z=$P($G(^IBA(355.9,IBP,0)),U)
"RTN","IBCEQ1A",27,0)
 .... S IBPNM=$S(Z["VA(200":"",1:"#")_$$EXTERNAL^DILFD(355.9,.01,"",Z)
"RTN","IBCEQ1A",28,0)
 ... S IBPNUM=$P($G(^IBA(+$P($P(IBX,U,14),";",2),IBP,0)),U,7)
"RTN","IBCEQ1A",29,0)
 ... D WRT(1,"   "_$E($P("ALL^UB-04^CMS-1500",U,$P(IBX,U,4)+1)_$J("",9),1,9)_"  "_$E($P(IBX,U,15)_$J("",23),1,23)_" "_$E(IBPNM_$J("",28),1,28)_"  "_$E(IBPNUM,1,11))
"RTN","IBCEQ1A",30,0)
 .. ;
"RTN","IBCEQ1A",31,0)
 .. I IBZ=4!(IBZ=5) D
"RTN","IBCEQ1A",32,0)
 ... ;IB*516/TAZ - Change Group Name from piece 3 to field 2.01, and group Number from piece 4 to field 2.02
"RTN","IBCEQ1A",33,0)
 ... ;N Z
"RTN","IBCEQ1A",34,0)
 ... N GNUM,GNAM,EPTYP
"RTN","IBCEQ1A",35,0)
 ... ;S Z=$G(^IBA(355.3,+$P(IBX,U,13),0))
"RTN","IBCEQ1A",36,0)
 ... ;D WRT(1,"   "_$E($P(Z,U,3)_$J("",20),1,20)_"  "_$E($P(Z,U,4)_$J("",17),1,17)_"  "_$$EXTERNAL^DILFD(355.3,.15,"",$P(Z,U,15)))
"RTN","IBCEQ1A",37,0)
 ... S GNUM=$$GET1^DIQ(355.3,+$P(IBX,U,13)_",",2.02)  ;Group Number
"RTN","IBCEQ1A",38,0)
 ... S GNAM=$$GET1^DIQ(355.3,+$P(IBX,U,13)_",",2.01)  ;Group Name
"RTN","IBCEQ1A",39,0)
 ... S EPTYP=$$GET1^DIQ(355.3,+$P(IBX,U,13)_",",.15)  ;Electronic Plan Type
"RTN","IBCEQ1A",40,0)
 ... D WRT(1,"   "_$E(GNUM_$J("",20),1,20)_"  "_$E(GNAM_$J("",17),1,17)_"  "_EPTYP)
"RTN","IBCEQ1A",41,0)
 .. S:'IBICONT IBICONT=1
"RTN","IBCEQ1A",42,0)
 ;
"RTN","IBCEQ1A",43,0)
 I 'IBSTOP D  ;Totals
"RTN","IBCEQ1A",44,0)
 . N Z
"RTN","IBCEQ1A",45,0)
 . S Z=$G(^XTMP("IB_PLAN232"))
"RTN","IBCEQ1A",46,0)
 . I ($Y+10)>IOSL!'IBPG D HDR(.IBPG,.IBSTOP,"") Q:IBSTOP
"RTN","IBCEQ1A",47,0)
 . D WRT(2,$J("",25)_"TOTAL # OF IDs CHECKED: "_+$P(Z,U,4))
"RTN","IBCEQ1A",48,0)
 . D WRT(1,$J("",14)_"TOT # BLUE CROSS/SHIELD IDS FOUND: "_+$P(Z,U,5))
"RTN","IBCEQ1A",49,0)
 . D WRT(1,"TOTAL # OF INS CO. W/BLUE PLANS AND NO BLUE IDS: "_+$P(Z,U,3))
"RTN","IBCEQ1A",50,0)
 . D WRT(1,$J("",21)_"TOTAL # OF ERRORS/WARNINGS: "_+$P(Z,U,6))
"RTN","IBCEQ1A",51,0)
 ;
"RTN","IBCEQ1A",52,0)
 I '$D(ZTQUEUED) D ^%ZISC I 'IBSTOP,IBPG D ASK()
"RTN","IBCEQ1A",53,0)
 I $D(ZTQUEUED),'IBSTOP S ZTREQ="@"
"RTN","IBCEQ1A",54,0)
 I $G(^TMP($J,"SENDMSG")),'IBSTOP D
"RTN","IBCEQ1A",55,0)
 . N XMDUZ,XMSUBJ,XMBODY,XMTO,XMZ
"RTN","IBCEQ1A",56,0)
 . S XMDUZ=DUZ,XMSUBJ=$E("PROVIDER ID QUERY FROM "_$P($G(^DIC(4,+$P($G(^IBE(350.9,1,0)),U,2),0)),U),1,65),XMBODY="^TMP($J,""SENDMSG"",1)"
"RTN","IBCEQ1A",57,0)
 . M XMTO=^TMP($J,"SENDMSG",0)
"RTN","IBCEQ1A",58,0)
 . S Z="" F  S Z=$O(^TMP($J,"SENDMSG",0,Z)) Q:Z=""  S XMZ(Z)=""
"RTN","IBCEQ1A",59,0)
 . D SENDMSG^XMXAPI(XMDUZ,XMSUBJ,XMBODY,.XMTO,"",.XMZ)
"RTN","IBCEQ1A",60,0)
 K ^TMP($J,"IBZ232"),^TMP($J,"SENDMSG")
"RTN","IBCEQ1A",61,0)
 Q
"RTN","IBCEQ1A",62,0)
 ;
"RTN","IBCEQ1A",63,0)
HDR(IBPG,IBSTOP,IBZ,FF) ; Main hdr
"RTN","IBCEQ1A",64,0)
 ; FF = 0 if continuation pg so it writes it to report, but not mail msg
"RTN","IBCEQ1A",65,0)
 N Z,IBT
"RTN","IBCEQ1A",66,0)
 Q:$G(IBSTOP)
"RTN","IBCEQ1A",67,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD S (IBSTOP,ZTSTOP)=1 K ZTREQ I +$G(IBPG) D WRT(2,"***TASK STOPPED BY USER***") Q
"RTN","IBCEQ1A",68,0)
 I IBPG&($E(IOST,1,2)="C-") D ASK(.IBSTOP) Q:IBSTOP
"RTN","IBCEQ1A",69,0)
 S IBT=$S(IBPG:1,1:0)
"RTN","IBCEQ1A",70,0)
 S IBPG=IBPG+1
"RTN","IBCEQ1A",71,0)
 S Z="PROVIDER ID VERIFICATION QUERY REPORT"
"RTN","IBCEQ1A",72,0)
 S Z=$$SETSTR^VALM1($J("",80-$L(Z)\2)_Z,"",1,79)
"RTN","IBCEQ1A",73,0)
 S Z=$$SETSTR^VALM1("Page: "_IBPG,Z,70,10)
"RTN","IBCEQ1A",74,0)
 D WRT(0,"@IOF",$G(FF))
"RTN","IBCEQ1A",75,0)
 D WRT(1,Z,$G(FF))
"RTN","IBCEQ1A",76,0)
 S Z="RUN DATE: "_$$FMTE^XLFDT(DT,2),Z=$J("",80-$L(Z)\2)_Z
"RTN","IBCEQ1A",77,0)
 D WRT(1,Z,$G(FF))
"RTN","IBCEQ1A",78,0)
 I IBZ'="",IBZ'=4,IBZ'=5 D
"RTN","IBCEQ1A",79,0)
 . D WRT(2,"   FORM TYPE  PROV ID TYPE"_$J("",12)_"PROVIDER NAME (#=Non-VA)"_$J("",6)_"PROV ID",$G(FF))
"RTN","IBCEQ1A",80,0)
 I IBZ=4!(IBZ=5) D
"RTN","IBCEQ1A",81,0)
 . D WRT(2,"   GROUP NAME"_$J("",12)_"GROUP NUMBER"_$J("",7)_"ELECTRONIC PLAN TYPE",$G(FF))
"RTN","IBCEQ1A",82,0)
 D WRT(1,$TR($J("",IOM-1)," ","-"),$G(FF))
"RTN","IBCEQ1A",83,0)
 Q
"RTN","IBCEQ1A",84,0)
 ;
"RTN","IBCEQ1A",85,0)
HDR1(IBPG,IBSTOP,IBZ,IBCONT) ; Hdr err typ
"RTN","IBCEQ1A",86,0)
 N Z,Z0,Z1
"RTN","IBCEQ1A",87,0)
 D HDR(.IBPG,.IBSTOP,IBZ,IBCONT) Q:IBSTOP
"RTN","IBCEQ1A",88,0)
 S Z="",$P(Z,"*",80)="" D WRT(1,Z,IBCONT)
"RTN","IBCEQ1A",89,0)
 S Z0="* "_$S(IBZ>1:"WARNING: ",1:"ERROR: ")
"RTN","IBCEQ1A",90,0)
 ;
"RTN","IBCEQ1A",91,0)
 I IBZ'=4,IBZ'=5 D
"RTN","IBCEQ1A",92,0)
 . N X
"RTN","IBCEQ1A",93,0)
 . S X="BLUE CROSS ID FOUND FOR A 1500 FORM TYPE ONLY^BLUE SHIELD ID FOUND FOR A UB-04 FORM TYPE ONLY^BLUE CROSS ID FOUND FOR ALL FORM TYPES^BL CROSS/BL SHIELD IDs FOUND FOR PLANS NOT HAVING 'BL' ELECTRONIC PLAN TYPE"
"RTN","IBCEQ1A",94,0)
 . S Z0=Z0_$S(IBZ<6:$P(X,U,IBZ),IBZ=6:"""VAD000"" PROVIDER ID FOUND NOT SET UP AS A UPIN PROVIDER ID TYPE",1:"")
"RTN","IBCEQ1A",95,0)
 I IBZ=4 D
"RTN","IBCEQ1A",96,0)
 . S Z0=Z0_"BL CROSS/BL SHIELD IDs FOUND FOR PLANS NOT HAVING 'BL' ELECTRONIC" D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",97,0)
 . S Z0="*"_$J("",10)_"PLAN TYPE"
"RTN","IBCEQ1A",98,0)
 ;
"RTN","IBCEQ1A",99,0)
 I IBZ=5 D
"RTN","IBCEQ1A",100,0)
 . S Z0=Z0_"INSURANCE CO HAS BL CROSS/SHIELD PLANS, BUT NO BL CROSS/SHIELD IDs"
"RTN","IBCEQ1A",101,0)
 ;
"RTN","IBCEQ1A",102,0)
 S Z0=Z0_$S(IBCONT:" (CONT)",1:"")
"RTN","IBCEQ1A",103,0)
 D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",104,0)
 ;
"RTN","IBCEQ1A",105,0)
 I 'IBCONT D
"RTN","IBCEQ1A",106,0)
 . I IBZ=1 D
"RTN","IBCEQ1A",107,0)
 .. D WRT(1,"*"_$J("",77)_"*",IBCONT)
"RTN","IBCEQ1A",108,0)
 .. S Z0="* SOLUTION: THIS ID WILL NEVER BE USED ELECTRONICALLY." D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",109,0)
 .. S Z0="*"_$J("",11)_"CHANGE PROVIDER ID TYPE TO BLUE SHIELD IF THIS ID SHOULD BE" D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",110,0)
 .. S Z0="*"_$J("",11)_"TRANSMITTED ON A 1500." D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",111,0)
 . ;
"RTN","IBCEQ1A",112,0)
 . I IBZ=2 D
"RTN","IBCEQ1A",113,0)
 .. D WRT(1,"*"_$J("",77)_"*",IBCONT)
"RTN","IBCEQ1A",114,0)
 .. S Z0="* SUGGESTION: VISTA WILL TRANSMIT THIS ID ELECTRONICALLY, BUT IT IS OPTIMAL"  D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",115,0)
 .. S Z0="*"_$J("",13)_"TO HAVE THIS ID SET UP AS BLUE CROSS." D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",116,0)
 . ;
"RTN","IBCEQ1A",117,0)
 . I IBZ=3 D
"RTN","IBCEQ1A",118,0)
 .. D WRT(1,"*"_$J("",77)_"*",IBCONT)
"RTN","IBCEQ1A",119,0)
 .. S Z0="* SUGGESTION: A BLUE CROSS ID CAN ONLY BE APPLIED TO A UB-04 FORM TYPE." D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",120,0)
 .. S Z0="*"_$J("",13)_"EDIT THE 'APPLIED TO FORM TYPE' FOR THE ID TO BE UB-04 ONLY." D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",121,0)
 .. S Z0="*"_$J("",13)_"IF YOU NEED THIS ID ON A 1500, SET IT UP AS A BLUE SHIELD ID" D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",122,0)
 .. S Z0="*"_$J("",13)_"APPLIED TO A CMS-1500 FORM TYPE." D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",123,0)
 . ;
"RTN","IBCEQ1A",124,0)
 . I IBZ=4 D
"RTN","IBCEQ1A",125,0)
 .. D WRT(1,"*"_$J("",77)_"*",IBCONT)
"RTN","IBCEQ1A",126,0)
 .. S Z0="* SUGGESTION: A BLUE CROSS OR BLUE SHIELD ID IS DEFINED FOR THE INSURANCE" D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",127,0)
 .. S Z0="*"_$J("",13)_"COMPANY, BUT THE ELECTRONIC PLAN TYPE FOR ONE OR MORE OF THE" D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",128,0)
 .. S Z0="*"_$J("",13)_"COMPANY'S PLANS IS NOT SET TO 'BL' (BLUE CROSS/BLUE SHIELD)." D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",129,0)
 .. S Z0="*"_$J("",13)_"IF BLUE CROSS/BLUE SHIELD IDs ARE NEEDED TO PRINT FOR ANY" D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",130,0)
 .. S Z0="*"_$J("",13)_"OF THESE PLANS, ITS ELECTRONIC PLAN TYPE MUST BE CHANGED TO BL." D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",131,0)
 . ;
"RTN","IBCEQ1A",132,0)
 . I IBZ=5 D
"RTN","IBCEQ1A",133,0)
 .. D WRT(1,"*"_$J("",77)_"*",IBCONT)
"RTN","IBCEQ1A",134,0)
 .. S Z0="* SUGGESTION: A BLUE CROSS OR BLUE SHIELD PLAN IS DEFINED FOR THE INSURANCE" D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",135,0)
 .. S Z0="*"_$J("",13)_"COMPANY, BUT YOU HAVE ONLY NON-BLUE CROSS/SHIELD IDS SET UP." D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",136,0)
 .. S Z0="*"_$J("",13)_"YOU MUST SET UP THE APPROPRIATE BLUE CROSS/BLUE SHIELD IDs" D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",137,0)
 .. S Z0="*"_$J("",13)_"FOR THE INSURANCE COMPANY." D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",138,0)
 . ;
"RTN","IBCEQ1A",139,0)
 . I IBZ=6 D
"RTN","IBCEQ1A",140,0)
 .. D WRT(1,"*"_$J("",77)_"*",IBCONT)
"RTN","IBCEQ1A",141,0)
 .. S Z0="* SUGGESTION: CHANGE PROVIDER ID TYPE TO UPIN."
"RTN","IBCEQ1A",142,0)
 .. D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",143,0)
 .. S Z0="*"_$J("",13)_"ONCE ALL PAYERS FULLY IMPLEMENT HIPAA EDITS, YOU"
"RTN","IBCEQ1A",144,0)
 .. D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",145,0)
 .. S Z0="*"_$J("",13)_"MUST USE THE CORRECT ID TYPE FOR THE ID ENTERED."
"RTN","IBCEQ1A",146,0)
 .. D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",147,0)
 . ;
"RTN","IBCEQ1A",148,0)
 . D WRT(1,"*"_$J("",77)_"*",IBCONT)
"RTN","IBCEQ1A",149,0)
 . S Z1="*"_$J("",$S(IBZ'=1:13,1:11))_"VISTA OPTION TO USE: "
"RTN","IBCEQ1A",150,0)
 . I IBZ'=4 D
"RTN","IBCEQ1A",151,0)
 .. S Z0=Z1_"PROVIDER ID MAINTENANCE"
"RTN","IBCEQ1A",152,0)
 . I IBZ=4 D
"RTN","IBCEQ1A",153,0)
 .. S Z0=Z1_"INSURANCE COMPANY ENTRY/EDIT"
"RTN","IBCEQ1A",154,0)
 . D WRT(1,Z0_$J("",78-$L(Z0))_"*",IBCONT)
"RTN","IBCEQ1A",155,0)
 ;
"RTN","IBCEQ1A",156,0)
 D WRT(1,Z,IBCONT)
"RTN","IBCEQ1A",157,0)
 ;
"RTN","IBCEQ1A",158,0)
 I '$O(^TMP($J,"IBZ232",IBZ,0)) D WRT(2,"***** NOTHING FOUND FOR THIS ERROR/WARNING *****",IBCONT)
"RTN","IBCEQ1A",159,0)
 Q
"RTN","IBCEQ1A",160,0)
 ;
"RTN","IBCEQ1A",161,0)
INSHDR(IBPG,IBSTOP,IBINM,IBZ,IBICONT) ; Ins Co info
"RTN","IBCEQ1A",162,0)
 I ($Y+7)>IOSL D HDR1(.IBPG,.IBSTOP,IBZ,1)
"RTN","IBCEQ1A",163,0)
 Q:IBSTOP
"RTN","IBCEQ1A",164,0)
 D WRT(2,"INSURANCE CO NAME: "_IBINM_$S($G(IBICONT):" (Continued)",1:""),IBICONT)
"RTN","IBCEQ1A",165,0)
 Q
"RTN","IBCEQ1A",166,0)
 ;
"RTN","IBCEQ1A",167,0)
ASK(IBSTOP) ; Ask continue
"RTN","IBCEQ1A",168,0)
 ; If passed by ref, IBSTOP returned = 1 if print aborted
"RTN","IBCEQ1A",169,0)
 I $E(IOST,1,2)'["C-" Q
"RTN","IBCEQ1A",170,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT
"RTN","IBCEQ1A",171,0)
 S DIR(0)="E" W ! D ^DIR
"RTN","IBCEQ1A",172,0)
 I ($D(DIRUT))!($D(DUOUT)) S IBSTOP=1 Q
"RTN","IBCEQ1A",173,0)
 Q
"RTN","IBCEQ1A",174,0)
 ;
"RTN","IBCEQ1A",175,0)
WRT(FF,TEXT,NOT) ; Wrt/store line
"RTN","IBCEQ1A",176,0)
 N Z,A
"RTN","IBCEQ1A",177,0)
 S A=+$O(^TMP($J,"SENDMSG",1,""),-1),NOT=$G(NOT)
"RTN","IBCEQ1A",178,0)
 I FF F Z=1:1:FF W ! I $G(^TMP($J,"SENDMSG")),'NOT,Z>1 S A=A+1,^TMP($J,"SENDMSG",1,A)=" "
"RTN","IBCEQ1A",179,0)
 ;
"RTN","IBCEQ1A",180,0)
 I TEXT="@IOF" D  Q
"RTN","IBCEQ1A",181,0)
 . W @IOF
"RTN","IBCEQ1A",182,0)
 . I $G(^TMP($J,"SENDMSG")),'NOT,IBPG>1 D
"RTN","IBCEQ1A",183,0)
 .. S A=A+1,^TMP($J,"SENDMSG",1,A)=" "
"RTN","IBCEQ1A",184,0)
 .. F Z=1:1:2 S A=A+1,^TMP($J,"SENDMSG",1,A)="*** TOP OF NEW PAGE ***"
"RTN","IBCEQ1A",185,0)
 .. S A=A+1,^TMP($J,"SENDMSG",1,A)=" "
"RTN","IBCEQ1A",186,0)
 ;
"RTN","IBCEQ1A",187,0)
 W TEXT
"RTN","IBCEQ1A",188,0)
 I $G(^TMP($J,"SENDMSG")),'NOT S A=A+1,^TMP($J,"SENDMSG",1,A)=TEXT
"RTN","IBCEQ1A",189,0)
 Q
"RTN","IBCEQ1A",190,0)
 ;
"RTN","IBCERP6")
0^33^B24712755^B24261779
"RTN","IBCERP6",1,0)
IBCERP6 ;ALB/JEH - MRA/EDI CLAIMS READY FOR EXTRACT ;12/10/99
"RTN","IBCERP6",2,0)
 ;;2.0;INTEGRATED BILLING;**137,211,155,348,349,592**;21-MAR-94;Build 58
"RTN","IBCERP6",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCERP6",4,0)
 ;
"RTN","IBCERP6",5,0)
EN ;Entry point from option
"RTN","IBCERP6",6,0)
 W !!,"This report provides a list of claims held in a"
"RTN","IBCERP6",7,0)
 W !,"Ready for Extract status.  Users can select all bills"
"RTN","IBCERP6",8,0)
 W !,"in a Ready for extract status or only those trapped due to"
"RTN","IBCERP6",9,0)
 W !,"the EDI/MRA Parameters being turned off."
"RTN","IBCERP6",10,0)
 ;
"RTN","IBCERP6",11,0)
 S IBQUIT=0 D SELECT I IBQUIT G ENQ1
"RTN","IBCERP6",12,0)
 S IBQUIT=0 D PARAM I IBQUIT G ENQ1
"RTN","IBCERP6",13,0)
 ;
"RTN","IBCERP6",14,0)
 W !!,"This report requires a 132 column printer.",!!
"RTN","IBCERP6",15,0)
 ; - Ask device
"RTN","IBCERP6",16,0)
 N %ZIS,ZTRTN,ZTSAVE,ZTDESC
"RTN","IBCERP6",17,0)
 S %ZIS="QM" D ^%ZIS G:POP ENQ1
"RTN","IBCERP6",18,0)
 I $D(IO("Q")) D  G ENQ1
"RTN","IBCERP6",19,0)
 .S ZTRTN="BLD^IBCERP6",ZTDESC="IB - EDI/MRA Claims in Waiting Transmission Status"
"RTN","IBCERP6",20,0)
 .S ZTSAVE("IB*")=""
"RTN","IBCERP6",21,0)
 .D ^%ZTLOAD
"RTN","IBCERP6",22,0)
 .W !!,$S($D(ZTSK):"Your task number"_ZTSK_" has been queued.",1:"Unable to queue this job.")
"RTN","IBCERP6",23,0)
 .K ZTSK,IO("Q") D HOME^%ZIS
"RTN","IBCERP6",24,0)
 U IO
"RTN","IBCERP6",25,0)
 ;
"RTN","IBCERP6",26,0)
BLD ; - Tasked entry point
"RTN","IBCERP6",27,0)
 ;
"RTN","IBCERP6",28,0)
 N IBSTAT,IBILL,IBREC,IBIFN,IBSTAT,IBVSIT,IBCAT,IBI,IBINS,IBPREC,IBEVDT,IBTYP,IBPG,IBCHK
"RTN","IBCERP6",29,0)
 K ^TMP("IBCERP6",$J)
"RTN","IBCERP6",30,0)
 S (IBI,IBIFN)=0 F  S IBI=$O(^IBA(364,"ASTAT","X",IBI)) Q:'IBI  S IBIFN=+$G(^IBA(364,IBI,0)) D
"RTN","IBCERP6",31,0)
 .S IBQUIT=0
"RTN","IBCERP6",32,0)
 .S IBSTAT=$$WNRBILL^IBEFUNC(IBIFN)
"RTN","IBCERP6",33,0)
 .I IBSEL=2 D  I IBQUIT Q
"RTN","IBCERP6",34,0)
 ..I 'IBSTAT,13[IBPARAM S IBQUIT=1 Q
"RTN","IBCERP6",35,0)
 ..I IBSTAT,23[IBPARAM S IBQUIT=1 Q
"RTN","IBCERP6",36,0)
 .S IBSTAT=$S(IBSTAT:"MRA",1:"EDI")
"RTN","IBCERP6",37,0)
 .S IBREC=$G(^DGCR(399,+IBIFN,0))
"RTN","IBCERP6",38,0)
 .S IBVSIT=$S($$INPAT^IBCEF(IBIFN,1)=1:"INP",1:"OPT")
"RTN","IBCERP6",39,0)
 .;JWS;IB*2.0*592:Dental form 7
"RTN","IBCERP6",40,0)
 .S IBCAT=$S($$FT^IBCEF(IBIFN)=3:"UB04",$$FT^IBCEF(IBIFN)=7:"J430D",1:"1500")
"RTN","IBCERP6",41,0)
 .S IBILL=$$BN1^PRCAFN(IBIFN)
"RTN","IBCERP6",42,0)
 .S IBINS=$P($G(^DIC(36,+$$CURR^IBCEF2(IBIFN),0)),U)
"RTN","IBCERP6",43,0)
 .S IBPREC=$$PT^IBEFUNC(+$P(IBREC,U,2))
"RTN","IBCERP6",44,0)
 .S IBEVDT=$P($G(^DGCR(399,IBIFN,"U")),U) ;Statement from date
"RTN","IBCERP6",45,0)
 .;S IBTYP=$P(IBREC,U,24)_U_$P($G(^DGCR(399.1,+$P(IBREC,U,25),0)),U)_U_$P(IBREC,U,26)
"RTN","IBCERP6",46,0)
 .S IBTYP=$$GET1^DIQ(399,IBIFN,.24)_U_$$GET1^DIQ(399,IBIFN,.25)_U_$$GET1^DIQ(399,IBIFN,.26)
"RTN","IBCERP6",47,0)
 .S ^TMP("IBCERP6",$J,IBSTAT,IBILL)=IBILL_U_IBVSIT_U_IBCAT_U_$P(IBPREC,U)_U_$E($P(IBPREC,U,2),8,11)_U_IBEVDT_U_IBTYP_U_IBINS
"RTN","IBCERP6",48,0)
 ;
"RTN","IBCERP6",49,0)
PRINT ;Prints report
"RTN","IBCERP6",50,0)
 S (IBQUIT,IBPG,IBEDI,IBMRA,IBTOT)=0 D HDR
"RTN","IBCERP6",51,0)
 I '$D(^TMP("IBCERP6",$J)) W !!,"There are no "_$S(IBPARAM=1:"EDI",IBPARAM=2:"MRA",1:"EDI/MRA")_" records"_$S(IBSEL=2:" trapped",1:"")_" in a ready for extract status" G ENQ1
"RTN","IBCERP6",52,0)
 S IBSTAT="" F  S IBSTAT=$O(^TMP("IBCERP6",$J,IBSTAT)) Q:IBSTAT=""!(IBQUIT=1)  D
"RTN","IBCERP6",53,0)
 .S IBILL="" F  S IBILL=$O(^TMP("IBCERP6",$J,IBSTAT,IBILL)) Q:IBILL=""!(IBQUIT=1)  S IBREC=^(IBILL)  D
"RTN","IBCERP6",54,0)
 ..I ($Y+5)>IOSL D  I IBQUIT Q
"RTN","IBCERP6",55,0)
 ...D ASK I IBQUIT Q
"RTN","IBCERP6",56,0)
 ...D HDR
"RTN","IBCERP6",57,0)
 ..;
"RTN","IBCERP6",58,0)
 ..W !,?2,$P(IBREC,U),?15,$P(IBREC,U,2),?22,$P(IBREC,U,3)
"RTN","IBCERP6",59,0)
 ..W ?28,$E($P(IBREC,U,4),1,20),?50,$P(IBREC,U,5)
"RTN","IBCERP6",60,0)
 ..W ?57,$$FMTE^XLFDT($P(IBREC,U,6)),?73,$E($P(IBREC,U,7),1,8)_", "_$E($P(IBREC,U,8),1,3)_", "_$E($P(IBREC,U,9),1,16),?110,$E($P(IBREC,U,10),1,20)
"RTN","IBCERP6",61,0)
 ..I IBSTAT="EDI" S IBEDI=IBEDI+1
"RTN","IBCERP6",62,0)
 ..E  S IBMRA=IBMRA+1
"RTN","IBCERP6",63,0)
 ..S IBTOT=IBTOT+1
"RTN","IBCERP6",64,0)
 W !!
"RTN","IBCERP6",65,0)
 I IBEDI>0 W !,?3,"Total EDI Bills ",IBEDI
"RTN","IBCERP6",66,0)
 I IBMRA>0 W !,?3,"Total MRA Bills ",IBMRA
"RTN","IBCERP6",67,0)
 W !!,?3,"Total bills ",IBTOT
"RTN","IBCERP6",68,0)
 K ^TMP("IBCERP6",$J)
"RTN","IBCERP6",69,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCERP6",70,0)
 I '$D(ZTQUEUED) D ^%ZISC
"RTN","IBCERP6",71,0)
ENQ1 K IBPARAM,IBQUIT,IBSEL,Y,IBEDI,IBMRA,IBTOT Q
"RTN","IBCERP6",72,0)
 ;
"RTN","IBCERP6",73,0)
PARAM ;
"RTN","IBCERP6",74,0)
 S IBPARAM=$P($G(^IBE(350.9,1,8)),U,10) ;Get MRA/EDI site parameter setting
"RTN","IBCERP6",75,0)
 I IBPARAM="" D
"RTN","IBCERP6",76,0)
 .W !!,"Your EDI/MRA site parameter setting is incomplete."
"RTN","IBCERP6",77,0)
 .W !,"Please contact your coordinator.",!
"RTN","IBCERP6",78,0)
 .S IBQUIT=1
"RTN","IBCERP6",79,0)
 ;
"RTN","IBCERP6",80,0)
 I IBSEL=2,IBPARAM=3 D
"RTN","IBCERP6",81,0)
 .W !!,"Your site parameters are set to allow both EDI and MRA"
"RTN","IBCERP6",82,0)
 .W !,"transmissions.  There is no need to run this report.",!
"RTN","IBCERP6",83,0)
 .S IBQUIT=1
"RTN","IBCERP6",84,0)
 Q
"RTN","IBCERP6",85,0)
 ;
"RTN","IBCERP6",86,0)
HDR ;Prints report heading
"RTN","IBCERP6",87,0)
 ; IB*2.0*211
"RTN","IBCERP6",88,0)
 ;I $E(IOST,1,2)="C-" W @IOF,*13
"RTN","IBCERP6",89,0)
 I $S(IBPG:1,1:$E(IOST,1,2)="C-") W @IOF,*13
"RTN","IBCERP6",90,0)
 S IBPG=IBPG+1
"RTN","IBCERP6",91,0)
 W !!,?45,$S(IBSEL=2:"Trapped ",1:"")_" Claims Ready for Extract",?90,$$FMTE^XLFDT(DT),?110,"Page: ",IBPG
"RTN","IBCERP6",92,0)
 W !!,?15,"Inpt/",?23,"Inst/",!,?4,"Bill #",?15,"Opt",?23,"Prof",?32,"Name"
"RTN","IBCERP6",93,0)
 W ?51,"SSN",?57,"Statement Date",?89,"Type",?110,"Insurance Co."
"RTN","IBCERP6",94,0)
 W !,$TR($J("",IOM)," ","=")
"RTN","IBCERP6",95,0)
 Q
"RTN","IBCERP6",96,0)
 ;
"RTN","IBCERP6",97,0)
ASK ;
"RTN","IBCERP6",98,0)
 I $E(IOST,1,2)'["C-" Q
"RTN","IBCERP6",99,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT
"RTN","IBCERP6",100,0)
 S DIR(0)="E" D ^DIR
"RTN","IBCERP6",101,0)
 I ($D(DIRUT))!($D(DUOUT)) S IBQUIT=1 Q
"RTN","IBCERP6",102,0)
 Q
"RTN","IBCERP6",103,0)
 ;
"RTN","IBCERP6",104,0)
SELECT ;Report selection
"RTN","IBCERP6",105,0)
 N DIR,DIROUT,DTOUT,DUOUT,DTOUT
"RTN","IBCERP6",106,0)
 S IBSEL=0
"RTN","IBCERP6",107,0)
 W !!  S DIR("A",1)="Do you want to print a list of:"
"RTN","IBCERP6",108,0)
 S DIR("A",2)=""
"RTN","IBCERP6",109,0)
 S DIR("A",3)="     1 - All bills in Ready for Extract status"
"RTN","IBCERP6",110,0)
 S DIR("A",4)="     2 - Bills trapped due to EDI/MRA parameter being turned off"
"RTN","IBCERP6",111,0)
 S DIR("A",5)=""
"RTN","IBCERP6",112,0)
 S DIR(0)="SAXB^1:All bills;2:Trapped bills"
"RTN","IBCERP6",113,0)
 W !
"RTN","IBCERP6",114,0)
 S DIR("A")="Select Number: ",DIR("B")=1
"RTN","IBCERP6",115,0)
 D ^DIR
"RTN","IBCERP6",116,0)
 I +Y'>0 S IBQUIT=1 Q
"RTN","IBCERP6",117,0)
 S IBSEL=+Y
"RTN","IBCERP6",118,0)
 Q
"RTN","IBCERP7")
0^129^B33534777^B32855168
"RTN","IBCERP7",1,0)
IBCERP7 ;AITC/KDM - HID   HCCH Payer ID Report ;5/4/2017
"RTN","IBCERP7",2,0)
 ;;2.0;INTEGRATED BILLING;**577,592**;21-MAR-94;Build 58
"RTN","IBCERP7",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCERP7",4,0)
 ; This report is a PAYER ID report based on the 277stat msg responses from the clearing house
"RTN","IBCERP7",5,0)
 ; This report will give a snap shot view of what is on file at the time of running.
"RTN","IBCERP7",6,0)
 ; The results may vary each running depending on the timing of transactions posted to the file   
"RTN","IBCERP7",7,0)
 ; Refer to US976
"RTN","IBCERP7",8,0)
 ; Called by IB BILLING SUPERVISOR MENU, Opt:SYST, Opt:HID
"RTN","IBCERP7",9,0)
 ;
"RTN","IBCERP7",10,0)
ENT ; Menu Option Entry Point
"RTN","IBCERP7",11,0)
 N BEGDT,BEGIN,DT,END,ENDDT,HDR1,HDR2,HDR3,IBABEG,IBAEND,IBEOB,IBIFN,IBQUIT,LNTOT,MAX,PAGES,PGC,RNAME,U,Y
"RTN","IBCERP7",12,0)
 N CNT,DASH,EORMSG,NONEMSG,POP
"RTN","IBCERP7",13,0)
 S IBQUIT=0,RNAME="IBCERP7"
"RTN","IBCERP7",14,0)
 D DATES Q:IBQUIT  Q:'Y
"RTN","IBCERP7",15,0)
 D DEVICE Q:POP  Q:IBQUIT
"RTN","IBCERP7",16,0)
QUE ; Queued Entry Point
"RTN","IBCERP7",17,0)
 K ^TMP(RNAME,$J)
"RTN","IBCERP7",18,0)
 D GATHER
"RTN","IBCERP7",19,0)
 D HDRINIT
"RTN","IBCERP7",20,0)
 D HEADER Q:IBQUIT
"RTN","IBCERP7",21,0)
 D PRINT
"RTN","IBCERP7",22,0)
 D EXIT
"RTN","IBCERP7",23,0)
 Q
"RTN","IBCERP7",24,0)
DATES ;  Enter the from and to dates for this report
"RTN","IBCERP7",25,0)
 ;
"RTN","IBCERP7",26,0)
 N DIR
"RTN","IBCERP7",27,0)
 W ! S DIR(0)="DA^:DT:EX",DIR("A")="Enter Earliest Date: ",DIR("B")=$$HTE^XLFDT($H-30),DIR("?")="Enter the earliest transaction date for the transaction report."
"RTN","IBCERP7",28,0)
 D ^DIR K DIR Q:'Y  S IBABEG=+Y,BEGIN=Y(0),BEGDT=$$FMTE^XLFDT(IBABEG,2)
"RTN","IBCERP7",29,0)
 ;
"RTN","IBCERP7",30,0)
 W ! S DIR(0)="DA^"_+Y_":DT:EX",DIR("A")="Enter Latest Date: ",DIR("B")=$$FMTE^XLFDT(DT,1)
"RTN","IBCERP7",31,0)
 ; DIR("?")="Enter the latest date for the transaction report."
"RTN","IBCERP7",32,0)
 D ^DIR K DIR Q:'Y  S IBAEND=+Y,END=Y(0),ENDDT=$$FMTE^XLFDT(IBAEND,2)
"RTN","IBCERP7",33,0)
 ;
"RTN","IBCERP7",34,0)
 Q
"RTN","IBCERP7",35,0)
 ;
"RTN","IBCERP7",36,0)
DEVICE ; - Ask device
"RTN","IBCERP7",37,0)
 ;
"RTN","IBCERP7",38,0)
 N %ZIS,ZTDESC,ZTIO,ZTQUEUED,ZTRTN,ZTSAVE
"RTN","IBCERP7",39,0)
 W !!!,"You will need a 132 column printer for this report",!
"RTN","IBCERP7",40,0)
 S %ZIS="QM" D ^%ZIS S:POP IBQUIT=1 Q:POP
"RTN","IBCERP7",41,0)
 I $D(IO("Q")) D  S IBQUIT=1 Q
"RTN","IBCERP7",42,0)
 . S ZTRTN="QUE^IBCERP7",ZTDESC="HCCH Payer ID Report"
"RTN","IBCERP7",43,0)
 . S ZTSAVE("BEGIN")=""
"RTN","IBCERP7",44,0)
 . S ZTSAVE("END")=""
"RTN","IBCERP7",45,0)
 . S ZTSAVE("IBABEG")=""
"RTN","IBCERP7",46,0)
 . S ZTSAVE("IBAEND")=""
"RTN","IBCERP7",47,0)
 . S ZTSAVE("BEGDT")=""
"RTN","IBCERP7",48,0)
 . S ZTSAVE("ENDDT")=""
"RTN","IBCERP7",49,0)
 . S ZTSAVE("RNAME")=""
"RTN","IBCERP7",50,0)
 . S ZTSAVE("IBQUIT")=""
"RTN","IBCERP7",51,0)
 . D ^%ZTLOAD
"RTN","IBCERP7",52,0)
 . W !!,$S($D(ZTSK):"Your task number "_ZTSK_" has been queued.",1:"Unable to queue this job.")
"RTN","IBCERP7",53,0)
 . K ZTSK D HOME^%ZIS
"RTN","IBCERP7",54,0)
 . W !!! I $E(IOST,1,2)["C-" K DIR S DIR(0)="E" D ^DIR K DIR    ;pause to see task no.
"RTN","IBCERP7",55,0)
 U IO
"RTN","IBCERP7",56,0)
 Q
"RTN","IBCERP7",57,0)
 ;
"RTN","IBCERP7",58,0)
GATHER ;GO GET THE INFO BASED ON THE DATES ENTERED
"RTN","IBCERP7",59,0)
 ; uses ^DIC(36,"AEDIX",DATE,INSURANCE IEN,) to get data within date range.  
"RTN","IBCERP7",60,0)
 ; If data is within date range sets up ^TMP($J file with all data needed for the report.
"RTN","IBCERP7",61,0)
 ; ^DIC(36,"AEDIX",DATE,INSURANCE IEN ,EDI ID NUMBER,TYPE "P" OR "I")=EDI ID NUMBER ON FILE ;
"RTN","IBCERP7",62,0)
 ;
"RTN","IBCERP7",63,0)
 ;(If  EDI NUMBER ON FILE is null- it is considered  updated, not attempted)
"RTN","IBCERP7",64,0)
 ;
"RTN","IBCERP7",65,0)
 ;  Uses the insurance ien from Cross ref to extract the name, address, city, and state from the ^DIC(36,IEN)
"RTN","IBCERP7",66,0)
 ;  Uses the Type from cross ref as the EDI PayerID for the report. For printing the I="Inst";P="Prof"
"RTN","IBCERP7",67,0)
 ;  Uses the EDI ID NUMBER from Cross ref to be the NewValue on report.
"RTN","IBCERP7",68,0)
 ;  Uses the EDI ID NUMBER ON FILE from cross ref to be the OldValue on report
"RTN","IBCERP7",69,0)
 ;  If the EDI ID NUMBER ON FILE from cross ref is null- set the "updated" value for report to be "Yes", otherwise "No"
"RTN","IBCERP7",70,0)
 ;
"RTN","IBCERP7",71,0)
 ;
"RTN","IBCERP7",72,0)
 N DATE,EDIONFILE,EDINO,IBADDRESS,IBCITY,IBNAME,IBSTATE,IBPIEN,LNCNT,TYPE
"RTN","IBCERP7",73,0)
 S $P(DASH,"_",132)=""
"RTN","IBCERP7",74,0)
 S U="^",LNTOT=0,PGC=1,MAX=IOSL
"RTN","IBCERP7",75,0)
 S DATE=IBABEG-1
"RTN","IBCERP7",76,0)
 F  S DATE=$O(^DIC(36,"AEDIX",DATE)) Q:DATE=""  Q:DATE>IBAEND  D
"RTN","IBCERP7",77,0)
 . S IBPIEN="" F  S IBPIEN=$O(^DIC(36,"AEDIX",DATE,IBPIEN)) Q:IBPIEN=""  D
"RTN","IBCERP7",78,0)
 .. S EDINO="" F  S EDINO=$O(^DIC(36,"AEDIX",DATE,IBPIEN,EDINO)) Q:EDINO=""  D
"RTN","IBCERP7",79,0)
 ... S TYPE="" F  S TYPE=$O(^DIC(36,"AEDIX",DATE,IBPIEN,EDINO,TYPE)) Q:TYPE=""  D
"RTN","IBCERP7",80,0)
 .... S EDIONFILE=$G(^DIC(36,"AEDIX",DATE,IBPIEN,EDINO,TYPE))
"RTN","IBCERP7",81,0)
 .... S IBNAME=$$GET1^DIQ(36,IBPIEN,.01)
"RTN","IBCERP7",82,0)
 .... S IBADDRESS=$$GET1^DIQ(36,IBPIEN,.111)
"RTN","IBCERP7",83,0)
 .... S IBCITY=$$GET1^DIQ(36,IBPIEN,.114)
"RTN","IBCERP7",84,0)
 .... S IBSTATE=$$GET1^DIQ(36,IBPIEN,.115,"I")
"RTN","IBCERP7",85,0)
 .... S ^TMP(RNAME,$J,IBNAME,DATE,EDINO,TYPE)=IBPIEN_U_IBADDRESS_U_IBCITY_U_IBSTATE_U_EDIONFILE
"RTN","IBCERP7",86,0)
 .... S LNTOT=LNTOT+1
"RTN","IBCERP7",87,0)
 Q
"RTN","IBCERP7",88,0)
 ;
"RTN","IBCERP7",89,0)
PRINT ;  Print data
"RTN","IBCERP7",90,0)
 ;  PGC=page ct,LNTOT=no of lines to be printed,LNCNT=when to page break
"RTN","IBCERP7",91,0)
 ;  MAX=IOSL (device length)
"RTN","IBCERP7",92,0)
 ;
"RTN","IBCERP7",93,0)
 N ADDRESS,CITY,DATE,EDINO,EDIONFILE,IEN,NAME,PID,STATE,TYPE,UPDATE
"RTN","IBCERP7",94,0)
 S EORMSG="*** END OF REPORT ***"
"RTN","IBCERP7",95,0)
 S NONEMSG="* * * N O   D A T A   T O   P R I N T * * *"
"RTN","IBCERP7",96,0)
 ;
"RTN","IBCERP7",97,0)
 I '$D(^TMP(RNAME,$J)) W !!!,NONEMSG D END Q
"RTN","IBCERP7",98,0)
 S NAME="" F  S NAME=$O(^TMP(RNAME,$J,NAME)) Q:NAME=""  D
"RTN","IBCERP7",99,0)
 . S DATE="" F  S DATE=$O(^TMP(RNAME,$J,NAME,DATE)) Q:DATE=""  D
"RTN","IBCERP7",100,0)
 .. S EDINO="" F  S EDINO=$O(^TMP(RNAME,$J,NAME,DATE,EDINO)) Q:EDINO=""  D
"RTN","IBCERP7",101,0)
 ... S TYPE="" F  S TYPE=$O(^TMP(RNAME,$J,NAME,DATE,EDINO,TYPE)) Q:TYPE=""  Q:IBQUIT  D
"RTN","IBCERP7",102,0)
 .... ;JWS;IB*2.0*592;added 'Dent' for Dental
"RTN","IBCERP7",103,0)
 .... S PID=$S(TYPE="I":"Inst",TYPE="D":"Dent",1:"Prof")
"RTN","IBCERP7",104,0)
 .... ;S NAME=$P(^TMP(RNAME,$J,DATE,IEN,EDINO,TYPE),U,1)
"RTN","IBCERP7",105,0)
 .... S ADDRESS=$P(^TMP(RNAME,$J,NAME,DATE,EDINO,TYPE),U,2)
"RTN","IBCERP7",106,0)
 .... S CITY=$P(^TMP(RNAME,$J,NAME,DATE,EDINO,TYPE),U,3)
"RTN","IBCERP7",107,0)
 .... S STATE=$P(^DIC(5,$P(^TMP(RNAME,$J,NAME,DATE,EDINO,TYPE),U,4),0),U,2)
"RTN","IBCERP7",108,0)
 .... S EDIONFILE=$P(^TMP(RNAME,$J,NAME,DATE,EDINO,TYPE),U,5)
"RTN","IBCERP7",109,0)
 .... S UPDATE=$S(EDIONFILE="":"Yes",1:"No")
"RTN","IBCERP7",110,0)
 .... I LNCNT>MAX D HEADER Q:IBQUIT
"RTN","IBCERP7",111,0)
 .... W !,$E(NAME,1,30),?33,$E(ADDRESS,1,35)," ",CITY,", ",STATE,?73,$$FMTE^XLFDT(DATE,2),?84,PID,?97,EDIONFILE,?109,EDINO,?121,UPDATE
"RTN","IBCERP7",112,0)
 .... S LNCNT=LNCNT+1
"RTN","IBCERP7",113,0)
 I LNCNT>MAX D HEADER
"RTN","IBCERP7",114,0)
 Q:IBQUIT
"RTN","IBCERP7",115,0)
END W !!!,?49,EORMSG,!!!
"RTN","IBCERP7",116,0)
 I $E(IOST,1,2)["C-" K DIR S DIR(0)="E" D ^DIR K DIR    ;pause at end of report
"RTN","IBCERP7",117,0)
 Q
"RTN","IBCERP7",118,0)
 ;
"RTN","IBCERP7",119,0)
HDRINIT ; Initial setting
"RTN","IBCERP7",120,0)
 ;
"RTN","IBCERP7",121,0)
 S LNCNT=0
"RTN","IBCERP7",122,0)
 I PGC=1,$E(IOST,1,2)["C-" W @IOF  ; refresh terminal screen on 1st hdr
"RTN","IBCERP7",123,0)
 I 'LNTOT S PAGES=1
"RTN","IBCERP7",124,0)
 I LNTOT,PGC=1 D
"RTN","IBCERP7",125,0)
 . S LNCNT=0
"RTN","IBCERP7",126,0)
 . S PAGES=LNTOT/(MAX-10) I PAGES<1 S PAGES=1
"RTN","IBCERP7",127,0)
 . I PAGES["." S PAGES=$P(PAGES+1,".")    ; if more than one page set whole number
"RTN","IBCERP7",128,0)
 S HDR1="Clearinghouse Payer ID Report"
"RTN","IBCERP7",129,0)
 S HDR2=$$FMTE^XLFDT($$NOW^XLFDT,1)
"RTN","IBCERP7",130,0)
 Q
"RTN","IBCERP7",131,0)
 ;
"RTN","IBCERP7",132,0)
HEADER ; Print Header info
"RTN","IBCERP7",133,0)
 ;
"RTN","IBCERP7",134,0)
 N DIR,DUOUT
"RTN","IBCERP7",135,0)
 S LNCNT=0
"RTN","IBCERP7",136,0)
 I PGC'=1 D  Q:IBQUIT
"RTN","IBCERP7",137,0)
 . W !
"RTN","IBCERP7",138,0)
 . I $E(IOST,1,2)["C-" K DIR S DIR(0)="E" D ^DIR K DIR I $D(DUOUT) S IBQUIT=1 Q:IBQUIT
"RTN","IBCERP7",139,0)
 . W @IOF   ; refresh terminal screen on hdr
"RTN","IBCERP7",140,0)
 W !,HDR1,?43,HDR2,?98,"  Page: "_PGC_" of "_PAGES
"RTN","IBCERP7",141,0)
 W !,"Timeframe: "_BEGDT_" thru "_ENDDT
"RTN","IBCERP7",142,0)
 W !!
"RTN","IBCERP7",143,0)
 W !,"Insurance Co",?33,"Address",?73,"Date",?84,"EDI-PayerID",?97,"OldValue",?109,"NewValue",?121,"Updated"
"RTN","IBCERP7",144,0)
 W !,DASH
"RTN","IBCERP7",145,0)
 S LNCNT=LNCNT+10,PGC=PGC+1
"RTN","IBCERP7",146,0)
 Q
"RTN","IBCERP7",147,0)
EXIT() ;clean up and quit
"RTN","IBCERP7",148,0)
 N ZTREQ
"RTN","IBCERP7",149,0)
 ; Force a form feed at end of a printer report
"RTN","IBCERP7",150,0)
 I $E(IOST,1,2)'["C-" W @IOF
"RTN","IBCERP7",151,0)
 ; handle device closing before exiting
"RTN","IBCERP7",152,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCERP7",153,0)
 I '$D(ZTQUEUED) D ^%ZISC
"RTN","IBCERP7",154,0)
 K ^TMP(RNAME,$J)
"RTN","IBCERP7",155,0)
 K BEGIN,BEGDT,ENDDT,IBABEG,IBAEND,IBQUIT,IEN,LNCNT,Y
"RTN","IBCERP7",156,0)
 Q
"RTN","IBCEST")
0^32^B99553380^B96695131
"RTN","IBCEST",1,0)
IBCEST ;ALB/TMP - 837 EDI STATUS MESSAGE PROCESSING ;17-APR-96
"RTN","IBCEST",2,0)
 ;;2.0;INTEGRATED BILLING;**137,189,197,135,283,320,368,397,407,577,592**;21-MAR-94;Build 58
"RTN","IBCEST",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEST",4,0)
 ; IA 4043 for call to AUDITX^PRCAUDT
"RTN","IBCEST",5,0)
 Q
"RTN","IBCEST",6,0)
 ;
"RTN","IBCEST",7,0)
UPD361(IBTDA) ; Update IB BILL STATUS MESSAGES file
"RTN","IBCEST",8,0)
 ; IBTDA = ien of return message in file 364.2
"RTN","IBCEST",9,0)
 ;
"RTN","IBCEST",10,0)
 N IB,IB0,IBSEQ,IB00,IBBILL,IBBTCH,IBMNUM,IBDATE,IBTYP
"RTN","IBCEST",11,0)
 ;
"RTN","IBCEST",12,0)
 I '$$LOCK^IBCEM(IBTDA) G UPDQ ;Lock message in file 364.2
"RTN","IBCEST",13,0)
 ;
"RTN","IBCEST",14,0)
 S IB0=$G(^IBA(364.2,IBTDA,0))
"RTN","IBCEST",15,0)
 S IBMNUM=$P(IB0,U) ; Message number
"RTN","IBCEST",16,0)
 S IB00=$G(^IBA(364,+$P(IB0,U,5),0)) ; Transmit bill entry
"RTN","IBCEST",17,0)
 S IBBILL=+IB00 ; Actual bill ien in file 399
"RTN","IBCEST",18,0)
 S IBBTCH=$P(IB0,U,4) ; Batch #
"RTN","IBCEST",19,0)
 ;
"RTN","IBCEST",20,0)
 ; Auto-audit bills based on status code on '10' record of status msg
"RTN","IBCEST",21,0)
 ; flat file
"RTN","IBCEST",22,0)
 I IBBILL,$P($T(PRCAUDT+1^PRCAUDT),"**",2)[",173" D
"RTN","IBCEST",23,0)
 . N Z,Z0,Z1,OK
"RTN","IBCEST",24,0)
 . Q:+$$STA^PRCAFN(IBBILL)'=104
"RTN","IBCEST",25,0)
 . S (Z,OK)=0
"RTN","IBCEST",26,0)
 . F  S Z=$O(^IBA(364.2,IBTDA,2,Z)) Q:'Z  S Z0=$P($G(^(Z,0)),"##RAW DATA: ",2) I +Z0=10 S Z0=$P(Z0,U,5) D  Q:OK
"RTN","IBCEST",27,0)
 .. ; Strip leading spaces
"RTN","IBCEST",28,0)
 .. S Z0=$$TRIM^XLFSTR(Z0)
"RTN","IBCEST",29,0)
 .. Q:Z0=""
"RTN","IBCEST",30,0)
 .. I $$SCODE^IBCEST1(Z0),$P($G(^DGCR(399.3,+$P($G(^DGCR(399,IBBILL,0)),U,7),0)),U,11) D AUDITX^PRCAUDT(IBBILL) S OK=1 ; IA 4043
"RTN","IBCEST",31,0)
 ;
"RTN","IBCEST",32,0)
 I $S(IBMNUM="":1,1:'IBBILL&(IBBTCH="")) D DELMSG^IBCESRV2(IBTDA) G UPDQ
"RTN","IBCEST",33,0)
 ;
"RTN","IBCEST",34,0)
 ; Individual bill   ; KDM US129 IB*2*577 rework Individual vs. Batch to Correct Storage of Payer ID
"RTN","IBCEST",35,0)
 I IBBILL D UPDTBILL() G UPDQ
"RTN","IBCEST",36,0)
 ;
"RTN","IBCEST",37,0)
 ; Batch - update each bill separately
"RTN","IBCEST",38,0)
 S IBBILL=""
"RTN","IBCEST",39,0)
 F  S IBBILL=$O(^IBA(364,"ABABI",+IBBTCH,IBBILL)) Q:'IBBILL  D
"RTN","IBCEST",40,0)
 . Q:$D(^TMP("IBCONF",$J,IBBILL))  ;Bill was rejected
"RTN","IBCEST",41,0)
 . S IB=$O(^IBA(364,"ABABI",+IBBTCH,IBBILL,0))
"RTN","IBCEST",42,0)
 . Q:'IB
"RTN","IBCEST",43,0)
 . D UPDTBILL()     ;KDM US129 IB*2*577 Correct Storage of PAYER ID
"RTN","IBCEST",44,0)
 ;
"RTN","IBCEST",45,0)
 Q
"RTN","IBCEST",46,0)
 ;
"RTN","IBCEST",47,0)
UPDTBILL()     ;KDM US129 IB*2*577 New section to Correct Storage of PAYER ID
"RTN","IBCEST",48,0)
 N IBA1,IBMSG0,IBPID
"RTN","IBCEST",49,0)
 S IBPID="",IBA1=0
"RTN","IBCEST",50,0)
 ;
"RTN","IBCEST",51,0)
 F  S IBA1=$O(^IBA(364.2,IBTDA,2,IBA1)) Q:'IBA1  D  Q:IBPID]""
"RTN","IBCEST",52,0)
 . S IBMSG0=$P($G(^(IBA1,0)),"##RAW DATA: ",2)
"RTN","IBCEST",53,0)
 . I +IBMSG0=277,$P(IBMSG0,U,5)="N" S IBPID=$P(IBMSG0,U,11)
"RTN","IBCEST",54,0)
 ;
"RTN","IBCEST",55,0)
 S IBSEQ=$P(IB00,U,8) S:IBSEQ="" IBSEQ="P"
"RTN","IBCEST",56,0)
 D STORE(IB0,IBBTCH,IBMNUM,IBTDA,IBBILL,IBSEQ,IBPID,1)
"RTN","IBCEST",57,0)
 Q
"RTN","IBCEST",58,0)
 ;
"RTN","IBCEST",59,0)
STORE(IB0,IBBTCH,IBMNUM,IBTDA,IBBILL,IBSEQ,IBPID,IB1) ;
"RTN","IBCEST",60,0)
 ;
"RTN","IBCEST",61,0)
 ; IB0 = 0-node of message in file 364.2
"RTN","IBCEST",62,0)
 ; IBBTCH = ien of batch in file 364.1
"RTN","IBCEST",63,0)
 ; IBMNUM = actual message number
"RTN","IBCEST",64,0)
 ; IBTDA = ien of message in file 364.2
"RTN","IBCEST",65,0)
 ; IBBILL = ien of bill in 399
"RTN","IBCEST",66,0)
 ; IBSEQ = P/S/T/ for COB sequence related to message
"RTN","IBCEST",67,0)
 ; IBPID = the payer id returned from clearinghouse for the claim
"RTN","IBCEST",68,0)
 ; IB1 = flag that says if the message was for a single bill or a batch.
"RTN","IBCEST",69,0)
 ;       Batch statuses have an additional standard text entry.
"RTN","IBCEST",70,0)
 ;       1 = single bill 0 = batch
"RTN","IBCEST",71,0)
 ; 
"RTN","IBCEST",72,0)
 N DA,DIK,DIE,DIC,X,Y,DR,DO,DD,DLAYGO,Z,Z0,Z1,Z2,Z3,IBT,IBDUP,IBFLDS,IBY,IBAUTO,IBLN
"RTN","IBCEST",73,0)
 ;
"RTN","IBCEST",74,0)
 S X=IBBILL,IBDUP=0
"RTN","IBCEST",75,0)
 ;
"RTN","IBCEST",76,0)
 S IBFLDS=".02////"_$P(IB0,U,3)
"RTN","IBCEST",77,0)
 S IBFLDS=IBFLDS_";.03////"_$S($$EXTERNAL^DILFD(364.2,.02,"U",$P(IB0,U,2))["REJ":"R",1:"I")_";.05////"_IBBTCH_";.06////"_IBMNUM_";.04////"_+$P(IB0,U,8)_";.07////"_IBSEQ_$S($P(IB0,U,5):";.11////"_$P(IB0,U,5),1:"")
"RTN","IBCEST",78,0)
 S IBFLDS=IBFLDS_";.12////"_$P(IB0,U,10)_";.09////0"
"RTN","IBCEST",79,0)
 S IBFLDS=IBFLDS_";.15////"_$$CHKSUM^IBCEST1("^IBA(364.2,"_IBTDA_",2)")
"RTN","IBCEST",80,0)
 I IBPID'="" D
"RTN","IBCEST",81,0)
 . ;JWS;IB*2.0*592;Dental Form 7
"RTN","IBCEST",82,0)
 . S IBPID("TYPE")=$S($$FT^IBCEF(IBBILL)=2:"P",$$FT^IBCEF(IBBILL)=7:"D",1:"I")
"RTN","IBCEST",83,0)
 . D UPDINS(.IBPID,$$POLICY^IBCEF(IBBILL,1,$TR(IBSEQ,"PST","123")),IBBILL,IBTDA)      ;KDM US129 IB*2*577
"RTN","IBCEST",84,0)
 ;
"RTN","IBCEST",85,0)
 I IBDUP D  I $D(Y) G UPDQ
"RTN","IBCEST",86,0)
 . ; Stuff fields into existing entry
"RTN","IBCEST",87,0)
 . ; (may be needed for reprocessing of aborted updates)
"RTN","IBCEST",88,0)
 . S DIE="^IBM(361,",DA=IBDUP,DR=IBFLDS_";1///@"
"RTN","IBCEST",89,0)
 . D ^DIE
"RTN","IBCEST",90,0)
 . I $D(Y) S IBY=-1 Q  ;Update not successful
"RTN","IBCEST",91,0)
 . S IBY=IBDUP
"RTN","IBCEST",92,0)
 ;
"RTN","IBCEST",93,0)
 K IBT
"RTN","IBCEST",94,0)
 I 'IBDUP D  ; Create new entry and stuff fields
"RTN","IBCEST",95,0)
 . S DIC(0)="L",DIC="^IBM(361,",DLAYGO=361
"RTN","IBCEST",96,0)
 . S DIC("DR")=IBFLDS
"RTN","IBCEST",97,0)
 . D FILE^DICN
"RTN","IBCEST",98,0)
 . K DO,DD,DLAYGO,DIC
"RTN","IBCEST",99,0)
 . S IBY=+Y
"RTN","IBCEST",100,0)
 . Q:IBY'>0
"RTN","IBCEST",101,0)
 . ;
"RTN","IBCEST",102,0)
 . ; IB*2*320 - Check for duplicate status message
"RTN","IBCEST",103,0)
 . NEW IBNEW,IBOLD,PCE,Z,DIK,DA
"RTN","IBCEST",104,0)
 . S IBNEW=""
"RTN","IBCEST",105,0)
 . F PCE=3,4,5,7,8,11,15 S IBNEW=IBNEW_$P($G(^IBM(361,IBY,0)),U,PCE)_U
"RTN","IBCEST",106,0)
 . S Z=0
"RTN","IBCEST",107,0)
 . F  S Z=$O(^IBM(361,"B",IBBILL,Z)) Q:'Z  I Z'=IBY D  Q:IBY'>0
"RTN","IBCEST",108,0)
 .. S IBOLD=""
"RTN","IBCEST",109,0)
 .. F PCE=3,4,5,7,8,11,15 S IBOLD=IBOLD_$P($G(^IBM(361,Z,0)),U,PCE)_U
"RTN","IBCEST",110,0)
 .. I IBNEW'=IBOLD Q   ; no duplicate so get the next one
"RTN","IBCEST",111,0)
 .. S DIK="^IBM(361,",DA=IBY,IBY=-1 D ^DIK D DELMSG^IBCESRV2(IBTDA)
"RTN","IBCEST",112,0)
 .. Q
"RTN","IBCEST",113,0)
 . Q
"RTN","IBCEST",114,0)
 ;
"RTN","IBCEST",115,0)
 I IBY>0 D  ;Move text over
"RTN","IBCEST",116,0)
 . K IBT
"RTN","IBCEST",117,0)
 . ;
"RTN","IBCEST",118,0)
 . D BLDMSG(IB1,IBTDA,.IBT,.IBAUTO)
"RTN","IBCEST",119,0)
 . ;
"RTN","IBCEST",120,0)
 . ; IB*2*368 - ymg - 2Q,RE,RP messages will be filed as informational
"RTN","IBCEST",121,0)
 . ; Z0 is the flag for 2Q code
"RTN","IBCEST",122,0)
 . ; Z1 is the flag for RE code
"RTN","IBCEST",123,0)
 . ; Z2 is the flag for RP code
"RTN","IBCEST",124,0)
 . ; Z3 is the flag for autofiling the message
"RTN","IBCEST",125,0)
 . I $P($G(^IBM(361,+IBY,0)),U,3)="R" D
"RTN","IBCEST",126,0)
 .. S Z="",(Z0,Z1,Z2,Z3)=0 F  S Z=$O(IBT(Z)) Q:Z=""!(Z3=1)  D
"RTN","IBCEST",127,0)
 ... S IBLN=$$UP^XLFSTR($G(IBT(Z)))
"RTN","IBCEST",128,0)
 ... I (Z0!Z1!Z2)=0 D
"RTN","IBCEST",129,0)
 .... S:IBLN?.E1"CODE:".P1"2Q".E Z0=1
"RTN","IBCEST",130,0)
 .... S:IBLN?.E1"CODE:".P1"RE".E Z1=1
"RTN","IBCEST",131,0)
 .... S:IBLN?.E1"CODE:".P1"RP".E Z2=1
"RTN","IBCEST",132,0)
 ... I Z0=1 S:IBLN?.P1"CLAIM".P1"REJECTED".P1"BY".P1"CLEARINGHOUSE".E Z3=1
"RTN","IBCEST",133,0)
 ... I Z1=1 S:IBLN?.P1"ELECTRONIC".P1"CLAIM".P1"REJECTED".P1"BY".P1"EMDEON".E Z3=1
"RTN","IBCEST",134,0)
 ... I Z2=1 S:IBLN?.P1"PAPER".P1"CLAIM".P1"REJECTED".P1"BY".P1"EMDEON".E Z3=1
"RTN","IBCEST",135,0)
 .. I Z3=1 S IBAUTO=1,DIE=361,DA=+IBY,DR=".03////I" D ^DIE
"RTN","IBCEST",136,0)
 .. Q
"RTN","IBCEST",137,0)
 . ;
"RTN","IBCEST",138,0)
 . ; if info msg, ck for no review needed based on first line of text
"RTN","IBCEST",139,0)
 . I $G(IBAUTO),$P($G(^IBM(361,+IBY,0)),U,3)="I" D
"RTN","IBCEST",140,0)
 .. S DIE="^IBM(361,",DR=".09////2;.14////1;.1////F",DA=+IBY D ^DIE
"RTN","IBCEST",141,0)
 .. I IB1,$P($G(^IBM(361,+IBY,0)),U,11) S Z="",Z0=0 F  S Z=$O(IBT(Z)) Q:Z=""!(Z0=1)  D
"RTN","IBCEST",142,0)
 ... S Z0=$$PRINTUPD^IBCEU0($$UP^XLFSTR($G(IBT(Z))),$P($G(^IBM(361,+IBY,0)),U,11))
"RTN","IBCEST",143,0)
 . ;
"RTN","IBCEST",144,0)
 . D MSGLNSZ(.IBT) ; Convert Message Lines in IBT to be no longer than 70 chars
"RTN","IBCEST",145,0)
 . D WP^DIE(361,+IBY_",",1,"A","IBT")    ; file message text
"RTN","IBCEST",146,0)
 . ;
"RTN","IBCEST",147,0)
 . ; Delete message after it successfully updates the database.
"RTN","IBCEST",148,0)
 . D DELMSG^IBCESRV2(IBTDA)
"RTN","IBCEST",149,0)
 . Q
"RTN","IBCEST",150,0)
 ;
"RTN","IBCEST",151,0)
UPDQ L -^IBA(364.2,IBTDA,0)
"RTN","IBCEST",152,0)
 Q
"RTN","IBCEST",153,0)
 ;
"RTN","IBCEST",154,0)
BLDMSG(IB1,IBTDA,IBT,IBAUTO) ; Builds message text
"RTN","IBCEST",155,0)
 ; IB1 = flag for batch message
"RTN","IBCEST",156,0)
 ; IBTDA = ien of entry in file 364.2
"RTN","IBCEST",157,0)
 ; IBT = array returned with message text
"RTN","IBCEST",158,0)
 ; IBAUTO = if passed by reference, returns 1 if text indicates review
"RTN","IBCEST",159,0)
 ;          not needed
"RTN","IBCEST",160,0)
 N IBDATA,IBCK,IBZ,IBZ0,IBZ1,Z
"RTN","IBCEST",161,0)
 S (IBZ,IBZ0,IBDATA,IBAUTO,IBCK)=0
"RTN","IBCEST",162,0)
 I 'IB1 S IBT(1)="Status message received for batch "_$P($G(^IBA(364.1,IBBTCH,0)),U)_" dated "_$$FMTE^XLFDT($P($G(^IBA(364.2,IBTDA,0)),U,10),2),IBZ0=1
"RTN","IBCEST",163,0)
 ; Don't move the raw data over, just move the text of the message
"RTN","IBCEST",164,0)
 F  S IBZ=$O(^IBA(364.2,IBTDA,2,IBZ)) Q:'IBZ  S IBZ1=$G(^(IBZ,0)) S IBDATA=($E(IBZ1,1,2)="##") Q:IBDATA  S IBZ0=IBZ0+1,IBT(IBZ0)=IBZ1 I 'IBCK S Z=$$CKREVU^IBCEM4(IBZ1,,,.IBCK),IBAUTO=$S(IBCK:0,Z:1,1:IBAUTO)
"RTN","IBCEST",165,0)
 Q
"RTN","IBCEST",166,0)
 ;
"RTN","IBCEST",167,0)
UPDINS(IBPID,IBINS,IBIFN,IBTDA)     ;KDM US129 IB*2*577
"RTN","IBCEST",168,0)
 ; Update the insurance id or the bill printed at
"RTN","IBCEST",169,0)
 ;    the EDI contractor's print shop and mailed to the ins co.
"RTN","IBCEST",170,0)
 ; IBPID = the id returned from the EDI contractor for the ins co
"RTN","IBCEST",171,0)
 ;      ("TYPE") = P if professional id or I if institutional id or D if Dental
"RTN","IBCEST",172,0)
 ; IBINS = the ien of the insurance co it was sent to (file 36)
"RTN","IBCEST",173,0)
 ; IBIFN = the ien of the claim (file 399)
"RTN","IBCEST",174,0)
 ; IBTDA = ien of entry in file 364.2     ;KDM US129 IB*2*577
"RTN","IBCEST",175,0)
 ;
"RTN","IBCEST",176,0)
 N IBID,IBIDFLD,IBPRT,IBLOOK,DA,DR,DIE,X,Y,Z,UPD     ;KDM US129 IB*2*577
"RTN","IBCEST",177,0)
 ;
"RTN","IBCEST",178,0)
 Q:'$G(IBINS)!($G(IBPID)="")
"RTN","IBCEST",179,0)
 ;
"RTN","IBCEST",180,0)
 ; Strip spaces off the end of data
"RTN","IBCEST",181,0)
 S IBLOOK=""
"RTN","IBCEST",182,0)
 I $L(IBPID) F Z=$L(IBPID):-1:1 I $E(IBPID,Z)'=" " S IBLOOK=$E(IBPID,1,Z) Q
"RTN","IBCEST",183,0)
 ;
"RTN","IBCEST",184,0)
 S IBPRT=($E(IBLOOK,2,5)="PRNT")
"RTN","IBCEST",185,0)
 I IBPRT D  ; Set printed via EDI field on bill
"RTN","IBCEST",186,0)
 . S DA=IBIFN,DIE="^DGCR(399,",DR="26////1" D ^DIE
"RTN","IBCEST",187,0)
 ;
"RTN","IBCEST",188,0)
 ; KDM US129 IB*2*577  correct payer ID storage
"RTN","IBCEST",189,0)
 ;S IBLOOK=$E($S('IBPRT:$P(IBLOOK,"PAYID=",2),1:""),1,5)
"RTN","IBCEST",190,0)
 ;Q:IBLOOK=""!($E(IBLOOK,2,5)="PRNT")
"RTN","IBCEST",191,0)
 I IBPRT Q
"RTN","IBCEST",192,0)
 I IBLOOK'["PAYID=",IBLOOK'["COBID=" Q     ;KDM US129 IB*2*577
"RTN","IBCEST",193,0)
 S IBLOOK=$E($P(IBLOOK,"ID=",2),1,5)
"RTN","IBCEST",194,0)
 Q:IBLOOK=""
"RTN","IBCEST",195,0)
 ;
"RTN","IBCEST",196,0)
 S IBIDFLD="3.0"_$S($G(IBPID("TYPE"))="I":4,1:2)
"RTN","IBCEST",197,0)
 ;JWS;IB*2.0*592;Dental
"RTN","IBCEST",198,0)
 I $G(IBPID("TYPE"))="D" S IBIDFLD=3.15
"RTN","IBCEST",199,0)
 S IBID=$P($G(^DIC(36,+IBINS,3)),U,IBIDFLD*100#100)
"RTN","IBCEST",200,0)
 Q:IBID=IBLOOK
"RTN","IBCEST",201,0)
 S IBDATE=DT,IBTYP=$G(IBPID("TYPE"))     ;KDM  US129 IB*2*577
"RTN","IBCEST",202,0)
 I IBID="" D  G UPDINSQ ; Update insurance co electronic id # if blank
"RTN","IBCEST",203,0)
 . S DIE="^DIC(36,",DR=IBIDFLD_"////"_IBLOOK,DA=IBINS D ^DIE
"RTN","IBCEST",204,0)
 . D UPDLOG(1,IBDATE,IBINS,IBLOOK,IBTYP,IBID)     ;KDM US129 IB*2*577
"RTN","IBCEST",205,0)
 I IBID'="",IBLOOK'="" D  ; Bulletin that the id on file and id returned
"RTN","IBCEST",206,0)
 . ; are different
"RTN","IBCEST",207,0)
 . N XMTO,XMDUZ,XMBODY,IBXM,XMSUBJ,XMZ
"RTN","IBCEST",208,0)
 . S XMTO("I:G.IB EDI")=""
"RTN","IBCEST",209,0)
 . S XMDUZ="",XMBODY="IBXM",XMSUBJ="PAYER ID RETURNED IS DIFFERENT THAN PAYER ID ON FILE"
"RTN","IBCEST",210,0)
 . S IBXM(1)="BILL #     : "_$P($G(^DGCR(399,IBIFN,0)),U)
"RTN","IBCEST",211,0)
 . S IBXM(2)="PAYER      : "_$P($G(^DIC(36,+IBINS,0)),U)
"RTN","IBCEST",212,0)
 . ;JWS;IB*2.0*592;Dental
"RTN","IBCEST",213,0)
 . S IBXM(3)="BILL TYPE  : "_$S($G(IBPID("TYPE"))="I":"INSTITUTIONAL",$G(IBPID("TYPE"))="D":"DENTAL",1:"PROFESSIONAL")
"RTN","IBCEST",214,0)
 . S IBXM(4)="ID ON FILE : "_IBID
"RTN","IBCEST",215,0)
 . S IBXM(5)="ID RETURNED: "_IBLOOK
"RTN","IBCEST",216,0)
 . S IBXM(6)=" ",IBXM(7)="   Please determine which id number is correct and correct the id in the",IBXM(8)="insurance file for this payer, if needed"
"RTN","IBCEST",217,0)
 . D SENDMSG^XMXAPI(XMDUZ,XMSUBJ,XMBODY,.XMTO,,.XMZ)
"RTN","IBCEST",218,0)
 . D UPDLOG(0,IBDATE,IBINS,IBLOOK,IBTYP,IBID)     ;KDM US129, US976 IB*2*577
"RTN","IBCEST",219,0)
 ;
"RTN","IBCEST",220,0)
UPDINSQ Q
"RTN","IBCEST",221,0)
 ;
"RTN","IBCEST",222,0)
UPDLOG(UPD,IBDATE,IBINS,IBLOOK,IBTYP,IBID)    ;KDM US129, US976 IB*2*577 New section for New Payer Report 
"RTN","IBCEST",223,0)
 ; store flds for reporting purposes when updating or attempting to update Payer information (US129)
"RTN","IBCEST",224,0)
 ; ^DIC(36 -17.0 277EDI ID Number
"RTN","IBCEST",225,0)
 ;          17.01 277EDI ID Number
"RTN","IBCEST",226,0)
 ;          17.02 277Date EDI ID Number
"RTN","IBCEST",227,0)
 ;          17.03 277EDI Type (P)ROF or (I)nst or (D)ental
"RTN","IBCEST",228,0)
 ;          17.04 277EDI ID NUMBER ON FILE ;if blank it was an update otherwise it was an attempted update. 
"RTN","IBCEST",229,0)
 ;
"RTN","IBCEST",230,0)
 Q:(($D(^DIC(36,"AEDIX",IBDATE,IBINS,IBLOOK,IBTYP)))&(UPD=0))     ;store only one attempt a day
"RTN","IBCEST",231,0)
 N ERROR,IBFDA,LEV
"RTN","IBCEST",232,0)
 S LEV="+2,"_IBINS_","
"RTN","IBCEST",233,0)
 S IBFDA(36.017,LEV,.01)=IBLOOK     ;New Value from 277STAT
"RTN","IBCEST",234,0)
 S IBFDA(36.017,LEV,.02)=IBDATE     ;Date transaction is processed
"RTN","IBCEST",235,0)
 S IBFDA(36.017,LEV,.03)=IBTYP      ;"P" or "I"
"RTN","IBCEST",236,0)
 S IBFDA(36.017,LEV,.04)=$G(IBID)   ;Value already on file- if blank it was an update, otherwise attempted update
"RTN","IBCEST",237,0)
 D UPDATE^DIE("","IBFDA","","ERROR")
"RTN","IBCEST",238,0)
 Q
"RTN","IBCEST",239,0)
 ;
"RTN","IBCEST",240,0)
MSGLNSZ(MSG) ; Change Input Message Lines to be no more than 70 characters long each
"RTN","IBCEST",241,0)
 ;
"RTN","IBCEST",242,0)
 ; Input/Output:   MSG  - array of Input Message Lines; this is also the Output Message
"RTN","IBCEST",243,0)
 ; which is an array of Converted Message Lines (with lines no more than 70 chars each)
"RTN","IBCEST",244,0)
 ;
"RTN","IBCEST",245,0)
 N LN,XARY,XARYLN,CNT,OUTMSG,TMPMSG,LDNGSP,LDNGSPN
"RTN","IBCEST",246,0)
 S LN="",CNT=0 F  S LN=$O(MSG(LN)) Q:LN=""  D  ;
"RTN","IBCEST",247,0)
 . ; Find any leading spaces in original message line, 
"RTN","IBCEST",248,0)
 . ; to be used if line got split below
"RTN","IBCEST",249,0)
 . S TMPMSG=$$TRIM^XLFSTR(MSG(LN),"L"," ")  ;Trim Leading Spaces
"RTN","IBCEST",250,0)
 . S LDNGSP=$P(MSG(LN),TMPMSG,1)  ;get leading spaces if any
"RTN","IBCEST",251,0)
 . S LDNGSPN=$L(LDNGSP) S:LDNGSPN>30 LDNGSP=$E(LDNGSP,1,30) ;make sure there are no more than 30 leading spaces 
"RTN","IBCEST",252,0)
 . ; Converts a single line to multiple lines with a maximum width of 70 each
"RTN","IBCEST",253,0)
 . ; If line is 70 chars or less, this call returns the exact line
"RTN","IBCEST",254,0)
 . K XARY D FSTRNG^IBJU1(TMPMSG,70-LDNGSPN,.XARY)
"RTN","IBCEST",255,0)
 . ; Scan lines and merge them into the final output array (OUTMSG)
"RTN","IBCEST",256,0)
 . ; On lines 2 and higher, add Leading Spaces found above, if any.
"RTN","IBCEST",257,0)
 . S XARYLN="" F  S XARYLN=$O(XARY(XARYLN)) Q:XARYLN=""  S CNT=CNT+1,OUTMSG(CNT)=LDNGSP_XARY(XARYLN)
"RTN","IBCEST",258,0)
 ;
"RTN","IBCEST",259,0)
 ; Move the final Message Lines (OUTMSG) into MSG array to be returned
"RTN","IBCEST",260,0)
 K MSG M MSG=OUTMSG
"RTN","IBCEST",261,0)
 Q
"RTN","IBCEST",262,0)
 ;
"RTN","IBCEU")
0^4^B116893464^B105674829
"RTN","IBCEU",1,0)
IBCEU ;ALB/TMP - EDI UTILITIES ;02-OCT-96
"RTN","IBCEU",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,207,232,349,432,592**;21-MAR-94;Build 58
"RTN","IBCEU",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEU",4,0)
 ; DBIA SUPPORTED REF: GET^XUA4A72 = 1625
"RTN","IBCEU",5,0)
 ; DBIA SUPPORTED REF: $$ESBLOCK^XUSESIG1 = 1557
"RTN","IBCEU",6,0)
 Q
"RTN","IBCEU",7,0)
 ;
"RTN","IBCEU",8,0)
TESTPT(DFN) ; Determine if pt is test pt
"RTN","IBCEU",9,0)
 ; Returns 1 if a test pt, 0 if not
"RTN","IBCEU",10,0)
 Q $E($P($G(^DPT(+DFN,0)),U,9),1,5)="00000"
"RTN","IBCEU",11,0)
 ;
"RTN","IBCEU",12,0)
MAINPRV(IBIFN) ; Returns name^id^ien^type code of 'main' prov on bill IBIFN
"RTN","IBCEU",13,0)
 N IBPRV,IBCOB,IBQ,Z
"RTN","IBCEU",14,0)
 D GETPRV(IBIFN,"3,4",.IBPRV)
"RTN","IBCEU",15,0)
 S IBQ="",IBCOB=$$COBN^IBCEF(IBIFN)
"RTN","IBCEU",16,0)
 F Z=3,4 I $G(IBPRV(Z,1))'="" D  Q
"RTN","IBCEU",17,0)
 . S IBQ=IBPRV(Z,1),$P(IBQ,U,4)=Z
"RTN","IBCEU",18,0)
 . I $G(IBPRV(Z,1,IBCOB))'="" S $P(IBQ,U,2)=IBPRV(Z,1,IBCOB)
"RTN","IBCEU",19,0)
 Q IBQ
"RTN","IBCEU",20,0)
 ;
"RTN","IBCEU",21,0)
PRVOK(VAL,IBIFN) ; Check bill form & prov function agree
"RTN","IBCEU",22,0)
 ; VAL = internal value of prov function
"RTN","IBCEU",23,0)
 ;
"RTN","IBCEU",24,0)
 N OK,IBBT
"RTN","IBCEU",25,0)
 S OK=0
"RTN","IBCEU",26,0)
 Q:VAL="" OK
"RTN","IBCEU",27,0)
 Q:'IBIFN OK
"RTN","IBCEU",28,0)
 ; JWS;IB*2.0*592 US1108 - add Dental form (7) check
"RTN","IBCEU",29,0)
 S IBBT=$$FT^IBCEF(IBIFN) ; 2 If CMS-1500, 3 If UB-04, 7 if J430D Dental
"RTN","IBCEU",30,0)
 I IBBT=2!(IBBT=7) D
"RTN","IBCEU",31,0)
 . I VAL=1 S OK=1 Q   ; CMS-1500, REFERRING
"RTN","IBCEU",32,0)
 . I VAL=3 S OK=1 Q   ; CMS-1500, RENDERING
"RTN","IBCEU",33,0)
 . I VAL=5 S OK=1 Q   ; CMS-1500, SUPERVISING
"RTN","IBCEU",34,0)
 . I IBBT=7,VAL=6 S OK=1 Q  ;J430D, ASSISTANT SURGEON
"RTN","IBCEU",35,0)
 ; JWS;IB*2.0*592 US1108 - end
"RTN","IBCEU",36,0)
 I IBBT=7,$G(IBDR20)=103,'$$FILTERP^IBCSC10H(IBIFN,VAL) S OK=0
"RTN","IBCEU",37,0)
 I 'OK,IBBT=3 D
"RTN","IBCEU",38,0)
 . I VAL=1 S OK=1 Q   ; UB-04, REFERRING
"RTN","IBCEU",39,0)
 . I VAL=2 S OK=1 Q   ; UB-04, OPERATING
"RTN","IBCEU",40,0)
 . I VAL=3 S OK=1 Q   ; UB-04, RENDERING
"RTN","IBCEU",41,0)
 . I VAL=4 S OK=1 Q   ; UB-04, ATTENDING
"RTN","IBCEU",42,0)
 . I VAL=9 S OK=1 Q   ; UB-04, OTHER
"RTN","IBCEU",43,0)
 ;
"RTN","IBCEU",44,0)
 Q OK
"RTN","IBCEU",45,0)
 ;
"RTN","IBCEU",46,0)
PRVOK1(VAL,IBIFN) ; Check for both attending and rendering on bill
"RTN","IBCEU",47,0)
 N OK
"RTN","IBCEU",48,0)
 S OK=1
"RTN","IBCEU",49,0)
 Q:$$FT^IBCEF(IBIFN)=3 1  ; both are allowed on UB
"RTN","IBCEU",50,0)
 I $S("34"'[VAL:0,1:$D(^DGCR(399,IBIFN,"PRV","B",$S(VAL=3:4,1:3)))) D EN^DDIOL($S(VAL=3:"ATTENDING",1:"RENDERING")_" ALREADY EXISTS - CAN'T HAVE BOTH ON ONE BILL") S OK=0
"RTN","IBCEU",51,0)
 Q OK
"RTN","IBCEU",52,0)
 ;
"RTN","IBCEU",53,0)
SPEC(IBPRV,IBDT) ; Returns spec code for vp ien IBPRV from file 355.9
"RTN","IBCEU",54,0)
 ;  (for new person entries, as of date in IBDT)
"RTN","IBCEU",55,0)
 ; DBIA 1625
"RTN","IBCEU",56,0)
 N IBSPEC
"RTN","IBCEU",57,0)
 S:'$G(IBDT) IBDT=DT
"RTN","IBCEU",58,0)
 I IBPRV'["IBA(355.93" S IBSPEC=$S(IBPRV:$P($$GET^XUA4A72(+IBPRV,IBDT),U,8),1:"") ; VA
"RTN","IBCEU",59,0)
 I IBPRV["IBA(355.93" S IBSPEC=$P($G(^IBA(355.93,+IBPRV,0)),U,4) ; Non-VA
"RTN","IBCEU",60,0)
 Q IBSPEC
"RTN","IBCEU",61,0)
 ;
"RTN","IBCEU",62,0)
CRED(IBPRV,IBIFN,IBPIEN,IBTYP) ; Returns prov credentials
"RTN","IBCEU",63,0)
 ; IBPRV = vp of provider for file 200 or 355.93
"RTN","IBCEU",64,0)
 ; IBIFN = bill ien in file 399 (optional)
"RTN","IBCEU",65,0)
 ; IBPIEN = prov ien - file 399.0222 (optional)
"RTN","IBCEU",66,0)
 ;          DEM;432 - prov ien can be from file 399.0404
"RTN","IBCEU",67,0)
 ;          as well (optional).
"RTN","IBCEU",68,0)
 ; IBTYP = the prov type
"RTN","IBCEU",69,0)
 ;
"RTN","IBCEU",70,0)
 N IBCRED
"RTN","IBCEU",71,0)
 S IBCRED=""
"RTN","IBCEU",72,0)
 ;
"RTN","IBCEU",73,0)
 ; DEM;432 - Provider can come from either file 399.0222, or
"RTN","IBCEU",74,0)
 ;           file 399.0404. Variable IBLNPRV is the flag
"RTN","IBCEU",75,0)
 ;           that indicates we want prov ien from file 399.0404.
"RTN","IBCEU",76,0)
 ;
"RTN","IBCEU",77,0)
 I '$G(IBLNPRV),$G(IBIFN),'$D(^DGCR(399,IBIFN,"PRV",0)) G CREDQ
"RTN","IBCEU",78,0)
 ;
"RTN","IBCEU",79,0)
 ; DEM;432 - Next line if for line level provider. Variable IBPROCP,
"RTN","IBCEU",80,0)
 ;           if it exist, is the procedure ien. File 399.0404 is a
"RTN","IBCEU",81,0)
 ;           multiple of the Procedure File 399.0304.
"RTN","IBCEU",82,0)
 ;
"RTN","IBCEU",83,0)
 I $G(IBLNPRV),$G(IBIFN),$G(IBPROCP),'$D(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV",0)) G CREDQ
"RTN","IBCEU",84,0)
 I '$G(IBLNPRV),$G(IBIFN),($G(IBPIEN)!$G(IBTYP)) D
"RTN","IBCEU",85,0)
 . I '$G(IBPIEN) S IBPIEN=+$O(^DGCR(399,IBIFN,"PRV","B",IBTYP,0))
"RTN","IBCEU",86,0)
 . S IBCRED=$P($G(^DGCR(399,IBIFN,"PRV",IBPIEN,0)),U,3)
"RTN","IBCEU",87,0)
 ;
"RTN","IBCEU",88,0)
 I $G(IBLNPRV),$G(IBIFN),$G(IBPROCP),($G(IBPIEN)!$G(IBTYP)) D  ; DEM;432 - Line Provider File 399.0404.
"RTN","IBCEU",89,0)
 . I '$G(IBPIEN) S IBPIEN=+$O(^DGCR(399,IBIFN,"CP",IBPROCP,"B",IBTYP,0))
"RTN","IBCEU",90,0)
 . S IBCRED=$P($G(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV",IBPIEN,0)),U,3)
"RTN","IBCEU",91,0)
 ;
"RTN","IBCEU",92,0)
CREDQ ;
"RTN","IBCEU",93,0)
 I $G(IBPRV),IBCRED="" D
"RTN","IBCEU",94,0)
 . I IBPRV'["IBA(355.93" S IBCRED=$P($$ESBLOCK^XUSESIG1(+IBPRV),U,2)
"RTN","IBCEU",95,0)
 . I IBPRV["IBA(355.93" S IBCRED=$P($G(^IBA(355.93,+IBPRV,0)),U,3)
"RTN","IBCEU",96,0)
 Q IBCRED
"RTN","IBCEU",97,0)
 ;
"RTN","IBCEU",98,0)
GETPRV(IBIFN,IBTYP,IBPRV) ; Returns prov(s) of type(s) IBTYP for
"RTN","IBCEU",99,0)
 ;  bill ien IBIFN.
"RTN","IBCEU",100,0)
 ;  IBTYP = prov types needed, separated by ',' or ALL
"RTN","IBCEU",101,0)
 ; 
"RTN","IBCEU",102,0)
 ; OUTPUT:
"RTN","IBCEU",103,0)
 ;  IBPRV array: IBPRV(type)= 1 if prov is from old prov flds
"RTN","IBCEU",104,0)
 ;               IBPRV(type,ct)=name^current COB id^vp provider ien^cred
"RTN","IBCEU",105,0)
 ;               IBPRV(type,ct,seq)=COB seq specific id
"RTN","IBCEU",106,0)
 ;               IBPRV(type)=default nm^def id
"RTN","IBCEU",107,0)
 ;               IBPRV(type,"NOTOPT")= defined if a required prov type
"RTN","IBCEU",108,0)
 ;
"RTN","IBCEU",109,0)
 N IB,IBCT,IBD,IBY,IBZ,IBMRAND,IBID,IBWNR,IBPNM,Z ;,IBZFID
"RTN","IBCEU",110,0)
 ;S IBZFID=""
"RTN","IBCEU",111,0)
 D F^IBCEF("N-CURRENT INS POLICY TYPE","IBZ",,IBIFN)
"RTN","IBCEU",112,0)
 ;I IBZ="CI" D F^IBCEF("N-FEDERAL TAX ID","IBZFID",,IBIFN) S IBZFID=$TR(IBZFID,"-")
"RTN","IBCEU",113,0)
 S IBPRV=U_$G(IBZ),IBY=0
"RTN","IBCEU",114,0)
 S IBMRAND=$$MCRONBIL^IBEFUNC(IBIFN)
"RTN","IBCEU",115,0)
 ;WCJ;IB*2.0*432;Remove Default
"RTN","IBCEU",116,0)
 I IBMRAND D
"RTN","IBCEU",117,0)
 . ; F Z=1:1:3,5,6,7,8,9 S:Z=3&($$FT^IBCEF(IBIFN)=3) Z=4 S IBPRV(Z)=$S(Z=3!(Z=4):"DEPT VETERANS AFFAIRS",1:"")_"^VAD000"
"RTN","IBCEU",118,0)
 . F Z=1:1:9 S IBPRV(Z)="^VAD000"
"RTN","IBCEU",119,0)
 . I '$$INPAT^IBCEF(IBIFN,1),$$FT^IBCEF(IBIFN)=3 S IBPRV(4,1)="^SLF000"
"RTN","IBCEU",120,0)
 ;WCJ;IB*2.0*432;End changes
"RTN","IBCEU",121,0)
 ;
"RTN","IBCEU",122,0)
 ; For backwards compatability (before the claim level provider mulitple)
"RTN","IBCEU",123,0)
 I '$D(^DGCR(399,+IBIFN,"PRV",0)) D  G GETQ
"RTN","IBCEU",124,0)
 . N IBALL
"RTN","IBCEU",125,0)
 . S IBALL=(IBTYP="ALL")
"RTN","IBCEU",126,0)
 . I IBTYP[4!IBALL S:$P($G(^DGCR(399,+IBIFN,"U1")),U,13)'="" IBPRV(4,1)=$P(^("U1"),U,13),IBPRV(4)=1 Q:IBTYP=4
"RTN","IBCEU",127,0)
 . I IBTYP[3!IBALL S:$P($G(^DGCR(399,+IBIFN,"UF2")),U)'="" IBPRV(3,1)=$P(^("UF2"),U),IBPRV(3)=1 Q:IBTYP=3
"RTN","IBCEU",128,0)
 . I IBTYP[9!IBALL S:$P($G(^DGCR(399,+IBIFN,"U1")),U,14)'="" IBPRV(9,1)=$P(^("U1"),U,14),IBPRV(9)=1
"RTN","IBCEU",129,0)
 ;
"RTN","IBCEU",130,0)
 S IBID=4+$$COBN^IBCEF(IBIFN),IBWNR=$$WNRBILL^IBEFUNC(IBIFN)
"RTN","IBCEU",131,0)
 F IBZ=1:1:$S(IBTYP="ALL":99,1:$L(IBTYP,",")) S (IBCT,IB)=0,IBY=$S(IBTYP'="ALL":$P(IBTYP,",",IBZ),1:$O(^DGCR(399,+IBIFN,"PRV","B",IBY))) Q:IBY=""  F  S IB=$O(^DGCR(399,+IBIFN,"PRV","B",IBY,IB)) Q:'IB  D
"RTN","IBCEU",132,0)
 . S IBCT=IBCT+1
"RTN","IBCEU",133,0)
 . S IBD=$G(^DGCR(399,+IBIFN,"PRV",IB,0))
"RTN","IBCEU",134,0)
 . Q:'$P(IBD,U,2)
"RTN","IBCEU",135,0)
 . S IBPNM=$$EXPAND^IBTRE(399.0222,.02,$P(IBD,U,2))
"RTN","IBCEU",136,0)
 . I IBWNR Q:'$D(IBPRV(IBY))  S $P(IBD,U,IBID)=$P(IBPRV(IBY),U,2)
"RTN","IBCEU",137,0)
 . S IBPRV(IBY,IBCT)=IBPNM_U_$S($P(IBD,U,IBID)'="":$P(IBD,U,IBID),$P($G(IBPRV(IBY)),U,2)'="":$P(IBPRV(IBY),U,2),1:$P($$DEFID^IBCEF74(IBIFN,IB),U,IBID-4))_U_$P(IBD,U,2)
"RTN","IBCEU",138,0)
 . S $P(IBPRV(IBY,IBCT),U,4)=$$CRED($P(IBPRV(IBY,IBCT),U,3),IBIFN,$S($P(IBD,U,3)'=""!'$P(IBPRV(IBY,IBCT),U,3):IB,1:""))
"RTN","IBCEU",139,0)
 . F Z=1:1:3 D
"RTN","IBCEU",140,0)
 .. ;I IBZFID'="",'$$INPAT^IBCEF(IBIFN,1),$P(IBPRV(IBY,IBCT),U,2)="SLF000" S IBZFID=""
"RTN","IBCEU",141,0)
 .. ;I $S(Z=1:1,1:$D(^DGCR(399,IBIFN,"I"_Z))) S IBPRV(IBY,IBCT,Z)=$S($G(IBZFID)'="":IBZFID,$P(IBD,U,Z+4)'="":$P(IBD,U,Z+4),1:"")
"RTN","IBCEU",142,0)
 .. I $S(Z=1:1,1:$D(^DGCR(399,IBIFN,"I"_Z))) S IBPRV(IBY,IBCT,Z)=$S($P(IBD,U,Z+4)'="":$P(IBD,U,Z+4),1:$P($$DEFID^IBCEF74(IBIFN,IB),U,Z))
"RTN","IBCEU",143,0)
GETQ D NEEDPRV(IBIFN,IBTYP,.IBPRV)
"RTN","IBCEU",144,0)
 Q
"RTN","IBCEU",145,0)
 ;
"RTN","IBCEU",146,0)
NEEDPRV(IBIFN,IBTYP,IBPRV) ; Check for needed prov
"RTN","IBCEU",147,0)
 ; If needed, not entered, insert defaults for MCR only
"RTN","IBCEU",148,0)
 N IB0,IBINP,IBFT,IBMRAND,IBTOB
"RTN","IBCEU",149,0)
 S IB0=$G(^DGCR(399,+IBIFN,0))
"RTN","IBCEU",150,0)
 S IBFT=($$FT^IBCEF(IBIFN)=3),IBINP=$$INPAT^IBCEF(IBIFN,1),IBTOB=$$TOB^IBCBB(IB0)
"RTN","IBCEU",151,0)
 ; Only allow defaults for MCR
"RTN","IBCEU",152,0)
 S IBMRAND=$$WNRBILL^IBEFUNC(IBIFN) ;$$MCRONBIL^IBEFUNC(IBIFN)
"RTN","IBCEU",153,0)
 ;
"RTN","IBCEU",154,0)
 I IBTYP="ALL"!((IBTYP_",")["1,") D
"RTN","IBCEU",155,0)
 . ; DEM;432 - UB-04 or CMS-1500 SITUATIONAL
"RTN","IBCEU",156,0)
 . S IBPRV(1,"SITUATIONAL")=1
"RTN","IBCEU",157,0)
 . Q
"RTN","IBCEU",158,0)
 ;
"RTN","IBCEU",159,0)
 I IBTYP="ALL"!((IBTYP_",")["2,") D:IBFT
"RTN","IBCEU",160,0)
 . ; only for bill type inpt - 11X, outpt - 83X
"RTN","IBCEU",161,0)
 . S IBPRV(2,"SITUATIONAL")=1  ; DEM;432 - Default to "SITUATIONAL". If conditions below are met, then IBPRV(2,"SITUATIONAL") is KILLED and IBRPV is SET according to conditions.
"RTN","IBCEU",162,0)
 . Q:$S(IBINP:$E(IBTOB,1,2)'="11",1:$E(IBTOB,1,2)'="83")
"RTN","IBCEU",163,0)
 . ; UB-04 bill includes HCPCS procs - operating phys situational
"RTN","IBCEU",164,0)
 . N Z
"RTN","IBCEU",165,0)
 . S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"CP",Z)) Q:'Z  I $P($G(^(Z,0)),U)["ICP" D  Q
"RTN","IBCEU",166,0)
 .. K IBPRV(2,"SITUATIONAL")  ; DEM;432 - We have met one of the condtions, so KILL IBPRV(2,"SITUATIONAL"). 
"RTN","IBCEU",167,0)
 .. I IBINP S IBPRV(2,"SITUATIONAL")=1 Q  ; DEM;432 - If UB-04 (inpatient), then operating provider situational.
"RTN","IBCEU",168,0)
 .. I 'IBINP S IBPRV(2,"NOTOPT")=1  ; DEM;432 - If UB-04 (outpatient), then operating provider required.
"RTN","IBCEU",169,0)
 .. Q:'IBMRAND
"RTN","IBCEU",170,0)
 .. I '$O(IBPRV(2,0)) S IBPRV(2,"REQ")=1,IBPRV(2,1)=$G(IBPRV(2))
"RTN","IBCEU",171,0)
 ;
"RTN","IBCEU",172,0)
 I IBTYP="ALL"!((IBTYP_",")["3,") D
"RTN","IBCEU",173,0)
 . ; if a CMS-1500 bill, rendering is required
"RTN","IBCEU",174,0)
 . ; JWS;IB*2.0*592 US1108 - exclude dental form
"RTN","IBCEU",175,0)
 . I 'IBFT,$$FT^IBCEF(IBIFN)'=7 S IBPRV(3,"NOTOPT")=1
"RTN","IBCEU",176,0)
 . ; DEM;432 - if UB-04, rendering is situational.
"RTN","IBCEU",177,0)
 . ; JWS;IB*2.0*592 US1108 - dental form check
"RTN","IBCEU",178,0)
 . I IBFT!($$FT^IBCEF(IBIFN)=7) S IBPRV(3,"SITUATIONAL")=1 Q
"RTN","IBCEU",179,0)
 . Q:'IBMRAND
"RTN","IBCEU",180,0)
 . I '$O(IBPRV(3,0)) S IBPRV(3,1)=$G(IBPRV(3)),IBPRV(3,"REQ")=1
"RTN","IBCEU",181,0)
 ;
"RTN","IBCEU",182,0)
 I IBTYP="ALL"!((IBTYP_",")["4,") D:IBFT
"RTN","IBCEU",183,0)
 . ; if a UB-04, attending required
"RTN","IBCEU",184,0)
 . S IBPRV(4,"NOTOPT")=1
"RTN","IBCEU",185,0)
 . Q:'IBMRAND
"RTN","IBCEU",186,0)
 . I '$O(IBPRV(4,0)) S IBPRV(4,1)=$G(IBPRV(4)),IBPRV(4,"REQ")=1
"RTN","IBCEU",187,0)
 Q
"RTN","IBCEU",188,0)
 ;
"RTN","IBCEU",189,0)
CKPROV(IBIFN,IBTYP,IBVAL) ; Checks if prov of type IBTYP in 'PRV' node
"RTN","IBCEU",190,0)
 ; of bill IBIFN
"RTN","IBCEU",191,0)
 ; If IBVAL = 1, skips the check for an existing provider, just looks
"RTN","IBCEU",192,0)
 ;               for existence of the function itself
"RTN","IBCEU",193,0)
 N OK,IBFT,Z,R
"RTN","IBCEU",194,0)
 S OK=0,IBFT=$$FT^IBCEF(IBIFN)
"RTN","IBCEU",195,0)
 S Z=+$O(^DGCR(399,IBIFN,"PRV","B",+IBTYP,0))
"RTN","IBCEU",196,0)
 I $G(^DGCR(399,IBIFN,"PRV",Z,0))'="" D
"RTN","IBCEU",197,0)
 . ; Only outpt UB-04 can have SLF000 as prov ID with no name
"RTN","IBCEU",198,0)
 . I IBFT=3,'$$INPAT^IBCEF(IBIFN,1),$P(^DGCR(399,IBIFN,"PRV",Z,0),U,2)="",$P(^(0),U,5)="SLF000" S OK=1 Q
"RTN","IBCEU",199,0)
 . I '$G(IBVAL) Q:$P(^DGCR(399,IBIFN,"PRV",Z,0),U,2)=""
"RTN","IBCEU",200,0)
 . S OK=1
"RTN","IBCEU",201,0)
 Q OK
"RTN","IBCEU",202,0)
 ;
"RTN","IBCEU",203,0)
XFER(IBQ) ; Transfer DILIST
"RTN","IBCEU",204,0)
 ; IBQ = # of entries already found
"RTN","IBCEU",205,0)
 N Z,IBZ
"RTN","IBCEU",206,0)
 S (Z,IBZ)=0
"RTN","IBCEU",207,0)
 F  S Z=$O(^TMP("DILIST",$J,1,Z)) Q:'Z  S IBZ=IBZ+1,^TMP("IBLIST",$J,1,IBZ+IBQ)=^TMP("DILIST",$J,1,Z),^TMP("IBLIST",$J,2,IBZ+IBQ)=^TMP("DILIST",$J,2,Z) M ^TMP("IBLIST",$J,"ID",IBZ+IBQ)=^TMP("DILIST",$J,"ID",Z)
"RTN","IBCEU",208,0)
 ;
"RTN","IBCEU",209,0)
 I $D(^TMP("DILIST",$J,0)) S ^TMP("IBLIST",$J,0)=^TMP("DILIST",$J,0)
"RTN","IBCEU",210,0)
 S $P(^TMP("IBLIST",$J,0),U)=IBQ+IBZ
"RTN","IBCEU",211,0)
 Q
"RTN","IBCEU",212,0)
 ;
"RTN","IBCEU",213,0)
DATE(X) ; Convert date X in YYYYMMDD or YYMMDD to FM format
"RTN","IBCEU",214,0)
 ; FP = flag to indicate if past or future dates are expected
"RTN","IBCEU",215,0)
 N %DT,Y
"RTN","IBCEU",216,0)
 I $L(X)=8,$E(X,1,4)<2100,$E(X,5,6)<13,$E(X,7,8)<32 S X=$E(X,1,4)-1700_$E(X,5,8) G DTQ
"RTN","IBCEU",217,0)
 I $L(X)=6,$E(X,3,4)<13,$E(X,5,6)<32 S X=$E(X,3,4)_"/"_$E(X,5,6)_"/"_$E(X,1,2),%DT="N" D ^%DT I Y>0 S X=Y
"RTN","IBCEU",218,0)
DTQ Q X
"RTN","IBCEU",219,0)
 ;
"RTN","IBCEU",220,0)
BCLASS(IBIFN) ; Returns actual bill classif. code from ptr fld
"RTN","IBCEU",221,0)
 ;  .25 in file 399 for bill ien IBIFN
"RTN","IBCEU",222,0)
 Q $P($G(^DGCR(399.1,+$P($G(^DGCR(399,IBIFN,0)),U,25),0)),U,2)
"RTN","IBCEU",223,0)
 ;
"RTN","IBCEU",224,0)
ADMHR(IBIFN,IBDTTM) ; Extract admit hr from admit dt/tm
"RTN","IBCEU",225,0)
 ;  Default 00 if no time and bill is 11X or 18X
"RTN","IBCEU",226,0)
 N TM
"RTN","IBCEU",227,0)
 S TM=$P(IBDTTM,".",2)
"RTN","IBCEU",228,0)
 I TM="","18"[$$BCLASS(IBIFN),$P($G(^DGCR(399,IBIFN,0)),U,24)=1 S TM="00"
"RTN","IBCEU",229,0)
 I TM'="",TM'="00" S TM=$E(TM_"0000",1,4)
"RTN","IBCEU",230,0)
 Q TM
"RTN","IBCEU",231,0)
 ;
"RTN","IBCEU",232,0)
OLAB(IBIFN) ; Returns 1 if bill IBIFN is outside lab
"RTN","IBCEU",233,0)
 N IBL,IBLAB
"RTN","IBCEU",234,0)
 S IBL=0
"RTN","IBCEU",235,0)
 S IBLAB=$P($G(^DGCR(399,IBIFN,"U2")),U,11)
"RTN","IBCEU",236,0)
 I IBLAB,"24"[IBLAB S IBL=1
"RTN","IBCEU",237,0)
 Q IBL
"RTN","IBCEU",238,0)
 ;
"RTN","IBCEU",239,0)
PSRV(IBIFN) ; Returns 1 if bill IBIFN has any purch services
"RTN","IBCEU",240,0)
 N IBZ,IBXDATA,IBXSAVE,Z
"RTN","IBCEU",241,0)
 S IBZ=0
"RTN","IBCEU",242,0)
 D F^IBCEF("N-HCFA 1500 PROCEDURES",,,IBIFN)
"RTN","IBCEU",243,0)
 S Z=0 F  S Z=$O(IBXSAVE("BOX24",Z)) Q:'Z  I $P(IBXSAVE("BOX24",Z),U,11) S IBZ=1 Q
"RTN","IBCEU",244,0)
 Q IBZ
"RTN","IBCEU",245,0)
 ;
"RTN","IBCEU",246,0)
SEQBILL(IBIFN) ; Returns the ien's of all bills in COB sequence for bill IBIFN
"RTN","IBCEU",247,0)
 ; Return value is "^" delimited: primary ien^secondary ien^tertiary ien
"RTN","IBCEU",248,0)
 N IBSEQ,Z
"RTN","IBCEU",249,0)
 S IBSEQ=$P($G(^DGCR(399,IBIFN,"M1")),U,5,7)
"RTN","IBCEU",250,0)
 S Z=$$COBN^IBCEF(IBIFN)
"RTN","IBCEU",251,0)
 I $P(IBSEQ,U,Z)="" S $P(IBSEQ,U,Z)=IBIFN
"RTN","IBCEU",252,0)
 Q IBSEQ
"RTN","IBCEU",253,0)
 ;
"RTN","IBCEU",254,0)
 ;IB*2.0*432/TAZ Added to take into account the line level providers.
"RTN","IBCEU",255,0)
GETPRV1(IBIFN,IBTYP,IBPRV) ; Returns prov(s) of type(s) IBTYP for
"RTN","IBCEU",256,0)
 ;  bill ien IBIFN for TPJI display
"RTN","IBCEU",257,0)
 ;  IBTYP = prov types needed, separated by ',' or ALL
"RTN","IBCEU",258,0)
 ; 
"RTN","IBCEU",259,0)
 ; OUTPUT:
"RTN","IBCEU",260,0)
 ;  IBPRV array: IBPRV(level,type,ct)=name^current COB id^vp provider ien^cred
"RTN","IBCEU",261,0)
 ;
"RTN","IBCEU",262,0)
 N IB,IBCT,IBD,IBY,IBZ,IBMRAND,IBID,IBWNR,IBPNM,Z,IBPRTYP
"RTN","IBCEU",263,0)
 D F^IBCEF("N-CURRENT INS POLICY TYPE","IBZ",,IBIFN)
"RTN","IBCEU",264,0)
 S IBPRV=U_$G(IBZ),IBY=0
"RTN","IBCEU",265,0)
 D ALLIDS^IBCEFP(IBIFN,.IBXSAVE)
"RTN","IBCEU",266,0)
 S IBCT=0
"RTN","IBCEU",267,0)
 F  S IBCT=$O(IBXSAVE("PROVINF",IBIFN,"C",IBCT)) Q:'IBCT  D
"RTN","IBCEU",268,0)
 . S IBPRTYP=""
"RTN","IBCEU",269,0)
 . F  S IBPRTYP=$O(IBXSAVE("PROVINF",IBIFN,"C",IBCT,IBPRTYP)) Q:'IBPRTYP  D
"RTN","IBCEU",270,0)
 .. I IBTYP'="ALL",IBTYP'[IBPRTYP Q  ;Screen out unwanted providers
"RTN","IBCEU",271,0)
 .. N IBPRIEN,OBPRNM,IBCOBID
"RTN","IBCEU",272,0)
 .. S IBPRIEN=$P(IBXSAVE("PROVINF",IBIFN,"C",IBCT,IBPRTYP),U)
"RTN","IBCEU",273,0)
 .. S $P(IBPRV(1,IBCT,IBPRTYP),U,1)=$$EXPAND^IBTRE(399.0222,.02,IBPRIEN)
"RTN","IBCEU",274,0)
 .. S $P(IBPRV(1,IBCT,IBPRTYP),U,2)=IBXSAVE("PROVINF",IBIFN,"C",IBCT,IBPRTYP,"COBID")
"RTN","IBCEU",275,0)
 .. S $P(IBPRV(1,IBCT,IBPRTYP),U,3)=IBPRIEN
"RTN","IBCEU",276,0)
 .. S $P(IBPRV(1,IBCT,IBPRTYP),U,4)=$P(IBXSAVE("PROVINF",IBIFN,"C",IBCT,IBPRTYP,"NAME"),U,4)
"RTN","IBCEU",277,0)
 S IBCT=0
"RTN","IBCEU",278,0)
 F  S IBCT=$O(IBXSAVE("L-PROV",IBIFN,IBCT)) Q:'IBCT  D
"RTN","IBCEU",279,0)
 . S IBPRTYP=""
"RTN","IBCEU",280,0)
 . F  S IBPRTYP=$O(IBXSAVE("L-PROV",IBIFN,IBCT,"C",1,IBPRTYP)) Q:'IBPRTYP  D
"RTN","IBCEU",281,0)
 .. I IBTYP'="ALL",IBTYP'[IBPRTYP Q  ;Screen out unwanted providers
"RTN","IBCEU",282,0)
 .. N IBPRIEN
"RTN","IBCEU",283,0)
 .. S IBPRIEN=$P(IBXSAVE("L-PROV",IBIFN,IBCT,"C",1,IBPRTYP),U)
"RTN","IBCEU",284,0)
 .. S IBPRV(2,IBCT,IBPRTYP)=$$EXPAND^IBTRE(399.0222,.02,IBPRIEN)
"RTN","IBCEU",285,0)
 .. S $P(IBPRV(2,IBCT,IBPRTYP),U,2)=IBXSAVE("L-PROV",IBIFN,IBCT,"C",1,IBPRTYP,"COBID")
"RTN","IBCEU",286,0)
 .. S $P(IBPRV(2,IBCT,IBPRTYP),U,3)=IBPRIEN
"RTN","IBCEU",287,0)
 .. S $P(IBPRV(2,IBCT,IBPRTYP),U,4)=$P(IBXSAVE("L-PROV",IBIFN,IBCT,"C",1,IBPRTYP,"NAME"),U,4)
"RTN","IBCEU",288,0)
 Q
"RTN","IBCEU",289,0)
 ;/IB*2.0*592
"RTN","IBCEU",290,0)
RTYPOK(VAL,IBIFN) ;sceen for field 399,285 Attachment Report Type - Check for a valid Report Type depending on Claim Type
"RTN","IBCEU",291,0)
 ; VAL = internal value of report type file#353.3
"RTN","IBCEU",292,0)
 ; IBIFN = file 399 ien
"RTN","IBCEU",293,0)
 ;
"RTN","IBCEU",294,0)
 N OK,IBBT
"RTN","IBCEU",295,0)
 S OK=0
"RTN","IBCEU",296,0)
 Q:VAL="" OK
"RTN","IBCEU",297,0)
 Q:'IBIFN OK
"RTN","IBCEU",298,0)
 S IBBT=$$FT^IBCEF(IBIFN) ;2 if CMS-1500, 3 if UB-04, 7 if J430D Dental
"RTN","IBCEU",299,0)
 I IBBT'=7 S:VAL'="P6" OK=1 Q OK  ;not a Dental Claim, periodontal charts not applicable
"RTN","IBCEU",300,0)
 ; following for Dental claims
"RTN","IBCEU",301,0)
 I "^B4^DA^DG^EB^OZ^P6^RB^RR^"[(U_VAL_U) S OK=1
"RTN","IBCEU",302,0)
 Q OK
"RTN","IBCEU",303,0)
 ; IB*2.0*592 end
"RTN","IBCEU",304,0)
 ;
"RTN","IBCEU0")
0^31^B65875892^B65545551
"RTN","IBCEU0",1,0)
IBCEU0 ;ALB/TMP - EDI UTILITIES ;02-OCT-96
"RTN","IBCEU0",2,0)
 ;;2.0;INTEGRATED BILLING;**137,197,155,296,349,417,432,592**;21-MAR-94;Build 58
"RTN","IBCEU0",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEU0",4,0)
 ;
"RTN","IBCEU0",5,0)
NOTECHG(IBDA,IBNTEXT) ; Enter who/when review stat change was entered
"RTN","IBCEU0",6,0)
 ; IBDA = ien of entry in file 361.1
"RTN","IBCEU0",7,0)
 ; IBNTEXT = array containing the lines of text to store if not using the
"RTN","IBCEU0",8,0)
 ;           default text  IBNTEXT = # of lines  IBNTEXT(#)=line text
"RTN","IBCEU0",9,0)
 N IBIEN,IBTEXT,DA,X,Y,DIC,DO,DLAYGO,DD
"RTN","IBCEU0",10,0)
 S DA(1)=IBDA,DIC="^IBM(361.1,"_DA(1)_",2,",DIC(0)="L",DLAYGO=361.121
"RTN","IBCEU0",11,0)
 S X=$$NOW^XLFDT
"RTN","IBCEU0",12,0)
 D FILE^DICN K DIC,DD,DO,DLAYGO
"RTN","IBCEU0",13,0)
 Q:Y'>0
"RTN","IBCEU0",14,0)
 S DA(2)=DA(1),DA(1)=+Y,IBIEN=DA(1)_","_DA(2)_","
"RTN","IBCEU0",15,0)
 I $G(IBNTEXT) D
"RTN","IBCEU0",16,0)
 . M IBTEXT=IBNTEXT
"RTN","IBCEU0",17,0)
 E  D
"RTN","IBCEU0",18,0)
 . S IBTEXT(1)="REVIEW STATUS CHANGED TO '"_$$EXTERNAL^DILFD(361.1,.2,,$P(^IBM(361.1,DA(2),0),U,20))_"'  BY: "_$$EXTERNAL^DILFD(361.121,.02,,+$G(DUZ))
"RTN","IBCEU0",19,0)
 D WP^DIE(361.121,IBIEN,.03,,"IBTEXT") K ^TMP("DIERR",$J)
"RTN","IBCEU0",20,0)
 Q
"RTN","IBCEU0",21,0)
 ;
"RTN","IBCEU0",22,0)
LOCK(IBFILE,IBREC) ; Lock record # IBREC in file #IBFILE (361 or 361.1)
"RTN","IBCEU0",23,0)
 N OK
"RTN","IBCEU0",24,0)
 S OK=0
"RTN","IBCEU0",25,0)
 L +^IBM(IBFILE,IBREC):3 I $T S OK=1
"RTN","IBCEU0",26,0)
 I 'OK D
"RTN","IBCEU0",27,0)
 . W !,"Another user has locked this record - try again later"
"RTN","IBCEU0",28,0)
 . D PAUSE^VALM1
"RTN","IBCEU0",29,0)
 Q OK
"RTN","IBCEU0",30,0)
 ;
"RTN","IBCEU0",31,0)
UNLOCK(IBFILE,IBREC) ; Unlock record # IBREC in file #IBFILE
"RTN","IBCEU0",32,0)
 I $G(IBREC) L -^IBM(IBFILE,IBREC)
"RTN","IBCEU0",33,0)
 Q
"RTN","IBCEU0",34,0)
 ;
"RTN","IBCEU0",35,0)
MSTAT ; Enter reviewed by selected range
"RTN","IBCEU0",36,0)
 N IBDAX,IBA,IBCLOSE,IBLOOK,IBOK,IBSTOP,IBREBLD,IBCLOK,DA,DIR,X,Y,DIE,DR
"RTN","IBCEU0",37,0)
 D FULL^VALM1
"RTN","IBCEU0",38,0)
 D SEL^IBCECSA4(.IBDAX)
"RTN","IBCEU0",39,0)
 S IBREBLD=0
"RTN","IBCEU0",40,0)
 I $O(IBDAX(""))="" G MSTATQ
"RTN","IBCEU0",41,0)
 S DIR("?,1")="ONLY SELECT TO CLOSE THE TRANSMIT RECORDS IF YOU KNOW THESE ARE THE FINAL",DIR("?",2)="  ELECTRONIC MESSAGES YOU WILL RECEIVE FOR ALL THE BILLS REFERENCED BY",DIR("?")="  THESE MESSAGES"
"RTN","IBCEU0",42,0)
 S DIR(0)="YA",DIR("A",1)="DO YOU WANT TO AUTOMATICALLY CLOSE THE TRANSMIT RECORDS FOR ANY MESSAGES",DIR("A")=" THAT AREN'T REJECTS?: ",DIR("B")="NO" W ! D ^DIR K DIR W !
"RTN","IBCEU0",43,0)
 G:$D(DIRUT) MSTATQ
"RTN","IBCEU0",44,0)
 S IBCLOSE=(Y=1)
"RTN","IBCEU0",45,0)
 S DIR(0)="YA",DIR("A")="DO YOU WANT TO SEE EACH MESSAGE BEFORE MARKING IT REVIEWED?: ",DIR("B")="NO"
"RTN","IBCEU0",46,0)
 S DIR("?",1)="IF YOU OPT TO SEE EACH MESSAGE, YOU CAN CONTROL WHETHER OR NOT THE MESSAGE",DIR("?",2)="  IS MARKED AS REVIEWED"
"RTN","IBCEU0",47,0)
 I 'IBCLOSE S DIR("?")=DIR("?",2) K DIR("?",2)
"RTN","IBCEU0",48,0)
 I IBCLOSE S DIR("?",2)=DIR("?",2)_" AND, FOR NON-REJECTS, WHETHER OR NOT TO CLOSE THE",DIR("?")="  TRANSMIT RECORD FOR THE BILL"
"RTN","IBCEU0",49,0)
 W ! D ^DIR K DIR W !
"RTN","IBCEU0",50,0)
 G:$D(DIRUT) MSTATQ
"RTN","IBCEU0",51,0)
 S IBLOOK=(Y=1)
"RTN","IBCEU0",52,0)
 S IBDAX=0,IBSTOP=0
"RTN","IBCEU0",53,0)
 F  S IBDAX=+$O(IBDAX(IBDAX)) Q:'IBDAX  D  Q:IBSTOP
"RTN","IBCEU0",54,0)
 . S IBA=$G(IBDAX(IBDAX))
"RTN","IBCEU0",55,0)
 . S DIE="^IBM(361,",DA=$P(IBA,U,2),DR=""
"RTN","IBCEU0",56,0)
 . I DA D
"RTN","IBCEU0",57,0)
 .. S IBOK=1
"RTN","IBCEU0",58,0)
 .. S IBCLOK=$S(IBCLOSE:1,1:0)
"RTN","IBCEU0",59,0)
 .. I IBLOOK D  Q:'IBOK
"RTN","IBCEU0",60,0)
 ... S DIC="^IBM(361," D EN^DIQ
"RTN","IBCEU0",61,0)
 ... I '$$LOCK(361,DA) W ! S IBOK=0 Q
"RTN","IBCEU0",62,0)
 ... S DIR(0)="YA",DIR("A")="OK TO MARK REVIEWED?: ",DIR("B")="YES",DIR("?",1)="IF YOU ENTER YES, THIS MESSAGE WILL BE MARKED REVIEWED"
"RTN","IBCEU0",63,0)
 ... S DIR("?",2)="IF YOU ENTER NO, THIS MESSAGE WILL NOT BE ALTERED",DIR("?",3)="IF YOU ENTER AN ^, THIS MESSAGE WILL NOT BE ALTERED & NONE OF THE",DIR("?")="   REMAINING MESSAGES WILL BE PROCESSED" D ^DIR K DIR
"RTN","IBCEU0",64,0)
 ... I Y'>0 S IBOK=0 S:$D(DIRUT) IBSTOP=1 Q
"RTN","IBCEU0",65,0)
 ... I 'IBCLOSE D
"RTN","IBCEU0",66,0)
 .... S DIR(0)="YA",DIR("A")="OK TO CLOSE THIS BILL'S TRANSMIT RECORD?: ",DIR("B")="NO"
"RTN","IBCEU0",67,0)
 .... S DIR("?",1)="If you respond YES to this prompt, the transmit status of this bill will",DIR("?",2)="  be set to CLOSED.  No further electronic processing of this bill will be"
"RTN","IBCEU0",68,0)
 .... S DIR("?",3)="  allowed.  If you respond NO to this prompt, this electronic message will",DIR("?",4)="  be filed as reviewed, but the bill's transmit status will not be changed."
"RTN","IBCEU0",69,0)
 .... S DIR("?",5)="  You may wish to periodically print a list of bills with a non-final",DIR("?",6)="  (closed/cancelled/etc) status to ensure the electronic processing of all"
"RTN","IBCEU0",70,0)
 .... S DIR("?",7)="  bills has been completed.  Closing the transmit bill record here will",DIR("?")="  eliminate the bill from this list."
"RTN","IBCEU0",71,0)
 .... W ! D ^DIR K DIR W !
"RTN","IBCEU0",72,0)
 .... I Y'=1 S IBCLOK=0
"RTN","IBCEU0",73,0)
 .. I 'IBLOOK,$P($G(^IBM(361,DA,0)),U,3)="R" D  Q:'IBOK
"RTN","IBCEU0",74,0)
 ... S DR="1",DIC="^IBM(361," D EN^DIQ W !,"Bill Number: ",$$EXPAND^IBTRE(361,.01,+^IBM(361,DA,0))
"RTN","IBCEU0",75,0)
 ... S DIR(0)="YA",DIR("A")="THIS IS A REJECTION ... ARE YOU SURE YOU WANT TO MARK IT REVIEWED?: ",DIR("B")="NO"
"RTN","IBCEU0",76,0)
 ... S DIR("?",1)="IF YOU ENTER YES, THIS MESSAGE WILL BE MARKED REVIEWED"
"RTN","IBCEU0",77,0)
 ... S DIR("?",2)="IF YOU ENTER NO, THIS MESSAGE WILL NOT BE ALTERED",DIR("?",3)="IF YOU ENTER AN ^, THIS MESSAGE WILL NOT BE ALTERED & NONE OF THE",DIR("?")="   MESSAGES FOLLOWING THIS ONE WILL BE PROCESSED" D ^DIR K DIR
"RTN","IBCEU0",78,0)
 ... I Y'=1 S IBOK=0 S:$D(DIRUT) IBSTOP=1
"RTN","IBCEU0",79,0)
 .. S:'IBREBLD IBREBLD=1
"RTN","IBCEU0",80,0)
 .. S DR=".09////2;.1////F" D ^DIE
"RTN","IBCEU0",81,0)
 .. N IBUPD
"RTN","IBCEU0",82,0)
 .. S IBUPD=0
"RTN","IBCEU0",83,0)
 .. I $$PRINTUPD($G(^IBM(361,DA,1,1,0)),+$P(^IBM(361,DA,0),U,11)) S IBUPD=1
"RTN","IBCEU0",84,0)
 .. I $G(^IBM(361,DA,1,1,0))["CLAIM SENT TO PAYER" D UPDTX^IBCECSA2(+$P(^IBM(361,DA,0),U,11),$S(IBCLOK:"Z",1:"A2")) S IBUPD=1
"RTN","IBCEU0",85,0)
 .. I $G(^IBM(361,DA,1,1,0))["CLAIM REJECTED" D UPDTX^IBCECSA2(+$P(^IBM(361,DA,0),U,11),"E") S IBUPD=1
"RTN","IBCEU0",86,0)
 .. I IBCLOK,'IBUPD D UPDTX^IBCECSA2(+$P(^IBM(361,DA,0),U,11),"Z")
"RTN","IBCEU0",87,0)
 .. I 'IBLOOK D
"RTN","IBCEU0",88,0)
 ... W !,"Seq #: ",IBDAX,"  Bill number: ",$$EXPAND^IBTRE(361,.01,+^IBM(361,DA,0)),?45,"REVIEWED"
"RTN","IBCEU0",89,0)
 .. D NOTECHG^IBCECSA2(DA,1)
"RTN","IBCEU0",90,0)
 .. D UNLOCK(361,DA)
"RTN","IBCEU0",91,0)
 W !!,"LAST SELECTION PROCESSED",!
"RTN","IBCEU0",92,0)
 D PAUSE^VALM1
"RTN","IBCEU0",93,0)
MSTATQ S VALMBCK="R"
"RTN","IBCEU0",94,0)
 I IBREBLD D BLD^IBCECSA1
"RTN","IBCEU0",95,0)
 Q
"RTN","IBCEU0",96,0)
 ;
"RTN","IBCEU0",97,0)
PRPAY(IBIFN,IBMCR) ; Returns total amount of prior payments applied to
"RTN","IBCEU0",98,0)
 ; bill ien IBIFN
"RTN","IBCEU0",99,0)
 ; IBMCR = flag passed in as 1 if MRA total should be included
"RTN","IBCEU0",100,0)
 ;
"RTN","IBCEU0",101,0)
 N IBTOT,IBZ,IBSEQ
"RTN","IBCEU0",102,0)
 S IBSEQ=$$COBN^IBCEF(IBIFN)
"RTN","IBCEU0",103,0)
 I IBSEQ'>1 S IBTOT=0 G PRPAYQ
"RTN","IBCEU0",104,0)
 D F^IBCEF("N-PRIOR PAYMENTS","IBZ",,IBIFN)
"RTN","IBCEU0",105,0)
 S IBTOT=IBZ
"RTN","IBCEU0",106,0)
 I $G(IBMCR),$$MCRONBIL^IBEFUNC(IBIFN)=1 D  ; MCR on bill before curr ins
"RTN","IBCEU0",107,0)
 . N Z,Z0,Z2,Q
"RTN","IBCEU0",108,0)
 . F Z=1:1:IBSEQ-1 I $$WNRBILL^IBEFUNC(IBIFN,Z) D
"RTN","IBCEU0",109,0)
 .. S IBTOT=+$$MCRPAY(IBIFN)
"RTN","IBCEU0",110,0)
PRPAYQ Q IBTOT
"RTN","IBCEU0",111,0)
 ;
"RTN","IBCEU0",112,0)
PRINTUPD(IBTEXT,IBDA) ; If the status message indicates claim was printed
"RTN","IBCEU0",113,0)
 ;    or the claim record in file 399 says it was, update the transmit
"RTN","IBCEU0",114,0)
 ;    message status to closed
"RTN","IBCEU0",115,0)
 ; IBTEXT = the first line text of the status message (optional)
"RTN","IBCEU0",116,0)
 ; IBDA = the ien of the transmission record in file 364
"RTN","IBCEU0",117,0)
 ;
"RTN","IBCEU0",118,0)
 ; FUNCTION returns 1 if message status changed
"RTN","IBCEU0",119,0)
 ;
"RTN","IBCEU0",120,0)
 N IBP,IBP1
"RTN","IBCEU0",121,0)
 S IBP=0,IBP1=$P($G(^DGCR(399,+$G(^IBA(364,+$G(IBDA),0)),"TX")),U,7)
"RTN","IBCEU0",122,0)
 I $G(IBTEXT)["CLAIM RECEIVED, PRINTED AND MAILED BY PRINT CENTER"!IBP1 D
"RTN","IBCEU0",123,0)
 . N Z
"RTN","IBCEU0",124,0)
 . S Z=$E($P($G(^IBA(364,IBDA,0)),U,3),1)
"RTN","IBCEU0",125,0)
 . I "AP"'[Z Q  ; Only change if status is pending or received/accepted
"RTN","IBCEU0",126,0)
 . D UPDTX^IBCECSA2(IBDA,"Z") S IBP=1
"RTN","IBCEU0",127,0)
 Q IBP
"RTN","IBCEU0",128,0)
 ;
"RTN","IBCEU0",129,0)
MCRPAY(IBIFN) ; Calculate MRA total for the bill IBIFN
"RTN","IBCEU0",130,0)
 N IBPAY,Q,Z0
"RTN","IBCEU0",131,0)
 S IBPAY=0
"RTN","IBCEU0",132,0)
 ;include eligible bill for process
"RTN","IBCEU0",133,0)
 ; 432 - added MRA flag to IBCEU1 to not always screen out non-MRA's
"RTN","IBCEU0",134,0)
 S Q=0 F  S Q=$O(^IBM(361.1,"B",IBIFN,Q)) Q:'Q  I $$EOBELIG^IBCEU1(Q,1) S IBPAY=IBPAY+$P($G(^IBM(361.1,Q,1)),U,1)
"RTN","IBCEU0",135,0)
 Q IBPAY
"RTN","IBCEU0",136,0)
 ;
"RTN","IBCEU0",137,0)
PREOBTOT(IBIFN,IBMRANOT) ; Function - Calculates Patient Responsibility Amount
"RTN","IBCEU0",138,0)
 ; Input:  IBIFN - ien of Bill Number (ien of file 399)
"RTN","IBCEU0",139,0)
 ;         IBMRANOT - flag to indicate that this is NOT and MRA
"RTN","IBCEU0",140,0)
 ; Output Function returns: Patient Responsibility Amount for all EOB's for bill
"RTN","IBCEU0",141,0)
 ;
"RTN","IBCEU0",142,0)
 N FRMTYP,IBPTRES
"RTN","IBCEU0",143,0)
 S IBPTRES=0
"RTN","IBCEU0",144,0)
 ;JWS;IB*2.0*592: Dental form 7
"RTN","IBCEU0",145,0)
 ; Form Type 2=CMS-1500; 3=UB-04; 7=J430D Dental
"RTN","IBCEU0",146,0)
 S FRMTYP=$$FT^IBCEF(IBIFN)
"RTN","IBCEU0",147,0)
 ;
"RTN","IBCEU0",148,0)
 ; For bills w/CMS-1500 Form Type, total up Pt Resp amount from top
"RTN","IBCEU0",149,0)
 ; level of EOB (field 1.02) for All MRA type EOB's on file for that
"RTN","IBCEU0",150,0)
 ; bill (IBIFN)
"RTN","IBCEU0",151,0)
 ;  
"RTN","IBCEU0",152,0)
 ;JWS;IB*2.0*592: Dental form 7
"RTN","IBCEU0",153,0)
 I FRMTYP=2!(FRMTYP=7) D  Q IBPTRES
"RTN","IBCEU0",154,0)
 . N IBEOB,EOBREC,EOBREC1,IBPRTOT
"RTN","IBCEU0",155,0)
 . S (IBEOB,IBPRTOT,IBPTRES)=0
"RTN","IBCEU0",156,0)
 . F  S IBEOB=$O(^IBM(361.1,"B",IBIFN,IBEOB)) Q:'IBEOB  D  ;
"RTN","IBCEU0",157,0)
 . . S EOBREC=$G(^IBM(361.1,IBEOB,0)),EOBREC1=$G(^(1))
"RTN","IBCEU0",158,0)
 .. ; IB*2.0*432 allow for non-MRA's
"RTN","IBCEU0",159,0)
 . . I $G(IBMRANOT)'=1,$P(EOBREC,U,4)'=1 Q  ;make sure it's an MRA
"RTN","IBCEU0",160,0)
 . . Q:$D(^IBM(361.1,IBEOB,"ERR"))  ;no filing error
"RTN","IBCEU0",161,0)
 . . ; Total up Pt Resp Amounts on all valid MRA's
"RTN","IBCEU0",162,0)
 . . S IBPTRES=IBPTRES+$P(EOBREC1,U,2)
"RTN","IBCEU0",163,0)
 ;
"RTN","IBCEU0",164,0)
 ; For bills w/UB-04 Form Type, loop through all EOB's and sum up amounts
"RTN","IBCEU0",165,0)
 ; on both Line level and on Claim level
"RTN","IBCEU0",166,0)
 N EOBADJ,IBEOB,LNLVL
"RTN","IBCEU0",167,0)
 S IBEOB=0
"RTN","IBCEU0",168,0)
 F  S IBEOB=$O(^IBM(361.1,"B",IBIFN,IBEOB)) Q:'IBEOB  D  ;
"RTN","IBCEU0",169,0)
 . ; IB*2.0*432 allow for non-MRA's
"RTN","IBCEU0",170,0)
 . I $G(IBMRANOT)'=1,$P($G(^IBM(361.1,IBEOB,0)),U,4)'=1 Q    ; must be an MRA
"RTN","IBCEU0",171,0)
 . Q:$D(^IBM(361.1,IBEOB,"ERR"))  ; no filing error
"RTN","IBCEU0",172,0)
 . ; get claim level adjustments
"RTN","IBCEU0",173,0)
 . K EOBADJ M EOBADJ=^IBM(361.1,IBEOB,10)
"RTN","IBCEU0",174,0)
 . S IBPTRES=IBPTRES+$$CALCPR(.EOBADJ)
"RTN","IBCEU0",175,0)
 . ;
"RTN","IBCEU0",176,0)
 . ; get line level adjustments
"RTN","IBCEU0",177,0)
 . S LNLVL=0
"RTN","IBCEU0",178,0)
 . F  S LNLVL=$O(^IBM(361.1,IBEOB,15,LNLVL)) Q:'LNLVL  D  ;
"RTN","IBCEU0",179,0)
 . . K EOBADJ M EOBADJ=^IBM(361.1,IBEOB,15,LNLVL,1)
"RTN","IBCEU0",180,0)
 . . S IBPTRES=IBPTRES+$$CALCPR(.EOBADJ)
"RTN","IBCEU0",181,0)
 Q IBPTRES
"RTN","IBCEU0",182,0)
 ;
"RTN","IBCEU0",183,0)
CALCPR(EOBADJ) ; Function - Calculate Patient Responsibilty Amount
"RTN","IBCEU0",184,0)
 ; For Group Code PR; Ignore the PR-AAA kludge
"RTN","IBCEU0",185,0)
 ; Input - EOBADJ = Array of Group Codes & Reason Codes from either the Claim
"RTN","IBCEU0",186,0)
 ;                 Level (10) or Service Line Level (15) of EOB file (#361.1)
"RTN","IBCEU0",187,0)
 ; Output - Function returns Patient Responsibility Amount
"RTN","IBCEU0",188,0)
 ;
"RTN","IBCEU0",189,0)
 N GRPLVL,RSNCD,RSNAMT,PTRESP
"RTN","IBCEU0",190,0)
 S (GRPLVL,PTRESP)=0
"RTN","IBCEU0",191,0)
 F  S GRPLVL=$O(EOBADJ(GRPLVL)) Q:'GRPLVL  D
"RTN","IBCEU0",192,0)
 . I $P($G(EOBADJ(GRPLVL,0)),U)'="PR" Q  ;grp code must be PR
"RTN","IBCEU0",193,0)
 . S RSNCD=0
"RTN","IBCEU0",194,0)
 . F  S RSNCD=$O(EOBADJ(GRPLVL,1,RSNCD)) Q:'RSNCD  D
"RTN","IBCEU0",195,0)
 . . I $P($G(EOBADJ(GRPLVL,1,RSNCD,0)),U,1)="AAA" Q   ; ignore PR-AAA
"RTN","IBCEU0",196,0)
 . . S RSNAMT=$P($G(EOBADJ(GRPLVL,1,RSNCD,0)),U,2)
"RTN","IBCEU0",197,0)
 . . S PTRESP=PTRESP+RSNAMT
"RTN","IBCEU0",198,0)
 Q PTRESP
"RTN","IBCEU0",199,0)
 ;
"RTN","IBCEU0",200,0)
COBMOD(IBXSAVE,IBXDATA,SEQ) ; output the modifiers from the COB
"RTN","IBCEU0",201,0)
 ; SEQ is which modifier we're extracting (1-4)
"RTN","IBCEU0",202,0)
 ; Build IBXDATA(line#)=Modifier# SEQ
"RTN","IBCEU0",203,0)
 NEW LN,N,Z,MOD,LNSEQ
"RTN","IBCEU0",204,0)
 KILL IBXDATA
"RTN","IBCEU0",205,0)
 I '$G(SEQ) Q
"RTN","IBCEU0",206,0)
 S (LN,LNSEQ)=0
"RTN","IBCEU0",207,0)
 F  S LN=$O(IBXSAVE("LCOB",LN)) Q:'LN  D
"RTN","IBCEU0",208,0)
 . S LNSEQ=LNSEQ+1
"RTN","IBCEU0",209,0)
 . S (N,Z)=0
"RTN","IBCEU0",210,0)
 . F  S Z=$O(IBXSAVE("LCOB",LN,"COBMOD",Z)) Q:'Z  D
"RTN","IBCEU0",211,0)
 .. S N=N+1
"RTN","IBCEU0",212,0)
 .. S MOD(LNSEQ,N)=$P($G(IBXSAVE("LCOB",LN,"COBMOD",Z,0)),U,1)
"RTN","IBCEU0",213,0)
 .. Q
"RTN","IBCEU0",214,0)
 . S MOD=$G(MOD(LNSEQ,SEQ))
"RTN","IBCEU0",215,0)
 . I MOD'="" S IBXDATA(LNSEQ)=MOD
"RTN","IBCEU0",216,0)
 . Q
"RTN","IBCEU0",217,0)
 Q
"RTN","IBCEU0",218,0)
 ;
"RTN","IBCEU3")
0^30^B109051815^B106673839
"RTN","IBCEU3",1,0)
IBCEU3 ;ALB/TMP - EDI UTILITIES FOR 1500 CLAIM FORM ;12/29/05 9:58am
"RTN","IBCEU3",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,155,323,348,371,400,432,488,519,592**;21-MAR-94;Build 58
"RTN","IBCEU3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEU3",4,0)
 ;
"RTN","IBCEU3",5,0)
BOX19(IBIFN) ; New Box 19 added for patch 488.  This is for workman's comp?
"RTN","IBCEU3",6,0)
 ; This returns the Paperwork Attachment 
"RTN","IBCEU3",7,0)
 ;     Information in the following format:
"RTN","IBCEU3",8,0)
 ;   PWKNNFX12348907CHEY<3 Spaces>Next set if more than one on claim
"RTN","IBCEU3",9,0)
 ; PWK is the qualifier for data, followed by the appropriate Report Type 
"RTN","IBCEU3",10,0)
 ;Code, the appropriate Transmission Type Code, then the Attachment Control 
"RTN","IBCEU3",11,0)
 ;Number.  Do not enter spaces between qualifiers and data.
"RTN","IBCEU3",12,0)
 ;
"RTN","IBCEU3",13,0)
 ; This information can be at either the Line Level or the Claim Level.
"RTN","IBCEU3",14,0)
 ; Check all Lines first and print as many as possible - 71 characters 
"RTN","IBCEU3",15,0)
 ; maximum.  Then check the Claim Level
"RTN","IBCEU3",16,0)
 N IBRTP,LN,U8,IBBX19,IB19,DATA,I,DEL
"RTN","IBCEU3",17,0)
 ;JWS;IB*2.0*592;add Dental Claim Note field to EDI 837D trans, rec UB1, field 19
"RTN","IBCEU3",18,0)
 ;IA# 2056
"RTN","IBCEU3",19,0)
 I $$FT^IBCEF(IBIFN)=7 Q $$GET1^DIQ(399,IBIFN_",",97)
"RTN","IBCEU3",20,0)
 S IB19="",DEL="   ",LN=0
"RTN","IBCEU3",21,0)
 ; Get rate type
"RTN","IBCEU3",22,0)
 S IBRTP=$P($G(^DGCR(399,IBIFN,0)),U,7)
"RTN","IBCEU3",23,0)
 ; Get data entered for box 19
"RTN","IBCEU3",24,0)
 S IBBX19=$P($G(^DGCR(399,IBIFN,"UF31")),U,3)
"RTN","IBCEU3",25,0)
 ; check the line Level first
"RTN","IBCEU3",26,0)
 I IBRTP=11 D
"RTN","IBCEU3",27,0)
 .F  S LN=$O(^DGCR(399,IBIFN,"CP",LN)) Q:LN=""  Q:LN'?.N  D
"RTN","IBCEU3",28,0)
 ..S DATA=$G(^DGCR(399,IBIFN,"CP",LN,1))
"RTN","IBCEU3",29,0)
 ..I $P(DATA,U,2)'="" S IB19=IB19_$S(IB19="":"",1:DEL)_$$FORMAT(DATA)
"RTN","IBCEU3",30,0)
 .; check the Claim Level next
"RTN","IBCEU3",31,0)
 .S DATA=""
"RTN","IBCEU3",32,0)
 .S DATA=$G(^DGCR(399,IBIFN,"U8"))
"RTN","IBCEU3",33,0)
 .I DATA'="" S IB19=IB19_$S(IB19="":"",1:DEL)_$$FORMAT(DATA)
"RTN","IBCEU3",34,0)
 ; If any room left add user entered box 19 info
"RTN","IBCEU3",35,0)
 I IBBX19'="",IB19'="",$L(IB19)<84 D
"RTN","IBCEU3",36,0)
 .F I=1:1:$L(IBBX19,DEL) S DATA=$P(IBBX19,DEL,I) I DATA'="" D
"RTN","IBCEU3",37,0)
 ..I $L(IB19_DEL_DATA)<84 S IB19=IB19_$S(IB19="":"",1:DEL)_DATA
"RTN","IBCEU3",38,0)
 I IB19="",IBBX19'="" S IB19=IBBX19
"RTN","IBCEU3",39,0)
 ;
"RTN","IBCEU3",40,0)
 Q IB19
"RTN","IBCEU3",41,0)
 ;
"RTN","IBCEU3",42,0)
FORMAT(DATA) ; format data for ouput
"RTN","IBCEU3",43,0)
 N ART,OUT
"RTN","IBCEU3",44,0)
 S ART=$P(DATA,U,2)
"RTN","IBCEU3",45,0)
 S ART=$P(^IBE(353.3,ART,0),U,1)
"RTN","IBCEU3",46,0)
 S OUT="PWK"_ART_$P(DATA,U,3)_$P(DATA,U,1)
"RTN","IBCEU3",47,0)
 Q OUT
"RTN","IBCEU3",48,0)
 ;
"RTN","IBCEU3",49,0)
 ; BELOW NO LONGER USED -> BAA *488*
"RTN","IBCEU3",50,0)
OBOX19(IBIFN) ; THIS IS NOLONGER USED.  IT WAS REPLACE WITH ABOVE.
"RTN","IBCEU3",51,0)
 ; Returns the text that should print in box 19 of the CMS-1500
"RTN","IBCEU3",52,0)
 ;   for bill ien IBIFN
"RTN","IBCEU3",53,0)
 ; Data is derived from a combo of data throughout
"RTN","IBCEU3",54,0)
 ; the system and is limited to 80 characters.  The hierarchy for
"RTN","IBCEU3",55,0)
 ; including data is as follows (until 80 characters have been used):
"RTN","IBCEU3",56,0)
 ;   DATE LAST SEEN and REFERRING PHYSICIAN ID# (physical therapy)
"RTN","IBCEU3",57,0)
 ;                      specialty codes = 025,065,073,067,048
"RTN","IBCEU3",58,0)
 ;   LAST X-RAY DATE (chiropractic) specialty code = 35
"RTN","IBCEU3",59,0)
 ;   HOMEBOUND INDICATOR (independent lab renders an EKG or obtains
"RTN","IBCEU3",60,0)
 ;                        a specimen from a homebound patient)
"RTN","IBCEU3",61,0)
 ;   NO ASSIGNMENT OF BENEFITS (if no assignment of benefits indicated)
"RTN","IBCEU3",62,0)
 ;   Hearing aid testing (if applicable)
"RTN","IBCEU3",63,0)
 ;   ATTENDING PHYSICIAN NOT HOSPICE EMPLOYEE (if applicable)
"RTN","IBCEU3",64,0)
 ;   SPECIAL PROGRAM indicator if Medicare demonstration project for
"RTN","IBCEU3",65,0)
 ;                   lung volume reduction surgery study is set
"RTN","IBCEU3",66,0)
 ;   COMMENTS FOUND IN BOX 19 DATA FIELD FOR THE CLAIM
"RTN","IBCEU3",67,0)
 ;   REMARKS FOUND IN BILL COMMENT FOR THE CLAIM, INCLUDING PROSTHETICS
"RTN","IBCEU3",68,0)
 ;     DETAIL
"RTN","IBCEU3",69,0)
 ;
"RTN","IBCEU3",70,0)
 N IBGO,IBHOSP,IBID,IBLSDT,IBXDATA,IB19,IBHAID,IBXRAY,IBSPEC,Z,Z0,IBSUB,IBPRT,IBREM,IBSPI
"RTN","IBCEU3",71,0)
 S IB19="",IBGO=1
"RTN","IBCEU3",72,0)
 S IBSUB=$S('$G(^TMP("IBTX",$J,IBIFN)):"BOX24",1:"OUTPT")
"RTN","IBCEU3",73,0)
 I $D(IBXSAVE(IBSUB)) N IBXSAVE
"RTN","IBCEU3",74,0)
 S IBPRT=(IBSUB["24")
"RTN","IBCEU3",75,0)
 ;
"RTN","IBCEU3",76,0)
 S IBSPEC=$$BILLSPEC(IBIFN)
"RTN","IBCEU3",77,0)
 G:'IBPRT NPRT
"RTN","IBCEU3",78,0)
 ; Check for chiropractic services
"RTN","IBCEU3",79,0)
 I $P($G(^DGCR(399,IBIFN,"U3")),U,5)'="" S:$P($G(^DGCR(399,IBIFN,"U3")),U,4)'="" IBGO=$$LENOK("Last X-ray: "_$TR($$DATE^IBCF2($P(^DGCR(399,IBIFN,"U3"),U,4))," ","/"),.IB19)
"RTN","IBCEU3",80,0)
 G:'IBGO BOX19Q
"RTN","IBCEU3",81,0)
 ;
"RTN","IBCEU3",82,0)
 I "^25^65^73^67^48^"[(U_IBSPEC_U) D
"RTN","IBCEU3",83,0)
 . K IBXDATA D F^IBCEF("N-DATE LAST SEEN",,,IBIFN)
"RTN","IBCEU3",84,0)
 . I IBXDATA'="" S IBID="",IBLSDT=$$DATE^IBCF2(IBXDATA,0,1) D  I IBLSDT'="" S IBGO=$$LENOK("Date Last Seen:"_IBLSDT_IBID,.IB19)
"RTN","IBCEU3",85,0)
 .. ; Only print if specialty is OT or PT or proc for routine foot care
"RTN","IBCEU3",86,0)
 .. D F^IBCEF("N-REFERRING PROVIDER ID",,,IBIFN) I IBXDATA'="" S IBID=" By:"_IBXDATA
"RTN","IBCEU3",87,0)
 ;
"RTN","IBCEU3",88,0)
 G:'IBGO BOX19Q
"RTN","IBCEU3",89,0)
 K IBXDATA D F^IBCEF("N-HOMEBOUND",,,IBIFN)
"RTN","IBCEU3",90,0)
 I IBXDATA G:'$$LENOK("Homebound",.IB19) BOX19Q
"RTN","IBCEU3",91,0)
 ;
"RTN","IBCEU3",92,0)
 K IBXDATA D F^IBCEF("N-ASSIGN OF BENEFITS INDICATOR",,,IBIFN)
"RTN","IBCEU3",93,0)
 I "Nn0"[IBXDATA&(IBXDATA'="") G:'$$LENOK("Patient refuses to assign benefits",.IB19) BOX19Q
"RTN","IBCEU3",94,0)
 ;
"RTN","IBCEU3",95,0)
 I '$D(IBXSAVE(IBSUB)) D B24^IBCEF3(.IBXSAVE,IBIFN,$S($G(IBNOSHOW)=0:0,1:1))
"RTN","IBCEU3",96,0)
 ;
"RTN","IBCEU3",97,0)
 S (IBHAID,IBHOSP,IBXRAY)=0
"RTN","IBCEU3",98,0)
 ;
"RTN","IBCEU3",99,0)
 S Z=0 F  S Z=$O(IBXSAVE(IBSUB,Z)) Q:'Z  D  G:'IBGO BOX19Q
"RTN","IBCEU3",100,0)
 . I $D(IBXSAVE(IBSUB,Z,"RX")),$P(IBXSAVE(IBSUB,Z,"RX"),U,3)="" S IBGO=$$LENOK("NOC Drug:"_$P(IBXSAVE(IBSUB,Z,"RX"),U,2)_" Units:"_+$P(IBXSAVE(IBSUB,Z,"RX"),U,6),.IB19)
"RTN","IBCEU3",101,0)
 . ;
"RTN","IBCEU3",102,0)
 . Q:'IBGO
"RTN","IBCEU3",103,0)
 . I 'IBHAID,$P(IBXSAVE(IBSUB,Z),U,5)="V5010",$$COBCT^IBCEF(IBIFN)>1 D  Q
"RTN","IBCEU3",104,0)
 .. S IBHAID=1,IBGO=$$LENOK("Testing for hearing aid",.IB19) Q
"RTN","IBCEU3",105,0)
 . ;
"RTN","IBCEU3",106,0)
 . Q:'IBGO
"RTN","IBCEU3",107,0)
 . I 'IBHOSP,$P($G(IBXSAVE(IBSUB,Z,"AUX")),U,3) S IBHOSP=1,IBGO=$$LENOK("Attending physician,not hospice employee",.IB19) Q
"RTN","IBCEU3",108,0)
 G:'IBGO BOX19Q
"RTN","IBCEU3",109,0)
 K IBXDATA D F^IBCEF("N-SPECIAL PROGRAM",,,IBIFN)
"RTN","IBCEU3",110,0)
 I IBXDATA=30 G:'$$LENOK("Medicare demonstration project for lung volume reduction surgery study",.IB19) BOX19Q
"RTN","IBCEU3",111,0)
 ;
"RTN","IBCEU3",112,0)
 ; SPECIAL PROGRAM INDICATOR field code.
"RTN","IBCEU3",113,0)
 S IBSPI=$$GET1^DIQ(399,IBIFN_",",238,"E")
"RTN","IBCEU3",114,0)
 I IBSPI'="" S IBGO=$$LENOK(IBSPI,.IB19)
"RTN","IBCEU3",115,0)
 ;
"RTN","IBCEU3",116,0)
 G:'IBGO BOX19Q
"RTN","IBCEU3",117,0)
NPRT K IBXDATA D F^IBCEF("N-HCFA 1500 BOX 19 RAW DATA",,,IBIFN)
"RTN","IBCEU3",118,0)
 S IBREM=0
"RTN","IBCEU3",119,0)
 I IBXDATA'="" G:'$$LENOK("Remarks:"_IBXDATA,.IB19) BOX19Q S IBREM=1
"RTN","IBCEU3",120,0)
 K IBXDATA D F^IBCEF("N-BILL REMARKS",,,IBIFN)
"RTN","IBCEU3",121,0)
 I IBXDATA'="" G:'$$LENOK($S('IBREM:"Remarks:",1:"")_IBXDATA,.IB19) BOX19Q
"RTN","IBCEU3",122,0)
 ;
"RTN","IBCEU3",123,0)
BOX19Q Q IB19
"RTN","IBCEU3",124,0)
 ; ALL OF THE ABOVE TO OBOX19 IS NO LONGER USED *488*
"RTN","IBCEU3",125,0)
 ;
"RTN","IBCEU3",126,0)
LENOK(IBDATA,IB19) ; Add text IBDATA to box 19 string (IB19 passed by ref)
"RTN","IBCEU3",127,0)
 ; Check length of box 19 data - truncate at 71 (max length)
"RTN","IBCEU3",128,0)
 ; Returns 0 if max length reached or exceeded, otherwise, 1
"RTN","IBCEU3",129,0)
 ; Changed 96 to 71 for new 1500 form
"RTN","IBCEU3",130,0)
 N OK
"RTN","IBCEU3",131,0)
 S OK=1
"RTN","IBCEU3",132,0)
 S IB19=IB19_$S(IB19'="":" ",1:"")_$G(IBDATA)
"RTN","IBCEU3",133,0)
 I $L(IB19)'<83 S OK=0,IB19=$E(IB19,1,71) G LENOKQ
"RTN","IBCEU3",134,0)
LENOKQ Q OK
"RTN","IBCEU3",135,0)
 ;
"RTN","IBCEU3",136,0)
ASK19(IBIFN) ; Ask to display CMS-1500 box 19 data for current IBIFN
"RTN","IBCEU3",137,0)
 ;  changed to 71 length.
"RTN","IBCEU3",138,0)
 N DIR,DIC,X,Y,DIE,DR,Z
"RTN","IBCEU3",139,0)
 S DIR(0)="YA",DIR("B")="NO",DIR("A")="DISPLAY THE FULL CMS-1500 BOX 19?: "
"RTN","IBCEU3",140,0)
 D ^DIR
"RTN","IBCEU3",141,0)
 K DIR("B")
"RTN","IBCEU3",142,0)
 I Y=1 D
"RTN","IBCEU3",143,0)
 .S Z=$$BOX19(IBIFN) W !!,?4,"19",?45,$E(Z,1,23) W:$L(Z)>23 !,?4,$E(Z,24,71),!
"RTN","IBCEU3",144,0)
 .S DIR(0)="E",DIR("A")="Enter <RET> to Continue " W ! D ^DIR K DIR
"RTN","IBCEU3",145,0)
 Q
"RTN","IBCEU3",146,0)
 ;
"RTN","IBCEU3",147,0)
ONLAB(IBIFN) ; Functions returns 1 if the bill IBIFN is outside non-lab
"RTN","IBCEU3",148,0)
 N IBP,IBPUR
"RTN","IBCEU3",149,0)
 S IBP=0
"RTN","IBCEU3",150,0)
 S IBPUR=$P($G(^DGCR(399,IBIFN,"U2")),U,11)
"RTN","IBCEU3",151,0)
 I IBPUR,"13"[IBPUR S IBP=1
"RTN","IBCEU3",152,0)
 Q IBP
"RTN","IBCEU3",153,0)
 ;
"RTN","IBCEU3",154,0)
TEXT24(FLD,IBXSAVE,IBXDATA,IBSUB) ; Format the text line of box 24 by fld
"RTN","IBCEU3",155,0)
 ; INPUT:
"RTN","IBCEU3",156,0)
 ;   FLD = the letter of the field in box 24 (A-J)
"RTN","IBCEU3",157,0)
 ;   IBXSAVE = passed by reference = extracted data for the box 24 lines
"RTN","IBCEU3",158,0)
 ;   IBSUB = the subscript of the IBXSAVE array to use.
"RTN","IBCEU3",159,0)
 ;           If null, use "BOX24"
"RTN","IBCEU3",160,0)
 ; OUTPUT:
"RTN","IBCEU3",161,0)
 ;   IBXDATA = passed by reference, set to the correct part of the
"RTN","IBCEU3",162,0)
 ;             text that will print in the field's positions
"RTN","IBCEU3",163,0)
 ;
"RTN","IBCEU3",164,0)
 ; esg - 8/14/06 - modified for the new cms-1500 form - IB*2*348
"RTN","IBCEU3",165,0)
 ;
"RTN","IBCEU3",166,0)
 N Z,IBLINE,IBVAL,IBS,IBE,IBTEXT,IBAUX,IBDAT,IBZ,IBREN,IBRENQ,IBRENNPI,IBRENSID
"RTN","IBCEU3",167,0)
 K IBXDATA
"RTN","IBCEU3",168,0)
 S (IBLINE,Z)=0 S:$G(IBSUB)="" IBSUB="BOX24"
"RTN","IBCEU3",169,0)
 ;
"RTN","IBCEU3",170,0)
 I FLD="I"!(FLD="J") D   ; extract the Rendering provider data
"RTN","IBCEU3",171,0)
 . I '$G(IBXIEN) Q       ; assume that the claim# exists
"RTN","IBCEU3",172,0)
 . S IBREN=$$CFIDS^IBCEF77(IBXIEN)
"RTN","IBCEU3",173,0)
 . S IBRENQ=$P(IBREN,U,1)    ; qual
"RTN","IBCEU3",174,0)
 . S IBRENSID=$P(IBREN,U,2)  ; id
"RTN","IBCEU3",175,0)
 . S IBRENNPI=$P(IBREN,U,3)  ; npi
"RTN","IBCEU3",176,0)
 . Q
"RTN","IBCEU3",177,0)
 ;
"RTN","IBCEU3",178,0)
 F  S Z=$O(IBXSAVE(IBSUB,Z)) Q:'Z  D
"RTN","IBCEU3",179,0)
 . S IBDAT=$G(IBXSAVE(IBSUB,Z))
"RTN","IBCEU3",180,0)
 . S IBAUX=$G(IBXSAVE(IBSUB,Z,"AUX"))
"RTN","IBCEU3",181,0)
 . S IBTEXT=$G(IBXSAVE(IBSUB,Z,"TEXT"))
"RTN","IBCEU3",182,0)
 . S IBZ=$P(IBAUX,U,9)
"RTN","IBCEU3",183,0)
 . I IBZ="" S IBZ="  "
"RTN","IBCEU3",184,0)
 . S IBTEXT=IBZ_IBTEXT
"RTN","IBCEU3",185,0)
 . ;
"RTN","IBCEU3",186,0)
 . I $S($G(IBAC)=4:$S($D(IBXSAVE(IBSUB,Z,"ARX")):1,1:$D(IBXSAVE(IBSUB,Z,"A"))),$D(IBXSAVE(IBSUB,Z,"RX")):0,1:$G(IBNOSHOW)) S IBTEXT=""
"RTN","IBCEU3",187,0)
 . ;
"RTN","IBCEU3",188,0)
 . I FLD="AF" S IBVAL=$P(IBDAT,U),IBS=1,IBE=9 D   ; From date of service
"RTN","IBCEU3",189,0)
 .. S IBVAL=$E(IBVAL,1,2)_" "_$E(IBVAL,3,4)_" "_$E(IBVAL,7,8)
"RTN","IBCEU3",190,0)
 .. Q
"RTN","IBCEU3",191,0)
 . ;
"RTN","IBCEU3",192,0)
 . I FLD="AT" S IBVAL=$S($P(IBDAT,U,2):$P(IBDAT,U,2),1:$P(IBDAT,U)),IBS=10,IBE=18 D    ; To date of service
"RTN","IBCEU3",193,0)
 .. S IBVAL=$E(IBVAL,1,2)_" "_$E(IBVAL,3,4)_" "_$E(IBVAL,7,8)
"RTN","IBCEU3",194,0)
 .. Q
"RTN","IBCEU3",195,0)
 . ;
"RTN","IBCEU3",196,0)
 . I FLD="B" S IBVAL=$P(IBDAT,U,3),IBS=19,IBE=21   ; place of service
"RTN","IBCEU3",197,0)
 . I FLD="C" S IBVAL=$S($P(IBDAT,U,13)=1:"Y",1:""),IBS=22,IBE=24   ; emergency indicator
"RTN","IBCEU3",198,0)
 . I FLD="D" S IBVAL=$P(IBDAT,U,5),IBS=25,IBE=44 D   ; procedures and modifiers
"RTN","IBCEU3",199,0)
 .. N M S M=$$MODLST^IBEFUNC($P(IBDAT,U,10))       ; modifier list
"RTN","IBCEU3",200,0)
 .. S IBVAL=$$FO^IBCNEUT1(IBVAL,6)_"  "            ; procedure code
"RTN","IBCEU3",201,0)
 .. S IBVAL=IBVAL_$$FO^IBCNEUT1($P(M,",",1),3)     ; mod#1
"RTN","IBCEU3",202,0)
 .. S IBVAL=IBVAL_$$FO^IBCNEUT1($P(M,",",2),3)     ; mod#2
"RTN","IBCEU3",203,0)
 .. S IBVAL=IBVAL_$$FO^IBCNEUT1($P(M,",",3),3)     ; mod#3
"RTN","IBCEU3",204,0)
 .. S IBVAL=IBVAL_$$FO^IBCNEUT1($P(M,",",4),3)     ; mod#4
"RTN","IBCEU3",205,0)
 .. Q
"RTN","IBCEU3",206,0)
 . ;
"RTN","IBCEU3",207,0)
 . I FLD="E" D
"RTN","IBCEU3",208,0)
 .. N NUM,IN,OUT,LET
"RTN","IBCEU3",209,0)
 .. S IN="1,2,3,4,5,6,7,8,9"
"RTN","IBCEU3",210,0)
 .. S OUT="A,B,C,D,E,F,G,H,I"
"RTN","IBCEU3",211,0)
 .. S IBVAL=$P(IBDAT,U,7)
"RTN","IBCEU3",212,0)
 .. F I=1:1:4 S NUM=$P(IBVAL,",",I) D
"RTN","IBCEU3",213,0)
 ... I NUM<10 S $P(LET,",",I)=$TR(NUM,IN,OUT)
"RTN","IBCEU3",214,0)
 ... I NUM=10 S $P(LET,",",I)="J"
"RTN","IBCEU3",215,0)
 ... I NUM=11 S $P(LET,",",I)="K"
"RTN","IBCEU3",216,0)
 ... I NUM=12 S $P(LET,",",I)="L"
"RTN","IBCEU3",217,0)
 .. S IBVAL=$TR(LET,","),IBS=45,IBE=48  ; diagnosis pointer
"RTN","IBCEU3",218,0)
 . I FLD="F" S IBVAL=$P(IBDAT,U,8)*$P(IBDAT,U,9),IBS=49,IBE=57 D
"RTN","IBCEU3",219,0)
 .. ; total charges  **519 returned field length back to 8, 9 is too long for BOX24F
"RTN","IBCEU3",220,0)
 .. S IBVAL=$$DOL^IBCEF77(IBVAL,8)
"RTN","IBCEU3",221,0)
 .. I $L(IBVAL)>8 S IBVAL=$E(IBVAL,$L(IBVAL)-7,$L(IBVAL))
"RTN","IBCEU3",222,0)
 .. Q
"RTN","IBCEU3",223,0)
 . ;
"RTN","IBCEU3",224,0)
 . I FLD="G" S IBVAL=$S($P(IBDAT,U,12):$P(IBDAT,U,12),1:$P(IBDAT,U,9)),IBS=58,IBE=61 D
"RTN","IBCEU3",225,0)
 .. ; days or units or anesthesia minutes
"RTN","IBCEU3",226,0)
 .. S IBVAL=$J(+IBVAL,4)
"RTN","IBCEU3",227,0)
 .. Q
"RTN","IBCEU3",228,0)
 . ;
"RTN","IBCEU3",229,0)
 . ; columns H,I,J don't have any free text supplemental information
"RTN","IBCEU3",230,0)
 . ;
"RTN","IBCEU3",231,0)
 . I FLD="H" D     ; epsdt family plan
"RTN","IBCEU3",232,0)
 .. S IBVAL=$P(IBAUX,U,7),IBS=0,IBE=0,IBTEXT=""   ; line 1 blank
"RTN","IBCEU3",233,0)
 .. I IBVAL S IBVAL="Y"
"RTN","IBCEU3",234,0)
 .. Q
"RTN","IBCEU3",235,0)
 . I FLD="I" D     ; ID qualifier for rendering provider
"RTN","IBCEU3",236,0)
 .. S IBVAL="",IBS=1,IBE=2   ; line 2 blank
"RTN","IBCEU3",237,0)
 .. S IBTEXT=$G(IBRENQ)      ; qualifier on line 1
"RTN","IBCEU3",238,0)
 .. Q
"RTN","IBCEU3",239,0)
 . I FLD="J" D     ; rendering provider ID and NPI
"RTN","IBCEU3",240,0)
 .. S IBTEXT=$G(IBRENSID),IBS=1,IBE=11   ; secondary ID line 1
"RTN","IBCEU3",241,0)
 .. S IBVAL=$G(IBRENNPI)                 ; NPI# line 2
"RTN","IBCEU3",242,0)
 .. Q
"RTN","IBCEU3",243,0)
 . ;
"RTN","IBCEU3",244,0)
 . S IBLINE=IBLINE+1                      ; top line
"RTN","IBCEU3",245,0)
 . S IBXDATA(IBLINE)=$E(IBTEXT,IBS,IBE)   ; text in shaded area (top)
"RTN","IBCEU3",246,0)
 . S IBLINE=IBLINE+1             ; bottom line
"RTN","IBCEU3",247,0)
 . S IBXDATA(IBLINE)=IBVAL       ; field value in unshaded area (bottom)
"RTN","IBCEU3",248,0)
 . Q
"RTN","IBCEU3",249,0)
 ;
"RTN","IBCEU3",250,0)
 Q
"RTN","IBCEU3",251,0)
 ;
"RTN","IBCEU3",252,0)
LINSPEC(IBIFN) ; Checks the specialities of line and claim level providers
"RTN","IBCEU3",253,0)
 ; called from IBCBB2 to check for Chiro codes & IBCBB9 to check for 99's on Medicare
"RTN","IBCEU3",254,0)
 ; Default = 99 if no valid SPEC code found for line and claim level provider
"RTN","IBCEU3",255,0)
 ; Get rendering for professional, attending for institutional
"RTN","IBCEU3",256,0)
 ; If multiple lines w/ rendering or attending, returns a string of spec codes
"RTN","IBCEU3",257,0)
 N Z,IBSPEC,IBINS,IBDT,IBCP,IBSPC
"RTN","IBCEU3",258,0)
 S IBSPC=""
"RTN","IBCEU3",259,0)
 S IBDT=$P($G(^DGCR(399,+IBIFN,"U")),U,1)  ; use statement from date
"RTN","IBCEU3",260,0)
 S IBINS=($$FT^IBCEF(IBIFN)=3)
"RTN","IBCEU3",261,0)
 D GETPRV^IBCEU(IBIFN,"ALL",.IBPRV)
"RTN","IBCEU3",262,0)
 S Z=$S('IBINS:3,1:4)
"RTN","IBCEU3",263,0)
 ; check claim level
"RTN","IBCEU3",264,0)
 I $G(IBPRV(Z,1))'="" D
"RTN","IBCEU3",265,0)
 . I $P(IBPRV(Z,1),U,3) S IBSPEC=$$SPEC^IBCEU($P($G(IBPRV(Z,1)),U,3),IBDT) I IBSPEC'="" S IBSPC=IBSPC_U_IBSPEC Q
"RTN","IBCEU3",266,0)
 . S Z0=+$O(^DGCR(399,IBIFN,"PRV","B",Z,0))
"RTN","IBCEU3",267,0)
 . I Z0 S IBSPEC=$P($G(^DGCR(399,IBIFN,"PRV",Z0,0)),U,8) S:IBSPEC="" IBSPEC=99 S IBSPC=IBSPC_U_IBSPEC
"RTN","IBCEU3",268,0)
 ; Check line level
"RTN","IBCEU3",269,0)
 S IBCP=0 F  S IBCP=$O(^DGCR(399,IBIFN,"CP",IBCP)) Q:'IBCP  D
"RTN","IBCEU3",270,0)
 .S Z0=+$O(^DGCR(399,IBIFN,"CP",IBCP,"LNPRV","B",Z,0))
"RTN","IBCEU3",271,0)
 .I Z0 S IBSPEC=$P($G(^DGCR(399,IBIFN,"CP",IBCP,"LNPRV",Z0,0)),U,8) S:IBSPEC="" IBSPEC="99" S IBSPC=IBSPC_U_IBSPEC
"RTN","IBCEU3",272,0)
 S:IBSPC="" IBSPC=99
"RTN","IBCEU3",273,0)
 Q IBSPC
"RTN","IBCEU3",274,0)
 ;
"RTN","IBCEU3",275,0)
BILLSPEC(IBIFN,IBPRV) ;  Returns the specialty of the provider on bill IBIFN
"RTN","IBCEU3",276,0)
 ; If IBPRV is supplied, returns the data for that provider, otherwise,
"RTN","IBCEU3",277,0)
 ;  returns the specialty of the 'main/required' provider on the bill.
"RTN","IBCEU3",278,0)
 ;  Default = 99 if no valid code found
"RTN","IBCEU3",279,0)
 ; IBPRV = vp of provider (file 200 or 355.93)
"RTN","IBCEU3",280,0)
 N Z,IBSPEC,IBINS,IBDT
"RTN","IBCEU3",281,0)
 S IBSPEC="",IBPRV=$G(IBPRV)
"RTN","IBCEU3",282,0)
 S IBDT=$P($G(^DGCR(399,+IBIFN,"U")),U,1)  ; use statement from date
"RTN","IBCEU3",283,0)
 ;
"RTN","IBCEU3",284,0)
 I $G(IBPRV) D  G SPECQ
"RTN","IBCEU3",285,0)
 . S IBSPEC=$$SPEC^IBCEU(IBPRV,IBDT)
"RTN","IBCEU3",286,0)
 ;
"RTN","IBCEU3",287,0)
 ;Get rendering for professional, attending for institutional,
"RTN","IBCEU3",288,0)
 S IBINS=($$FT^IBCEF(IBIFN)=3)
"RTN","IBCEU3",289,0)
 D GETPRV^IBCEU(IBIFN,"ALL",.IBPRV)
"RTN","IBCEU3",290,0)
 S Z=$S('IBINS:3,1:4)
"RTN","IBCEU3",291,0)
 I $G(IBPRV(Z,1))'="" D
"RTN","IBCEU3",292,0)
 . I $P(IBPRV(Z,1),U,3) S IBSPEC=$$SPEC^IBCEU($P($G(IBPRV(Z,1)),U,3),IBDT) Q:IBSPEC'=""
"RTN","IBCEU3",293,0)
 . S Z0=+$O(^DGCR(399,IBIFN,"PRV","B",Z,0))
"RTN","IBCEU3",294,0)
 . I Z0,$P($G(^DGCR(399,IBIFN,"PRV",Z0,0)),U,8)'="" S IBSPEC=$P(^(0),U,8)
"RTN","IBCEU3",295,0)
 ;
"RTN","IBCEU3",296,0)
SPECQ I IBSPEC="" S IBSPEC="99"
"RTN","IBCEU3",297,0)
 Q IBSPEC
"RTN","IBCEU3",298,0)
 ;
"RTN","IBCEU3",299,0)
CHAMPVA(IBIFN) ; Returns 1 if the bill IBIFN has a CHAMPVA rate type
"RTN","IBCEU3",300,0)
 Q $E($P($G(^DGCR(399.3,+$P($G(^DGCR(399,IBIFN,0)),U,7),0)),U),1,7)="CHAMPVA"
"RTN","IBCEU3",301,0)
 ;
"RTN","IBCEU3",302,0)
FAC(IBIFN) ; Obsolete function.  Used by old output formatter field and data element N-RENDERING INSTITUTION
"RTN","IBCEU3",303,0)
 Q ""
"RTN","IBCEU3",304,0)
 ;
"RTN","IBCEU3",305,0)
MCR24K(IBIFN,IBPRV) ;Function returns MEDICARE id# for professional (CMS-1500) box 24k for bill IBIFN if appropriate
"RTN","IBCEU3",306,0)
 ;*432/TAZ - Added IBPRV to allow circumvent the call to F^IBCEF("N-SPECIALTY CODE","IBZ",,IBIFN) in MCRSPEC^IBCEU4
"RTN","IBCEU3",307,0)
 ;JWS;IB*2.0*592:Added dental form to check for compatibility
"RTN","IBCEU3",308,0)
 ;Q $S($$FT^IBCEF(IBIFN)=2&$$MCRONBIL^IBEFUNC(IBIFN):"V"_$$MCRSPEC^IBCEU4(IBIFN,1,$G(IBPRV))_$P($$SITE^VASITE,U,3),1:"")
"RTN","IBCEU3",309,0)
 Q $S(($$FT^IBCEF(IBIFN)=2)!($$FT^IBCEF(IBIFN)=7)&$$MCRONBIL^IBEFUNC(IBIFN):"V"_$$MCRSPEC^IBCEU4(IBIFN,1,$G(IBPRV))_$P($$SITE^VASITE,U,3),1:"")
"RTN","IBCEU3",310,0)
 ;
"RTN","IBCEU5")
0^5^B88027546^B79445173
"RTN","IBCEU5",1,0)
IBCEU5 ;ALB/TMP - EDI UTILITIES (continued) FOR CMS-1500 ;13-DEC-99
"RTN","IBCEU5",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,232,348,349,432,592**;21-MAR-94;Build 58
"RTN","IBCEU5",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEU5",4,0)
 Q
"RTN","IBCEU5",5,0)
 ;
"RTN","IBCEU5",6,0)
EXTCR(IBPRV) ; Called by trigger on field .02 of file 399.0222
"RTN","IBCEU5",7,0)
 ; Also called by trigger on field .02 of file 399.0404 (DEM;432).
"RTN","IBCEU5",8,0)
 ; Function returns the first 3 digits of the provider's degree if
"RTN","IBCEU5",9,0)
 ; a VA provider or the credentials in file 355.9 if non-VA provider
"RTN","IBCEU5",10,0)
 ; IBPRV = vp to file 200 or 355.93
"RTN","IBCEU5",11,0)
 Q $E($$CRED^IBCEU(IBPRV),1,3)
"RTN","IBCEU5",12,0)
 ; 
"RTN","IBCEU5",13,0)
FTPRV(IBIFN,NOASK) ; If form type changes from UB-04 to CMS-1500 or vice
"RTN","IBCEU5",14,0)
 ; versa, ask to change provider function to appropriate function for
"RTN","IBCEU5",15,0)
 ; form type (ATTENDING = UB-04, RENDERING = CMS-1500)
"RTN","IBCEU5",16,0)
 ; IBIFN = ien of bill in file 399
"RTN","IBCEU5",17,0)
 ; NOASK (flag) = 1 if change should happen without asking first
"RTN","IBCEU5",18,0)
 N ATT,REN,FT
"RTN","IBCEU5",19,0)
 S FT=$$FT^IBCEF(IBIFN)
"RTN","IBCEU5",20,0)
 S REN=$$CKPROV^IBCEU(IBIFN,3,1)
"RTN","IBCEU5",21,0)
 S ATT=$$CKPROV^IBCEU(IBIFN,4,1)
"RTN","IBCEU5",22,0)
 ;JWS;IB*2.0*592;add Dental form check 
"RTN","IBCEU5",23,0)
 I $S(FT=2:'REN&ATT,FT=3:'ATT&REN,FT=7:'REN&ATT,1:0) D
"RTN","IBCEU5",24,0)
 . I '$G(NOASK) D TXFERPRV(IBIFN,FT) Q
"RTN","IBCEU5",25,0)
 . D PRVCHG(IBIFN,FT)
"RTN","IBCEU5",26,0)
 D CLEANUP(IBIFN,FT)
"RTN","IBCEU5",27,0)
 Q
"RTN","IBCEU5",28,0)
 ;
"RTN","IBCEU5",29,0)
TXFERPRV(IBIFN,FT) ; Ask to change the function of the main provider on
"RTN","IBCEU5",30,0)
 ;  bill IBIFN to the function appropriate to the form type FT
"RTN","IBCEU5",31,0)
 ;  
"RTN","IBCEU5",32,0)
 N DIR,X,Y,Z,DIE,DA,DR,HAVE,NEED,IBZ
"RTN","IBCEU5",33,0)
 ; DEM;432 - Changed the prompt from uppercase to mixed case.
"RTN","IBCEU5",34,0)
 W ! S DIR("A")="  Change the Claim Level "_$S(FT=3:"Rendering",1:"Attending")_" provider's function to "_$S(FT=3:"Attending",1:"Rendering")_"?: "
"RTN","IBCEU5",35,0)
 S DIR(0)="YA",DIR("B")="NO",DIR("?",1)="If you answer YES here, you will make the claim level provider functions",DIR("?")="  consistent with the form type of the bill"
"RTN","IBCEU5",36,0)
 D ^DIR K DIR
"RTN","IBCEU5",37,0)
 I Y'=1 Q
"RTN","IBCEU5",38,0)
 D PRVCHG(IBIFN,FT)
"RTN","IBCEU5",39,0)
 Q
"RTN","IBCEU5",40,0)
 ;
"RTN","IBCEU5",41,0)
PRVCHG(IBIFN,IBFT) ; Change provider type to type consistent with current
"RTN","IBCEU5",42,0)
 ; data on bill
"RTN","IBCEU5",43,0)
 N Z,IBZ,HAVE,NEED,DIE,DA,X,Y
"RTN","IBCEU5",44,0)
 S HAVE=$S(IBFT=3:3,1:4)
"RTN","IBCEU5",45,0)
 S NEED=$S(IBFT=3:4,1:3)
"RTN","IBCEU5",46,0)
 S Z=$O(^DGCR(399,IBIFN,"PRV","B",HAVE,0))
"RTN","IBCEU5",47,0)
 I Z D
"RTN","IBCEU5",48,0)
 . S DA(1)=IBIFN,DA=+Z
"RTN","IBCEU5",49,0)
 . D FDA^DILF(399.0222,.DA,.01,,NEED,"IBZ")
"RTN","IBCEU5",50,0)
 . D FILE^DIE(,"IBZ")
"RTN","IBCEU5",51,0)
 ;I Z S DA(1)=IBIFN,DIE="^DGCR(399,"_DA(1)_",""PRV"",",DA=+Z,DR=".01////"_NEED D FILE^DIE(,DIE
"RTN","IBCEU5",52,0)
 Q
"RTN","IBCEU5",53,0)
 ;
"RTN","IBCEU5",54,0)
CLEANUP(IBIFN,FT)  ; If form type changes remove any extra provider FUNCTIONS.
"RTN","IBCEU5",55,0)
 N X,PRV,CLEAN,DA,DIE
"RTN","IBCEU5",56,0)
 ;
"RTN","IBCEU5",57,0)
 ;JWS;IB*2.0*592 US1108 - If form type changes to (7) J430D - Dental, default Bill Charge Type
"RTN","IBCEU5",58,0)
 I FT=7 S CLEAN(399,IBIFN_",",.27)=2
"RTN","IBCEU5",59,0)
 ; (3) If form type changes from CMS-1500 to UB-04, remove any extra provider FUNCTIONS. 
"RTN","IBCEU5",60,0)
 ;JWS;IB*2.0*592 US1108 - added 6-ASSISTANT SURGEON
"RTN","IBCEU5",61,0)
 I FT=3 F X=5,6 D  ; 5-SUPERVISING, 6-ASSISTANT SURGEON
"RTN","IBCEU5",62,0)
 . I $D(^DGCR(399,IBIFN,"PRV","B",X)) D
"RTN","IBCEU5",63,0)
 .. S PRV=0 F  S PRV=$O(^DGCR(399,IBIFN,"PRV","B",X,PRV)) Q:+PRV=0  D
"RTN","IBCEU5",64,0)
 ... S DA(1)=IBIFN,DA=PRV D FDA^DILF(399.0222,.DA,.01,,"@","CLEAN")
"RTN","IBCEU5",65,0)
 ;
"RTN","IBCEU5",66,0)
 ; (2) If form type changes from UB-04 to CMS-1500, remove any extra provider FUNCTIONS. 
"RTN","IBCEU5",67,0)
 ;JWS;IB*2.0*592 US1108 - added 6-ASSISTANT SURGEON
"RTN","IBCEU5",68,0)
 I FT=2 F X=2,4,6,9 D  ; 2-OPERATING, 4-ATTENDING, 6-ASSISTANT SURGEON, 9-OTHER
"RTN","IBCEU5",69,0)
 . I $D(^DGCR(399,IBIFN,"PRV","B",X)) D
"RTN","IBCEU5",70,0)
 .. S PRV=0 F  S PRV=$O(^DGCR(399,IBIFN,"PRV","B",X,PRV)) Q:+PRV=0  D
"RTN","IBCEU5",71,0)
 ... S DA(1)=IBIFN,DA=PRV D FDA^DILF(399.0222,.DA,.01,,"@","CLEAN")
"RTN","IBCEU5",72,0)
 ;
"RTN","IBCEU5",73,0)
 I $D(CLEAN) D FILE^DIE(,"CLEAN")
"RTN","IBCEU5",74,0)
 Q
"RTN","IBCEU5",75,0)
 ;
"RTN","IBCEU5",76,0)
PRVHELP ; Text for the provider function help
"RTN","IBCEU5",77,0)
 Q:$G(X)'="??"
"RTN","IBCEU5",78,0)
 N IBZ,IBQUIT,IB,IB1,DIR,Z
"RTN","IBCEU5",79,0)
 S IBQUIT=0
"RTN","IBCEU5",80,0)
 S Z=""
"RTN","IBCEU5",81,0)
 I '$D(IOSL)!'$D(IOST) D HOME^%ZIS
"RTN","IBCEU5",82,0)
 Q:IOST'["C-"
"RTN","IBCEU5",83,0)
 D:$G(D0) SPECIFIC(D0)
"RTN","IBCEU5",84,0)
 N DIR,X,Y S DIR(0)="E" D ^DIR K DIR W @IOF
"RTN","IBCEU5",85,0)
 S:$G(D0) Z=$$FT^IBCEF(D0)
"RTN","IBCEU5",86,0)
 S IB=IOSL,IB1=1
"RTN","IBCEU5",87,0)
 F IBZ=1:1 S:$P($T(HLPTXT+IBZ),";;",2)="" IBQUIT=1 Q:IBQUIT  S IB1=1 D
"RTN","IBCEU5",88,0)
 . I $Y>(IB-3) N DIR,X,Y S IB1=0,DIR(0)="E" D ^DIR K DIR S IB=IB+IOSL I Y'=1 S IBQUIT=1 Q
"RTN","IBCEU5",89,0)
 . W !,$P($T(HLPTXT+IBZ),";;",2)
"RTN","IBCEU5",90,0)
 I IB1 D
"RTN","IBCEU5",91,0)
 . N DIR,X,Y S DIR(0)="E" D ^DIR K DIR
"RTN","IBCEU5",92,0)
 W @IOF
"RTN","IBCEU5",93,0)
 Q
"RTN","IBCEU5",94,0)
 ;
"RTN","IBCEU5",95,0)
SPECIFIC(IBIFN) ; Display specific provider requirements for the bill IBIFN
"RTN","IBCEU5",96,0)
 N IBFT,IBPRV,IBR,ONBILL,Z,IBZ
"RTN","IBCEU5",97,0)
 S IBFT=$$FT^IBCEF(IBIFN)
"RTN","IBCEU5",98,0)
 D GETPRV^IBCEU(IBIFN,"ALL",.IBPRV) ;Returns needed providers
"RTN","IBCEU5",99,0)
 ;JWS;IB*2.0*592 US1108 - added Dental form #7
"RTN","IBCEU5",100,0)
 W !,"This bill is ",$S(IBFT=7:"J430D",IBFT=3:"UB-04",1:"CMS-1500"),"/",$S($$INPAT^IBCEF(IBIFN):"Inpatient",1:"Outpatient")
"RTN","IBCEU5",101,0)
 W !!,"The valid provider functions for this bill are:"
"RTN","IBCEU5",102,0)
 ;JWS;IB*2.0*592 US1108 - changed loop from :5 to :6 for Assistant Surgeon
"RTN","IBCEU5",103,0)
 F IBZ=1:1:6,9 I $$PRVOK^IBCEU(IBZ,IBIFN) D
"RTN","IBCEU5",104,0)
 . S ONBILL=$$CKPROV^IBCEU(IBIFN,IBZ)
"RTN","IBCEU5",105,0)
 . S IBR=$S($G(IBPRV(IBZ,"NOTOPT")):1,$G(IBPRV(IBZ,"SITUATIONAL")):2,1:0)  ; DEM;432 added "SITUATIONAL" check.
"RTN","IBCEU5",106,0)
 . ;JWS;IB*2.0*592 US1108 - dental form#7
"RTN","IBCEU5",107,0)
 . I IBFT=7 S IBR=2
"RTN","IBCEU5",108,0)
 . ; ib2.0*432
"RTN","IBCEU5",109,0)
 . ; W !,IBZ,"  ",$$EXPAND^IBTRE(399.0222,.01,IBZ),?18,$S(IBR&'ONBILL:"**",1:""),?20,$S(IBR:"REQUIRED",1:"OPTIONAL"),$S(ONBILL:" - ALREADY ON BILL",1:" - NOT ON BILL")
"RTN","IBCEU5",110,0)
 . W !,IBZ,"  ",$$EXPAND^IBTRE(399.0222,.01,IBZ),?18,$S(IBR&'ONBILL:"**",1:""),?23,$S(IBR=1:"REQUIRED",IBR=2:"SITUATIONAL",1:"OPTIONAL")
"RTN","IBCEU5",111,0)
 W !
"RTN","IBCEU5",112,0)
 Q
"RTN","IBCEU5",113,0)
 ;
"RTN","IBCEU5",114,0)
HLPTXT ; Helptext for provider function
"RTN","IBCEU5",115,0)
 ;; 
"RTN","IBCEU5",116,0)
 ;;PROVIDER FUNCTION requirements:
"RTN","IBCEU5",117,0)
 ;; 
"RTN","IBCEU5",118,0)
 ;;RENDERING: UB-04 Situational, CMS-1500 REQUIRED (CMS-1500), or J430D Situational
"RTN","IBCEU5",119,0)
 ;;           This is the provider who performed a service.
"RTN","IBCEU5",120,0)
 ;; 
"RTN","IBCEU5",121,0)
 ;;ATTENDING: UB-04 REQUIRED
"RTN","IBCEU5",122,0)
 ;;           The physician who has primary responsibility
"RTN","IBCEU5",123,0)
 ;;           for the patient's medical care and treatment. 
"RTN","IBCEU5",124,0)
 ;; 
"RTN","IBCEU5",125,0)
 ;;OPERATING: UB-04 SITUATIONAL 
"RTN","IBCEU5",126,0)
 ;;           The provider who performed the principal procedure(s)
"RTN","IBCEU5",127,0)
 ;;           being billed.
"RTN","IBCEU5",128,0)
 ;; UB-04 (inpatient): Situational IF type of bill has first 2
"RTN","IBCEU5",129,0)
 ;;                    digits of 11, and there is a principal
"RTN","IBCEU5",130,0)
 ;;                    procedure that will print in Form
"RTN","IBCEU5",131,0)
 ;;                    Locator 74 of the claim, there must be
"RTN","IBCEU5",132,0)
 ;;                    an Operating or Rendering Provider.
"RTN","IBCEU5",133,0)
 ;; UB-04 (outpatient):REQUIRED IF type of bill has first 2
"RTN","IBCEU5",134,0)
 ;;                    digits of 83, and there is a principal
"RTN","IBCEU5",135,0)
 ;;                    procedure that will print in Form
"RTN","IBCEU5",136,0)
 ;;                    Locator 74 of the claim.
"RTN","IBCEU5",137,0)
 ;; 
"RTN","IBCEU5",138,0)
 ;;REFERRING: UB-04, CMS-1500, or J430D SITUATIONAL
"RTN","IBCEU5",139,0)
 ;;           The provider who referred the patient for the services being billed. 
"RTN","IBCEU5",140,0)
 ;; 
"RTN","IBCEU5",141,0)
 ;;SUPERVISING: CMS-1500 OPTIONAL or J430D SITUATIONAL
"RTN","IBCEU5",142,0)
 ;;           Required when the rendering provider is supervised
"RTN","IBCEU5",143,0)
 ;;           by another provider. Data will not be printed.
"RTN","IBCEU5",144,0)
 ;; 
"RTN","IBCEU5",145,0)
 ;;OTHER OPERATING: UB-04 SITUATIONAL
"RTN","IBCEU5",146,0)
 ;;           Used to report another Operating Physician.  There must
"RTN","IBCEU5",147,0)
 ;;           also be an Operating Physician on the claim.
"RTN","IBCEU5",148,0)
 ;; 
"RTN","IBCEU5",149,0)
 ;;ASSISTANT SURGEON: J430D SITUATIONAL
"RTN","IBCEU5",150,0)
 ;;           Use when the Rendering Provider provided these services in the role
"RTN","IBCEU5",151,0)
 ;;           of the Assisting Surgeon.
"RTN","IBCEU5",152,0)
 ;; 
"RTN","IBCEU5",153,0)
 ;;           There are providers who performed specific functions for
"RTN","IBCEU5",154,0)
 ;;           the services on this bill.  These providers are needed to
"RTN","IBCEU5",155,0)
 ;;           enable the V.A. to collect reimbursement when more than
"RTN","IBCEU5",156,0)
 ;;           one provider function is involved in the billable episode
"RTN","IBCEU5",157,0)
 ;;           (like an operating physician or referring provider). 
"RTN","IBCEU5",158,0)
 ;; 
"RTN","IBCEU5",159,0)
 ;;           This data identifies the type of function that was performed
"RTN","IBCEU5",160,0)
 ;;           by a provider.
"RTN","IBCEU5",161,0)
 ;;
"RTN","IBCEU5",162,0)
 ;
"RTN","IBCEU5",163,0)
LINKRX(IBIFN,IBREV) ; Ask for revenue code's RX if not already there
"RTN","IBCEU5",164,0)
 N DIR,X,Y,IBZ,IBRX,Z,Z0,DA
"RTN","IBCEU5",165,0)
 Q:$P($G(^DGCR(399,IBIFN,"RC",IBREV,0)),U,11)!($P($G(^(0)),U,10)'=3)
"RTN","IBCEU5",166,0)
 S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"RC",Z)) Q:'Z  I Z'=IBREV S Z0=$G(^(Z,0)) I $P(Z0,U,10)=3,$P(Z0,U,11) S IBRX(+$P(Z0,U,11))=""
"RTN","IBCEU5",167,0)
 S DIR(0)="PAO^IBA(362.4,:AEMQ",DIR("S")="I $P(^(0),U,2)=IBIFN,'$D(IBRX(+Y))"
"RTN","IBCEU5",168,0)
 S DIR("A")="Select Rx for this charge: "
"RTN","IBCEU5",169,0)
 S DIR("?",1)="Enter an Rx# for this revenue code"
"RTN","IBCEU5",170,0)
 S DIR("?")=" The Rx must not already have an associated revenue code"
"RTN","IBCEU5",171,0)
 D ^DIR K DIR
"RTN","IBCEU5",172,0)
 I Y>0 D
"RTN","IBCEU5",173,0)
 . S DA(1)=IBIFN,DA=IBREV,IBZ=""
"RTN","IBCEU5",174,0)
 . D FDA^DILF(399.042,.DA,.11,"R",+Y,"IBZ")
"RTN","IBCEU5",175,0)
 . D FILE^DIE(,"IBZ")
"RTN","IBCEU5",176,0)
 Q
"RTN","IBCEU5",177,0)
 ;
"RTN","IBCEU5",178,0)
LINKCPT(IBIFN,IBREV) ; Ask for revenue code's CPT
"RTN","IBCEU5",179,0)
 N DIR,X,Y,IBZ,IBCP,Z,Z0,Z1,DA,IBRC,IBP
"RTN","IBCEU5",180,0)
 S IBRC=$G(^DGCR(399,IBIFN,"RC",IBREV,0))
"RTN","IBCEU5",181,0)
 Q:$P(IBRC,U,8)!($P(IBRC,U,10)'=4)
"RTN","IBCEU5",182,0)
 S IBP=+$P(IBRC,U,6)
"RTN","IBCEU5",183,0)
 I $P(IBRC,U,11) W !,"PROCEDURE #"_$P(IBRC,U,11)_" HAS BEEN ASSOCIATED WITH THIS MANUAL CHARGE"
"RTN","IBCEU5",184,0)
 I '$P(IBRC,U,11) D  Q:IBRC=""
"RTN","IBCEU5",185,0)
 . S DIR("?",1)="Respond YES if this revenue code charge specifically references the data for"
"RTN","IBCEU5",186,0)
 . S DIR("?",2)="  a particular procedure that was manually entered on the previous screen."
"RTN","IBCEU5",187,0)
 . S DIR("?",3)="  For outpatient UB-04 bills, associating a manual revenue code charge with",DIR("?")="  a procedure is the only way to print a modifier in box 44"
"RTN","IBCEU5",188,0)
 . S DIR(0)="YA",DIR("A")="SHOULD A PROCEDURE ENTRY BE ASSOCIATED WITH THIS CHARGE?: ",DIR("B")=$S(IBP:"YES",1:"NO") W ! D ^DIR K DIR W !
"RTN","IBCEU5",189,0)
 . I Y'=1 S IBRC="" Q
"RTN","IBCEU5",190,0)
 I $P(IBRC,U,11) D
"RTN","IBCEU5",191,0)
 . S DIR("?",1)="Respond YES if you no longer want this revenue code charge to reference a",DIR("?")="  specific manually entered procedure"
"RTN","IBCEU5",192,0)
 . S DIR(0)="YA",DIR("A")="DELETE THE EXISTING PROCEDURE ASSOCIATION?: ",DIR("B")="NO" W ! D ^DIR K DIR
"RTN","IBCEU5",193,0)
 . I Y=1 D UPDPTR(IBIFN,IBREV,"") S $P(IBRC,U,11)=""
"RTN","IBCEU5",194,0)
 S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"RC",Z)) Q:'Z  S Z0=$G(^(Z,0)) I IBREV'=Z,$P(Z0,U,11) D
"RTN","IBCEU5",195,0)
 . ; Don't allow to link to 'used' proc
"RTN","IBCEU5",196,0)
 . I $P(Z0,U,10)=4 S IBCP($P(Z0,U,11))="" Q
"RTN","IBCEU5",197,0)
 . I $P(Z0,U,10)=3,$P(Z0,U,15) S IBCP($P(Z0,U,15))=""
"RTN","IBCEU5",198,0)
 S DIR(0)="PAO^DGCR(399,"_IBIFN_",""CP"",:AEMQ",DIR("S")="I '$D(IBCP(+Y)),$P(^(0),U)[""CPT"",+^(0)="_+$P($G(^DGCR(399,IBIFN,"RC",IBREV,0)),U,6)
"RTN","IBCEU5",199,0)
 S DIR("A")="SELECT A PROCEDURE ENTRY: "_$S($P(IBRC,U,11):"#"_$P(IBRC,U,11)_" - "_$$EXPAND^IBTRE(399.0304,.01,$P($G(^DGCR(399,IBIFN,"CP",$P(IBRC,U,11),0)),U))_"// ",1:"")
"RTN","IBCEU5",200,0)
 S DIR("?")="Enter a manually-added CPT procedure to associate with this charge"
"RTN","IBCEU5",201,0)
 S DA(1)=IBIFN
"RTN","IBCEU5",202,0)
 D ^DIR K DIR W !
"RTN","IBCEU5",203,0)
 I Y>0 D UPDPTR(IBIFN,IBREV,+Y)
"RTN","IBCEU5",204,0)
 Q
"RTN","IBCEU5",205,0)
 ;
"RTN","IBCEU5",206,0)
UPDPTR(IBIFN,IBREV,Y) ;
"RTN","IBCEU5",207,0)
 N IBZ,DA
"RTN","IBCEU5",208,0)
 S DA(1)=IBIFN,DA=IBREV,IBZ=""
"RTN","IBCEU5",209,0)
 D FDA^DILF(399.042,.DA,.11,"R",$S(Y:+Y,1:""),"IBZ")
"RTN","IBCEU5",210,0)
 D FILE^DIE(,"IBZ")
"RTN","IBCEU5",211,0)
 Q
"RTN","IBCEU5",212,0)
 ;
"RTN","IBCEU5",213,0)
INSFT(IBIFN) ; Returns 1 if form type is UB-04, 0 if CMS-1500 or J430D
"RTN","IBCEU5",214,0)
 Q ($$FT^IBCEF(IBIFN)=3)
"RTN","IBCEU7")
0^6^B36671868^B28602980
"RTN","IBCEU7",1,0)
IBCEU7 ;ALB/DEM - EDI UTILITIES ;26-SEP-2010
"RTN","IBCEU7",2,0)
 ;;2.0;INTEGRATED BILLING;**432,592**;21-MAR-94;Build 58
"RTN","IBCEU7",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEU7",4,0)
 Q
"RTN","IBCEU7",5,0)
 ;
"RTN","IBCEU7",6,0)
LNPRVOK(VAL,IBIFN) ; Check bill form & line prov function agree
"RTN","IBCEU7",7,0)
 ; DEM;432 - New routine for Claim Line Provider.
"RTN","IBCEU7",8,0)
 ; VAL = internal value of prov function
"RTN","IBCEU7",9,0)
 ;
"RTN","IBCEU7",10,0)
 ; Allowable line provider functions for UB04 (FORM TYPE = 3)
"RTN","IBCEU7",11,0)
 ; Inpatient and UB04 Outpatient:
"RTN","IBCEU7",12,0)
 ;   - Rendering Provider(3).
"RTN","IBCEU7",13,0)
 ;   - Referring Provider(1).
"RTN","IBCEU7",14,0)
 ;   - Operating Physician(2).
"RTN","IBCEU7",15,0)
 ;   - Other Operating Physician(9).
"RTN","IBCEU7",16,0)
 ;
"RTN","IBCEU7",17,0)
 ; Allowable line provider functions for CMS 1500 (FORM TYPE = 2)
"RTN","IBCEU7",18,0)
 ; Inpatient and CMS 1500 Outpatient:
"RTN","IBCEU7",19,0)
 ;   - Rendering Provider(3).
"RTN","IBCEU7",20,0)
 ;   - Referring Provider(1).
"RTN","IBCEU7",21,0)
 ;   - Supervising Provider(5).
"RTN","IBCEU7",22,0)
 ;
"RTN","IBCEU7",23,0)
 ;JWS;IB*2.0*592 US1108
"RTN","IBCEU7",24,0)
 ; Allowable line provider functions for J430D Dental (FORM TYPE = 7)
"RTN","IBCEU7",25,0)
 ; Inpatient and CMS 1500 Outpatient:
"RTN","IBCEU7",26,0)
 ;   - Rendering Provider(3).
"RTN","IBCEU7",27,0)
 ;   - Referring Provider(1).
"RTN","IBCEU7",28,0)
 ;   - Supervising Provider(5).
"RTN","IBCEU7",29,0)
 ;   - Assistant Surgeon (6). - Dental J430D only
"RTN","IBCEU7",30,0)
 ;
"RTN","IBCEU7",31,0)
 N OK,IBUB
"RTN","IBCEU7",32,0)
 S VAL=$$UP^XLFSTR(VAL)
"RTN","IBCEU7",33,0)
 S OK=$S(VAL'="":1,1:0)
"RTN","IBCEU7",34,0)
 G:'OK!'$G(IBIFN) PRVQ
"RTN","IBCEU7",35,0)
 ;
"RTN","IBCEU7",36,0)
 ;JWS;IB*2.0*592 US1108 - 2 for form#7 Dental
"RTN","IBCEU7",37,0)
 S IBUB=$S($$FT^IBCEF(IBIFN)=7:2,1:($$FT^IBCEF(IBIFN)=3)) ; 1 if UB-04 ; 0 if CMS-1500 ; 2 if J430D Dental form
"RTN","IBCEU7",38,0)
 ;
"RTN","IBCEU7",39,0)
 S OK=0
"RTN","IBCEU7",40,0)
 I IBUB=1,"1239"[VAL S OK=1  ; UB-04
"RTN","IBCEU7",41,0)
 I 'IBUB,"135"[VAL S OK=1  ; CMS-1500
"RTN","IBCEU7",42,0)
 ;JWS;IB*2.0*592 US1108 J430D Dental
"RTN","IBCEU7",43,0)
 I IBUB=2,"1356"[VAL S OK=1
"RTN","IBCEU7",44,0)
 ;
"RTN","IBCEU7",45,0)
PRVQ Q OK
"RTN","IBCEU7",46,0)
 ;
"RTN","IBCEU7",47,0)
LNPRVHLP ;Helptext for line provider function.
"RTN","IBCEU7",48,0)
 ;
"RTN","IBCEU7",49,0)
 N IBZ,IBQUIT,VALUE,FORMAT
"RTN","IBCEU7",50,0)
 F IBZ=1:1 S:$P($T(HLPTXT+IBZ),";;",2)="END" IBQUIT=1 Q:$G(IBQUIT)  D
"RTN","IBCEU7",51,0)
 . S VALUE=$P($T(HLPTXT+IBZ),";;",2)
"RTN","IBCEU7",52,0)
 . S FORMAT=$S(VALUE="":"!",1:"")
"RTN","IBCEU7",53,0)
 . D EN^DDIOL(VALUE,"",FORMAT)
"RTN","IBCEU7",54,0)
 . Q
"RTN","IBCEU7",55,0)
 Q
"RTN","IBCEU7",56,0)
 ;
"RTN","IBCEU7",57,0)
HLPTXT ; Helptext for line provider function.
"RTN","IBCEU7",58,0)
 ;;
"RTN","IBCEU7",59,0)
 ;;Enter the name of the line level provider who provided this service.
"RTN","IBCEU7",60,0)
 ;;Line level providers are optional and should only be entered if
"RTN","IBCEU7",61,0)
 ;;different from the claim level provider.
"RTN","IBCEU7",62,0)
 ;;
"RTN","IBCEU7",63,0)
 ;;
"RTN","IBCEU7",64,0)
 ;;END
"RTN","IBCEU7",65,0)
 ;
"RTN","IBCEU7",66,0)
HLPTXT2 ; ***Currently, not activated*** - Helptext for line provider function.
"RTN","IBCEU7",67,0)
 ;;
"RTN","IBCEU7",68,0)
 ;;LINE PROVIDER FUNCTION requirements:
"RTN","IBCEU7",69,0)
 ;;
"RTN","IBCEU7",70,0)
 ;;Allowable line provider functions for UB04 Inpatient and Outpatient:
"RTN","IBCEU7",71,0)
 ;;
"RTN","IBCEU7",72,0)
 ;;  - Rendering Provider(3).
"RTN","IBCEU7",73,0)
 ;;  - Referring Provider(1).
"RTN","IBCEU7",74,0)
 ;;  - Operating Physician(2).
"RTN","IBCEU7",75,0)
 ;;  - Other Operating Physician(9).
"RTN","IBCEU7",76,0)
 ;;
"RTN","IBCEU7",77,0)
 ;;Allowable line provider functions for CMS 1500 Inpatient and Outpatient:
"RTN","IBCEU7",78,0)
 ;;
"RTN","IBCEU7",79,0)
 ;;  - Rendering Provider(3).
"RTN","IBCEU7",80,0)
 ;;  - Referring Provider(1).
"RTN","IBCEU7",81,0)
 ;;  - Supervising Provider(5).
"RTN","IBCEU7",82,0)
 ;;
"RTN","IBCEU7",83,0)
 ;; Allowable line provider functions for J430D Dental (FORM TYPE = 7)
"RTN","IBCEU7",84,0)
 ;; Inpatient and CMS 1500 Outpatient:
"RTN","IBCEU7",85,0)
 ;;   - Rendering Provider(3).
"RTN","IBCEU7",86,0)
 ;;   - Referring Provider(1).
"RTN","IBCEU7",87,0)
 ;;   - Supervising Provider(5).
"RTN","IBCEU7",88,0)
 ;;   - Assistant Surgeon (6).
"RTN","IBCEU7",89,0)
 ;;
"RTN","IBCEU7",90,0)
 ;;END
"RTN","IBCEU7",91,0)
 Q
"RTN","IBCEU7",92,0)
 ;
"RTN","IBCEU7",93,0)
LNPRVFT(IBFT,IBLNPRV) ; DEM;432 - Field Index "AK" (#301) on FORM TYPE field (399,.19).
"RTN","IBCEU7",94,0)
 ;
"RTN","IBCEU7",95,0)
 ; Description:
"RTN","IBCEU7",96,0)
 ;
"RTN","IBCEU7",97,0)
 ; This function is called by the FORM TYPE (399,.19) "AK" field index.
"RTN","IBCEU7",98,0)
 ; In the case when the FORM TYPE field is changed, then the line
"RTN","IBCEU7",99,0)
 ; provider types are checked to see if any, or all, line providers
"RTN","IBCEU7",100,0)
 ; need to be deleted from the claim.
"RTN","IBCEU7",101,0)
 ;
"RTN","IBCEU7",102,0)
 ; Input:
"RTN","IBCEU7",103,0)
 ;
"RTN","IBCEU7",104,0)
 ; IBFT = FORM TYPE = 2 = (CMS-1500), or FORM TYPE = 3 = (UB-04).
"RTN","IBCEU7",105,0)
 ;        Must be either FORM TYPE 2, or FORM TYPE 3 to continue.
"RTN","IBCEU7",106,0)
 ;        See allowable line provider functions by FORM TYPE below.
"RTN","IBCEU7",107,0)
 ; IBLNPRV = Array passed by reference.
"RTN","IBCEU7",108,0)
 ;
"RTN","IBCEU7",109,0)
 ; Output:
"RTN","IBCEU7",110,0)
 ;
"RTN","IBCEU7",111,0)
 ; OK = 1 = line providers to delete, OK = 0 = no line providers to delete.
"RTN","IBCEU7",112,0)
 ; IBLNPRV Array = If line providers to delete, then array contains
"RTN","IBCEU7",113,0)
 ;                 these line providers - IBLNPRV(399.0404,"IENS",.01)="@"
"RTN","IBCEU7",114,0)
 ;
"RTN","IBCEU7",115,0)
 ; Allowable line provider functions for UB04 (FORM TYPE = 3)
"RTN","IBCEU7",116,0)
 ; Inpatient and UB04 Outpatient:
"RTN","IBCEU7",117,0)
 ;   - Rendering Provider(VAL=3).
"RTN","IBCEU7",118,0)
 ;   - Referring Provider(VAL=1).
"RTN","IBCEU7",119,0)
 ;   - Operating Physician(VAL=2).
"RTN","IBCEU7",120,0)
 ;   - Other Operating Physician(VAL=9).
"RTN","IBCEU7",121,0)
 ;
"RTN","IBCEU7",122,0)
 ; Allowable line provider functions for CMS 1500 (FORM TYPE = 2)
"RTN","IBCEU7",123,0)
 ; Inpatient and CMS 1500 Outpatient:
"RTN","IBCEU7",124,0)
 ;   - Rendering Provider(VAL=3).
"RTN","IBCEU7",125,0)
 ;   - Referring Provider(VAL=1).
"RTN","IBCEU7",126,0)
 ;   - Supervising Provider(VAL=5).
"RTN","IBCEU7",127,0)
 ;
"RTN","IBCEU7",128,0)
 ; Allowable line provider functions for J430D (FORM TYPE = 7)
"RTN","IBCEU7",129,0)
 ; Dental:
"RTN","IBCEU7",130,0)
 ;   - Rendering Provider(VAL=3).
"RTN","IBCEU7",131,0)
 ;   - Referring Provider(VAL=1).
"RTN","IBCEU7",132,0)
 ;   - Supervising Provider(VAL=5).
"RTN","IBCEU7",133,0)
 ;   - Assistant Surgeon(VAL=6).
"RTN","IBCEU7",134,0)
 ;
"RTN","IBCEU7",135,0)
 Q:'$G(IBIFN) 0  ; QUIT 0 if no claim number.
"RTN","IBCEU7",136,0)
 Q:'$G(IBFT) 0  ; QUIT 0 if no FORM TYPE.
"RTN","IBCEU7",137,0)
 ;JWS;IB*2.0*592 US1108
"RTN","IBCEU7",138,0)
 Q:(IBFT'=2)&(IBFT'=3)&(IBFT'=7) 0  ; QUIT 0 - Must be CMS-1500 (2) or UB-04 (3) or J430D (7) FORM TYPE.
"RTN","IBCEU7",139,0)
 ;
"RTN","IBCEU7",140,0)
 N IBPRVFUN,OK
"RTN","IBCEU7",141,0)
 S:IBFT=3 IBPRVFUN("VAL",IBFT)="1239"  ; Allowable LINE PROVIDER FUNCTIONs for UB-04.
"RTN","IBCEU7",142,0)
 S:IBFT=2 IBPRVFUN("VAL",IBFT)="135"  ; Allowable LINE PROVIDER FUNCTIONs for CMS-1500.
"RTN","IBCEU7",143,0)
 ;JWS;IB*2.0*592 US1108
"RTN","IBCEU7",144,0)
 S:IBFT=7 IBPRVFUN("VAL",IBFT)="1356"  ;Allowable LINE PROVIDER FUNCTIONs for J430D.
"RTN","IBCEU7",145,0)
 ;
"RTN","IBCEU7",146,0)
 S OK=0  ; Initialize OK=0.
"RTN","IBCEU7",147,0)
 ;
"RTN","IBCEU7",148,0)
 N IBPROCP,IBLPIEN,IBLNPROV,DA
"RTN","IBCEU7",149,0)
 S IBPROCP=0 F  S IBPROCP=$O(^DGCR(399,IBIFN,"CP",IBPROCP)) Q:'IBPROCP  D  ; Loop on PROCEDURES multiple.
"RTN","IBCEU7",150,0)
 . Q:'($D(^DGCR(399,IBIFN,"CP",IBPROCP,0))#10)  ; No zero node for procedure.
"RTN","IBCEU7",151,0)
 . S IBPRVFUN=0 F  S IBPRVFUN=$O(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV","B",IBPRVFUN)) Q:'IBPRVFUN  D:IBPRVFUN("VAL",IBFT)'[IBPRVFUN
"RTN","IBCEU7",152,0)
 . . S IBLPIEN=0 F  S IBLPIEN=$O(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV","B",IBPRVFUN,IBLPIEN)) Q:'IBLPIEN  D
"RTN","IBCEU7",153,0)
 . . . Q:'($D(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV",IBLPIEN,0))#10)  ; No zero node for line level provider.
"RTN","IBCEU7",154,0)
 . . . S IBLNPROV=$P(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV",IBLPIEN,0),U,2)
"RTN","IBCEU7",155,0)
 . . . Q:'IBLNPROV  ; No line provider for this line provider function.
"RTN","IBCEU7",156,0)
 . . . S OK=1,IBLNPRV(399.0404,IBLPIEN_","_IBPROCP_","_IBIFN_",",.01)="@"  ; We have at leaset one line provider to delete from claim.
"RTN","IBCEU7",157,0)
 . . . Q
"RTN","IBCEU7",158,0)
 . . Q
"RTN","IBCEU7",159,0)
 . Q
"RTN","IBCEU7",160,0)
 ;
"RTN","IBCEU7",161,0)
 Q OK
"RTN","IBCEU7",162,0)
 ;
"RTN","IBCEU7",163,0)
REMOVE(IBIFN,IBFT) ; This will be used to remove all line level providers and all line level attachments from inpatient UB claims
"RTN","IBCEU7",164,0)
 ;
"RTN","IBCEU7",165,0)
 ; Input IBIFN - Claim Number
"RTN","IBCEU7",166,0)
 ;
"RTN","IBCEU7",167,0)
 Q:IBFT'=3   ; Only worried about UBs
"RTN","IBCEU7",168,0)
 N IBINPAT
"RTN","IBCEU7",169,0)
 S IBINPAT=$$INPAT^IBCEF(IBIFN) Q:'IBINPAT   ; Quit if it's not an inpatient
"RTN","IBCEU7",170,0)
 ;
"RTN","IBCEU7",171,0)
 ; If we got here, we have an inpatient UB
"RTN","IBCEU7",172,0)
 ; In which case, we should not have any line level providers or line level attachment control numbers
"RTN","IBCEU7",173,0)
 ; If we do, then let's remove them
"RTN","IBCEU7",174,0)
 ;
"RTN","IBCEU7",175,0)
 N CPIEN,LNPRVIEN,FDA,ERR
"RTN","IBCEU7",176,0)
 S CPIEN=0 F  S CPIEN=$O(^DGCR(399,IBIFN,"CP",CPIEN)) Q:'+CPIEN  D
"RTN","IBCEU7",177,0)
 . ;
"RTN","IBCEU7",178,0)
 . ; Remove the Line level attachments
"RTN","IBCEU7",179,0)
 . S FDA(399.0304,CPIEN_","_IBIFN_",",70)="@"
"RTN","IBCEU7",180,0)
 . S FDA(399.0304,CPIEN_","_IBIFN_",",71)="@"
"RTN","IBCEU7",181,0)
 . S FDA(399.0304,CPIEN_","_IBIFN_",",72)="@"
"RTN","IBCEU7",182,0)
 . D FILE^DIE("E","FDA")
"RTN","IBCEU7",183,0)
 . ;
"RTN","IBCEU7",184,0)
 . K FDA
"RTN","IBCEU7",185,0)
 . S LNPRVIEN=0 F  S LNPRVIEN=$O(^DGCR(399,IBIFN,"CP",CPIEN,"LNPRV",LNPRVIEN)) Q:'+LNPRVIEN  D
"RTN","IBCEU7",186,0)
 .. ;
"RTN","IBCEU7",187,0)
 .. ;Remove the line level providers
"RTN","IBCEU7",188,0)
 .. S FDA(399.0404,LNPRVIEN_","_CPIEN_","_IBIFN_",",.01)="@"
"RTN","IBCEU7",189,0)
 . I $D(FDA) D FILE^DIE("E","FDA")
"RTN","IBCEU7",190,0)
 Q
"RTN","IBCEXTRP")
0^29^B50603879^B44709750
"RTN","IBCEXTRP",1,0)
IBCEXTRP ;ALB/JEH - VIEW/PRINT EDI EXTRACT DATA ;4/22/03 9:59am
"RTN","IBCEXTRP",2,0)
 ;;2.0;INTEGRATED BILLING;**137,197,211,348,349,377,592**;21-MAR-94;Build 58
"RTN","IBCEXTRP",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCEXTRP",4,0)
 ;
"RTN","IBCEXTRP",5,0)
EN ;
"RTN","IBCEXTRP",6,0)
INIT ;
"RTN","IBCEXTRP",7,0)
 W !!,"This option will display the EDI extract data for a bill.",!
"RTN","IBCEXTRP",8,0)
 N IBREC1,IBIEN,IBINC,DIC,X,Y,DIR,IB364IEN,IBVNUM,IBSEG,STOP,POP,DTOUT,DUOUT
"RTN","IBCEXTRP",9,0)
 ;
"RTN","IBCEXTRP",10,0)
 N DPTNOFZY S DPTNOFZY=1 ; Suppress PATIENT file fuzzy lookups
"RTN","IBCEXTRP",11,0)
 S DIC="^DGCR(399,",DIC(0)="AEMQ",DIC("S")="I 234[$P(^(0),U,13)" D ^DIC
"RTN","IBCEXTRP",12,0)
 I Y<1 G EXITQ
"RTN","IBCEXTRP",13,0)
 S IBIEN=+Y,IBREC1=$G(^DGCR(399,IBIEN,0))
"RTN","IBCEXTRP",14,0)
 S IB364IEN=$$LAST364^IBCEF4(IBIEN) I +$G(IB364IEN)=0 D  G EXITQ
"RTN","IBCEXTRP",15,0)
 . W !,"There is no entry in the EDI Transmit Bill file for this bill number."
"RTN","IBCEXTRP",16,0)
 S IBVNUM=$P($G(^IBA(364,IB364IEN,0)),U,2) I +$G(IBVNUM)=0 D  G EXITQ
"RTN","IBCEXTRP",17,0)
 . W !!,"There is no batch # for this bill.  It has not been transmitted."
"RTN","IBCEXTRP",18,0)
 S IBVNUM=$P($G(^IBA(364.1,IBVNUM,0)),U)
"RTN","IBCEXTRP",19,0)
 S DIR("A")="Include Fields With No Data?: ",DIR("B")="NO",DIR(0)="YA"
"RTN","IBCEXTRP",20,0)
 W ! D ^DIR K DIR
"RTN","IBCEXTRP",21,0)
 I $D(DTOUT)!$D(DUOUT) G EXITQ
"RTN","IBCEXTRP",22,0)
 S IBINC=+Y
"RTN","IBCEXTRP",23,0)
 ;
"RTN","IBCEXTRP",24,0)
 ; IB*2*377 - esg - Ask for specific EDI segments to view
"RTN","IBCEXTRP",25,0)
 ;
"RTN","IBCEXTRP",26,0)
 W !
"RTN","IBCEXTRP",27,0)
 S DIR(0)="SA^A:All EDI Segments;S:Selected EDI Segments"
"RTN","IBCEXTRP",28,0)
 S DIR("A")="Include (A)ll or (S)elected EDI Segments?: "
"RTN","IBCEXTRP",29,0)
 S DIR("B")="All EDI Segments"
"RTN","IBCEXTRP",30,0)
 D ^DIR K DIR
"RTN","IBCEXTRP",31,0)
 I $D(DTOUT)!$D(DUOUT) G EXITQ
"RTN","IBCEXTRP",32,0)
 I Y="A" G DEV                    ; all segments, skip to device prompt
"RTN","IBCEXTRP",33,0)
 ;
"RTN","IBCEXTRP",34,0)
 W !
"RTN","IBCEXTRP",35,0)
 K IBSEG
"RTN","IBCEXTRP",36,0)
 S STOP=0
"RTN","IBCEXTRP",37,0)
 F  D  Q:STOP
"RTN","IBCEXTRP",38,0)
 . S DIR(0)="FO^3:4"
"RTN","IBCEXTRP",39,0)
 . S DIR("A")=" Select EDI Segment"
"RTN","IBCEXTRP",40,0)
 . I $D(IBSEG) S DIR("A")="Another EDI Segment"
"RTN","IBCEXTRP",41,0)
 . S DIR("?")="Enter the name of the EDI segment to include."
"RTN","IBCEXTRP",42,0)
 . D ^DIR K DIR
"RTN","IBCEXTRP",43,0)
 . I $D(DTOUT)!$D(DUOUT) S STOP=1 Q
"RTN","IBCEXTRP",44,0)
 . S Y=$$UP^XLFSTR(Y),Y=$$TRIM^XLFSTR(Y)   ; uppercase/trim spaces
"RTN","IBCEXTRP",45,0)
 . I Y="" S STOP=1 Q
"RTN","IBCEXTRP",46,0)
 . S IBSEG(Y)=""
"RTN","IBCEXTRP",47,0)
 . Q
"RTN","IBCEXTRP",48,0)
 I $D(DTOUT)!$D(DUOUT) G EXITQ
"RTN","IBCEXTRP",49,0)
 ;
"RTN","IBCEXTRP",50,0)
DEV ; - Select device
"RTN","IBCEXTRP",51,0)
 N %ZIS,ZTRTN,ZTSAVE,ZTDESC
"RTN","IBCEXTRP",52,0)
 W !
"RTN","IBCEXTRP",53,0)
 S %ZIS="QM" D ^%ZIS G:POP EXITQ
"RTN","IBCEXTRP",54,0)
 I $D(IO("Q")) D  G EXITQ
"RTN","IBCEXTRP",55,0)
 . S ZTRTN="LIST^IBCEXTRP",ZTDESC="Transmitted Bill Extract Data"
"RTN","IBCEXTRP",56,0)
 . S ZTSAVE("IB*")=""
"RTN","IBCEXTRP",57,0)
 . D ^%ZTLOAD
"RTN","IBCEXTRP",58,0)
 . W !!,$S($D(ZTSK):"Your task number "_ZTSK_" has been queued.",1:"Unable to queue this job.")
"RTN","IBCEXTRP",59,0)
 .K ZTSK,IO("Q") D HOME^%ZIS
"RTN","IBCEXTRP",60,0)
 U IO
"RTN","IBCEXTRP",61,0)
 ;
"RTN","IBCEXTRP",62,0)
LIST ; - set up array and print data
"RTN","IBCEXTRP",63,0)
 N IBPG,IBSEQ,IBPC,IBDA,IBREC,IBQUIT,IBILL,IBLINE,IBXDATA,IBERR,IBXERR,Z,Z0,Z1
"RTN","IBCEXTRP",64,0)
 D EXTRACT(IBIEN,IBVNUM,8,1)
"RTN","IBCEXTRP",65,0)
 S (IBPG,IBQUIT,IBSEQ,IBPC,IBDA,IBLINE)=0
"RTN","IBCEXTRP",66,0)
 K ^TMP($J,"IBLINES")
"RTN","IBCEXTRP",67,0)
 ;IB*2.0*211 - rely on form type instead of bill charge type
"RTN","IBCEXTRP",68,0)
 N IBFMTYP S IBFMTYP=$$FT^IBCEF(IBIEN)
"RTN","IBCEXTRP",69,0)
 ;JWS;IB*2.0*592 - Dental form 7 (J430D)
"RTN","IBCEXTRP",70,0)
 S IBFMTYP=$S(IBFMTYP=2:"CMS-1500",IBFMTYP=3:"UB-04",IBFMTYP=7:"J430D",1:"OTHER"_"("_IBFMTYP_")")
"RTN","IBCEXTRP",71,0)
 S IBILL=$S($$INPAT^IBCEF(IBIEN,1):"Inpt",1:"Oupt")_"/"_IBFMTYP
"RTN","IBCEXTRP",72,0)
 ;
"RTN","IBCEXTRP",73,0)
 I $D(^TMP("IBXERR",$J)) D  G EXITQ
"RTN","IBCEXTRP",74,0)
 . S IBERR=0 F  S IBERR=$O(^TMP("IBXERR",$J,IBERR)) Q:'IBERR  W !,$G(^TMP("IBXERR",$J,IBERR))
"RTN","IBCEXTRP",75,0)
 . Q
"RTN","IBCEXTRP",76,0)
 ;
"RTN","IBCEXTRP",77,0)
 F  S IBSEQ=$O(^IBA(364.6,"ASEQ",8,IBSEQ)) Q:'IBSEQ  I $$INCLUDE(IBSEQ) F  S IBPC=$O(^IBA(364.6,"ASEQ",8,IBSEQ,1,IBPC)) Q:'IBPC  F  S IBDA=$O(^IBA(364.6,"ASEQ",8,IBSEQ,1,IBPC,IBDA)) Q:'IBDA  D
"RTN","IBCEXTRP",78,0)
 . N IBOK,Z,IBMULT,DSP,IBDATA,PCD,SN
"RTN","IBCEXTRP",79,0)
 . S IBREC=$G(^IBA(364.6,IBDA,0))
"RTN","IBCEXTRP",80,0)
 . I $P(IBREC,U,11)=1 Q     ; calculate only field
"RTN","IBCEXTRP",81,0)
 . ;
"RTN","IBCEXTRP",82,0)
 . ; processing for piece 1 of this EDI segment to see if there is any
"RTN","IBCEXTRP",83,0)
 . ; other data that exists in this segment
"RTN","IBCEXTRP",84,0)
 . I IBPC=1 S IBOK=0 D
"RTN","IBCEXTRP",85,0)
 .. S Z=1 F  S Z=$O(^TMP("IBXDATA",$J,1,IBSEQ,1,Z)) Q:'Z  I $G(^(Z))'="" S IBOK=1 Q
"RTN","IBCEXTRP",86,0)
 .. I IBOK Q   ; data exists so include segment normally
"RTN","IBCEXTRP",87,0)
 .. S SN=$P($G(^TMP("IBXDATA",$J,1,IBSEQ,1,1)),U,1)   ; segment name
"RTN","IBCEXTRP",88,0)
 .. I SN="" S SN=$P($P(IBREC,U,10),"'",2)
"RTN","IBCEXTRP",89,0)
 .. S SN=SN_" (No Data - Record Not Sent)"
"RTN","IBCEXTRP",90,0)
 .. S $P(^TMP("IBXDATA",$J,1,IBSEQ,1,1),U,1)=SN
"RTN","IBCEXTRP",91,0)
 .. Q
"RTN","IBCEXTRP",92,0)
 . ;
"RTN","IBCEXTRP",93,0)
 . ; loop thru all multiple occurrences of this segment
"RTN","IBCEXTRP",94,0)
 . S IBMULT=0 F  S IBMULT=$O(^TMP("IBXDATA",$J,1,IBSEQ,IBMULT)) Q:'IBMULT   D
"RTN","IBCEXTRP",95,0)
 .. ;
"RTN","IBCEXTRP",96,0)
 .. ; field with no data; check user preference
"RTN","IBCEXTRP",97,0)
 .. I '$G(IBINC),$P($G(^TMP("IBXDATA",$J,1,IBSEQ,IBMULT,IBPC)),U,1)="" Q
"RTN","IBCEXTRP",98,0)
 .. ;
"RTN","IBCEXTRP",99,0)
 .. ; build display data
"RTN","IBCEXTRP",100,0)
 .. S PCD="["_IBPC_"] "      ; piece#
"RTN","IBCEXTRP",101,0)
 .. S DSP=$P(IBREC,U,10)     ; short description field
"RTN","IBCEXTRP",102,0)
 .. S IBDATA=$P($G(^TMP("IBXDATA",$J,1,IBSEQ,IBMULT,IBPC)),U,1)   ; data
"RTN","IBCEXTRP",103,0)
 .. S DSP=$J(PCD,5)_$$FO^IBCNEUT1(DSP,40)_": "_IBDATA
"RTN","IBCEXTRP",104,0)
 .. S ^TMP($J,"IBLINES",IBSEQ,IBMULT,IBPC)=DSP
"RTN","IBCEXTRP",105,0)
 .. Q
"RTN","IBCEXTRP",106,0)
 . Q
"RTN","IBCEXTRP",107,0)
 ;
"RTN","IBCEXTRP",108,0)
 S IBQUIT=0
"RTN","IBCEXTRP",109,0)
 W:$E(IOST,1,2)["C-" @IOF ; initial form feed for screen print
"RTN","IBCEXTRP",110,0)
 N IBFMTYP S IBFMTYP=$$FT^IBCEF(IBIEN)
"RTN","IBCEXTRP",111,0)
 ;JWS;IB*2.0*592 - Dental form 7 (J430D)
"RTN","IBCEXTRP",112,0)
 S IBFMTYP=$S(IBFMTYP=2:"CMS-1500",IBFMTYP=3:"UB-04",IBFMTYP=7:"J430D",1:"OTHER"_"("_IBFMTYP_")")
"RTN","IBCEXTRP",113,0)
 S IBILL=$S($$INPAT^IBCEF(IBIEN,1):"Inpt",1:"Oupt")_"/"_IBFMTYP
"RTN","IBCEXTRP",114,0)
 D HDR
"RTN","IBCEXTRP",115,0)
 S Z=0 F  S Z=$O(^TMP($J,"IBLINES",Z)) Q:'Z!IBQUIT  S Z0=0 F  S Z0=$O(^TMP($J,"IBLINES",Z,Z0)) Q:'Z0!IBQUIT  S Z1=0 F  S Z1=$O(^TMP($J,"IBLINES",Z,Z0,Z1)) Q:'Z1!IBQUIT  D  Q:IBQUIT
"RTN","IBCEXTRP",116,0)
 . I IBLINE>(IOSL-3) D HDR Q:IBQUIT
"RTN","IBCEXTRP",117,0)
 . ;JWS;IB*2.0*592;Wrap long Dental Proc Description
"RTN","IBCEXTRP",118,0)
 . I Z=60,Z1=19 D  Q:IBQUIT
"RTN","IBCEXTRP",119,0)
 . . N IBNOTE,X,IBDATA
"RTN","IBCEXTRP",120,0)
 . . S IBDATA=$G(^TMP($J,"IBLINES",Z,Z0,Z1)) I IBDATA="" Q
"RTN","IBCEXTRP",121,0)
 . . S IBDATA(1)=$P(IBDATA,": "),IBDATA(2)=$P(IBDATA,": ",2),IBDATA(1)=IBDATA(1)_": "
"RTN","IBCEXTRP",122,0)
 . . S IBNOTE=$$WRAP^IBCSC10H(IBDATA(2),32,32,.IBNOTE)
"RTN","IBCEXTRP",123,0)
 . . W !,IBDATA(1)
"RTN","IBCEXTRP",124,0)
 . . S X=0 F  S X=$O(IBNOTE(X)) Q:X=""  Q:IBQUIT  W:X'=1 ! W ?47,IBNOTE(X) S IBLINE=IBLINE+1 I IBLINE>(IOSL-3) D HDR Q:IBQUIT
"RTN","IBCEXTRP",125,0)
 . E  W !,^TMP($J,"IBLINES",Z,Z0,Z1)
"RTN","IBCEXTRP",126,0)
 . S IBLINE=IBLINE+1
"RTN","IBCEXTRP",127,0)
 . I IBLINE>(IOSL-3) D HDR Q:IBQUIT
"RTN","IBCEXTRP",128,0)
 . ;
"RTN","IBCEXTRP",129,0)
 . ; end of segment add an extra line feed
"RTN","IBCEXTRP",130,0)
 . I '$O(^TMP($J,"IBLINES",Z,Z0,Z1)) W ! S IBLINE=IBLINE+1
"RTN","IBCEXTRP",131,0)
 . Q
"RTN","IBCEXTRP",132,0)
 ;
"RTN","IBCEXTRP",133,0)
 K ^TMP($J,"IBLINES")
"RTN","IBCEXTRP",134,0)
 G EXITQ
"RTN","IBCEXTRP",135,0)
 ;
"RTN","IBCEXTRP",136,0)
 ;
"RTN","IBCEXTRP",137,0)
HDR ; - Report header
"RTN","IBCEXTRP",138,0)
 N DIR,Y
"RTN","IBCEXTRP",139,0)
 I IBPG D  Q:IBQUIT
"RTN","IBCEXTRP",140,0)
 . I $E(IOST,1,2)["C-" K DIR S DIR(0)="E" D ^DIR K DIR S IBQUIT=('Y) Q:IBQUIT
"RTN","IBCEXTRP",141,0)
 . W @IOF
"RTN","IBCEXTRP",142,0)
 ;
"RTN","IBCEXTRP",143,0)
 S IBPG=IBPG+1
"RTN","IBCEXTRP",144,0)
 W !,?25,"EDI Transmitted Bill Extract Data",!,"Bill #",?11,"Type",?27,"Patient Name",?52,"SSN",?57,$$FMTE^XLFDT(DT),?71,"Page: "_IBPG
"RTN","IBCEXTRP",145,0)
 W !,$TR($J("",IOM)," ","=")
"RTN","IBCEXTRP",146,0)
 W !,$P(IBREC1,U)_" "_"("_IBILL_")",?27,$P($G(^DPT(+$P(IBREC1,U,2),0)),U),?52,$P($G(^DPT($P(IBREC1,U,2),0)),U,9),!
"RTN","IBCEXTRP",147,0)
 S IBLINE=6
"RTN","IBCEXTRP",148,0)
 Q
"RTN","IBCEXTRP",149,0)
 ;
"RTN","IBCEXTRP",150,0)
EXITQ ; - clean up and exit
"RTN","IBCEXTRP",151,0)
 I $E(IOST,1,2)["C-",'$G(IBQUIT) K DIR S DIR(0)="E" W ! D ^DIR K DIR
"RTN","IBCEXTRP",152,0)
 K ^TMP("IBXERR",$J),^TMP("IBXDATA",$J),IBXERR
"RTN","IBCEXTRP",153,0)
 D CLEAN^DILF
"RTN","IBCEXTRP",154,0)
 Q
"RTN","IBCEXTRP",155,0)
 ;
"RTN","IBCEXTRP",156,0)
EXTRACT(IBIFN,IBBATCH,IBFORM,IBLOCAL) ; Extracts transmitted form data into global
"RTN","IBCEXTRP",157,0)
 ; ^TMP("IBXDATA",$J).  Errors are in ^TMP("IBXERR",$J,err_num)=text.
"RTN","IBCEXTRP",158,0)
 ; IBBATCH = Batch # of bill (if known), otherwise, set to 1.  This
"RTN","IBCEXTRP",159,0)
 ;          variable must be > 0 to prevent a new batch from being added
"RTN","IBCEXTRP",160,0)
 ; IBFORM = the ien of the form in file 353
"RTN","IBCEXTRP",161,0)
 ; IBLOCAL = 1 if OK to use local form, 0 if not
"RTN","IBCEXTRP",162,0)
 N IBVNUM,IBL,IBINC,IBSEG
"RTN","IBCEXTRP",163,0)
 D FORMPRE^IBCFP1
"RTN","IBCEXTRP",164,0)
 S IBVNUM=$G(IBBATCH)
"RTN","IBCEXTRP",165,0)
 S IBL=$S('$G(IBLOCAL):IBFORM,1:"") ; No local form ... set = main form
"RTN","IBCEXTRP",166,0)
 ; Get local form associated with parent, if any
"RTN","IBCEXTRP",167,0)
 I IBL="" S IBL=$S($P($G(^IBE(353,+IBFORM,2)),U,8):$P(^(2),U,8),1:IBFORM)
"RTN","IBCEXTRP",168,0)
 D SETUP^IBCE837(1)
"RTN","IBCEXTRP",169,0)
 D ROUT^IBCFP1(IBFORM,1,IBIFN,0,IBL)
"RTN","IBCEXTRP",170,0)
 Q
"RTN","IBCEXTRP",171,0)
 ;
"RTN","IBCEXTRP",172,0)
INCLUDE(IBSEQ) ; Function to determine if segment should be included or not
"RTN","IBCEXTRP",173,0)
 N OK,LZ,SEGNAME
"RTN","IBCEXTRP",174,0)
 S OK=1                   ; default is to include it
"RTN","IBCEXTRP",175,0)
 I '$D(IBSEG) G INCLX     ; if nothing in array, then include all
"RTN","IBCEXTRP",176,0)
 I '$D(^TMP("IBXDATA",$J,1,IBSEQ)) S OK=0 G INCLX        ; no data there
"RTN","IBCEXTRP",177,0)
 S LZ=+$O(^TMP("IBXDATA",$J,1,IBSEQ,""))   ; first line# found in data
"RTN","IBCEXTRP",178,0)
 S SEGNAME=$P($G(^TMP("IBXDATA",$J,1,IBSEQ,LZ,1)),U,1)   ; piece 1
"RTN","IBCEXTRP",179,0)
 S SEGNAME=$$TRIM^XLFSTR(SEGNAME)
"RTN","IBCEXTRP",180,0)
 I SEGNAME'="",'$D(IBSEG(SEGNAME)) S OK=0   ; don't include
"RTN","IBCEXTRP",181,0)
INCLX ;
"RTN","IBCEXTRP",182,0)
 Q OK
"RTN","IBCEXTRP",183,0)
 ;
"RTN","IBCF23")
0^66^B55703345^B49750471
"RTN","IBCF23",1,0)
IBCF23 ;ALB/ARH - HCFA 1500 19-90 DATA (block 24, procs and charges) ;12-JUN-93
"RTN","IBCF23",2,0)
 ;;2.0;INTEGRATED BILLING;**52,80,106,122,51,152,137,402,432,488,547,592**;21-MAR-94;Build 58
"RTN","IBCF23",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCF23",4,0)
 ;
"RTN","IBCF23",5,0)
 ;requires IBIFN,IB(0),IB("U"),IB("U1"), returns # of line items in IBFLD(24)
"RTN","IBCF23",6,0)
 ;rev code array: IBRC("proc^division^basc flag^bedsection^rev code^unit chrg^Rx seq #")=units
"RTN","IBCF23",7,0)
 ;proc array:    IBCP(initial print ord)=proc date^proc^division^basc flag^dx^pos^tos^modifier^unit chrg^purch chrg amt^anesthesia mins^emerg indicator
"RTN","IBCF23",8,0)
 ;                    IBCP(initial print order,seq #)=auxillary data
"RTN","IBCF23",9,0)
 ;proc array:    IBSS("proc^division^basc flag^dx^pos^tos^modifier^unit chrg^Rx seq #")=lowest inital print order
"RTN","IBCF23",10,0)
 ;print order array:  IBPO(final print ord,emerg indicator,initial print order)=""
"RTN","IBCF23",11,0)
 ;print array:        IBFLD(24,I)=begin dt^end dt^pos^tos^proc^dx^unit chrg^units^modifier pointer ien(s) separated by commas^purch chrg amt^anesthesia mins^emerg indicator
"RTN","IBCF23",12,0)
 ;                    IBFLD(24,I,"AUX")=[auxillary data]
"RTN","IBCF23",13,0)
 ;                                 = "AUX" node of proc entry
"RTN","IBCF23",14,0)
 ;                    IBFLD(24,I,"RX")= soft link to file 362.4 or null
"RTN","IBCF23",15,0)
 ;                         if service is Rx, but no soft link
"RTN","IBCF23",16,0)
 ;                                   
"RTN","IBCF23",17,0)
 ;charge item link:   IBLINK(CPT IFN in multiple,RCIFN) = proc^division^basc flag^bedsection^rev code^unit chrg^rx seq #
"RTN","IBCF23",18,0)
 ;
"RTN","IBCF23",19,0)
 ; dx's used in arrays are ref #s
"RTN","IBCF23",20,0)
 ; IB*547 added backwards compatibility so that MRAs and EOBs would still roll/split procedures the same way as when the claim
"RTN","IBCF23",21,0)
 ;        was created.  Any claim transmitted before IB*547 was installed will roll/split the original way and any new
"RTN","IBCF23",22,0)
 ;        claim or claim transmitted after IB*547 was transmitted will roll/split the new way.
"RTN","IBCF23",23,0)
 ;        When updating in the future care must be taken to disable/remove older code so that only new changes are
"RTN","IBCF23",24,0)
 ;        affected by the IBNWPTCH variable.
"RTN","IBCF23",25,0)
 ;
"RTN","IBCF23",26,0)
RVC ; charges array
"RTN","IBCF23",27,0)
 D RVCE(,IBIFN)
"RTN","IBCF23",28,0)
 Q
"RTN","IBCF23",29,0)
 ;
"RTN","IBCF23",30,0)
RVCE(IBXIEN,IBIFN) ;Entry for EDI formatter call (IBXIEN will be defined)
"RTN","IBCF23",31,0)
 ; IBIFN required
"RTN","IBCF23",32,0)
 N IBRC,IBCP,IBSS,IBSSO,IBSS1,IBPO,IBLINK,IBLINK1,IBLINKRX,IBK,IBAUXLN
"RTN","IBCF23",33,0)
 ;JWS;IB*2.0*592;US131
"RTN","IBCF23",34,0)
 N IBI,IBJ,IB11,IBLN,IBPDT,IBCHARG,IBMOD,IBPC,IBRX,IBRXF,IBPO2A,IBAUX,IBNWPTCH,IBDEN,IBDEN1,IBDEND
"RTN","IBCF23",35,0)
 ;
"RTN","IBCF23",36,0)
 ; IB*547/TAZ - Add IBNWPTCH variable.
"RTN","IBCF23",37,0)
 S IBRX=0,IBNWPTCH=$$IBNWPTCH^IBCF23A(IBIFN,"IB*2.0*547")
"RTN","IBCF23",38,0)
 S IBI=0 F  S IBI=$O(^DGCR(399,IBIFN,"RC",IBI)) Q:'IBI  S IBLN=^(IBI,0) D
"RTN","IBCF23",39,0)
 . S IBSS="",IBPC=0 F IBJ=6,7,0,5,1,2,14 S IBPC=IBPC+1 S:IBJ $P(IBSS,U,IBPC,IBPC+1)=($P(IBLN,U,IBJ)_U)
"RTN","IBCF23",40,0)
 . I $P(IBSS,U,2)="" S $P(IBSS,U,2)=$P(^DGCR(399,IBIFN,0),U,22)
"RTN","IBCF23",41,0)
 . I +IBSS S $P(IBSS,U)=$P(IBSS,U)_";ICPT("
"RTN","IBCF23",42,0)
 . S $P(IBSS,U,3)=$S($D(^DGCR(399,"ASC1",+$P(IBLN,U,6),IBIFN,IBI)):1,1:"")
"RTN","IBCF23",43,0)
 . I +$P(IBLN,U,10)=3 D  Q  ; Rx
"RTN","IBCF23",44,0)
 .. I '$P(IBLN,U,15) S IBRX=IBRX+1,$P(IBSS,U,8)=(100+IBRX)
"RTN","IBCF23",45,0)
 .. I $P(IBLN,U,15) S $P(IBSS,U,8)=$P(IBLN,U,15)
"RTN","IBCF23",46,0)
 .. S IBRC(IBSS,"RX")=$P(IBLN,U,11)_U_IBI_U_$P(IBLN,U,15)
"RTN","IBCF23",47,0)
 .. S IBRC(IBSS)=$G(IBRC(IBSS))+1
"RTN","IBCF23",48,0)
 . ;
"RTN","IBCF23",49,0)
 . S IBRC(IBSS)=$G(IBRC(IBSS))+$P(IBLN,U,3) ; total units for similar RC
"RTN","IBCF23",50,0)
 . I "4"[+$P(IBLN,U,10),$P(IBLN,U,11) D  ; Soft-link proc with the rev cd
"RTN","IBCF23",51,0)
 .. S IBLINK(+$P(IBLN,U,11),IBI)=IBSS
"RTN","IBCF23",52,0)
 .. S $P(IBLINK(+$P(IBLN,U,11),IBI),U,7)=$P(IBLN,U,14)
"RTN","IBCF23",53,0)
 . I $P(IBLN,U,10) D
"RTN","IBCF23",54,0)
 .. S IBLINK1(IBSS,IBI)=$P(IBLN,U,10)_U_+$P(IBLN,U,11)
"RTN","IBCF23",55,0)
 . S IBRC(IBSS,"LNK")=IBI
"RTN","IBCF23",56,0)
 ;
"RTN","IBCF23",57,0)
 S IBSSO="" F  S IBSSO=$O(IBRC(IBSSO)) Q:IBSSO=""  I $D(IBRC(IBSSO,"RX")) D
"RTN","IBCF23",58,0)
 . S IBSS=IBSSO,IBI=$P(IBRC(IBSSO,"RX"),U,2),IB11=$P(IBRC(IBSSO,"RX"),U,3)
"RTN","IBCF23",59,0)
 . S IBRC(IBSSO)=1,IBLINKRX($S($P(IBSSO,U)>0:$P(IBSSO,U),$P($G(^DGCR(399,IBIFN,"CP",+IB11,0)),U)'="":$P(^(0),U),1:0),+IB11,+IBRC(IBSSO,"RX"))=IBSSO K IBRC(IBSSO,"RX")
"RTN","IBCF23",60,0)
 ;
"RTN","IBCF23",61,0)
 D PRC^IBCF23A ; Extract procedures
"RTN","IBCF23",62,0)
PO ; print order array w/chrgs
"RTN","IBCF23",63,0)
 ; combine multiple entries of same proc onto one line item via print order
"RTN","IBCF23",64,0)
 ;if both have print orders defined then they should not be combined onto one line item
"RTN","IBCF23",65,0)
 ;"proc^division^basc^dx^pos^tos^modifier(s)^unit chrg^purchased chg" must all be the same as well as the emergency indicator and all 'aux flds'
"RTN","IBCF23",66,0)
 N IBP,Z,IBPO11
"RTN","IBCF23",67,0)
 ;IB*547/TAZ - set entire node into IBSS for post IB*547 claims
"RTN","IBCF23",68,0)
 ;S IBPO="" F  S IBPO=$O(IBCP(IBPO)) Q:'IBPO  S IBCP=IBCP(IBPO),IBSS=$P(IBCP,U,2,9),IBSS1="*"_$G(IBCP(IBPO,"AUX")),IBAUX=0 D
"RTN","IBCF23",69,0)
 S IBPO="" F  S IBPO=$O(IBCP(IBPO)) Q:'IBPO  S IBCP=IBCP(IBPO),IBSS=$P(IBCP,U,2,$S(IBNWPTCH:$L(IBCP,U),1:9)),IBSS1="*"_$G(IBCP(IBPO,"AUX")),IBAUX=0 D
"RTN","IBCF23",70,0)
 . I $D(IBSS(IBSS)),'$D(IBCP(IBPO,"RX")),IBPO>1000 D  Q  ; combine lines
"RTN","IBCF23",71,0)
 .. I 'IBAUX S IBAUX=$$AUXOK^IBCF23A(.IBSS,IBSS1)
"RTN","IBCF23",72,0)
 .. S IBPO1=$S(IBAUX:IBSS(IBSS,IBAUX),1:IBPO)
"RTN","IBCF23",73,0)
 .. I 'IBAUX S Z=+$O(IBSS(IBSS,"A"),-1)+1,IBSS(IBSS,Z)=IBPO
"RTN","IBCF23",74,0)
 .. I IBPO>1000!(IBPO1>1000) S IBPO(IBPO1,+$P(IBCP,U,12),IBPO)="" D
"RTN","IBCF23",75,0)
 ... I $O(IBCP(IBPO,"L",0)) S Z=$O(IBCP(IBPO,"L",0)),IBPO(IBPO1,+$P(IBCP,U,12),IBPO,"L",Z)=IBCP(IBPO,"L",Z) K IBCP(IBPO,"L",Z)
"RTN","IBCF23",76,0)
 . S IBAUX=+$O(IBSS(IBSS,"A"),-1)+1,IBSS(IBSS,"AUX-X",IBAUX)=IBSS1
"RTN","IBCF23",77,0)
 . S IBSS(IBSS,IBAUX)=+IBPO,IBPO(+IBPO,+$P(IBCP,U,12),IBPO)=""
"RTN","IBCF23",78,0)
 . S Z=0 F  S Z=$O(IBCP(IBPO,Z)) Q:'Z  S IBPO(+IBPO,+$P(IBCP,U,12),IBPO,Z)=""
"RTN","IBCF23",79,0)
 . I $O(IBCP(IBPO,"L",0)) S Z=$O(IBCP(IBPO,"L",0)),IBPO(+IBPO,+$P(IBCP,U,12),IBPO,"L",Z)=IBCP(IBPO,"L",Z) K IBCP(IBPO,"L",Z)
"RTN","IBCF23",80,0)
 . S IBSS(IBSS,IBAUX,"AUX")=IBSS1,IBPO(+IBPO,+$P(IBCP,U,12),IBPO,"AUX")=$E(IBSS1,2,$L(IBSS1))
"RTN","IBCF23",81,0)
 . I $D(IBCP(IBPO,"RX")) S IBPO(+IBPO,+$P(IBCP,U,12),IBPO,"RX")=IBCP(IBPO,"RX"),IBSS(IBSS,IBAUX,"RX")=IBCP(IBPO)
"RTN","IBCF23",82,0)
 . ;JWS;IB*2.0*592;US131
"RTN","IBCF23",83,0)
 . I $D(IBCP(IBPO,"DEND")) S IBPO(+IBPO,+$P(IBCP,U,12),IBPO,"DEND")=IBCP(IBPO,"DEND")
"RTN","IBCF23",84,0)
 . I $D(IBCP(IBPO,"DEN")) S IBPO(+IBPO,+$P(IBCP,U,12),IBPO,"DEN")=IBCP(IBPO,"DEN")
"RTN","IBCF23",85,0)
 . I $D(IBCP(IBPO,"DEN1")) M IBPO(+IBPO,+$P(IBCP,U,12),IBPO,"DEN1")=IBCP(IBPO,"DEN1")
"RTN","IBCF23",86,0)
 . ;end ;JWS;IB*2.0*592;US131;
"RTN","IBCF23",87,0)
 ; Find any remaining rev codes w/units that ref existing procedures
"RTN","IBCF23",88,0)
 S IBP(0)=0
"RTN","IBCF23",89,0)
 F IBP=3,2 Q:$G(IBP(0))  S IBRV="" F  S IBRV=$O(IBRC(IBRV)) Q:IBRV=""  I IBRV,IBRC(IBRV) D
"RTN","IBCF23",90,0)
 . S IBSS1=$O(IBSS($P(IBRV,U,1,IBP))) Q:$P(IBRV,U,1,IBP)'=$P(IBSS1,U,1,IBP)
"RTN","IBCF23",91,0)
 . S IBP(0)=1,Z=0
"RTN","IBCF23",92,0)
 . F  S Z=$O(IBSS(IBSS1,Z)) Q:'Z  I $G(IBSS(IBSS1,Z)) D  Q
"RTN","IBCF23",93,0)
 .. I $D(IBCP(IBSS(IBSS1,Z))),$P(IBCP(IBSS(IBSS1,Z)),U,9)=$P(IBSS1,U,8) D
"RTN","IBCF23",94,0)
 ... N Q,Q0
"RTN","IBCF23",95,0)
 ... ; S Q=$O(IBCP(""),-1)+1,Q0=$P(IBCP(IBSS(IBSS1,Z)),U,12) ; WCJ;IB*488
"RTN","IBCF23",96,0)
 ... S Q=IBSS(IBSS1,Z),Q0=$P(IBCP(IBSS(IBSS1,Z)),U,12) ; WCJ;IB*488
"RTN","IBCF23",97,0)
 ... ;M IBPO(Q,$P(IBCP(IBSS(IBSS1,Z)),U,12),Q)=IBPO(IBSS(IBSS1,Z),$P(IBCP(IBSS(IBSS1,Z)),U,12),IBSS(IBSS1,Z)),IBCP(Q)=IBCP(IBSS(IBSS1,Z))  ; WCJ;IB*488
"RTN","IBCF23",98,0)
 ... ;S $P(IBCP(Q),U,9)=$P(IBRV,U,6) ; WCJ;IB*488
"RTN","IBCF23",99,0)
 ... ;F Z0=1:1:(IBRC(IBRV)-1) S IBPO(Q,Q0,Q+(Z0*.01))=IBPO(Q,Q0,Q)  I Z0=99,(IBRC(IBRV)'=100) S IBPO(Q,Q0,Q_".991")=(IBRC(IBRV)-1)_"^99" Q  ; Only put first 99 in array
"RTN","IBCF23",100,0)
 ... F Z0=1:1:(IBRC(IBRV)) S IBPO(Q,Q0,Q+(Z0*.001))=IBPO(Q,Q0,Q)  ; changing to .001 allows us up to 999 and the units field only allows 800. ; WCJ;IB*488
"RTN","IBCF23",101,0)
 ... S IBRC(IBRV)=0
"RTN","IBCF23",102,0)
 ;
"RTN","IBCF23",103,0)
PRTARR ;print proc array
"RTN","IBCF23",104,0)
 S IBREV="",IBPO1="",IBI=0 F  S IBPO1=$O(IBPO(IBPO1)) Q:IBPO1=""  D
"RTN","IBCF23",105,0)
 . ;JWS;IB*2.0*592; NEED TO CLEAR IBDEN1 array
"RTN","IBCF23",106,0)
 . K IBRXF,IBDEN1
"RTN","IBCF23",107,0)
 . S IBEMG="" F  S IBEMG=$O(IBPO(IBPO1,IBEMG)) Q:IBEMG=""!("01"'[IBEMG)  S IBPO2="" D
"RTN","IBCF23",108,0)
 .. S IBDT1=99999999,IBDT2="",(IBMIN,IBUNIT)=0,(IBCHARG,IBAUX)=""
"RTN","IBCF23",109,0)
 .. F  S IBPO2=$O(IBPO(IBPO1,IBEMG,IBPO2)) Q:IBPO2=""  D
"RTN","IBCF23",110,0)
 ... I IBPO2#1=.991 D  Q:IBPO2#1=.991
"RTN","IBCF23",111,0)
 .... N Z
"RTN","IBCF23",112,0)
 .... S Z=$G(IBPO(IBPO1,IBEMG,IBPO2)) Q:'Z
"RTN","IBCF23",113,0)
 .... I ($P(Z,U,2)+1)>Z Q
"RTN","IBCF23",114,0)
 .... S $P(IBPO(IBPO1,IBEMG,IBPO2),U,2)=($P(Z,U,2)+1),IBPO2=(IBPO2\1)_".99"
"RTN","IBCF23",115,0)
 ... S Z=0 F  S Z=$O(IBPO(IBPO1,IBEMG,IBPO2,Z)) Q:'Z  S IBUNIT=IBUNIT+1
"RTN","IBCF23",116,0)
 ... I $D(IBCP(IBPO1)) S IBPO11=IBPO1
"RTN","IBCF23",117,0)
 ... S IBPO2A=$S($D(IBCP(IBPO2\1)):IBPO2\1,'$D(IBCP(IBPO2)):IBPO11,1:IBPO2)
"RTN","IBCF23",118,0)
 ... S IBCHARG=$P(IBCP(IBPO2A),U,9),IBPCHG=$P(IBCP(IBPO2A),U,10)
"RTN","IBCF23",119,0)
 ... ; I IBCHARG<10000,IBCHARG*(IBUNIT+1)'<10000 D  Q  ;$9,999 limit per line ;WCJ IB*488
"RTN","IBCF23",120,0)
 ... I IBCHARG<10000000,IBCHARG*(IBUNIT+1)'<10000000 D  Q  ; increased to $9,999,999 charge limit per line since that is printed form space limit ;WCJ IB*488
"RTN","IBCF23",121,0)
 .... N Z S Z=$O(IBPO(IBPO1\1+1),-1),Z=Z+$S(IBPO1+.001'=Z:.001,1:0) M IBPO(Z,IBEMG,IBPO2)=IBPO(IBPO1,IBEMG,IBPO2) K IBPO(IBPO1,IBEMG,IBPO2)
"RTN","IBCF23",122,0)
 ... S IBUNIT=IBUNIT+1,IBSS=IBCP(IBPO2A),IBMIN=IBMIN+$P(IBSS,U,11)
"RTN","IBCF23",123,0)
 ... S IBSS=$G(IBSS)_U_$G(IBCP(IBPO2A,"LNK"))
"RTN","IBCF23",124,0)
 ... S Z=$O(IBPO(IBPO1,IBEMG,IBPO2,"L",0)) I Z D
"RTN","IBCF23",125,0)
 .... S Z0=0
"RTN","IBCF23",126,0)
 .... F Z=Z:1 Q:'$O(IBPO(IBPO1,IBEMG,IBPO2,"L",0))!(Z0=IBUNIT)  I $D(IBPO(IBPO1,IBEMG,IBPO2,"L",Z))  S IBSS("L",Z)=IBPO(IBPO1,IBEMG,IBPO2,"L",Z),Z0=Z0+1 K IBPO(IBPO1,IBEMG,IBPO2,"L",Z)
"RTN","IBCF23",127,0)
 ... S:IBDT1>+IBSS IBDT1=+IBSS S:IBDT2<+IBSS IBDT2=+IBSS
"RTN","IBCF23",128,0)
 .. S IBAUX=$G(IBCP(IBPO1,"AUX")) S:$D(IBCP(IBPO1,"RX")) IBRXF=IBCP(IBPO1,"RX")
"RTN","IBCF23",129,0)
 .. ;JWS;IB*2.0*592;US131
"RTN","IBCF23",130,0)
 .. S IBDEN=$G(IBCP(IBPO1,"DEN"))
"RTN","IBCF23",131,0)
 .. S IBDEND=$G(IBCP(IBPO1,"DEND"))
"RTN","IBCF23",132,0)
 .. I $D(IBCP(IBPO1,"DEN1")) M IBDEN1=IBCP(IBPO1,"DEN1")
"RTN","IBCF23",133,0)
 .. ;end ;JWS;IB*2.0*592;US131
"RTN","IBCF23",134,0)
 .. I IBUNIT D B24^IBCF23A
"RTN","IBCF23",135,0)
 .. K IBRXF
"RTN","IBCF23",136,0)
 ;
"RTN","IBCF23",137,0)
 ;print any chrgs not associated with a proc (ie. not enough procs or proc not in "CP" level)
"RTN","IBCF23",138,0)
 S IBRV="" F  S IBRV=$O(IBRC(IBRV)) Q:IBRV=""  I +IBRC(IBRV) D  D B24^IBCF23A K IBRXF
"RTN","IBCF23",139,0)
 . S IBUNIT=+IBRC(IBRV),IBCHARG=$P(IBRV,U,6),IBDT1=+IB("U"),IBDT2=$P(IB("U"),U,2),IBREV=$P(IBRV,U,5),IBEMG=0,IBAUX=""
"RTN","IBCF23",140,0)
 . S IBSS="^"_$S(+IBRV:$P(IBRV,U),1:$P($G(^DGCR(399.1,+$P(IBRV,U,4),0)),U))
"RTN","IBCF23",141,0)
 . S IBSS=$G(IBSS)_U_$$RC2CP^IBCEF22(IBIFN,+$G(IBRC(IBRV,"LNK")))
"RTN","IBCF23",142,0)
 . S Z=$O(IBLINK1(IBRV,0)) I Z D
"RTN","IBCF23",143,0)
 .. S Z0=0
"RTN","IBCF23",144,0)
 .. F Z=Z:1 Q:'$O(IBLINK1(IBRV,0))!(Z0=IBUNIT)  I $D(IBLINK1(IBRV,Z)) S IBSS("L",Z)=IBLINK1(IBRV,Z),Z0=Z0+1 K IBLINK1(IBRV,Z)
"RTN","IBCF23",145,0)
 ;
"RTN","IBCF23",146,0)
OFFSET ;
"RTN","IBCF23",147,0)
 S IBFLD(24)=IBI ;line item count
"RTN","IBCF23",148,0)
 K IBRC,IBCP,IBSS,IBPO,IBPO1,IBPO2,IBLN,IBRV,IBRV1,IBPDT,IBDT1,IBDT2,IBCHARG,IBMIN,IBUNIT,IBREV,IBLINK,IBLINK1,IBEMG,IBPCHG,Z
"RTN","IBCF23",149,0)
 Q
"RTN","IBCF23",150,0)
 ;
"RTN","IBCF23",151,0)
DATE(X) ; Fm dt in X ==> YYYYMMDD
"RTN","IBCF23",152,0)
 Q $$DT^IBCEFG1(X,,"D8")
"RTN","IBCF23",153,0)
 ;
"RTN","IBCF23",154,0)
B24 ; Moved to IBCF23A for space
"RTN","IBCF23",155,0)
 D B24^IBCF23A
"RTN","IBCF23",156,0)
 Q
"RTN","IBCF23",157,0)
 ;
"RTN","IBCF23A")
0^67^B50374642^B39049121
"RTN","IBCF23A",1,0)
IBCF23A ;ALB/ARH - HCFA 1500 19-90 DATA - Split from IBCF23 ;12-JUN-93
"RTN","IBCF23A",2,0)
 ;;2.0;INTEGRATED BILLING;**51,432,516,547,577,592**;21-MAR-94;Build 58
"RTN","IBCF23A",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCF23A",4,0)
 ;
"RTN","IBCF23A",5,0)
 ; $$INSTALDT^XPDUTL(IBPATCH,.IBARY) - ICR 10141
"RTN","IBCF23A",6,0)
 ;
"RTN","IBCF23A",7,0)
B24 ; set individual entries in print array, external format
"RTN","IBCF23A",8,0)
 ; IBAUX = additional data for EDI output
"RTN","IBCF23A",9,0)
 ; IBRXF = array of RX procedures
"RTN","IBCF23A",10,0)
 ;JWS;IB*2.0*592;US131
"RTN","IBCF23A",11,0)
 ; IBDEN = Dental data for EDI output
"RTN","IBCF23A",12,0)
 ; IBDEN1 = array of Dental data for EDI output
"RTN","IBCF23A",13,0)
 N IBX,Z,IBD1,IBD2,IBCPLINK
"RTN","IBCF23A",14,0)
 S IBI=IBI+1,IBPROC=$P(IBSS,U,2),IBD1=$$DATE^IBCF23(IBDT1),IBD2=$S(IBDT1'=IBDT2:$$DATE^IBCF23(IBDT2),1:"")
"RTN","IBCF23A",15,0)
 I '$D(IBXIEN) S IBD1=$E(IBD1,5,8)_$E(IBD1,1,4),IBD2=$E(IBD2,5,8)_$E(IBD2,1,4)
"RTN","IBCF23A",16,0)
 S IBFLD(24,IBI)=IBD1_U_IBD2_U_$P($G(^IBE(353.1,+$P(IBSS,U,6),0)),U)_U_$P($G(^IBE(353.2,+$P(IBSS,U,7),0)),U)
"RTN","IBCF23A",17,0)
 I +IBPROC D
"RTN","IBCF23A",18,0)
 . S IBFLD(24,IBI)=IBFLD(24,IBI)_U_$P($$PRCD^IBCEF1(IBPROC,1),U,2) S:$P(IBPROC,";",2)'["ICPT" IBFLD(24,IBI_"X")=""
"RTN","IBCF23A",19,0)
 I 'IBPROC S IBFLD(24,IBI)=IBFLD(24,IBI)_U_$S('$D(IBXIEN):IBPROC,1:+IBREV),IBFLD(24,IBI_"A")=$P($G(^DGCR(399.2,+IBREV,0)),U,2)
"RTN","IBCF23A",20,0)
 I $D(IBRXF),IBCHARG="" S IBFLD(24,IBI_"A")=$P($G(^DGCR(399.2,+IBREV,0)),U,2)
"RTN","IBCF23A",21,0)
 S IBFLD(24,IBI)=IBFLD(24,IBI)_U_$P(IBSS,U,5)_U_IBCHARG_U_IBUNIT_U_$P(IBSS,U,8)_U_$G(IBPCHG)_U_$G(IBMIN)_U_$G(IBEMG)
"RTN","IBCF23A",22,0)
 I $D(IBSS("L")) S Z=0 F  S Z=$O(IBSS("L",Z)) Q:'Z  S IBFLD(24,IBI,$P(IBSS("L",Z),U),$P(IBSS("L",Z),U,2))=$G(IBFLD(24,IBI,$P(IBSS("L",Z),U),$P(IBSS("L",Z),U,2)))+1
"RTN","IBCF23A",23,0)
 S:$TR($G(IBAUX),U)'="" IBFLD(24,IBI,"AUX")=$G(IBAUX)
"RTN","IBCF23A",24,0)
 S:$D(IBRXF) IBFLD(24,IBI,"RX")=IBRXF
"RTN","IBCF23A",25,0)
 K IBPROC,IBSS("L")
"RTN","IBCF23A",26,0)
 S IBCPLINK=$P(IBSS,U,$L(IBSS,U))
"RTN","IBCF23A",27,0)
 S IBFLD(24,IBI)=IBFLD(24,IBI)_U_IBCPLINK
"RTN","IBCF23A",28,0)
 ; MRD;IB*2.0*516 - Added NDC and Units to line level of claim.
"RTN","IBCF23A",29,0)
 ;I IBCPLINK'="" S $P(IBFLD(24,IBI),U,14,15)=$TR($P($G(^DGCR(399,IBIFN,"CP",IBCPLINK,1)),U,7,8),"-")
"RTN","IBCF23A",30,0)
 ; vd/Beginning of IB*2*577 - Added Unit/Basis of Measurment to line level of claim.
"RTN","IBCF23A",31,0)
 I IBCPLINK'="" S $P(IBFLD(24,IBI),U,14,16)=$TR($P($G(^DGCR(399,IBIFN,"CP",IBCPLINK,1)),U,7,8),"-")_U_$P($G(^DGCR(399,IBIFN,"CP",IBCPLINK,2)),U)
"RTN","IBCF23A",32,0)
 ; vd/End of IB*2*577
"RTN","IBCF23A",33,0)
 ;JWS;IB*2.0*592;US131
"RTN","IBCF23A",34,0)
 I $G(IBDEN)'="" S IBFLD(24,IBI,"DEN")=$G(IBDEN)
"RTN","IBCF23A",35,0)
 I $D(IBDEN1) M IBFLD(24,IBI,"DEN1")=IBDEN1
"RTN","IBCF23A",36,0)
 I $D(IBDEND) S IBFLD(24,IBI,"DEND")=$G(IBDEND)
"RTN","IBCF23A",37,0)
 ;end ;JWS;IB*2.0*592;US131
"RTN","IBCF23A",38,0)
 Q
"RTN","IBCF23A",39,0)
 ;
"RTN","IBCF23A",40,0)
AUXOK(IBSS,IBSS1) ; Check all other flds are the same to combine procs
"RTN","IBCF23A",41,0)
 ; IBSS = subscript of IBCP to check for dups to combine - pass by ref
"RTN","IBCF23A",42,0)
 ; IBSS(IBSS,"AUX-X",n) = all the previously extracted line items for the
"RTN","IBCF23A",43,0)
 ;  same set of basic data, but having different "AUX" data
"RTN","IBCF23A",44,0)
 ; IBSS1 = the "AUX" data of the current IBCP entry
"RTN","IBCF23A",45,0)
 ;
"RTN","IBCF23A",46,0)
 ; Returns entry # in IBSS array if match found, or 0 if no match
"RTN","IBCF23A",47,0)
 ; Set the IBSS "AUX-X" node for no match
"RTN","IBCF23A",48,0)
 N Z,Z0,Z1,XIEN
"RTN","IBCF23A",49,0)
 S Z=0 F  S Z=$O(IBSS(IBSS,"AUX-X",Z)) Q:'Z  I IBSS1=IBSS(IBSS,"AUX-X",Z) Q
"RTN","IBCF23A",50,0)
 ;JWS;IB*2.0*592;Dental fields to check for roll-up
"RTN","IBCF23A",51,0)
 S XIEN=$G(IBSS(IBSS,1))
"RTN","IBCF23A",52,0)
 I $D(IBCP(IBPO,"DEN"))!($D(IBCP(IBPO,"DEN1")))!($D(IBCP(IBPO,"DEND")))!($D(IBCP(XIEN,"DEN")))!($D(IBCP(XIEN,"DEN1")))!($D(IBCP(XIEN,"DEND"))) D
"RTN","IBCF23A",53,0)
 . I $G(IBCP(IBPO,"DEN"))'=$G(IBCP(XIEN,"DEN")) S Z=0 Q
"RTN","IBCF23A",54,0)
 . I $G(IBCP(IBPO,"DEND"))'=$G(IBCP(XIEN,"DEND")) S Z=0 Q
"RTN","IBCF23A",55,0)
 . S Z1=0 F  S Z1=$O(IBCP(IBPO,"DEN1",Z1)) Q:'Z1  I $G(IBCP(IBPO,"DEN1",Z1,0))'=$G(IBCP(XIEN,"DEN1",Z1,0)) S Z=0 Q
"RTN","IBCF23A",56,0)
 I 'Z S Z0=+$O(IBSS(IBSS,"AUX-X",""),-1)+1,IBSS(IBSS,"AUX-X",Z0)=IBSS1
"RTN","IBCF23A",57,0)
 Q +Z
"RTN","IBCF23A",58,0)
 ;
"RTN","IBCF23A",59,0)
PRC ; Extract procedure data for HCFA 1500
"RTN","IBCF23A",60,0)
 ; IBRC(IBSS) = #rev codes with same billing criteria (IBSS)
"RTN","IBCF23A",61,0)
 ; IBLINK('CP' ien,'RC' ien) = IBSS including modifiers,rx seq in pc 7,8
"RTN","IBCF23A",62,0)
 ; IBLINK1(IBSS, 'RC' ien) =  auto (1)^ 'CP' ien (soft link)
"RTN","IBCF23A",63,0)
 ;
"RTN","IBCF23A",64,0)
 ; proc array w/chrg
"RTN","IBCF23A",65,0)
 ;JWS;IB*2.0*592;US131; added IBLN1, IBDENLN
"RTN","IBCF23A",66,0)
 ;IA# 3820
"RTN","IBCF23A",67,0)
 N IBPR,IBP,IBDENLN,IBLN1
"RTN","IBCF23A",68,0)
 S IBI=0 F  S IBI=$O(^DGCR(399,IBIFN,"CP",IBI)) Q:'IBI  K IBDENLN S IBLN=^(IBI,0),IBLN1=$G(^(1)),IBAUXLN=$G(^("AUX")),IBDENLN=$G(^("DEN")) D
"RTN","IBCF23A",69,0)
 . I $O(^DGCR(399,IBIFN,"CP",IBI,"DEN1",0)) M IBDENLN("DEN1")=^DGCR(399,IBIFN,"CP",IBI,"DEN1")
"RTN","IBCF23A",70,0)
 . ;end ;JWS;IB*2.0*592;US131
"RTN","IBCF23A",71,0)
 . N Z,Z0,Z1,Q1
"RTN","IBCF23A",72,0)
 . S IBPDT=$P(IBLN,U,2)
"RTN","IBCF23A",73,0)
 . S IBSS=$$IBSS(IBI,.IBDXI,IBLN)
"RTN","IBCF23A",74,0)
 . S IBPO=$S($P(IBLN,U,4):+$P(IBLN,U,4),1:IBI+1000) ;Set print order
"RTN","IBCF23A",75,0)
 . S IBCP(IBPO)=IBPDT_"^"_IBSS,IBCP(IBPO,"AUX")=IBAUXLN
"RTN","IBCF23A",76,0)
 . S IBCP(IBPO,"LNK")=IBI
"RTN","IBCF23A",77,0)
 . ;JWS;IB*2.0*592;US131
"RTN","IBCF23A",78,0)
 . I $G(IBLN1)'="" S IBCP(IBPO,"DEND")=IBLN1
"RTN","IBCF23A",79,0)
 . I $G(IBDENLN)'="" S IBCP(IBPO,"DEN")=IBDENLN
"RTN","IBCF23A",80,0)
 . I $O(IBDENLN("DEN1",0)) M IBCP(IBPO,"DEN1")=IBDENLN("DEN1")
"RTN","IBCF23A",81,0)
 . ;end ;JWS;IB*2.0*592;US131
"RTN","IBCF23A",82,0)
 . ; Rx
"RTN","IBCF23A",83,0)
 . N IBZ,IBITEM
"RTN","IBCF23A",84,0)
 . S IBZ=$S($P(IBSS,U):$P(IBSS,U),1:"")
"RTN","IBCF23A",85,0)
 . I IBZ'="",$D(IBLINKRX(IBZ,IBI)) D  Q:IBCHARG'=""
"RTN","IBCF23A",86,0)
 .. S IBPO1=IBPO
"RTN","IBCF23A",87,0)
 .. S IBITEM=+$O(IBLINKRX(IBZ,IBI,0)),IBRV=$G(IBLINKRX(IBZ,IBI,IBITEM))
"RTN","IBCF23A",88,0)
 .. Q:$S(IBRV="":1,1:'$G(IBRC(IBRV)))
"RTN","IBCF23A",89,0)
 .. S IBCHARG=$P(IBRV,U,6),IBRC(IBRV)=IBRC(IBRV)-1
"RTN","IBCF23A",90,0)
 .. S $P(IBCP(IBPO1),U,9)=IBCHARG,IBCP(IBPO1,"RX")=IBITEM K IBLINKRX(IBZ,IBI,IBITEM)
"RTN","IBCF23A",91,0)
 . ; find chrgs directly linked to proc
"RTN","IBCF23A",92,0)
 . S IBK=0 F  S IBK=$O(IBLINK(IBI,IBK)) Q:'IBK  S IBRV1=IBLINK(IBI,IBK),IBRV=$P(IBRV1,U,1,6) I +IBRC(IBRV1) D
"RTN","IBCF23A",93,0)
 .. S IBCHARG=$P(IBRV,U,6),IBRC(IBRV1)=IBRC(IBRV1)-1
"RTN","IBCF23A",94,0)
 .. I IBCHARG'="" S $P(IBSS,U,8)=IBCHARG,IBCP(IBPO)=IBPDT_"^"_IBSS,IBPO=IBPO+.1
"RTN","IBCF23A",95,0)
 ;
"RTN","IBCF23A",96,0)
 ; add chrgs associated with a proc (not a direct link)
"RTN","IBCF23A",97,0)
 ; find chrg associated with proc, if any (match proc,div,+/-basc)
"RTN","IBCF23A",98,0)
 K IBP(0)
"RTN","IBCF23A",99,0)
 F IBP=3,2 Q:$D(IBP(0))  S IBPO="" F  S IBPO=$O(IBCP(IBPO)) Q:'IBPO  I $P(IBCP(IBPO),U,9)="" D
"RTN","IBCF23A",100,0)
 . S IBSS=$P(IBCP(IBPO),U,2,9)
"RTN","IBCF23A",101,0)
 . S IBCHARG="",(IBRV,IBSS)=$P(IBSS,U,1,IBP) F  S IBRV=$O(IBRC(IBRV)) Q:$P(IBRV,U,1,IBP)'=IBSS  S IBP(0)=0 I +IBRC(IBRV) D  Q
"RTN","IBCF23A",102,0)
 .. S IBCHARG=$P(IBRV,U,6),IBRC(IBRV)=IBRC(IBRV)-1
"RTN","IBCF23A",103,0)
 .. I IBRC(IBRV) S Z=0 F  S Z=$O(IBCP(IBPO,Z)) Q:'Z  S IBRC(IBRV)=IBRC(IBRV)-1
"RTN","IBCF23A",104,0)
 . S $P(IBCP(IBPO),U,9)=IBCHARG
"RTN","IBCF23A",105,0)
 . I IBCHARG'="" S Z=$O(IBLINK1(IBRV,0)) I Z S IBCP(IBPO,"L",Z)=IBLINK1(IBRV,Z) K IBLINK1(IBRV,Z)
"RTN","IBCF23A",106,0)
 ;
"RTN","IBCF23A",107,0)
 ; add chrgs not associated with a proc to first proc with no chrg
"RTN","IBCF23A",108,0)
 ; Aggggh!!! TP
"RTN","IBCF23A",109,0)
 S IBPO="" F  S IBPO=$O(IBCP(IBPO)) Q:'IBPO  I $P(IBCP(IBPO),U,9)="" D
"RTN","IBCF23A",110,0)
 . S IBCHARG="",IBRV="^" F  S IBRV=$O(IBRC(IBRV)) Q:IBRV=""!+IBRV  I +IBRC(IBRV) D  Q
"RTN","IBCF23A",111,0)
 .. S IBCHARG=$P(IBRV,U,6),IBRC(IBRV)=IBRC(IBRV)-1
"RTN","IBCF23A",112,0)
 .. S Z=$O(IBLINK1(IBRV,0)) I Z S IBCP(IBPO,"L",Z)=IBLINK1(IBRV,Z) K IBLINK1(IBRV,Z)
"RTN","IBCF23A",113,0)
 . S $P(IBCP(IBPO),U,9)=IBCHARG
"RTN","IBCF23A",114,0)
 ;
"RTN","IBCF23A",115,0)
 Q
"RTN","IBCF23A",116,0)
IBSS(IBI,IBDXI,IBLN) ; Creates index sequence for procedure
"RTN","IBCF23A",117,0)
 N IBPC,IBJ,IBSS,IBLPI,IBX,IBLPAR
"RTN","IBCF23A",118,0)
 S (IBPC,IBLPI)=0
"RTN","IBCF23A",119,0)
 F IBJ=1,6,5,0,9,10 S IBPC=IBPC+1 S:IBJ $P(IBSS,U,IBPC,IBPC+1)=($P(IBLN,U,IBJ)_U)
"RTN","IBCF23A",120,0)
 S $P(IBSS,U,7)=($$GETMOD^IBEFUNC(IBIFN,IBI)_U) ;Modifiers
"RTN","IBCF23A",121,0)
 ;IB*547/TAZ - IBDXI not defined, use internal DX pointer
"RTN","IBCF23A",122,0)
 I '$G(IBNWPTCH) F IBJ=11:1:14 I $P(IBLN,U,IBJ) S $P(IBSS,U,4)=$P(IBSS,U,4)_$S(IBJ>11:",",1:"")_$G(IBDXI(+$P(IBLN,U,IBJ))) ; dx
"RTN","IBCF23A",123,0)
 I $G(IBNWPTCH) F IBJ=11:1:14 S IBX=$P(IBLN,U,IBJ) I IBX S $P(IBSS,U,4)=$P(IBSS,U,4)_$S(IBJ>11:",",1:"")_$G(IBDXI(IBX),IBX) ; dx
"RTN","IBCF23A",124,0)
 S $P(IBSS,U,10)=$P(IBLN,U,16),$P(IBSS,U,9)=$P(IBLN,U,19),$P(IBSS,U,11)=+$P(IBLN,U,17)
"RTN","IBCF23A",125,0)
 G:'$G(IBNWPTCH) IBSSX
"RTN","IBCF23A",126,0)
 ;IB*547/TAZ - Add additional fields for roll-up compare
"RTN","IBCF23A",127,0)
 S $P(IBSS,U,21)=$$GET1^DIQ(399.0304,IBI_","_IBIFN_",","ASSOCIATED CLINIC","I")
"RTN","IBCF23A",128,0)
 S $P(IBSS,U,22)=$$GET1^DIQ(399.0304,IBI_","_IBIFN_",","TYPE OF SERVICE","I")
"RTN","IBCF23A",129,0)
 S $P(IBSS,U,23)=$$GET1^DIQ(399.0304,IBI_","_IBIFN_",","ATTACHMENT CONTROL NUMBER","I")
"RTN","IBCF23A",130,0)
 S $P(IBSS,U,24)=$$GET1^DIQ(399.0304,IBI_","_IBIFN_",","NDC","I")
"RTN","IBCF23A",131,0)
 S $P(IBSS,U,25)=$$GET1^DIQ(399.0304,IBI_","_IBIFN_",","PROCEDURE DESCRIPTION","I")
"RTN","IBCF23A",132,0)
 S $P(IBSS,U,26)=$$GET1^DIQ(399.0304,IBI_","_IBIFN_",","ADDITIONAL OB MINUTES","I")
"RTN","IBCF23A",133,0)
 ;Add Provider info in pieces 41-49
"RTN","IBCF23A",134,0)
 M IBLPAR=^DGCR(399,IBIFN,"CP",IBI,"LNPRV")
"RTN","IBCF23A",135,0)
 F  S IBLPI=$O(IBLPAR(IBLPI)) Q:'IBLPI  S IBX=IBLPAR(IBLPI,0),$P(IBSS,U,40+IBX)=$TR(IBX,"^","~")
"RTN","IBCF23A",136,0)
 K IBLPAR
"RTN","IBCF23A",137,0)
IBSSX ;
"RTN","IBCF23A",138,0)
 Q IBSS
"RTN","IBCF23A",139,0)
 ;
"RTN","IBCF23A",140,0)
IBNWPTCH(IBIFN,IBPATCH) ;
"RTN","IBCF23A",141,0)
 ;Checks the date the primary claim was 1st transmitted and returns 1 if the transmitted date is after the patch
"RTN","IBCF23A",142,0)
 ;referenced in variable IBPATCH was released. This allows the MRA/EOBs returning to roll up procedures the same
"RTN","IBCF23A",143,0)
 ;way as they went out.  Otherwise the order changes and the MRA/EOB won't match up.
"RTN","IBCF23A",144,0)
 ;
"RTN","IBCF23A",145,0)
 N IBARY,IBIDT,IBPFN,IBEFN,IBBN,IBX,IBBDT
"RTN","IBCF23A",146,0)
 S IBX=0
"RTN","IBCF23A",147,0)
 I $$INSTALDT^XPDUTL(IBPATCH,.IBARY) D   ;ICR 10141
"RTN","IBCF23A",148,0)
 . S IBX=1
"RTN","IBCF23A",149,0)
 . S IBIDT=$O(IBARY(""))
"RTN","IBCF23A",150,0)
 . ; Get Primary Bill Number. This will insure COB data is consistent across all bills.
"RTN","IBCF23A",151,0)
 . S IBPFN=$$GET1^DIQ(399,IBIFN_",","PRIMARY BILL #","I") I 'IBPFN S IBPFN=IBIFN
"RTN","IBCF23A",152,0)
 . ; Find 1st Accepted Entry (A1, A2, or Z) of Primary Bill in EDI TRANSMIT BILL FILE (364) to determine Batch Number
"RTN","IBCF23A",153,0)
 . S (IBEFN,IBBN)=0 F  S IBEFN=$O(^IBA(364,"B",IBPFN,IBEFN)) Q:'IBEFN  D  I IBBN Q
"RTN","IBCF23A",154,0)
 .. I ",A1,A2,Z,"'[(","_$$GET1^DIQ(364,IBEFN_",","TRANSMISSION STATUS","I")_",") Q
"RTN","IBCF23A",155,0)
 .. S IBBN=$$GET1^DIQ(364,IBEFN_",","BATCH NUMBER","I")
"RTN","IBCF23A",156,0)
 . ;Retrieve the date the batch was 1st sent.  If IBBN="" IBBDT will be null
"RTN","IBCF23A",157,0)
 . S IBBDT=$$GET1^DIQ(364.1,$$GET1^DIQ(364,IBBN_",","BATCH NUMBER","I")_",","DATE FIRST SENT","I")
"RTN","IBCF23A",158,0)
 . I IBBDT,(IBBDT<IBIDT) S IBX=0
"RTN","IBCF23A",159,0)
 Q IBX
"RTN","IBCNADD")
0^100^B7526956^B6555779
"RTN","IBCNADD",1,0)
IBCNADD ;ALB/AAS - ADDRESS RETRIEVAL ENGINE FOR FILE 399 ; 29-AUG-93
"RTN","IBCNADD",2,0)
 ;;2.0;INTEGRATED BILLING;**52,80,377,592**;21-MAR-94;Build 58
"RTN","IBCNADD",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNADD",4,0)
 ;
"RTN","IBCNADD",5,0)
ADD(DA,IBCOB) ; -- Retrieve correct billing address for a bill, mailing address of Bill Payer
"RTN","IBCNADD",6,0)
 ;    assumes that new policy field points to valid ins. policy
"RTN","IBCNADD",7,0)
 ;    DA = ien to file 399
"RTN","IBCNADD",8,0)
 ;    IBCOB = payer sequence PST or 123 (optional)
"RTN","IBCNADD",9,0)
 ;
"RTN","IBCNADD",10,0)
 N X,Y,I,J,IB01,IB02,IBTYP,DFN,IBCNS,IBCDFN,IBCNT,IBAGAIN,IBFND,IBBILLTY,IBCHRGTY
"RTN","IBCNADD",11,0)
 S IB02=""
"RTN","IBCNADD",12,0)
 S DFN=$P($G(^DGCR(399,DA,0)),"^",2)
"RTN","IBCNADD",13,0)
 S IBBILLTY=$P($G(^DGCR(399,DA,0)),"^",5),IBCHRGTY=$P($$CHGTYPE^IBCU(DA),"^;",1)
"RTN","IBCNADD",14,0)
 ;
"RTN","IBCNADD",15,0)
 S IBCNS=+$P($G(^DGCR(399,DA,"MP")),U,1)
"RTN","IBCNADD",16,0)
 S IBCDFN=$P($G(^DGCR(399,DA,"MP")),U,2)
"RTN","IBCNADD",17,0)
 ;
"RTN","IBCNADD",18,0)
 ; If a specific payer sequence was passed in, get the ins. company and the policy ptr
"RTN","IBCNADD",19,0)
 ; No address returned for Medicare
"RTN","IBCNADD",20,0)
 I $G(IBCOB)'="" D  I $$MCRWNR^IBEFUNC(IBCNS) G MAINQ
"RTN","IBCNADD",21,0)
 . S IBCOB=$TR(IBCOB,"PST","123")
"RTN","IBCNADD",22,0)
 . S IBCNS=+$P($G(^DGCR(399,DA,"I"_IBCOB)),U,1)
"RTN","IBCNADD",23,0)
 . S IBCDFN=+$P($G(^DGCR(399,DA,"M")),U,IBCOB+11)
"RTN","IBCNADD",24,0)
 . Q
"RTN","IBCNADD",25,0)
 ;
"RTN","IBCNADD",26,0)
 I 'IBCNS G MAINQ
"RTN","IBCNADD",27,0)
 I IBCDFN S IBCNS=+$G(^DPT(+DFN,.312,+IBCDFN,0))
"RTN","IBCNADD",28,0)
 I '$D(^DIC(36,+IBCNS,0)) G MAINQ
"RTN","IBCNADD",29,0)
 ;
"RTN","IBCNADD",30,0)
 ; -- if send bill to employer and state is filled in use this
"RTN","IBCNADD",31,0)
 I +$G(^DPT(DFN,.312,+IBCDFN,2)),+$P(^(2),"^",6) S IB02=$P(^(2),"^",2,99) G MAINQ
"RTN","IBCNADD",32,0)
 ;
"RTN","IBCNADD",33,0)
MAIN ; -- determine address for company for type bill
"RTN","IBCNADD",34,0)
 ;
"RTN","IBCNADD",35,0)
 ; -- get main address
"RTN","IBCNADD",36,0)
 S IB02=$S($D(^DIC(36,+IBCNS,.11)):^(.11),1:"")
"RTN","IBCNADD",37,0)
 S IBCNT=$G(IBCNT)+1
"RTN","IBCNADD",38,0)
 ;
"RTN","IBCNADD",39,0)
 ; -- if process the same co. more than once you are in an infinite loop
"RTN","IBCNADD",40,0)
 I $D(IBCNT(IBCNS)) G MAINQ ;already processed this company  use main add
"RTN","IBCNADD",41,0)
 S IBCNT(IBCNS)=""
"RTN","IBCNADD",42,0)
 ;
"RTN","IBCNADD",43,0)
 ; -- type of charges:   Rx charges - if ins company has an rx address use it, otherwise use opt address
"RTN","IBCNADD",44,0)
 I IBCHRGTY=3 S IBTYP="R" D @IBTYP G:$D(IBFND) MAINQ I $D(IBAGAIN) K IBAGAIN G MAIN
"RTN","IBCNADD",45,0)
 ;
"RTN","IBCNADD",46,0)
 ; -- type of bill:   inpatient<3, outpatient>2
"RTN","IBCNADD",47,0)
 S IBTYP=$S(IBBILLTY<3:"I",1:"O")
"RTN","IBCNADD",48,0)
 D @IBTYP I $D(IBAGAIN) K IBAGAIN G MAIN
"RTN","IBCNADD",49,0)
 ;
"RTN","IBCNADD",50,0)
 ; -- return address
"RTN","IBCNADD",51,0)
MAINQ Q IB02
"RTN","IBCNADD",52,0)
 ;
"RTN","IBCNADD",53,0)
I ; -- see if there is an inpatient address
"RTN","IBCNADD",54,0)
 ; -- use if state is there
"RTN","IBCNADD",55,0)
 I $P($G(^DIC(36,+IBCNS,.12)),"^",5) S IB02=$P($G(^(.12)),"^",1,6)
"RTN","IBCNADD",56,0)
 ;
"RTN","IBCNADD",57,0)
 ; -- if other company processes claims start again
"RTN","IBCNADD",58,0)
 I $P($G(^DIC(36,+IBCNS,.12)),"^",7) S IBCNS=$P($G(^DIC(36,+IBCNS,.12)),"^",7) S IBAGAIN=1
"RTN","IBCNADD",59,0)
 Q
"RTN","IBCNADD",60,0)
 ;
"RTN","IBCNADD",61,0)
O ; -- see if there is an outpatient address
"RTN","IBCNADD",62,0)
 ; -- use if state is there
"RTN","IBCNADD",63,0)
 ;JWS;IB*2.0*592;Dental Insurance mailing address
"RTN","IBCNADD",64,0)
 ;IA# 5292
"RTN","IBCNADD",65,0)
 I $$FT^IBCEF(DA)=7 D  Q
"RTN","IBCNADD",66,0)
 . I $P($G(^DIC(36,+IBCNS,.19)),"^",5) S IB02=$P(^(.19),"^",1,6)
"RTN","IBCNADD",67,0)
 . I $P($G(^DIC(36,+IBCNS,.19)),"^",7) S IBCNS=$P(^(.19),"^",7) S IBAGAIN=1
"RTN","IBCNADD",68,0)
 ;
"RTN","IBCNADD",69,0)
 I $P($G(^DIC(36,+IBCNS,.16)),"^",5) S IB02=$P($G(^(.16)),"^",1,6)
"RTN","IBCNADD",70,0)
 ;
"RTN","IBCNADD",71,0)
 ; -- if other company processes claims start again
"RTN","IBCNADD",72,0)
 I $P($G(^DIC(36,+IBCNS,.16)),"^",7) S IBCNS=$P($G(^DIC(36,+IBCNS,.16)),"^",7) S IBAGAIN=1
"RTN","IBCNADD",73,0)
 Q
"RTN","IBCNADD",74,0)
 ;
"RTN","IBCNADD",75,0)
R ; -- see if there is an Rx address
"RTN","IBCNADD",76,0)
 ; -- use if state is there
"RTN","IBCNADD",77,0)
 I $P($G(^DIC(36,+IBCNS,.18)),"^",5) S IB02=$P($G(^(.18)),"^",1,6) S IBFND=1
"RTN","IBCNADD",78,0)
 ;
"RTN","IBCNADD",79,0)
 ; -- if other company processes claims start again
"RTN","IBCNADD",80,0)
 I $P($G(^DIC(36,+IBCNS,.18)),"^",7) S IBCNS=$P($G(^DIC(36,+IBCNS,.18)),"^",7) S IBAGAIN=1 K IBFND
"RTN","IBCNADD",81,0)
 Q
"RTN","IBCNSC")
0^116^B48955392^B36416057
"RTN","IBCNSC",1,0)
IBCNSC ;ALB/NLR - INSURANCE COMPANY EDIT ;6/1/05 9:42am
"RTN","IBCNSC",2,0)
 ;;2.0;INTEGRATED BILLING;**46,137,184,276,320,371,400,488,547,592**;21-MAR-94;Build 58
"RTN","IBCNSC",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSC",4,0)
 ;
"RTN","IBCNSC",5,0)
 ;also used for IA #4694
"RTN","IBCNSC",6,0)
 ;
"RTN","IBCNSC",7,0)
EN ; -- main entry point for IBCNS INSURANCE COMPANY, IBCNS VIEW INS CO
"RTN","IBCNSC",8,0)
 NEW IB1ST
"RTN","IBCNSC",9,0)
 K IBFASTXT,VALMQUIT,VALMEVL,XQORS,^TMP("XQORS",$J),IBCNS
"RTN","IBCNSC",10,0)
 S IBCHANGE="OKAY"
"RTN","IBCNSC",11,0)
 I '$G(IBVIEW) D EN^VALM("IBCNS INSURANCE COMPANY") G ENQ
"RTN","IBCNSC",12,0)
 D EN^VALM("IBCNS VIEW INS CO")
"RTN","IBCNSC",13,0)
ENQ Q
"RTN","IBCNSC",14,0)
 ;
"RTN","IBCNSC",15,0)
HDR ; -- header code
"RTN","IBCNSC",16,0)
 S VALMHDR(1)="Insurance Company Information for: "_$E($P(^DIC(36,IBCNS,0),"^"),1,30)
"RTN","IBCNSC",17,0)
 S VALMHDR(2)="Type of Company: "_$E($P($G(^IBE(355.2,+$P($G(^DIC(36,+IBCNS,0)),"^",13),0)),"^"),1,20)_"                     Currently "_$S(+($P($G(^DIC(36,+IBCNS,0)),"^",5)):"Inactive",1:"Active")
"RTN","IBCNSC",18,0)
 Q
"RTN","IBCNSC",19,0)
 ;
"RTN","IBCNSC",20,0)
INIT ; -- init variables and list array
"RTN","IBCNSC",21,0)
 K VALMQUIT
"RTN","IBCNSC",22,0)
 S VALMCNT=0,VALMBG=1
"RTN","IBCNSC",23,0)
 I '$D(IBCNS) D INSCO Q:$D(VALMQUIT)
"RTN","IBCNSC",24,0)
 D BLD,HDR
"RTN","IBCNSC",25,0)
 Q
"RTN","IBCNSC",26,0)
BLD ; -- list builder
"RTN","IBCNSC",27,0)
 ;WCJ;IB*2.0*547
"RTN","IBCNSC",28,0)
 ;NEW BLNKI
"RTN","IBCNSC",29,0)
 NEW BLNKI,IBACMAX ; new variable set in PARAM section and needed throughout for display
"RTN","IBCNSC",30,0)
 ;
"RTN","IBCNSC",31,0)
 K ^TMP("IBCNSC",$J)
"RTN","IBCNSC",32,0)
 D KILL^VALM10()    ; delete all video attributes
"RTN","IBCNSC",33,0)
 F BLNKI=1:1:62 D BLANK(.BLNKI)     ; 62 blank lines to start with
"RTN","IBCNSC",34,0)
 D PARAM^IBCNSC01      ; billing parameters
"RTN","IBCNSC",35,0)
 D MAIN^IBCNSC01       ; main mailing address
"RTN","IBCNSC",36,0)
 D CLAIMS1^IBCNSC0     ; inpatient claims office
"RTN","IBCNSC",37,0)
 D CLAIMS2^IBCNSC0     ; outpatient claims office
"RTN","IBCNSC",38,0)
 D PRESCR^IBCNSC1      ; prescription claims office
"RTN","IBCNSC",39,0)
 D APPEALS             ; appeals office
"RTN","IBCNSC",40,0)
 D INQUIRY             ; inquiry office
"RTN","IBCNSC",41,0)
 D DENTAL              ; Dental Claims Office        KDM US2487 IB*2.0*592
"RTN","IBCNSC",42,0)
 D DISP^IBCNSC02       ; parent/child associations (ESG 11/3/05)
"RTN","IBCNSC",43,0)
 D PROVID^IBCNSC1      ; provider IDs
"RTN","IBCNSC",44,0)
 D PAYER^IBCNSC01      ; payer/payer apps (ESG 7/29/02 IIV project)
"RTN","IBCNSC",45,0)
 D REMARKS^IBCNSC01    ; remarks
"RTN","IBCNSC",46,0)
 D SYN^IBCNSC01        ; synonyms
"RTN","IBCNSC",47,0)
 S VALMCNT=+$O(^TMP("IBCNSC",$J,""),-1)
"RTN","IBCNSC",48,0)
 Q
"RTN","IBCNSC",49,0)
 ;
"RTN","IBCNSC",50,0)
APPEALS ;
"RTN","IBCNSC",51,0)
 N OFFSET,START,IBCNS14,IBADD
"RTN","IBCNSC",52,0)
 ;
"RTN","IBCNSC",53,0)
 ;WCJ;IB*2.0*547;Call new API
"RTN","IBCNSC",54,0)
 ;S IBCNS14=$$ADDRESS^IBCNSC0(IBCNS,.14,7)
"RTN","IBCNSC",55,0)
 ;
"RTN","IBCNSC",56,0)
 ;WCJ;IB*2.0*547
"RTN","IBCNSC",57,0)
 ;S START=48,OFFSET=2
"RTN","IBCNSC",58,0)
 S START=49+(2*$G(IBACMAX)),OFFSET=2
"RTN","IBCNSC",59,0)
APPEALAD ; KDM US2487 IB*2.0*592  call in tag from IBCNSI 
"RTN","IBCNSC",60,0)
 S IBCNS14=$$ADD2^IBCNSC0(IBCNS,.14,7)  ;KDM moved to be able to call into from IBCNSI
"RTN","IBCNSC",61,0)
 D SET^IBCNSP(START,OFFSET+25," Appeals Office Information ",IORVON,IORVOFF)
"RTN","IBCNSC",62,0)
 ;IA# 5292
"RTN","IBCNSC",63,0)
 D SET^IBCNSP(START+1,OFFSET," Company Name: "_$P($G(^DIC(36,+$P(IBCNS14,"^",7),0)),"^",1))
"RTN","IBCNSC",64,0)
 D SET^IBCNSP(START+2,OFFSET,"       Street: "_$P(IBCNS14,"^",1))
"RTN","IBCNSC",65,0)
 D SET^IBCNSP(START+3,OFFSET,"     Street 2: "_$P(IBCNS14,"^",2))
"RTN","IBCNSC",66,0)
 N OFFSET S OFFSET=45
"RTN","IBCNSC",67,0)
 D SET^IBCNSP(START+1,OFFSET,"     Street 3: "_$P(IBCNS14,"^",3)) S IBADD=1
"RTN","IBCNSC",68,0)
 ;IA# 650
"RTN","IBCNSC",69,0)
 D SET^IBCNSP(START+1+IBADD,OFFSET,"   City/State: "_$E($P(IBCNS14,"^",4),1,15)_$S($P(IBCNS14,"^",4)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCNS14,"^",5),0)),"^",2)_" "_$E($P(IBCNS14,"^",6),1,5))
"RTN","IBCNSC",70,0)
 D SET^IBCNSP(START+2+IBADD,OFFSET,"        Phone: "_$P(IBCNS14,"^",8))
"RTN","IBCNSC",71,0)
 D SET^IBCNSP(START+3+IBADD,OFFSET,"          Fax: "_$P(IBCNS14,"^",9))
"RTN","IBCNSC",72,0)
 Q
"RTN","IBCNSC",73,0)
 ;
"RTN","IBCNSC",74,0)
INQUIRY ;
"RTN","IBCNSC",75,0)
 ;
"RTN","IBCNSC",76,0)
 N OFFSET,START,IBCNS15,IBADD
"RTN","IBCNSC",77,0)
 ;
"RTN","IBCNSC",78,0)
 ;WCJ;IB*2.0*547;Call new API
"RTN","IBCNSC",79,0)
 ;S IBCNS15=$$ADDRESS^IBCNSC0(IBCNS,.15,8)
"RTN","IBCNSC",80,0)
 ;
"RTN","IBCNSC",81,0)
 ;WCJ;IB*2.0*547
"RTN","IBCNSC",82,0)
 ;S START=55,OFFSET=2
"RTN","IBCNSC",83,0)
 S START=56+(2*$G(IBACMAX)),OFFSET=2
"RTN","IBCNSC",84,0)
INQAD ; KDM US2487 IB*2.0*592  call in tag from IBCNSI 
"RTN","IBCNSC",85,0)
 S IBCNS15=$$ADD2^IBCNSC0(IBCNS,.15,8)  ;KDM moved to be able to call into from IBCNSI
"RTN","IBCNSC",86,0)
 D SET^IBCNSP(START,OFFSET+25," Inquiry Office Information ",IORVON,IORVOFF)
"RTN","IBCNSC",87,0)
 ;IA# 5292
"RTN","IBCNSC",88,0)
 D SET^IBCNSP(START+1,OFFSET," Company Name: "_$P($G(^DIC(36,+$P(IBCNS15,"^",7),0)),"^",1))
"RTN","IBCNSC",89,0)
 D SET^IBCNSP(START+2,OFFSET,"       Street: "_$P(IBCNS15,"^"))
"RTN","IBCNSC",90,0)
 D SET^IBCNSP(START+3,OFFSET,"     Street 2: "_$P(IBCNS15,"^",2))
"RTN","IBCNSC",91,0)
 N OFFSET S OFFSET=45
"RTN","IBCNSC",92,0)
 D SET^IBCNSP(START+1,OFFSET,"     Street 3: "_$P(IBCNS15,"^",3)) S IBADD=1
"RTN","IBCNSC",93,0)
 ;IA# 650
"RTN","IBCNSC",94,0)
 D SET^IBCNSP(START+1+IBADD,OFFSET,"   City/State: "_$E($P(IBCNS15,"^",4),1,15)_$S($P(IBCNS15,"^",4)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCNS15,"^",5),0)),"^",2)_" "_$E($P(IBCNS15,"^",6),1,5))
"RTN","IBCNSC",95,0)
 D SET^IBCNSP(START+2+IBADD,OFFSET,"        Phone: "_$P(IBCNS15,"^",8))
"RTN","IBCNSC",96,0)
 D SET^IBCNSP(START+3+IBADD,OFFSET,"          Fax: "_$P(IBCNS15,"^",9))
"RTN","IBCNSC",97,0)
 Q
"RTN","IBCNSC",98,0)
 ; 
"RTN","IBCNSC",99,0)
DENTAL ; Display Dental Claims office information
"RTN","IBCNSC",100,0)
 ;KDM US2487 IB*2.0*592
"RTN","IBCNSC",101,0)
 ;
"RTN","IBCNSC",102,0)
 N OFFSET,START,IBCNS19,IBADD
"RTN","IBCNSC",103,0)
 S START=63+(2*$G(IBACMAX)),OFFSET=2
"RTN","IBCNSC",104,0)
DENTALAD ; KDM US2487 IB*2.0*592  call in tag from IBCNSI 
"RTN","IBCNSC",105,0)
 D SET^IBCNSP(START,OFFSET+20," Dental Claims Office Information ",IORVON,IORVOFF)
"RTN","IBCNSC",106,0)
 ;
"RTN","IBCNSC",107,0)
 S IBCNS19=$$ADD2^IBCNSC0(IBCNS,.19,6)
"RTN","IBCNSC",108,0)
 ;IA# 5292
"RTN","IBCNSC",109,0)
 D SET^IBCNSP(START+1,OFFSET," Company Name: "_$P($G(^DIC(36,+$P(IBCNS19,"^",7),0)),"^",1))
"RTN","IBCNSC",110,0)
 D SET^IBCNSP(START+2,OFFSET,"       Street: "_$P(IBCNS19,"^",1))
"RTN","IBCNSC",111,0)
 D SET^IBCNSP(START+3,OFFSET,"     Street 2: "_$P(IBCNS19,"^",2))
"RTN","IBCNSC",112,0)
 S OFFSET=45,IBADD=1
"RTN","IBCNSC",113,0)
 ;IA# 650
"RTN","IBCNSC",114,0)
 D SET^IBCNSP(START+1+IBADD,OFFSET,"   City/State: "_$E($P(IBCNS19,"^",4),1,15)_$S($P(IBCNS19,"^",4)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCNS19,"^",5),0)),"^",2)_" "_$E($P(IBCNS19,"^",6),1,5))
"RTN","IBCNSC",115,0)
 D SET^IBCNSP(START+2+IBADD,OFFSET,"        Phone: "_$P(IBCNS19,"^",8))
"RTN","IBCNSC",116,0)
 D SET^IBCNSP(START+3+IBADD,OFFSET,"          Fax: "_$P(IBCNS19,"^",9))
"RTN","IBCNSC",117,0)
 Q
"RTN","IBCNSC",118,0)
 ;
"RTN","IBCNSC",119,0)
HELP ; -- help code
"RTN","IBCNSC",120,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBCNSC",121,0)
 Q
"RTN","IBCNSC",122,0)
 ;
"RTN","IBCNSC",123,0)
EXIT ; -- exit code
"RTN","IBCNSC",124,0)
 K VALMQUIT,IBCNS,IBCHANGE,IBFASTXT
"RTN","IBCNSC",125,0)
 D CLEAN^VALM10
"RTN","IBCNSC",126,0)
 Q
"RTN","IBCNSC",127,0)
 ;
"RTN","IBCNSC",128,0)
INSCO ; -- select insurance company
"RTN","IBCNSC",129,0)
 ;JWS;IB*2.0*592;new of DR
"RTN","IBCNSC",130,0)
 NEW DLAYGO,DIC,DR,X,Y,DTOUT,DUOUT,IBCNS3
"RTN","IBCNSC",131,0)
 I '$D(IBCNS) D  G:$D(VALMQUIT) INSCOQ
"RTN","IBCNSC",132,0)
 .S DIC="^DIC(36,",DIC(0)="AEQMZ",DIC("S")="I '$G(^(5))"
"RTN","IBCNSC",133,0)
 .I '$G(IBVIEW) S DLAYGO=36,DIC(0)=DIC(0)_"L"
"RTN","IBCNSC",134,0)
 .D ^DIC K DIC
"RTN","IBCNSC",135,0)
 .S IBCNS=+Y
"RTN","IBCNSC",136,0)
 .;/Beginning of IB*2.0*488 (vd)
"RTN","IBCNSC",137,0)
 .I +IBCNS I $P($G(^DIC(36,+IBCNS,3)),"^",1)="" D     ; Set default for EDI=Transmit? to YES-LIVE
"RTN","IBCNSC",138,0)
 ..S DR="3.01////1",DIE="^DIC(36,",DA=IBCNS D ^DIE K DIE
"RTN","IBCNSC",139,0)
 ..;/End of IB*2.0*488 (vd)
"RTN","IBCNSC",140,0)
 I $G(IBCNS)<1 K IBCNS S VALMQUIT="" G INSCOQ
"RTN","IBCNSC",141,0)
INSCOQ ;
"RTN","IBCNSC",142,0)
 K DIC
"RTN","IBCNSC",143,0)
 Q
"RTN","IBCNSC",144,0)
 ;
"RTN","IBCNSC",145,0)
BLANK(LINE) ; -- Build blank line
"RTN","IBCNSC",146,0)
 D SET^VALM10(.LINE,$J("",80))
"RTN","IBCNSC",147,0)
 Q
"RTN","IBCNSC",148,0)
 ;
"RTN","IBCNSC",149,0)
EDIKEY() ; input transform code to determine if user is allowed to edit
"RTN","IBCNSC",150,0)
 ; certain fields in the insurance company file
"RTN","IBCNSC",151,0)
 NEW OK S OK=0
"RTN","IBCNSC",152,0)
 I $$KCHK^XUSRB("IB EDI INSURANCE EDIT") S OK=1 G EDIKEYX
"RTN","IBCNSC",153,0)
 D EN^DDIOL("You must hold the IB EDI INSURANCE EDIT security key to edit this field.",,"!!")
"RTN","IBCNSC",154,0)
 D EN^DDIOL("",,"!!?5")
"RTN","IBCNSC",155,0)
EDIKEYX ;
"RTN","IBCNSC",156,0)
 Q OK
"RTN","IBCNSC",157,0)
 ;
"RTN","IBCNSC",158,0)
DUPQUAL(IBCNS,QUAL,FIELD) ; input transform to make sure that the same qualifier is not used twice for
"RTN","IBCNSC",159,0)
 ; payer secondary IDs.  There are two sets of fields in file 36 that can not be duplicated.
"RTN","IBCNSC",160,0)
 ; 6.01 EDI INST SECONDARY ID QUAL(1) can not be the same as 6.03 EDI INST SECONDARY ID QUAL(2)
"RTN","IBCNSC",161,0)
 ; 6.05 EDI PROF SECONDARY ID QUAL(1) can not be the same as 6.07 EDI PROF SECONDARY ID QUAL(2)
"RTN","IBCNSC",162,0)
 ; 
"RTN","IBCNSC",163,0)
 ; Input:
"RTN","IBCNSC",164,0)
 ; IBCNS is the insurance company internal number
"RTN","IBCNSC",165,0)
 ; QUAL  is the internal code of the value being input.
"RTN","IBCNSC",166,0)
 ; FIELD is the field it is being compare with.
"RTN","IBCNSC",167,0)
 ;
"RTN","IBCNSC",168,0)
 ; Returns:
"RTN","IBCNSC",169,0)
 ; TRUE/1 if they are the same (duplicate)
"RTN","IBCNSC",170,0)
 ; FALSE/0 if they are not
"RTN","IBCNSC",171,0)
 ;
"RTN","IBCNSC",172,0)
 Q:$G(QUAL)="" 0  ; should not happen because this is invoked as an input transform
"RTN","IBCNSC",173,0)
 Q:'+$G(IBCNS) 1  ; stop from editing through fileman
"RTN","IBCNSC",174,0)
 N DUP
"RTN","IBCNSC",175,0)
 S DUP=$$GET1^DIQ(36,+$G(IBCNS)_",",+$G(FIELD),"I")
"RTN","IBCNSC",176,0)
 D CLEAN^DILF
"RTN","IBCNSC",177,0)
 Q QUAL=DUP
"RTN","IBCNSC",178,0)
 ;
"RTN","IBCNSC",179,0)
 ;WCJ;IB*2.0*547
"RTN","IBCNSC",180,0)
ALLOWED(IBAC) ;  input transform to make sure that Administrative Contractor is set up in the site parameters.
"RTN","IBCNSC",181,0)
 ; it will be set up for either commercial or medicare.  Since the type is defined my the plan and we are at a higher
"RTN","IBCNSC",182,0)
 ; level in the Insurance Company, we have to allow both.
"RTN","IBCNSC",183,0)
 ; called from ^DD(36.015,.01,0) and ^DD(36.016,.01,0)
"RTN","IBCNSC",184,0)
 ;
"RTN","IBCNSC",185,0)
 ;3/17/2016 - A decision was made to limit which type is allowed by using the TYPE OF COVERAGE field. (TAZ)
"RTN","IBCNSC",186,0)
 ;
"RTN","IBCNSC",187,0)
 ;
"RTN","IBCNSC",188,0)
 ; Input:
"RTN","IBCNSC",189,0)
 ; IBAC  is the internal code of the value being input.
"RTN","IBCNSC",190,0)
 ;
"RTN","IBCNSC",191,0)
 ; Returns:
"RTN","IBCNSC",192,0)
 ; TRUE/1 if allowed (set up in site parameters)
"RTN","IBCNSC",193,0)
 ; FALSE/0 if they are not
"RTN","IBCNSC",194,0)
 ; 
"RTN","IBCNSC",195,0)
 Q:$D(^IBE(350.9,1,$S($$GET1^DIQ(36,IBCNS_",","TYPE OF COVERAGE")="MEDICARE":81,1:82),"B",IBAC)) 1
"RTN","IBCNSC",196,0)
 Q 0
"RTN","IBCNSC",197,0)
 ;
"RTN","IBCNSC",198,0)
 ; WCJ;IB*2.0*547
"RTN","IBCNSC",199,0)
 ; This is to clean up any extraneous nodes if a user entered an alternate ID type, but not an actual ID.
"RTN","IBCNSC",200,0)
CLEANIDS(INSIEN) ;
"RTN","IBCNSC",201,0)
 ; INSIEN=Insurance Company IEN
"RTN","IBCNSC",202,0)
 ;
"RTN","IBCNSC",203,0)
 N NODE,LOOP,DATA,CLEANUP
"RTN","IBCNSC",204,0)
 F NODE=15,16 D
"RTN","IBCNSC",205,0)
 .S LOOP=0 F  S LOOP=$O(^DIC(36,INSIEN,NODE,LOOP))  Q:'+LOOP  S DATA=$G(^(LOOP,0)) I DATA]"",$P(DATA,U,2)="" D
"RTN","IBCNSC",206,0)
 ..N DIK,DA
"RTN","IBCNSC",207,0)
 ..S DA=LOOP,DA(1)=INSIEN
"RTN","IBCNSC",208,0)
 ..S DIK="^DIC(36,"_INSIEN_","_NODE_","
"RTN","IBCNSC",209,0)
 ..D ^DIK
"RTN","IBCNSC",210,0)
 ..S CLEANUP=1
"RTN","IBCNSC",211,0)
 I $G(CLEANUP) D
"RTN","IBCNSC",212,0)
 . N DIR
"RTN","IBCNSC",213,0)
 . S DIR("A",1)="Payer ID Types without corresponding ID# were deleted."
"RTN","IBCNSC",214,0)
 . S DIR(0)="EA",DIR("A")="PRESS ENTER TO CONTINUE "
"RTN","IBCNSC",215,0)
 . D ^DIR
"RTN","IBCNSC",216,0)
 .Q
"RTN","IBCNSC",217,0)
 Q
"RTN","IBCNSC0")
0^117^B14256193^B13502229
"RTN","IBCNSC0",1,0)
IBCNSC0 ;ALB/NLR - INSURANCE COMPANY EDIT -  ;12-MAR-1993
"RTN","IBCNSC0",2,0)
 ;;2.0;INTEGRATED BILLING;**371,547,592**;21-MAR-94;Build 58
"RTN","IBCNSC0",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSC0",4,0)
 ;
"RTN","IBCNSC0",5,0)
CLAIMS1 ; display Inpatient Claims information
"RTN","IBCNSC0",6,0)
 N OFFSET,START,IBCNS12,IBADD
"RTN","IBCNSC0",7,0)
 ;WCJ;IB*2.0*547
"RTN","IBCNSC0",8,0)
 ;S START=27,OFFSET=2
"RTN","IBCNSC0",9,0)
 S START=28+(2*$G(IBACMAX)),OFFSET=2
"RTN","IBCNSC0",10,0)
CLMS1AD ; KDM US2487 IB*2.0*592  call in tag from IBCNSI 
"RTN","IBCNSC0",11,0)
 D SET^IBCNSP(START,OFFSET+20," Inpatient Claims Office Information ",IORVON,IORVOFF)
"RTN","IBCNSC0",12,0)
 ;
"RTN","IBCNSC0",13,0)
 ;WCJ;IB*2.0*547;Call New API
"RTN","IBCNSC0",14,0)
 ;S IBCNS12=$$ADDRESS(IBCNS,.12,5)
"RTN","IBCNSC0",15,0)
 S IBCNS12=$$ADD2(IBCNS,.12,5)
"RTN","IBCNSC0",16,0)
 ;
"RTN","IBCNSC0",17,0)
 D SET^IBCNSP(START+1,OFFSET," Company Name: "_$P($G(^DIC(36,+$P(IBCNS12,"^",7),0)),"^",1))
"RTN","IBCNSC0",18,0)
 D SET^IBCNSP(START+2,OFFSET,"       Street: "_$P(IBCNS12,"^",1))
"RTN","IBCNSC0",19,0)
 D SET^IBCNSP(START+3,OFFSET,"     Street 2: "_$P(IBCNS12,"^",2))
"RTN","IBCNSC0",20,0)
 N OFFSET S OFFSET=45
"RTN","IBCNSC0",21,0)
 D SET^IBCNSP(START+1,OFFSET,"     Street 3: "_$P(IBCNS12,"^",3)) S IBADD=1
"RTN","IBCNSC0",22,0)
 D SET^IBCNSP(START+1+IBADD,OFFSET,"   City/State: "_$E($P(IBCNS12,"^",4),1,15)_$S($P(IBCNS12,"^",4)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCNS12,"^",5),0)),"^",2)_" "_$E($P(IBCNS12,"^",6),1,5))
"RTN","IBCNSC0",23,0)
 D SET^IBCNSP(START+2+IBADD,OFFSET,"        Phone: "_$P(IBCNS12,"^",8))
"RTN","IBCNSC0",24,0)
 D SET^IBCNSP(START+3+IBADD,OFFSET,"          Fax: "_$P(IBCNS12,"^",9))
"RTN","IBCNSC0",25,0)
 Q
"RTN","IBCNSC0",26,0)
 ;
"RTN","IBCNSC0",27,0)
R1Q Q
"RTN","IBCNSC0",28,0)
CLAIMS2 ; display Outpatient Claims information
"RTN","IBCNSC0",29,0)
 ;
"RTN","IBCNSC0",30,0)
 N OFFSET,START,IBCNS16,IBADD
"RTN","IBCNSC0",31,0)
 ;WCJ;IB*2.0*547
"RTN","IBCNSC0",32,0)
 ;S START=34,OFFSET=2
"RTN","IBCNSC0",33,0)
 S START=35+(2*$G(IBACMAX)),OFFSET=2
"RTN","IBCNSC0",34,0)
CLMS2AD ; KDM US2487 IB*2.0*592  call in tag from IBCNSI
"RTN","IBCNSC0",35,0)
 D SET^IBCNSP(START,OFFSET+20," Outpatient Claims Office Information ",IORVON,IORVOFF)
"RTN","IBCNSC0",36,0)
 ;
"RTN","IBCNSC0",37,0)
 ;WCJ;IB*2.0*547;Call New API
"RTN","IBCNSC0",38,0)
 ;S IBCNS16=$$ADDRESS(IBCNS,.16,6)
"RTN","IBCNSC0",39,0)
 S IBCNS16=$$ADD2(IBCNS,.16,6)
"RTN","IBCNSC0",40,0)
 ;
"RTN","IBCNSC0",41,0)
 D SET^IBCNSP(START+1,OFFSET," Company Name: "_$P($G(^DIC(36,+$P(IBCNS16,"^",7),0)),"^",1))
"RTN","IBCNSC0",42,0)
 D SET^IBCNSP(START+2,OFFSET,"       Street: "_$P(IBCNS16,"^",1))
"RTN","IBCNSC0",43,0)
 D SET^IBCNSP(START+3,OFFSET,"     Street 2: "_$P(IBCNS16,"^",2))
"RTN","IBCNSC0",44,0)
 N OFFSET S OFFSET=45
"RTN","IBCNSC0",45,0)
 D SET^IBCNSP(START+1,OFFSET,"     Street 3: "_$P(IBCNS16,"^",3)) S IBADD=1
"RTN","IBCNSC0",46,0)
 D SET^IBCNSP(START+1+IBADD,OFFSET,"   City/State: "_$E($P(IBCNS16,"^",4),1,15)_$S($P(IBCNS16,"^",4)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCNS16,"^",5),0)),"^",2)_" "_$E($P(IBCNS16,"^",6),1,5))
"RTN","IBCNSC0",47,0)
 D SET^IBCNSP(START+2+IBADD,OFFSET,"        Phone: "_$P(IBCNS16,"^",8))
"RTN","IBCNSC0",48,0)
 D SET^IBCNSP(START+3+IBADD,OFFSET,"          Fax: "_$P(IBCNS16,"^",9))
"RTN","IBCNSC0",49,0)
 Q
"RTN","IBCNSC0",50,0)
 ;
"RTN","IBCNSC0",51,0)
 ; Only adding comments on patch 547.  Changes are on the ADD2 tag below.
"RTN","IBCNSC0",52,0)
 ; This tag is called from the Output formatter.
"RTN","IBCNSC0",53,0)
 ; It returns a "complete" address
"RTN","IBCNSC0",54,0)
 ; It judges an address complete if it has a state (don't ask why, I am just adding the comments)
"RTN","IBCNSC0",55,0)
 ; If the address it wants is not complete, it returns the main address.
"RTN","IBCNSC0",56,0)
 ; These addresses go out on claims and claims (X12 837) don't like partial addresses.
"RTN","IBCNSC0",57,0)
ADDRESS(INS,NODE,PH) ; -- generic find address
"RTN","IBCNSC0",58,0)
 ;
"RTN","IBCNSC0",59,0)
 N IBX,INSSAVE,IBPH,IBFX,IBCNT,IBA
"RTN","IBCNSC0",60,0)
 S IBX="" ;S IBPH="",IBFX="",IBA=""
"RTN","IBCNSC0",61,0)
 ;
"RTN","IBCNSC0",62,0)
REDO ; gather insurance carrier's main address information 
"RTN","IBCNSC0",63,0)
 S IBX=$G(^DIC(36,+INS,.11)),IBPH=$P($G(^DIC(36,+INS,.13)),"^",1),IBFX=$P(IBX,"^",9)
"RTN","IBCNSC0",64,0)
 ;S IBCNT=$G(IBCNT)+1
"RTN","IBCNSC0",65,0)
 ;
"RTN","IBCNSC0",66,0)
 ; -- if process the same co. more than once you are in an infinite loop
"RTN","IBCNSC0",67,0)
 ;I $D(IBCNT(IBCNS)) G ADDREQ
"RTN","IBCNSC0",68,0)
 ;S IBCNT(IBCNS)=""
"RTN","IBCNSC0",69,0)
 ;
"RTN","IBCNSC0",70,0)
 ; -- gather address information from specific office (Claims, Appeals, Inquiry, Dental)
"RTN","IBCNSC0",71,0)
 ;JWS;IB*2.0*592;Changed below for DENTAL insurance mailing address
"RTN","IBCNSC0",72,0)
 ;IA #5292
"RTN","IBCNSC0",73,0)
 I $P($G(^DIC(36,+INS,+NODE)),"^",5) D
"RTN","IBCNSC0",74,0)
 . S IBX=$G(^DIC(36,+INS,+NODE))
"RTN","IBCNSC0",75,0)
 . I +NODE=.19 S IBPH=$P(IBX,"^",PH)
"RTN","IBCNSC0",76,0)
 . E  S IBPH=$P($G(^DIC(36,+INS,.13)),"^",PH)
"RTN","IBCNSC0",77,0)
 . S IBFX=$P($G(IBX),"^",9)
"RTN","IBCNSC0",78,0)
 I $P($G(^DIC(36,+INS,+NODE)),"^",7) S INSSAVE=INS,INS=$P($G(^DIC(36,+INS,+NODE)),"^",7) I INSSAVE'=INS G REDO
"RTN","IBCNSC0",79,0)
 ;
"RTN","IBCNSC0",80,0)
ADDRESQ ; concatenate company name, address, phone and fax 
"RTN","IBCNSC0",81,0)
 S $P(IBA,"^",1,6)=$P($G(IBX),"^",1,6)
"RTN","IBCNSC0",82,0)
 S $P(IBA,"^",7)=INS
"RTN","IBCNSC0",83,0)
 S $P(IBA,"^",8)=IBPH
"RTN","IBCNSC0",84,0)
 S $P(IBA,"^",9)=IBFX
"RTN","IBCNSC0",85,0)
ADDREQ Q IBA
"RTN","IBCNSC0",86,0)
 ;
"RTN","IBCNSC0",87,0)
 ; WCJ;IB*2.0*547;
"RTN","IBCNSC0",88,0)
 ; This is a new tag which is just called from the insurance company editor screens.
"RTN","IBCNSC0",89,0)
 ; The billers/insurance verifiers want to see what data is actually in the insurance company file.
"RTN","IBCNSC0",90,0)
 ; They don't care if it's complete.  Heck, a phone number may be enough.
"RTN","IBCNSC0",91,0)
 ; This will just return what is in the file for the ins company that handles that type of claims.
"RTN","IBCNSC0",92,0)
 ; Input: INS - IREN to file 36
"RTN","IBCNSC0",93,0)
 ;        NODE - Node in File 36 (corresponds to Claims, Appeals, Inquiry...)
"RTN","IBCNSC0",94,0)
 ;        PH - Location of Phone number in node .13
"RTN","IBCNSC0",95,0)
ADD2(INS,NODE,PH) ;
"RTN","IBCNSC0",96,0)
 N IBX,INSSAVE,IBFX,IBPH,IBA
"RTN","IBCNSC0",97,0)
 F  S IBX=$G(^DIC(36,+INS,+NODE)) Q:'$P(IBX,U,7)  S INSSAVE=INS,INS=$P(IBX,U,7) Q:INSSAVE=INS
"RTN","IBCNSC0",98,0)
 ; concatenate company name, address, phone and fax  
"RTN","IBCNSC0",99,0)
 S IBPH=$P($G(^DIC(36,+INS,.13)),U,PH),IBFX=$P(IBX,U,9)
"RTN","IBCNSC0",100,0)
 ;JWS;IB*2.0*592;Dental mailing address
"RTN","IBCNSC0",101,0)
 ;IA# 5292
"RTN","IBCNSC0",102,0)
 I +NODE=.19 S IBPH=$P($G(^DIC(36,+INS,.19)),U,11)
"RTN","IBCNSC0",103,0)
 S $P(IBA,U,1,6)=$P(IBX,U,1,6),$P(IBA,U,7)=INS,$P(IBA,U,8)=IBPH,$P(IBA,U,9)=IBFX
"RTN","IBCNSC0",104,0)
 Q IBA
"RTN","IBCNSC01")
0^118^B75281286^B73912803
"RTN","IBCNSC01",1,0)
IBCNSC01 ;ALB/NLR - INSURANCE COMPANY EDIT ;6/1/05 10:06am
"RTN","IBCNSC01",2,0)
 ;;2.0;INTEGRATED BILLING;**52,137,191,184,232,320,349,371,399,416,432,494,519,547,592**;21-MAR-94;Build 58
"RTN","IBCNSC01",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSC01",4,0)
 ;
"RTN","IBCNSC01",5,0)
PARAM ; -- Insurance company parameters region
"RTN","IBCNSC01",6,0)
 N OFFSET,START,IBCNS0,IBCNS03,IBCNS06,IBCNS08,IBCNS13,IBCNS3,IBHPD
"RTN","IBCNSC01",7,0)
 S IBCNS0=$G(^DIC(36,+IBCNS,0)),IBCNS3=$G(^(3))
"RTN","IBCNSC01",8,0)
 S IBCNS03=$P(IBCNS0,"^",3),IBCNS06=$P(IBCNS0,"^",6),IBCNS08=$P(IBCNS0,"^",8)
"RTN","IBCNSC01",9,0)
 S IBCNS13=$G(^DIC(36,+IBCNS,.13))
"RTN","IBCNSC01",10,0)
 S START=1,OFFSET=2
"RTN","IBCNSC01",11,0)
 D SET^IBCNSP(START,OFFSET+25," Billing Parameters ",IORVON,IORVOFF)
"RTN","IBCNSC01",12,0)
 ;
"RTN","IBCNSC01",13,0)
 D SET^IBCNSP(START+1,OFFSET+1,"Signature Required?: "_$S(+IBCNS03:"YES",1:"NO"))
"RTN","IBCNSC01",14,0)
 D SET^IBCNSP(START+2,OFFSET+10,"Reimburse?: "_$E($$EXPAND^IBTRE(36,1,$P(IBCNS0,"^",2)),1,21))
"RTN","IBCNSC01",15,0)
 D SET^IBCNSP(START+3,OFFSET+3,"Mult. Bedsections: "_$S(+IBCNS06:"YES",IBCNS06=0:"NO",1:""))
"RTN","IBCNSC01",16,0)
 D SET^IBCNSP(START+4,OFFSET+6,"One Opt. Visit: "_$S(+IBCNS08:"YES",1:"NO"))
"RTN","IBCNSC01",17,0)
 D SET^IBCNSP(START+5,OFFSET+4,"Diff. Rev. Codes: "_$P(IBCNS0,"^",7))
"RTN","IBCNSC01",18,0)
 D SET^IBCNSP(START+6,OFFSET+1,"Amb. Sur. Rev. Code: "_$P(IBCNS0,"^",9))
"RTN","IBCNSC01",19,0)
 D SET^IBCNSP(START+7,OFFSET+1,"Rx Refill Rev. Code: "_$P(IBCNS0,"^",15))
"RTN","IBCNSC01",20,0)
 D SET^IBCNSP(START+8,OFFSET+3,"Filing Time Frame: "_$P(IBCNS0,"^",12)_$S(+$P(IBCNS0,"^",18):" ("_$$FTFN^IBCNSU31(,+IBCNS)_")",1:""))
"RTN","IBCNSC01",21,0)
 ;
"RTN","IBCNSC01",22,0)
 S OFFSET=45
"RTN","IBCNSC01",23,0)
 D SET^IBCNSP(START+1,OFFSET+4,"Type Of Coverage: "_$$EXPAND^IBTRE(36,.13,+$P(IBCNS0,U,13)))
"RTN","IBCNSC01",24,0)
 D SET^IBCNSP(START+2,OFFSET+7,"Billing Phone: "_$P(IBCNS13,"^",2))
"RTN","IBCNSC01",25,0)
 D SET^IBCNSP(START+3,OFFSET+2,"Verification Phone: "_$P(IBCNS13,"^",4))
"RTN","IBCNSC01",26,0)
 D SET^IBCNSP(START+4,OFFSET+2,"Precert Comp. Name: "_$P($G(^DIC(36,+$P(IBCNS13,"^",9),0)),"^",1))
"RTN","IBCNSC01",27,0)
 D SET^IBCNSP(START+5,OFFSET+7,"Precert Phone: "_$$PHONE(IBCNS13))
"RTN","IBCNSC01",28,0)
 I +IBCNS3=2 D SET^IBCNSP(START+6,OFFSET,"Max # Test Bills/Day: "_$P(IBCNS3,U,6))
"RTN","IBCNSC01",29,0)
 ;
"RTN","IBCNSC01",30,0)
 S START=11,OFFSET=2
"RTN","IBCNSC01",31,0)
 D SET^IBCNSP(START,OFFSET+28," EDI Parameters ",IORVON,IORVOFF)
"RTN","IBCNSC01",32,0)
 D SET^IBCNSP(START+1,OFFSET+13,"Transmit?: "_$S(+IBCNS3=1:"YES-LIVE",+IBCNS3=2:"TEST ONLY",1:"NO"))
"RTN","IBCNSC01",33,0)
 D SET^IBCNSP(START+2,OFFSET+1,"Inst Payer Primary ID: "_$P(IBCNS3,U,4))
"RTN","IBCNSC01",34,0)
 ;
"RTN","IBCNSC01",35,0)
 ;WCJ;IB*2.0*547; Lots o Changes below to include new Alternate Primary ID
"RTN","IBCNSC01",36,0)
 N IBAC,IBACND,LOOP
"RTN","IBCNSC01",37,0)
 S IBACMAX=0
"RTN","IBCNSC01",38,0)
 F IBACND=15,16 D
"RTN","IBCNSC01",39,0)
 .S LOOP=0 F  S LOOP=$O(^DIC(36,+IBCNS,IBACND,LOOP)) Q:'+LOOP  D
"RTN","IBCNSC01",40,0)
 ..S IBAC(IBACND,"CT")=$G(IBAC(IBACND,"CT"))+1 I IBAC(IBACND,"CT")>IBACMAX S IBACMAX=IBAC(IBACND,"CT")
"RTN","IBCNSC01",41,0)
 ..S IBAC(IBACND,IBAC(IBACND,"CT"))=$P($G(^DIC(36,+IBCNS,IBACND,LOOP,0)),U,1,2)
"RTN","IBCNSC01",42,0)
 ;
"RTN","IBCNSC01",43,0)
 S LOOP=0 F  S LOOP=$O(IBAC(15,LOOP)) Q:'LOOP  D
"RTN","IBCNSC01",44,0)
 .D SET^IBCNSP(START+2+(LOOP*2-1),OFFSET,"Alt-I Payer Prim ID Type: "_$$GET1^DIQ(355.98,+$P($G(IBAC(15,LOOP)),U),.01))
"RTN","IBCNSC01",45,0)
 .D SET^IBCNSP(START+2+(LOOP*2),OFFSET,"Alt-Inst Payer Prim ID: "_$P($G(IBAC(15,LOOP)),U,2))
"RTN","IBCNSC01",46,0)
 ;
"RTN","IBCNSC01",47,0)
 D SET^IBCNSP(START+3+(2*IBACMAX),OFFSET,"Inst Payer Sec ID Qual: "_$$GET1^DIQ(36,+IBCNS,6.01))
"RTN","IBCNSC01",48,0)
 D SET^IBCNSP(START+4+(2*IBACMAX),OFFSET+5,"Inst Payer Sec ID: "_$$GET1^DIQ(36,+IBCNS,6.02))
"RTN","IBCNSC01",49,0)
 D SET^IBCNSP(START+5+(2*IBACMAX),OFFSET,"Inst Payer Sec ID Qual: "_$$GET1^DIQ(36,+IBCNS,6.03))
"RTN","IBCNSC01",50,0)
 D SET^IBCNSP(START+6+(2*IBACMAX),OFFSET+5,"Inst Payer Sec ID: "_$$GET1^DIQ(36,+IBCNS,6.04))
"RTN","IBCNSC01",51,0)
 ;
"RTN","IBCNSC01",52,0)
 ;JWS;IB*2.0*592;Dental Payer ID, moved UMO ID and HPD down 1
"RTN","IBCNSC01",53,0)
 D SET^IBCNSP(START+7+(2*IBACMAX),OFFSET+7,"Dental Payer ID: "_$P(IBCNS3,U,15))
"RTN","IBCNSC01",54,0)
 D SET^IBCNSP(START+8+(2*IBACMAX),OFFSET+12,"Bin Number: "_$P($G(^DIC(36,+IBCNS,3)),"^",3))
"RTN","IBCNSC01",55,0)
 ;IB*2.0*547;WCJ Added and bumped HPID down
"RTN","IBCNSC01",56,0)
 D SET^IBCNSP(START+9+(2*IBACMAX),OFFSET+10,"UMO (278) ID: "_$P($G(^DIC(36,+IBCNS,7)),U))
"RTN","IBCNSC01",57,0)
 ;ib*2.0*519
"RTN","IBCNSC01",58,0)
 S IBHPD=$$HPD^IBCNHUT1(+IBCNS)
"RTN","IBCNSC01",59,0)
 D SET^IBCNSP(START+10+(2*IBACMAX),OFFSET+13,$P($$HOD^IBCNHUT1(IBHPD),U,2)_": "_IBHPD)
"RTN","IBCNSC01",60,0)
 ;
"RTN","IBCNSC01",61,0)
 S OFFSET=41
"RTN","IBCNSC01",62,0)
 D SET^IBCNSP(START+1,OFFSET+8," Insurance Type: "_$$EXPAND^IBTRE(36,3.09,+$P(IBCNS3,U,9)))
"RTN","IBCNSC01",63,0)
 D SET^IBCNSP(START+2,OFFSET+1," Prof Payer Primary ID: "_$P(IBCNS3,U,2))
"RTN","IBCNSC01",64,0)
 ;
"RTN","IBCNSC01",65,0)
 S LOOP=0 F  S LOOP=$O(IBAC(16,LOOP)) Q:'LOOP  D
"RTN","IBCNSC01",66,0)
 .D SET^IBCNSP(START+2+(LOOP*2-1),OFFSET+1,"Alt-P Payer Prim ID Type: "_$$GET1^DIQ(355.98,+$P($G(IBAC(16,LOOP)),U),.01))
"RTN","IBCNSC01",67,0)
 .D SET^IBCNSP(START+2+(LOOP*2),OFFSET+1,"Alt-Prof Payer Prim ID: "_$P($G(IBAC(16,LOOP)),U,2))
"RTN","IBCNSC01",68,0)
 ;
"RTN","IBCNSC01",69,0)
 D SET^IBCNSP(START+3+(2*IBACMAX),OFFSET," Prof Payer Sec ID Qual: "_$$GET1^DIQ(36,+IBCNS,6.05))
"RTN","IBCNSC01",70,0)
 D SET^IBCNSP(START+4+(2*IBACMAX),OFFSET+5," Prof Payer Sec ID: "_$$GET1^DIQ(36,+IBCNS,6.06))
"RTN","IBCNSC01",71,0)
 D SET^IBCNSP(START+5+(2*IBACMAX),OFFSET," Prof Payer Sec ID Qual: "_$$GET1^DIQ(36,+IBCNS,6.07))
"RTN","IBCNSC01",72,0)
 D SET^IBCNSP(START+6+(2*IBACMAX),OFFSET+5," Prof Payer Sec ID: "_$$GET1^DIQ(36,+IBCNS,6.08))
"RTN","IBCNSC01",73,0)
 ;IB*2.0*432/TAZ Added fields 6.09 and 6.1
"RTN","IBCNSC01",74,0)
 D SET^IBCNSP(START+8+(2*IBACMAX),OFFSET-3," Prnt Sec/Tert Auto Claims: "_$$GET1^DIQ(36,+IBCNS,6.09))
"RTN","IBCNSC01",75,0)
 D SET^IBCNSP(START+9+(2*IBACMAX),OFFSET-5," Prnt Med Sec Claims w/o MRA: "_$$GET1^DIQ(36,+IBCNS,6.1))
"RTN","IBCNSC01",76,0)
 Q
"RTN","IBCNSC01",77,0)
 ;
"RTN","IBCNSC01",78,0)
PHONE(IBCNS13) ; -- Compute precert company phone
"RTN","IBCNSC01",79,0)
 N IBX,IBSAVE,IBCNT S IBX=""
"RTN","IBCNSC01",80,0)
 I '$P(IBCNS13,"^",9) S IBX=$P(IBCNS13,"^",3) G PHONEQ
"RTN","IBCNSC01",81,0)
REDOX S IBSAVE=+$P(IBCNS13,"^",9)
"RTN","IBCNSC01",82,0)
 S IBCNT=$G(IBCNT)+1
"RTN","IBCNSC01",83,0)
 ; -- if you process the same co. more than once you are in an infinite loop
"RTN","IBCNSC01",84,0)
 I $D(IBCNT(IBCNS)) G PHONEQ
"RTN","IBCNSC01",85,0)
 S IBCNT(IBCNS)=""
"RTN","IBCNSC01",86,0)
 S IBCNS13=$G(^DIC(36,+$P(IBCNS13,"^",9),.13))
"RTN","IBCNSC01",87,0)
 S IBX=$P(IBCNS13,"^") S:$L($P(IBCNS13,"^",3)) IBX=$P(IBCNS13,"^",3)
"RTN","IBCNSC01",88,0)
 ; -- if process the same co. more than once you are in an infinite loop
"RTN","IBCNSC01",89,0)
 I $P(IBCNS13,"^",9),$P(IBCNS13,"^",9)'=IBSAVE G REDOX
"RTN","IBCNSC01",90,0)
PHONEQ Q IBX
"RTN","IBCNSC01",91,0)
 ;
"RTN","IBCNSC01",92,0)
MAIN ; -- Insurance company main address
"RTN","IBCNSC01",93,0)
 N OFFSET,START,IBCNS11,IBCNS13,IBADD
"RTN","IBCNSC01",94,0)
 S IBCNS11=$G(^DIC(36,+IBCNS,.11))
"RTN","IBCNSC01",95,0)
 S IBCNS13=$G(^DIC(36,+IBCNS,.13))
"RTN","IBCNSC01",96,0)
 ;
"RTN","IBCNSC01",97,0)
 ;S START=21,OFFSET=25
"RTN","IBCNSC01",98,0)
 S START=22+(2*IBACMAX),OFFSET=25
"RTN","IBCNSC01",99,0)
MAINAD ; KDM US2487 IB*2.0*592  call in tag from IBCNSI
"RTN","IBCNSC01",100,0)
 D SET^IBCNSP(START,OFFSET," Main Mailing Address ",IORVON,IORVOFF)
"RTN","IBCNSC01",101,0)
 S OFFSET=2
"RTN","IBCNSC01",102,0)
 D SET^IBCNSP(START+1,OFFSET,"       Street: "_$P(IBCNS11,"^",1)) S IBADD=1
"RTN","IBCNSC01",103,0)
 D SET^IBCNSP(START+2,OFFSET,"     Street 2: "_$P(IBCNS11,"^",2)) S IBADD=2
"RTN","IBCNSC01",104,0)
 D SET^IBCNSP(START+3,OFFSET,"     Street 3: "_$P(IBCNS11,"^",3)) S IBADD=3
"RTN","IBCNSC01",105,0)
 ; D SET^IBCNSP(START+4,OFFSET,"Claim Off. ID: "_$P(IBCNS11,U,11))
"RTN","IBCNSC01",106,0)
 S OFFSET=45
"RTN","IBCNSC01",107,0)
 D SET^IBCNSP(START+1,OFFSET,"   City/State: "_$E($P(IBCNS11,"^",4),1,15)_$S($P(IBCNS11,"^",4)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCNS11,"^",5),0)),"^",2)_" "_$E($P(IBCNS11,"^",6),1,5))
"RTN","IBCNSC01",108,0)
 D SET^IBCNSP(START+2,OFFSET,"        Phone: "_$P(IBCNS13,"^",1))
"RTN","IBCNSC01",109,0)
 D SET^IBCNSP(START+3,OFFSET,"          Fax: "_$P(IBCNS11,"^",9))
"RTN","IBCNSC01",110,0)
 Q
"RTN","IBCNSC01",111,0)
 ;
"RTN","IBCNSC01",112,0)
 ;
"RTN","IBCNSC01",113,0)
PAYER ; This procedure builds the display for the payer associated with
"RTN","IBCNSC01",114,0)
 ; this insurance company.
"RTN","IBCNSC01",115,0)
 ; ESG - 7/29/02 - IIV project
"RTN","IBCNSC01",116,0)
 ;     -  9/9/09 - eIV updated
"RTN","IBCNSC01",117,0)
 ;     -  2/4/13 - remove ePharmacy references (IB*2*494)
"RTN","IBCNSC01",118,0)
 ;
"RTN","IBCNSC01",119,0)
 N PAYERIEN,PAYR,APPDATA,APP,DATA,APPNAME,A1,A2,A3,A4,A5,A6,A7,A8
"RTN","IBCNSC01",120,0)
 N START,TITLE,OFFSET,IBLINE
"RTN","IBCNSC01",121,0)
 S PAYERIEN=$P($G(^DIC(36,+IBCNS,3)),U,10),PAYR="",APPDATA=0
"RTN","IBCNSC01",122,0)
 I PAYERIEN D
"RTN","IBCNSC01",123,0)
 . S PAYR=$G(^IBE(365.12,PAYERIEN,0))
"RTN","IBCNSC01",124,0)
 . S APP=0
"RTN","IBCNSC01",125,0)
 . F  S APP=$O(^IBE(365.12,PAYERIEN,1,APP)) Q:'APP  D
"RTN","IBCNSC01",126,0)
 .. S DATA=$G(^IBE(365.12,PAYERIEN,1,APP,0))
"RTN","IBCNSC01",127,0)
 .. S APPNAME=$$EXTERNAL^DILFD(365.121,.01,"",$P(DATA,U,1))
"RTN","IBCNSC01",128,0)
 .. I APPNAME="" Q
"RTN","IBCNSC01",129,0)
 .. I APPNAME="IIV" S APPNAME="eIV"   ; IB*2*416 - change external display to be eIV
"RTN","IBCNSC01",130,0)
 .. I APPNAME="E-PHARM" Q             ; IB*2*494 - don't display ePharmacy application data
"RTN","IBCNSC01",131,0)
 .. I $D(APPDATA(APPNAME)) Q
"RTN","IBCNSC01",132,0)
 .. S (A1,A2,A3,A4,A5,A6,A7)="NO",A8=""
"RTN","IBCNSC01",133,0)
 .. I $P(DATA,U,2) S A1="YES"      ; national active
"RTN","IBCNSC01",134,0)
 .. I $P(DATA,U,3) S A2="YES"      ; local active
"RTN","IBCNSC01",135,0)
 .. I $P(DATA,U,7) S A3="YES"      ; auto-accept
"RTN","IBCNSC01",136,0)
 .. I $P(DATA,U,8) S A4="YES"      ; ident inquiries require subscr ID (*416 field not used)
"RTN","IBCNSC01",137,0)
 .. I $P(DATA,U,9) S A5="YES"      ; use SSN for subscriber ID (*416 field not used)
"RTN","IBCNSC01",138,0)
 .. I $P(DATA,U,10) S A6="YES"     ; transmit SSN (*416 field not used)
"RTN","IBCNSC01",139,0)
 .. I $P(DATA,U,11) S A7="YES"     ; deactivated?
"RTN","IBCNSC01",140,0)
 .. ; A8 = deactivation date
"RTN","IBCNSC01",141,0)
 .. I $P(DATA,U,12) S A8=$P($$FMTE^XLFDT($P(DATA,U,12),"5Z"),"@",1)
"RTN","IBCNSC01",142,0)
 .. S APPDATA(APPNAME)=A1_U_A2_U_A3_U_A4_U_A5_U_A6_U_A7_U_A8
"RTN","IBCNSC01",143,0)
 .. S APPDATA=APPDATA+1
"RTN","IBCNSC01",144,0)
 .. Q
"RTN","IBCNSC01",145,0)
 . Q
"RTN","IBCNSC01",146,0)
 ;
"RTN","IBCNSC01",147,0)
 S START=$O(^TMP("IBCNSC",$J,""),-1)+1
"RTN","IBCNSC01",148,0)
 S IB1ST("PAYER")=START
"RTN","IBCNSC01",149,0)
 S TITLE=" Payer Information:  e-IV "     ; esg - IB*2*494 - remove ePharmacy reference
"RTN","IBCNSC01",150,0)
 S OFFSET=(40-($L(TITLE)/2))\1+1
"RTN","IBCNSC01",151,0)
 D SET^IBCNSP(START,OFFSET,TITLE,IORVON,IORVOFF)
"RTN","IBCNSC01",152,0)
 D SET^IBCNSP(START+1,9,"Payer Name: "_$P(PAYR,U,1))
"RTN","IBCNSC01",153,0)
 D SET^IBCNSP(START+2,5,"VA National ID: "_$P(PAYR,U,2))
"RTN","IBCNSC01",154,0)
 D SET^IBCNSP(START+2,51,"CMS National ID: "_$P(PAYR,U,3))
"RTN","IBCNSC01",155,0)
 S IBLINE=START+2
"RTN","IBCNSC01",156,0)
 ;
"RTN","IBCNSC01",157,0)
 ; Handle the case where no application data is defined
"RTN","IBCNSC01",158,0)
 I 'APPDATA D  G PAYERX
"RTN","IBCNSC01",159,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",160,0)
 . D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC01",161,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",162,0)
 . D SET^IBCNSP(IBLINE,16,"Payer Application data is not defined!")
"RTN","IBCNSC01",163,0)
 . Q
"RTN","IBCNSC01",164,0)
 ;
"RTN","IBCNSC01",165,0)
 ; Display all the applications
"RTN","IBCNSC01",166,0)
 S APPNAME=""
"RTN","IBCNSC01",167,0)
 F  S APPNAME=$O(APPDATA(APPNAME)) Q:APPNAME=""  D
"RTN","IBCNSC01",168,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",169,0)
 . D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC01",170,0)
 . ;
"RTN","IBCNSC01",171,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",172,0)
 . D SET^IBCNSP(IBLINE,2,"Payer Application: "_APPNAME)
"RTN","IBCNSC01",173,0)
 . D SET^IBCNSP(IBLINE,51,"FSC Auto-Update: "_$P(APPDATA(APPNAME),U,3))
"RTN","IBCNSC01",174,0)
 . ;
"RTN","IBCNSC01",175,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",176,0)
 . D SET^IBCNSP(IBLINE,4,"National Active: "_$P(APPDATA(APPNAME),U,1))
"RTN","IBCNSC01",177,0)
 . D SET^IBCNSP(IBLINE,55,"Deactivated: "_$P(APPDATA(APPNAME),U,7))
"RTN","IBCNSC01",178,0)
 . ;
"RTN","IBCNSC01",179,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",180,0)
 . D SET^IBCNSP(IBLINE,7,"Local Active: "_$P(APPDATA(APPNAME),U,2))
"RTN","IBCNSC01",181,0)
 . ;
"RTN","IBCNSC01",182,0)
 . ; If no deactivated date, then exit
"RTN","IBCNSC01",183,0)
 . I $P(APPDATA(APPNAME),U,8)="" Q
"RTN","IBCNSC01",184,0)
 . ;
"RTN","IBCNSC01",185,0)
 . D SET^IBCNSP(IBLINE,50,"Date Deactivated: "_$P(APPDATA(APPNAME),U,8))
"RTN","IBCNSC01",186,0)
 . ;
"RTN","IBCNSC01",187,0)
 . Q
"RTN","IBCNSC01",188,0)
PAYERX ;
"RTN","IBCNSC01",189,0)
 ; Two trailing blank lines after payer information display
"RTN","IBCNSC01",190,0)
 S IBLINE=IBLINE+1
"RTN","IBCNSC01",191,0)
 D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC01",192,0)
 S IBLINE=IBLINE+1
"RTN","IBCNSC01",193,0)
 D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC01",194,0)
 Q
"RTN","IBCNSC01",195,0)
 ;
"RTN","IBCNSC01",196,0)
 ;
"RTN","IBCNSC01",197,0)
REMARKS ;
"RTN","IBCNSC01",198,0)
 ;
"RTN","IBCNSC01",199,0)
 N OFFSET,START,IBLCNT,IBI
"RTN","IBCNSC01",200,0)
 S START=$O(^TMP("IBCNSC",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSC01",201,0)
 S IB1ST("REM")=START
"RTN","IBCNSC01",202,0)
 ;
"RTN","IBCNSC01",203,0)
 D SET^IBCNSP(START,OFFSET," Remarks ",IORVON,IORVOFF)
"RTN","IBCNSC01",204,0)
 S (IBLCNT,IBI)=0 F  S IBI=$O(^DIC(36,+IBCNS,11,IBI)) Q:IBI<1  D
"RTN","IBCNSC01",205,0)
 . S IBLCNT=IBLCNT+1
"RTN","IBCNSC01",206,0)
 . D SET^IBCNSP(START+IBLCNT,OFFSET,"  "_$E($G(^DIC(36,+IBCNS,11,IBI,0)),1,80))
"RTN","IBCNSC01",207,0)
 . Q
"RTN","IBCNSC01",208,0)
 D SET^IBCNSP(START+IBLCNT+1,OFFSET," ")   ; blank line after remarks
"RTN","IBCNSC01",209,0)
 Q
"RTN","IBCNSC01",210,0)
 ;
"RTN","IBCNSC01",211,0)
SYN ;
"RTN","IBCNSC01",212,0)
 N OFFSET,START,SYN,SYNOI
"RTN","IBCNSC01",213,0)
 S START=$O(^TMP("IBCNSC",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSC01",214,0)
 S IB1ST("SYN")=START
"RTN","IBCNSC01",215,0)
 D SET^IBCNSP(START,OFFSET," Synonyms ",IORVON,IORVOFF)
"RTN","IBCNSC01",216,0)
 S SYN="" F SYNOI=1:1:8 S SYN=$O(^DIC(36,+IBCNS,10,"B",SYN)) Q:SYN=""  D SET^IBCNSP(START+SYNOI,OFFSET,$S(SYNOI>7:"  ...edit to see more...",1:"  "_SYN))
"RTN","IBCNSC01",217,0)
 Q
"RTN","IBCNSC01",218,0)
 ;
"RTN","IBCNSC02")
0^119^B57150486^B56719125
"RTN","IBCNSC02",1,0)
IBCNSC02 ;ALB/ESG - Insurance Company parent/child management ;01-NOV-2005
"RTN","IBCNSC02",2,0)
 ;;2.0;INTEGRATED BILLING;**320,371,547,592**;21-MAR-94;Build 58
"RTN","IBCNSC02",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSC02",4,0)
 ;
"RTN","IBCNSC02",5,0)
 Q
"RTN","IBCNSC02",6,0)
 ;
"RTN","IBCNSC02",7,0)
DISP ; entry point for display of parent/child companies
"RTN","IBCNSC02",8,0)
 NEW PCFLG,PARENT,PCDESC,TITLE,START,IBLINE,OFFSET,INSDATA,CNT,TXT
"RTN","IBCNSC02",9,0)
 S PCFLG=$P($G(^DIC(36,+IBCNS,3)),U,13),PARENT=""
"RTN","IBCNSC02",10,0)
 I PCFLG="C" S PARENT=$P($G(^DIC(36,+IBCNS,3)),U,14),PCDESC="Child"
"RTN","IBCNSC02",11,0)
 I PCFLG="P" S PCDESC="Parent"
"RTN","IBCNSC02",12,0)
 S TITLE=" Associated Insurance Companies "
"RTN","IBCNSC02",13,0)
 ;
"RTN","IBCNSC02",14,0)
 ;WCJ;IB*2.0*547
"RTN","IBCNSC02",15,0)
 ;S (START,IBLINE)=62
"RTN","IBCNSC02",16,0)
 S (START,IBLINE)=70+(2*IBACMAX)      ; KDM US2487 IB*2.0*592 adjust display item for dental address
"RTN","IBCNSC02",17,0)
 S OFFSET=(40-($L(TITLE)/2))\1+1
"RTN","IBCNSC02",18,0)
 D SET^IBCNSP(START,OFFSET,TITLE,IORVON,IORVOFF)
"RTN","IBCNSC02",19,0)
 ;
"RTN","IBCNSC02",20,0)
 ; no link - display this and get out
"RTN","IBCNSC02",21,0)
 I PCFLG="" D  G DISPX
"RTN","IBCNSC02",22,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC02",23,0)
 . D SET^IBCNSP(IBLINE,3,"This insurance company is not defined as either a Parent or a Child.")
"RTN","IBCNSC02",24,0)
 . Q
"RTN","IBCNSC02",25,0)
 ;
"RTN","IBCNSC02",26,0)
 ; display for either parent or child
"RTN","IBCNSC02",27,0)
 S IBLINE=IBLINE+1
"RTN","IBCNSC02",28,0)
 D SET^IBCNSP(IBLINE,3,"This insurance company is defined as a "_PCDESC_" Insurance Company.")
"RTN","IBCNSC02",29,0)
 ;
"RTN","IBCNSC02",30,0)
 ; child display
"RTN","IBCNSC02",31,0)
 I PCFLG="C" D  G DISPX
"RTN","IBCNSC02",32,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC02",33,0)
 . D SET^IBCNSP(IBLINE,3,"It is associated with the following Parent Insurance Company:")
"RTN","IBCNSC02",34,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC02",35,0)
 . D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC02",36,0)
 . S INSDATA=""
"RTN","IBCNSC02",37,0)
 . I 'PARENT S INSDATA="*** Parent Insurance Company not defined ***"
"RTN","IBCNSC02",38,0)
 . I PARENT D
"RTN","IBCNSC02",39,0)
 .. N AD S AD=$$INSADD(PARENT)   ; get parent ins co data
"RTN","IBCNSC02",40,0)
 .. S INSDATA=$P(AD,U,1)_"  "_$P(AD,U,2)_"  "_$P(AD,U,6)
"RTN","IBCNSC02",41,0)
 .. Q
"RTN","IBCNSC02",42,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC02",43,0)
 . D SET^IBCNSP(IBLINE,8,INSDATA)
"RTN","IBCNSC02",44,0)
 . Q
"RTN","IBCNSC02",45,0)
 ;
"RTN","IBCNSC02",46,0)
 ; parent display
"RTN","IBCNSC02",47,0)
 S CNT=$$PCNT(IBCNS)    ; count # of children
"RTN","IBCNSC02",48,0)
 S TXT="There are "_CNT_" Child Insurance Companies"
"RTN","IBCNSC02",49,0)
 I CNT=1 S TXT="There is 1 Child Insurance Company"
"RTN","IBCNSC02",50,0)
 S TXT=TXT_" associated with it."
"RTN","IBCNSC02",51,0)
 S IBLINE=IBLINE+1
"RTN","IBCNSC02",52,0)
 D SET^IBCNSP(IBLINE,3,TXT)
"RTN","IBCNSC02",53,0)
 S IBLINE=IBLINE+1
"RTN","IBCNSC02",54,0)
 D SET^IBCNSP(IBLINE,3,"Select the ""AC  Associate Companies"" action to enter/edit the children.")
"RTN","IBCNSC02",55,0)
 ;
"RTN","IBCNSC02",56,0)
DISPX ; end with 2 blank lines
"RTN","IBCNSC02",57,0)
 S IBLINE=IBLINE+1
"RTN","IBCNSC02",58,0)
 D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC02",59,0)
 S IBLINE=IBLINE+1
"RTN","IBCNSC02",60,0)
 D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC02",61,0)
 Q
"RTN","IBCNSC02",62,0)
 ;
"RTN","IBCNSC02",63,0)
PARENT(IBCNS) ; Insurance company parent/child management
"RTN","IBCNSC02",64,0)
 ; Calls ListMan screen for parent insurance companies
"RTN","IBCNSC02",65,0)
 NEW PCFLG
"RTN","IBCNSC02",66,0)
 I '$G(IBCNS) G PARENTX
"RTN","IBCNSC02",67,0)
 S PCFLG=$P($G(^DIC(36,IBCNS,3)),U,13)
"RTN","IBCNSC02",68,0)
 ;
"RTN","IBCNSC02",69,0)
 ; special check to remove 3.13 field if 3.14 field is nil
"RTN","IBCNSC02",70,0)
 I PCFLG="C",'$P($G(^DIC(36,IBCNS,3)),U,14) D
"RTN","IBCNSC02",71,0)
 . N DIE,DA,DR S DIE=36,DA=IBCNS,DR="3.13////@" D ^DIE
"RTN","IBCNSC02",72,0)
 . Q
"RTN","IBCNSC02",73,0)
 ;
"RTN","IBCNSC02",74,0)
 ; get out if not a parent insurance company
"RTN","IBCNSC02",75,0)
 I PCFLG'="P" G PARENTX
"RTN","IBCNSC02",76,0)
 ;
"RTN","IBCNSC02",77,0)
 ; call ListMan for parent/children management
"RTN","IBCNSC02",78,0)
 D EN^VALM("IBCNS ASSOCIATIONS LIST")
"RTN","IBCNSC02",79,0)
 KILL ^TMP($J,"IBCNSL")
"RTN","IBCNSC02",80,0)
PARENTX ;
"RTN","IBCNSC02",81,0)
 Q
"RTN","IBCNSC02",82,0)
 ;
"RTN","IBCNSC02",83,0)
HDR ; List header info
"RTN","IBCNSC02",84,0)
 S VALMHDR(1)="Parent Insurance Company:"
"RTN","IBCNSC02",85,0)
 S VALMHDR(2)="     "_$$INSCO(IBCNS)
"RTN","IBCNSC02",86,0)
 S VALMHDR(3)=""
"RTN","IBCNSC02",87,0)
HDRX ;
"RTN","IBCNSC02",88,0)
 Q
"RTN","IBCNSC02",89,0)
 ;
"RTN","IBCNSC02",90,0)
BLD ; Build list contents
"RTN","IBCNSC02",91,0)
 NEW C,INSDATA,INSNAME,STCITY,ENTRY,NM,ST,IEN,X
"RTN","IBCNSC02",92,0)
 KILL ^TMP($J,"IBCNSL")
"RTN","IBCNSC02",93,0)
 S C=0
"RTN","IBCNSC02",94,0)
 F  S C=$O(^DIC(36,"APC",IBCNS,C)) Q:'C  D
"RTN","IBCNSC02",95,0)
 . S INSDATA=$$INSADD(C)
"RTN","IBCNSC02",96,0)
 . S INSNAME=$P(INSDATA,U,1)
"RTN","IBCNSC02",97,0)
 . I INSNAME="" S INSNAME="~UNKNOWN"
"RTN","IBCNSC02",98,0)
 . S STCITY=$P(INSDATA,U,7)
"RTN","IBCNSC02",99,0)
 . I STCITY="" S STCITY="~UNKNOWN"
"RTN","IBCNSC02",100,0)
 . S ^TMP($J,"IBCNSL",1,INSNAME,STCITY,C)=""
"RTN","IBCNSC02",101,0)
 . Q
"RTN","IBCNSC02",102,0)
 ;
"RTN","IBCNSC02",103,0)
 I '$D(^TMP($J,"IBCNSL",1)) D  G BLDX
"RTN","IBCNSC02",104,0)
 . ; no children insurance companies found
"RTN","IBCNSC02",105,0)
 . S ^TMP($J,"IBCNSL",2,1,0)=""
"RTN","IBCNSC02",106,0)
 . S ^TMP($J,"IBCNSL",2,2,0)="     No Children Insurance Companies Found"
"RTN","IBCNSC02",107,0)
 . S VALMCNT=2
"RTN","IBCNSC02",108,0)
 . Q
"RTN","IBCNSC02",109,0)
 ;
"RTN","IBCNSC02",110,0)
 S VALMCNT=0,ENTRY=0
"RTN","IBCNSC02",111,0)
 S NM=""
"RTN","IBCNSC02",112,0)
 F  S NM=$O(^TMP($J,"IBCNSL",1,NM)) Q:NM=""  D
"RTN","IBCNSC02",113,0)
 . S ST=""
"RTN","IBCNSC02",114,0)
 . F  S ST=$O(^TMP($J,"IBCNSL",1,NM,ST)) Q:ST=""  D
"RTN","IBCNSC02",115,0)
 .. S IEN=0
"RTN","IBCNSC02",116,0)
 .. F  S IEN=$O(^TMP($J,"IBCNSL",1,NM,ST,IEN)) Q:'IEN  D
"RTN","IBCNSC02",117,0)
 ... S VALMCNT=VALMCNT+1,ENTRY=ENTRY+1
"RTN","IBCNSC02",118,0)
 ... S X=$$FO^IBCNEUT1($J(ENTRY,3),5)_$$INSCO(IEN)
"RTN","IBCNSC02",119,0)
 ... S ^TMP($J,"IBCNSL",2,VALMCNT,0)=X
"RTN","IBCNSC02",120,0)
 ... S ^TMP($J,"IBCNSL",2,"IDX",VALMCNT,ENTRY)=""
"RTN","IBCNSC02",121,0)
 ... S ^TMP($J,"IBCNSL",3,ENTRY)=IEN_U_VALMCNT
"RTN","IBCNSC02",122,0)
 ... Q
"RTN","IBCNSC02",123,0)
 .. Q
"RTN","IBCNSC02",124,0)
 . Q
"RTN","IBCNSC02",125,0)
BLDX ;
"RTN","IBCNSC02",126,0)
 Q
"RTN","IBCNSC02",127,0)
 ;
"RTN","IBCNSC02",128,0)
LINK ; action protocol IBCNSL LINK used to associate children insurance
"RTN","IBCNSC02",129,0)
 ; companies to the current parent ins co for the list
"RTN","IBCNSC02",130,0)
 NEW DIC,X,Y,DIE,DR,DA,NEWINS,IBSTOP,PAR,DIR,DIRUT,DTOUT,DUOUT,DIROUT
"RTN","IBCNSC02",131,0)
 D FULL^VALM1
"RTN","IBCNSC02",132,0)
 I '$$KCHK^XUSRB("IB EDI INSURANCE EDIT") D  G LINKX
"RTN","IBCNSC02",133,0)
 . W !!?5,"You must hold the IB EDI INSURANCE EDIT key to access this option."
"RTN","IBCNSC02",134,0)
 . D PAUSE^VALM1
"RTN","IBCNSC02",135,0)
 . Q
"RTN","IBCNSC02",136,0)
 ;
"RTN","IBCNSC02",137,0)
 ; lookup ins company
"RTN","IBCNSC02",138,0)
 W !
"RTN","IBCNSC02",139,0)
 S DIC=36,DIC(0)="AEMQ",DIC("A")="Select Insurance Company: "
"RTN","IBCNSC02",140,0)
 S DIC("W")="D INSLIST^IBCNSC02(Y)"
"RTN","IBCNSC02",141,0)
 ; screen - ins co Y is not a parent and also it is not already in the list of children
"RTN","IBCNSC02",142,0)
 S DIC("S")="I $P($G(^DIC(36,Y,3)),U,13)'=""P""&'$D(^DIC(36,""APC"",IBCNS,Y))"
"RTN","IBCNSC02",143,0)
 D ^DIC K DIC
"RTN","IBCNSC02",144,0)
 I +Y'>0 G LINKX
"RTN","IBCNSC02",145,0)
 S NEWINS=+Y
"RTN","IBCNSC02",146,0)
 ;
"RTN","IBCNSC02",147,0)
 ; check to see if this selected insurance company is already a child
"RTN","IBCNSC02",148,0)
 ; for some other parent
"RTN","IBCNSC02",149,0)
 S PAR=+$P($G(^DIC(36,NEWINS,3)),U,14),IBSTOP=0
"RTN","IBCNSC02",150,0)
 I PAR,PAR'=IBCNS D
"RTN","IBCNSC02",151,0)
 . W !
"RTN","IBCNSC02",152,0)
 . S DIR(0)="YO",DIR("B")="No"
"RTN","IBCNSC02",153,0)
 . S DIR("A",1)="Please Note:  The insurance company you selected is currently identified"
"RTN","IBCNSC02",154,0)
 . S DIR("A",2)="as a Child insurance company associated with the following Parent:"
"RTN","IBCNSC02",155,0)
 . S DIR("A",3)=""
"RTN","IBCNSC02",156,0)
 . S DIR("A",4)="     "_$$INSCO(PAR)
"RTN","IBCNSC02",157,0)
 . S DIR("A",5)=""
"RTN","IBCNSC02",158,0)
 . S DIR("A")="OK to proceed and make this switch"
"RTN","IBCNSC02",159,0)
 . D ^DIR K DIR
"RTN","IBCNSC02",160,0)
 . I Y'=1 S IBSTOP=1 Q
"RTN","IBCNSC02",161,0)
 . Q
"RTN","IBCNSC02",162,0)
 I IBSTOP G LINKX
"RTN","IBCNSC02",163,0)
 ;
"RTN","IBCNSC02",164,0)
 ; lock the potential new child ins company
"RTN","IBCNSC02",165,0)
 L +^DIC(36,NEWINS):0 I '$T D LOCKED^IBTRCD1 G LINKX
"RTN","IBCNSC02",166,0)
 ;
"RTN","IBCNSC02",167,0)
 ; update selected child
"RTN","IBCNSC02",168,0)
 S DIE=36,DA=NEWINS,DR="3.13////C;3.14////"_IBCNS D ^DIE
"RTN","IBCNSC02",169,0)
 ;
"RTN","IBCNSC02",170,0)
 ; Copy the IDs from the parent
"RTN","IBCNSC02",171,0)
 D COPY^IBCEPCID(NEWINS)
"RTN","IBCNSC02",172,0)
 ;
"RTN","IBCNSC02",173,0)
 ; unlock
"RTN","IBCNSC02",174,0)
 L -^DIC(36,NEWINS)
"RTN","IBCNSC02",175,0)
 ;
"RTN","IBCNSC02",176,0)
 D BLD   ; rebuild list of children
"RTN","IBCNSC02",177,0)
LINKX ;
"RTN","IBCNSC02",178,0)
 S VALMBCK="R"
"RTN","IBCNSC02",179,0)
 Q
"RTN","IBCNSC02",180,0)
 ;
"RTN","IBCNSC02",181,0)
UNLINK ; action protocol IBCNSL UNLINK used to disassociate selected children
"RTN","IBCNSC02",182,0)
 ; insurance companies from the list.
"RTN","IBCNSC02",183,0)
 NEW DIR,X,Y,DIRUT,DTOUT,DUOUT,DIROUT,IBLST,IBSUB,IBPCE,IBSEL,DA,DIE,DR
"RTN","IBCNSC02",184,0)
 D FULL^VALM1
"RTN","IBCNSC02",185,0)
 I '$$KCHK^XUSRB("IB EDI INSURANCE EDIT") D  G UNLINKX
"RTN","IBCNSC02",186,0)
 . W !!?5,"You must hold the IB EDI INSURANCE EDIT key to access this option."
"RTN","IBCNSC02",187,0)
 . D PAUSE^VALM1
"RTN","IBCNSC02",188,0)
 . Q
"RTN","IBCNSC02",189,0)
 ;
"RTN","IBCNSC02",190,0)
 I '$D(^TMP($J,"IBCNSL",3)) D  G UNLINKX
"RTN","IBCNSC02",191,0)
 . W !!?5,"There are no insurance companies to select." D PAUSE^VALM1
"RTN","IBCNSC02",192,0)
 . Q
"RTN","IBCNSC02",193,0)
 S DIR(0)="LO^1:"_+$O(^TMP($J,"IBCNSL",3,""),-1)
"RTN","IBCNSC02",194,0)
 S DIR("A")="Select Insurance Company(s)"
"RTN","IBCNSC02",195,0)
 W ! D ^DIR K DIR
"RTN","IBCNSC02",196,0)
 I $D(DIRUT) G UNLINKX
"RTN","IBCNSC02",197,0)
 M IBLST=Y
"RTN","IBCNSC02",198,0)
 ;
"RTN","IBCNSC02",199,0)
 W !
"RTN","IBCNSC02",200,0)
 S DIR(0)="YO"
"RTN","IBCNSC02",201,0)
 S DIR("A")="OK to proceed",DIR("B")="No"
"RTN","IBCNSC02",202,0)
 D ^DIR K DIR
"RTN","IBCNSC02",203,0)
 I Y'=1 G UNLINKX
"RTN","IBCNSC02",204,0)
 ;
"RTN","IBCNSC02",205,0)
 F IBSUB=0:1 Q:'$D(IBLST(IBSUB))  F IBPCE=1:1 S IBSEL=$P(IBLST(IBSUB),",",IBPCE) Q:'IBSEL  D
"RTN","IBCNSC02",206,0)
 . S DA=+$G(^TMP($J,"IBCNSL",3,IBSEL)) I 'DA Q
"RTN","IBCNSC02",207,0)
 . S DIE=36,DR="3.13////@;3.14////@" D ^DIE
"RTN","IBCNSC02",208,0)
 . Q
"RTN","IBCNSC02",209,0)
 ;
"RTN","IBCNSC02",210,0)
 D BLD   ; rebuild list of children
"RTN","IBCNSC02",211,0)
UNLINKX ;
"RTN","IBCNSC02",212,0)
 S VALMBCK="R"
"RTN","IBCNSC02",213,0)
 Q
"RTN","IBCNSC02",214,0)
 ;
"RTN","IBCNSC02",215,0)
PCNT(Z) ; count number of children for parent ins co Z
"RTN","IBCNSC02",216,0)
 NEW C,CNT
"RTN","IBCNSC02",217,0)
 S C=0,Z=+$G(Z)
"RTN","IBCNSC02",218,0)
 F CNT=0:1 S C=$O(^DIC(36,"APC",Z,C)) Q:'C
"RTN","IBCNSC02",219,0)
 Q CNT
"RTN","IBCNSC02",220,0)
 ;
"RTN","IBCNSC02",221,0)
INSADD(Z) ; function to return ins co address components
"RTN","IBCNSC02",222,0)
 NEW INSDATA,AD,NM,L1,CITY,ST,ZIP,CITYST,STCITY
"RTN","IBCNSC02",223,0)
 S INSDATA=""
"RTN","IBCNSC02",224,0)
 S AD=$G(^DIC(36,+$G(Z),.11))
"RTN","IBCNSC02",225,0)
 S NM=$P($G(^DIC(36,Z,0)),U,1)
"RTN","IBCNSC02",226,0)
 S L1=$P(AD,U,1),CITY=$P(AD,U,4),ST=$P(AD,U,5),ZIP=$P(AD,U,6)
"RTN","IBCNSC02",227,0)
 I ST S ST=$P($G(^DIC(5,ST,0)),U,2)
"RTN","IBCNSC02",228,0)
 S CITYST=$E(CITY,1,15)_" "_ST
"RTN","IBCNSC02",229,0)
 I CITY'="",ST'="" S CITYST=$E(CITY,1,15)_","_ST
"RTN","IBCNSC02",230,0)
 ;
"RTN","IBCNSC02",231,0)
 S $P(STCITY,"|",1)=ST
"RTN","IBCNSC02",232,0)
 I ST="" S $P(STCITY,"|",1)="~~"
"RTN","IBCNSC02",233,0)
 S $P(STCITY,"|",2)=CITY
"RTN","IBCNSC02",234,0)
 I CITY="" S $P(STCITY,"|",2)="~~~~"
"RTN","IBCNSC02",235,0)
 ;
"RTN","IBCNSC02",236,0)
 S INSDATA=NM_U_L1_U_CITY_U_ST_U_ZIP_U_CITYST_U_STCITY
"RTN","IBCNSC02",237,0)
 ;         1    2    3      4    5     6        7
"RTN","IBCNSC02",238,0)
INSADDX ;
"RTN","IBCNSC02",239,0)
 Q INSDATA
"RTN","IBCNSC02",240,0)
 ;
"RTN","IBCNSC02",241,0)
INSCO(Z) ; return display data for ins co Z
"RTN","IBCNSC02",242,0)
 NEW X,Y
"RTN","IBCNSC02",243,0)
 S Y=$$INSADD(Z)
"RTN","IBCNSC02",244,0)
 S X=$$FO^IBCNEUT1($P(Y,U,1),27)
"RTN","IBCNSC02",245,0)
 S X=X_$$FO^IBCNEUT1($P(Y,U,2),26)
"RTN","IBCNSC02",246,0)
 S X=X_$$FO^IBCNEUT1($P(Y,U,6),18)
"RTN","IBCNSC02",247,0)
INSCOX ;
"RTN","IBCNSC02",248,0)
 Q X
"RTN","IBCNSC02",249,0)
 ;
"RTN","IBCNSC02",250,0)
INSLIST(INS) ; insurance company lister for ^DIC call
"RTN","IBCNSC02",251,0)
 NEW Z
"RTN","IBCNSC02",252,0)
 S Z=$$INSADD(INS)
"RTN","IBCNSC02",253,0)
 W ?27,$E($P(Z,U,2),1,20)   ; address line 1
"RTN","IBCNSC02",254,0)
 W ?47,"  ",$P(Z,U,6)       ; city, state
"RTN","IBCNSC02",255,0)
INSLISTX ;
"RTN","IBCNSC02",256,0)
 Q
"RTN","IBCNSC02",257,0)
 ;
"RTN","IBCNSC1")
0^120^B84876312^B84078544
"RTN","IBCNSC1",1,0)
IBCNSC1 ;ALB/NLR - IBCNS INSURANCE COMPANY ;23-MAR-93
"RTN","IBCNSC1",2,0)
 ;;2.0;INTEGRATED BILLING;**62,137,232,291,320,348,349,371,400,519,516,547,592**;21-MAR-94;Build 58
"RTN","IBCNSC1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSC1",4,0)
 ;
"RTN","IBCNSC1",5,0)
% G EN^IBCNSC
"RTN","IBCNSC1",6,0)
 ;
"RTN","IBCNSC1",7,0)
AI ; -- (In)Activate Company
"RTN","IBCNSC1",8,0)
 D FULL^VALM1 W !!
"RTN","IBCNSC1",9,0)
 I '$D(^XUSEC("IB INSURANCE SUPERVISOR",DUZ)) D SORRY G EXIT
"RTN","IBCNSC1",10,0)
 D ^IBCNSC2
"RTN","IBCNSC1",11,0)
 G EXIT
"RTN","IBCNSC1",12,0)
CC ; -- Change Insurance Company
"RTN","IBCNSC1",13,0)
 D FULL^VALM1 W !!
"RTN","IBCNSC1",14,0)
 S IBCNS1=IBCNS K IBCNS D INSCO^IBCNSC
"RTN","IBCNSC1",15,0)
 I '$D(IBCNS) S IBCNS=IBCNS1
"RTN","IBCNSC1",16,0)
 K IBCNS1,VALMQUIT
"RTN","IBCNSC1",17,0)
 G EXIT
"RTN","IBCNSC1",18,0)
EA ; -- Billing,Claims,Appeals,Inquiry,Telephone,Main,Remarks,Synonyms
"RTN","IBCNSC1",19,0)
 D FULL^VALM1
"RTN","IBCNSC1",20,0)
 ;
"RTN","IBCNSC1",21,0)
 ; IB*2*320 - check key for associate company action
"RTN","IBCNSC1",22,0)
 I $G(IBY)=",13,",'$$KCHK^XUSRB("IB EDI INSURANCE EDIT") D  G EXIT
"RTN","IBCNSC1",23,0)
 . W !!?5,"You must hold the IB EDI INSURANCE EDIT key to access this option."
"RTN","IBCNSC1",24,0)
 . D PAUSE^VALM1
"RTN","IBCNSC1",25,0)
 . Q
"RTN","IBCNSC1",26,0)
 ;
"RTN","IBCNSC1",27,0)
 W !!
"RTN","IBCNSC1",28,0)
 D MAIN
"RTN","IBCNSC1",29,0)
 ;
"RTN","IBCNSC1",30,0)
 ; -- was company deleted
"RTN","IBCNSC1",31,0)
 I '$D(^DIC(36,IBCNS)) W !!,"<DELETED>",!! S VALMQUIT="" Q
"RTN","IBCNSC1",32,0)
 ;
"RTN","IBCNSC1",33,0)
EXIT ;
"RTN","IBCNSC1",34,0)
 D HDR^IBCNSC,BLD^IBCNSC
"RTN","IBCNSC1",35,0)
 S VALMBCK="R"
"RTN","IBCNSC1",36,0)
 Q
"RTN","IBCNSC1",37,0)
MAIN ; -- Call edit template
"RTN","IBCNSC1",38,0)
 N IBEDIKEY,Z
"RTN","IBCNSC1",39,0)
 L +^DIC(36,+IBCNS):5 I '$T D LOCKED^IBTRCD1 G MAINQ
"RTN","IBCNSC1",40,0)
 I $G(IBY)=",12," D FACID
"RTN","IBCNSC1",41,0)
 ;JWS;IB*2.0*592;add field .15 (piece 15) Dental EDI Payer ID
"RTN","IBCNSC1",42,0)
 ;IA# 5292
"RTN","IBCNSC1",43,0)
 F Z=1,2,4,9,13,14,15 S IBEDIKEY(Z)=$P($G(^DIC(36,+IBCNS,3)),U,Z)   ; save EDI data fields
"RTN","IBCNSC1",44,0)
 F Z=1:1:8 S IBEDIKEY(Z,6)=$P($G(^DIC(36,+IBCNS,6)),U,Z)   ; save EDI data fields
"RTN","IBCNSC1",45,0)
 I $G(IBY)'=",12," N DIE,DA,DR S DIE="^DIC(36,",(DA,Y)=IBCNS,DR="[IBEDIT INS CO1]" D ^DIE K DIE S:$D(Y) IB("^")=1 D:$TR($P($G(^DIC(36,IBCNS,6)),U,1,8),U)]"" CUIDS(IBCNS)
"RTN","IBCNSC1",46,0)
 I $G(IBY)=",12," D EDITID^IBCEP(+IBCNS)
"RTN","IBCNSC1",47,0)
 I $F(",6,1,",$G(IBY)) D CLEANIDS^IBCNSC(+IBCNS)   ;clean up any errant nodes on alternate payert IDS
"RTN","IBCNSC1",48,0)
 I $F(",6,13,",$G(IBY)) D PARENT^IBCNSC02(+IBCNS)   ; parent/child management
"RTN","IBCNSC1",49,0)
 L -^DIC(36,+IBCNS)
"RTN","IBCNSC1",50,0)
 ; IB*2.0*519:  If field 3.02 or 3.04 has changed, trigger HL7 to update the NIF
"RTN","IBCNSC1",51,0)
 I (IBEDIKEY(2)'=$P($G(^DIC(36,+IBCNS,3)),U,2))!(IBEDIKEY(4)'=$P($G(^DIC(36,+IBCNS,3)),U,4)) D EXR^IBCNHUT1(IBCNS),SEND^IBCNHHLO(IBCNS)
"RTN","IBCNSC1",52,0)
MAINQ Q
"RTN","IBCNSC1",53,0)
 ;
"RTN","IBCNSC1",54,0)
FACID ; -- Edit facility ids
"RTN","IBCNSC1",55,0)
 D FACID^IBCEP2B(+IBCNS,"E")
"RTN","IBCNSC1",56,0)
 Q
"RTN","IBCNSC1",57,0)
 ;
"RTN","IBCNSC1",58,0)
SORRY ; -- can't inactivate, don't have key
"RTN","IBCNSC1",59,0)
 W !!,"You do not have access to Inactivate entries.  See your application coordinator.",! D PAUSE^VALM1
"RTN","IBCNSC1",60,0)
 Q
"RTN","IBCNSC1",61,0)
PRESCR ;
"RTN","IBCNSC1",62,0)
 N OFFSET,START,IBCNS18,IBADD
"RTN","IBCNSC1",63,0)
 ;
"RTN","IBCNSC1",64,0)
 ;WCJ;IB*2.0*547;Call New API
"RTN","IBCNSC1",65,0)
 ;S IBCNS18=$$ADDRESS^IBCNSC0(IBCNS,.18,11)
"RTN","IBCNSC1",66,0)
 S IBCNS18=$$ADD2^IBCNSC0(IBCNS,.18,11)
"RTN","IBCNSC1",67,0)
 ;
"RTN","IBCNSC1",68,0)
 ;WCJ;IB*2.0*547
"RTN","IBCNSC1",69,0)
 ;S START=41,OFFSET=2
"RTN","IBCNSC1",70,0)
 S START=42+(2*$G(IBACMAX)),OFFSET=2
"RTN","IBCNSC1",71,0)
PRESCRAD ; KDM US2487 IB*2.0*592  call in tag from IBCNSI 
"RTN","IBCNSC1",72,0)
 D SET^IBCNSP(START,OFFSET+19," Prescription Claims Office Information ",IORVON,IORVOFF)
"RTN","IBCNSC1",73,0)
 D SET^IBCNSP(START+1,OFFSET," Company Name: "_$P($G(^DIC(36,+$P(IBCNS18,"^",7),0)),"^",1))
"RTN","IBCNSC1",74,0)
 D SET^IBCNSP(START+2,OFFSET,"       Street: "_$P(IBCNS18,"^",1))
"RTN","IBCNSC1",75,0)
 D SET^IBCNSP(START+3,OFFSET,"     Street 2: "_$P(IBCNS18,"^",2))
"RTN","IBCNSC1",76,0)
 ; D SET^IBCNSP(START+4,OFFSET,"Claim Off. ID: "_$P(IBCNS18,"^",11))
"RTN","IBCNSC1",77,0)
 S OFFSET=45
"RTN","IBCNSC1",78,0)
 D SET^IBCNSP(START+1,OFFSET,"     Street 3: "_$P(IBCNS18,"^",3)) S IBADD=1
"RTN","IBCNSC1",79,0)
 D SET^IBCNSP(START+1+IBADD,OFFSET,"   City/State: "_$E($P(IBCNS18,"^",4),1,15)_$S($P(IBCNS18,"^",4)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCNS18,"^",5),0)),"^",2)_" "_$E($P(IBCNS18,"^",6),1,5))
"RTN","IBCNSC1",80,0)
 D SET^IBCNSP(START+2+IBADD,OFFSET,"        Phone: "_$P(IBCNS18,"^",8))
"RTN","IBCNSC1",81,0)
 D SET^IBCNSP(START+3+IBADD,OFFSET,"          Fax: "_$P(IBCNS18,"^",9))
"RTN","IBCNSC1",82,0)
 Q
"RTN","IBCNSC1",83,0)
 ;
"RTN","IBCNSC1",84,0)
PROVID N OFFSET,START,IBCNS4,IBCNS3,IBDISP,Z,LINE
"RTN","IBCNSC1",85,0)
 S START=$O(^TMP("IBCNSC",$J,""),-1)+1
"RTN","IBCNSC1",86,0)
 S (IB1ST("PROVID"),LINE)=START
"RTN","IBCNSC1",87,0)
 S OFFSET=2,IBCNS4=$G(^DIC(36,IBCNS,4)),IBCNS3=$G(^(3))
"RTN","IBCNSC1",88,0)
 ;       
"RTN","IBCNSC1",89,0)
 D SET^IBCNSP(LINE,OFFSET+25,"Provider IDs",IORVON,IORVOFF)
"RTN","IBCNSC1",90,0)
 S LINE=LINE+1,OFFSET=1
"RTN","IBCNSC1",91,0)
 D SET^IBCNSP(LINE,OFFSET,"Billing Provider Secondary ID")
"RTN","IBCNSC1",92,0)
 ;
"RTN","IBCNSC1",93,0)
 N Z,Z0,Z1,IBS,I,DIV,FT,CU,CUF,DIVISION,FORMTYPE,PIDT
"RTN","IBCNSC1",94,0)
 S Z=0 F  S Z=$O(^IBA(355.92,"B",+IBCNS,Z)) Q:'Z  D
"RTN","IBCNSC1",95,0)
 . S Z0=$G(^IBA(355.92,Z,0))
"RTN","IBCNSC1",96,0)
 . Q:'$P(Z0,U,6)!($P(Z0,U,7)="")  ; Quit if no provider id or id type
"RTN","IBCNSC1",97,0)
 . Q:'($P(Z0,U,8)="E")
"RTN","IBCNSC1",98,0)
 . S IBS(+$P(Z0,U,5),+$P(Z0,U,3),+$P(Z0,U,4))=$P(Z0,U,6)_U_$P(Z0,U,7)
"RTN","IBCNSC1",99,0)
 ;
"RTN","IBCNSC1",100,0)
 S DIV="" F  S DIV=$O(IBS(DIV)) Q:DIV=""  D
"RTN","IBCNSC1",101,0)
 . S DIVISION=$$DIV^IBCEP7(DIV)
"RTN","IBCNSC1",102,0)
 . S CU="",CUF=0 F  S CU=$O(IBS(DIV,CU)) Q:CU=""  D
"RTN","IBCNSC1",103,0)
 .. S FT="" F  S FT=$O(IBS(DIV,CU,FT)) Q:FT=""  D
"RTN","IBCNSC1",104,0)
 ... S FORMTYPE=$S(FT=1:"UB-04",FT=2:"1500",1:"UNKNOWN")
"RTN","IBCNSC1",105,0)
 ... S LINE=LINE+1
"RTN","IBCNSC1",106,0)
 ... I 'CUF,+CU S CUF=1 S TEXT=$P(DIVISION,"/")_" Care Units :",OFFSET=5 D SET^IBCNSP(LINE,OFFSET,TEXT) S LINE=LINE+1
"RTN","IBCNSC1",107,0)
 ... I CU=0 S TEXT=DIVISION_"/"_FORMTYPE_": "_$$GET1^DIQ(355.97,$P(IBS(DIV,CU,FT),U),.03,"E")_" "_$P(IBS(DIV,CU,FT),U,2),OFFSET=2
"RTN","IBCNSC1",108,0)
 ... I +CU S TEXT=$$EXPAND^IBTRE(355.92,.03,CU)_"/"_FORMTYPE_": "_$$GET1^DIQ(355.97,$P(IBS(DIV,CU,FT),U),.03,"E")_" "_$P(IBS(DIV,CU,FT),U,2),OFFSET=5
"RTN","IBCNSC1",109,0)
 ... D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",110,0)
 ;
"RTN","IBCNSC1",111,0)
 S LINE=LINE+1 D SET^IBCNSP(LINE,2," ")
"RTN","IBCNSC1",112,0)
 ;
"RTN","IBCNSC1",113,0)
 K IBS
"RTN","IBCNSC1",114,0)
 S OFFSET=1,LINE=LINE+1
"RTN","IBCNSC1",115,0)
 D SET^IBCNSP(LINE,OFFSET,"Additional Billing Provider Secondary IDs")
"RTN","IBCNSC1",116,0)
 S Z=0 F  S Z=$O(^IBA(355.92,"B",+IBCNS,Z)) Q:'Z  D
"RTN","IBCNSC1",117,0)
 . S Z0=$G(^IBA(355.92,Z,0))
"RTN","IBCNSC1",118,0)
 . Q:'$P(Z0,U,6)!($P(Z0,U,7)="")  ; Quit if no provider id or id type
"RTN","IBCNSC1",119,0)
 . Q:'($P(Z0,U,8)="A")
"RTN","IBCNSC1",120,0)
 . ; IBS(DIVISION,FORMTYPE,IDTYPE)=ID
"RTN","IBCNSC1",121,0)
 . S IBS(+$P(Z0,U,5),+$P(Z0,U,4),+$P(Z0,U,6))=$P(Z0,U,7)
"RTN","IBCNSC1",122,0)
 ;
"RTN","IBCNSC1",123,0)
 S DIVISION=$$DIV^IBCEP7(0)
"RTN","IBCNSC1",124,0)
 S DIV="" F  S DIV=$O(IBS(DIV)) Q:DIV=""  D
"RTN","IBCNSC1",125,0)
 . S FT="" F  S FT=$O(IBS(DIV,FT)) Q:FT=""  D
"RTN","IBCNSC1",126,0)
 .. S FORMTYPE=$S(FT=1:"UB-04",FT=2:"1500",1:"UNKNOWN")
"RTN","IBCNSC1",127,0)
 .. S TEXT=DIVISION_"/"_FORMTYPE_": "
"RTN","IBCNSC1",128,0)
 .. S LINE=LINE+1,OFFSET=2
"RTN","IBCNSC1",129,0)
 .. D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",130,0)
 .. S PIDT="" F  S PIDT=$O(IBS(DIV,FT,PIDT)) Q:PIDT=""  D
"RTN","IBCNSC1",131,0)
 ... S LINE=LINE+1
"RTN","IBCNSC1",132,0)
 ... S TEXT=$$GET1^DIQ(355.97,PIDT,.03,"E")_" "_IBS(DIV,FT,PIDT),OFFSET=5
"RTN","IBCNSC1",133,0)
 ... D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",134,0)
 ;
"RTN","IBCNSC1",135,0)
 S LINE=LINE+1 D SET^IBCNSP(LINE,2," ")
"RTN","IBCNSC1",136,0)
 ;
"RTN","IBCNSC1",137,0)
 K IBS
"RTN","IBCNSC1",138,0)
 S OFFSET=1,LINE=LINE+1
"RTN","IBCNSC1",139,0)
 D SET^IBCNSP(LINE,OFFSET,"VA-Laboratory or Facility Secondary IDs")
"RTN","IBCNSC1",140,0)
 S Z=0 F  S Z=$O(^IBA(355.92,"B",+IBCNS,Z)) Q:'Z  D
"RTN","IBCNSC1",141,0)
 . S Z0=$G(^IBA(355.92,Z,0))
"RTN","IBCNSC1",142,0)
 . Q:'$P(Z0,U,6)!($P(Z0,U,7)="")  ; Quit if no provider id or id type
"RTN","IBCNSC1",143,0)
 . Q:'($P(Z0,U,8)="LF")
"RTN","IBCNSC1",144,0)
 . ; IBS(DIVISION,FORMTYPE,IDTYPE)=ID
"RTN","IBCNSC1",145,0)
 . S IBS(+$P(Z0,U,5),+$P(Z0,U,4),+$P(Z0,U,6))=$P(Z0,U,7)
"RTN","IBCNSC1",146,0)
 ;
"RTN","IBCNSC1",147,0)
 S DIVISION=$$DIV^IBCEP7(0)
"RTN","IBCNSC1",148,0)
 S DIV="" F  S DIV=$O(IBS(DIV)) Q:DIV=""  D
"RTN","IBCNSC1",149,0)
 . S FT="" F  S FT=$O(IBS(DIV,FT)) Q:FT=""  D
"RTN","IBCNSC1",150,0)
 .. S FORMTYPE=$S(FT=1:"UB-04",FT=2:"1500",1:"UNKNOWN")
"RTN","IBCNSC1",151,0)
 .. S TEXT=DIVISION_"/"_FORMTYPE_": "
"RTN","IBCNSC1",152,0)
 .. S LINE=LINE+1,OFFSET=2
"RTN","IBCNSC1",153,0)
 .. D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",154,0)
 .. S PIDT="" F  S PIDT=$O(IBS(DIV,FT,PIDT)) Q:PIDT=""  D
"RTN","IBCNSC1",155,0)
 ... S LINE=LINE+1
"RTN","IBCNSC1",156,0)
 ... ;S TEXT=$$EXPAND^IBTRE(355.92,.06,PIDT)_" "_IBS(DIV,FT,PIDT),OFFSET=5
"RTN","IBCNSC1",157,0)
 ... S TEXT=$$GET1^DIQ(355.97,PIDT,.03,"E")_" "_IBS(DIV,FT,PIDT),OFFSET=5
"RTN","IBCNSC1",158,0)
 ... D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",159,0)
 ;
"RTN","IBCNSC1",160,0)
 S LINE=LINE+1 D SET^IBCNSP(LINE,2," ")
"RTN","IBCNSC1",161,0)
 S LINE=LINE+1 D SET^IBCNSP(LINE,2," ")
"RTN","IBCNSC1",162,0)
 S OFFSET=2
"RTN","IBCNSC1",163,0)
 S LINE=LINE+1 D SET^IBCNSP(LINE,OFFSET+25,"ID Parameters",IORVON,IORVOFF)
"RTN","IBCNSC1",164,0)
 ;
"RTN","IBCNSC1",165,0)
 S IBCNS4=$G(^DIC(36,IBCNS,4)),IBCNS3=$G(^(3)),OFFSET=1
"RTN","IBCNSC1",166,0)
 S TEXT="Attending/Rendering Provider Secondary ID Qualifier (1500): "_$$EXPAND^IBTRE(36,4.01,+$P(IBCNS4,U))
"RTN","IBCNSC1",167,0)
 S LINE=LINE+1
"RTN","IBCNSC1",168,0)
 D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",169,0)
 ;
"RTN","IBCNSC1",170,0)
 S TEXT="Attending/Rendering Provider Secondary ID Qualifier (UB-04): "_$$EXPAND^IBTRE(36,4.02,+$P(IBCNS4,U,2))
"RTN","IBCNSC1",171,0)
 S LINE=LINE+1
"RTN","IBCNSC1",172,0)
 D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",173,0)
 ;
"RTN","IBCNSC1",174,0)
 S TEXT="Attending/Rendering Secondary ID Requirement: "_$$EXPAND^IBTRE(36,4.03,+$P(IBCNS4,U,3))
"RTN","IBCNSC1",175,0)
 S LINE=LINE+1
"RTN","IBCNSC1",176,0)
 D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",177,0)
 ;
"RTN","IBCNSC1",178,0)
 S TEXT="Referring Provider Secondary ID Qualifier (1500): "_$$EXPAND^IBTRE(36,4.04,+$P(IBCNS4,U,4))
"RTN","IBCNSC1",179,0)
 S LINE=LINE+1
"RTN","IBCNSC1",180,0)
 D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",181,0)
 ;
"RTN","IBCNSC1",182,0)
 S TEXT="Referring Provider Secondary ID Requirement: "_$$EXPAND^IBTRE(36,4.05,+$P(IBCNS4,U,5))
"RTN","IBCNSC1",183,0)
 S LINE=LINE+1
"RTN","IBCNSC1",184,0)
 D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",185,0)
 ;
"RTN","IBCNSC1",186,0)
 S TEXT="Use Att/Rend ID as Billing Provider Sec. ID (1500): "_$$EXPAND^IBTRE(36,4.06,+$P(IBCNS4,U,6))
"RTN","IBCNSC1",187,0)
 S LINE=LINE+1
"RTN","IBCNSC1",188,0)
 D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",189,0)
 ;
"RTN","IBCNSC1",190,0)
 S TEXT="Use Att/Rend ID as Billing Provider Sec. ID (UB-04): "_$$EXPAND^IBTRE(36,4.08,+$P(IBCNS4,U,8))
"RTN","IBCNSC1",191,0)
 S LINE=LINE+1
"RTN","IBCNSC1",192,0)
 D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",193,0)
 ;
"RTN","IBCNSC1",194,0)
 ; MRD;IB*2.0*516 - Marked fields 4.07, 4.11, 4.12 and 4.13 for
"RTN","IBCNSC1",195,0)
 ; deletion and removed all references to them.
"RTN","IBCNSC1",196,0)
 ;S TEXT="Always use main VAMC as Billing Provider (1500)?: "_$$EXPAND^IBTRE(36,4.11,+$P(IBCNS4,U,11))
"RTN","IBCNSC1",197,0)
 ;S LINE=LINE+1
"RTN","IBCNSC1",198,0)
 ;D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",199,0)
 ;
"RTN","IBCNSC1",200,0)
 ;S TEXT="Always use main VAMC as Billing Provider (UB-04)?: "_$$EXPAND^IBTRE(36,4.12,+$P(IBCNS4,U,12))
"RTN","IBCNSC1",201,0)
 ;S LINE=LINE+1
"RTN","IBCNSC1",202,0)
 ;D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",203,0)
 ;
"RTN","IBCNSC1",204,0)
 ;I $P(IBCNS4,U,11)!($P(IBCNS4,U,12)) D
"RTN","IBCNSC1",205,0)
 ;.S TEXT="Send VA Lab/Facility IDs or Facility Data for VAMC?: "_$$EXPAND^IBTRE(36,4.07,+$P(IBCNS4,U,7))
"RTN","IBCNSC1",206,0)
 ;.S LINE=LINE+1
"RTN","IBCNSC1",207,0)
 ;.D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",208,0)
 ;.;
"RTN","IBCNSC1",209,0)
 ;.S TEXT="Use the Billing Provider (VAMC) Name and Street Address?: "_$$EXPAND^IBTRE(36,4.13,+$P(IBCNS4,U,13))
"RTN","IBCNSC1",210,0)
 ;.S LINE=LINE+1
"RTN","IBCNSC1",211,0)
 ;.D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",212,0)
 ;.Q
"RTN","IBCNSC1",213,0)
 ;
"RTN","IBCNSC1",214,0)
 S TEXT="Transmit no Billing Provider Sec. ID for the Electronic Plan Types: "
"RTN","IBCNSC1",215,0)
 S LINE=LINE+1
"RTN","IBCNSC1",216,0)
 D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",217,0)
 ;
"RTN","IBCNSC1",218,0)
 N TAR,ERR,IBCT
"RTN","IBCNSC1",219,0)
 D LIST^DIC(36.013,","_IBCNS_",",".01",,10,,,,,,"TAR","ERR")
"RTN","IBCNSC1",220,0)
 F IBCT=1:1:+$G(TAR("DILIST",0)) D
"RTN","IBCNSC1",221,0)
 . S TEXT=TAR("DILIST",1,IBCT)
"RTN","IBCNSC1",222,0)
 . S LINE=LINE+1
"RTN","IBCNSC1",223,0)
 . D SET^IBCNSP(LINE,OFFSET,TEXT)
"RTN","IBCNSC1",224,0)
 ;
"RTN","IBCNSC1",225,0)
 S LINE=LINE+1 D SET^IBCNSP(LINE,2," ")
"RTN","IBCNSC1",226,0)
 S LINE=LINE+1 D SET^IBCNSP(LINE,2," ")
"RTN","IBCNSC1",227,0)
 Q
"RTN","IBCNSC1",228,0)
 ;       
"RTN","IBCNSC1",229,0)
INSDEF(IBINS,IBPTYP) ; Returns the default id # for an ins co, if possible
"RTN","IBCNSC1",230,0)
 N X
"RTN","IBCNSC1",231,0)
 S X=""
"RTN","IBCNSC1",232,0)
 I IBINS,IBPTYP S X=$P($G(^IBA(355.91,+$O(^IBA(355.91,"AC",IBINS,IBPTYP,"*N/A*","")),0)),U,7)
"RTN","IBCNSC1",233,0)
 Q X
"RTN","IBCNSC1",234,0)
 ;
"RTN","IBCNSC1",235,0)
CUIDS(IBCNS) ;
"RTN","IBCNSC1",236,0)
 N DIE,DA,DR,PIECE,DAT6,Y
"RTN","IBCNSC1",237,0)
 S DAT6=$P(^DIC(36,IBCNS,6),U,1,8) ; get the Payer IDs
"RTN","IBCNSC1",238,0)
 ;
"RTN","IBCNSC1",239,0)
 ; Make sure each qualifier has an ID and vice versa
"RTN","IBCNSC1",240,0)
 F PIECE=1,3,5,7 D
"RTN","IBCNSC1",241,0)
 . I $TR($P(DAT6,U,PIECE,PIECE+1),U)="" Q  ; both blank
"RTN","IBCNSC1",242,0)
 . I $P(DAT6,U,PIECE)]"",$P(DAT6,U,PIECE+1)]"" Q  ; both have data
"RTN","IBCNSC1",243,0)
 . S DIE="^DIC(36,",(DA,Y)=IBCNS,DR="6.0"_$S($P(DAT6,U,PIECE)]"":PIECE,1:PIECE+1)_"////@"
"RTN","IBCNSC1",244,0)
 . D ^DIE K DIE
"RTN","IBCNSC1",245,0)
 ;
"RTN","IBCNSC1",246,0)
 S DAT6=$P($G(^DIC(36,IBCNS,6)),U,1,8) ; get the Payer IDs again since they may have changed above.
"RTN","IBCNSC1",247,0)
 ;
"RTN","IBCNSC1",248,0)
 ; Make sure the first pair of ID/Qual are populated if the 2nd pair is.  If not, move em over.
"RTN","IBCNSC1",249,0)
 ; This is done for institutional then professional
"RTN","IBCNSC1",250,0)
 F PIECE=1,5 D
"RTN","IBCNSC1",251,0)
 . I $P(DAT6,U,PIECE)]"" Q  ; already has set one
"RTN","IBCNSC1",252,0)
 . I $P(DAT6,U,PIECE+2)="" Q  ; has no second set
"RTN","IBCNSC1",253,0)
 . S DIE="^DIC(36,",(DA,Y)=IBCNS
"RTN","IBCNSC1",254,0)
 . ; deleting the qualifier triggers deletion of the ID
"RTN","IBCNSC1",255,0)
 . S DR="6.0"_PIECE_"////"_$P(DAT6,U,PIECE+2)_";6.0"_(PIECE+1)_"////"_$P(DAT6,U,PIECE+3)_";6.0"_(PIECE+2)_"////@"
"RTN","IBCNSC1",256,0)
 . D ^DIE K DIE
"RTN","IBCNSC1",257,0)
 Q
"RTN","IBCNSCD1")
0^121^B19855497^B18480208
"RTN","IBCNSCD1",1,0)
IBCNSCD1 ;ALB/CPM - DELETE INSURANCE COMPANY (CON'T) ; 02-FEB-95
"RTN","IBCNSCD1",2,0)
 ;;2.0;INTEGRATED BILLING;**28,46,80,592**;21-MAR-94;Build 58
"RTN","IBCNSCD1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSCD1",4,0)
 ; 
"RTN","IBCNSCD1",5,0)
DQ ; Queued entry point for the final clean-up job.
"RTN","IBCNSCD1",6,0)
 ;
"RTN","IBCNSCD1",7,0)
 K ^TMP($J,"IBCNSCD")
"RTN","IBCNSCD1",8,0)
 L +^IB("IBCNSCD"):5 E  G DDQ ;    another clean-up job got started
"RTN","IBCNSCD1",9,0)
 S IBC=0 F  S IBC=$O(^DIC(36,"ADEL",IBC)) Q:'IBC  S ^TMP($J,"IBCNSCD",IBC)=$P($G(^DIC(36,IBC,5)),"^",2)
"RTN","IBCNSCD1",10,0)
 I '$D(^TMP($J,"IBCNSCD")) G DDQ ; no companies to be deleted
"RTN","IBCNSCD1",11,0)
 ;
"RTN","IBCNSCD1",12,0)
 D NOW^%DTC S IBBDT=%
"RTN","IBCNSCD1",13,0)
 ;
"RTN","IBCNSCD1",14,0)
 ; - dispositions
"RTN","IBCNSCD1",15,0)
 S DFN=0 F  S DFN=$O(^DPT(DFN)) Q:'DFN  S IBC=0 F  S IBC=$O(^DPT(DFN,"DIS",IBC)) Q:'IBC  S IBCO=$P($G(^(IBC,2)),"^",6) I IBCO,$D(^TMP($J,"IBCNSCD",IBCO)) D
"RTN","IBCNSCD1",16,0)
 .S $P(^DPT(DFN,"DIS",IBC,2),"^",6)=$G(^TMP($J,"IBCNSCD",IBCO))
"RTN","IBCNSCD1",17,0)
 .S IBCT("DIS")=$G(IBCT("DIS"))+1
"RTN","IBCNSCD1",18,0)
 .I $G(^TMP($J,"IBCNSCD",IBCO))="" S IBCT("DIS",DFN,IBC)=""
"RTN","IBCNSCD1",19,0)
 ;
"RTN","IBCNSCD1",20,0)
 ; - insurance companies
"RTN","IBCNSCD1",21,0)
 S IBC=0 F  S IBC=$O(^DIC(36,IBC)) Q:'IBC  D
"RTN","IBCNSCD1",22,0)
 .;JWS;IB*2.0*592;add Dental Ins address
"RTN","IBCNSCD1",23,0)
 .;IA# 5292
"RTN","IBCNSCD1",24,0)
 .S IB0=$G(^DIC(36,IBC,0)),IB12=$G(^(.12)),IB13=$G(^(.13)),IB14=$G(^(.14)),IB16=$G(^(.16)),IB18=$G(^(.18)),IB19=$G(^(.19))
"RTN","IBCNSCD1",25,0)
 .K IBV
"RTN","IBCNSCD1",26,0)
 .I $P(IB0,"^",16),$D(^TMP($J,"IBCNSCD",$P(IB0,"^",16))) S IBV(0)="16^"_^($P(IB0,"^",16))
"RTN","IBCNSCD1",27,0)
 .I $P(IB12,"^",7),$D(^TMP($J,"IBCNSCD",$P(IB12,"^",7))) S IBV(.12)="7^"_^($P(IB12,"^",7))
"RTN","IBCNSCD1",28,0)
 .I $P(IB13,"^",9),$D(^TMP($J,"IBCNSCD",$P(IB13,"^",9))) S IBV(.13)="9^"_^($P(IB13,"^",9))
"RTN","IBCNSCD1",29,0)
 .I $P(IB14,"^",7),$D(^TMP($J,"IBCNSCD",$P(IB14,"^",7))) S IBV(.14)="7^"_^($P(IB14,"^",7))
"RTN","IBCNSCD1",30,0)
 .I $P(IB16,"^",7),$D(^TMP($J,"IBCNSCD",$P(IB16,"^",7))) S IBV(.16)="7^"_^($P(IB16,"^",7))
"RTN","IBCNSCD1",31,0)
 .I $P(IB18,"^",7),$D(^TMP($J,"IBCNSCD",$P(IB18,"^",7))) S IBV(.18)="7^"_^($P(IB18,"^",7))
"RTN","IBCNSCD1",32,0)
 .;JWS;IB*2.0*592;add Dental Ins address
"RTN","IBCNSCD1",33,0)
 .I $P(IB19,"^",7),$D(^TMP($J,"IBCNSCD",$P(IB19,"^",7))) S IBV(.19)="7^"_^($P(IB19,"^",7))
"RTN","IBCNSCD1",34,0)
 .Q:'$D(IBV)
"RTN","IBCNSCD1",35,0)
 .;
"RTN","IBCNSCD1",36,0)
 .; - delete or repoint
"RTN","IBCNSCD1",37,0)
 .S IBX="" F  S IBX=$O(IBV(IBX)) Q:IBX=""  D
"RTN","IBCNSCD1",38,0)
 ..S $P(^DIC(36,IBC,IBX),"^",+IBV(IBX))=$P(IBV(IBX),"^",2)
"RTN","IBCNSCD1",39,0)
 ..S IBCT("INS",IBX)=$G(IBCT("INS",IBX))+1
"RTN","IBCNSCD1",40,0)
 ..I $P(IBV(IBX),"^",2)="" S IBCT("INS",IBX,IBC)=""
"RTN","IBCNSCD1",41,0)
 ;
"RTN","IBCNSCD1",42,0)
 ; - insurance reviews
"RTN","IBCNSCD1",43,0)
 S IBC=0 F  S IBC=$O(^IBT(356.2,IBC)) Q:'IBC  S IBCO=$P($G(^(IBC,0)),"^",8) I IBCO,$D(^TMP($J,"IBCNSCD",IBCO)) S IBCD=$G(^IBT(356.2,IBC,0)) D
"RTN","IBCNSCD1",44,0)
 .S IBVAL=$G(^TMP($J,"IBCNSCD",IBCO)) I 'IBVAL S IBVAL="@"
"RTN","IBCNSCD1",45,0)
 .S DA=IBC,DR=".08////"_IBVAL,DIE="^IBT(356.2," D ^DIE K DA,DIE,DR
"RTN","IBCNSCD1",46,0)
 .S IBCT("IR")=$G(IBCT("IR"))+1
"RTN","IBCNSCD1",47,0)
 .I IBVAL="@" S IBCT("IR",+$P(IBCD,"^",5),+IBCD)=""
"RTN","IBCNSCD1",48,0)
 ;
"RTN","IBCNSCD1",49,0)
 ; - bills
"RTN","IBCNSCD1",50,0)
 S IBC=0 F  S IBC=$O(^DGCR(399,IBC)) Q:'IBC  S IBCNS=0 F  S IBCNS=$O(^DGCR(399,IBC,"AIC",IBCNS)) Q:'IBCNS  I $D(^TMP($J,"IBCNSCD",IBCNS)) S (IBREP,IBVAL)=$G(^(IBCNS)) D FIND
"RTN","IBCNSCD1",51,0)
 ;
"RTN","IBCNSCD1",52,0)
 ; - call AR to handle receivables
"RTN","IBCNSCD1",53,0)
 S IBCTAR=0 D INS2^RCAMINS("^TMP($J,""IBCNSCD"")",.IBCTAR)
"RTN","IBCNSCD1",54,0)
 ;
"RTN","IBCNSCD1",55,0)
 D NOW^%DTC S IBEDT=%
"RTN","IBCNSCD1",56,0)
 ;
"RTN","IBCNSCD1",57,0)
 ; - mail results
"RTN","IBCNSCD1",58,0)
 D MAIL^IBCNSCD2
"RTN","IBCNSCD1",59,0)
 ;
"RTN","IBCNSCD1",60,0)
 ; - finally, delete the companies
"RTN","IBCNSCD1",61,0)
 S IBC=0 F  S IBC=$O(^TMP($J,"IBCNSCD",IBC)) Q:'IBC  S DA=IBC,DIK="^DIC(36,",DIDEL=36 D ^DIK
"RTN","IBCNSCD1",62,0)
 ;
"RTN","IBCNSCD1",63,0)
 ; - delete task number from #350.9
"RTN","IBCNSCD1",64,0)
 S $P(^IBE(350.9,1,4),"^",8)=""
"RTN","IBCNSCD1",65,0)
 ;
"RTN","IBCNSCD1",66,0)
DDQ K IBC,IBCT,^TMP($J,"IBCNSCD")
"RTN","IBCNSCD1",67,0)
 L -^IB("IBCNSCD")
"RTN","IBCNSCD1",68,0)
 S ZTREQ="@"
"RTN","IBCNSCD1",69,0)
 Q
"RTN","IBCNSCD1",70,0)
 ;
"RTN","IBCNSCD1",71,0)
 ;
"RTN","IBCNSCD1",72,0)
FIND ; Find the carrier somewhere in the bill.
"RTN","IBCNSCD1",73,0)
 ;   Required local variables are those described in CARR.
"RTN","IBCNSCD1",74,0)
 S IB0=$G(^DGCR(399,IBC,0)),IBM=$G(^("M"))
"RTN","IBCNSCD1",75,0)
 ;
"RTN","IBCNSCD1",76,0)
 ; - look for the carrier
"RTN","IBCNSCD1",77,0)
 I +IBM=IBCNS D CARR(1,"I1") ;            primary
"RTN","IBCNSCD1",78,0)
 I $P(IBM,"^",2)=IBCNS D CARR(2,"I2") ;   secondary
"RTN","IBCNSCD1",79,0)
 I $P(IBM,"^",3)=IBCNS D CARR(3,"I3") ;   tertiary
"RTN","IBCNSCD1",80,0)
 ;
"RTN","IBCNSCD1",81,0)
 ; - kill off the x-ref
"RTN","IBCNSCD1",82,0)
 K ^DGCR(399,IBC,"AIC",IBCNS)
"RTN","IBCNSCD1",83,0)
 Q
"RTN","IBCNSCD1",84,0)
 ;
"RTN","IBCNSCD1",85,0)
CARR(IBP,IBSUB) ; Update each carrier.
"RTN","IBCNSCD1",86,0)
 ;  Input:   IBP  --  carrier [1:primary  2:secondary  3:tertiary]
"RTN","IBCNSCD1",87,0)
 ;         IBSUB  --  updated subscript ["I1":prim  "I2":sec  "I3":tert]
"RTN","IBCNSCD1",88,0)
 ;
"RTN","IBCNSCD1",89,0)
 ;  The following local variables are also required to be defined:
"RTN","IBCNSCD1",90,0)
 ;      IBCNS, IB0, IBM, IBC, IBREP, IBVAL
"RTN","IBCNSCD1",91,0)
 ;
"RTN","IBCNSCD1",92,0)
 S IBCNS1=+IBREP
"RTN","IBCNSCD1",93,0)
 S $P(^DGCR(399,IBC,"M"),"^",IBP)=IBVAL
"RTN","IBCNSCD1",94,0)
 I $G(^DGCR(399,IBC,IBSUB))]"" S $P(^(IBSUB),"^",1)=IBVAL
"RTN","IBCNSCD1",95,0)
 I IBVAL="" D
"RTN","IBCNSCD1",96,0)
 .S IBS=0
"RTN","IBCNSCD1",97,0)
 .I $P(IB0,"^",2) S IBCNS1=+$G(^DPT($P(IB0,"^",2),.312,+$P(IBM,"^",IBP+11),0)) I IBCNS1 S IBS=1,$P(^DGCR(399,IBC,"M"),"^",IBP)=IBCNS1 S:$G(^(IBSUB))]"" $P(^(IBSUB),"^",1)=IBCNS1
"RTN","IBCNSCD1",98,0)
 .I 'IBS S IBCT("BL",IBP,IBC)=""
"RTN","IBCNSCD1",99,0)
 ;
"RTN","IBCNSCD1",100,0)
 I IBCNS1 S ^DGCR(399,IBC,"AIC",IBCNS1)=""
"RTN","IBCNSCD1",101,0)
 ;
"RTN","IBCNSCD1",102,0)
 I IBCNS=+$G(^DGCR(399,IBC,"MP")) D
"RTN","IBCNSCD1",103,0)
 .I $P(IB0,"^",2),+IBCNS K ^DGCR(399,"AE",$P(IB0,"^",2),IBCNS,IBC)
"RTN","IBCNSCD1",104,0)
 .S $P(^DGCR(399,IBC,"MP"),U,1)=IBCNS1
"RTN","IBCNSCD1",105,0)
 .I $P(IB0,"^",2),+IBCNS1 S ^DGCR(399,"AE",$P(IB0,"^",2),+IBCNS1,IBC)=""
"RTN","IBCNSCD1",106,0)
 ;
"RTN","IBCNSCD1",107,0)
 S IBCT("BL",IBP)=$G(IBCT("BL",IBP))+1
"RTN","IBCNSCD1",108,0)
 Q
"RTN","IBCNSCD1",109,0)
 ;
"RTN","IBCNSCD1",110,0)
 ;
"RTN","IBCNSCD1",111,0)
BILL(IBBILLN,IBCNS,IBREP) ; Callable Entry Point for Accounts Receivable
"RTN","IBCNSCD1",112,0)
 ;  Input:     IBBILLN  --  Bill Number for bill to be repointed
"RTN","IBCNSCD1",113,0)
 ;               IBCNS  --  Pointer to the insurance company in file #36
"RTN","IBCNSCD1",114,0)
 ;                          that is being merged
"RTN","IBCNSCD1",115,0)
 ;               IBREP  --  Pointer to the insurance company in file #36
"RTN","IBCNSCD1",116,0)
 ;                          into which information is being merged
"RTN","IBCNSCD1",117,0)
 ;
"RTN","IBCNSCD1",118,0)
 N IBC,IBCT,IBVAL,IBCNS1,IB0,IBM
"RTN","IBCNSCD1",119,0)
 I $G(IBBILLN)=""!'$G(IBCNS)!($G(IBREP)="") G BILLQ
"RTN","IBCNSCD1",120,0)
 S IBC=$O(^DGCR(399,"B",IBBILLN,0)) I 'IBC G BILLQ
"RTN","IBCNSCD1",121,0)
 S IBVAL=$S(IBREP:IBREP,1:"")
"RTN","IBCNSCD1",122,0)
 D FIND
"RTN","IBCNSCD1",123,0)
BILLQ Q
"RTN","IBCNSCD2")
0^122^B20190292^B19727766
"RTN","IBCNSCD2",1,0)
IBCNSCD2 ;ALB/CPM - DELETE INSURANCE COMPANY (CON'T) ; 03-FEB-95
"RTN","IBCNSCD2",2,0)
 ;;2.0;INTEGRATED BILLING;**28,46,592**;21-MAR-94;Build 58
"RTN","IBCNSCD2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSCD2",4,0)
 ; 
"RTN","IBCNSCD2",5,0)
MAIL ; Send results out.
"RTN","IBCNSCD2",6,0)
 S XMSUB="Insurance Company Deletion Clean-up Completion"
"RTN","IBCNSCD2",7,0)
 S XMDUZ="INTEGRATED BILLING PACKAGE",XMTEXT="^TMP($J,""IBT"",",XMY(DUZ)=""
"RTN","IBCNSCD2",8,0)
 ;
"RTN","IBCNSCD2",9,0)
 K ^TMP($J,"IBT") S IBC=0
"RTN","IBCNSCD2",10,0)
 D SET("The final clean-up for deleted Insurance Company(s) has completed.")
"RTN","IBCNSCD2",11,0)
 D SET(" ")
"RTN","IBCNSCD2",12,0)
 S Y=IBBDT D D^DIQ D SET("Job Start Time: "_Y)
"RTN","IBCNSCD2",13,0)
 S Y=IBEDT D D^DIQ D SET("  Job End Time: "_Y)
"RTN","IBCNSCD2",14,0)
 ;
"RTN","IBCNSCD2",15,0)
 D SET(" ")
"RTN","IBCNSCD2",16,0)
 D SET("DELETED COMPANY"_$J("",24)_"REPOINTED TO")
"RTN","IBCNSCD2",17,0)
 D SET($TR($J("",79)," ","="))
"RTN","IBCNSCD2",18,0)
 S IBX=0 F  S IBX=$O(^TMP($J,"IBCNSCD",IBX)) Q:'IBX  S IBX1=+$G(^(IBX)) D
"RTN","IBCNSCD2",19,0)
 .S X=$E($P($G(^DIC(36,IBX,0)),"^")_" (#"_IBX_")"_$J("",39),1,39)
"RTN","IBCNSCD2",20,0)
 .S X=X_$S(IBX1:$P($G(^DIC(36,IBX1,0)),"^")_" (#"_IBX1_")",1:"not repointed")
"RTN","IBCNSCD2",21,0)
 .D SET(X)
"RTN","IBCNSCD2",22,0)
 ;
"RTN","IBCNSCD2",23,0)
 D SET(" ")
"RTN","IBCNSCD2",24,0)
 D SET(" ")
"RTN","IBCNSCD2",25,0)
 D SET("1. Correction of the Disposition (sub-file #2.101) field")
"RTN","IBCNSCD2",26,0)
 D SET("   'INJURING PARTIES INSURANCE' (#25)")
"RTN","IBCNSCD2",27,0)
 D SET("     Number of Disposition records updated: "_+$G(IBCT("DIS")))
"RTN","IBCNSCD2",28,0)
 I $O(IBCT("DIS",0)) D
"RTN","IBCNSCD2",29,0)
 .D SET($J("",8)_"The following dispositions had this field deleted and not merged:")
"RTN","IBCNSCD2",30,0)
 .S DFN=0 F  S DFN=$O(IBCT("DIS",DFN)) Q:'DFN  D
"RTN","IBCNSCD2",31,0)
 ..S IBNAM=$$PT^IBEFUNC(DFN),IBH=0
"RTN","IBCNSCD2",32,0)
 ..S IBX=$J("",10)_$E($P(IBNAM,"^"),1,25)_" ("_$P(IBNAM,"^",3)_")"
"RTN","IBCNSCD2",33,0)
 ..S IBDAT="" F  S IBDAT=$O(IBCT("DIS",DFN,IBDAT)) Q:IBDAT=""  D
"RTN","IBCNSCD2",34,0)
 ...S IBDAT1="Date/Time: "_$$DAT2^IBOUTL(9999999-IBDAT)
"RTN","IBCNSCD2",35,0)
 ...I 'IBH D SET($E(IBX_$J("",45),1,45)_IBDAT1)
"RTN","IBCNSCD2",36,0)
 ...E  D SET($J("",45)_IBDAT1)
"RTN","IBCNSCD2",37,0)
 ...S IBH=1
"RTN","IBCNSCD2",38,0)
 ;
"RTN","IBCNSCD2",39,0)
 ; - insurance companies
"RTN","IBCNSCD2",40,0)
 S IBINS(0)="REPOINT PATIENTS TO^.16"
"RTN","IBCNSCD2",41,0)
 S IBINS(.12)="CLAIMS (INPT) COMPANY NAME^.127"
"RTN","IBCNSCD2",42,0)
 S IBINS(.13)="PRECERT COMPANY NAME^.139"
"RTN","IBCNSCD2",43,0)
 S IBINS(.14)="APPEALS COMPANY NAME^.147"
"RTN","IBCNSCD2",44,0)
 S IBINS(.16)="CLAIMS (OPT) COMPANY NAME^.167"
"RTN","IBCNSCD2",45,0)
 S IBINS(.18)="CLAIMS (RX) COMPANY NAME^.187"
"RTN","IBCNSCD2",46,0)
 ;JWS;IB*2.0*592;add Dental Ins address
"RTN","IBCNSCD2",47,0)
 S IBINS(.19)="CLAIMS (DENTAL) COMPANY NAME^.197"
"RTN","IBCNSCD2",48,0)
 D SET(" ")
"RTN","IBCNSCD2",49,0)
 D SET("2. Correction of other Insurance Company (file #36) records:")
"RTN","IBCNSCD2",50,0)
 S IBX="" F  S IBX=$O(IBINS(IBX)) Q:IBX=""  S IBS=IBINS(IBX) D
"RTN","IBCNSCD2",51,0)
 .D SET("     Number of records with '"_$P(IBS,"^")_"' (#"_$P(IBS,"^",2)_") updated: "_+$G(IBCT("INS",IBX)))
"RTN","IBCNSCD2",52,0)
 .I $O(IBCT("INS",IBX,0)) D
"RTN","IBCNSCD2",53,0)
 ..D SET($J("",8)_"The following companies had this field deleted and not merged:")
"RTN","IBCNSCD2",54,0)
 ..S IBCO=0 F  S IBCO=$O(IBCT("INS",IBX,IBCO)) Q:'IBCO  D
"RTN","IBCNSCD2",55,0)
 ...D SET($J("",10)_$P($G(^DIC(36,IBCO,0)),"^")_"  (ien "_IBCO_")")
"RTN","IBCNSCD2",56,0)
 ;
"RTN","IBCNSCD2",57,0)
 ; - insurance reviews
"RTN","IBCNSCD2",58,0)
 D SET(" ")
"RTN","IBCNSCD2",59,0)
 D SET("3. Correction of the Insurance Review (file #356.2) field")
"RTN","IBCNSCD2",60,0)
 D SET("   'INSURANCE COMPANY CONTACTED' (#.08)")
"RTN","IBCNSCD2",61,0)
 D SET("     Number of Insurance Review records updated: "_+$G(IBCT("IR")))
"RTN","IBCNSCD2",62,0)
 I $O(IBCT("IR",0)) D
"RTN","IBCNSCD2",63,0)
 .D SET($J("",8)_"The following Insurance reviews had this field deleted and not merged:")
"RTN","IBCNSCD2",64,0)
 .S DFN=0 F  S DFN=$O(IBCT("IR",DFN)) Q:'DFN  D
"RTN","IBCNSCD2",65,0)
 ..S IBNAM=$$PT^IBEFUNC(DFN),IBH=0
"RTN","IBCNSCD2",66,0)
 ..S IBX=$J("",10)_$E($P(IBNAM,"^"),1,25)_" ("_$P(IBNAM,"^",3)_")"
"RTN","IBCNSCD2",67,0)
 ..S IBDAT="" F  S IBDAT=$O(IBCT("IR",DFN,IBDAT)) Q:IBDAT=""  D
"RTN","IBCNSCD2",68,0)
 ...S IBDAT1="Review Date/Time: "_$$DAT2^IBOUTL(IBDAT)
"RTN","IBCNSCD2",69,0)
 ...I 'IBH D SET($E(IBX_$J("",45),1,45)_IBDAT1)
"RTN","IBCNSCD2",70,0)
 ...E  D SET($J("",45)_IBDAT1)
"RTN","IBCNSCD2",71,0)
 ...S IBH=1
"RTN","IBCNSCD2",72,0)
 ;
"RTN","IBCNSCD2",73,0)
 ; - bills
"RTN","IBCNSCD2",74,0)
 K IBINS
"RTN","IBCNSCD2",75,0)
 S IBINS(1)="PRIMARY INSURANCE CARRIER^101"
"RTN","IBCNSCD2",76,0)
 S IBINS(2)="SECONDARY INSURANCE CARRIER^102"
"RTN","IBCNSCD2",77,0)
 S IBINS(3)="TERTIARY INSURANCE CARRIER^103"
"RTN","IBCNSCD2",78,0)
 D SET(" ")
"RTN","IBCNSCD2",79,0)
 D SET("4. Correction of Bill/Claims (file #399) records:")
"RTN","IBCNSCD2",80,0)
 S IBX="" F  S IBX=$O(IBINS(IBX)) Q:IBX=""  S IBS=IBINS(IBX) D
"RTN","IBCNSCD2",81,0)
 .D SET("     Number of records with '"_$P(IBS,"^")_"' (#"_$P(IBS,"^",2)_") updated: "_+$G(IBCT("BL",IBX)))
"RTN","IBCNSCD2",82,0)
 .I $O(IBCT("BL",IBX,0)) D
"RTN","IBCNSCD2",83,0)
 ..D SET($J("",8)_"The following bills had this field deleted and not merged:")
"RTN","IBCNSCD2",84,0)
 ..S IBCO=0 F  S IBCO=$O(IBCT("BL",IBX,IBCO)) Q:'IBCO  D
"RTN","IBCNSCD2",85,0)
 ...S IBS=$G(^DGCR(399,IBCO,0))
"RTN","IBCNSCD2",86,0)
 ...S IBNAM=$$PT^IBEFUNC(+$P(IBS,"^",2))
"RTN","IBCNSCD2",87,0)
 ...D SET($J("",10)_$E($E($P(IBNAM,"^"),1,25)_" ("_$P(IBNAM,"^",3)_")"_$J("",35),1,35)_"Bill #: "_$P(IBS,"^"))
"RTN","IBCNSCD2",88,0)
 ;
"RTN","IBCNSCD2",89,0)
 ; - receivables in AR
"RTN","IBCNSCD2",90,0)
 D SET(" ")
"RTN","IBCNSCD2",91,0)
 D SET("5. Number of updated secondary and tertiary carriers of AR receivables: "_+$G(IBCTAR))
"RTN","IBCNSCD2",92,0)
 ;
"RTN","IBCNSCD2",93,0)
 D ^XMD
"RTN","IBCNSCD2",94,0)
 K ^TMP($J,"IBT")
"RTN","IBCNSCD2",95,0)
 Q
"RTN","IBCNSCD2",96,0)
 ;
"RTN","IBCNSCD2",97,0)
SET(X) ; Set Message Text Array
"RTN","IBCNSCD2",98,0)
 S IBC=IBC+1,^TMP($J,"IBT",IBC)=X
"RTN","IBCNSCD2",99,0)
 Q
"RTN","IBCNSI")
0^126^B8158592^n/a
"RTN","IBCNSI",1,0)
IBCNSI ;ALB/NLR- INSURANCE COMPANY BILLING ADDRESSES ; 21-SEP-2017
"RTN","IBCNSI",2,0)
 ;;2.0;INTEGRATED BILLING;**592**;21-MAR-94;Build 58
"RTN","IBCNSI",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCNSI",4,0)
 ;
"RTN","IBCNSI",5,0)
 ;also used for IA #4694
"RTN","IBCNSI",6,0)
 ;KDM US2487 IB*2.0*592
"RTN","IBCNSI",7,0)
 ; new template needed for option AD of the insurance compnay editor menu
"RTN","IBCNSI",8,0)
 ; create submenu of just billing address to have it's own screen and display
"RTN","IBCNSI",9,0)
 ;
"RTN","IBCNSI",10,0)
EN ; -- main entry point for IBCNSC INSURANCE CO ADDRESSES
"RTN","IBCNSI",11,0)
 ;
"RTN","IBCNSI",12,0)
 D EN^VALM("IBCNSC INSURANCE CO ADDRESSES")
"RTN","IBCNSI",13,0)
 Q
"RTN","IBCNSI",14,0)
 ;
"RTN","IBCNSI",15,0)
HDR ; -- header code
"RTN","IBCNSI",16,0)
 ;D HDR^IBCNSC
"RTN","IBCNSI",17,0)
 S VALMHDR(1)="Insurance Co: "_$E($P(^DIC(36,IBCNS,0),"^"),1,30)_"   Claims Processing Addresses"
"RTN","IBCNSI",18,0)
 ;S VALMHDR(2)="This is the second line"
"RTN","IBCNSI",19,0)
 Q
"RTN","IBCNSI",20,0)
 ;
"RTN","IBCNSI",21,0)
INIT ; -- Option AD
"RTN","IBCNSI",22,0)
 ;
"RTN","IBCNSI",23,0)
 ;K VALMQUIT
"RTN","IBCNSI",24,0)
 K ^TMP("IBCNSI",$J)
"RTN","IBCNSI",25,0)
 S VALMCNT=0,VALMBG=1
"RTN","IBCNSI",26,0)
 ;D BLDAD,HDR ; WCJ
"RTN","IBCNSI",27,0)
 D BLDAD ; WCJ
"RTN","IBCNSI",28,0)
 Q
"RTN","IBCNSI",29,0)
 ;
"RTN","IBCNSI",30,0)
BLDAD ; -- Option AD list builder display items
"RTN","IBCNSI",31,0)
 ;kdm US2487 IB*2.0*592
"RTN","IBCNSI",32,0)
 ;NEW BLNKI
"RTN","IBCNSI",33,0)
 N BLNKI,IBACMAX  ; new variable set in PARAM section and needed throughout for display
"RTN","IBCNSI",34,0)
 ;
"RTN","IBCNSI",35,0)
 ;K ^TMP("IBCNSI",$J)
"RTN","IBCNSI",36,0)
 S IBACMAX=0
"RTN","IBCNSI",37,0)
 D KILL^VALM10()    ; delete all video attributes
"RTN","IBCNSI",38,0)
 F BLNKI=1:1:50 D BLANK(.BLNKI)     ;blank lines to start with
"RTN","IBCNSI",39,0)
 ; 
"RTN","IBCNSI",40,0)
 ; MAIN MAILING
"RTN","IBCNSI",41,0)
 N OFFSET,START,IBCNS11,IBCNS13,IBADD
"RTN","IBCNSI",42,0)
 S IBCNS11=$G(^DIC(36,+IBCNS,.11))
"RTN","IBCNSI",43,0)
 S IBCNS13=$G(^DIC(36,+IBCNS,.13))
"RTN","IBCNSI",44,0)
 S START=1,OFFSET=25 D MAINAD^IBCNSC01       ; main mailing address
"RTN","IBCNSI",45,0)
 ; 
"RTN","IBCNSI",46,0)
 ; CLAIMS INPATIENT
"RTN","IBCNSI",47,0)
 ;JWS;N OFFSET,START,IBCNS12,IBADD
"RTN","IBCNSI",48,0)
 N IBCNS12
"RTN","IBCNSI",49,0)
 S START=8,OFFSET=2 D CLMS1AD^IBCNSC0     ; inpatient claims office
"RTN","IBCNSI",50,0)
 ;
"RTN","IBCNSI",51,0)
 ; CLAIMS OUTPATIENT
"RTN","IBCNSI",52,0)
 ;JWS;N OFFSET,START,IBCNS16,IBADD
"RTN","IBCNSI",53,0)
 N IBCNS16
"RTN","IBCNSI",54,0)
 S START=16,OFFSET=2 D CLMS2AD^IBCNSC0     ; outpatient claims office
"RTN","IBCNSI",55,0)
 ; 
"RTN","IBCNSI",56,0)
 ; RX
"RTN","IBCNSI",57,0)
 ;JWS;N OFFSET,START,IBCNS18,IBADD
"RTN","IBCNSI",58,0)
 N IBCNS18
"RTN","IBCNSI",59,0)
 S IBCNS18=$$ADD2^IBCNSC0(IBCNS,.18,11)
"RTN","IBCNSI",60,0)
 S START=24,OFFSET=2 D PRESCRAD^IBCNSC1      ; prescription claims office
"RTN","IBCNSI",61,0)
 ;
"RTN","IBCNSI",62,0)
 ; APPEALS OFFICE
"RTN","IBCNSI",63,0)
 ;JWS;N OFFSET,START,IBCNS14,IBADD
"RTN","IBCNSI",64,0)
 N IBCNS14
"RTN","IBCNSI",65,0)
 S START=31,OFFSET=2 D APPEALAD^IBCNSC      ; appeals office
"RTN","IBCNSI",66,0)
 ;
"RTN","IBCNSI",67,0)
 ; INQUIRY OFFICE
"RTN","IBCNSI",68,0)
 ;JWS;N OFFSET,START,IBCNS15,IBADD
"RTN","IBCNSI",69,0)
 N IBCNS15
"RTN","IBCNSI",70,0)
 S START=39+(2*$G(IBACMAX)),OFFSET=2 D INQAD^IBCNSC      ; inquiry office
"RTN","IBCNSI",71,0)
 ;
"RTN","IBCNSI",72,0)
 ; DENTAL CLAIMS OFFICE
"RTN","IBCNSI",73,0)
 ;JWS;N OFFSET,START,IBCNS19,IBADD
"RTN","IBCNSI",74,0)
 N IBCNS19
"RTN","IBCNSI",75,0)
 S START=46+(2*$G(IBACMAX)),OFFSET=2 D DENTALAD^IBCNSC       ; Dental Claims Office
"RTN","IBCNSI",76,0)
 ;
"RTN","IBCNSI",77,0)
 S VALMCNT=+$O(^TMP("IBCNSI",$J,""),-1)    ; no of lines in the list
"RTN","IBCNSI",78,0)
 Q
"RTN","IBCNSI",79,0)
 ;INIT ; -- init variables and list array
"RTN","IBCNSI",80,0)
 ;F LINE=1:1:30 D SET^VALM10(LINE,LINE_"     Line number "_LINE)
"RTN","IBCNSI",81,0)
 ;S VALMCNT=30
"RTN","IBCNSI",82,0)
 ;Q
"RTN","IBCNSI",83,0)
 ; 
"RTN","IBCNSI",84,0)
HELP ; -- help code
"RTN","IBCNSI",85,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBCNSI",86,0)
 Q
"RTN","IBCNSI",87,0)
 ;
"RTN","IBCNSI",88,0)
BLANK(LINE) ; -- Build blank line
"RTN","IBCNSI",89,0)
 D SET^VALM10(.LINE,$J("",80))
"RTN","IBCNSI",90,0)
 Q
"RTN","IBCNSI",91,0)
 ;
"RTN","IBCNSI",92,0)
EA ;
"RTN","IBCNSI",93,0)
 D FULL^VALM1
"RTN","IBCNSI",94,0)
 D MAIN^IBCNSC1
"RTN","IBCNSI",95,0)
 D HDR,BLDAD
"RTN","IBCNSI",96,0)
 S VALMBCK="R"
"RTN","IBCNSI",97,0)
 Q
"RTN","IBCNSI",98,0)
 ;
"RTN","IBCNSI",99,0)
EXIT ; -- exit code
"RTN","IBCNSI",100,0)
 ;
"RTN","IBCNSI",101,0)
 K ^TMP("IBCNSI",$J)
"RTN","IBCNSI",102,0)
 ;S VALMBCK="R"
"RTN","IBCNSI",103,0)
 D CLEAR^VALM1
"RTN","IBCNSI",104,0)
 Q
"RTN","IBCNSI",105,0)
 ;
"RTN","IBCNSI",106,0)
EXPND ; -- expand code
"RTN","IBCNSI",107,0)
 Q
"RTN","IBCNSI",108,0)
 ;
"RTN","IBCNSU3")
0^135^B5742335^B4463895
"RTN","IBCNSU3",1,0)
IBCNSU3 ;ALB/TMP - Functions for billing decisions; 08-AUG-95
"RTN","IBCNSU3",2,0)
 ;;2.0;INTEGRATED BILLING;**43,80,592**;21-MAR-94;Build 58
"RTN","IBCNSU3",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNSU3",4,0)
 ;
"RTN","IBCNSU3",5,0)
PTCOV(DFN,IBVDT,IBCAT,ANYINS,INSONBIL) ; Determine if patient is covered for coverage category on a visit dt
"RTN","IBCNSU3",6,0)
 ; Function returns 1 if covered, 0 if not covered
"RTN","IBCNSU3",7,0)
 ; DFN - ifn of patient (req)
"RTN","IBCNSU3",8,0)
 ; IBVDT - fileman format visit date (req)
"RTN","IBCNSU3",9,0)
 ; IBCAT - entry in file 355.31 limitation of coverage category (req)
"RTN","IBCNSU3",10,0)
 ; ANYINS - optional parameter, but if passed by reference, returns 0 if
"RTN","IBCNSU3",11,0)
 ;         no active insurance at all and 1 if any active insurance found
"RTN","IBCNSU3",12,0)
 ; INSONBIL - this is an array of insurances on the bill.  if it is sent, only those insurances will be checked.
"RTN","IBCNSU3",13,0)
 ;          INSONBIL(INS CO IEN)=""
"RTN","IBCNSU3",14,0)
 ;
"RTN","IBCNSU3",15,0)
 N IBCOV,IBDD,PLAN,POLCY
"RTN","IBCNSU3",16,0)
 S (IBCOV,ANYINS)=0
"RTN","IBCNSU3",17,0)
 I $G(DFN)=""!($G(IBCAT)="")!($G(IBVDT)="") G PTCOVQ ; Required fields not present
"RTN","IBCNSU3",18,0)
 S IBCAT=$O(^IBE(355.31,"B",IBCAT,"")) G:IBCAT="" PTCOVQ
"RTN","IBCNSU3",19,0)
 S IBVDT=IBVDT\1
"RTN","IBCNSU3",20,0)
 D ALL^IBCNS1(DFN,"IBDD",1,IBVDT) ;All active ins policies returned in IBDD array
"RTN","IBCNSU3",21,0)
 S ANYINS=($O(IBDD(0))'="") ;Set flag for any active insurance found
"RTN","IBCNSU3",22,0)
 S POLCY=0 F  S POLCY=$O(IBDD(POLCY)) Q:'POLCY  D  Q:IBCOV
"RTN","IBCNSU3",23,0)
 .S PLAN=$P($G(IBDD(POLCY,0)),U,18) Q:PLAN=""
"RTN","IBCNSU3",24,0)
 .I $D(INSONBIL)>9,'$D(INSONBIL(+$P(IBDD(POLCY,0),U))) Q  ; WCJ;IB592;I only want to check specific insurances that are on a bill/claim
"RTN","IBCNSU3",25,0)
 .S IBCOV=$$PLCOV(PLAN,IBVDT,IBCAT)
"RTN","IBCNSU3",26,0)
 .I 'IBCOV,$D(^IBA(355.7,"APP",DFN,POLCY,+$P($G(^IBE(355.31,+IBCAT,0)),U,3)))'=0 S IBCOV=1
"RTN","IBCNSU3",27,0)
PTCOVQ Q IBCOV
"RTN","IBCNSU3",28,0)
 ;
"RTN","IBCNSU3",29,0)
PLCOV(IBPL,IBVDT,IBCAT,COMMENT) ; Determine if a specific plan covers a category of coverage as of a date and returns comments
"RTN","IBCNSU3",30,0)
 ; IBPL - pointer to file 355.3 group insurance plan (req)
"RTN","IBCNSU3",31,0)
 ; IBVDT - fileman format visit date (req)
"RTN","IBCNSU3",32,0)
 ; IBCAT -  pointer to file 355.31 limitation of coverage category (req)
"RTN","IBCNSU3",33,0)
 ; COMMENT - if passed by reference and the coverage is conditional will contain limitation comments
"RTN","IBCNSU3",34,0)
 N CATLIM,X,Y K COMMENT
"RTN","IBCNSU3",35,0)
 S CATLIM=$O(^IBA(355.32,"APCD",IBPL,IBCAT,+$O(^IBA(355.32,"APCD",IBPL,IBCAT,-(IBVDT+1))),""))
"RTN","IBCNSU3",36,0)
 S X=$S(CATLIM="":1,1:+$P($G(^IBA(355.32,CATLIM,0)),U,4))
"RTN","IBCNSU3",37,0)
 I X>1 S COMMENT=CATLIM,Y=0 F  S Y=$O(^IBA(355.32,CATLIM,2,Y)) Q:'Y  S COMMENT(Y)=$G(^IBA(355.32,CATLIM,2,Y,0))
"RTN","IBCNSU3",38,0)
 Q X
"RTN","IBCNSU3",39,0)
 ;
"RTN","IBCNSU3",40,0)
RIDERS(DFN,IBCDFN,RIDERS) ; Returns all Riders (355.7) associated with a patient's policy in array if RIDERS is passed by reference
"RTN","IBCNSU3",41,0)
 N Y K RIDERS
"RTN","IBCNSU3",42,0)
 I +$G(DFN),+$G(IBCDFN) S Y=0 F  S Y=$O(^IBA(355.7,"APP",DFN,IBCDFN,Y)) Q:'Y  S RIDERS(Y)=$P($G(^IBE(355.6,Y,0)),U,1)
"RTN","IBCNSU3",43,0)
 Q
"RTN","IBCSC10")
0^9^B9372507^B8993520
"RTN","IBCSC10",1,0)
IBCSC10 ;ALB/MJB - MCCR SCREEN 10 (UB-82 BILL SPECIFIC INFO)  ;27 MAY 88 10:20
"RTN","IBCSC10",2,0)
 ;;2.0;INTEGRATED BILLING;**432,547,574,592**;21-MAR-94;Build 58
"RTN","IBCSC10",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCSC10",4,0)
 ;
"RTN","IBCSC10",5,0)
 ;MAP TO DGCRSC8
"RTN","IBCSC10",6,0)
 ;
"RTN","IBCSC10",7,0)
 ; DEM;432 - Moved IBCSC8* billing screen routines to IBCSC10* billing screen
"RTN","IBCSC10",8,0)
 ;           routines and created a new billing screen 8 routine IBCSC8.
"RTN","IBCSC10",9,0)
 ;
"RTN","IBCSC10",10,0)
 ;JWS;IB*2.0*592 US1108 - Dental form 7
"RTN","IBCSC10",11,0)
EN S IBCUBFT=$$FT^IBCU3(IBIFN) I IBCUBFT=2!(IBCUBFT=7) K IBCUBFT G ^IBCSC10H ; hcfa 1500 ;JWS 3/6/17 Dental Form
"RTN","IBCSC10",12,0)
 I IBCUBFT=3 K IBCUBFT G ^IBCSC102 ; ub-92
"RTN","IBCSC10",13,0)
 ;I $P(^DGCR(399,IBIFN,0),"^",19)=2 G ^IBCSC10H ;hcfa 1500
"RTN","IBCSC10",14,0)
 D ^IBCSCU S IBSR=10,IBSR1="",IBV1="000000000" S:IBV IBV1="111111111" F I="U","U1",0 S IB(I)=$S($D(^DGCR(399,IBIFN,I)):^(I),1:"")
"RTN","IBCSC10",15,0)
 D H^IBCSCU
"RTN","IBCSC10",16,0)
 S Z=1,IBW=1 X IBWW W " Bill Remark    : ",$S($P(IB("U1"),U,8)]"":$P(IB("U1"),U,8),1:IBUN)
"RTN","IBCSC10",17,0)
 S IBX="^^^2^9^27^45" F I=4:1:7 S Z=(I-2),IBW=1 X IBWW W " Form Locator ",$P(IBX,U,I),$S($E($P(IBX,U,I),2)="":" : ",1:": "),$S($P(IB("U1"),U,I)]"":$P(IB("U1"),U,I),1:IBUN)
"RTN","IBCSC10",18,0)
 S IBX=91 F I=13,14 S Z=(I-7),IBW=1,IBX=IBX+1 X IBWW W " Form Locator ",IBX,": ",$S($P(IB("U1"),U,I)]"":$P(IB("U1"),U,I),1:IBUN)
"RTN","IBCSC10",19,0)
 S Z=8,IBW=1 X IBWW W " Tx Auth. Code  : ",$S($P(IB("U"),U,13)]"":$P(IB("U"),U,13),1:IBUN)
"RTN","IBCSC10",20,0)
 G ^IBCSCP
"RTN","IBCSC10",21,0)
Q Q
"RTN","IBCSC10",22,0)
 ;
"RTN","IBCSC10",23,0)
 ;WCJ;IB*2.0*547
"RTN","IBCSC10",24,0)
ACINTEL(IBINSDAT,IBNEXT) ; build some intelligence in this Alternate ID branching logic called from both screen 10 templates.
"RTN","IBCSC10",25,0)
 ;
"RTN","IBCSC10",26,0)
 ; Input:
"RTN","IBCSC10",27,0)
 ; IBINSDAT - INS DATA node
"RTN","IBCSC10",28,0)
 ; IBNEXT -where to branch if not correct plan
"RTN","IBCSC10",29,0)
 ;
"RTN","IBCSC10",30,0)
 ; Returns - where to branch to
"RTN","IBCSC10",31,0)
 ;
"RTN","IBCSC10",32,0)
 N IBPLAN,IBEPT,IBINSPRF
"RTN","IBCSC10",33,0)
 S IBPLAN=$P(IBINSDAT,U,18)
"RTN","IBCSC10",34,0)
 I IBPLAN=""  Q IBNEXT
"RTN","IBCSC10",35,0)
 S IBPLAN=$G(^IBA(355.3,+IBPLAN,0))
"RTN","IBCSC10",36,0)
 I IBPLAN="" Q IBNEXT
"RTN","IBCSC10",37,0)
 S IBEPT=$P(IBPLAN,U,15)
"RTN","IBCSC10",38,0)
 I IBEPT="" Q IBNEXT
"RTN","IBCSC10",39,0)
 I IBEPT="MX" Q:'$D(^IBE(350.9,1,81,"B")) IBNEXT  ; no medicare set up in site parameters
"RTN","IBCSC10",40,0)
 I IBEPT'="MX" Q:'$D(^IBE(350.9,1,82,"B")) IBNEXT   ; no commercial set up in site parameters
"RTN","IBCSC10",41,0)
 ; Use form type not charge type 09/07/2016
"RTN","IBCSC10",42,0)
 ;S IBINSPRF=$$INSPRF^IBCEF(IBIFN)
"RTN","IBCSC10",43,0)
 S IBINSPRF=$$FT^IBCEF(+IBIFN)=3  ; set IBINST flag=1 if it is institutional,0 for professional.
"RTN","IBCSC10",44,0)
 ;
"RTN","IBCSC10",45,0)
 ; Institutional
"RTN","IBCSC10",46,0)
 I IBINSPRF=1 Q:'$D(^DIC(36,+IBINSDAT,15,"B")) IBNEXT   ; this insurance company has no institutional set up
"RTN","IBCSC10",47,0)
 ;
"RTN","IBCSC10",48,0)
 ; Professional
"RTN","IBCSC10",49,0)
 I IBINSPRF=0 Q:'$D(^DIC(36,+IBINSDAT,16,"B")) IBNEXT  ; this insurance company has no professional set up
"RTN","IBCSC10",50,0)
 ;
"RTN","IBCSC10",51,0)
 ; now it gets complicated :)
"RTN","IBCSC10",52,0)
 ; there needs to be one set up for this form type in the ins comp file
"RTN","IBCSC10",53,0)
 ; and also set up for medicare/commercial in the site parameter file
"RTN","IBCSC10",54,0)
 N IBTMPINS,IBTMPSP,IBLOOP,IBFOUND
"RTN","IBCSC10",55,0)
 M IBTMPINS=^DIC(36,+IBINSDAT,$S(IBINSPRF=1:15,1:16),"B")
"RTN","IBCSC10",56,0)
 M IBTMPSP=^IBE(350.9,1,$S(IBEPT="MX":81,1:82),"B")
"RTN","IBCSC10",57,0)
 S IBLOOP="",IBFOUND=0
"RTN","IBCSC10",58,0)
 F  S IBLOOP=$O(IBTMPINS(IBLOOP)) Q:IBLOOP=""  D  Q:IBFOUND
"RTN","IBCSC10",59,0)
 . Q:'$D(IBTMPSP(IBLOOP))
"RTN","IBCSC10",60,0)
 . S IBFOUND=1
"RTN","IBCSC10",61,0)
 I IBFOUND Q ""
"RTN","IBCSC10",62,0)
 Q IBNEXT
"RTN","IBCSC10",63,0)
 ;IBCSC10
"RTN","IBCSC10H")
0^10^B81208803^B51814065
"RTN","IBCSC10H",1,0)
IBCSC10H ;ALB/ARH - MCCR SCREEN 10 (BILL SPECIFIC INFO) CMS-1500 ;4/21/92
"RTN","IBCSC10H",2,0)
 ;;2.0;INTEGRATED BILLING;**432,488,547,592**;21-MAR-94;Build 58
"RTN","IBCSC10H",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCSC10H",4,0)
 ; CMS-1500 screen 10
"RTN","IBCSC10H",5,0)
 ;
"RTN","IBCSC10H",6,0)
 ; MAP TO DGCRSC8H
"RTN","IBCSC10H",7,0)
 ;
"RTN","IBCSC10H",8,0)
 ; DEM;432 - Moved IBCSC8* billing screen routines to IBCSC10* billing screen
"RTN","IBCSC10H",9,0)
 ;           routines and created a new billing screen 8 routine IBCSC8.
"RTN","IBCSC10H",10,0)
 ;
"RTN","IBCSC10H",11,0)
EN ;
"RTN","IBCSC10H",12,0)
 N I,IB,Y,Z
"RTN","IBCSC10H",13,0)
 D ^IBCSCU
"RTN","IBCSC10H",14,0)
 ;
"RTN","IBCSC10H",15,0)
 ;WCJ;IB*2.0*547
"RTN","IBCSC10H",16,0)
 ;S IBSR=10,IBSR1="H",IBV1="000000000" S:IBV IBV1="111111111"
"RTN","IBCSC10H",17,0)
 S IBSR=10,IBSR1="H",IBV1="0000000000" S:IBV IBV1="1111111111"
"RTN","IBCSC10H",18,0)
 ;JWS;IB*2.0*592 US1108 - Dental form 7
"RTN","IBCSC10H",19,0)
 I $$FT^IBCU3(IBIFN)=7 S IBV1="1001100010" S:IBV IBV1="11111111"
"RTN","IBCSC10H",20,0)
 ;F I="U","U1","UF2","UF3","UF32","U2","M","TX",0,"U3" S IB(I)=$G(^DGCR(399,IBIFN,I))
"RTN","IBCSC10H",21,0)
 F I="U","U1","UF2","UF3","UF32","U2","M","M2","TX",0,"U3" S IB(I)=$G(^DGCR(399,IBIFN,I))
"RTN","IBCSC10H",22,0)
 ;
"RTN","IBCSC10H",23,0)
 N IBZ,IBPRV,IBDATE,IBREQ,IBMRASEC,IBZ1,IBZCNT
"RTN","IBCSC10H",24,0)
 ;
"RTN","IBCSC10H",25,0)
 S IBDATE=$$BDATE^IBACSV(IBIFN) ; Date of service for the bill
"RTN","IBCSC10H",26,0)
 S IBPRV=""
"RTN","IBCSC10H",27,0)
 D GETPRV^IBCEU(IBIFN,"ALL",.IBPRV)
"RTN","IBCSC10H",28,0)
 K IB("PRV")
"RTN","IBCSC10H",29,0)
 S IBZ=0 F  S IBZ=$O(IBPRV(IBZ)) Q:'IBZ  I $O(IBPRV(IBZ,0))!$D(IBPRV(IBZ,"NOTOPT")) M IB("PRV",IBZ)=IBPRV(IBZ)
"RTN","IBCSC10H",30,0)
 ;
"RTN","IBCSC10H",31,0)
 D H^IBCSCU
"RTN","IBCSC10H",32,0)
 ;
"RTN","IBCSC10H",33,0)
 ; Section 1
"RTN","IBCSC10H",34,0)
 S Z=1,IBW=1 X IBWW W " Unable To Work From: " S Y=$P(IB("U"),U,16) X ^DD("DD") W $S(Y'="":Y,1:IBUN)
"RTN","IBCSC10H",35,0)
 W !?4,"Unable To Work To  : " S Y=$P(IB("U"),U,17) X ^DD("DD") W $S(Y'="":Y,1:IBUN)
"RTN","IBCSC10H",36,0)
 ;
"RTN","IBCSC10H",37,0)
 ; Section 2
"RTN","IBCSC10H",38,0)
 S Z=2,IBW=1
"RTN","IBCSC10H",39,0)
 X IBWW I $$INPAT^IBCEF(IBIFN) W " Admitting Dx       : " S IBZ=$$ICD9^IBACSV(+IB("U2"),IBDATE) W $S(IBZ'="":$P(IBZ,U)_" - "_$P(IBZ,U,3),1:IBUN),!
"RTN","IBCSC10H",40,0)
 S IBZCNT=0,IBZ(IBZCNT)=""
"RTN","IBCSC10H",41,0)
 I $P(IB("UF3"),U,4)]"" S IBZ(IBZCNT)="P: "_$P(IB("UF3"),U,4),IBZCNT=IBZCNT+1
"RTN","IBCSC10H",42,0)
 I $P(IB("UF3"),U,5)]"" S IBZ(IBZCNT)="S: "_$P(IB("UF3"),U,5),IBZCNT=IBZCNT+1
"RTN","IBCSC10H",43,0)
 I $P(IB("UF3"),U,6)]"" S IBZ(IBZCNT)="T: "_$P(IB("UF3"),U,6)
"RTN","IBCSC10H",44,0)
 S:IBZ(0)="" IBZ(0)=IBUN
"RTN","IBCSC10H",45,0)
 W ?4,"ICN/DCN(s)         : ",IBZ(0)
"RTN","IBCSC10H",46,0)
 F IBZCNT=1:1 Q:'$D(IBZ(IBZCNT))  W !?25,IBZ(IBZCNT)
"RTN","IBCSC10H",47,0)
 K IBZ
"RTN","IBCSC10H",48,0)
 S IBZ=$$CKPROV^IBCEU(IBIFN,3)
"RTN","IBCSC10H",49,0)
 S IBZCNT=0,IBZ(IBZCNT)=""
"RTN","IBCSC10H",50,0)
 I $P(IB("U"),U,13)]"" S IBZ(IBZCNT)="P: "_$P(IB("U"),U,13),IBZCNT=IBZCNT+1
"RTN","IBCSC10H",51,0)
 I $P(IB("U2"),U,8)'="" S IBZ(IBZCNT)="S: "_$P(IB("U2"),U,8),IBZCNT=IBZCNT+1
"RTN","IBCSC10H",52,0)
 I $P(IB("U2"),U,9)'="" S IBZ(IBZCNT)="T: "_$P(IB("U2"),U,9),IBZCNT=IBZCNT+1
"RTN","IBCSC10H",53,0)
 I $P(IB("UF32"),U,1)'="" S IBZ(IBZCNT)="P: "_$P(IB("UF32"),U,1),IBZCNT=IBZCNT+1
"RTN","IBCSC10H",54,0)
 I $P(IB("UF32"),U,2)'="" S IBZ(IBZCNT)="S: "_$P(IB("UF32"),U,2),IBZCNT=IBZCNT+1
"RTN","IBCSC10H",55,0)
 I $P(IB("UF32"),U,3)'="" S IBZ(IBZCNT)="T: "_$P(IB("UF32"),U,3)
"RTN","IBCSC10H",56,0)
 S:IBZ(0)="" IBZ(0)=IBUN
"RTN","IBCSC10H",57,0)
 W !,?3," Auth/Referral      : ",IBZ(0)
"RTN","IBCSC10H",58,0)
 F IBZCNT=1:1 Q:'$D(IBZ(IBZCNT))  W !?25,IBZ(IBZCNT)
"RTN","IBCSC10H",59,0)
 K IBZ S IBZ=""
"RTN","IBCSC10H",60,0)
 ;
"RTN","IBCSC10H",61,0)
 ; Section 3
"RTN","IBCSC10H",62,0)
 S Z=3,IBW=1 X IBWW
"RTN","IBCSC10H",63,0)
 W " Providers          : ",$S('$O(IB("PRV",0)):IBU,1:"")
"RTN","IBCSC10H",64,0)
 I $D(IB("PRV")) D  ; at least 1 provider found
"RTN","IBCSC10H",65,0)
 . N IBQ,A,A1,IBARR,IBTAX,IBNOTAX,IBSPEC,IBNOSPEC
"RTN","IBCSC10H",66,0)
 . S IBZ=0
"RTN","IBCSC10H",67,0)
 . D DEFSEC^IBCEF74(IBIFN,.IBARR)
"RTN","IBCSC10H",68,0)
 . ; PRXM/KJH - Add Taxonomy code to display for patch 343. Moved secondary IDs slightly (below).
"RTN","IBCSC10H",69,0)
 . S IBTAX=$$PROVTAX^IBCEF73A(IBIFN,.IBNOTAX)
"RTN","IBCSC10H",70,0)
 . S IBSPEC=$$SPECTAX^IBCEF73A(IBIFN,.IBNOSPEC)
"RTN","IBCSC10H",71,0)
 . F  S IBZ=$O(IB("PRV",IBZ)) Q:'IBZ  D
"RTN","IBCSC10H",72,0)
 .. S IBQ=""
"RTN","IBCSC10H",73,0)
 .. W !,?5,"- "
"RTN","IBCSC10H",74,0)
 .. S A=$$EXPAND^IBTRE(399.0222,.01,IBZ)
"RTN","IBCSC10H",75,0)
 .. I $P($G(IB("PRV",IBZ,1)),U,4)'="" S A1=" ("_$E($P(IB("PRV",IBZ,1),U,4),1,3)_")",A=$E(A,1,16-$L(A1))_A1
"RTN","IBCSC10H",76,0)
 .. W $E(A_$J("",16),1,16),": "
"RTN","IBCSC10H",77,0)
 .. I '$P($G(IB("PRV",IBZ,1)),U,3),$P($G(IB("PRV",IBZ,1)),U)="" W IBU Q
"RTN","IBCSC10H",78,0)
 .. I $P($G(IB("PRV",IBZ,1)),U)'="" W:'$G(IB("PRV",IBZ)) $E($P(IB("PRV",IBZ,1),U)_$J("",16),1,16) W:$G(IB("PRV",IBZ)) "(OLD BOX 31 DATA) "_$P(IB("PRV",IBZ,1),U)
"RTN","IBCSC10H",79,0)
 .. I $P($G(IB("PRV",IBZ,1)),U)="",$P($G(IB("PRV",IBZ)),U)'="" W $E($P(IB("PRV",IBZ),U)_$J("",16),1,16)
"RTN","IBCSC10H",80,0)
 .. W "    Taxonomy: ",$S($P(IBTAX,U,IBZ)'="":$P(IBTAX,U,IBZ),1:IBU),$S($P(IBSPEC,U,IBZ)'="":" ("_$P(IBSPEC,U,IBZ)_")",1:"")
"RTN","IBCSC10H",81,0)
 .. F A=1:1:3 I $G(IBARR(IBZ,A))'="" S IBQ=IBQ_"["_$E("PST",A)_"]"_IBARR(IBZ,A)_" "
"RTN","IBCSC10H",82,0)
 .. I $L(IBQ) W !,?30,$E(IBQ,1,49)
"RTN","IBCSC10H",83,0)
 ;
"RTN","IBCSC10H",84,0)
 K IB("PRV")
"RTN","IBCSC10H",85,0)
 ;
"RTN","IBCSC10H",86,0)
 ; Section 4
"RTN","IBCSC10H",87,0)
 S Z=4,IBW=1 X IBWW
"RTN","IBCSC10H",88,0)
 W " Other Facility (VA/non): " S IBZ=$$EXPAND^IBTRE(399,232,+$P(IB("U2"),U,10))
"RTN","IBCSC10H",89,0)
 W $S(IBZ'="":$E(IBZ,1,23),$$PSRV^IBCEU(IBIFN):IBU,1:IBUN)
"RTN","IBCSC10H",90,0)
 I IBZ'="" D
"RTN","IBCSC10H",91,0)
 . ; PRXM/KJH - Add Taxonomy code to display for patch 343.
"RTN","IBCSC10H",92,0)
 . W ?53,"Taxonomy: "
"RTN","IBCSC10H",93,0)
 . S IBZ=$$GET1^DIQ(8932.1,+$P(IB("U3"),U,3),"X12 CODE") W $S(IBZ'="":IBZ,1:IBU)
"RTN","IBCSC10H",94,0)
 . S IBZ=$$GET1^DIQ(8932.1,+$P(IB("U3"),U,3),"SPECIALTY CODE") W $S(IBZ'="":" ("_IBZ_")",1:"")
"RTN","IBCSC10H",95,0)
 . Q
"RTN","IBCSC10H",96,0)
 ;
"RTN","IBCSC10H",97,0)
 ; clia# display - IB patch 320
"RTN","IBCSC10H",98,0)
 S (IBZ,IBZ1)=$P(IB("U2"),U,13)     ; retrieve CLIA# from database
"RTN","IBCSC10H",99,0)
 ;
"RTN","IBCSC10H",100,0)
 I IBZ="" D
"RTN","IBCSC10H",101,0)
 . NEW CLIAREQ,DEFCLIA,DIE,DA,DR
"RTN","IBCSC10H",102,0)
 . S CLIAREQ=$$CLIAREQ^IBCEP8A(IBIFN)
"RTN","IBCSC10H",103,0)
 . I 'CLIAREQ S IBZ1=IBUN Q          ; clia# not needed
"RTN","IBCSC10H",104,0)
 . S DEFCLIA=$$CLIA^IBCEP8A(IBIFN)   ; default clia# for claim
"RTN","IBCSC10H",105,0)
 . I DEFCLIA="" S IBZ1=IBU Q         ; no default found
"RTN","IBCSC10H",106,0)
 . I $G(IBMDOTCN) K IBMDOTCN S IBZ1=IBU Q     ; user @-deleted clia#
"RTN","IBCSC10H",107,0)
 . S IBZ1=DEFCLIA                    ; display and stuff default clia#
"RTN","IBCSC10H",108,0)
 . S DIE=399,DA=IBIFN,DR="235///"_DEFCLIA D ^DIE    ; stuff in default
"RTN","IBCSC10H",109,0)
 . Q
"RTN","IBCSC10H",110,0)
 ;
"RTN","IBCSC10H",111,0)
 W !,?4,"Lab CLIA #         : ",IBZ1
"RTN","IBCSC10H",112,0)
 ;
"RTN","IBCSC10H",113,0)
 ; Mammo# display IB patch 320
"RTN","IBCSC10H",114,0)
 S (IBZ,IBZ1)=$P(IB("U3"),U,1)    ; retrieve mammo# from database
"RTN","IBCSC10H",115,0)
 ;
"RTN","IBCSC10H",116,0)
 ; If mammo# is there, but should not be, then blank it out
"RTN","IBCSC10H",117,0)
 I IBZ'="",'$$XRAY^IBCEP8A(IBIFN) D
"RTN","IBCSC10H",118,0)
 . NEW DIE,DA,DR
"RTN","IBCSC10H",119,0)
 . S IBZ1=IBUN        ; mammo# not needed
"RTN","IBCSC10H",120,0)
 . S DIE=399,DA=IBIFN,DR="242////@" D ^DIE
"RTN","IBCSC10H",121,0)
 . Q
"RTN","IBCSC10H",122,0)
 ;
"RTN","IBCSC10H",123,0)
 I IBZ="" S IBZ1=IBUN
"RTN","IBCSC10H",124,0)
 W !?4,"Mammography Cert # : ",IBZ1
"RTN","IBCSC10H",125,0)
 ;
"RTN","IBCSC10H",126,0)
 ; Section 5
"RTN","IBCSC10H",127,0)
 S Z=5,IBW=1 X IBWW
"RTN","IBCSC10H",128,0)
 W " Chiropractic Data  : " S Y=$P(IB("U3"),U,5) X ^DD("DD") W $S(Y'="":"INITIAL TREATMENT ON "_Y,1:IBUN)
"RTN","IBCSC10H",129,0)
 ;
"RTN","IBCSC10H",130,0)
 ; Section 6  -> changed prompt for *488* : baa
"RTN","IBCSC10H",131,0)
 S Z=6,IBW=1 X IBWW
"RTN","IBCSC10H",132,0)
 ;JWS;IB*2.0*592 US1108 - Dental
"RTN","IBCSC10H",133,0)
 ;IA# 3820
"RTN","IBCSC10H",134,0)
 I $$FT^IBCU3(IBIFN)'=7 W " CMS-1500 Box 19    : " S IBZ=$P($G(^DGCR(399,IBIFN,"UF31")),U,3) W $S(IBZ'="":IBZ,1:IBUN)
"RTN","IBCSC10H",135,0)
 E  D
"RTN","IBCSC10H",136,0)
 . W " Dental Claim Note  : " S IBZ=$$GET1^DIQ(399,IBIFN_",",97)
"RTN","IBCSC10H",137,0)
 . I IBZ="" W IBUN Q
"RTN","IBCSC10H",138,0)
 . N IBNOTE
"RTN","IBCSC10H",139,0)
 . S IBNOTE=$$WRAP(IBZ,53,53,.IBNOTE)
"RTN","IBCSC10H",140,0)
 . W $G(IBNOTE(1)) I $G(IBNOTE(2))'="" W !,?23,": ",IBNOTE(2)
"RTN","IBCSC10H",141,0)
 . Q
"RTN","IBCSC10H",142,0)
 ;end - JWS;IB*2.0*592 US1108 - Dental
"RTN","IBCSC10H",143,0)
 ;/ Beginning of IB*2.0*488 - Moved the following lines of code to IBCSC8 (vd)
"RTN","IBCSC10H",144,0)
 ;I $P(IB("U2"),U,14)'="" W !,?4,"Homebound          : ",$$EXPAND^IBTRE(399,236,$P(IB("U2"),U,14))
"RTN","IBCSC10H",145,0)
 ;I $P(IB("U2"),U,15)'="" W !,?4,"Date Last Seen     : ",$$EXPAND^IBTRE(399,237,$P(IB("U2"),U,15))
"RTN","IBCSC10H",146,0)
 ;I $P(IB("U2"),U,16)'="" W !,?4,"Spec Prog Indicator: " S IBZ=$$EXPAND^IBTRE(399,238,$P(IB("U2"),U,16)) W $S(IBZ'="":IBZ,$$WNRBILL^IBEFUNC(IBIFN):"31",1:"")
"RTN","IBCSC10H",147,0)
 ;/ End of IB*2.0*488 (vd)
"RTN","IBCSC10H",148,0)
 ;
"RTN","IBCSC10H",149,0)
 ; Section 7
"RTN","IBCSC10H",150,0)
 S Z=7,IBW=1 X IBWW
"RTN","IBCSC10H",151,0)
 W " Billing Provider   : "
"RTN","IBCSC10H",152,0)
 K IBZ
"RTN","IBCSC10H",153,0)
 D GETBP^IBCEF79(IBIFN,"",+$$B^IBCEF79(IBIFN),"CMS-1500 SCREEN 8",.IBZ)
"RTN","IBCSC10H",154,0)
 S IBZ=$G(IBZ("CMS-1500 SCREEN 8","NAME"))
"RTN","IBCSC10H",155,0)
 W $S(IBZ'="":IBZ,1:IBU)    ; billing provider name
"RTN","IBCSC10H",156,0)
 W !?3," Taxonomy Code      : "
"RTN","IBCSC10H",157,0)
 S IBZ=$$GET1^DIQ(8932.1,+$P(IB("U3"),U,11),"X12 CODE") W $S(IBZ'="":IBZ,1:IBU)
"RTN","IBCSC10H",158,0)
 S IBZ=$$GET1^DIQ(8932.1,+$P(IB("U3"),U,11),"SPECIALTY CODE") W $S(IBZ'="":" ("_IBZ_")",1:"")
"RTN","IBCSC10H",159,0)
 ;
"RTN","IBCSC10H",160,0)
 ; Section 8
"RTN","IBCSC10H",161,0)
 ;WCJ;IB*2.0*5471
"RTN","IBCSC10H",162,0)
 ;Adding ALT PRIMARY IDS and moving sections down to make room
"RTN","IBCSC10H",163,0)
 S Z=8,IBW=1 X IBWW
"RTN","IBCSC10H",164,0)
 W " Alt Prim Payer ID  : "
"RTN","IBCSC10H",165,0)
 K IBZ
"RTN","IBCSC10H",166,0)
 S IBZCNT=0
"RTN","IBCSC10H",167,0)
 I $P(IB("M2"),U,2)]"" S IBZCNT=IBZCNT+1,IBZ(IBZCNT)="P: "_$P(IB("M2"),U,2)
"RTN","IBCSC10H",168,0)
 I $P(IB("M2"),U,4)]"" S IBZCNT=IBZCNT+1,IBZ(IBZCNT)="S: "_$P(IB("M2"),U,4)
"RTN","IBCSC10H",169,0)
 I $P(IB("M2"),U,6)]"" S IBZCNT=IBZCNT+1,IBZ(IBZCNT)="T: "_$P(IB("M2"),U,6)
"RTN","IBCSC10H",170,0)
 I 'IBZCNT W ?23,IBUN
"RTN","IBCSC10H",171,0)
 I IBZCNT F IBZ1=1:1:IBZCNT W ?23,IBZ(IBZ1) W:(IBZ1'=IBZCNT) !
"RTN","IBCSC10H",172,0)
 K IBZ
"RTN","IBCSC10H",173,0)
 ;
"RTN","IBCSC10H",174,0)
 ; Section 9
"RTN","IBCSC10H",175,0)
 S Z=9,IBW=1 X IBWW
"RTN","IBCSC10H",176,0)
 S IBREQ=+$$REQMRA^IBEFUNC(IBIFN) S:IBREQ IBREQ=1
"RTN","IBCSC10H",177,0)
 S IBMRASEC=$$MRASEC^IBCEF4(IBIFN)
"RTN","IBCSC10H",178,0)
 W " ",$S('IBREQ:"Force To Print?    : ",1:"Force MRA Sec Prt? : ")
"RTN","IBCSC10H",179,0)
 S IBZ=$$EXTERNAL^DILFD(399,27+IBREQ,,+$P(IB("TX"),U,8+IBREQ))
"RTN","IBCSC10H",180,0)
 I IBMRASEC,'$P(IB("TX"),U,8),$P(IB("TX"),U,9) S IBZ="FORCED TO PRINT BY MRA PRIMARY",$P(IB("TX"),U,8)=0
"RTN","IBCSC10H",181,0)
 W $S(IBZ'=""&($P(IB("TX"),U,8+IBREQ)'=""):IBZ,'$$TXMT^IBCEF4(IBIFN):"[NOT APPLICABLE - NOT TRANSMITTABLE]",IBREQ:"NO FORCED PRINT",1:IBZ)
"RTN","IBCSC10H",182,0)
 ;
"RTN","IBCSC10H",183,0)
 ; Section 10
"RTN","IBCSC10H",184,0)
 S Z=10,IBW=1 X IBWW
"RTN","IBCSC10H",185,0)
 W " Provider ID Maint  : (Edit Provider ID information)",!
"RTN","IBCSC10H",186,0)
 G ^IBCSCP
"RTN","IBCSC10H",187,0)
Q Q
"RTN","IBCSC10H",188,0)
 ;
"RTN","IBCSC10H",189,0)
WRT1(IBCRED) ; Write credentials mismatch
"RTN","IBCSC10H",190,0)
 W !,*7,"  **Warning** Credentials differ from those found in NEW PERSON or IB NON VA",!,$J("",14),"BILLING PROVIDER file (",$S(IBCRED="":"none",1:IBCRED),")"
"RTN","IBCSC10H",191,0)
 W !,$J("",14),"Changes will print local, but only credentials on file transmit"
"RTN","IBCSC10H",192,0)
 Q
"RTN","IBCSC10H",193,0)
 ;
"RTN","IBCSC10H",194,0)
NSAME(DA) ; Returns 1 if div on bill is not the default billing facility
"RTN","IBCSC10H",195,0)
 Q ($P($G(^IBE(350.9,1,0)),U,2)'=$P($G(^DG(40.8,+$P(^DGCR(399,DA,0),U,22),0)),U,7))
"RTN","IBCSC10H",196,0)
 ;
"RTN","IBCSC10H",197,0)
WRAP(STRING,ROOM,SUBS,IBARY) ; wrap long lines without breaking up words
"RTN","IBCSC10H",198,0)
 ;
"RTN","IBCSC10H",199,0)
 ; STRING = data string to wrap
"RTN","IBCSC10H",200,0)
 ; ROOM = number of characters to break at for line 1
"RTN","IBCSC10H",201,0)
 ; SUBS = number of characters to break at for subsequent lines (may or may not be same as ROOM)
"RTN","IBCSC10H",202,0)
 ; IBARY = (required) subscripted array to return wrapped data in:
"RTN","IBCSC10H",203,0)
 ;  array(1)=first line
"RTN","IBCSC10H",204,0)
 ;  array(2)= 2nd line and so on
"RTN","IBCSC10H",205,0)
 ;
"RTN","IBCSC10H",206,0)
 ; Returns total # of lines in description
"RTN","IBCSC10H",207,0)
 ;
"RTN","IBCSC10H",208,0)
 N START,END,I,C,STOP
"RTN","IBCSC10H",209,0)
 ; if there is enough room for 1 line, no wrapping needed
"RTN","IBCSC10H",210,0)
 I $L(STRING)'>ROOM S IBARY(1)=STRING Q 1
"RTN","IBCSC10H",211,0)
 I $F(STRING," ")=0 D  Q 1
"RTN","IBCSC10H",212,0)
 . N LEN S LEN=$L(STRING)
"RTN","IBCSC10H",213,0)
 . F I=1:1 S IBARY(I)=$E(STRING,1,ROOM),STRING=$E(STRING,ROOM+1,LEN) Q:STRING=""
"RTN","IBCSC10H",214,0)
 . Q
"RTN","IBCSC10H",215,0)
 I $F(STRING," ")>ROOM S IBARY(1)=STRING Q 1
"RTN","IBCSC10H",216,0)
 ; add a space to the end of the string to avoid dropping last character
"RTN","IBCSC10H",217,0)
 S START=1,END=ROOM,STRING=STRING_" "
"RTN","IBCSC10H",218,0)
 F C=1:1 D  Q:$L(STRING)<START  Q:$G(STOP)  ; stop if we have made it to the end of the data string
"RTN","IBCSC10H",219,0)
 .; start at the end and work backwards until you find a blank space, cut the line there and move on to the next line 
"RTN","IBCSC10H",220,0)
 .F I=END:-1:1 I $E(STRING,I)=" " S IBARY(C)=$E(STRING,START,I),START=I+1,END=SUBS+START Q
"RTN","IBCSC10H",221,0)
 .I I=1 S STOP=1 I '$D(IBARY(1)) S IBARY(1)=STRING Q
"RTN","IBCSC10H",222,0)
 Q C
"RTN","IBCSC10H",223,0)
 ;
"RTN","IBCSC10H",224,0)
 ;JWS;IB*2.0*592;only allow either Rendering or Assistant Surgeon on a Dental Claim
"RTN","IBCSC10H",225,0)
FILTERP(IBIEN,TYPE) ;filter input of provider for dental claims
"RTN","IBCSC10H",226,0)
 N OK,IBX1,IBX2
"RTN","IBCSC10H",227,0)
 S OK=1,IBX1=0
"RTN","IBCSC10H",228,0)
 F  S IBX1=$O(^DGCR(399,IBIEN,"CP",IBX1)) Q:'IBX1  D  Q:'OK
"RTN","IBCSC10H",229,0)
 . I TYPE=3,$D(^DGCR(399,IBIEN,"CP",IBX1,"LNPRV","B",6)) D  I 'OK Q
"RTN","IBCSC10H",230,0)
 .. S IBX2=$O(^DGCR(399,IBIEN,"CP",IBX1,"LNPRV","B",6,0)) I IBX2="" Q
"RTN","IBCSC10H",231,0)
 .. I $P($G(^DGCR(399,IBIEN,"CP",IBX1,"LNPRV",IBX2,0)),"^",2)'="" S OK=0 Q
"RTN","IBCSC10H",232,0)
 . I TYPE=6,$D(^DGCR(399,IBIEN,"CP",IBX1,"LNPRV","B",3)) D  I 'OK Q
"RTN","IBCSC10H",233,0)
 .. S IBX2=$O(^DGCR(399,IBIEN,"CP",IBX1,"LNPRV","B",3,0)) I IBX2="" Q
"RTN","IBCSC10H",234,0)
 .. I $P($G(^DGCR(399,IBIEN,"CP",IBX1,"LNPRV",IBX2,0)),"^",2)'="" S OK=0 Q
"RTN","IBCSC10H",235,0)
 I OK,TYPE=3,$D(^DGCR(399,IBIEN,"PRV","B",6)) D
"RTN","IBCSC10H",236,0)
 . S IBX1=$O(^DGCR(399,IBIEN,"PRV","B",6,0)) I IBX1="" Q
"RTN","IBCSC10H",237,0)
 . I $P($G(^DGCR(399,IBIEN,"PRV",IBX1,0)),"^",2)'="" S OK=0
"RTN","IBCSC10H",238,0)
 I OK,TYPE=6,$D(^DGCR(399,IBIEN,"PRV","B",3)) D
"RTN","IBCSC10H",239,0)
 . S IBX1=$O(^DGCR(399,IBIEN,"PRV","B",3,0)) I IBX1="" Q
"RTN","IBCSC10H",240,0)
 . I $P($G(^DGCR(399,IBIEN,"PRV",IBX1,0)),"^",2)'="" S OK=0
"RTN","IBCSC10H",241,0)
 Q OK
"RTN","IBCSC10H",242,0)
 ;
"RTN","IBCSC10H",243,0)
 ;IBCSC10H
"RTN","IBCSC3")
0^27^B37966434^B37464352
"RTN","IBCSC3",1,0)
IBCSC3 ;ALB/MJB - MCCR SCREEN 3 (PAYER/MAILING ADDRESS) ;27 MAY 88 10:15
"RTN","IBCSC3",2,0)
 ;;2.0;INTEGRATED BILLING;**8,43,52,80,82,51,137,232,320,377,516,592**;21-MAR-94;Build 58
"RTN","IBCSC3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCSC3",4,0)
 ;
"RTN","IBCSC3",5,0)
 ;MAP TO DGCRSC3
"RTN","IBCSC3",6,0)
 ;
"RTN","IBCSC3",7,0)
EN N IB,IBX,IBINS,Y,Z
"RTN","IBCSC3",8,0)
 I $D(DGRVRCAL) D ^IBCU6 K DGRVRCAL
"RTN","IBCSC3",9,0)
 D ^IBCSCU S IBSR=3,IBSR1="",IBV1="000" I IBV S IBV1="111"
"RTN","IBCSC3",10,0)
 D H^IBCSCU
"RTN","IBCSC3",11,0)
 D:$D(^DGCR(399,IBIFN,"AIC")) 3^IBCVA0
"RTN","IBCSC3",12,0)
 D:'$D(^DGCR(399,IBIFN,"AIC")) 123^IBCVA
"RTN","IBCSC3",13,0)
 D POL^IBCNSU41(DFN)
"RTN","IBCSC3",14,0)
 F I=0,"M","M1","U","U2" S IB(I)=$S($D(^DGCR(399,IBIFN,I)):(^(I)),1:"")
"RTN","IBCSC3",15,0)
 S IBOUTP=2,IBINDT=$S(+$G(IB("U")):+IB("U"),1:DT)
"RTN","IBCSC3",16,0)
 ;
"RTN","IBCSC3",17,0)
 S X=" Rate Type  : "_$S($P(IB(0),U,7)']"":IBU,$D(^DGCR(399.3,$P(IB(0),U,7),0)):$P(^(0),U),1:IBUN)
"RTN","IBCSC3",18,0)
 S Z=1,IBW=1 X IBWW W X
"RTN","IBCSC3",19,0)
 I +$P($G(^IBE(350.9,1,1)),U,22) W $J("",(42-$L(X))),"Form Type: ",$P($G(^IBE(353,+$P(IB(0),U,19),0)),U,1)
"RTN","IBCSC3",20,0)
 W !?4,"Responsible: ",$S($P(IB(0),U,11)']"":IBU,$P(IB(0),U,11)="p":"PATIENT",$P(IB(0),U,11)="i":"INSURER",1:"OTHER")
"RTN","IBCSC3",21,0)
 W ?45,"Payer Sequence: " S IBX=$P(IB(0),U,21) W $S(IBX="P":"Primary",IBX="S":"Secondary",IBX="T":"Tertiary",IBX="A":"Patient",1:"")
"RTN","IBCSC3",22,0)
 I $P(IB(0),U,11)="i" D
"RTN","IBCSC3",23,0)
 . W !?4,"Bill Payer : " S X=$G(^DGCR(399,IBIFN,"MP"))
"RTN","IBCSC3",24,0)
 . W $S(+X:$P($G(^DIC(36,+X,0)),U,1),$$MCRWNR^IBEFUNC($$CURR^IBCEF2(IBIFN)):"MRA NEEDED FROM MEDICARE",1:IBU)
"RTN","IBCSC3",25,0)
 . W ?45,"Transmit: " S Z=0,X=$$TXMT^IBCEF4(IBIFN,.Z)
"RTN","IBCSC3",26,0)
 . W $S(X:"Yes",1:"No-"_$S(Z=1:"Forced to print local",Z=2&($$WNRBILL^IBEFUNC(IBIFN)):"MRA not active",Z=2:"EDI not active",Z=3:"Rate typ transmit off",Z=4:"Ins. co transmit off",Z=5:"Failed RULE #"_$G(Z(0)),Z=6:"Invalid NDC code type",1:"??"))
"RTN","IBCSC3",27,0)
 I $P(IB(0),U,11)']"" G MAIL
"RTN","IBCSC3",28,0)
 I $P(IB(0),U,11)="p" G MAIL
"RTN","IBCSC3",29,0)
 I $P(IB(0),U,11)="o" W !?4,"Inst. Name : ",$S($P(IB("M"),U,11)']"":IBU,$D(^DIC(4,$P(IB("M"),U,11),0)):$P(^(0),U,1),1:"UNKNOWN INSTITUTION") G MAIL
"RTN","IBCSC3",30,0)
 I $P(IB(0),U,11)="i" I $D(IBDD)>1,$D(^DGCR(399,IBIFN,"AIC")) G SHW
"RTN","IBCSC3",31,0)
 D UP G LST:$D(IBDD)>1 W !?4,"Insurance : NO REIMBURSABLE INSURANCE INFORMATION ON FILE",!?17,"[Add Insurance Information by entering '1' at the prompt below]" G MAIL
"RTN","IBCSC3",32,0)
 ;
"RTN","IBCSC3",33,0)
LST N IBDTIN,IBICT
"RTN","IBCSC3",34,0)
 S IBDTIN=+$G(IB("U")),IBICT=0
"RTN","IBCSC3",35,0)
 W ! D HDR^IBCNS
"RTN","IBCSC3",36,0)
 S I=0 F  S I=$O(IBDD("S",I)) Q:'I  D  Q:IBICT'<5
"RTN","IBCSC3",37,0)
 .S IBX=0 F  S IBX=$O(IBDD("S",I,IBX)) Q:'IBX  S IBINS=$G(IBDD(IBX,0)) I IBINS'="" S IBICT=IBICT+1 D:IBICT<5 D1^IBCNS I IBICT'<5 W !,?1,"**Patient has additional insurance - use ?INS to see the entire list" Q
"RTN","IBCSC3",38,0)
 G MAIL
"RTN","IBCSC3",39,0)
LST1 W !?4,$S($D(^DIC(36,+IBDD(IBX,0),0)):$E($P(^(0),"^",1),1,20),1:"UNKNOWN") S X=$P(IBDD(IBX,0),"^",6) W ?26,$S(X="v":"VETERAN",X="s":"SPOUSE",1:"OTHER") S X=$P(IBDD(IBX,0),"^",16)
"RTN","IBCSC3",40,0)
 S X=$S(+X=1:"PATIENT",+X=2:"SPOUSE",+X=3:"CHILD",+X=8:"EMPLOYEE",+X=11:"ORGAN DONOR",+X=18:"PARENT",+X=15:"PLANTIFF",1:"UNKNOWN")
"RTN","IBCSC3",41,0)
 I X="UNKNOWN" S X1=$S($D(IBDD(IBX,0)):$P(IBDD(IBX,0),"^",6),1:""),X=$S(X1="v":"PATIENT",X1="s":"SPOUSE",1:X)
"RTN","IBCSC3",42,0)
 W ?37,X,?49 S Y=$P(IBDD(IBX,0),"^",8) X ^DD("DD") W Y,?64 S Y=$P(IBDD(IBX,0),"^",4) X ^DD("DD") W Y
"RTN","IBCSC3",43,0)
 Q
"RTN","IBCSC3",44,0)
SHW I $D(IBDD) S I="" F  S I=$O(IBDD(I)) Q:'I  D SHW1
"RTN","IBCSC3",45,0)
MAIL I $$BUFFER^IBCNBU1(DFN) W !!,?17,"***  Patient has Insurance Buffer entries  ***"
"RTN","IBCSC3",46,0)
 ;
"RTN","IBCSC3",47,0)
 S IB("M")=$S($D(^DGCR(399,IBIFN,"M")):^("M"),1:""),IB("M1")=$S($D(^DGCR(399,IBIFN,"M1")):^("M1"),1:""),IB(0)=^DGCR(399,IBIFN,0)
"RTN","IBCSC3",48,0)
 S Z=2,IBW=1 W ! X IBWW
"RTN","IBCSC3",49,0)
 N IBRAMS S IBRAMS=4.06
"RTN","IBCSC3",50,0)
 I $$FT^IBCEF(IBIFN)=3 S IBRAMS=4.08
"RTN","IBCSC3",51,0)
 S IB("RAFLAG",1)=$S($P(IB("M"),U,1)="":0,1:$$GET1^DIQ(36,$P(IB("M"),U,1),IBRAMS,"I"))
"RTN","IBCSC3",52,0)
 S IB("RAFLAG",2)=$S($P(IB("M"),U,2)="":0,1:$$GET1^DIQ(36,$P(IB("M"),U,2),IBRAMS,"I"))
"RTN","IBCSC3",53,0)
 S IB("RAFLAG",3)=$S($P(IB("M"),U,3)="":0,1:$$GET1^DIQ(36,$P(IB("M"),U,3),IBRAMS,"I"))
"RTN","IBCSC3",54,0)
 S X=0
"RTN","IBCSC3",55,0)
 I $P(IB("M1"),U,2)="",'IB("RAFLAG",1),$P(IB("M1"),U,3)="",'IB("RAFLAG",2),$P(IB("M1"),U,4)="",'IB("RAFLAG",3) S X=1
"RTN","IBCSC3",56,0)
 W " Billing Provider Secondary IDs: "
"RTN","IBCSC3",57,0)
 I X W IBUN          ; no data found, unspecified not required
"RTN","IBCSC3",58,0)
 I 'X D              ; data found, display below
"RTN","IBCSC3",59,0)
 . W !?5,"Primary Payer: ",$S($P(IB("M1"),U,2)]"":$P(IB("M1"),U,2),IB("RAFLAG",1):"ATT/REND ID",1:"")
"RTN","IBCSC3",60,0)
 . W !?5,"Secondary Payer: ",$S($P(IB("M1"),U,3)]"":$P(IB("M1"),U,3),IB("RAFLAG",2):"ATT/REND ID",1:"")
"RTN","IBCSC3",61,0)
 . W ?46,"Tertiary Payer: ",$S($P(IB("M1"),U,4)]"":$P(IB("M1"),U,4),IB("RAFLAG",3):"ATT/REND ID",1:"")
"RTN","IBCSC3",62,0)
 . Q
"RTN","IBCSC3",63,0)
 ;
"RTN","IBCSC3",64,0)
 S Z=3,IBW=1 W ! X IBWW
"RTN","IBCSC3",65,0)
 W " Mailing Address : "
"RTN","IBCSC3",66,0)
 S X=+$G(^DGCR(399,IBIFN,"MP"))
"RTN","IBCSC3",67,0)
 I 'X,$$MCRWNR^IBEFUNC(+$$CURR^IBCEF2(IBIFN)) S X=+$$CURR^IBCEF2(IBIFN)
"RTN","IBCSC3",68,0)
 ;JWS;IB*2.0*592 US1108 - Dental form #7
"RTN","IBCSC3",69,0)
 ;IA# 5292
"RTN","IBCSC3",70,0)
 I X,+$G(^DIC(36,X,3)) S I=$P(^(3),U,$S($$FT^IBCEF(IBIFN)=2:2,$$FT^IBCEF(IBIFN)=7:15,1:4)) W ?56,"Electronic ID: ",$S(I'="":I,1:"<NONE>")
"RTN","IBCSC3",71,0)
 S X="" I IB("M")]"" F I=4:1:9 Q:X]""  S X=$P(IB("M"),"^",I)
"RTN","IBCSC3",72,0)
 I X']"" W !?4,"NO MAILING ADDRESS HAS BEEN SPECIFIED!",?45,$$UP1,!?4,"Send Bill to PAYER listed above." G ENDSCR
"RTN","IBCSC3",73,0)
 S X=IB("M") W !,?4,$S($P(X,"^",4)]"":$P(X,"^",4),1:"'MAIL TO' PERSON/PLACE UNSPECIFIED"),?45,$$UP1
"RTN","IBCSC3",74,0)
 W !?4,$S($P(X,"^",5)]"":$P(X,"^",5),1:"STREET ADDRESS UNSPECIFIED") W:$P(X,"^",6)]"" ", ",$P(X,"^",6)
"RTN","IBCSC3",75,0)
 W ! W:$P(IB("M1"),"^",1)]"" ?4,$P(IB("M1"),"^",1),", "
"RTN","IBCSC3",76,0)
 W ?4,$S($P(X,"^",7)]"":$P(X,"^",7),1:"CITY UNSPECIFIED"),", ",$S($D(^DIC(5,+$P(X,"^",8),0)):$P(^(0),"^",2),1:"STATE UNSPECIFIED"),"  ",$S($P(X,"^",9)]"":$P(X,"^",9),1:"ZIP UNSPECIFIED")
"RTN","IBCSC3",77,0)
 ;
"RTN","IBCSC3",78,0)
ENDSCR K IBADI,IBDD,IBOUTP,IBINDT,I,X,X1
"RTN","IBCSC3",79,0)
 G ^IBCSCP
"RTN","IBCSC3",80,0)
 ;
"RTN","IBCSC3",81,0)
SHW1 ; Display information for insurance I.
"RTN","IBCSC3",82,0)
 ; MRD;IB*2.0*516 - Rearranged some fields to allow more characters
"RTN","IBCSC3",83,0)
 ; to be displayed for Group #, Group Name, Policy #, Insured.
"RTN","IBCSC3",84,0)
 S X=IBDD(I,0),Z=$G(^DIC(36,+X,0))
"RTN","IBCSC3",85,0)
 W !!?4,"Ins ",I,": " W $E($S($P(Z,U,1)'="":$P(Z,U,1),1:IBU),1,16)
"RTN","IBCSC3",86,0)
 I $P(Z,U,2)="N" W ?30,"WILL NOT REIMBURSE"
"RTN","IBCSC3",87,0)
 W ?51,"Whose: ",$S($P(X,"^",6)="v":"VETERAN",$P(X,"^",6)="s":"SPOUSE",1:"OTHER")
"RTN","IBCSC3",88,0)
 W !?4,"Policy #: ",$E($S($P(X,"^",2)]"":$P(X,"^",2),1:IBU),1,34)
"RTN","IBCSC3",89,0)
 W ?51,"Rel to Insd: ",$E(IBIR(I),1,15)
"RTN","IBCSC3",90,0)
 W !?4,"Insured: ",$E($P(X,"^",17),1,35)
"RTN","IBCSC3",91,0)
 W ?51,"Insd Sex: ",$S($D(IBISEX(I)):IBISEX(I),1:IBU)
"RTN","IBCSC3",92,0)
 W !?4,"Grp #: ",$E($S($P(X,"^",3)]"":$P(X,"^",3),1:IBU),1,67)
"RTN","IBCSC3",93,0)
 W !?4,"Grp Nm: ",$E($S($P(X,"^",15)]"":$P(X,"^",15),1:IBU),1,66)
"RTN","IBCSC3",94,0)
 Q
"RTN","IBCSC3",95,0)
 ;
"RTN","IBCSC3",96,0)
UP K IBDD D ALL^IBCNS1(DFN,"IBDD",2,IBINDT,1)
"RTN","IBCSC3",97,0)
 I $D(IBDD("S",.5)) D  ; At least 1 MCR WNR insurance policy exists
"RTN","IBCSC3",98,0)
 . ;try to put correct part (A for institution and B for facility)
"RTN","IBCSC3",99,0)
 . N Z,IBAB
"RTN","IBCSC3",100,0)
 . S IBAB=$S($$FT^IBCEF(IBIFN)=3:"A",1:"B")
"RTN","IBCSC3",101,0)
 . S Z=0 F  S Z=$O(IBDD("S",.5,Z)) Q:'Z  D
"RTN","IBCSC3",102,0)
 .. I $P($G(IBDD(Z,355.3)),U,14)=IBAB S IBDD("S",.1,Z,0)="" K IBDD("S",.5,Z)
"RTN","IBCSC3",103,0)
 Q
"RTN","IBCSC3",104,0)
 ;
"RTN","IBCSC3",105,0)
UP1() ;check if patient has medicare so can print a flag for the user
"RTN","IBCSC3",106,0)
 N IBDD,IBX,IBY S IBY="" D ALL^IBCNS1(DFN,"IBDD",2,IBINDT)
"RTN","IBCSC3",107,0)
 S IBX=0 F  S IBX=$O(IBDD(IBX)) Q:'IBX  I $P($G(IBDD(IBX,355.3)),U,9)=33 S IBY="(Patient has Medicare)"
"RTN","IBCSC3",108,0)
 Q IBY
"RTN","IBCSC3",109,0)
 ;IBCSC3
"RTN","IBCSC4")
0^134^B25978379^B25534082
"RTN","IBCSC4",1,0)
IBCSC4 ;ALB/MJB - MCCR SCREEN 4 (INPT. EOC) ;27 MAY 88 10:17
"RTN","IBCSC4",2,0)
 ;;2.0;INTEGRATED BILLING;**52,51,210,245,155,287,349,403,400,461,592**;21-MAR-94;Build 58
"RTN","IBCSC4",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCSC4",4,0)
 ;
"RTN","IBCSC4",5,0)
 ;MAP TO DGCRSC4
"RTN","IBCSC4",6,0)
 ;
"RTN","IBCSC4",7,0)
EN I $P(^DGCR(399,IBIFN,0),"^",5)>2 G EN^IBCSC5
"RTN","IBCSC4",8,0)
 I $D(IBASKCOD) K IBASKCOD D CODMUL^IBCU7 I $$BILLCPT^IBCRU4(IBIFN) D ASK^IBCU7A(IBIFN) S DGRVRCAL=1
"RTN","IBCSC4",9,0)
 I $D(DGRVRCAL) D ^IBCU6 K DGRVRCAL
"RTN","IBCSC4",10,0)
 D ^IBCSCU S IBSR=4,IBSR1="",IBV1="0000000"_$S($$FT^IBCEF(IBIFN)'=2:0,1:1),IBUC="UNSPECIFIED CODE"
"RTN","IBCSC4",11,0)
 S:IBV IBV1="11111111"
"RTN","IBCSC4",12,0)
 D H^IBCSCU F I=1:1:4 S Y="Q"_I_"^IBCVA" D @Y
"RTN","IBCSC4",13,0)
 D INP
"RTN","IBCSC4",14,0)
 S IBBT=$P(IB(0),"^",4)_$P(IB(0),"^",5)_$P(IB(0),"^",6)
"RTN","IBCSC4",15,0)
 D:DGPT(0)]"" DX^IBCSC4A D OCC^IBCVA1
"RTN","IBCSC4",16,0)
 I '$P(DGPT(0),U,6) W !?26,$S('DGPT(0):"No PTF record for this ADMISSION",1:"PTF record status: OPEN")
"RTN","IBCSC4",17,0)
 S J=$P(IB("U"),U,20),J=$S(J=99:"",J="":"",J=0:"",$L(J)=1:".0"_J,1:"."_J)
"RTN","IBCSC4",18,0)
 S Z=1 X IBWW W " Admission  : " S I=$S($P(DGPT(0),U,2)]"":$P(DGPT(0),U,2),1:$P(IBIP,U,2)_J) S:$P(I,".",2)=""&I $P(I,".",2)="2400"
"RTN","IBCSC4",19,0)
 S Y=$$FMTE^XLFDT(I,"1P")
"RTN","IBCSC4",20,0)
 W Y,?49,"Accident Hour: ",$S($P(IB("U"),U,10)=99:IBU,$P(IB("U"),U,10)'="":$P(IB("U"),U,10),1:IBU)
"RTN","IBCSC4",21,0)
 W !?4,"Source     : " S I=$P(^DD(399,159,0),U,3),I=$P($P(I,";",($P(IB("U"),U,9))),":",2) W I
"RTN","IBCSC4",22,0)
 ;
"RTN","IBCSC4",23,0)
 ; IB*2*400 - new values added to field# 158
"RTN","IBCSC4",24,0)
 N ATIN,ATEX
"RTN","IBCSC4",25,0)
 S ATIN=+$P($G(IB("U")),U,8),ATEX=""
"RTN","IBCSC4",26,0)
 I ATIN S ATEX=$$EXTERNAL^DILFD(399,158,,ATIN)
"RTN","IBCSC4",27,0)
 I ATIN=9 S ATEX="INFO NOT AVAIL"    ; so it fits on the screen
"RTN","IBCSC4",28,0)
 I ATEX="" S ATEX=IBU
"RTN","IBCSC4",29,0)
 W ?58,"Type: ",ATEX
"RTN","IBCSC4",30,0)
 ;
"RTN","IBCSC4",31,0)
 D OT
"RTN","IBCSC4",32,0)
 S Z=2 X IBWW
"RTN","IBCSC4",33,0)
 W " Discharge  : " S Y=$S($P(IBIP,U,6)>0:$P(IBIP,U,6),1:"") X ^DD("DD") W $S(Y]"":Y,1:IBU)
"RTN","IBCSC4",34,0)
 W !?4,"Status     : ",$S($P(IB("U"),U,12)]""&($D(^DGCR(399.1,(+$P(IB("U"),"^",12)),0))):$P(^(0),"^",1),1:IBU)
"RTN","IBCSC4",35,0)
 N IBPOARR,IBDATE,NEEDPOA,POA
"RTN","IBCSC4",36,0)
 D SET^IBCSC4D(IBIFN,"",.IBPOARR)
"RTN","IBCSC4",37,0)
 S IBDATE=$$BDATE^IBACSV(+$G(IBIFN)) ; The STATEMENT TO DATE of the bill
"RTN","IBCSC4",38,0)
 S NEEDPOA=$$INPAT^IBCEF(IBIFN)&($$FT^IBCEF(IBIFN)=3)
"RTN","IBCSC4",39,0)
 S Z=3,IBW=1 X IBWW W " Prin. Diag.: " S Y=$$DX(0,IBDATE),POA="" S:NEEDPOA&(Y'="") POA=$P(IBPOARR(+Y),U,3)
"RTN","IBCSC4",40,0)
 W $S(Y'="":$E($P(Y,U,4),1,47)_" - "_$P(Y,U,2)_$S(POA=""!(POA=1):"",1:" ("_POA_")"),$$DXREQ(IBIFN):IBU,1:IBUN)
"RTN","IBCSC4",41,0)
 F I=1:1:4 S Y=$$DX(+Y,IBDATE) Q:Y=""  D
"RTN","IBCSC4",42,0)
 .S POA="" S:NEEDPOA POA=$P(IBPOARR(+Y),U,3)
"RTN","IBCSC4",43,0)
 .W !?4,"Other Diag.: ",$E($P(Y,U,4),1,47)_" - "_$P(Y,U,2)_$S(POA=""!(POA=1):"",1:" ("_POA_")")
"RTN","IBCSC4",44,0)
 .Q
"RTN","IBCSC4",45,0)
 I +Y S Y=$$DX(+Y,IBDATE) I +Y W !?4,"***There are more diagnoses associated with this bill.***"
"RTN","IBCSC4",46,0)
 S Z=4,IBW=1,DGPCM=$P(IB(0),U,9) X IBWW W " Cod. Method: ",$S(DGPCM="":IBUN,DGPCM=9:"ICD",DGPCM=4:"CPT-4",1:"HCPCS")
"RTN","IBCSC4",47,0)
 D:$D(IBPROC) WRT^IBCSC5
"RTN","IBCSC4",48,0)
OCC ;
"RTN","IBCSC4",49,0)
 S Z=$S($P(IB(0),U,5)<3:5,1:6)
"RTN","IBCSC4",50,0)
 S IBW=1 X IBWW W " Pros. Items: " S Y=$$PD^IBCSC5 I 'Y W IBUN
"RTN","IBCSC4",51,0)
 S Z=$S($P(IB(0),U,5)<3:6,1:7) X IBWW
"RTN","IBCSC4",52,0)
 W " Occ. Code  : " F I=1:1:5 I $D(IBO(I)) W:I>1 !?4,"Occ. Code  : ",$E(IBOCN(I),1,27) W:I=1 $E(IBOCN(I),1,27) S Y=IBOCD(I) X ^DD("DD") W ?55,Y S Y=IBOCD2(I) I +Y X ^DD("DD") W " - ",Y
"RTN","IBCSC4",53,0)
 I '$D(IBO) W IBUN
"RTN","IBCSC4",54,0)
 I $D(IBO)=1,IBO="" W IBUN
"RTN","IBCSC4",55,0)
 ;JWS;IB*2.0*592 US1108 - Dental
"RTN","IBCSC4",56,0)
 I $$FT^IBCEF(IBIFN)=7 D Q^IBCSC4B G ^IBCSCP
"RTN","IBCSC4",57,0)
 S Z=$S($P(IB(0),U,5)<3:7,1:8) X IBWW
"RTN","IBCSC4",58,0)
 W " Cond. Code : " F I=1:1:5 I $D(IBCC(I)) W:I>1 !?4,"Cond. Code : ",IBCCN(I) W:I=1 IBCCN(I)
"RTN","IBCSC4",59,0)
 I '$D(IBCC) W IBUN
"RTN","IBCSC4",60,0)
 I $D(IBCC)=1,IBCC="" W IBUN
"RTN","IBCSC4",61,0)
 S Z=$S($P(IB(0),U,5)<3:8,1:9)
"RTN","IBCSC4",62,0)
 X IBWW W " Value Code : " S IBVC=0
"RTN","IBCSC4",63,0)
 I $$FT^IBCEF(IBIFN)'=2 D
"RTN","IBCSC4",64,0)
 . D VC^IBCVA1 I +IBVC S J=1,I=0 F  S I=$O(IBVC(I)) Q:'I  W:J>1 !,?3," Value Code : " W ?17,$E($P(IBVC(I),U,2),1,40),?58,$P(IBVC(I),U,3) S J=J+1
"RTN","IBCSC4",65,0)
 W:'IBVC IBUN K IBVC
"RTN","IBCSC4",66,0)
 D Q^IBCSC4B G ^IBCSCP
"RTN","IBCSC4",67,0)
 Q
"RTN","IBCSC4",68,0)
OCC1 W $P(^DGCR(399,IBIFN,"CP",I,0),"^",3)_" - "_$P($$PRCD^IBCEF1($P(^DGCR(399,IBIFN,"CP",I,0),U)),U),?55,"Date: ",Y
"RTN","IBCSC4",69,0)
 Q
"RTN","IBCSC4",70,0)
 ;IBIP= PTF ptr (399,.08) ^ PTF admiss dt (45,2) or Event dt (399,.03)^ accident hour (399,160) 
"RTN","IBCSC4",71,0)
 ; ^ source of addmis (399,159) ^ typ of addmiss (399,158)
"RTN","IBCSC4",72,0)
 ; ^ PTF disch dt (45,70) or Non-VA disch dt (399,.16) ^ disch status (399,162)
"RTN","IBCSC4",73,0)
 ; ^ dxls (45,79) ^ disch bedsection (399,161)
"RTN","IBCSC4",74,0)
INP F I="C","U",0 S IB(I)=$S($D(^DGCR(399,IBIFN,I)):^(I),1:"")
"RTN","IBCSC4",75,0)
 S IBPTF=$P(IB(0),U,8) F I=0,70 S DGPT(I)=$S(IBPTF="":"",$D(^DGPT(IBPTF,I)):^(I),1:"")
"RTN","IBCSC4",76,0)
 F I="C","U",0 S IB(I)=$S($D(^DGCR(399,IBIFN,I)):^(I),1:"")
"RTN","IBCSC4",77,0)
 S IBIP=IBPTF_"^"_$S($P(DGPT(0),"^",2)]"":$P(DGPT(0),"^",2),1:$P(IB(0),"^",3))_"^"_$P(IB("U"),"^",10)_"^"_$P(IB("U"),"^",9)_"^"_$P(IB("U"),"^",8)_"^"_$S(+DGPT(70)>0:+DGPT(70),1:$P(IB(0),"^",16))_"^"
"RTN","IBCSC4",78,0)
 S IBIP=IBIP_$P(IB("U"),"^",12)_"^"_$S($D(DGPT(70)):$P(DGPT(70),"^",10),1:"")_"^"_$P(IB("U"),"^",11)
"RTN","IBCSC4",79,0)
 Q
"RTN","IBCSC4",80,0)
SET ;S ^DD(399.0304,0,"ID","WRITE")="N X S X=^(0) W ""   "",$E($P($G(@(U_$P($P(X,U),"";"",2)_+X_"",0)"")),U,$S($P(X,U,1)[""CPT"":2,1:4)),1,30)"
"RTN","IBCSC4",81,0)
 Q
"RTN","IBCSC4",82,0)
 ;
"RTN","IBCSC4",83,0)
DX(ORDER,IBDATE) ; Get next diagnosis data
"RTN","IBCSC4",84,0)
 N IBX
"RTN","IBCSC4",85,0)
 S IBX=""
"RTN","IBCSC4",86,0)
 S ORDER=$O(IBPOARR(ORDER))
"RTN","IBCSC4",87,0)
 I ORDER S IBX=ORDER_U_$$ICD9^IBACSV(+IBPOARR(ORDER),$G(IBDATE))
"RTN","IBCSC4",88,0)
 Q IBX
"RTN","IBCSC4",89,0)
 ;
"RTN","IBCSC4",90,0)
OT ; print Other Care (SNF) multiple
"RTN","IBCSC4",91,0)
 N IBX,IBY,IBN I '$O(^DGCR(399,IBIFN,"OT",0)) W !,?4,"SNF Care   : UNSPECIFIED [NOT REQUIRED]"
"RTN","IBCSC4",92,0)
 S IBX=0 F  S IBX=$O(^DGCR(399,IBIFN,"OT",IBX)) Q:'IBX  D
"RTN","IBCSC4",93,0)
 . S IBY=$G(^DGCR(399,IBIFN,"OT",IBX,0)) Q:'IBY
"RTN","IBCSC4",94,0)
 . S IBN=$P($G(^DGCR(399.1,+IBY,0)),U,1),IBN=$S(IBN["SKILLED":"SNF Care ",IBN["SUB-ACUTE":"Sub-Acute",1:"Unknown  ")
"RTN","IBCSC4",95,0)
 . W !,?4,IBN,"  : ",$$FMTE^XLFDT(+$P(IBY,U,2))," - ",$$FMTE^XLFDT(+$P(IBY,U,3))
"RTN","IBCSC4",96,0)
 Q
"RTN","IBCSC4",97,0)
 ;
"RTN","IBCSC4",98,0)
DXREQ(IBIFN) ; Is the principle diagnosis code required or not?
"RTN","IBCSC4",99,0)
 ; Function returns true (1) if DX is required for this bill, otherwise 0
"RTN","IBCSC4",100,0)
 NEW REQ,IBFT
"RTN","IBCSC4",101,0)
 S REQ=0,IBFT=$$FT^IBCEF(IBIFN)
"RTN","IBCSC4",102,0)
 I IBFT=2 S REQ=1 G DXREQX                            ; required for CMS-1500
"RTN","IBCSC4",103,0)
 I IBFT=3,$$WNRBILL^IBEFUNC(IBIFN) S REQ=1 G DXREQX   ; UB with Medicare (WNR) current payer
"RTN","IBCSC4",104,0)
DXREQX ;
"RTN","IBCSC4",105,0)
 Q REQ
"RTN","IBCSC4",106,0)
 ;
"RTN","IBCSC4",107,0)
 ;IBCSC4
"RTN","IBCSC5")
0^7^B18258381^B17240137
"RTN","IBCSC5",1,0)
IBCSC5 ;ALB/MJB - MCCR SCREEN 5 (OPT. EOC) ;27 MAY 88 10:15
"RTN","IBCSC5",2,0)
 ;;2.0;INTEGRATED BILLING;**52,125,51,210,266,288,287,309,389,447,461,592**;21-MAR-94;Build 58
"RTN","IBCSC5",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCSC5",4,0)
 ;
"RTN","IBCSC5",5,0)
 ;MAP TO DGCRSC5
"RTN","IBCSC5",6,0)
 ;
"RTN","IBCSC5",7,0)
EN I $$INPAT^IBCEF(IBIFN) G ^IBCSC4
"RTN","IBCSC5",8,0)
 I $D(IBASKCOD) K IBASKCOD D CODMUL^IBCU7 I $$BILLCPT^IBCRU4(IBIFN) D ASK^IBCU7A(IBIFN) S DGRVRCAL=1
"RTN","IBCSC5",9,0)
 I $D(DGRVRCAL) D ^IBCU6 K DGRVRCAL
"RTN","IBCSC5",10,0)
 L ^DGCR(399,IBIFN):1
"RTN","IBCSC5",11,0)
 D ^IBCSCU S IBSR=5,IBSR1="",IBV1="10000000"_$S($$FT^IBCEF(IBIFN)'=2:0,1:1)
"RTN","IBCSC5",12,0)
 ;JWS;IB*2.0*592 US1108 - Dental
"RTN","IBCSC5",13,0)
 I $$FT^IBCEF(IBIFN)=7 S IBV1=100011011
"RTN","IBCSC5",14,0)
 F I="U",0 S IB(I)=$S($D(^DGCR(399,IBIFN,I)):^(I),1:"") S:IBV IBV1="111111111"
"RTN","IBCSC5",15,0)
 D H^IBCSCU
"RTN","IBCSC5",16,0)
 S IBPTF=$P(IB(0),U,8),IBBT=$P(IB(0),"^",4)_$P(IB(0),"^",5)_$P(IB(0),"^",6)
"RTN","IBCSC5",17,0)
 D EN4^IBCVA1
"RTN","IBCSC5",18,0)
 S Z=1,IBW=1 X IBWW W " Event Date : " S Y=$P(IB(0),U,3) D DT^DIQ
"RTN","IBCSC5",19,0)
 N IBPOARR,IBDATE
"RTN","IBCSC5",20,0)
 D SET^IBCSC4D(IBIFN,"",.IBPOARR)
"RTN","IBCSC5",21,0)
 S IBDATE=$$BDATE^IBACSV(IBIFN) ; Statement To date
"RTN","IBCSC5",22,0)
 S Z=2,IBW=1 X IBWW W " Prin. Diag.: " S Y=$$DX^IBCSC4(0,IBDATE) W $S(Y'="":$E($P(Y,U,4),1,47)_" - "_$P(Y,U,2),$$DXREQ^IBCSC4(IBIFN):IBU,1:IBUN)
"RTN","IBCSC5",23,0)
 F I=1:1:4 S Y=$$DX^IBCSC4(+Y,IBDATE) Q:Y=""  W !?4,"Other Diag.: ",$E($P(Y,U,4),1,47)_" - "_$P(Y,U,2)
"RTN","IBCSC5",24,0)
 I +Y S Y=$$DX^IBCSC4(+Y,IBDATE) I +Y W !?4,"***There are more diagnoses associated with this bill.***"
"RTN","IBCSC5",25,0)
OP S Z=3,IBW=1 X IBWW W " OP Visits  : " F I=0:0 S I=$O(^DGCR(399,IBIFN,"OP",I)) Q:'I  S Y=I X ^DD("DD") W:$X>67 !?17 W Y_", "
"RTN","IBCSC5",26,0)
 S:$D(^DGCR(399,"OP")) DGOPV=1 I '$O(^DGCR(399,IBIFN,"OP",0)) W IBU
"RTN","IBCSC5",27,0)
 W !,?4,"Type       : ",$$GET1^DIQ(399,IBIFN_",",158)  ; Added with IB*2.0*447 BI
"RTN","IBCSC5",28,0)
 S Z=4,IBW=1 X IBWW W " Cod. Method: ",$S($P(IB(0),U,9)="":IBUN,$P(IB(0),U,9)=9:"ICD",$P(IB(0),U,9)=4:"CPT-4",1:"HCPCS")
"RTN","IBCSC5",29,0)
 D WRT:$D(IBPROC)
"RTN","IBCSC5",30,0)
 ;JWS;IB*2.0*592 US1108 - Dental
"RTN","IBCSC5",31,0)
 ;I $$FT^IBCEF(IBIFN)=7 D Q^IBCSC4B G ^IBCSCP
"RTN","IBCSC5",32,0)
 S Z=5,IBW=1 X IBWW W " Rx. Refills: " S Y=$$RX I 'Y W IBUN
"RTN","IBCSC5",33,0)
OCC G OCC^IBCSC4
"RTN","IBCSC5",34,0)
 W !?4,"Opt. Code  : ",IBUN
"RTN","IBCSC5",35,0)
 G OCC^IBCSC4
"RTN","IBCSC5",36,0)
 Q
"RTN","IBCSC5",37,0)
MORE W !?4,*7,"***There are more procedures associated with this bill.***" S I=0
"RTN","IBCSC5",38,0)
 Q
"RTN","IBCSC5",39,0)
WRT ;  -write out procedures codes on screen
"RTN","IBCSC5",40,0)
 N IBDATE
"RTN","IBCSC5",41,0)
 S J=0 F I=1:1 S J=$O(IBPROC(J)) Q:'J  D  I I>6 D MORE Q
"RTN","IBCSC5",42,0)
 .S IBDATE=$P(IBPROC(J),U,2) I 'IBDATE S IBDATE=$$BDATE^IBACSV($G(IBIFN))
"RTN","IBCSC5",43,0)
 .S X=$$PRCD^IBCEF1($P(IBPROC(J),U),1,IBDATE)
"RTN","IBCSC5",44,0)
 .I IBPROC(J)["ICD" W !?4,"ICD Code   : ",$E($P(X,U,3),1,28)_" - "_$P(X,U,2)
"RTN","IBCSC5",45,0)
 .I IBPROC(J)["CPT" W !?4,"CPT Code   : " D
"RTN","IBCSC5",46,0)
 .. N Z
"RTN","IBCSC5",47,0)
 .. S Z=$P(X,"^",3)_" "_$P(X,"^",2)_$S($P(IBPROC(J),U,15):"-"_$$MODLST^IBEFUNC2($P(IBPROC(J),U,15)),1:"")
"RTN","IBCSC5",48,0)
 .. I $L(Z)>40 S Z=" "_$P(X,"^",2)_$S($P(IBPROC(J),U,15):"-"_$$MODLST^IBEFUNC2($P(IBPROC(J),U,15)),1:""),Z=$E($P(X,U,3),1,40-$L(Z))_Z
"RTN","IBCSC5",49,0)
 .. W Z
"RTN","IBCSC5",50,0)
 .;JWS;IB*2.0*592 US1108 - Dental form #7
"RTN","IBCSC5",51,0)
 .I $P(IB(0),U,19)=2!($P(IB(0),U,19)=7) S Y=+$P(IBPROC(J),U,11) S:+Y Y=+$G(^IBA(362.3,+Y,0)) W ?58,$P($$ICD9^IBACSV(Y,IBDATE),U) S Y=$P(IBPROC(J),U,2) D D^DIQ W ?67,Y Q
"RTN","IBCSC5",52,0)
 .S Y=$P(IBPROC(J),"^",2) D D^DIQ W ?67,Y
"RTN","IBCSC5",53,0)
 Q
"RTN","IBCSC5",54,0)
 ;
"RTN","IBCSC5",55,0)
MOD(IBM,PUNC) ; Returns modifier list from comma delimited ien's in string IBM
"RTN","IBCSC5",56,0)
 ; PUNC = Punctuation to use as first character of output
"RTN","IBCSC5",57,0)
 N IBMOD,Q
"RTN","IBCSC5",58,0)
 S IBMOD=""
"RTN","IBCSC5",59,0)
 F Q=1:1:$L(IBM,",") I $P(IBM,",",Q)'="" S IBMOD=IBMOD_$S(IBMOD'="":",",1:"")_$P($$MOD^ICPTMOD($P(IBM,",",Q),"I"),U,2)
"RTN","IBCSC5",60,0)
 I IBMOD'="" S IBMOD=$G(PUNC)_IBMOD
"RTN","IBCSC5",61,0)
 Q IBMOD
"RTN","IBCSC5",62,0)
 ;
"RTN","IBCSC5",63,0)
PD() ;prints prosthetic device in external form, returns 0 if there are none
"RTN","IBCSC5",64,0)
 N IBX,IBY,IBZ,IBN,X S X=0 S IBX=0 F  S IBX=$O(^IBA(362.5,"AIFN"_IBIFN,IBX)) Q:'IBX  D  Q:X>5
"RTN","IBCSC5",65,0)
 . S IBY=0 F  S IBY=$O(^IBA(362.5,"AIFN"_IBIFN,IBX,IBY)) Q:'IBY  S IBZ=$G(^IBA(362.5,IBY,0)) I IBZ'="" D  Q:X>5
"RTN","IBCSC5",66,0)
 .. S X=X+1 I X>5 W !,?17,"*** There are more Pros. Items associated with this bill.***" Q
"RTN","IBCSC5",67,0)
 .. W:X'=1 ! W ?17,$E($P(IBZ,U,5),1,40),?67,$$FMTE^XLFDT(+IBZ)
"RTN","IBCSC5",68,0)
 Q X
"RTN","IBCSC5",69,0)
 ;
"RTN","IBCSC5",70,0)
RX() ;prints RX REFILLS in external form, returns 0 if there are none
"RTN","IBCSC5",71,0)
 N IBX,IBY,IBZ,IBN,X S X=0 S IBX="" F  S IBX=$O(^IBA(362.4,"AIFN"_IBIFN,IBX)) Q:IBX=""  D  Q:X>5
"RTN","IBCSC5",72,0)
 . S IBY=0 F  S IBY=$O(^IBA(362.4,"AIFN"_IBIFN,IBX,IBY)) Q:'IBY  S IBZ=$G(^IBA(362.4,IBY,0)) I IBZ'="" D  Q:X>5
"RTN","IBCSC5",73,0)
 .. S X=X+1 I X>5 W !,?17,"*** There are more Rx. Refills associated with this bill.***" Q
"RTN","IBCSC5",74,0)
 ..D ZERO^IBRXUTL(+$P(IBZ,U,4))
"RTN","IBCSC5",75,0)
 .. S IBN=$G(^TMP($J,"IBDRUG",+$P(IBZ,U,4),.01)) W:X'=1 ! W ?17,IBN,?65,$$FMTE^XLFDT(+$P(IBZ,U,3))
"RTN","IBCSC5",76,0)
 K ^TMP($J,"IBDRUG")
"RTN","IBCSC5",77,0)
 Q X
"RTN","IBCSC5",78,0)
 ;
"RTN","IBCSC5",79,0)
 ;IBCSC5
"RTN","IBCSC8")
0^8^B19683123^B9956514
"RTN","IBCSC8",1,0)
IBCSC8 ;ALB/MJB/AAS - MCCR SCREEN 8 (BILLING - CLAIM INFORMATION SCREEN) ;27 MAY 88 10:15
"RTN","IBCSC8",2,0)
 ;;2.0;INTEGRATED BILLING;**432,447,488,577,592**;21-MAR-94;Build 58
"RTN","IBCSC8",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCSC8",4,0)
 ;
"RTN","IBCSC8",5,0)
 ;
"RTN","IBCSC8",6,0)
EN D ^IBCSCU S IBSR=8,IBSR1="" S IB("U2")=$G(^DGCR(399,IBIFN,"U2")),IB("U4")=$G(^DGCR(399,IBIFN,"U4")),IB("U5")=$G(^DGCR(399,IBIFN,"U5")),IB("U6")=$G(^DGCR(399,IBIFN,"U6")),IB("U8")=$G(^DGCR(399,IBIFN,"U8"))
"RTN","IBCSC8",7,0)
 D H^IBCSCU
"RTN","IBCSC8",8,0)
 ; DEM - IBV is set in EDI^IBCB => S IBAC=1,IBV=0 D EN G Q:'IBAC1,EDI
"RTN","IBCSC8",9,0)
 ;       IBV=0, or IBV=1 as a flag if field on screen is required
"RTN","IBCSC8",10,0)
 ;       or not. <Field #> indicates field is not required.
"RTN","IBCSC8",11,0)
 ;       [Field #]
"RTN","IBCSC8",12,0)
 ; Make some sections NOT available for UB04 form
"RTN","IBCSC8",13,0)
 S IBT=$P($G(^DGCR(399,IBIFN,0)),U,19)
"RTN","IBCSC8",14,0)
 ;S IBV1=$S(IBT=3:"001011",IBV:"111111",1:"000000")
"RTN","IBCSC8",15,0)
 ;JWS;IB*2.0*592 US1108 - Dental
"RTN","IBCSC8",16,0)
 S IBV1=$S(IBT=3:"001011111",IBT=7:"0000",IBV:"111111111",1:"000000000") ; IB*2.0*488 (vd)
"RTN","IBCSC8",17,0)
 I IBT=7 D IBTEETH,DENTAL K IBTEETH ;G REV
"RTN","IBCSC8",18,0)
 ;JWS;IB*2.0*592 -end
"RTN","IBCSC8",19,0)
 ;JWS;IB*2.0*592 - US1108 add back Property Casualty Claim Number
"RTN","IBCSC8",20,0)
 I IBT'=7 S Z=1,IBW=1 X IBWW W " COB Non-Covered Charge Amt: " S X=$P(IB("U4"),U),X2="2$" I X'="" D COMMA^%DTC W X
"RTN","IBCSC8",21,0)
 S Z=$S(IBT=7:4,1:2) X IBWW W " Property Casualty Information"
"RTN","IBCSC8",22,0)
 ;W !,?4,"Claim Number:  ",$P(IB("U4"),U,2),?41,"Contact Name:  ",$P(IB("U4"),U,9)  ;JRA IB*2.0*577 ';'
"RTN","IBCSC8",23,0)
 W !,?4,"Claim Number:  ",$P(IB("U4"),U,2)  ;JRA IB*2.0*577
"RTN","IBCSC8",24,0)
 I IBT=7 G REV
"RTN","IBCSC8",25,0)
 ;JWS;IB*2.0*592 / end
"RTN","IBCSC8",26,0)
 W !,?4,"Contact Name:  ",$P(IB("U4"),U,9)  ;JRA IB*2.0*577
"RTN","IBCSC8",27,0)
 W !,?4,"Date of 1st Contact:  ",$$FMTE^XLFDT($P(IB("U4"),U,3)),?41,"Contact Phone:  ",$P(IB("U4"),U,10),"  ",$P(IB("U4"),U,11)
"RTN","IBCSC8",28,0)
 ; Start IB*2.0*447 BI
"RTN","IBCSC8",29,0)
 ;S Z=3 X IBWW W " Ambulance Information"
"RTN","IBCSC8",30,0)
 ;W !,?41,"D/O Location: ",$P(IB("U6"),U)
"RTN","IBCSC8",31,0)
 ;W !,?4,"P/U Address1:  ",$P(IB("U5"),U,2),?41,"D/O Address1:  ",$P(IB("U6"),U,2)
"RTN","IBCSC8",32,0)
 ;W !,?4,"P/U Address2:  ",$P(IB("U5"),U,3),?41,"D/O Address2:  ",$P(IB("U6"),U,3)
"RTN","IBCSC8",33,0)
 ;W !,?4,"P/U City:  ",$P(IB("U5"),U,4),?41,"D/O City:  ",$P(IB("U6"),U,4)
"RTN","IBCSC8",34,0)
 ;W !,?4,"P/U State/Zip:  " W:$P(IB("U5"),U,5)'="" $P($G(^DIC(5,$P(IB("U5"),U,5),0)),U,2)
"RTN","IBCSC8",35,0)
 ;W:$P(IB("U5"),U,6)]"" "/"_$P(IB("U5"),U,6)
"RTN","IBCSC8",36,0)
 ;W ?41,"D/O State/Zip:  " W:$P(IB("U6"),U,5)'="" $P($G(^DIC(5,$P(IB("U6"),U,5),0)),U,2)
"RTN","IBCSC8",37,0)
 ;W:$P(IB("U6"),U,6)]"" "/"_$P(IB("U6"),U,6)
"RTN","IBCSC8",38,0)
 ;;W !,?4,"P/U Country/SubDiv:  ",$P(IB("U5"),U),?41,"D/O Country/SubDiv:  "
"RTN","IBCSC8",39,0)
 S Z=3 X IBWW W " Surgical Codes for Anesthesia Claims"
"RTN","IBCSC8",40,0)
 W !,?4,"Primary Code:  " W:$P(IB("U4"),U,7)'="" $P($G(^ICPT($P(IB("U4"),U,7),0)),U)
"RTN","IBCSC8",41,0)
 W ?41,"Secondary Code:  " W:$P(IB("U4"),U,8)'="" $P($G(^ICPT($P(IB("U4"),U,8),0)),U)
"RTN","IBCSC8",42,0)
 S Z=4 X IBWW W " Paperwork Attachment Information"
"RTN","IBCSC8",43,0)
 W !,?4,"Report Type:  " W:$P(IB("U8"),U,2)'="" $P($G(^IBE(353.3,$P(IB("U8"),U,2),0)),U)
"RTN","IBCSC8",44,0)
 W ?41,"Transmission Method:  ",$P(IB("U8"),U,3)
"RTN","IBCSC8",45,0)
 W !,?4,"Attachment Control #:  ",$P(IB("U8"),U)
"RTN","IBCSC8",46,0)
 S Z=5 X IBWW W " Disability Start Date:  ",$$FMTE^XLFDT($P(IB("U4"),U,4)),?41,"Disability End Date:  ",$$FMTE^XLFDT($P(IB("U4"),U,5))
"RTN","IBCSC8",47,0)
 S Z=6 X IBWW W " Assumed Care Date:  ",$$FMTE^XLFDT($P(IB("U4"),U,13)),?41,"Relinquished Care Date:  ",$$FMTE^XLFDT($P(IB("U4"),U,14))
"RTN","IBCSC8",48,0)
 ; End IB*2.0*447 BI
"RTN","IBCSC8",49,0)
 ;
"RTN","IBCSC8",50,0)
 ;/ Beginning of IB*2.0*488 - code moved from IBCSC10H (vd)
"RTN","IBCSC8",51,0)
 S Z=7 X IBWW W " Special Program:  " I $P(IB("U2"),U,16)'="" S IBZ=$$EXPAND^IBTRE(399,238,$P(IB("U2"),U,16)) W $S(IBZ'="":IBZ,$$WNRBILL^IBEFUNC(IBIFN):"31",1:"")
"RTN","IBCSC8",52,0)
 S Z=8 X IBWW W " Homebound:  ",$$EXPAND^IBTRE(399,236,$P(IB("U2"),U,14))
"RTN","IBCSC8",53,0)
 S Z=9 X IBWW W " Date Last Seen:  ",$$EXPAND^IBTRE(399,237,$P(IB("U2"),U,15))
"RTN","IBCSC8",54,0)
 ;/ End of IB*2.0*488 (vd)
"RTN","IBCSC8",55,0)
REV G ^IBCSCP
"RTN","IBCSC8",56,0)
 ;JWS;IB*2.0*592 US1108 - Dental
"RTN","IBCSC8",57,0)
IBTEETH ;Create array of teeth status
"RTN","IBCSC8",58,0)
 N TH
"RTN","IBCSC8",59,0)
 K IBTEETH S IBTEETH=0
"RTN","IBCSC8",60,0)
 S IBTEETH(0)=+$P($G(^DGCR(399,IBIFN,"DEN1",0)),U,4)
"RTN","IBCSC8",61,0)
 S TH=0
"RTN","IBCSC8",62,0)
 F  S TH=$O(^DGCR(399,IBIFN,"DEN1",TH)) Q:'TH  S IBTEETH(TH)=$G(^DGCR(399,IBIFN,"DEN1",TH,0))
"RTN","IBCSC8",63,0)
 Q
"RTN","IBCSC8",64,0)
 ;
"RTN","IBCSC8",65,0)
DENTAL ;Dental Information for Form Type 7(J430D)
"RTN","IBCSC8",66,0)
 S IB("DEN")=$G(^DGCR(399,IBIFN,"DEN"))
"RTN","IBCSC8",67,0)
 S Z=1,IBW=1 X IBWW W ?4,"Tooth Status"
"RTN","IBCSC8",68,0)
 D WRT:$D(IBTEETH)
"RTN","IBCSC8",69,0)
 S Z=2,IBW=1 X IBWW W ?4,"Orthodontic Information"
"RTN","IBCSC8",70,0)
 W !?4,"Banding Date: " I $P(IB("DEN"),U)'="" W $$FMTE^XLFDT($P(IB("DEN"),U),2)
"RTN","IBCSC8",71,0)
 W !?4,"Treatment Months Count: ",$P(IB("DEN"),U,2)
"RTN","IBCSC8",72,0)
 W !?4,"Treatment Months Remaining Count: ",$P(IB("DEN"),U,3)
"RTN","IBCSC8",73,0)
 W !?4,"Treatment Indicator: ",$$GET1^DIQ(399,IBIFN_",",95,"E")
"RTN","IBCSC8",74,0)
 S Z=3,IBW=1 X IBWW W ?4,"Dental Paperwork Attachment"
"RTN","IBCSC8",75,0)
 W !?4,"Report Type: " I $P(IB("U8"),U,2)'="" W $$GET1^DIQ(353.3,$P(IB("U8"),U,2)_",",.01)," (",$E($$GET1^DIQ(353.3,$P(IB("U8"),U,2)_",",1),1,18),")"
"RTN","IBCSC8",76,0)
 W ?41,"Trans Method: " I $P(IB("U8"),U,3)'="" W $$GET1^DIQ(399,IBIFN_",",286,"I")," (",$E($$GET1^DIQ(399,IBIFN_",",286,"E"),1,20),")"
"RTN","IBCSC8",77,0)
 W !?4,"Attachment Control #: ",$P(IB("U8"),U)
"RTN","IBCSC8",78,0)
 Q
"RTN","IBCSC8",79,0)
 ;
"RTN","IBCSC8",80,0)
WRT ;write out teeth status on screen
"RTN","IBCSC8",81,0)
 N I,J
"RTN","IBCSC8",82,0)
 S J=0 F I=1:1 S J=$O(IBTEETH(J)) Q:'J  D  I I>6 D MORE Q
"RTN","IBCSC8",83,0)
 . W !?4,"Tooth Number: ",$P(IBTEETH(J),U),?41,"Status Code: ",$$GET1^DIQ(399.096,J_","_IBIFN_",",.02)
"RTN","IBCSC8",84,0)
 Q
"RTN","IBCSC8",85,0)
 ;
"RTN","IBCSC8",86,0)
MORE ;
"RTN","IBCSC8",87,0)
 W !?4,"***There are more teeth statuses associated with this bill.***" S I=0
"RTN","IBCSC8",88,0)
 Q
"RTN","IBCSC8",89,0)
 ;end - JWS;IB*2.0*592 US1108 - Dental
"RTN","IBCSC8",90,0)
 ;IBCSC8
"RTN","IBCSC9")
0^105^B9422776^B9101884
"RTN","IBCSC9",1,0)
IBCSC9 ;ALB/BI - MCCR SCREEN 9 (AMBULANCE INFO)  ;11 MAY 2011 10:20
"RTN","IBCSC9",2,0)
 ;;2.0;INTEGRATED BILLING;**52,51,447,473,577,592**;11-MAY-2011;Build 58
"RTN","IBCSC9",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCSC9",4,0)
 ;
"RTN","IBCSC9",5,0)
EN ; Main Entry Point
"RTN","IBCSC9",6,0)
 ;JWS;IB*2.0*592;skip screen 9 for Dental
"RTN","IBCSC9",7,0)
 I $$FT^IBCEF(IBIFN)=7 G EN^IBCSC10
"RTN","IBCSC9",8,0)
 N IBACI,IBACIX,IB,IBT
"RTN","IBCSC9",9,0)
 D ^IBCSCU
"RTN","IBCSC9",10,0)
 S IBT=$P($G(^DGCR(399,IBIFN,0)),U,19)
"RTN","IBCSC9",11,0)
 S IBSR=9,IBSR1="",IBV1=$S(IBT=3:"11",IBV:"11",1:"00")
"RTN","IBCSC9",12,0)
 S IB("U")=$G(^DGCR(399,IBIFN,"U"))
"RTN","IBCSC9",13,0)
 S IB("U1")=$G(^DGCR(399,IBIFN,"U1"))
"RTN","IBCSC9",14,0)
 S IB("U4")=$G(^DGCR(399,IBIFN,"U4"))
"RTN","IBCSC9",15,0)
 S IB("U5")=$G(^DGCR(399,IBIFN,"U5"))
"RTN","IBCSC9",16,0)
 S IB("U6")=$G(^DGCR(399,IBIFN,"U6"))
"RTN","IBCSC9",17,0)
 S IB("U7")=$G(^DGCR(399,IBIFN,"U7"))
"RTN","IBCSC9",18,0)
 S IB("U8")=$G(^DGCR(399,IBIFN,"U8"))
"RTN","IBCSC9",19,0)
 M IB("U9")=^DGCR(399,IBIFN,"U9")
"RTN","IBCSC9",20,0)
 D H^IBCSCU
"RTN","IBCSC9",21,0)
 S Z=1,IBW=1 X IBWW W " Ambulance Transport Data"
"RTN","IBCSC9",22,0)
 ;JRA IB*2.0*577 Rearrange Field order so that expanded 55 char PU/DO Address1 & PU/DO Address2 can be displayed
"RTN","IBCSC9",23,0)
 ;W !,?41,"D/O Location: ",$P(IB("U6"),U)  ;JRA ';' IB*2.0*577
"RTN","IBCSC9",24,0)
 ;W !,?4,"P/U Address1: ",$P(IB("U5"),U,2),?41,"D/O Address1: ",$P(IB("U6"),U,2)  ;JRA IB*2.0*577 ';'
"RTN","IBCSC9",25,0)
 ;W !,?4,"P/U Address2: ",$P(IB("U5"),U,3),?41,"D/O Address2: ",$P(IB("U6"),U,3)  ;JRA IB*2.0*577 ';'
"RTN","IBCSC9",26,0)
 ;W !,?4,"P/U City: ",$P(IB("U5"),U,4),?41,"D/O City: ",$P(IB("U6"),U,4)  ;JRA IB*2.0*577 ';'
"RTN","IBCSC9",27,0)
 ;W !,?4,"P/U State/Zip: " W:$P(IB("U5"),U,5)'="" $P($G(^DIC(5,$P(IB("U5"),U,5),0)),U,2)  ;JRA IB*2.0*577 ';'
"RTN","IBCSC9",28,0)
 ;W:$P(IB("U5"),U,6)]"" "/"_$P(IB("U5"),U,6)  ;JRA IB*2.0*577 ';'
"RTN","IBCSC9",29,0)
 ;W ?41,"D/O State/Zip: " W:$P(IB("U6"),U,5)'="" $P($G(^DIC(5,$P(IB("U6"),U,5),0)),U,2)  ;JRA IB*2.0*577 ';'
"RTN","IBCSC9",30,0)
 W !,?4,"P/U Address1: ",$P(IB("U5"),U,2)  ;JRA IB*2.0*577
"RTN","IBCSC9",31,0)
 W !,?4,"P/U Address2: ",$P(IB("U5"),U,3)  ;JRA IB*2.0*577
"RTN","IBCSC9",32,0)
 W !,?4,"P/U City: ",$P(IB("U5"),U,4)  ;JRA IB*2.0*577
"RTN","IBCSC9",33,0)
 W ?41,"P/U State/Zip: " W:$P(IB("U5"),U,5)'="" $P($G(^DIC(5,$P(IB("U5"),U,5),0)),U,2)  ;JRA IB*2.0*577
"RTN","IBCSC9",34,0)
 W:$P(IB("U5"),U,6)]"" "/"_$P(IB("U5"),U,6)  ;JRA IB*2.0*577
"RTN","IBCSC9",35,0)
 W !,?4,"D/O Location: ",$P(IB("U6"),U)  ;JRA IB*2.0*577
"RTN","IBCSC9",36,0)
 W !,?4,"D/O Address1: ",$P(IB("U6"),U,2)  ;JRA IB*2.0*577
"RTN","IBCSC9",37,0)
 W !,?4,"D/O Address2: ",$P(IB("U6"),U,3)  ;JRA IB*2.0*577
"RTN","IBCSC9",38,0)
 W !,?4,"D/O City: ",$P(IB("U6"),U,4)  ;JRA IB*2.0*577
"RTN","IBCSC9",39,0)
 W ?41,"D/O State/Zip: " W:$P(IB("U6"),U,5)'="" $P($G(^DIC(5,$P(IB("U6"),U,5),0)),U,2)  ;JRA IB*2.0*577
"RTN","IBCSC9",40,0)
 W:$P(IB("U6"),U,6)]"" "/"_$P(IB("U6"),U,6)
"RTN","IBCSC9",41,0)
 W !,?4,"Patient Weight: ",$P(IB("U7"),U,1),?41,"Transport Distance: ",$P(IB("U7"),U,3)
"RTN","IBCSC9",42,0)
 W !,?4,"Transport Reason: " I $P(IB("U7"),U,2)'="" D IBWP($$GET1^DIQ(353.4,$P(IB("U7"),U,2)_",",.02),22,55)
"RTN","IBCSC9",43,0)
 W !,?4,"R/T Purpose: " D IBWP($P(IB("U7"),U,4),17,60)
"RTN","IBCSC9",44,0)
 W !,?4,"Stretcher Purpose: " D IBWP($P(IB("U7"),U,5),23,54)
"RTN","IBCSC9",45,0)
 S Z=2,IBW=2 X IBWW W " Ambulance Certification Data"
"RTN","IBCSC9",46,0)
 W !,?4,"Condition Indicator:"
"RTN","IBCSC9",47,0)
 S IBACIX=0
"RTN","IBCSC9",48,0)
 F  S IBACIX=$O(IB("U9",IBACIX)) Q:+IBACIX=0  D
"RTN","IBCSC9",49,0)
 . S IBACI=IB("U9",IBACIX,0)
"RTN","IBCSC9",50,0)
 . W ?25,$$GET1^DIQ(353.5,IBACI_",",.01)," - ",$$GET1^DIQ(353.5,IBACI_",",.02),!
"RTN","IBCSC9",51,0)
 K IB("U9")
"RTN","IBCSC9",52,0)
 W !
"RTN","IBCSC9",53,0)
 G ^IBCSCP
"RTN","IBCSC9",54,0)
 Q
"RTN","IBCSC9",55,0)
 ;
"RTN","IBCSC9",56,0)
IBWP(IBX,IBLM,IBRM) ;
"RTN","IBCSC9",57,0)
 K ^UTILITY($J,"W")
"RTN","IBCSC9",58,0)
 N X,Y,DIWF,DIWL,DIWR S X=IBX
"RTN","IBCSC9",59,0)
 S DIWL=1,DIWR=IBRM,DIWF="" D ^DIWP
"RTN","IBCSC9",60,0)
 I $D(^UTILITY($J,"W")) S Y=0 F  S Y=$O(^UTILITY($J,"W",1,Y)) Q:'Y  W:Y>1 !,?(IBLM) W $G(^UTILITY($J,"W",1,Y,0))
"RTN","IBCSC9",61,0)
 K ^UTILITY($J,"W")
"RTN","IBCSC9",62,0)
 Q
"RTN","IBCSC9",63,0)
 ;
"RTN","IBCSC9",64,0)
SCREEN1(DA1) ;
"RTN","IBCSC9",65,0)
 N A,RESPONSE S RESPONSE=0
"RTN","IBCSC9",66,0)
 I +$P($G(^DGCR(399,DA1,"U9",0)),U,4)<5 S RESPONSE=1 Q RESPONSE
"RTN","IBCSC9",67,0)
 S A(1,"F")="!?35",A(1)="Maximum of 5 Condition Indicators allowed"
"RTN","IBCSC9",68,0)
 D EN^DDIOL(.A)
"RTN","IBCSC9",69,0)
 Q RESPONSE
"RTN","IBCSC9",70,0)
 ;IBCSC9
"RTN","IBCSCE")
0^11^B10759138^B10358004
"RTN","IBCSCE",1,0)
IBCSCE ;ALB/MRL,MJB - MCCR SCREEN EDITS ;07 JUN 88 14:35
"RTN","IBCSCE",2,0)
 ;;2.0;INTEGRATED BILLING;**52,80,91,106,51,137,236,245,287,349,371,400,432,447,547,592**;21-MAR-94;Build 58
"RTN","IBCSCE",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCSCE",4,0)
 ;
"RTN","IBCSCE",5,0)
 ;MAP TO DGCRSCE
"RTN","IBCSCE",6,0)
 ; always do procedures last because they are edited upon return to screen routine
"RTN","IBCSCE",7,0)
 I IBDR20["54," S IBDR20=$P(IBDR20,"54,",1)_$P(IBDR20,"54,",2)_"54,"
"RTN","IBCSCE",8,0)
 I IBDR20["44," S IBDR20=$P(IBDR20,"44,",1)_$P(IBDR20,"44,",2)_"44,"
"RTN","IBCSCE",9,0)
LOOP N IBDRLP,IBDRL S IBDRLP=IBDR20 F IBDRL=1:1 S IBDR20=$P(IBDRLP,",",IBDRL) Q:IBDR20=""  D EDIT
"RTN","IBCSCE",10,0)
 Q
"RTN","IBCSCE",11,0)
EDIT N IBQUERY
"RTN","IBCSCE",12,0)
 I (IBDR20["31") D MCCR^IBCNSP2 G ENQ
"RTN","IBCSCE",13,0)
 I (IBDR20["43")!(IBDR20["52") D ^IBCSC4D G ENQ
"RTN","IBCSCE",14,0)
 I (IBDR20["74")!(IBDR20["53") K DR N I D ^IBCOPV S (DA,Y)=IBIFN G TMPL
"RTN","IBCSCE",15,0)
 I (IBDR20["54"),$P($G(^IBE(350.9,1,1)),"^",17) K DR N I D EN1^IBCCPT(.IBQUERY) D CLOSE^IBSDU(.IBQUERY) G TMPL ;
"RTN","IBCSCE",16,0)
 I (IBDR20["55") D ^IBCSC5A G ENQ
"RTN","IBCSCE",17,0)
 I (IBDR20["45")!(IBDR20["56") D ^IBCSC5B G ENQ
"RTN","IBCSCE",18,0)
 I (IBDR20["66")!(IBDR20["76") D EDIT^IBCRBE(IBIFN) D ASKCMB^IBCU65(IBIFN) G ENQ
"RTN","IBCSCE",19,0)
 I IBDR20["102",$$FT^IBCEF(IBIFN)=3 D EN^IBCSC10B G ENQ   ; UB-04 patient reason for visit (screen 10, section 2)
"RTN","IBCSCE",20,0)
 I IBDR20["105",$$FT^IBCEF(IBIFN)=2 D ^IBCSC10A G ENQ     ; cms-1500 chiropractic data (screen 10, section 5)
"RTN","IBCSCE",21,0)
 ;
"RTN","IBCSCE",22,0)
 ;WCJ;IB*2.0*547
"RTN","IBCSCE",23,0)
 ;I IBDR20["107",$$FT^IBCEF(IBIFN)=3 D EN1^IBCEP6 G ENQ   ; UB-04 provider ID maintenance (screen 10, section 7)
"RTN","IBCSCE",24,0)
 I IBDR20["108",$$FT^IBCEF(IBIFN)=3 D EN1^IBCEP6 G ENQ   ; UB-04 provider ID maintenance (screen 10, section 8)
"RTN","IBCSCE",25,0)
 ;
"RTN","IBCSCE",26,0)
 ;WCJ;IB*2.0*547
"RTN","IBCSCE",27,0)
 ;I IBDR20["109",$$FT^IBCEF(IBIFN)=2 D EN1^IBCEP6 G ENQ   ; cms-1500 provider ID maintenance (screen 10, section 9)
"RTN","IBCSCE",28,0)
 ;JWS;IB*2.0*592 US1108 - Dental form 7
"RTN","IBCSCE",29,0)
 I IBDR20["110",$$FT^IBCEF(IBIFN)=2!($$FT^IBCEF(IBIFN)=7) D EN1^IBCEP6 G ENQ   ; cms-1500 provider ID maintenance (screen 10, section 10); not a misprint it is screen *10 +section which is 110
"RTN","IBCSCE",30,0)
 ;
"RTN","IBCSCE",31,0)
 F Q=1:1:9 I IBDR20[("11"_Q) D EDIT^IBCSC11 G ENQ     ; IB*2.0*447 BI
"RTN","IBCSCE",32,0)
TMPL N IBFLIAE S IBFLIAE=1 ;to invoke EN^DGREGAED from [IB SCREEN1]
"RTN","IBCSCE",33,0)
 S DR="[IB SCREEN"_IBSR_IBSR1_"]",(DA,Y)=IBIFN,DIE="^DGCR(399,"
"RTN","IBCSCE",34,0)
 D ^DIE K DIE,DR,DLAYGO
"RTN","IBCSCE",35,0)
 I (IBDR20["61")!(IBDR20["71") I +$G(DGRVRCAL) D PROC^IBCU7A(IBIFN,1)
"RTN","IBCSCE",36,0)
 ;
"RTN","IBCSCE",37,0)
ENQ ;
"RTN","IBCSCE",38,0)
 K DIE,DR,IBDR1,IBDR20,DGDRD,DGDRS,DGDRS1,DA
"RTN","IBCSCE",39,0)
 Q
"RTN","IBCSCE",40,0)
 ;
"RTN","IBCSCE",41,0)
 ;called by screen 3 (input template)
"RTN","IBCSCE",42,0)
UPDT F IBDD=0:0 S IBDD=$O(^DPT(DFN,.312,IBDD)) Q:IBDD'>0  S IBI1=^DPT(DFN,.312,IBDD,0) I $D(^DIC(36,+IBI1,0)),$P(^(0),"^",2)'="N" S IBDD(+IBI1)=IBI1
"RTN","IBCSCE",43,0)
 F IBAIC=0:0 S IBAIC=$O(^DGCR(399,IBIFN,"AIC",IBAIC)) Q:IBAIC'>0  I $D(IBDD(IBAIC)) F IBI1="I1","I2","I3" I $D(^DGCR(399,IBIFN,IBI1)),+^(IBI1)=IBAIC,^(IBI1)'=IBDD(IBAIC) S ^DGCR(399,IBIFN,IBI1)=IBDD(IBAIC)
"RTN","IBCSCE",44,0)
 K IBAIC,IBDD,IBI1 Q
"RTN","IBCSCE",45,0)
 ;
"RTN","IBCSCE",46,0)
 ;Edit patient's address using DGREGAED API
"RTN","IBCSCE",47,0)
EDADDR(IBDFN) ;
"RTN","IBCSCE",48,0)
 I $G(IBFLIAE)'=1!(IBDFN=0) Q 0
"RTN","IBCSCE",49,0)
 N IBFL S IBFL(1)=1
"RTN","IBCSCE",50,0)
 N X,Y,DIE,DA,DR,DIDEL,DIW,DIEDA,DG,DICR
"RTN","IBCSCE",51,0)
 D EN^DGREGAED(IBDFN,.IBFL)
"RTN","IBCSCE",52,0)
 Q 1
"RTN","IBCSCE",53,0)
 ;IBCSCE
"RTN","IBCSCU")
0^12^B13707120^B12535542
"RTN","IBCSCU",1,0)
IBCSCU ;ALB/MJB - MCCR SCREEN UTILITY ROUTINE ;27 MAY 88 11:09
"RTN","IBCSCU",2,0)
 ;;2.0;INTEGRATED BILLING;**52,51,348,432,447,592**;21-MAR-94;Build 58
"RTN","IBCSCU",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCSCU",4,0)
 ;
"RTN","IBCSCU",5,0)
 ;MAP TO DGCRSCU
"RTN","IBCSCU",6,0)
 ;
"RTN","IBCSCU",7,0)
 S IBW=1,IBU="UNSPECIFIED",IBUN=IBU_" [NOT REQUIRED]",IBV=$S($D(IBV):IBV,1:1) D HOME^%ZIS
"RTN","IBCSCU",8,0)
 ;S IBWW1="X ""F Z2=1:1:(Z1-$L(Z)) S Z=Z_"""" """""" W Z Q"
"RTN","IBCSCU",9,0)
 S (IBVO,IBVI)="" I $S('$D(IOST(0)):1,'$D(^DG(43,1,0)):1,'$P(^DG(43,1,0),"^",36):1,$D(^DG(43,1,"TERM",IOST(0))):1,1:0) G M
"RTN","IBCSCU",10,0)
 ;
"RTN","IBCSCU",11,0)
 I $D(IOST(0)) S X="IOINHI;IOINLOW;IOINORM" D ENDR^%ZISS
"RTN","IBCSCU",12,0)
 I $L(IOINHI),$L(IOINLOW) S IBVI=IOINHI,IBVO=$S(IOINORM]"":IOINORM,1:IBINLOW)
"RTN","IBCSCU",13,0)
 D KILL^%ZISS
"RTN","IBCSCU",14,0)
 ;I $D(^%ZIS(2,IOST(0),7)) S I=^(7) I $L($P(I,"^",1)),$L($P(I,"^",2)) S IBVI=$P(I,"^",1),IBVO=$S($P(I,"^",3)]"":$P(I,"^",3),1:$P(I,"^",2))
"RTN","IBCSCU",15,0)
 ;
"RTN","IBCSCU",16,0)
M ;I $L(IBVI_IBVO)>4 S X=80 X ^%ZOSF("RM")
"RTN","IBCSCU",17,0)
 S IBWW="W:IBW ! S Z=$S(IBV:""<""_Z_"">"",$E(IBV1,Z):""<""_Z_"">"",1:""[""_Z_""]"") W:$E(Z)=""["" IBVI,Z,IBVO W:$E(Z)'=""["" Z Q"
"RTN","IBCSCU",18,0)
 ;S IBWW="W:IBW ! S Z=$S(IOST=""C-QUME""&($L(IBVI)'=2):Z,IBV:""<""_Z_"">"",$E(IBV1,Z):""<""_Z_"">"",1:""[""_Z_""]"") W:$E(Z)=""["" @IBVI,Z,@IBVO W:$E(Z)'=""["" Z Q"
"RTN","IBCSCU",19,0)
 I $D(IBPAR) S IBV=0,IBVV="00000" Q
"RTN","IBCSCU",20,0)
 S IBBNO=$P(^DGCR(399,IBIFN,0),"^",1)
"RTN","IBCSCU",21,0)
 S IBVV=$S('$$INPAT^IBCEF(IBIFN):"00010100001",1:"00001010001"),X="63266556"      ; IB*2.0*447 BI
"RTN","IBCSCU",22,0)
 ;JWS;IB*2.0*592;skip screen 9 for Dental
"RTN","IBCSCU",23,0)
 I $$FT^IBCEF(IBIFN)=7 S IBVV="00010100101"
"RTN","IBCSCU",24,0)
 I $P($G(^IBE(353,+$P($G(^DGCR(399,IBIFN,0)),U,19),2)),U,9)'="",$S($D(^DGCR(399,IBIFN,"I1")):1,1:$P($G(^DGCR(399,IBIFN,"M")),U,11)) S $E(IBVV,11)="0"
"RTN","IBCSCU",25,0)
 Q
"RTN","IBCSCU",26,0)
 ;
"RTN","IBCSCU",27,0)
H ;Screen Header
"RTN","IBCSCU",28,0)
 S L="",$P(L,"=",81)=""
"RTN","IBCSCU",29,0)
 I $D(IBH("HELP")) S X="HELP SCREEN" W @IOF,!?(40-($L(X)\2)),IBVI,X,IBVO,!,L G HQ
"RTN","IBCSCU",30,0)
 ; IB*2.0*447 BI Start
"RTN","IBCSCU",31,0)
 S X=$P("DEMOGRAPHIC^EMPLOYMENT^PAYER^EVENT - INPATIENT^EVENT - OUTPATIENT^BILLING - GENERAL^BILLING - GENERAL^BILLING - CLAIM^AMBULANCE^BILLING - SPECIFIC^LOCALLY DEFINED","^",IBSR)_" INFORMATION",X1="SCREEN <"_+IBSR_">"
"RTN","IBCSCU",32,0)
 ;JWS;IB*2.0*592; Dental
"RTN","IBCSCU",33,0)
 I $$FT^IBCEF(IBIFN)=7,IBSR=8 S X="DENTAL - CLAIM INFORMATION"
"RTN","IBCSCU",34,0)
 ; IB*2.0*447 BI End
"RTN","IBCSCU",35,0)
 N IB0,IBT S IB0=$G(^DGCR(399,IBIFN,0)),IBT=$P(IB0,U,19),DGINPT=$S($$INPAT^IBCEF(IBIFN):"Inpat",1:"Outpat")
"RTN","IBCSCU",36,0)
 ;
"RTN","IBCSCU",37,0)
 W @IOF                                          ; clear screen
"RTN","IBCSCU",38,0)
 W !,VADM(1)                                     ; name
"RTN","IBCSCU",39,0)
 W "   ",$P(VADM(2),"^",2)                       ; ssn
"RTN","IBCSCU",40,0)
 W "   BILL#: ",IBBNO_" - "_DGINPT,"/"           ; claim# - type
"RTN","IBCSCU",41,0)
 I IBT=2 W "1500"                                ; form type 2
"RTN","IBCSCU",42,0)
 I IBT=3 W $TR($P($G(^IBE(353,3,0)),U,1),"-")    ; form type 3
"RTN","IBCSCU",43,0)
 ;JWS;IB*2.0*592 US1108 - Dental form 7
"RTN","IBCSCU",44,0)
 ;IA# 2056
"RTN","IBCSCU",45,0)
 I IBT=7 W $$GET1^DIQ(353,"7,",.01)              ; form type 7 - dental
"RTN","IBCSCU",46,0)
 W ?(80-$L(X1)),X1                               ; screen#
"RTN","IBCSCU",47,0)
 W !,L                                           ; separator line
"RTN","IBCSCU",48,0)
 W !?(40-($L(X)\2)),IBVI,X,IBVO                  ; screen description
"RTN","IBCSCU",49,0)
HQ ;
"RTN","IBCSCU",50,0)
 K L,DGINPT
"RTN","IBCSCU",51,0)
 Q
"RTN","IBCSCU",52,0)
 ;
"RTN","IBCSCU",53,0)
A ;Format Address(es)
"RTN","IBCSCU",54,0)
 N Y F I=IBA1:1:IBA1+2 I $P(IB(IBAD),U,I)]"" S IBA(IBA2)=$P(IB(IBAD),U,I),IBA2=IBA2+2
"RTN","IBCSCU",55,0)
 I IBA2=1 S IBA(1)="STREET ADDRESS UNKNOWN",IBA2=IBA2+2
"RTN","IBCSCU",56,0)
 S J=$S($D(^DIC(5,+$P(IB(IBAD),U,IBA1+4),0)):$P(^(0),U,2),1:""),J(1)=$P(IB(IBAD),U,IBA1+3),J(2)=$P(IB(IBAD),U,IBA1+11),IBA(IBA2)=$S(J(1)]""&(J]""):J(1)_", "_J,J(1)]"":J(1),J]"":J,1:"CITY/STATE UNKNOWN")
"RTN","IBCSCU",57,0)
 S Y=$S(IBAD=.11!(IBAD=.121):$P(IB(IBAD),U,IBA1+11),IBAD=.25:$P($G(^DPT(+$G(DFN),.22)),U,6),IBAD=.311:$P($G(^DPT(+$G(DFN),.22)),U,5),1:"") D ZIPOUT^VAFADDR
"RTN","IBCSCU",58,0)
 S IBA(IBA2)=IBA(IBA2)_" "_Y F I=0:0 S I=$O(IBA(I)) Q:I=""  S IBA(I)=$E(IBA(I),1,25)
"RTN","IBCSCU",59,0)
 K IBA1,I,J Q
"RTN","IBCU")
0^21^B88829862^B86259413
"RTN","IBCU",1,0)
IBCU ;ALB/MRL - BILLING UTILITY ROUTINE ;01 JUN 88 12:00
"RTN","IBCU",2,0)
 ;;2.0;INTEGRATED BILLING;**52,106,51,191,232,323,320,384,432,547,592**;21-MAR-94;Build 58
"RTN","IBCU",3,0)
 ;;Per VA Directive 6402, this routine should not be modified..
"RTN","IBCU",4,0)
 ;
"RTN","IBCU",5,0)
 ;MAP TO DGCRU
"RTN","IBCU",6,0)
 ;
"RTN","IBCU",7,0)
ARSTAT ;find status of bill in file 430.3 (ar) return status number
"RTN","IBCU",8,0)
 S IBARST=$$STA^PRCAFN(IBIFN)
"RTN","IBCU",9,0)
 Q
"RTN","IBCU",10,0)
 ;
"RTN","IBCU",11,0)
ARCAT ;Trigger logic to set who's responsible in 399.3 from AR Category
"RTN","IBCU",12,0)
 S X=$P($$CATN^PRCAFN($P(^DGCR(399.3,DA,0),"^",6)),"^",3)
"RTN","IBCU",13,0)
 S:X'="" X=$S("PC"[X:"p",X="N":"o",X="T":"i",1:"")
"RTN","IBCU",14,0)
 Q
"RTN","IBCU",15,0)
 ;
"RTN","IBCU",16,0)
PTF ;Screen for appropriate PTF records
"RTN","IBCU",17,0)
 K IBDD1 S DFN=+$P(^DGCR(399,+DA,0),"^",2) Q:'$D(^DPT(+DFN,0))  S IB05=$P(^(0),"^",1),IB03=$P(^DGCR(399,+DA,0),"^",3)
"RTN","IBCU",18,0)
 S IB01="",IB02=0 F IB02=0:0 S IB01=$O(^DD(45,0,"ID",IB01)) Q:'IB01  S IB02=IB02+1,IBDD(IB02)=^(IB01)
"RTN","IBCU",19,0)
 F IB01=0:0 S IB01=$O(^DGPT("B",+DFN,IB01)) Q:'IB01  I $D(^DGPT(+IB01,0)) S IB04=$P(^(0),"^",2),Y=+IB01 I $P(IB03,".",1)=$P(IB04,".",1) S IBDD1(+Y)="" I $S('$D(X):0,X["?":1,1:0) D PTFW
"RTN","IBCU",20,0)
 G PTFQ:X'["?" I '$O(IBDD1(0)) W !,"Patient has no ACTIVE PTF RECORDS for this event date.",!,"A 'PTF NUMBER' is required for inpatient billing records."
"RTN","IBCU",21,0)
 E  W !!,"Select the appropriate billing record from the above listing by number."
"RTN","IBCU",22,0)
PTFQ W ! K IB01,IB02,IB03,IB04,IB05,IBDD Q
"RTN","IBCU",23,0)
PTFW W !,Y,?15,IB05 F IB02=0:0 S IB02=$O(IBDD(IB02)) Q:'IB02  X IBDD(IB02)
"RTN","IBCU",24,0)
 Q
"RTN","IBCU",25,0)
 ;
"RTN","IBCU",26,0)
AGE ;Input Transform for Condition Code 17
"RTN","IBCU",27,0)
 I X=18 G SEX
"RTN","IBCU",28,0)
 I X=17 S IBC=X,DFN=$P(^DGCR(399,D0,0),"^",2) D DEM^VADPT I VADM(4)<100 W !!,"This patient is only ",VADM(4)," years old!!",!! K IBC Q
"RTN","IBCU",29,0)
 I $D(IBC) S X=IBC
"RTN","IBCU",30,0)
 Q
"RTN","IBCU",31,0)
 ;
"RTN","IBCU",32,0)
SEX ;Input Transform for Condition Code 18
"RTN","IBCU",33,0)
 I X=18 S IBC=X,DFN=$P(^DGCR(399,D0,0),"^",2) D DEM^VADPT I $E(VADM(5))="M" W !!,"This patient is a MALE!! Condition code 18 applies only to FEMALES!!",!! K IBC,X
"RTN","IBCU",34,0)
 I $D(IBC) S X=IBC
"RTN","IBCU",35,0)
 Q
"RTN","IBCU",36,0)
 ;
"RTN","IBCU",37,0)
REV ;Input Transform for Revenue Code
"RTN","IBCU",38,0)
 I X=-1 W !!,"Choose only ACTIVE Revenue Codes!!",!! S D="AC" ;S X="" S X=$O(^DGCR(399.2,"AC",X)) Q:X=""  W !,$P(^DGCR(399.2,X,0),"^",1),?30,$P(^(0),"^",2) K X Q
"RTN","IBCU",39,0)
 I '$D(IBC) I $D(^DGCR(399.2,X,0)) I '$P(^DGCR(399.2,X,0),"^",3) W !!,"Only ACTIVE Revenue Codes may be selected!!",!! K X Q
"RTN","IBCU",40,0)
 Q
"RTN","IBCU",41,0)
 ;
"RTN","IBCU",42,0)
YN S X=$E(X),X=$S(X=1:X,X=0:X,X="Y":1,X="y":1,X="n":0,X="N":0,1:2) I X'=2 D EN^DDIOL("  ("_$S(X:"YES",1:"NO")_")","","?0") Q
"RTN","IBCU",43,0)
 D EN^DDIOL("NOT A VALID CHOICE!","","!?4") K X Q
"RTN","IBCU",44,0)
 Q
"RTN","IBCU",45,0)
 ;
"RTN","IBCU",46,0)
NOPTF ; Input transform for file 399, field 159.5 (NON-VA ADMIT TIME)
"RTN","IBCU",47,0)
 N %DT
"RTN","IBCU",48,0)
 I X>24 K:X'=99 X Q
"RTN","IBCU",49,0)
 I $P($G(^DGCR(399,DA,0)),U,8) K X Q  ; PTF pointer exists 
"RTN","IBCU",50,0)
 S X=$TR(X,"M ") S:X=0 X="12A" S:X<12 X=$TR(X,"A")
"RTN","IBCU",51,0)
 S:X?1N.N&($L(X)<3) Y="."_$E("0",$L(X))_X S:X'?1.2N %DT="TPR",X=DT_"@"_X D:$L(X)>2 ^%DT S X=$E($P(Y,".",2)_"00",1,2)#24 K:Y=-1 X
"RTN","IBCU",52,0)
 Q
"RTN","IBCU",53,0)
 ;
"RTN","IBCU",54,0)
DIS ;Determine Billing Discharge status from PTF
"RTN","IBCU",55,0)
 ;Called from triggers on fields .08 and 161
"RTN","IBCU",56,0)
 N A
"RTN","IBCU",57,0)
 I '$D(^DGCR(399,DA,0)) S X="" G DISQ
"RTN","IBCU",58,0)
 S X=$P(^DGCR(399,DA,0),"^",6) I X=2!(X=3) S X=$O(^DGCR(399.1,"B","STILL PATIENT",0)) G DISQ
"RTN","IBCU",59,0)
 S X=$P(^DGCR(399,DA,0),"^",8) I $S(X="":1,'$D(^DGPT(X)):1,1:0) S X="" G DISQ
"RTN","IBCU",60,0)
 I '+$G(^DGPT(X,70)) S X=$O(^DGCR(399.1,"B","STILL PATIENT",0)) G DISQ
"RTN","IBCU",61,0)
 S A=$P($G(^DGCR(399,DA,"U")),"^",2) I A,(A+.24)<+$G(^DGPT(X,70)) S X=$O(^DGCR(399.1,"B","STILL PATIENT",0)) G DISQ
"RTN","IBCU",62,0)
 S X=+$P($G(^DGPT(X,70)),"^",3)
"RTN","IBCU",63,0)
 I X=1 S X=$O(^DGCR(399.1,"B",$E("DISCHARGED TO HOME OR SELF CARE",1,30),0)) G DISQ
"RTN","IBCU",64,0)
 I X=4 S X=$O(^DGCR(399.1,"B",$E("LEFT AGAINST MEDICAL ADVICE",1,30),0)) G DISQ
"RTN","IBCU",65,0)
 I X=6!(X=7) S X=$O(^DGCR(399.1,"B","EXPIRED",0)) G DISQ
"RTN","IBCU",66,0)
 I X=5!(X=2) S X=$O(^DGCR(399.1,"B",$E("DISCHARGED TO ANOTHER SHORT-TERM GENERAL HOSPITAL",1,30),0)) G DISQ
"RTN","IBCU",67,0)
 S X=""
"RTN","IBCU",68,0)
DISQ Q
"RTN","IBCU",69,0)
 ;
"RTN","IBCU",70,0)
INST ;Ask Institutution address info
"RTN","IBCU",71,0)
 S DIC("DR")="1.01;1.02;1.03;.02;1.04" I $D(^XUSEC("IB SUPERVISOR",DUZ)) S DLAYGO=4
"RTN","IBCU",72,0)
 Q
"RTN","IBCU",73,0)
 ;
"RTN","IBCU",74,0)
PTADD(DFN,MAXL) ; outputs patient address for the trigger on Patient Short Address (399,110)
"RTN","IBCU",75,0)
 N IBX,IBY,IBI,IBDPT S (IBX,IBDPT)="" I $G(MAXL)="PSA" S MAXL=47
"RTN","IBCU",76,0)
 I +$G(DFN) S IBDPT=$G(^DPT(DFN,.11)) F IBI=1:1:4 S IBY=$P(IBDPT,U,IBI) I IBY'="" S IBX=IBX_IBY_","
"RTN","IBCU",77,0)
 I +$P(IBDPT,U,5) S IBY=$P($G(^DIC(5,+$P(IBDPT,U,5),0)),U,2),IBX=IBX_IBY
"RTN","IBCU",78,0)
 I $P(IBDPT,U,12)'="" S IBX=IBX_" "_$P(IBDPT,U,12)
"RTN","IBCU",79,0)
 I +$G(MAXL),$L(IBX)>+MAXL S IBX=""
"RTN","IBCU",80,0)
 Q IBX
"RTN","IBCU",81,0)
 ;
"RTN","IBCU",82,0)
SM ;Flag for printing medicare statment on UB-82
"RTN","IBCU",83,0)
 ;DGSM=0 means figure out which statement, DGSM=1 means no statements
"RTN","IBCU",84,0)
 S DGSM=0 Q
"RTN","IBCU",85,0)
 ;IBCU
"RTN","IBCU",86,0)
 ;
"RTN","IBCU",87,0)
CHGTYP(IBIFN,ARR) ; sets up array of all charge types defined on a bill:  ARR(TYPE, COMPONENT)=""
"RTN","IBCU",88,0)
 N IBI,IBX,IBT K ARR
"RTN","IBCU",89,0)
 I +$O(^DGCR(399,+$G(IBIFN),"RC",0)) S IBI=0 F  S IBI=$O(^DGCR(399,+IBIFN,"RC",IBI))  Q:'IBI  D
"RTN","IBCU",90,0)
 . S IBX=$G(^DGCR(399,+IBIFN,"RC",IBI,0)),IBT=$P(IBX,U,10) I +IBT S ARR(IBT,+$P(IBX,U,12))=""
"RTN","IBCU",91,0)
 Q
"RTN","IBCU",92,0)
 ;
"RTN","IBCU",93,0)
CHGTYPE(IBIFN) ; returns list of charge types on a bill: TYPE ^ TYPE ^ ... ; EXTERNAL TYPE , EXTERNAL TYPE , ...
"RTN","IBCU",94,0)
 N IBAR,IBY,IBS,IBI,IBC,IBJ,IBX
"RTN","IBCU",95,0)
 D CHGTYP($G(IBIFN),.IBAR)
"RTN","IBCU",96,0)
 S (IBX,IBY,IBS)="",IBI=0 F  S IBI=$O(IBAR(IBI)) Q:'IBI  D
"RTN","IBCU",97,0)
 . S IBX=IBX_IBI_U
"RTN","IBCU",98,0)
 . S IBC="INPT" I IBI=1 S IBJ=$O(IBAR(IBI,0)),IBC=$S(IBJ=1:"INST",IBJ=2:"PF",1:"INPT") I +$O(IBAR(IBI,IBJ)) S IBC="INPT"
"RTN","IBCU",99,0)
 . S IBY=IBY_IBS_$S(IBI=1:IBC,IBI=2:"VST",IBI=3:"RX",IBI=4:"CPT",IBI=5:"PI",IBI=6:"DRG",IBI=9:"UN",1:""),IBS=","
"RTN","IBCU",100,0)
 S IBY=IBX_";"_IBY
"RTN","IBCU",101,0)
 Q IBY
"RTN","IBCU",102,0)
 ;
"RTN","IBCU",103,0)
BCHGTYPE(IBIFN) ; returns type of bill and charges: (CLASS (.05): TYPE, TYPE, ...)
"RTN","IBCU",104,0)
 N IBCLASS,IBTYPE,IBY S IBY=""
"RTN","IBCU",105,0)
 S IBCLASS=$P($G(^DGCR(399,+$G(IBIFN),0)),U,5)
"RTN","IBCU",106,0)
 S IBTYPE=$P($$CHGTYPE(+$G(IBIFN)),";",2) I IBTYPE="INPT" S IBTYPE=""
"RTN","IBCU",107,0)
 I +IBCLASS S IBY=$S(IBCLASS<3:"Inpt",1:"Opt") I IBTYPE'="" S IBY=IBY_" ("_IBTYPE_")"
"RTN","IBCU",108,0)
 Q IBY
"RTN","IBCU",109,0)
 ;
"RTN","IBCU",110,0)
CLNSCRN(IBDT,CLIFN) ; screen for a Procedures Associated Clinic  (399, 304, 6), returns true if clinic can be used
"RTN","IBCU",111,0)
 ; clinic must be defined as a 'Clinic' and it must be active on date of procedure
"RTN","IBCU",112,0)
 ;
"RTN","IBCU",113,0)
 N IBCL0,IBCLI,IBX S IBX=0
"RTN","IBCU",114,0)
 S IBCL0=$G(^SC(+$G(CLIFN),0)),IBCLI=$G(^SC(+$G(CLIFN),"I"))
"RTN","IBCU",115,0)
 S IBX=$S($P(IBCL0,U,3)'="C":0,'$G(IBDT):0,'IBCLI:1,+IBCLI>+IBDT:1,'$P(IBCLI,U,2):0,1:$P(IBCLI,U,2)'>IBDT)
"RTN","IBCU",116,0)
 Q IBX
"RTN","IBCU",117,0)
 ;
"RTN","IBCU",118,0)
PRVNUM(IBIFN,IBINS,COB) ; Trigger code (399:122,123,124)
"RTN","IBCU",119,0)
 ; on Primary Secondary/Tertiary Carrier (399:101,102,103)
"RTN","IBCU",120,0)
 ; returns the Provider Number for the Insurance Company
"RTN","IBCU",121,0)
 ;         Hospital Provider Number for prov id in file 355.92
"RTN","IBCU",122,0)
 ;         or Medicare A provider Number (psych/non-psych) if Medicare A
"RTN","IBCU",123,0)
 ;
"RTN","IBCU",124,0)
 ; Input   IBIFN - bill ifn
"RTN","IBCU",125,0)
 ;         IBINS - insurance company ifn (opt)
"RTN","IBCU",126,0)
 ;         COB   - 1 for primary, 2 for secondary, 3 for tertiary
"RTN","IBCU",127,0)
 ;
"RTN","IBCU",128,0)
 N IBX,IBB0,IBBF,IBFT,Z,Z0
"RTN","IBCU",129,0)
 S:'$G(COB) COB=1
"RTN","IBCU",130,0)
 S IBX=$P($G(^DGCR(399,+$G(IBIFN),"M1")),U,COB+1),IBB0=$G(^DGCR(399,+$G(IBIFN),0))
"RTN","IBCU",131,0)
 I $G(IBINS)="" S IBINS=+$G(^DGCR(399,+$G(IBIFN),"I"_COB))
"RTN","IBCU",132,0)
 G:'IBINS PRVNQ
"RTN","IBCU",133,0)
 ;
"RTN","IBCU",134,0)
 ; OEC - 12/21/05 - If an MRA is being processed into an MRA secondary
"RTN","IBCU",135,0)
 ; claim and the billing provider # already exists, then leave it
"RTN","IBCU",136,0)
 I $G(IBPRCOB),IBX'="" G PRVNQ
"RTN","IBCU",137,0)
 ;
"RTN","IBCU",138,0)
 ;patch 432 enh5:  The IB system shall no longer add the following default Billing Provider Secondary ID to all Medicare Part A (Institutional) general/psychiatric claims:  674499 Psychiatric, 670899 General
"RTN","IBCU",139,0)
 ;I +$G(IBIFN),COB N DA S DA=IBIFN I $$MCRACK^IBCBB3(+IBIFN,$P($G(^DGCR(399,+IBIFN,"TX")),U,5),+COB) S IBX=$$MCRANUM^IBCBB3(+IBIFN) G PRVNQ
"RTN","IBCU",140,0)
 ;
"RTN","IBCU",141,0)
 ; WCJ - 1/17/06 - Some Insurances require certain electronic plan types to have no secondary ID
"RTN","IBCU",142,0)
 ; Check if this plan type requires a blank sec id to go out for this insurance
"RTN","IBCU",143,0)
 N NOSEC S NOSEC=0
"RTN","IBCU",144,0)
 I $D(^DIC(36,IBINS,13)),$G(IBIFN) D
"RTN","IBCU",145,0)
 . N PLAN,PLANTYPE
"RTN","IBCU",146,0)
 . S PLAN=$P($G(^DGCR(399,IBIFN,"I"_COB)),U,18) Q:'PLAN
"RTN","IBCU",147,0)
 . S PLANTYPE=$P($G(^IBA(355.3,PLAN,0)),U,15) Q:'PLANTYPE
"RTN","IBCU",148,0)
 . Q:'$D(^DIC(36,IBINS,13,"B",PLANTYPE))
"RTN","IBCU",149,0)
 . S NOSEC=1,IBX=""
"RTN","IBCU",150,0)
 I NOSEC G PRVNQ
"RTN","IBCU",151,0)
 ;
"RTN","IBCU",152,0)
 ; If using attending/rendering secondary ID, don't do anything
"RTN","IBCU",153,0)
 I $$FT^IBCEF(IBIFN)=2,$$GET1^DIQ(36,IBINS,4.06,"I") G PRVNQ
"RTN","IBCU",154,0)
 I $$FT^IBCEF(IBIFN)=3,$$GET1^DIQ(36,IBINS,4.08,"I") G PRVNQ
"RTN","IBCU",155,0)
 ;JWS;IB*2.0*592;Dental form 7
"RTN","IBCU",156,0)
 ;IA# 2056
"RTN","IBCU",157,0)
 I $$FT^IBCEF(IBIFN)=7,$$GET1^DIQ(36,IBINS,4.06,"I") G PRVNQ
"RTN","IBCU",158,0)
 ;
"RTN","IBCU",159,0)
 S IBX=$$FACNUM^IBCEP2B(IBIFN,COB)
"RTN","IBCU",160,0)
 ;
"RTN","IBCU",161,0)
 ; PATCH 432 ENH5:  The IB system shall no longer add a default Billing Provider Secondary ID to a claim.
"RTN","IBCU",162,0)
 ;I IBX="" S IBX=$$GET1^DIQ(350.9,1,1.05)
"RTN","IBCU",163,0)
 ;
"RTN","IBCU",164,0)
PRVNQ Q IBX
"RTN","IBCU",165,0)
 ;
"RTN","IBCU",166,0)
BF() ; Returns ien of billing fac primary id type
"RTN","IBCU",167,0)
 N Z,IBX
"RTN","IBCU",168,0)
 S IBX="",Z=0 F  S Z=$O(^IBE(355.97,Z)) Q:'Z  I $P($G(^(Z,1)),U,9) S IBX=Z Q
"RTN","IBCU",169,0)
 Q IBX
"RTN","IBCU",170,0)
 ;
"RTN","IBCU",171,0)
BILLPNS(IBIFN) ; Trigger Code that sets all Bill P/S/T Prov# and QUAL (399: .122,123,124,128,129,130)
"RTN","IBCU",172,0)
 ; on Bill Form Type (399:.19)
"RTN","IBCU",173,0)
 N IBDR
"RTN","IBCU",174,0)
 ;
"RTN","IBCU",175,0)
 I +$G(^DGCR(399,+$G(IBIFN),"I1")) S IBDR(399,IBIFN_",",122)=$$PRVNUM(IBIFN,"",1),IBDR(399,IBIFN_",",128)=$$PRVQUAL(IBIFN,"",1)
"RTN","IBCU",176,0)
 I +$G(^DGCR(399,+$G(IBIFN),"I2")) S IBDR(399,IBIFN_",",123)=$$PRVNUM(IBIFN,"",2),IBDR(399,IBIFN_",",129)=$$PRVQUAL(IBIFN,"",2)
"RTN","IBCU",177,0)
 I +$G(^DGCR(399,+$G(IBIFN),"I3")) S IBDR(399,IBIFN_",",124)=$$PRVNUM(IBIFN,"",3),IBDR(399,IBIFN_",",130)=$$PRVQUAL(IBIFN,"",3)
"RTN","IBCU",178,0)
 ;
"RTN","IBCU",179,0)
 I $O(IBDR(0)) D FILE^DIE("","IBDR")
"RTN","IBCU",180,0)
 Q
"RTN","IBCU",181,0)
 ;
"RTN","IBCU",182,0)
PRVQUAL(IBIFN,IBINS,COB) ; Trigger code for Bill P/S/T Prov QUAL (399:128,129,130)
"RTN","IBCU",183,0)
 ; on P/S/T Carrier (399: 101,102,103)
"RTN","IBCU",184,0)
 ; returns the Provider ID QUALIFIER
"RTN","IBCU",185,0)
 ;
"RTN","IBCU",186,0)
 ; Input   IBIFN - bill ifn
"RTN","IBCU",187,0)
 ;         IBINS - insurance company ifn (opt)
"RTN","IBCU",188,0)
 ;         COB   - 1 for primary, 2 for secondary, 3 for tertiary
"RTN","IBCU",189,0)
 ;
"RTN","IBCU",190,0)
 N IBX,IBB0,IBBF,IBFT,Z,Z0
"RTN","IBCU",191,0)
 S:'$G(COB) COB=1
"RTN","IBCU",192,0)
 S IBX=$P($G(^DGCR(399,+$G(IBIFN),"M1")),U,COB+9),IBB0=$G(^DGCR(399,+$G(IBIFN),0))
"RTN","IBCU",193,0)
 I $G(IBINS)="" S IBINS=+$G(^DGCR(399,+$G(IBIFN),"I"_COB))
"RTN","IBCU",194,0)
 G:'IBINS PRVQUALQ
"RTN","IBCU",195,0)
 ;
"RTN","IBCU",196,0)
 ; If an MRA is being processed into an MRA secondary claim and the
"RTN","IBCU",197,0)
 ; billing provider qualifier already exists, then leave it alone
"RTN","IBCU",198,0)
 I $G(IBPRCOB),IBX'="" G PRVQUALQ
"RTN","IBCU",199,0)
 ;
"RTN","IBCU",200,0)
 ; PATCH 432 ENH5:  The IB system shall no longer add a default Billing Provider Secondary ID to a claim.
"RTN","IBCU",201,0)
 ;I +$G(IBIFN),COB N DA S DA=IBIFN I $$MCRACK^IBCBB3(+IBIFN,$P($G(^DGCR(399,+IBIFN,"TX")),U,5),+COB) S IBX=$$FIND1^DIC(355.97,,"MX","MEDICARE PART A") G PRVQUALQ
"RTN","IBCU",202,0)
 ;
"RTN","IBCU",203,0)
 ; Some Insurances require certain electronic plan types to have no secondary ID
"RTN","IBCU",204,0)
 ; If this is the case, there is no qualifier
"RTN","IBCU",205,0)
 N NOSEC S NOSEC=0
"RTN","IBCU",206,0)
 I $D(^DIC(36,IBINS,13)),$G(IBIFN) D
"RTN","IBCU",207,0)
 . N PLAN,PLANTYPE
"RTN","IBCU",208,0)
 . S PLAN=$P($G(^DGCR(399,IBIFN,"I"_COB)),U,18) Q:'PLAN
"RTN","IBCU",209,0)
 . S PLANTYPE=$P($G(^IBA(355.3,PLAN,0)),U,15) Q:'PLANTYPE
"RTN","IBCU",210,0)
 . Q:'$D(^DIC(36,IBINS,13,"B",PLANTYPE))
"RTN","IBCU",211,0)
 . S NOSEC=1,IBX=""
"RTN","IBCU",212,0)
 I NOSEC G PRVQUALQ
"RTN","IBCU",213,0)
 ;
"RTN","IBCU",214,0)
 ; Leave qualifer blank if sending REND/ATT ID
"RTN","IBCU",215,0)
 I $$FT^IBCEF(IBIFN)=2,$$GET1^DIQ(36,IBINS,4.06,"I") G PRVQUALQ
"RTN","IBCU",216,0)
 I $$FT^IBCEF(IBIFN)=3,$$GET1^DIQ(36,IBINS,4.08,"I") G PRVQUALQ
"RTN","IBCU",217,0)
 ;JWS;IB*2.0*592;Dental form 7
"RTN","IBCU",218,0)
 ;IA# 2056
"RTN","IBCU",219,0)
 I $$FT^IBCEF(IBIFN)=7,$$GET1^DIQ(36,IBINS,4.06,"I") G PRVQUALQ
"RTN","IBCU",220,0)
 ;
"RTN","IBCU",221,0)
 S IBX=$$FACNUM^IBCEP2B(IBIFN,COB,1)
"RTN","IBCU",222,0)
 ;
"RTN","IBCU",223,0)
 I IBX="",$$GET1^DIQ(350.9,1,1.05)=$P($G(^DGCR(399,IBIFN,"M1")),U,COB+1) S IBX=$$FIND1^DIC(355.97,,"MX","1J")
"RTN","IBCU",224,0)
 ;
"RTN","IBCU",225,0)
PRVQUALQ Q IBX
"RTN","IBCU",226,0)
 ;
"RTN","IBCU",227,0)
ACIDS(IBIFN,COB,ENTRY) ; Administrative Contractor IDS
"RTN","IBCU",228,0)
 ; This is called as a screen from fields 140, 142, and 144 in the BILL/CLAIMS file #399
"RTN","IBCU",229,0)
 ; It should only allow types that have previously been defined for this insurance company and
"RTN","IBCU",230,0)
 ; are allowed for this form type.
"RTN","IBCU",231,0)
 ;
"RTN","IBCU",232,0)
 ; Input   IBIFN - bill ifn
"RTN","IBCU",233,0)
 ;         COB   - 1 for primary, 2 for secondary, 3 for tertiary 
"RTN","IBCU",234,0)
 ;         ENTRY - IEN # to the pointed to file corresponding to what the user entered.
"RTN","IBCU",235,0)
 ;
"RTN","IBCU",236,0)
 ; Output 1 or 0, yay or nay, good or evil, jedi or sith ...
"RTN","IBCU",237,0)
 ;
"RTN","IBCU",238,0)
 ; overkill, but why not
"RTN","IBCU",239,0)
 Q:'$G(ENTRY) 0
"RTN","IBCU",240,0)
 Q:'$G(COB) 0
"RTN","IBCU",241,0)
 Q:'$D(IBIFN) 0
"RTN","IBCU",242,0)
 ;
"RTN","IBCU",243,0)
 N IBINSDAT,IBINSCO,IBPLAN,IBPLTYPE,IBPLDAT,IBSPSF,IBINST,IBINSSF
"RTN","IBCU",244,0)
 ;
"RTN","IBCU",245,0)
 ; get insurance company data from bill
"RTN","IBCU",246,0)
 S IBINSDAT=$G(^DGCR(399,IBIFN,"I"_COB))
"RTN","IBCU",247,0)
 Q:'IBINSDAT 0   ; no insurance company
"RTN","IBCU",248,0)
 S IBINSCO=+IBINSDAT
"RTN","IBCU",249,0)
 ;
"RTN","IBCU",250,0)
 ; get the plan
"RTN","IBCU",251,0)
 S IBPLAN=$P(IBINSDAT,U,18)
"RTN","IBCU",252,0)
 Q:'IBPLAN 0    ; no plan
"RTN","IBCU",253,0)
 ;
"RTN","IBCU",254,0)
 ; get the pland data
"RTN","IBCU",255,0)
 S IBPLDAT=$G(^IBA(355.3,IBPLAN,0))
"RTN","IBCU",256,0)
 Q:IBPLDAT="" 0   ; no valid plan
"RTN","IBCU",257,0)
 ;
"RTN","IBCU",258,0)
 ; get the electronic plan type
"RTN","IBCU",259,0)
 S IBPLTYPE=$P(IBPLDAT,U,15)
"RTN","IBCU",260,0)
 Q:IBPLTYPE="" 0   ; no electronic plan type
"RTN","IBCU",261,0)
 ;
"RTN","IBCU",262,0)
 ; at this point, IBPLTYPE="MX" for medicare.  anything else is not medicare (considered commercial for the purpose of this exercise).
"RTN","IBCU",263,0)
 ; we will next be looking to see if this is set up correctly by looking at the correct subfile in the file 36.
"RTN","IBCU",264,0)
 ; subfile 36.015 is for institutional
"RTN","IBCU",265,0)
 ; subfile 36.016 is for professional.
"RTN","IBCU",266,0)
 ;
"RTN","IBCU",267,0)
 ; get the site parameter subfile
"RTN","IBCU",268,0)
 S IBSPSF=$S(IBPLTYPE="MX":81,1:82)
"RTN","IBCU",269,0)
 ;
"RTN","IBCU",270,0)
 ; get the formtype (Instituional or professional)
"RTN","IBCU",271,0)
 S IBINST=$$FT^IBCEF(+IBIFN)=3  ; set IBINST flag=1 if it is institutional.
"RTN","IBCU",272,0)
 ;
"RTN","IBCU",273,0)
 ; get the insurance subfile
"RTN","IBCU",274,0)
 S IBINSSF=$S(IBINST:15,1:16)
"RTN","IBCU",275,0)
 ;
"RTN","IBCU",276,0)
 ; quit if the subfile is not defined
"RTN","IBCU",277,0)
 Q:'$P($G(^DIC(36,IBINSCO,IBINSSF,0)),U,3) 0   ; none set up for this Insurance Company
"RTN","IBCU",278,0)
 ;
"RTN","IBCU",279,0)
 ; get the values in the correct multiple
"RTN","IBCU",280,0)
 N TARGET,ERROR
"RTN","IBCU",281,0)
 D GETS^DIQ(36,IBINSCO_",",IBINSSF_"*","I","TARGET","ERROR")
"RTN","IBCU",282,0)
 Q:'$D(TARGET) 0   ; nothing set up in the site parameters 
"RTN","IBCU",283,0)
 ;
"RTN","IBCU",284,0)
 ; TARGET contains something like this
"RTN","IBCU",285,0)
 ; TARGET(36.015,"1,3,",.01,"I")=5
"RTN","IBCU",286,0)
 ; TARGET(36.015,"1,3,",.02,"I")="TESTID1"
"RTN","IBCU",287,0)
 ; TARGET(36.015,"2,3,",.01,"I")=29
"RTN","IBCU",288,0)
 ; TARGET(36.015,"2,3,",.02,"I")="TESTID2"
"RTN","IBCU",289,0)
 ;
"RTN","IBCU",290,0)
 N SUBFILE
"RTN","IBCU",291,0)
 S SUBFILE="36.0"_IBINSSF
"RTN","IBCU",292,0)
 ;
"RTN","IBCU",293,0)
 ; Now, time to make it more useful.
"RTN","IBCU",294,0)
 N LOOP1,ADMINCON
"RTN","IBCU",295,0)
 S LOOP1="" F  S LOOP1=$O(TARGET(SUBFILE,LOOP1)) Q:LOOP1=""  D
"RTN","IBCU",296,0)
 . Q:'$D(^IBE(350.9,1,IBSPSF,"B",+$G(TARGET(SUBFILE,LOOP1,.01,"I"))))
"RTN","IBCU",297,0)
 . S ADMINCON(TARGET(SUBFILE,LOOP1,.01,"I"))=""
"RTN","IBCU",298,0)
 ;
"RTN","IBCU",299,0)
 ; which leaves us with an array like
"RTN","IBCU",300,0)
 ; ADMINCON(IEN1)=""
"RTN","IBCU",301,0)
 ; ADMINCON(IEN2)=""
"RTN","IBCU",302,0)
 ; of allowable entries. 
"RTN","IBCU",303,0)
 ;
"RTN","IBCU",304,0)
 ; and finally, see if it's allowed.
"RTN","IBCU",305,0)
 ; at this point, it needed to be in the site parameter file for use with this form type (institutional or professional)
"RTN","IBCU",306,0)
 ; and it needed to be in the insurance company file for this type of plan (medicare or commercial)
"RTN","IBCU",307,0)
 Q $S($D(ADMINCON(+ENTRY)):1,1:0)
"RTN","IBCU",308,0)
 ;
"RTN","IBCU",309,0)
ACIDD(IBIFN,COB,ENTRY) ; Administrative Contractor ID Default
"RTN","IBCU",310,0)
 ; This will default the ID based on the valid type entered.
"RTN","IBCU",311,0)
 ; It is called from a trigger on fields 140, 142, and 144 in the BILL/CLAIMS file #399
"RTN","IBCU",312,0)
 ; and triggers fields 141, 143, and 145 
"RTN","IBCU",313,0)
 ;
"RTN","IBCU",314,0)
 ; Input   IBIFN - bill ien
"RTN","IBCU",315,0)
 ;         COB   - 1 for primary, 2 for secondary, 3 for tertiary
"RTN","IBCU",316,0)
 ;         ENTRY - value of triggering field
"RTN","IBCU",317,0)
 ;
"RTN","IBCU",318,0)
 ; Output  Default ID for that Insurance Company or nothing at all
"RTN","IBCU",319,0)
 ;
"RTN","IBCU",320,0)
 ; overkill, but why not
"RTN","IBCU",321,0)
 Q:$G(ENTRY)="" ""
"RTN","IBCU",322,0)
 Q:'$G(COB) ""
"RTN","IBCU",323,0)
 Q:'$G(IBIFN) ""
"RTN","IBCU",324,0)
 ;
"RTN","IBCU",325,0)
 N IBINST,IBINSDAT,IBINSSF,IBACID,IBSFIEN,IBINSCO
"RTN","IBCU",326,0)
 ;
"RTN","IBCU",327,0)
 ; get the form type (institutional or professional)
"RTN","IBCU",328,0)
 S IBINST=$$FT^IBCEF(+IBIFN)=3  ; set IBINST flag=1 if it is institutional.
"RTN","IBCU",329,0)
 ;
"RTN","IBCU",330,0)
 ; get insurance company data from bill
"RTN","IBCU",331,0)
 S IBINSDAT=$G(^DGCR(399,IBIFN,"I"_COB))
"RTN","IBCU",332,0)
 Q:'IBINSDAT ""   ; no insurance company
"RTN","IBCU",333,0)
 S IBINSCO=+IBINSDAT
"RTN","IBCU",334,0)
 ;
"RTN","IBCU",335,0)
 ; get the insurance subfile based on institutional or professional
"RTN","IBCU",336,0)
 S IBINSSF=$S(IBINST:15,1:16)
"RTN","IBCU",337,0)
 ;
"RTN","IBCU",338,0)
 ; quit if the subfile is not defined
"RTN","IBCU",339,0)
 Q:'$P($G(^DIC(36,IBINSCO,IBINSSF,0)),U,4) ""   ; none set up for this Insurance Company
"RTN","IBCU",340,0)
 ;
"RTN","IBCU",341,0)
 ; get the specific entry
"RTN","IBCU",342,0)
 S IBSFIEN=$O(^DIC(36,IBINSCO,IBINSSF,"B",ENTRY,""))
"RTN","IBCU",343,0)
 Q:'IBSFIEN ""
"RTN","IBCU",344,0)
 ;
"RTN","IBCU",345,0)
 S IBACID=$P($G(^DIC(36,IBINSCO,IBINSSF,IBSFIEN,0)),U,2)
"RTN","IBCU",346,0)
 ;
"RTN","IBCU",347,0)
 Q IBACID
"RTN","IBCU1")
0^22^B44335256^B44176485
"RTN","IBCU1",1,0)
IBCU1 ;ALB/MRL - BILLING UTILITY ROUTINE (CONTINUED) ;01 JUN 88 12:00
"RTN","IBCU1",2,0)
 ;;2.0;INTEGRATED BILLING;**27,52,106,138,51,182,210,266,309,320,347,405,592**;21-MAR-94;Build 58
"RTN","IBCU1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCU1",4,0)
 ;
"RTN","IBCU1",5,0)
 ;MAP TO DGCRU1
"RTN","IBCU1",6,0)
 ;
"RTN","IBCU1",7,0)
 ;procedure doesn't appear to be used (6/4/93), if it is used, what for??
"RTN","IBCU1",8,0)
 ;where would multiple provider numbers comde from?  ARH
"RTN","IBCU1",9,0)
 ;BCH    ;Blue Cross/Shield Help
"RTN","IBCU1",10,0)
 W ! S IB01=$P($G(^IBE(350.9,1,1)),"^",6)
"RTN","IBCU1",11,0)
 I IB01]"" W "CHOOSE FROM",!!?4,"1 - ",$P(IB01,"^",6) F IB00=2,3 I $P(IB01,"^",$S(IB00=2:14,1:15))]"" W !?4,IB00," - ",$P(IB01,"^",$S(IB00=2:14,1:15))
"RTN","IBCU1",12,0)
 W:IB01']"" "NO BLUE CROSS/SHIELD PROVIDER NUMBERS IDENTIFIED TO SELECT FROM!" W ! W:IB01]"" !,"OR " W "ENTER BLUE CROSS/SHIELD PROVIDER # (BETWEEN 3-13 CHARACTERS)",! K IB00,IB01 Q
"RTN","IBCU1",13,0)
 ;
"RTN","IBCU1",14,0)
RCD ;Revenue Code Display
"RTN","IBCU1",15,0)
 Q:'$D(^DGCR(399,IBIFN,"RC"))
"RTN","IBCU1",16,0)
 W @IOF,!,"Revenue Code Listing",?34,"Units",?45,"Charge" W:$$FT^IBCEF(IBIFN)=3 ?56,"Non-Cov"
"RTN","IBCU1",17,0)
 S DGIFN=0 F IBI=0:0 S DGIFN=$O(^DGCR(399,IBIFN,"RC",DGIFN)) Q:'DGIFN  I $D(^DGCR(399,IBIFN,"RC",DGIFN,0)) S Z=^(0) D DISRC
"RTN","IBCU1",18,0)
 W !
"RTN","IBCU1",19,0)
 I $D(DIC(0)) S DIC(0)=DIC(0)_"N"
"RTN","IBCU1",20,0)
 Q
"RTN","IBCU1",21,0)
DISRC N Z0 W !?1,DGIFN,?4,$P(^DGCR(399.2,+Z,0),"^"),"-",$E($P(^DGCR(399.2,+Z,0),"^",2),1,19)
"RTN","IBCU1",22,0)
 I +$P(Z,U,6) W ?28,$P($$CPT^ICPTCOD(+$P(Z,U,6)),U,2)
"RTN","IBCU1",23,0)
 W ?36,$P(Z,"^",3),?40 S X=$P(Z,"^",2),X2="2$" D COMMA^%DTC W X
"RTN","IBCU1",24,0)
 I $$FT^IBCEF(IBIFN)=3,$P(Z,U,9)'="" S X=$P(Z,U,9),X2="2$" D COMMA^%DTC W ?51,X
"RTN","IBCU1",25,0)
 I $D(^DGCR(399.1,+$P(Z,"^",5),0)) W ?64,$E($P(^(0),"^"),1,15)
"RTN","IBCU1",26,0)
 I $S($P(Z,U,15):1,1:$P(Z,U,10)=3) D
"RTN","IBCU1",27,0)
 . W !,?5,"(Rx: ",$S($P(Z,U,11):$P($G(^IBA(362.4,$P(Z,U,11),0)),U),1:"Link Missing"),"  Procedure "_$S($P(Z,U,15):"#"_$P(Z,U,15)_" "_$$CPTNM^IBCRBH1(IBIFN,4,$P(Z,U,15)),1:"Link Missing"),")"
"RTN","IBCU1",28,0)
 Q
"RTN","IBCU1",29,0)
 ;
"RTN","IBCU1",30,0)
RVCPRC(IBIFN,IBD0) ; returns 1 if CHAMPVA rate type + 2 if CMS-1500, 0 otherwise
"RTN","IBCU1",31,0)
 ; IBD0 - zero node of bill if available, not required
"RTN","IBCU1",32,0)
 N X S X=0
"RTN","IBCU1",33,0)
 I $G(IBD0)="" S IBD0=$G(^DGCR(399,+$G(IBIFN),0))
"RTN","IBCU1",34,0)
 I $P($G(^DGCR(399.3,+$P(IBD0,U,7),0)),U,1)="CHAMPVA" S X=X+1
"RTN","IBCU1",35,0)
 I $P(IBD0,U,19)=2 S X=X+2
"RTN","IBCU1",36,0)
 Q X
"RTN","IBCU1",37,0)
 ;
"RTN","IBCU1",38,0)
ORDNXT(IFN) ;CALLED BY TRIGGER ON (362.3,.02) THAT SETS DX PRINT ORDER (362.3,.03),
"RTN","IBCU1",39,0)
 ;returns the highest print order used on the bill plus 3, returns 3 if no existing print order
"RTN","IBCU1",40,0)
 ;used for the default print order so that dx's can be printed in order of entry without any input by the user,
"RTN","IBCU1",41,0)
 ;3 is added to allow spaces for additions, changes, moves
"RTN","IBCU1",42,0)
 N X,Y S X="" I $D(^DGCR(399,+$G(IFN),0)) S X=3,Y=0 F  S Y=$O(^IBA(362.3,"AO",+IFN,Y)) Q:'Y  S X=Y+3
"RTN","IBCU1",43,0)
 Q X
"RTN","IBCU1",44,0)
 ;
"RTN","IBCU1",45,0)
ORDDUP(ORD,DIFN) ;returns true if print order ORD is already defined for a bill (not same entry)
"RTN","IBCU1",46,0)
 N IBX,IBY S IBY=0
"RTN","IBCU1",47,0)
 I +$G(ORD) S IBX=$G(^IBA(362.3,+$G(DIFN),0)) I +IBX,+$P(IBX,U,3)'=ORD,$D(^IBA(362.3,"AO",+$P(IBX,U,2),+ORD)) S IBY=1
"RTN","IBCU1",48,0)
 Q IBY
"RTN","IBCU1",49,0)
 ;
"RTN","IBCU1",50,0)
DXDUP(DX,DIFN,IFN) ;returns true if DX is already defined for a bill (not same entry)
"RTN","IBCU1",51,0)
 ;either DIFN or IFN can be passed, both are not needed, DIFN is needed during edit so can reenter the same dx
"RTN","IBCU1",52,0)
 N IBX,IBY S IBY=0 I +$G(DX),'$G(IFN) S IBX=$G(^IBA(362.3,+$G(DIFN),0)),IFN=+$P(IBX,U,2)
"RTN","IBCU1",53,0)
 I +$G(DX),$D(^IBA(362.3,"AIFN"_+IFN,+DX)),$O(^IBA(362.3,"AIFN"_+IFN,+DX,0))'=+$G(DIFN) S IBY=1
"RTN","IBCU1",54,0)
 Q IBY
"RTN","IBCU1",55,0)
 ;
"RTN","IBCU1",56,0)
DXBSTAT(DIFN,IFN) ;returns a diagnosis' bill status (either DIFN or IFN can be passed, both are not needed)
"RTN","IBCU1",57,0)
 N IBX,IBY I '$G(IFN) S IBX=$G(^IBA(362.3,+$G(DIFN),0)),IFN=+$P(IBX,U,2)
"RTN","IBCU1",58,0)
 S IBY=+$P($G(^DGCR(399,+IFN,0)),U,13)
"RTN","IBCU1",59,0)
 Q IBY
"RTN","IBCU1",60,0)
 ;
"RTN","IBCU1",61,0)
RXSTAT(DRUG,PIFN,FILLDT) ; returns status/definition of rx
"RTN","IBCU1",62,0)
 ; returns: ORIGINAL ^ RELEASED/RETURNED TO STOCK ^ DRUG DEA
"RTN","IBCU1",63,0)
 N IBX,IBY,IBZ,IBLN,IBNUM S IBLN="",DRUG=+$G(DRUG),PIFN=+$G(PIFN),FILLDT=+$G(FILLDT)
"RTN","IBCU1",64,0)
 ;
"RTN","IBCU1",65,0)
 S IBX=$$RXSEC^IBRXUTL($$FILE^IBRXUTL(PIFN,2),PIFN),IBZ="" I IBX'="",$P(IBX,U,2)=$G(FILLDT) D  I IBZ'="" S $P(IBLN,U,2)=IBZ
"RTN","IBCU1",66,0)
 . S IBLN="ORG"
"RTN","IBCU1",67,0)
 . ;I +$G(^PS(59.7,1,49.99))<6 Q
"RTN","IBCU1",68,0)
 . I '$P(IBX,U,13) S IBZ="NR"
"RTN","IBCU1",69,0)
 . I +$P(IBX,U,15) S:IBZ'="" IBZ=IBZ_"-" S IBZ=IBZ_"RTS"
"RTN","IBCU1",70,0)
 ;
"RTN","IBCU1",71,0)
 I IBLN="" S IBNUM=$$RFLNUM^IBRXUTL(PIFN,FILLDT,1),IBX=$$ZEROSUB^IBRXUTL($$FILE^IBRXUTL(PIFN,2),PIFN,IBNUM),IBZ="" I IBX'="" D  I IBZ'="" S $P(IBLN,U,2)=IBZ
"RTN","IBCU1",72,0)
 . ;I +$G(^PS(59.7,1,49.99))<6 Q
"RTN","IBCU1",73,0)
 . I '$P(IBX,U,18) S IBZ="NR"
"RTN","IBCU1",74,0)
 . I +$P(IBX,U,16) S:IBZ'="" IBZ=IBZ_"-" S IBZ=IBZ_"RTS"
"RTN","IBCU1",75,0)
 ;
"RTN","IBCU1",76,0)
 D ZERO^IBRXUTL(DRUG)
"RTN","IBCU1",77,0)
 S IBX=$G(^TMP($J,"IBDRUG",0)) I IBX'="" S IBY=$G(^TMP($J,"IBDRUG",DRUG,3)),IBZ="" D  I IBZ'="" S $P(IBLN,U,3)=IBZ
"RTN","IBCU1",78,0)
 . I IBY["9" S IBZ="OTC"
"RTN","IBCU1",79,0)
 . I IBY["I" S:IBZ'="" IBZ=IBZ_"-" S IBZ=IBZ_"INV"
"RTN","IBCU1",80,0)
 . I IBY["S" S:IBZ'="" IBZ=IBZ_"-" S IBZ=IBZ_"SUP"
"RTN","IBCU1",81,0)
 . I IBY["N" S:IBZ'="" IBZ=IBZ_"-" S IBZ=IBZ_"NUT"
"RTN","IBCU1",82,0)
 K ^TMP($J,"IBDRUG")
"RTN","IBCU1",83,0)
 Q IBLN
"RTN","IBCU1",84,0)
 ;
"RTN","IBCU1",85,0)
PRVLIC(NPIFN,IBDT,ARR,STIFN) ; returns the Provider License data from the New Person file active on a date
"RTN","IBCU1",86,0)
 ; Input:   NPIFN = pointer to file 200,              IBDT = date to check (if none passed then all returned)
"RTN","IBCU1",87,0)
 ;          ARR = array pass by reference (optional), STIFN = state to return as value of function (optional)
"RTN","IBCU1",88,0)
 ; Output:  ARR(X) = license state (ifn) ^ license ^ expiration date (200,541)
"RTN","IBCU1",89,0)
 ;          return value = license data of state requested or if no state passed in then count found
"RTN","IBCU1",90,0)
 N IBX,IBY,IBLN,IBCNT S IBX=0,IBCNT=0 K ARR
"RTN","IBCU1",91,0)
 I +$G(NPIFN) S IBY=0 F  S IBY=$O(^VA(200,NPIFN,"PS1",IBY)) Q:'IBY  D
"RTN","IBCU1",92,0)
 . S IBLN=$G(^VA(200,NPIFN,"PS1",IBY,0))
"RTN","IBCU1",93,0)
 . I +$G(IBDT),+$P(IBLN,U,3),$P(IBLN,U,3)<IBDT Q
"RTN","IBCU1",94,0)
 . I +$G(STIFN),+STIFN=+IBLN S IBX=IBLN
"RTN","IBCU1",95,0)
 . S IBCNT=IBCNT+1,ARR(IBCNT)=IBLN
"RTN","IBCU1",96,0)
 S ARR=IBCNT I '$G(STIFN) S IBX=IBCNT
"RTN","IBCU1",97,0)
 Q IBX
"RTN","IBCU1",98,0)
 ;
"RTN","IBCU1",99,0)
DELPR(IB,IBX) ; Deletes the corresponding RX proc when the RX pointer is
"RTN","IBCU1",100,0)
 ; deleted
"RTN","IBCU1",101,0)
 ; IB = the ien of the bill in file 399
"RTN","IBCU1",102,0)
 ; IBX = the ien of the entry in the procedure multiple to be deleted
"RTN","IBCU1",103,0)
 ;
"RTN","IBCU1",104,0)
 N DA,DIK,X,Y
"RTN","IBCU1",105,0)
 S DA(1)=IB,DA=IBX
"RTN","IBCU1",106,0)
 I $D(^DGCR(399,DA(1),"CP",DA,0)) S DIK="^DGCR(399,"_DA(1)_",""CP""," D ^DIK
"RTN","IBCU1",107,0)
 Q
"RTN","IBCU1",108,0)
 ;
"RTN","IBCU1",109,0)
MODHLP(DA) ; Executable modifier help 399.042  .14
"RTN","IBCU1",110,0)
 ; DA = iens of the current entry DA(1) = file 399 ien
"RTN","IBCU1",111,0)
 ;                                DA    = file 399.042 ien
"RTN","IBCU1",112,0)
 N Z,IBZ,DIC,IBDATE
"RTN","IBCU1",113,0)
 S IBDATE=$$BDATE^IBACSV(+$G(DA(1))) ; The date of service
"RTN","IBCU1",114,0)
 I $P($G(^DGCR(399,+$G(DA(1)),"RC",+$G(DA),0)),U,14)'="" S Z=$P(^(0),U,14) D
"RTN","IBCU1",115,0)
 . N Q
"RTN","IBCU1",116,0)
 . S Q=1
"RTN","IBCU1",117,0)
 . S IBZ(1)="Current modifier"_$S($P(Z,";",2)'="":"s are:",1:"is:")
"RTN","IBCU1",118,0)
 . I $P(Z,";")'="" S Q=Q+1,IBZ(Q)="  "_$P(Z,";")_"  "_$P($$MOD^ICPTMOD($P(Z,";"),"E",IBDATE),U,3)
"RTN","IBCU1",119,0)
 . I $P(Z,";",2)'="" S Q=Q+1,IBZ(Q)="  "_$P(Z,";",2)_"  "_$P($$MOD^ICPTMOD($P(Z,";",2),"E",IBDATE),U,3)
"RTN","IBCU1",120,0)
 . S Q=Q+1,IBZ(Q)=" "
"RTN","IBCU1",121,0)
 . D EN^DDIOL(.IBZ)
"RTN","IBCU1",122,0)
 ;
"RTN","IBCU1",123,0)
 S DIC="^DIC(81.3,",DIC(0)="E"
"RTN","IBCU1",124,0)
 S DIC("S")="I $$MODP^ICPTMOD($P($G(^DGCR(399,DA(1),""RC"",DA,0)),U,6),Y,""I"",IBDATE)>0"
"RTN","IBCU1",125,0)
 S DIC("W")="W ?14,$P($$MOD^ICPTMOD(Y,""I"",IBDATE),U,3)"
"RTN","IBCU1",126,0)
 D ^DIC
"RTN","IBCU1",127,0)
 Q
"RTN","IBCU1",128,0)
 ;
"RTN","IBCU1",129,0)
QMED(IBRTN,IBIFN) ; DSS QuadraMed Interface: DSS/QuadraMed Available
"RTN","IBCU1",130,0)
 ; return 1 if QuadraMed Interface is On and available for the type of bill
"RTN","IBCU1",131,0)
 ; - routine must exist on the system (interface is 'On')
"RTN","IBCU1",132,0)
 ; Input: IBRTN = tag^routine, if it exists then Interface is 'On'
"RTN","IBCU1",133,0)
 ;        IBIFN = Bill IFN, bill to check if appropriate for sending to QuadraMed
"RTN","IBCU1",134,0)
 ;
"RTN","IBCU1",135,0)
 N IBON S IBON=0
"RTN","IBCU1",136,0)
 I +$G(IBIFN),$G(IBRTN)'="",$T(@IBRTN)'="" S IBON=1
"RTN","IBCU1",137,0)
 Q IBON
"RTN","IBCU1",138,0)
 ;
"RTN","IBCU1",139,0)
ATTREND(IBIFN,IBIFN1,FIELD) ; This function is called from Mumps Cross References in the claim file 399 and 
"RTN","IBCU1",140,0)
 ; also the PROVIDER subfile 399.0222.
"RTN","IBCU1",141,0)
 ;
"RTN","IBCU1",142,0)
 ; IBIFN = IEN to claim file
"RTN","IBCU1",143,0)
 ; IBIFN1 = IEN to provider sub-file in claim file
"RTN","IBCU1",144,0)
 ; FIELD = Field in sub-file being modified (the triggering event).  If field has no value, all 6 fields are
"RTN","IBCU1",145,0)
 ; possibly updated
"RTN","IBCU1",146,0)
 ;  
"RTN","IBCU1",147,0)
 ; The following fields are the "triggering" events
"RTN","IBCU1",148,0)
 ; File 399
"RTN","IBCU1",149,0)
 ; #19 FORM TYPE - This triggers all 6 fields (122, 123, 124, 128, 129, 130).
"RTN","IBCU1",150,0)
 ; 
"RTN","IBCU1",151,0)
 ; Sub-File 399.0222
"RTN","IBCU1",152,0)
 ; #.05 PRIMARY INS CO ID NUMBER triggers 122
"RTN","IBCU1",153,0)
 ; #.06 SECONDARY INS CO ID NUMBER triggers 123
"RTN","IBCU1",154,0)
 ; #.07 TERTIARY INS CO ID NUMBER triggers 124
"RTN","IBCU1",155,0)
 ; #.12 PRIM INS PROVIDER ID TYPE triggers 128
"RTN","IBCU1",156,0)
 ; #.13 SEC INS PROVIDER ID TYPE triggers 129
"RTN","IBCU1",157,0)
 ; #.14 TERT INS PROVIDER ID TYPE triggers 130
"RTN","IBCU1",158,0)
 ; 
"RTN","IBCU1",159,0)
 ; The following fields are the ones being "triggered"
"RTN","IBCU1",160,0)
 ; #122 PRIMARY PROVIDER #
"RTN","IBCU1",161,0)
 ; #123 SECONDARY PROVIDER #
"RTN","IBCU1",162,0)
 ; #124 TERTIARY PROVIDER #
"RTN","IBCU1",163,0)
 ; #128 PRIMARY ID QUALIFER
"RTN","IBCU1",164,0)
 ; #129 SECONDARY ID QUALIFIER
"RTN","IBCU1",165,0)
 ; #130 TERTIARY ID QUALIFIER
"RTN","IBCU1",166,0)
 ;
"RTN","IBCU1",167,0)
 Q:$G(IBPRCOB)  ; this is set when creating an MRA scondary claim.  Don't want to be changing the data on
"RTN","IBCU1",168,0)
 ; a secondary claim
"RTN","IBCU1",169,0)
 ;
"RTN","IBCU1",170,0)
 N FT,DATA,I,PC,INS,IFUNC,ATTRENDD,IBDR
"RTN","IBCU1",171,0)
 S FT=$$FT^IBCEF(IBIFN)
"RTN","IBCU1",172,0)
 Q:'FT
"RTN","IBCU1",173,0)
 ;
"RTN","IBCU1",174,0)
 S IFUNC=$O(^DGCR(399,IBIFN,"PRV","B",$S(FT=3:4,1:3),""))
"RTN","IBCU1",175,0)
 I $G(IBIFN1),$G(IFUNC)'=IBIFN1 Q   ; if called from subfile, quits if att/rend provider was not the one being modified
"RTN","IBCU1",176,0)
 S ATTRENDD=$S('$G(IFUNC):"",1:$G(^DGCR(399,IBIFN,"PRV",IFUNC,0)))
"RTN","IBCU1",177,0)
 ;
"RTN","IBCU1",178,0)
 ;JWS;IB*2.0*592;Dental form 7
"RTN","IBCU1",179,0)
 S PC=$S(FT=2:6,FT=3:8,FT=7:16,1:"")  ; get the correct piece from the ins co dictionary
"RTN","IBCU1",180,0)
 Q:'+PC
"RTN","IBCU1",181,0)
 ;
"RTN","IBCU1",182,0)
 F I="I1","I2","I3" D
"RTN","IBCU1",183,0)
 . S INS=$P($G(^DGCR(399,IBIFN,I)),U)
"RTN","IBCU1",184,0)
 . Q:'+INS
"RTN","IBCU1",185,0)
 . Q:'$P($G(^DIC(36,INS,4)),U,PC)
"RTN","IBCU1",186,0)
 . D:I="I1"
"RTN","IBCU1",187,0)
 .. S:".05"[FIELD IBDR(399,IBIFN_",",122)=$S($P(ATTRENDD,U,5)]"":$P(ATTRENDD,U,5),1:"@")
"RTN","IBCU1",188,0)
 .. S:".12"[FIELD IBDR(399,IBIFN_",",128)=$S($P(ATTRENDD,U,12)]"":$P(ATTRENDD,U,12),1:"@")
"RTN","IBCU1",189,0)
 . D:I="I2"
"RTN","IBCU1",190,0)
 .. S:".06"[FIELD IBDR(399,IBIFN_",",123)=$S($P(ATTRENDD,U,6)]"":$P(ATTRENDD,U,6),1:"@")
"RTN","IBCU1",191,0)
 .. S:".13"[FIELD IBDR(399,IBIFN_",",129)=$S($P(ATTRENDD,U,13)]"":$P(ATTRENDD,U,13),1:"@")
"RTN","IBCU1",192,0)
 . D:I="I3"
"RTN","IBCU1",193,0)
 .. S:".07"[FIELD IBDR(399,IBIFN_",",124)=$S($P(ATTRENDD,U,7)]"":$P(ATTRENDD,U,7),1:"@")
"RTN","IBCU1",194,0)
 .. S:".14"[FIELD IBDR(399,IBIFN_",",130)=$S($P(ATTRENDD,U,14)]"":$P(ATTRENDD,U,14),1:"@")
"RTN","IBCU1",195,0)
 ;
"RTN","IBCU1",196,0)
 I $O(IBDR(0)) D FILE^DIE("","IBDR")
"RTN","IBCU1",197,0)
 Q
"RTN","IBCU3")
0^23^B25113228^B24794996
"RTN","IBCU3",1,0)
IBCU3 ;ALB/AAS - BILLING UTILITY ROUTINE (CONTINUED) ; 4/4/03 8:49am
"RTN","IBCU3",2,0)
 ;;2.0;INTEGRATED BILLING;**52,80,91,106,51,137,211,245,348,399,400,592**;21-MAR-94;Build 58
"RTN","IBCU3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCU3",4,0)
 ;
"RTN","IBCU3",5,0)
 ;MAP TO DGCRU3
"RTN","IBCU3",6,0)
SC(DFN) ; returns 1 if service connection indicated, 0 otherwise (based on VAEL(3))
"RTN","IBCU3",7,0)
 N X,VAEL,VAERR S X=0
"RTN","IBCU3",8,0)
 I +$G(DFN) D ELIG^VADPT S X=+$G(VAEL(3))
"RTN","IBCU3",9,0)
 Q X
"RTN","IBCU3",10,0)
 ;
"RTN","IBCU3",11,0)
APPT(DATE,DFN,DISP) ;Check date to see if patient has any visit data
"RTN","IBCU3",12,0)
 ;input:   DATE - required, date to check for appointments
"RTN","IBCU3",13,0)
 ;         DFN  - required, patient to check for appointments on date
"RTN","IBCU3",14,0)
 ;         DISP - if true then error message will be printed before exit, if any
"RTN","IBCU3",15,0)
 ;returns: 1 - if appt visit found
"RTN","IBCU3",16,0)
 ;         2 - if unscheduled add/edit clinic stop entry found
"RTN","IBCU3",17,0)
 ;         3 - if only disposition found
"RTN","IBCU3",18,0)
 ;         "0^error message" if no valid visit data/disposition found
"RTN","IBCU3",19,0)
 ;
"RTN","IBCU3",20,0)
 N Y,X,X1,X2 S DATE=$P(DATE,".",1),Y="0^* Patient has no Visits for this date..."
"RTN","IBCU3",21,0)
 I 'DATE!'$D(^DPT(DFN,0)) S Y="0^Unable to check for appointments on this date!" G APPTE
"RTN","IBCU3",22,0)
 N IBVAL,IBCBK,IBVTYP
"RTN","IBCU3",23,0)
 S IBVAL("DFN")=DFN,IBVAL("BDT")=DATE,IBVAL("EDT")=DATE+.9
"RTN","IBCU3",24,0)
 S IBCBK="I '$P(Y0,U,6) S IBVTYP=+$P(Y0,U,8) I $S(IBVTYP=2:1,IBVTYP=1:$$APPTCT^IBEFUNC(Y0),IBVTYP=3:$$DISCT^IBEFUNC(Y,Y0),1:0) S IBVTYP(IBVTYP)="""" S:$D(IBVTYP(1)) SDSTOP=1"
"RTN","IBCU3",25,0)
 D SCAN^IBSDU("PATIENT/DATE",.IBVAL,"",IBCBK,1) K ^TMP("DIERR",$J)
"RTN","IBCU3",26,0)
 S IBVTYP=$O(IBVTYP(0))
"RTN","IBCU3",27,0)
 S:IBVTYP Y=IBVTYP
"RTN","IBCU3",28,0)
 ;
"RTN","IBCU3",29,0)
APPTE I +$G(DISP),'Y W !,?10,*7,$P(Y,U,2)
"RTN","IBCU3",30,0)
 Q Y
"RTN","IBCU3",31,0)
 ;
"RTN","IBCU3",32,0)
BDT(DFN,DATE) ; returns primary bill defined for an event date, "" if none
"RTN","IBCU3",33,0)
 N X,Y S X="" I '$O(^DGCR(399,"C",+$G(DFN),0))!'$G(DATE) G BDTE
"RTN","IBCU3",34,0)
 S Y="",DATE=9999999-DATE F  S Y=$O(^DGCR(399,"APDT",+DFN,Y)) Q:'Y  D
"RTN","IBCU3",35,0)
 . I $O(^DGCR(399,"APDT",+DFN,Y,0))=DATE,'$P($G(^DGCR(399,Y,"S")),U,16) S X=$P($G(^DGCR(399,Y,0)),U,17) Q
"RTN","IBCU3",36,0)
BDTE Q X
"RTN","IBCU3",37,0)
 ;
"RTN","IBCU3",38,0)
BILLED(PTF) ;returns bill "IFN^^rate group" if PTF record is already associated with an uncancelled final bill
"RTN","IBCU3",39,0)
 ;returns "bill IFN ^ bill date (stm to) ^ bill rate group" if inpatients interim with no final bill, 0 otherwise
"RTN","IBCU3",40,0)
 N IFN,Y,X S Y=0 I '$D(^DGCR(399,"APTF",+$G(PTF))) G BILLEDQ
"RTN","IBCU3",41,0)
 S IFN=0 F  S IFN=$O(^DGCR(399,"APTF",PTF,IFN)) Q:'IFN  D  I +Y,'$P(Y,U,2) Q
"RTN","IBCU3",42,0)
 . S X=$G(^DGCR(399,IFN,0)) I $P(X,U,13)=7 Q  ; bill cancelled
"RTN","IBCU3",43,0)
 . S Y=IFN_"^^"_$P(X,U,7) I $P(X,U,6)=2!($P(X,U,6)=3) S Y=IFN_"^"_$P($G(^DGCR(399,IFN,"U")),U,2)_"^"_$P(X,U,7)
"RTN","IBCU3",44,0)
BILLEDQ Q Y
"RTN","IBCU3",45,0)
 ;
"RTN","IBCU3",46,0)
FTN(FT) ;returns name of the form type passed in, "" if not defined
"RTN","IBCU3",47,0)
 N X S X=$P($G(^IBE(353,+$G(FT),0)),U,1)
"RTN","IBCU3",48,0)
 Q X
"RTN","IBCU3",49,0)
 ;
"RTN","IBCU3",50,0)
FT(IFN,IBRESET) ;return the correct form type for a bill (trigger code in 399 to set .19)
"RTN","IBCU3",51,0)
 ; if IBRESET is not a positive value ('IBRESET), returns the bills current form type (if defined)
"RTN","IBCU3",52,0)
 ; if IBRESET is a positive value (+IBRESET), interpret form type according to following rules (for triggers):
"RTN","IBCU3",53,0)
 ;    first use if bill is inst (UB) or prof (1500) (399,.27), then current (399,.19), then UB
"RTN","IBCU3",54,0)
 N X,Y,FTC,FTT
"RTN","IBCU3",55,0)
 S X="",IFN=+$G(IFN),Y=$G(^DGCR(399,IFN,0))
"RTN","IBCU3",56,0)
 S FTC=$P(Y,U,19) I FTC=1 S FTC=3
"RTN","IBCU3",57,0)
 I '$G(IBRESET),+FTC S X=FTC G FTQ
"RTN","IBCU3",58,0)
 S FTT=$S($P(Y,U,27)=1:3,$P(Y,U,27)=2:2,1:"")
"RTN","IBCU3",59,0)
 ;JWS;IB*2.0*592;Dental form 7
"RTN","IBCU3",60,0)
 I FTC=7,FTT=2 Q 7
"RTN","IBCU3",61,0)
 S X=$S(+FTT:FTT,+FTC:FTC,1:3)
"RTN","IBCU3",62,0)
FTQ Q X
"RTN","IBCU3",63,0)
 ;
"RTN","IBCU3",64,0)
FNT(FTN) ;returns the ifn of the form type name passed in, must be exact match, 0 if none found
"RTN","IBCU3",65,0)
 N X,Y S X=0 I $G(FTN)'="" S X=$O(^IBE(353,"B",FTN,0))
"RTN","IBCU3",66,0)
 Q X
"RTN","IBCU3",67,0)
 ;
"RTN","IBCU3",68,0)
BILLDEV(IFN,PRT) ;returns the default device for a bill's form type, if PRT is passed as true then returns the AR follow up device, otherwise the billing device
"RTN","IBCU3",69,0)
 N X,Y S X=0 I $D(^DGCR(399,+$G(IFN),0)) S PRT=$S(+$G(PRT):3,1:2),Y=$$FT(IFN),X=$P($G(^IBE(353,+Y,0)),U,PRT)
"RTN","IBCU3",70,0)
 Q X
"RTN","IBCU3",71,0)
 ;
"RTN","IBCU3",72,0)
RXDUP(RX,DATE,IFN,DISP,DFN,RTG) ;returns bill ifn if rx # exists on another bill
"RTN","IBCU3",73,0)
 ;input:  rx # - required, rx # to check for
"RTN","IBCU3",74,0)
 ;        date - required, date of refill
"RTN","IBCU3",75,0)
 ;ifn, dfn, rtg are optional - if not passed then not used to specify rx
"RTN","IBCU3",76,0)
 ;(if ifn not passed then returns true if on any bill same or dfn and rtgetc.)
"RTN","IBCU3",77,0)
 ;if ifn passed the dfn and rtg do not need to be
"RTN","IBCU3",78,0)
 N X,LN,RIFN,BIFN,RLN,BLN S (RIFN,X)=0,DATE=$G(DATE),RX=$G(RX),IFN=$G(IFN) I RX=""!('DATE) G RXDUPE
"RTN","IBCU3",79,0)
 S LN=$G(^DGCR(399,+IFN,0)),DFN=$S(+$G(DFN):DFN,1:+$P(LN,U,2)),RTG=$S(+$G(RTG):RTG,1:+$P(LN,U,7))
"RTN","IBCU3",80,0)
 F  S RIFN=$O(^IBA(362.4,"B",RX,RIFN)) Q:'RIFN  S RLN=$G(^IBA(362.4,+RIFN,0)) I +DATE=+$P(RLN,U,3) D  Q:+X
"RTN","IBCU3",81,0)
 . S BIFN=+$P(RLN,U,2),BLN=$G(^DGCR(399,BIFN,0)) Q:(BLN="")!(BIFN=+$G(IFN))
"RTN","IBCU3",82,0)
 . I $P(BLN,U,13)=7 Q  ; bill cancelled
"RTN","IBCU3",83,0)
 . I +DFN,$P(BLN,U,2)'=DFN Q  ; different patient
"RTN","IBCU3",84,0)
 . I +RTG,+RTG'=$P(BLN,U,7) Q  ; different rate group
"RTN","IBCU3",85,0)
 . S X=BIFN_"^A "_$P($G(^DGCR(399.3,+$P(BLN,U,7),0)),U,1)_" bill ("_$P(BLN,U,1)_") exists for Rx # "_RX_" and refill date "_$$DAT1^IBOUTL(DATE)_"."
"RTN","IBCU3",86,0)
RXDUPE I +$G(DISP),+X W !,?10,$P(X,U,2)
"RTN","IBCU3",87,0)
 Q X
"RTN","IBCU3",88,0)
 ;
"RTN","IBCU3",89,0)
BCOB(IBIFN,IBCOB) ; returns an array of all bills related COB to the bill passed in
"RTN","IBCU3",90,0)
 ; includes prior bills defined on this bill then checks the Primary, Secondary and Tertiary Bills and adds
"RTN","IBCU3",91,0)
 ; all the prior bills defined on them
"RTN","IBCU3",92,0)
 ; ARR(BILL SEQUENCE (1,2,3), INSURANCE CO, BILL #)=""
"RTN","IBCU3",93,0)
 ;
"RTN","IBCU3",94,0)
 N IBM1,IBI,IBIFN1,IBM,IBM11,IBSEQ,IBSEQN,IBJ K IBCOB
"RTN","IBCU3",95,0)
 S IBM1=$G(^DGCR(399,IBIFN,"M1"))
"RTN","IBCU3",96,0)
 F IBI=IBIFN,+$P(IBM1,U,5),+$P(IBM1,U,6),+$P(IBM1,U,7) I +IBI S IBIFN1=+IBI D
"RTN","IBCU3",97,0)
 . ;
"RTN","IBCU3",98,0)
 . S IBM=$G(^DGCR(399,IBIFN1,"M")),IBM11=$G(^DGCR(399,IBIFN1,"M1")) I IBIFN=IBIFN1,'$P(IBM,U,2),'$P(IBM,U,3) Q
"RTN","IBCU3",99,0)
 . S IBSEQ=$P($G(^DGCR(399,IBIFN1,0)),U,21),IBSEQN=$S(IBSEQ="P":1,IBSEQ="S":2,IBSEQ="T":3,1:"") Q:'IBSEQN
"RTN","IBCU3",100,0)
 . ;
"RTN","IBCU3",101,0)
 . F IBJ=1:1:3 I +$P(IBM,U,IBJ) S IBCOB(IBJ,+$P(IBM,U,IBJ),+$P(IBM11,U,(IBJ+4)))=""
"RTN","IBCU3",102,0)
 . I +$P(IBM,U,IBSEQN) S IBCOB(IBSEQN,$P(IBM,U,IBSEQN),+IBIFN1)=""
"RTN","IBCU3",103,0)
 ;
"RTN","IBCU3",104,0)
 S IBI=0 F  S IBI=$O(IBCOB(IBI)) Q:'IBI  S IBJ=0 F  S IBJ=$O(IBCOB(IBI,IBJ)) Q:'IBJ  I +$O(IBCOB(IBI,IBJ,0)) K IBCOB(IBI,IBJ,0)
"RTN","IBCU3",105,0)
 Q
"RTN","IBCU3",106,0)
 ;
"RTN","IBCU3",107,0)
BINS(IBIFN) ; return list of billable insurance carriers on a bill (COB)
"RTN","IBCU3",108,0)
 ; output:  sequence:carrier:policy ^ sequence:carrier:policy ^ sequence:carrier:policy
"RTN","IBCU3",109,0)
 N IBM0,IBI,IBS,IBC,IBP,IBX S IBI=0,IBX="",IBM0=$G(^DGCR(399,+$G(IBIFN),"M"))
"RTN","IBCU3",110,0)
 F IBS="P","S","T" S IBI=IBI+1,IBC=+$P(IBM0,U,IBI) I +IBC D
"RTN","IBCU3",111,0)
 . S IBP=+$P(IBM0,U,(11+IBI)) I $P($G(^DIC(36,+IBC,0)),U,2)'="N" S IBX=IBX_IBS_":"_IBC_":"_IBP_U
"RTN","IBCU3",112,0)
 Q IBX
"RTN","IBCU3",113,0)
 ;
"RTN","IBCU3",114,0)
BOTHER(IBIFN,IBDT) ; return Bedsection of Type of Care if date is Other Type of care, based on "OT" multiple
"RTN","IBCU3",115,0)
 ; Other care is not inpatient or outpatient, SNF and Sub-Acute became distinct with RC v2.0
"RTN","IBCU3",116,0)
 ; as with all other bedsection movements, the last date is not included since that is the date they left
"RTN","IBCU3",117,0)
 N IBX,IBY,IBFND S IBFND=0,IBDT=$G(IBDT)\1
"RTN","IBCU3",118,0)
 I +$G(IBIFN),+IBDT S IBX=0 F  S IBX=$O(^DGCR(399,IBIFN,"OT",IBX)) Q:'IBX  D
"RTN","IBCU3",119,0)
 . S IBY=$G(^DGCR(399,IBIFN,"OT",IBX,0)) Q:'IBY
"RTN","IBCU3",120,0)
 . I IBDT'<$P(IBY,U,2),IBDT<$P(IBY,U,3) S IBFND=+IBY
"RTN","IBCU3",121,0)
 . I IBDT=($P(IBY,U,2)\1),IBDT=($P(IBY,U,3)\1) S IBFND=+IBY ; 1 day SNF stay
"RTN","IBCU3",122,0)
 Q IBFND
"RTN","IBCU41")
0^124^B23281975^B20490138
"RTN","IBCU41",1,0)
IBCU41 ;ALB/ARH - THIRD PARTY BILLING UTILITIES (OP VISIT DATES) ;6-JUN-93
"RTN","IBCU41",2,0)
 ;;2.0;INTEGRATED BILLING;**80,106,51,294,592**;21-MAR-94;Build 58
"RTN","IBCU41",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCU41",4,0)
 ;
"RTN","IBCU41",5,0)
 ;
"RTN","IBCU41",6,0)
OPV(DATE,IFN) ;input transform for outpatient visit dates (399,43,.01)
"RTN","IBCU41",7,0)
 ;input:  DATE - to add
"RTN","IBCU41",8,0)
 ;        IFN  - bill to add to
"RTN","IBCU41",9,0)
 ;returns: 1 - if OK to add
"RTN","IBCU41",10,0)
 ;         0 - if not
"RTN","IBCU41",11,0)
 N X,Y S X=1
"RTN","IBCU41",12,0)
 I '$$OPV2(DATE,IFN,1) S X=0
"RTN","IBCU41",13,0)
 I '$$OPV1(IFN,1) S X=0
"RTN","IBCU41",14,0)
 S Y=$$APPT^IBCU3(DATE,$P($G(^DGCR(399,IFN,0)),U,2),1)
"RTN","IBCU41",15,0)
 S Y=$$DUPCHK(DATE,IFN,1)
"RTN","IBCU41",16,0)
 Q X
"RTN","IBCU41",17,0)
 ;
"RTN","IBCU41",18,0)
OPV1(IFN,DISP,CNT) ;edit checks for adding visit dates, if any of these fail then no visit date should be added to the bill
"RTN","IBCU41",19,0)
 ;these are the types of checks that if they fail a message should be displayed to the user
"RTN","IBCU41",20,0)
 ;does not check date passed in against existing dates, assumes new visit date
"RTN","IBCU41",21,0)
 ;input:  IFN  - required, internal file number of bill to check
"RTN","IBCU41",22,0)
 ;        DISP - if true then error messager will be printed, if any
"RTN","IBCU41",23,0)
 ;        CNT  - number of visit dates user wants to add to bill
"RTN","IBCU41",24,0)
 ;returns: "1^warning message" - if OK to add more visit dates to the bill
"RTN","IBCU41",25,0)
 ;         "0^error message" - if no more visit dates should added to the bill
"RTN","IBCU41",26,0)
 ;
"RTN","IBCU41",27,0)
 N X,Y S Y=1 S:$G(CNT)="" CNT=1 S:$G(UN)="" UN=$G(^DGCR(399,+IFN,"U"))
"RTN","IBCU41",28,0)
 I '$P(UN,U,1) S Y="0^No 'Statement From' date on file ... Can't enter OP visit dates ..." G OPV1E
"RTN","IBCU41",29,0)
 I '$P(UN,U,2) S Y="0^No 'Statement To' date on file ... Can't enter OP visit dates ..." G OPV1E
"RTN","IBCU41",30,0)
 G:'$O(^DGCR(399,IFN,"OP",0))&(CNT<2) OPV1E
"RTN","IBCU41",31,0)
 I $P($G(^DGCR(399,IFN,"OP",0)),U,4)+CNT>30 S Y="0^Maximum of 30 visit dates allowed per bill!" G OPV1E
"RTN","IBCU41",32,0)
 I +$P($G(^DGCR(399,+IFN,0)),U,19)'=2,$D(^DGCR(399,IFN,"CP","ASC")) S Y="0^Only one visit date allowed on bills with Billable Amb. Surg. Codes!" G OPV1E
"RTN","IBCU41",33,0)
 ;warnings:
"RTN","IBCU41",34,0)
 I +Y,+$P($G(^DIC(36,$S(+$G(^DGCR(399,IFN,"MP")):+^("MP"),$$MCRWNR^IBEFUNC(+$$CURR^IBCEF2(IFN)):+$$CURR^IBCEF2(IFN),1:0),0)),U,8) S Y="1^This insurance Company will only accept one visit per bill!" G OPV1E
"RTN","IBCU41",35,0)
OPV1E I +$G(DISP),$P(Y,U,2)'="" W !,?10,$P(Y,U,2)
"RTN","IBCU41",36,0)
 Q Y
"RTN","IBCU41",37,0)
 ;
"RTN","IBCU41",38,0)
OPV2(DATE,IFN,DISP,UN) ;edit checks for adding visit dates, if any if these fail then the given date should not be added to the bill
"RTN","IBCU41",39,0)
 ;these are the types of checks that determine if a particular visit date should be presented to the user for possible addition to the bill
"RTN","IBCU41",40,0)
 ;does not check date passed in against existing dates, assumes new visit date
"RTN","IBCU41",41,0)
 ;also being used for Procedure Date (399,304,1) input transform
"RTN","IBCU41",42,0)
 ;input:  DATE - required, date to check for addition to the bill
"RTN","IBCU41",43,0)
 ;        IFN  - required, internal file number of bill to check
"RTN","IBCU41",44,0)
 ;        DISP - if true then error messager will be printed, if any
"RTN","IBCU41",45,0)
 ;        UN   - the "U" node of the bill, pass if alrady defined in a var
"RTN","IBCU41",46,0)
 ;returns: "1^warning message" - if date is OK to add to the bill
"RTN","IBCU41",47,0)
 ;         "0^error message" - if date should not be added to the bill
"RTN","IBCU41",48,0)
 ;
"RTN","IBCU41",49,0)
 N X,Y S Y=1,DATE=$P(DATE,".",1) S:$G(UN)="" UN=$G(^DGCR(399,+IFN,"U"))
"RTN","IBCU41",50,0)
 I DATE<+UN S Y="0^Can't enter a visit date prior to the 'Statement From' date ..." G OPV2E
"RTN","IBCU41",51,0)
 I DATE>+$P(UN,U,2) S Y="0^Can't enter a visit date later than the 'Statement To' date ..." G OPV2E
"RTN","IBCU41",52,0)
OPV2E I +$G(DISP),$P(Y,U,2)'="" W !,?10,$P(Y,U,2)
"RTN","IBCU41",53,0)
 Q Y
"RTN","IBCU41",54,0)
 ;
"RTN","IBCU41",55,0)
DUPCHK(DATE,IFN,DISP,DFN,RTG,CTE) ;Check for duplicate billing of opt visit - checks for given visit date on other
"RTN","IBCU41",56,0)
 ;bills with the same rate type and that have not been cancelled (if not IFN then use DFN and RTG)
"RTN","IBCU41",57,0)
 ;input:   DATE - visit date to check
"RTN","IBCU41",58,0)
 ;         IFN - internal file number of bill date is being added to
"RTN","IBCU41",59,0)
 ;         DISP - true if error message should be printed before exit, if any
"RTN","IBCU41",60,0)
 ;         DFN - patient'S IFN (required only if IFN is not passed)
"RTN","IBCU41",61,0)
 ;         RTG - rate group to check for (""), if no rate group (0 passed and/or no IFN) then any bill found for
"RTN","IBCU41",62,0)
 ;               visit date will cause error message
"RTN","IBCU41",63,0)
 ;         CTE - Claims Tracking entry IEN, for autobiller and dental claims - IB*2.0*592
"RTN","IBCU41",64,0)
 ;returns: 0 - if another bill was not found with this visit date, patient, and rate type
"RTN","IBCU41",65,0)
 ;         (dup IFN)_"^error message" - if duplicate date found, same rate group, IFN of other bill w/visit date
"RTN","IBCU41",66,0)
 ;(initially set up to check for same rate group because MT billing was done on the UB-82 so it was valid to have multiple bills with different rate groups for the same episode)
"RTN","IBCU41",67,0)
 N IFN2,Y,X,IBDENT S Y=0,DATE=$P(+$G(DATE),".",1),IFN=+$G(IFN),X=$G(^DGCR(399,IFN,0))
"RTN","IBCU41",68,0)
 S DFN=$S(+$G(DFN):$G(DFN),1:$P(X,U,2)),RTG=$S($G(RTG)'="":RTG,1:$P(X,U,7)) G:'DFN DUPCHKE
"RTN","IBCU41",69,0)
 I '$D(^DGCR(399,"AOPV",DFN,DATE)) G DUPCHKE
"RTN","IBCU41",70,0)
 S IFN2=0 F  S IFN2=$O(^DGCR(399,"AOPV",DFN,DATE,IFN2)) Q:'IFN2  I IFN2'=IFN D  Q:+Y
"RTN","IBCU41",71,0)
 . S X=$G(^DGCR(399,IFN2,0)) I $P(X,U,13)=7 Q  ; bill for date cancelled
"RTN","IBCU41",72,0)
 . I +RTG,RTG'=$P(X,U,7) Q  ; different rate group
"RTN","IBCU41",73,0)
 . ;JWS;IB*2.0*592 - allow for Dental claim, just not duplicate Dental claims for same date
"RTN","IBCU41",74,0)
 . ;IA# 2056
"RTN","IBCU41",75,0)
 . I +$G(CTE),$P($G(^IBT(356,CTE,0)),"^",3)'="" S IBDENT=$F($$GET1^DIQ(9000010,$P($G(^IBT(356,CTE,0)),"^",3)_",",.08),"DENTAL") I $G(IBDENT),$$FT^IBCEF(IFN2)'=7 Q
"RTN","IBCU41",76,0)
 . S Y=IFN2_"^A "_$P($G(^DGCR(399.3,+$P(X,U,7),0)),U,1)_" bill ("_$P(X,U,1)_") exists for visit date ("_$$DAT1^IBOUTL(DATE)_")."
"RTN","IBCU41",77,0)
DUPCHKE I +$G(DISP),+Y W !,?10,$P(Y,U,2)
"RTN","IBCU41",78,0)
 Q Y
"RTN","IBCU41",79,0)
 ;
"RTN","IBCU41",80,0)
CTCHK(IBIFN) ; if professional/institutional bill passed in has a corresponding institutional/professional
"RTN","IBCU41",81,0)
 ; bill defined return it's bill number
"RTN","IBCU41",82,0)
 ; check/match: patient, bill type, event date, rate type, payer seq, statement from, statement to, not cancelled
"RTN","IBCU41",83,0)
 ;
"RTN","IBCU41",84,0)
 N IBFND,IB0,IBCT,IBDFN,IBEVDT,IBBT,IBRT,IBSEQ,IBSTDTS,IBCT1,IBIFN1,IB01 S IBFND=0
"RTN","IBCU41",85,0)
 S IB0=$G(^DGCR(399,+$G(IBIFN),0)),IBCT=$P(IB0,U,27) I 'IBCT G CTCHKQ
"RTN","IBCU41",86,0)
 S IBDFN=$P(IB0,U,2),IBEVDT=$P(IB0,U,3),IBBT=$P(IB0,U,5),IBRT=$P(IB0,U,7),IBSEQ=$P(IB0,U,21)
"RTN","IBCU41",87,0)
 S IBSTDTS=$P($G(^DGCR(399,IBIFN,"U")),U,1,2),IBCT1=$S(IBCT=1:2,IBCT=2:1,1:"") I 'IBCT1 G CTCHKQ
"RTN","IBCU41",88,0)
 ;
"RTN","IBCU41",89,0)
 S IBIFN1=0 F  S IBIFN1=$O(^DGCR(399,"D",IBEVDT,IBIFN1)) Q:'IBIFN1  D  Q:IBFND
"RTN","IBCU41",90,0)
 . S IB01=$G(^DGCR(399,IBIFN1,0))
"RTN","IBCU41",91,0)
 . I $P(IB01,U,13)=7 Q         ; cancelled bill
"RTN","IBCU41",92,0)
 . I IBDFN'=$P(IB01,U,2) Q     ; patient
"RTN","IBCU41",93,0)
 . I IBCT1'=$P(IB01,U,27) Q    ; charge type
"RTN","IBCU41",94,0)
 . I IBBT'=$P(IB01,U,5) Q      ; bill type/classification
"RTN","IBCU41",95,0)
 . I IBRT'=$P(IB01,U,7) Q      ; rate type
"RTN","IBCU41",96,0)
 . I '$P($G(^DGCR(399,IBIFN1,"S")),U,7),IBSEQ'=$P(IB01,U,21) Q    ; payer sequence (applies to non-MRA claims only; IB*2*294 modification)
"RTN","IBCU41",97,0)
 . I IBSTDTS'=$P($G(^DGCR(399,IBIFN1,"U")),U,1,2) Q     ; from/thru dates
"RTN","IBCU41",98,0)
 . S IBFND=IBIFN1              ; found a match
"RTN","IBCU41",99,0)
 . Q
"RTN","IBCU41",100,0)
 ;
"RTN","IBCU41",101,0)
CTCHKQ Q IBFND
"RTN","IBCU7")
0^24^B175831153^B134090555
"RTN","IBCU7",1,0)
IBCU7 ;ALB/AAS - INTERCEPT SCREEN INPUT OF PROCEDURE CODES ;29-OCT-91
"RTN","IBCU7",2,0)
 ;;2.0;INTEGRATED BILLING;**62,52,106,125,51,137,210,245,228,260,348,371,432,447,488,461,516,522,577,592,604,616**;21-MAR-94;Build 58
"RTN","IBCU7",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCU7",4,0)
 ;
"RTN","IBCU7",5,0)
 ;MAP TO DGCRU7
"RTN","IBCU7",6,0)
 ;
"RTN","IBCU7",7,0)
 ; This routine is a copy of IBUC7 for testing purposes.
"RTN","IBCU7",8,0)
 ;
"RTN","IBCU7",9,0)
CHKX ;  -interception of input x from Additional Procedure input
"RTN","IBCU7",10,0)
 G:X=" " CHKXQ
"RTN","IBCU7",11,0)
 I $$INPAT^IBCEF(DA(1)),'$P($G(^IBE(350.9,1,1)),"^",15),X'?1A1.2N D  G CHKXQ
"RTN","IBCU7",12,0)
 . K X
"RTN","IBCU7",13,0)
 . D EN^DDIOL("Site param does not allow entry of non-PTF procedures") ;Fileman error here will be: The previous error occurred when performing an action specified in a Pre-lookup transform (7.5 node).
"RTN","IBCU7",14,0)
 G:'$D(^UTILITY($J,"IB")) CHKXQ
"RTN","IBCU7",15,0)
 ;S M=($A($E(X,1))-64),S=+$E(X,2) Q:'$G(^UTILITY($J,"IB",M,S))  S X="`"_+^(S)
"RTN","IBCU7",16,0)
 S M=0 I X?1A1.2N S N=$G(^UTILITY($J,"IB","B",X)) S M=+N,S=+$P(N,U,2),P=X S S=$G(^UTILITY($J,"IB",M,S)) I +S S X="`"_+S I $P(N,U,3)="N" S X=""""_X_"""" S $P(^UTILITY($J,"IB","B",P),U,3)="Y"
"RTN","IBCU7",17,0)
 I +M,$D(DGPROCDT),DGPROCDT'=$P($G(^UTILITY($J,"IB",M,1)),"^",2) S DGPROCDT=$P(^(1),"^",2) W !!,"Procedure Date: " S Y=DGPROCDT X ^DD("DD") W Y,!
"RTN","IBCU7",18,0)
CHKXQ Q
"RTN","IBCU7",19,0)
 ;
"RTN","IBCU7",20,0)
CODMUL ;Date oriented entry of procedure
"RTN","IBCU7",21,0)
DELASK I $D(IBZ20),IBZ20,IBZ20'=$P(^DGCR(399,IBIFN,0),U,9) S %=2 W !,"SINCE THE PROCEDURE CODING METHOD HAS BEEN CHANGED, DO YOU WANT TO DELETE ALL",!,"PROCEDURE CODES IN THIS BILL"
"RTN","IBCU7",22,0)
 I  D YN^DICN Q:%=-1  D:%=1 DELADD I %Y?1."?" W !!,"If you answer 'Yes', all procedure codes will be DELETED from this bill.",! G DELASK
"RTN","IBCU7",23,0)
 K %,%Y,DA,IBZ20,DIK ;W !,"Procedure Entry:"
"RTN","IBCU7",24,0)
 ;
"RTN","IBCU7",25,0)
CODDT I $D(IBIFN),$D(^DGCR(399,IBIFN,0)),$P(^(0),U,9) S DIC("V")=$S($P(^(0),U,9)=9:"I +Y(0)=80.1",$P(^(0),U,9)=4!($P(^(0),U,9)=5):"I +Y(0)=81",1:"")
"RTN","IBCU7",26,0)
 I $P($G(^DGCR(399,IBIFN,0)),"^",5)<3 S IBZTYPE=1 I $P($G(^UTILITY($J,"IB",1,1)),"^",2) S DGPROCDT=$P(^(1),"^",2) D ASKCOD
"RTN","IBCU7",27,0)
 S X=$$PRCDIV^IBCU71(IBIFN) I +X W !!,$P(X,U,2),!
"RTN","IBCU7",28,0)
 N Z,Z0 S Z=$G(^DGCR(399,IBIFN,"U")),Z0=$$FMTE^XLFDT($P(Z,U),"2D")_"-"_$$FMTE^XLFDT($P(Z,U,2),"2D")
"RTN","IBCU7",29,0)
 W !,"Select PROCEDURE DATE"_$S($TR(Z0,"-")'="":" ("_Z0_")",1:"")_": " R X:DTIME G:'$T!("^"[X) CODQ D:X["?" CODHLP
"RTN","IBCU7",30,0)
 S IBEX=0 D  ; Get procedure date
"RTN","IBCU7",31,0)
 . I X=" ",$D(DGPROCDT),DGPROCDT?7N S Y=DGPROCDT D D^DIQ W "   (",Y,")" Q
"RTN","IBCU7",32,0)
 . I X=" ",+$P($G(^DGCR(399,IBIFN,"OP",0)),"^",4) S (DGPROCDT,Y)=$O(^DGCR(399,IBIFN,"OP",0)) D D^DIQ W "   (",Y,")" Q
"RTN","IBCU7",33,0)
 . S %DT="EXP",%DT(0)=-DT D ^%DT K %DT I Y<1 S IBEX=1 Q
"RTN","IBCU7",34,0)
 . I '$$OPV2^IBCU41(Y,IBIFN,1) S IBEX=1 Q
"RTN","IBCU7",35,0)
 . S:'$G(IBZTYPE) X=$$OPV^IBCU41(Y,IBIFN) S DGPROCDT=Y
"RTN","IBCU7",36,0)
 I 'IBEX D ASKCOD,ADDCPT^IBCU71:$D(DGCPT)
"RTN","IBCU7",37,0)
 K IBEX
"RTN","IBCU7",38,0)
 G CODDT
"RTN","IBCU7",39,0)
 ;
"RTN","IBCU7",40,0)
ASKCOD N Z,Z0,DA,IBACT,IBQUIT,IBLNPRV,IBCODE,IBPIEN  ;WCJ;2.0*432
"RTN","IBCU7",41,0)
 N IBPOPOUT  S IBPOPOUT=0  ; IB*2.0*447 BI
"RTN","IBCU7",42,0)
 K DGCPT
"RTN","IBCU7",43,0)
 S DGCPT=0,DGCPTUP=$P($G(^IBE(350.9,1,1)),"^",19),DGADDVST=0,IBFT=$P($G(^DGCR(399,IBIFN,0)),"^",19)
"RTN","IBCU7",44,0)
 I '$D(^DGCR(399,IBIFN,"CP",0)) S ^DGCR(399,IBIFN,"CP",0)=U_$$GETSPEC^IBEFUNC(399,304)
"RTN","IBCU7",45,0)
 ;
"RTN","IBCU7",46,0)
 F  S IBQUIT=0 D  Q:IBQUIT
"RTN","IBCU7",47,0)
 . S IBPOPOUT=0
"RTN","IBCU7",48,0)
 . D DICV ; restrict code type to PCM
"RTN","IBCU7",49,0)
 . S DIC("A")="   Select PROCEDURE: "
"RTN","IBCU7",50,0)
 . S DIC="^DGCR(399,"_IBIFN_",""CP"","
"RTN","IBCU7",51,0)
 . S DIC(0)="AEQMNL"
"RTN","IBCU7",52,0)
 . S DIC("S")="I '$D(DIV(""S""))&($P(^(0),U,2)=DGPROCDT)"
"RTN","IBCU7",53,0)
 . S DIC("DR")="1///^S X=DGPROCDT"
"RTN","IBCU7",54,0)
 . S DA(1)=IBIFN,DLAYGO=399
"RTN","IBCU7",55,0)
 . W ! D ^DIC I Y<1 S IBQUIT=1 Q
"RTN","IBCU7",56,0)
 . S IBPROCP=+Y
"RTN","IBCU7",57,0)
 . S IBCODE="" I Y["ICPT" S IBPIEN=+$P(Y,U,2),IBCODE=$P($$CPT^ICPTCOD(IBPIEN),U,2) ;IB*2.0*616, get procedure code, supported by ICR 1995
"RTN","IBCU7",58,0)
 . ; If we just added inactive code - it must be deleted.
"RTN","IBCU7",59,0)
 . S IBACT=0 ; Active flag
"RTN","IBCU7",60,0)
 . I Y["ICD0" S IBACT=$$ICD0ACT^IBACSV(+$P(Y,U,2),$$BDATE^IBACSV(IBIFN))
"RTN","IBCU7",61,0)
 . I Y["ICPT" S IBACT=$$CPTACT^IBACSV(+$P(Y,U,2),DGPROCDT)
"RTN","IBCU7",62,0)
 . S DGCPTNEW=$P(Y,"^",3) ;Was the procedure just added?
"RTN","IBCU7",63,0)
 . I DGCPTNEW,'IBACT D DELPROC Q
"RTN","IBCU7",64,0)
 . I 'IBACT W !,*7,"Warning:  Procedure code is inactive on this date",!
"RTN","IBCU7",65,0)
 . I DGCPTNEW,$D(^UTILITY($J,"IB")),$$INPAT^IBCEF(IBIFN),Y["ICPT(" D DATA^IBCU74(Y,.IBLNPRV)
"RTN","IBCU7",66,0)
 . S DGADDVST=$S(DGCPTNEW:1,$D(DGADDVST):DGADDVST,1:0)
"RTN","IBCU7",67,0)
 . N IBPRV,IBPRVO,IBPRVN
"RTN","IBCU7",68,0)
 . ;
"RTN","IBCU7",69,0)
 . ; Line level provider function by form type.
"RTN","IBCU7",70,0)
 . ;     CMS-1500 (FORM TYPE=2)
"RTN","IBCU7",71,0)
 . ;              RENDERING PROVIDER, REFERRING PROVIDER,
"RTN","IBCU7",72,0)
 . ;              and SUPERVISING PROVIDER.
"RTN","IBCU7",73,0)
 . ;     UB-04 (FORM TYPE=3)
"RTN","IBCU7",74,0)
 . ;              RENDERING PROVIDER, REFERRING PROVIDER,
"RTN","IBCU7",75,0)
 . ;              OPERATING PROVIDER, and OTHER OPERATING
"RTN","IBCU7",76,0)
 . ;              PROVIDER.
"RTN","IBCU7",77,0)
 . ;
"RTN","IBCU7",78,0)
 . ; Removed: Call to $$MAINPRV^IBCEU(IBIFN) is for claim
"RTN","IBCU7",79,0)
 . ;          level provider defaults.
"RTN","IBCU7",80,0)
 . ;     1. For new line level providers we don't need
"RTN","IBCU7",81,0)
 . ;        or want default claim level provider
"RTN","IBCU7",82,0)
 . ;        (requirement).
"RTN","IBCU7",83,0)
 . ;     2. We don't want to default claim level to
"RTN","IBCU7",84,0)
 . ;        line level provider (requirement).
"RTN","IBCU7",85,0)
 . ;
"RTN","IBCU7",86,0)
 . K DIC("V")  ; DEM;432 - KILL DIC("V") because this was for previous variable pointer use.
"RTN","IBCU7",87,0)
 . ;
"RTN","IBCU7",88,0)
 . N IBPROCSV  ; DEM;432 - Variable IBPROCSV is variable to preserve value of 'Y', which is procedure code info returned by call to ^DIC.
"RTN","IBCU7",89,0)
 . S IBPROCSV=Y  ; DEM;432 - Preserve value of Y for after calls to FileMan (Y = procedure code info returned by call to ^DIC).
"RTN","IBCU7",90,0)
 . K DR   ;WCJ;IB*2.0*432
"RTN","IBCU7",91,0)
 . ;
"RTN","IBCU7",92,0)
 . I IBPROCSV["ICD0" S DR=".01",DIE=DIC,(IBPROCP,DA)=+Y D ^DIE Q:'$D(DA)!($D(Y))  K DR ; IB*2.0*461
"RTN","IBCU7",93,0)
 . I IBPROCSV["ICPT" S DR=".01;16",DIE=DIC,(IBPROCP,DA)=+Y D ^DIE Q:'$D(DA)!($D(Y))  K DR ; IB*2.0*447 BI
"RTN","IBCU7",94,0)
 . ;
"RTN","IBCU7",95,0)
 . S DR=""
"RTN","IBCU7",96,0)
 . ;
"RTN","IBCU7",97,0)
 . ; MRD;IB*2.0*516 - Added line level PROCEDURE DESCRIPTION field,
"RTN","IBCU7",98,0)
 . ; asked only if the procedure is an "NOC".
"RTN","IBCU7",99,0)
 . I IBPROCSV["ICPT",$$NOCPROC(IBPROCSV,IBCODE,DGPROCDT) D  ; added IBCODE,DGPROCDT in *604
"RTN","IBCU7",100,0)
 . . S DA=$P(IBPROCSV,"^")  ; The line# on the bill/claim.
"RTN","IBCU7",101,0)
 . . S DR=51                ; Field# for PROCEDURE DESCRIPTION
"RTN","IBCU7",102,0)
 . . D ^DIE
"RTN","IBCU7",103,0)
 . . Q
"RTN","IBCU7",104,0)
 . ;
"RTN","IBCU7",105,0)
 . D EN^IBCU7B ; DEM;432 - Call to line level provider user input.
"RTN","IBCU7",106,0)
 . S Y=IBPROCSV  ; DEM;432 - Restore value of Y after calls to FileMan
"RTN","IBCU7",107,0)
 . K IBPROCSV
"RTN","IBCU7",108,0)
 . K DR   ;WCJ;IB*2.0*432
"RTN","IBCU7",109,0)
 . I IBPOPOUT Q   ; IB*2.0*447 BI
"RTN","IBCU7",110,0)
 . S DR="" I Y["ICPT" S DR="6;5//"_$$DEFDIV(IBIFN)_";"
"RTN","IBCU7",111,0)
 . ;JWS;IB*2.0*592 US1108 - Dental
"RTN","IBCU7",112,0)
 . ;IA# 10018
"RTN","IBCU7",113,0)
 . S DR=DR_$S(IBFT=7:"8;",IBFT=2:"8;9;17//NO;",1:"")_3,DIE=DIC,(IBPROCP,DA)=+Y D ^DIE Q:'$D(DA)!($E($G(Y))=U)
"RTN","IBCU7",114,0)
 . K DR   ;WCJ;IB*2.0*432
"RTN","IBCU7",115,0)
 . ;
"RTN","IBCU7",116,0)
 . ; MRD;IB*2.0*516 - Allow user to add an NDC and Units.  Ask only if
"RTN","IBCU7",117,0)
 . ; coding system is not ICD and this is not a prescription claim. If
"RTN","IBCU7",118,0)
 . ; an NDC is entered, prompt for Units.
"RTN","IBCU7",119,0)
 . I $P($G(^DGCR(399,IBIFN,0)),U,9)'=9,'$$RXLINK^IBCSC5C(IBIFN,IBPROCP) D
"RTN","IBCU7",120,0)
 . . ;JWS;IB*2.0*592 US1108 - Dental
"RTN","IBCU7",121,0)
 . . I IBFT=7 Q
"RTN","IBCU7",122,0)
 . . K DA
"RTN","IBCU7",123,0)
 . . S DA=IBPROCP,DA(1)=IBIFN,DIE="^DGCR(399,"_IBIFN_",""CP"","
"RTN","IBCU7",124,0)
 . . ; vd/Beginning IB*2*577 - Added the prompt for Unit/Basis of Measurement.
"RTN","IBCU7",125,0)
 . . ; S DR="53NDC NUMBER;I X="""" S Y="""";54//1"
"RTN","IBCU7",126,0)
 . . S DR="53NDC NUMBER;I X="""" S Y="""";52R~//UN;54R~QUANTITY//1"  ;Prompt for NDC, UN & amt.
"RTN","IBCU7",127,0)
 . . ; vd/Ending IB*2*577
"RTN","IBCU7",128,0)
 . . D ^DIE
"RTN","IBCU7",129,0)
 . . Q
"RTN","IBCU7",130,0)
 . ;
"RTN","IBCU7",131,0)
 . I IBFT=3 D:'$$INPAT^IBCEF(IBIFN) ATTACH  ; DEM;432 - Prompt for Attachment Control Number.
"RTN","IBCU7",132,0)
 . ; DEM;432 - Add Additional OB Minutes to DR string for call to DIE.
"RTN","IBCU7",133,0)
 . S DR=$$SPCUNIT(IBIFN,IBPROCP) S:DR["15;" DR=DR_"74Additional OB Minutes" D ^DIE ; miles/minutes/hours
"RTN","IBCU7",134,0)
 . ;JWS;IB*2.0*592 US1108 - Dental
"RTN","IBCU7",135,0)
 . I IBFT=2!(IBFT=7) D
"RTN","IBCU7",136,0)
 .. D DX^IBCU72(IBIFN,IBPROCP)
"RTN","IBCU7",137,0)
 .. ;JWS;IB*2.0*592 US1108 - Dental
"RTN","IBCU7",138,0)
 .. I IBFT'=7 S X=$$ADDTNL(IBIFN,.DA)
"RTN","IBCU7",139,0)
 . Q:$$INPAT^IBCEF(IBIFN)  ;only outpatient bills
"RTN","IBCU7",140,0)
 . ;JWS;IB*2.0*592 US1108 - Dental input fields
"RTN","IBCU7",141,0)
 . I IBFT=7 D ORAL^IBCU72
"RTN","IBCU7",142,0)
 . ;add procedures to array for download to PCE: dgcpt(assoc clinic,cpt,'provider^first dx^modifiers',cnt)=""
"RTN","IBCU7",143,0)
 . S DGPROC=$G(^DGCR(399,IBIFN,"CP",+DA,0))
"RTN","IBCU7",144,0)
 . S X=$P(DGPROC,U,18)_U_+$G(^IBA(362.3,+$P(DGPROC,U,11),0))_U_$P(DGPROC,U,15)
"RTN","IBCU7",145,0)
 . I 'DGCPTNEW,$P(DGPROC,"^",7)="" S DGCPTNEW=2
"RTN","IBCU7",146,0)
 . I DGCPTUP,DGCPTNEW S DGCPT=DGCPT+1 I $P(DGPROC,"^",7) S DGCPT($P(DGPROC,"^",7),+DGPROC,X,DGCPT)=""
"RTN","IBCU7",147,0)
 . ; add visit date to bill
"RTN","IBCU7",148,0)
 . I DGADDVST S (X,DINUM)=DGPROCDT D VFILE1^IBCOPV1 K DINUM,X,DGNOADD,DGADDVST
"RTN","IBCU7",149,0)
 ; Delete modifiers with only a sequence #, no code
"RTN","IBCU7",150,0)
 S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"CP",Z)) Q:'Z  S Z0=0 F  S Z0=$O(^DGCR(399,IBIFN,"CP",Z,"MOD",Z0)) Q:'Z0  I $P($G(^(Z0,0)),U,2)="" S DA(2)=IBIFN,DA(1)=Z,DA=Z0,DIK="^DGCR(399,"_DA(2)_",""CP"","_DA(1)_",""MOD""," D ^DIK
"RTN","IBCU7",151,0)
 Q
"RTN","IBCU7",152,0)
CODQ K %DT,DGPROC,DIC,DIE,DR,DGPROCDT,IBPROCP,DLAYGO
"RTN","IBCU7",153,0)
 K IBFT,DGNOADD,DGADDVST,DGCPT,DGCPTUP,IBZTYPE,DGCPTNEW
"RTN","IBCU7",154,0)
 Q
"RTN","IBCU7",155,0)
 ;
"RTN","IBCU7",156,0)
DELPROC ; Remove the selected procedure, because of inactive status (cancel selection)
"RTN","IBCU7",157,0)
 W !!,*7,"The Procedure code is inactive on ",$$DAT1^IBOUTL(DGPROCDT),"."
"RTN","IBCU7",158,0)
 W !,"Please select another Procedure."
"RTN","IBCU7",159,0)
 S DA(1)=IBIFN,DA=+Y,DIK="^DGCR(399,"_IBIFN_",""CP"","
"RTN","IBCU7",160,0)
 D ^DIK
"RTN","IBCU7",161,0)
 Q
"RTN","IBCU7",162,0)
 ;
"RTN","IBCU7",163,0)
DELADD N Z,Z0,DA,DIK,X,Y
"RTN","IBCU7",164,0)
 S DA(1)=IBIFN
"RTN","IBCU7",165,0)
 ;Delete references to proc on rev codes
"RTN","IBCU7",166,0)
 S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"RC",Z)) Q:'Z  S Z0=$G(^(Z,0)) I Z0'="",$P(Z0,U,15)!$S($P(Z0,U,10)=3:$P(Z0,U,11),1:0) S DIE="^DGCR(399,"_DA(1)_",""RC"",",DA=Z,DR=".11///@;.15///@"_$S($P(Z0,U,8):"",1:";.08////1") D ^DIE
"RTN","IBCU7",167,0)
 S DIK="^DGCR(399,"_DA(1)_",""CP""," F DA=0:0 S DA=$O(^DGCR(399,DA(1),"CP",DA)) Q:'DA  D ^DIK
"RTN","IBCU7",168,0)
 S DGRVRCAL=1
"RTN","IBCU7",169,0)
 Q
"RTN","IBCU7",170,0)
 ;
"RTN","IBCU7",171,0)
DTMES ;Message if procedure date not in date range
"RTN","IBCU7",172,0)
 Q:'$D(IBIFN)  Q:'$D(^DGCR(399,IBIFN,"U"))  S DGNODUU=^("U")
"RTN","IBCU7",173,0)
 G:X'<$P(DGNODUU,"^")&(X'>$P(DGNODUU,"^",2)) DTMESQ
"RTN","IBCU7",174,0)
 W *7,!!?3,"Date must be within STATEMENT COVERS FROM and STATEMENT COVERS TO period."
"RTN","IBCU7",175,0)
 S Y=$P(DGNODUU,"^") X ^DD("DD")
"RTN","IBCU7",176,0)
 W !?3,"Enter a date between ",Y," and " S Y=$P(DGNODUU,"^",2) X ^DD("DD") W Y,!
"RTN","IBCU7",177,0)
 K X,Y
"RTN","IBCU7",178,0)
DTMESQ K DGNODUU Q
"RTN","IBCU7",179,0)
 ;
"RTN","IBCU7",180,0)
CODHLP ;Display Additional Procedure codes
"RTN","IBCU7",181,0)
 N I,J,Y,IBMOD
"RTN","IBCU7",182,0)
 I '$O(^DGCR(399,IBIFN,"CP",0)) W !!?5,"No Codes Entered!",! Q
"RTN","IBCU7",183,0)
 W ! F I=0:0 S I=$O(^DGCR(399,IBIFN,"CP",I)) Q:'I  S Y=$G(^(I,0)) S Z=$$PRCNM^IBCSCH1($P(Y,"^",1),$P(Y,"^",2)) W !?5,$E($P(Z,"^",2),1,33),?40,"- ",$P(Z,"^") D
"RTN","IBCU7",184,0)
 . N IBY
"RTN","IBCU7",185,0)
 . S IBY=$P(Y,U,2)
"RTN","IBCU7",186,0)
 . S IBMOD=$$GETMOD^IBEFUNC(IBIFN,I,1)
"RTN","IBCU7",187,0)
 . I IBMOD'="" S IBMOD="/"_IBMOD W IBMOD
"RTN","IBCU7",188,0)
 . W ?60,"Date: " S Y=IBY D DT^DIQ
"RTN","IBCU7",189,0)
 W !
"RTN","IBCU7",190,0)
 ;
"RTN","IBCU7",191,0)
 K Z Q
"RTN","IBCU7",192,0)
 ;
"RTN","IBCU7",193,0)
DICV I $D(IBIFN),$D(^DGCR(399,IBIFN,0)),$P(^(0),U,9) S DIC("V")=$S($P(^(0),U,9)=9:"I +Y(0)=80.1",$P(^(0),U,9)=4!($P(^(0),U,9)=5):"I +Y(0)=81",1:"")
"RTN","IBCU7",194,0)
 Q
"RTN","IBCU7",195,0)
 ;
"RTN","IBCU7",196,0)
DEFDIV(IBIFN) ; Find default division for bill IBIFN
"RTN","IBCU7",197,0)
 Q $P($G(^DG(40.8,+$P($G(^DGCR(399,IBIFN,0)),U,22),0)),U)
"RTN","IBCU7",198,0)
 ;
"RTN","IBCU7",199,0)
ADDTNL(IBIFN,DA) ;
"RTN","IBCU7",200,0)
 N DR,IBOK,X,Y,DIR
"RTN","IBCU7",201,0)
 S IBOK=1
"RTN","IBCU7",202,0)
 S DR="19T;50.09T;50.08T" D ^DIE  ; WCJ;IB*2.0*488 Added Ts
"RTN","IBCU7",203,0)
 ;I '($$FT^IBCEF(IBIFN)'=3&($$INPAT^IBCEF(IBIFN))) D ATTACH  ; DEM;432 - Prompt for Attachment Control Number.
"RTN","IBCU7",204,0)
 I '($$FT^IBCEF(IBIFN)=3&($$INPAT^IBCEF(IBIFN))) D ATTACH  ; DEM;432 - Prompt for Attachment Control Number.
"RTN","IBCU7",205,0)
 I $D(Y) S IBOK=0 G ADDTNLQ
"RTN","IBCU7",206,0)
 ;/Beginning of IB*2.0*488 (vd)
"RTN","IBCU7",207,0)
 ;S DIR("B")="NO",DIR("A")="EDIT CMS-1500 SPECIAL PROGRAM FIELDS and BOX 19?: ",DIR("A",1)=" ",DIR(0)="YA"
"RTN","IBCU7",208,0)
 ;S DIR("?",1)="Respond YES only if you need to add/edit data for chiropractic visits,"
"RTN","IBCU7",209,0)
 ;S DIR("?")="EPSDT care, or if billing for HOSPICE and attending is not a hospice employee."
"RTN","IBCU7",210,0)
 ;D ^DIR K DIR
"RTN","IBCU7",211,0)
 ;I Y'=1 S IBOK=0 G ADDTNLQ
"RTN","IBCU7",212,0)
 ;S DR="W !,""  <<EPSDT>>"";50.07;W !!,""  <<HOSPICE>>"";50.03"
"RTN","IBCU7",213,0)
 S DR="50.07T;50.03T"   ;WCJ;IB*2.0*488 added Ts
"RTN","IBCU7",214,0)
 ;/End of IB*2.0*488 (vd)
"RTN","IBCU7",215,0)
 D ^DIE
"RTN","IBCU7",216,0)
 W !
"RTN","IBCU7",217,0)
ADDTNLQ Q IBOK
"RTN","IBCU7",218,0)
 ;
"RTN","IBCU7",219,0)
XTRA1(Y) ;
"RTN","IBCU7",220,0)
 K Y
"RTN","IBCU7",221,0)
 Q
"RTN","IBCU7",222,0)
 ;
"RTN","IBCU7",223,0)
SPCUNIT(IBIFN,DA) ; return fields for special units if applicable, in DR form
"RTN","IBCU7",224,0)
 N IB0,IBCPT,IBDR,IBCT,IBFT,DFN S IBDR=""
"RTN","IBCU7",225,0)
 S IB0=$G(^DGCR(399,+$G(IBIFN),0)),IBCT=$P(IB0,U,27),IBFT=$P(IB0,U,19),DFN=$P(IB0,U,2)
"RTN","IBCU7",226,0)
 S IBCPT=$G(^DGCR(399,+$G(IBIFN),"CP",+$G(DA),0)) I IBCPT'["ICPT" G SPCUNTQ
"RTN","IBCU7",227,0)
 I +$$ITMUNIT^IBCRU4(+IBCPT,5,IBCT) S IBDR="15;" D SROMIN^IBCU74(IBIFN,DA) G SPCUNTQ ; minutes
"RTN","IBCU7",228,0)
 I +$$ITMUNIT^IBCRU4(+IBCPT,4,IBCT) S IBDR="21;" G SPCUNTQ ; miles
"RTN","IBCU7",229,0)
 I +$$ITMUNIT^IBCRU4(+IBCPT,6,IBCT) S IBDR="22//"_$$OBSHOUR^IBCU74(DFN,$P(IBCPT,U,2))_";" G SPCUNTQ ; hours
"RTN","IBCU7",230,0)
 I +IBFT=2,$P($G(^IBE(353.2,+$P(IBCPT,U,10),0)),U,2)="ANESTHESIA" S IBDR="15;" ; minutes
"RTN","IBCU7",231,0)
SPCUNTQ Q IBDR
"RTN","IBCU7",232,0)
 ;
"RTN","IBCU7",233,0)
ATTACH ; DEM;432 - Attachment control number.
"RTN","IBCU7",234,0)
 ; Ask if user wants to enter Attachment Control Number.
"RTN","IBCU7",235,0)
 N DIR,X,Y,DA,DIE,DR
"RTN","IBCU7",236,0)
 S DIR("A")="Enter Attachment Control Number"
"RTN","IBCU7",237,0)
 S DIR(0)="Y",DIR("B")="NO"
"RTN","IBCU7",238,0)
 D ^DIR
"RTN","IBCU7",239,0)
 Q:'Y
"RTN","IBCU7",240,0)
 ; User chose to enter Attachment Control Number.
"RTN","IBCU7",241,0)
 ; User enters Attachment Control fields.
"RTN","IBCU7",242,0)
 S DA(1)=IBIFN,DA=IBPROCP
"RTN","IBCU7",243,0)
 S DIE="^DGCR(399,"_DA(1)_",""CP"","
"RTN","IBCU7",244,0)
 S DR="71Report Type;72Report Transmission Method;70Attachment Control Number"
"RTN","IBCU7",245,0)
 D ^DIE
"RTN","IBCU7",246,0)
 Q
"RTN","IBCU7",247,0)
 ;
"RTN","IBCU7",248,0)
NOCPROC(IBPROCSV,IBCODE,IBDATE) ; MRD;IB*2.0*516 - Function to determine if procedure is an
"RTN","IBCU7",249,0)
 ; "NOC". Returns '1' if "NOC" procedure, otherwise '0'.
"RTN","IBCU7",250,0)
 ;
"RTN","IBCU7",251,0)
 N IBNOC,IBPROCEX,IBPROCIN,IBPROCNM,IBX,IBLINES,IBSTR,IBEND,IBLN
"RTN","IBCU7",252,0)
 S IBNOC=0
"RTN","IBCU7",253,0)
 I $G(IBPROCSV)="" G NOCPROCQ
"RTN","IBCU7",254,0)
 I $G(IBCODE)="" G NOCPROCQ
"RTN","IBCU7",255,0)
 I $G(IBDATE)'?7N G NOCPROCQ
"RTN","IBCU7",256,0)
 S IBPROCIN=$P($P(IBPROCSV,U,2),";") ;parsing out the IEN
"RTN","IBCU7",257,0)
 I IBPROCIN="" G NOCPROCQ
"RTN","IBCU7",258,0)
 ;
"RTN","IBCU7",259,0)
 ; If procedure code ends in '99', quit with a '1'.
"RTN","IBCU7",260,0)
 ;
"RTN","IBCU7",261,0)
 I $E(IBCODE,$L(IBCODE)-1,$L(IBCODE))=99 S IBNOC=1 G NOCPROCQ ;Does code end with 99? If so NOC
"RTN","IBCU7",262,0)
 ;
"RTN","IBCU7",263,0)
 ; Pull procedure name, then check to see if it contains one of the
"RTN","IBCU7",264,0)
 ; specified strings.
"RTN","IBCU7",265,0)
 ;
"RTN","IBCU7",266,0)
 S IBPROCNM=$$CPT^ICPTCOD(IBCODE,IBDATE)
"RTN","IBCU7",267,0)
 S IBPROCNM=$P(IBPROCNM,U,3)
"RTN","IBCU7",268,0)
 I IBPROCNM'="",($$NOC(IBPROCNM)) S IBNOC=1 G NOCPROCQ ; Does external match NOC strings? if so NOC
"RTN","IBCU7",269,0)
 ;
"RTN","IBCU7",270,0)
 ;Does array strings match any of the specified strings
"RTN","IBCU7",271,0)
 S IBLINES=$$CPTD^ICPTCOD(IBCODE,"IBINFO",,IBDATE) ;get number of lines/array of lines
"RTN","IBCU7",272,0)
 S IBEND=1 S:IBLINES>1 IBEND=IBLINES-1 ;set up counter for loop
"RTN","IBCU7",273,0)
 F IBLN=1:1:IBEND D  Q:IBNOC=1  ;loop through array so we can check if node values = NOC
"RTN","IBCU7",274,0)
 . N IBSTR S IBSTR=$$TM($G(IBINFO(IBLN)))_" "_$$TM($G(IBINFO(IBLN+1)))_" " ;Build strings for NOC comparison
"RTN","IBCU7",275,0)
 . S IBNOC=$$NOC(IBSTR) ;is current combination of strings a NOC?
"RTN","IBCU7",276,0)
 . Q
"RTN","IBCU7",277,0)
 ;
"RTN","IBCU7",278,0)
NOCPROCQ ; Quit out.
"RTN","IBCU7",279,0)
 K IBINFO ;killing the array made in CPTD^ICPTCOD
"RTN","IBCU7",280,0)
 Q IBNOC
"RTN","IBCU7",281,0)
 ;
"RTN","IBCU7",282,0)
NOC(IBTEXT) ; Quit with '1' if IBTEXT contains one of the specified strings.
"RTN","IBCU7",283,0)
 ;
"RTN","IBCU7",284,0)
 S IBTEXT=$TR(IBTEXT,"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
"RTN","IBCU7",285,0)
 ;
"RTN","IBCU7",286,0)
 I IBTEXT["NOT OTHERWISE" Q 1
"RTN","IBCU7",287,0)
 I IBTEXT["NOT ELSEWHERE" Q 1
"RTN","IBCU7",288,0)
 I IBTEXT["NOT LISTED" Q 1
"RTN","IBCU7",289,0)
 I IBTEXT["UNLISTED" Q 1
"RTN","IBCU7",290,0)
 I IBTEXT["UNSPECIFIED" Q 1
"RTN","IBCU7",291,0)
 I IBTEXT["UNCLASSIFIED" Q 1
"RTN","IBCU7",292,0)
 I IBTEXT["NON-SPECIFIED" Q 1
"RTN","IBCU7",293,0)
 I IBTEXT["NOS " Q 1
"RTN","IBCU7",294,0)
 I IBTEXT["NOS;" Q 1
"RTN","IBCU7",295,0)
 I IBTEXT["NOS." Q 1
"RTN","IBCU7",296,0)
 I IBTEXT["NOS," Q 1
"RTN","IBCU7",297,0)
 I IBTEXT["NOS/" Q 1
"RTN","IBCU7",298,0)
 I IBTEXT["(NOS)" Q 1
"RTN","IBCU7",299,0)
 I IBTEXT["NOC " Q 1
"RTN","IBCU7",300,0)
 I IBTEXT["NOC;" Q 1
"RTN","IBCU7",301,0)
 I IBTEXT["NOC." Q 1
"RTN","IBCU7",302,0)
 I IBTEXT["NOC," Q 1
"RTN","IBCU7",303,0)
 I IBTEXT["NOC/" Q 1
"RTN","IBCU7",304,0)
 I IBTEXT["(NOC)" Q 1
"RTN","IBCU7",305,0)
 ;
"RTN","IBCU7",306,0)
 ; Check if last three charcters are 'NOC' or 'NOS'.
"RTN","IBCU7",307,0)
 ;
"RTN","IBCU7",308,0)
 S IBTEXT=$E(IBTEXT,$L(IBTEXT)-2,$L(IBTEXT))
"RTN","IBCU7",309,0)
 Q 0
"RTN","IBCU7",310,0)
 ;
"RTN","IBCU7",311,0)
TM(IBX,IBY) ; Trim Character Y - Default " "
"RTN","IBCU7",312,0)
 S IBX=$G(IBX) Q:IBX="" IBX  S IBY=$G(IBY) S:'$L(IBY) IBY=" "
"RTN","IBCU7",313,0)
 F  Q:$E(IBX,1)'=IBY  S IBX=$E(IBX,2,$L(IBX))
"RTN","IBCU7",314,0)
 F  Q:$E(IBX,$L(IBX))'=IBY  S IBX=$E(IBX,1,($L(IBX)-1))
"RTN","IBCU7",315,0)
 Q IBX
"RTN","IBCU7",316,0)
 ;
"RTN","IBCU7",317,0)
ORALCAV(FLD) ;EP;IB*2.0*592
"RTN","IBCU7",318,0)
 ; Dictionary Screen function called from Procedures Oral Cavity Fields:
"RTN","IBCU7",319,0)
 ; 399.0304.90.01, 399.0304.90.02, 399.0304.90.03, 399.0304.90.04, 399.0304.90.05 
"RTN","IBCU7",320,0)
 ; Prevents the same Oral Cavity from being selected more than once.
"RTN","IBCU7",321,0)
 ; Input: FLD - Field # of the field being checked
"RTN","IBCU7",322,0)
 ; DA - IEN of the Service Line Multiple being edited
"RTN","IBCU7",323,0)
 ; DA(1) - IEN of the 399 entry being edited
"RTN","IBCU7",324,0)
 ; Y - Internal Value of the user response
"RTN","IBCU7",325,0)
 ; Returns: 1 - Data input by the user is valid, 0 otherwise
"RTN","IBCU7",326,0)
 N NDE,RTN
"RTN","IBCU7",327,0)
 S NDE=$G(^DGCR(399,DA(1),"CP",DA,"DEN"))
"RTN","IBCU7",328,0)
 S RTN=1 ; Assume Valid Input
"RTN","IBCU7",329,0)
 Q:Y="" 1 ; No value entered
"RTN","IBCU7",330,0)
 ;
"RTN","IBCU7",331,0)
 ; Make sure there are no duplicates
"RTN","IBCU7",332,0)
 I FLD=90.01 D  Q RTN
"RTN","IBCU7",333,0)
 . I $P(NDE,"^",2)=Y S RTN=0 Q
"RTN","IBCU7",334,0)
 . I $P(NDE,"^",3)=Y S RTN=0 Q
"RTN","IBCU7",335,0)
 . I $P(NDE,"^",4)=Y S RTN=0 Q
"RTN","IBCU7",336,0)
 . I $P(NDE,"^",5)=Y S RTN=0 Q
"RTN","IBCU7",337,0)
 I FLD=90.02 D  Q RTN
"RTN","IBCU7",338,0)
 . I $P(NDE,"^",1)=Y S RTN=0 Q
"RTN","IBCU7",339,0)
 . I $P(NDE,"^",3)=Y S RTN=0 Q
"RTN","IBCU7",340,0)
 . I $P(NDE,"^",4)=Y S RTN=0 Q
"RTN","IBCU7",341,0)
 . I $P(NDE,"^",5)=Y S RTN=0 Q
"RTN","IBCU7",342,0)
 I FLD=90.03 D  Q RTN
"RTN","IBCU7",343,0)
 . I $P(NDE,"^",1)=Y S RTN=0 Q
"RTN","IBCU7",344,0)
 . I $P(NDE,"^",2)=Y S RTN=0 Q
"RTN","IBCU7",345,0)
 . I $P(NDE,"^",4)=Y S RTN=0 Q
"RTN","IBCU7",346,0)
 . I $P(NDE,"^",5)=Y S RTN=0 Q
"RTN","IBCU7",347,0)
 I FLD=90.04 D  Q RTN
"RTN","IBCU7",348,0)
 . I $P(NDE,"^",1)=Y S RTN=0 Q
"RTN","IBCU7",349,0)
 . I $P(NDE,"^",2)=Y S RTN=0 Q
"RTN","IBCU7",350,0)
 . I $P(NDE,"^",3)=Y S RTN=0 Q
"RTN","IBCU7",351,0)
 . I $P(NDE,"^",5)=Y S RTN=0 Q
"RTN","IBCU7",352,0)
 I FLD=90.05 D  Q RTN
"RTN","IBCU7",353,0)
 . I $P(NDE,"^",1)=Y S RTN=0 Q
"RTN","IBCU7",354,0)
 . I $P(NDE,"^",2)=Y S RTN=0 Q
"RTN","IBCU7",355,0)
 . I $P(NDE,"^",3)=Y S RTN=0 Q
"RTN","IBCU7",356,0)
 . I $P(NDE,"^",4)=Y S RTN=0 Q
"RTN","IBCU7",357,0)
 Q RTN
"RTN","IBCU7",358,0)
 ;
"RTN","IBCU7",359,0)
TOOTHS(FLD) ;EP;IB*2.0*592
"RTN","IBCU7",360,0)
 ; Dictionary Screen function called from Dental Service Line Tooth fields:
"RTN","IBCU7",361,0)
 ; 399,91,.02, 399,91,.03, 399,91,.04, 399,91,.05, 399,91,.06. Prevents the 
"RTN","IBCU7",362,0)
 ; same Tooth Surface from being selected more than once.
"RTN","IBCU7",363,0)
 ; Input: FLD - Field # of the field being checked
"RTN","IBCU7",364,0)
 ; DA - Tooth Surface multiple IEN
"RTN","IBCU7",365,0)
 ; DA(1) - Service Line multiple IEN
"RTN","IBCU7",366,0)
 ; DA(2) - IEN of the 399 entry being edited
"RTN","IBCU7",367,0)
 ; Y - Internal Value of the user response
"RTN","IBCU7",368,0)
 ; Returns: 1 - Data input by the user is valid, 0 otherwise
"RTN","IBCU7",369,0)
 N NDE,RTN
"RTN","IBCU7",370,0)
 S NDE=$G(^DGCR(399,DA(2),"CP",DA(1),"DEN1",DA,0))
"RTN","IBCU7",371,0)
 S RTN=1 ; Assume Valid Input
"RTN","IBCU7",372,0)
 Q:Y="" 1 ; No value entered
"RTN","IBCU7",373,0)
 ;
"RTN","IBCU7",374,0)
 ; Make sure there are no duplicates
"RTN","IBCU7",375,0)
 I FLD=.02 D  Q RTN
"RTN","IBCU7",376,0)
 . I $P(NDE,"^",3)=Y S RTN=0 Q
"RTN","IBCU7",377,0)
 . I $P(NDE,"^",4)=Y S RTN=0 Q
"RTN","IBCU7",378,0)
 . I $P(NDE,"^",5)=Y S RTN=0 Q
"RTN","IBCU7",379,0)
 . I $P(NDE,"^",6)=Y S RTN=0 Q
"RTN","IBCU7",380,0)
 I FLD=.03 D  Q RTN
"RTN","IBCU7",381,0)
 . I $P(NDE,"^",2)=Y S RTN=0 Q
"RTN","IBCU7",382,0)
 . I $P(NDE,"^",4)=Y S RTN=0 Q
"RTN","IBCU7",383,0)
 . I $P(NDE,"^",5)=Y S RTN=0 Q
"RTN","IBCU7",384,0)
 . I $P(NDE,"^",6)=Y S RTN=0 Q
"RTN","IBCU7",385,0)
 I FLD=.04 D  Q RTN
"RTN","IBCU7",386,0)
 . I $P(NDE,"^",2)=Y S RTN=0 Q
"RTN","IBCU7",387,0)
 . I $P(NDE,"^",3)=Y S RTN=0 Q
"RTN","IBCU7",388,0)
 . I $P(NDE,"^",5)=Y S RTN=0 Q
"RTN","IBCU7",389,0)
 . I $P(NDE,"^",6)=Y S RTN=0 Q
"RTN","IBCU7",390,0)
 I FLD=.05 D  Q RTN
"RTN","IBCU7",391,0)
 . I $P(NDE,"^",2)=Y S RTN=0 Q
"RTN","IBCU7",392,0)
 . I $P(NDE,"^",3)=Y S RTN=0 Q
"RTN","IBCU7",393,0)
 . I $P(NDE,"^",4)=Y S RTN=0 Q
"RTN","IBCU7",394,0)
 . I $P(NDE,"^",6)=Y S RTN=0 Q
"RTN","IBCU7",395,0)
 I FLD=.06 D  Q RTN
"RTN","IBCU7",396,0)
 . I $P(NDE,"^",2)=Y S RTN=0 Q
"RTN","IBCU7",397,0)
 . I $P(NDE,"^",3)=Y S RTN=0 Q
"RTN","IBCU7",398,0)
 . I $P(NDE,"^",4)=Y S RTN=0 Q
"RTN","IBCU7",399,0)
 . I $P(NDE,"^",5)=Y S RTN=0 Q
"RTN","IBCU7",400,0)
 Q RTN
"RTN","IBCU7",401,0)
 ; 
"RTN","IBCU72")
0^25^B93126486^B16208907
"RTN","IBCU72",1,0)
IBCU72 ;ALB/CPM - ADD/EDIT/DELETE PROCEDURE DIAGNOSES ;18-JUN-96
"RTN","IBCU72",2,0)
 ;;2.0;INTEGRATED BILLING;**62,210,473,461,592**;21-MAR-94;Build 58
"RTN","IBCU72",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCU72",4,0)
 ;
"RTN","IBCU72",5,0)
DX(IBIFN,IBPROC) ; Add/edit/delete procedure diagnoses.
"RTN","IBCU72",6,0)
 ; Input:  IBIFN  --  Pointer to the claim in file #399
"RTN","IBCU72",7,0)
 ;        IBPROC  --  Pointer to the claim procedure in file #399.0304
"RTN","IBCU72",8,0)
 ;
"RTN","IBCU72",9,0)
 I '$G(IBIFN) G DXQ
"RTN","IBCU72",10,0)
 I '$G(IBPROC) G DXQ
"RTN","IBCU72",11,0)
 ;
"RTN","IBCU72",12,0)
 N DIE,DA ; need to preserve these variables for IBCU7.
"RTN","IBCU72",13,0)
 ;
"RTN","IBCU72",14,0)
 N IBPROCD,IBDX,IBDXSCR,IBLINE,IBI,IBDEF,IBQUIT,IBPROMPT
"RTN","IBCU72",15,0)
 N J,IBREPACK S IBREPACK=0  ; Added with IB*2.0*473 BI
"RTN","IBCU72",16,0)
 S IBPROCD=$G(^DGCR(399,IBIFN,"CP",IBPROC,0))
"RTN","IBCU72",17,0)
 I 'IBPROCD G DXQ
"RTN","IBCU72",18,0)
 ;
"RTN","IBCU72",19,0)
 ; - get diagnoses and display.
"RTN","IBCU72",20,0)
 D SET^IBCSC4D(IBIFN,.IBDXSCR,.IBDX),DISP(.IBDX)
"RTN","IBCU72",21,0)
 I '$O(IBDX(0)) W "There are no diagnoses associated with this bill." G DXQ
"RTN","IBCU72",22,0)
 ;
"RTN","IBCU72",23,0)
 ; - build workable array; determine default values
"RTN","IBCU72",24,0)
 S IBI=0 F  S IBI=$O(IBDX(IBI)) Q:'IBI  S IBDX(IBI)=IBDXSCR(+IBDX(IBI))_U_$P($$ICD9^IBACSV(+IBDX(IBI)),U)
"RTN","IBCU72",25,0)
 S IBDEF="" F I=11:1:14 S X=$P(IBPROCD,U,I) I X D
"RTN","IBCU72",26,0)
 . S J=0 F  S J=$O(IBDX(J)) Q:'J  I +IBDX(J)=X S IBDEF=IBDEF_J_":"_$P(IBDX(J),U,2)_"," Q
"RTN","IBCU72",27,0)
 I IBDEF]"" S IBDEF=$E(IBDEF,1,$L(IBDEF)-1)
"RTN","IBCU72",28,0)
 ;
"RTN","IBCU72",29,0)
 ; - display instructions and default values
"RTN","IBCU72",30,0)
 W !," *** Please select procedure diagnoses by number to left of diagnosis code ***"
"RTN","IBCU72",31,0)
 I IBDEF]"" W !,"Current Values:  " F I=1:1:$L(IBDEF,",") S X=$P(IBDEF,",",I) I X]"" W "Dx ",I,": ",+X," - ",$P(X,":",2),"   "
"RTN","IBCU72",32,0)
 ;
"RTN","IBCU72",33,0)
 ; - prompt for the four associated dx prompts
"RTN","IBCU72",34,0)
 W ! S IBQUIT=0 F IBPROMPT=1:1:4 D ASKEM Q:IBQUIT
"RTN","IBCU72",35,0)
 I IBREPACK D REPACK(IBPROC,IBIFN)  ; Added with IB*2.0*473 BI
"RTN","IBCU72",36,0)
 ;
"RTN","IBCU72",37,0)
DXQ Q
"RTN","IBCU72",38,0)
 ;
"RTN","IBCU72",39,0)
 ;
"RTN","IBCU72",40,0)
 ;
"RTN","IBCU72",41,0)
DISP(X) ; Display of existing dx's for a bill.
"RTN","IBCU72",42,0)
 N IBX,IBY,IBZ,IBDATE
"RTN","IBCU72",43,0)
 S IBDATE=$$BDATE^IBACSV($G(IBIFN))
"RTN","IBCU72",44,0)
 W !!,?5,"-----------------  Existing Diagnoses for Bill  -----------------",!
"RTN","IBCU72",45,0)
 S IBX=0 F  S IBX=$O(X(IBX)) Q:'IBX  S IBZ=X(IBX),IBY=$$ICD9^IBACSV(+IBZ,IBDATE) D
"RTN","IBCU72",46,0)
 . W !?2,IBX,".",?6,$P(IBY,U),?18,$E($P(IBY,U,3),1,54),?74,$S($P(IBZ,U,2)<1000:"("_$P(IBZ,U,2)_")",1:"")
"RTN","IBCU72",47,0)
 W !
"RTN","IBCU72",48,0)
 Q
"RTN","IBCU72",49,0)
 ;
"RTN","IBCU72",50,0)
ASKEM ; Allow entry of the procedure diagnoses.
"RTN","IBCU72",51,0)
 N IBP
"RTN","IBCU72",52,0)
 S IBP=$P(IBDEF,",",IBPROMPT)
"RTN","IBCU72",53,0)
 W !,"Associated Diagnosis (",IBPROMPT,"): ",$S(IBP]"":+IBP_" - "_$P(IBP,":",2)_" // ",1:"")
"RTN","IBCU72",54,0)
 R X:DTIME
"RTN","IBCU72",55,0)
 I $E(X)="^" S IBQUIT=1 G ASKEMQ
"RTN","IBCU72",56,0)
 ; Changed with IB*2.0*473 BI
"RTN","IBCU72",57,0)
 ;I $E(X)="@" D:IBP]"" UPD("@",IBPROMPT+9) W:IBP]"" "   deleted." G ASKEMQ
"RTN","IBCU72",58,0)
 I $E(X)="@" D:IBP]"" UPD("@",IBPROMPT+9) W:IBP]"" "   deleted." S IBREPACK=1 G ASKEMQ
"RTN","IBCU72",59,0)
 I $E(X)="?" D HELP1 G ASKEM
"RTN","IBCU72",60,0)
 I X="" S:'$$NEXT() IBQUIT=1 G ASKEMQ
"RTN","IBCU72",61,0)
 I '$D(IBDX(X)) D HELP1 G ASKEM
"RTN","IBCU72",62,0)
 W "   ",$P(IBDX(X),"^",2)
"RTN","IBCU72",63,0)
 I +IBP'=X D UPD("/"_+IBDX(X),IBPROMPT+9)
"RTN","IBCU72",64,0)
ASKEMQ Q
"RTN","IBCU72",65,0)
 ;
"RTN","IBCU72",66,0)
UPD(IBVALUE,IBFIELD) ; Update an associated diagnosis.
"RTN","IBCU72",67,0)
 S DIE="^DGCR(399,"_IBIFN_",""CP"",",DA=IBPROC,DA(1)=IBIFN
"RTN","IBCU72",68,0)
 S DR=IBFIELD_"///"_IBVALUE D ^DIE K DA,DIE,DR
"RTN","IBCU72",69,0)
 Q
"RTN","IBCU72",70,0)
 ;
"RTN","IBCU72",71,0)
REPACK(IBPROC,IBIFN)  ; Move associated codes up to avoid gaps
"RTN","IBCU72",72,0)
 ;  Added with IB*2.0*473 BI
"RTN","IBCU72",73,0)
 N IBADIAG,DA,DIE,DR,IBFIELD,IBX
"RTN","IBCU72",74,0)
 N IBWIEN S IBWIEN=IBPROC_","_IBIFN_","
"RTN","IBCU72",75,0)
 S IBADIAG(1)=$$GET1^DIQ(399.0304,IBWIEN,10,"I")
"RTN","IBCU72",76,0)
 S IBADIAG(2)=$$GET1^DIQ(399.0304,IBWIEN,11,"I")
"RTN","IBCU72",77,0)
 S IBADIAG(3)=$$GET1^DIQ(399.0304,IBWIEN,12,"I")
"RTN","IBCU72",78,0)
 S IBADIAG(4)=$$GET1^DIQ(399.0304,IBWIEN,13,"I")
"RTN","IBCU72",79,0)
 S DIE="^DGCR(399,"_IBIFN_",""CP"",",DA=IBPROC,DA(1)=IBIFN
"RTN","IBCU72",80,0)
 S DR="10///@;11///@;12///@;13///@" D ^DIE
"RTN","IBCU72",81,0)
 S IBFIELD=9 F IBX=1:1:4 I IBADIAG(IBX)'="" S IBFIELD=IBFIELD+1,DR=IBFIELD_"///"_IBADIAG(IBX) D ^DIE
"RTN","IBCU72",82,0)
 Q
"RTN","IBCU72",83,0)
 ;
"RTN","IBCU72",84,0)
HELP1 ; Help for entering associated diagnoses.
"RTN","IBCU72",85,0)
 N X
"RTN","IBCU72",86,0)
 W !!,"Please enter one of the following billing diagnoses by number at left of code:"
"RTN","IBCU72",87,0)
 S X=0 F  S X=$O(IBDX(X)) Q:'X  W:X#4=1 ! W ?((X-1)#4*18),X,".",$J($P(IBDX(X),"^",2),9)
"RTN","IBCU72",88,0)
 W !!,"You may also enter '^' to exit, '@' to delete a procedure diagnosis, or"
"RTN","IBCU72",89,0)
 W !,"<CR> to accept a current value or skip a prompt.",!
"RTN","IBCU72",90,0)
 Q
"RTN","IBCU72",91,0)
 ;
"RTN","IBCU72",92,0)
NEXT() ; Advance to the next prompt?
"RTN","IBCU72",93,0)
 N I,X S X=0
"RTN","IBCU72",94,0)
 I IBPROMPT=4 G NEXTQ
"RTN","IBCU72",95,0)
 I IBP]"" S X=1 G NEXTQ
"RTN","IBCU72",96,0)
 F I=(IBPROMPT+1):1:4 I $P(IBDEF,",",I)]"" S X=1 Q
"RTN","IBCU72",97,0)
NEXTQ Q X
"RTN","IBCU72",98,0)
 ;
"RTN","IBCU72",99,0)
ORAL ; JWS;IB*2.0*592;dental produce line level dental fields
"RTN","IBCU72",100,0)
 N ODA,I1,QUIT,IBUNIT,X1,DEN1
"RTN","IBCU72",101,0)
 S IBUNIT=1
"RTN","IBCU72",102,0)
 ;IA# 3820
"RTN","IBCU72",103,0)
 S X1=0 F  S X1=$O(^DGCR(399,DA(1),"RC",X1)) Q:X1'=+X1  I $P($G(^(X1,0)),"^",11)=DA S IBUNIT=$P($G(^(0)),"^",3)
"RTN","IBCU72",104,0)
 S IBPOPOUT=0
"RTN","IBCU72",105,0)
 F I=1:1:5 D  Q:$G(IBPOPOUT)  I X="" Q
"RTN","IBCU72",106,0)
 . S DR="90.0"_I_"Oral Cavity Designation ("_I_"): "
"RTN","IBCU72",107,0)
 . ;IA# 10018
"RTN","IBCU72",108,0)
 . D ^DIE
"RTN","IBCU72",109,0)
 . I $D(Y) S IBPOPOUT=1
"RTN","IBCU72",110,0)
 I $G(IBPOPOUT) Q
"RTN","IBCU72",111,0)
 ;IA# 10018
"RTN","IBCU72",112,0)
 S DR="90.06Prosthesis/Crown/Inlay Code: " D ^DIE I $D(Y) S IBPOPOUT=1 Q
"RTN","IBCU72",113,0)
 S DR="90.07Prior Placement Date Qualifier: " D ^DIE I $D(Y) S IBPOPOUT=1 Q
"RTN","IBCU72",114,0)
ORAL2 ;check for conditional required field
"RTN","IBCU72",115,0)
 ;IA# 2056
"RTN","IBCU72",116,0)
 I $$GET1^DIQ(399.0304,DA_","_DA(1),90.06,"I")="R",$$GET1^DIQ(399.0304,DA_","_DA(1),90.07)="" D  Q:$G(IBPOPOUT)  G ORAL2
"RTN","IBCU72",117,0)
 . W *7,!," ** Prior Placement Date Qualifier and Date need to be present when Prosthesis/Crown/Inlay Code equals 'R'"
"RTN","IBCU72",118,0)
 . ;IA# 10018
"RTN","IBCU72",119,0)
 . S DR="90.06Prosthesis/Crown/Inlay Code: ;90.07Prior Placement Date Qualifier: " D ^DIE I $D(Y) S IBPOPOUT=1
"RTN","IBCU72",120,0)
 . Q
"RTN","IBCU72",121,0)
 ;IA# 2056; IA# 10018
"RTN","IBCU72",122,0)
 I $$GET1^DIQ(399.0304,DA_","_DA(1),90.07)'="" S DR="90.08Prior Placement Date: " D ^DIE
"RTN","IBCU72",123,0)
 I $D(Y) S IBPOPOUT=1 Q
"RTN","IBCU72",124,0)
ORAL1 ; check for conditional required field
"RTN","IBCU72",125,0)
 I $$GET1^DIQ(399.0304,DA_","_DA(1),90.07,"I")=441,$$GET1^DIQ(399.0304,DA_","_DA(1),90.08)="" D  Q:$G(IBPOPOUT)  G ORAL1
"RTN","IBCU72",126,0)
 . W *7,!," ** Prior Placement Date is required when Prior Placement Date Qualifier equals 441 (Prior Placement Date)"
"RTN","IBCU72",127,0)
 . S DR="90.07Prior Placement Date Qualifier: ;90.08Prior Placement Date: " D ^DIE S:$D(Y) IBPOPOUT=1
"RTN","IBCU72",128,0)
 M ODA=DA K DA
"RTN","IBCU72",129,0)
 S IBPIEN=ODA
"RTN","IBCU72",130,0)
 S DA(1)=IBIFN,DA=IBPIEN,IBUPOUT=0
"RTN","IBCU72",131,0)
T1 ;
"RTN","IBCU72",132,0)
 S IBTOO=$$SELTOO(IBIFN,IBPIEN)
"RTN","IBCU72",133,0)
 I IBTOO=-1 G T2
"RTN","IBCU72",134,0)
 I IBTOO=-2 S IBPOPOUT=1 G TEXIT
"RTN","IBCU72",135,0)
 S DIE="^DGCR(399,"_IBIFN_",""CP"","_IBPIEN_",""DEN1"","
"RTN","IBCU72",136,0)
 S DA(2)=IBIFN,DA(1)=IBPIEN,DA=IBTOO
"RTN","IBCU72",137,0)
 ;I '$G(IBNEW) S DR=".01Tooth Code("_IBTOO_"): " D ^DIE
"RTN","IBCU72",138,0)
 ;IA# 10018
"RTN","IBCU72",139,0)
 I '$G(IBNEW) S DR=".01Tooth Code: " D ^DIE
"RTN","IBCU72",140,0)
 I '$G(IBNEW),'$D(DA) G T1  ;TEXIT  ;Deleted Tooth Code
"RTN","IBCU72",141,0)
 I $G(Y)="^" S IBPOPOUT=1 G TEXIT
"RTN","IBCU72",142,0)
 ;IA# 3820
"RTN","IBCU72",143,0)
 S DEN1=$G(^DGCR(399,IBIFN,"CP",IBPIEN,"DEN1",DA,0))
"RTN","IBCU72",144,0)
 F I1=2:1:6 D  Q:$G(IBPOPOUT)  I X="",$P(DEN1,"^",I1+1)="" Q
"RTN","IBCU72",145,0)
 . ;S DR=".0"_I1_"Tooth Surface Code("_DA_"): " D ^DIE
"RTN","IBCU72",146,0)
 . ;IA# 10018
"RTN","IBCU72",147,0)
 . S DR=".0"_I1_"Tooth Surface Code("_(I1-1)_"): " D ^DIE
"RTN","IBCU72",148,0)
 . I $G(Y)="^" S IBPOPOUT=1
"RTN","IBCU72",149,0)
 I $G(IBPOPOUT) G TEXIT
"RTN","IBCU72",150,0)
 G T1
"RTN","IBCU72",151,0)
 ;
"RTN","IBCU72",152,0)
T2 ;
"RTN","IBCU72",153,0)
 K DA M DA=ODA K ODA
"RTN","IBCU72",154,0)
 K DR
"RTN","IBCU72",155,0)
 S DR="90.09Orthodontic Banding Date: ;90.1Orthodontic Banding Replacement Date: ;90.11Treatment Start Date: ;90.12Treatment Completion Date: "
"RTN","IBCU72",156,0)
 S DIE="^DGCR(399,"_IBIFN_",""CP"","
"RTN","IBCU72",157,0)
 ;IA# 10018
"RTN","IBCU72",158,0)
 D ^DIE
"RTN","IBCU72",159,0)
 I $G(Y)="^" S IBPOPOUT=1
"RTN","IBCU72",160,0)
 Q
"RTN","IBCU72",161,0)
TEXIT ;abort out
"RTN","IBCU72",162,0)
 K DA M DA=ODA
"RTN","IBCU72",163,0)
 Q
"RTN","IBCU72",164,0)
 ;
"RTN","IBCU72",165,0)
SELTOO(IBIFN,IBPIEN) ;
"RTN","IBCU72",166,0)
 ; Provides the user with a quick view of currently entered Service Line Tooth
"RTN","IBCU72",167,0)
 ; Information multiples and allows them to select one to edit or enter a new
"RTN","IBCU72",168,0)
 ; one.
"RTN","IBCU72",169,0)
 ; Input:   IBTRIEN - IEN of the 356.22 entry being edited
"RTN","IBCU72",170,0)
 ;          SIEN   - Service Line Multiple IEN
"RTN","IBCU72",171,0)
 ; Returns: Value of the .01 field of the multiple to edit
"RTN","IBCU72",172,0)
 ;          "" if creating a new multiple, -2 to exit multiple
"RTN","IBCU72",173,0)
 ;          IBNEW=1 when creating a new entry
"RTN","IBCU72",174,0)
 N CNT,ENTNUM,TDATA,IEN,H1,H2,IEN,IENS,L1,L2,MAX,RETIEN,SECT,TIDATA,TTYPE,X,XX,Y,YY
"RTN","IBCU72",175,0)
 S IBNEW=0,SECT="Tooth Information"
"RTN","IBCU72",176,0)
 ; First check for an empty Additional Patient Information Line to delete
"RTN","IBCU72",177,0)
 D DELSTI(IBIFN,IBPIEN)
"RTN","IBCU72",178,0)
 ;
"RTN","IBCU72",179,0)
 ; Next create an array of all current PROCEDURE Line Tooth Information Lines
"RTN","IBCU72",180,0)
 S XX=+$P($G(^DGCR(399,IBIFN,"CP",IBPIEN,"DEN1",0)),"^",4)  ; Total # of multiples
"RTN","IBCU72",181,0)
 S MAX=$S(XX<32:"",1:"Tooth Information Lines")
"RTN","IBCU72",182,0)
 S IEN=0,CNT=0
"RTN","IBCU72",183,0)
 F  D  Q:+IEN=0  I CNT=1,IBUNIT'=1 Q
"RTN","IBCU72",184,0)
 . S IEN=$O(^DGCR(399,IBIFN,"CP",IBPIEN,"DEN1",IEN))
"RTN","IBCU72",185,0)
 . Q:+IEN=0
"RTN","IBCU72",186,0)
 . S CNT=CNT+1
"RTN","IBCU72",187,0)
 . S XX="  "_$$LJ^XLFSTR(CNT,4)                 ; Selection #
"RTN","IBCU72",188,0)
 . S IENS=IEN_","_IBPIEN_","_IBIFN_","
"RTN","IBCU72",189,0)
 . S YY=$$GET1^DIQ(399.30491,IENS,.01,"I")      ; Tooth Code (External)
"RTN","IBCU72",190,0)
 . S YY=$$GET1^DIQ(356.022,YY_",",.01)          ; Tooth Code
"RTN","IBCU72",191,0)
 . S XX=XX_$$LJ^XLFSTR(YY,7)
"RTN","IBCU72",192,0)
 . S YY=$$GET1^DIQ(399.30491,IENS,.02)          ; Tooth Surface #1
"RTN","IBCU72",193,0)
 . S XX=XX_$$LJ^XLFSTR(YY,12)
"RTN","IBCU72",194,0)
 . S YY=$$GET1^DIQ(399.30491,IENS,.03)          ; Tooth Surface #2
"RTN","IBCU72",195,0)
 . S XX=XX_$$LJ^XLFSTR(YY,12)
"RTN","IBCU72",196,0)
 . S YY=$$GET1^DIQ(399.30491,IENS,.04)          ; Tooth Surface #3
"RTN","IBCU72",197,0)
 . S XX=XX_$$LJ^XLFSTR(YY,12)
"RTN","IBCU72",198,0)
 . S YY=$$GET1^DIQ(399.30491,IENS,.05)          ; Tooth Surface #4
"RTN","IBCU72",199,0)
 . S XX=XX_$$LJ^XLFSTR(YY,12)
"RTN","IBCU72",200,0)
 . S YY=$$GET1^DIQ(399.30491,IENS,.06)          ; Tooth Surface #5
"RTN","IBCU72",201,0)
 . S XX=XX_$$LJ^XLFSTR(YY,12)
"RTN","IBCU72",202,0)
 . S TIDATA(CNT)=IEN_"^"_XX
"RTN","IBCU72",203,0)
 ;
"RTN","IBCU72",204,0)
 I 'CNT D  Q $S($O(RETIEN(0)):RETIEN($O(RETIEN(0))),1:XX)
"RTN","IBCU72",205,0)
 . ;W !!,"  No Tooth Information is currently on file.",!
"RTN","IBCU72",206,0)
 . ;S XX=$$ASKNEW^IBTRH5D("  Add Tooth Information")
"RTN","IBCU72",207,0)
 . ;Q:XX<0
"RTN","IBCU72",208,0)
 . S TTYPE=$$TTYPE(IBIFN,IBPIEN)                ; Get the .01 value
"RTN","IBCU72",209,0)
 . I $G(IBPOPOUT) Q
"RTN","IBCU72",210,0)
 . I TTYPE="" S XX=-1 Q                         ; None entered
"RTN","IBCU72",211,0)
 . S IBNEW=1,XX=TTYPE
"RTN","IBCU72",212,0)
 . S FDA(399.30491,"+1,"_IBPIEN_","_IBIFN_",",.01)=TTYPE
"RTN","IBCU72",213,0)
 . D UPDATE^DIE("","FDA","RETIEN")              ; File the new line
"RTN","IBCU72",214,0)
 ;
"RTN","IBCU72",215,0)
 ; Next display all of the current Tooth Information lines and let the user select one
"RTN","IBCU72",216,0)
 S H1="  #   Tooth  Surface #1  Surface #2  Surface #3  Surface #4  Surface #5"
"RTN","IBCU72",217,0)
 S H2="  --  -----  ----------  ----------  ----------  ----------  ----------"
"RTN","IBCU72",218,0)
 S L1="  The following Tooth Information Lines are currently on file."
"RTN","IBCU72",219,0)
 S L2="  Enter # to edit, N to add new, D# to delete or Enter to continue."
"RTN","IBCU72",220,0)
 S XX=$$SELENT^IBTRH5D(.TIDATA,H1,H2,L1,L2,MAX,1,SECT)
"RTN","IBCU72",221,0)
 I XX?1"D".N D  Q -3
"RTN","IBCU72",222,0)
 . S (XX,ENTNUM)=$P(XX,"D",2)
"RTN","IBCU72",223,0)
 . S XX=$P(TIDATA(XX),"^",1)
"RTN","IBCU72",224,0)
 . D DELSTI(IBIFN,IBPIEN,XX)
"RTN","IBCU72",225,0)
 . W !,"Entry #",ENTNUM," has been deleted."
"RTN","IBCU72",226,0)
 I XX<0 Q XX
"RTN","IBCU72",227,0)
 I XX=0 D  Q $S($O(RETIEN(0)):RETIEN($O(RETIEN(0))),1:XX)
"RTN","IBCU72",228,0)
 . S TTYPE=$$TTYPE(IBIFN,IBPIEN)                ; Get the .01 value
"RTN","IBCU72",229,0)
 . I $G(IBPOPOUT) Q
"RTN","IBCU72",230,0)
 . I TTYPE="" S XX=-1 Q                         ; None entered
"RTN","IBCU72",231,0)
 . S IBNEW=1
"RTN","IBCU72",232,0)
 . S XX=TTYPE
"RTN","IBCU72",233,0)
 . S FDA(399.30491,"+1,"_IBPIEN_","_IBIFN_",",.01)=TTYPE
"RTN","IBCU72",234,0)
 . D UPDATE^DIE("","FDA","RETIEN")              ; File the new line
"RTN","IBCU72",235,0)
 Q $P(TIDATA(XX),"^",1)
"RTN","IBCU72",236,0)
 ;
"RTN","IBCU72",237,0)
DELSTI(IBIFN,IBPIEN,IEN) ; Checks to see if the user entered 'NEW' to create a new 
"RTN","IBCU72",238,0)
 ; Tooth Information Line and didn't enter any data for it OR selected a line
"RTN","IBCU72",239,0)
 ; to be deleted.  If so, the Additional Tooth Information line with no data 
"RTN","IBCU72",240,0)
 ; (or selected) is deleted
"RTN","IBCU72",241,0)
 ; Input:   IBTRIEN - IEN of the 356.22 entry being edited
"RTN","IBCU72",242,0)
 ;          SIEN    - IEN of the Service Line being edited
"RTN","IBCU72",243,0)
 ; Output:  Empty (or selected) Tooth Information line is deleted (Potentially)
"RTN","IBCU72",244,0)
 N DA,DIK,TIIEN,X,XX,Y
"RTN","IBCU72",245,0)
 S:'$D(IEN) IEN=""
"RTN","IBCU72",246,0)
 I IEN'="" D  Q
"RTN","IBCU72",247,0)
 . S DA(2)=IBIFN,DA(1)=IBPIEN,DA=IEN
"RTN","IBCU72",248,0)
 . S DIK="^DGCR(399,DA(2),""CP"",DA(1),""DEN1"","
"RTN","IBCU72",249,0)
 . D ^DIK  ; Delete the multiple
"RTN","IBCU72",250,0)
 ;
"RTN","IBCU72",251,0)
 S TIIEN=+$P($G(^DGCR(399,IBIFN,"CP",IBPIEN,"DEN1",0)),"^",3)  ; Last Multiple IEN
"RTN","IBCU72",252,0)
 Q:'TIIEN
"RTN","IBCU72",253,0)
 S XX=$G(^DGCR(399,IBIFN,"CP",IBPIEN,"DEN1",TIIEN,0))
"RTN","IBCU72",254,0)
 ;JWS;IB*2.0*592 6/12/19 - allow for just a tooth entry without a surface.
"RTN","IBCU72",255,0)
 I $P(XX,"^")'="" Q    ;allow for just a tooth entry
"RTN","IBCU72",256,0)
 S $P(XX,"^")=""       ; Remove .01 field
"RTN","IBCU72",257,0)
 Q:$TR(XX,"^","")'=""  ; 0 node data exists
"RTN","IBCU72",258,0)
 S DA(2)=IBIFN,DA(1)=IBPIEN,DA=TIIEN
"RTN","IBCU72",259,0)
 S DIK="^DGCR(399,DA(2),""CP"",DA(1),""DEN1"","
"RTN","IBCU72",260,0)
 D ^DIK  ; Delete the multiple
"RTN","IBCU72",261,0)
 Q
"RTN","IBCU72",262,0)
 ;
"RTN","IBCU72",263,0)
TTYPE(IBIFN,IBPIEN) ; Prompts the user to enter the .01 (Tooth) field of the
"RTN","IBCU72",264,0)
 ; Tooth Information multiple
"RTN","IBCU72",265,0)
 ; Input:   IBIFN - IEN of the 356.22 entry being edited
"RTN","IBCU72",266,0)
 ;          IBPIEN    - IEN of the Service Line
"RTN","IBCU72",267,0)
 ; Returns: IEN of the selected Tooth Type or "" of not entered
"RTN","IBCU72",268,0)
 N DA,DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBCU72",269,0)
 S DA(2)=IBIFN,DA(1)=IBPIEN
"RTN","IBCU72",270,0)
 S DIR(0)="399.30491,.01",DIR("A")="    Tooth Code"
"RTN","IBCU72",271,0)
 D ^DIR
"RTN","IBCU72",272,0)
 I $G(Y)="^" S IBPOPOUT=1
"RTN","IBCU72",273,0)
 Q:$D(DIRUT) ""
"RTN","IBCU72",274,0)
 Q $P(Y,"^",1)
"RTN","IBCU72",275,0)
 ;
"RTN","IBCU7B")
0^26^B63616995^B55412712
"RTN","IBCU7B",1,0)
IBCU7B ;ALB/DEM - LINE LEVEL PROVIDER USER INPUT ;27-SEP-2010
"RTN","IBCU7B",2,0)
 ;;2.0;INTEGRATED BILLING;**432,447,592**;21-MAR-94;Build 58
"RTN","IBCU7B",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCU7B",4,0)
 Q
"RTN","IBCU7B",5,0)
 ;
"RTN","IBCU7B",6,0)
EN ;
"RTN","IBCU7B",7,0)
 ;
"RTN","IBCU7B",8,0)
 N X,DIC,DIE,DR,DA,DLAYGO,PRVFUN,DIPA,Y,DO,DD,I  ; ,IBPOPOUT IB*2.0*447 BI
"RTN","IBCU7B",9,0)
 I '$D(IBLNPRV("IBCCPT")) N IBLNPRV  ; DEM;432 - Coming from routine IBCCPT.
"RTN","IBCU7B",10,0)
 S:'$G(IBFT) IBFT=$$FT^IBCEF(IBIFN)  ;DEM;432 - Form Type for claim.
"RTN","IBCU7B",11,0)
 I IBFT=3,$$INPAT^IBCEF(IBIFN) Q   ;WCJ*2.0*432 Don't ask line level providers if INPAT UB
"RTN","IBCU7B",12,0)
 ;JWS;IB*2.0*592;Dental form 7
"RTN","IBCU7B",13,0)
 Q:(IBFT'=2)&(IBFT'=3)&(IBFT'=7)  ;DEM;432 - Must be CMS-1500 (2) or UB-04 (3) Form Type or J430D Dental
"RTN","IBCU7B",14,0)
 S:IBFT=2 PRVFUN(2)="Rendering,Referring,Supervising"  ;DEM;432 - Allowable provider functions for CMS-1500.
"RTN","IBCU7B",15,0)
 S:IBFT=3 PRVFUN(3)="Rendering,Referring,Operating,Other Operating"  ;DEM;432 - Allowable provider functions for UB-04.
"RTN","IBCU7B",16,0)
 ;JWS;IB*2.0*592;Dental form 7
"RTN","IBCU7B",17,0)
 S:IBFT=7 PRVFUN(7)="Rendering,Referring,Supervising,Assistant Surgeon"
"RTN","IBCU7B",18,0)
 ; IB*2.0*447 BI
"RTN","IBCU7B",19,0)
 ; F PRVFUN("CNT")=1:1:$L(PRVFUN(IBFT),",") S PRVFUN=$P(PRVFUN(IBFT),",",PRVFUN("CNT")) D  I $G(IBPOPOUT) K IBPOPOUT Q
"RTN","IBCU7B",20,0)
 F PRVFUN("CNT")=1:1:$L(PRVFUN(IBFT),",") S PRVFUN=$P(PRVFUN(IBFT),",",PRVFUN("CNT")) D  I $G(IBPOPOUT) Q
"RTN","IBCU7B",21,0)
 . ;JWS;IB*2.0*592;Dental form 7 add Assistant Surgeon
"RTN","IBCU7B",22,0)
 . S X=$S(PRVFUN="Rendering":3,PRVFUN="Referring":1,PRVFUN="Supervising":5,PRVFUN="Operating":2,PRVFUN="Assistant Surgeon":6,1:9)  ;DEM;432 - X=Provider Function Code Number.
"RTN","IBCU7B",23,0)
 . ;I $D(IBLNPRV("IBCCPT")),X'=3 Q  ; DEM;432 - Coming from routine IBCCPT, only interested in RENDERING PROVIDER.
"RTN","IBCU7B",24,0)
 . ;JWS;IB*2.0*592; skip assistant surgeon if Rendering already entered, skip Rendering if assitant surgeon exists
"RTN","IBCU7B",25,0)
 . ;I X=6,$D(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV","B",3)) Q
"RTN","IBCU7B",26,0)
 . ;IA# 3820
"RTN","IBCU7B",27,0)
 . I X=6,('$$FILTERP^IBCSC10H(IBIFN,6)!$D(^DGCR(399,IBIFN,"PRV","B",3))) Q
"RTN","IBCU7B",28,0)
 . ;I X=3,$D(^DGCR(399,IBIFN,"CP",IBPROCP,"LNPRV","B",6)) Q
"RTN","IBCU7B",29,0)
 . ;IA# 3820 
"RTN","IBCU7B",30,0)
 . I X=3,('$$FILTERP^IBCSC10H(IBIFN,3)!$D(^DGCR(399,IBIFN,"PRV","B",6))) Q
"RTN","IBCU7B",31,0)
 . K DA,DO,DD
"RTN","IBCU7B",32,0)
 . S DA(2)=IBIFN,DA(1)=IBPROCP  ;DEM;432 - Set up DA array for call to FILE^DICN.
"RTN","IBCU7B",33,0)
 . S DIC="^DGCR(399,"_DA(2)_",""CP"","_DA(1)_",""LNPRV"","  ;DEM;432 - Global root of Line Provider multiple.
"RTN","IBCU7B",34,0)
 . S DIC(0)="L"
"RTN","IBCU7B",35,0)
 . S DIC("DR")=".01////"_X  ;DEM;432 - Stuff X (provider function) into new entry.
"RTN","IBCU7B",36,0)
 . I '$D(^DGCR(399,DA(2),"CP",DA(1),"LNPRV","B",X)) D FILE^DICN  ; DEM;432 - Add new entry.
"RTN","IBCU7B",37,0)
 . S DA=+$O(^DGCR(399,DA(2),"CP",DA(1),"LNPRV","B",X,0))  ;DEM;432 - Get DA of line provider entry.
"RTN","IBCU7B",38,0)
 . S DIPA("RF")=X  ;DEM;432 - Save provider function in DIPA("RF") for later use in call to DIE.
"RTN","IBCU7B",39,0)
 . S DIE=DIC
"RTN","IBCU7B",40,0)
 . K DIC,DO,DD,DR,X,Y
"RTN","IBCU7B",41,0)
 . D DRARRY  ;DEM;432 - Set up DR array for call to DIE.
"RTN","IBCU7B",42,0)
 . ;
"RTN","IBCU7B",43,0)
 . ; DEM;432 - Variable IBLNPRV is a flag for called code
"RTN","IBCU7B",44,0)
 . ;           that we are coming from line level provider
"RTN","IBCU7B",45,0)
 . ;           user input (example, EXTCR^IBCEU5).
"RTN","IBCU7B",46,0)
 . ;
"RTN","IBCU7B",47,0)
 . S IBLNPRV=1
"RTN","IBCU7B",48,0)
 . ; preserve DA values
"RTN","IBCU7B",49,0)
 . S IBLNPRV("LNPRVIEN")=DA  ;DEM;432 - DA of line provider entry to edit.
"RTN","IBCU7B",50,0)
 . S IBLNPRV("PROCIEN")=DA(1)  ;DEM;432 - DA(1) is procedure code multiple IEN.
"RTN","IBCU7B",51,0)
 . S DLAYGO=399  ;DEM;432 - Set DLAYGO.
"RTN","IBCU7B",52,0)
 . D ^DIE
"RTN","IBCU7B",53,0)
 . ; IB*2.0*447 BI Changed to correct for empty provider types in global.
"RTN","IBCU7B",54,0)
 . ;I ($G(Y)="^")!($G(Y)=-1) S IBPOPOUT=1 Q  ; User entered caret ("^"), so exit line provider entry.
"RTN","IBCU7B",55,0)
 . I ($D(Y)) S IBPOPOUT=1  ; User entered caret ("^"), so exit line provider entry.
"RTN","IBCU7B",56,0)
 . ; DEM;432 - If line provider zero node exist, and no provider, then delete entry.  Reset DA
"RTN","IBCU7B",57,0)
 . ;JWS;IB*2.0*592 set DA(2) to correct value for deletion
"RTN","IBCU7B",58,0)
 . S DA=IBLNPRV("LNPRVIEN"),DA(1)=IBLNPRV("PROCIEN"),DA(2)=IBIFN
"RTN","IBCU7B",59,0)
 . I $D(^DGCR(399,IBIFN,"CP",IBLNPRV("PROCIEN"),"LNPRV",IBLNPRV("LNPRVIEN"),0))#10,'$P(^DGCR(399,IBIFN,"CP",IBLNPRV("PROCIEN"),"LNPRV",IBLNPRV("LNPRVIEN"),0),U,2) S DR=".01///@" D ^DIE
"RTN","IBCU7B",60,0)
 . K DIC,DIE,DR,DA,X,Y,DO,DD,DLAYGO,DIPA  ;DEM;432 - Clean up.
"RTN","IBCU7B",61,0)
 . Q
"RTN","IBCU7B",62,0)
 ;
"RTN","IBCU7B",63,0)
 K IBLNPRV,PRVFUN
"RTN","IBCU7B",64,0)
 ;
"RTN","IBCU7B",65,0)
END ;
"RTN","IBCU7B",66,0)
 Q
"RTN","IBCU7B",67,0)
 ;
"RTN","IBCU7B",68,0)
DRARRY ; Set of DR array for user input.
"RTN","IBCU7B",69,0)
 ;
"RTN","IBCU7B",70,0)
 ; DEM;432 - DIE uses DR to execute individual DR array elements, so
"RTN","IBCU7B",71,0)
 ;           need to leave DR(1,399.0404) undefined for DIE to move
"RTN","IBCU7B",72,0)
 ;           DR string into DR(1,399.0404).
"RTN","IBCU7B",73,0)
 ;
"RTN","IBCU7B",74,0)
 ; Note: 'B' line tags represent DR string branching.
"RTN","IBCU7B",75,0)
 ;
"RTN","IBCU7B",76,0)
 ; 399.0404,.01 LINE FUNCTION.
"RTN","IBCU7B",77,0)
 ; Stuff value from FILE^DICN add above (DIPA("RF")) into .01 field.
"RTN","IBCU7B",78,0)
 ; Also, need to set up DIPA("I#") array from claim level for later reference in DR array.
"RTN","IBCU7B",79,0)
 S DR=".01///^S X=DIPA(""RF"");K DIPA S DIPA(""RF"")=X,DIPA(""I1"")=$D(^DGCR(399,DA(2),""I1"")),DIPA(""I2"")=$D(^(""I2"")),DIPA(""I3"")=$D(^(""I3""))"
"RTN","IBCU7B",80,0)
 ;
"RTN","IBCU7B",81,0)
 ; 399.0404,.02 LINE PERFORMED BY.
"RTN","IBCU7B",82,0)
 ; If no provider entered by user, then delete entry (accomplished by
"RTN","IBCU7B",83,0)
 ; deleting .01 field, LINE FUNCTION field).
"RTN","IBCU7B",84,0)
 ; Branch to end (@499) if no provider entered.
"RTN","IBCU7B",85,0)
 ;S:'$D(IBLNPRV("IBCCPT")) DR(1,399.0404,1)=".02"_PRVFUN_$S(PRVFUN'["Operating":" Provider",1:" Physician")_";S:X DIPA(""PRF"")=X,Y=""@4"";.01///@;S Y=""@499"""
"RTN","IBCU7B",86,0)
 ;S:$D(IBLNPRV("IBCCPT")) DR(1,399.0404,1)=".02///"_IBLNPRV("IBCCPT")_";.02Rendering;S:X DIPA(""PRF"")=X,Y=""@4"";.01///@;S Y=""@499"""
"RTN","IBCU7B",87,0)
 S DR(1,399.0404,1)=""
"RTN","IBCU7B",88,0)
 S:$D(IBLNPRV("IBCCPT"))&(PRVFUN["Rendering") DR(1,399.0404,1)=".02///"_IBLNPRV("IBCCPT")_";"
"RTN","IBCU7B",89,0)
 ;JWS;IB*2.0*592;Dental - added Surgeon for Dental
"RTN","IBCU7B",90,0)
 S DR(1,399.0404,1)=DR(1,399.0404,1)_".02"_PRVFUN_$S(PRVFUN["Surgeon":"",PRVFUN'["Operating":" Provider",1:" Physician")_";S:X DIPA(""PRF"")=X,Y=""@4"";.01///@;S Y=""@499"""
"RTN","IBCU7B",91,0)
 ; Branch to @48 if VA PROVIDER.
"RTN","IBCU7B",92,0)
 ; IF Non-VA PROVIDER, then file changes to IB NON/OTHER VA BILLING PROVIDER File (#355.93) for user input.
"RTN","IBCU7B",93,0)
 ; DR string syntax ";^355.93^IBA(355.93," accomplishes variable pointer file change.
"RTN","IBCU7B",94,0)
 ; See DR array DR(2,355.93) and DR(2,355.93,SEQ #) below for details.
"RTN","IBCU7B",95,0)
 ;
"RTN","IBCU7B",96,0)
 S DR(1,399.0404,2)="@4;N Z1 S Z1=$P($G(^DGCR(399,DA(2),""CP"",DA(1),""LNPRV"",DA,0)),U,2) S DIPA(""NVA_PRV"")=$S(Z1[""IBA(355.93"":+Z1,1:0) S X=+X I DIPA(""NVA_PRV"")=0 S Y=""@48"""
"RTN","IBCU7B",97,0)
 S DR(1,399.0404,3)="S:$D(^XUSEC(""IB PROVIDER EDIT"",DUZ)) DLAYGO=355.93;^355.93^IBA(355.93,"
"RTN","IBCU7B",98,0)
 ;
"RTN","IBCU7B",99,0)
NVAPRV ; Start of user input into IB NON/OTHER VA BILLING PROVIDER File (#355.93).
"RTN","IBCU7B",100,0)
 ;
"RTN","IBCU7B",101,0)
 S DR(2,355.93)="S DIPA(""NVA_PRV-0"")=$G(^IBA(355.93,DIPA(""NVA_PRV""),0))"
"RTN","IBCU7B",102,0)
 ;
"RTN","IBCU7B",103,0)
 ; Branch to @42 if PROVIDER TYPE equals '1' FOR FACILITY/GROUP.
"RTN","IBCU7B",104,0)
 ; Branch to @41 if CREDENTIALS are not NULL.
"RTN","IBCU7B",105,0)
 S DR(2,355.93,1)="S:$P(DIPA(""NVA_PRV-0""),U,2)=1 Y=""@42"";S:$P(DIPA(""NVA_PRV-0""),U,3)'="""" Y=""@41"""
"RTN","IBCU7B",106,0)
 ;
"RTN","IBCU7B",107,0)
 ; 355.93,.03 CREDENTIALS.
"RTN","IBCU7B",108,0)
 S DR(2,355.93)="S DIPA(""NVA_PRV-0"")=$G(^IBA(355.93,DIPA(""NVA_PRV""),0))"
"RTN","IBCU7B",109,0)
 ;
"RTN","IBCU7B",110,0)
 ; Branch to @42 if PROVIDER TYPE equals '1' FOR FACILITY/GROUP.
"RTN","IBCU7B",111,0)
 ; Branch to @41 if CREDENTIALS are not NULL.
"RTN","IBCU7B",112,0)
 S DR(2,355.93,1)="S:$P(DIPA(""NVA_PRV-0""),U,2)=1 Y=""@42"";S:$P(DIPA(""NVA_PRV-0""),U,3)'="""" Y=""@41"""
"RTN","IBCU7B",113,0)
 ;
"RTN","IBCU7B",114,0)
 ; 355.93,.03 CREDENTIALS.
"RTN","IBCU7B",115,0)
 S DR(2,355.93,2)=".03"
"RTN","IBCU7B",116,0)
B41 ;
"RTN","IBCU7B",117,0)
 ; 355.93,.04 SPECIALTY.
"RTN","IBCU7B",118,0)
 ; Branch to @45 if CREDENTIALS are not NULL.
"RTN","IBCU7B",119,0)
 S DR(2,355.93,3)="@41;S:$P(DIPA(""NVA_PRV-0""),U,3)'="""" Y=""@45"";.04;S Y=""@45"""
"RTN","IBCU7B",120,0)
B42 ;
"RTN","IBCU7B",121,0)
 ; 355.93,.05 STREET ADDRESS.
"RTN","IBCU7B",122,0)
 ; 355.93,.06 CITY.
"RTN","IBCU7B",123,0)
 ; 355.93,.07 STATE.
"RTN","IBCU7B",124,0)
 ; Branch to @43 if there is an STREET ADDRESS, CITY, and STATE.
"RTN","IBCU7B",125,0)
 S DR(2,355.93,4)="@42;S:$P(DIPA(""NVA_PRV-0""),U,5)'=""""&($P(DIPA(""NVA_PRV-0""),U,6)'="""")&($P(DIPA(""NVA_PRV-0""),U,7)'="""") Y=""@43"""
"RTN","IBCU7B",126,0)
 ; 355.93,.05 STREET ADDRESS.
"RTN","IBCU7B",127,0)
 ; 355.93,.1 STREET ADDRESS LINE 2.
"RTN","IBCU7B",128,0)
 ; 355.93,.06 CITY.
"RTN","IBCU7B",129,0)
 ; 355.93,.07 STATE.
"RTN","IBCU7B",130,0)
 ; 355.93,.08 ZIP CODE.
"RTN","IBCU7B",131,0)
 S DR(2,355.93,5)=".05;.1;.06;.07;.08"
"RTN","IBCU7B",132,0)
B43 ;
"RTN","IBCU7B",133,0)
 ; 355.93,.09 FACILITY DEFAULT ID NUMBER.
"RTN","IBCU7B",134,0)
 ; Branch to @44 if there is a FACILITY DEFAULT ID NUMBER.
"RTN","IBCU7B",135,0)
 S DR(2,355.93,6)="@43;S:$P(DIPA(""NVA_PRV-0""),U,9)'="""" Y=""@44"";.09LAB OR FACILITY PRIMARY ID"
"RTN","IBCU7B",136,0)
B44 ;
"RTN","IBCU7B",137,0)
 ; 355.93,.11 X12 TYPE OF FACILITY.
"RTN","IBCU7B",138,0)
 ; Branch to @45 if there is a X12 TYPE OF FACILITY.
"RTN","IBCU7B",139,0)
 S DR(2,355.93,7)="@44;S:$P(DIPA(""NVA_PRV-0""),U,11)'="""" Y=""@45"";.11"
"RTN","IBCU7B",140,0)
B45 ;
"RTN","IBCU7B",141,0)
 ; 355.93,41.01 NPI.
"RTN","IBCU7B",142,0)
 ; Branch to @46 if there is an NPI.
"RTN","IBCU7B",143,0)
 S DR(2,355.93,8)="@45;S:$P(DIPA(""NVA_PRV-0""),U,14)'="""" Y=""@46"";D EN2^IBCEP82(DIPA(""NVA_PRV""),4)"
"RTN","IBCU7B",144,0)
B46 ;
"RTN","IBCU7B",145,0)
 ; 355.93,42 TAXONOMY CODE.
"RTN","IBCU7B",146,0)
 ; Branch to @47 if there is TAXONOMY data.
"RTN","IBCU7B",147,0)
 ; 355.93,42 TAXONOMY CODE is a multiple (Sub-File 355.9342). We want 'ALL'
"RTN","IBCU7B",148,0)
 ; fields from TAXONOMY CODE Sub-File 355.9342. Thus,
"RTN","IBCU7B",149,0)
 ; DR string S DR(4,355.9342)=".01:.03" below.
"RTN","IBCU7B",150,0)
 S DR(2,355.93,9)="@46;S:$D(^IBA(355.93,DIPA(""NVA_PRV""),""TAXONOMY""))>0 Y=""@47"";42"
"RTN","IBCU7B",151,0)
 S DR(3,355.9342)=".01:.03"
"RTN","IBCU7B",152,0)
B47 ;
"RTN","IBCU7B",153,0)
 ; End of data entry for IB NON/OTHER VA BILLING PROVIDER File (#399.53).
"RTN","IBCU7B",154,0)
 S DR(2,355.93,10)="@47"
"RTN","IBCU7B",155,0)
 ;
"RTN","IBCU7B",156,0)
B48 ;
"RTN","IBCU7B",157,0)
 ;
"RTN","IBCU7B",158,0)
LNPRV ; User input into LINE PROVIDER Sub-File 399.0404.
"RTN","IBCU7B",159,0)
 ;
"RTN","IBCU7B",160,0)
 S DR(1,399.0404,4)="@48"
"RTN","IBCU7B",161,0)
 S DR(1,399.0404,5)="S DIK=""^DGCR(399,""_DA(2)_"",""""CP"""",""_DA(1)_"",""""LNPRV"""","",DIK(1)="".02"" D EN1^DIK K DIK"
"RTN","IBCU7B",162,0)
 ; 399.0404,.15 LINE TAXONOMY.
"RTN","IBCU7B",163,0)
 S DR(1,399.0404,6)=".15Line Level Taxonomy"
"RTN","IBCU7B",164,0)
 S DR(1,399.0404,7)="D DISPTAX^IBCEP81($P($G(^DGCR(399,DA(2),""CP"",DA(1),""LNPRV"",DA,0)),U,15),"""")"
"RTN","IBCU7B",165,0)
 S DR(1,399.0404,8)="N Z S Z=$$EXPAND^IBTRE(399.0404,.08,$P($G(^DGCR(399,DA(2),""CP"",DA(1),""LNPRV"",DA,0)),U,8)) S DIPA(""SPC"")=$S(Z'="""":Z,1:""UNSPECIFIED"")"
"RTN","IBCU7B",166,0)
 S DR(1,399.0404,9)="W !,""    Prov Specialty On File:  "",DIPA(""SPC"")"
"RTN","IBCU7B",167,0)
 S DR(1,399.0404,10)="S DIPA(""CRD"")=$$CRED^IBCEU($P($G(^DGCR(399,DA(2),""CP"",DA(1),""LNPRV"",DA,0)),U,2))"
"RTN","IBCU7B",168,0)
 ; 399.0404,.03 LINE CREDENTIALS
"RTN","IBCU7B",169,0)
 S DR(1,399.0404,11)=".03;K DIPA(""W1"") S:$G(DIPA(""CRD""))'=$P($G(^DGCR(399,DA(2),""CP"",DA(1),""LNPRV"",DA,0)),U,3) DIPA(""W1"")=1"
"RTN","IBCU7B",170,0)
 S DR(1,399.0404,12)="I $G(DIPA(""W1"")) D WRT1^IBCSC10H($G(DIPA(""CRD"")))"
"RTN","IBCU7B",171,0)
 ; Branch to @405 if File #399 PRIMARY NODE is non numeric.
"RTN","IBCU7B",172,0)
 S DR(1,399.0404,13)="K DIPA(""W1"") I '$G(DIPA(""I1"")) S Y=""@405"""
"RTN","IBCU7B",173,0)
 ; Branching based on DIPA("EDIT") - DIPA("EDIT") set in PROVID^IBCEP2B call
"RTN","IBCU7B",174,0)
 S DR(1,399.0404,14)="D PROVID^IBCEP2B(DA(2),DA,1,.DIPA) S Y=$S(DIPA(""EDIT"")<0:""@482"",DIPA(""EDIT"")=1:""@491"",DIPA(""EDIT"")=2:""@471"",1:"""")"
"RTN","IBCU7B",175,0)
B482 ;
"RTN","IBCU7B",176,0)
 ; Branch to @405 if File #399 SECORDARY NODE is non numeric.
"RTN","IBCU7B",177,0)
 S DR(1,399.0404,15)="@482;I '$G(DIPA(""I2"")) S Y=""@405"""
"RTN","IBCU7B",178,0)
 S DR(1,399.0404,16)="D PROVID^IBCEP2B(DA(2),DA,2,.DIPA)"
"RTN","IBCU7B",179,0)
 ; Branching based on DIPA("EDIT") - DIPA("EDIT") set in PROVID^IBCEP2B call.
"RTN","IBCU7B",180,0)
 S DR(1,399.0404,17)="S Y=$S(DIPA(""EDIT"")<0:""@483"",DIPA(""EDIT"")=1:""@492"",DIPA(""EDIT"")=2:""@472"",1:"""")"
"RTN","IBCU7B",181,0)
B483 ;
"RTN","IBCU7B",182,0)
 ; Branch to @405 if File #399 TERTIARY NODE is non numeric.
"RTN","IBCU7B",183,0)
 S DR(1,399.0404,18)="@483;I '$G(DIPA(""I3"")) S Y=""@405"""
"RTN","IBCU7B",184,0)
 S DR(1,399.0404,19)="D PROVID^IBCEP2B(DA(2),DA,3,.DIPA)"
"RTN","IBCU7B",185,0)
 ; Branching based on DIPA("EDIT") - DIPA("EDIT") set in PROVID^IBCEP2B call.
"RTN","IBCU7B",186,0)
 S DR(1,399.0404,20)="S Y=$S(DIPA(""EDIT"")<0:""@405"",DIPA(""EDIT"")=1:""@493"",DIPA(""EDIT"")=2:""@473"",1:"""");S Y=""@405"""
"RTN","IBCU7B",187,0)
B491 ;
"RTN","IBCU7B",188,0)
 ; 399.0404,.12 LINE PRIM INS PROVIDER ID TYPE.
"RTN","IBCU7B",189,0)
 ; 399.0404,.05 LINE PRIMARY INS CO ID NUMBER.
"RTN","IBCU7B",190,0)
 ; Branch to @482.
"RTN","IBCU7B",191,0)
 S DR(1,399.0404,21)="@491;.12R~T;.05T;S Y=""@482"""
"RTN","IBCU7B",192,0)
B492 ;
"RTN","IBCU7B",193,0)
 ; 399.0404,.13 LINE SEC INS PROVIDER ID TYPE.
"RTN","IBCU7B",194,0)
 ; 399.0404,.06 LINE SECONDARY INS CO ID NUMBER.
"RTN","IBCU7B",195,0)
 ; Branch to @483.
"RTN","IBCU7B",196,0)
 S DR(1,399.0404,22)="@492;.13R~T;.06T;S Y=""@483"""
"RTN","IBCU7B",197,0)
B493 ;
"RTN","IBCU7B",198,0)
 ; 399.0404,.14 LINE TERT INS PROVIDER ID TYPE.
"RTN","IBCU7B",199,0)
 ; 399.0404,.07 LINE TERTIARY INS CO ID NUMBER.
"RTN","IBCU7B",200,0)
 ; Branch to @405.
"RTN","IBCU7B",201,0)
 S DR(1,399.0404,23)="@493;.14R~T;.07T;S Y=""@405"""
"RTN","IBCU7B",202,0)
B471 ;
"RTN","IBCU7B",203,0)
 ; 399.0404,.12 LINE PRIM INS PROVIDER ID TYPE.
"RTN","IBCU7B",204,0)
 ; 399.0404,.05 LINE PRIMARY INS CO ID NUMBER.
"RTN","IBCU7B",205,0)
 ; Branch to @482.
"RTN","IBCU7B",206,0)
 S DR(1,399.0404,24)="@471;.12////^S X=DIPA(""PRIDT"");.05////^S X=DIPA(""PRID"");S Y=""@482"""
"RTN","IBCU7B",207,0)
B472 ;
"RTN","IBCU7B",208,0)
 ; 399.0404,.13 LINE SEC INS PROVIDER ID TYPE.
"RTN","IBCU7B",209,0)
 ; 399.0404,.06 LINE SECONDARY INS CO ID NUMBER.
"RTN","IBCU7B",210,0)
 ; Branch to @483.
"RTN","IBCU7B",211,0)
 S DR(1,399.0404,25)="@472;.13////^S X=DIPA(""PRIDT"");.06////^S X=DIPA(""PRID"");S Y=""@483"""
"RTN","IBCU7B",212,0)
B473 ;
"RTN","IBCU7B",213,0)
 ; 399.0404,.14 LINE TERT INS PROVIDER ID TYPE.
"RTN","IBCU7B",214,0)
 ; 399.0404,.07 LINE TERTIARY INS CO ID NUMBER.
"RTN","IBCU7B",215,0)
 ; Branch to @405.
"RTN","IBCU7B",216,0)
 S DR(1,399.0404,26)="@473;.14////^S X=DIPA(""PRIDT"");.07////^S X=DIPA(""PRID"");S Y=""@405"""
"RTN","IBCU7B",217,0)
B405 ;
"RTN","IBCU7B",218,0)
 S DR(1,399.0404,27)="@405"
"RTN","IBCU7B",219,0)
 ;
"RTN","IBCU7B",220,0)
B499 ;
"RTN","IBCU7B",221,0)
 ; End of user input @499 and W @IOF.
"RTN","IBCU7B",222,0)
 S DR(1,399.0404,28)="@499;W @IOF"
"RTN","IBCU7B",223,0)
 Q
"RTN","IBCU82")
0^84^B24704444^B22371343
"RTN","IBCU82",1,0)
IBCU82 ;ALB/ARH - THIRD PARTY BILLING UTILITIES (AUTOMATED BILLER) ;02 JUL 93
"RTN","IBCU82",2,0)
 ;;2.0;INTEGRATED BILLING;**43,55,91,124,160,304,347,432,592**;21-MAR-94;Build 58
"RTN","IBCU82",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCU82",4,0)
 ;
"RTN","IBCU82",5,0)
 ;
"RTN","IBCU82",6,0)
EVNTCHK(IBTRN) ;special checks to determine if event should be auto billed
"RTN","IBCU82",7,0)
 ;checks for INS, non-veteran patient, possible workers comp and tort feasor, admitted for sc cond., outp dental stop, optv while inpt, category covered by ins, non-billable stop or clinic
"RTN","IBCU82",8,0)
 ;(assumes that Claims Tracking does the SC check for Outpatients)
"RTN","IBCU82",9,0)
 ;input: IBTRN - claims tracking event
"RTN","IBCU82",10,0)
 ;       DISP - if true then any error message will be displayed on exit.
"RTN","IBCU82",11,0)
 ;output: returns "1^error message" if one of the checks failed, 0 otherwise
"RTN","IBCU82",12,0)
 ;
"RTN","IBCU82",13,0)
 N X,IBX,IBY,IBZ,IBTRND,IBCAT,IBCOV,DFN,IBEVDT,VAEL,VADMVT,VAINDT S X=0,IBTRND=$G(^IBT(356,+$G(IBTRN),0)) G:IBTRND="" EVNTCQ
"RTN","IBCU82",14,0)
 I +$P(IBTRND,U,18)=1,'+$P(IBTRND,U,5) S X="1^Claims Tracking event does not have an associated Inpatient Admission." G EVNTCQ
"RTN","IBCU82",15,0)
 I +$P(IBTRND,U,18)=2,'+$P(IBTRND,U,4) S X="1^Claims Tracking event does not have an associated Outpatient Visit." G EVNTCQ
"RTN","IBCU82",16,0)
 I +$P(IBTRND,U,18)=4,'+$P(IBTRND,U,8) S X="1^Claims Tracking event does not have an associated prescription in Pharmacy." G EVNTCQ
"RTN","IBCU82",17,0)
 I +$P(IBTRND,U,18)=4,$P(IBTRND,U,10)="" S X="1^Claims Tracking event does not have an associated prescription refill in Pharmacy." G EVNTCQ
"RTN","IBCU82",18,0)
 ;
"RTN","IBCU82",19,0)
 S DFN=+$P(IBTRND,U,2),IBEVDT=$P(IBTRND,U,6) I '$$INSURED^IBCNS1(DFN,IBEVDT) S X="1^Patient not insured for event date." G EVNTCQ
"RTN","IBCU82",20,0)
 ; Check filing timeframe
"RTN","IBCU82",21,0)
 I '$$PTFTF^IBCNSU31(DFN,IBEVDT) S X="1^Filing timeframe not met" G EVNTCQ
"RTN","IBCU82",22,0)
 S IBCAT=$S($P(IBTRND,U,18)=1!($P(IBTRND,U,18)=5):"INPATIENT",$P(IBTRND,U,18)=2:"OUTPATIENT",$P(IBTRND,U,18)=4:"PHARMACY",1:"")
"RTN","IBCU82",23,0)
 I IBCAT'="",'$$PTCOV^IBCNSU3(DFN,IBEVDT,IBCAT) S X="1^Patient insurance does not cover "_IBCAT_"." G EVNTCQ
"RTN","IBCU82",24,0)
 D ELIG^VADPT S X=0 I 'VAEL(4) S X="1^Patient is not a veteran." G EVNTCQ
"RTN","IBCU82",25,0)
 ;
"RTN","IBCU82",26,0)
 ;check the last disposition before the episode to see if maybe workers comp or tort feasor
"RTN","IBCU82",27,0)
 S IBX=9999999-(IBEVDT\1+1),IBX=$O(^DPT(+DFN,"DIS",IBX)) I +IBX S IBY=$$DT(IBX),IBX=$G(^DPT(DFN,"DIS",IBX,2)) D  G:+X EVNTCQ
"RTN","IBCU82",28,0)
 . I $P(IBX,U,1)="Y" S X="1^Need may be related to occupation, check "_IBY_" disposition." Q
"RTN","IBCU82",29,0)
 . I $P(IBX,U,4)="Y" S X="1^Need may be related to an accident, check "_IBY_" disposition." Q
"RTN","IBCU82",30,0)
 ;
"RTN","IBCU82",31,0)
 I +$P(IBTRND,U,5) S IBX=$G(^DGPM(+$P(IBTRND,U,5),0)) D  G EVNTCQ ; inpatient specific
"RTN","IBCU82",32,0)
 . I IBX="" S X="1^Inpatient admission movement not found." Q
"RTN","IBCU82",33,0)
 . I +$P(IBX,U,11) S X="1^Admitted for an SC condition." Q
"RTN","IBCU82",34,0)
 ;
"RTN","IBCU82",35,0)
 I +$P(IBTRND,U,4) S IBX=$$SCE^IBSDU(+$P(IBTRND,U,4)) D  G EVNTCQ ; outpatient specific
"RTN","IBCU82",36,0)
 . I IBX="" S X="1^Outpatient Encounter not found." Q
"RTN","IBCU82",37,0)
 . S IBY=$$NBOE^IBCU81(+$P(IBTRND,U,4),IBX) I +IBY D  Q:+X
"RTN","IBCU82",38,0)
 .. ;I +IBY=1 S X="1^Service Connected visit." Q
"RTN","IBCU82",39,0)
 .. I +IBY=2 S X="1^Non-billable Stop Code." Q
"RTN","IBCU82",40,0)
 .. I +IBY=3 S X="1^Non-billable Clinic." Q
"RTN","IBCU82",41,0)
 .. I +IBY=4 S X="1^Non-billable Status: "_$P(IBY,U,2) Q
"RTN","IBCU82",42,0)
 . ; dental is generally billed differently
"RTN","IBCU82",43,0)
 . ;JWS;IB*2.0*592;US1109;allow dental events to be processed and billed.
"RTN","IBCU82",44,0)
 . ;;I $P($G(^DIC(40.7,+$P(IBX,U,3),0)),U,1)["DENTAL" S X="1^Outpatient visit contains a dental stop code." Q
"RTN","IBCU82",45,0)
 . ;JWS;IB*2.0*592;USXXXX;added ability to turn off Dental Claims processing in site parameters
"RTN","IBCU82",46,0)
 . I $P(^IBE(350.9,1,8),U,20)=0 S X="1^Dental Claims processing is disabled in IB Site Parameters." Q
"RTN","IBCU82",47,0)
 . ;outpatient visit was a disposition:  application without exam is not billable
"RTN","IBCU82",48,0)
 . I $P(IBX,U,8)=3 D  Q:X
"RTN","IBCU82",49,0)
 .. S IBY=$$DISND^IBSDU(+$P(IBTRND,U,4),IBX) ; 0-node of "DIS"
"RTN","IBCU82",50,0)
 .. I $P(IBY,U,2)=2 S X="1^Disposition was Application Without Exam." Q
"RTN","IBCU82",51,0)
 .. I $P($G(^DIC(37,+$P(IBY,U,7),0)),U,1)="CANCEL WITHOUT EXAM" S X="1^Disposition was Cancel Without Exam." Q
"RTN","IBCU82",52,0)
 . ;can not bill twice for same day so ignore outpatient visits if patient was an inpatient at end of day (this means that outpatient visits on the date of discharge will be billed)
"RTN","IBCU82",53,0)
 . I $$ADM^IBCU64(DFN,IBEVDT) S X="1^Not Billable: Patient was an inpatient on this visit date."
"RTN","IBCU82",54,0)
 ;
"RTN","IBCU82",55,0)
 I +$P(IBTRND,U,8) S IBX=$$RXZERO^IBRXUTL(+$P(IBTRND,U,2),+$P(IBTRND,U,8)) D  G EVNTCQ ; rx refills
"RTN","IBCU82",56,0)
 . I IBX="" S X="1^Prescription not found in Pharmacy." Q
"RTN","IBCU82",57,0)
 . I +$P(IBTRND,U,10)>0 S IBY=$$ZEROSUB^IBRXUTL(+$P(IBTRND,U,2),+$P(IBTRND,U,8),+$P(IBTRND,U,10)) I IBY="" S X="1^Prescription refill not found in Pharmacy." Q
"RTN","IBCU82",58,0)
 . S IBZ=$$DBLCHK^IBTRKR31(IBTRN) I 'IBZ S X="1^Can not auto bill this refill, check Claims Tracking." Q
"RTN","IBCU82",59,0)
EVNTCQ Q X
"RTN","IBCU82",60,0)
 ;
"RTN","IBCU82",61,0)
DT(X) ;convert disposition type date/time to external format (9999999-date)
"RTN","IBCU82",62,0)
 N Y S Y=0 I +X S Y=9999999-X X ^DD("DD")
"RTN","IBCU82",63,0)
 Q Y
"RTN","IBCU9")
0^106^B4936343^B4596044
"RTN","IBCU9",1,0)
IBCU9 ;ALB/BI - BILLING UTILITY ROUTINE (CONTINUED) ;01 JUL 2011 11:13
"RTN","IBCU9",2,0)
 ;;2.0;INTEGRATED BILLING;**447,592**;01-JUL-2011;Build 58
"RTN","IBCU9",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBCU9",4,0)
 Q
"RTN","IBCU9",5,0)
 ;
"RTN","IBCU9",6,0)
CMAEDALL(IBIEN)  ; Clear all manually edited flags for a claim.
"RTN","IBCU9",7,0)
 N IBRCIEN S IBRCIEN=0
"RTN","IBCU9",8,0)
 F  S IBRCIEN=$O(^DGCR(399,IBIEN,"RC",IBRCIEN)) Q:+IBRCIEN=0  D
"RTN","IBCU9",9,0)
 . D CMAEDIND(IBIEN,IBRCIEN)
"RTN","IBCU9",10,0)
 Q
"RTN","IBCU9",11,0)
 ;
"RTN","IBCU9",12,0)
CMAEDIND(IBIEN,IBRCIEN)  ; Clear individual manually edited flags for a revenue code.
"RTN","IBCU9",13,0)
 S $P(^DGCR(399,IBIEN,"RC",IBRCIEN,0),U,16)=""
"RTN","IBCU9",14,0)
 Q
"RTN","IBCU9",15,0)
 ;
"RTN","IBCU9",16,0)
FROMPROC(IBIEN,IBCPIEN,IBFLG)  ; Clear individual manually edited flag if procedures match.
"RTN","IBCU9",17,0)
 I $G(IBIEN)="" Q
"RTN","IBCU9",18,0)
 I $G(IBCPIEN)="" Q
"RTN","IBCU9",19,0)
 I $G(IBFLG)="" Q
"RTN","IBCU9",20,0)
 I IBFLG="E",IBCPIEN=$O(^DGCR(399,IBIEN,"CP",0)) D CMAEDALL(IBIEN) Q
"RTN","IBCU9",21,0)
 I IBFLG="D",IBCPIEN=$O(^DGCR(399,IBIEN,"CP",0)) D PROC1DEL(IBIEN) Q
"RTN","IBCU9",22,0)
 N IBRC0,IBRCPRSP
"RTN","IBCU9",23,0)
 N IBRCIEN S IBRCIEN=0
"RTN","IBCU9",24,0)
 F  S IBRCIEN=$O(^DGCR(399,IBIEN,"RC",IBRCIEN)) Q:+IBRCIEN=0  D
"RTN","IBCU9",25,0)
 . S IBRC0=$G(^DGCR(399,IBIEN,"RC",IBRCIEN,0)),IBRCPRSP=$P(IBRC0,U,11)
"RTN","IBCU9",26,0)
 . I IBRCPRSP=IBCPIEN D CMAEDIND(IBIEN,IBRCIEN)
"RTN","IBCU9",27,0)
 Q
"RTN","IBCU9",28,0)
 ;
"RTN","IBCU9",29,0)
PROC1DEL(IBIEN)  ; The first procedure was deleted, determine division change.
"RTN","IBCU9",30,0)
 N IBCPIEN1,IBCPIEN2
"RTN","IBCU9",31,0)
 S IBCPIEN1=$O(^DGCR(399,IBIEN,"CP",0)) I IBCPIEN1="" Q
"RTN","IBCU9",32,0)
 S IBCPIEN2=$O(^DGCR(399,IBIEN,"CP",IBCPIEN1)) I IBCPIEN2="" D CMAEDALL(IBIEN) Q
"RTN","IBCU9",33,0)
 I $P($G(^DGCR(399,IBIEN,"CP",IBCPIEN1,0)),U,6)'=$P($G(^DGCR(399,IBIEN,"CP",IBCPIEN2,0)),U,6) D CMAEDALL(IBIEN)
"RTN","IBCU9",34,0)
 Q
"RTN","IBCU9",35,0)
 ;
"RTN","IBCU9",36,0)
 ;JWS;IB*2.0*592;US1109 Dental
"RTN","IBCU9",37,0)
FTINPUT(Y) ;SCREEN FOR 399, .19 FORM TYPE
"RTN","IBCU9",38,0)
 N Z
"RTN","IBCU9",39,0)
 I Y=7,$P($G(^IBE(350.9,1,8)),U,20)=0 Q 0
"RTN","IBCU9",40,0)
 S Z=$G(^IBE(353,Y,2)) I $P(Z,U,2)="P",$P(Z,U,4) Q 1
"RTN","IBCU9",41,0)
 Q 0
"RTN","IBCU9",42,0)
 ;
"RTN","IBJPS")
0^107^B6552900^B6490988
"RTN","IBJPS",1,0)
IBJPS ;ALB/MAF,ARH - IBSP IB SITE PARAMETER SCREEN ;22-DEC-1995
"RTN","IBJPS",2,0)
 ;;2.0;INTEGRATED BILLING;**39,52,70,115,143,51,137,161,155,320,348,349,377,384,400,432,494,461,516,547,592**;21-MAR-94;Build 58
"RTN","IBJPS",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBJPS",4,0)
 ;
"RTN","IBJPS",5,0)
EN ; -- main entry point for IBJP IB SITE PARAMETERS, display IB site parameters
"RTN","IBJPS",6,0)
 D EN^VALM("IBJP IB SITE PARAMETERS")
"RTN","IBJPS",7,0)
 Q
"RTN","IBJPS",8,0)
 ;
"RTN","IBJPS",9,0)
HDR ; -- header code
"RTN","IBJPS",10,0)
 S VALMHDR(1)="Only authorized persons may edit this data."
"RTN","IBJPS",11,0)
 Q
"RTN","IBJPS",12,0)
 ;
"RTN","IBJPS",13,0)
INIT ; -- init variables and list array
"RTN","IBJPS",14,0)
 K ^TMP("IBJPS",$J),^TMP("IBJPSAX",$J)
"RTN","IBJPS",15,0)
 D BLD^IBJPS1
"RTN","IBJPS",16,0)
 Q
"RTN","IBJPS",17,0)
 ;
"RTN","IBJPS",18,0)
HELP ; -- help code
"RTN","IBJPS",19,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBJPS",20,0)
 Q
"RTN","IBJPS",21,0)
 ;
"RTN","IBJPS",22,0)
EXIT ; -- exit code
"RTN","IBJPS",23,0)
 K ^TMP("IBJPS",$J),^TMP("IBJPSAX",$J)
"RTN","IBJPS",24,0)
 D CLEAR^VALM1
"RTN","IBJPS",25,0)
 Q
"RTN","IBJPS",26,0)
 ;
"RTN","IBJPS",27,0)
NXEDIT ; -- IBJP IB SITE PARAMETER EDIT ACTION (EP): Select data set to edit, do edit
"RTN","IBJPS",28,0)
 N VALMY,IBSELN,IBSET
"RTN","IBJPS",29,0)
 D EN^VALM2($G(XQORNOD(0)))
"RTN","IBJPS",30,0)
 I $D(VALMY) S IBSELN=0 F  S IBSELN=$O(VALMY(IBSELN)) Q:'IBSELN  D
"RTN","IBJPS",31,0)
 . S IBSET=$P($G(^TMP("IBJPSAX",$J,IBSELN)),U,1) Q:'IBSET
"RTN","IBJPS",32,0)
 . D EDIT(IBSET)
"RTN","IBJPS",33,0)
 S VALMBCK="R"
"RTN","IBJPS",34,0)
 Q
"RTN","IBJPS",35,0)
 ;
"RTN","IBJPS",36,0)
EDIT(IBSET) ; edit IB Site Parameters
"RTN","IBJPS",37,0)
 D FULL^VALM1
"RTN","IBJPS",38,0)
 N DR
"RTN","IBJPS",39,0)
 I IBSET'="" D
"RTN","IBJPS",40,0)
 . ; MRD;IB*2.0*516 - Added TRICARE Pay-To Providers.
"RTN","IBJPS",41,0)
 . ; WCJ;IB*2.0*547 - shifted the numbers down to insert a new one
"RTN","IBJPS",42,0)
 . I IBSET=8 D EN^IBJPS5 Q
"RTN","IBJPS",43,0)
 . I IBSET=11 D EN^IBJPS3(0) Q
"RTN","IBJPS",44,0)
 . I IBSET=12 D EN^IBJPS3(1) Q
"RTN","IBJPS",45,0)
 . ;WCJ;IB*2.0*547 added default Administrative contractors for billing (medicare and commercial)
"RTN","IBJPS",46,0)
 . I IBSET=17 D EN^IBJPS6(1) Q   ; medicare
"RTN","IBJPS",47,0)
 . I IBSET=18 D EN^IBJPS6(2) Q   ; commercial
"RTN","IBJPS",48,0)
 . S DR=$P($T(@IBSET),";;",2,999)
"RTN","IBJPS",49,0)
 . Q
"RTN","IBJPS",50,0)
 ; WCJ;IB*2.0*547 - shifted the number down to insert a new one
"RTN","IBJPS",51,0)
 I IBSET=9,$$ICD9SYS^IBACSV(DT)=30 S $P(DR,";",1)=7.05
"RTN","IBJPS",52,0)
 ;
"RTN","IBJPS",53,0)
 I $G(DR)'="" S DIE="^IBE(350.9,",DA=1 D ^DIE K DA,DR,DIE,DIC,X,Y
"RTN","IBJPS",54,0)
 D INIT^IBJPS S VALMBCK="R"
"RTN","IBJPS",55,0)
 Q
"RTN","IBJPS",56,0)
 ;
"RTN","IBJPS",57,0)
 ;WCJ;IB*2.0*547 - cleared the spot for the new #8, added 17 & 18, move 16 to 19.
"RTN","IBJPS",58,0)
 ;gef;IB*2.0*547 - added 20
"RTN","IBJPS",59,0)
 ;JWS;IB*2.0*592 - added field 8.2 to 16
"RTN","IBJPS",60,0)
1 ;;.09;.13;.14
"RTN","IBJPS",61,0)
2 ;;1.2;.15;.11;.12;7.04
"RTN","IBJPS",62,0)
3 ;;1.09;1.07;2.07
"RTN","IBJPS",63,0)
4 ;;4.04;6.25;6.24
"RTN","IBJPS",64,0)
5 ;;.02;1.14;1.25;1.08
"RTN","IBJPS",65,0)
6 ;;1.23;1.16;1.22;1.19;1.15;1.17
"RTN","IBJPS",66,0)
7 ;;1.33;1.32;1.31;1.27;8.14T;8.15T;8.16T;8.19T
"RTN","IBJPS",67,0)
9 ;;1.29;1.3;1.18;1.28
"RTN","IBJPS",68,0)
10 ;;1.01;1.02;1.05
"RTN","IBJPS",69,0)
13 ;;2.08;2.09
"RTN","IBJPS",70,0)
14 ;;11.01
"RTN","IBJPS",71,0)
15 ;;10.02;10.03;10.04;10.05;D INIT^IBATFILE
"RTN","IBJPS",72,0)
16 ;;2.11;8.01;8.09;8.03;8.06;8.04;8.07;8.02;8.12T;8.11T;8.17T;8.2T
"RTN","IBJPS",73,0)
19 ;;50.01;50.02;50.05;50.06;50.03;50.04;50.07
"RTN","IBJPS",74,0)
20 ;;52.01;52.02
"RTN","IBJPS",75,0)
 ;
"RTN","IBJPS2")
0^108^B56657157^B54853458
"RTN","IBJPS2",1,0)
IBJPS2 ;ALB/MAF,ARH - IBSP IB SITE PARAMETER BUILD (cont) ;22-DEC-1995
"RTN","IBJPS2",2,0)
 ;;2.0;INTEGRATED BILLING;**39,52,115,143,51,137,161,155,320,348,349,377,384,400,432,494,461,516,547,592**;21-MAR-94;Build 58
"RTN","IBJPS2",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBJPS2",4,0)
 ;
"RTN","IBJPS2",5,0)
BLD2 ; - continue build screen array for IB parameters
"RTN","IBJPS2",6,0)
 ;
"RTN","IBJPS2",7,0)
 N Z,Z0,PTPSTR,BPZZ
"RTN","IBJPS2",8,0)
 D RIGHT(1,1,1) ; - facility/med center  (new line for each)
"RTN","IBJPS2",9,0)
 S IBLN=$$SET("Medical Center",$$EXSET^IBJU1($P(IBPD0,U,2),350.9,.02),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",10,0)
 S IBLN=$$SET("MAS Service",$$EXSET^IBJU1($P(IBPD1,U,14),350.9,1.14),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",11,0)
 ;
"RTN","IBJPS2",12,0)
 D LEFT(2)
"RTN","IBJPS2",13,0)
 S IBLN=$$SET("Default Division",$$EXSET^IBJU1($P(IBPD1,U,25),350.9,1.25),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",14,0)
 S IBLN=$$SET("Billing Supervisor",$$EXSET^IBJU1($P(IBPD1,U,8),350.9,1.08),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",15,0)
 ;
"RTN","IBJPS2",16,0)
 D RIGHT(1,1,1)
"RTN","IBJPS2",17,0)
 S IBLN=$$SET("Initiator Authorize",$$YN(+$P(IBPD1,U,23)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",18,0)
 S IBLN=$$SET("Ask HINQ in MCCR",$$YN(+$P(IBPD1,U,16)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",19,0)
 S IBLN=$$SET("Multiple Form Types",$$YN(+$P(IBPD1,U,22)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",20,0)
 ;
"RTN","IBJPS2",21,0)
 D LEFT(2)
"RTN","IBJPS2",22,0)
 S IBLN=$$SET("Xfer Proc to Sched",$$YN(+$P(IBPD1,U,19)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",23,0)
 S IBLN=$$SET("Use Non-PTF Codes",$$YN(+$P(IBPD1,U,15)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",24,0)
 S IBLN=$$SET("Use OP CPT screen",$$YN(+$P(IBPD1,U,17)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",25,0)
 ;
"RTN","IBJPS2",26,0)
 ; IB patch 349 for UB-04 claim form and parameters
"RTN","IBJPS2",27,0)
 D RIGHT(1,1,1)
"RTN","IBJPS2",28,0)
 S IBLN=$$SET("UB-04 Print IDs",$$EXSET^IBJU1($P(IBPD1,U,33),350.9,1.33),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",29,0)
 S IBLN=$$SET("CMS-1500 Print IDs",$$EXSET^IBJU1($P(IBPD1,U,32),350.9,1.32),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",30,0)
 S IBLN=$$SET("CMS-1500 Auto Prter",$$EXSET^IBJU1($P(IBPD8,U,14),350.9,8.14),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",31,0)
 S IBLN=$$SET("EOB Auto Prter",$$EXSET^IBJU1($P(IBPD8,U,16),350.9,8.16),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",32,0)
 ;
"RTN","IBJPS2",33,0)
 D LEFT(2)
"RTN","IBJPS2",34,0)
 S IBLN=$$SET("UB-04 Address Col",$P(IBPD1,U,31),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",35,0)
 S IBLN=$$SET("CMS-1500 Addr Col",$P(IBPD1,U,27),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",36,0)
 S IBLN=$$SET("UB-04 Auto Prter",$$EXSET^IBJU1($P(IBPD8,U,15),350.9,8.15),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",37,0)
 S IBLN=$$SET("MRA Auto Prter",$$EXSET^IBJU1($P(IBPD8,U,19),350.9,8.19),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",38,0)
 ;
"RTN","IBJPS2",39,0)
 ; VAD - IB*2.0*547 - inserted a new section 8.  Only count activated codes
"RTN","IBJPS2",40,0)
 D RIGHT(3,1,1)
"RTN","IBJPS2",41,0)
 S (Z,Z0)=0 F  S Z=$O(^IBE(350.9,1,15,"B",Z)) Q:'Z  I $P($G(^DGCR(399.2,Z,0)),U,3)=1 S Z0=Z0+1
"RTN","IBJPS2",42,0)
 S PTPSTR=Z0_" Activated Codes Defined"
"RTN","IBJPS2",43,0)
 S IBLN=$$SET("Printed Claims Rev Code Excl",PTPSTR,IBLN,IBLR,IBSEL)
"RTN","IBJPS2",44,0)
 ;
"RTN","IBJPS2",45,0)
 D RIGHT(1,1,1)
"RTN","IBJPS2",46,0)
 S Z=$$ICD9SYS^IBACSV(DT)
"RTN","IBJPS2",47,0)
 I Z=1 S IBLN=$$SET("Default RX DX Cd",$$EXSET^IBJU1($P(IBPD1,U,29),350.9,1.29)_" (ICD-9)",IBLN,IBLR,IBSEL)
"RTN","IBJPS2",48,0)
 I Z'=1 S IBLN=$$SET("Default RX DX Cd",$$EXSET^IBJU1($P(IBPD7,U,5),350.9,7.05)_" (ICD-10)",IBLN,IBLR,IBSEL)
"RTN","IBJPS2",49,0)
 S IBLN=$$SET("Default RX CPT Cd",$$EXSET^IBJU1($P(IBPD1,U,30),350.9,1.30),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",50,0)
 ;
"RTN","IBJPS2",51,0)
 D LEFT(2)
"RTN","IBJPS2",52,0)
 S IBLN=$$SET("Default ASC Rev Cd",$$EXSET^IBJU1($P(IBPD1,U,18),350.9,1.18),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",53,0)
 S IBLN=$$SET("Default RX Rev Cd",$$EXSET^IBJU1($P(IBPD1,U,28),350.9,1.28),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",54,0)
 ;
"RTN","IBJPS2",55,0)
 D RIGHT(1,1,1)
"RTN","IBJPS2",56,0)
 S IBLN=$$SET("Bill Signer Name","<No longer used>",IBLN,IBLR,IBSEL)
"RTN","IBJPS2",57,0)
 S IBLN=$$SET("Bill Signer Title","<No longer used>",IBLN,IBLR,IBSEL)
"RTN","IBJPS2",58,0)
 ;
"RTN","IBJPS2",59,0)
 D LEFT(2)
"RTN","IBJPS2",60,0)
 S IBLN=$$SET("Federal Tax #",$P(IBPD1,U,5),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",61,0)
 ;
"RTN","IBJPS2",62,0)
 D RIGHT(3,1,1) ; - Pay-To Providers - section 11
"RTN","IBJPS2",63,0)
 S (Z,Z0)=0 F  S Z=$O(^IBE(350.9,1,19,Z)) Q:'Z  S:$P($G(^IBE(350.9,1,19,Z,0)),U,5)="" Z0=Z0+1
"RTN","IBJPS2",64,0)
 S Z=+$P($G(^IBE(350.9,1,11)),U,3),PTPSTR=Z0_" defined"_$S(Z>0:", default - "_$P($$PTG^IBJPS3(Z,0),U),1:"")
"RTN","IBJPS2",65,0)
 S IBLN=$$SET("Pay-To Providers",PTPSTR,IBLN,IBLR,IBSEL)
"RTN","IBJPS2",66,0)
 ;
"RTN","IBJPS2",67,0)
 ; MRD;IB*2.0*516 - Added TRICARE Pay-To Providers.
"RTN","IBJPS2",68,0)
 D RIGHT(3,1,1) ; - TRICARE Pay-To Providers - section 12
"RTN","IBJPS2",69,0)
 S (Z,Z0)=0 F  S Z=$O(^IBE(350.9,1,29,Z)) Q:'Z  S:$P($G(^IBE(350.9,1,29,Z,0)),U,5)="" Z0=Z0+1
"RTN","IBJPS2",70,0)
 S Z=+$P($G(^IBE(350.9,1,11)),U,4),PTPSTR=Z0_" defined"_$S(Z>0:", default - "_$P($$PTG^IBJPS3(Z,1),U),1:"")
"RTN","IBJPS2",71,0)
 S IBLN=$$SET("TRICARE Pay-To Providers",PTPSTR,IBLN,IBLR,IBSEL)
"RTN","IBJPS2",72,0)
 ;
"RTN","IBJPS2",73,0)
 D RIGHT(3,1,1)
"RTN","IBJPS2",74,0)
 S IBLN=$$SET("Inpt Health Summary",$$EXSET^IBJU1($P(IBPD2,U,8),350.9,2.08),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",75,0)
 S IBLN=$$SET("Opt Health Summary",$$EXSET^IBJU1($P(IBPD2,U,9),350.9,2.09),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",76,0)
 ;
"RTN","IBJPS2",77,0)
 ; ePharmacy parameters
"RTN","IBJPS2",78,0)
 D RIGHT(7,1,1)
"RTN","IBJPS2",79,0)
 S IBLN=$$SET("HIPPA NCPDP Active Flag",$S($P(IBPD11,U)=1:"Active",1:"Not Active"),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",80,0)
 ;
"RTN","IBJPS2",81,0)
 ; transfer pricing
"RTN","IBJPS2",82,0)
 D RIGHT(1,1,1)
"RTN","IBJPS2",83,0)
 S IBLN=$$SET("Inpatient TP Active ",$$YN(+$P(IBPD10,U,2)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",84,0)
 S IBLN=$$SET("Outpatient TP Active",$$YN(+$P(IBPD10,U,3)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",85,0)
 S IBLN=$$SET("Pharmacy TP Active  ",$$YN(+$P(IBPD10,U,4)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",86,0)
 S IBLN=$$SET("Prosthetic TP Active",$$YN(+$P(IBPD10,U,5)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",87,0)
 ;
"RTN","IBJPS2",88,0)
 ; EDI/MRA parameters
"RTN","IBJPS2",89,0)
 D RIGHT(7,1,1)
"RTN","IBJPS2",90,0)
 N IBZ S IBZ=$P(IBPD8,U,3)
"RTN","IBJPS2",91,0)
 S IBLN=$$SET(" EDI/MRA Activated",$$EXSET^IBJU1(+$P(IBPD8,U,10),350.9,8.1),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",92,0)
 S IBLN=$$SET(" EDI Contact Phone",$P(IBPD2,U,11),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",93,0)
 S IBLN=$$SET(" EDI 837 Live Transmit Queue",$P(IBPD8,U),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",94,0)
 S IBLN=$$SET(" EDI 837 Test Transmit Queue",$P(IBPD8,U,9),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",95,0)
 S IBLN=$$SET(" Auto-Txmt Bill Frequency",$S(IBZ:"Every"_$S(IBZ>1:" "_$P(IBPD8,U,3),1:""),1:"")_$S(IBZ:" Day"_$S(IBZ=1:"",1:"s"),1:"Never Run"),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",96,0)
 S IBLN=$$SET(" Hours To Auto-Transmit",$P(IBPD8,U,6),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",97,0)
 S IBLN=$$SET(" Max # Bills Per Batch",$P(IBPD8,U,4),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",98,0)
 S IBLN=$$SET(" Only Allow 1 Ins Co/Claim Batch?",$$EXPAND^IBTRE(350.9,8.07,+$P(IBPD8,U,7)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",99,0)
 S IBLN=$$SET(" Last Auto-Txmt Run Date",$$DATE^IBJU1($P(IBPD8,U,5)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",100,0)
 S IBLN=$$SET(" Days To Wait To Purge Msgs",$P(IBPD8,U,2),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",101,0)
 S IBLN=$$SET(" Allow MRA Processing?",$$YN(+$P(IBPD8,U,12)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",102,0)
 S IBLN=$$SET(" Enable Automatic MRA Processing?",$$YN(+$P(IBPD8,U,11)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",103,0)
 S IBLN=$$SET(" Enable Auto Reg EOB Processing?",$$YN(+$P(IBPD8,U,17)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",104,0)
 ;JWS;IB*2.0*592;add on/off for Dental
"RTN","IBJPS2",105,0)
 I $P(IBPD8,U,20)="" S $P(IBPD8,U,20)=1  ;default to yes
"RTN","IBJPS2",106,0)
 S IBLN=$$SET(" Allow Dental Claim Processing?",$$YN(+$P(IBPD8,U,20)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",107,0)
 ;
"RTN","IBJPS2",108,0)
 ; WCJ;IB*2.0*547;administrative contractors medicare
"RTN","IBJPS2",109,0)
 D RIGHT(3,1,1)
"RTN","IBJPS2",110,0)
 S Z=+$P($G(^IBE(350.9,1,81,0)),U,4)_" defined"
"RTN","IBJPS2",111,0)
 S IBLN=$$SET("Alt Prim Payer ID Typ-Medicare",Z,IBLN,IBLR,IBSEL)
"RTN","IBJPS2",112,0)
 ;
"RTN","IBJPS2",113,0)
 ; WCJ;IB*2.0*547;administrative contractors commercial
"RTN","IBJPS2",114,0)
 D RIGHT(3,1,1)
"RTN","IBJPS2",115,0)
 S Z=+$P($G(^IBE(350.9,1,82,0)),U,4)_" defined"
"RTN","IBJPS2",116,0)
 S IBLN=$$SET("Alt Prim Payer ID Typ-Commercial",Z,IBLN,IBLR,IBSEL)
"RTN","IBJPS2",117,0)
 ;
"RTN","IBJPS2",118,0)
 ; Ingenix ClaimsManager Information
"RTN","IBJPS2",119,0)
 D RIGHT(9,1,1)
"RTN","IBJPS2",120,0)
 S IBLN=$$SET("Are we using ClaimsManager?",$$YN(+$P(IBPD50,U,1)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",121,0)
 S IBLN=$$SET("Is ClaimsManager working OK?",$$YN(+$P(IBPD50,U,2)),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",122,0)
 S IBLN=$$SET("ClaimsManager TCP/IP Address",$P(IBPD50,U,5),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",123,0)
 S IBCISOCK=$O(^IBE(350.9,1,50.06,"B",""))
"RTN","IBJPS2",124,0)
 S IBLN=$$SET("ClaimsManager TCP/IP Ports",IBCISOCK,IBLN,IBLR,IBSEL)
"RTN","IBJPS2",125,0)
 F  S IBCISOCK=$O(^IBE(350.9,1,50.06,"B",IBCISOCK)) Q:IBCISOCK=""  D
"RTN","IBJPS2",126,0)
 . S IBLN=$$SET("",IBCISOCK,IBLN,IBLR,IBSEL)
"RTN","IBJPS2",127,0)
 . Q
"RTN","IBJPS2",128,0)
 S IBLN=$$SET("General Error MailGroup",$$EXSET^IBJU1($P(IBPD50,U,3),350.9,50.03),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",129,0)
 S IBLN=$$SET("Communication Error MailGroup",$$EXSET^IBJU1($P(IBPD50,U,4),350.9,50.04),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",130,0)
 S IBCIMFLG=$$EXTERNAL^DILFD(350.9,50.07,"",$P(IBPD50,U,7))
"RTN","IBJPS2",131,0)
 I IBCIMFLG="" S IBCIMFLG="PRIORITY"
"RTN","IBJPS2",132,0)
 S IBLN=$$SET("MailMan Messages",IBCIMFLG,IBLN,IBLR,IBSEL)
"RTN","IBJPS2",133,0)
 ;
"RTN","IBJPS2",134,0)
 ; Request For Additional Info patch 547
"RTN","IBJPS2",135,0)
 D RIGHT(9,1,1)
"RTN","IBJPS2",136,0)
 S Z=$G(^IBE(350.9,1,52)) S:$P(Z,U)="" $P(Z,U)="No Purge"
"RTN","IBJPS2",137,0)
 S IBLN=$$SET("Days to store 277RFAI Transactions",$P(Z,U),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",138,0)
 S IBLN=$$SET("Days to wait to purge entry on RFAI Management Worklist",$P(Z,U,2),IBLN,IBLR,IBSEL)
"RTN","IBJPS2",139,0)
 Q
"RTN","IBJPS2",140,0)
 ;
"RTN","IBJPS2",141,0)
SET(TTL,DATA,LN,LR,SEL,HDR) ;
"RTN","IBJPS2",142,0)
 N IBY,IBX,IBC S IBC=": " I TTL="" S IBC="  "
"RTN","IBJPS2",143,0)
 S IBY=TTL_$J("",(IBTW(LR)-$L(TTL)-2))_$S('$G(HDR):IBC_DATA,1:""),IBX=$G(^TMP("IBJPS",$J,LN,0))
"RTN","IBJPS2",144,0)
 S IBX=$$SETSTR^VALM1(IBY,IBX,IBTC(LR),(IBTW(LR)+IBSW(LR)))
"RTN","IBJPS2",145,0)
 D SET1(IBX,LN,SEL)
"RTN","IBJPS2",146,0)
 S LN=LN+1
"RTN","IBJPS2",147,0)
 Q LN
"RTN","IBJPS2",148,0)
 ;
"RTN","IBJPS2",149,0)
SET1(STR,LN,SEL,HI) ; set up TMP array with screen data
"RTN","IBJPS2",150,0)
 S ^TMP("IBJPS",$J,LN,0)=STR
"RTN","IBJPS2",151,0)
 S ^TMP("IBJPS",$J,"IDX",LN,SEL)=""
"RTN","IBJPS2",152,0)
 S ^TMP("IBJPSAX",$J,SEL)=SEL
"RTN","IBJPS2",153,0)
 I $G(HI)'="" D CNTRL^VALM10(LN,1,4,IOINHI,IOINORM)
"RTN","IBJPS2",154,0)
 ;I $G(RV) D CNTRL^VALM10(LN,6,19,IOUON,IOUOFF)
"RTN","IBJPS2",155,0)
 Q
"RTN","IBJPS2",156,0)
 ;
"RTN","IBJPS2",157,0)
YN(X) Q $S(+X:"YES",1:"NO")
"RTN","IBJPS2",158,0)
 ;
"RTN","IBJPS2",159,0)
RIGHT(LR,SEL,BL) ; - reset control variables for right side of screen
"RTN","IBJPS2",160,0)
 S IBLN=$S(IBLN>IBGRPE:IBLN,1:IBGRPE) I $G(BL) S IBLN=$$SET("","",IBLN,IBLR,IBSEL)
"RTN","IBJPS2",161,0)
 S IBLR=$G(LR),IBGRPB=IBLN I +$G(SEL) S IBSEL=IBSEL+1 D SET1("["_IBSEL_"]",IBLN,IBSEL,1)
"RTN","IBJPS2",162,0)
 Q
"RTN","IBJPS2",163,0)
 ;
"RTN","IBJPS2",164,0)
LEFT(LR) ; - reset control variables for left side of screen
"RTN","IBJPS2",165,0)
 S IBLR=$G(LR),IBGRPE=IBLN,IBLN=IBGRPB
"RTN","IBJPS2",166,0)
 Q
"RTN","IBJTBA")
0^20^B48389445^B47704130
"RTN","IBJTBA",1,0)
IBJTBA ;ALB/ARH - TPI BILL CHARGE INFO SCREEN ;01-MAR-1995
"RTN","IBJTBA",2,0)
 ;;2.0;INTEGRATED BILLING;**39,80,51,137,135,309,349,389,592**;21-MAR-94;Build 58
"RTN","IBJTBA",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBJTBA",4,0)
 ;
"RTN","IBJTBA",5,0)
EN ; -- main entry point for IBJ TP BILL CHARGES
"RTN","IBJTBA",6,0)
 D EN^VALM("IBJT BILL CHARGES")
"RTN","IBJTBA",7,0)
 Q
"RTN","IBJTBA",8,0)
 ;
"RTN","IBJTBA",9,0)
HDR ; -- header code
"RTN","IBJTBA",10,0)
 D HDR^IBJTU1(+IBIFN,+DFN,12)
"RTN","IBJTBA",11,0)
 Q
"RTN","IBJTBA",12,0)
 ;
"RTN","IBJTBA",13,0)
INIT ; -- init variables and list array
"RTN","IBJTBA",14,0)
 N IBOK,IBEOBDET
"RTN","IBJTBA",15,0)
 K ^TMP("IBJTBA",$J) N IBFT
"RTN","IBJTBA",16,0)
 I '$G(DFN)!'$G(IBIFN) S VALMQUIT="" G INITQ
"RTN","IBJTBA",17,0)
 S IBFT=+$P($G(^DGCR(399,+IBIFN,0)),U,19),IBOK=1
"RTN","IBJTBA",18,0)
 I $D(^IBM(361.1,"B",IBIFN))!$D(^IBM(361.1,"C",IBIFN)) D  G:'IBOK INITQ
"RTN","IBJTBA",19,0)
 . S DIR("A")="DO YOU WANT ALL EEOB DETAILS?: ",DIR("B")="NO",DIR(0)="YA"
"RTN","IBJTBA",20,0)
 . D FULL^VALM1 W ! D ^DIR K DIR
"RTN","IBJTBA",21,0)
 . I $D(DTOUT)!$D(DUOUT) S IBOK=0 Q
"RTN","IBJTBA",22,0)
 . S IBEOBDET=+Y
"RTN","IBJTBA",23,0)
 D BLD
"RTN","IBJTBA",24,0)
INITQ Q
"RTN","IBJTBA",25,0)
 ;
"RTN","IBJTBA",26,0)
MRA ; -- mra/eob
"RTN","IBJTBA",27,0)
 N IBI,Z,IBSTR,IBSHEOB,IBCT
"RTN","IBJTBA",28,0)
 S IBCT=0
"RTN","IBJTBA",29,0)
 S IBI=0 F  S IBI=$O(^IBM(361.1,"B",IBIFN,IBI)) Q:'IBI  S Z=+$O(^IBM(361.1,IBI,8,0)) I '$O(^(Z)) S IBCT=IBCT+1,IBSHEOB(IBI)=0  ; Entire EOB belongs to the bill
"RTN","IBJTBA",30,0)
 S IBI=0 F  S IBI=$O(^IBM(361.1,"C",IBIFN,IBI)) Q:'IBI  S IBCT=IBCT+1,IBSHEOB(IBI)=1 ; EOB has been reapportioned at the site
"RTN","IBJTBA",31,0)
 I 'IBCT D
"RTN","IBJTBA",32,0)
 . S IBSTR=$$SETLN("No EEOB/MRA Information","",1,79)
"RTN","IBJTBA",33,0)
 . S IBLN=$$SET(IBSTR,IBLN)
"RTN","IBJTBA",34,0)
 I IBCT D
"RTN","IBJTBA",35,0)
 . S Z=0
"RTN","IBJTBA",36,0)
 . S IBI=0 F  S IBI=$O(IBSHEOB(IBI)) Q:'IBI  S Z=Z+1 D SHEOB^IBJTBA1(IBI,+IBSHEOB(IBI),Z,IBCT)
"RTN","IBJTBA",37,0)
 ;
"RTN","IBJTBA",38,0)
 Q
"RTN","IBJTBA",39,0)
 ;
"RTN","IBJTBA",40,0)
HELP ; -- help code
"RTN","IBJTBA",41,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBJTBA",42,0)
 Q
"RTN","IBJTBA",43,0)
 ;
"RTN","IBJTBA",44,0)
EXIT ; -- exit code
"RTN","IBJTBA",45,0)
 K ^TMP("IBJTBA",$J)
"RTN","IBJTBA",46,0)
 D CLEAR^VALM1
"RTN","IBJTBA",47,0)
 Q
"RTN","IBJTBA",48,0)
 ;
"RTN","IBJTBA",49,0)
BLD ; charges, as they would display on the bill
"RTN","IBJTBA",50,0)
 N IBXDATA,IBXSAVE
"RTN","IBJTBA",51,0)
 ;JWS:IB*2.0*592:Dental form#7 as professional
"RTN","IBJTBA",52,0)
 ;IA# 3820
"RTN","IBJTBA",53,0)
 I $P($G(^DGCR(399,+IBIFN,0)),U,19)=2!($P($G(^(0)),U,19)=7) D H1500 Q
"RTN","IBJTBA",54,0)
 D UB04
"RTN","IBJTBA",55,0)
 K ^TMP("IBXSAVE",$J)
"RTN","IBJTBA",56,0)
 Q
"RTN","IBJTBA",57,0)
 ;
"RTN","IBJTBA",58,0)
H1500 ; block 24
"RTN","IBJTBA",59,0)
 N X,IBI,IBJ,IBLN,IBX,IBSTR,IBLKLN,IBPFORM,IBLIN
"RTN","IBJTBA",60,0)
 K ^TMP("IBXSAVE",$J)
"RTN","IBJTBA",61,0)
 S IBLIN=$$BOX24D^IBCEF11("",1),IBLKLN=0,IBLN=1
"RTN","IBJTBA",62,0)
 Q:'$G(IBIFN)  K ^TMP("IBXDISP",$J)
"RTN","IBJTBA",63,0)
 S IBPFORM=$S($P($G(^IBE(353,2,2)),U,8):$P(^(2),U,8),1:2),IBLN=1
"RTN","IBJTBA",64,0)
 S IBX=$$BILLN^IBCEFG0(1,"1^99",IBLIN,+IBIFN,IBPFORM)
"RTN","IBJTBA",65,0)
 S IBI=$O(^TMP("IBXDISP",$J,""),-1)
"RTN","IBJTBA",66,0)
 S IBJ="" F  S IBJ=$O(^TMP("IBXDISP",$J,IBI,IBJ),-1) Q:$S('IBJ:1,1:$TR($G(^(IBJ))," ")'="")  K ^TMP("IBXDISP",$J,IBI,IBJ)
"RTN","IBJTBA",67,0)
 I '$O(^TMP("IBXDISP",$J,IBI,0)) S VALMSG="No charges or procedures defined.",VALMQUIT="" G H1500Q
"RTN","IBJTBA",68,0)
 S IBI="" F  S IBI=$O(^TMP("IBXDISP",$J,IBI)) Q:'IBI  S IBJ=0 F  S IBJ=$O(^TMP("IBXDISP",$J,IBI,IBJ)) Q:'IBJ  D
"RTN","IBJTBA",69,0)
 . S IBX=$G(^TMP("IBXDISP",$J,IBI,IBJ)),IBLN=$$SET(IBX,IBLN)
"RTN","IBJTBA",70,0)
 K ^TMP("IBXDISP",$J)
"RTN","IBJTBA",71,0)
 D COB,MRA
"RTN","IBJTBA",72,0)
 I $$ISRX^IBCEF1(IBIFN) D RX
"RTN","IBJTBA",73,0)
 I $$ISPROS^IBCEF1(IBIFN) D PROS
"RTN","IBJTBA",74,0)
 S VALMCNT=IBLN-1
"RTN","IBJTBA",75,0)
H1500Q Q
"RTN","IBJTBA",76,0)
 ;
"RTN","IBJTBA",77,0)
UB04 ;form locator 42-49,   IBIFN required
"RTN","IBJTBA",78,0)
 N X,Y,DIR,IBI,IBJ,IBX,IBLN,IBLC,IBLIN,IBPFORM,IBSTATE,IBCBILL,IBINPAT,IBQ,Z,Z0
"RTN","IBJTBA",79,0)
 K ^TMP("IBXSAVE",$J)
"RTN","IBJTBA",80,0)
 S IBLIN=$$RCBOX^IBCEF11()
"RTN","IBJTBA",81,0)
 S IBQ=0,IBLC=9 Q:'$G(IBIFN)  K ^TMP("IBXDISP",$J)
"RTN","IBJTBA",82,0)
 S IBPFORM=$S($P($G(^IBE(353,3,2)),U,8):$P(^(2),U,8),1:3)
"RTN","IBJTBA",83,0)
 S IBX=$$BILLN^IBCEFG0(1,"1^99",IBLIN,+IBIFN,IBPFORM)
"RTN","IBJTBA",84,0)
 I '$O(^TMP("IBXDISP",$J,0)) S VALMSG="No charges defined.",VALMQUIT="" G UB04Q
"RTN","IBJTBA",85,0)
 S Z="" F  S Z=$O(^TMP("IBXDISP",$J,1,Z),-1) Q:Z=""  S Z0=$G(^(Z)) Q:$TR(Z0," ")'=""  K ^(Z)
"RTN","IBJTBA",86,0)
 S:Z ^TMP("IBXDISP",$J,1,Z+1)=" "
"RTN","IBJTBA",87,0)
 S IBINPAT=$$INPAT^IBCEF(IBIFN,1)
"RTN","IBJTBA",88,0)
 S IBSTATE=$G(^DGCR(399,IBIFN,"U")),IBCBILL=$G(^DGCR(399,IBIFN,0))
"RTN","IBJTBA",89,0)
 ;
"RTN","IBJTBA",90,0)
 S (VALMCNT,IBLN)=1,IBLKLN=0
"RTN","IBJTBA",91,0)
 I +IBINPAT D  S IBLN=$$SET(IBSTR,IBLN)
"RTN","IBJTBA",92,0)
 . S IBX=$P(IBSTATE,U,15),IBSTR=+IBX_" DAY"_$S(IBX'=1:"S",1:"")_" INPATIENT CARE"
"RTN","IBJTBA",93,0)
 . S IBX=$$LOS^IBCU64(+IBSTATE,+$P(IBSTATE,U,2),+$P(IBCBILL,U,6)),IBX=IBX-$$LOS1^IBCU64(IBIFN) I IBX>0 S IBSTR=IBSTR_$J("Pass Days: "_IBX,55)
"RTN","IBJTBA",94,0)
 ;
"RTN","IBJTBA",95,0)
 S IBI="" F  S IBI=$O(^TMP("IBXDISP",$J,IBI)) Q:'IBI  S IBJ=0 F  S IBJ=$O(^TMP("IBXDISP",$J,IBI,IBJ)) Q:'IBJ  D
"RTN","IBJTBA",96,0)
 . S IBX=$G(^TMP("IBXDISP",$J,IBI,IBJ)),IBLN=$$SET(IBX,IBLN)
"RTN","IBJTBA",97,0)
 . I $E(IBX,1,3)="001" D COB
"RTN","IBJTBA",98,0)
 ;
"RTN","IBJTBA",99,0)
 K ^TMP("IBXDISP",$J)
"RTN","IBJTBA",100,0)
 ;
"RTN","IBJTBA",101,0)
 D MRA
"RTN","IBJTBA",102,0)
 S VALMCNT=IBLN-1
"RTN","IBJTBA",103,0)
UB04Q Q
"RTN","IBJTBA",104,0)
 ;
"RTN","IBJTBA",105,0)
SETLN(STR,IBX,COL,WD) ;
"RTN","IBJTBA",106,0)
 S IBX=$$SETSTR^VALM1(STR,IBX,COL,WD)
"RTN","IBJTBA",107,0)
 Q IBX
"RTN","IBJTBA",108,0)
 ;
"RTN","IBJTBA",109,0)
SET(STR,LN) ; set up TMP array with screen data (allows 2 blank lines, if not at end of array)
"RTN","IBJTBA",110,0)
 N IBX,IBI I STR?80" " S IBLKLN=IBLKLN+1 G SETQ
"RTN","IBJTBA",111,0)
 F IBI=1:1:IBLKLN D SET^VALM10(LN," ") S LN=LN+1 Q:IBI>1
"RTN","IBJTBA",112,0)
 D SET^VALM10(LN,STR)
"RTN","IBJTBA",113,0)
 S LN=LN+1,IBLKLN=0
"RTN","IBJTBA",114,0)
SETQ Q LN
"RTN","IBJTBA",115,0)
 ;
"RTN","IBJTBA",116,0)
COB ; if there is an offset or a secondary/tertiary payer add it to the display, with ins co, and prior bill #
"RTN","IBJTBA",117,0)
 ; IBIFN and IBLN must exist upon entry, IBLN is updated with new line count
"RTN","IBJTBA",118,0)
 N IBM,IBM1,IBI,IBJ,IBD,IBSTR,IBCU2,IBCU1 Q:'$G(IBIFN)
"RTN","IBJTBA",119,0)
 S IBM=$G(^DGCR(399,IBIFN,"M")),IBM1=$G(^DGCR(399,IBIFN,"M1"))
"RTN","IBJTBA",120,0)
 S IBCU2=$G(^DGCR(399,IBIFN,"U2")),IBCU1=$G(^DGCR(399,IBIFN,"U1"))
"RTN","IBJTBA",121,0)
 S IBJ=$P($G(^DGCR(399,IBIFN,0)),U,21),IBJ=$S(IBJ="P":3,IBJ="S":3,IBJ="T":3,1:0),IBSTR=""
"RTN","IBJTBA",122,0)
 I +$P(IBM,U,2)!(+$P(IBM,U,3)) F IBI=1:1:IBJ I +$P(IBM,U,IBI) D  S IBLN=$$SET(IBSTR,IBLN)
"RTN","IBJTBA",123,0)
 . I IBSTR="" S IBLN=$$SET("",IBLN)
"RTN","IBJTBA",124,0)
 . S IBD=$S(IBI=1:"Primary",IBI=2:"Secondary",1:"Tertiary")_": " S IBSTR=$$SETLN(IBD,"",5,11)
"RTN","IBJTBA",125,0)
 . S IBD=$P($G(^DIC(36,+$P(IBM,U,IBI),0)),U,1) S IBSTR=$$SETLN(IBD,IBSTR,17,25)
"RTN","IBJTBA",126,0)
 . I $P(IBCU2,U,(IBI+3))'="" S IBD=$J(+$P(IBCU2,U,(IBI+3)),9,2) S IBSTR=$$SETLN(IBD,IBSTR,44,11)
"RTN","IBJTBA",127,0)
 . I $P(IBM1,U,(IBI+4))'="" S IBD=$$BN1^PRCAFN(+$P(IBM1,U,(IBI+4))) S IBSTR=$$SETLN(IBD,IBSTR,60,11)
"RTN","IBJTBA",128,0)
 I +$P(IBCU1,U,2) D  S IBLN=$$SET(IBSTR,IBLN)
"RTN","IBJTBA",129,0)
 . I IBSTR="" S IBLN=$$SET("",IBLN)
"RTN","IBJTBA",130,0)
 . S IBD="Offset: " S IBSTR=$$SETLN(IBD,"",5,11)
"RTN","IBJTBA",131,0)
 . S IBD=$P(IBCU1,U,3) S IBSTR=$$SETLN(IBD,IBSTR,17,25)
"RTN","IBJTBA",132,0)
 . S IBD=$J($P(IBCU1,U,2),9,2) S IBSTR=$$SETLN(IBD,IBSTR,44,11)
"RTN","IBJTBA",133,0)
 . S IBD=$P(IBCU1,U,1)-$P(IBCU1,U,2),IBD="Billed: "_$J(IBD,0,2) S IBSTR=$$SETLN(IBD,IBSTR,60,17)
"RTN","IBJTBA",134,0)
 Q
"RTN","IBJTBA",135,0)
 ;
"RTN","IBJTBA",136,0)
RX ;RX refill info for CMS-1500 TPJI display
"RTN","IBJTBA",137,0)
 N Z,Z0,Z1,IBSPC,IBD,IBI,IBSTR,IBARRAY,IBRXX
"RTN","IBJTBA",138,0)
 S IBLN=IBLN+1
"RTN","IBJTBA",139,0)
 S IBSPC=$J("",5)
"RTN","IBJTBA",140,0)
 D SET^IBCSC5A(IBIFN,.IBARRAY)
"RTN","IBJTBA",141,0)
 I $D(IBARRAY) D
"RTN","IBJTBA",142,0)
 . S (Z,Z0)=0 F  S Z0=$O(IBARRAY(Z0)) Q:Z0=""  S Z1=0 F  S Z1=$O(IBARRAY(Z0,Z1)) Q:'Z1  S Z=Z+1 S IBXDATA(Z)=$$DAT1^IBOUTL(Z1)_U_$G(IBARRAY(Z0,Z1))
"RTN","IBJTBA",143,0)
 S IBD=$$SET("",IBLN)
"RTN","IBJTBA",144,0)
 S IBD="PRESCRIPTION REFILLS: (For TPJI display only)"
"RTN","IBJTBA",145,0)
 S IBSTR=$$SETLN(IBD,"",1,79),IBLN=$$SET(IBSTR,IBLN)
"RTN","IBJTBA",146,0)
 S IBI=0 F  S IBI=$O(IBXDATA(IBI)) Q:IBI=""  D
"RTN","IBJTBA",147,0)
 . S IBRXX=$G(IBXDATA(IBI))
"RTN","IBJTBA",148,0)
 . D ZERO^IBRXUTL($P(IBRXX,U,3))
"RTN","IBJTBA",149,0)
 . S IBD=$J($P(IBRXX,U,7),9,2)_IBSPC_$P(IBRXX,U)_IBSPC_$G(^TMP($J,"IBDRUG",+$P(IBRXX,U,3),.01))
"RTN","IBJTBA",150,0)
 . K ^TMP($J,"IBDRUG")
"RTN","IBJTBA",151,0)
 . S IBSTR=$$SETLN(IBD,"",1,79),IBLN=$$SET(IBSTR,IBLN)
"RTN","IBJTBA",152,0)
 . S IBD="QTY: "_$P(IBRXX,U,5)_" for "_$P(IBRXX,U,4)_" days supply "_"NDC# "_$P(IBRXX,U,6)
"RTN","IBJTBA",153,0)
 . S IBSTR=$$SETLN(IBD,"",23,79),IBLN=$$SET(IBSTR,IBLN)
"RTN","IBJTBA",154,0)
 Q
"RTN","IBJTBA",155,0)
 ;
"RTN","IBJTBA",156,0)
PROS ;prosthetic info for CMS-1500 TPJI display
"RTN","IBJTBA",157,0)
 N Z,Z0,Z1,IBARRAY,IBSPC,IBD,IBI,IBSTR
"RTN","IBJTBA",158,0)
 S IBSPC=$J("",10),IBLN=IBLN+1
"RTN","IBJTBA",159,0)
 D SET^IBCSC5B(IBIFN,.IBARRAY)
"RTN","IBJTBA",160,0)
 I $D(IBARRAY) D
"RTN","IBJTBA",161,0)
 . S (Z,Z0)=0 F  S Z0=$O(IBARRAY(Z0)) Q:Z0=""  S Z1=0 F  S Z1=$O(IBARRAY(Z0,Z1)) Q:'Z1  S Z=Z+1,IBXDATA(Z)=$$DAT1^IBOUTL(Z0)_U_$E($$PINB^IBCSC5B(+IBARRAY(Z0,Z1)),1,39)
"RTN","IBJTBA",162,0)
 S IBD=$$SET("",IBLN)
"RTN","IBJTBA",163,0)
 S IBD="PROSTHETIC REFILLS: (For TPJI display only)"
"RTN","IBJTBA",164,0)
 S IBSTR=$$SETLN(IBD,"",1,79),IBLN=$$SET(IBSTR,IBLN)
"RTN","IBJTBA",165,0)
 S IBI=0 F  S IBI=$O(IBXDATA(IBI)) Q:IBI=""  D
"RTN","IBJTBA",166,0)
 . S IBD=$P(IBXDATA(IBI),U)_IBSPC_$P(IBXDATA(IBI),U,2)
"RTN","IBJTBA",167,0)
 . S IBSTR=$$SETLN(IBD,"",1,79),IBLN=$$SET(IBSTR,IBLN)
"RTN","IBJTBA",168,0)
 Q
"RTN","IBJTBA",169,0)
 ;
"RTN","IBJTCA1")
0^19^B59576910^B59453492
"RTN","IBJTCA1",1,0)
IBJTCA1 ;ALB/ARH - TPI CLAIMS INFO BUILD ;10/31/07  14:17
"RTN","IBJTCA1",2,0)
 ;;2.0;INTEGRATED BILLING;**39,80,106,137,223,276,363,384,432,452,473,497,521,516,592**;21-MAR-94;Build 58
"RTN","IBJTCA1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBJTCA1",4,0)
 ;
"RTN","IBJTCA1",5,0)
BLD ; build array for Third Party Joint Inquiry Claims Info screen, IBIFN must be defined
"RTN","IBJTCA1",6,0)
 ;
"RTN","IBJTCA1",7,0)
 N X,IBY,IBZ,IBZ0,IBI,IBT,IBD,IBLN,IBLR,IBD0,IBDI1,IBDM,IBDM1,IBDU,IBDS,IBDU2,IBID0,IBID13,IBNC,IBTC,IBTW,IBSW,IBGRPB,IBGRPE,IBWNR,IBDTX,IBBX19,IBPRVO,IBNABP,IBLVL,IBCNT,IBPRVTYP,IBVL
"RTN","IBJTCA1",8,0)
 N IBXSAVE  ; IB*2.0*473 bi
"RTN","IBJTCA1",9,0)
 S VALMCNT=0,X="",IBD0=$G(^DGCR(399,+$G(IBIFN),0)) I IBD0="" S VALMQUIT="" G BLDQ
"RTN","IBJTCA1",10,0)
 F IBI="M","M1","U","S","U2","TX" S @("IBD"_IBI)=$G(^DGCR(399,+IBIFN,IBI))
"RTN","IBJTCA1",11,0)
 S IBDI1=$P(IBD0,U,21),IBDI1=$S(IBDI1="S":2,IBDI1="T":3,1:1) S IBDI1=$$POLICY^IBCEF(IBIFN,,IBDI1)
"RTN","IBJTCA1",12,0)
 S IBID0=$G(^DIC(36,+IBDI1,0)),IBID13=$G(^DIC(36,+IBDI1,.13))
"RTN","IBJTCA1",13,0)
 ;
"RTN","IBJTCA1",14,0)
 S (IBLN,VALMCNT)=1
"RTN","IBJTCA1",15,0)
 ;
"RTN","IBJTCA1",16,0)
 ; MRD;IB*2.0*516 - Try to make the following more readable; also
"RTN","IBJTCA1",17,0)
 ; added IBTC(7), IBTW(7) and IBSW(7).
"RTN","IBJTCA1",18,0)
 ;IB*2.0*432/TAZ - Added IBTW(6) and IBSW(6)
"RTN","IBJTCA1",19,0)
 ;S (IBNC(1),IBTC(1),IBTC(4),IBTC(6))=2,IBTC(5)=78,(IBNC(2),IBTC(2))=42,IBNC(3)=35,IBTW(1)=15,IBTW(2)=16,IBTW(4)=12,IBTW(5)=1,IBTW(6)=20,IBSW(1)=23,IBSW(2)=21,IBSW(4)=60,IBSW(5)=1,IBSW(6)=49
"RTN","IBJTCA1",20,0)
 ;
"RTN","IBJTCA1",21,0)
 S IBNC(1)=2,IBTC(1)=2,IBTW(1)=15,IBSW(1)=23
"RTN","IBJTCA1",22,0)
 S IBNC(2)=42,IBTC(2)=42,IBTW(2)=16,IBSW(2)=21
"RTN","IBJTCA1",23,0)
 S IBNC(3)=35
"RTN","IBJTCA1",24,0)
 S IBTC(4)=2,IBTW(4)=12,IBSW(4)=60
"RTN","IBJTCA1",25,0)
 S IBTC(5)=78,IBTW(5)=1,IBSW(5)=1
"RTN","IBJTCA1",26,0)
 S IBTC(6)=2,IBTW(6)=20,IBSW(6)=49
"RTN","IBJTCA1",27,0)
 S IBTC(7)=2,IBTW(7)=20,IBSW(7)=58
"RTN","IBJTCA1",28,0)
 ;
"RTN","IBJTCA1",29,0)
 S IBLR=1
"RTN","IBJTCA1",30,0)
 ;
"RTN","IBJTCA1",31,0)
 S IBT="Insurance Demographics" S IBLN=$$SETN(IBT,IBLN,IBLR,1)
"RTN","IBJTCA1",32,0)
 S IBWNR=$$WNRBILL^IBEFUNC(IBIFN)
"RTN","IBJTCA1",33,0)
 S IBNABP=$$NABP^IBNCPDPU(IBIFN)
"RTN","IBJTCA1",34,0)
 S IBT=$S(IBWNR:" *",1:"  ")_"Bill Payer: ",IBD=$P(IBID0,U,1) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",35,0)
 S IBT="Claim Address: " D  S IBD=$P(IBDM,U,5) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",36,0)
 . I $P(IBID0,U,1)'=$P(IBDM,U,4) S IBD=$P(IBDM,U,4) S IBLN=$$SET(IBT,IBD,IBLN,IBLR) S IBT=""
"RTN","IBJTCA1",37,0)
 I $P(IBDM,U,6)'="" S IBT="",IBD=$P(IBDM,U,6) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",38,0)
 I $P(IBDM1,U,1)'="" S IBT="",IBD=$P(IBDM1,U,1) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",39,0)
 S IBT="",IBD=$P(IBDM,U,7),IBD=IBD_$S(IBD'="":", ",1:"")_$P($G(^DIC(5,+$P(IBDM,U,8),0)),U,2)_" "_$P(IBDM,U,9),IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",40,0)
 S IBT="Claim Phone: ",IBD=$P($$BADD^IBJTU3(+IBIFN),U,2) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",41,0)
 S IBLN=$$SET("","",IBLN,5)
"RTN","IBJTCA1",42,0)
 ;
"RTN","IBJTCA1",43,0)
 ; MRD;IB*2.0*516 - Use an IBLR of 7 for this section, then reset below.
"RTN","IBJTCA1",44,0)
 S IBLR=7
"RTN","IBJTCA1",45,0)
 S IBT="Subscriber Demographics" S IBLN=$$SETN(IBT,IBLN,1,1)
"RTN","IBJTCA1",46,0)
 S IBT="Group Number: ",IBD=$P(IBDI1,U,3) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",47,0)
 S IBT="Group Name: ",IBD=$P(IBDI1,U,15) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",48,0)
 S IBT="Subscriber ID: ",IBD=$P(IBDI1,U,2) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",49,0)
 S IBT="Employer: ",IBD=$$EMPL(+DFN) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",50,0)
 S IBT="Insured's Name: ",IBD=$P(IBDI1,U,17) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",51,0)
 S IBT="Relationship: ",IBD=$$EXSET^IBJU1($P(IBDI1,U,16),2.312,16) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",52,0)
 S IBLR=1
"RTN","IBJTCA1",53,0)
 ;
"RTN","IBJTCA1",54,0)
 S (IBNC(1),IBTC(1))=2,(IBNC(2),IBTC(2))=42,IBNC(3)=29,IBTW(1)=12,IBTW(2)=16,IBSW(1)=26,IBSW(2)=22
"RTN","IBJTCA1",55,0)
 S (IBT,IBD)="" S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",56,0)
 ;JWS:IB*2.0*592:US131 - added dental claim #7
"RTN","IBJTCA1",57,0)
 I $$FT^IBCEF(IBIFN)=2!($$FT^IBCEF(IBIFN)=7) D
"RTN","IBJTCA1",58,0)
 . N IBXDATA,IBXSAVE K ^TMP("IBXSAVE",$J)
"RTN","IBJTCA1",59,0)
 . D F^IBCEF("N-HCFA 1500 BOX 19",,,IBIFN)
"RTN","IBJTCA1",60,0)
 . I IBXDATA'="" S IBBX19(1)=$E(IBXDATA,1,40) S:$E(IBXDATA,41,$L(IBXDATA))'="" IBBX19(2)=$E(IBXDATA,41,$L(IBXDATA))
"RTN","IBJTCA1",61,0)
 ;
"RTN","IBJTCA1",62,0)
 S IBGRPB=IBLN,IBLR=1
"RTN","IBJTCA1",63,0)
 S IBT="Claim Information" S IBLN=$$SETN(IBT,IBLN,3,1)
"RTN","IBJTCA1",64,0)
 S IBT="Bill Type: ",IBD=$$EXSET^IBJU1($P(IBD0,U,5),399,.05) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",65,0)
 S IBT="Time Frame: ",IBD=$$EXSET^IBJU1($P(IBD0,U,6),399,.06) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",66,0)
 S IBT="Rate Type: ",IBD=$P($G(^DGCR(399.3,+$P(IBD0,U,7),0)),U,1) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",67,0)
 S IBT="AR Status: ",IBD=$P($$ARSTATA^IBJTU4(IBIFN),U,1) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",68,0)
 S IBT=" Sequence: ",IBD=$P($$EXSET^IBJU1($P(IBD0,U,21),399,.21)," ",1) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",69,0)
 S IBT="Purch Svc: ",IBD=$S($P(IBDU2,U,11)="":"NO",1:$$EXPAND^IBTRE(399,233,$P(IBDU2,U,11))),IBLN=$$SET(IBT,IBD,IBLN,4)
"RTN","IBJTCA1",70,0)
 I $P(IBDM1,"^",8) S IBT="  ECME No: ",IBD=$P($P(IBDM1,"^",8),";",1),IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",71,0)
 I $L($P(IBDM1,"^",9)) S IBT="ECME Ap No: ",IBD=$P(IBDM1,"^",9),IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",72,0)
 I IBNABP'="" S IBT=$S(($L($TR(IBNABP," ",""))=7):"  NCPDP No: ",1:"       NPI: "),IBD=IBNABP,IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",73,0)
 ; IB*2.0*521 add Claim HPID to display
"RTN","IBJTCA1",74,0)
 S IBD=$S($P(IBD0,U,21)="P":$P(IBDM1,U,13),$P(IBD0,U,21)="S":$P(IBDM1,U,14),$P(IBD0,U,21)="T":$P(IBDM1,U,15),1:"")
"RTN","IBJTCA1",75,0)
 S:IBD="" IBD=$$HPD^IBCNHUT1(+IBDI1) S IBVL=$$HOD^IBCNHUT1(IBD,+IBDI1,IBD) S IBT=$P(IBVL,U,2)_": ",IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",76,0)
 I IBWNR S IBT="MRA Status: ",IBD=$S($P(IBDTX,U,5):$P(IBDTX,U,5),1:"NOT RECEIVED"),IBLN=$$SET(IBT,$S(IBD:$$EXPAND^IBTRE(399,24,IBD),1:IBD),IBLN,IBLR)
"RTN","IBJTCA1",77,0)
 I $G(IBBX19(1))'="" D
"RTN","IBJTCA1",78,0)
 . S IBT="   Box 19: ",IBD=IBBX19(1),IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",79,0)
 . I $G(IBBX19(2))'="" S IBT=$J("",11),IBD=IBBX19(2),IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",80,0)
 ;
"RTN","IBJTCA1",81,0)
 S IBLR=6,IBPRVO=""
"RTN","IBJTCA1",82,0)
 S IBT="Providers: ",IBD="NONE"
"RTN","IBJTCA1",83,0)
 ;IB*2.0*432/TAZ - Changed how providers are displayed to take line-level providers into account.
"RTN","IBJTCA1",84,0)
 ;D F^IBCEF("N-ALL PROVIDERS","IBZ",,IBIFN)
"RTN","IBJTCA1",85,0)
 D F^IBCEF("N-ALL PROVIDERS 1","IBZ",,IBIFN)
"RTN","IBJTCA1",86,0)
 S IBZ0=0
"RTN","IBJTCA1",87,0)
 S IBLVL=0
"RTN","IBJTCA1",88,0)
 ;F  S Z=$O(IBZ(Z)) Q:'Z  D
"RTN","IBJTCA1",89,0)
 ;. I $G(IBZ(Z)),$G(IBZ(Z,1))'="" S IBLN=$$SET(IBT,"(OLD PROV DATA) "_IBZ(Z,1),IBLN,IBLR),IBZ0=1 Q
"RTN","IBJTCA1",90,0)
 ;. I $P($G(IBZ(Z,1)),U)'="" S IBD=$E($$EXPAND^IBTRE(399.0222,.01,Z)_":"_$J("",15),1,15)_$P(IBZ(Z,1),U)_$S($P(IBZ(Z,1),U,4)'="":" ("_$P(IBZ(Z,1),U,4)_")",1:"") S IBLN=$$SET(IBT,IBD,IBLN,IBLR) S IBT=$J("",11),IBZ0=1
"RTN","IBJTCA1",91,0)
 ;I 'IBZ0 S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",92,0)
 S IBLVL=0
"RTN","IBJTCA1",93,0)
 F  S IBLVL=$O(IBZ(IBLVL)) Q:'IBLVL  D
"RTN","IBJTCA1",94,0)
 . S IBT=IBT_$S(IBLVL=1:"Claim: ",1:"Line: ")
"RTN","IBJTCA1",95,0)
 . S IBPRVTYP="",IBCNT=0
"RTN","IBJTCA1",96,0)
 . F  S IBCNT=$O(IBZ(IBLVL,IBCNT)) Q:'IBCNT  D
"RTN","IBJTCA1",97,0)
 .. I IBLVL=1 S IBD=$J("",5)
"RTN","IBJTCA1",98,0)
 .. I IBLVL=2 S IBD=$E("("_IBCNT_")"_$J("",5),1,5)
"RTN","IBJTCA1",99,0)
 .. F  S IBPRVTYP=$O(IBZ(IBLVL,IBCNT,IBPRVTYP)) Q:'IBPRVTYP  D
"RTN","IBJTCA1",100,0)
 ... S IBD=IBD_$E($$EXPAND^IBTRE(399.0222,.01,IBPRVTYP)_":"_$J("",15),1,15)
"RTN","IBJTCA1",101,0)
 ... S IBD=IBD_$P(IBZ(IBLVL,IBCNT,IBPRVTYP),U)
"RTN","IBJTCA1",102,0)
 ... I $L($P(IBZ(IBLVL,IBCNT,IBPRVTYP),U,4)) S IBD=IBD_" ("_$P(IBZ(IBLVL,IBCNT,IBPRVTYP),U,4)_")"
"RTN","IBJTCA1",103,0)
 ... S IBLN=$$SET(IBT,IBD,IBLN,IBLR),IBT="",IBD=$J("",5)
"RTN","IBJTCA1",104,0)
 ;
"RTN","IBJTCA1",105,0)
 S IBGRPE=IBLN,IBLN=IBGRPB+1,IBLR=2
"RTN","IBJTCA1",106,0)
 ;
"RTN","IBJTCA1",107,0)
 S IBT="Charge Type: ",IBD=$$EXSET^IBJU1($P(IBD0,U,27),399,.27) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",108,0)
 S IBT="Service Dates: ",IBD=$$DATE^IBJU1($P(IBDU,U,1))_" - "_$$DATE^IBJU1($P(IBDU,U,2)) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",109,0)
 S IBT="Orig Claim: ",IBD=$$BILL^RCJIBFN2(+IBIFN) S IBLN=$$SET(IBT,$J($P(IBD,U,1),9,2),IBLN,IBLR)
"RTN","IBJTCA1",110,0)
 S IBT="Balance Due: ",IBD=$J($P(IBD,U,3),9,2) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",111,0)
 I +$P(IBDM,U,2) S IBX=$S($P(IBD0,U,21)="P":2,1:1) D  S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",112,0)
 . S IBT=$S(IBX=2:"Secondary",1:"Primary")_": ",IBD=$P($G(^DIC(36,+$P(IBDM,U,IBX),0)),U,1)
"RTN","IBJTCA1",113,0)
 . S IBX=$P(IBDU2,U,(IBX+3)) I +IBX S IBX="("_$J(IBX,0,2)_")" S IBD=$E(IBD,1,(IBSW(IBLR)-$L(IBX)-2))_"  "_IBX
"RTN","IBJTCA1",114,0)
 I +$P(IBDM,U,3) S IBX=$S($P(IBD0,U,21)="T":2,1:3) D  S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",115,0)
 . S IBT=$S(IBX=2:"Secondary",1:"Tertiary")_": ",IBD=$P($G(^DIC(36,+$P(IBDM,U,IBX),0)),U,1)
"RTN","IBJTCA1",116,0)
 . S IBX=$P(IBDU2,U,(IBX+3)) I +IBX S IBX="("_$J(IBX,0,2)_")" S IBD=$E(IBD,1,(IBSW(IBLR)-$L(IBX)-2))_"  "_IBX
"RTN","IBJTCA1",117,0)
 S IBLN=$$SET("","",IBLN,5)
"RTN","IBJTCA1",118,0)
 I IBWNR S IBT="MRA Rec Date: " D  S IBLN=$$SET(IBT,IBD,IBLN,2)
"RTN","IBJTCA1",119,0)
 . N Z
"RTN","IBJTCA1",120,0)
 . ; find last MRA for receipt date
"RTN","IBJTCA1",121,0)
 . S (IBD,Z)="" F  S Z=$O(^IBM(361.1,"B",IBIFN,Z),-1) Q:'Z  I $P($G(^IBM(361.1,Z,0)),U,4)=1 S IBD=$$DATE^IBJU1($P($P(^IBM(361.1,Z,0),U,6),".")) Q
"RTN","IBJTCA1",122,0)
 F Z=IBLN:1:IBGRPE S IBLN=$$SET("","",IBLN,5)
"RTN","IBJTCA1",123,0)
 ;
"RTN","IBJTCA1",124,0)
 S (IBLN,VALMCNT)=$S(IBLN>IBGRPE:IBLN,1:IBGRPE)
"RTN","IBJTCA1",125,0)
 ;
"RTN","IBJTCA1",126,0)
 S IBGRPB=IBLN,IBLR=1
"RTN","IBJTCA1",127,0)
 D CONT^IBJTCA2
"RTN","IBJTCA1",128,0)
 ;
"RTN","IBJTCA1",129,0)
COPAY I $O(^IBA(362.4,"C",IBIFN,0)) D
"RTN","IBJTCA1",130,0)
 . S (IBT,IBD)="" S IBLN=$$SET(IBT,IBD,IBLN,IBLR)   ; blank line
"RTN","IBJTCA1",131,0)
 . S IBNC(1)=21,IBT="Related Prescription Copay Information" S IBLN=$$SETN(IBT,IBLN,1,1)
"RTN","IBJTCA1",132,0)
 . N IBZ,IBX,IBC,IBCAP
"RTN","IBJTCA1",133,0)
 . S IBZ=0 F  S IBZ=$O(^IBA(362.4,"C",IBIFN,IBZ)) Q:'IBZ  D
"RTN","IBJTCA1",134,0)
 .. K ^TMP("IBTPJI",$J)
"RTN","IBJTCA1",135,0)
 .. S IBC=$G(^IBA(362.4,IBZ,0))
"RTN","IBJTCA1",136,0)
 .. D:$P(IBC,"^",5) RX^PSO52API($P(IBD0,"^",2),"IBTPJI",$P(IBC,"^",5),"","I^")
"RTN","IBJTCA1",137,0)
 .. ; original fill
"RTN","IBJTCA1",138,0)
 .. I $P(IBC,"^",10)=0 D
"RTN","IBJTCA1",139,0)
 ... S IBX=+$G(^TMP($J,"IBTPJI",$P(IBD0,"^",2),+$P(IBC,"^",5),106)),IBCAP=+$G(^(106.6))
"RTN","IBJTCA1",140,0)
 .. ; refills
"RTN","IBJTCA1",141,0)
 .. E  D
"RTN","IBJTCA1",142,0)
 ... S IBX=+$G(^TMP($J,"IBTPJI",$P(IBD0,"^",2),+$P(IBC,"^",5),"IB",+$P(IBC,"^",10),9)),IBCAP=+$G(^(9.1))
"RTN","IBJTCA1",143,0)
 .. I '$G(IBX),$G(IBCAP) S IBT="  <copay exceeded cap>",IBLN=$$SET(IBT,"",IBLN,4) Q
"RTN","IBJTCA1",144,0)
 .. I '$G(IBX) S IBT="  <none found>",IBLN=$$SET(IBT,"",IBLN,4) Q
"RTN","IBJTCA1",145,0)
 .. S IBX=$G(^IB(IBX,0))
"RTN","IBJTCA1",146,0)
 .. S IBT="Rx: "_$P(IBC,"^")_"  Chg: $"_$FN($P(IBX,"^",7),",",2)_"   Status: "_$$TITLE^XLFSTR($$EXTERNAL^DILFD(350,.05,"",$P(IBX,"^",5)))_"   Bill: "_$P(IBX,"^",11)
"RTN","IBJTCA1",147,0)
 .. S IBLN=$$SET(IBT,"",IBLN,4)
"RTN","IBJTCA1",148,0)
 K ^TMP("IBTPJI",$J)
"RTN","IBJTCA1",149,0)
 ;
"RTN","IBJTCA1",150,0)
 S (IBLN,VALMCNT)=IBLN-1
"RTN","IBJTCA1",151,0)
 ;
"RTN","IBJTCA1",152,0)
BLDQ Q
"RTN","IBJTCA1",153,0)
 ;
"RTN","IBJTCA1",154,0)
EMPL(DFN) ; returns employer name
"RTN","IBJTCA1",155,0)
 Q $P($G(^DPT(+DFN,.311)),U,1)
"RTN","IBJTCA1",156,0)
 ;
"RTN","IBJTCA1",157,0)
SET(TTL,DATA,LN,LR) ;
"RTN","IBJTCA1",158,0)
 N IBY
"RTN","IBJTCA1",159,0)
 S IBY=$J(TTL,IBTW(LR))_DATA D SET1(IBY,LN,IBTC(LR),(IBTW(LR)+IBSW(LR)))
"RTN","IBJTCA1",160,0)
 S LN=LN+1
"RTN","IBJTCA1",161,0)
 Q LN
"RTN","IBJTCA1",162,0)
 ;
"RTN","IBJTCA1",163,0)
SETN(TTL,LN,LR,RV) ;
"RTN","IBJTCA1",164,0)
 N IBY
"RTN","IBJTCA1",165,0)
 S IBY=" "_TTL_" " D SET1(IBY,LN,IBNC(LR),$L(IBY),$G(RV))
"RTN","IBJTCA1",166,0)
 S LN=LN+1
"RTN","IBJTCA1",167,0)
 Q LN
"RTN","IBJTCA1",168,0)
 ;
"RTN","IBJTCA1",169,0)
SET1(STR,LN,COL,WD,RV) ; set up TMP array with screen data
"RTN","IBJTCA1",170,0)
 N IBX S IBX=$G(^TMP("IBJTCA",$J,LN,0))
"RTN","IBJTCA1",171,0)
 S IBX=$$SETSTR^VALM1(STR,IBX,COL,WD)
"RTN","IBJTCA1",172,0)
 D SET^VALM10(LN,IBX) I $G(RV)'="" D CNTRL^VALM10(LN,COL,WD,IORVON,IORVOFF)
"RTN","IBJTCA1",173,0)
 Q
"RTN","IBJTLA1")
0^87^B14092022^B13446872
"RTN","IBJTLA1",1,0)
IBJTLA1 ;ALB/ARH - TPI ACTIVE BILLS LIST BUILD ;2/14/95
"RTN","IBJTLA1",2,0)
 ;;2.0;INTEGRATED BILLING;**39,80,61,51,153,137,183,276,451,516,530,568,592**;21-MAR-94;Build 58
"RTN","IBJTLA1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBJTLA1",4,0)
 ;
"RTN","IBJTLA1",5,0)
BLDA ; build active list for third party joint inquiry active list
"RTN","IBJTLA1",6,0)
 N IBIFN,IBCNT S VALMCNT=0,IBCNT=0
"RTN","IBJTLA1",7,0)
 S IBIFN=0 F  S IBIFN=$O(^DGCR(399,"C",DFN,IBIFN)) Q:'IBIFN  I $$ACTIVE^IBJTU4(IBIFN) W "." D SCRN
"RTN","IBJTLA1",8,0)
 ;
"RTN","IBJTLA1",9,0)
 I VALMCNT=0 D SET(" ",0),SET("No Active Bills for this Patient",0)
"RTN","IBJTLA1",10,0)
 ;
"RTN","IBJTLA1",11,0)
 Q
"RTN","IBJTLA1",12,0)
 ;
"RTN","IBJTLA1",13,0)
SCRN ; add bill to screen list (IBIFN,DFN must be defined)
"RTN","IBJTLA1",14,0)
 N X,IBY,IBD0,IBDU,IBDM,TYPE,REJFLAG,INDFLG,IBJTLA1 S X=""
"RTN","IBJTLA1",15,0)
 S IBCNT=IBCNT+1,IBD0=$G(^DGCR(399,+IBIFN,0)),IBDU=$G(^DGCR(399,+IBIFN,"U")),IBDM=$G(^DGCR(399,+IBIFN,"M"))
"RTN","IBJTLA1",16,0)
 S IBY=IBCNT,X=$$SETFLD^VALM1(IBY,X,"NUMBER")
"RTN","IBJTLA1",17,0)
 ; IB*2.0*451 - get EEOB indicator for bill # when applicable
"RTN","IBJTLA1",18,0)
 S IBPFLAG=$$EEOB(+IBIFN)
"RTN","IBJTLA1",19,0)
 S REJFLAG=+$$BILLREJ^IBJTU6($P(IBD0,U)) ;IB*2.0*530 Add indicator for rejects
"RTN","IBJTLA1",20,0)
 S INDFLG=$S($G(IBPFLAG)'="":"%",1:"")_$S(REJFLAG:"c",1:"") S:INDFLG="" INDFLG=" "
"RTN","IBJTLA1",21,0)
 S IBY=INDFLG_$P(IBD0,U,1)_$$ECME^IBTRE(IBIFN),X=$$SETFLD^VALM1(IBY,X,"BILL") ;add EEOB indicator '%' to bill number when applicable
"RTN","IBJTLA1",22,0)
 S IBY=$S($$REF^IBJTU31(+IBIFN):"r",1:""),X=$$SETFLD^VALM1(IBY,X,"REFER")
"RTN","IBJTLA1",23,0)
 S IBY=$S($$IB^IBRUTL(+IBIFN,0):"*",1:""),X=$$SETFLD^VALM1(IBY,X,"HD")
"RTN","IBJTLA1",24,0)
 S IBY=$$DATE($P(IBDU,U,1)),X=$$SETFLD^VALM1(IBY,X,"STFROM")
"RTN","IBJTLA1",25,0)
 S IBY=$$DATE($P(IBDU,U,2)),X=$$SETFLD^VALM1(IBY,X,"STTO")
"RTN","IBJTLA1",26,0)
 ;
"RTN","IBJTLA1",27,0)
 S IBY=$P($$LST^DGMTU(DFN,$P(IBDU,U)),U,4),IBY=$S(IBY="C":"YES",IBY="P":"PEN",IBY="R":"REQ",IBY="G":"GMT",1:"NO"),X=$$SETFLD^VALM1(IBY,X,"MT?")
"RTN","IBJTLA1",28,0)
 ;S IBY=$$TYPE($P(IBD0,U,5))_$$TF($P(IBD0,U,6))_$S($P(IBD0,U,27)=1:"I",$P(IBD0,U,27)=2:"P",1:""),X=$$SETFLD^VALM1(IBY,X,"TYPE")  ; 516 - baa
"RTN","IBJTLA1",29,0)
 S TYPE=$$TYPE($P(IBD0,U,5)) I $E(TYPE,2)="P" S TYPE=$E(TYPE)  ; 516 - baa
"RTN","IBJTLA1",30,0)
 ;S IBY=TYPE_"/"_$S($P(IBD0,U,27)=1:"I",$P(IBD0,U,27)=2:"P",1:""),X=$$SETFLD^VALM1(IBY,X,"TYPE")  ; 516 - baa
"RTN","IBJTLA1",31,0)
 ;IB*2.0*592; If the claim is a Dental Claim, set the 2nd piece of the TYPE to "D" for Dental
"RTN","IBJTLA1",32,0)
 ;IA# 10116
"RTN","IBJTLA1",33,0)
 S IBY=TYPE_"/"_$S($$FT^IBCEF(IBIFN)=7:"D",$P(IBD0,U,27)=1:"I",$P(IBD0,U,27)=2:"P",1:" "),X=$$SETFLD^VALM1(IBY,X,"TYPE")  ; 592 (vd-US14) ;568 - lmh ret space if null
"RTN","IBJTLA1",34,0)
 ;
"RTN","IBJTLA1",35,0)
 ; Return care type for (I)npat,(O)utpat, (R)x or (P)rosthetics - add under TJPI screen TYPE column - 568
"RTN","IBJTLA1",36,0)
 S IBTYP=$$TYP^IBRFN(IBIFN)
"RTN","IBJTLA1",37,0)
 S IBTYP=$S(IBTYP="":-1,IBTYP="PR":"P",IBTYP="PH":"R",1:IBTYP)
"RTN","IBJTLA1",38,0)
 S IBY=IBY_"/"_IBTYP,X=$$SETFLD^VALM1(IBY,X,"TYPE")
"RTN","IBJTLA1",39,0)
 ;
"RTN","IBJTLA1",40,0)
 S IBY=" "_$P($$ARSTATA^IBJTU4(IBIFN),U,2),X=$$SETFLD^VALM1(IBY,X,"ARST")
"RTN","IBJTLA1",41,0)
 ;
"RTN","IBJTLA1",42,0)
 S IBY=$P($G(^DGCR(399.3,+$P(IBD0,U,7),0)),U,4),X=$$SETFLD^VALM1(IBY,X,"RATE")
"RTN","IBJTLA1",43,0)
 S IBY=$S($$MINS^IBJTU31(+IBIFN):"+",1:""),X=$$SETFLD^VALM1(IBY,X,"CB")
"RTN","IBJTLA1",44,0)
 S IBY=+$G(^DGCR(399,+IBIFN,"MP"))
"RTN","IBJTLA1",45,0)
 I 'IBY,$$MCRWNR^IBEFUNC($$CURR^IBCEF2(IBIFN)) S IBY=+$$CURR^IBCEF2(IBIFN)
"RTN","IBJTLA1",46,0)
 S IBY=$P($G(^DIC(36,+IBY,0)),U,1)
"RTN","IBJTLA1",47,0)
 S X=$$SETFLD^VALM1(IBY,X,"INSUR")
"RTN","IBJTLA1",48,0)
 S IBY=$$BILL^RCJIBFN2(IBIFN)
"RTN","IBJTLA1",49,0)
 S X=$$SETFLD^VALM1($J(+$P(IBY,U,1),8,2),X,"OAMT")
"RTN","IBJTLA1",50,0)
 S X=$$SETFLD^VALM1($J(+$P(IBY,U,3),8,2),X,"CAMT")
"RTN","IBJTLA1",51,0)
 D SET(X,IBCNT)
"RTN","IBJTLA1",52,0)
 Q
"RTN","IBJTLA1",53,0)
 ;
"RTN","IBJTLA1",54,0)
DATE(X) ; date in external format
"RTN","IBJTLA1",55,0)
 N Y S Y="" I X?7N.E S Y=$E(X,4,5)_"/"_$E(X,6,7)_"/"_$E(X,2,3)
"RTN","IBJTLA1",56,0)
 Q Y
"RTN","IBJTLA1",57,0)
 ;
"RTN","IBJTLA1",58,0)
TYPE(X) ; return abbreviated form of Bill Classification (399,.05)
"RTN","IBJTLA1",59,0)
 Q $S(X=1:"IP",X=2:"IH",X=3:"OP",X=4:"OH",1:"")
"RTN","IBJTLA1",60,0)
 ;
"RTN","IBJTLA1",61,0)
TF(X) ; return abbreviated form of Timeframe of Bill (399,.06)
"RTN","IBJTLA1",62,0)
 Q $S(X=2:"-F",X=3:"-C",X=4:"-L",X'=1:"-O",1:"")
"RTN","IBJTLA1",63,0)
 ;
"RTN","IBJTLA1",64,0)
SET(X,CNT) ; set up list manager screen array
"RTN","IBJTLA1",65,0)
 S VALMCNT=VALMCNT+1
"RTN","IBJTLA1",66,0)
 S ^TMP("IBJTLA",$J,VALMCNT,0)=X Q:'CNT
"RTN","IBJTLA1",67,0)
 S ^TMP("IBJTLA",$J,"IDX",VALMCNT,+CNT)=""
"RTN","IBJTLA1",68,0)
 S ^TMP("IBJTLAX",$J,CNT)=VALMCNT_U_IBIFN
"RTN","IBJTLA1",69,0)
 Q
"RTN","IBJTLA1",70,0)
 ;
"RTN","IBJTLA1",71,0)
EEOB(IBIFN) ; get payment information
"RTN","IBJTLA1",72,0)
 ; IB*2.0*451 - find an EOB payment for a bill
"RTN","IBJTLA1",73,0)
 ; input is the IEN for the bill # in file #399 and must be valid,
"RTN","IBJTLA1",74,0)
 ; output is the EEOB indicator '%' if a payment is found in file #361.1,
"RTN","IBJTLA1",75,0)
 ; exclude EOB type MRA (Medicare).
"RTN","IBJTLA1",76,0)
 N IBPFLAG,IBVAL,Z
"RTN","IBJTLA1",77,0)
 I $G(IBIFN)=0 Q ""
"RTN","IBJTLA1",78,0)
 I '$O(^IBM(361.1,"B",IBIFN,0)) Q ""  ; no entry here
"RTN","IBJTLA1",79,0)
 I $P($G(^DGCR(399,IBIFN,0)),"^",13)=1 Q ""  ;avoid 'ENTERED/NOT REVIEWED' status
"RTN","IBJTLA1",80,0)
 ; handle both single and multiple bill entries in file #361.1
"RTN","IBJTLA1",81,0)
 S Z=0 F  S Z=$O(^IBM(361.1,"B",IBIFN,Z)) Q:'Z  D  Q:$G(IBPFLAG)="%"
"RTN","IBJTLA1",82,0)
 . S IBVAL=$G(^IBM(361.1,Z,0))
"RTN","IBJTLA1",83,0)
 . S IBPFLAG=$S($P(IBVAL,"^",4)=1:"",$P(IBVAL,"^",4)=0:"%",1:"")
"RTN","IBJTLA1",84,0)
 Q IBPFLAG  ; EOB indicator for either 1st or 3rd payment on bill
"RTN","IBJTLB1")
0^88^B14819711^B13573050
"RTN","IBJTLB1",1,0)
IBJTLB1 ;ALB/ARH - TPI INACTIVE LIST BUILD ;2/14/95
"RTN","IBJTLB1",2,0)
 ;;2.0;INTEGRATED BILLING;**39,80,61,137,276,451,516,530,568,592**;21-MAR-94;Build 58
"RTN","IBJTLB1",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBJTLB1",4,0)
 ;
"RTN","IBJTLB1",5,0)
BLDA ; build active list for third party joint inquiry active list, DFN must be defined
"RTN","IBJTLB1",6,0)
 ; first search starts at dt and works backwards for 6 months of bills or IBMAXCNT bills, whichever is greater
"RTN","IBJTLB1",7,0)
 ; all bills for a single day are included in the same search so even IBMAXCNT may be exceeded
"RTN","IBJTLB1",8,0)
 ; if IBEND is defined on entry it is used as the end dt of the search, otherwise DT is used
"RTN","IBJTLB1",9,0)
 ; IBBEG is left defined on exit, if it has a value then it is used by the Change Dates action to define the next
"RTN","IBJTLB1",10,0)
 ; end date of the search, this results in each CD action default working backwards through the date range until
"RTN","IBJTLB1",11,0)
 ; no bills are found and IBBEG is null then search restarts at DT, IBEND is defined so can tell if range changed
"RTN","IBJTLB1",12,0)
 N IBIFN,IBCNT,IBBDT,IBEDT,IBFIRST,IBLAST,IBDT1,IBDT2,IBMAXCNT K IBHMSG
"RTN","IBJTLB1",13,0)
 S IBEDT=$S(+$G(IBEND):IBEND,1:DT),IBBDT=$$FMADD^XLFDT(IBEDT,-180),IBMAXCNT=52
"RTN","IBJTLB1",14,0)
 ;
"RTN","IBJTLB1",15,0)
 S (VALMCNT,IBCNT)=0,IBDT1=$S(IBEDT'="":-(IBEDT+.01),1:""),IBDT2=-IBBDT
"RTN","IBJTLB1",16,0)
 S IBFIRST=IBBDT,IBLAST=-$O(^DGCR(399,"APDS",DFN,""))
"RTN","IBJTLB1",17,0)
 ;
"RTN","IBJTLB1",18,0)
 F  S IBDT1=$O(^DGCR(399,"APDS",DFN,IBDT1)) Q:'IBDT1!(IBDT1>IBDT2&(IBCNT'<IBMAXCNT))  S IBFIRST=-IBDT1 D
"RTN","IBJTLB1",19,0)
 . S IBIFN=0 F  S IBIFN=$O(^DGCR(399,"APDS",DFN,IBDT1,IBIFN)) Q:'IBIFN  I '$$ACTIVE^IBJTU4(IBIFN) D SCRN W "."
"RTN","IBJTLB1",20,0)
 ;
"RTN","IBJTLB1",21,0)
 S IBBEG=$S('IBDT1:"",IBBDT>IBFIRST:IBFIRST,1:IBBDT),IBBDT=$S(+IBBEG:$$DATE(IBBEG),1:"BEGIN")
"RTN","IBJTLB1",22,0)
 S IBEND=$S(IBEDT=""!(IBLAST'>IBEDT):"",1:IBEDT),IBEDT=$S(+IBEND:$$DATE(IBEND),1:"END")
"RTN","IBJTLB1",23,0)
 ;
"RTN","IBJTLB1",24,0)
 I 'IBBEG,'IBEND S IBHMSG="** All Inactive Bills **"
"RTN","IBJTLB1",25,0)
 I $G(IBHMSG)="" S IBHMSG=IBBDT_" - "_IBEDT
"RTN","IBJTLB1",26,0)
 S IBHMSG=IBHMSG_"   ("_VALMCNT_")"
"RTN","IBJTLB1",27,0)
 ;
"RTN","IBJTLB1",28,0)
 I VALMCNT=0 D SET(" ",0),SET("No Inactive Bills for this Patient",0)
"RTN","IBJTLB1",29,0)
 ;
"RTN","IBJTLB1",30,0)
 Q
"RTN","IBJTLB1",31,0)
 ;
"RTN","IBJTLB1",32,0)
SCRN ; add bill to screen list (IBIFN,DFN must be defined)
"RTN","IBJTLB1",33,0)
 N X,IBY,IBD0,IBDU,IBDM,TYPE,REJFLAG,INDFLG S X=""
"RTN","IBJTLB1",34,0)
 S IBCNT=IBCNT+1,IBD0=$G(^DGCR(399,+IBIFN,0)),IBDU=$G(^DGCR(399,+IBIFN,"U")),IBDM=$G(^DGCR(399,+IBIFN,"M"))
"RTN","IBJTLB1",35,0)
 S IBY=IBCNT,X=$$SETFLD^VALM1(IBY,X,"NUMBER")
"RTN","IBJTLB1",36,0)
 ; IB*2.0*451 - get EEOB indicator for bill # when applicable
"RTN","IBJTLB1",37,0)
 S IBPFLAG=$$EEOB^IBJTLA1(+IBIFN)
"RTN","IBJTLB1",38,0)
 S REJFLAG=+$$BILLREJ^IBJTU6($P(IBD0,U)) ;IB*2.0*530 Add indicator for rejects
"RTN","IBJTLB1",39,0)
 S INDFLG=$S($G(IBPFLAG)'="":"%",1:"")_$S(REJFLAG:"c",1:"") S:INDFLG="" INDFLG=" "
"RTN","IBJTLB1",40,0)
 S IBY=$P(IBD0,U,1)_$$ECME^IBTRE(IBIFN),X=$$SETFLD^VALM1(IBY,X,"BILL")
"RTN","IBJTLB1",41,0)
 S IBY=INDFLG_IBY,X=$$SETFLD^VALM1(IBY,X,"BILL")
"RTN","IBJTLB1",42,0)
 S IBY=$S($$REF^IBJTU31(+IBIFN):"r",1:""),X=$$SETFLD^VALM1(IBY,X,"REFER")
"RTN","IBJTLB1",43,0)
 S IBY=$S($$IB^IBRUTL(+IBIFN,0):"*",1:""),X=$$SETFLD^VALM1(IBY,X,"HD")
"RTN","IBJTLB1",44,0)
 S IBY=$$DATE($P(IBDU,U,1)),X=$$SETFLD^VALM1(IBY,X,"STFROM")
"RTN","IBJTLB1",45,0)
 S IBY=$$DATE($P(IBDU,U,2)),X=$$SETFLD^VALM1(IBY,X,"STTO")
"RTN","IBJTLB1",46,0)
 ;
"RTN","IBJTLB1",47,0)
 ;S IBY=$$TYPE($P(IBD0,U,5))_$$TF($P(IBD0,U,6)),X=$$SETFLD^VALM1(IBY,X,"TYPE")
"RTN","IBJTLB1",48,0)
 S TYPE=$$TYPE($P(IBD0,U,5)) I $E(TYPE,2)="P" S TYPE=$E(TYPE)  ; 516 - baa
"RTN","IBJTLB1",49,0)
 ;S IBY=TYPE_"/"_$S($P(IBD0,U,27)=1:"I",$P(IBD0,U,27)=2:"P",1:""),X=$$SETFLD^VALM1(IBY,X,"TYPE")  ; 516 - baa
"RTN","IBJTLB1",50,0)
 ;IB*2.0*592; If the claim is a Dental Claim, set the 2nd piece of the TYPE to "D" for Dental
"RTN","IBJTLB1",51,0)
 ;IA# 10116
"RTN","IBJTLB1",52,0)
 S IBY=TYPE_"/"_$S($$FT^IBCEF(IBIFN)=7:"D",$P(IBD0,U,27)=1:"I",$P(IBD0,U,27)=2:"P",1:""),X=$$SETFLD^VALM1(IBY,X,"TYPE")  ; 592 (vd-US14)
"RTN","IBJTLB1",53,0)
 S IBTYP=$$TYP^IBRFN(IBIFN)
"RTN","IBJTLB1",54,0)
 S IBTYP=$S(IBTYP="":-1,IBTYP="PR":"P",IBTYP="PH":"R",1:IBTYP)
"RTN","IBJTLB1",55,0)
 S IBY=IBY_"/"_IBTYP,X=$$SETFLD^VALM1(IBY,X,"TYPE")
"RTN","IBJTLB1",56,0)
 S IBY=" "_$P($$ARSTATA^IBJTU4(IBIFN),U,2),X=$$SETFLD^VALM1(IBY,X,"ARST")
"RTN","IBJTLB1",57,0)
 ;
"RTN","IBJTLB1",58,0)
 S IBY=$P($G(^DGCR(399.3,+$P(IBD0,U,7),0)),U,4),X=$$SETFLD^VALM1(IBY,X,"RATE")
"RTN","IBJTLB1",59,0)
 S IBY=$S($$MINS^IBJTU31(IBIFN):"+",1:""),X=$$SETFLD^VALM1(IBY,X,"CB")
"RTN","IBJTLB1",60,0)
 S IBY=+$G(^DGCR(399,+IBIFN,"MP"))
"RTN","IBJTLB1",61,0)
 I 'IBY,$$MCRWNR^IBEFUNC(+$$CURR^IBCEF2(IBIFN)) S IBY=+$$CURR^IBCEF2(IBIFN)
"RTN","IBJTLB1",62,0)
 S IBY=$P($G(^DIC(36,+IBY,0)),U,1),X=$$SETFLD^VALM1(IBY,X,"INSUR")
"RTN","IBJTLB1",63,0)
 S IBY=$$BILL^RCJIBFN2(IBIFN)
"RTN","IBJTLB1",64,0)
 S X=$$SETFLD^VALM1($J(+$P(IBY,U,1),8,2),X,"OAMT")
"RTN","IBJTLB1",65,0)
 S X=$$SETFLD^VALM1($J(+$P(IBY,U,3),8,2),X,"CAMT")
"RTN","IBJTLB1",66,0)
 D SET(X,IBCNT)
"RTN","IBJTLB1",67,0)
 Q
"RTN","IBJTLB1",68,0)
 ;
"RTN","IBJTLB1",69,0)
DATE(X) ; date in external format
"RTN","IBJTLB1",70,0)
 Q $E(X,4,5)_"/"_$E(X,6,7)_"/"_$E(X,2,3)
"RTN","IBJTLB1",71,0)
 ;
"RTN","IBJTLB1",72,0)
TYPE(X) ; return abbreviated form of Bill Classification (399,.05)
"RTN","IBJTLB1",73,0)
 ; modified for 516 - baa
"RTN","IBJTLB1",74,0)
 Q $S(X=1:"IP",X=2:"IH",X=3:"OP",X=4:"OH",1:"")   ;(vd-US14)-IB*2*592 - after detecting as a bug, made this
"RTN","IBJTLB1",75,0)
 ;Q $S(X=1:"I",X=2:"IH",X=3:"O",X=4:"OH",1:"")    ;change so the code would be consistent with TYPE^IBTJLA1.
"RTN","IBJTLB1",76,0)
 ;
"RTN","IBJTLB1",77,0)
TF(X) ; return abbreviated form of Timeframe of Bill (399,.06)
"RTN","IBJTLB1",78,0)
 Q $S(X=2:"-F",X=3:"-C",X=4:"-L",X'=1:"-O",1:"")
"RTN","IBJTLB1",79,0)
 ;
"RTN","IBJTLB1",80,0)
SET(X,CNT) ; set up list manager screen array
"RTN","IBJTLB1",81,0)
 S VALMCNT=VALMCNT+1
"RTN","IBJTLB1",82,0)
 S ^TMP("IBJTLB",$J,VALMCNT,0)=X Q:'CNT
"RTN","IBJTLB1",83,0)
 S ^TMP("IBJTLB",$J,"IDX",VALMCNT,+CNT)=""
"RTN","IBJTLB1",84,0)
 S ^TMP("IBJTLBX",$J,CNT)=VALMCNT_U_IBIFN
"RTN","IBJTLB1",85,0)
 Q
"RTN","IBJTU3")
0^109^B11140228^B9494188
"RTN","IBJTU3",1,0)
IBJTU3 ;ALB/ARH - TPI UTILITIES - INS ADDRESS ; 2/14/95
"RTN","IBJTU3",2,0)
 ;;2.0;INTEGRATED BILLING;**39,80,592**;21-MAR-94;Build 58
"RTN","IBJTU3",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBJTU3",4,0)
 ;
"RTN","IBJTU3",5,0)
BADD(IBIFN) ; returns mailing address for bill
"RTN","IBJTU3",6,0)
 ; returns: COMPANY NAME ^ PHONE NUMBER ^ STR 1 ^ STR 2 ^ STR 3 ^ CITY ^ STATE ^ ZIP ^ ^ FAX #
"RTN","IBJTU3",7,0)
 N DFN,IBX,IBCNS,IBCDFN,IBTYP
"RTN","IBJTU3",8,0)
 ;
"RTN","IBJTU3",9,0)
 S IBX="",DFN=$G(^DGCR(399,+$G(IBIFN),0))
"RTN","IBJTU3",10,0)
 S IBTYP=$P(DFN,U,5),DFN=+$P(DFN,U,2) I 'DFN G BADDQ
"RTN","IBJTU3",11,0)
 S IBCNS=$G(^DGCR(399,+IBIFN,"MP")) I 'IBCNS G BADDQ
"RTN","IBJTU3",12,0)
 S IBCDFN=$P(IBCNS,U,2) I +IBCDFN S IBCNS=+$G(^DPT(DFN,.312,+IBCDFN,0))
"RTN","IBJTU3",13,0)
 ;
"RTN","IBJTU3",14,0)
 ; -- if send to employer and state defined, return employer address
"RTN","IBJTU3",15,0)
 I +IBCDFN S IBCDFN=$G(^DPT(DFN,.312,+IBCDFN,2)) I +IBCDFN,+$P(IBCDFN,U,6) D  G BADDQ
"RTN","IBJTU3",16,0)
 . S IBX=$P(IBCDFN,U,9)_U_$P(IBCDFN,U,8)_U_$P(IBCDFN,U,2,7)
"RTN","IBJTU3",17,0)
 ;
"RTN","IBJTU3",18,0)
 S IBTYP=$S(IBTYP<3:"INP",1:"OPT")
"RTN","IBJTU3",19,0)
 S IBX=$$INSADD(+IBCNS,IBTYP)
"RTN","IBJTU3",20,0)
 ;
"RTN","IBJTU3",21,0)
BADDQ Q IBX
"RTN","IBJTU3",22,0)
 ;
"RTN","IBJTU3",23,0)
 ;
"RTN","IBJTU3",24,0)
INSADD(IBCNS,IBATYP) ; returns specific type of address/phone # for an insurance company, follows ptrs to company responsible
"RTN","IBJTU3",25,0)
 ; returns: COMPANY NAME ^ PHONE NUMBER ^ STR 1 ^ STR 2 ^ STR 3 ^ CITY ^ STATE ^ ZIP ^ ^ FAX #
"RTN","IBJTU3",26,0)
 ; if type does not have an address or phone number then main mailing addr/ph # is returned
"RTN","IBJTU3",27,0)
 ;
"RTN","IBJTU3",28,0)
 N IBD0,IBD13,IBADD,IBNM,IBPH,IBDN,IBCNT,IBAGAIN
"RTN","IBJTU3",29,0)
 S (IBADD,IBNM,IBPH)=""
"RTN","IBJTU3",30,0)
 ;
"RTN","IBJTU3",31,0)
MAIN ; -- determine address for company for type bill
"RTN","IBJTU3",32,0)
 ;
"RTN","IBJTU3",33,0)
 S IBD0=$G(^DIC(36,+$G(IBCNS),0)) I IBD0="" G MAINQ
"RTN","IBJTU3",34,0)
 S IBD13=$G(^DIC(36,IBCNS,.13))
"RTN","IBJTU3",35,0)
 ;
"RTN","IBJTU3",36,0)
 ; -- get name, main address, phone number
"RTN","IBJTU3",37,0)
 S IBNM=$P(IBD0,U,1),IBPH=$P(IBD13,U,1),IBADD=$G(^DIC(36,+IBCNS,.11))
"RTN","IBJTU3",38,0)
 ;
"RTN","IBJTU3",39,0)
 ; -- if process the same co. more than once you are in an infinate loop
"RTN","IBJTU3",40,0)
 I $D(IBCNT(IBCNS)) G MAINQ ;already processed this company  use main add
"RTN","IBJTU3",41,0)
 S IBCNT(IBCNS)=""
"RTN","IBJTU3",42,0)
 ;
"RTN","IBJTU3",43,0)
 ; -- type of bill
"RTN","IBJTU3",44,0)
 I $G(IBATYP)'="",$T(@IBATYP)'="" D @IBATYP I $D(IBAGAIN) K IBAGAIN G MAIN
"RTN","IBJTU3",45,0)
 ;
"RTN","IBJTU3",46,0)
 ; -- return address
"RTN","IBJTU3",47,0)
MAINQ S IBNM=IBNM_U_IBPH_U_IBADD
"RTN","IBJTU3",48,0)
 Q IBNM
"RTN","IBJTU3",49,0)
 ;
"RTN","IBJTU3",50,0)
VER ; -- verification phone number
"RTN","IBJTU3",51,0)
 I $P(IBD13,U,4)'="" S IBPH=$P(IBD13,U,4)
"RTN","IBJTU3",52,0)
 Q
"RTN","IBJTU3",53,0)
 ;
"RTN","IBJTU3",54,0)
BILL ; -- billing phone number
"RTN","IBJTU3",55,0)
 I $P(IBD13,U,2)'="" S IBPH=$P(IBD13,U,2)
"RTN","IBJTU3",56,0)
 Q
"RTN","IBJTU3",57,0)
 ;
"RTN","IBJTU3",58,0)
PCERT ; -- precertification phone number
"RTN","IBJTU3",59,0)
 I $P(IBD13,U,3)'="" S IBPH=$P(IBD13,U,3)
"RTN","IBJTU3",60,0)
 ;
"RTN","IBJTU3",61,0)
 ; -- if other company processes precerts start again
"RTN","IBJTU3",62,0)
 I $P(IBD13,"^",9) S IBCNS=$P(IBD13,"^",9) S IBAGAIN=1
"RTN","IBJTU3",63,0)
 Q
"RTN","IBJTU3",64,0)
 ;
"RTN","IBJTU3",65,0)
INP ; -- inpatient phone number
"RTN","IBJTU3",66,0)
 I $P(IBD13,U,5)'="" S IBPH=$P(IBD13,U,5)
"RTN","IBJTU3",67,0)
 ;
"RTN","IBJTU3",68,0)
 ; -- see if there is an inpatient address, use if state is there
"RTN","IBJTU3",69,0)
 S IBDN=$G(^DIC(36,+IBCNS,.12)) I $P(IBDN,"^",5) S IBADD=IBDN
"RTN","IBJTU3",70,0)
 ;
"RTN","IBJTU3",71,0)
 ; -- if other company processes claims start again
"RTN","IBJTU3",72,0)
 I $P(IBDN,"^",7) S IBCNS=$P(IBDN,"^",7) S IBAGAIN=1
"RTN","IBJTU3",73,0)
 Q
"RTN","IBJTU3",74,0)
 ;
"RTN","IBJTU3",75,0)
OPT ; -- outpatient phone number
"RTN","IBJTU3",76,0)
 ;JWS;IB*2.0*592;Dental Insurance mailing address
"RTN","IBJTU3",77,0)
 ;IA# 5292
"RTN","IBJTU3",78,0)
 I $$FT^IBCEF(IBIFN)=7 D  Q
"RTN","IBJTU3",79,0)
 . I $P($G(^DIC(36,+IBCNS,.19)),"^",11)'="" S IBPH=$P(^(.19),"^",11)
"RTN","IBJTU3",80,0)
 . I $P($G(^DIC(36,+IBCNS,.19)),"^",5) S IBADD=$P(^(.19),"^",1,6)
"RTN","IBJTU3",81,0)
 . I $P($G(^DIC(36,+IBCNS,.19)),"^",7) S IBCNS=$P(^(.19),"^",7) S IBAGAIN=1
"RTN","IBJTU3",82,0)
 I $P(IBD13,U,6)'="" S IBPH=$P(IBD13,U,6)
"RTN","IBJTU3",83,0)
 ;
"RTN","IBJTU3",84,0)
 ; -- see if there is an outpatient address, use if state is there
"RTN","IBJTU3",85,0)
 S IBDN=$G(^DIC(36,+IBCNS,.16)) I $P(IBDN,"^",5) S IBADD=IBDN
"RTN","IBJTU3",86,0)
 ;
"RTN","IBJTU3",87,0)
 ; -- if other company processes claims start again
"RTN","IBJTU3",88,0)
 I $P(IBDN,"^",7) S IBCNS=$P(IBDN,"^",7) S IBAGAIN=1
"RTN","IBJTU3",89,0)
 Q
"RTN","IBJTU3",90,0)
 ;
"RTN","IBJTU3",91,0)
RX ; -- prescription phone number
"RTN","IBJTU3",92,0)
 I $P(IBD13,U,11)'="" S IBPH=$P(IBD13,U,11)
"RTN","IBJTU3",93,0)
 ;
"RTN","IBJTU3",94,0)
 ; -- see if there is an prescription address, use if state is there
"RTN","IBJTU3",95,0)
 S IBDN=$G(^DIC(36,+IBCNS,.18)) I $P(IBDN,"^",5) S IBADD=IBDN
"RTN","IBJTU3",96,0)
 ;
"RTN","IBJTU3",97,0)
 ; -- if other company processes claims start again
"RTN","IBJTU3",98,0)
 I $P(IBDN,"^",7) S IBCNS=$P(IBDN,"^",7) S IBAGAIN=1
"RTN","IBJTU3",99,0)
 Q
"RTN","IBJTU3",100,0)
 ;
"RTN","IBJTU3",101,0)
APL ; -- appeals phone number
"RTN","IBJTU3",102,0)
 I $P(IBD13,U,7)'="" S IBPH=$P(IBD13,U,7)
"RTN","IBJTU3",103,0)
 ;
"RTN","IBJTU3",104,0)
 ; -- see if there is an appeals address, use if state is there
"RTN","IBJTU3",105,0)
 S IBDN=$G(^DIC(36,+IBCNS,.14)) I $P(IBDN,"^",5) S IBADD=IBDN
"RTN","IBJTU3",106,0)
 ;
"RTN","IBJTU3",107,0)
 ; -- if other company processes claims start again
"RTN","IBJTU3",108,0)
 I $P(IBDN,"^",7) S IBCNS=$P(IBDN,"^",7) S IBAGAIN=1
"RTN","IBJTU3",109,0)
 Q
"RTN","IBJTU3",110,0)
 ;
"RTN","IBJTU3",111,0)
INQ ; -- inquiry phone number
"RTN","IBJTU3",112,0)
 I $P(IBD13,U,8)'="" S IBPH=$P(IBD13,U,8)
"RTN","IBJTU3",113,0)
 ;
"RTN","IBJTU3",114,0)
 ; -- see if there is an outpatient address, use if state is there
"RTN","IBJTU3",115,0)
 S IBDN=$G(^DIC(36,+IBCNS,.15)) I $P(IBDN,"^",5) S IBADD=IBDN
"RTN","IBJTU3",116,0)
 ;
"RTN","IBJTU3",117,0)
 ; -- if other company processes claims start again
"RTN","IBJTU3",118,0)
 I $P(IBDN,"^",7) S IBCNS=$P(IBDN,"^",7) S IBAGAIN=1
"RTN","IBJTU3",119,0)
 Q
"RTN","IBTRH5D")
0^80^B177109854^B177666961
"RTN","IBTRH5D",1,0)
IBTRH5D ;ALB/FA - HCSR Create 278 Request ;12-AUG-2014
"RTN","IBTRH5D",2,0)
 ;;2.0;INTEGRATED BILLING;**517,592**;21-MAR-94;Build 58
"RTN","IBTRH5D",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBTRH5D",4,0)
 ;;
"RTN","IBTRH5D",5,0)
 ; Contains Functions used in creating a 278 request from a
"RTN","IBTRH5D",6,0)
 ; selected entry in the HCSR Response worklist
"RTN","IBTRH5D",7,0)
 ;
"RTN","IBTRH5D",8,0)
 ; --------------------------   Entry Points   --------------------------------
"RTN","IBTRH5D",9,0)
 ; SELAPI       - Allows the user to see a quick view of the currently entered
"RTN","IBTRH5D",10,0)
 ;                Additional Patient Information lines and either pick one to 
"RTN","IBTRH5D",11,0)
 ;                edit, enter a new one or skip.
"RTN","IBTRH5D",12,0)
 ; SELDX        - Allows the user to see a quick view of the currently entered
"RTN","IBTRH5D",13,0)
 ;                Diagnoses and either pick one to edit, enter a new one or
"RTN","IBTRH5D",14,0)
 ;                skip.
"RTN","IBTRH5D",15,0)
 ; SELPD        - Allows the user to see a quick view of the currently entered
"RTN","IBTRH5D",16,0)
 ;                Patient Event Provider Data Lines and either pick one to 
"RTN","IBTRH5D",17,0)
 ;                edit, enter a new one or skip.
"RTN","IBTRH5D",18,0)
 ;-----------------------------------------------------------------------------
"RTN","IBTRH5D",19,0)
 ;
"RTN","IBTRH5D",20,0)
SELAPI(IBTRIEN) ;EP
"RTN","IBTRH5D",21,0)
 ; Called from within Input template IB CREATE 278 REQUEST
"RTN","IBTRH5D",22,0)
 ; Provides the user with a quick view of currently entered Additional Patient
"RTN","IBTRH5D",23,0)
 ; Information multiples and allows them to select one to edit or enter a new 
"RTN","IBTRH5D",24,0)
 ; one.
"RTN","IBTRH5D",25,0)
 ; Input:   IBTRIEN - IEN of the 356.22 entry being edited
"RTN","IBTRH5D",26,0)
 ; Returns: Value of the .01 field of the multiple to edit
"RTN","IBTRH5D",27,0)
 ;          "" if creating a new multiple, -2 to exit template
"RTN","IBTRH5D",28,0)
 ;          IBNEW - 1 if creating a new entry
"RTN","IBTRH5D",29,0)
 N AIDATA,CNT,ENTNUM,FDA,IEN,H1,H2,L1,L2,MAX,RETIEN,RTYPE,SECT,X,XX,Y,YY
"RTN","IBTRH5D",30,0)
 S IBNEW=0,SECT="Additional Patient Information"
"RTN","IBTRH5D",31,0)
 ;
"RTN","IBTRH5D",32,0)
 ; First check for an empty Additional Patient Information Line to delete
"RTN","IBTRH5D",33,0)
 D DELAPI(IBTRIEN)
"RTN","IBTRH5D",34,0)
 ;
"RTN","IBTRH5D",35,0)
 ; Next create an array of all current Additional Patient Information lines to
"RTN","IBTRH5D",36,0)
 ; display
"RTN","IBTRH5D",37,0)
 S XX=+$P($G(^IBT(356.22,IBTRIEN,11,0)),"^",4)  ; Total # of API Lines
"RTN","IBTRH5D",38,0)
 S MAX=$S(XX<10:"",1:"Additional Patient Information Lines")
"RTN","IBTRH5D",39,0)
 S IEN=0,CNT=0
"RTN","IBTRH5D",40,0)
 F  D  Q:+IEN=0
"RTN","IBTRH5D",41,0)
 . S IEN=$O(^IBT(356.22,IBTRIEN,11,IEN))
"RTN","IBTRH5D",42,0)
 . Q:+IEN=0
"RTN","IBTRH5D",43,0)
 . S CNT=CNT+1
"RTN","IBTRH5D",44,0)
 . S XX=$$LJ^XLFSTR(CNT,4)                      ; Selection #
"RTN","IBTRH5D",45,0)
 . S YY=$$GET1^DIQ(356.2211,IEN_","_DA_",",.01) ; Report Type Desc
"RTN","IBTRH5D",46,0)
 . S YY=$E(YY,1,28)_"  "
"RTN","IBTRH5D",47,0)
 . S XX=XX_$$LJ^XLFSTR(YY,30)
"RTN","IBTRH5D",48,0)
 . S YY=$$GET1^DIQ(356.2211,IEN_","_DA_",",.02) ; Delivery Method
"RTN","IBTRH5D",49,0)
 . S YY=$E(YY,1,20)_"  "
"RTN","IBTRH5D",50,0)
 . S XX=XX_$$LJ^XLFSTR(YY,23)
"RTN","IBTRH5D",51,0)
 . S YY=$$GET1^DIQ(356.2211,IEN_","_DA_",",.03) ; Attachment #
"RTN","IBTRH5D",52,0)
 . S YY=$E(YY,1,22)
"RTN","IBTRH5D",53,0)
 . S XX=XX_$$LJ^XLFSTR(YY,22)
"RTN","IBTRH5D",54,0)
 . S AIDATA(CNT)=IEN_"^"_XX
"RTN","IBTRH5D",55,0)
 ;
"RTN","IBTRH5D",56,0)
 I 'CNT D  Q $S($O(RETIEN(0)):RETIEN($O(RETIEN(0))),1:XX)
"RTN","IBTRH5D",57,0)
 . W !!,"No Additional Patient Information is currently on file.",!
"RTN","IBTRH5D",58,0)
 . S XX=$$ASKNEW("Add Additional Patient Information","NO")
"RTN","IBTRH5D",59,0)
 . Q:XX<0
"RTN","IBTRH5D",60,0)
 . S RTYPE=$$RTYPE(IBTRIEN)                     ; Get the .01 value
"RTN","IBTRH5D",61,0)
 . I RTYPE="" S XX=-1 Q                         ; None entered
"RTN","IBTRH5D",62,0)
 . S IBNEW=1,XX=RTYPE
"RTN","IBTRH5D",63,0)
 . S FDA(356.2211,"+1,"_IBTRIEN_",",.01)=RTYPE
"RTN","IBTRH5D",64,0)
 . D UPDATE^DIE("","FDA","RETIEN")              ; File the new line
"RTN","IBTRH5D",65,0)
 ;
"RTN","IBTRH5D",66,0)
 ; Next display all of the current Additional Patient Information
"RTN","IBTRH5D",67,0)
 S H1="#   Report Type                   Delivery Method        Attachment Control #"
"RTN","IBTRH5D",68,0)
 S H2="--  ----------------------------  ---------------------  ----------------------"
"RTN","IBTRH5D",69,0)
 S L1="The following Additional Patient Information is currently on file."
"RTN","IBTRH5D",70,0)
 S L2="Enter the # of an entry to edit, 'NEW' to add one or press Return to skip."
"RTN","IBTRH5D",71,0)
 S XX=$$SELENT(.AIDATA,H1,H2,L1,L2,MAX,"",SECT)
"RTN","IBTRH5D",72,0)
 I XX?1"D".N D  Q -3
"RTN","IBTRH5D",73,0)
 . S (XX,ENTNUM)=$P(XX,"D",2)
"RTN","IBTRH5D",74,0)
 . S XX=$P(AIDATA(XX),U)
"RTN","IBTRH5D",75,0)
 . D DELAPI(IBTRIEN,XX)
"RTN","IBTRH5D",76,0)
 . W !,"Entry #",ENTNUM," has been deleted."
"RTN","IBTRH5D",77,0)
 I XX<0 Q XX
"RTN","IBTRH5D",78,0)
 I XX=0 D  Q $S($O(RETIEN(0)):RETIEN($O(RETIEN(0))),1:XX)
"RTN","IBTRH5D",79,0)
 . S RTYPE=$$RTYPE(IBTRIEN)                     ; Get the .01 value
"RTN","IBTRH5D",80,0)
 . I RTYPE="" S XX=-1 Q                         ; None entered
"RTN","IBTRH5D",81,0)
 . S IBNEW=1
"RTN","IBTRH5D",82,0)
 . S XX=RTYPE
"RTN","IBTRH5D",83,0)
 . S FDA(356.2211,"+1,"_IBTRIEN_",",.01)=RTYPE
"RTN","IBTRH5D",84,0)
 . D UPDATE^DIE("","FDA","RETIEN")              ; File the new line
"RTN","IBTRH5D",85,0)
 Q $P(AIDATA(XX),"^",1)
"RTN","IBTRH5D",86,0)
 ;
"RTN","IBTRH5D",87,0)
DELAPI(IBTRIEN,IEN) ; Checks to see if the user entered 'NEW' to create a new 
"RTN","IBTRH5D",88,0)
 ; Additional Patient Information Line and didn't enter any data for it. Also
"RTN","IBTRH5D",89,0)
 ; checks to see if user selected to delete a specified line. If so, the 
"RTN","IBTRH5D",90,0)
 ; Additional Patient Information line with no data (or selected) is deleted
"RTN","IBTRH5D",91,0)
 ; Input:   IBTRIEN - IEN of the 356.22 entry being edited
"RTN","IBTRH5D",92,0)
 ;          IEN     - Optional, IEN of the multiple to be deleted if passed
"RTN","IBTRH5D",93,0)
 ;                    defaults to ""
"RTN","IBTRH5D",94,0)
 ; Output:  Empty or selected Additional Patient Information line is deleted (Potentially)
"RTN","IBTRH5D",95,0)
 N APIIEN,DA,DIK,X,XX,Y
"RTN","IBTRH5D",96,0)
 S:'$D(IEN) IEN=""
"RTN","IBTRH5D",97,0)
 I IEN'="" D  Q
"RTN","IBTRH5D",98,0)
 . S DA(1)=IBTRIEN,DA=IEN
"RTN","IBTRH5D",99,0)
 . S DIK="^IBT(356.22,DA(1),11,"
"RTN","IBTRH5D",100,0)
 . D ^DIK                                           ; Delete the multiple
"RTN","IBTRH5D",101,0)
 ;
"RTN","IBTRH5D",102,0)
 S APIIEN=+$P($G(^IBT(356.22,IBTRIEN,11,0)),"^",3)  ; Last Multiple IEN
"RTN","IBTRH5D",103,0)
 Q:'APIIEN
"RTN","IBTRH5D",104,0)
 S XX=$G(^IBT(356.22,IBTRIEN,11,APIIEN,0))
"RTN","IBTRH5D",105,0)
 S $P(XX,"^",1)=""                                  ; Remove .01 field
"RTN","IBTRH5D",106,0)
 Q:$TR(XX,"^","")'=""                               ; 0 node data exists
"RTN","IBTRH5D",107,0)
 S DA(1)=IBTRIEN,DA=APIIEN
"RTN","IBTRH5D",108,0)
 S DIK="^IBT(356.22,DA(1),11,"
"RTN","IBTRH5D",109,0)
 D ^DIK                                             ; Delete the multiple
"RTN","IBTRH5D",110,0)
 Q
"RTN","IBTRH5D",111,0)
 ;
"RTN","IBTRH5D",112,0)
RTYPE(IBTRIEN) ; Prompts the user to enter the .01 (Report Type) field of the
"RTN","IBTRH5D",113,0)
 ; Additional Patient Information multiple
"RTN","IBTRH5D",114,0)
 ; Input:   IBTRIEN - IEN of the 356.22 entry being edited
"RTN","IBTRH5D",115,0)
 ; Returns: IEN of the selected Report Type or "" of not entered
"RTN","IBTRH5D",116,0)
 N DA,DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBTRH5D",117,0)
 S DA(1)=IBTRIEN
"RTN","IBTRH5D",118,0)
 S DIR(0)="356.2211,.01",DIR("A")="  Report Type"
"RTN","IBTRH5D",119,0)
 D ^DIR
"RTN","IBTRH5D",120,0)
 Q:$D(DIRUT) ""
"RTN","IBTRH5D",121,0)
 Q $P(Y,"^",1)
"RTN","IBTRH5D",122,0)
 ;
"RTN","IBTRH5D",123,0)
SELPD(IBTRIEN) ;EP
"RTN","IBTRH5D",124,0)
 ; Called from within Input template IB CREATE 278 REQUEST
"RTN","IBTRH5D",125,0)
 ; Provides the user with a quick view of currently entered Provider Data
"RTN","IBTRH5D",126,0)
 ; multiples and allows them to select one to edit or enter a new one.
"RTN","IBTRH5D",127,0)
 ; Input:   IBTRIEN - IEN of the 356.22 entry being edited
"RTN","IBTRH5D",128,0)
 ;          IBTRBRF - 1 if this display is being used from the brief template
"RTN","IBTRH5D",129,0)
 ;                    0 or undefined otherwise
"RTN","IBTRH5D",130,0)
 ; Returns: Value of the .01 field of the multiple to edit
"RTN","IBTRH5D",131,0)
 ;          "" if creating a new multiple, -2 to exit template
"RTN","IBTRH5D",132,0)
 ;          IBNEW=1 when creating a new entry
"RTN","IBTRH5D",133,0)
 N CNT,ENTNUM,FDA,IEN,H1,H2,L1,L2,MAX,PDDATA,PTYPE,RETIEN,SECT,X,XX,Y,YY
"RTN","IBTRH5D",134,0)
 S IBNEW=0,SECT="Provider Data Information"
"RTN","IBTRH5D",135,0)
 ;
"RTN","IBTRH5D",136,0)
 ; First check for an empty Provider Data Line to delete
"RTN","IBTRH5D",137,0)
 D DELPD(IBTRIEN)
"RTN","IBTRH5D",138,0)
 ;
"RTN","IBTRH5D",139,0)
 ; Next create an array of all current Provider Data Information lines
"RTN","IBTRH5D",140,0)
 S XX=+$P($G(^IBT(356.22,IBTRIEN,13,0)),"^",4)          ; # of Multiples
"RTN","IBTRH5D",141,0)
 S MAX=$S(XX<14:"",1:"Provider Data Lines")
"RTN","IBTRH5D",142,0)
 S IEN=0,CNT=0
"RTN","IBTRH5D",143,0)
 F  D  Q:+IEN=0
"RTN","IBTRH5D",144,0)
 . S IEN=$O(^IBT(356.22,IBTRIEN,13,IEN))
"RTN","IBTRH5D",145,0)
 . Q:+IEN=0
"RTN","IBTRH5D",146,0)
 . S CNT=CNT+1
"RTN","IBTRH5D",147,0)
 . S XX=$$LJ^XLFSTR(CNT,4)                              ; Selection #
"RTN","IBTRH5D",148,0)
 . S YY=$$GET1^DIQ(356.2213,IEN_","_DA_",",.01)         ; Prov Type Desc
"RTN","IBTRH5D",149,0)
 . S YY=$E(YY,1,30)_"  "
"RTN","IBTRH5D",150,0)
 . S XX=XX_$$LJ^XLFSTR(YY,32)
"RTN","IBTRH5D",151,0)
 . ;
"RTN","IBTRH5D",152,0)
 . ; IBTRBRF is defined in IB CREATE 278 REQUEST SHORT input template
"RTN","IBTRH5D",153,0)
 . I $G(IBTRBRF)'=1 D
"RTN","IBTRH5D",154,0)
 . . S YY=$$GET1^DIQ(356.2213,IEN_","_DA_",",.02)       ; Person/Non-Person
"RTN","IBTRH5D",155,0)
 . . S XX=XX_$$LJ^XLFSTR(YY,12)
"RTN","IBTRH5D",156,0)
 . S YY=$$GET1^DIQ(356.2213,IEN_","_DA_",",.03)
"RTN","IBTRH5D",157,0)
 . S XX=XX_$$LJ^XLFSTR(YY,"28T")
"RTN","IBTRH5D",158,0)
 . S PDDATA(CNT)=IEN_"^"_XX
"RTN","IBTRH5D",159,0)
 ; 
"RTN","IBTRH5D",160,0)
 I 'CNT D  Q $S($O(RETIEN(0)):RETIEN($O(RETIEN(0))),1:XX)
"RTN","IBTRH5D",161,0)
 .I $G(IBTRBRF)'=1 D
"RTN","IBTRH5D",162,0)
 ..W !!,"No Provider Data Information is currently on file.",!
"RTN","IBTRH5D",163,0)
 ..S XX=$$ASKNEW("Add Provider Data Information")
"RTN","IBTRH5D",164,0)
 ..Q
"RTN","IBTRH5D",165,0)
 .I $G(IBTRBRF)=1 S XX=0
"RTN","IBTRH5D",166,0)
 .Q:XX<0
"RTN","IBTRH5D",167,0)
 .S PTYPE=$$PTYPE(IBTRIEN)                     ; Get the .01 value
"RTN","IBTRH5D",168,0)
 .I PTYPE="" S XX=-1 Q                         ; None entered
"RTN","IBTRH5D",169,0)
 .S IBNEW=1,XX=PTYPE
"RTN","IBTRH5D",170,0)
 .S FDA(356.2213,"+1,"_IBTRIEN_",",.01)=PTYPE
"RTN","IBTRH5D",171,0)
 .D UPDATE^DIE("","FDA","RETIEN")              ; File the new line
"RTN","IBTRH5D",172,0)
 .Q
"RTN","IBTRH5D",173,0)
 ;
"RTN","IBTRH5D",174,0)
 ; Next display all of the current Provider Data lines
"RTN","IBTRH5D",175,0)
 S H1="#   Provider Type                 "
"RTN","IBTRH5D",176,0)
 I $G(IBTRBRF)'=1 S H1=H1_"  Per/Non"
"RTN","IBTRH5D",177,0)
 S H1=H1_"     Provider"
"RTN","IBTRH5D",178,0)
 S H2="--  ------------------------------"
"RTN","IBTRH5D",179,0)
 I $G(IBTRBRF)'=1 S H2=H2_"  ----------"
"RTN","IBTRH5D",180,0)
 S H2=H2_"  ------------------------------"
"RTN","IBTRH5D",181,0)
 S L1="The following Provider Data Information is currently on file."
"RTN","IBTRH5D",182,0)
 S L2="Enter the # of an entry to edit, 'NEW' to add one or press Return to skip."
"RTN","IBTRH5D",183,0)
 S XX=$$SELENT(.PDDATA,H1,H2,L1,L2,MAX,"",SECT)
"RTN","IBTRH5D",184,0)
 I XX?1"D".N D  Q -3
"RTN","IBTRH5D",185,0)
 . S (XX,ENTNUM)=$P(XX,"D",2)
"RTN","IBTRH5D",186,0)
 . S XX=$P(PDDATA(XX),U)
"RTN","IBTRH5D",187,0)
 . D DELPD(IBTRIEN,XX)
"RTN","IBTRH5D",188,0)
 . W !,"Entry #",ENTNUM," has been deleted."
"RTN","IBTRH5D",189,0)
 I XX<0 Q XX
"RTN","IBTRH5D",190,0)
 I XX=0 D  Q $S($O(RETIEN(0)):RETIEN($O(RETIEN(0))),1:XX)
"RTN","IBTRH5D",191,0)
 . S PTYPE=$$PTYPE(IBTRIEN)                     ; Get the .01 value
"RTN","IBTRH5D",192,0)
 . I PTYPE="" S XX=-1 Q                         ; None entered
"RTN","IBTRH5D",193,0)
 . S XX=PTYPE
"RTN","IBTRH5D",194,0)
 . S IBNEW=1
"RTN","IBTRH5D",195,0)
 . S FDA(356.2213,"+1,"_IBTRIEN_",",.01)=PTYPE
"RTN","IBTRH5D",196,0)
 . D UPDATE^DIE("","FDA","RETIEN")              ; File the new line
"RTN","IBTRH5D",197,0)
 Q $P(PDDATA(XX),"^",1)
"RTN","IBTRH5D",198,0)
 ;
"RTN","IBTRH5D",199,0)
DELPD(IBTRIEN,IEN) ; Checks to see if the user entered 'NEW' to create a new 
"RTN","IBTRH5D",200,0)
 ; Provider Data Line and didn't enter any data for it or selected a line to 
"RTN","IBTRH5D",201,0)
 ; be deleted.  If so, the empty or selected Provider Data line is deleted
"RTN","IBTRH5D",202,0)
 ; Input:   IBTRIEN - IEN of the 356.22 entry being edited
"RTN","IBTRH5D",203,0)
 ;          IEN     - Optional, IEN of the multiple to be deleted if passed
"RTN","IBTRH5D",204,0)
 ;                    defaults to ""
"RTN","IBTRH5D",205,0)
 ; Output:  Empty or selected Provider Data line is deleted (Potentially)
"RTN","IBTRH5D",206,0)
 N PDIEN,DA,DIK,X,XX,Y
"RTN","IBTRH5D",207,0)
 S:'$D(IEN) IEN=""
"RTN","IBTRH5D",208,0)
 I IEN'="" D  Q
"RTN","IBTRH5D",209,0)
 . S DA(1)=IBTRIEN,DA=IEN
"RTN","IBTRH5D",210,0)
 . S DIK="^IBT(356.22,DA(1),13,"
"RTN","IBTRH5D",211,0)
 . D ^DIK                                           ; Delete the multiple
"RTN","IBTRH5D",212,0)
 ;
"RTN","IBTRH5D",213,0)
 S PDIEN=+$P($G(^IBT(356.22,IBTRIEN,13,0)),"^",3)   ; Last Multiple IEN
"RTN","IBTRH5D",214,0)
 Q:'PDIEN
"RTN","IBTRH5D",215,0)
 S XX=$G(^IBT(356.22,IBTRIEN,13,PDIEN,0))
"RTN","IBTRH5D",216,0)
 S $P(XX,"^",1)=""                                  ; Remove .01 field
"RTN","IBTRH5D",217,0)
 Q:$TR(XX,"^","")'=""                               ; 0 node data exists
"RTN","IBTRH5D",218,0)
 S DA(1)=IBTRIEN,DA=PDIEN
"RTN","IBTRH5D",219,0)
 S DIK="^IBT(356.22,DA(1),13,"
"RTN","IBTRH5D",220,0)
 D ^DIK                                             ; Delete the multiple
"RTN","IBTRH5D",221,0)
 Q
"RTN","IBTRH5D",222,0)
 ;
"RTN","IBTRH5D",223,0)
PTYPE(IBTRIEN) ; Prompts the user to enter the .01 (Provider Type) field of the
"RTN","IBTRH5D",224,0)
 ; Provider Data multiple
"RTN","IBTRH5D",225,0)
 ; Input:   IBTRIEN - IEN of the 356.22 entry being edited
"RTN","IBTRH5D",226,0)
 ; Returns: IEN of the selected Provider Type or "" of not entered
"RTN","IBTRH5D",227,0)
 N DA,DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBTRH5D",228,0)
 S DA(1)=IBTRIEN
"RTN","IBTRH5D",229,0)
 S DIR(0)="356.2213,.01",DIR("A")="  Provider Type"
"RTN","IBTRH5D",230,0)
 D ^DIR
"RTN","IBTRH5D",231,0)
 Q:$D(DIRUT) ""
"RTN","IBTRH5D",232,0)
 Q $P(Y,"^",1)
"RTN","IBTRH5D",233,0)
 ;
"RTN","IBTRH5D",234,0)
SELDX(IBTRIEN) ;EP
"RTN","IBTRH5D",235,0)
 ; Called from within Input template IB CREATE 278 REQUEST
"RTN","IBTRH5D",236,0)
 ; Provides the user with a quick view of currently entered Diagnoses and
"RTN","IBTRH5D",237,0)
 ; allows them to select one to edit or enter a new diagnosis.
"RTN","IBTRH5D",238,0)
 ; Input:   IBTRIEN - IEN of the 356.22 entry being edited
"RTN","IBTRH5D",239,0)
 ;          IBTRBRF - 1 if this display is being used from the brief template
"RTN","IBTRH5D",240,0)
 ;                    0 or undefined other otherwise
"RTN","IBTRH5D",241,0)
 ; Returns: Value of the .01 field of the multiple to edit
"RTN","IBTRH5D",242,0)
 ;          "" if creating a new multiple, -2 to exit template
"RTN","IBTRH5D",243,0)
 ;          -3 if a if a line was deleted
"RTN","IBTRH5D",244,0)
 ;          IBNEW=1 when creating a new entry
"RTN","IBTRH5D",245,0)
 N CNT,DXDATA,DXTYPE,ENTNUM,FDA,IEN,H1,H2,L1,L2,MAX,RETIEN,SECT,X,XX,Y,YY
"RTN","IBTRH5D",246,0)
 S IBNEW=0,SECT="Diagnosis Information"
"RTN","IBTRH5D",247,0)
 ;
"RTN","IBTRH5D",248,0)
 ; First check for an empty Diagnosis Line to delete
"RTN","IBTRH5D",249,0)
 D DELDX(IBTRIEN)
"RTN","IBTRH5D",250,0)
 ;
"RTN","IBTRH5D",251,0)
 ; Next create an array of all current Diagnoses lines
"RTN","IBTRH5D",252,0)
 S XX=+$P($G(^IBT(356.22,IBTRIEN,3,0)),"^",4)   ; Total # of Dx Lines
"RTN","IBTRH5D",253,0)
 S MAX=$S(XX<12:"",1:"Diagnosis Lines")
"RTN","IBTRH5D",254,0)
 S IEN=0,CNT=0
"RTN","IBTRH5D",255,0)
 F  D  Q:+IEN=0
"RTN","IBTRH5D",256,0)
 . S IEN=$O(^IBT(356.22,IBTRIEN,3,IEN))
"RTN","IBTRH5D",257,0)
 . Q:+IEN=0
"RTN","IBTRH5D",258,0)
 . S CNT=CNT+1
"RTN","IBTRH5D",259,0)
 . S XX=$$LJ^XLFSTR(CNT,4)                              ; Selection #
"RTN","IBTRH5D",260,0)
 . S YY=$$GET1^DIQ(356.223,IEN_","_DA_",",.01,"I")      ; Diagnosis Type
"RTN","IBTRH5D",261,0)
 . S YY=$$GET1^DIQ(356.006,YY_",",.01)
"RTN","IBTRH5D",262,0)
 . S XX=XX_$$LJ^XLFSTR(YY,7)
"RTN","IBTRH5D",263,0)
 . S YY=$$GET1^DIQ(356.223,IEN_","_DA_",",.02)          ; Diagnosis
"RTN","IBTRH5D",264,0)
 . S XX=XX_$$LJ^XLFSTR(YY,11)
"RTN","IBTRH5D",265,0)
 . I $G(IBTRBRF)'=1 D
"RTN","IBTRH5D",266,0)
 . . S YY=$$GET1^DIQ(356.223,IEN_","_DA_",",.03)        ; Date Known
"RTN","IBTRH5D",267,0)
 . . S XX=XX_$$LJ^XLFSTR(YY,14)
"RTN","IBTRH5D",268,0)
 . S DXDATA(CNT)=IEN_"^"_XX
"RTN","IBTRH5D",269,0)
 ;
"RTN","IBTRH5D",270,0)
 ; Creating 1st Diagnosis Line?
"RTN","IBTRH5D",271,0)
 I 'CNT D  Q $S($O(RETIEN(0)):RETIEN($O(RETIEN(0))),1:XX)
"RTN","IBTRH5D",272,0)
 .I $G(IBTRBRF)'=1 D
"RTN","IBTRH5D",273,0)
 ..W !!,"No Diagnosis Information is currently on file.",!
"RTN","IBTRH5D",274,0)
 ..S XX=$$ASKNEW("Add a new Diagnosis")
"RTN","IBTRH5D",275,0)
 ..Q
"RTN","IBTRH5D",276,0)
 .I $G(IBTRBRF)=1 S XX=0
"RTN","IBTRH5D",277,0)
 .Q:XX<0
"RTN","IBTRH5D",278,0)
 .S DXTYPE=$$DXTYPE(IBTRIEN)                   ; Get the .01 value
"RTN","IBTRH5D",279,0)
 .I DXTYPE="" S XX=-1 Q                        ; None entered
"RTN","IBTRH5D",280,0)
 .S IBNEW=1,XX=DXTYPE
"RTN","IBTRH5D",281,0)
 .S FDA(356.223,"+1,"_IBTRIEN_",",.01)=DXTYPE
"RTN","IBTRH5D",282,0)
 .D UPDATE^DIE("","FDA","RETIEN")              ; File the new line
"RTN","IBTRH5D",283,0)
 .Q
"RTN","IBTRH5D",284,0)
 ;
"RTN","IBTRH5D",285,0)
 ; Next display all of the current Diagnoses and let the user select one
"RTN","IBTRH5D",286,0)
 S H1="#   Type   Diagnosis"
"RTN","IBTRH5D",287,0)
 I $G(IBTRBRF)'=1 S H1=H1_"  Date DX Known"
"RTN","IBTRH5D",288,0)
 S H2="--  -----  ---------"
"RTN","IBTRH5D",289,0)
 I $G(IBTRBRF)'=1 S H2=H2_"  -------------"
"RTN","IBTRH5D",290,0)
 S L1="The following Diagnoses are currently on file."
"RTN","IBTRH5D",291,0)
 S L2="Enter the # of a Diagnosis to edit, 'NEW' to add one or press Return to skip."
"RTN","IBTRH5D",292,0)
 S XX=$$SELENT(.DXDATA,H1,H2,L1,L2,MAX,"",SECT)
"RTN","IBTRH5D",293,0)
 I XX?1"D".N D  Q -3
"RTN","IBTRH5D",294,0)
 . S (XX,ENTNUM)=$P(XX,"D",2)
"RTN","IBTRH5D",295,0)
 . S XX=$P(DXDATA(XX),U)
"RTN","IBTRH5D",296,0)
 . D DELDX(IBTRIEN,XX)
"RTN","IBTRH5D",297,0)
 . W !,"Entry #",ENTNUM," has been deleted."
"RTN","IBTRH5D",298,0)
 I XX<0 Q XX
"RTN","IBTRH5D",299,0)
 I XX=0 D  Q $S($O(RETIEN(0)):RETIEN($O(RETIEN(0))),1:XX)
"RTN","IBTRH5D",300,0)
 . S DXTYPE=$$DXTYPE(IBTRIEN)                   ; Get the .01 value
"RTN","IBTRH5D",301,0)
 . I DXTYPE="" S XX=-1 Q                        ; None entered
"RTN","IBTRH5D",302,0)
 . S XX=DXTYPE
"RTN","IBTRH5D",303,0)
 . S IBNEW=1
"RTN","IBTRH5D",304,0)
 . S FDA(356.223,"+1,"_IBTRIEN_",",.01)=DXTYPE
"RTN","IBTRH5D",305,0)
 . D UPDATE^DIE("","FDA","RETIEN")              ; File the new line
"RTN","IBTRH5D",306,0)
 Q $P(DXDATA(XX),"^",1)
"RTN","IBTRH5D",307,0)
 ;
"RTN","IBTRH5D",308,0)
DXTYPE(IBTRIEN) ; Prompts the user to enter the .01 (Diagnosis Type) field of
"RTN","IBTRH5D",309,0)
 ; the diagnosis multiple
"RTN","IBTRH5D",310,0)
 ; Input:   IBTRIEN - IEN of the 356.22 entry being edited
"RTN","IBTRH5D",311,0)
 ; Returns: IEN of the selected Diagnosis Type or "" of not entered
"RTN","IBTRH5D",312,0)
 N DA,DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBTRH5D",313,0)
 S DA(1)=IBTRIEN,DA=$P($G(^IBT(356.22,IBTRIEN,3,0)),"^",3)+1
"RTN","IBTRH5D",314,0)
 S DIR(0)="356.223,.01",DIR("A")="  Diagnosis Qualifier"
"RTN","IBTRH5D",315,0)
 D ^DIR
"RTN","IBTRH5D",316,0)
 Q:$D(DIRUT) ""
"RTN","IBTRH5D",317,0)
 Q $P(Y,"^",1)
"RTN","IBTRH5D",318,0)
 ;
"RTN","IBTRH5D",319,0)
DELDX(IBTRIEN,IEN) ; Checks to see if the user entered 'NEW' to create a new 
"RTN","IBTRH5D",320,0)
 ; Diagnosis Line and didn't enter any data for it or selected a multiple to
"RTN","IBTRH5D",321,0)
 ; to be deleted.  If so, the empty or selected multiple is deleted
"RTN","IBTRH5D",322,0)
 ; Input:   IBTRIEN - IEN of the 356.22 entry being edited
"RTN","IBTRH5D",323,0)
 ;          IEN     - Optional, IEN of the multiple to be deleted if passed
"RTN","IBTRH5D",324,0)
 ;                    defaults to ""
"RTN","IBTRH5D",325,0)
 ; Output:  Empty or selected Diagnosis line is deleted (Potentially)
"RTN","IBTRH5D",326,0)
 N DA,DIK,DXIEN,X,XX,Y
"RTN","IBTRH5D",327,0)
 S:'$D(IEN) IEN=""
"RTN","IBTRH5D",328,0)
 I IEN'="" D  Q
"RTN","IBTRH5D",329,0)
 . S DA(1)=IBTRIEN,DA=IEN
"RTN","IBTRH5D",330,0)
 . S DIK="^IBT(356.22,DA(1),3,"
"RTN","IBTRH5D",331,0)
 . D ^DIK                                           ; Delete the multiple
"RTN","IBTRH5D",332,0)
 ;
"RTN","IBTRH5D",333,0)
 S DXIEN=+$P($G(^IBT(356.22,IBTRIEN,3,0)),"^",3)    ; Last Multiple IEN
"RTN","IBTRH5D",334,0)
 Q:'DXIEN
"RTN","IBTRH5D",335,0)
 S XX=$G(^IBT(356.22,IBTRIEN,3,DXIEN,0))
"RTN","IBTRH5D",336,0)
 S $P(XX,"^",1)=""                                  ; Remove .01 field
"RTN","IBTRH5D",337,0)
 Q:$TR(XX,"^","")'=""                               ; 0 node data exists
"RTN","IBTRH5D",338,0)
 S DA(1)=IBTRIEN,DA=DXIEN
"RTN","IBTRH5D",339,0)
 S DIK="^IBT(356.22,DA(1),3,"
"RTN","IBTRH5D",340,0)
 D ^DIK                                             ; Delete the multiple
"RTN","IBTRH5D",341,0)
 Q
"RTN","IBTRH5D",342,0)
 ;
"RTN","IBTRH5D",343,0)
ASKNEW(PROMPT,DEFAULT) ;EP
"RTN","IBTRH5D",344,0)
 ; Ask if user wants to create a new entry
"RTN","IBTRH5D",345,0)
 ; Input:   PROMPT      - Yes/No question to ask the user
"RTN","IBTRH5D",346,0)
 ;          DEFALT      - Default Answer
"RTN","IBTRH5D",347,0)
 ;                        Optional, if not passed, set to 'YES'
"RTN","IBTRH5D",348,0)
 ; Returns: 0 - User wants to add a new Entry
"RTN","IBTRH5D",349,0)
 ;         -1 - User doesn't want to add a new entry
"RTN","IBTRH5D",350,0)
 ;         -2 - User wants to exit template
"RTN","IBTRH5D",351,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,XX,Y
"RTN","IBTRH5D",352,0)
 S:'$D(DEFAULT) DEFAULT="YES"
"RTN","IBTRH5D",353,0)
 S XX=$P(PROMPT,"Add ",2)
"RTN","IBTRH5D",354,0)
 S DIR("?")="Select NO to skip this section. Select YES to enter "_XX_"."
"RTN","IBTRH5D",355,0)
 S DIR(0)="Y",DIR("A")=PROMPT,DIR("B")=DEFAULT
"RTN","IBTRH5D",356,0)
A1 ;
"RTN","IBTRH5D",357,0)
 D ^DIR
"RTN","IBTRH5D",358,0)
 I Y?1"^"1.E D JUMPERR^IBTRH5H G A1
"RTN","IBTRH5D",359,0)
 Q:$D(DUOUT) -2                                 ; User Pressed ^
"RTN","IBTRH5D",360,0)
 Q:$D(DTOUT) -1                                 ; User timed out
"RTN","IBTRH5D",361,0)
 I Y=0 Q -1
"RTN","IBTRH5D",362,0)
 Q 1
"RTN","IBTRH5D",363,0)
 ;
"RTN","IBTRH5D",364,0)
SELENT(ARRAY,H1,H2,L1,L2,MAX,INDENT,SECT) ; Select an entry to add/edit from a list
"RTN","IBTRH5D",365,0)
 ; Input:   ARRAY()     - Array of multiple lines to be displayed
"RTN","IBTRH5D",366,0)
 ;          H1          - 1st line of Header Information
"RTN","IBTRH5D",367,0)
 ;          H2          - 2nd line of Header Information
"RTN","IBTRH5D",368,0)
 ;          L1          - 1st line of DIR display
"RTN","IBTRH5D",369,0)
 ;          L2          - Selection line text
"RTN","IBTRH5D",370,0)
 ;          MAX         - Multiple Description
"RTN","IBTRH5D",371,0)
 ;                        If passed, entering a new line is not allowed
"RTN","IBTRH5D",372,0)
 ;                        Optional, defaults to "" if not passed
"RTN","IBTRH5D",373,0)
 ;          INDENT      - 1 to indent 2 spaces
"RTN","IBTRH5D",374,0)
 ;                        Optional, defaults to 0
"RTN","IBTRH5D",375,0)
 ;          SECT        - Section Header
"RTN","IBTRH5D",376,0)
 ; Returns: # - User wants to edit Entry #
"RTN","IBTRH5D",377,0)
 ;          0 - User wants to Add a new Entry
"RTN","IBTRH5D",378,0)
 ;         -1 - User wants to skip this section
"RTN","IBTRH5D",379,0)
 ;         -2 - User wants to exit template
"RTN","IBTRH5D",380,0)
 N DEL,DIR,DIROUT,DIRUT,DOK,DTOUT,DUOUT,IX,LN,X,XX,Y,YY
"RTN","IBTRH5D",381,0)
 S:'$D(MAX) MAX=""
"RTN","IBTRH5D",382,0)
 S:'$D(INDENT) INDENT=0
"RTN","IBTRH5D",383,0)
 S:'$D(SECT) SECT=""
"RTN","IBTRH5D",384,0)
 S DIR(0)="FO",LN=0
"RTN","IBTRH5D",385,0)
 S LN=LN+1,DIR("A",LN)=L1
"RTN","IBTRH5D",386,0)
 S LN=LN+1,DIR("A",LN)=" "
"RTN","IBTRH5D",387,0)
 S LN=LN+1,DIR("A",LN)=H1
"RTN","IBTRH5D",388,0)
 S LN=LN+1,DIR("A",LN)=H2
"RTN","IBTRH5D",389,0)
 S IX=""
"RTN","IBTRH5D",390,0)
 F  D  Q:IX=""
"RTN","IBTRH5D",391,0)
 . S IX=$O(ARRAY(IX))
"RTN","IBTRH5D",392,0)
 . Q:IX=""
"RTN","IBTRH5D",393,0)
 . S LN=LN+1,DIR("A",LN)=$P(ARRAY(IX),"^",2)
"RTN","IBTRH5D",394,0)
 S LN=LN+1,DIR("A",LN)=" "
"RTN","IBTRH5D",395,0)
 S LN=LN+1,DIR("A",LN)=L2
"RTN","IBTRH5D",396,0)
 S DIR("A")=$S(INDENT:"  ",1:"")_"Selection #"
"RTN","IBTRH5D",397,0)
 W !!
"RTN","IBTRH5D",398,0)
SELE1 ;
"RTN","IBTRH5D",399,0)
 ;S XX="Select NO to skip this section. Select YES to enter "_SECT_"."
"RTN","IBTRH5D",400,0)
 S XX="To delete an entry from the list, select D followed by the "
"RTN","IBTRH5D",401,0)
 S XX=XX_"number of the entry you wish to delete."
"RTN","IBTRH5D",402,0)
 S DIR("?")=XX
"RTN","IBTRH5D",403,0)
 D ^DIR
"RTN","IBTRH5D",404,0)
 S DOK=1
"RTN","IBTRH5D",405,0)
 S Y=$$UP^XLFSTR(Y)                             ; Convert to Upper
"RTN","IBTRH5D",406,0)
 I Y?1"D".N D  Q:DOK Y
"RTN","IBTRH5D",407,0)
 . S XX=$P(Y,"D",2)
"RTN","IBTRH5D",408,0)
 . I XX>0,XX'>CNT,XX?.N Q                       ; Selected Entry to delete
"RTN","IBTRH5D",409,0)
 . S DOK=0
"RTN","IBTRH5D",410,0)
 . D SELERR(INDENT)
"RTN","IBTRH5D",411,0)
 G:'DOK SELE1
"RTN","IBTRH5D",412,0)
 I Y?1"^"1.E D JUMPERR^IBTRH5H G SELE1
"RTN","IBTRH5D",413,0)
 I $D(DUOUT) Q -2                               ; User pressed ^
"RTN","IBTRH5D",414,0)
 I $D(DTOUT) Q -1                               ; User timed out
"RTN","IBTRH5D",415,0)
 I Y="" Q -1                                    ; User pressed return
"RTN","IBTRH5D",416,0)
 S XX=$$UP^XLFSTR(Y)
"RTN","IBTRH5D",417,0)
 S YY=$S((XX="NEW")!(XX="N")!(XX="NE"):1,1:0)   ; User wants to enter a new one
"RTN","IBTRH5D",418,0)
 I MAX'="",YY D  G SELE1
"RTN","IBTRH5D",419,0)
 . W *7,!!,$S(INDENT:"  ",1:"")
"RTN","IBTRH5D",420,0)
 . W "The maximum Number of "_MAX_" have already been entered.",!
"RTN","IBTRH5D",421,0)
 . ;JWS;IB*2.0*592
"RTN","IBTRH5D",422,0)
 . I +CNT>21 R !!,"Press <ENTER> to continue",X:30
"RTN","IBTRH5D",423,0)
 Q:YY 0                                         ; Creating a new one
"RTN","IBTRH5D",424,0)
 I XX>0,XX'>CNT,XX?.N Q XX                      ; Selected Entry
"RTN","IBTRH5D",425,0)
 D SELERR(INDENT)
"RTN","IBTRH5D",426,0)
 G SELE1
"RTN","IBTRH5D",427,0)
 ;
"RTN","IBTRH5D",428,0)
SELERR(INDENT)  ; Multiple Selection error
"RTN","IBTRH5D",429,0)
 ; Input:   INDENT  - 1 to indent error message display
"RTN","IBTRH5D",430,0)
 W !!,*7,$S(INDENT:"  ",1:"")
"RTN","IBTRH5D",431,0)
 W "Enter a number from 1-",CNT,".  Enter NEW to enter a new entry."
"RTN","IBTRH5D",432,0)
 W !,$S(INDENT:"  ",1:"")
"RTN","IBTRH5D",433,0)
 W "To delete an entry from the list, select D followed by the "
"RTN","IBTRH5D",434,0)
 W !,$S(INDENT:"  ",1:"")
"RTN","IBTRH5D",435,0)
 W "number of the entry you wish to remove. Press return to skip selection."
"RTN","IBTRH5D",436,0)
 W !!
"RTN","IBTRH5D",437,0)
 Q
"RTN","IBY592PO")
0^79^B30143818^n/a
"RTN","IBY592PO",1,0)
IBY592PO ;EDE/JWS - POST-INSTALL FOR IB*2.0*592 ;22-FEB-2017
"RTN","IBY592PO",2,0)
 ;;2.0;INTEGRATED BILLING;**592**;21-MAR-94;Build 58
"RTN","IBY592PO",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBY592PO",4,0)
 ;
"RTN","IBY592PO",5,0)
 ; IA# 10009 - FILE^DICN
"RTN","IBY592PO",6,0)
 ; IA# 10018 - ^DIE
"RTN","IBY592PO",7,0)
 ; IA# 2053 - UPDATE^DIE
"RTN","IBY592PO",8,0)
 ; IA# 10141 - MES^XPDUTL
"RTN","IBY592PO",9,0)
 ;
"RTN","IBY592PO",10,0)
EN ;Entry Point
"RTN","IBY592PO",11,0)
 S IBA(2)="IB*2*592 Post-Install...",(IBA(1),IBA(3))=" " D MES^XPDUTL(.IBA) K IBA
"RTN","IBY592PO",12,0)
 D UPDERR,UPDTOS,RPTYP,RIT,COMP
"RTN","IBY592PO",13,0)
 ; set default processing of Dental Claims to YES in Site Parameters
"RTN","IBY592PO",14,0)
 S DIE="^IBE(350.9,",DA=1,DR="8.2////1" D ^DIE
"RTN","IBY592PO",15,0)
 S IBA(2)="IB*2*592 Post-Install Complete.",(IBA(1),IBA(3))=" " D MES^XPDUTL(.IBA) K IBA
"RTN","IBY592PO",16,0)
 Q
"RTN","IBY592PO",17,0)
 ;
"RTN","IBY592PO",18,0)
UPDERR ; Update existing error code message for 350.8
"RTN","IBY592PO",19,0)
 N IBCODE,IBMESN,IBIEN,DIE,DIC,DA,DR,X,Y
"RTN","IBY592PO",20,0)
 S IBCODE="IB357",IBMESN="Rendering Provider or Assistant Surgeon required on Dental Claims."
"RTN","IBY592PO",21,0)
 S IBIEN=$O(^IBE(350.8,"C",IBCODE,0)) I 'IBIEN D CREATE
"RTN","IBY592PO",22,0)
 S IBCODE="IB358",IBMESN="Assistant Surgeon's NPI is required."
"RTN","IBY592PO",23,0)
 S IBIEN=$O(^IBE(350.8,"C",IBCODE,0)) I 'IBIEN D CREATE
"RTN","IBY592PO",24,0)
 S IBCODE="IB256",IBMESN="Assistant Surgeon taxonomy missing."
"RTN","IBY592PO",25,0)
 S IBIEN=$O(^IBE(350.8,"C",IBCODE,0)) I 'IBIEN D CREATE
"RTN","IBY592PO",26,0)
 S IBCODE="IB335",IBMESN="Claim Level Assistant Surgeon differs from all Line Level Assistant Surgeons."
"RTN","IBY592PO",27,0)
 S IBIEN=$O(^IBE(350.8,"C",IBCODE,0)) I 'IBIEN D CREATE
"RTN","IBY592PO",28,0)
 S IBCODE="IB359",IBMESN="Medicare (WNR) does not accept Dental claims."
"RTN","IBY592PO",29,0)
 S IBIEN=$O(^IBE(350.8,"C",IBCODE,0)) I 'IBIEN D CREATE
"RTN","IBY592PO",30,0)
 S IBCODE="IB362",IBMESN="Insurance Company does not have Dental Coverage."
"RTN","IBY592PO",31,0)
 S IBIEN=$O(^IBE(350.8,"C",IBCODE,0)) I 'IBIEN D CREATE
"RTN","IBY592PO",32,0)
 S IBCODE="IB363",IBMESN="Claim Level Rendering and Asst Surgeon NOT allowed on same Dental Claim."
"RTN","IBY592PO",33,0)
 S IBIEN=$O(^IBE(350.8,"C",IBCODE,0)) I 'IBIEN D CREATE
"RTN","IBY592PO",34,0)
 Q
"RTN","IBY592PO",35,0)
 ;
"RTN","IBY592PO",36,0)
CREATE ;Create entry for IB error file in D350.8 if not there
"RTN","IBY592PO",37,0)
 S DIC="^IBE(350.8,",DIC(0)="",X=IBCODE D FILE^DICN K DIC,X
"RTN","IBY592PO",38,0)
 I Y=-1 D MES^XPDUTL(">> IB ERROR - Entry '"_IBCODE_"' was unable to be created <<") Q
"RTN","IBY592PO",39,0)
 S IBIEN=+Y
"RTN","IBY592PO",40,0)
 S DIE="^IBE(350.8,",DA=IBIEN,DR=".02////"_IBMESN_";.03////"_IBCODE_";.04////1;.05////1" D ^DIE K DIE,DIC,DA,DR
"RTN","IBY592PO",41,0)
 Q
"RTN","IBY592PO",42,0)
 ;
"RTN","IBY592PO",43,0)
UPDTOS ;Create Type of Service entries for Dental file 353.2
"RTN","IBY592PO",44,0)
 N IBFDA,I,IBIEN,ERROR,CT
"RTN","IBY592PO",45,0)
 F I=23,24,25,26,27,28,35,36,37,38,39,40,41,"E12","E13","E14","E15","E16","E17","E18","E19","E20","E21","E22","E23","F3","F7" D
"RTN","IBY592PO",46,0)
 . I $O(^IBE(353.2,"B",I,0)) Q  ;already exists
"RTN","IBY592PO",47,0)
 . S IBFDA(353.2,"+1,",.01)=I
"RTN","IBY592PO",48,0)
 . I +I<29 D
"RTN","IBY592PO",49,0)
 .. S IBFDA(353.2,"+1,",.02)=$P("DIAGNOSTIC DENTAL,PERIODONTICS,RESTORATIVE,ENDODONTICS,MAXILLOFACIAL PROSTHETICS,ADJUNCTIVE DENTAL SERVICES",",",I-22)
"RTN","IBY592PO",50,0)
 .. S IBFDA(353.2,"+1,",.03)=$P("DIAGNOSTIC DENTAL,PERIODONTICS,RESTORATIVE,ENDODONTICS,MAXILLOFACIAL PRO,ADJUNCTIVE SERVICES",",",I-22)
"RTN","IBY592PO",51,0)
 . I +I>34,+I<42 D
"RTN","IBY592PO",52,0)
 .. S IBFDA(353.2,"+1,",.02)=$P("DENTAL CARE,DENTAL CROWNS,DENTAL ACCIDENT,ORTHODONTICS,PROSTHODONTICS,ORAL SURGERY,PREVENTIVE DENTAL",",",I-34)
"RTN","IBY592PO",53,0)
 .. S IBFDA(353.2,"+1,",.03)=$P("DENTAL CARE,DENTAL CROWNS,DENTAL ACCIDENT,ORTHODONTICS,PROSTHODONTICS,ORAL SURGERY,PREVENTIVE DENTAL",",",I-34)
"RTN","IBY592PO",54,0)
 . I $E(I)="E" D
"RTN","IBY592PO",55,0)
 .. S CT=$E(I,2,3)
"RTN","IBY592PO",56,0)
 .. I CT<18 S IBFDA(353.2,"+1,",.02)=$P("BASIC RESTORATIVE - DENTAL,MAJOR RESTORATIVE - DENTAL,FIXED PROSTHODONTICS,REMOVABLE PROSTHODONTICS,INTRAORAL IMAGES - COMPLETE SERIES,ORAL EVALUATION",",",CT-11)
"RTN","IBY592PO",57,0)
 .. I CT>17 S IBFDA(353.2,"+1,",.02)=$P("DENTAL PROPHYLAXIS,PANORAMIC IMAGES,SEALANTS,FLOURIDE TREATMENTS,DENTAL IMPLANTS,TEMPOROMANDIBULAR JOINT DYSFUNCTION",",",CT-17)
"RTN","IBY592PO",58,0)
 .. S IBFDA(353.2,"+1,",.03)=$P("BASIC RESTORATIVE,MAJOR RESTORATIVE,FIXED PROSTH,REMOVABLE PROSTH,IMAGES - COMPLETE,ORAL EVALUATION,PROPHYLAXIS,PANORAMIC IMAGES,SEALANTS,FLOURIDE,DENTAL IMPLANTS,JOINT DYSFUNCTION",",",CT-11)
"RTN","IBY592PO",59,0)
 . I I="F3" D
"RTN","IBY592PO",60,0)
 .. S IBFDA(353.2,"+1,",.02)="DENTAL COVERAGE"
"RTN","IBY592PO",61,0)
 .. S IBFDA(353.2,"+1,",.03)="DENTAL COVERAGE"
"RTN","IBY592PO",62,0)
 . I I="F7" D
"RTN","IBY592PO",63,0)
 .. S IBFDA(353.2,"+1,",.02)="ORTHODONTIA COVERAGE"
"RTN","IBY592PO",64,0)
 .. S IBFDA(353.2,"+1,",.03)="ORTHODONTIA COVERAGE"
"RTN","IBY592PO",65,0)
 . D UPDATE^DIE("","IBFDA","IBIEN","ERROR")
"RTN","IBY592PO",66,0)
 . I $D(ERROR) D MES^XPDUTL(">> IB ERROR - IB*2.0*592 Post Install - "_$G(ERROR("DIERR",1,"TEXT",1))_" <<")
"RTN","IBY592PO",67,0)
 . K IBIEN,ERROR
"RTN","IBY592PO",68,0)
 Q
"RTN","IBY592PO",69,0)
 ;
"RTN","IBY592PO",70,0)
RPTYP ;add IB ATTACHMENT REPORT TYPE (353.3) 'P6'
"RTN","IBY592PO",71,0)
 N IBRPT,IBMESN,IBIEN,DIE,DIC,DA,DR,X,Y
"RTN","IBY592PO",72,0)
 S IBRPT="P6",IBMESN="Periodontal Charts"
"RTN","IBY592PO",73,0)
 S IBIEN=$O(^IBE(353.3,"B",IBRPT,0)) I 'IBIEN D
"RTN","IBY592PO",74,0)
 . S DIC="^IBE(353.3,",DIC(0)="",X=IBRPT D FILE^DICN K DIC,X
"RTN","IBY592PO",75,0)
 . I Y=-1 D MES^XPDUTL(">> IB ATTACHMENT REPORT TYPE - Entry '"_IBRPT_"' was unable to be created <<") Q
"RTN","IBY592PO",76,0)
 . S IBIEN=+Y
"RTN","IBY592PO",77,0)
 . S DIE="^IBE(353.3,",DA=IBIEN,DR="1////"_IBMESN D ^DIE K DIE,DIC,DA,DR
"RTN","IBY592PO",78,0)
 . Q
"RTN","IBY592PO",79,0)
 K DIE,DIC,DA,DR
"RTN","IBY592PO",80,0)
 S IBRPT="EB",IBIEN=$O(^IBE(353.3,"B",IBRPT,0)) I 'IBIEN Q
"RTN","IBY592PO",81,0)
 S DIE="^IBE(353.3,",DA=IBIEN,DR="1////Explanation of Benefits (COB or Medicare Secondary Payor)"
"RTN","IBY592PO",82,0)
 D ^DIE K DIE,DIC,DA,DR
"RTN","IBY592PO",83,0)
 Q
"RTN","IBY592PO",84,0)
 ;
"RTN","IBY592PO",85,0)
 ;
"RTN","IBY592PO",86,0)
RIT ; Recompile billing screen templates due to changes to Field #399,.21 cross-references.
"RTN","IBY592PO",87,0)
 N X,Y,DMAX,IBN
"RTN","IBY592PO",88,0)
 D MES^XPDUTL(">> Recompiling Input Templates for Billing Screens ...")
"RTN","IBY592PO",89,0)
 F IBN=1:1:10,"102","10H" D
"RTN","IBY592PO",90,0)
 .S X="IBXS"_$S(IBN=10:"A",IBN="102":"A2",IBN="10H":"AH",1:IBN),Y=$$FIND1^DIC(.402,,"X","IB SCREEN"_IBN,"B"),DMAX=$$ROUSIZE^DILF
"RTN","IBY592PO",91,0)
 .I Y D EN^DIEZ
"RTN","IBY592PO",92,0)
 D MES^XPDUTL("     Recompile Completed.")
"RTN","IBY592PO",93,0)
 Q
"RTN","IBY592PO",94,0)
 ;
"RTN","IBY592PO",95,0)
COMP ; Recompile index routines for file 399 - found at Kansas City IOC site
"RTN","IBY592PO",96,0)
 ; IA# 10096 - %ZOSF
"RTN","IBY592PO",97,0)
 ; IA# 10025 - EN^DIKZ
"RTN","IBY592PO",98,0)
 ; IA# 2649 - ROUSIZE^DILF
"RTN","IBY592PO",99,0)
 N X,Y,DMAX
"RTN","IBY592PO",100,0)
 D MES^XPDUTL(">> Recompiling File 399 Index routines ...")
"RTN","IBY592PO",101,0)
 ;D OS^DII
"RTN","IBY592PO",102,0)
 ;I '$D(DISYS)#10 D
"RTN","IBY592PO",103,0)
 ;. I $D(^%ZOSF("OS"))#2 S DISYS=+$P(^("OS"),"^",2) Q:DISYS>0
"RTN","IBY592PO",104,0)
 ;. S DISYS=$S($D(^DD("OS"))#2:^("OS"),1:100)
"RTN","IBY592PO",105,0)
 S X="IBXX",Y=399
"RTN","IBY592PO",106,0)
 S DMAX=$$ROUSIZE^DILF
"RTN","IBY592PO",107,0)
 D EN^DIKZ
"RTN","IBY592PO",108,0)
 D MES^XPDUTL("     Recompile Completed.")
"RTN","IBY592PO",109,0)
 Q
"RTN","IBY592PO",110,0)
 ;
"RTN","IBY592PR")
0^16^B28375720^n/a
"RTN","IBY592PR",1,0)
IBY592PR ;EDE/JWS - Pre-Installation for IB patch 592 ; 2/28/17 4:33pm
"RTN","IBY592PR",2,0)
 ;;2.0;INTEGRATED BILLING;**592**;21-MAR-94;Build 58
"RTN","IBY592PR",3,0)
 ;;Per VA Directive 6402, this routine should not be modified.
"RTN","IBY592PR",4,0)
 ;
"RTN","IBY592PR",5,0)
 ; IA# 10013 - ^DIK
"RTN","IBY592PR",6,0)
 ;
"RTN","IBY592PR",7,0)
 ; need to check existence of Form #7, file 353 BILL FORM TYPE file
"RTN","IBY592PR",8,0)
 I $D(^IBE(353,7,0)),$P($G(^(0)),"^")'="J430D" D FORM
"RTN","IBY592PR",9,0)
 ;
"RTN","IBY592PR",10,0)
 ; delete all output formatter (O.F.) data elements included in build
"RTN","IBY592PR",11,0)
 D DELOF
"RTN","IBY592PR",12,0)
 Q
"RTN","IBY592PR",13,0)
 ;
"RTN","IBY592PR",14,0)
FORM ;move existing form 7 to 207
"RTN","IBY592PR",15,0)
 N NAME,FDA,A,CT
"RTN","IBY592PR",16,0)
 M ^IBE(353,207)=^IBE(353,7)
"RTN","IBY592PR",17,0)
 S NAME=$P($G(^IBE(353,207,0)),"^")
"RTN","IBY592PR",18,0)
 S ^IBE(353,"B",NAME,207)=""
"RTN","IBY592PR",19,0)
 S FDA(353,"207,",2.04)=0 D FILE^DIE(,"FDA",)
"RTN","IBY592PR",20,0)
 S FDA(353,"7,",.01)="J430D" D FILE^DIE(,"FDA",)
"RTN","IBY592PR",21,0)
 D MES^XPDUTL("Checking Bill/Claims file Bill Form Type...")
"RTN","IBY592PR",22,0)
 S A=0 F  S A=$O(^DGCR(399,A)) Q:A'=+A  S CT=$G(CT)+1 W:(CT#1000)=0 "." I $P($G(^(A,0)),"^",19)=7 D
"RTN","IBY592PR",23,0)
 . S $P(^DGCR(399,A,0),"^",19)=207
"RTN","IBY592PR",24,0)
 . Q
"RTN","IBY592PR",25,0)
 Q
"RTN","IBY592PR",26,0)
 ;
"RTN","IBY592PR",27,0)
INCLUDE(FILE,Y) ; function to determine if O.F. entry should be included in the build
"RTN","IBY592PR",28,0)
 ; FILE=5,6,7 indicating file 364.x
"RTN","IBY592PR",29,0)
 ; Y=ien to file
"RTN","IBY592PR",30,0)
 NEW OK,LN,TAG,DATA
"RTN","IBY592PR",31,0)
 S OK=0
"RTN","IBY592PR",32,0)
 F LN=2:1 S TAG="ENT"_FILE_"+"_LN,DATA=$P($T(@TAG),";;",2) Q:DATA=""  I $F(DATA,U_Y_U) S OK=1 Q
"RTN","IBY592PR",33,0)
 Q OK
"RTN","IBY592PR",34,0)
 ;
"RTN","IBY592PR",35,0)
 ;Delete edited entries to insure clean install of new entries
"RTN","IBY592PR",36,0)
 ;Delete obsolete entries.
"RTN","IBY592PR",37,0)
DELOF   ; Delete included OF entries
"RTN","IBY592PR",38,0)
 NEW FILE,DIK,LN,TAG,TAGLN,DATA,PCE,DA,Y
"RTN","IBY592PR",39,0)
 F FILE=5,6,7 S DIK="^IBA(364."_FILE_"," D
"RTN","IBY592PR",40,0)
 . F TAG="ENT"_FILE,"DEL"_FILE D
"RTN","IBY592PR",41,0)
 .. F LN=2:1 S TAGLN=TAG_"+"_LN,DATA=$P($T(@TAGLN),";;",2) Q:DATA=""  D
"RTN","IBY592PR",42,0)
 ... F PCE=2:1 S DA=$P(DATA,U,PCE) Q:'DA  I $D(^IBA("364."_FILE,DA,0)) D ^DIK
"RTN","IBY592PR",43,0)
 Q
"RTN","IBY592PR",44,0)
 ;
"RTN","IBY592PR",45,0)
 ; Example for ENT5, ENT6, ENT7, DEL5, DEL6, and DEL7:
"RTN","IBY592PR",46,0)
 ;;^195^254^259^269^324^325^
"RTN","IBY592PR",47,0)
 ; Note:  Must have beginning and ending up-carat
"RTN","IBY592PR",48,0)
 ;
"RTN","IBY592PR",49,0)
 ;-----------------------------------------------------------------------
"RTN","IBY592PR",50,0)
 ; 364.5 entries modified:
"RTN","IBY592PR",51,0)
 ;
"RTN","IBY592PR",52,0)
 ; 83 - N-ATT/REND PHYSICIAN NAME
"RTN","IBY592PR",53,0)
 ; 97 - N-NON-INSTITUTIONAL CLAIM TYPE
"RTN","IBY592PR",54,0)
 ; 249 - N-ATT/REND PHYSICIAN SPEC
"RTN","IBY592PR",55,0)
 ; 261 - N-ATT/REND PROVIDER ID
"RTN","IBY592PR",56,0)
 ; 370 - N-ATT/REND PHYSICIAN NAME BR
"RTN","IBY592PR",57,0)
 ; 378 - N-ORTHO BANDING QUALIFIER
"RTN","IBY592PR",58,0)
 ; 379 - N-ORTHO BANDIN DATE
"RTN","IBY592PR",59,0)
 ; 380 - N-ORTHO TX MTHS COUNT
"RTN","IBY592PR",60,0)
 ; 381 - N-ORTHO TX MTHS COUNT TRANSFER
"RTN","IBY592PR",61,0)
 ; 382 - N-ORTHO TX INDICATOR
"RTN","IBY592PR",62,0)
 ; 383 - N-TOOTH NUMBER
"RTN","IBY592PR",63,0)
 ; 384 - N-HCFA J430D SERV LINE (EDI)
"RTN","IBY592PR",64,0)
 ; 437 - N-HCFA SERVICE LINE CALLABLE
"RTN","IBY592PR",65,0)
 ;
"RTN","IBY592PR",66,0)
ENT5 ; OF entries in file 364.5 to be included
"RTN","IBY592PR",67,0)
 ;
"RTN","IBY592PR",68,0)
 ;;^83^97^249^261^370^378^379^380^381^382^383^384^437^
"RTN","IBY592PR",69,0)
 ;
"RTN","IBY592PR",70,0)
 ;-----------------------------------------------------------------------
"RTN","IBY592PR",71,0)
 ; 364.6 entries modified:
"RTN","IBY592PR",72,0)
 ;
"RTN","IBY592PR",73,0)
 ; 2258 - seg 62, 1-RECORD ID 'DN1 '
"RTN","IBY592PR",74,0)
 ; 2259 - seq 62, 2-ORTHO BANDING QUALIFIER
"RTN","IBY592PR",75,0)
 ; 2260 - seq 62, 3-ORTHO BANDING DATE
"RTN","IBY592PR",76,0)
 ; 2261 - seq 62, 4-ORTHO TX MONTHS COUNT
"RTN","IBY592PR",77,0)
 ; 2262 - seq 62, 5-ORTHO TX MTHS CT TRANS
"RTN","IBY592PR",78,0)
 ; 2263 - seq 62, 6-ORTHO TX INDICATOR
"RTN","IBY592PR",79,0)
 ; 2264 - seq 63, 1-RECORD ID 'DN2 '
"RTN","IBY592PR",80,0)
 ; 2266 - seq 63, 2-TOOTH NUMBER
"RTN","IBY592PR",81,0)
 ; 2267 - seq 63, 3-TOOTH STATUS CODE
"RTN","IBY592PR",82,0)
 ; 2268 - seq 63, 4-TOOTH CODE LIST QUALIFIER
"RTN","IBY592PR",83,0)
 ; 2269 - seq 101, 8-REFERRING PROVIDER CODE
"RTN","IBY592PR",84,0)
 ; 2270 - seq 101, 9-REFERRING PROVIDER CODE QUALIFIER
"RTN","IBY592PR",85,0)
 ; 2271 - seq 101, 10-REFERRING PROVIDER TAXONOMY
"RTN","IBY592PR",86,0)
 ; 2272 - seq 104.6, 1-RECORD ID 'OPRB'
"RTN","IBY592PR",87,0)
 ; 2273 - seq 104.6, 2-ASST SURGEON QUALIFIER
"RTN","IBY592PR",88,0)
 ; 2274 - seq 104.6, 3-ASST SURGEON TYPE
"RTN","IBY592PR",89,0)
 ; 2275 - seq 104.6, 4-ASST SURGEON LAST NAME
"RTN","IBY592PR",90,0)
 ; 2276 - seq 104.6, 5-ASST SURGEON FIRST NAME
"RTN","IBY592PR",91,0)
 ; 2277 - seq 104.6, 6-ASST SURGEON MIDDLE NAME
"RTN","IBY592PR",92,0)
 ; 2278 - seq 104.6, 7-ASST SURGEON NAME SUFFIX
"RTN","IBY592PR",93,0)
 ; 2279 - seq 104.6, 8-ASST SURGEON PRIMARY ID QUALIFIER
"RTN","IBY592PR",94,0)
 ; 2280 - seq 104.6, 9-ASST SURGEON PRIMARY ID
"RTN","IBY592PR",95,0)
 ; 2281 - seq 104.6, 10-ASST SURGEON TAXONOMY QUALIFIER
"RTN","IBY592PR",96,0)
 ; 2282 - seq 104.6, 11-ASST SURGEON TAXONOMY
"RTN","IBY592PR",97,0)
 ; 2283 - seq 104.6, 1.5-OPRB Setup
"RTN","IBY592PR",98,0)
 ; 2284 - seq 104.6, 99.5-OPRG Cleanup
"RTN","IBY592PR",99,0)
 ; 2285 - seq 104.61, 1-RECORD ID 'OPRC'
"RTN","IBY592PR",100,0)
 ; 2286 - seq 104.61, 2-ASST SURGEON SEC ID QUALIFIER(1)
"RTN","IBY592PR",101,0)
 ; 2287 - seq 104.61, 3-ASST SURGEON SEC ID (1)
"RTN","IBY592PR",102,0)
 ; 2288 - seq 104.61, 1.5-OPRC Setup
"RTN","IBY592PR",103,0)
 ; 2289 - seq 104.61, 4-ASST SURGEON SEC ID QIALIFIER(2)
"RTN","IBY592PR",104,0)
 ; 2290 - seq 104.61, 5-ASST SURGEON SEC ID (2)
"RTN","IBY592PR",105,0)
 ; 2291 - seq 104.61, 6-ASST SURGEON SEC ID QUALIFIER(3)
"RTN","IBY592PR",106,0)
 ; 2292 - seq 104.61, 7-ASST SURGEON SEC ID (3)
"RTN","IBY592PR",107,0)
 ; 2293 - seq 104.61, 8-ASST SURGEON SEC ID QIALIFIER(4)
"RTN","IBY592PR",108,0)
 ; 2294 - seq 104.61, 9-ASST SURGEON SEC ID (4)
"RTN","IBY592PR",109,0)
 ; 2295 - seq 104.61, 99.5-OPRC Cleanup
"RTN","IBY592PR",110,0)
 ; 2296 - seq 178.1, 1-RECORD ID 'OP10'
"RTN","IBY592PR",111,0)
 ; 2297 - seq 178.1, 1.5-OP10 Setup
"RTN","IBY592PR",112,0)
 ; 2298 - seq 178.1, 2-PAYER RESPONSIBILITY SEQ # CODE
"RTN","IBY592PR",113,0)
 ; 2299 - seq 178.1, 3-OTHER PAYER ASST SURGEON ENTITY ID
"RTN","IBY592PR",114,0)
 ; 2300 - seq 178.1, 4-OTHER PAYER ASST SURGEON ENTITY QUAL
"RTN","IBY592PR",115,0)
 ; 2301 - seq 178.1, 5-OTHER PAYER ASST SURGEON SEC ID QUAL(1)
"RTN","IBY592PR",116,0)
 ; 2302 - seq 178.1, 6-OTHER PAYER ASST SURGEON SEC ID(1)
"RTN","IBY592PR",117,0)
 ; 2303 - seq 178.1, 7-OTHER PAYER ASST SURGEON SEC ID QUAL(2)
"RTN","IBY592PR",118,0)
 ; 2304 - seq 178.1, 8-OTHER PAYER ASST SURGEON SEC ID(2)
"RTN","IBY592PR",119,0)
 ; 2305 - seq 178.1, 9-OTHER PAYER ASST SURGEON SEC ID QUAL(3)
"RTN","IBY592PR",120,0)
 ; 2306 - seq 178.1, 10-OTHER PAYER ASST SURGEON SEC ID(3)
"RTN","IBY592PR",121,0)
 ; 2307 - seq 178.1, 99.5-OP10 Cleanup
"RTN","IBY592PR",122,0)
 ; 2308 - seq 186, 1-RECORD ID 'DEN '
"RTN","IBY592PR",123,0)
 ; 2309 - seq 186, 2-SERVICE LINE #
"RTN","IBY592PR",124,0)
 ; 2310 - seq 186, 3-DATE/TIME QUALIFIER
"RTN","IBY592PR",125,0)
 ; 2311 - seq 186, 4-SERVICE DATE
"RTN","IBY592PR",126,0)
 ; 2312 - seq 186, 5-SERVICE ID QUALIFIER
"RTN","IBY592PR",127,0)
 ; 2313 - seq 186, 6-PROCEDURE CODE
"RTN","IBY592PR",128,0)
 ; 2314 - seq 186, 7-PROCEDURE MODIFIER(1)
"RTN","IBY592PR",129,0)
 ; 2315 - seq 186, 8-PROCEDURE MODIFIER(2)
"RTN","IBY592PR",130,0)
 ; 2316 - seq 186, 9-PROCEDURE MODIFIER(3)
"RTN","IBY592PR",131,0)
 ; 2317 - seq 186, 10-PROCEDURE MODIFIER(4)
"RTN","IBY592PR",132,0)
 ; 2318 - seq 186, 11-PROCEDURE CODE DESCRIPTION
"RTN","IBY592PR",133,0)
 ; 2319 - seq 186, 12-LINE ITEM CHARGE AMT
"RTN","IBY592PR",134,0)
 ; 2320 - seq 186, 13-PLACE OF SERVICE CODE
"RTN","IBY592PR",135,0)
 ; 2321 - seq 186, 14-ORAL CAVITY DESIGNATION(1)
"RTN","IBY592PR",136,0)
 ; 2322 - seq 186, 15-ORAL CAVITY DESIGNATION(2)
"RTN","IBY592PR",137,0)
 ; 2323 - seq 186, 16-ORAL CAVITY DESIGNATION(3)
"RTN","IBY592PR",138,0)
 ; 2324 - seq 186, 17-ORAL CAVITY DESIGNATION(4)
"RTN","IBY592PR",139,0)
 ; 2325 - seq 186, 18-ORAL CAVITY DESIGNATION(5)
"RTN","IBY592PR",140,0)
 ; 2326 - seq 186, 19-PROSTHESIS CROWN INLAY CODE
"RTN","IBY592PR",141,0)
 ; 2327 - seq 186.1, 1-RECORD ID 'DEN1'
"RTN","IBY592PR",142,0)
 ; 2328 - seq 186.1, 2-SERVICE LINE #
"RTN","IBY592PR",143,0)
 ; 2329 - seq 186.1, 3-PROCEDURE COUNT
"RTN","IBY592PR",144,0)
 ; 2330 - seq 186.1, 4-DIAGNOSIS CODE POINTER(1)
"RTN","IBY592PR",145,0)
 ; 2331 - seq 186.1, 5-DIAGNOSIS CODE POINTER(2)
"RTN","IBY592PR",146,0)
 ; 2332 - seq 186.1, 6-DIAGNOSIS CODE POINTER(3)
"RTN","IBY592PR",147,0)
 ; 2333 - seq 186.1, 7-DIAGNOSIS CODE POINTER(4)
"RTN","IBY592PR",148,0)
 ; 2334 - seq 186.1, 8-PRIOR PLACEMENT DATE QUALIFIER
"RTN","IBY592PR",149,0)
 ; 2335 - seq 186.1, 9-PRIOR PLACEMENT DATE
"RTN","IBY592PR",150,0)
 ; 2336 - seq 186.1, 10-ORTHO BANDING DATE QUALIFIER
"RTN","IBY592PR",151,0)
 ; 2337 - seq 186.1, 11-ORTHO BANDING DATE
"RTN","IBY592PR",152,0)
 ; 2338 - seq 186.1, 12-REPLACEMENT DATE QUALIFIER
"RTN","IBY592PR",153,0)
 ; 2339 - seq 186.1, 13-REPLACEMENT DATE
"RTN","IBY592PR",154,0)
 ; 2340 - seq 186.1, 14-TREATMENT START DATE QUALIFIER
"RTN","IBY592PR",155,0)
 ; 2341 - seq 186.1, 15-TREATMENT START DATE
"RTN","IBY592PR",156,0)
 ; 2342 - seq 186.1, 16-TREATMENT COMPLETION DATE QUALIFIER
"RTN","IBY592PR",157,0)
 ; 2343 - seq 186.1, 17-TREATMENT COMPLETION DATE
"RTN","IBY592PR",158,0)
 ; 2344 - seq 186.2, 1-RECORD ID 'DEN2'
"RTN","IBY592PR",159,0)
 ; 2345 - seq 186.2, 2-SERVICE LINE #
"RTN","IBY592PR",160,0)
 ; 2346 - seq 186.2, 3-TOOTH CODE QUALIFIER
"RTN","IBY592PR",161,0)
 ; 2347 - seq 186.2, 4-TOOTH CODE
"RTN","IBY592PR",162,0)
 ; 2348 - seq 186.2, 5-TOOTH SURFACE(1)
"RTN","IBY592PR",163,0)
 ; 2349 - seq 186.2, 6-TOOTH SURFACE(2)
"RTN","IBY592PR",164,0)
 ; 2350 - seq 186.2, 7-TOOTH SURFACE(3)
"RTN","IBY592PR",165,0)
 ; 2351 - seq 186.2, 8-TOOTH SURFACE(4)
"RTN","IBY592PR",166,0)
 ; 2352 - seq 186.2, 9-TOOTH SURFACE(5)
"RTN","IBY592PR",167,0)
 ; 2353 - seq 194.5, 1-RECORD ID 'LSUR'
"RTN","IBY592PR",168,0)
 ; 2354 - seq 194.5, 2-SERVICE LINE COUNTER
"RTN","IBY592PR",169,0)
 ; 2355 - seq 194.5, 3-ASST SURGEON QUALIFIER
"RTN","IBY592PR",170,0)
 ; 2356 - seq 194.5, 4-ASST SURGEON LAST NAME
"RTN","IBY592PR",171,0)
 ; 2357 - seq 194.5, 5-ASST SURGEON FIRST NAME
"RTN","IBY592PR",172,0)
 ; 2358 - seq 194.5, 6-ASST SURGEON MIDDLE NAME
"RTN","IBY592PR",173,0)
 ; 2359 - seq 194.5, 7-ASST SURGEON NAME SUFFIX
"RTN","IBY592PR",174,0)
 ; 2360 - seq 194.5, 8-ASST SURGEON PRIMARY ID QUALIFIER
"RTN","IBY592PR",175,0)
 ; 2361 - seq 194.5, 9-ASST SURGEON PRIMARY ID
"RTN","IBY592PR",176,0)
 ; 2370 - seq 194.5, 1.9-LSUR DATA EXTRACT
"RTN","IBY592PR",177,0)
 ; 2372 - seq 194.6, 1-RECORD ID 'LSR1'
"RTN","IBY592PR",178,0)
 ; 2373 - seq 194.6, 1.9-LSR1 DATA EXTRACT
"RTN","IBY592PR",179,0)
 ; 2374 - seq 194.6, 2-SERVICE LINE COUNTER
"RTN","IBY592PR",180,0)
 ; 2375 - seq 194.6, 3-ASST SURGEON SECONDARY ID QUALIFIER(1)
"RTN","IBY592PR",181,0)
 ; 2376 - seq 194.6, 4-ASST SURGEON SECONDARY ID(1)
"RTN","IBY592PR",182,0)
 ; 2377 - seq 194.6, 5-ASST SURGEON SECONDARY ID QUALIFIER(2)
"RTN","IBY592PR",183,0)
 ; 2378 - seq 194.6, 6-ASST SURGEON SECONDARY ID(2)
"RTN","IBY592PR",184,0)
 ; 2379 - seq 194.6, 7-ASST SURGEON SECONDARY ID QUALIFIER(3)
"RTN","IBY592PR",185,0)
 ; 2380 - seq 194.6, 8-ASST SURGEON SECONDARY ID(3)
"RTN","IBY592PR",186,0)
 ; 2381 - seq 194.6, 9-ASST SURGEON TAXONOMY QUALIFIER
"RTN","IBY592PR",187,0)
 ; 2382 - seq 194.6, 10-ASST SURGEON TAXONOMY CODE
"RTN","IBY592PR",188,0)
 ;
"RTN","IBY592PR",189,0)
ENT6 ; O.F. entries in file 364.6 to be included
"RTN","IBY592PR",190,0)
 ;
"RTN","IBY592PR",191,0)
 ;;^2258^2259^2260^2261^2262^2263^2264^2266^2267^2268^2269^2270^2271^2272^
"RTN","IBY592PR",192,0)
 ;;^2273^2274^2275^2276^2277^2278^2279^2280^2281^2282^2283^2284^2285^2286^
"RTN","IBY592PR",193,0)
 ;;^2287^2288^2289^2290^2291^2292^2293^2294^2295^2296^2297^2298^2299^2300^
"RTN","IBY592PR",194,0)
 ;;^2301^2302^2303^2304^2305^2306^2307^2308^2309^2310^2311^2312^2313^2314^
"RTN","IBY592PR",195,0)
 ;;^2315^2316^2317^2318^2319^2320^2321^2322^2323^2324^2325^2326^2327^2328^
"RTN","IBY592PR",196,0)
 ;;^2329^2330^2331^2332^2333^2334^2335^2336^2337^2338^2339^2340^2341^2342^
"RTN","IBY592PR",197,0)
 ;;^2343^2344^2345^2346^2347^2348^2349^2350^2351^2352^2353^2354^2355^2356^
"RTN","IBY592PR",198,0)
 ;;^2357^2358^2359^2360^2361^2370^2372^2373^2374^2375^2376^2377^2378^2379^
"RTN","IBY592PR",199,0)
 ;;^2380^2381^2382^
"RTN","IBY592PR",200,0)
 ;-----------------------------------------------------------------------
"RTN","IBY592PR",201,0)
 ; 364.7 entries modified:
"RTN","IBY592PR",202,0)
 ;
"RTN","IBY592PR",203,0)
 ;
"RTN","IBY592PR",204,0)
ENT7 ; O.F. entries in file 364.7 to be included
"RTN","IBY592PR",205,0)
 ;
"RTN","IBY592PR",206,0)
 ;;^1425^1426^1460^1461^1462^1463^1464^1465^1466^1467^1468^1469^1470^1471^
"RTN","IBY592PR",207,0)
 ;;^1472^1473^1474^1475^1476^1477^1478^1479^1480^1481^1482^1483^1484^1485^
"RTN","IBY592PR",208,0)
 ;;^1486^1487^1488^1489^1490^1491^1492^1493^1494^1495^1496^1497^1498^1499^
"RTN","IBY592PR",209,0)
 ;;^1505^1506^1507^1508^1509^1510^1511^1512^1513^1514^1515^1516^1517^1528^
"RTN","IBY592PR",210,0)
 ;;^1548^1549^1552^1553^1554^1555^1556^1557^1558^1559^1560^1580^1581^1582^
"RTN","IBY592PR",211,0)
 ;;^1583^1584^1585^1586^1587^1588^1589^1590^1591^1592^1593^1594^1595^1596^
"RTN","IBY592PR",212,0)
 ;;^1597^1598^1599^1600^1601^1602^1603^1604^1605^1606^1607^1608^1609^1614^
"RTN","IBY592PR",213,0)
 ;;^1688^1689^1728^1729^1730^1731^1957^1958^1959^1960^1961^1962^1963^1964^
"RTN","IBY592PR",214,0)
 ;;^1965^1966^1967^31^37^1006^1023^1015^16^127^75^1008^1727^854^1519^1520^
"RTN","IBY592PR",215,0)
 ;;^1522^1523^1524^1525^1945^1946^1003^98^132^1672^1673^49^644^645^646^
"RTN","IBY592PR",216,0)
 ;;^647^648^649^443^444^445^446^447^448^449^450^1703^1704^1705^1706^1707^
"RTN","IBY592PR",217,0)
 ;;^1708^1709^1710^
"RTN","IBY592PR",218,0)
 ;
"RTN","IBY592PR",219,0)
 ;-----------------------------------------------------------------------
"RTN","IBY592PR",220,0)
 ; 364.5 entries deleted:
"RTN","IBY592PR",221,0)
 ;
"RTN","IBY592PR",222,0)
DEL5    ; remove O.F. entries in file 364.5 (not re-added)
"RTN","IBY592PR",223,0)
 ;
"RTN","IBY592PR",224,0)
 ;;
"RTN","IBY592PR",225,0)
 ;
"RTN","IBY592PR",226,0)
 ;-----------------------------------------------------------------------
"RTN","IBY592PR",227,0)
 ; 364.6 entries deleted:
"RTN","IBY592PR",228,0)
 ;
"RTN","IBY592PR",229,0)
 ;
"RTN","IBY592PR",230,0)
DEL6    ; remove O.F. entries in file 364.6 (not re-added)
"RTN","IBY592PR",231,0)
 ;
"RTN","IBY592PR",232,0)
 ;;
"RTN","IBY592PR",233,0)
 ;
"RTN","IBY592PR",234,0)
 ;-----------------------------------------------------------------------
"RTN","IBY592PR",235,0)
 ; 364.7 entries deleted:
"RTN","IBY592PR",236,0)
 ;
"RTN","IBY592PR",237,0)
 ;
"RTN","IBY592PR",238,0)
DEL7    ; remove O.F. entries in file 364.7 (not re-added)
"RTN","IBY592PR",239,0)
 ;
"RTN","IBY592PR",240,0)
 ;;
"RTN","IBY592PR",241,0)
 ;
"RTN","IBY592PR",242,0)
 ;-----------------------------------------------------------------------
"UP",36,36.017,-1)
36^17
"UP",36,36.017,0)
36.017
"UP",399,399.0222,-1)
399^PRV
"UP",399,399.0222,0)
399.0222
"UP",399,399.0304,-1)
399^CP
"UP",399,399.0304,0)
399.0304
"UP",399,399.0404,-2)
399^CP
"UP",399,399.0404,-1)
399.0304^LNPRV
"UP",399,399.0404,0)
399.0404
"UP",399,399.041,-1)
399^OC
"UP",399,399.041,0)
399.041
"UP",399,399.096,-1)
399^DEN1
"UP",399,399.096,0)
399.096
"UP",399,399.30491,-2)
399^CP
"UP",399,399.30491,-1)
399.0304^DEN1
"UP",399,399.30491,0)
399.30491
"VER")
8.0^22.2
"^DD",36,36,.191,0)
CLAIMS (DENTAL) STREET ADDR 1^FJ30Xa^^.19;1^K:$L(X)>30!($L(X)<3)!'$G(IBCNS) X
"^DD",36,36,.191,1,0)
^.1
"^DD",36,36,.191,1,1,0)
^^TRIGGER^36^.192
"^DD",36,36,.191,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.19)):^(.19),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X="" S DIH=$G(^DIC(36,DIV(0),.19)),DIV=X S $P(^(.19),U,2)=DIV,DIH=36,DIG=.192 D ^DICR
"^DD",36,36,.191,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DIC(36,D0,.19)):^(.19),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X="" S DIH=$G(^DIC(36,DIV(0),.19)),DIV=X S $P(^(.19),U,2)=DIV,DIH=36,DIG=.192 D ^DICR
"^DD",36,36,.191,1,1,3)
When changing or deleting CLAIMS (DENTAL) STREET ADDR 1 delete CLAIMS (DENTAL) STREET ADDR 2.
"^DD",36,36,.191,1,1,"%D",0)
^^2^2^3170725^
"^DD",36,36,.191,1,1,"%D",1,0)
When changing or deleting CLAIMS (DENTAL) STREET ADDR 1 delete CLAIMS 
"^DD",36,36,.191,1,1,"%D",2,0)
(DENTAL) STREET ADDR 2.
"^DD",36,36,.191,1,1,"CREATE VALUE")
@
"^DD",36,36,.191,1,1,"DELETE VALUE")
@
"^DD",36,36,.191,1,1,"FIELD")
CLAIMS (DENTAL) STREET ADDR 2
"^DD",36,36,.191,3)
If the Dental claims process address of this company is different from its main address, enter Line 1 of the Dental claims street address.  Answer must be 3-30 characters in length.
"^DD",36,36,.191,21,0)
^^3^3^3170731^
"^DD",36,36,.191,21,1,0)
If the Dental claims process address of this company is different from 
"^DD",36,36,.191,21,2,0)
its main address, enter Line 1 of the Dental claims street address.  
"^DD",36,36,.191,21,3,0)
Answer must be 3-30 characters in length.
"^DD",36,36,.191,"AUDIT")
y
"^DD",36,36,.191,"DT")
3180829
"^DD",36,36,.1911,0)
CLAIMS (DENTAL) PHONE NUMBER^FJ20a^^.19;11^K:$L(X)>20!($L(X)<7) X
"^DD",36,36,.1911,3)
Enter the telephone number of the Dental claims office with 7-20 characters, e.g. 777-8888, 415 111 2222 x123.
"^DD",36,36,.1911,21,0)
^^2^2^3170725^
"^DD",36,36,.1911,21,1,0)
Enter the telephone number at which this insurance carrier's Dental 
"^DD",36,36,.1911,21,2,0)
claims office can be reached.
"^DD",36,36,.1911,"AUDIT")
y
"^DD",36,36,.1911,"DT")
3180829
"^DD",36,36,.192,0)
CLAIMS (DENTAL) STREET ADDR 2^FJ30Xa^^.19;2^K:$L(X)>30!($L(X)<3)!$$DUPADDRL^IBCNSU(X,+$G(IBCNS),.191) X
"^DD",36,36,.192,3)
If the Dental Claims Process Address is longer than one line, enter a second line between 3-30 characters.  The response can not be the same as Line 1.
"^DD",36,36,.192,5,1,0)
36^.191^1
"^DD",36,36,.192,21,0)
^^3^3^3170731^
"^DD",36,36,.192,21,1,0)
If the Dental Claims Process Address is longer than one line, enter a 
"^DD",36,36,.192,21,2,0)
second line between 3-30 characters.  The response can not be the
"^DD",36,36,.192,21,3,0)
same as line 1.
"^DD",36,36,.192,"AUDIT")
y
"^DD",36,36,.192,"DT")
3180829
"^DD",36,36,.193,0)
BLANK^FJ30a^^.19;3^K:$L(X)>30!($L(X)<1) X
"^DD",36,36,.193,3)
Answer must be 1-30 characters in length.
"^DD",36,36,.193,21,0)
^^1^1^3170725^
"^DD",36,36,.193,21,1,0)
This is a place holder for a 3rd address line, if needed.
"^DD",36,36,.193,"AUDIT")
y
"^DD",36,36,.193,"DT")
3180829
"^DD",36,36,.194,0)
CLAIMS (DENTAL) PROCESS CITY^FJ25a^^.19;4^K:$L(X)>25!($L(X)<2) X
"^DD",36,36,.194,3)
If the Dental claims process address of this company is different from its main address, enter city of the Dental claims process address.  Answer must be 2-25 characters in length.
"^DD",36,36,.194,21,0)
^^3^3^3170725^
"^DD",36,36,.194,21,1,0)
Enter the state in which this insurance company's Dental claims office is 
"^DD",36,36,.194,21,2,0)
located.  Enter state even if it is the same as the state of the 
"^DD",36,36,.194,21,3,0)
company's main address.
"^DD",36,36,.194,"AUDIT")
y
"^DD",36,36,.194,"DT")
3180829
"^DD",36,36,.195,0)
CLAIMS (DENTAL) PROCESS STATE^P5'a^DIC(5,^.19;5^Q
"^DD",36,36,.195,3)
If the Dental claims process address of this company is different from its main address, enter state of the Dental claims process address.
"^DD",36,36,.195,21,0)
^^3^3^3170725^
"^DD",36,36,.195,21,1,0)
Enter the state in which this insurance company's Dental claims office is 
"^DD",36,36,.195,21,2,0)
located.  Enter state even if it is the same as the state of the 
"^DD",36,36,.195,21,3,0)
company's main address.
"^DD",36,36,.195,"AUDIT")
y
"^DD",36,36,.195,"DT")
3180829
"^DD",36,36,.196,0)
CLAIMS (DENTAL) PROCESS ZIP^FJ10XOa^^.19;6^K:$L(X)>10!($L(X)<9) X I $D(X) K:'$$ZIPCHK9^IBCNSU(X) X I $D(X) D ZIPIN^VAFADDR
"^DD",36,36,.196,2)
S Y(0)=Y D ZIPOUT^VAFADDR
"^DD",36,36,.196,2.1)
D ZIPOUT^VAFADDR
"^DD",36,36,.196,3)
Answer must be nine (999999999) or ten characters (99999-9999) in length.  The last 4 cannot be '0000' or '9999'.
"^DD",36,36,.196,21,0)
^.001^3^3^3180227^^
"^DD",36,36,.196,21,1,0)
This is the ZIP code for the address of the Dental claims processing 
"^DD",36,36,.196,21,2,0)
location when it differs from the payer's main mailing address.  Enter a 
"^DD",36,36,.196,21,3,0)
9 or 10 character ZIP code.
"^DD",36,36,.196,"AUDIT")
y
"^DD",36,36,.196,"DT")
3180829
"^DD",36,36,.197,0)
CLAIMS (DENTAL) COMPANY NAME^*P36'Xa^DIC(36,^.19;7^S DIC(0)=DIC(0)_"F",DIC("S")="I '$P(^(0),U,5),'$P($G(^(.19)),U,7),Y'=DA" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",36,36,.197,3)
Select a company that processes Dental claims for this company.
"^DD",36,36,.197,5,1,0)
36^.198^1
"^DD",36,36,.197,12)
This company must be active, not the same company, and process its own Dental claims.
"^DD",36,36,.197,12.1)
S DIC("S")="I '$P(^(0),U,5),'$P($G(^(.19)),U,7),Y'=DA"
"^DD",36,36,.197,21,0)
^.001^4^4^3170824^^^^
"^DD",36,36,.197,21,1,0)
You can only select a company that processes claims.  The company 
"^DD",36,36,.197,21,2,0)
specified in this field must be an active insurance company, not the same 
"^DD",36,36,.197,21,3,0)
company as the entry being edited, and must not have another company 
"^DD",36,36,.197,21,4,0)
specified as handling Dental Claims for it.
"^DD",36,36,.197,"AUDIT")
y
"^DD",36,36,.197,"DT")
3180829
"^DD",36,36,.198,0)
ANOTHER CO. PROC DENT CLAIMS?^Sa^0:NO;1:YES;^.19;8^Q
"^DD",36,36,.198,.1)
Are Dental Claims Processed by Another Insurance Co.?
"^DD",36,36,.198,1,0)
^.1
"^DD",36,36,.198,1,1,0)
^^TRIGGER^36^.197
"^DD",36,36,.198,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X='$P($G(^DIC(36,DA,.19)),"^",8) I X S X=DIV S Y(1)=$S($D(^DIC(36,D0,.19)):^(.19),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X="" X ^DD(36,.198,1,1,1.4)
"^DD",36,36,.198,1,1,1.4)
S DIH=$G(^DIC(36,DIV(0),.19)),DIV=X S $P(^(.19),U,7)=DIV,DIH=36,DIG=.197 D ^DICR
"^DD",36,36,.198,1,1,2)
Q
"^DD",36,36,.198,1,1,"%D",0)
^^2^2^3170824^
"^DD",36,36,.198,1,1,"%D",1,0)
If another company processes Dental Claims for this company, the 
"^DD",36,36,.198,1,1,"%D",2,0)
field CLAIMS (DENTAL) COMPANY NAME is triggered for entry.
"^DD",36,36,.198,1,1,"CREATE CONDITION")
S X='$P($G(^DIC(36,DA,.19)),"^",8)
"^DD",36,36,.198,1,1,"CREATE VALUE")
@
"^DD",36,36,.198,1,1,"DELETE VALUE")
NO EFFECT
"^DD",36,36,.198,1,1,"FIELD")
CLAIMS (DENTAL) COMPANY NAME
"^DD",36,36,.198,3)
Enter 'Yes' if another insurance company processes Dental Claims.
"^DD",36,36,.198,21,0)
^.001^2^2^3170913^^^
"^DD",36,36,.198,21,1,0)
If another insurance company processes Dental Claims for this company, 
"^DD",36,36,.198,21,2,0)
enter 'YES'.  Otherwise, enter 'NO'.
"^DD",36,36,.198,"AUDIT")
y
"^DD",36,36,.198,"DT")
3180829
"^DD",36,36,.199,0)
CLAIMS (DENTAL) FAX^FJ20a^^.19;9^K:$L(X)>20!($L(X)<7) X
"^DD",36,36,.199,3)
Enter the fax number of the inpatient claims office with 7-20 characters, e.g. 444-8888, 614-333-9999.
"^DD",36,36,.199,21,0)
^^1^1^3170725^
"^DD",36,36,.199,21,1,0)
Enter the fax number of this insurance carrier's Dental claims office.
"^DD",36,36,.199,"AUDIT")
y
"^DD",36,36,.199,"DT")
3180829
"^DD",36,36,3.15,0)
EDI ID NUMBER - DENTAL^FJ30Xa^^3;15^K:$L(X)>30!($L(X)<1)!($$UP^XLFSTR(X)["PRNT") X
"^DD",36,36,3.15,1,0)
^.1
"^DD",36,36,3.15,1,1,0)
36^AED
"^DD",36,36,3.15,1,1,1)
S ^DIC(36,"AED",$E(X,1,30),DA)=""
"^DD",36,36,3.15,1,1,2)
K ^DIC(36,"AED",$E(X,1,30),DA)
"^DD",36,36,3.15,1,1,"%D",0)
^^2^2^3171012^
"^DD",36,36,3.15,1,1,"%D",1,0)
This cross-reference allows users to lookup an Insurance Company entry by 
"^DD",36,36,3.15,1,1,"%D",2,0)
Dental EDI # within the RCB option only.
"^DD",36,36,3.15,1,1,"DT")
3171003
"^DD",36,36,3.15,3)
Answer must be 1-30 characters in length. PRNT values are not allowed.
"^DD",36,36,3.15,21,0)
^.001^2^2^3170721^^^^
"^DD",36,36,3.15,21,1,0)
This is the ID number used to identify the Payer on Dental claim 
"^DD",36,36,3.15,21,2,0)
transmissions.  PRNT values are not valid Payer IDs.
"^DD",36,36,3.15,"AUDIT")
y
"^DD",36,36,3.15,"DT")
3180829
"^DD",36,36.017,.03,0)
277EDI TYPE^Sa^P:PROFESSIONAL;I:INSTITUTIONAL;D:DENTAL;^0;3^Q
"^DD",36,36.017,.03,3)
Enter the type of claim "P" for professional, "I" for institutional, or "D" for Dental.
"^DD",36,36.017,.03,21,0)
^^2^2^3171003^
"^DD",36,36.017,.03,21,1,0)
This determines the type of claim - either "P" for professional, "I" 
"^DD",36,36.017,.03,21,2,0)
for institutional, or "D" for Dental. For reporting purposes only.
"^DD",36,36.017,.03,"AUDIT")
y
"^DD",36,36.017,.03,"DT")
3180829
"^DD",350.9,350.9,1.22,0)
MULTIPLE FORM TYPES^S^1:YES;0:NO;^1;22^Q
"^DD",350.9,350.9,1.22,3)
Enter 'Y'es if your facility uses the CMS-1500 & J430D as well as the UB claim form.
"^DD",350.9,350.9,1.22,21,0)
^.001^5^5^3170428^^
"^DD",350.9,350.9,1.22,21,1,0)
Set this field to 'YES' if the facility uses more than one health insurance
"^DD",350.9,350.9,1.22,21,2,0)
form type.  Therefore, if your site uses the UB form and the CMS-1500 & 
"^DD",350.9,350.9,1.22,21,3,0)
J430D forms, this should be answered 'YES'.  If your site is only using 
"^DD",350.9,350.9,1.22,21,4,0)
the UB form, then answer 'NO'.  If this is set to 'NO' or left blank then
"^DD",350.9,350.9,1.22,21,5,0)
only the UB type claim forms will be allowed.
"^DD",350.9,350.9,1.22,"DT")
3170428
"^DD",350.9,350.9,8.2,0)
DENTAL ENABLED?^S^0:NO;1:YES;^8;20^Q
"^DD",350.9,350.9,8.2,.1)
Allow Dental Claim Processing?
"^DD",350.9,350.9,8.2,3)
Enter 'Yes' to enable the processing of Dental Claims.  Otherwise, enter 'No'.
"^DD",350.9,350.9,8.2,21,0)
^.001^4^4^3170717^^
"^DD",350.9,350.9,8.2,21,1,0)
This value determines if Dental Claims can be processed in VistA.  Yes 
"^DD",350.9,350.9,8.2,21,2,0)
indicates that Dental claims may be entered and processed by the 
"^DD",350.9,350.9,8.2,21,3,0)
Integrated Billing auto-biller.  No indicates that no Dental claims 
"^DD",350.9,350.9,8.2,21,4,0)
processing can occur in VistA.
"^DD",350.9,350.9,8.2,"DT")
3170717
"^DD",353,353,0)
FIELD^^55^20
"^DD",353,353,0,"DDA")
N
"^DD",353,353,0,"DT")
2940112
"^DD",353,353,0,"IX","B",353,.01)

"^DD",353,353,0,"NM","BILL FORM TYPE")

"^DD",353,353,0,"PT",353,2.05)

"^DD",353,353,0,"PT",353,2.08)

"^DD",353,353,0,"PT",353,2.09)

"^DD",353,353,0,"PT",364.6,.01)

"^DD",353,353,0,"PT",399,.19)

"^DD",353,353,0,"PT",19610.4,.19)

"^DD",353,353,.001,0)
NUMBER^NJ7,0^^ ^K:+X'=X!(X>9999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",353,353,.001,3)
Type a Number between 1 and 9999999, 0 Decimal Digits
"^DD",353,353,.001,21,0)
^^2^2^2920427^^
"^DD",353,353,.001,21,1,0)
Enter a number that is within the number range for your facility,
"^DD",353,353,.001,21,2,0)
that is xxx000 to xxx999 where xxx is your station number.
"^DD",353,353,.001,"DT")
2920427
"^DD",353,353,.01,0)
NAME^RF^^0;1^K:$L(X)>20!($L(X)<3)!'(X'?1P.E) X
"^DD",353,353,.01,1,0)
^.1
"^DD",353,353,.01,1,1,0)
353^B
"^DD",353,353,.01,1,1,1)
S ^IBE(353,"B",$E(X,1,30),DA)=""
"^DD",353,353,.01,1,1,2)
K ^IBE(353,"B",$E(X,1,30),DA)
"^DD",353,353,.01,3)
Answer must be 3-20 characters in length.
"^DD",353,353,.01,21,0)
^^1^1^2920427^^^
"^DD",353,353,.01,21,1,0)
This field names a type of form that is available for billing purposes.
"^DD",353,353,.01,"DEL",1,0)
I DA<999 W !,"Deleting Standard entries not allowed"
"^DD",353,353,.01,"DEL",364.6,0)
I $O(^IBA(364.6,"B",DA,"")) W !,*7,"Cannot delete this form until its form fields are deleted",!
"^DD",353,353,.01,"DT")
2920410
"^DD",353,353,.02,0)
DEFAULT PRINTER (BILLING)^FX^^0;2^S IBL=X,X=$P(X,";"),DIC=3.5,DIC(0)="EQ" D ^DIC K:Y'>0!(X=" ") X S:$D(X) X=X_$S(IBL[";":";"_$P(IBL,";",2,99),1:"") K IBL S DIC=DIE
"^DD",353,353,.02,3)
Enter the device that is the default billing printer for this form.
"^DD",353,353,.02,4)
S DIC=3.5,DIC(0)="E",X="?" D ^DIC S DIC=DIE
"^DD",353,353,.02,21,0)
^^2^2^2940112^^
"^DD",353,353,.02,21,1,0)
This is the default printer that will appear at selected prompts for
"^DD",353,353,.02,21,2,0)
this form type.
"^DD",353,353,.02,"DT")
2920427
"^DD",353,353,.03,0)
FOLLOW-UP PRINTER (A/R)^FX^^0;3^S IBL=X,X=$P(X,";"),DIC=3.5,DIC(0)="EQ" D ^DIC K:Y'>0!(X=" ") X S:$D(X) X=X_$S(IBL[";":";"_$P(IBL,";",2,99),1:"") K IBL S DIC=DIE
"^DD",353,353,.03,3)
Enter the device that is the default printer for follow-up bills for this form type.
"^DD",353,353,.03,4)
S DIC=3.5,DIC(0)="E",X="?" D ^DIC S DIC=DIE
"^DD",353,353,.03,21,0)
^^2^2^3070116^^
"^DD",353,353,.03,21,1,0)
For forms other than the UB-04, this is the default printer that has this
"^DD",353,353,.03,21,2,0)
form mounted for follow-up letter/forms for Accounts Receivable.
"^DD",353,353,.03,"DT")
3070116
"^DD",353,353,1.01,0)
ROUTINE^FX^^1;E1,245^K:$L(X)>25!($L(X)<1)!(X'?.1ANP.7AN.1"^"1ANP.7AN) X
"^DD",353,353,1.01,3)
Answer must be 1-25 characters in length.  It must be in the form of [TAG^]ROUTINE.
"^DD",353,353,1.01,21,0)
^^2^2^2940213^^^^
"^DD",353,353,1.01,21,1,0)
This is the routine that will get executed for follow-up letters and bills 
"^DD",353,353,1.01,21,2,0)
printed in a batch if this is not a UB-82 entry.
"^DD",353,353,1.01,"DT")
2920427
"^DD",353,353,2.01,0)
BASE FILE^P1'^DIC(^2;1^Q
"^DD",353,353,2.01,3)
Enter the Fileman file to be used as a 'base' to extract Fileman flds from.
"^DD",353,353,2.01,21,0)
^^2^2^2960311^^^
"^DD",353,353,2.01,21,1,0)
This is the number of the Fileman file to be used as a 'base' to extract
"^DD",353,353,2.01,21,2,0)
Fileman fields for this form.
"^DD",353,353,2.01,"DT")
2960222
"^DD",353,353,2.02,0)
FORMAT TYPE^S^P:PRINTED FORM;T:TRANSMITTED FORM;S:BILLING SCREEN;^2;2^Q
"^DD",353,353,2.02,1,0)
^.1
"^DD",353,353,2.02,1,1,0)
^^TRIGGER^353^2.05
"^DD",353,353,2.02,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X="S" I X S X=DIV S Y(1)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X=DIV S X=DA X ^DD(353,2.02,1,1,1.4)
"^DD",353,353,2.02,1,1,1.4)
S DIH=$S($D(^IBE(353,DIV(0),2)):^(2),1:""),DIV=X S $P(^(2),U,5)=DIV,DIH=353,DIG=2.05 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",353,353,2.02,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P(Y(1),U,2),X=X S X=X="S" I X S X=DIV S Y(1)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X="" X ^DD(353,2.02,1,1,2.4)
"^DD",353,353,2.02,1,1,2.4)
S DIH=$S($D(^IBE(353,DIV(0),2)):^(2),1:""),DIV=X S $P(^(2),U,5)=DIV,DIH=353,DIG=2.05 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",353,353,2.02,1,1,3)
Please don't delete or screen 9 functionality won't function
"^DD",353,353,2.02,1,1,"CREATE CONDITION")
INTERNAL(FORMAT TYPE)="S"
"^DD",353,353,2.02,1,1,"CREATE VALUE")
S X=DA
"^DD",353,353,2.02,1,1,"DELETE CONDITION")
INTERNAL(FORMAT TYPE)="S"
"^DD",353,353,2.02,1,1,"DELETE VALUE")
@
"^DD",353,353,2.02,1,1,"DT")
2991029
"^DD",353,353,2.02,1,1,"FIELD")
PARENT FORM
"^DD",353,353,2.02,3)
Enter the type of form that is being defined.
"^DD",353,353,2.02,21,0)
^^1^1^2951207^
"^DD",353,353,2.02,21,1,0)
This is the type of form that is being defined.
"^DD",353,353,2.02,"DT")
2991029
"^DD",353,353,2.03,0)
FORM LENGTH^NJ3,0^^2;3^K:+X'=X!(X>999)!(X<0)!(X?.E1"."1N.N) X
"^DD",353,353,2.03,3)
Type a Number between 0 and 999, 0 Decimal Digits
"^DD",353,353,2.03,21,0)
^^2^2^2951220^
"^DD",353,353,2.03,21,1,0)
If a printed form, this is the number of lines that the form has to be used
"^DD",353,353,2.03,21,2,0)
to know when a form feed needs to be sent to the printer.
"^DD",353,353,2.03,"DT")
2951220
"^DD",353,353,2.04,0)
NATIONAL FORM^S^0:NO;1:YES;^2;4^Q
"^DD",353,353,2.04,3)
Answer YES if this is a national form
"^DD",353,353,2.04,21,0)
^^2^2^2960116^
"^DD",353,353,2.04,21,1,0)
This field is set to YES (1) for nationally distributed forms, is null or 0
"^DD",353,353,2.04,21,2,0)
for locally defined billing forms.
"^DD",353,353,2.04,"DT")
2960116
"^DD",353,353,2.05,0)
PARENT FORM^*P353'X^IBE(353,^2;5^S DIC("S")="I $S($P($G(^(2)),U,2)=""S"":1,1:$P($G(^(2)),U,4)),$P($G(^IBE(353,Y,2)),U,2)=$P($G(^IBE(353,DA,2)),U,2),+$G(^IBE(353,Y,2))=+$G(^IBE(353,DA,2))" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",353,353,2.05,3)
Enter the name of the parent form that this local form will be associated with.
"^DD",353,353,2.05,5,1,0)
353^2.02^1
"^DD",353,353,2.05,12)
Must point to a national file entry of the same format type and base file
"^DD",353,353,2.05,12.1)
S DIC("S")="I $S($P($G(^(2)),U,2)=""S"":1,1:$P($G(^(2)),U,4)),$P($G(^IBE(353,Y,2)),U,2)=$P($G(^IBE(353,DA,2)),U,2),+$G(^IBE(353,Y,2))=+$G(^IBE(353,DA,2))"
"^DD",353,353,2.05,21,0)
^^5^5^2960223^
"^DD",353,353,2.05,21,1,0)
This is the name of the national parent form that the local form is
"^DD",353,353,2.05,21,2,0)
associated with.  Association in this way allows a site to override specific
"^DD",353,353,2.05,21,3,0)
fields in the national form with local modifications without changing the
"^DD",353,353,2.05,21,4,0)
national form definition.  The output generator uses all national form
"^DD",353,353,2.05,21,5,0)
fields associated with the local form except for those fields overridden.
"^DD",353,353,2.05,"DT")
2991029
"^DD",353,353,2.06,0)
SHORT DESCRIPTION^F^^2;6^K:$L(X)>40!($L(X)<1) X
"^DD",353,353,2.06,3)
Answer must be 1-40 characters in length.
"^DD",353,353,2.06,21,0)
^^1^1^2960220^
"^DD",353,353,2.06,21,1,0)
This field contains a brief explanantion of the purpose of the form.
"^DD",353,353,2.06,"DT")
2960220
"^DD",353,353,2.07,0)
FIELD DELIMITER^F^^2;7^K:$L(X)>1!($L(X)<1) X
"^DD",353,353,2.07,3)
Answer must be 1 character in length.  For an '^', leave this field blank.
"^DD",353,353,2.07,21,0)
^^4^4^2960322^^
"^DD",353,353,2.07,21,1,0)
This is the delimiter that will be placed between fields of a transmitted
"^DD",353,353,2.07,21,2,0)
type form by the output generator.  If this field is left blank, an '^' is
"^DD",353,353,2.07,21,3,0)
assumed to be the delimiter.  Fileman will not allow an '^' to be entered
"^DD",353,353,2.07,21,4,0)
in this field.
"^DD",353,353,2.07,"DT")
2960306
"^DD",353,353,2.08,0)
PRINT FORM NAME^*P353'^IBE(353,^2;8^S DIC("S")="I $S(DA=+Y:1,1:$P($G(^IBE(353,Y,2)),U,5)=DA)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",353,353,2.08,3)
Enter the name of the form to be used by the output formatter when this bill type is printed.
"^DD",353,353,2.08,12)
Only the same entry or an entry with this entry as its parent can be chosen.
"^DD",353,353,2.08,12.1)
S DIC("S")="I $S(DA=+Y:1,1:$P($G(^IBE(353,Y,2)),U,5)=DA)"
"^DD",353,353,2.08,21,0)
^^3^3^2960620^^
"^DD",353,353,2.08,21,1,0)
This is the pointer to the entry in this file (itself or another entry
"^DD",353,353,2.08,21,2,0)
with this entry as its parent) that will be used to print bills of this
"^DD",353,353,2.08,21,3,0)
form type.
"^DD",353,353,2.08,"DT")
2960620
"^DD",353,353,2.09,0)
LOCAL BILLING SCREEN^*P353'^IBE(353,^2;9^S DIC("S")="I $P($G(^IBE(353,+Y,2)),U,2)=""S""" D ^DIC K DIC S DIC=$G(DIE),X=+Y K:Y<0 X
"^DD",353,353,2.09,3)
Enter the name of the screen to be used as the local billing screen.
"^DD",353,353,2.09,12)
Must be a screen form.
"^DD",353,353,2.09,12.1)
S DIC("S")="I $P($G(^IBE(353,+Y,2)),U,2)=""S"""
"^DD",353,353,2.09,21,0)
^^2^2^3110606^^
"^DD",353,353,2.09,21,1,0)
This is the form that will be used to build the local billing screen
"^DD",353,353,2.09,21,2,0)
for enter/edit a bill.
"^DD",353,353,2.09,"DT")
3110606
"^DD",353,353,50,0)
ENTRY PRE-PROCESSOR^K^^PRE;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",353,353,50,3)
This is Standard MUMPS code.
"^DD",353,353,50,9)
@
"^DD",353,353,50,21,0)
^^3^3^2960307^^^^
"^DD",353,353,50,21,1,0)
The code that is executed before extracting data for an individual form
"^DD",353,353,50,21,2,0)
entry using the forms output generator.  Can be used to set up any variables
"^DD",353,353,50,21,3,0)
necessary before processing a single entry.
"^DD",353,353,50,23,0)
^^3^3^2960307^^^
"^DD",353,353,50,23,1,0)
Used by the forms output generator before each entry is processed through
"^DD",353,353,50,23,2,0)
the extract process.  If the form has an associated PARENT FORM, and this
"^DD",353,353,50,23,3,0)
field is null, the PARENT FORM's ENTRY POST-PROCESSOR field will be executed.
"^DD",353,353,50,"DT")
2951207
"^DD",353,353,51,0)
ENTRY POST-PROCESSOR^K^^POST;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",353,353,51,3)
This is Standard MUMPS code.
"^DD",353,353,51,21,0)
^^4^4^2960313^^^^
"^DD",353,353,51,21,1,0)
The code that is executed after extracting data for an individual form
"^DD",353,353,51,21,2,0)
entry using the forms output generator.  Can be used to clean up variables
"^DD",353,353,51,21,3,0)
or do some ancillary processing such as update print date or printed by
"^DD",353,353,51,21,4,0)
fields.
"^DD",353,353,51,23,0)
^^3^3^2960313^^^^
"^DD",353,353,51,23,1,0)
Used by the forms output generator after each entry is processed through the
"^DD",353,353,51,23,2,0)
extract process.  If the form has an associated PARENT FORM, and this field
"^DD",353,353,51,23,3,0)
is null, the PARENT FORM's ENTRY POST-PROCESSOR field will be executed.
"^DD",353,353,51,"DT")
2951207
"^DD",353,353,52,0)
OUTPUT CODE^K^^OUT;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",353,353,52,3)
This is Standard MUMPS code.
"^DD",353,353,52,9)
@
"^DD",353,353,52,21,0)
^^2^2^2960307^^^^
"^DD",353,353,52,21,1,0)
The code to xecute to actually print or transmit the form entry after all
"^DD",353,353,52,21,2,0)
fields have been extracted to the sort global.
"^DD",353,353,52,"DT")
2951207
"^DD",353,353,53,0)
EXTRACT CODE^K^^EXT;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",353,353,53,3)
This is Standard MUMPS code.
"^DD",353,353,53,9)
@
"^DD",353,353,53,21,0)
^^2^2^2960306^^
"^DD",353,353,53,21,1,0)
The code to xecute to actually extract data into the sort global for the
"^DD",353,353,53,21,2,0)
form entry.
"^DD",353,353,53,"DT")
2960306
"^DD",353,353,54,0)
FORM PRE-PROCESSOR^K^^FPRE;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",353,353,54,3)
This is Standard MUMPS code.
"^DD",353,353,54,9)
@
"^DD",353,353,54,21,0)
^^2^2^2960313^^^^
"^DD",353,353,54,21,1,0)
The code that is executed before starting to extract any entries (using the
"^DD",353,353,54,21,2,0)
forms output generator) for this form.
"^DD",353,353,54,23,0)
^^5^5^2960313^^^^
"^DD",353,353,54,23,1,0)
This code is executed when using the auto-generate feature of the forms
"^DD",353,353,54,23,2,0)
output generator to set up variables or do preliminary processing
"^DD",353,353,54,23,3,0)
before any entries selected have been extracted via the forms generator for
"^DD",353,353,54,23,4,0)
a form.  If the form has an associated PARENT FORM, and this field
"^DD",353,353,54,23,5,0)
is null, the PARENT FORM's FORM PRE-PROCESSOR field will be executed.
"^DD",353,353,54,"DT")
2960307
"^DD",353,353,55,0)
FORM POST-PROCESSOR^K^^FPOST;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",353,353,55,3)
This is Standard MUMPS code.
"^DD",353,353,55,21,0)
^^3^3^2960313^^^^
"^DD",353,353,55,21,1,0)
The code that is executed after all entries have been passed through the
"^DD",353,353,55,21,2,0)
forms output generator extract for this form.  Can be used to clean up any
"^DD",353,353,55,21,3,0)
variables used in processing.
"^DD",353,353,55,23,0)
^^5^5^2960313^^^^
"^DD",353,353,55,23,1,0)
This code is executed when using the auto-generate feature of the forms
"^DD",353,353,55,23,2,0)
output generator to clean up or do any additional processing after all
"^DD",353,353,55,23,3,0)
entries selected have been extracted via the forms generator for a form.
"^DD",353,353,55,23,4,0)
If the form has an associated PARENT FORM, and this field is null, the
"^DD",353,353,55,23,5,0)
PARENT FORM's FORM POST-PROCESSOR field will be executed.
"^DD",353,353,55,"DT")
2960307
"^DD",364.1,364.1,.06,0)
BILL TYPE^S^2:CMS-1500 (PROF);3:UB-04 (INST);7:J430D (DENT);^0;6^Q
"^DD",364.1,364.1,.06,3)
ENTER THE TYPE OF BILL CONTAINED IN THIS BATCH
"^DD",364.1,364.1,.06,21,0)
^.001^1^1^3170309^^^
"^DD",364.1,364.1,.06,21,1,0)
THIS IS THE TYPE OF BILL THAT IS CONTAINED IN THIS BATCH
"^DD",364.1,364.1,.06,"DT")
3170309
"^DD",364.4,364.4,.05,0)
FORM TYPE^RS^1:INSTITUTIONAL (UB-04) only;2:PROFESSIONAL (CMS-1500 and J430D) only;3:Both INST (UB-04) and PROF (CMS-1500 and J430D);^0;5^Q
"^DD",364.4,364.4,.05,1,0)
^.1^^0
"^DD",364.4,364.4,.05,3)
Select the form type this rule will apply to
"^DD",364.4,364.4,.05,21,0)
^.001^1^1^3170428^^^
"^DD",364.4,364.4,.05,21,1,0)
This is the form type that the rule will be executed for.
"^DD",364.4,364.4,.05,"DT")
3170428
"^DD",364.5,364.5,0)
FIELD^^3^11
"^DD",364.5,364.5,0,"DDA")
N
"^DD",364.5,364.5,0,"DT")
2960311
"^DD",364.5,364.5,0,"ID",.05)
S %I=Y,Y=$S('$D(^(0)):"",$D(^DIC(+$P(^(0),U,5),0))#2:$P(^(0),U,1),1:""),C=$P(^DD(1,.01,0),U,2) D Y^DIQ:Y]"" W "   ",Y,@("$E("_DIC_"%I,0),0)") S Y=%I K %I
"^DD",364.5,364.5,0,"IX","B",364.5,.01)

"^DD",364.5,364.5,0,"NM","IB DATA ELEMENT DEFINITION")

"^DD",364.5,364.5,0,"PT",364.7,.03)

"^DD",364.5,364.5,0,"VRPK")
IB
"^DD",364.5,364.5,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<3)!'(X'?1P.E) X
"^DD",364.5,364.5,.01,1,0)
^.1
"^DD",364.5,364.5,.01,1,1,0)
364.5^B
"^DD",364.5,364.5,.01,1,1,1)
S ^IBA(364.5,"B",$E(X,1,30),DA)=""
"^DD",364.5,364.5,.01,1,1,2)
K ^IBA(364.5,"B",$E(X,1,30),DA)
"^DD",364.5,364.5,.01,3)
Answer must be 3-30 characters in length.
"^DD",364.5,364.5,.01,21,0)
^^1^1^2951205^
"^DD",364.5,364.5,.01,21,1,0)
The name to be used to uniquely identify this data element.
"^DD",364.5,364.5,.01,"DT")
2951219
"^DD",364.5,364.5,.02,0)
SECURITY LEVEL^RS^N:NATIONAL,NO EDIT;L:LOCAL;^0;2^Q
"^DD",364.5,364.5,.02,21,0)
^^2^2^2960215^^^^
"^DD",364.5,364.5,.02,21,1,0)
If this field is set to N (NATIONAL,NO EDIT), this is a secured data
"^DD",364.5,364.5,.02,21,2,0)
element and will not be allowed to be edited or deleted.
"^DD",364.5,364.5,.02,"DT")
2960215
"^DD",364.5,364.5,.03,0)
TYPE OF ELEMENT^RS^F:NON-MULTIPLE FILEMAN FIELD;E:EXTRACTED VIA CODE;C:CONSTANT VALUE;^0;3^Q
"^DD",364.5,364.5,.03,1,0)
^.1
"^DD",364.5,364.5,.03,1,1,0)
^^TRIGGER^364.5^.04
"^DD",364.5,364.5,.03,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X="FC",Y(1)=X S X=Y(0),X=X S Y=X,X=Y(1),X=X S X=X[Y I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X=DIV S X="I" X ^DD(364.5,.03,1,1,1.4)
"^DD",364.5,364.5,.03,1,1,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,4)=DIV,DIH=364.5,DIG=.04 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.03,1,1,2)
Q
"^DD",364.5,364.5,.03,1,1,3)
DO NOT DELETE
"^DD",364.5,364.5,.03,1,1,"%D",0)
^^1^1^2960215^
"^DD",364.5,364.5,.03,1,1,"%D",1,0)
If TYPE OF ELEMENT is 'F' or 'C' then ELEMENT CATEGORY must be 'I'. 
"^DD",364.5,364.5,.03,1,1,"CREATE CONDITION")
"FC"[INTERNAL(TYPE OF ELEMENT)
"^DD",364.5,364.5,.03,1,1,"CREATE VALUE")
S X="I"
"^DD",364.5,364.5,.03,1,1,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.03,1,1,"DT")
2960215
"^DD",364.5,364.5,.03,1,1,"FIELD")
ELEMENT CATEGORY
"^DD",364.5,364.5,.03,1,2,0)
^^TRIGGER^364.5^.06
"^DD",364.5,364.5,.03,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X'="F" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" X ^DD(364.5,.03,1,2,1.4)
"^DD",364.5,364.5,.03,1,2,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,6)=DIV,DIH=364.5,DIG=.06 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.03,1,2,2)
Q
"^DD",364.5,364.5,.03,1,2,3)
DO NOT DELETE
"^DD",364.5,364.5,.03,1,2,"%D",0)
^^2^2^2960215^
"^DD",364.5,364.5,.03,1,2,"%D",1,0)
This triggers the FILEMAN FIELD REFERENCE field to null if the element type
"^DD",364.5,364.5,.03,1,2,"%D",2,0)
is not FILEMAN field type of element.
"^DD",364.5,364.5,.03,1,2,"CREATE CONDITION")
INTERNAL(TYPE OF ELEMENT)'="F"
"^DD",364.5,364.5,.03,1,2,"CREATE VALUE")
@
"^DD",364.5,364.5,.03,1,2,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.03,1,2,"DT")
2960215
"^DD",364.5,364.5,.03,1,2,"FIELD")
FILEMAN FIELD REFERENCE
"^DD",364.5,364.5,.03,1,3,0)
^^TRIGGER^364.5^.08
"^DD",364.5,364.5,.03,1,3,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X'="C" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,8),X=X S DIU=X K Y S X="" X ^DD(364.5,.03,1,3,1.4)
"^DD",364.5,364.5,.03,1,3,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,8)=DIV,DIH=364.5,DIG=.08 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.03,1,3,2)
Q
"^DD",364.5,364.5,.03,1,3,3)
DO NOT DELETE
"^DD",364.5,364.5,.03,1,3,"%D",0)
^^2^2^2960215^
"^DD",364.5,364.5,.03,1,3,"%D",1,0)
This triggers the CONSTANT VALUE field to null if the element type is not
"^DD",364.5,364.5,.03,1,3,"%D",2,0)
CONSTANT type of element.
"^DD",364.5,364.5,.03,1,3,"CREATE CONDITION")
INTERNAL(TYPE OF ELEMENT)'="C"
"^DD",364.5,364.5,.03,1,3,"CREATE VALUE")
@
"^DD",364.5,364.5,.03,1,3,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.03,1,3,"DT")
2960215
"^DD",364.5,364.5,.03,1,3,"FIELD")
CONSTANT VALUE
"^DD",364.5,364.5,.03,1,4,0)
^^TRIGGER^364.5^1
"^DD",364.5,364.5,.03,1,4,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X'="E" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,1)):^(1),1:"") S X=$E(Y(1),1,245),X=X S DIU=X K Y S X="" X ^DD(364.5,.03,1,4,1.4)
"^DD",364.5,364.5,.03,1,4,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),1)):^(1),1:""),DIV=X S DE=0-$L(DIH),DIU=$E(DIH,1,245),Y=$E(DIH,246,999),^(1)=$J("",$S(DE>0:DE,1:0))_DIV_$S(Y?." ":"",1:$J("",245-$L(DIV))_Y),DIH=364.5,DIG=1 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.03,1,4,2)
Q
"^DD",364.5,364.5,.03,1,4,3)
DO NOT DELETE
"^DD",364.5,364.5,.03,1,4,"%D",0)
^^2^2^2960215^
"^DD",364.5,364.5,.03,1,4,"%D",1,0)
This triggers the EXTRACT CODE field to null if the element type is not an
"^DD",364.5,364.5,.03,1,4,"%D",2,0)
EXTRACTED VIA CODE type of element.
"^DD",364.5,364.5,.03,1,4,"CREATE CONDITION")
INTERNAL(TYPE OF ELEMENT)'="E"
"^DD",364.5,364.5,.03,1,4,"CREATE VALUE")
@
"^DD",364.5,364.5,.03,1,4,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.03,1,4,"DT")
2960215
"^DD",364.5,364.5,.03,1,4,"FIELD")
EXTRACT CODE
"^DD",364.5,364.5,.03,21,0)
^^3^3^2951207^^
"^DD",364.5,364.5,.03,21,1,0)
The type of data element being defined as needed by one or more forms.  This
"^DD",364.5,364.5,.03,21,2,0)
field determines the type of retrieval needed to get the actual data element's
"^DD",364.5,364.5,.03,21,3,0)
value for a given bill.
"^DD",364.5,364.5,.03,"DT")
2960215
"^DD",364.5,364.5,.04,0)
ELEMENT CATEGORY^RSX^I:INDIVIDUAL ELEMENT;G:GROUP ELEMENT;^0;4^I $P($G(^IBA(364.5,DA,0)),U,3)="F",$G(X)="G" K X
"^DD",364.5,364.5,.04,1,0)
^.1
"^DD",364.5,364.5,.04,1,1,0)
^^TRIGGER^364.5^.06
"^DD",364.5,364.5,.04,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X="G" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" X ^DD(364.5,.04,1,1,1.4)
"^DD",364.5,364.5,.04,1,1,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,6)=DIV,DIH=364.5,DIG=.06 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.04,1,1,2)
Q
"^DD",364.5,364.5,.04,1,1,"CREATE CONDITION")
INTERNAL(ELEMENT CATEGORY)="G"
"^DD",364.5,364.5,.04,1,1,"CREATE VALUE")
""
"^DD",364.5,364.5,.04,1,1,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.04,1,1,"FIELD")
FILEMAN FIELD REFERENCE
"^DD",364.5,364.5,.04,3)
This indicates an INDIVIDUAL or GROUP of elements will be returned.  Group is not valid for Fileman type elements.
"^DD",364.5,364.5,.04,5,1,0)
364.5^.03^1
"^DD",364.5,364.5,.04,21,0)
^^3^3^2951205^
"^DD",364.5,364.5,.04,21,1,0)
This defines whether the data element to be extracted is a single piece of data
"^DD",364.5,364.5,.04,21,2,0)
or is a string of related data.  Fileman field references must be designated as
"^DD",364.5,364.5,.04,21,3,0)
individual elements.
"^DD",364.5,364.5,.04,"DT")
2960215
"^DD",364.5,364.5,.05,0)
BASE FILE^P1'^DIC(^0;5^Q
"^DD",364.5,364.5,.05,3)
Enter the Fileman file to be used as a 'base' to extract the data from.
"^DD",364.5,364.5,.05,21,0)
^^2^2^2960311^
"^DD",364.5,364.5,.05,21,1,0)
This is the number of the Fileman file to be used as a 'base' to extract
"^DD",364.5,364.5,.05,21,2,0)
data for this field.
"^DD",364.5,364.5,.05,"DT")
2960311
"^DD",364.5,364.5,.06,0)
FILEMAN FIELD REFERENCE^FX^^0;6^K:$L(X)>65!($L(X)<1) X I $D(X),$P($G(^IBA(364.5,DA,0)),U,4)="G" K X
"^DD",364.5,364.5,.06,1,0)
^.1
"^DD",364.5,364.5,.06,1,1,0)
^^TRIGGER^364.5^.07
"^DD",364.5,364.5,.06,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0)="" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X="" X ^DD(364.5,.06,1,1,1.4)
"^DD",364.5,364.5,.06,1,1,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,7)=DIV,DIH=364.5,DIG=.07 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.06,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X="" X ^DD(364.5,.06,1,1,2.4)
"^DD",364.5,364.5,.06,1,1,2.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,7)=DIV,DIH=364.5,DIG=.07 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.06,1,1,"CREATE CONDITION")
FILEMAN FIELD REFERENCE=""
"^DD",364.5,364.5,.06,1,1,"CREATE VALUE")
@
"^DD",364.5,364.5,.06,1,1,"DELETE VALUE")
@
"^DD",364.5,364.5,.06,1,1,"FIELD")
#.07
"^DD",364.5,364.5,.06,3)
Must be a valid Fileman reference and ELEMENT CATEGORY must not be GROUP.
"^DD",364.5,364.5,.06,5,1,0)
364.5^.04^1
"^DD",364.5,364.5,.06,5,2,0)
364.5^.03^2
"^DD",364.5,364.5,.06,21,0)
^^6^6^2951221^^^
"^DD",364.5,364.5,.06,21,1,0)
The valid Fileman field reference or simple Fileman navigation to be used
"^DD",364.5,364.5,.06,21,2,0)
to extract using the $$GET^DIQ utility. Note this will not return true
"^DD",364.5,364.5,.06,21,3,0)
multiple entries.  Word-processing type fields are able to be retrieved,
"^DD",364.5,364.5,.06,21,4,0)
however.  No syntax check is made on this field so the user must be careful
"^DD",364.5,364.5,.06,21,5,0)
to type a valid Fileman expression.  This must be designated as an
"^DD",364.5,364.5,.06,21,6,0)
INDIVIDUAL element, not a group element.
"^DD",364.5,364.5,.06,"DT")
2951221
"^DD",364.5,364.5,.07,0)
FILEMAN RETURN FORMAT^S^I:INTERNAL;E:EXTERNAL;^0;7^Q
"^DD",364.5,364.5,.07,5,1,0)
364.5^.06^1
"^DD",364.5,364.5,.07,21,0)
^^5^5^2951205^
"^DD",364.5,364.5,.07,21,1,0)
This is the format for the retrieved data for Fileman-type data elements.  It
"^DD",364.5,364.5,.07,21,2,0)
is recommended to use Internal format whenever possible to keep the data
"^DD",364.5,364.5,.07,21,3,0)
element definitions in this file as generic as possible to avoid duplication.  
"^DD",364.5,364.5,.07,21,4,0)
The format capabilities of the forms generator should be used to interpret and
"^DD",364.5,364.5,.07,21,5,0)
reformat the data element when needed.
"^DD",364.5,364.5,.07,"DT")
2951205
"^DD",364.5,364.5,.08,0)
CONSTANT VALUE^F^^0;8^K:$L(X)>80!($L(X)<1) X
"^DD",364.5,364.5,.08,3)
Answer must be 1-80 characters in length.
"^DD",364.5,364.5,.08,5,1,0)
364.5^.03^3
"^DD",364.5,364.5,.08,21,0)
^^1^1^2951205^
"^DD",364.5,364.5,.08,21,1,0)
The specific value that this data element should return for this data element.
"^DD",364.5,364.5,.08,"DT")
2951205
"^DD",364.5,364.5,1,0)
EXTRACT CODE^K^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",364.5,364.5,1,3)
This is Standard MUMPS code.
"^DD",364.5,364.5,1,5,1,0)
364.5^.03^4
"^DD",364.5,364.5,1,9)
@
"^DD",364.5,364.5,1,21,0)
^^7^7^2951207^^^
"^DD",364.5,364.5,1,21,1,0)
The code to be executed by the forms generator to return the value(s) of the
"^DD",364.5,364.5,1,21,2,0)
data element.  If no ARRAY ROOT field is completed for this data element, the
"^DD",364.5,364.5,1,21,3,0)
code should set the variable IBXDATA or the array IBXDATA(1) through IBXDATA(n)
"^DD",364.5,364.5,1,21,4,0)
where n=the total # of iterations of the data element retrieved.  If the ARRAY 
"^DD",364.5,364.5,1,21,5,0)
ROOT field has been completed for this data element, this code should set the
"^DD",364.5,364.5,1,21,6,0)
variable referenced there.  IBXIEN is assumed to be the internal entry number
"^DD",364.5,364.5,1,21,7,0)
of the  file (referenced by the variable IBXFILE) entry.
"^DD",364.5,364.5,1,"DT")
2951205
"^DD",364.5,364.5,2,0)
ARRAY ROOT^F^^2;E1,50^K:$L(X)>50!($L(X)<1) X
"^DD",364.5,364.5,2,3)
Answer must be a valid array root name.
"^DD",364.5,364.5,2,21,0)
^^3^3^2960117^^
"^DD",364.5,364.5,2,21,1,0)
 The local or global base root where multiple-valued output or word processing
"^DD",364.5,364.5,2,21,2,0)
data is to be stored for this data element.  IBXDATA is the default if there
"^DD",364.5,364.5,2,21,3,0)
is no data in this field.  Example of a global array: ^TMP($J)
"^DD",364.5,364.5,2,"DT")
2960117
"^DD",364.5,364.5,3,0)
DESCRIPTION^364.53^^3;0
"^DD",364.5,364.53,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",364.5,364.53,0,"DT")
2951205
"^DD",364.5,364.53,0,"NM","DESCRIPTION")

"^DD",364.5,364.53,0,"UP")
364.5
"^DD",364.5,364.53,.01,0)
DESCRIPTION^W^^0;1^Q
"^DD",364.5,364.53,.01,3)
Enter a description of the data element being defined.
"^DD",364.5,364.53,.01,21,0)
^^1^1^2951205^
"^DD",364.5,364.53,.01,21,1,0)
This is a free text description of the data that this data element represents.
"^DD",364.5,364.53,.01,"DT")
2951205
"^DD",364.6,364.6,0)
FIELD^^.13^13
"^DD",364.6,364.6,0,"DDA")
N
"^DD",364.6,364.6,0,"DT")
3071126
"^DD",364.6,364.6,0,"ID",.04)
W "   ",$P(^(0),U,4)
"^DD",364.6,364.6,0,"ID",.05)
W "   ",$P(^(0),U,5)
"^DD",364.6,364.6,0,"ID",.08)
W "   ",$P(^(0),U,8)
"^DD",364.6,364.6,0,"ID",.1)
W "   ",$P(^(0),U,10)
"^DD",364.6,364.6,0,"IX","APAR",364.6,.01)

"^DD",364.6,364.6,0,"IX","APAR1",364.6,.03)

"^DD",364.6,364.6,0,"IX","ASEQ",364.6,.01)

"^DD",364.6,364.6,0,"IX","ASEQ1",364.6,.04)

"^DD",364.6,364.6,0,"IX","ASEQ2",364.6,.05)

"^DD",364.6,364.6,0,"IX","ASEQ3",364.6,.08)

"^DD",364.6,364.6,0,"IX","B",364.6,.01)

"^DD",364.6,364.6,0,"NM","IB FORM SKELETON DEFINITION")
 
"^DD",364.6,364.6,0,"PT",364.6,.03)

"^DD",364.6,364.6,0,"PT",364.7,.01)

"^DD",364.6,364.6,0,"VRPK")
IB
"^DD",364.6,364.6,.01,0)
BILL FORM^RP353'X^IBE(353,^0;1^I $$DUP^IBCEFG0($G(DA),X,1) K X
"^DD",364.6,364.6,.01,1,0)
^.1
"^DD",364.6,364.6,.01,1,1,0)
364.6^B
"^DD",364.6,364.6,.01,1,1,1)
S ^IBA(364.6,"B",$E(X,1,30),DA)=""
"^DD",364.6,364.6,.01,1,1,2)
K ^IBA(364.6,"B",$E(X,1,30),DA)
"^DD",364.6,364.6,.01,1,2,0)
364.6^ASEQ^MUMPS
"^DD",364.6,364.6,.01,1,2,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=$P(Z0,U,4),Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 S ^IBA(364.6,"ASEQ",+X,Z1,Z2,Z3,DA)=""
"^DD",364.6,364.6,.01,1,2,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=$P(Z0,U,4),Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 K ^IBA(364.6,"ASEQ",+X,Z1,Z2,Z3,DA)
"^DD",364.6,364.6,.01,1,2,3)
DO NOT DELETE
"^DD",364.6,364.6,.01,1,2,"%D",0)
^^1^1^2960117^^
"^DD",364.6,364.6,.01,1,2,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.01,1,2,"DT")
2960116
"^DD",364.6,364.6,.01,1,3,0)
364.6^APAR^MUMPS
"^DD",364.6,364.6,.01,1,3,1)
N Z0 S Z0=$P($G(^IBA(364.6,DA,0)),U,3) I Z0,Z0'=X S ^IBA(364.6,"APAR",$E(X,1,30),Z0,DA)=""
"^DD",364.6,364.6,.01,1,3,2)
N Z0 S Z0=$P($G(^IBA(364.6,DA,0)),U,3) I Z0,Z0'=X K ^IBA(364.6,"APAR",$E(X,1,30),Z0,DA)
"^DD",364.6,364.6,.01,1,3,3)
DO NOT DELETE
"^DD",364.6,364.6,.01,1,3,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.01,1,3,"%D",1,0)
Xref by bill form and associated form field definition.
"^DD",364.6,364.6,.01,1,3,"DT")
2960117
"^DD",364.6,364.6,.01,1,4,0)
^^TRIGGER^364.6^.03
"^DD",364.6,364.6,.01,1,4,1)
X ^DD(364.6,.01,1,4,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X=DIV S X=$S('$D(D0):"",D0<0:"",1:D0) X ^DD(364.6,.01,1,4,1.4)
"^DD",364.6,364.6,.01,1,4,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.01,1,4,69.2) S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.01,1,4,1.4)
S DIH=$G(^IBA(364.6,DIV(0),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=364.6,DIG=.03 D ^DICR
"^DD",364.6,364.6,.01,1,4,2)
X ^DD(364.6,.01,1,4,2.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" S DIH=$G(^IBA(364.6,DIV(0),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=364.6,DIG=.03 D ^DICR
"^DD",364.6,364.6,.01,1,4,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.01,1,4,79.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.01,1,4,3)
DO NOT DELETE
"^DD",364.6,364.6,.01,1,4,69.2)
S I(0,0)=$G(D0),D0=Y(0) S:'D0!'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$P($G(^DD(353,2.02,0)),U,3),Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"")
"^DD",364.6,364.6,.01,1,4,79.2)
S I(0,0)=$G(D0),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'D0!'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$P($G(^DD(353,2.02,0)),U,3)
"^DD",364.6,364.6,.01,1,4,"%D",0)
^^1^1^3000613^
"^DD",364.6,364.6,.01,1,4,"%D",1,0)
This trigger is needed for the local screen 9 logic to work correctly.
"^DD",364.6,364.6,.01,1,4,"CREATE CONDITION")
BILL FORM:FORMAT TYPE="BILLING SCREEN"
"^DD",364.6,364.6,.01,1,4,"CREATE VALUE")
NUMBER
"^DD",364.6,364.6,.01,1,4,"DELETE CONDITION")
BILL FORM:FORMAT TYPE="BILLING SCREEN"
"^DD",364.6,364.6,.01,1,4,"DELETE VALUE")
@
"^DD",364.6,364.6,.01,1,4,"DT")
3000613
"^DD",364.6,364.6,.01,1,4,"FIELD")
ASSOCIATED FORM DEFINITION
"^DD",364.6,364.6,.01,3)
Enter a BILLING FORM that the data element will appear on.
"^DD",364.6,364.6,.01,21,0)
^^2^2^2960318^^^^
"^DD",364.6,364.6,.01,21,1,0)
Identifies a billing 'form' or 'screen' where the data element is used.
"^DD",364.6,364.6,.01,21,2,0)
The combination of form/page/line/column must be unique.
"^DD",364.6,364.6,.01,"DT")
3000613
"^DD",364.6,364.6,.02,0)
SECURITY LEVEL^SX^N:NATIONAL,NO EDIT;L:LOCAL;^0;2^I X="N",$P($G(^IBA(364.6,DA,0)),U,3) K X
"^DD",364.6,364.6,.02,3)
Enter an N if no editing is allowed, L if editing is OK because this entry is associated with a locally defined form.
"^DD",364.6,364.6,.02,5,1,0)
364.6^.03^7
"^DD",364.6,364.6,.02,21,0)
^.001^4^4^3001030^^
"^DD",364.6,364.6,.02,21,1,0)
This field determines whether or not editing of the entry is allowed.  If
"^DD",364.6,364.6,.02,21,2,0)
the security level of the entry is NATIONAL (N), no local editing is
"^DD",364.6,364.6,.02,21,3,0)
allowed.  If the security level of the entry is LOCAL (L), it may be
"^DD",364.6,364.6,.02,21,4,0)
edited.
"^DD",364.6,364.6,.02,"DT")
2960117
"^DD",364.6,364.6,.03,0)
ASSOCIATED FORM DEFINITION^P364.6'^IBA(364.6,^0;3^Q
"^DD",364.6,364.6,.03,1,0)
^.1
"^DD",364.6,364.6,.03,1,1,0)
364.6^APAR1^MUMPS
"^DD",364.6,364.6,.03,1,1,1)
N Z0 S Z0=+$G(^IBA(364.6,DA,0)) I Z0,Z0'=X S ^IBA(364.6,"APAR",Z0,$E(X,1,30),DA)=""
"^DD",364.6,364.6,.03,1,1,2)
N Z0 S Z0=+$G(^IBA(364.6,DA,0)) I Z0,Z0'=X K ^IBA(364.6,"APAR",Z0,$E(X,1,30),DA)
"^DD",364.6,364.6,.03,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,1,"%D",0)
^^1^1^2960117^^
"^DD",364.6,364.6,.03,1,1,"%D",1,0)
Xref by bill form and associated form field definition.
"^DD",364.6,364.6,.03,1,1,"DT")
2960117
"^DD",364.6,364.6,.03,1,2,0)
^^TRIGGER^364.6^.04
"^DD",364.6,364.6,.03,1,2,1)
X ^DD(364.6,.03,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,2,1.4)
"^DD",364.6,364.6,.03,1,2,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,2,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,2,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,4)=DIV,DIH=364.6,DIG=.04 D ^DICR
"^DD",364.6,364.6,.03,1,2,2)
Q
"^DD",364.6,364.6,.03,1,2,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,2,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,2,"%D",0)
^.101^2^2^3000424^^
"^DD",364.6,364.6,.03,1,2,"%D",1,0)
If an associated form that is not a screen form, page is taken from the
"^DD",364.6,364.6,.03,1,2,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,2,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,2,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,2,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,2,"DT")
3000405
"^DD",364.6,364.6,.03,1,2,"FIELD")
PAGE OR SEQUENCE
"^DD",364.6,364.6,.03,1,3,0)
^^TRIGGER^364.6^.05
"^DD",364.6,364.6,.03,1,3,1)
X ^DD(364.6,.03,1,3,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,3,1.4)
"^DD",364.6,364.6,.03,1,3,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,3,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,3,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,5)=DIV,DIH=364.6,DIG=.05 D ^DICR
"^DD",364.6,364.6,.03,1,3,2)
Q
"^DD",364.6,364.6,.03,1,3,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,3,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,3,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,3,"%D",1,0)
If an associated form that is not a screen form, line is taken from the
"^DD",364.6,364.6,.03,1,3,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,3,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,3,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,3,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,3,"DT")
3000405
"^DD",364.6,364.6,.03,1,3,"FIELD")
FIRST LINE NUMBER
"^DD",364.6,364.6,.03,1,4,0)
^^TRIGGER^364.6^.08
"^DD",364.6,364.6,.03,1,4,1)
X ^DD(364.6,.03,1,4,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,8),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,4,1.4)
"^DD",364.6,364.6,.03,1,4,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,4,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,4,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,8)=DIV,DIH=364.6,DIG=.08 D ^DICR
"^DD",364.6,364.6,.03,1,4,2)
Q
"^DD",364.6,364.6,.03,1,4,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,4,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,4,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,4,"%D",1,0)
If an associated form that is not a screen form, column is taken from the
"^DD",364.6,364.6,.03,1,4,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,4,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,4,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,4,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,4,"DT")
3000405
"^DD",364.6,364.6,.03,1,4,"FIELD")
STARTING COLUMN
"^DD",364.6,364.6,.03,1,5,0)
^^TRIGGER^364.6^.09
"^DD",364.6,364.6,.03,1,5,1)
X ^DD(364.6,.03,1,5,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,9),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,5,1.4)
"^DD",364.6,364.6,.03,1,5,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,5,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,5,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,9)=DIV,DIH=364.6,DIG=.09 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.03,1,5,2)
Q
"^DD",364.6,364.6,.03,1,5,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,5,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,5,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,5,"%D",1,0)
If an associated form that is not a screen form, length is taken from the
"^DD",364.6,364.6,.03,1,5,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,5,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,5,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,5,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,5,"DT")
3000405
"^DD",364.6,364.6,.03,1,5,"FIELD")
LENGTH
"^DD",364.6,364.6,.03,1,6,0)
^^TRIGGER^364.6^.06
"^DD",364.6,364.6,.03,1,6,1)
X ^DD(364.6,.03,1,6,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,6,1.4)
"^DD",364.6,364.6,.03,1,6,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,6,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,6,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,6)=DIV,DIH=364.6,DIG=.06 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.03,1,6,2)
Q
"^DD",364.6,364.6,.03,1,6,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,6,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,6,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,6,"%D",1,0)
If associated form that is not a screen form, the max number lines is taken
"^DD",364.6,364.6,.03,1,6,"%D",2,0)
from the associated with field definition.
"^DD",364.6,364.6,.03,1,6,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,6,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,6,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,6,"DT")
3000405
"^DD",364.6,364.6,.03,1,6,"FIELD")
MAX NUMBER LINES
"^DD",364.6,364.6,.03,1,7,0)
^^TRIGGER^364.6^.02
"^DD",364.6,364.6,.03,1,7,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X="L" X ^DD(364.6,.03,1,7,1.4)
"^DD",364.6,364.6,.03,1,7,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,2)=DIV,DIH=364.6,DIG=.02 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.03,1,7,2)
Q
"^DD",364.6,364.6,.03,1,7,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,7,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.03,1,7,"%D",1,0)
Only local entries can be associated.
"^DD",364.6,364.6,.03,1,7,"CREATE VALUE")
"L"
"^DD",364.6,364.6,.03,1,7,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,7,"DT")
2960117
"^DD",364.6,364.6,.03,1,7,"FIELD")
SECURITY LEVEL
"^DD",364.6,364.6,.03,3)
Enter the form definition record this definition will override.
"^DD",364.6,364.6,.03,5,1,0)
364.6^.01^4
"^DD",364.6,364.6,.03,21,0)
^^1^1^2960117^^
"^DD",364.6,364.6,.03,21,1,0)
The form definition record this definition will override.
"^DD",364.6,364.6,.03,"DT")
3000414
"^DD",364.6,364.6,.04,0)
PAGE OR SEQUENCE^FX^^0;4^K:$L(X)>20!($L(X)<1) X I $D(X),$S($P($G(^IBE(353,+$G(^IBA(364.6,+DA,0)),2)),U,2)="S":0,1:$P($G(^IBA(364.6,DA,0)),U,3))!$$DUP^IBCEFG0(DA,X,2) K X
"^DD",364.6,364.6,.04,1,0)
^.1^^-1
"^DD",364.6,364.6,.04,1,1,0)
364.6^ASEQ1^MUMPS
"^DD",364.6,364.6,.04,1,1,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 S ^IBA(364.6,"ASEQ",Z1,$E(X,1,30),Z2,Z3,DA)=""
"^DD",364.6,364.6,.04,1,1,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 K ^IBA(364.6,"ASEQ",Z1,$E(X,1,30),Z2,Z3,DA)
"^DD",364.6,364.6,.04,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.04,1,1,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.04,1,1,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.04,1,1,"DT")
2960117
"^DD",364.6,364.6,.04,3)
This data must be 1-20 char long, can't be an assoc form, and must be a unique form/page/line/column.
"^DD",364.6,364.6,.04,5,1,0)
364.6^.03^2
"^DD",364.6,364.6,.04,21,0)
^^4^4^2960318^^^^
"^DD",364.6,364.6,.04,21,1,0)
This field is used to specify the page, section, transaction segment, etc.
"^DD",364.6,364.6,.04,21,2,0)
that the data element is to be associated with.  This field will be used as
"^DD",364.6,364.6,.04,21,3,0)
the second-level sort field when extracting data fields for this form.
"^DD",364.6,364.6,.04,21,4,0)
The combination of form/page/line/column must be unique.
"^DD",364.6,364.6,.04,"DT")
3000428
"^DD",364.6,364.6,.05,0)
FIRST LINE NUMBER^NJ4,0X^^0;5^K:+X'=X!(X>9999)!(X<0)!(X?.E1"."1N.N) X I $D(X),$S($P($G(^IBE(353,+$G(^IBA(364.6,+DA,0)),2)),U,2)="S":0,1:$P($G(^IBA(364.6,DA,0)),U,3))!$$DUP^IBCEFG0(DA,X,3) K X
"^DD",364.6,364.6,.05,.1)
LINE
"^DD",364.6,364.6,.05,1,0)
^.1
"^DD",364.6,364.6,.05,1,1,0)
364.6^ASEQ2^MUMPS
"^DD",364.6,364.6,.05,1,1,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,8) I Z1,Z2'="",Z3 S ^IBA(364.6,"ASEQ",Z1,Z2,$E(X,1,30),Z3,DA)=""
"^DD",364.6,364.6,.05,1,1,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,8) I Z1,Z2'="",Z3 K ^IBA(364.6,"ASEQ",Z1,Z2,$E(X,1,30),Z3,DA)
"^DD",364.6,364.6,.05,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.05,1,1,"%D",0)
^^1^1^2960117^^^^
"^DD",364.6,364.6,.05,1,1,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.05,1,1,"DT")
2960117
"^DD",364.6,364.6,.05,3)
Type a # 0-9999, 0 Decimals, can't be assoc form, need unique form/pg/line/col.
"^DD",364.6,364.6,.05,5,1,0)
364.6^.03^3
"^DD",364.6,364.6,.05,21,0)
^^5^5^2960318^^^
"^DD",364.6,364.6,.05,21,1,0)
If this is a printed form, this is the first line number that this data
"^DD",364.6,364.6,.05,21,2,0)
element will appear on.  For transmitted forms, this is assumed to always
"^DD",364.6,364.6,.05,21,3,0)
be a 1.  This will be used as the third-level sort field when extracting
"^DD",364.6,364.6,.05,21,4,0)
data fields for this form.  The combination of form/page/line/column must
"^DD",364.6,364.6,.05,21,5,0)
be unique.
"^DD",364.6,364.6,.05,"DT")
3000428
"^DD",364.6,364.6,.06,0)
MAX NUMBER LINES^NJ3,0X^^0;6^K:+X'=X!(X>999)!(X<0)!(X?.E1"."1N.N) X I $D(X),$P($G(^IBA(364.6,DA,0)),U,3) K X
"^DD",364.6,364.6,.06,3)
Type a Number between 0 and 999, 0 Decimal Digits (can't be an associated form).
"^DD",364.6,364.6,.06,5,1,0)
364.6^.03^6
"^DD",364.6,364.6,.06,21,0)
^^2^2^2951205^
"^DD",364.6,364.6,.06,21,1,0)
If a printed form, this is the highest numbered line number that this data
"^DD",364.6,364.6,.06,21,2,0)
element is allowed to print on.
"^DD",364.6,364.6,.06,"DT")
2960117
"^DD",364.6,364.6,.07,0)
LOCAL OVERRIDE ALLOWED^S^0:NO;1:YES;^0;7^Q
"^DD",364.6,364.6,.07,3)
Enter 0 (NO) to prevent local override, 1 to allow local override.
"^DD",364.6,364.6,.07,21,0)
^.001^2^2^3020822^^
"^DD",364.6,364.6,.07,21,1,0)
This controls whether or not the output forms generator will allow for a
"^DD",364.6,364.6,.07,21,2,0)
redefinition of this record via a local override.
"^DD",364.6,364.6,.07,"DT")
2960311
"^DD",364.6,364.6,.08,0)
STARTING COLUMN OR PIECE^NJ3,1X^^0;8^K:+X'=X!(X>999)!(X<0)!($S(X[".":X'?.E1"."1.2N,1:0)) X I $D(X),$S($P($G(^IBE(353,+$G(^IBA(364.6,+DA,0)),2)),U,2)="S":0,1:$P($G(^IBA(364.6,DA,0)),U,3))!$$DUP^IBCEFG0(DA,X,4) K X
"^DD",364.6,364.6,.08,.1)
COLUMN
"^DD",364.6,364.6,.08,1,0)
^.1
"^DD",364.6,364.6,.08,1,1,0)
364.6^ASEQ3^MUMPS
"^DD",364.6,364.6,.08,1,1,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,5) I Z1,Z2'="",Z3 S ^IBA(364.6,"ASEQ",Z1,Z2,Z3,$E(X,1,30),DA)=""
"^DD",364.6,364.6,.08,1,1,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,5) I Z1,Z2'="",Z3 K ^IBA(364.6,"ASEQ",Z1,Z2,Z3,$E(X,1,30),DA)
"^DD",364.6,364.6,.08,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.08,1,1,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.08,1,1,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.08,1,1,"DT")
2960117
"^DD",364.6,364.6,.08,1,2,0)
^^TRIGGER^364.6^.11
"^DD",364.6,364.6,.08,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0)["." I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,11),X=X S DIU=X K Y S X=DIV S X=1 X ^DD(364.6,.08,1,2,1.4)
"^DD",364.6,364.6,.08,1,2,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,11)=DIV,DIH=364.6,DIG=.11 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.08,1,2,2)
Q
"^DD",364.6,364.6,.08,1,2,3)
DO NOT DELETE
"^DD",364.6,364.6,.08,1,2,"%D",0)
^^2^2^2960126^^^
"^DD",364.6,364.6,.08,1,2,"%D",1,0)
If the starting column or piece is not a whole number, this must be a
"^DD",364.6,364.6,.08,1,2,"%D",2,0)
calculate only field - no output.
"^DD",364.6,364.6,.08,1,2,"CREATE CONDITION")
STARTING COLUMN OR PIECE["."
"^DD",364.6,364.6,.08,1,2,"CREATE VALUE")
S X=1
"^DD",364.6,364.6,.08,1,2,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.08,1,2,"DT")
2960126
"^DD",364.6,364.6,.08,1,2,"FIELD")
#.11
"^DD",364.6,364.6,.08,3)
Type a # 0-9999, 1-2 Decimals, can't be assoc form, need unique form/pg/line/col.
"^DD",364.6,364.6,.08,5,1,0)
364.6^.03^4
"^DD",364.6,364.6,.08,21,0)
^^5^5^2960318^^^^
"^DD",364.6,364.6,.08,21,1,0)
This is the column on the form, position in the data string (for non-printed
"^DD",364.6,364.6,.08,21,2,0)
forms) -  starting at position 1, or delimited piece that this data element
"^DD",364.6,364.6,.08,21,3,0)
is to be printed or stored in.  This will be used as the fourth-level sort
"^DD",364.6,364.6,.08,21,4,0)
field when extracting data fields for this form.  The combination of
"^DD",364.6,364.6,.08,21,5,0)
form/page/line/column must be unique.
"^DD",364.6,364.6,.08,"DT")
3000428
"^DD",364.6,364.6,.09,0)
LENGTH^NJ3,0X^^0;9^K:+X'=X!(X>250)!(X<1)!(X?.E1"."1N.N) X I $D(X),$P($G(^IBA(364.6,DA,0)),U,3),$P($G(^IBE(353,+^IBA(364.6,DA,0),2)),U,2)'="S" K X
"^DD",364.6,364.6,.09,3)
Type a Number between 1 and 250, 0 Decimal Digits (can't be an associated form).
"^DD",364.6,364.6,.09,5,1,0)
364.6^.03^5
"^DD",364.6,364.6,.09,21,0)
^^3^3^2951205^
"^DD",364.6,364.6,.09,21,1,0)
The length desired for the data element.  If present, this field will be used
"^DD",364.6,364.6,.09,21,2,0)
to truncate or pad the data element to this length after the element has been
"^DD",364.6,364.6,.09,21,3,0)
passed through the routine identified in the FORMAT ROUTINE field.
"^DD",364.6,364.6,.09,"DT")
3000111
"^DD",364.6,364.6,.1,0)
SHORT DESCRIPTION^F^^0;10^K:$L(X)>40!($L(X)<1) X
"^DD",364.6,364.6,.1,1,0)
^.1^^0
"^DD",364.6,364.6,.1,3)
Answer must be 1-40 characters in length
"^DD",364.6,364.6,.1,21,0)
^^2^2^3071126^
"^DD",364.6,364.6,.1,21,1,0)
This is a short description of the field that is used as an identifier to
"^DD",364.6,364.6,.1,21,2,0)
make lookups on this file meaningful.
"^DD",364.6,364.6,.1,"DT")
3080310
"^DD",364.6,364.6,.11,0)
CALCULATE ONLY OR OUTPUT^S^1:CALCULATE ONLY;0:OUTPUT;^0;11^Q
"^DD",364.6,364.6,.11,3)
Enter 1 if this field is used for calculation purposes and is not meant to be output
"^DD",364.6,364.6,.11,5,1,0)
364.6^.08^2
"^DD",364.6,364.6,.11,21,0)
^^4^4^2960715^^^^
"^DD",364.6,364.6,.11,21,1,0)
This field is set to 1 if there is a need to do a special extract or
"^DD",364.6,364.6,.11,21,2,0)
calculation at some point in the processing, but no output is desired
"^DD",364.6,364.6,.11,21,3,0)
from the field's code execution.  Used to set up arrays for group elements
"^DD",364.6,364.6,.11,21,4,0)
then the individual elements are output separately.
"^DD",364.6,364.6,.11,"DT")
2960715
"^DD",364.6,364.6,.12,0)
TRANSMIT IGNORES IF NULL^S^0:FALSE;1:TRUE;^0;12^Q
"^DD",364.6,364.6,.12,3)
Enter 1 (TRUE) if there should be no entry made in the output global if the data value of the element is null.
"^DD",364.6,364.6,.12,21,0)
^.001^5^5^3001030^^^
"^DD",364.6,364.6,.12,21,1,0)
This field can be used to suppress output of a field if its value is null.
"^DD",364.6,364.6,.12,21,2,0)
If not suppressed, an entry is made in the output global used by the
"^DD",364.6,364.6,.12,21,3,0)
formatter, regardless of the contents of the data for this field.
"^DD",364.6,364.6,.12,21,4,0)
Supressing the value results in no output to the formatter's output
"^DD",364.6,364.6,.12,21,5,0)
global if the value of the data for this field is determined to be null.
"^DD",364.6,364.6,.12,"DT")
2991006
"^DD",364.6,364.6,.13,0)
DATA REQUIRED FOR FIELD^S^1:YES;0:NO;^0;13^Q
"^DD",364.6,364.6,.13,3)
Enter yes if there should always be data in this field.
"^DD",364.6,364.6,.13,21,0)
^^2^2^3000216^
"^DD",364.6,364.6,.13,21,1,0)
This field is a flag that will stop the output of a record if this field
"^DD",364.6,364.6,.13,21,2,0)
indicates data is required and the data extracted is null.
"^DD",364.6,364.6,.13,"DT")
3000216
"^DD",364.7,364.7,0)
FIELD^^3^12
"^DD",364.7,364.7,0,"DDA")
N
"^DD",364.7,364.7,0,"DT")
2960710
"^DD",364.7,364.7,0,"ID",.03)
S %I=Y,Y=$S('$D(^(0)):"",$D(^IBA(364.5,+$P(^(0),U,3),0))#2:$P(^(0),U,1),1:""),C=$P(^DD(364.5,.01,0),U,2) D Y^DIQ:Y]"" W "   ",Y,@("$E("_DIC_"%I,0),0)") S Y=%I K %I
"^DD",364.7,364.7,0,"IX","AINS",364.7,.01)

"^DD",364.7,364.7,0,"IX","AINS1",364.7,.05)

"^DD",364.7,364.7,0,"IX","AINTYP",364.7,.01)

"^DD",364.7,364.7,0,"IX","AINTYP1",364.7,.05)

"^DD",364.7,364.7,0,"IX","AINTYP2",364.7,.06)

"^DD",364.7,364.7,0,"IX","ATYPE",364.7,.01)

"^DD",364.7,364.7,0,"IX","ATYPE1",364.7,.06)

"^DD",364.7,364.7,0,"IX","B",364.7,.01)

"^DD",364.7,364.7,0,"IX","C",364.7,.03)

"^DD",364.7,364.7,0,"NM","IB FORM FIELD CONTENT")
 
"^DD",364.7,364.7,0,"VRPK")
IB
"^DD",364.7,364.7,.01,0)
FORM FIELD REFERENCE^RP364.6'^IBA(364.6,^0;1^Q
"^DD",364.7,364.7,.01,1,0)
^.1
"^DD",364.7,364.7,.01,1,1,0)
364.7^B
"^DD",364.7,364.7,.01,1,1,1)
S ^IBA(364.7,"B",$E(X,1,30),DA)=""
"^DD",364.7,364.7,.01,1,1,2)
K ^IBA(364.7,"B",$E(X,1,30),DA)
"^DD",364.7,364.7,.01,1,2,0)
364.7^ATYPE^MUMPS
"^DD",364.7,364.7,.01,1,2,1)
N Z1,Z0 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,6) I Z1'="",$P($G(^IBA(364.6,+X,0)),U,3),'$P(Z0,U,5) S ^IBA(364.7,"ATYPE",$P(^IBA(364.6,+X,0),U,3),Z1,DA)=""
"^DD",364.7,364.7,.01,1,2,2)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,6) I Z1'="",$P($G(^IBA(364.6,+X,0)),U,3) K ^IBA(364.7,"ATYPE",$P(^IBA(364.6,+X,0),U,3),Z1,DA)
"^DD",364.7,364.7,.01,1,2,3)
DO NOT DELETE
"^DD",364.7,364.7,.01,1,2,"%D",0)
^^1^1^2980104^^^^
"^DD",364.7,364.7,.01,1,2,"%D",1,0)
Xref by form and bill type
"^DD",364.7,364.7,.01,1,2,"DT")
2960117
"^DD",364.7,364.7,.01,1,3,0)
364.7^AINTYP^MUMPS
"^DD",364.7,364.7,.01,1,3,1)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5),Z2=$P(Z0,U,6) I Z1,Z2'="",$P($G(^IBA(364.6,+X,0)),U,3) S ^IBA(364.7,"AINTYP",$P(^IBA(364.6,+X,0),U,3),Z1,Z2,DA)=""
"^DD",364.7,364.7,.01,1,3,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5),Z2=$P(Z0,U,6) I Z1,Z2'="",$P($G(^IBA(364.6,+X,0)),U,3) K ^IBA(364.7,"AINTYP",$P(^IBA(364.6,+X,0),U,3),Z1,Z2,DA)
"^DD",364.7,364.7,.01,1,3,3)
DO NOT DELETE
"^DD",364.7,364.7,.01,1,3,"%D",0)
^^1^1^2971231^^^
"^DD",364.7,364.7,.01,1,3,"%D",1,0)
Xref by form, insurance company and bill type
"^DD",364.7,364.7,.01,1,3,"DT")
2960117
"^DD",364.7,364.7,.01,1,4,0)
364.7^AINS^MUMPS
"^DD",364.7,364.7,.01,1,4,1)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5) I Z1,$P($G(^IBA(364.6,+X,0)),U,3),$P(Z0,U,6)="" S ^IBA(364.7,"AINS",$P(^IBA(364.6,+X,0),U,3),Z1,DA)=""
"^DD",364.7,364.7,.01,1,4,2)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5) I Z1,$P($G(^IBA(364.6,+X,0)),U,3) K ^IBA(364.7,"AINS",$P(^IBA(364.6,+X,0),U,3),Z1,DA)
"^DD",364.7,364.7,.01,1,4,3)
DO NOT DELETE
"^DD",364.7,364.7,.01,1,4,"%D",0)
^^1^1^2971231^^
"^DD",364.7,364.7,.01,1,4,"%D",1,0)
Xref by form field and insurance company
"^DD",364.7,364.7,.01,1,4,"DT")
2960118
"^DD",364.7,364.7,.01,3)
Enter the billing form that this field is associated with
"^DD",364.7,364.7,.01,21,0)
^^2^2^2951207^^^^
"^DD",364.7,364.7,.01,21,1,0)
This is a pointer to the billing form field that this field is associated
"^DD",364.7,364.7,.01,21,2,0)
with.
"^DD",364.7,364.7,.01,"DT")
3000428
"^DD",364.7,364.7,.02,0)
SECURITY LEVEL^S^N:NATIONAL,NO EDIT;L:LOCAL;^0;2^Q
"^DD",364.7,364.7,.02,3)
Enter N for nationally released fields (no edit) or L for locally added fields.
"^DD",364.7,364.7,.02,21,0)
^^3^3^2951219^^^
"^DD",364.7,364.7,.02,21,1,0)
This field determines whether or not editing of the entry is allowed.  For
"^DD",364.7,364.7,.02,21,2,0)
NATIONAL (N) field, no local editing is allowed.  If LOCAL (L) field is
"^DD",364.7,364.7,.02,21,3,0)
created, editing is allowed.
"^DD",364.7,364.7,.02,"DT")
3000428
"^DD",364.7,364.7,.03,0)
DATA ELEMENT^P364.5'^IBA(364.5,^0;3^Q
"^DD",364.7,364.7,.03,1,0)
^.1
"^DD",364.7,364.7,.03,1,1,0)
364.7^C
"^DD",364.7,364.7,.03,1,1,1)
S ^IBA(364.7,"C",$E(X,1,30),DA)=""
"^DD",364.7,364.7,.03,1,1,2)
K ^IBA(364.7,"C",$E(X,1,30),DA)
"^DD",364.7,364.7,.03,1,1,3)
DO NOT DELETE
"^DD",364.7,364.7,.03,1,1,"%D",0)
^^1^1^2960702^
"^DD",364.7,364.7,.03,1,1,"%D",1,0)
Xref by DATA ELEMENT NAME
"^DD",364.7,364.7,.03,1,1,"DT")
2960702
"^DD",364.7,364.7,.03,3)
Enter the data element that will define this form field.  If used on a screen, it must be a fileman type.
"^DD",364.7,364.7,.03,21,0)
^^1^1^2960627^^^^
"^DD",364.7,364.7,.03,21,1,0)
This identifies the data element that be extracted for this entry.
"^DD",364.7,364.7,.03,23,0)
^^4^4^2960627^^^^
"^DD",364.7,364.7,.03,23,1,0)
This is the data element that will be allowed to be displayed/edited on a
"^DD",364.7,364.7,.03,23,2,0)
screen, extracted for a transmit, or printed on a printed form.  If used on
"^DD",364.7,364.7,.03,23,3,0)
a screen, the data element must be a fileman type and a local field (>10000
"^DD",364.7,364.7,.03,23,4,0)
for ifn and on a node >10000) to be editable.
"^DD",364.7,364.7,.03,"DT")
2960702
"^DD",364.7,364.7,.04,0)
SCREEN PROMPT^FX^^0;4^K:$L(X)>70!($L(X)<1) X I $D(X),$P($G(^IBE(353,+$G(^IBA(364.6,+$G(^IBA(364.7,DA,0)),0)),2)),U,2)'="S" K X
"^DD",364.7,364.7,.04,.1)
 
"^DD",364.7,364.7,.04,1,0)
^.1^^0
"^DD",364.7,364.7,.04,3)
Answer must be 1-70 characters in length.
"^DD",364.7,364.7,.04,21,0)
3^^2^2^2960321^^^^
"^DD",364.7,364.7,.04,21,1,0)
This is used only by screen-type forms to place a prompt on the screen
"^DD",364.7,364.7,.04,21,2,0)
for a particular field.
"^DD",364.7,364.7,.04,23,0)
^^3^3^2960321^^^^
"^DD",364.7,364.7,.04,23,1,0)
This is the prompt that will preceed the data element defined for this
"^DD",364.7,364.7,.04,23,2,0)
entry.  If no data element, this prompt will display.  This field is only
"^DD",364.7,364.7,.04,23,3,0)
used for screen-type forms.
"^DD",364.7,364.7,.04,"DT")
2960321
"^DD",364.7,364.7,.05,0)
INSURANCE COMPANY^P36'^DIC(36,^0;5^Q
"^DD",364.7,364.7,.05,1,0)
^.1
"^DD",364.7,364.7,.05,1,1,0)
364.7^AINS1^MUMPS
"^DD",364.7,364.7,.05,1,1,1)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3) I Z1,$P(Z0,U,6)="" S ^IBA(364.7,"AINS",Z1,$E(X,1,30),DA)=""
"^DD",364.7,364.7,.05,1,1,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,6) K ^IBA(364.7,"AINS",Z1,$E(X,1,30),DA) I Z2'="",$D(^IBA(364.7,"AINTYP",Z1,X,Z2,DA)) S ^IBA(364.7,"ATYPE",Z1,Z2,DA)=""
"^DD",364.7,364.7,.05,1,1,3)
DO NOT DELETE
"^DD",364.7,364.7,.05,1,1,"%D",0)
^^1^1^2960118^
"^DD",364.7,364.7,.05,1,1,"%D",1,0)
Xref by form field and insurance company.
"^DD",364.7,364.7,.05,1,1,"DT")
2960118
"^DD",364.7,364.7,.05,1,2,0)
364.7^AINTYP1^MUMPS
"^DD",364.7,364.7,.05,1,2,1)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,6) I Z1,Z2'="" S ^IBA(364.7,"AINTYP",Z1,$E(X,1,30),Z2,DA)="" K ^IBA(364.7,"ATYPE",Z1,Z2,DA),^IBA(364.7,"AINS",Z1,X,DA)
"^DD",364.7,364.7,.05,1,2,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,6) K:Z1&(Z2'="") ^IBA(364.7,"AINTYP",Z1,$E(X,1,30),Z2,DA)
"^DD",364.7,364.7,.05,1,2,3)
DO NOT DELETE
"^DD",364.7,364.7,.05,1,2,"%D",0)
^^1^1^2960117^^^^
"^DD",364.7,364.7,.05,1,2,"%D",1,0)
Xref by insurance company and bill type
"^DD",364.7,364.7,.05,1,2,"DT")
2960117
"^DD",364.7,364.7,.05,3)
Enter the name of the insurance company that this field is associated with.
"^DD",364.7,364.7,.05,21,0)
^^2^2^2951207^
"^DD",364.7,364.7,.05,21,1,0)
This is the insurance company who has a need for other than the standard
"^DD",364.7,364.7,.05,21,2,0)
data in this field.
"^DD",364.7,364.7,.05,"DT")
3000428
"^DD",364.7,364.7,.06,0)
BILL TYPE^S^I:INPATIENT;O:OUTPATIENT;^0;6^Q
"^DD",364.7,364.7,.06,1,0)
^.1
"^DD",364.7,364.7,.06,1,1,0)
364.7^ATYPE1^MUMPS
"^DD",364.7,364.7,.06,1,1,1)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3) I Z1,'$P(Z0,U,5) S ^IBA(364.7,"ATYPE",Z1,$E(X,1,30),DA)=""
"^DD",364.7,364.7,.06,1,1,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,5) I Z1 K ^IBA(364.7,"ATYPE",Z1,$E(X,1,30),DA) I Z2,$D(^IBA(364.7,"AINTYP",Z1,Z2,X,DA)) S ^IBA(364.7,"AINS",Z1,Z2,DA)=""
"^DD",364.7,364.7,.06,1,1,3)
DO NOT DELETE
"^DD",364.7,364.7,.06,1,1,"%D",0)
^^1^1^2960117^^
"^DD",364.7,364.7,.06,1,1,"%D",1,0)
Xref by form and bill type.
"^DD",364.7,364.7,.06,1,1,"DT")
2960117
"^DD",364.7,364.7,.06,1,2,0)
364.7^AINTYP2^MUMPS
"^DD",364.7,364.7,.06,1,2,1)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,5) I Z1,Z2 K:'$D(^IBA(364.7,"AINTYP",Z1,Z2,X,DA)) ^IBA(364.7,"AINS",Z1,Z2,DA) S ^IBA(364.7,"AINTYP",Z1,Z2,$E(X,1,30),DA)=""
"^DD",364.7,364.7,.06,1,2,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,5) K:Z1&Z2 ^IBA(364.7,"AINTYP",Z1,Z2,$E(X,1,30),DA)
"^DD",364.7,364.7,.06,1,2,3)
DO NOT DELETE
"^DD",364.7,364.7,.06,1,2,"%D",0)
^^1^1^2960117^^^^
"^DD",364.7,364.7,.06,1,2,"%D",1,0)
Xref by form, insurance company and bill type
"^DD",364.7,364.7,.06,1,2,"DT")
2960117
"^DD",364.7,364.7,.06,3)
Enter the type of the bill.
"^DD",364.7,364.7,.06,21,0)
^^1^1^2960117^^
"^DD",364.7,364.7,.06,21,1,0)
This is the type of bill that requires this field.
"^DD",364.7,364.7,.06,"DT")
3000428
"^DD",364.7,364.7,.07,0)
PAD CHARACTER^S^ZL:ZERO PAD ON LEFT;ZR:ZERO PAD ON RIGHT;SL:SPACE PAD ON LEFT;SR:SPACE PAD ON RIGHT;N:NO PAD REQUIRED;^0;7^Q
"^DD",364.7,364.7,.07,3)
Enter the code that corresponds to the format and pad character to use for the data output in this field.
"^DD",364.7,364.7,.07,21,0)
^^3^3^2960126^^
"^DD",364.7,364.7,.07,21,1,0)
If present, this defines the character to be used to pad the DATA
"^DD",364.7,364.7,.07,21,2,0)
ELEMENT to its desired length and the orientation of the padding characters
"^DD",364.7,364.7,.07,21,3,0)
to the left or right of the data.  The default is space pad to the right.
"^DD",364.7,364.7,.07,"DT")
2960126
"^DD",364.7,364.7,.08,0)
REQUIRED^S^0:NO;1:YES;^0;8^Q
"^DD",364.7,364.7,.08,3)
Enter 1 (YES) if this data element is on a local screen 9 form and the data is required for the bill to be authorized.
"^DD",364.7,364.7,.08,21,0)
^.001^4^4^3001030^^
"^DD",364.7,364.7,.08,21,1,0)
This field controls the required/not required status of a data element
"^DD",364.7,364.7,.08,21,2,0)
on a local screen 9 form.  If this field is 1 (YES), this data element
"^DD",364.7,364.7,.08,21,3,0)
is always required to have data (not null) in order for a bill to be
"^DD",364.7,364.7,.08,21,4,0)
authorized.
"^DD",364.7,364.7,.08,"DT")
2951207
"^DD",364.7,364.7,.09,0)
EDIT STATUS^S^E:EDITABLE;D:DISPLAY ONLY;^0;9^Q
"^DD",364.7,364.7,.09,3)
Enter 'E' to enable editing for this field, 'D' for a display only field.
"^DD",364.7,364.7,.09,21,0)
^^2^2^2960320^
"^DD",364.7,364.7,.09,21,1,0)
This field is used to control whether or not a data element on a screen is
"^DD",364.7,364.7,.09,21,2,0)
editable or for display-only purposes.
"^DD",364.7,364.7,.09,"DT")
2960320
"^DD",364.7,364.7,.1,0)
EDIT GROUP NUMBER^NJ2,0^^0;10^K:+X'=X!(X>99)!(X<1)!(X?.E1"."1N.N) X
"^DD",364.7,364.7,.1,3)
 Enter the edit group # that this field will be included in.  Valid #'s are 1-99.
"^DD",364.7,364.7,.1,21,0)
^^6^6^2960321^^
"^DD",364.7,364.7,.1,21,1,0)
This field contains the # of the edit group that the screen data element
"^DD",364.7,364.7,.1,21,2,0)
will be included with.  When this group # is selected on an edit screen,
"^DD",364.7,364.7,.1,21,3,0)
all data elements assigned to this group # on this screen will be presented
"^DD",364.7,364.7,.1,21,4,0)
for editing.  If no # is entered here, this field will not be available for
"^DD",364.7,364.7,.1,21,5,0)
editing.  This field will only apply to screen-type forms' editable data
"^DD",364.7,364.7,.1,21,6,0)
element descriptions.
"^DD",364.7,364.7,.1,"DT")
2960321
"^DD",364.7,364.7,1,0)
FORMAT CODE^K^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",364.7,364.7,1,3)
This is Standard MUMPS code.
"^DD",364.7,364.7,1,9)
@
"^DD",364.7,364.7,1,21,0)
^^8^8^2951207^
"^DD",364.7,364.7,1,21,1,0)
This is the code that will be xecuted to format the 'raw' data element
"^DD",364.7,364.7,1,21,2,0)
value that is returned from the execution of the DATA ELEMENT's definition.
"^DD",364.7,364.7,1,21,3,0)
This code can assume the variable/array IBXDATA is available as input and
"^DD",364.7,364.7,1,21,4,0)
should set this variable/array as its output.  Standard calls for data
"^DD",364.7,364.7,1,21,5,0)
formatting have been provided.  The variables IBXPG, IBXLN, IBXCOL are the
"^DD",364.7,364.7,1,21,6,0)
only IBX* variables that should be changed in this routine.  These represent
"^DD",364.7,364.7,1,21,7,0)
the page, line, column as the first 3 levels of subscript for the output
"^DD",364.7,364.7,1,21,8,0)
array.
"^DD",364.7,364.7,1,"DT")
2951207
"^DD",364.7,364.7,3,0)
FORMAT CODE DESCRIPTION^364.73^^3;0
"^DD",364.7,364.7,3,21,0)
^.001^1^1^3010102^^
"^DD",364.7,364.7,3,21,1,0)
This field describes the function of the format code entered.
"^DD",364.7,364.7,3,"DT")
2960710
"^DD",364.7,364.73,0)
FORMAT CODE DESCRIPTION SUB-FIELD^^.01^1
"^DD",364.7,364.73,0,"DT")
2960710
"^DD",364.7,364.73,0,"NM","FORMAT CODE DESCRIPTION")
 
"^DD",364.7,364.73,0,"UP")
364.7
"^DD",364.7,364.73,.01,0)
FORMAT CODE DESCRIPTION^W^^0;1^Q
"^DD",364.7,364.73,.01,3)
Enter a description of the processing logic of the format code.
"^DD",364.7,364.73,.01,21,0)
^.001^1^1^3010102^^^^
"^DD",364.7,364.73,.01,21,1,0)
This is a description of the processing logic of the format code.
"^DD",364.7,364.73,.01,"DT")
2960710
"^DD",399,399,.19,0)
FORM TYPE^R*P353'^IBE(353,^0;19^S DIC("S")="I $$FTINPUT^IBCU9(Y)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",399,399,.19,1,0)
^.1
"^DD",399,399,.19,1,1,0)
^^TRIGGER^399^.09
"^DD",399,399,.19,1,1,1)
X ^DD(399,.19,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,0)):^(0),1:"") S X=$P(Y(1),U,9),X=X S DIU=X K Y S X=DIV S X=5 S DIH=$G(^DGCR(399,DIV(0),0)),DIV=X S $P(^(0),U,9)=DIV,DIH=399,DIG=.09 D ^DICR
"^DD",399,399,.19,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(399,.19,1,1,69.2) S X=$P($P(Y(3),$C(59)_$P(Y(2),U,9)_":",2),$C(59))="",Y=X,X=Y(1),X=X&Y
"^DD",399,399,.19,1,1,2)
Q
"^DD",399,399,.19,1,1,69.2)
S Y(3)=$C(59)_$P($G(^DD(399,.09,0)),U,3),Y(2)=$S($D(^DGCR(399,D0,0)):^(0),1:"") S X=$P($G(^IBE(353,+Y(0),0)),U)="CMS-1500",Y(1)=$G(X)
"^DD",399,399,.19,1,1,"%D",0)
^.101^2^2^3171115^^^
"^DD",399,399,.19,1,1,"%D",1,0)
If the CMS-1500 claim form is used and no coding method defined, then set
"^DD",399,399,.19,1,1,"%D",2,0)
coding method to HCPCS
"^DD",399,399,.19,1,1,"CREATE CONDITION")
FORM TYPE="CMS-1500"&(PROCEDURE CODING METHOD="")
"^DD",399,399,.19,1,1,"CREATE VALUE")
S X=5
"^DD",399,399,.19,1,1,"DELETE VALUE")
NO EFFECT
"^DD",399,399,.19,1,1,"DT")
3060928
"^DD",399,399,.19,1,1,"FIELD")
PROCEDURE CODING METHOD
"^DD",399,399,.19,1,2,0)
399^AREV7^MUMPS
"^DD",399,399,.19,1,2,1)
S DGRVRCAL=1
"^DD",399,399,.19,1,2,2)
S DGRVRCAL=2
"^DD",399,399,.19,1,2,3)
DO NOT DELETE
"^DD",399,399,.19,1,2,"%D",0)
^.101^2^2^3171115^^
"^DD",399,399,.19,1,2,"%D",1,0)
Variable causes revenue codes and chrges to be re-calculated on return
"^DD",399,399,.19,1,2,"%D",2,0)
to the enter/edit billing screens.
"^DD",399,399,.19,1,2,"DT")
2920428
"^DD",399,399,.19,1,3,0)
399^AH^MUMPS
"^DD",399,399,.19,1,3,1)
D ALLID^IBCEP3(DA,.19,1)
"^DD",399,399,.19,1,3,2)
D ALLID^IBCEP3(DA,.19,2)
"^DD",399,399,.19,1,3,3)
Do not delete
"^DD",399,399,.19,1,3,"%D",0)
^.101^3^3^3171115^^^^
"^DD",399,399,.19,1,3,"%D",1,0)
This cross reference determines if the change of form type requires the
"^DD",399,399,.19,1,3,"%D",2,0)
provider id's to be updated or deleted.  If it does, the update/deletion
"^DD",399,399,.19,1,3,"%D",3,0)
is performed for the claim.
"^DD",399,399,.19,1,3,"DT")
3000926
"^DD",399,399,.19,1,4,0)
^^TRIGGER^399^140
"^DD",399,399,.19,1,4,1)
Q
"^DD",399,399,.19,1,4,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DGCR(399,D0,"M2")):^("M2"),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y S X="" S DIH=$G(^DGCR(399,DIV(0),"M2")),DIV=X S $P(^("M2"),U,1)=DIV,DIH=399,DIG=140 D ^DICR
"^DD",399,399,.19,1,4,"%D",0)
^.101^2^2^3171115^^
"^DD",399,399,.19,1,4,"%D",1,0)
This trigger removes PRIMARY PAYER-ALT ID TYPE when Form Type is changed 
"^DD",399,399,.19,1,4,"%D",2,0)
since ID Type is dependent on FORM TYPE.
"^DD",399,399,.19,1,4,"CREATE VALUE")
NO EFFECT
"^DD",399,399,.19,1,4,"DELETE VALUE")
@
"^DD",399,399,.19,1,4,"DT")
3151112
"^DD",399,399,.19,1,4,"FIELD")
PRIMARY PAYER-ALT ID TYPE
"^DD",399,399,.19,1,5,0)
399^AJ^MUMPS
"^DD",399,399,.19,1,5,1)
D ATTREND^IBCU1(DA,"","")
"^DD",399,399,.19,1,5,2)
D ATTREND^IBCU1(DA,"","")
"^DD",399,399,.19,1,5,3)
Do Not Delete
"^DD",399,399,.19,1,5,"%D",0)
^.101^14^14^3171115^^^^
"^DD",399,399,.19,1,5,"%D",1,0)
This Mumps cross reference is used to potentially trigger 6 other fields 
"^DD",399,399,.19,1,5,"%D",2,0)
in file 399.  The fields are triggered when the insurance companies in the
"^DD",399,399,.19,1,5,"%D",3,0)
claim have flags set to use the attending or rendering physicians as the 
"^DD",399,399,.19,1,5,"%D",4,0)
billing provider secondary IDs.  The flags in file 36 are field #4.06 
"^DD",399,399,.19,1,5,"%D",5,0)
(ATT/REND ID BILL SEC ID PROF) and field 4.08 (ATT/REND ID BILL SEC ID 
"^DD",399,399,.19,1,5,"%D",6,0)
INST).
"^DD",399,399,.19,1,5,"%D",7,0)
 
"^DD",399,399,.19,1,5,"%D",8,0)
The following fields are the ones being "triggered":
"^DD",399,399,.19,1,5,"%D",9,0)
#122 PRIMARY PROVIDER #
"^DD",399,399,.19,1,5,"%D",10,0)
#123 SECONDARY PROVIDER #
"^DD",399,399,.19,1,5,"%D",11,0)
#124 TERTIARY PROVIDER #
"^DD",399,399,.19,1,5,"%D",12,0)
#128 PRIMARY ID QUALIFER
"^DD",399,399,.19,1,5,"%D",13,0)
#129 SECONDARY ID QUALIFIER
"^DD",399,399,.19,1,5,"%D",14,0)
#130 TERTIARY ID QUALIFIER 
"^DD",399,399,.19,1,5,"DT")
3060508
"^DD",399,399,.19,1,6,0)
^^TRIGGER^399^141
"^DD",399,399,.19,1,6,1)
Q
"^DD",399,399,.19,1,6,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DGCR(399,D0,"M2")):^("M2"),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X="" S DIH=$G(^DGCR(399,DIV(0),"M2")),DIV=X S $P(^("M2"),U,2)=DIV,DIH=399,DIG=141 D ^DICR
"^DD",399,399,.19,1,6,"%D",0)
^^2^2^3151118^
"^DD",399,399,.19,1,6,"%D",1,0)
This trigger removes PRIMARY PAYER-ALT ID when Form Type is changed 
"^DD",399,399,.19,1,6,"%D",2,0)
since ID is dependent on FORM TYPE.
"^DD",399,399,.19,1,6,"CREATE VALUE")
NO EFFECT
"^DD",399,399,.19,1,6,"DELETE VALUE")
@
"^DD",399,399,.19,1,6,"DT")
3151112
"^DD",399,399,.19,1,6,"FIELD")
PRIMARY PAYER-ALT ID
"^DD",399,399,.19,1,7,0)
^^TRIGGER^399^142
"^DD",399,399,.19,1,7,1)
Q
"^DD",399,399,.19,1,7,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DGCR(399,D0,"M2")):^("M2"),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" S DIH=$G(^DGCR(399,DIV(0),"M2")),DIV=X S $P(^("M2"),U,3)=DIV,DIH=399,DIG=142 D ^DICR
"^DD",399,399,.19,1,7,"%D",0)
^.101^2^2^3171115^^
"^DD",399,399,.19,1,7,"%D",1,0)
This trigger removes SECONDARY PAYER-ALT ID TYPE when Form Type is
"^DD",399,399,.19,1,7,"%D",2,0)
changed since ID Type is dependent on FORM TYPE.
"^DD",399,399,.19,1,7,"CREATE VALUE")
NO EFFECT
"^DD",399,399,.19,1,7,"DELETE VALUE")
@
"^DD",399,399,.19,1,7,"DT")
3151112
"^DD",399,399,.19,1,7,"FIELD")
SECONDARY PAYER-ALT ID TYPE
"^DD",399,399,.19,1,8,0)
^^TRIGGER^399^143
"^DD",399,399,.19,1,8,1)
Q
"^DD",399,399,.19,1,8,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DGCR(399,D0,"M2")):^("M2"),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X="" S DIH=$G(^DGCR(399,DIV(0),"M2")),DIV=X S $P(^("M2"),U,4)=DIV,DIH=399,DIG=143 D ^DICR
"^DD",399,399,.19,1,8,"%D",0)
^.101^2^2^3171115^^
"^DD",399,399,.19,1,8,"%D",1,0)
This trigger removes SECONDARY PAYER-ALT ID when Form Type is changed
"^DD",399,399,.19,1,8,"%D",2,0)
since ID is dependent on FORM TYPE.
"^DD",399,399,.19,1,8,"CREATE VALUE")
NO EFFECT
"^DD",399,399,.19,1,8,"DELETE VALUE")
@
"^DD",399,399,.19,1,8,"DT")
3151112
"^DD",399,399,.19,1,8,"FIELD")
SECONDARY PAYER-ALT ID
"^DD",399,399,.19,1,9,0)
^^TRIGGER^399^144
"^DD",399,399,.19,1,9,1)
Q
"^DD",399,399,.19,1,9,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DGCR(399,D0,"M2")):^("M2"),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X="" S DIH=$G(^DGCR(399,DIV(0),"M2")),DIV=X S $P(^("M2"),U,5)=DIV,DIH=399,DIG=144 D ^DICR
"^DD",399,399,.19,1,9,"%D",0)
^.101^2^2^3171115^^
"^DD",399,399,.19,1,9,"%D",1,0)
This trigger removes TERTIARY PAYER-ALT ID TYPE when Form Type is changed 
"^DD",399,399,.19,1,9,"%D",2,0)
since ID Type is dependent on FORM TYPE.
"^DD",399,399,.19,1,9,"CREATE VALUE")
NO EFFECT
"^DD",399,399,.19,1,9,"DELETE VALUE")
@
"^DD",399,399,.19,1,9,"DT")
3151112
"^DD",399,399,.19,1,9,"FIELD")
TERTIARY PAYER-ALT ID TYPE
"^DD",399,399,.19,1,10,0)
^^TRIGGER^399^145
"^DD",399,399,.19,1,10,1)
Q
"^DD",399,399,.19,1,10,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DGCR(399,D0,"M2")):^("M2"),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" S DIH=$G(^DGCR(399,DIV(0),"M2")),DIV=X S $P(^("M2"),U,6)=DIV,DIH=399,DIG=145 D ^DICR
"^DD",399,399,.19,1,10,"%D",0)
^.101^2^2^3171115^^
"^DD",399,399,.19,1,10,"%D",1,0)
This trigger removes TERTIARY PAYER-ALT ID when Form Type is changed 
"^DD",399,399,.19,1,10,"%D",2,0)
since ID is dependent on FORM TYPE.
"^DD",399,399,.19,1,10,"CREATE VALUE")
NO EFFECT
"^DD",399,399,.19,1,10,"DELETE VALUE")
@
"^DD",399,399,.19,1,10,"DT")
3151112
"^DD",399,399,.19,1,10,"FIELD")
TERTIARY PAYER-ALT ID
"^DD",399,399,.19,3)
Enter the type of claim form to be used.
"^DD",399,399,.19,5,1,0)
399^.01^7
"^DD",399,399,.19,5,2,0)
399^.27^1
"^DD",399,399,.19,12)
Must be a printable national form type.
"^DD",399,399,.19,12.1)
S DIC("S")="I $$FTINPUT^IBCU9(Y)"
"^DD",399,399,.19,21,0)
^.001^1^1^3171115^^^^
"^DD",399,399,.19,21,1,0)
Select the form type on which to print the bill.
"^DD",399,399,.19,23,0)
^.001^1^1^3171115^^^^
"^DD",399,399,.19,23,1,0)
Critical that this field either be a 2, 3, or a 7.
"^DD",399,399,.19,"DT")
3171115
"^DD",399,399,41,0)
OCCURRENCE CODE^399.041IPA^^OC;0
"^DD",399,399,41,12)
Valid MCCR Occurrence Codes only!
"^DD",399,399,41,12.1)
S DIC("S")="I $D(^DGCR(399.1,+Y,0)) I $P(^DGCR(399.1,+Y,0),""^"",4)=1 X ^DD(399.041,9.1)"
"^DD",399,399,41,21,0)
^.001^2^2^3171212^^^^
"^DD",399,399,41,21,1,0)
This identifies the significant event(s) relating to this bill that may
"^DD",399,399,41,21,2,0)
affect payer processing.
"^DD",399,399,92,0)
BANDING DATE^D^^DEN;1^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",399,399,92,3)
Enter the date the patient's orthodontic appliances were placed.
"^DD",399,399,92,21,0)
^.001^1^1^3170628^^^^
"^DD",399,399,92,21,1,0)
This is the date the patient's orthodontic appliances were placed.
"^DD",399,399,92,"DT")
3170628
"^DD",399,399,93,0)
TREATMENT MONTHS COUNT^NJ15,0^^DEN;2^K:+X'=X!(X>999999999999999)!(X<0)!(X?.E1"."1N.N) X
"^DD",399,399,93,3)
Enter the estimated number of treatment months in whole numbers.
"^DD",399,399,93,21,0)
^.001^1^1^3170628^^^
"^DD",399,399,93,21,1,0)
This is the estimated number of treatment months.
"^DD",399,399,93,"DT")
3170628
"^DD",399,399,94,0)
TREATMENT MONTHS REMAINING^NJ15,0^^DEN;3^K:+X'=X!(X>999999999999999)!(X<0)!(X?.E1"."1N.N) X
"^DD",399,399,94,3)
Enter the number of months remaining required for a transfer patient, in whole numbers.
"^DD",399,399,94,21,0)
^.001^1^1^3170628^^
"^DD",399,399,94,21,1,0)
This is the number of months remaining required for a transfer patient.
"^DD",399,399,94,"DT")
3170628
"^DD",399,399,95,0)
TREATMENT INDICATOR^S^1:YES;^DEN;4^Q
"^DD",399,399,95,3)
Enter 'YES' if services reported on this claim are for orthodontic purposes.  Otherwise, leave blank.  REQUIRED when neither Treatment Months nor Treatment Months Remaining are present.
"^DD",399,399,95,21,0)
^.001^3^3^3170905^^^^
"^DD",399,399,95,21,1,0)
This field indicates that services reported on this claim are for 
"^DD",399,399,95,21,2,0)
orthodontic purposes.  REQUIRED when neither Treatment Months nor 
"^DD",399,399,95,21,3,0)
Treatment Months Remaining are present.
"^DD",399,399,95,"DT")
3170905
"^DD",399,399,96,0)
TOOTH NUMBER^399.096IA^^DEN1;0
"^DD",399,399,96,21,0)
^.001^2^2^3171128^^^^
"^DD",399,399,96,21,1,0)
This is a multiple field defining the teeth that the dental services were 
"^DD",399,399,96,21,2,0)
related to.
"^DD",399,399,96,"DT")
3170901
"^DD",399,399,97,0)
DENTAL CLAIM NOTE^FJ80^^DEN2;1^K:$L(X)>80!($L(X)<1) X
"^DD",399,399,97,3)
Enter information that is needed to substantiate the medical treatment, 1 to 80 characters.
"^DD",399,399,97,21,0)
^.001^2^2^3170628^^
"^DD",399,399,97,21,1,0)
This is an 80 character free text field to allow for the entry of 
"^DD",399,399,97,21,2,0)
information that is needed to substantiate medical treatment.
"^DD",399,399,97,"DT")
3170628
"^DD",399,399,222,0)
PROVIDER^399.0222ISA^^PRV;0
"^DD",399,399,222,12)
Rendering is for prof only.  Operating/Attending are for inst only.
"^DD",399,399,222,12.1)
S DIC("S")="I $$PRVOK^IBCEU(+Y,$S($D(D0):D0,1:$G(DA)))"
"^DD",399,399,222,"DT")
3010426
"^DD",399,399,285,0)
ATTACHMENT REPORT TYPE^*P353.3'^IBE(353.3,^U8;2^S DIC("S")="I $$RTYPOK^IBCEU(X,DA)" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",399,399,285,3)
Select an Attachment Report Type.
"^DD",399,399,285,12)
Form types have different valid Attachment Report Types
"^DD",399,399,285,12.1)
S DIC("S")="I $$RTYPOK^IBCEU(X,DA)"
"^DD",399,399,285,21,0)
^.001^3^3^3170406^^^^
"^DD",399,399,285,21,1,0)
This is a Report Type to describe the type of documentation that
"^DD",399,399,285,21,2,0)
will provide additional information for this claim.  This
"^DD",399,399,285,21,3,0)
applies to the entire claim.
"^DD",399,399,285,"DT")
3170406
"^DD",399,399.0222,0)
PROVIDER SUB-FIELD^^1.03^18
"^DD",399,399.0222,0,"NM","PROVIDER")

"^DD",399,399.0222,.01,0)
FUNCTION^MR*SX^1:REFERRING;2:OPERATING;3:RENDERING;4:ATTENDING;5:SUPERVISING;9:OTHER OPERATING;6:ASSISTANT SURGEON;^0;1^Q
"^DD",399,399.0222,.01,1,0)
^.1^^-1
"^DD",399,399.0222,.01,1,1,0)
399.0222^B
"^DD",399,399.0222,.01,1,1,1)
S ^DGCR(399,DA(1),"PRV","B",$E(X,1,30),DA)=""
"^DD",399,399.0222,.01,1,1,2)
K ^DGCR(399,DA(1),"PRV","B",$E(X,1,30),DA)
"^DD",399,399.0222,.01,1,1,"DT")
3000103
"^DD",399,399.0222,.01,1,2,0)
^^TRIGGER^399.0222^.04
"^DD",399,399.0222,.01,1,2,1)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S X=Y(0),X=X S X=X'=1 I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,"PRV",D1,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X="" X ^DD(399.0222,.01,1,2,1.4)
"^DD",399,399.0222,.01,1,2,1.4)
S DIH=$S($D(^DGCR(399,DIV(0),"PRV",DIV(1),0)):^(0),1:""),DIV=X S $P(^(0),U,4)=DIV,DIH=399.0222,DIG=.04 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",399,399.0222,.01,1,2,2)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(1)=$S($D(^DGCR(399,D0,"PRV",D1,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X="" X ^DD(399.0222,.01,1,2,2.4)
"^DD",399,399.0222,.01,1,2,2.4)
S DIH=$S($D(^DGCR(399,DIV(0),"PRV",DIV(1),0)):^(0),1:""),DIV=X S $P(^(0),U,4)=DIV,DIH=399.0222,DIG=.04 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",399,399.0222,.01,1,2,3)
Do not delete
"^DD",399,399.0222,.01,1,2,"%D",0)
^.101^2^2^3100908^^^^
"^DD",399,399.0222,.01,1,2,"%D",1,0)
This xref is used to delete the state field if the provider is not a
"^DD",399,399.0222,.01,1,2,"%D",2,0)
referring provider function type.
"^DD",399,399.0222,.01,1,2,"CREATE CONDITION")
INTERNAL(PROVIDER FUNCTION)'=1
"^DD",399,399.0222,.01,1,2,"CREATE VALUE")
@
"^DD",399,399.0222,.01,1,2,"DELETE VALUE")
@
"^DD",399,399.0222,.01,1,2,"DT")
2990513
"^DD",399,399.0222,.01,1,2,"FIELD")
PROVIDER STATE
"^DD",399,399.0222,.01,1,3,0)
399.0222^C^MUMPS
"^DD",399,399.0222,.01,1,3,1)
S ^DGCR(399,DA(1),"PRV","C",$E($$EXTERNAL^DILFD(399.0222,.01,,X),1,30),DA)=""
"^DD",399,399.0222,.01,1,3,2)
K ^DGCR(399,DA(1),"PRV","C",$E($$EXTERNAL^DILFD(399.0222,.01,,X),1,30),DA)
"^DD",399,399.0222,.01,1,3,"DT")
2991221
"^DD",399,399.0222,.01,1,4,0)
399.0222^CA^MUMPS
"^DD",399,399.0222,.01,1,4,1)
S ^DGCR(399,DA(1),"PRV","C",$$LOW^XLFSTR($E($$EXTERNAL^DILFD(399.0222,.01,,X),1,30)),DA)=""
"^DD",399,399.0222,.01,1,4,2)
K ^DGCR(399,DA(1),"PRV","C",$$LOW^XLFSTR($E($$EXTERNAL^DILFD(399.0222,.01,,X),1,30)),DA)
"^DD",399,399.0222,.01,1,4,"DT")
3000329
"^DD",399,399.0222,.01,3)
Select the function performed by a provider for this bill.
"^DD",399,399.0222,.01,4)
D PRVHELP^IBCEU5
"^DD",399,399.0222,.01,7.5)
S X=$$UP^XLFSTR(X)
"^DD",399,399.0222,.01,12)
Function must match bill form type.  Use '??' to see the function definitions.
"^DD",399,399.0222,.01,12.1)
S DIC("S")="I $$PRVOK^IBCEU(+Y,$S($G(D0):D0,1:$G(DA)))"
"^DD",399,399.0222,.01,21,0)
^.001^8^8^3171005^^^^
"^DD",399,399.0222,.01,21,1,0)
 
"^DD",399,399.0222,.01,21,2,0)
There are providers who performed specific functions for the
"^DD",399,399.0222,.01,21,3,0)
services on this bill.  These providers are needed to enable the V.A.
"^DD",399,399.0222,.01,21,4,0)
to collect reimbursement when more than one provider function is
"^DD",399,399.0222,.01,21,5,0)
involved in the billable episode (like an operating physician or
"^DD",399,399.0222,.01,21,6,0)
referring provider).  This data identifies the type of function that
"^DD",399,399.0222,.01,21,7,0)
was performed by a provider. There can only be 1 provider recorded
"^DD",399,399.0222,.01,21,8,0)
for each function on a claim.
"^DD",399,399.0222,.01,"DT")
3171005
"^DD",399,399.0304,60,0)
LINE PROVIDER^399.0404IS^^LNPRV;0
"^DD",399,399.0304,60,21,0)
^.001^2^2^3180326^^^^
"^DD",399,399.0304,60,21,1,0)
These are the providers who performed specific functions for the services
"^DD",399,399.0304,60,21,2,0)
on this claim line.
"^DD",399,399.0304,90.01,0)
ORAL CAVITY DESIGNATION (1)^*S^00:Entire Oral Cavity;01:Maxillary Arch;02:Mandibular Arch;10:Upper Right Quadrant;20:Upper Left Quadrant;30:Lower Left Quadrant;40:Lower Right Quadrant;^DEN;1^Q
"^DD",399,399.0304,90.01,3)
Enter a valid Cavity Designation code.  The entered code must not already be present in Oral Cavity Designations #2, #3, #4 or #5.
"^DD",399,399.0304,90.01,12)
Only allows Oral Cavity Designation Codes that are not already present in Oral Cavity Designations #2, #3, #4 or #5.
"^DD",399,399.0304,90.01,12.1)
S DIC("S")="I $$ORALCAV^IBCU7(90.01)"
"^DD",399,399.0304,90.01,21,0)
^.001^1^1^3170412^^^^
"^DD",399,399.0304,90.01,21,1,0)
The first Oral Cavity Designation code.  You can enter up to five codes.
"^DD",399,399.0304,90.01,"DT")
3170302
"^DD",399,399.0304,90.02,0)
ORAL CAVITY DESIGNATION (2)^*S^00:Entire Oral Cavity;01:Maxillary Arch;02:Mandibular Arch;10:Upper Right Quadrant;20:Upper Left Quadrant;30:Lower Left Quadrant;40:Lower Right Quadrant;^DEN;2^Q
"^DD",399,399.0304,90.02,3)
Enter a valid Oral Cavity Designation Code.  The entered code must not already be present in Oral Cavity Designations #1, #3, #4 or #5.
"^DD",399,399.0304,90.02,12)
Only allows Oral Cavity Designation Codes that are not already present in Oral Cavity Designations #1, #3, #4 or #5.
"^DD",399,399.0304,90.02,12.1)
S DIC("S")="I $$ORALCAV^IBCU7(90.02)"
"^DD",399,399.0304,90.02,21,0)
^.001^1^1^3170302^^^^
"^DD",399,399.0304,90.02,21,1,0)
The second Oral Cavity Designation code.  You can enter up to five codes.
"^DD",399,399.0304,90.02,"DT")
3170302
"^DD",399,399.0304,90.03,0)
ORAL CAVITY DESIGNATION (3)^*S^00:Entire Oral Cavity;01:Maxillary Arch;02:Mandibular Arch;10:Upper Right Quadrant;20:Upper Left Quadrant;30:Lower Left Quadrant;40:Lower Right Quadrant;^DEN;3^Q
"^DD",399,399.0304,90.03,3)
Enter a valid Oral Cavity Designation Code.  The entered code must not already be present in Oral Cavity Designations #1, #2, #4 or #5.
"^DD",399,399.0304,90.03,12)
Only allows Oral Cavity Designation Codes that are not already present in Oral Cavity Designations #1, #2, #4 or #5.
"^DD",399,399.0304,90.03,12.1)
S DIC("S")="I $$ORALCAV^IBCU7(90.03)"
"^DD",399,399.0304,90.03,21,0)
^.001^1^1^3170302^^^^
"^DD",399,399.0304,90.03,21,1,0)
The third Oral Cavity Designation code.  You can enter up to five codes.
"^DD",399,399.0304,90.03,"DT")
3170302
"^DD",399,399.0304,90.04,0)
ORAL CAVITY DESIGNATION (4)^*S^00:Entire Oral Cavity;01:Maxillary Arch;02:Mandibular Arch;10:Upper Right Quadrant;20:Upper Left Quadrant;30:Lower Left Quadrant;40:Lower Right Quadrant;^DEN;4^Q
"^DD",399,399.0304,90.04,3)
Enter a valid Oral Cavity Designation code.  The entered code must not already be present in Oral Cavity Designations #1, #2, #3 or #5.
"^DD",399,399.0304,90.04,12)
Only allows Oral Cavity Designation Codes that are not already present in Oral Cavity Designations #1, #2, #3 or #5.
"^DD",399,399.0304,90.04,12.1)
S DIC("S")="I $$ORALCAV^IBCU7(90.04)"
"^DD",399,399.0304,90.04,21,0)
^.001^1^1^3170302^^^^
"^DD",399,399.0304,90.04,21,1,0)
The fourth Oral Cavity Designation code.  You can enter up to five codes.
"^DD",399,399.0304,90.04,"DT")
3170302
"^DD",399,399.0304,90.05,0)
ORAL CAVITY DESIGNATION (5)^*S^00:Entire Oral Cavity;01:Maxillary Arch;02:Mandibular Arch;10:Upper Right Quadrant;20:Upper Left Quadrant;30:Lower Left Quadrant;40:Lower Right Quadrant;^DEN;5^Q
"^DD",399,399.0304,90.05,3)
Enter a valid Oral Cavity Designation code.  The entered code must not already be present in Oral Cavity Designations #1, #2, #3 or #4.
"^DD",399,399.0304,90.05,12)
Only allows Oral Cavity Designation Codes that are not already present in Oral Cavity Designations #1, #2, #3 and #4.
"^DD",399,399.0304,90.05,12.1)
S DIC("S")="I $$ORALCAV^IBCU7(90.05)"
"^DD",399,399.0304,90.05,21,0)
^.001^1^1^3170302^^^^
"^DD",399,399.0304,90.05,21,1,0)
The fifth Oral Cavity Designation code.  You can enter up to five codes.
"^DD",399,399.0304,90.05,"DT")
3170302
"^DD",399,399.0304,90.06,0)
PROSTHESIS/CROWN/INLAY CODE^S^I:Initial Placement;R:Replacement;^DEN;6^Q
"^DD",399,399.0304,90.06,3)
Select a code that indicates the placement status of the prosthesis, crown or inlay.
"^DD",399,399.0304,90.06,21,0)
^.001^1^1^3170628^^^
"^DD",399,399.0304,90.06,21,1,0)
This code indicates the placement status of the prosthesis.
"^DD",399,399.0304,90.06,"DT")
3170628
"^DD",399,399.0304,90.07,0)
PRIOR PLACEMENT DATE QUALIFIER^S^139:Estimated;441:Prior Placement;^DEN;7^Q
"^DD",399,399.0304,90.07,3)
Select a qualifier that indicates whether or not the Prior Placement Date is known or just estimated.
"^DD",399,399.0304,90.07,21,0)
^.001^2^2^3170628^^^
"^DD",399,399.0304,90.07,21,1,0)
This qualifier indicates whether or not the Prior Placement Date is 
"^DD",399,399.0304,90.07,21,2,0)
known or just estimated.
"^DD",399,399.0304,90.07,"DT")
3170614
"^DD",399,399.0304,90.08,0)
PRIOR PLACEMENT DATE^D^^DEN;8^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",399,399.0304,90.08,3)
Enter the date when the prosthesis, crown or inlay was replaced.  Date is REQUIRED when Prosthesis/Crown/Inlay code equals Replacement.
"^DD",399,399.0304,90.08,21,0)
^.001^3^3^3170628^^^^
"^DD",399,399.0304,90.08,21,1,0)
This is the date when a prosthesis, crown or inlay was replaced.  Date is 
"^DD",399,399.0304,90.08,21,2,0)
REQUIRED when Prosthesis/Crown/Inlay code equals Replacement.
"^DD",399,399.0304,90.08,21,3,0)
replaced.
"^DD",399,399.0304,90.08,"DT")
3170614
"^DD",399,399.0304,90.09,0)
ORTHODONTIC BANDING DATE^D^^DEN;9^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",399,399.0304,90.09,3)
Enter the date the patient's orthodontic appliances were placed if different from the claim level date.
"^DD",399,399.0304,90.09,21,0)
^.001^2^2^3170628^^^
"^DD",399,399.0304,90.09,21,1,0)
This is the date the patient's orthodontic appliances were placed if 
"^DD",399,399.0304,90.09,21,2,0)
different from the claim level date.
"^DD",399,399.0304,90.09,"DT")
3170628
"^DD",399,399.0304,90.1,0)
ORTHO BANDING REPLACEMENT DATE^D^^DEN;10^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",399,399.0304,90.1,3)
Enter the date the patient's orthodontic appliances were replaced.
"^DD",399,399.0304,90.1,21,0)
^.001^1^1^3170628^^
"^DD",399,399.0304,90.1,21,1,0)
This is the date the patient's orthodontic appliances were replaced.
"^DD",399,399.0304,90.1,"DT")
3170628
"^DD",399,399.0304,90.11,0)
TREATMENT START DATE^D^^DEN;11^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",399,399.0304,90.11,3)
Enter the date for initial impression or preparation for a crown or dentures or initial endodontic treatment or the implant fixture placement.
"^DD",399,399.0304,90.11,21,0)
^.001^2^2^3170628^^
"^DD",399,399.0304,90.11,21,1,0)
This is the date for initial impression or preparation for a crown or 
"^DD",399,399.0304,90.11,21,2,0)
dentures or initial endodontic treatment or the implant fixture placement.
"^DD",399,399.0304,90.11,"DT")
3170628
"^DD",399,399.0304,90.12,0)
TREATMENT COMPLETION DATE^D^^DEN;12^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",399,399.0304,90.12,3)
Enter the date that a course of treatment was completed.
"^DD",399,399.0304,90.12,21,0)
^.001^1^1^3170628^^
"^DD",399,399.0304,90.12,21,1,0)
This is the date that a course of treatment was completed.
"^DD",399,399.0304,90.12,"DT")
3170628
"^DD",399,399.0304,91,0)
TOOTH INFORMATION^399.30491PA^^DEN1;0
"^DD",399,399.0304,91,21,0)
^.001^1^1^3180731^^^^
"^DD",399,399.0304,91,21,1,0)
This multiple holds tooth information for the dental service line.
"^DD",399,399.0404,0)
LINE PROVIDER SUB-FIELD^^.14^12
"^DD",399,399.0404,0,"NM","LINE PROVIDER")

"^DD",399,399.0404,.01,0)
LINE FUNCTION^M*S^1:REFERRING;2:OPERATING;3:RENDERING;4:ATTENDING;5:SUPERVISING;9:OTHER OPERATING;6:ASSISTANT SURGEON;^0;1^Q
"^DD",399,399.0404,.01,1,0)
^.1^^-1
"^DD",399,399.0404,.01,1,1,0)
399.0404^B
"^DD",399,399.0404,.01,1,1,1)
S ^DGCR(399,DA(2),"CP",DA(1),"LNPRV","B",$E(X,1,30),DA)=""
"^DD",399,399.0404,.01,1,1,2)
K ^DGCR(399,DA(2),"CP",DA(1),"LNPRV","B",$E(X,1,30),DA)
"^DD",399,399.0404,.01,1,2,0)
^^TRIGGER^399.0404^.04
"^DD",399,399.0404,.01,1,2,1)
K DIV S DIV=X,D0=DA(2),DIV(0)=D0,D1=DA(1),DIV(1)=D1,D2=DA,DIV(2)=D2 S Y(0)=X S X=Y(0),X=X S X=X'=1 I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,"CP",D1,"LNPRV",D2,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X="" X ^DD(399.0404,.01,1,2,1.4)
"^DD",399,399.0404,.01,1,2,1.4)
S DIH=$G(^DGCR(399,DIV(0),"CP",DIV(1),"LNPRV",DIV(2),0)),DIV=X S $P(^(0),U,4)=DIV,DIH=399.0404,DIG=.04 D ^DICR
"^DD",399,399.0404,.01,1,2,2)
K DIV S DIV=X,D0=DA(2),DIV(0)=D0,D1=DA(1),DIV(1)=D1,D2=DA,DIV(2)=D2 S Y(1)=$S($D(^DGCR(399,D0,"CP",D1,"LNPRV",D2,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X="" X ^DD(399.0404,.01,1,2,2.4)
"^DD",399,399.0404,.01,1,2,2.4)
S DIH=$G(^DGCR(399,DIV(0),"CP",DIV(1),"LNPRV",DIV(2),0)),DIV=X S $P(^(0),U,4)=DIV,DIH=399.0404,DIG=.04 D ^DICR
"^DD",399,399.0404,.01,1,2,3)
Do Not Delete
"^DD",399,399.0404,.01,1,2,"%D",0)
^^2^2^3100914^
"^DD",399,399.0404,.01,1,2,"%D",1,0)
This xref is used to delete the state field if the provider is not a
"^DD",399,399.0404,.01,1,2,"%D",2,0)
referring provider function type.
"^DD",399,399.0404,.01,1,2,"CREATE CONDITION")
INTERNAL(LINE PROVIDER LINE FUNCTION)'=1
"^DD",399,399.0404,.01,1,2,"CREATE VALUE")
@
"^DD",399,399.0404,.01,1,2,"DELETE VALUE")
@
"^DD",399,399.0404,.01,1,2,"DT")
3100914
"^DD",399,399.0404,.01,1,2,"FIELD")
LINE PROVIDER STATE
"^DD",399,399.0404,.01,3)
Select the function performed by a provider for this claim line.
"^DD",399,399.0404,.01,4)
D LNPRVHLP^IBCEU7
"^DD",399,399.0404,.01,12)
Function must match bill form type. Use '??' to see the function definitions.
"^DD",399,399.0404,.01,12.1)
S DIC("S")="I $$LNPRVOK^IBCEU7(+Y,$G(DA(2)))"
"^DD",399,399.0404,.01,21,0)
^.001^6^6^3170301^^^^
"^DD",399,399.0404,.01,21,1,0)
There are providers who performed specific functions for the services on
"^DD",399,399.0404,.01,21,2,0)
this claim line. These providers are needed to enable the V.A. to collect
"^DD",399,399.0404,.01,21,3,0)
reimbursement when more than one provider function is involved in the
"^DD",399,399.0404,.01,21,4,0)
billable episode (like an operating physician or referring provider). This
"^DD",399,399.0404,.01,21,5,0)
data identifies the type of function that was performed by a provider.  
"^DD",399,399.0404,.01,21,6,0)
There can only be 1 provider recorded for each function on a claim line.
"^DD",399,399.0404,.01,"DT")
3170301
"^DD",399,399.041,0)
OCCURRENCE CODE SUB-FIELD^^.04^4
"^DD",399,399.041,0,"NM","OCCURRENCE CODE")

"^DD",399,399.041,.01,0)
OCCURRENCE CODE^M*P399.1'X^DGCR(399.1,^0;1^S DIC("S")="I $P(^DGCR(399.1,+Y,0),U,4)=1,$S(+Y'=22:1,$P(^DPT($P(^DGCR(399,DA,0),U,2),0),U,2)=""F"":1,1:0),$$CHK^IBCEF12(DA)",D="C^B" D MIX^DIC1 K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",399,399.041,.01,1,0)
^.1
"^DD",399,399.041,.01,1,1,0)
399.041^B
"^DD",399,399.041,.01,1,1,1)
S ^DGCR(399,DA(1),"OC","B",$E(X,1,30),DA)=""
"^DD",399,399.041,.01,1,1,2)
K ^DGCR(399,DA(1),"OC","B",$E(X,1,30),DA)
"^DD",399,399.041,.01,3)
This code defines the event(s) relating to this bill which may affect           insurance processing.
"^DD",399,399.041,.01,4)

"^DD",399,399.041,.01,9.6)
I X=10 S DFN=$P(^DGCR(399,DA,0),"^",2) I $D(^DPT(DFN,0)),$P(^DPT(DFN,0),"^",2)="M" W !!,"This patient is a MALE!! Occurrence Code 10 applies only to FEMALES!!",!! K DFN,X Q
"^DD",399,399.041,.01,12)
Valid MCCR Occurrence Codes only!
"^DD",399,399.041,.01,12.1)
S DIC("S")="I $P(^DGCR(399.1,+Y,0),U,4)=1,$S(+Y'=22:1,$P(^DPT($P(^DGCR(399,DA,0),U,2),0),U,2)=""F"":1,1:0),$$CHK^IBCEF12(DA)"
"^DD",399,399.041,.01,"DT")
3171113
"^DD",399,399.096,0)
TOOTH NUMBER SUB-FIELD^^.02^2
"^DD",399,399.096,0,"DIK")
IBXX
"^DD",399,399.096,0,"DT")
3180829
"^DD",399,399.096,0,"ID",.02)
W "   ",@("$P($P($C(59)_$S($D(^DD(399.096,.02,0)):$P(^(0),U,3),1:0)_$E("_DIC_"Y,0),0),$C(59)_$P(^(0),U,2)_"":"",2),$C(59),1)")
"^DD",399,399.096,0,"IX","B",399.096,.01)

"^DD",399,399.096,0,"NM","TOOTH NUMBER")

"^DD",399,399.096,0,"UP")
399
"^DD",399,399.096,.01,0)
TOOTH NUMBER^MNJ2,0^^0;1^K:+X'=X!(X>32)!(X<1)!(X?.E1"."1N.N) X
"^DD",399,399.096,.01,1,0)
^.1
"^DD",399,399.096,.01,1,1,0)
399.096^B
"^DD",399,399.096,.01,1,1,1)
S ^DGCR(399,DA(1),"DEN1","B",$E(X,1,30),DA)=""
"^DD",399,399.096,.01,1,1,2)
K ^DGCR(399,DA(1),"DEN1","B",$E(X,1,30),DA)
"^DD",399,399.096,.01,3)
Type a number between 1 and 32, 0 decimal digits.
"^DD",399,399.096,.01,21,0)
^^2^2^3171128^
"^DD",399,399.096,.01,21,1,0)
This is the tooth number (between 1 and 32) that is either missing or is
"^DD",399,399.096,.01,21,2,0)
to be extracted.
"^DD",399,399.096,.01,"DT")
3171128
"^DD",399,399.096,.02,0)
STATUS CODE^S^E:EXTRACTED;M:MISSING;^0;2^Q
"^DD",399,399.096,.02,3)
Select the code that indicates whether a tooth will be extracted or is missing.
"^DD",399,399.096,.02,21,0)
^.001^1^1^3170628^^^^
"^DD",399,399.096,.02,21,1,0)
This code indicates whether a tooth will be extracted or is missing.
"^DD",399,399.096,.02,"DT")
3170628
"^DD",399,399.30491,0)
TOOTH INFORMATION SUB-FIELD^^.07^7
"^DD",399,399.30491,0,"NM","TOOTH INFORMATION")

"^DD",399,399.30491,.01,0)
TOOTH CODE^MP356.022'^IBT(356.022,^0;1^Q
"^DD",399,399.30491,.01,1,0)
^.1
"^DD",399,399.30491,.01,1,1,0)
399.30491^B
"^DD",399,399.30491,.01,1,1,1)
S ^DGCR(399,DA(2),"CP",DA(1),"DEN1","B",$E(X,1,30),DA)=""
"^DD",399,399.30491,.01,1,1,2)
K ^DGCR(399,DA(2),"CP",DA(1),"DEN1","B",$E(X,1,30),DA)
"^DD",399,399.30491,.01,3)
Enter a valid Tooth Code.
"^DD",399,399.30491,.01,21,0)
^.001^1^1^3170413^^^
"^DD",399,399.30491,.01,21,1,0)
This identifies the tooth that requires work.
"^DD",399,399.30491,.01,"DT")
3170302
"^DD",399,399.30491,.02,0)
TOOTH SURFACE (1)^*S^B:Buccal;D:Distal;F:Facial;I:Incisal;L:Lingual;M:Mesial;O:Occlusal;^0;2^Q
"^DD",399,399.30491,.02,3)
Enter a valid Tooth Surface code.  The entered code must not already be present in Tooth Surfaces #2, #3, #4 or #5.
"^DD",399,399.30491,.02,12)
Only allow Tooth Surface Codes that are not already present in Tooth Surfaces #2, #3, #4 or #5.
"^DD",399,399.30491,.02,12.1)
S DIC("S")="I $$TOOTHS^IBCU7(.02)"
"^DD",399,399.30491,.02,21,0)
^^2^2^3170412^
"^DD",399,399.30491,.02,21,1,0)
This code represents the Tooth Surface code associated with this 
"^DD",399,399.30491,.02,21,2,0)
procedure.
"^DD",399,399.30491,.02,"DT")
3170302
"^DD",399,399.30491,.03,0)
TOOTH SURFACE (2)^*S^B:Buccal;D:Distal;F:Facial;I:Incisal;L:Lingual;M:Mesial;O:Occlusal;^0;3^Q
"^DD",399,399.30491,.03,3)
Enter a valid Tooth Surface code.  The entered code must not already be present in Tooth Surfaces #1, #3, #4 or #5.
"^DD",399,399.30491,.03,12)
Only allow Tooth Surface Codes that are not already present in Tooth Surfaces #1, #3, #4 or #5.
"^DD",399,399.30491,.03,12.1)
S DIC("S")="I $$TOOTHS^IBCU7(.03)"
"^DD",399,399.30491,.03,21,0)
^^2^2^3170412^
"^DD",399,399.30491,.03,21,1,0)
This code represents the Tooth Surface code associated with this 
"^DD",399,399.30491,.03,21,2,0)
procedure.
"^DD",399,399.30491,.03,"DT")
3170302
"^DD",399,399.30491,.04,0)
TOOTH SURFACE (3)^*S^B:Buccal;D:Distal;F:Facial;I:Incisal;L:Lingual;M:Mesial;O:Occlusal;^0;4^Q
"^DD",399,399.30491,.04,3)
Enter a valid Tooth Surface code.  The entered code must not already be present in Tooth Surfaces #1, #2, #4 or #5.
"^DD",399,399.30491,.04,12)
Only allow Tooth Surface Codes that are not already present in Tooth Surfaces #1, #2, #4 or #5.
"^DD",399,399.30491,.04,12.1)
S DIC("S")="I $$TOOTHS^IBCU7(.04)"
"^DD",399,399.30491,.04,21,0)
^^2^2^3170412^
"^DD",399,399.30491,.04,21,1,0)
This code represents the Tooth Surface code associated with this 
"^DD",399,399.30491,.04,21,2,0)
procedure.
"^DD",399,399.30491,.04,"DT")
3170302
"^DD",399,399.30491,.05,0)
TOOTH SURFACE (4)^*S^B:Buccal;D:Distal;F:Facial;I:Incisal;L:Lingual;M:Mesial;O:Occlusal;^0;5^Q
"^DD",399,399.30491,.05,3)
Enter a valid Tooth Surface code.  The entered code must not alrready be present in Tooth Surfaces #1, #2, #3 or #5.
"^DD",399,399.30491,.05,12)
Only allow Tooth Surface codes that are not already present in Tooth Surfaces #1, #2, #3 or #5.
"^DD",399,399.30491,.05,12.1)
S DIC("S")="I $$TOOTHS^IBCU7(.05)"
"^DD",399,399.30491,.05,21,0)
^^2^2^3170412^
"^DD",399,399.30491,.05,21,1,0)
This code represents the Tooth Surface code associated with this 
"^DD",399,399.30491,.05,21,2,0)
procedure.
"^DD",399,399.30491,.05,"DT")
3170302
"^DD",399,399.30491,.06,0)
TOOTH SURFACE (5)^*S^B:Buccal;D:Distal;F:Facial;I:Incisal;L:Lingual;M:Mesial;O:Occlusal;^0;6^Q
"^DD",399,399.30491,.06,3)
Enter a valid Tooth Surface code.  The entered code must not already be present in Tooth Surfaces #1, #2, #3 or #4.
"^DD",399,399.30491,.06,12)
Only allow Tooth Surface codes that are not already present in Tooth Surfaces #1, #2, #3 or #4.
"^DD",399,399.30491,.06,12.1)
S DIC("S")="I $$TOOTHS^IBCU7(.06)"
"^DD",399,399.30491,.06,21,0)
^^2^2^3170412^
"^DD",399,399.30491,.06,21,1,0)
This cide represents the Tooth Surface code associated with this 
"^DD",399,399.30491,.06,21,2,0)
procedure.
"^DD",399,399.30491,.06,"DT")
3170302
"^DD",399,399.30491,.07,0)
DENTAL TREATMENT PLAN ENTRY^NJ10,0^^0;7^K:+X'=X!(X>9999999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",399,399.30491,.07,3)
Type a number between 1 and 9999999999, 0 decimal digits.
"^DD",399,399.30491,.07,21,0)
^^3^3^3180731^
"^DD",399,399.30491,.07,21,1,0)
This value represents the entry in file 228.2, TREATMENT PLAN 
"^DD",399,399.30491,.07,21,2,0)
TRANSACTION/EXAM, that was used to default any related Dental data for 
"^DD",399,399.30491,.07,21,3,0)
the procedure code line entry.
"^DD",399,399.30491,.07,"DT")
3180731
"^DIC",353,353,0)
BILL FORM TYPE^353
"^DIC",353,353,0,"GL")
^IBE(353,
"^DIC",353,353,"%D",0)
^^13^13^2940214^^^^
"^DIC",353,353,"%D",1,0)
This is a reference file containing the types of health insurance
"^DIC",353,353,"%D",2,0)
claim forms used in billing.
"^DIC",353,353,"%D",3,0)
 
"^DIC",353,353,"%D",4,0)
Sites may add local forms to this file however, the number of entries
"^DIC",353,353,"%D",5,0)
for locally added forms should be in the stations number range of
"^DIC",353,353,"%D",6,0)
Station number time 1000.  
"^DIC",353,353,"%D",7,0)
 
"^DIC",353,353,"%D",8,0)
If other than UB-04 forms are pointed to by the BILL/CLAIMS file, then
"^DIC",353,353,"%D",9,0)
the follow-up letter job will create a separate tasked job for each
"^DIC",353,353,"%D",10,0)
bill to the Follow-up Printer for that form using the specified routine
"^DIC",353,353,"%D",11,0)
for that form.
"^DIC",353,353,"%D",12,0)
 
"^DIC",353,353,"%D",13,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",353,"B","BILL FORM TYPE",353)

"^DIC",364.5,364.5,0)
IB DATA ELEMENT DEFINITION^364.5
"^DIC",364.5,364.5,0,"GL")
^IBA(364.5,
"^DIC",364.5,364.5,"%D",0)
^^8^8^2970606^^^^
"^DIC",364.5,364.5,"%D",1,0)
DO NOT delete entries or edit data in this file with VA File Manager.
"^DIC",364.5,364.5,"%D",2,0)
 
"^DIC",364.5,364.5,"%D",3,0)
This file contains the definition of all data elements that are needed for
"^DIC",364.5,364.5,"%D",4,0)
various forms throughout the MCCR DHCP system.  It contains the 'blueprint'
"^DIC",364.5,364.5,"%D",5,0)
for how to extract the data for each data element entry.
"^DIC",364.5,364.5,"%D",6,0)
 
"^DIC",364.5,364.5,"%D",7,0)
Entries in this file that are designated as having a SECURITY LEVEL of
"^DIC",364.5,364.5,"%D",8,0)
NATIONAL should not be deleted or edited.
"^DIC",364.5,"B","IB DATA ELEMENT DEFINITION",364.5)

"^DIC",364.6,364.6,0)
IB FORM SKELETON DEFINITION^364.6P
"^DIC",364.6,364.6,0,"GL")
^IBA(364.6,
"^DIC",364.6,364.6,"%D",0)
^^10^10^2970606^^^^
"^DIC",364.6,364.6,"%D",1,0)
DO NOT delete entries or edit data in this file with VA File Manager.
"^DIC",364.6,364.6,"%D",2,0)
 
"^DIC",364.6,364.6,"%D",3,0)
This file contains records that define the skeleton makeup of forms for
"^DIC",364.6,364.6,"%D",4,0)
the IB system.  This definition includes the absolute position of every
"^DIC",364.6,364.6,"%D",5,0)
field that can be output on the form, the length each field must be limited
"^DIC",364.6,364.6,"%D",6,0)
to, and some descriptive information.   This includes printed forms,
"^DIC",364.6,364.6,"%D",7,0)
transmittable output files, and special local billing screens.
"^DIC",364.6,364.6,"%D",8,0)
 
"^DIC",364.6,364.6,"%D",9,0)
Entries in this file that are designated as having a SECURITY LEVEL of
"^DIC",364.6,364.6,"%D",10,0)
NATIONAL should not be deleted or edited.
"^DIC",364.6,"B","IB FORM SKELETON DEFINITION",364.6)

"^DIC",364.7,364.7,0)
IB FORM FIELD CONTENT^364.7P
"^DIC",364.7,364.7,0,"GL")
^IBA(364.7,
"^DIC",364.7,364.7,"%D",0)
^1.001^9^9^3030331^^^^
"^DIC",364.7,364.7,"%D",1,0)
DO NOT delete entries or edit data in this file with VA File Manager.
"^DIC",364.7,364.7,"%D",2,0)
 
"^DIC",364.7,364.7,"%D",3,0)
This is the file that contains the specific fields to be used to produce
"^DIC",364.7,364.7,"%D",4,0)
the associated form or screen.  If there is no insurance company or bill
"^DIC",364.7,364.7,"%D",5,0)
type specified for an entry, this is assumed to be the default definition
"^DIC",364.7,364.7,"%D",6,0)
of the field.
"^DIC",364.7,364.7,"%D",7,0)
 
"^DIC",364.7,364.7,"%D",8,0)
Entries in this file that are designated as having a SECURITY LEVEL of
"^DIC",364.7,364.7,"%D",9,0)
NATIONAL should not be deleted or edited.
"^DIC",364.7,"B","IB FORM FIELD CONTENT",364.7)

"BLD",10678,6)
^573
**END**
**END**


Released IB*2*497 SEQ #471
Extracted from mail message
**KIDS**:IB*2.0*497^

**INSTALL NAME**
IB*2.0*497
"BLD",9092,0)
IB*2.0*497^INTEGRATED BILLING^0^3140115^y
"BLD",9092,4,0)
^9.64PA^365.032^24
"BLD",9092,4,2,0)
2
"BLD",9092,4,2,2,0)
^9.641^2.3129^11
"BLD",9092,4,2,2,2.312,0)
INSURANCE TYPE  (sub-file)
"BLD",9092,4,2,2,2.312,1,0)
^9.6411^7.02^14
"BLD",9092,4,2,2,2.312,1,1,0)
*SUBSCRIBER ID
"BLD",9092,4,2,2,2.312,1,3.06,0)
INSURED'S STREET 1
"BLD",9092,4,2,2,2.312,1,3.07,0)
INSURED'S STREET 2
"BLD",9092,4,2,2,2.312,1,3.08,0)
INSURED'S CITY
"BLD",9092,4,2,2,2.312,1,7.01,0)
NAME OF INSURED
"BLD",9092,4,2,2,2.312,1,7.02,0)
SUBSCRIBER ID
"BLD",9092,4,2,2,2.312,1,12.01,0)
MILITARY INFO STATUS CODE
"BLD",9092,4,2,2,2.312,1,12.02,0)
MILITARY EMPLOYMENT STATUS
"BLD",9092,4,2,2,2.312,1,12.03,0)
MILITARY GOVT AFFILIATION CODE
"BLD",9092,4,2,2,2.312,1,12.04,0)
MILITARY PERSONNEL DESCRIPTION
"BLD",9092,4,2,2,2.312,1,12.05,0)
MILITARY SERVICE RANK CODE
"BLD",9092,4,2,2,2.312,1,12.06,0)
DATE TIME PERIOD FORMAT QUAL
"BLD",9092,4,2,2,2.312,1,12.07,0)
DATE TIME PERIOD
"BLD",9092,4,2,2,2.312,1,17,0)
*NAME OF INSURED
"BLD",9092,4,2,2,2.31211,0)
HEALTH CARE CODE INFORMATION  (sub-file)
"BLD",9092,4,2,2,2.31211,1,0)
^9.6411^^
"BLD",9092,4,2,2,2.3129,0)
GROUP REFERENCE INFORMATION  (sub-file)
"BLD",9092,4,2,2,2.3129,1,0)
^9.6411^^
"BLD",9092,4,2,2,2.322,0)
ELIGIBILITY/BENEFIT  (sub-file)
"BLD",9092,4,2,2,2.322,1,0)
^9.6411^.08^16
"BLD",9092,4,2,2,2.322,1,.02,0)
ELIGIBILITY/BENEFIT INFO
"BLD",9092,4,2,2,2.322,1,.03,0)
COVERAGE LEVEL
"BLD",9092,4,2,2,2.322,1,.05,0)
INSURANCE TYPE
"BLD",9092,4,2,2,2.322,1,.07,0)
TIME PERIOD QUALIFIER
"BLD",9092,4,2,2,2.322,1,.08,0)
MONETARY AMOUNT
"BLD",9092,4,2,2,2.322,1,.1,0)
QUANTITY QUALIFIER
"BLD",9092,4,2,2,2.322,1,.12,0)
AUTHORIZATION/CERTIFICATION
"BLD",9092,4,2,2,2.322,1,.13,0)
IN PLAN
"BLD",9092,4,2,2,2.322,1,1.01,0)
PROCEDURE CODING METHOD
"BLD",9092,4,2,2,2.322,1,3.01,0)
ENTITY ID CODE
"BLD",9092,4,2,2,2.322,1,3.02,0)
ENTITY TYPE
"BLD",9092,4,2,2,2.322,1,3.05,0)
ENTITY ID QUALIFIER
"BLD",9092,4,2,2,2.322,1,3.06,0)
ENTITY RELATIONSHIP CODE
"BLD",9092,4,2,2,2.322,1,4.08,0)
LOCATION QUALIFIER
"BLD",9092,4,2,2,2.322,1,5.01,0)
PROVIDER CODE
"BLD",9092,4,2,2,2.322,1,5.03,0)
REFERENCE ID QUALIFIER
"BLD",9092,4,2,2,2.3226,0)
CONTACT INFORMATION  (sub-file)
"BLD",9092,4,2,2,2.3226,1,0)
^9.6411^1^3
"BLD",9092,4,2,2,2.3226,1,.03,0)
COMMUNICATION NUMBER
"BLD",9092,4,2,2,2.3226,1,.04,0)
COMMUNICATION QUALIFIER
"BLD",9092,4,2,2,2.3226,1,1,0)
COMMUNICATION NUMBER (LONG)
"BLD",9092,4,2,2,2.3227,0)
HEALTHCARE SERVICES DELIVERY  (sub-file)
"BLD",9092,4,2,2,2.3227,1,0)
^9.6411^.07^5
"BLD",9092,4,2,2,2.3227,1,.03,0)
QUANTITY QUALIFIER
"BLD",9092,4,2,2,2.3227,1,.05,0)
UNITS OF MEASUREMENT
"BLD",9092,4,2,2,2.3227,1,.07,0)
TIME PERIOD QUALIFIER
"BLD",9092,4,2,2,2.3227,1,.08,0)
DELIVERY FREQUENCY
"BLD",9092,4,2,2,2.3227,1,.09,0)
DELIVERY PATTERN
"BLD",9092,4,2,2,2.3228,0)
SUBSCRIBER DATES  (sub-file)
"BLD",9092,4,2,2,2.3228,1,0)
^9.6411^.04^2
"BLD",9092,4,2,2,2.3228,1,.03,0)
DATE QUALIFIER
"BLD",9092,4,2,2,2.3228,1,.04,0)
DATE FORMAT
"BLD",9092,4,2,2,2.3229,0)
SUBSCRIBER ADDITIONAL INFO  (sub-file)
"BLD",9092,4,2,2,2.3229,1,0)
^9.6411^.07^5
"BLD",9092,4,2,2,2.3229,1,.02,0)
PLACE OF SERVICE
"BLD",9092,4,2,2,2.3229,1,.04,0)
QUALIFIER
"BLD",9092,4,2,2,2.3229,1,.05,0)
NATURE OF INJURY CODE
"BLD",9092,4,2,2,2.3229,1,.06,0)
NATURE OF INJURY CATEGORY
"BLD",9092,4,2,2,2.3229,1,.07,0)
NATURE OF INJURY TEXT
"BLD",9092,4,2,2,2.32291,0)
SUBSCRIBER REFERENCE ID  (sub-file)
"BLD",9092,4,2,2,2.32291,1,0)
^9.6411^.03^1
"BLD",9092,4,2,2,2.32291,1,.03,0)
REFERENCE ID QUALIFIER
"BLD",9092,4,2,2,2.32292,0)
SERVICE TYPES  (sub-file)
"BLD",9092,4,2,2,2.32292,1,0)
^9.6411^.01^1
"BLD",9092,4,2,2,2.32292,1,.01,0)
SERVICE TYPES
"BLD",9092,4,2,2,2.332,0)
GROUP PROVIDER INFO  (sub-file)
"BLD",9092,4,2,2,2.332,1,0)
^9.6411^^
"BLD",9092,4,2,222)
y^n^p^^^^n^^n
"BLD",9092,4,2,224)

"BLD",9092,4,350.9,0)
350.9
"BLD",9092,4,350.9,2,0)
^9.641^350.9^1
"BLD",9092,4,350.9,2,350.9,0)
IB SITE PARAMETERS  (File-top level)
"BLD",9092,4,350.9,2,350.9,1,0)
^9.6411^62.01^11
"BLD",9092,4,350.9,2,350.9,1,60.02,0)
DEFAULT SERVICE TYPE CODE 2
"BLD",9092,4,350.9,2,350.9,1,60.03,0)
DEFAULT SERVICE TYPE CODE 3
"BLD",9092,4,350.9,2,350.9,1,60.04,0)
DEFAULT SERVICE TYPE CODE 4
"BLD",9092,4,350.9,2,350.9,1,60.05,0)
DEFAULT SERVICE TYPE CODE 5
"BLD",9092,4,350.9,2,350.9,1,60.06,0)
DEFAULT SERVICE TYPE CODE 6
"BLD",9092,4,350.9,2,350.9,1,60.07,0)
DEFAULT SERVICE TYPE CODE 7
"BLD",9092,4,350.9,2,350.9,1,60.08,0)
DEFAULT SERVICE TYPE CODE 8
"BLD",9092,4,350.9,2,350.9,1,60.09,0)
DEFAULT SERVICE TYPE CODE 9
"BLD",9092,4,350.9,2,350.9,1,60.1,0)
DEFAULT SERVICE TYPE CODE 10
"BLD",9092,4,350.9,2,350.9,1,60.11,0)
DEFAULT SERVICE TYPE CODE 11
"BLD",9092,4,350.9,2,350.9,1,62.01,0)
LIMIT LENGTH OF EIV FIELDS?
"BLD",9092,4,350.9,222)
y^n^p^^^^n^^n
"BLD",9092,4,350.9,224)

"BLD",9092,4,355.3,0)
355.3
"BLD",9092,4,355.3,2,0)
^9.641^355.3^1
"BLD",9092,4,355.3,2,355.3,0)
GROUP INSURANCE PLAN  (File-top level)
"BLD",9092,4,355.3,2,355.3,1,0)
^9.6411^2.02^4
"BLD",9092,4,355.3,2,355.3,1,.03,0)
*GROUP NAME
"BLD",9092,4,355.3,2,355.3,1,.04,0)
*GROUP NUMBER
"BLD",9092,4,355.3,2,355.3,1,2.01,0)
GROUP NAME
"BLD",9092,4,355.3,2,355.3,1,2.02,0)
GROUP NUMBER
"BLD",9092,4,355.3,222)
y^n^p^^^^n^^n
"BLD",9092,4,355.3,224)

"BLD",9092,4,355.33,0)
355.33
"BLD",9092,4,355.33,2,0)
^9.641^355.33^1
"BLD",9092,4,355.33,2,355.33,0)
INSURANCE BUFFER  (File-top level)
"BLD",9092,4,355.33,2,355.33,1,0)
^9.6411^91.01^10
"BLD",9092,4,355.33,2,355.33,1,.18,0)
SERVICE DATE
"BLD",9092,4,355.33,2,355.33,1,40.02,0)
*GROUP NAME
"BLD",9092,4,355.33,2,355.33,1,40.03,0)
*GROUP NUMBER
"BLD",9092,4,355.33,2,355.33,1,60.04,0)
*SUBSCRIBER ID
"BLD",9092,4,355.33,2,355.33,1,60.07,0)
*NAME OF INSURED
"BLD",9092,4,355.33,2,355.33,1,60.14,0)
PT. RELATIONSHIP - HIPAA
"BLD",9092,4,355.33,2,355.33,1,90.01,0)
GROUP NAME
"BLD",9092,4,355.33,2,355.33,1,90.02,0)
GROUP NUMBER
"BLD",9092,4,355.33,2,355.33,1,90.03,0)
SUBSCRIBER ID
"BLD",9092,4,355.33,2,355.33,1,91.01,0)
NAME OF INSURED
"BLD",9092,4,355.33,222)
y^n^p^^^^n^^n
"BLD",9092,4,355.33,224)

"BLD",9092,4,365,0)
365
"BLD",9092,4,365,2,0)
^9.641^365.292^15
"BLD",9092,4,365,2,365,0)
IIV RESPONSE  (File-top level)
"BLD",9092,4,365,2,365,1,0)
^9.6411^14.02^16
"BLD",9092,4,365,2,365,1,1.01,0)
*NAME OF INSURED
"BLD",9092,4,365,2,365,1,1.05,0)
*SUBSCRIBER ID
"BLD",9092,4,365,2,365,1,1.06,0)
*GROUP NAME
"BLD",9092,4,365,2,365,1,1.07,0)
*GROUP NUMBER
"BLD",9092,4,365,2,365,1,8.01,0)
PT. RELATIONSHIP - HIPAA
"BLD",9092,4,365,2,365,1,12.01,0)
MILITARY INFO STATUS CODE
"BLD",9092,4,365,2,365,1,12.02,0)
MILITARY EMPLOYMENT STATUS
"BLD",9092,4,365,2,365,1,12.03,0)
MILITARY GOVT AFFILIATION CODE
"BLD",9092,4,365,2,365,1,12.04,0)
MILITARY PERSONNEL DESCRIPTION
"BLD",9092,4,365,2,365,1,12.05,0)
MILITARY SERVICE RANK CODE
"BLD",9092,4,365,2,365,1,12.06,0)
DATE TIME PERIOD FORMAT QUAL
"BLD",9092,4,365,2,365,1,12.07,0)
DATE TIME PERIOD
"BLD",9092,4,365,2,365,1,13.01,0)
NAME OF INSURED
"BLD",9092,4,365,2,365,1,13.02,0)
SUBSCRIBER ID
"BLD",9092,4,365,2,365,1,14.01,0)
GROUP NAME
"BLD",9092,4,365,2,365,1,14.02,0)
GROUP NUMBER
"BLD",9092,4,365,2,365.01,0)
HEALTH CARE CODE INFORMATION  (sub-file)
"BLD",9092,4,365,2,365.01,1,0)
^9.6411^^
"BLD",9092,4,365,2,365.02,0)
ELIGIBILITY/BENEFIT  (sub-file)
"BLD",9092,4,365,2,365.02,1,0)
^9.6411^5.03^16
"BLD",9092,4,365,2,365.02,1,.02,0)
ELIGIBILITY/BENEFIT INFO
"BLD",9092,4,365,2,365.02,1,.03,0)
COVERAGE LEVEL
"BLD",9092,4,365,2,365.02,1,.05,0)
INSURANCE TYPE
"BLD",9092,4,365,2,365.02,1,.07,0)
TIME PERIOD QUALIFIER
"BLD",9092,4,365,2,365.02,1,.08,0)
MONETARY AMOUNT
"BLD",9092,4,365,2,365.02,1,.1,0)
QUANTITY QUALIFIER
"BLD",9092,4,365,2,365.02,1,.12,0)
AUTHORIZATION/CERTIFICATION
"BLD",9092,4,365,2,365.02,1,.13,0)
IN PLAN
"BLD",9092,4,365,2,365.02,1,1.01,0)
PROCEDURE CODING METHOD
"BLD",9092,4,365,2,365.02,1,3.01,0)
ENTITY ID CODE
"BLD",9092,4,365,2,365.02,1,3.02,0)
ENTITY TYPE
"BLD",9092,4,365,2,365.02,1,3.05,0)
ENTITY ID QUALIFIER
"BLD",9092,4,365,2,365.02,1,3.06,0)
ENTITY RELATIONSHIP CODE
"BLD",9092,4,365,2,365.02,1,4.08,0)
LOCATION QUALIFIER
"BLD",9092,4,365,2,365.02,1,5.01,0)
PROVIDER CODE
"BLD",9092,4,365,2,365.02,1,5.03,0)
REFERENCE ID QUALIFIER
"BLD",9092,4,365,2,365.03,0)
CONTACT PERSON  (sub-file)
"BLD",9092,4,365,2,365.03,1,0)
^9.6411^3^6
"BLD",9092,4,365,2,365.03,1,.03,0)
*COMMUNICATION NUMBER #1
"BLD",9092,4,365,2,365.03,1,.05,0)
*COMMUNICATION NUMBER #2
"BLD",9092,4,365,2,365.03,1,.07,0)
*COMMUNICATION NUMBER #3
"BLD",9092,4,365,2,365.03,1,1,0)
COMMUNICATION NUMBER #1
"BLD",9092,4,365,2,365.03,1,2,0)
COMMUNICATION NUMBER #2
"BLD",9092,4,365,2,365.03,1,3,0)
COMMUNICATION NUMBER #3
"BLD",9092,4,365,2,365.04,0)
GROUP PROVIDER INFO  (sub-file)
"BLD",9092,4,365,2,365.04,1,0)
^9.6411^^
"BLD",9092,4,365,2,365.06,0)
REJECT REASONS  (sub-file)
"BLD",9092,4,365,2,365.06,1,0)
^9.6411^.04^2
"BLD",9092,4,365,2,365.06,1,.03,0)
REJECT REASON
"BLD",9092,4,365,2,365.06,1,.04,0)
ACTION CODE
"BLD",9092,4,365,2,365.061,0)
ADDITIONAL MSGS  (sub-file)
"BLD",9092,4,365,2,365.061,1,0)
^9.6411^^
"BLD",9092,4,365,2,365.07,0)
SUBSCRIBER DATES  (sub-file)
"BLD",9092,4,365,2,365.07,1,0)
^9.6411^.03^1
"BLD",9092,4,365,2,365.07,1,.03,0)
DATE QUALIFIER
"BLD",9092,4,365,2,365.09,0)
GROUP REFERENCE INFORMATION  (sub-file)
"BLD",9092,4,365,2,365.09,1,0)
^9.6411^^
"BLD",9092,4,365,2,365.26,0)
CONTACT INFORMATION  (sub-file)
"BLD",9092,4,365,2,365.26,1,0)
^9.6411^1^3
"BLD",9092,4,365,2,365.26,1,.03,0)
*COMMUNICATION NUMBER
"BLD",9092,4,365,2,365.26,1,.04,0)
COMMUNICATION QUALIFIER
"BLD",9092,4,365,2,365.26,1,1,0)
COMMUNICATION NUMBER
"BLD",9092,4,365,2,365.27,0)
HEALTHCARE SERVICES DELIVERY  (sub-file)
"BLD",9092,4,365,2,365.27,1,0)
^9.6411^.09^5
"BLD",9092,4,365,2,365.27,1,.03,0)
QUANTITY QUALIFIER
"BLD",9092,4,365,2,365.27,1,.05,0)
UNITS OF MEASUREMENT
"BLD",9092,4,365,2,365.27,1,.07,0)
TIME PERIOD QUALIFIER
"BLD",9092,4,365,2,365.27,1,.08,0)
DELIVERY FREQUENCY
"BLD",9092,4,365,2,365.27,1,.09,0)
DELIVERY PATTERN
"BLD",9092,4,365,2,365.28,0)
SUBSCRIBER DATES  (sub-file)
"BLD",9092,4,365,2,365.28,1,0)
^9.6411^.04^2
"BLD",9092,4,365,2,365.28,1,.03,0)
DATE QUALIFIER
"BLD",9092,4,365,2,365.28,1,.04,0)
DATE FORMAT
"BLD",9092,4,365,2,365.29,0)
SUBSCRIBER ADDITIONAL INFO  (sub-file)
"BLD",9092,4,365,2,365.29,1,0)
^9.6411^.07^5
"BLD",9092,4,365,2,365.29,1,.02,0)
PLACE OF SERVICE
"BLD",9092,4,365,2,365.29,1,.04,0)
QUALIFIER
"BLD",9092,4,365,2,365.29,1,.05,0)
NATURE OF INJURY CODE
"BLD",9092,4,365,2,365.29,1,.06,0)
NATURE OF INJURY CATEGORY
"BLD",9092,4,365,2,365.29,1,.07,0)
NATURE OF INJURY TEXT
"BLD",9092,4,365,2,365.291,0)
SUBSCRIBER REFERENCE ID  (sub-file)
"BLD",9092,4,365,2,365.291,1,0)
^9.6411^.03^1
"BLD",9092,4,365,2,365.291,1,.03,0)
REFERENCE ID QUALIFIER
"BLD",9092,4,365,2,365.292,0)
SERVICE TYPES  (sub-file)
"BLD",9092,4,365,2,365.292,1,0)
^9.6411^.01^1
"BLD",9092,4,365,2,365.292,1,.01,0)
SERVICE TYPES
"BLD",9092,4,365,222)
y^n^p^^^^n^^n
"BLD",9092,4,365,224)

"BLD",9092,4,365.028,0)
365.028
"BLD",9092,4,365.028,222)
n^n^f^^y^^y^o^n
"BLD",9092,4,365.029,0)
365.029
"BLD",9092,4,365.029,222)
y^n^f^^n^^y^o^n
"BLD",9092,4,365.031,0)
365.031
"BLD",9092,4,365.031,222)
y^n^f^^n^^y^o^n
"BLD",9092,4,365.032,0)
365.032
"BLD",9092,4,365.032,222)
y^n^f^^n^^y^o^n
"BLD",9092,4,365.033,0)
365.033
"BLD",9092,4,365.033,222)
y^n^f^^n^^y^o^n
"BLD",9092,4,365.034,0)
365.034
"BLD",9092,4,365.034,222)
y^n^f^^n^^y^o^n
"BLD",9092,4,365.035,0)
365.035
"BLD",9092,4,365.035,222)
y^n^f^^n^^y^o^n
"BLD",9092,4,365.036,0)
365.036
"BLD",9092,4,365.036,222)
y^n^f^^n^^y^o^n
"BLD",9092,4,365.037,0)
365.037
"BLD",9092,4,365.037,222)
y^n^f^^n^^y^o^n
"BLD",9092,4,365.038,0)
365.038
"BLD",9092,4,365.038,222)
y^n^f^^n^^y^o^n
"BLD",9092,4,365.039,0)
365.039
"BLD",9092,4,365.039,222)
y^n^f^^n^^y^o^n
"BLD",9092,4,365.041,0)
365.041
"BLD",9092,4,365.041,222)
y^n^f^^n^^y^o^n
"BLD",9092,4,365.042,0)
365.042
"BLD",9092,4,365.042,222)
y^n^f^^n^^y^o^n
"BLD",9092,4,365.043,0)
365.043
"BLD",9092,4,365.043,222)
y^n^f^^n^^y^o^n
"BLD",9092,4,365.044,0)
365.044
"BLD",9092,4,365.044,222)
y^n^f^^n^^y^o^n
"BLD",9092,4,365.045,0)
365.045
"BLD",9092,4,365.045,222)
y^n^f^^n^^y^o^n
"BLD",9092,4,365.046,0)
365.046
"BLD",9092,4,365.046,222)
y^n^f^^n^^y^o^n
"BLD",9092,4,365.1,0)
365.1
"BLD",9092,4,365.1,2,0)
^9.641^365.1^1
"BLD",9092,4,365.1,2,365.1,0)
IIV TRANSMISSION QUEUE  (File-top level)
"BLD",9092,4,365.1,2,365.1,1,0)
^9.6411^.2^1
"BLD",9092,4,365.1,2,365.1,1,.2,0)
SERVICE TYPE CODE
"BLD",9092,4,365.1,222)
y^n^p^^^^n^^n
"BLD",9092,4,365.1,224)

"BLD",9092,4,365.2,0)
365.2
"BLD",9092,4,365.2,222)
y^n^f^^^^n
"BLD",9092,4,"APDD",2,2.312)

"BLD",9092,4,"APDD",2,2.312,1)

"BLD",9092,4,"APDD",2,2.312,3.06)

"BLD",9092,4,"APDD",2,2.312,3.07)

"BLD",9092,4,"APDD",2,2.312,3.08)

"BLD",9092,4,"APDD",2,2.312,7.01)

"BLD",9092,4,"APDD",2,2.312,7.02)

"BLD",9092,4,"APDD",2,2.312,12.01)

"BLD",9092,4,"APDD",2,2.312,12.02)

"BLD",9092,4,"APDD",2,2.312,12.03)

"BLD",9092,4,"APDD",2,2.312,12.04)

"BLD",9092,4,"APDD",2,2.312,12.05)

"BLD",9092,4,"APDD",2,2.312,12.06)

"BLD",9092,4,"APDD",2,2.312,12.07)

"BLD",9092,4,"APDD",2,2.312,17)

"BLD",9092,4,"APDD",2,2.31211)

"BLD",9092,4,"APDD",2,2.3129)

"BLD",9092,4,"APDD",2,2.322)

"BLD",9092,4,"APDD",2,2.322,.02)

"BLD",9092,4,"APDD",2,2.322,.03)

"BLD",9092,4,"APDD",2,2.322,.05)

"BLD",9092,4,"APDD",2,2.322,.07)

"BLD",9092,4,"APDD",2,2.322,.08)

"BLD",9092,4,"APDD",2,2.322,.1)

"BLD",9092,4,"APDD",2,2.322,.12)

"BLD",9092,4,"APDD",2,2.322,.13)

"BLD",9092,4,"APDD",2,2.322,1.01)

"BLD",9092,4,"APDD",2,2.322,3.01)

"BLD",9092,4,"APDD",2,2.322,3.02)

"BLD",9092,4,"APDD",2,2.322,3.05)

"BLD",9092,4,"APDD",2,2.322,3.06)

"BLD",9092,4,"APDD",2,2.322,4.08)

"BLD",9092,4,"APDD",2,2.322,5.01)

"BLD",9092,4,"APDD",2,2.322,5.03)

"BLD",9092,4,"APDD",2,2.3226)

"BLD",9092,4,"APDD",2,2.3226,.03)

"BLD",9092,4,"APDD",2,2.3226,.04)

"BLD",9092,4,"APDD",2,2.3226,1)

"BLD",9092,4,"APDD",2,2.3227)

"BLD",9092,4,"APDD",2,2.3227,.03)

"BLD",9092,4,"APDD",2,2.3227,.05)

"BLD",9092,4,"APDD",2,2.3227,.07)

"BLD",9092,4,"APDD",2,2.3227,.08)

"BLD",9092,4,"APDD",2,2.3227,.09)

"BLD",9092,4,"APDD",2,2.3228)

"BLD",9092,4,"APDD",2,2.3228,.03)

"BLD",9092,4,"APDD",2,2.3228,.04)

"BLD",9092,4,"APDD",2,2.3229)

"BLD",9092,4,"APDD",2,2.3229,.02)

"BLD",9092,4,"APDD",2,2.3229,.04)

"BLD",9092,4,"APDD",2,2.3229,.05)

"BLD",9092,4,"APDD",2,2.3229,.06)

"BLD",9092,4,"APDD",2,2.3229,.07)

"BLD",9092,4,"APDD",2,2.32291)

"BLD",9092,4,"APDD",2,2.32291,.03)

"BLD",9092,4,"APDD",2,2.32292)

"BLD",9092,4,"APDD",2,2.32292,.01)

"BLD",9092,4,"APDD",2,2.332)

"BLD",9092,4,"APDD",350.9,350.9)

"BLD",9092,4,"APDD",350.9,350.9,60.02)

"BLD",9092,4,"APDD",350.9,350.9,60.03)

"BLD",9092,4,"APDD",350.9,350.9,60.04)

"BLD",9092,4,"APDD",350.9,350.9,60.05)

"BLD",9092,4,"APDD",350.9,350.9,60.06)

"BLD",9092,4,"APDD",350.9,350.9,60.07)

"BLD",9092,4,"APDD",350.9,350.9,60.08)

"BLD",9092,4,"APDD",350.9,350.9,60.09)

"BLD",9092,4,"APDD",350.9,350.9,60.1)

"BLD",9092,4,"APDD",350.9,350.9,60.11)

"BLD",9092,4,"APDD",350.9,350.9,62.01)

"BLD",9092,4,"APDD",355.3,355.3)

"BLD",9092,4,"APDD",355.3,355.3,.03)

"BLD",9092,4,"APDD",355.3,355.3,.04)

"BLD",9092,4,"APDD",355.3,355.3,2.01)

"BLD",9092,4,"APDD",355.3,355.3,2.02)

"BLD",9092,4,"APDD",355.33,355.33)

"BLD",9092,4,"APDD",355.33,355.33,.18)

"BLD",9092,4,"APDD",355.33,355.33,40.02)

"BLD",9092,4,"APDD",355.33,355.33,40.03)

"BLD",9092,4,"APDD",355.33,355.33,60.04)

"BLD",9092,4,"APDD",355.33,355.33,60.07)

"BLD",9092,4,"APDD",355.33,355.33,60.14)

"BLD",9092,4,"APDD",355.33,355.33,90.01)

"BLD",9092,4,"APDD",355.33,355.33,90.02)

"BLD",9092,4,"APDD",355.33,355.33,90.03)

"BLD",9092,4,"APDD",355.33,355.33,91.01)

"BLD",9092,4,"APDD",365,365)

"BLD",9092,4,"APDD",365,365,1.01)

"BLD",9092,4,"APDD",365,365,1.05)

"BLD",9092,4,"APDD",365,365,1.06)

"BLD",9092,4,"APDD",365,365,1.07)

"BLD",9092,4,"APDD",365,365,8.01)

"BLD",9092,4,"APDD",365,365,12.01)

"BLD",9092,4,"APDD",365,365,12.02)

"BLD",9092,4,"APDD",365,365,12.03)

"BLD",9092,4,"APDD",365,365,12.04)

"BLD",9092,4,"APDD",365,365,12.05)

"BLD",9092,4,"APDD",365,365,12.06)

"BLD",9092,4,"APDD",365,365,12.07)

"BLD",9092,4,"APDD",365,365,13.01)

"BLD",9092,4,"APDD",365,365,13.02)

"BLD",9092,4,"APDD",365,365,14.01)

"BLD",9092,4,"APDD",365,365,14.02)

"BLD",9092,4,"APDD",365,365.01)

"BLD",9092,4,"APDD",365,365.02)

"BLD",9092,4,"APDD",365,365.02,.02)

"BLD",9092,4,"APDD",365,365.02,.03)

"BLD",9092,4,"APDD",365,365.02,.05)

"BLD",9092,4,"APDD",365,365.02,.07)

"BLD",9092,4,"APDD",365,365.02,.08)

"BLD",9092,4,"APDD",365,365.02,.1)

"BLD",9092,4,"APDD",365,365.02,.12)

"BLD",9092,4,"APDD",365,365.02,.13)

"BLD",9092,4,"APDD",365,365.02,1.01)

"BLD",9092,4,"APDD",365,365.02,3.01)

"BLD",9092,4,"APDD",365,365.02,3.02)

"BLD",9092,4,"APDD",365,365.02,3.05)

"BLD",9092,4,"APDD",365,365.02,3.06)

"BLD",9092,4,"APDD",365,365.02,4.08)

"BLD",9092,4,"APDD",365,365.02,5.01)

"BLD",9092,4,"APDD",365,365.02,5.03)

"BLD",9092,4,"APDD",365,365.03)

"BLD",9092,4,"APDD",365,365.03,.03)

"BLD",9092,4,"APDD",365,365.03,.05)

"BLD",9092,4,"APDD",365,365.03,.07)

"BLD",9092,4,"APDD",365,365.03,1)

"BLD",9092,4,"APDD",365,365.03,2)

"BLD",9092,4,"APDD",365,365.03,3)

"BLD",9092,4,"APDD",365,365.04)

"BLD",9092,4,"APDD",365,365.06)

"BLD",9092,4,"APDD",365,365.06,.03)

"BLD",9092,4,"APDD",365,365.06,.04)

"BLD",9092,4,"APDD",365,365.061)

"BLD",9092,4,"APDD",365,365.07)

"BLD",9092,4,"APDD",365,365.07,.03)

"BLD",9092,4,"APDD",365,365.09)

"BLD",9092,4,"APDD",365,365.26)

"BLD",9092,4,"APDD",365,365.26,.03)

"BLD",9092,4,"APDD",365,365.26,.04)

"BLD",9092,4,"APDD",365,365.26,1)

"BLD",9092,4,"APDD",365,365.27)

"BLD",9092,4,"APDD",365,365.27,.03)

"BLD",9092,4,"APDD",365,365.27,.05)

"BLD",9092,4,"APDD",365,365.27,.07)

"BLD",9092,4,"APDD",365,365.27,.08)

"BLD",9092,4,"APDD",365,365.27,.09)

"BLD",9092,4,"APDD",365,365.28)

"BLD",9092,4,"APDD",365,365.28,.03)

"BLD",9092,4,"APDD",365,365.28,.04)

"BLD",9092,4,"APDD",365,365.29)

"BLD",9092,4,"APDD",365,365.29,.02)

"BLD",9092,4,"APDD",365,365.29,.04)

"BLD",9092,4,"APDD",365,365.29,.05)

"BLD",9092,4,"APDD",365,365.29,.06)

"BLD",9092,4,"APDD",365,365.29,.07)

"BLD",9092,4,"APDD",365,365.291)

"BLD",9092,4,"APDD",365,365.291,.03)

"BLD",9092,4,"APDD",365,365.292)

"BLD",9092,4,"APDD",365,365.292,.01)

"BLD",9092,4,"APDD",365.1,365.1)

"BLD",9092,4,"APDD",365.1,365.1,.2)

"BLD",9092,4,"B",2,2)

"BLD",9092,4,"B",350.9,350.9)

"BLD",9092,4,"B",355.3,355.3)

"BLD",9092,4,"B",355.33,355.33)

"BLD",9092,4,"B",365,365)

"BLD",9092,4,"B",365.028,365.028)

"BLD",9092,4,"B",365.029,365.029)

"BLD",9092,4,"B",365.031,365.031)

"BLD",9092,4,"B",365.032,365.032)

"BLD",9092,4,"B",365.033,365.033)

"BLD",9092,4,"B",365.034,365.034)

"BLD",9092,4,"B",365.035,365.035)

"BLD",9092,4,"B",365.036,365.036)

"BLD",9092,4,"B",365.037,365.037)

"BLD",9092,4,"B",365.038,365.038)

"BLD",9092,4,"B",365.039,365.039)

"BLD",9092,4,"B",365.041,365.041)

"BLD",9092,4,"B",365.042,365.042)

"BLD",9092,4,"B",365.043,365.043)

"BLD",9092,4,"B",365.044,365.044)

"BLD",9092,4,"B",365.045,365.045)

"BLD",9092,4,"B",365.046,365.046)

"BLD",9092,4,"B",365.1,365.1)

"BLD",9092,4,"B",365.2,365.2)

"BLD",9092,6.3)
120
"BLD",9092,"ABPKG")
n
"BLD",9092,"INID")
^y^
"BLD",9092,"INIT")
EN^IBY497PO
"BLD",9092,"KRN",0)
^9.67PA^779.2^20
"BLD",9092,"KRN",.4,0)
.4
"BLD",9092,"KRN",.401,0)
.401
"BLD",9092,"KRN",.402,0)
.402
"BLD",9092,"KRN",.402,"NM",0)
^9.68A^2^2
"BLD",9092,"KRN",.402,"NM",1,0)
IBCNE GENERAL PARAMETER EDIT    FILE #350.9^350.9^0
"BLD",9092,"KRN",.402,"NM",2,0)
IBCN PATIENT INSURANCE    FILE #2^2^0
"BLD",9092,"KRN",.402,"NM","B","IBCN PATIENT INSURANCE    FILE #2",2)

"BLD",9092,"KRN",.402,"NM","B","IBCNE GENERAL PARAMETER EDIT    FILE #350.9",1)

"BLD",9092,"KRN",.403,0)
.403
"BLD",9092,"KRN",.5,0)
.5
"BLD",9092,"KRN",.84,0)
.84
"BLD",9092,"KRN",3.6,0)
3.6
"BLD",9092,"KRN",3.8,0)
3.8
"BLD",9092,"KRN",9.2,0)
9.2
"BLD",9092,"KRN",9.8,0)
9.8
"BLD",9092,"KRN",9.8,"NM",0)
^9.68A^61^55
"BLD",9092,"KRN",9.8,"NM",1,0)
IBCNERPE^^0^B60593817
"BLD",9092,"KRN",9.8,"NM",2,0)
IBCNEHL1^^0^B206919324
"BLD",9092,"KRN",9.8,"NM",3,0)
IBCNEHL2^^0^B70236887
"BLD",9092,"KRN",9.8,"NM",5,0)
IBCNEHL4^^0^B174356077
"BLD",9092,"KRN",9.8,"NM",6,0)
IBCNEHL5^^0^B11250093
"BLD",9092,"KRN",9.8,"NM",7,0)
IBCNES1^^0^B145502085
"BLD",9092,"KRN",9.8,"NM",9,0)
IBCNEDST^^0^B52803166
"BLD",9092,"KRN",9.8,"NM",10,0)
IBCNEHLM^^0^B26579443
"BLD",9092,"KRN",9.8,"NM",11,0)
IBCNEHLQ^^0^B44383583
"BLD",9092,"KRN",9.8,"NM",12,0)
IBCNEBF^^0^B46385823
"BLD",9092,"KRN",9.8,"NM",13,0)
IBCNEHLU^^0^B88168048
"BLD",9092,"KRN",9.8,"NM",14,0)
IBCNEQU^^0^B126099513
"BLD",9092,"KRN",9.8,"NM",15,0)
IBCNERTQ^^0^B44184624
"BLD",9092,"KRN",9.8,"NM",17,0)
IBCNES3^^0^B25873283
"BLD",9092,"KRN",9.8,"NM",18,0)
IBJPI5^^0^B4489364
"BLD",9092,"KRN",9.8,"NM",19,0)
IBCNESI2^^0^B50676612
"BLD",9092,"KRN",9.8,"NM",20,0)
IBCNESI1^^0^B73077962
"BLD",9092,"KRN",9.8,"NM",21,0)
IBCNESI^^0^B17756591
"BLD",9092,"KRN",9.8,"NM",22,0)
IBCNEHL3^^0^B168485042
"BLD",9092,"KRN",9.8,"NM",23,0)
IBCNEUT1^^0^B35326232
"BLD",9092,"KRN",9.8,"NM",24,0)
IBCNBLE^^0^B105786784
"BLD",9092,"KRN",9.8,"NM",25,0)
IBJTCA1^^0^B52135617
"BLD",9092,"KRN",9.8,"NM",26,0)
IBCNERPI^^0^B43723857
"BLD",9092,"KRN",9.8,"NM",27,0)
IBCNES^^0^B28429551
"BLD",9092,"KRN",9.8,"NM",28,0)
IBCNEDE1^^0^B44623085
"BLD",9092,"KRN",9.8,"NM",29,0)
IBCNBEE^^0^B45711543
"BLD",9092,"KRN",9.8,"NM",30,0)
IBCNEDE7^^0^B27880444
"BLD",9092,"KRN",9.8,"NM",31,0)
IBCNBLP^^0^B25507553
"BLD",9092,"KRN",9.8,"NM",32,0)
IBCNBCD^^0^B99276499
"BLD",9092,"KRN",9.8,"NM",33,0)
IBCNSP^^0^B48468493
"BLD",9092,"KRN",9.8,"NM",34,0)
IBCNSP0^^0^B37737467
"BLD",9092,"KRN",9.8,"NM",35,0)
IBCNSP01^^0^B52258890
"BLD",9092,"KRN",9.8,"NM",38,0)
IBCNUPD^^0^B15205533
"BLD",9092,"KRN",9.8,"NM",39,0)
IBCNBMI^^0^B91864404
"BLD",9092,"KRN",9.8,"NM",41,0)
IBCNBES^^0^B8711337
"BLD",9092,"KRN",9.8,"NM",42,0)
IBCNBES1^^0^B5819713
"BLD",9092,"KRN",9.8,"NM",43,0)
IBCNBAC^^0^B51549169
"BLD",9092,"KRN",9.8,"NM",44,0)
IBCNSJ3^^0^B17659726
"BLD",9092,"KRN",9.8,"NM",45,0)
IBCNSMM1^^0^B27818840
"BLD",9092,"KRN",9.8,"NM",46,0)
IBCNEDE5^^0^B28666402
"BLD",9092,"KRN",9.8,"NM",47,0)
IBCNEUT4^^0^B50266196
"BLD",9092,"KRN",9.8,"NM",48,0)
IBCNSU41^^0^B22019975
"BLD",9092,"KRN",9.8,"NM",49,0)
IBCNSP3^^0^B38854605
"BLD",9092,"KRN",9.8,"NM",50,0)
IBCNSEVT^^0^B4726698
"BLD",9092,"KRN",9.8,"NM",51,0)
IBCNBAR^^0^B44889067
"BLD",9092,"KRN",9.8,"NM",52,0)
IBCNSOK1^^0^B13344891
"BLD",9092,"KRN",9.8,"NM",53,0)
IBCNSM31^^0^B21224087
"BLD",9092,"KRN",9.8,"NM",54,0)
IBCNSP1^^0^B60114361
"BLD",9092,"KRN",9.8,"NM",55,0)
IBCNEDE^^0^B34057908
"BLD",9092,"KRN",9.8,"NM",56,0)
IBCNEDE6^^0^B32414593
"BLD",9092,"KRN",9.8,"NM",57,0)
IBCNBU1^^0^B34498281
"BLD",9092,"KRN",9.8,"NM",58,0)
IBCNSM5^^0^B21379064
"BLD",9092,"KRN",9.8,"NM",59,0)
IBCNSOK^^0^B26943633
"BLD",9092,"KRN",9.8,"NM",60,0)
IBCNSU2^^0^B19732446
"BLD",9092,"KRN",9.8,"NM",61,0)
IBCNSC4^^0^B18086570
"BLD",9092,"KRN",9.8,"NM","B","IBCNBAC",43)

"BLD",9092,"KRN",9.8,"NM","B","IBCNBAR",51)

"BLD",9092,"KRN",9.8,"NM","B","IBCNBCD",32)

"BLD",9092,"KRN",9.8,"NM","B","IBCNBEE",29)

"BLD",9092,"KRN",9.8,"NM","B","IBCNBES",41)

"BLD",9092,"KRN",9.8,"NM","B","IBCNBES1",42)

"BLD",9092,"KRN",9.8,"NM","B","IBCNBLE",24)

"BLD",9092,"KRN",9.8,"NM","B","IBCNBLP",31)

"BLD",9092,"KRN",9.8,"NM","B","IBCNBMI",39)

"BLD",9092,"KRN",9.8,"NM","B","IBCNBU1",57)

"BLD",9092,"KRN",9.8,"NM","B","IBCNEBF",12)

"BLD",9092,"KRN",9.8,"NM","B","IBCNEDE",55)

"BLD",9092,"KRN",9.8,"NM","B","IBCNEDE1",28)

"BLD",9092,"KRN",9.8,"NM","B","IBCNEDE5",46)

"BLD",9092,"KRN",9.8,"NM","B","IBCNEDE6",56)

"BLD",9092,"KRN",9.8,"NM","B","IBCNEDE7",30)

"BLD",9092,"KRN",9.8,"NM","B","IBCNEDST",9)

"BLD",9092,"KRN",9.8,"NM","B","IBCNEHL1",2)

"BLD",9092,"KRN",9.8,"NM","B","IBCNEHL2",3)

"BLD",9092,"KRN",9.8,"NM","B","IBCNEHL3",22)

"BLD",9092,"KRN",9.8,"NM","B","IBCNEHL4",5)

"BLD",9092,"KRN",9.8,"NM","B","IBCNEHL5",6)

"BLD",9092,"KRN",9.8,"NM","B","IBCNEHLM",10)

"BLD",9092,"KRN",9.8,"NM","B","IBCNEHLQ",11)

"BLD",9092,"KRN",9.8,"NM","B","IBCNEHLU",13)

"BLD",9092,"KRN",9.8,"NM","B","IBCNEQU",14)

"BLD",9092,"KRN",9.8,"NM","B","IBCNERPE",1)

"BLD",9092,"KRN",9.8,"NM","B","IBCNERPI",26)

"BLD",9092,"KRN",9.8,"NM","B","IBCNERTQ",15)

"BLD",9092,"KRN",9.8,"NM","B","IBCNES",27)

"BLD",9092,"KRN",9.8,"NM","B","IBCNES1",7)

"BLD",9092,"KRN",9.8,"NM","B","IBCNES3",17)

"BLD",9092,"KRN",9.8,"NM","B","IBCNESI",21)

"BLD",9092,"KRN",9.8,"NM","B","IBCNESI1",20)

"BLD",9092,"KRN",9.8,"NM","B","IBCNESI2",19)

"BLD",9092,"KRN",9.8,"NM","B","IBCNEUT1",23)

"BLD",9092,"KRN",9.8,"NM","B","IBCNEUT4",47)

"BLD",9092,"KRN",9.8,"NM","B","IBCNSC4",61)

"BLD",9092,"KRN",9.8,"NM","B","IBCNSEVT",50)

"BLD",9092,"KRN",9.8,"NM","B","IBCNSJ3",44)

"BLD",9092,"KRN",9.8,"NM","B","IBCNSM31",53)

"BLD",9092,"KRN",9.8,"NM","B","IBCNSM5",58)

"BLD",9092,"KRN",9.8,"NM","B","IBCNSMM1",45)

"BLD",9092,"KRN",9.8,"NM","B","IBCNSOK",59)

"BLD",9092,"KRN",9.8,"NM","B","IBCNSOK1",52)

"BLD",9092,"KRN",9.8,"NM","B","IBCNSP",33)

"BLD",9092,"KRN",9.8,"NM","B","IBCNSP0",34)

"BLD",9092,"KRN",9.8,"NM","B","IBCNSP01",35)

"BLD",9092,"KRN",9.8,"NM","B","IBCNSP1",54)

"BLD",9092,"KRN",9.8,"NM","B","IBCNSP3",49)

"BLD",9092,"KRN",9.8,"NM","B","IBCNSU2",60)

"BLD",9092,"KRN",9.8,"NM","B","IBCNSU41",48)

"BLD",9092,"KRN",9.8,"NM","B","IBCNUPD",38)

"BLD",9092,"KRN",9.8,"NM","B","IBJPI5",18)

"BLD",9092,"KRN",9.8,"NM","B","IBJTCA1",25)

"BLD",9092,"KRN",19,0)
19
"BLD",9092,"KRN",19,"NM",0)
^9.68A^9^5
"BLD",9092,"KRN",19,"NM",1,0)
IBCN MEDICARE INSURANCE INTAKE^^1^
"BLD",9092,"KRN",19,"NM",6,0)
IB SYSTEM DEFINITION MENU^^2
"BLD",9092,"KRN",19,"NM",7,0)
IBCN UPDATE SUBSCRIBER INFO^^0
"BLD",9092,"KRN",19,"NM",8,0)
IBCNE POTENTIAL COB LIST^^0
"BLD",9092,"KRN",19,"NM",9,0)
IBCNE IIV MENU^^2
"BLD",9092,"KRN",19,"NM","B","IB SYSTEM DEFINITION MENU",6)

"BLD",9092,"KRN",19,"NM","B","IBCN MEDICARE INSURANCE INTAKE",1)

"BLD",9092,"KRN",19,"NM","B","IBCN UPDATE SUBSCRIBER INFO",7)

"BLD",9092,"KRN",19,"NM","B","IBCNE IIV MENU",9)

"BLD",9092,"KRN",19,"NM","B","IBCNE POTENTIAL COB LIST",8)

"BLD",9092,"KRN",19.1,0)
19.1
"BLD",9092,"KRN",19.1,"NM",0)
^9.68A^^
"BLD",9092,"KRN",101,0)
101
"BLD",9092,"KRN",101,"NM",0)
^9.68A^5^5
"BLD",9092,"KRN",101,"NM",1,0)
IBCNE MEDICARE COB^^0
"BLD",9092,"KRN",101,"NM",2,0)
IBCNE MEDICARE COB DISP^^0
"BLD",9092,"KRN",101,"NM",3,0)
IBCNE MEDICARE COB AC^^0
"BLD",9092,"KRN",101,"NM",4,0)
IBCNE MEDICARE COB CS^^0
"BLD",9092,"KRN",101,"NM",5,0)
IBCNE MEDICARE COB EE^^0
"BLD",9092,"KRN",101,"NM","B","IBCNE MEDICARE COB",1)

"BLD",9092,"KRN",101,"NM","B","IBCNE MEDICARE COB AC",3)

"BLD",9092,"KRN",101,"NM","B","IBCNE MEDICARE COB CS",4)

"BLD",9092,"KRN",101,"NM","B","IBCNE MEDICARE COB DISP",2)

"BLD",9092,"KRN",101,"NM","B","IBCNE MEDICARE COB EE",5)

"BLD",9092,"KRN",409.61,0)
409.61
"BLD",9092,"KRN",409.61,"NM",0)
^9.68A^3^3
"BLD",9092,"KRN",409.61,"NM",1,0)
IBCNE MEDICARE COB DISPLAY^^0
"BLD",9092,"KRN",409.61,"NM",2,0)
IBCNE MEDICARE COB LIST^^0
"BLD",9092,"KRN",409.61,"NM",3,0)
IBCNE ELIGIBILITY/BENEFIT INFO^^0
"BLD",9092,"KRN",409.61,"NM","B","IBCNE ELIGIBILITY/BENEFIT INFO",3)

"BLD",9092,"KRN",409.61,"NM","B","IBCNE MEDICARE COB DISPLAY",1)

"BLD",9092,"KRN",409.61,"NM","B","IBCNE MEDICARE COB LIST",2)

"BLD",9092,"KRN",771,0)
771
"BLD",9092,"KRN",779.2,0)
779.2
"BLD",9092,"KRN",870,0)
870
"BLD",9092,"KRN",8989.51,0)
8989.51
"BLD",9092,"KRN",8989.52,0)
8989.52
"BLD",9092,"KRN",8994,0)
8994
"BLD",9092,"KRN","B",.4,.4)

"BLD",9092,"KRN","B",.401,.401)

"BLD",9092,"KRN","B",.402,.402)

"BLD",9092,"KRN","B",.403,.403)

"BLD",9092,"KRN","B",.5,.5)

"BLD",9092,"KRN","B",.84,.84)

"BLD",9092,"KRN","B",3.6,3.6)

"BLD",9092,"KRN","B",3.8,3.8)

"BLD",9092,"KRN","B",9.2,9.2)

"BLD",9092,"KRN","B",9.8,9.8)

"BLD",9092,"KRN","B",19,19)

"BLD",9092,"KRN","B",19.1,19.1)

"BLD",9092,"KRN","B",101,101)

"BLD",9092,"KRN","B",409.61,409.61)

"BLD",9092,"KRN","B",771,771)

"BLD",9092,"KRN","B",779.2,779.2)

"BLD",9092,"KRN","B",870,870)

"BLD",9092,"KRN","B",8989.51,8989.51)

"BLD",9092,"KRN","B",8989.52,8989.52)

"BLD",9092,"KRN","B",8994,8994)

"BLD",9092,"QDEF")
^^^^NO^^^^YES^^NO
"BLD",9092,"QUES",0)
^9.62^^
"BLD",9092,"REQB",0)
^9.611^9^8
"BLD",9092,"REQB",1,0)
IB*2.0*444^1
"BLD",9092,"REQB",2,0)
IB*2.0*467^1
"BLD",9092,"REQB",3,0)
IB*2.0*473^1
"BLD",9092,"REQB",5,0)
IB*2.0*141^1
"BLD",9092,"REQB",6,0)
IB*2.0*359^1
"BLD",9092,"REQB",7,0)
IB*2.0*62^1
"BLD",9092,"REQB",8,0)
IB*2.0*263^1
"BLD",9092,"REQB",9,0)
IB*2.0*458^1
"BLD",9092,"REQB","B","IB*2.0*141",5)

"BLD",9092,"REQB","B","IB*2.0*263",8)

"BLD",9092,"REQB","B","IB*2.0*359",6)

"BLD",9092,"REQB","B","IB*2.0*444",1)

"BLD",9092,"REQB","B","IB*2.0*458",9)

"BLD",9092,"REQB","B","IB*2.0*467",2)

"BLD",9092,"REQB","B","IB*2.0*473",3)

"BLD",9092,"REQB","B","IB*2.0*62",7)

"DATA",365.028,1,0)
18^Plan Number
"DATA",365.028,2,0)
1L^Group or Policy Number
"DATA",365.028,3,0)
1W^Member Identification Number
"DATA",365.028,4,0)
49^Family Unit Number
"DATA",365.028,5,0)
6P^Group Number
"DATA",365.028,6,0)
9F^Referral Number
"DATA",365.028,7,0)
A6^Employee Identification Number
"DATA",365.028,8,0)
F6^Health Insurance Claim (HIC) Number
"DATA",365.028,9,0)
G1^Prior Authorization Number
"DATA",365.028,10,0)
IG^Insurance Policy Number
"DATA",365.028,11,0)
N6^Plan Network Identification Number
"DATA",365.028,12,0)
NQ^Medicaid Recipient Identification Number
"DATA",365.028,13,0)
9K^SERVICER^0
"DATA",365.028,14,0)
EI^EIN^0
"DATA",365.028,15,0)
SY^SSN^0
"DATA",365.028,16,0)
TJ^FEDERAL TAX ID^0
"DATA",365.028,17,0)
D3^NATIONAL ASSOCIATION OF BOARDS OF PHARMACY NUMBER^0
"DATA",365.028,18,0)
PXC^Health Care Provider Taxonomy Code^0
"DATA",365.028,19,0)
ZZ^Taxonomy cody^0
"DATA",365.028,20,0)
HPI^Healthcare Financing Administration^0
"DATA",365.029,1,0)
DA^DAYS^0
"DATA",365.029,2,0)
MO^MONTHS^0
"DATA",365.029,3,0)
VS^VISITS^0
"DATA",365.029,4,0)
WK^WEEKS^0
"DATA",365.029,5,0)
YR^YEARS^0
"DATA",365.031,1,0)
01^PARENT^0
"DATA",365.031,2,0)
02^CHILD^0
"DATA",365.031,3,0)
27^DOMESTIC PARTNER^0
"DATA",365.031,4,0)
41^SPOUSE^0
"DATA",365.031,5,0)
48^EMPLOYEE^0
"DATA",365.031,6,0)
65^OTHER^0
"DATA",365.031,7,0)
72^UNKNOWN^0
"DATA",365.032,1,0)
D8^SINGLE DATE (CCYYMMDD)^0
"DATA",365.032,2,0)
RD8^DATE RANGE (CCYYMMDD-CCYYMMDD)^0
"DATA",365.033,1,0)
Y^YES^0
"DATA",365.033,2,0)
N^NO^0
"DATA",365.033,3,0)
U^UNKNOWN^0
"DATA",365.034,1,0)
RJ^REGION^0
"DATA",365.035,1,0)
AD^AMERICAN DENTAL ASSOCIATION^0
"DATA",365.035,2,0)
CJ^CPT^0
"DATA",365.035,3,0)
HC^HCPCS^0
"DATA",365.035,4,0)
ID^ICD-9-CM^0
"DATA",365.035,5,0)
N4^NATIONAL DRUG CODE^0
"DATA",365.035,6,0)
ZZ^MUTUALLY DEFINED^0
"DATA",365.036,1,0)
A^1ST SHIFT^0
"DATA",365.036,2,0)
B^2ND SHIFT^0
"DATA",365.036,3,0)
C^3RD SHIFT^0
"DATA",365.036,4,0)
D^A.M.^0
"DATA",365.036,5,0)
E^P.M.^0
"DATA",365.036,6,0)
F^AS DIRECTED^0
"DATA",365.036,7,0)
G^ANY SHIFT^0
"DATA",365.036,8,0)
Y^NONE^0
"DATA",365.037,1,0)
01^SPOUSE^0
"DATA",365.037,2,0)
18^SELF^0
"DATA",365.037,3,0)
19^CHILD^0
"DATA",365.037,4,0)
20^EMPLOYEE^0
"DATA",365.037,5,0)
29^SIGNIFICANT OTHER^0
"DATA",365.037,6,0)
32^MOTHER^0
"DATA",365.037,7,0)
33^FATHER^0
"DATA",365.037,8,0)
39^ORGAN DONOR^0
"DATA",365.037,9,0)
41^INJURED PLAINTIFF^0
"DATA",365.037,10,0)
53^LIFE PARTNER^0
"DATA",365.037,11,0)
G8^OTHER RELATIONSHIP^0
"DATA",365.038,1,0)
44^NATURE OF INJURY^0
"DATA",365.039,1,0)
A^PARTIAL^0
"DATA",365.039,2,0)
C^CURRENT^0
"DATA",365.039,3,0)
L^LATEST^0
"DATA",365.039,4,0)
P^PRIOR^0
"DATA",365.039,5,0)
S^SECOND MOST CURRENT^0
"DATA",365.039,6,0)
T^THIRD MOST CURRENT^0
"DATA",365.041,1,0)
A^AIR FORCE^0
"DATA",365.041,2,0)
B^AIR FORCE RESERVES^0
"DATA",365.041,3,0)
C^ARMY^0
"DATA",365.041,4,0)
D^ARMY RESERVES^0
"DATA",365.041,5,0)
E^COAST GUARD^0
"DATA",365.041,6,0)
F^MARINE CORPS^0
"DATA",365.041,7,0)
G^MARINE CORPS RESERVES^0
"DATA",365.041,8,0)
H^NATIONAL GUARD^0
"DATA",365.041,9,0)
I^NAVY^0
"DATA",365.041,10,0)
J^NAVY RESERVES^0
"DATA",365.041,11,0)
K^OTHER^0
"DATA",365.041,12,0)
L^PEACE CORPS^0
"DATA",365.041,13,0)
M^REGULAR ARMED FORCES^0
"DATA",365.041,14,0)
N^RESERVES^0
"DATA",365.041,15,0)
O^U.S. PUBLIC HEALTH SERVICE^0
"DATA",365.041,16,0)
Q^FOREIGN MILITARY^0
"DATA",365.041,17,0)
R^AMERICAN RED CROSS^0
"DATA",365.041,18,0)
S^DEPARTMENT OF DEFENSE^0
"DATA",365.041,19,0)
U^UNITED SERVICES ORGANIZATION^0
"DATA",365.041,20,0)
W^MILITARY SEALIFT COMMAND^0
"DATA",365.042,1,0)
A1^ADMIRAL^0
"DATA",365.042,2,0)
A2^AIRMAN^0
"DATA",365.042,3,0)
A3^AIRMAN FIRST CLASS^0
"DATA",365.042,4,0)
B1^BASIC AIRMAN^0
"DATA",365.042,5,0)
B2^BRIGADIER GENERAL^0
"DATA",365.042,6,0)
C1^CAPTAIN^0
"DATA",365.042,7,0)
C2^CHIEF MASTER SERGEANT^0
"DATA",365.042,8,0)
C3^CHIEF PETTY OFFICER^0
"DATA",365.042,9,0)
C4^CHIEF WARRANT^0
"DATA",365.042,10,0)
C5^COLONEL^0
"DATA",365.042,11,0)
C6^COMMANDER^0
"DATA",365.042,12,0)
C7^COMMODORE^0
"DATA",365.042,13,0)
C8^CORPORAL^0
"DATA",365.042,14,0)
C9^CORPORAL SPECIALIST 4^0
"DATA",365.042,15,0)
E1^ENSIGN^0
"DATA",365.042,16,0)
F1^FIRST LIEUTENANT^0
"DATA",365.042,17,0)
F2^FIRST SERGEANT^0
"DATA",365.042,18,0)
F3^FIRST SERGEANT-MASTER SERGEANT^0
"DATA",365.042,19,0)
F4^FLEET ADMIRAL^0
"DATA",365.042,20,0)
G1^GENERAL^0
"DATA",365.042,21,0)
G4^GUNNERY SERGEANT^0
"DATA",365.042,22,0)
L1^LANCE CORPORAL^0
"DATA",365.042,23,0)
L2^LIEUTENANT^0
"DATA",365.042,24,0)
L3^LIEUTENANT COLONEL^0
"DATA",365.042,25,0)
L4^LIEUTENANT COMMANDER^0
"DATA",365.042,26,0)
L5^LIEUTENANT GENERAL^0
"DATA",365.042,27,0)
L6^LIEUTENANT JUNIOR GRADE^0
"DATA",365.042,28,0)
M1^MAJOR^0
"DATA",365.042,29,0)
M2^MAJOR GENERAL^0
"DATA",365.042,30,0)
M3^MASTER CHIEF PETTY OFFICER^0
"DATA",365.042,31,0)
M4^MASTER GUNNERY SERGEANT MAJOR^0
"DATA",365.042,32,0)
M5^MASTER SERGEANT^0
"DATA",365.042,33,0)
M6^MASTER SERGEANT SPECIALIST 8^0
"DATA",365.042,34,0)
P1^PETTY OFFICER FIRST CLASS^0
"DATA",365.042,35,0)
P2^PETTY OFFICER SECOND CLASS^0
"DATA",365.042,36,0)
P3^PETTY OFFICER THIRD CLASS^0
"DATA",365.042,37,0)
P4^PRIVATE^0
"DATA",365.042,38,0)
P5^PRIVATE FIRST CLASS^0
"DATA",365.042,39,0)
R1^REAR ADMIRAL^0
"DATA",365.043,1,0)
1^PERSON^0
"DATA",365.043,2,0)
2^NON-PERSON ENTITY^0
"DATA",365.044,1,0)
BF^DIAGNOSIS^0
"DATA",365.044,2,0)
BK^PRINCIPAL DIAGNOSIS^0
"DATA",365.044,3,0)
ZZ^PLACE OF SERVICE^0
"DATA",365.044,4,0)
GR^National Council on Compensation Insurance (NCCI) Nature of Injury Code^0
"DATA",365.044,5,0)
NI^NATURE OF INJURY CODE^0
"DATA",365.045,2,0)
GR^NATURE OF INJURY (NCCI)^0
"DATA",365.045,3,0)
NI^NATURE OF INJURY^0
"DATA",365.046,1,0)
AE^ACTIVE RESERVE^0
"DATA",365.046,2,0)
AO^ACTIVE MILITARY-OVERSEAS^0
"DATA",365.046,3,0)
AS^ACADEMY STUDENT^0
"DATA",365.046,4,0)
AT^PRESIDENTIAL APPOINTEE^0
"DATA",365.046,5,0)
AU^ACTIVE MILITARY-USA^0
"DATA",365.046,6,0)
CC^CONTRACTOR^0
"DATA",365.046,7,0)
DD^DISHONORABLY DISCHARGED^0
"DATA",365.046,8,0)
HD^HONORABLY DISCHARGED^0
"DATA",365.046,9,0)
IR^INACTIVE RESERVES^0
"DATA",365.046,10,0)
LX^LEAVE OF ABSENCE: MILITARY^0
"DATA",365.046,11,0)
PE^PLAN TO ENLIST^0
"DATA",365.046,12,0)
RE^RECOMMISSIONED^0
"DATA",365.046,13,0)
RM^RETIRED MILITARY-OVERSEAS^0
"DATA",365.046,14,0)
RR^RETIRED WITHOUT RECALL^0
"DATA",365.046,15,0)
RU^RETIRED MILITARY-USA^0
"FIA",2)
PATIENT
"FIA",2,0)
^DPT(
"FIA",2,0,0)
2I
"FIA",2,0,1)
y^n^p^^^^n^^n
"FIA",2,0,10)

"FIA",2,0,11)

"FIA",2,0,"RLRO")

"FIA",2,0,"VR")
2.0^IB
"FIA",2,2)
1
"FIA",2,2.312)
1
"FIA",2,2.312,1)

"FIA",2,2.312,3.06)

"FIA",2,2.312,3.07)

"FIA",2,2.312,3.08)

"FIA",2,2.312,7.01)

"FIA",2,2.312,7.02)

"FIA",2,2.312,9)

"FIA",2,2.312,10)

"FIA",2,2.312,11)

"FIA",2,2.312,12.01)

"FIA",2,2.312,12.02)

"FIA",2,2.312,12.03)

"FIA",2,2.312,12.04)

"FIA",2,2.312,12.05)

"FIA",2,2.312,12.06)

"FIA",2,2.312,12.07)

"FIA",2,2.312,17)

"FIA",2,2.31211)
0
"FIA",2,2.3129)
0
"FIA",2,2.322)
1
"FIA",2,2.322,.02)

"FIA",2,2.322,.03)

"FIA",2,2.322,.05)

"FIA",2,2.322,.07)

"FIA",2,2.322,.08)

"FIA",2,2.322,.1)

"FIA",2,2.322,.12)

"FIA",2,2.322,.13)

"FIA",2,2.322,1.01)

"FIA",2,2.322,3.01)

"FIA",2,2.322,3.02)

"FIA",2,2.322,3.05)

"FIA",2,2.322,3.06)

"FIA",2,2.322,4.08)

"FIA",2,2.322,5.01)

"FIA",2,2.322,5.03)

"FIA",2,2.322,11)

"FIA",2,2.3226)
1
"FIA",2,2.3226,.03)

"FIA",2,2.3226,.04)

"FIA",2,2.3226,1)

"FIA",2,2.3227)
1
"FIA",2,2.3227,.03)

"FIA",2,2.3227,.05)

"FIA",2,2.3227,.07)

"FIA",2,2.3227,.08)

"FIA",2,2.3227,.09)

"FIA",2,2.3228)
1
"FIA",2,2.3228,.03)

"FIA",2,2.3228,.04)

"FIA",2,2.3229)
1
"FIA",2,2.3229,.02)

"FIA",2,2.3229,.04)

"FIA",2,2.3229,.05)

"FIA",2,2.3229,.06)

"FIA",2,2.3229,.07)

"FIA",2,2.32291)
1
"FIA",2,2.32291,.03)

"FIA",2,2.32292)
1
"FIA",2,2.32292,.01)

"FIA",2,2.332)
0
"FIA",350.9)
IB SITE PARAMETERS
"FIA",350.9,0)
^IBE(350.9,
"FIA",350.9,0,0)
350.9I
"FIA",350.9,0,1)
y^n^p^^^^n^^n
"FIA",350.9,0,10)

"FIA",350.9,0,11)

"FIA",350.9,0,"RLRO")

"FIA",350.9,0,"VR")
2.0^IB
"FIA",350.9,350.9)
1
"FIA",350.9,350.9,60.02)

"FIA",350.9,350.9,60.03)

"FIA",350.9,350.9,60.04)

"FIA",350.9,350.9,60.05)

"FIA",350.9,350.9,60.06)

"FIA",350.9,350.9,60.07)

"FIA",350.9,350.9,60.08)

"FIA",350.9,350.9,60.09)

"FIA",350.9,350.9,60.1)

"FIA",350.9,350.9,60.11)

"FIA",350.9,350.9,62.01)

"FIA",355.3)
GROUP INSURANCE PLAN
"FIA",355.3,0)
^IBA(355.3,
"FIA",355.3,0,0)
355.3IP
"FIA",355.3,0,1)
y^n^p^^^^n^^n
"FIA",355.3,0,10)

"FIA",355.3,0,11)

"FIA",355.3,0,"RLRO")

"FIA",355.3,0,"VR")
2.0^IB
"FIA",355.3,355.3)
1
"FIA",355.3,355.3,.03)

"FIA",355.3,355.3,.04)

"FIA",355.3,355.3,2.01)

"FIA",355.3,355.3,2.02)

"FIA",355.33)
INSURANCE BUFFER
"FIA",355.33,0)
^IBA(355.33,
"FIA",355.33,0,0)
355.33DA
"FIA",355.33,0,1)
y^n^p^^^^n^^n
"FIA",355.33,0,10)

"FIA",355.33,0,11)

"FIA",355.33,0,"RLRO")

"FIA",355.33,0,"VR")
2.0^IB
"FIA",355.33,355.33)
1
"FIA",355.33,355.33,.18)

"FIA",355.33,355.33,40.02)

"FIA",355.33,355.33,40.03)

"FIA",355.33,355.33,60.04)

"FIA",355.33,355.33,60.07)

"FIA",355.33,355.33,60.14)

"FIA",355.33,355.33,90.01)

"FIA",355.33,355.33,90.02)

"FIA",355.33,355.33,90.03)

"FIA",355.33,355.33,91.01)

"FIA",365)
IIV RESPONSE
"FIA",365,0)
^IBCN(365,
"FIA",365,0,0)
365
"FIA",365,0,1)
y^n^p^^^^n^^n
"FIA",365,0,10)

"FIA",365,0,11)

"FIA",365,0,"RLRO")

"FIA",365,0,"VR")
2.0^IB
"FIA",365,365)
1
"FIA",365,365,1.01)

"FIA",365,365,1.05)

"FIA",365,365,1.06)

"FIA",365,365,1.07)

"FIA",365,365,8.01)

"FIA",365,365,9)

"FIA",365,365,10)

"FIA",365,365,11)

"FIA",365,365,12.01)

"FIA",365,365,12.02)

"FIA",365,365,12.03)

"FIA",365,365,12.04)

"FIA",365,365,12.05)

"FIA",365,365,12.06)

"FIA",365,365,12.07)

"FIA",365,365,13.01)

"FIA",365,365,13.02)

"FIA",365,365,14.01)

"FIA",365,365,14.02)

"FIA",365,365.01)
0
"FIA",365,365.02)
1
"FIA",365,365.02,.02)

"FIA",365,365.02,.03)

"FIA",365,365.02,.05)

"FIA",365,365.02,.07)

"FIA",365,365.02,.08)

"FIA",365,365.02,.1)

"FIA",365,365.02,.12)

"FIA",365,365.02,.13)

"FIA",365,365.02,1.01)

"FIA",365,365.02,3.01)

"FIA",365,365.02,3.02)

"FIA",365,365.02,3.05)

"FIA",365,365.02,3.06)

"FIA",365,365.02,4.08)

"FIA",365,365.02,5.01)

"FIA",365,365.02,5.03)

"FIA",365,365.02,14)

"FIA",365,365.03)
1
"FIA",365,365.03,.03)

"FIA",365,365.03,.05)

"FIA",365,365.03,.07)

"FIA",365,365.03,1)

"FIA",365,365.03,2)

"FIA",365,365.03,3)

"FIA",365,365.04)
0
"FIA",365,365.06)
1
"FIA",365,365.06,.03)

"FIA",365,365.06,.04)

"FIA",365,365.06,1)

"FIA",365,365.061)
0
"FIA",365,365.07)
1
"FIA",365,365.07,.03)

"FIA",365,365.09)
0
"FIA",365,365.26)
1
"FIA",365,365.26,.03)

"FIA",365,365.26,.04)

"FIA",365,365.26,1)

"FIA",365,365.27)
1
"FIA",365,365.27,.03)

"FIA",365,365.27,.05)

"FIA",365,365.27,.07)

"FIA",365,365.27,.08)

"FIA",365,365.27,.09)

"FIA",365,365.28)
1
"FIA",365,365.28,.03)

"FIA",365,365.28,.04)

"FIA",365,365.29)
1
"FIA",365,365.29,.02)

"FIA",365,365.29,.04)

"FIA",365,365.29,.05)

"FIA",365,365.29,.06)

"FIA",365,365.29,.07)

"FIA",365,365.291)
1
"FIA",365,365.291,.03)

"FIA",365,365.292)
1
"FIA",365,365.292,.01)

"FIA",365.028)
X12 271 REFERENCE IDENTIFICATION
"FIA",365.028,0)
^IBE(365.028,
"FIA",365.028,0,0)
365.028I
"FIA",365.028,0,1)
n^n^f^^y^^y^o^n
"FIA",365.028,0,10)

"FIA",365.028,0,11)

"FIA",365.028,0,"RLRO")

"FIA",365.028,0,"VR")
2.0^IB
"FIA",365.028,365.028)
0
"FIA",365.029)
X12 271 UNITS OF MEASUREMENT
"FIA",365.029,0)
^IBE(365.029,
"FIA",365.029,0,0)
365.029I
"FIA",365.029,0,1)
y^n^f^^n^^y^o^n
"FIA",365.029,0,10)

"FIA",365.029,0,11)

"FIA",365.029,0,"RLRO")

"FIA",365.029,0,"VR")
2.0^IB
"FIA",365.029,365.029)
0
"FIA",365.031)
X12 271 ENTITY RELATIONSHIP CODE
"FIA",365.031,0)
^IBE(365.031,
"FIA",365.031,0,0)
365.031I
"FIA",365.031,0,1)
y^n^f^^n^^y^o^n
"FIA",365.031,0,10)

"FIA",365.031,0,11)

"FIA",365.031,0,"RLRO")

"FIA",365.031,0,"VR")
2.0^IB
"FIA",365.031,365.031)
0
"FIA",365.032)
X12 271 DATE FORMAT QUALIFIER
"FIA",365.032,0)
^IBE(365.032,
"FIA",365.032,0,0)
365.032I
"FIA",365.032,0,1)
y^n^f^^n^^y^o^n
"FIA",365.032,0,10)

"FIA",365.032,0,11)

"FIA",365.032,0,"RLRO")

"FIA",365.032,0,"VR")
2.0^IB
"FIA",365.032,365.032)
0
"FIA",365.033)
X12 271 YES/NO RESPONSE CODE 
"FIA",365.033,0)
^IBE(365.033,
"FIA",365.033,0,0)
365.033I
"FIA",365.033,0,1)
y^n^f^^n^^y^o^n
"FIA",365.033,0,10)

"FIA",365.033,0,11)

"FIA",365.033,0,"RLRO")

"FIA",365.033,0,"VR")
2.0^IB
"FIA",365.033,365.033)
0
"FIA",365.034)
X12 271 LOCATION QUALIFER
"FIA",365.034,0)
^IBE(365.034,
"FIA",365.034,0,0)
365.034I
"FIA",365.034,0,1)
y^n^f^^n^^y^o^n
"FIA",365.034,0,10)

"FIA",365.034,0,11)

"FIA",365.034,0,"RLRO")

"FIA",365.034,0,"VR")
2.0^IB
"FIA",365.034,365.034)
0
"FIA",365.035)
X12 271 PROCEDURE CODING METHOD
"FIA",365.035,0)
^IBE(365.035,
"FIA",365.035,0,0)
365.035I
"FIA",365.035,0,1)
y^n^f^^n^^y^o^n
"FIA",365.035,0,10)

"FIA",365.035,0,11)

"FIA",365.035,0,"RLRO")

"FIA",365.035,0,"VR")
2.0^IB
"FIA",365.035,365.035)
0
"FIA",365.036)
X12 271 DELIVERY PATTERN
"FIA",365.036,0)
^IBE(365.036,
"FIA",365.036,0,0)
365.036I
"FIA",365.036,0,1)
y^n^f^^n^^y^o^n
"FIA",365.036,0,10)

"FIA",365.036,0,11)

"FIA",365.036,0,"RLRO")

"FIA",365.036,0,"VR")
2.0^IB
"FIA",365.036,365.036)
0
"FIA",365.037)
X12 271 PATIENT RELATIONSHIP
"FIA",365.037,0)
^IBE(365.037,
"FIA",365.037,0,0)
365.037I
"FIA",365.037,0,1)
y^n^f^^n^^y^o^n
"FIA",365.037,0,10)

"FIA",365.037,0,11)

"FIA",365.037,0,"RLRO")

"FIA",365.037,0,"VR")
2.0^IB
"FIA",365.037,365.037)
0
"FIA",365.038)
X12 271 INJURY CATEGORY
"FIA",365.038,0)
^IBE(365.038,
"FIA",365.038,0,0)
365.038
"FIA",365.038,0,1)
y^n^f^^n^^y^o^n
"FIA",365.038,0,10)

"FIA",365.038,0,11)

"FIA",365.038,0,"RLRO")

"FIA",365.038,0,"VR")
2.0^IB
"FIA",365.038,365.038)
0
"FIA",365.039)
X12 271 MILITARY PERSONNEL INFO STATUS CODE
"FIA",365.039,0)
^IBE(365.039,
"FIA",365.039,0,0)
365.039I
"FIA",365.039,0,1)
y^n^f^^n^^y^o^n
"FIA",365.039,0,10)

"FIA",365.039,0,11)

"FIA",365.039,0,"RLRO")

"FIA",365.039,0,"VR")
2.0^IB
"FIA",365.039,365.039)
0
"FIA",365.041)
X12 271 MILITARY GOVT SERVICE AFFILIATION
"FIA",365.041,0)
^IBE(365.041,
"FIA",365.041,0,0)
365.041I
"FIA",365.041,0,1)
y^n^f^^n^^y^o^n
"FIA",365.041,0,10)

"FIA",365.041,0,11)

"FIA",365.041,0,"RLRO")

"FIA",365.041,0,"VR")
2.0^IB
"FIA",365.041,365.041)
0
"FIA",365.042)
X12 271 MILITARY SERVICE RANK
"FIA",365.042,0)
^IBE(365.042,
"FIA",365.042,0,0)
365.042I
"FIA",365.042,0,1)
y^n^f^^n^^y^o^n
"FIA",365.042,0,10)

"FIA",365.042,0,11)

"FIA",365.042,0,"RLRO")

"FIA",365.042,0,"VR")
2.0^IB
"FIA",365.042,365.042)
0
"FIA",365.043)
X12 271 ENTITY TYPE QUALIFIER
"FIA",365.043,0)
^IBE(365.043,
"FIA",365.043,0,0)
365.043I
"FIA",365.043,0,1)
y^n^f^^n^^y^o^n
"FIA",365.043,0,10)

"FIA",365.043,0,11)

"FIA",365.043,0,"RLRO")

"FIA",365.043,0,"VR")
2.0^IB
"FIA",365.043,365.043)
0
"FIA",365.044)
X12 271 CODE LIST QUALIFIER
"FIA",365.044,0)
^IBE(365.044,
"FIA",365.044,0,0)
365.044I
"FIA",365.044,0,1)
y^n^f^^n^^y^o^n
"FIA",365.044,0,10)

"FIA",365.044,0,11)

"FIA",365.044,0,"RLRO")

"FIA",365.044,0,"VR")
2.0^IB
"FIA",365.044,365.044)
0
"FIA",365.045)
X12 271 NATURE OF INJURY CODES
"FIA",365.045,0)
^IBE(365.045,
"FIA",365.045,0,0)
365.045I
"FIA",365.045,0,1)
y^n^f^^n^^y^o^n
"FIA",365.045,0,10)

"FIA",365.045,0,11)

"FIA",365.045,0,"RLRO")

"FIA",365.045,0,"VR")
2.0^IB
"FIA",365.045,365.045)
0
"FIA",365.046)
X12 271 MILITARY EMPLOYMENT STATUS CODE
"FIA",365.046,0)
^IBE(365.046,
"FIA",365.046,0,0)
365.046I
"FIA",365.046,0,1)
y^n^f^^n^^y^o^n
"FIA",365.046,0,10)

"FIA",365.046,0,11)

"FIA",365.046,0,"RLRO")

"FIA",365.046,0,"VR")
2.0^IB
"FIA",365.046,365.046)
0
"FIA",365.1)
IIV TRANSMISSION QUEUE
"FIA",365.1,0)
^IBCN(365.1,
"FIA",365.1,0,0)
365.1
"FIA",365.1,0,1)
y^n^p^^^^n^^n
"FIA",365.1,0,10)

"FIA",365.1,0,11)

"FIA",365.1,0,"RLRO")

"FIA",365.1,0,"VR")
2.0^IB
"FIA",365.1,365.1)
1
"FIA",365.1,365.1,.2)

"FIA",365.2)
IIV RESPONSE REVIEW
"FIA",365.2,0)
^IBCN(365.2,
"FIA",365.2,0,0)
365.2P
"FIA",365.2,0,1)
y^n^f^^^^n
"FIA",365.2,0,10)

"FIA",365.2,0,11)

"FIA",365.2,0,"RLRO")

"FIA",365.2,0,"VR")
2.0^IB
"FIA",365.2,365.2)
0
"FIA",365.2,365.21)
0
"FIA",365.2,365.211)
0
"INIT")
EN^IBY497PO
"KRN",.402,1667,-1)
0^1
"KRN",.402,1667,0)
IBCNE GENERAL PARAMETER EDIT^3130703.1232^@^350.9^^@^3130912
"KRN",.402,1667,"DIAB",1,1,200,0)
OFFICE PHONE;REQ
"KRN",.402,1667,"DIAB",2,1,200,0)
EMAIL ADDRESS;REQ
"KRN",.402,1667,"DIAB",9,0,350.9,0)
CONTACT PERSON:
"KRN",.402,1667,"DR",1,350.9)
51.01;51.04;51.13;S:X="I" Y="@1";51.14;51.19;@1;51.16;^200^VA(200,^^S I(0,0)=D0 S Y(1)=$S($D(^IBE(350.9,D0,51)):^(51),1:"") S X=$P(Y(1),U,16),X=X S D(0)=+X S X=$S(D(0)>0:D(0),1:"");51.2;
"KRN",.402,1667,"DR",2,200)
.132R~;.151R~;
"KRN",.402,1747,-1)
0^2
"KRN",.402,1747,0)
IBCN PATIENT INSURANCE^3131009.1434^@^2^^@^3140115
"KRN",.402,1747,"%D",0)
^.4021^4^4^3131008^^
"KRN",.402,1747,"%D",1,0)
esg - 6/11/2007 - IB patch 371
"KRN",.402,1747,"%D",2,0)
 
"KRN",.402,1747,"%D",3,0)
New input template to handle the input/edit of fields in the patient 
"KRN",.402,1747,"%D",4,0)
insurance multiple (2.312) in the patient file.
"KRN",.402,1747,"DIAB",2,1,2.312,0)
INSURANCE TYPE;"INSURANCE COMPANY"
"KRN",.402,1747,"DIAB",4,1,2.312,0)
PT. RELATIONSHIP - HIPAA;"PT. RELATIONSHIP TO INSURED"
"KRN",.402,1747,"DIAB",11,1,2.312,1)
SUBSCRIBER ID (LONG);"SUBSCRIBER PRIMARY ID"
"KRN",.402,1747,"DIAB",14,1,2.312,2)
PATIENT ID;"PATIENT PRIMARY ID"
"KRN",.402,1747,"DR",1,2)
.3121;
"KRN",.402,1747,"DR",2,2.312)
I '$G(IBREG)!'$$KCHK^XUSRB("IB INSURANCE SUPERVISOR") S Y="@10";.01INSURANCE COMPANY~;@10;4.03PT. RELATIONSHIP TO INSURED~;S IBREL=X;I IBREL="" S Y="";I '$G(IBDFN) S Y="";F IBZ="VADM","VAPA" K ^UTILITY(IBZ,$J);
"KRN",.402,1747,"DR",2,2.312,1)
7.01//^S X=$$PIDEF^IBCNSP1($G(IBREL),7.01,$G(IBDFN));8;3;4.01;4.02;.2;1.09;4.05;4.06;W !;7.02SUBSCRIBER PRIMARY ID~;I '$$ASK^IBCNSP1("Do you want to enter/update Subscriber Secondary IDs") S Y="@30";S IB1ST("ID EDIT")=1;5.02;
"KRN",.402,1747,"DR",2,2.312,2)
I X="" S Y="@30";5.03;I X="" S Y="@30";5.04;I X="" S Y="@30";5.05;I X="" S Y="@30";5.06;I X="" S Y="@30";5.07;@30;I +$G(IBREL)=18 S Y="@20";W !;5.01PATIENT PRIMARY ID~;
"KRN",.402,1747,"DR",2,2.312,3)
I '$$ASK^IBCNSP1("Do you want to enter/update Patient Secondary IDs") S Y="@20";S IB1ST("ID EDIT")=1;5.08;I X="" S Y="@20";5.09;I X="" S Y="@20";5.1;I X="" S Y="@20";5.11;I X="" S Y="@20";5.12;I X="" S Y="@20";5.13;@20;W !;
"KRN",.402,1747,"DR",2,2.312,4)
3.01//^S X=$$PIDEF^IBCNSP1($G(IBREL),3.01,$G(IBDFN));3.12//^S X=$$PIDEF^IBCNSP1($G(IBREL),3.12,$G(IBDFN));3.02//^S X=$$PIDEF^IBCNSP1($G(IBREL),3.02,$G(IBDFN));3.03;3.06//^S X=$$PIDEF^IBCNSP1($G(IBREL),3.06,$G(IBDFN),1);
"KRN",.402,1747,"DR",2,2.312,5)
3.07//^S X=$$PIDEF^IBCNSP1($G(IBREL),3.07,$G(IBDFN),1);3.08//^S X=$$PIDEF^IBCNSP1($G(IBREL),3.08,$G(IBDFN),1);3.09//^S X=$$PIDEF^IBCNSP1($G(IBREL),3.09,$G(IBDFN),1);3.1//^S X=$$PIDEF^IBCNSP1($G(IBREL),3.1,$G(IBDFN),1);
"KRN",.402,1747,"DR",2,2.312,6)
3.11//^S X=$$PIDEF^IBCNSP1($G(IBREL),3.11,$G(IBDFN),1);
"KRN",19,2294,-1)
2^6
"KRN",19,2294,0)
IB SYSTEM DEFINITION MENU^MCCR System Definition Menu^^M^66481^IB SUPERVISOR^^^^^y^49
"KRN",19,2294,10,0)
^19.01IP^21^16
"KRN",19,2294,10,21,0)
11468^USI
"KRN",19,2294,10,21,"^")
IBCN UPDATE SUBSCRIBER INFO
"KRN",19,2294,"U")
MCCR SYSTEM DEFINITION MENU
"KRN",19,9749,-1)
2^9
"KRN",19,9749,0)
IBCNE IIV MENU^eIV Menu^^M^66481^^^^^^^49
"KRN",19,9749,10,0)
^19.01IP^10^10
"KRN",19,9749,10,10,0)
11469^MW
"KRN",19,9749,10,10,"^")
IBCNE POTENTIAL COB LIST
"KRN",19,9749,"U")
EIV MENU
"KRN",19,11468,-1)
0^7
"KRN",19,11468,0)
IBCN UPDATE SUBSCRIBER INFO^Update Subscriber Info^^R^^IB SUPERVISOR^^^^^^
"KRN",19,11468,1,0)
^^4^4^3130510^
"KRN",19,11468,1,1,0)
This option will update subscriber fields in the Insurance Type subfile 
"KRN",19,11468,1,2,0)
of the Patient file when the patient's relationship to the insured is 
"KRN",19,11468,1,3,0)
self and the field is currently blank and the policy is active.  It must 
"KRN",19,11468,1,4,0)
run in the background.
"KRN",19,11468,25)
OPT^IBCNUPD
"KRN",19,11468,"U")
UPDATE SUBSCRIBER INFO
"KRN",19,11469,-1)
0^8
"KRN",19,11469,0)
IBCNE POTENTIAL COB LIST^Medicare Potential COB Worklist^^R^^^^^^^^
"KRN",19,11469,1,0)
^19.06^3^3^3130510^^^
"KRN",19,11469,1,1,0)
Creates a list of those patients whom Medicare has identified in a 271 
"KRN",19,11469,1,2,0)
HL7 response message as having insurance subsequent to their Medicare 
"KRN",19,11469,1,3,0)
Insurance.
"KRN",19,11469,25)
EN^IBCNESI
"KRN",19,11469,"U")
MEDICARE POTENTIAL COB WORKLIS
"KRN",19,11474,-1)
1^1
"KRN",19,11474,0)
IBCN MEDICARE INSURANCE INTAKE
"KRN",101,4496,-1)
0^5
"KRN",101,4496,0)
IBCNE MEDICARE COB EE^Expand Entry^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4496,4)
^^^EE
"KRN",101,4496,10,0)
^101.01PA^^0
"KRN",101,4496,15)
D BLDSCRN^IBCNESI1
"KRN",101,4496,20)
D EXPND^IBCNESI1
"KRN",101,4496,26)

"KRN",101,4496,99)
62859,32537
"KRN",101,4497,-1)
0^1
"KRN",101,4497,0)
IBCNE MEDICARE COB^View Medicare 271 with subsequent insurance^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,4497,1,0)
^101.06^2^2^3130130^^
"KRN",101,4497,1,1,0)
Protocol menu item that lists 271 medicare patients with subsequent
"KRN",101,4497,1,2,0)
insurance
"KRN",101,4497,2,0)
^101.02A^1^1
"KRN",101,4497,2,1,0)
VMS
"KRN",101,4497,2,"B","VMS",1)

"KRN",101,4497,4)
26^4
"KRN",101,4497,10,0)
^101.01PA^1^1
"KRN",101,4497,10,1,0)
4496^EE^10^^^Expand Entry
"KRN",101,4497,10,1,1)
Expand Entry
"KRN",101,4497,10,1,"^")
IBCNE MEDICARE COB EE
"KRN",101,4497,15)

"KRN",101,4497,26)
D SHOW^VALM
"KRN",101,4497,28)
Select Action: 
"KRN",101,4497,99)
62934,66963
"KRN",101,4498,-1)
0^3
"KRN",101,4498,0)
IBCNE MEDICARE COB AC^Add Comments^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4498,1,0)
^^2^2^3130123^
"KRN",101,4498,1,1,0)
Add or Edit comments for this inquiry response pertaining to secondaryy
"KRN",101,4498,1,2,0)
insurance
"KRN",101,4498,2,0)
^101.02A^2^2
"KRN",101,4498,2,1,0)
EC
"KRN",101,4498,2,2,0)
AC
"KRN",101,4498,2,"B","AC",2)

"KRN",101,4498,2,"B","EC",1)

"KRN",101,4498,15)
D BLD^IBCNESI2
"KRN",101,4498,20)
D CMNT^IBCNESI2
"KRN",101,4498,21,0)
^101.021A^1^1
"KRN",101,4498,21,1,0)
IBIEN
"KRN",101,4498,21,"B","IBIEN",1)

"KRN",101,4498,99)
62941,50720
"KRN",101,4500,-1)
0^4
"KRN",101,4500,0)
IBCNE MEDICARE COB CS^Change Status^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4500,15)

"KRN",101,4500,20)
D STATUS^IBCNESI2
"KRN",101,4500,99)
62930,42094
"KRN",101,4501,-1)
0^2
"KRN",101,4501,0)
IBCNE MEDICARE COB DISP^Medicare Potential COB Worklist Display Detail^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,4501,4)
26^4
"KRN",101,4501,10,0)
^101.01PA^2^2
"KRN",101,4501,10,1,0)
4500^CS^10^
"KRN",101,4501,10,1,"^")
IBCNE MEDICARE COB CS
"KRN",101,4501,10,2,0)
4498^AC^20^
"KRN",101,4501,10,2,"^")
IBCNE MEDICARE COB AC
"KRN",101,4501,26)
D SHOW^VALM
"KRN",101,4501,28)
Select Action: 
"KRN",101,4501,99)
62941,50877
"KRN",409.61,686,-1)
0^3
"KRN",409.61,686,0)
IBCNE ELIGIBILITY/BENEFIT INFO^1^^80^6^21^1^1^^IBCNE ELIG BEN INFO MENU^eIV Elig/Benefit Information^^^
"KRN",409.61,686,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,686,"ARRAY")
 ^TMP(IBVSUB,$J,"DISP")
"KRN",409.61,686,"FNL")
D EXIT^IBCNES
"KRN",409.61,686,"HDR")
D HDR^IBCNES
"KRN",409.61,686,"HLP")
D HELP^IBCNES
"KRN",409.61,686,"INIT")
D INIT^IBCNES(IBVF,IBVIENS,.IBVEBFLG,IBVV,IBVSUB)
"KRN",409.61,710,-1)
0^2
"KRN",409.61,710,0)
IBCNE MEDICARE COB LIST^1^^80^5^19^0^1^Response^IBCNE MEDICARE COB^IBCNE MEDICARE COB LIST^1^^1
"KRN",409.61,710,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,710,"ARRAY")
 ^TMP("IBCNESI1",$J)
"KRN",409.61,710,"COL",0)
^409.621^11^7
"KRN",409.61,710,"COL",1,0)
PATIENT^4^22^Resp Rcv--Subscriber^^0
"KRN",409.61,710,"COL",3,0)
INSCO^48^29^INS COMPANY^
"KRN",409.61,710,"COL",7,0)
DOB^34^8^DOB
"KRN",409.61,710,"COL",8,0)
EMFLAG^47^1
"KRN",409.61,710,"COL",9,0)
STATUS^43^4^Stat
"KRN",409.61,710,"COL",10,0)
COUNTER^1^3
"KRN",409.61,710,"COL",11,0)
SSN^28^5^
"KRN",409.61,710,"COL","AIDENT",0,1)

"KRN",409.61,710,"COL","B","COUNTER",10)

"KRN",409.61,710,"COL","B","DOB",7)

"KRN",409.61,710,"COL","B","EMFLAG",8)

"KRN",409.61,710,"COL","B","INSCO",3)

"KRN",409.61,710,"COL","B","PATIENT",1)

"KRN",409.61,710,"COL","B","SSN",11)

"KRN",409.61,710,"COL","B","STATUS",9)

"KRN",409.61,710,"EXP")
 
"KRN",409.61,710,"FNL")
D EXIT^IBCNESI1
"KRN",409.61,710,"HDR")
D HDR^IBCNESI1
"KRN",409.61,710,"HLP")
D HELP^IBCNESI1
"KRN",409.61,710,"INIT")
D INIT^IBCNESI1
"KRN",409.61,712,-1)
0^1
"KRN",409.61,712,0)
IBCNE MEDICARE COB DISPLAY^1^^80^5^14^0^1^^IBCNE MEDICARE COB DISP^IBCNE MEDICARE COB DISPLAY^1^^1
"KRN",409.61,712,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,712,"ARRAY")
 ^TMP("IBCNESI2",$J)
"KRN",409.61,712,"COL",0)
^409.621^2^2
"KRN",409.61,712,"COL",1,0)
CODE^2^4^Code
"KRN",409.61,712,"COL",2,0)
PAYER^8^70^Payer
"KRN",409.61,712,"COL","B","CODE",1)

"KRN",409.61,712,"COL","B","PAYER",2)

"KRN",409.61,712,"FNL")
D EXIT^IBCNESI2
"KRN",409.61,712,"HDR")
D HDR^IBCNESI2
"KRN",409.61,712,"HLP")
D HELP^IBCNESI2
"KRN",409.61,712,"INIT")
D INIT^IBCNESI2
"MBREQ")
0
"ORD",7,.402)
.402;7;;;EDEOUT^DIFROMSO(.402,DA,"",XPDA);FPRE^DIFROMSI(.402,"",XPDA);EPRE^DIFROMSI(.402,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.402,DA,"",XPDA);DEL^DIFROMSK(.402,"",%)
"ORD",7,.402,0)
INPUT TEMPLATE
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"ORD",17,409.61)
409.61;17;1;;;;LME1^XPDIA1;;;LMDEL^XPDIA1
"ORD",17,409.61,0)
LIST TEMPLATE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",49,-1)
1^1
"PKG",49,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",49,20,0)
^9.402P^1^1
"PKG",49,20,1,0)
2^^IBAXDR
"PKG",49,20,1,1)

"PKG",49,20,"B",2,1)

"PKG",49,22,0)
^9.49I^1^1
"PKG",49,22,1,0)
2.0^2940321^2960627
"PKG",49,22,1,"PAH",1,0)
497^3140115
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
56
"RTN","IBCNBAC")
0^43^B51549169^B51548829
"RTN","IBCNBAC",1,0)
IBCNBAC ;ALB/ARH/DAOU/WCW-Ins Buffer: Individually Accept Insurance Buffer Fields ; 28-APR-03
"RTN","IBCNBAC",2,0)
 ;;2.0;INTEGRATED BILLING;**184,497**;21-MAR-94;Build 120
"RTN","IBCNBAC",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNBAC",4,0)
 ;
"RTN","IBCNBAC",5,0)
INS(IBBUFDA,IBINSDA,SKPBLANK) ; display a buffer entry's insurance company fields and an existing insurance company fields for comparison
"RTN","IBCNBAC",6,0)
 N IBEXTDA,IBFLD1,IBFLD2,X I '$G(IBBUFDA) Q
"RTN","IBCNBAC",7,0)
 S SKPBLANK=$G(SKPBLANK)
"RTN","IBCNBAC",8,0)
 ;
"RTN","IBCNBAC",9,0)
 S IBEXTDA=$G(IBINSDA)_","
"RTN","IBCNBAC",10,0)
 ;
"RTN","IBCNBAC",11,0)
 I +$P($G(^DIC(36,+IBEXTDA,0)),U,5) W !,?10,"Selected Insurance Company "_$$GET1^DIQ(36,IBEXTDA,.01)_" is Inactive!",!
"RTN","IBCNBAC",12,0)
 ;
"RTN","IBCNBAC",13,0)
 W @IOF
"RTN","IBCNBAC",14,0)
 W ! D WRTFLD("  Insurance Data:  Buffer Data                     Selected Insurance Company   ",0,80,"BU")
"RTN","IBCNBAC",15,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,20.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(36,IBEXTDA,.01),1:"<none selected>") D WRTLN("Company Name:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBAC",16,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,20.05),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(36,IBEXTDA,1),1:"") D WRTLN("Reimburse?:",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBAC",17,0)
 ;
"RTN","IBCNBAC",18,0)
 D FIELDS("INS","",SKPBLANK)
"RTN","IBCNBAC",19,0)
 ;
"RTN","IBCNBAC",20,0)
 Q
"RTN","IBCNBAC",21,0)
 ;
"RTN","IBCNBAC",22,0)
GRP(IBBUFDA,IBGRPDA,SKPBLANK) ; display a buffer entrys group insurance fields and an existing group/plan's fields for comparison
"RTN","IBCNBAC",23,0)
 N IBEXTDA,IBFLD1,IBFLD2,X I '$G(IBBUFDA) Q
"RTN","IBCNBAC",24,0)
 S SKPBLANK=$G(SKPBLANK)
"RTN","IBCNBAC",25,0)
 ;
"RTN","IBCNBAC",26,0)
 S IBEXTDA=$G(IBGRPDA)_","
"RTN","IBCNBAC",27,0)
 ;
"RTN","IBCNBAC",28,0)
 I +$P($G(^IBA(355.3,+IBEXTDA,0)),U,11) W !,?23,"Selected Group/Plan is Inactive!",!
"RTN","IBCNBAC",29,0)
 ;
"RTN","IBCNBAC",30,0)
 W @IOF
"RTN","IBCNBAC",31,0)
 W ! D WRTFLD(" Group/Plan Data:  Buffer Data                     Selected Group/Plan          ",0,80,"BU")
"RTN","IBCNBAC",32,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,20.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(355.3,IBEXTDA,.01),1:"<none selected>") D WRTLN("Company Name:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBAC",33,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,40.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(355.3,IBEXTDA,.02),1:"") D WRTLN("Is Group Plan?:",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBAC",34,0)
 ;
"RTN","IBCNBAC",35,0)
 D FIELDS("GRP","",SKPBLANK)
"RTN","IBCNBAC",36,0)
 ;
"RTN","IBCNBAC",37,0)
 Q
"RTN","IBCNBAC",38,0)
 ;
"RTN","IBCNBAC",39,0)
POLICY(IBBUFDA,IBPOLDA,SKPBLANK) ; display a buffer entry's patient policy fields and an existing patient policy's fields for comparison
"RTN","IBCNBAC",40,0)
 N DFN,IBEXTDA,IBFLD1,IBFLD2,X,Y,DIR,DIRUT I '$G(IBBUFDA) Q
"RTN","IBCNBAC",41,0)
 S SKPBLANK=$G(SKPBLANK)
"RTN","IBCNBAC",42,0)
 S DFN=+$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBAC",43,0)
 ;
"RTN","IBCNBAC",44,0)
 S IBEXTDA=$G(IBPOLDA)_","_DFN_","
"RTN","IBCNBAC",45,0)
 ;
"RTN","IBCNBAC",46,0)
 W @IOF
"RTN","IBCNBAC",47,0)
 W ! D WRTFLD("     Policy Data:  Buffer Data                     Selected Policy              ",0,80,"BU")
"RTN","IBCNBAC",48,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,20.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(2.312,IBEXTDA,.01),1:"<none selected>") D WRTLN("Company Name:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBAC",49,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,90.02),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(2.312,IBEXTDA,21),1:"") D WRTLN("Group #:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBAC",50,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,60.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(2,DFN,.01),1:"") D WRTLN("Patient Name:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBAC",51,0)
 S IBFLD1=$P($$GET1^DIQ(355.33,IBBUFDA,.1),"@"),IBFLD2=$S(+IBEXTDA:$P($$GET1^DIQ(2.312,IBEXTDA,1.03),"@"),1:"") D WRTLN("Last Verified:",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBAC",52,0)
 ;
"RTN","IBCNBAC",53,0)
 D FIELDS("POL","",SKPBLANK)
"RTN","IBCNBAC",54,0)
 ;
"RTN","IBCNBAC",55,0)
 I +$G(^IBA(355.33,IBBUFDA,61))!($$GET1^DIQ(2.312,IBEXTDA,2.1)="YES") D ESGHP(SKPBLANK)
"RTN","IBCNBAC",56,0)
 ;
"RTN","IBCNBAC",57,0)
 Q
"RTN","IBCNBAC",58,0)
 ;
"RTN","IBCNBAC",59,0)
ESGHP(SKPBLANK) ; display employee sponsored group health plan
"RTN","IBCNBAC",60,0)
 S SKPBLANK=$G(SKPBLANK)
"RTN","IBCNBAC",61,0)
 W !!
"RTN","IBCNBAC",62,0)
 ;
"RTN","IBCNBAC",63,0)
 D FIELDS("POL",1,SKPBLANK)
"RTN","IBCNBAC",64,0)
 ;
"RTN","IBCNBAC",65,0)
 Q
"RTN","IBCNBAC",66,0)
 ;
"RTN","IBCNBAC",67,0)
FIELDS(SET,ESGHP,SKPBLANK) ; accept each field and set into temp array
"RTN","IBCNBAC",68,0)
 N CHGCHK,IBFLDLST,IBFLDVAL,IBUSER,IBLABEL,EXTFILE,IBEXTFLD
"RTN","IBCNBAC",69,0)
 S ESGHP=$G(ESGHP),SKPBLANK=$G(SKPBLANK)
"RTN","IBCNBAC",70,0)
 ;
"RTN","IBCNBAC",71,0)
 K IBFLDS,IBADDS,IBLBLS
"RTN","IBCNBAC",72,0)
 ;
"RTN","IBCNBAC",73,0)
 S EXTFILE=+$P($T(@(SET_"DR")+1^IBCNBMI),";;",2)
"RTN","IBCNBAC",74,0)
 D FIELDS^IBCNBMI(SET_"FLD")
"RTN","IBCNBAC",75,0)
 ;
"RTN","IBCNBAC",76,0)
 S CHGCHK=0 ; Initialize variable to check for any items to accept
"RTN","IBCNBAC",77,0)
 S IBBUFFLD=0 F  S IBBUFFLD=$O(IBFLDS(IBBUFFLD)) Q:'IBBUFFLD  I '$D(IBADDS(IBBUFFLD)) D  Q:$G(IBUSER)<0
"RTN","IBCNBAC",78,0)
 . I '$$ESGHPFLD(ESGHP,IBBUFFLD) Q
"RTN","IBCNBAC",79,0)
 . ;
"RTN","IBCNBAC",80,0)
 . S IBEXTFLD=IBFLDS(IBBUFFLD),IBLABEL=IBLBLS(IBBUFFLD)_":"
"RTN","IBCNBAC",81,0)
 . S IBFLDVAL=$$DISPLAY(IBBUFFLD,EXTFILE,IBEXTFLD,IBLABEL)
"RTN","IBCNBAC",82,0)
 . I $P(IBFLDVAL,U,1)=$P(IBFLDVAL,U,2) Q
"RTN","IBCNBAC",83,0)
 . I SKPBLANK,$P(IBFLDVAL,U,1)="" Q
"RTN","IBCNBAC",84,0)
 . ;
"RTN","IBCNBAC",85,0)
 . S CHGCHK=1
"RTN","IBCNBAC",86,0)
 . S IBUSER=$$ACCEPT($P(IBFLDVAL,U,1),$P(IBFLDVAL,U,2)) Q:IBUSER<0
"RTN","IBCNBAC",87,0)
 . I +IBUSER S ^TMP($J,"IB BUFFER SELECTED",IBBUFFLD)=""
"RTN","IBCNBAC",88,0)
 ;
"RTN","IBCNBAC",89,0)
 S IBFLDLST="" ; allow selection of address data in a group rather than individually
"RTN","IBCNBAC",90,0)
 S IBBUFFLD=0 F  S IBBUFFLD=$O(IBFLDS(IBBUFFLD)) Q:'IBBUFFLD  I $D(IBADDS(IBBUFFLD)) D
"RTN","IBCNBAC",91,0)
 . I '$$ESGHPFLD(ESGHP,IBBUFFLD) Q
"RTN","IBCNBAC",92,0)
 . ;
"RTN","IBCNBAC",93,0)
 . S IBEXTFLD=IBFLDS(IBBUFFLD),IBLABEL=IBLBLS(IBBUFFLD)_":"
"RTN","IBCNBAC",94,0)
 . S IBFLDVAL=$$DISPLAY(IBBUFFLD,EXTFILE,IBEXTFLD,IBLABEL)
"RTN","IBCNBAC",95,0)
 . I $P(IBFLDVAL,U,1)=$P(IBFLDVAL,U,2) Q
"RTN","IBCNBAC",96,0)
 . I SKPBLANK,$P(IBFLDVAL,U,1)="" Q  ; Do not prompt for blanks, if skipping
"RTN","IBCNBAC",97,0)
 . S CHGCHK=1
"RTN","IBCNBAC",98,0)
 . S IBFLDLST=IBFLDLST_IBBUFFLD_U
"RTN","IBCNBAC",99,0)
 ;
"RTN","IBCNBAC",100,0)
 I IBFLDLST'="" S IBUSER=$$ACCEPTG Q:IBUSER<0  D
"RTN","IBCNBAC",101,0)
 . I +IBUSER F IBUSER=1:1 S IBBUFFLD=$P(IBFLDLST,U,IBUSER) Q:'IBBUFFLD  S ^TMP($J,"IB BUFFER SELECTED",IBBUFFLD)=""
"RTN","IBCNBAC",102,0)
 ;
"RTN","IBCNBAC",103,0)
 ; Display message if there were no changes to accept
"RTN","IBCNBAC",104,0)
 I CHGCHK=0 W !!,"There are no changes to be accepted, based on the method of update chosen."
"RTN","IBCNBAC",105,0)
 I CHGCHK=1 W !!,"End of changes for "_$S(SET="INS":"INSURANCE",SET="GRP":"GROUP",(SET="POL"&'ESGHP):"POLICY",1:"EMPLOYEE SPONSORED GROUP HEALTH PLAN")_" related data."
"RTN","IBCNBAC",106,0)
 K DIR
"RTN","IBCNBAC",107,0)
 D PAUSE^VALM1
"RTN","IBCNBAC",108,0)
 ;
"RTN","IBCNBAC",109,0)
 Q
"RTN","IBCNBAC",110,0)
 ;
"RTN","IBCNBAC",111,0)
ESGHPFLD(ESGHP,IBBUFFLD) ; return true if field should be included, if ESGHP thEN include all 61.* fields, else exclude those fields
"RTN","IBCNBAC",112,0)
 N IBX,IBY S IBX=1 S ESGHP=$G(ESGHP)
"RTN","IBCNBAC",113,0)
 S IBY=0 I IBBUFFLD>61,IBBUFFLD<61.99 S IBY=1
"RTN","IBCNBAC",114,0)
 I +IBY,'ESGHP S IBX=0
"RTN","IBCNBAC",115,0)
 I 'IBY,ESGHP S IBX=0
"RTN","IBCNBAC",116,0)
 Q IBX
"RTN","IBCNBAC",117,0)
 ;
"RTN","IBCNBAC",118,0)
ACCEPT(BUFDATA,EXTDATA) ; ask user if they want to accept the change, returns true if yes
"RTN","IBCNBAC",119,0)
 N IBX S IBX=0
"RTN","IBCNBAC",120,0)
 I $G(BUFDATA)=$G(EXTDATA) Q
"RTN","IBCNBAC",121,0)
 I BUFDATA="" S DIR("A")="Accept Change, Delete",DIR("?")="The Buffer field is null, accepting the change will result in the Insurance Company data ("_EXTDATA_") being deleted"
"RTN","IBCNBAC",122,0)
 I BUFDATA'="" S DIR("A")="Accept Change, Replace",DIR("?")="Accepting the change will result Buffer data ("_BUFDATA_") replacing the Insurance Company data ("_EXTDATA_")"
"RTN","IBCNBAC",123,0)
 S DIR(0)="Y",DIR("B")="No" D ^DIR I Y=1 S IBX=1
"RTN","IBCNBAC",124,0)
 I $D(DIRUT)!$D(DTOUT) S IBX=-1
"RTN","IBCNBAC",125,0)
 W !
"RTN","IBCNBAC",126,0)
 Q IBX
"RTN","IBCNBAC",127,0)
 ;
"RTN","IBCNBAC",128,0)
 ;
"RTN","IBCNBAC",129,0)
ACCEPTG() ; ask user if they want to accept the entire address change, returns true if yes
"RTN","IBCNBAC",130,0)
 N IBX S IBX=0
"RTN","IBCNBAC",131,0)
 S DIR("A")="Accept Address Change",DIR("?")="Accepting the change will result in the entire Buffer Address replacing the Insurance Company Address"
"RTN","IBCNBAC",132,0)
 S DIR(0)="Y",DIR("B")="No" D ^DIR I Y=1 S IBX=1
"RTN","IBCNBAC",133,0)
 I $D(DIRUT)!$D(DTOUT) S IBX=-1
"RTN","IBCNBAC",134,0)
 W !
"RTN","IBCNBAC",135,0)
 Q IBX
"RTN","IBCNBAC",136,0)
 ;
"RTN","IBCNBAC",137,0)
DISPLAY(BFLD,IFILE,IFLD,LABEL) ; extract, compare, write the two corresponding fields; one from buffer, one from ins files
"RTN","IBCNBAC",138,0)
 N BUFDATA,EXTDATA,IBOVER,IBMERG,IBATTR,IBDATA S EXTDATA=""
"RTN","IBCNBAC",139,0)
 S BUFDATA=$$GET1^DIQ(355.33,IBBUFDA,BFLD)
"RTN","IBCNBAC",140,0)
 I +IBEXTDA S EXTDATA=$$GET1^DIQ(IFILE,IBEXTDA,IFLD)
"RTN","IBCNBAC",141,0)
 S IBDATA=BUFDATA_U_EXTDATA
"RTN","IBCNBAC",142,0)
 ;
"RTN","IBCNBAC",143,0)
 S (IBOVER,IBMERG,IBATTR)=""
"RTN","IBCNBAC",144,0)
 I BUFDATA'=EXTDATA S (IBOVER,IBMERG,IBATTR)="B"
"RTN","IBCNBAC",145,0)
 ; When skipping blanks, display skipped items without bold
"RTN","IBCNBAC",146,0)
 I SKPBLANK,BUFDATA="" S (IBOVER,IBMERG,IBATTR)=""
"RTN","IBCNBAC",147,0)
 ;
"RTN","IBCNBAC",148,0)
 D WRTLN(LABEL,BUFDATA,EXTDATA,IBOVER,IBMERG,IBATTR)
"RTN","IBCNBAC",149,0)
 Q IBDATA
"RTN","IBCNBAC",150,0)
 ;
"RTN","IBCNBAC",151,0)
WRTLN(LABEL,FLD1,FLD2,OVER,MERG,ATTR) ; write a line of formatted data with label and two fields
"RTN","IBCNBAC",152,0)
 S ATTR=$G(ATTR),OVER=ATTR_$G(OVER),MERG=ATTR_$G(MERG)
"RTN","IBCNBAC",153,0)
 S LABEL=$J(LABEL,17)_"  ",FLD1=FLD1_$J("",29-$L(FLD1)),FLD2=FLD2_$J("",29-$L(FLD2))
"RTN","IBCNBAC",154,0)
 W !
"RTN","IBCNBAC",155,0)
 D WRTFLD(LABEL,0,19,ATTR),WRTFLD(FLD1,19,29,MERG)
"RTN","IBCNBAC",156,0)
 D WRTFLD(" | ",48,3,ATTR),WRTFLD(FLD2,51,29,OVER)
"RTN","IBCNBAC",157,0)
 Q
"RTN","IBCNBAC",158,0)
 ;
"RTN","IBCNBAC",159,0)
WRTFLD(STRING,COL,WD,ATTR) ; write an individual field with display attributes
"RTN","IBCNBAC",160,0)
 N ATTRB,ATTRE,DX,DY,X,Y
"RTN","IBCNBAC",161,0)
 S ATTRB="",ATTRB=$S(ATTR["B":$G(IOINHI),1:"")_$S(ATTR["U":$G(IOUON),1:"")
"RTN","IBCNBAC",162,0)
 S ATTRE="",ATTRE=$S(ATTR["B":$G(IOINORM),1:"")_$S(ATTR["U":$G(IOUOFF),1:"")
"RTN","IBCNBAC",163,0)
 ;
"RTN","IBCNBAC",164,0)
 S DX=COL,DY=$Y X IOXY
"RTN","IBCNBAC",165,0)
 W ATTRB,$E(STRING,1,WD),ATTRE
"RTN","IBCNBAC",166,0)
 S DX=(COL+WD),DY=$Y X IOXY
"RTN","IBCNBAC",167,0)
 Q
"RTN","IBCNBAR")
0^51^B44889067^B44012684
"RTN","IBCNBAR",1,0)
IBCNBAR ;ALB/ARH-Ins Buffer: process Accept and Reject ;15 Jan 2009
"RTN","IBCNBAR",2,0)
 ;;2.0;INTEGRATED BILLING;**82,240,345,413,416,497**;21-MAR-94;Build 120
"RTN","IBCNBAR",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBAR",4,0)
 ;
"RTN","IBCNBAR",5,0)
 ;
"RTN","IBCNBAR",6,0)
ACCEPT(IBBUFDA,DFN,IBINSDA,IBGRPDA,IBPOLDA,IBMVINS,IBMVGRP,IBMVPOL,IBNEWINS,IBNEWGRP,IBNEWPOL,IBELIG) ; move buffer data into Insurance files then cleanup
"RTN","IBCNBAR",7,0)
 ;    1) data moved into insurance files, new records created if needed or edit existing ones
"RTN","IBCNBAR",8,0)
 ;    2) complete some general functions that are executed whenever insurance is entered/edited
"RTN","IBCNBAR",9,0)
 ;    3) allow user to view buffer entry and new/updated insurance records
"RTN","IBCNBAR",10,0)
 ;    4) buffer ins/group/policy data deleted
"RTN","IBCNBAR",11,0)
 ;    5) buffer entry status updated
"RTN","IBCNBAR",12,0)
 ;
"RTN","IBCNBAR",13,0)
 N RESULT,IBSUPRES
"RTN","IBCNBAR",14,0)
 ;Set IBSUPRES to zero to not suppress I/O within Accept 
"RTN","IBCNBAR",15,0)
 S IBSUPRES=0
"RTN","IBCNBAR",16,0)
 ;
"RTN","IBCNBAR",17,0)
PROCESS ; process all changes selected by user, add/edit insurance files based
"RTN","IBCNBAR",18,0)
 ; on buffer data. Entry point for ACCEPAPI^IBCNICB (patch 413)
"RTN","IBCNBAR",19,0)
 ;
"RTN","IBCNBAR",20,0)
 N IVMINSUP,IBNEW,IBCDFN,RIEN S IBCDFN=IBPOLDA S:+IBNEWPOL IBNEW=1 D BEFORE^IBCNSEVT ; insurance event driver
"RTN","IBCNBAR",21,0)
 ;
"RTN","IBCNBAR",22,0)
 N DIR,X,Y,IBX,IBINSH,IBGRPH,IBPOLH S (IBINSH,IBGRPH,IBPOLH)="Updated" W:$G(IBSUPRES)'>0 " ...",!
"RTN","IBCNBAR",23,0)
 ;
"RTN","IBCNBAR",24,0)
 S RESULT(0)="-1^Add new INSURANCE COMPANY failed"
"RTN","IBCNBAR",25,0)
 I +IBNEWINS S IBINSDA=+$$NEWINS^IBCNBMN(IBBUFDA) G:'IBINSDA ACCPTQ  S IBINSH="Created",RESULT(1)="IBINSDA^"_IBINSDA
"RTN","IBCNBAR",26,0)
 ;
"RTN","IBCNBAR",27,0)
 S RESULT(0)="-1^Add new GROUP INSURANCE PLAN failed"
"RTN","IBCNBAR",28,0)
 I +IBNEWGRP S IBGRPDA=+$$NEWGRP^IBCNBMN(IBBUFDA,+IBINSDA) G:'IBGRPDA ACCPTQ S IBGRPH="Created",RESULT(2)="IBGRPDA^"_IBGRPDA
"RTN","IBCNBAR",29,0)
 ;
"RTN","IBCNBAR",30,0)
 S RESULT(0)="-1^Add new patient insurance policy failed"
"RTN","IBCNBAR",31,0)
 I +IBNEWPOL S IBPOLDA=+$$NEWPOL^IBCNBMN(IBBUFDA,+IBINSDA,+IBGRPDA) G:'IBPOLDA ACCPTQ S IBPOLH="Created",RESULT(3)="IBPOLDA^"_IBPOLDA
"RTN","IBCNBAR",32,0)
 ;
"RTN","IBCNBAR",33,0)
 ;Only do this check for ICB ACCEPAPI^IBCNICB interface
"RTN","IBCNBAR",34,0)
 S RESULT(0)="-1^Move TYPE parameter value="_IBMVINS_" is invalid"
"RTN","IBCNBAR",35,0)
 I $G(IBSUPRES)>0,"^1^2^3^"'[("^"_IBMVINS_"^") Q
"RTN","IBCNBAR",36,0)
 ;
"RTN","IBCNBAR",37,0)
 S RESULT(0)="-1^Move buffer data to insurance files failed"
"RTN","IBCNBAR",38,0)
 I +IBINSDA,+IBMVINS D INS^IBCNBMI(IBBUFDA,IBINSDA,+IBMVINS,.RESULT) W:$G(IBSUPRES)'>0 !,"Insurance Company "_IBINSH_"..."
"RTN","IBCNBAR",39,0)
 I +IBINSDA,+IBMVGRP,+IBGRPDA D 
"RTN","IBCNBAR",40,0)
 . D GRP^IBCNBMI(IBBUFDA,IBGRPDA,+IBMVGRP,.RESULT)
"RTN","IBCNBAR",41,0)
 . ; For ICB Interface ensure INDIVIDUAL POLICY PATIENT (.1) field is
"RTN","IBCNBAR",42,0)
 . ; appropriate for IS THIS A GROUP POLICY? (.02) field
"RTN","IBCNBAR",43,0)
 . I $G(IBSUPRES)>0 D
"RTN","IBCNBAR",44,0)
 . . N IBFLDS,IBISGRP,IBPAT
"RTN","IBCNBAR",45,0)
 . . S IBISGRP=$$GET1^DIQ(355.3,IBGRPDA,.02,"I")
"RTN","IBCNBAR",46,0)
 . . S IBPAT=$$GET1^DIQ(355.3,IBGRPDA,.1,"I")
"RTN","IBCNBAR",47,0)
 . . ;Quit if Group Policy and .1 field isn't populated
"RTN","IBCNBAR",48,0)
 . . I IBISGRP>0,IBPAT'>0 Q
"RTN","IBCNBAR",49,0)
 . . ;Quit if Individual Policy and .1 field is populated.
"RTN","IBCNBAR",50,0)
 . . I IBISGRP'>0,IBPAT>0 Q
"RTN","IBCNBAR",51,0)
 . . ;Delete .1 field if Group Policy
"RTN","IBCNBAR",52,0)
 . . I IBISGRP>0 S IBFLDS(355.3,IBGRPDA_",",.1)="@"
"RTN","IBCNBAR",53,0)
 . . I IBISGRP'>0 S IBFLDS(355.3,IBGRPDA_",",.1)=DFN
"RTN","IBCNBAR",54,0)
 . . D FILE^DIE("","IBFLDS","IBERR")
"RTN","IBCNBAR",55,0)
 . W:$G(IBSUPRES)'>0 !,"Group/Plan "_IBGRPH_"..."
"RTN","IBCNBAR",56,0)
 I +IBINSDA,+IBMVPOL,+IBGRPDA,+IBPOLDA D POLICY^IBCNBMI(IBBUFDA,IBPOLDA,+IBMVPOL,.RESULT) W:$G(IBSUPRES)'>0 !,"Patient Policy "_IBPOLH_"..."
"RTN","IBCNBAR",57,0)
 I +IBELIG S RIEN=$O(^IBCN(365,"AF",IBBUFDA,""),-1) I RIEN D GRPFILE^IBCNEHL1(DFN,IBPOLDA,RIEN,0),EBFILE^IBCNEHL1(DFN,IBPOLDA,RIEN,0) W:$G(IBSUPRES)'>0 !,"Eligibility/Benfits data Updated..."
"RTN","IBCNBAR",58,0)
 ;
"RTN","IBCNBAR",59,0)
 ;Only do this update for ICB ACCEPAPI^IBCNICB interface
"RTN","IBCNBAR",60,0)
 I $G(IBSUPRES)>0,+IBMVPOL,+IBGRPDA,+IBPOLDA,'IBNEWPOL D UPDPOL^IBCNICB(.RESULT,IBBUFDA,DFN,IBINSDA,IBGRPDA,IBPOLDA)
"RTN","IBCNBAR",61,0)
 ;
"RTN","IBCNBAR",62,0)
CLEANUP ; general updates and checks done whenever insurance is added/edited and clean up buffer file
"RTN","IBCNBAR",63,0)
 N IBSOURCE S IBSOURCE=$P($G(^IBA(355.33,IBBUFDA,0)),U,3)
"RTN","IBCNBAR",64,0)
 ;
"RTN","IBCNBAR",65,0)
 ;Don't do PAT^IBCNBMI for ICB ACCEPAPI^IBCNICB interface
"RTN","IBCNBAR",66,0)
 I $G(IBSUPRES)'>0,+IBPOLDA D PAT^IBCNBMI(DFN,IBPOLDA) ; update DOB&SSN of Pat Ins from Pat file
"RTN","IBCNBAR",67,0)
 D POL^IBCNSU41(DFN) ; update Tricare sponsor data
"RTN","IBCNBAR",68,0)
 D COVERED^IBCNSM31(DFN) ; update 'Covered by Insurance' field (2,.3192
"RTN","IBCNBAR",69,0)
 I +IBSOURCE=3 D IVM(1,IBBUFDA,$G(IVMREPTR),$G(IBSUPRES)) ; update/notify IVM
"RTN","IBCNBAR",70,0)
 ;Suppress Write in $$DUPCO^IBCNSOK1 if called from ICB Interface
"RTN","IBCNBAR",71,0)
 I +IBINSDA,+IBPOLDA S IBX=$$DUPCO^IBCNSOK1(DFN,IBINSDA,IBPOLDA,$S($G(IBSUPRES)>0:0,1:1)) ; warning if duplicate policy added for patient
"RTN","IBCNBAR",72,0)
 S RESULT(0)="0"_$S($G(IBX):"^Warning - Duplicate or inconsistent insurance data",1:"")
"RTN","IBCNBAR",73,0)
 ;
"RTN","IBCNBAR",74,0)
 ;Suppress Write in $$DUPPOL^IBCNSOK1 if called from ICB Interface
"RTN","IBCNBAR",75,0)
 I +IBGRPDA S IBX=$$DUPPOL^IBCNSOK1(IBGRPDA,$S($G(IBSUPRES)>0:0,1:1)) ; warning if duplicate plan was added
"RTN","IBCNBAR",76,0)
 S:IBX RESULT(0)=RESULT(0)_"^Warning - Duplicate or inconsistent policy data"
"RTN","IBCNBAR",77,0)
 ;
"RTN","IBCNBAR",78,0)
 ;Suppress Write in $$PTHLD^IBOHCR if called from ICB Interface
"RTN","IBCNBAR",79,0)
 I +IBNEWPOL I +$$PTHLD^IBOHCR(DFN,1,$S($G(IBSUPRES)>0:0,1:1)) D
"RTN","IBCNBAR",80,0)
 . W:$G(IBSUPRES)'>0 !!,"Patient's bills On Hold date updated due to new insurance."
"RTN","IBCNBAR",81,0)
 . S RESULT(0)=RESULT(0)_"^Patient's bills On Hold date updated due to new insurance"
"RTN","IBCNBAR",82,0)
 ;
"RTN","IBCNBAR",83,0)
 I $$HOLD^IBCNBLL(DFN) D
"RTN","IBCNBAR",84,0)
 . W:$G(IBSUPRES)'>0 !!,"There are bills On Hold for this patient."
"RTN","IBCNBAR",85,0)
 . S RESULT(0)=RESULT(0)_"^There are bills On Hold for this patient"
"RTN","IBCNBAR",86,0)
 ;
"RTN","IBCNBAR",87,0)
 ;Suppress DIR call functionality for ICB ACCEPAPI^IBCNICB interface
"RTN","IBCNBAR",88,0)
 D:$G(IBSUPRES)'>0
"RTN","IBCNBAR",89,0)
 . W !! S DIR(0)="FO",DIR("A")="Press 'V' to view the changes or Return to continue" D ^DIR
"RTN","IBCNBAR",90,0)
 . I Y="V"!(Y="v") W !! D INS^IBCNBCD(IBBUFDA,IBINSDA),WAIT^IBCNBUH,GRP^IBCNBCD(IBBUFDA,IBGRPDA),WAIT^IBCNBUH,POLICY^IBCNBCD(IBBUFDA,IBPOLDA),WAIT^IBCNBUH
"RTN","IBCNBAR",91,0)
 ;
"RTN","IBCNBAR",92,0)
 ; if source is eIV, update insurance record field in transmission queue (365.1/.13)
"RTN","IBCNBAR",93,0)
 I $P(^IBA(355.33,IBBUFDA,0),U,3)=5 D UPDIREC^IBCNEHL3($O(^IBCN(365,"AF",IBBUFDA,"")),IBPOLDA)
"RTN","IBCNBAR",94,0)
 ; update buffer file entry so only stub remains and status is changed
"RTN","IBCNBAR",95,0)
 D STATUS^IBCNBEE(IBBUFDA,"A",IBNEWINS,IBNEWGRP,IBNEWPOL) ; update buffer entry's status to accepted
"RTN","IBCNBAR",96,0)
 D DELDATA^IBCNBED(IBBUFDA) ; delete buffer's insurance/patient data
"RTN","IBCNBAR",97,0)
 ;
"RTN","IBCNBAR",98,0)
 S IBCDFN=IBPOLDA S:+IBSOURCE=3 IVMINSUP=1 D AFTER^IBCNSEVT,^IBCNSEVT ; insurance event driver
"RTN","IBCNBAR",99,0)
 ;
"RTN","IBCNBAR",100,0)
ACCPTQ Q
"RTN","IBCNBAR",101,0)
 ;
"RTN","IBCNBAR",102,0)
REJECT(IBBUFDA) ; process a buffer entry reject
"RTN","IBCNBAR",103,0)
 ;    1) update/notify IVM
"RTN","IBCNBAR",104,0)
 ;    2) buffer ins/group/policy data deleted
"RTN","IBCNBAR",105,0)
 ;    3) buffer entry status updated
"RTN","IBCNBAR",106,0)
 ;    4) if patient has no other active insurance then release any patient bills On Hold
"RTN","IBCNBAR",107,0)
 ;
"RTN","IBCNBAR",108,0)
 N IBSUPRES,RESULT
"RTN","IBCNBAR",109,0)
 ;Set IBSUPRES to 0 to not suppress I/O within REJECT
"RTN","IBCNBAR",110,0)
 S IBSUPRES=0
"RTN","IBCNBAR",111,0)
 ;
"RTN","IBCNBAR",112,0)
REJPROC ;Entry point for REJECAPI^IBCNICB (Patch 413)
"RTN","IBCNBAR",113,0)
 ;
"RTN","IBCNBAR",114,0)
 N DFN S DFN=+$G(^IBA(355.33,+IBBUFDA,60))
"RTN","IBCNBAR",115,0)
 S RESULT="-1^PATIENT IEN MISSING FROM BUFFER ENTRY" Q:'$G(DFN)
"RTN","IBCNBAR",116,0)
 I +$P($G(^IBA(355.33,+IBBUFDA,0)),U,3)=3 D IVM(0,IBBUFDA,$G(IVMREPTR),$G(IBSUPRES))
"RTN","IBCNBAR",117,0)
 ;
"RTN","IBCNBAR",118,0)
 S RESULT=0
"RTN","IBCNBAR",119,0)
 D STATUS^IBCNBEE(+IBBUFDA,"R",0,0,0),DELDATA^IBCNBED(+IBBUFDA) W:$G(IBSUPRES)'>0 " ... done."
"RTN","IBCNBAR",120,0)
 ;
"RTN","IBCNBAR",121,0)
 I +DFN,'$$INSURED^IBCNS1(DFN),'$$BUFFER^IBCNBU1(DFN) D
"RTN","IBCNBAR",122,0)
 . ;Suppress Write in $$PTHLD^IBOHCR if called from ICB Interface
"RTN","IBCNBAR",123,0)
 . I +$$PTHLD^IBOHCR(DFN,2,$S($G(IBSUPRES)>0:0,1:1)) D
"RTN","IBCNBAR",124,0)
 . . I $G(IBSUPRES)'>0 W !!,"Patient has no other active Insurance.",!,"All patient bills On Hold waiting for Insurance to be released." D WAIT^IBCNBUH
"RTN","IBCNBAR",125,0)
 . . S RESULT=RESULT_"^Patient has no other active Insurance.  All patient bills On Hold waiting for Insurance to be released."
"RTN","IBCNBAR",126,0)
 ;
"RTN","IBCNBAR",127,0)
 Q
"RTN","IBCNBAR",128,0)
 ;
"RTN","IBCNBAR",129,0)
 ;
"RTN","IBCNBAR",130,0)
IVM(AR,IBBUFDA,IVMREPTR,IBSUPRES) ; IVM must be notified whenever a buffer entry
"RTN","IBCNBAR",131,0)
 ; that originated in IVM is accepted or rejected. This lets IVM clean up
"RTN","IBCNBAR",132,0)
 ; its files since IVM also has a buffer type file of insurance uploaded
"RTN","IBCNBAR",133,0)
 ; from the IVM center.
"RTN","IBCNBAR",134,0)
 ; If rejected and Interactive Reads not suppressed, IVM then ask the 
"RTN","IBCNBAR",135,0)
 ; user for a reason it was rejected
"RTN","IBCNBAR",136,0)
 ; input:  AR = 1 if accepted, 0 if rejected
"RTN","IBCNBAR",137,0)
 ;    IBBUFDA = Internal Entry Number to 355.33 file
"RTN","IBCNBAR",138,0)
 ;   IVMREPTR = Internal Entry Number to 301.91 file (Optional)
"RTN","IBCNBAR",139,0)
 ;   IBSUPRES = If equals 1, suppress writes and interactive reads
"RTN","IBCNBAR",140,0)
 ;
"RTN","IBCNBAR",141,0)
 N DFN,IBX,IBY I $P($G(^IBA(355.33,+IBBUFDA,0)),U,3)'=3 Q
"RTN","IBCNBAR",142,0)
 ;
"RTN","IBCNBAR",143,0)
 S DFN=+$G(^IBA(355.33,+IBBUFDA,60))
"RTN","IBCNBAR",144,0)
 S IBX=$P($G(^IBA(355.33,+IBBUFDA,20)),U,1)_U_$P($G(^IBA(355.33,+IBBUFDA,21)),U,1)_U_$P($G(^IBA(355.33,+IBBUFDA,90)),U,2)  ; IB*2.0*497 (vd)
"RTN","IBCNBAR",145,0)
 ;
"RTN","IBCNBAR",146,0)
 S IBY=$$UPDATE^IVMLINS4(DFN,AR,IBX,$G(IVMREPTR),$G(IBSUPRES))
"RTN","IBCNBAR",147,0)
 Q
"RTN","IBCNBAR",148,0)
 ;
"RTN","IBCNBCD")
0^32^B99276499^B87228703
"RTN","IBCNBCD",1,0)
IBCNBCD ;ALB/ARH - Ins Buffer: display/compare buffer and existing ins ;1 Jun 97
"RTN","IBCNBCD",2,0)
 ;;2.0;INTEGRATED BILLING;**82,251,361,371,416,438,452,497**;21-MAR-94;Build 120
"RTN","IBCNBCD",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBCD",4,0)
 ;
"RTN","IBCNBCD",5,0)
INS(IBBUFDA,IBINSDA) ; display a buffer entry's insurance company fields and
"RTN","IBCNBCD",6,0)
 ; an existing insurance company's fields for comparison
"RTN","IBCNBCD",7,0)
 N IBEXTDA,IBFLD1,IBFLD2,X I '$G(IBBUFDA) Q
"RTN","IBCNBCD",8,0)
 ;
"RTN","IBCNBCD",9,0)
 S IBEXTDA=$G(IBINSDA)_","
"RTN","IBCNBCD",10,0)
 ;
"RTN","IBCNBCD",11,0)
 I +$P($G(^DIC(36,+IBEXTDA,0)),U,5) W !,?10,"Selected Insurance Company "_$$GET1^DIQ(36,IBEXTDA,.01)_" is Inactive!",!
"RTN","IBCNBCD",12,0)
 ;
"RTN","IBCNBCD",13,0)
 W ! D WRTFLD("  Insurance Data:  Buffer Data                     Selected Insurance Company   ",0,80,"BU")
"RTN","IBCNBCD",14,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,20.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(36,IBEXTDA,.01),1:"<none selected>") D WRTLN("Company Name:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBCD",15,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,20.05),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(36,IBEXTDA,1),1:"") D WRTLN("Reimburse?:",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",16,0)
 ;
"RTN","IBCNBCD",17,0)
 D DISPLAY(20.02,36,.131,"Phone Number:")
"RTN","IBCNBCD",18,0)
 D DISPLAY(20.03,36,.132,"Billing Phone:")
"RTN","IBCNBCD",19,0)
 D DISPLAY(20.04,36,.133,"Pre-Cert Phone:")
"RTN","IBCNBCD",20,0)
 D DISPLAY(21.01,36,.111,"Street [Line 1]:")
"RTN","IBCNBCD",21,0)
 D DISPLAY(21.02,36,.112,"Street [Line 2]:")
"RTN","IBCNBCD",22,0)
 D DISPLAY(21.03,36,.113,"Street [Line 3]:")
"RTN","IBCNBCD",23,0)
 D DISPLAY(21.04,36,.114,"City:")
"RTN","IBCNBCD",24,0)
 D DISPLAY(21.05,36,.115,"State:")
"RTN","IBCNBCD",25,0)
 D DISPLAY(21.06,36,.116,"Zip Code:")
"RTN","IBCNBCD",26,0)
 ;
"RTN","IBCNBCD",27,0)
 S IBFLD1="(bold=accepted on Merge)",IBFLD2="(bold=replaced on Overwrite)" D WRTLN("",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",28,0)
 Q
"RTN","IBCNBCD",29,0)
 ;
"RTN","IBCNBCD",30,0)
GRP(IBBUFDA,IBGRPDA) ; display a buffer entry's group insurance fields and an existing group/plan's fields for comparison
"RTN","IBCNBCD",31,0)
 N IBEXTDA,IBFLD1,IBFLD2,X I '$G(IBBUFDA) Q
"RTN","IBCNBCD",32,0)
 ;
"RTN","IBCNBCD",33,0)
 S IBEXTDA=$G(IBGRPDA)_","
"RTN","IBCNBCD",34,0)
 ;
"RTN","IBCNBCD",35,0)
 I +$P($G(^IBA(355.3,+IBEXTDA,0)),U,11) W !,?23,"Selected Group/Plan is Inactive!",!
"RTN","IBCNBCD",36,0)
 ;
"RTN","IBCNBCD",37,0)
 W ! D WRTFLD(" Group/Plan Data:  Buffer Data                     Selected Group/Plan          ",0,80,"BU")
"RTN","IBCNBCD",38,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,20.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(355.3,IBEXTDA,.01),1:"<none selected>") D WRTLN("Company Name:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBCD",39,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,40.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(355.3,IBEXTDA,.02),1:"") D WRTLN("Is Group Plan?:",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",40,0)
 ;
"RTN","IBCNBCD",41,0)
 D DISPLAY(90.01,355.3,2.01,"Group Name:")
"RTN","IBCNBCD",42,0)
 D DISPLAY(90.02,355.3,2.02,"Group Number:")
"RTN","IBCNBCD",43,0)
 D DISPLAY(40.1,355.3,6.02,"BIN:") ;;Daou/EEN - adding BIN and PCN
"RTN","IBCNBCD",44,0)
 D DISPLAY(40.11,355.3,6.03,"PCN:")
"RTN","IBCNBCD",45,0)
 D DISPLAY(40.04,355.3,.05,"Require UR:")
"RTN","IBCNBCD",46,0)
 D DISPLAY(40.05,355.3,.06,"Require Pre-Cert:")
"RTN","IBCNBCD",47,0)
 D DISPLAY(40.06,355.3,.12,"Require Amb Cert:")
"RTN","IBCNBCD",48,0)
 D DISPLAY(40.07,355.3,.07,"Exclude Pre-Cond:")
"RTN","IBCNBCD",49,0)
 D DISPLAY(40.08,355.3,.08,"Benefits Assign:")
"RTN","IBCNBCD",50,0)
 D DISPLAY(40.09,355.3,.09,"Type of Plan:")
"RTN","IBCNBCD",51,0)
 ;
"RTN","IBCNBCD",52,0)
 S IBFLD1="(bold=accepted on merge)",IBFLD2="(bold=replaced on overwrite)" D WRTLN("",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",53,0)
 Q
"RTN","IBCNBCD",54,0)
 ;
"RTN","IBCNBCD",55,0)
POLICY(IBBUFDA,IBPOLDA) ; display a buffer entry's patient policy fields and an existing patient policy's fields for comparison
"RTN","IBCNBCD",56,0)
 N DFN,IBEXTDA,IBFLD1,IBFLD2,X,Y,DIR,DIRUT I '$G(IBBUFDA) Q
"RTN","IBCNBCD",57,0)
 S DFN=+$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBCD",58,0)
 ;
"RTN","IBCNBCD",59,0)
 S IBEXTDA=$G(IBPOLDA)_","_DFN_","
"RTN","IBCNBCD",60,0)
 ;
"RTN","IBCNBCD",61,0)
 W ! D WRTFLD("     Policy Data:  Buffer Data                     Selected Policy              ",0,80,"BU")
"RTN","IBCNBCD",62,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,20.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(2.312,IBEXTDA,.01),1:"<none selected>") D WRTLN("Company Name:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBCD",63,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,90.02),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(2.312,IBEXTDA,21),1:"") D WRTLN("Group #:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBCD",64,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,60.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(2,DFN,.01),1:"") D WRTLN("Patient Name:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBCD",65,0)
 S IBFLD1=$P($$GET1^DIQ(355.33,IBBUFDA,.1),"@"),IBFLD2=$S(+IBEXTDA:$P($$GET1^DIQ(2.312,IBEXTDA,1.03),"@"),1:"") D WRTLN("Last Verified:",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",66,0)
 ;
"RTN","IBCNBCD",67,0)
 D DISPLAY(60.02,2.312,8,"Effective Date:")
"RTN","IBCNBCD",68,0)
 D DISPLAY(60.03,2.312,3,"Expiration Date:")
"RTN","IBCNBCD",69,0)
 D DISPLAY(90.03,2.312,7.02,"Subscriber Id:")
"RTN","IBCNBCD",70,0)
 D DISPLAY(60.05,2.312,6,"Whose Insurance:")
"RTN","IBCNBCD",71,0)
 D DISPLAY(60.06,2.312,16,"Relationship:")
"RTN","IBCNBCD",72,0)
 D DISPLAY(60.15,2.312,4.05,"Rx Relationship:")
"RTN","IBCNBCD",73,0)
 D DISPLAY(60.16,2.312,4.06,"Rx Person Code:")
"RTN","IBCNBCD",74,0)
 D DISPLAY(91.01,2.312,7.01,"Name of Insured:")
"RTN","IBCNBCD",75,0)
 D DISPLAY(60.08,2.312,3.01,"Insured's DOB:")
"RTN","IBCNBCD",76,0)
 D DISPLAY(60.09,2.312,3.05,"Insured's SSN:")
"RTN","IBCNBCD",77,0)
 D DISPLAY(60.13,2.312,3.12,"Insured's SEX:")
"RTN","IBCNBCD",78,0)
 D DISPLAY(60.1,2.312,4.01,"Primary Provider:")
"RTN","IBCNBCD",79,0)
 D DISPLAY(60.11,2.312,4.02,"Provider Phone:")
"RTN","IBCNBCD",80,0)
 D DISPLAY(60.12,2.312,.2,"Coor of Benefits:")
"RTN","IBCNBCD",81,0)
 D DISPLAY(61.01,2.312,2.1,"Emp Sponsored?:")
"RTN","IBCNBCD",82,0)
 D DISPLAY(62.01,2.312,5.01,"Patient Id:")
"RTN","IBCNBCD",83,0)
 D DISPLAY(62.02,2.312,3.06,"Subscr Str Ln 1:")
"RTN","IBCNBCD",84,0)
 D DISPLAY(62.03,2.312,3.07,"Subscr Str Ln 2:")
"RTN","IBCNBCD",85,0)
 D DISPLAY(62.04,2.312,3.08,"Subscr City:")
"RTN","IBCNBCD",86,0)
 D DISPLAY(62.05,2.312,3.09,"Subscr State:")
"RTN","IBCNBCD",87,0)
 D DISPLAY(62.06,2.312,3.1,"Subscr Zip:")
"RTN","IBCNBCD",88,0)
 D DISPLAY(62.07,2.312,3.13,"Subscr Country:")
"RTN","IBCNBCD",89,0)
 D DISPLAY(62.08,2.312,3.14,"Subscr Subdiv:")
"RTN","IBCNBCD",90,0)
 ;
"RTN","IBCNBCD",91,0)
 I +$G(^IBA(355.33,IBBUFDA,61))!($$GET1^DIQ(2.312,IBEXTDA,2.1)="YES") D ESGHP
"RTN","IBCNBCD",92,0)
 ;
"RTN","IBCNBCD",93,0)
 S IBFLD1="(bold=accepted on merge)",IBFLD2="(bold=replaced on overwrite)" D WRTLN("",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",94,0)
 ;
"RTN","IBCNBCD",95,0)
 Q
"RTN","IBCNBCD",96,0)
 ;
"RTN","IBCNBCD",97,0)
ESGHP ; display employee sponsored group health plan
"RTN","IBCNBCD",98,0)
 W ! S DIR(0)="E",DIR("A")="Enter RETURN to continue" D ^DIR W ! Q:$D(DIRUT)
"RTN","IBCNBCD",99,0)
 ;
"RTN","IBCNBCD",100,0)
 D DISPLAY(61.02,2.312,2.015,"Employer Name:")
"RTN","IBCNBCD",101,0)
 D DISPLAY(61.03,2.312,2.11,"Emp Status:")
"RTN","IBCNBCD",102,0)
 D DISPLAY(61.04,2.312,2.12,"Retirement Date:")
"RTN","IBCNBCD",103,0)
 D DISPLAY(61.05,2.312,2.01,"Send to Employer:")
"RTN","IBCNBCD",104,0)
 D DISPLAY(61.06,2.312,2.02,"Emp Street Ln 1:")
"RTN","IBCNBCD",105,0)
 D DISPLAY(61.07,2.312,2.03,"Emp Street Ln 2:")
"RTN","IBCNBCD",106,0)
 D DISPLAY(61.08,2.312,2.04,"Emp Street Ln 3:")
"RTN","IBCNBCD",107,0)
 D DISPLAY(61.09,2.312,2.05,"Emp City:")
"RTN","IBCNBCD",108,0)
 D DISPLAY(61.1,2.312,2.06,"Emp State:")
"RTN","IBCNBCD",109,0)
 D DISPLAY(61.11,2.312,2.07,"Emp Zip Code:")
"RTN","IBCNBCD",110,0)
 D DISPLAY(61.12,2.312,2.08,"Emp Phone:")
"RTN","IBCNBCD",111,0)
 ;
"RTN","IBCNBCD",112,0)
 Q
"RTN","IBCNBCD",113,0)
 ;
"RTN","IBCNBCD",114,0)
ELIG(IBBUFDA,IBPOLDA) ; display eligibility/benefit data
"RTN","IBCNBCD",115,0)
 N ATTR,BRESTR,BRELEN,BRPSTR,BRPLEN,CMPSTR,CMPLEN,DFN,EBISTR,EBILEN,EX,HCSSTR,HCSLEN,I,I1,IBVEBCOL,LEN,RESPIEN
"RTN","IBCNBCD",116,0)
 N RDATA,IDATA,NODATA,NOIDATA,ENDSEC,NOHSTR,NOHLEN,NOCSTR,NOCLEN,NOBSTR,NOBLEN,GRPSTR,GRPLEN,SECEND
"RTN","IBCNBCD",117,0)
 S GRPSTR="Eligibility/Group Plan Information",GRPLEN=$L(GRPSTR)  ;IB*2*497 
"RTN","IBCNBCD",118,0)
 S EBISTR="Eligibility/Benefit Information",EBILEN=$L(EBISTR)
"RTN","IBCNBCD",119,0)
 S CMPSTR="Composite Medical Procedure Information",CMPLEN=$L(CMPSTR)
"RTN","IBCNBCD",120,0)
 S HCSSTR="Health Care Service Delivery",HCSLEN=$L(HCSSTR)
"RTN","IBCNBCD",121,0)
 S BRESTR="Benefit Related Entity",BRELEN=$L(BRESTR)
"RTN","IBCNBCD",122,0)
 S BRPSTR="Benefit Related Provider Information",BRPLEN=$L(BRPSTR)
"RTN","IBCNBCD",123,0)
 S NOHSTR="   No Health Care Service Delivery data on file for this EB record.",NOHLEN=$L(NOHSTR)
"RTN","IBCNBCD",124,0)
 S NOCSTR="   No Composite Medical Procedure Information data on file for this EB record.",NOCLEN=$L(NOCSTR)
"RTN","IBCNBCD",125,0)
 S NOBSTR="   No Benefit Related Entity data on file for this EB record.",NOBLEN=$L(NOBSTR)
"RTN","IBCNBCD",126,0)
 S NODATA=1,NOIDATA=0,EX=0
"RTN","IBCNBCD",127,0)
 ; get the last response and make sure it contains EB data
"RTN","IBCNBCD",128,0)
 I $G(IBBUFDA) S RESPIEN=$O(^IBCN(365,"AF",IBBUFDA,""),-1) I RESPIEN S:$O(^IBCN(365,RESPIEN,2,""))'="" NODATA=0
"RTN","IBCNBCD",129,0)
 W ! D WRTFLD("        *** Non-editable Patient Eligibility/Benefit data from payer ***        ",0,80,"B")
"RTN","IBCNBCD",130,0)
 I NODATA W ! D WRTFLD("          *** No Patient Eligibility/Benefit data from payer found***           ",0,80,"B") G ELIGX
"RTN","IBCNBCD",131,0)
 W ! D WRTFLD("                   Payer Response                  VISTA Pt.Insurance           ",0,80,"BU")
"RTN","IBCNBCD",132,0)
 K ^TMP("RESP. EB DATA",$J),^TMP("INS. EB DATA",$J)
"RTN","IBCNBCD",133,0)
 S DFN=+$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBCD",134,0)
 S IBVEBCOL=1,IDATA=""
"RTN","IBCNBCD",135,0)
 ; fetch data from both eIV response and pat. insurance
"RTN","IBCNBCD",136,0)
 D INIT^IBCNES(365.02,RESPIEN_",","A",1,"RESP. EB DATA")
"RTN","IBCNBCD",137,0)
 D INIT^IBCNES(2.322,IBPOLDA_","_DFN_",","A",1,"INS. EB DATA")
"RTN","IBCNBCD",138,0)
 ; check if there is any existing pat. insurance data
"RTN","IBCNBCD",139,0)
 I $E(^TMP("INS. EB DATA",$J,"DISP",2,0),1,41)="    No eIV Eligibility/Benefit Data Found" S NOIDATA=1
"RTN","IBCNBCD",140,0)
 ; loop through response data and display it
"RTN","IBCNBCD",141,0)
 S (I,I1)="" F  S I=$O(^TMP("RESP. EB DATA",$J,"DISP",I)) Q:I=""!EX  D
"RTN","IBCNBCD",142,0)
 .I $Y+3>IOSL D PAUSE^VALM1 W @IOF I 'Y S EX=1 Q
"RTN","IBCNBCD",143,0)
 .S RDATA=^TMP("RESP. EB DATA",$J,"DISP",I,0)
"RTN","IBCNBCD",144,0)
 .; if group title, display it and quit
"RTN","IBCNBCD",145,0)
 .I RDATA["                    eIV Eligibility/Benefit Data Group#" W ! D WRTFLD(RDATA,0,80,"B") S IDATA="" Q
"RTN","IBCNBCD",146,0)
 .; if section title, display it and quit
"RTN","IBCNBCD",147,0)
 .I $E(RDATA,1,GRPLEN)=GRPSTR W !! D WRTFLD(RDATA,0,80,"U") S I1=$$FNDNXT(I1,GRPSTR,GRPLEN),SECEND=0 Q   ;IB*2*497
"RTN","IBCNBCD",148,0)
 .I $E(RDATA,1,EBILEN)=EBISTR W !! D WRTFLD(RDATA,0,80,"U") S I1=$$FNDNXT(I1,EBISTR,EBILEN),SECEND=0 Q
"RTN","IBCNBCD",149,0)
 .I $E(RDATA,1,CMPLEN)=CMPSTR W !! D WRTFLD(RDATA,0,80,"U") S I1=$$FNDNXT(I1,CMPSTR,CMPLEN),SECEND=0 Q
"RTN","IBCNBCD",150,0)
 .I $E(RDATA,1,HCSLEN)=HCSSTR W !! D WRTFLD(RDATA,0,80,"U") S I1=$$FNDNXT(I1,HCSSTR,HCSLEN),SECEND=0 Q
"RTN","IBCNBCD",151,0)
 .I $E(RDATA,1,BRELEN)=BRESTR W !! D WRTFLD(RDATA,0,80,"U") S I1=$$FNDNXT(I1,BRESTR,BRELEN),SECEND=0 Q
"RTN","IBCNBCD",152,0)
 .I $E(RDATA,1,BRPLEN)=BRPSTR W !! D WRTFLD(RDATA,0,80,"U") S I1=$$FNDNXT(I1,BRPSTR,BRPLEN),SECEND=0 Q
"RTN","IBCNBCD",153,0)
 .I $E(RDATA,1,NOHLEN)=NOHSTR W ! D WRTFLD(RDATA,0,80,"") Q
"RTN","IBCNBCD",154,0)
 .I $E(RDATA,1,NOCLEN)=NOCSTR W ! D WRTFLD(RDATA,0,80,"") Q
"RTN","IBCNBCD",155,0)
 .I $E(RDATA,1,NOBLEN)=NOBSTR W ! D WRTFLD(RDATA,0,80,"") Q
"RTN","IBCNBCD",156,0)
 .; build line with both eIV and pat. insurance values to compare
"RTN","IBCNBCD",157,0)
 .I 'NOIDATA,I1'="",'SECEND S IDATA=$G(^TMP("INS. EB DATA",$J,"DISP",I1,0)) D
"RTN","IBCNBCD",158,0)
 ..; if we run out of data for this section in pat. insurance
"RTN","IBCNBCD",159,0)
 ..I $E(IDATA,1,EBILEN)=EBISTR!($E(IDATA,1,CMPLEN)=CMPSTR)!($E(IDATA,1,HCSLEN)=HCSSTR) S SECEND=1,IDATA="" Q
"RTN","IBCNBCD",160,0)
 ..I $E(IDATA,1,BRELEN)=BRESTR!($E(IDATA,1,BRPLEN)=BRPSTR)!($E(IDATA,1,NOHLEN)=NOHSTR) S SECEND=1,IDATA="" Q
"RTN","IBCNBCD",161,0)
 ..I $E(IDATA,1,GRPLEN)=GRPSTR S SECEND=1,IDATA="" Q  ;IB*2*497
"RTN","IBCNBCD",162,0)
 ..S I1=I1+1 I '$D(^TMP("INS. EB DATA",$J,"DISP",I1)) S NOIDATA=1
"RTN","IBCNBCD",163,0)
 ..Q
"RTN","IBCNBCD",164,0)
 .W ! D WRTFLD(RDATA,0,47,""),WRTFLD(" | ",48,3,""),WRTFLD(IDATA,51,29,"")
"RTN","IBCNBCD",165,0)
 .Q
"RTN","IBCNBCD",166,0)
ELIGX ;
"RTN","IBCNBCD",167,0)
 I 'EX D PAUSE^VALM1
"RTN","IBCNBCD",168,0)
 K ^TMP("RESP. EB DATA",$J),^TMP("INS. EB DATA",$J)
"RTN","IBCNBCD",169,0)
 Q
"RTN","IBCNBCD",170,0)
 ;
"RTN","IBCNBCD",171,0)
FNDNXT(IDX,STR,LEN) ; find next node in INS. EB DATA after one that starts with string STR (section title)
"RTN","IBCNBCD",172,0)
 ; IDX - current index
"RTN","IBCNBCD",173,0)
 ; STR - string to find
"RTN","IBCNBCD",174,0)
 ; LEN - length of STR
"RTN","IBCNBCD",175,0)
 ; returns index of the node found or "" if nothing is found
"RTN","IBCNBCD",176,0)
 ;
"RTN","IBCNBCD",177,0)
 N I
"RTN","IBCNBCD",178,0)
 S I=IDX F  S I=$O(^TMP("INS. EB DATA",$J,"DISP",I)) Q:I=""  Q:($E(^TMP("INS. EB DATA",$J,"DISP",I,0),1,LEN)=STR)
"RTN","IBCNBCD",179,0)
 I +I S I=I+1 ; if found a match for section title, return the next index
"RTN","IBCNBCD",180,0)
 Q I
"RTN","IBCNBCD",181,0)
 ;
"RTN","IBCNBCD",182,0)
DISPLAY(BFLD,IFILE,IFLD,LABEL) ; extract, compare, write the two corresponding fields; one from buffer, one from ins files
"RTN","IBCNBCD",183,0)
 N BUFDATA,EXTDATA,IBOVER,IBMERG,IBITER,IBITER1,IBITER2 S EXTDATA=""
"RTN","IBCNBCD",184,0)
 S (IBITER1,IBITER2)=0
"RTN","IBCNBCD",185,0)
 S IBITER=1
"RTN","IBCNBCD",186,0)
 S BUFDATA=$$GET1^DIQ(355.33,IBBUFDA,BFLD)
"RTN","IBCNBCD",187,0)
 ;S IBITER1=$L(BUFDATA)/29
"RTN","IBCNBCD",188,0)
 ;I $P(IBITER1,".",2)>0 S IBITER1=$P(IBITER1,".",1)+1
"RTN","IBCNBCD",189,0)
 S IBITER1=$L(BUFDATA)-1\29+1
"RTN","IBCNBCD",190,0)
 I +IBEXTDA D
"RTN","IBCNBCD",191,0)
 . S EXTDATA=$$GET1^DIQ(IFILE,IBEXTDA,IFLD)
"RTN","IBCNBCD",192,0)
 .; S IBITER2=$L(EXTDATA)/29
"RTN","IBCNBCD",193,0)
 .; I $P(IBITER2,".",2)>0 S IBITER2=$P(IBITER2,".",1)+1
"RTN","IBCNBCD",194,0)
 . S IBITER2=$L(EXTDATA)-1\29+1
"RTN","IBCNBCD",195,0)
 . Q
"RTN","IBCNBCD",196,0)
 ;
"RTN","IBCNBCD",197,0)
 S IBITER=$S(IBITER2>IBITER1:IBITER2,IBITER1>IBITER2:IBITER1,IBITER1=IBITER2:IBITER1,1:1)
"RTN","IBCNBCD",198,0)
 S IBOVER=$S(BUFDATA'=""&(BUFDATA'=EXTDATA):"B",1:""),IBMERG=$S(EXTDATA="":"B",1:"")
"RTN","IBCNBCD",199,0)
 ;
"RTN","IBCNBCD",200,0)
 D WRTLN(LABEL,BUFDATA,EXTDATA,IBOVER,IBMERG)
"RTN","IBCNBCD",201,0)
 Q
"RTN","IBCNBCD",202,0)
 ;
"RTN","IBCNBCD",203,0)
WRTLN(LABEL,FLD1,FLD2,OVER,MERG,ATTR) ; write a line of formatted data with label and two fields
"RTN","IBCNBCD",204,0)
 N IBCTR,IBSV,IBEV,IBBUFV,IBSPV
"RTN","IBCNBCD",205,0)
 S IBSV=1,IBEV=29
"RTN","IBCNBCD",206,0)
 S ATTR=$G(ATTR),OVER=ATTR_$G(OVER),MERG=ATTR_$G(MERG)
"RTN","IBCNBCD",207,0)
 ;S LABEL=$J(LABEL,17)_"  ",FLD1=FLD1_$J("",29-$L(FLD1)),FLD2=FLD2_$J("",29-$L(FLD2))
"RTN","IBCNBCD",208,0)
 S LABEL=$J(LABEL,17)_"  "
"RTN","IBCNBCD",209,0)
 W !
"RTN","IBCNBCD",210,0)
 I '$G(IBITER) S IBITER=1
"RTN","IBCNBCD",211,0)
 F IBCTR=1:1:IBITER D
"RTN","IBCNBCD",212,0)
 . S IBBUFV=$E(FLD1,IBSV,IBEV)
"RTN","IBCNBCD",213,0)
 . S IBSPV=$E(FLD2,IBSV,IBEV)
"RTN","IBCNBCD",214,0)
 . I $L(IBBUFV)<29 S IBBUFV=IBBUFV_$J("",29-$L(IBBUFV))
"RTN","IBCNBCD",215,0)
 . I $L(IBSPV)<29 S IBSPV=IBSPV_$J("",29-$L(IBSPV))
"RTN","IBCNBCD",216,0)
 . D:IBCTR=1 WRTFLD(LABEL,0,19,ATTR)
"RTN","IBCNBCD",217,0)
 . D WRTFLD(IBBUFV,19,29,MERG)
"RTN","IBCNBCD",218,0)
 . D WRTFLD(" | ",48,3,ATTR),WRTFLD(IBSPV,51,29,OVER)
"RTN","IBCNBCD",219,0)
 . I IBITER>1,IBCTR'=IBITER W !
"RTN","IBCNBCD",220,0)
 . S IBSV=IBSV+29
"RTN","IBCNBCD",221,0)
 . S IBEV=IBEV+29
"RTN","IBCNBCD",222,0)
 Q
"RTN","IBCNBCD",223,0)
 ;
"RTN","IBCNBCD",224,0)
WRTFLD(STRING,COL,WD,ATTR) ; write an individual field with display attributes
"RTN","IBCNBCD",225,0)
 N ATTRB,ATTRE,DX,DY,X,Y
"RTN","IBCNBCD",226,0)
 S ATTRB="",ATTRB=$S(ATTR["B":$G(IOINHI),1:"")_$S(ATTR["U":$G(IOUON),1:"")
"RTN","IBCNBCD",227,0)
 S ATTRE="",ATTRE=$S(ATTR["B":$G(IOINORM),1:"")_$S(ATTR["U":$G(IOUOFF),1:"")
"RTN","IBCNBCD",228,0)
 ;
"RTN","IBCNBCD",229,0)
 S DX=COL,DY=$Y X IOXY
"RTN","IBCNBCD",230,0)
 W ATTRB,$E(STRING,1,WD),ATTRE
"RTN","IBCNBCD",231,0)
 S DX=(COL+WD),DY=$Y X IOXY
"RTN","IBCNBCD",232,0)
 Q
"RTN","IBCNBEE")
0^29^B45711543^B46620313
"RTN","IBCNBEE",1,0)
IBCNBEE ;ALB/ARH - Ins Buffer: add/edit existing entries in buffer ;1 Jun 97
"RTN","IBCNBEE",2,0)
 ;;2.0;INTEGRATED BILLING;**82,184,252,251,356,361,371,377,416,438,452,497**;21-MAR-94;Build 120
"RTN","IBCNBEE",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBEE",4,0)
 ;
"RTN","IBCNBEE",5,0)
ADD(IBSOURCE) ; add a new buffer file entry (#355.33), sets only status (0) node data
"RTN","IBCNBEE",6,0)
 N IBARR,IBERR,IBIFN,IBX I '$G(IBSOURCE) S IBSOURCE=1
"RTN","IBCNBEE",7,0)
 ;
"RTN","IBCNBEE",8,0)
 S IBARR(355.33,"+1,",.01)="NOW",IBARR(355.33,"+1,",.03)=IBSOURCE
"RTN","IBCNBEE",9,0)
 D UPDATE^DIE("E","IBARR","IBIFN","IBERR")
"RTN","IBCNBEE",10,0)
 S IBX=+$G(IBIFN(1)) I $D(IBERR) S $P(IBX,U,2)=$G(IBERR("DIERR",1,"TEXT",1))
"RTN","IBCNBEE",11,0)
 Q IBX
"RTN","IBCNBEE",12,0)
 ;
"RTN","IBCNBEE",13,0)
STATUS(IBBUFDA,STATUS,NC,NG,NP) ; edit the status node
"RTN","IBCNBEE",14,0)
 ;
"RTN","IBCNBEE",15,0)
 N IBX,IBARR,IBIFN Q:'$G(IBBUFDA)  S IBIFN=IBBUFDA_","
"RTN","IBCNBEE",16,0)
 D CHK^DIE(355.33,.04,"",$G(STATUS),.IBX) Q:IBX="^"
"RTN","IBCNBEE",17,0)
 ;
"RTN","IBCNBEE",18,0)
 S IBARR(355.33,IBIFN,.04)=STATUS I STATUS="R" S (NC,NG,NP)=0
"RTN","IBCNBEE",19,0)
 S IBARR(355.33,IBIFN,.07)=+$G(NC),IBARR(355.33,IBIFN,.08)=+$G(NG),IBARR(355.33,IBIFN,.09)=+$G(NP)
"RTN","IBCNBEE",20,0)
 D FILE^DIE("E","IBARR")
"RTN","IBCNBEE",21,0)
 Q
"RTN","IBCNBEE",22,0)
 ;
"RTN","IBCNBEE",23,0)
INS(IBBUFDA,FLDS) ; edit the insurance company portion of a buffer file entry
"RTN","IBCNBEE",24,0)
 ;
"RTN","IBCNBEE",25,0)
 N DIC,DIE,DA,DR,X,Y,IBCNEXT1
"RTN","IBCNBEE",26,0)
 I $P($G(^IBA(355.33,+$G(IBBUFDA),0)),U,4)'="E" Q
"RTN","IBCNBEE",27,0)
 I $G(FLDS)="" S FLDS="MR"
"RTN","IBCNBEE",28,0)
 ;
"RTN","IBCNBEE",29,0)
 ; ESG - 6/18/02 - SDD 5.1.4 - Usage of Auto Match when editing
"RTN","IBCNBEE",30,0)
 ;     - the insurance company name in the buffer.  Also added an
"RTN","IBCNBEE",31,0)
 ;     - input transform (see below) to clean up the data coming in.
"RTN","IBCNBEE",32,0)
 ;     - fetch the current buffer ins co name
"RTN","IBCNBEE",33,0)
 ;
"RTN","IBCNBEE",34,0)
 I FLDS="MR" S IBCNEXT1=$P($G(^IBA(355.33,IBBUFDA,20)),U,1)
"RTN","IBCNBEE",35,0)
 ;
"RTN","IBCNBEE",36,0)
 S DR=$P($T(@(FLDS_"INS")+1),";;",2,9999) Q:DR=""
"RTN","IBCNBEE",37,0)
 ;
"RTN","IBCNBEE",38,0)
 I FLDS="MR" Q:$$INSNAME(IBBUFDA)<0  S DR=$P($T(@(FLDS_"INS")+1),";;",2,9999),DR=$P(DR,";",2,99999)
"RTN","IBCNBEE",39,0)
 ;
"RTN","IBCNBEE",40,0)
 S DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR
"RTN","IBCNBEE",41,0)
 Q
"RTN","IBCNBEE",42,0)
 ;
"RTN","IBCNBEE",43,0)
GRP(IBBUFDA,FLDS) ; edit the group/plan portion of the buffer file entry
"RTN","IBCNBEE",44,0)
 ;
"RTN","IBCNBEE",45,0)
 N DIC,DIE,DA,DR,X,Y I $P($G(^IBA(355.33,+$G(IBBUFDA),0)),U,4)'="E" Q
"RTN","IBCNBEE",46,0)
 I $G(FLDS)="" S FLDS="MR"
"RTN","IBCNBEE",47,0)
 ;
"RTN","IBCNBEE",48,0)
 S DR=$P($T(@(FLDS_"GRP")+1),";;",2,9999) Q:DR=""
"RTN","IBCNBEE",49,0)
 S DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR
"RTN","IBCNBEE",50,0)
 Q
"RTN","IBCNBEE",51,0)
 ;
"RTN","IBCNBEE",52,0)
POLICY(IBBUFDA,FLDS) ; edit the patient policy portion of the buffer file entry
"RTN","IBCNBEE",53,0)
 ;
"RTN","IBCNBEE",54,0)
 N DIC,DIE,DA,DR,X,Y,IBZZ I $P($G(^IBA(355.33,+$G(IBBUFDA),0)),U,4)'="E" Q
"RTN","IBCNBEE",55,0)
 I $G(FLDS)="" S FLDS="MR"
"RTN","IBCNBEE",56,0)
 ;
"RTN","IBCNBEE",57,0)
 S DR=$P($T(@(FLDS_"POL")+1),";;",2,9999) Q:DR=""
"RTN","IBCNBEE",58,0)
 S DIE="^IBA(355.33,",DA=IBBUFDA
"RTN","IBCNBEE",59,0)
 S DIE("NO^")="BACKOUTOK" D ^DIE K DIE,DA,DR Q:$D(Y)
"RTN","IBCNBEE",60,0)
 ;
"RTN","IBCNBEE",61,0)
 I FLDS="MR" D ESGHP(IBBUFDA)
"RTN","IBCNBEE",62,0)
 Q
"RTN","IBCNBEE",63,0)
 ;
"RTN","IBCNBEE",64,0)
ESGHP(IBBUFDA) ; sponsoring employer information
"RTN","IBCNBEE",65,0)
 N DIR,DIRUT,DUOUT,DTOUT,VAOA,VAERR,VA,DFN,IB60,IBE,IBEMPST,IBREL
"RTN","IBCNBEE",66,0)
 ;
"RTN","IBCNBEE",67,0)
 ; if insured is patient or spouse, ask if insured's current employer is the plan's sponsoring employer, if yes auto stuff it
"RTN","IBCNBEE",68,0)
 I +$G(^IBA(355.33,IBBUFDA,61)) W ! S IB60=$G(^IBA(355.33,IBBUFDA,60)) D  Q:$D(DIRUT)
"RTN","IBCNBEE",69,0)
 . ; sponsoring employer is current employer?
"RTN","IBCNBEE",70,0)
 . S DFN=+IB60,IBREL=$P(IB60,U,6),VAOA("A")=$S(IBREL="01":5,IBREL="02":6,1:"") I 'DFN!(VAOA("A")="") Q
"RTN","IBCNBEE",71,0)
 . D OAD^VADPT I $G(VAOA(9))="" Q
"RTN","IBCNBEE",72,0)
 . S DIR("?")="Enter Yes if this plan is sponsored by the "_$S(IBREL="01":"patient's",1:"spouse's")_" current employer."
"RTN","IBCNBEE",73,0)
 . S DIR("?",1)="Entering Yes will result in the "_$S(IBREL="01":"patient's",1:"spouse's")_" current employer data being",DIR("?",2)="added to the policy as the Sponsoring Employer data.",DIR("?",3)=""
"RTN","IBCNBEE",74,0)
 . S DIR("A")="Current Employer "_VAOA(9)_" Sponsors this Plan",DIR("B")="No",DIR(0)="Y" D ^DIR W ! I Y'=1 Q
"RTN","IBCNBEE",75,0)
 . ;
"RTN","IBCNBEE",76,0)
 . D DELEMP(IBBUFDA) ; delete any data already contained in these fields
"RTN","IBCNBEE",77,0)
 . ;
"RTN","IBCNBEE",78,0)
 . ; if the insured's current employer sponsors the plan then stuff that employer's address into the buffer
"RTN","IBCNBEE",79,0)
 . S IBE=$S(IBREL="01":.311,1:.25),IBEMPST=$P($G(^DPT(DFN,IBE)),U,15)
"RTN","IBCNBEE",80,0)
 . S DR="61.02///"_VAOA(9)_";61.03///"_IBEMPST_";61.06///"_$E(VAOA(1),1,30)_";61.07///"_$E(VAOA(2),1,30)
"RTN","IBCNBEE",81,0)
 . S DR=DR_";61.08///"_$E(VAOA(3),1,30)_";61.09///"_$E(VAOA(4),1,20)_";61.1////"_$P(VAOA(5),U,1)
"RTN","IBCNBEE",82,0)
 . S DR=DR_";61.11////"_$P(VAOA(11),U,1)_";61.12///"_$E(VAOA(8),1,15)
"RTN","IBCNBEE",83,0)
 . S DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR
"RTN","IBCNBEE",84,0)
 ;
"RTN","IBCNBEE",85,0)
 ; if employer sponsored plan, edit buffer entry's sponsoring employer info
"RTN","IBCNBEE",86,0)
 I +$G(^IBA(355.33,IBBUFDA,61)) S DR="61.02:61.12",DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR
"RTN","IBCNBEE",87,0)
 ;
"RTN","IBCNBEE",88,0)
 ; if not employer sponsored plan, delete any existing sponsoring employer data
"RTN","IBCNBEE",89,0)
 I $D(^IBA(355.33,IBBUFDA,61)),'$G(^IBA(355.33,IBBUFDA,61)) D DELEMP(IBBUFDA)
"RTN","IBCNBEE",90,0)
 Q
"RTN","IBCNBEE",91,0)
 ;
"RTN","IBCNBEE",92,0)
DELEMP(IBBUFDA) ; delete sponsoring employer data
"RTN","IBCNBEE",93,0)
 N DIC,DIE,DA,DR,X,Y Q:'$D(^IBA(355.33,+$G(IBBUFDA),61))
"RTN","IBCNBEE",94,0)
 S DR="61.02///@;61.03///@;61.04///@;61.05///@;61.06///@;61.07///@;61.08///@;61.09///@;61.10///@;61.11///@;61.12///@"
"RTN","IBCNBEE",95,0)
 S DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR
"RTN","IBCNBEE",96,0)
 Q
"RTN","IBCNBEE",97,0)
 ;
"RTN","IBCNBEE",98,0)
INSHELP ;
"RTN","IBCNBEE",99,0)
 W !!,"------------------------ INSURANCE COMPANY INFORMATION -------------------------",!
"RTN","IBCNBEE",100,0)
 Q
"RTN","IBCNBEE",101,0)
GRPHELP ;
"RTN","IBCNBEE",102,0)
 W !!,"---------------------------- GROUP/PLAN INFORMATION ----------------------------"
"RTN","IBCNBEE",103,0)
 W !," The following data defines a specific Group or Plan provided by an Insurance "
"RTN","IBCNBEE",104,0)
 W !," Company.  This may be either a group plan with many potential members or an "
"RTN","IBCNBEE",105,0)
 W !," individual plan with a single member.",!
"RTN","IBCNBEE",106,0)
 Q
"RTN","IBCNBEE",107,0)
POLHELP ;
"RTN","IBCNBEE",108,0)
 W !!,"---------------------- POLICY AND SUBSCRIBER INFORMATION -----------------------"
"RTN","IBCNBEE",109,0)
 W !," The following data defines the subscriber specific policy information for a "
"RTN","IBCNBEE",110,0)
 W !," particular Insurance Plan.  The subscriber, the insured, and the policy holder "
"RTN","IBCNBEE",111,0)
 W !," all refer to the person who is a member of the plan and therefore holds the "
"RTN","IBCNBEE",112,0)
 W !," policy.  The patient must be covered under the plan but may not be the policy"
"RTN","IBCNBEE",113,0)
 W !," holder.",!
"RTN","IBCNBEE",114,0)
 Q
"RTN","IBCNBEE",115,0)
 ;
"RTN","IBCNBEE",116,0)
INSNAME(IBBUFDA) ;  Reset insurance company name
"RTN","IBCNBEE",117,0)
 N DR,DIE,DA,Y,X,IBX,IBNEW,IBNAME
"RTN","IBCNBEE",118,0)
 S IBX=-1
"RTN","IBCNBEE",119,0)
 S DR=20.01,DIE="^IBA(355.33,",DA=IBBUFDA
"RTN","IBCNBEE",120,0)
 D ^DIE
"RTN","IBCNBEE",121,0)
 I '$D(Y) S IBNEW=$$CHECK(IBBUFDA)
"RTN","IBCNBEE",122,0)
 I +$G(IBNEW)'<0,$G(IBNEW)'=0,$D(IBNEW) S DR=$P(DR,";",1)_"////"_IBNEW S DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR I '$D(Y) S IBX=0
"RTN","IBCNBEE",123,0)
 ; BHS - 10/15/03 - If user entered a caret during $$CHECK still set
"RTN","IBCNBEE",124,0)
 ;                  return value to 0 so the user can edit the other
"RTN","IBCNBEE",125,0)
 ;                  INS fields
"RTN","IBCNBEE",126,0)
 I $G(IBNEW)=0!($G(IBNEW)=-1) S IBX=0
"RTN","IBCNBEE",127,0)
 Q IBX
"RTN","IBCNBEE",128,0)
 ;
"RTN","IBCNBEE",129,0)
CHECK(IBBUFDA) ; Select Insurance Company Name and Automatch
"RTN","IBCNBEE",130,0)
 ; Buffer file (#355.33), field# 20.01.
"RTN","IBCNBEE",131,0)
 ; ESG - 6/18/02 - SDD 5.1.4 - Usage of Auto Match when editing the
"RTN","IBCNBEE",132,0)
 ;       insurance company name.  Also, display the insurance company
"RTN","IBCNBEE",133,0)
 ;       name lookup/lister and the Auto Match lookup/lister.
"RTN","IBCNBEE",134,0)
 ;
"RTN","IBCNBEE",135,0)
 NEW IBNEW,IBNAME,AMLIST
"RTN","IBCNBEE",136,0)
 ;
"RTN","IBCNBEE",137,0)
 S IBNEW=0,IBNAME=$P($G(^IBA(355.33,$G(IBBUFDA),20)),U,1)
"RTN","IBCNBEE",138,0)
 I IBNAME="" G CHECKQ
"RTN","IBCNBEE",139,0)
 ;
"RTN","IBCNBEE",140,0)
 ; Perform an insurance company lookup/lister
"RTN","IBCNBEE",141,0)
 ; BHS - 10/15/03 - Removed quits when user enters a caret to quit the
"RTN","IBCNBEE",142,0)
 ;                  the ins lister or Auto Match lister
"RTN","IBCNBEE",143,0)
 S IBNEW=$$DICINS^IBCNBU1(IBNAME,1,10)
"RTN","IBCNBEE",144,0)
 I IBNEW=0!(IBNEW<0) D
"RTN","IBCNBEE",145,0)
 . I '$$AMLOOK^IBCNEUT1(IBNAME,1,.AMLIST) Q
"RTN","IBCNBEE",146,0)
 . S IBNEW=$$AMSEL^IBCNEUT1(.AMLIST)
"RTN","IBCNBEE",147,0)
 ;
"RTN","IBCNBEE",148,0)
 ; user chose a valid insurance company - possible Auto Match add
"RTN","IBCNBEE",149,0)
 I IBNEW'<0,IBNEW'=0 D AMADD^IBCNEUT6(X,IBCNEXT1)
"RTN","IBCNBEE",150,0)
 ;
"RTN","IBCNBEE",151,0)
CHECKQ Q IBNEW
"RTN","IBCNBEE",152,0)
 ;
"RTN","IBCNBEE",153,0)
MRINS ; Insurance Company fields asked of MCCR users in the Buffer Process options (all buffer ins fields 20.01-21.06)
"RTN","IBCNBEE",154,0)
 ;;20.01;20.05;20.02:20.04;21.01;I X="" S Y="@111";21.02;I X="" S Y="@111";21.03;@111;21.04:21.06
"RTN","IBCNBEE",155,0)
 ;
"RTN","IBCNBEE",156,0)
MRGRP ; Group/Plan fields asked of MCCR users in the Buffer Process options (all buffer grp fields 40.01,90.01,90.02,40.04-40.09)
"RTN","IBCNBEE",157,0)
 ;;40.01;90.01;90.02;40.1;40.11;40.09;40.04:40.08
"RTN","IBCNBEE",158,0)
 ;
"RTN","IBCNBEE",159,0)
MRPOL ; Patient Policy fields asked of MCCR users in the Buffer Process options (all buffer policy fields except ESGHP,60.05,60.06 60.02-61.01
"RTN","IBCNBEE",160,0)
 ;;60.02;60.03;60.14T;S IBZZ=X;I IBZZ'="18" S Y="@111";91.01///1;90.03T;60.08///@;60.09///@;62.01///@;S Y="@112";@111;91.01;90.03T;60.08;60.13;62.01T;@112;60.1:60.12;.03;60.15;60.16;61.01;62.02:62.06
"RTN","IBCNBEE",161,0)
 ;
"RTN","IBCNBEE",162,0)
OTINS ; Insurance Company fields asked of non-MCCR users entering buffer data from options outside IB (20.01-20.04,21.01-21.06)
"RTN","IBCNBEE",163,0)
 ;;20.01:20.04;21.01;I X="" S Y="@111";21.02;I X="" S Y="@111";21.03;@111;21.04:21.06
"RTN","IBCNBEE",164,0)
 ;
"RTN","IBCNBEE",165,0)
OTGRP ; Group/Plan fields asked of non-MCCR users entering buffer data from options outside IB (90.01,90.02,40.09) ;;Daou/EEN-adding BIN & PCN (40.1,40.11)
"RTN","IBCNBEE",166,0)
 ;;90.01;90.02;40.1;40.11;40.09
"RTN","IBCNBEE",167,0)
 ;
"RTN","IBCNBEE",168,0)
OTPOL ; Patient Policy fields asked of non-MCCR users entering buffer data from options outside IB (60.02,60.03,90.03,60.05,60.06,91.01,60.08)
"RTN","IBCNBEE",169,0)
 ;;60.02;60.03;60.14PT. RELATIONSHIP TO INSURED;S IBZZ=X;90.03T;I IBZZ'="18" S Y="@111";91.01///1;60.08///@;60.09///@;62.01///@;S Y="@112";@111;91.01;60.08;60.13;62.01T;@112;60.15;60.16;62.02;62.03;62.04;62.05;62.06
"RTN","IBCNBES")
0^41^B8711337^B7989957
"RTN","IBCNBES",1,0)
IBCNBES ;ALB/ARH-Ins Buffer: stuff new entries/data into buffer ;1 Jun 97
"RTN","IBCNBES",2,0)
 ;;2.0;INTEGRATED BILLING;**82,184,345,438,497**;21-MAR-94;Build 120
"RTN","IBCNBES",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBES",4,0)
 ;
"RTN","IBCNBES",5,0)
 ;
"RTN","IBCNBES",6,0)
ADDSTF(IBSOURCE,DFN,IBDATA) ;  add new entry to Insurance Buffer file (355.33) and stuff the data passed in, no user interaction
"RTN","IBCNBES",7,0)
 ;  IBSOURCE = source of information             (required)
"RTN","IBCNBES",8,0)
 ;             1 = interview           2 = data match
"RTN","IBCNBES",9,0)
 ;             3 = ivm                 4 = pre-registration
"RTN","IBCNBES",10,0)
 ;             5 = eIV
"RTN","IBCNBES",11,0)
 ;  DFN      = patient's ifn in file 2           (required)
"RTN","IBCNBES",12,0)
 ;  IBDATA   = data to file in Buffer in an array subscripted by field number of the data field in 355.33
"RTN","IBCNBES",13,0)
 ;             ex:  IBDATA(20.01)="Insurance Company Name", etc,
"RTN","IBCNBES",14,0)
 ;  returns ien of new entry or 0 followed by error if entry not added
"RTN","IBCNBES",15,0)
 ;
"RTN","IBCNBES",16,0)
 ;  example of call: $$ADDBUF^IBCNBES(2,DFN,.IBDATA)   where IBDATA(field #) = value
"RTN","IBCNBES",17,0)
 ;
"RTN","IBCNBES",18,0)
 N X,Y,IBBUFDA,IBERROR
"RTN","IBCNBES",19,0)
 ;
"RTN","IBCNBES",20,0)
 ;  verify source of information and data exists to store
"RTN","IBCNBES",21,0)
 I $G(IBSOURCE)="" S IBERROR="SOURCE OF INFORMATION INCORRECT" G EXIT
"RTN","IBCNBES",22,0)
 I $G(^DPT(+$G(DFN),0))="" S IBERROR="NO PATIENT DEFINED" G EXIT
"RTN","IBCNBES",23,0)
 I $D(IBDATA)<10 S IBERROR="NO DATA TO STORE" G EXIT
"RTN","IBCNBES",24,0)
 ;
"RTN","IBCNBES",25,0)
 ;  add new entry to Buffer file (355.33)
"RTN","IBCNBES",26,0)
 S IBBUFDA=+$$ADD^IBCNBEE(IBSOURCE) I 'IBBUFDA S IBERROR="COULD NOT CREATE A NEW BUFFER ENTRY" G EXIT
"RTN","IBCNBES",27,0)
 ;
"RTN","IBCNBES",28,0)
 S IBDATA(60.01)=+DFN
"RTN","IBCNBES",29,0)
 ;
"RTN","IBCNBES",30,0)
 ; Set up DUZ (interface user) so 60.01 field check can find 'valid reason' for sensitive
"RTN","IBCNBES",31,0)
 ; patients and not set 60.01 to '0' with an error in tag FLDCHK
"RTN","IBCNBES",32,0)
 I '$G(DUZ) D DUZ^XUP(.5)
"RTN","IBCNBES",33,0)
 ;
"RTN","IBCNBES",34,0)
 D EDITSTF(+IBBUFDA,.IBDATA)
"RTN","IBCNBES",35,0)
 ;
"RTN","IBCNBES",36,0)
 ; delete leftover ESGHP data if ESGHP? is not Yes
"RTN","IBCNBES",37,0)
 I +$G(IBBUFDA),$D(^IBA(355.33,$G(IBBUFDA),61)),'$G(^IBA(355.33,$G(IBBUFDA),61)) D DELEMP^IBCNBEE($G(IBBUFDA))
"RTN","IBCNBES",38,0)
 ;
"RTN","IBCNBES",39,0)
EXIT Q +$G(IBBUFDA)_"^"_$G(IBERROR)
"RTN","IBCNBES",40,0)
 ;
"RTN","IBCNBES",41,0)
EDITSTF(IBBUFDA,IBDATA) ;  loop though data array and stuff each buffer field, no user interaction
"RTN","IBCNBES",42,0)
 ;
"RTN","IBCNBES",43,0)
 N IBFIELD,IBVALUE,IBARR,IBERR Q:'$G(^IBA(355.33,$G(IBBUFDA),0))
"RTN","IBCNBES",44,0)
 ;
"RTN","IBCNBES",45,0)
 S IBFIELD=0 F  S IBFIELD=$O(IBDATA(IBFIELD)) Q:'IBFIELD  D
"RTN","IBCNBES",46,0)
 . ; ** have to file subscriber id last in order for real-time verification inquiry triggers to work properly **
"RTN","IBCNBES",47,0)
 . I IBFIELD=90.03!(IBFIELD=60.04) Q
"RTN","IBCNBES",48,0)
 . S IBVALUE=$$FLDCHK(355.33,IBFIELD,IBDATA(IBFIELD)) Q:'IBVALUE
"RTN","IBCNBES",49,0)
 . S IBARR(355.33,IBBUFDA_",",IBFIELD)=$P(IBVALUE,U,2)
"RTN","IBCNBES",50,0)
 I $D(IBARR)>9 D FILE^DIE("E","IBARR","IBERR")
"RTN","IBCNBES",51,0)
 ; file subscriber id
"RTN","IBCNBES",52,0)
 ; needs to work with new and old subscriber id field until transition to the new fiedl is complete.
"RTN","IBCNBES",53,0)
 I $G(IBDATA(90.03))'=""!($G(IBDATA(60.04))'="") D
"RTN","IBCNBES",54,0)
 .N IBSUBIDF
"RTN","IBCNBES",55,0)
 .S IBSUBIDF=$S($G(IBDATA(90.03))'="":90.03,1:60.04)
"RTN","IBCNBES",56,0)
 .S IBVALUE=$$FLDCHK(355.33,IBSUBIDF,IBDATA(IBSUBIDF)) Q:'IBVALUE
"RTN","IBCNBES",57,0)
 .K IBARR S IBARR(355.33,IBBUFDA_",",IBSUBIDF)=$P(IBVALUE,U,2)
"RTN","IBCNBES",58,0)
 .D FILE^DIE("E","IBARR","IBERR")
"RTN","IBCNBES",59,0)
 .Q
"RTN","IBCNBES",60,0)
 Q
"RTN","IBCNBES",61,0)
 ;
"RTN","IBCNBES",62,0)
FLDCHK(FILE,FIELD,VALUE) ; minor checks on data: truncate if length too long, if pointer add ' so can be processed as external format
"RTN","IBCNBES",63,0)
 N IBATTR,IBERR,IBX S IBX="1^"_VALUE
"RTN","IBCNBES",64,0)
 I VALUE="" S IBX="0^No data value." G FLDCHKQ
"RTN","IBCNBES",65,0)
 D FIELD^DID(FILE,FIELD,"N","FIELD LENGTH;SPECIFIER","IBATTR","IBERR")
"RTN","IBCNBES",66,0)
 I $D(IBERR) S IBX="0^"_$G(IBERR("DIERR",1,"TEXT",1)) G FLDCHKQ
"RTN","IBCNBES",67,0)
 I $G(IBATTR("SPECIFIER"))["P" S IBX="1^`"_VALUE G FLDCHKQ
"RTN","IBCNBES",68,0)
 I $D(IBATTR("FIELD LENGTH")) S IBX="1^"_$E(VALUE,1,+IBATTR("FIELD LENGTH"))
"RTN","IBCNBES",69,0)
FLDCHKQ Q IBX
"RTN","IBCNBES1")
0^42^B5819713^B5819262
"RTN","IBCNBES1",1,0)
IBCNBES1 ;ALB/ARH-Ins Buffer: stuff new entries/data into buffer ;27 OCT 2000
"RTN","IBCNBES1",2,0)
 ;;2.0;INTEGRATED BILLING;**141,497**;21-MAR-94;Build 120
"RTN","IBCNBES1",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNBES1",4,0)
 ;
"RTN","IBCNBES1",5,0)
 ;
"RTN","IBCNBES1",6,0)
BUFF(IBDATA) ;  add new entries to Insurance Buffer file (355.33) and stuff the data passed in, no user interaction
"RTN","IBCNBES1",7,0)
 ;
"RTN","IBCNBES1",8,0)
 ;  IBDATA array contains insurance entries, pass by reference
"RTN","IBCNBES1",9,0)
 ; 
"RTN","IBCNBES1",10,0)
 ;  IBDATA("M") level should contain Medicare WNR data only
"RTN","IBCNBES1",11,0)
 ;  IBDATA("M","DFN") = Patient DFN, required
"RTN","IBCNBES1",12,0)
 ;  IBDATA("M","SOURCE")= Source of data (355.33,.03), required
"RTN","IBCNBES1",13,0)
 ;  IBDATA("M","PART A") = Medicare Part A Effective Date
"RTN","IBCNBES1",14,0)
 ;  IBDATA("M","PART B") = Medicare Part B Effective Date
"RTN","IBCNBES1",15,0)
 ;  IBDATA("M","HICN") = Medicare HICN
"RTN","IBCNBES1",16,0)
 ;  IBDATA("M","NAME") = Beneficiary Name as Appears on Card
"RTN","IBCNBES1",17,0)
 ; 
"RTN","IBCNBES1",18,0)
 ;  IBDATA(X) level should contain any Insurance other than Medicare WNR
"RTN","IBCNBES1",19,0)
 ;  IBDATA(X,field #)   = array of data to file in Buffer, may contain data on multiple insurance companies
"RTN","IBCNBES1",20,0)
 ;             where X = 1:1, subscript defines an insurance company
"RTN","IBCNBES1",21,0)
 ;                   field # = field number of the data field in 355.33,  DFN (60.01) and Source (.03) required
"RTN","IBCNBES1",22,0)
 ; 
"RTN","IBCNBES1",23,0)
 ;  returns 1 if all entries added ok or 0 if any errors found
"RTN","IBCNBES1",24,0)
 ;  also adds IBDATA(X,"MESSAGE") = ien of new entry or 0 followed by error message if entry could not be added
"RTN","IBCNBES1",25,0)
 ;
"RTN","IBCNBES1",26,0)
 ;  example of call: $$BUFF^IBCNBES1(.IBDATA)   where IBDATA(1,20.01)="Insurance Company Name", etc
"RTN","IBCNBES1",27,0)
 ;
"RTN","IBCNBES1",28,0)
 N X,Y,IBIX,IBFLD,IBY,IBARRAY,IBOUT,IBSOURCE,DFN S IBOUT=1
"RTN","IBCNBES1",29,0)
 ;
"RTN","IBCNBES1",30,0)
 ; insurance companies
"RTN","IBCNBES1",31,0)
 S IBIX=0 F  S IBIX=$O(IBDATA(IBIX)) Q:'IBIX  D
"RTN","IBCNBES1",32,0)
 . ;
"RTN","IBCNBES1",33,0)
 . S DFN=$G(IBDATA(IBIX,60.01)) I 'DFN S IBDATA(IBIX,"MESSAGE")="0^No DFN",IBOUT=0 Q
"RTN","IBCNBES1",34,0)
 . S IBSOURCE=$G(IBDATA(IBIX,.03)) I 'IBSOURCE S IBDATA(IBIX,"MESSAGE")="0^No Source",IBOUT=0 Q
"RTN","IBCNBES1",35,0)
 . ;
"RTN","IBCNBES1",36,0)
 . S IBFLD=0 F  S IBFLD=$O(IBDATA(IBIX,IBFLD)) Q:'IBFLD  S IBARRAY(IBFLD)=IBDATA(IBIX,IBFLD)
"RTN","IBCNBES1",37,0)
 . ;
"RTN","IBCNBES1",38,0)
 . S IBY=$$ADDSTF^IBCNBES(IBSOURCE,DFN,.IBARRAY) K IBARRAY S IBDATA(IBIX,"MESSAGE")=IBY I 'IBY S IBOUT=0
"RTN","IBCNBES1",39,0)
 ;
"RTN","IBCNBES1",40,0)
 ; medicare Part A and Part B
"RTN","IBCNBES1",41,0)
 S IBIX="M" F IBFLD="PART A","PART B" I $D(IBDATA(IBIX,IBFLD)) D
"RTN","IBCNBES1",42,0)
 . ;
"RTN","IBCNBES1",43,0)
 . S DFN=$G(IBDATA(IBIX,"DFN")) I 'DFN S IBDATA(IBIX,"MESSAGE")="0^No DFN",IBOUT=0 Q
"RTN","IBCNBES1",44,0)
 . S IBSOURCE=$G(IBDATA(IBIX,"SOURCE")) I 'IBSOURCE S IBDATA(IBIX,"MESSAGE")="0^No Source",IBOUT=0 Q
"RTN","IBCNBES1",45,0)
 . ;
"RTN","IBCNBES1",46,0)
 . S IBARRAY(20.01)="MEDICARE"
"RTN","IBCNBES1",47,0)
 . S IBARRAY(90.01)=IBFLD
"RTN","IBCNBES1",48,0)
 . S IBARRAY(90.02)=IBFLD
"RTN","IBCNBES1",49,0)
 . S IBARRAY(60.02)=$G(IBDATA(IBIX,IBFLD))
"RTN","IBCNBES1",50,0)
 . S IBARRAY(90.03)=$G(IBDATA(IBIX,"HICN"))
"RTN","IBCNBES1",51,0)
 . S IBARRAY(60.05)="v"
"RTN","IBCNBES1",52,0)
 . S IBARRAY(60.06)="01"
"RTN","IBCNBES1",53,0)
 . S IBARRAY(91.01)=$G(IBDATA(IBIX,"NAME"))
"RTN","IBCNBES1",54,0)
 . ;
"RTN","IBCNBES1",55,0)
 . S IBY=$$ADDSTF^IBCNBES(IBSOURCE,DFN,.IBARRAY) K IBARRAY S IBDATA(IBIX,"MESSAGE")=IBY I 'IBY S IBOUT=0
"RTN","IBCNBES1",56,0)
 ;
"RTN","IBCNBES1",57,0)
BUFFQ Q IBOUT
"RTN","IBCNBLE")
0^24^B105786784^B85092127
"RTN","IBCNBLE",1,0)
IBCNBLE ;ALB/ARH - Ins Buffer: LM buffer entry screen ;1-Jun-97
"RTN","IBCNBLE",2,0)
 ;;2.0;INTEGRATED BILLING;**82,231,184,251,371,416,435,452,497**;21-MAR-94;Build 120
"RTN","IBCNBLE",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBLE",4,0)
 ;
"RTN","IBCNBLE",5,0)
EN ; - main entry point for list manager display
"RTN","IBCNBLE",6,0)
 N DFN
"RTN","IBCNBLE",7,0)
 D EN^VALM("IBCNB INSURANCE BUFFER ENTRY")
"RTN","IBCNBLE",8,0)
 Q
"RTN","IBCNBLE",9,0)
 ;
"RTN","IBCNBLE",10,0)
HDR ; - header code for list manager display
"RTN","IBCNBLE",11,0)
 N IBX,IB0,VADM,VA,VAERR S IBX=""
"RTN","IBCNBLE",12,0)
 I +$G(DFN) D DEM^VADPT S IBX=$E(VADM(1),1,28),IBX=IBX_$J("",35-$L(IBX))_$P(VADM(2),U,2)_"    DOB: "_$P(VADM(3),U,2)_"    AGE: "_VADM(4)
"RTN","IBCNBLE",13,0)
 S VALMHDR(1)=IBX
"RTN","IBCNBLE",14,0)
 S IB0=$G(^IBA(355.33,+$G(IBBUFDA),0))
"RTN","IBCNBLE",15,0)
 S IBX=$E($P($G(^VA(200,+$P(IB0,U,2),0)),U,1),1,27)_" ("_$E($$EXPAND^IBTRE(355.33,.03,$P(IB0,U,3)),1,11)_")"
"RTN","IBCNBLE",16,0)
 S IBX="Buffer entry created on "_$$DATE(+IB0)_" by "_IBX,IBX=$J("",40-($L(IBX)\2))_IBX
"RTN","IBCNBLE",17,0)
 S VALMHDR(2)=IBX
"RTN","IBCNBLE",18,0)
 S IBX="" I +$P(IB0,U,10) S IBX="Buffer entry verified on "_$$DATE(+$P(IB0,U,10))_" by "_$E($P($G(^VA(200,+$P(IB0,U,11),0)),U,1),1,27),IBX=$J("",40-($L(IBX)\2))_IBX
"RTN","IBCNBLE",19,0)
 S VALMHDR(3)=IBX
"RTN","IBCNBLE",20,0)
 Q
"RTN","IBCNBLE",21,0)
 ;
"RTN","IBCNBLE",22,0)
INIT ; - initialization of list manager screen, ifn of record to display required IBBUFDA
"RTN","IBCNBLE",23,0)
 K ^TMP("IBCNBLE",$J)
"RTN","IBCNBLE",24,0)
 I '$G(IBBUFDA) S VALMQUIT="" Q
"RTN","IBCNBLE",25,0)
 S DFN=+$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBLE",26,0)
 D BLD
"RTN","IBCNBLE",27,0)
 Q
"RTN","IBCNBLE",28,0)
 ;
"RTN","IBCNBLE",29,0)
HELP ; - help text for list manager screen
"RTN","IBCNBLE",30,0)
 D FULL^VALM1
"RTN","IBCNBLE",31,0)
 W !!,"This screen displays all data in a Buffer File entry."
"RTN","IBCNBLE",32,0)
 W !!,"The actions allow editing of all data and verification of coverage."
"RTN","IBCNBLE",33,0)
 W !!,"It is not necessary to use the Verify Entry action, this action is optional.",!,"If the Verify Entry action is not used, the policy will be automatically flagged",!,"as verified when it is Accepted and stored in the main Insurance files."
"RTN","IBCNBLE",34,0)
 D PAUSE^VALM1 S VALMBCK="R"
"RTN","IBCNBLE",35,0)
 Q
"RTN","IBCNBLE",36,0)
 ;
"RTN","IBCNBLE",37,0)
EXIT ; - exit list manager screen
"RTN","IBCNBLE",38,0)
 K ^TMP("IBCNBLE",$J)
"RTN","IBCNBLE",39,0)
 D CLEAR^VALM1
"RTN","IBCNBLE",40,0)
 Q
"RTN","IBCNBLE",41,0)
 ;
"RTN","IBCNBLE",42,0)
BLD ; display buffer entry
"RTN","IBCNBLE",43,0)
 N DFN,CLIEN,CLDT,IB0,IB20,IB40,IB60,IB61,IB62,IB90,IB91,IBL,IBLINE,ADDR,IBI,IBY,SRVARRAY
"RTN","IBCNBLE",44,0)
 S VALMCNT=0
"RTN","IBCNBLE",45,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0)),IB20=$G(^IBA(355.33,IBBUFDA,20)),IB40=$G(^IBA(355.33,IBBUFDA,40))
"RTN","IBCNBLE",46,0)
 S IB60=$G(^IBA(355.33,IBBUFDA,60)),IB61=$G(^IBA(355.33,IBBUFDA,61)),IB62=$G(^IBA(355.33,IBBUFDA,62))
"RTN","IBCNBLE",47,0)
 S IB90=$G(^IBA(355.33,IBBUFDA,90)),IB91=$G(^IBA(355.33,IBBUFDA,91))
"RTN","IBCNBLE",48,0)
 ; check if we are coming from appointments view
"RTN","IBCNBLE",49,0)
 I $G(AVIEW) D
"RTN","IBCNBLE",50,0)
 .D SET(" ") S IBY=$J("",26)_"Appointment Information" D SET(IBY,"B") S IBLINE=""
"RTN","IBCNBLE",51,0)
 .S DFN=+IB60
"RTN","IBCNBLE",52,0)
 .S CLIEN="" F  S CLIEN=$O(^TMP($J,"IBCNAPPTS",DFN,CLIEN)) Q:CLIEN=""  D
"RTN","IBCNBLE",53,0)
 ..S CLDT="" F  S CLDT=$O(^TMP($J,"IBCNAPPTS",DFN,CLIEN,CLDT)) Q:CLDT=""  D
"RTN","IBCNBLE",54,0)
 ...S IBL="Clinic: ",IBY=$P($P(^TMP($J,"IBCNAPPTS",DFN,CLIEN,CLDT),U,2),";",2)
"RTN","IBCNBLE",55,0)
 ...S IBLINE=$$SETL(IBLINE,IBY,IBL,10,30)
"RTN","IBCNBLE",56,0)
 ...S IBL="Appt. D/T: ",IBY=$$FMTE^XLFDT(CLDT)
"RTN","IBCNBLE",57,0)
 ...S IBLINE=$$SETL(IBLINE,IBY,IBL,50,22)
"RTN","IBCNBLE",58,0)
 ...D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",59,0)
 ...Q
"RTN","IBCNBLE",60,0)
 ..Q
"RTN","IBCNBLE",61,0)
 .Q
"RTN","IBCNBLE",62,0)
 ;
"RTN","IBCNBLE",63,0)
 I +$P(IB0,U,17) D EN^IBCNBLE2    ; IB*2*435 - Display e-Pharmacy ELIG response data
"RTN","IBCNBLE",64,0)
 ;
"RTN","IBCNBLE",65,0)
 D SET(" ") S IBY=$J("",26)_"Insurance Company Information" D SET(IBY,"B") S IBLINE=""
"RTN","IBCNBLE",66,0)
 S IBL="Name: ",IBY=$P(IB20,U,1) S IBLINE=$$SETL("",IBY,IBL,10,30)
"RTN","IBCNBLE",67,0)
 S IBL="Reimburse?: ",IBY=$$EXPAND^IBTRE(355.33,20.05,$P(IB20,U,5)) S IBLINE=$$SETL(IBLINE,IBY,IBL,57,20)
"RTN","IBCNBLE",68,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",69,0)
 S IBL="Phone: ",IBY=$P(IB20,U,2) S IBLINE=$$SETL(IBLINE,IBY,IBL,10,20)
"RTN","IBCNBLE",70,0)
 S IBL="Billing Phone: ",IBY=$P(IB20,U,3) S IBLINE=$$SETL(IBLINE,IBY,IBL,57,20)
"RTN","IBCNBLE",71,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",72,0)
 S IBL="Precert Phone: ",IBY=$P(IB20,U,4) S IBLINE=$$SETL(IBLINE,IBY,IBL,57,20)
"RTN","IBCNBLE",73,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",74,0)
 S IBL="Remote Query From: ",IBY=$$EXTERNAL^DILFD(355.33,.14,"",$P(IB0,"^",14)) S IBLINE=$$SETL(IBLINE,IBY,IBL,57,20)
"RTN","IBCNBLE",75,0)
 D SET(IBLINE) S IBLINE="" D ADDR(21,1)
"RTN","IBCNBLE",76,0)
 S IBL="Address: ",IBY=ADDR(1) S IBLINE=$$SETL(IBLINE,IBY,IBL,10,69)
"RTN","IBCNBLE",77,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",78,0)
 F IBI=2:1:9 S IBL="",IBY=$G(ADDR(IBI)) Q:IBY=""  S IBLINE=$$SETL(IBLINE,IBY,IBL,10,69) D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",79,0)
 D SET(" ") S IBY=$J("",29)_"Group/Plan Information" D SET(IBY,"B") S IBLINE=""
"RTN","IBCNBLE",80,0)
 S IBL="Group Plan?: ",IBY=$$YN($P(IB40,U,1)) S IBLINE=$$SETL("",IBY,IBL,16,3)
"RTN","IBCNBLE",81,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",82,0)
 S IBL="Group Name: ",IBY=$P(IB90,U,1) S IBLINE=$$SETL("",IBY,IBL,16,58) D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",83,0)
 I $TR($E(IBY,59,80)," ","")'="" S IBLINE=$$SETL("",$E(IBY,59,80),"",16,22) D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",84,0)
 ;
"RTN","IBCNBLE",85,0)
 S IBL="Group Number: ",IBY=$P(IB90,U,2) S IBLINE=$$SETL("",IBY,IBL,16,55)
"RTN","IBCNBLE",86,0)
 ;;Daou/EEN - Adding BIN and PCN
"RTN","IBCNBLE",87,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",88,0)
 S IBL="BIN: ",IBY=$P(IB40,U,10) S IBLINE=$$SETL("",IBY,IBL,16,10)
"RTN","IBCNBLE",89,0)
 S IBL="Require UR: ",IBY=$$YN($P(IB40,U,4)) S IBLINE=$$SETL(IBLINE,IBY,IBL,63,3)
"RTN","IBCNBLE",90,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",91,0)
 S IBL="PCN: ",IBY=$P(IB40,U,11) S IBLINE=$$SETL("",IBY,IBL,16,20)
"RTN","IBCNBLE",92,0)
 S IBL="Require Amb Cert: ",IBY=$$YN($P(IB40,U,6)) S IBLINE=$$SETL(IBLINE,IBY,IBL,63,3)
"RTN","IBCNBLE",93,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",94,0)
 S IBL="Require Pre-Cert: ",IBY=$$YN($P(IB40,U,5)) S IBLINE=$$SETL(IBLINE,IBY,IBL,63,3)
"RTN","IBCNBLE",95,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",96,0)
 ;
"RTN","IBCNBLE",97,0)
 S IBL="Type of Plan: ",IBY=$P($G(^IBE(355.1,+$P(IB40,U,9),0)),U,1) S IBLINE=$$SETL("",IBY,IBL,16,25)
"RTN","IBCNBLE",98,0)
 S IBL="Exclude Pre-Cond: ",IBY=$$YN($P(IB40,U,7)) S IBLINE=$$SETL(IBLINE,IBY,IBL,63,3)
"RTN","IBCNBLE",99,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",100,0)
 S IBL="Benefits Assignable: ",IBY=$$YN($P(IB40,U,8)) S IBLINE=$$SETL(IBLINE,IBY,IBL,63,3)
"RTN","IBCNBLE",101,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",102,0)
 ;
"RTN","IBCNBLE",103,0)
 D SET(" ") S IBY=$J("",26)_"Policy/Subscriber Information" D SET(IBY,"B") S IBLINE=""
"RTN","IBCNBLE",104,0)
 S IBL="Whose Insurance: ",IBY=$$EXPAND^IBTRE(355.33,60.05,$P(IB60,U,5)) S IBLINE=$$SETL("",IBY,IBL,18,7)
"RTN","IBCNBLE",105,0)
 S IBL="Effective: ",IBY=$$DATE($P(IB60,U,2)) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,8)
"RTN","IBCNBLE",106,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",107,0)
 S IBL="Expiration: ",IBY=$$DATE($P(IB60,U,3)) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,13)
"RTN","IBCNBLE",108,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",109,0)
 S IBL="Insured's Name: ",IBY=$P(IB91,U,1) S IBLINE=$$SETL("",IBY,IBL,18,56) D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",110,0)
 I $TR($E(IBY,57,130)," ","")'="" S IBLINE=$$SETL("",$E(IBY,57,130),"",18,56) D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",111,0)
 I $TR($E(IBY,113,130)," ","")'="" S IBLINE=$$SETL("",$E(IBY,113,130),"",18,18) D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",112,0)
 S IBL="Subscriber Id: ",IBY=$P(IB90,U,3) S IBLINE=$$SETL("",IBY,IBL,18,56) D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",113,0)
 I $TR($E(IBY,57,80)," ","")'="" S IBLINE=$$SETL("",$E(IBY,57,80),"",18,24) D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",114,0)
 ;
"RTN","IBCNBLE",115,0)
 S IBL="Relationship: ",IBY=$$EXPAND^IBTRE(355.33,60.06,$P(IB60,U,6)) S IBLINE=$$SETL("",IBY,IBL,18,16)
"RTN","IBCNBLE",116,0)
 S IBL="Primary Provider: ",IBY=$P(IB60,U,10) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,17)
"RTN","IBCNBLE",117,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",118,0)
 S IBL="Provider Phone: ",IBY=$P(IB60,U,11) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,16)
"RTN","IBCNBLE",119,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",120,0)
 I $P(IB60,U,6)'="01"!($P(IB60,U,8)'="") S IBL="Insured's DOB: ",IBY=$$DATE($P(IB60,U,8)) S IBLINE=$$SETL("",IBY,IBL,18,8)
"RTN","IBCNBLE",121,0)
 S IBL="Coord of Benefits: ",IBY=$$EXPAND^IBTRE(355.33,60.12,$P(IB60,U,12)) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,16)
"RTN","IBCNBLE",122,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",123,0)
 ;
"RTN","IBCNBLE",124,0)
 I $P(IB60,U,15)'=""!($P(IB60,U,16)'="") D      ; IB*2*452 - esg - display Pharmacy fields if they exist
"RTN","IBCNBLE",125,0)
 . S IBL="Rx Relationship: ",IBY=""
"RTN","IBCNBLE",126,0)
 . N G S G=+$P(IB60,U,15)
"RTN","IBCNBLE",127,0)
 . I G S IBY=$$GET1^DIQ(9002313.19,G_",",.01)_" - "_$$GET1^DIQ(9002313.19,G_",",.02)
"RTN","IBCNBLE",128,0)
 . S IBLINE=$$SETL("",IBY,IBL,18,20)
"RTN","IBCNBLE",129,0)
 . S IBL="Rx Person Code: ",IBY=$P(IB60,U,16),IBLINE=$$SETL(IBLINE,IBY,IBL,62,10)
"RTN","IBCNBLE",130,0)
 . D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",131,0)
 . Q
"RTN","IBCNBLE",132,0)
 ;
"RTN","IBCNBLE",133,0)
 I $P(IB62,U,1)'="" S IBL="Patient Id: ",IBY=$P(IB62,U,1) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,13)
"RTN","IBCNBLE",134,0)
 I IBLINE'="" D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",135,0)
 ;
"RTN","IBCNBLE",136,0)
 I '$P(IB61,U,1) D SET(" ") S IBL="Employer Sponsored Group Health Plan?: ",IBY=$$YN($P(IB61,U,1)) S IBLINE=$$SETL("",IBY,IBL,40,3) D SET(IBLINE) S IBLINE="" G NXT
"RTN","IBCNBLE",137,0)
 ;
"RTN","IBCNBLE",138,0)
 D ADDR(61,6)
"RTN","IBCNBLE",139,0)
 D SET(" ") S IBY=$J("",24)_"Subscriber's Employer Information" D SET(IBY,"B") S IBLINE=""
"RTN","IBCNBLE",140,0)
 S IBL="Employer Sponsored?: ",IBY=$$YN($P(IB61,U,1)) S IBLINE=$$SETL("",IBY,IBL,22,3)
"RTN","IBCNBLE",141,0)
 S IBL="Employment Status: ",IBY=$$EXPAND^IBTRE(355.33,61.03,$P(IB61,U,3)) S IBLINE=$$SETL(IBLINE,IBY,IBL,64,15)
"RTN","IBCNBLE",142,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",143,0)
 S IBL="Claim to Employer: ",IBY=$$YN($P(IB61,U,5)) S IBLINE=$$SETL("",IBY,IBL,22,3)
"RTN","IBCNBLE",144,0)
 S IBL="Retirement Date: ",IBY=$$DATE($P(IB61,U,4)) S IBLINE=$$SETL(IBLINE,IBY,IBL,64,8)
"RTN","IBCNBLE",145,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",146,0)
 S IBL="Employer Name: ",IBY=$P(IB61,U,2) S IBLINE=$$SETL("",IBY,IBL,16,30)
"RTN","IBCNBLE",147,0)
 S IBL="Employer Phone: ",IBY=$P(IB61,U,12) S IBLINE=$$SETL(IBLINE,IBY,IBL,64,15)
"RTN","IBCNBLE",148,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",149,0)
 S IBL="Address: ",IBY=ADDR(1) S IBLINE=$$SETL(IBLINE,IBY,IBL,16,64)
"RTN","IBCNBLE",150,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",151,0)
 F IBI=2:1:9 S IBL="",IBY=$G(ADDR(IBI)) Q:IBY=""  S IBLINE=$$SETL(IBLINE,IBY,IBL,16,64) D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",152,0)
 ;
"RTN","IBCNBLE",153,0)
NXT ;
"RTN","IBCNBLE",154,0)
 D SET(" ") S IBY=$J("",26)_"Buffer Entry Information" D SET(IBY,"B") S IBLINE=""
"RTN","IBCNBLE",155,0)
 S IBL="Date Entered: ",IBY=$$FMTE^XLFDT($P(IB0,U,1),2) S IBLINE=$$SETL("",IBY,IBL,18,17)
"RTN","IBCNBLE",156,0)
 S IBL="Date Verified: ",IBY=$$FMTE^XLFDT($P(IB0,U,10),2) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,17)
"RTN","IBCNBLE",157,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",158,0)
 S IBL="Entered By: ",IBY=$$EXPAND^IBTRE(355.33,.02,$P(IB0,U,2)) S IBLINE=$$SETL("",IBY,IBL,18,40)
"RTN","IBCNBLE",159,0)
 S IBL="Verified By: ",IBY=$$EXPAND^IBTRE(355.33,.11,$P(IB0,U,11)) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,17)
"RTN","IBCNBLE",160,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",161,0)
 ; service date / service code
"RTN","IBCNBLE",162,0)
 D SERVLN(IBBUFDA,.SRVARRAY) I SRVARRAY F IBI=1:1:SRVARRAY D SET(SRVARRAY(IBI))
"RTN","IBCNBLE",163,0)
 K SRVARRAY
"RTN","IBCNBLE",164,0)
 ;
"RTN","IBCNBLE",165,0)
 S IBLINE=$$TRACE(IBLINE,IBBUFDA)       ; eIIV trace #
"RTN","IBCNBLE",166,0)
 S IBL="eIV Processed Date: ",IBY=$S($P(IB0,U,15)="":"",1:$$FMTE^XLFDT($P(IB0,U,15),"2M"))
"RTN","IBCNBLE",167,0)
 S IBLINE=$$SETL(IBLINE,IBY,IBL,62,17)
"RTN","IBCNBLE",168,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",169,0)
 S IBL="Source: ",IBY=$$EXPAND^IBTRE(355.33,.03,$P(IB0,U,3))
"RTN","IBCNBLE",170,0)
 S IBLINE=$$SETL("",IBY,IBL,18,17)
"RTN","IBCNBLE",171,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",172,0)
 ;
"RTN","IBCNBLE",173,0)
 ; Call another routine for continuation of list build
"RTN","IBCNBLE",174,0)
 D BLD^IBCNBLE1
"RTN","IBCNBLE",175,0)
 ;
"RTN","IBCNBLE",176,0)
BLDQ Q
"RTN","IBCNBLE",177,0)
 ;
"RTN","IBCNBLE",178,0)
 ;
"RTN","IBCNBLE",179,0)
SETL(LINE,DATA,LABEL,COL,LNG) ;
"RTN","IBCNBLE",180,0)
 S LINE=LINE_$J("",(COL-$L(LABEL)-$L(LINE)))_LABEL_$E(DATA,1,LNG)
"RTN","IBCNBLE",181,0)
 Q LINE
"RTN","IBCNBLE",182,0)
 ;
"RTN","IBCNBLE",183,0)
SET(LINE,SPEC) ;
"RTN","IBCNBLE",184,0)
 S VALMCNT=VALMCNT+1
"RTN","IBCNBLE",185,0)
 S ^TMP("IBCNBLE",$J,VALMCNT,0)=LINE
"RTN","IBCNBLE",186,0)
 I $G(SPEC)="B" D CNTRL^VALM10(VALMCNT,1,80,IOINHI,IOINORM)
"RTN","IBCNBLE",187,0)
 Q
"RTN","IBCNBLE",188,0)
 ;
"RTN","IBCNBLE",189,0)
DATE(X) ;
"RTN","IBCNBLE",190,0)
 N Y S Y="" I X?7N.E S Y=$E(X,4,5)_"/"_$E(X,6,7)_"/"_$E(X,2,3)
"RTN","IBCNBLE",191,0)
 Q Y
"RTN","IBCNBLE",192,0)
 ;
"RTN","IBCNBLE",193,0)
YN(X) ;
"RTN","IBCNBLE",194,0)
 N Y S X=$G(X),Y=$S(X=1:"Yes",X=0:"No",1:"")
"RTN","IBCNBLE",195,0)
 Q Y
"RTN","IBCNBLE",196,0)
 ;
"RTN","IBCNBLE",197,0)
ADDR(NODE,FLD) ; format address for output
"RTN","IBCNBLE",198,0)
 N IBY,IB0,IBCS,IBST,IBZIP,IBJ,IBZ,IBX K ADDR S ADDR(1)=""
"RTN","IBCNBLE",199,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,NODE))
"RTN","IBCNBLE",200,0)
 S IBCS=$P(IB0,U,FLD+3),IBST=$P($G(^DIC(5,+$P(IB0,U,FLD+4),0)),U,2),IBZIP=$P(IB0,U,FLD+5)
"RTN","IBCNBLE",201,0)
 S IBZIP=$E(IBZIP,1,5)_$S($E(IBZIP,6,9)'="":"-"_$E(IBZIP,6,9),1:"")
"RTN","IBCNBLE",202,0)
 S IBST=IBST_$S(IBST=""!(IBZIP=""):"",1:"  ")_IBZIP
"RTN","IBCNBLE",203,0)
 S IBCS=IBCS_$S(IBCS=""!(IBST=""):"",1:", ")_IBST
"RTN","IBCNBLE",204,0)
 ;
"RTN","IBCNBLE",205,0)
 S IBJ=1 F IBY=$P(IB0,U,FLD),$P(IB0,U,(FLD+1)),$P(IB0,U,(FLD+2)),IBCS I IBY'="" S IBX=$G(ADDR(IBJ)),IBZ=", " D
"RTN","IBCNBLE",206,0)
 . S:IBX="" IBZ="" S:($L(IBX)+2+$L(IBY))>64 IBZ="",IBJ=IBJ+1
"RTN","IBCNBLE",207,0)
 . S ADDR(IBJ)=$G(ADDR(IBJ))_IBZ_IBY
"RTN","IBCNBLE",208,0)
 Q
"RTN","IBCNBLE",209,0)
 ;
"RTN","IBCNBLE",210,0)
TRACE(IBLINE,IBBUFDA) ; Add the eIIV Trace Number to the display
"RTN","IBCNBLE",211,0)
 NEW RESP,TRACENUM,IBL,IBY
"RTN","IBCNBLE",212,0)
 I '$G(IBBUFDA) G TRACEX
"RTN","IBCNBLE",213,0)
 S RESP=$O(^IBCN(365,"AF",IBBUFDA,""),-1)          ; response ien
"RTN","IBCNBLE",214,0)
 S TRACENUM=""
"RTN","IBCNBLE",215,0)
 I RESP S TRACENUM=$P($G(^IBCN(365,RESP,0)),U,9)   ; trace# field
"RTN","IBCNBLE",216,0)
 S IBL="eIV Trace #: ",IBY=TRACENUM               ; field label/data
"RTN","IBCNBLE",217,0)
 S IBLINE=$$SETL("",IBY,IBL,18,17)             ; add it
"RTN","IBCNBLE",218,0)
TRACEX ;
"RTN","IBCNBLE",219,0)
 Q IBLINE
"RTN","IBCNBLE",220,0)
 ;
"RTN","IBCNBLE",221,0)
SERVLN(IBBUFDA,SRVARRAY) ; create a service date/service type line for the display
"RTN","IBCNBLE",222,0)
 N NODE0,RIEN,SRVCODE,SRVDT,SRVSTR,TQIEN
"RTN","IBCNBLE",223,0)
 S SRVSTR=""
"RTN","IBCNBLE",224,0)
 I '$G(IBBUFDA) G SERVLNX
"RTN","IBCNBLE",225,0)
 S TQIEN=+$O(^IBCN(365.1,"D",IBBUFDA,""),-1)
"RTN","IBCNBLE",226,0)
 S (SRVDT,SRVCODE)="" I TQIEN D
"RTN","IBCNBLE",227,0)
 .S NODE0=$G(^IBCN(365.1,TQIEN,0)),SRVCODE=$P(NODE0,U,20)
"RTN","IBCNBLE",228,0)
 .S RIEN=+$O(^IBCN(365,"AF",IBBUFDA,""))
"RTN","IBCNBLE",229,0)
 .I RIEN S SRVDT=$P($G(^IBCN(365,RIEN,1)),U,10) ; try to get service date from file 365
"RTN","IBCNBLE",230,0)
 .I SRVDT="" S SRVDT=$P(NODE0,U,12) ; if unsuccessful, get it from file 365.1
"RTN","IBCNBLE",231,0)
 .Q
"RTN","IBCNBLE",232,0)
 S SRVSTR="** This response is based on service date "_$S(SRVDT:$$FMTE^XLFDT(SRVDT,"5Z"),1:"UNKNOWN")
"RTN","IBCNBLE",233,0)
 S SRVSTR=SRVSTR_" and service type: "_$S(SRVCODE:$P($G(^IBE(365.013,SRVCODE,0)),U,2),1:"UNKNOWN")_" **"
"RTN","IBCNBLE",234,0)
SERVLNX ;
"RTN","IBCNBLE",235,0)
 D FSTRNG^IBJU1(SRVSTR,79,.SRVARRAY)
"RTN","IBCNBLE",236,0)
 Q
"RTN","IBCNBLP")
0^31^B25507553^B24695524
"RTN","IBCNBLP",1,0)
IBCNBLP ;ALB/ARH-Ins Buffer: LM buffer process screen ;1 Jun 97
"RTN","IBCNBLP",2,0)
 ;;2.0;INTEGRATED BILLING;**82,497**;21-MAR-94;Build 120
"RTN","IBCNBLP",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNBLP",4,0)
 ;
"RTN","IBCNBLP",5,0)
EN ; - main entry point for screen
"RTN","IBCNBLP",6,0)
 D EN^VALM("IBCNB INSURANCE BUFFER PROCESS")
"RTN","IBCNBLP",7,0)
 Q
"RTN","IBCNBLP",8,0)
 ;
"RTN","IBCNBLP",9,0)
HDR ;  header code for list manager display
"RTN","IBCNBLP",10,0)
 N IBX,IB0,IBY,VADM,VA,VAERR S IBX=""
"RTN","IBCNBLP",11,0)
 ;I +DFN D DEM^VADPT S IBX=$E(VADM(1),1,28),IBX=IBX_$J("",35-$L(IBX))_$P(VADM(2),U,2)_"    DOB: "_$P(VADM(3),U,2)_"    AGE: "_VADM(4)
"RTN","IBCNBLP",12,0)
 ;S VALMHDR(1)=IBX
"RTN","IBCNBLP",13,0)
 ;S VALMHDR(2)=" "
"RTN","IBCNBLP",14,0)
 I +DFN D DEM^VADPT S IBX=$E(VADM(1),1,28)
"RTN","IBCNBLP",15,0)
 S VALMHDR(1)=IBX
"RTN","IBCNBLP",16,0)
 S VALMHDR(2)=$P(VADM(2),U,2)_"    DOB: "_$P(VADM(3),U,2)_"    AGE: "_VADM(4)
"RTN","IBCNBLP",17,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,21))
"RTN","IBCNBLP",18,0)
 S IBY=$E($P(IB0,U,4),1,13),IBX=$P($G(^DIC(5,+$P(IB0,U,5),0)),U,2),IBY=IBY_$S(IBY'=""&(IBX'=""):", ",1:"")_IBX
"RTN","IBCNBLP",19,0)
 S IBY=$E($P(IB0,U,1),1,20)_$S(IBY'="":", ",1:"")_IBY,IBY=$S(IBY'="":"   ("_IBY_")",1:"")
"RTN","IBCNBLP",20,0)
 S IBX=$E($P($G(^IBA(355.33,IBBUFDA,20)),U,1),1,18)_IBY,IBX=$J("",40-($L(IBX)\2))_IBX
"RTN","IBCNBLP",21,0)
 S VALMHDR(3)=IBX
"RTN","IBCNBLP",22,0)
 I +$G(IBCNSCRN) D GRPHDR(IBBUFDA) Q
"RTN","IBCNBLP",23,0)
 D PATHDR(IBBUFDA)
"RTN","IBCNBLP",24,0)
 Q
"RTN","IBCNBLP",25,0)
 ;
"RTN","IBCNBLP",26,0)
INIT ;  initialization for list manager list, ifn of record to display required IBBUFDA
"RTN","IBCNBLP",27,0)
 K ^TMP("IBCNBLP",$J),^TMP("IBCNBLPX",$J) N IBINSDA
"RTN","IBCNBLP",28,0)
 I '$G(IBBUFDA) S VALMQUIT="" Q
"RTN","IBCNBLP",29,0)
 S IBINSDA=+$G(IBCNSCRN)
"RTN","IBCNBLP",30,0)
 S DFN=+$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBLP",31,0)
 D BLD
"RTN","IBCNBLP",32,0)
 Q
"RTN","IBCNBLP",33,0)
 ;
"RTN","IBCNBLP",34,0)
HELP ;  list manager help
"RTN","IBCNBLP",35,0)
 D FULL^VALM1
"RTN","IBCNBLP",36,0)
 W !!,"This screen displays a summary of the chosen Buffer entry in the header."
"RTN","IBCNBLP",37,0)
 W !!,"The list portion of the screen may display either:"
"RTN","IBCNBLP",38,0)
 W !,?5,"1) a list of all of the patient's current and past insurance policies,"
"RTN","IBCNBLP",39,0)
 W !,?8,"followed by a list of any Group/Plan that has a Group Name or ",!,?8,"Group Number that may match the Buffer entry's."
"RTN","IBCNBLP",40,0)
 W !,?5,"2) a list of all of the Group/Plans for a user specified insurance company."
"RTN","IBCNBLP",41,0)
 W !!,"Use the 'Insurance Co/Patient' action to toggle between these two screens."
"RTN","IBCNBLP",42,0)
 W !!,"Flags:  '~'  company/group is inactive     '-'  individual patient policy"
"RTN","IBCNBLP",43,0)
 W !!,"Bold Data:  If one of the following Buffer File entry data elements matches all",!,"or the first part of the "
"RTN","IBCNBLP",44,0)
 W "corresponding data element of the policy or group/plan",!,"being displayed then the matching part of the data element will be displayed in",!,"bold characters:"
"RTN","IBCNBLP",45,0)
 W !," Subscriber Id, Insurance Company Name, Group Number, Group Name, Type of Plan"
"RTN","IBCNBLP",46,0)
 W !!,"Bold Number:  On the Group/Plan lists, the number preceding the group/plan being",!,"displayed will be in bold if the patient is already a member of that plan."
"RTN","IBCNBLP",47,0)
 W !!,"The IB INSURANCE SUPERVISOR key is required to either Accept or Reject an entry."
"RTN","IBCNBLP",48,0)
 D PAUSE^VALM1 S VALMBCK="R"
"RTN","IBCNBLP",49,0)
 Q
"RTN","IBCNBLP",50,0)
 ;
"RTN","IBCNBLP",51,0)
EXIT ;  exit list manager option and clean up
"RTN","IBCNBLP",52,0)
 K ^TMP("IBCNBLP",$J),^TMP("IBCNBLPX",$J),DFN,IBCNSCRN
"RTN","IBCNBLP",53,0)
 D CLEAR^VALM1
"RTN","IBCNBLP",54,0)
 Q
"RTN","IBCNBLP",55,0)
 ;
"RTN","IBCNBLP",56,0)
BLD ;  build screen display
"RTN","IBCNBLP",57,0)
 ;
"RTN","IBCNBLP",58,0)
 N PATCMP,GRPCMP,CNT S VALMCNT=0,CNT=0
"RTN","IBCNBLP",59,0)
 ;
"RTN","IBCNBLP",60,0)
 S PATCMP=$$PATDATA(IBBUFDA),GRPCMP=$$GRPDATA(IBBUFDA)
"RTN","IBCNBLP",61,0)
 ;
"RTN","IBCNBLP",62,0)
 I +$G(IBCNSCRN) D GRPLST^IBCNBLP1(.CNT,IBINSDA,DFN,GRPCMP) Q
"RTN","IBCNBLP",63,0)
 ;
"RTN","IBCNBLP",64,0)
 D PATLST^IBCNBLP1(.CNT,DFN,PATCMP)
"RTN","IBCNBLP",65,0)
 D SRCHLST^IBCNBLP1(.CNT,DFN,$P(PATCMP,U,1),$P(GRPCMP,U,1),$P(GRPCMP,U,2))
"RTN","IBCNBLP",66,0)
 Q
"RTN","IBCNBLP",67,0)
 ;
"RTN","IBCNBLP",68,0)
DATE(X) ;
"RTN","IBCNBLP",69,0)
 N Y S Y="" I X?7N.E S Y=$E(X,4,5)_"/"_$E(X,6,7)_"/"_$E(X,2,3)
"RTN","IBCNBLP",70,0)
 Q Y
"RTN","IBCNBLP",71,0)
 ;
"RTN","IBCNBLP",72,0)
 ;
"RTN","IBCNBLP",73,0)
PATHDR(IBBUFDA) ; additional header lines:  display buffer entry for display of existing patient's insurance screen
"RTN","IBCNBLP",74,0)
 Q:'IBBUFDA  N IBX,IBY,IB20,IB40,IB60 S IBX=""
"RTN","IBCNBLP",75,0)
 S IB20=$G(^IBA(355.33,IBBUFDA,20)),IB40=$G(^IBA(355.33,IBBUFDA,40)),IB60=$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBLP",76,0)
 ;
"RTN","IBCNBLP",77,0)
 S IBX="" I 'IB40 S IBY="-" S IBX=$$SETSTR^VALM1(IBY,IBX,4,1)
"RTN","IBCNBLP",78,0)
 S IBY=$P(IB20,U,1) S IBX=$$SETSTR^VALM1(IBY,IBX,5,18)
"RTN","IBCNBLP",79,0)
 S IBY=$P(IB40,U,3) S IBX=$$SETSTR^VALM1(IBY,IBX,25,13)
"RTN","IBCNBLP",80,0)
 S IBY=$P(IB60,U,4) S IBX=$$SETSTR^VALM1(IBY,IBX,40,13)
"RTN","IBCNBLP",81,0)
 S IBY=$P(IB60,U,6),IBY=$$EXPAND^IBTRE(355.33,60.06,IBY) S IBX=$$SETSTR^VALM1(IBY,IBX,55,6)
"RTN","IBCNBLP",82,0)
 S IBY=$$DATE($P(IB60,U,2)) S IBX=$$SETSTR^VALM1(IBY,IBX,63,8)
"RTN","IBCNBLP",83,0)
 S IBY=$$DATE($P(IB60,U,3)) S IBX=$$SETSTR^VALM1(IBY,IBX,73,8)
"RTN","IBCNBLP",84,0)
 S VALMHDR(4)=IBX
"RTN","IBCNBLP",85,0)
 Q
"RTN","IBCNBLP",86,0)
 ;
"RTN","IBCNBLP",87,0)
GRPHDR(IBBUFDA) ; additional header lines:  display buffer entry for display of other insurance group plans screen
"RTN","IBCNBLP",88,0)
 Q:'IBBUFDA  N IBX,IBY,IB40 S IBX=""
"RTN","IBCNBLP",89,0)
 S IB40=$G(^IBA(355.33,IBBUFDA,40))
"RTN","IBCNBLP",90,0)
 ;
"RTN","IBCNBLP",91,0)
 S IBX="" I 'IB40 S IBY="-" S IBX=$$SETSTR^VALM1(IBY,IBX,5,1)
"RTN","IBCNBLP",92,0)
 ;S IBY=$P(IB40,U,2) S IBX=$$SETSTR^VALM1(IBY,IBX,6,20)
"RTN","IBCNBLP",93,0)
 ;S IBY=$P(IB40,U,3) S IBX=$$SETSTR^VALM1(IBY,IBX,30,17)
"RTN","IBCNBLP",94,0)
 S IBY=$P(IB40,U,2) S IBX=$$SETSTR^VALM1(IBY,IBX,6,80)
"RTN","IBCNBLP",95,0)
 S VALMHDR(4)=IBX
"RTN","IBCNBLP",96,0)
 S IBY=$P(IB40,U,3) S IBX=$$SETSTR^VALM1(IBY,IBX,6,55)
"RTN","IBCNBLP",97,0)
 S VALMHDR(5)=IBX
"RTN","IBCNBLP",98,0)
 ;S IBY=$P(IB40,U,9) I +IBY S IBY=$P($G(^IBE(355.1,+IBY,0)),U,1) S IBX=$$SETSTR^VALM1(IBY,IBX,50,30)
"RTN","IBCNBLP",99,0)
 S IBY=$P(IB40,U,9) I +IBY S IBY=$P($G(^IBE(355.1,+IBY,0)),U,1) S IBX=$$SETSTR^VALM1(IBY,IBX,6,30)
"RTN","IBCNBLP",100,0)
 S VALMHDR(6)=IBX
"RTN","IBCNBLP",101,0)
 Q
"RTN","IBCNBLP",102,0)
 ;
"RTN","IBCNBLP",103,0)
PATDATA(IBBUFDA) ; create string of data from buffer entry to compare with data in existing insurance entries
"RTN","IBCNBLP",104,0)
 ; for the patient insurance list compare:  INS COMPANY NAME ^ GROUP NUMBER ^ SUBSCRIBER ID
"RTN","IBCNBLP",105,0)
 N IBX S IBX=$P($G(^IBA(355.33,IBBUFDA,20)),U,1)_U_$P($G(^IBA(355.33,IBBUFDA,40)),U,3)_U_$P($G(^IBA(355.33,IBBUFDA,60)),U,4)
"RTN","IBCNBLP",106,0)
 Q IBX
"RTN","IBCNBLP",107,0)
 ;
"RTN","IBCNBLP",108,0)
GRPDATA(IBBUFDA) ; create string of data from buffer entry to compare with data in existing insurance entries
"RTN","IBCNBLP",109,0)
 ; for the group plan list compare:  GROUP NAME ^ GROUP NUMBER ^ TYPE OF PLAN
"RTN","IBCNBLP",110,0)
 N IBX,IBY S IBY=$G(^IBA(355.33,IBBUFDA,40)) S IBX=$P(IBY,U,2)_U_$P(IBY,U,3)_U_$P($G(^IBE(355.1,+$P(IBY,U,9),0)),U,1)
"RTN","IBCNBLP",111,0)
 Q IBX
"RTN","IBCNBMI")
0^39^B91864404^B90850379
"RTN","IBCNBMI",1,0)
IBCNBMI ;ALB/ARH - Ins Buffer: move buffer data to insurance files ;09 Mar 2005  11:42 AM
"RTN","IBCNBMI",2,0)
 ;;2.0;INTEGRATED BILLING;**82,184,246,251,299,345,361,371,413,416,438,452,497**;21-MAR-94;Build 120
"RTN","IBCNBMI",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBMI",4,0)
 ;
"RTN","IBCNBMI",5,0)
INS(IBBUFDA,IBINSDA,TYPE,RESULT) ;  move buffer insurance company data (file 355.33) to existing Insurance Company (file 36)
"RTN","IBCNBMI",6,0)
 ;
"RTN","IBCNBMI",7,0)
 S IBBUFDA=IBBUFDA_",",IBINSDA=$G(IBINSDA)_","
"RTN","IBCNBMI",8,0)
 D SET("INS",IBBUFDA,IBINSDA,TYPE,.RESULT)
"RTN","IBCNBMI",9,0)
 Q
"RTN","IBCNBMI",10,0)
 ;
"RTN","IBCNBMI",11,0)
GRP(IBBUFDA,IBGRPDA,TYPE,RESULT) ;  move buffer insurance group/plan data (file 355.33) to existing Group/Plan (file 355.3)
"RTN","IBCNBMI",12,0)
 ;
"RTN","IBCNBMI",13,0)
 S IBBUFDA=IBBUFDA_",",IBGRPDA=$G(IBGRPDA)_","
"RTN","IBCNBMI",14,0)
 D SET("GRP",IBBUFDA,IBGRPDA,TYPE,.RESULT)
"RTN","IBCNBMI",15,0)
 D STUFF("GRP",IBGRPDA,.RESULT)
"RTN","IBCNBMI",16,0)
 Q
"RTN","IBCNBMI",17,0)
 ;
"RTN","IBCNBMI",18,0)
POLICY(IBBUFDA,IBPOLDA,TYPE,RESULT) ;  move buffer insurance policy data (file 355.33) to existing Patient Policy (file 2.312)
"RTN","IBCNBMI",19,0)
 ;
"RTN","IBCNBMI",20,0)
 N DFN S DFN=+$G(^IBA(355.33,+$G(IBBUFDA),60)) Q:'DFN
"RTN","IBCNBMI",21,0)
 ;
"RTN","IBCNBMI",22,0)
 S IBBUFDA=IBBUFDA_",",IBPOLDA=$G(IBPOLDA)_","_DFN_","
"RTN","IBCNBMI",23,0)
 D SET("POL",IBBUFDA,IBPOLDA,TYPE,.RESULT)
"RTN","IBCNBMI",24,0)
 D STUFF("POL",IBPOLDA,.RESULT)
"RTN","IBCNBMI",25,0)
 D POLOTH(IBBUFDA,IBPOLDA,.RESULT)
"RTN","IBCNBMI",26,0)
 Q
"RTN","IBCNBMI",27,0)
 ;
"RTN","IBCNBMI",28,0)
SET(SET,IBBUFDA,IBEXTDA,TYPE,RESULT) ; move buffer data to insurance files
"RTN","IBCNBMI",29,0)
 ; Input:  IBBUFDA - ifn of Buffer File entry to move (#355.33)
"RTN","IBCNBMI",30,0)
 ;         IBEXTDA - ifn of insurance entry to update (#36,355.3,2)
"RTN","IBCNBMI",31,0)
 ;         TYPE    - 1 = Merge     (only buffer data moved to blank fields in ins file, no replace)
"RTN","IBCNBMI",32,0)
 ;                   2 = Overwrite (all buffer data moved to ins file, replace existing data)
"RTN","IBCNBMI",33,0)
 ;                   3 = Replace (all buffer data including null move to ins file)
"RTN","IBCNBMI",34,0)
 ;                   4 = Individually Accept (Skip Blanks) (user accepts
"RTN","IBCNBMI",35,0)
 ;  individual diffs b/w buffer data and existing file data (excl blanks)
"RTN","IBCNBMI",36,0)
 ;  to overwrite flds (or addr grp) in existing file)
"RTN","IBCNBMI",37,0)
 ; Output: RESULT - Passed array to return FM error message if there are
"RTN","IBCNBMI",38,0)
 ;                  errors when filing the buffer data
"RTN","IBCNBMI",39,0)
 ;
"RTN","IBCNBMI",40,0)
 N IBX,IBFLDS,EXTFILE,DRBUF,DREXT,BUFARR,EXTARR,IBBUFFLD,IBEXTFLD,IBBUFVAL,IBEXTVAL,IBCHNG,IBCHNGN,IBERR
"RTN","IBCNBMI",41,0)
 ;
"RTN","IBCNBMI",42,0)
 D FIELDS(SET_"FLD")
"RTN","IBCNBMI",43,0)
 S IBX=$P($T(@(SET_"DR")+1),";;",2),EXTFILE=+$P(IBX,U,1),DRBUF=$P(IBX,U,2),DREXT=$P(IBX,U,3)
"RTN","IBCNBMI",44,0)
 ;
"RTN","IBCNBMI",45,0)
 D GETS^DIQ(355.33,IBBUFDA,DRBUF,"E","BUFARR")
"RTN","IBCNBMI",46,0)
 D GETS^DIQ(EXTFILE,IBEXTDA,DREXT,"E","EXTARR")
"RTN","IBCNBMI",47,0)
 ;
"RTN","IBCNBMI",48,0)
 I +$G(TYPE) S IBBUFFLD=0 F  S IBBUFFLD=$O(BUFARR(355.33,IBBUFDA,IBBUFFLD)) Q:'IBBUFFLD  D
"RTN","IBCNBMI",49,0)
 . ;If not called by ACCEPAPI^IBCNICB API, don't update from these 
"RTN","IBCNBMI",50,0)
 . ;fields:
"RTN","IBCNBMI",51,0)
 . ;   Insurance Company Name - #20.01, Reimburse? - 20.05
"RTN","IBCNBMI",52,0)
 . ;   Is this a Group Policy - #40.01
"RTN","IBCNBMI",53,0)
 . I $G(IBSUPRES)'>0,"^20.01^20.05^40.01^"[("^"_IBBUFFLD_"^") Q
"RTN","IBCNBMI",54,0)
 . ;
"RTN","IBCNBMI",55,0)
 . S IBEXTFLD=$G(IBFLDS(IBBUFFLD)) Q:'IBEXTFLD
"RTN","IBCNBMI",56,0)
 . S IBBUFVAL=BUFARR(355.33,IBBUFDA,IBBUFFLD,"E")
"RTN","IBCNBMI",57,0)
 . S IBEXTVAL=$G(EXTARR(EXTFILE,IBEXTDA,IBEXTFLD,"E"))
"RTN","IBCNBMI",58,0)
 . ;
"RTN","IBCNBMI",59,0)
 . I IBBUFVAL=IBEXTVAL Q
"RTN","IBCNBMI",60,0)
 . I TYPE=1,IBEXTVAL'="" Q
"RTN","IBCNBMI",61,0)
 . I TYPE=2,IBBUFVAL="" Q
"RTN","IBCNBMI",62,0)
 . I TYPE=4,'$D(^TMP($J,"IB BUFFER SELECTED",IBBUFFLD)) Q
"RTN","IBCNBMI",63,0)
 . ;
"RTN","IBCNBMI",64,0)
 . S IBCHNG(EXTFILE,IBEXTDA,IBEXTFLD)=IBBUFVAL
"RTN","IBCNBMI",65,0)
 . ;For ACCEPAPI^IBCNICB do not delete the .01 field. This prevents a
"RTN","IBCNBMI",66,0)
 . ;Data Dictionary Deletion Write message
"RTN","IBCNBMI",67,0)
 . Q:IBEXTFLD=".01"
"RTN","IBCNBMI",68,0)
 . S IBCHNGN(EXTFILE,IBEXTDA,IBEXTFLD)=""
"RTN","IBCNBMI",69,0)
 ;
"RTN","IBCNBMI",70,0)
 I $D(IBCHNGN)>9 D FILE^DIE("E","IBCHNGN","IBERR")
"RTN","IBCNBMI",71,0)
 ;Removed delete errors and move FM errors to RESULT
"RTN","IBCNBMI",72,0)
 D:$D(IBERR)>0 REMOVDEL(.IBERR),EHANDLE(SET,.IBERR,.RESULT)
"RTN","IBCNBMI",73,0)
 K IBERR
"RTN","IBCNBMI",74,0)
 I $D(IBCHNG)>9 D FILE^DIE("E","IBCHNG","IBERR")
"RTN","IBCNBMI",75,0)
 ;Move FM errors to RESULT
"RTN","IBCNBMI",76,0)
 D:$D(IBERR)>0 EHANDLE(SET,.IBERR,.RESULT)
"RTN","IBCNBMI",77,0)
 Q
"RTN","IBCNBMI",78,0)
 ;
"RTN","IBCNBMI",79,0)
STUFF(SET,IBEXTDA,RESULT) ; update fields in insurance files that 
"RTN","IBCNBMI",80,0)
 ;should be automatically set when an entry is edited
"RTN","IBCNBMI",81,0)
 ; Input:  IBEXTDA - ifn of insurance entry to update (#36,356,2)
"RTN","IBCNBMI",82,0)
 ; Output: RESULT - Passed array to return FM error message if there are
"RTN","IBCNBMI",83,0)
 ;                  errors when filing the data buffer data
"RTN","IBCNBMI",84,0)
 ;
"RTN","IBCNBMI",85,0)
 N IBX,IBFLDS,EXTFILE,IBEXTFLD,IBEXTVAL,IBCHNG,IBCHNGN,IBERR
"RTN","IBCNBMI",86,0)
 ;
"RTN","IBCNBMI",87,0)
 D FIELDS(SET_"A")
"RTN","IBCNBMI",88,0)
 S IBX=$P($T(@(SET_"DR")+1),";;",2),EXTFILE=+$P(IBX,U,1)
"RTN","IBCNBMI",89,0)
 ;
"RTN","IBCNBMI",90,0)
 S IBEXTFLD=0 F  S IBEXTFLD=$O(IBFLDS(IBEXTFLD)) Q:'IBEXTFLD  D
"RTN","IBCNBMI",91,0)
 . S IBEXTVAL=IBFLDS(IBEXTFLD) I IBEXTVAL="DUZ" S IBEXTVAL="`"_DUZ
"RTN","IBCNBMI",92,0)
 . S IBCHNG(EXTFILE,IBEXTDA,IBEXTFLD)=IBEXTVAL
"RTN","IBCNBMI",93,0)
 . S IBCHNGN(EXTFILE,IBEXTDA,IBEXTFLD)=""
"RTN","IBCNBMI",94,0)
 ;
"RTN","IBCNBMI",95,0)
 D FILE^DIE("E","IBCHNGN","IBERR")
"RTN","IBCNBMI",96,0)
 ;Move FM errors to RESULT
"RTN","IBCNBMI",97,0)
 D:$D(IBERR)>0 EHANDLE(SET,.IBERR,.RESULT)
"RTN","IBCNBMI",98,0)
 K IBERR
"RTN","IBCNBMI",99,0)
 D FILE^DIE("E","IBCHNG","IBERR")
"RTN","IBCNBMI",100,0)
 ;Move FM errors to RESULT
"RTN","IBCNBMI",101,0)
 D:$D(IBERR)>0 EHANDLE(SET,.IBERR,.RESULT)
"RTN","IBCNBMI",102,0)
 Q
"RTN","IBCNBMI",103,0)
 ;
"RTN","IBCNBMI",104,0)
FIELDS(SET) ; return array of corresponding fields: IBFLDS(Buffer #)=Ins #
"RTN","IBCNBMI",105,0)
 N IBI,IBLN,IBB,IBE,IBG K IBFLDS,IBADDS,IBLBLS
"RTN","IBCNBMI",106,0)
 F IBI=1:1 S IBLN=$P($T(@(SET)+IBI),";;",2) Q:IBLN=""  I $E(IBLN,1)'=" " D
"RTN","IBCNBMI",107,0)
 . S IBB=$P(IBLN,U,1),IBE=$P(IBLN,U,2),IBG=$P(IBLN,U,4)
"RTN","IBCNBMI",108,0)
 . I IBB'="",IBE'="" D
"RTN","IBCNBMI",109,0)
 .. S IBFLDS(IBB)=IBE
"RTN","IBCNBMI",110,0)
 .. I SET["FLD" S IBLBLS(IBB)=$P(IBLN,U,3) I +IBG S IBADDS(IBB)=IBE
"RTN","IBCNBMI",111,0)
 Q
"RTN","IBCNBMI",112,0)
 ;
"RTN","IBCNBMI",113,0)
INSDR ;
"RTN","IBCNBMI",114,0)
 ;;36^20.01:20.05;21.01:21.06^.01;.131;.132;.133;.111:.116;1
"RTN","IBCNBMI",115,0)
INSFLD ; corresponding fields: Buffer File (355.33) & Insurance Company file (36)
"RTN","IBCNBMI",116,0)
 ;;20.01^.01^Insurance Company Name^  ; Name
"RTN","IBCNBMI",117,0)
 ;;20.02^.131^Phone Number^           ; MM Phone Number
"RTN","IBCNBMI",118,0)
 ;;20.03^.132^Billing Phone^          ; Billing Phone Number
"RTN","IBCNBMI",119,0)
 ;;20.04^.133^Pre-Cert Phone^         ; Pre-Certification Phone Number
"RTN","IBCNBMI",120,0)
 ;;20.05^1^Reimburse?^                ; Will Reimburse?
"RTN","IBCNBMI",121,0)
 ;;21.01^.111^Street [Line 1]^1       ; MM Street Address [Line 1]
"RTN","IBCNBMI",122,0)
 ;;21.02^.112^Street [Line 2]^1       ; MM Street Address [Line 2]
"RTN","IBCNBMI",123,0)
 ;;21.03^.113^Street [Line 3]^1       ; MM Street Address [Line 3]
"RTN","IBCNBMI",124,0)
 ;;21.04^.114^City^1                  ; MM City
"RTN","IBCNBMI",125,0)
 ;;21.05^.115^State^1                 ; MM State
"RTN","IBCNBMI",126,0)
 ;;21.06^.116^Zip^1                   ; MM Zip Code
"RTN","IBCNBMI",127,0)
 ;
"RTN","IBCNBMI",128,0)
GRPDR ;
"RTN","IBCNBMI",129,0)
 ;;355.3^40.01;90.01;90.02;40.04:40.09;40.1;40.11;^.02;2.01;2.02;.05:.09;6.02;6.03;.12
"RTN","IBCNBMI",130,0)
GRPFLD ;corresponding fields:  Buffer File (355.33) and Insurance Group Plan file (355.3)
"RTN","IBCNBMI",131,0)
 ;;40.01^.02^Is This a Group Policy?^ ; Is this a Group Policy?
"RTN","IBCNBMI",132,0)
 ;;90.01^2.01^Group Name^              ; Group Name
"RTN","IBCNBMI",133,0)
 ;;90.02^2.02^Group Number^            ; Group Number
"RTN","IBCNBMI",134,0)
 ;;40.1^6.02^BIN^                     ; BIN ;;Daou/EEN
"RTN","IBCNBMI",135,0)
 ;;40.11^6.03^PCN^                    ; PCN ;;Daou/EEN
"RTN","IBCNBMI",136,0)
 ;;40.04^.05^Require UR^              ; Utilization Review Required
"RTN","IBCNBMI",137,0)
 ;;40.05^.06^Require Pre-Cert^        ; Pre-Certification Required
"RTN","IBCNBMI",138,0)
 ;;40.06^.12^Require Amb Cert^        ; Ambulatory Care Certification
"RTN","IBCNBMI",139,0)
 ;;40.07^.07^Exclude Pre-Cond^        ; Exclude Pre-Existing Conditions
"RTN","IBCNBMI",140,0)
 ;;40.08^.08^Benefits Assign^         ; Benefits Assignable
"RTN","IBCNBMI",141,0)
 ;;40.09^.09^Type of Plan^            ; Type of Plan
"RTN","IBCNBMI",142,0)
 ;
"RTN","IBCNBMI",143,0)
GRPA ; auto set fields
"RTN","IBCNBMI",144,0)
 ;;1.05^NOW^                          ; Date Last Edited
"RTN","IBCNBMI",145,0)
 ;;1.06^DUZ^                          ; Last edited By
"RTN","IBCNBMI",146,0)
 ;
"RTN","IBCNBMI",147,0)
POLDR ;
"RTN","IBCNBMI",148,0)
 ;;2.312^60.02;60.03;90.03;60.05;60.06;91.01;60.08:62.08^8;3;7.02;6;16;7.01;3.01;3.05:3.1;3.13;3.14;4.01;4.02;4.05;4.06;.2;3.12;2.1;2.015;2.11;2.12;2.01:2.08;5.01
"RTN","IBCNBMI",149,0)
POLFLD ; corresponding fields:  Buffer File (355.33) and Insurance Patient Policy file (2.312)
"RTN","IBCNBMI",150,0)
 ;;60.02^8^Effective Date^            ; Effective Date
"RTN","IBCNBMI",151,0)
 ;;60.03^3^Expiration Date^           ; Expiration Date
"RTN","IBCNBMI",152,0)
 ;;90.03^7.02^Subscriber Id^             ; Subscriber Id
"RTN","IBCNBMI",153,0)
 ;;60.05^6^Whose Insurance^           ; Whose Insurance
"RTN","IBCNBMI",154,0)
 ;;60.06^16^Relationship^             ; Pt. Relationship to Insured
"RTN","IBCNBMI",155,0)
 ;;91.01^7.01^Name of Insured^          ; Name of Insured
"RTN","IBCNBMI",156,0)
 ;;60.08^3.01^Insured's DOB^          ; Insured's DOB
"RTN","IBCNBMI",157,0)
 ;;60.09^3.05^Insured's SSN^          ; Insured's SSN
"RTN","IBCNBMI",158,0)
 ;;60.1^4.01^Primary Provider^        ; Primary Care Provider
"RTN","IBCNBMI",159,0)
 ;;60.11^4.02^Provider Phone^         ; Primary Care Provider Phone
"RTN","IBCNBMI",160,0)
 ;;60.12^.2^Coor of Benefits^         ; Coordination of Benefits
"RTN","IBCNBMI",161,0)
 ;;60.13^3.12^Insured's Sex^          ; Insured's Sex
"RTN","IBCNBMI",162,0)
 ;;60.15^4.05^Rx Relationship^        ; Pharmacy Relationship Code  IB*2*452
"RTN","IBCNBMI",163,0)
 ;;60.16^4.06^Rx Person Code^         ; Pharmacy Person Code        IB*2*452
"RTN","IBCNBMI",164,0)
 ;;  
"RTN","IBCNBMI",165,0)
 ;;61.01^2.1^Emp Sponsored^           ; ESGHP?
"RTN","IBCNBMI",166,0)
 ;;61.02^2.015^Employer Name^         ; Subscriber's Employer Name
"RTN","IBCNBMI",167,0)
 ;;61.03^2.11^Emp Status^             ; Employment Status
"RTN","IBCNBMI",168,0)
 ;;61.04^2.12^Retirement Date^        ; Retirement Date
"RTN","IBCNBMI",169,0)
 ;;61.05^2.01^Send to Employer^       ; Send Bill to Employer?
"RTN","IBCNBMI",170,0)
 ;;61.06^2.02^Emp Street Ln 1^1       ; Employer Claims Street Line 1
"RTN","IBCNBMI",171,0)
 ;;61.07^2.03^Emp Street Ln 2^1       ; Employer Claims Street Line 2
"RTN","IBCNBMI",172,0)
 ;;61.08^2.04^Emp Street Ln 3^1       ; Employer Claims Street Line 3
"RTN","IBCNBMI",173,0)
 ;;61.09^2.05^Emp City^1              ; Employer Claims City
"RTN","IBCNBMI",174,0)
 ;;61.1^2.06^Emp State^1              ; Employer Claims State
"RTN","IBCNBMI",175,0)
 ;;61.11^2.07^Emp Zip Code^1          ; Employer Claims Zip Code
"RTN","IBCNBMI",176,0)
 ;;61.12^2.08^Emp Phone^              ; Employer Claims Phone
"RTN","IBCNBMI",177,0)
 ;;62.01^5.01^Patient Id^             ; Patient Id
"RTN","IBCNBMI",178,0)
 ;;62.02^3.06^Subscr Addr Ln 1^       ; Subscriber Address Line 1
"RTN","IBCNBMI",179,0)
 ;;62.03^3.07^Subscr Addr Ln 2^       ; Subscriber Address Line 2
"RTN","IBCNBMI",180,0)
 ;;62.04^3.08^Subscr City^            ; Subscriber City
"RTN","IBCNBMI",181,0)
 ;;62.05^3.09^Subscr State^           ; Subscriber State
"RTN","IBCNBMI",182,0)
 ;;62.06^3.1^Subscr Zip^              ; Subscriber Zip Code
"RTN","IBCNBMI",183,0)
 ;;62.07^3.13^Subscr Country^         ; Subscriber Country Code
"RTN","IBCNBMI",184,0)
 ;;62.08^3.14^Subscr Cntry Div^       ; Subscriber Country Subdivision Code
"RTN","IBCNBMI",185,0)
 ;
"RTN","IBCNBMI",186,0)
POLA ; auto set fields
"RTN","IBCNBMI",187,0)
 ;;1.03^NOW^                          ; Date Last Verified (default is person that accepts entry)
"RTN","IBCNBMI",188,0)
 ;;1.04^DUZ^                          ; Verified By        (default is person that accepts entry)
"RTN","IBCNBMI",189,0)
 ;;1.05^NOW^                          ; Date Last Edited
"RTN","IBCNBMI",190,0)
 ;;1.06^DUZ^                          ; Last Edited By
"RTN","IBCNBMI",191,0)
 ;
"RTN","IBCNBMI",192,0)
 ;
"RTN","IBCNBMI",193,0)
POLOTH(IBBUFDA,IBPOLDA,RESULT) ; other special cases that can not be transferred using the generic code above, usually because of dependencies
"RTN","IBCNBMI",194,0)
 N IBERR,IB0 S IB0=$G(^IBA(355.33,+IBBUFDA,0))
"RTN","IBCNBMI",195,0)
 ;
"RTN","IBCNBMI",196,0)
 ;  --- if buffer entry was verified before the accept step, then add the correct verifier info to the policy
"RTN","IBCNBMI",197,0)
 I +$P(IB0,U,10) D
"RTN","IBCNBMI",198,0)
 . S IBCHNG(2.312,IBPOLDA,1.03)=$E($P(IB0,U,10),1,12),IBCHNGN(2.312,IBPOLDA,1.03)=""
"RTN","IBCNBMI",199,0)
 . S IBCHNG(2.312,IBPOLDA,1.04)=$P(IB0,U,11),IBCHNGN(2.312,IBPOLDA,1.04)=""
"RTN","IBCNBMI",200,0)
 ;
"RTN","IBCNBMI",201,0)
 I $D(IBCHNGN)>9 D FILE^DIE("I","IBCHNGN","IBERR")
"RTN","IBCNBMI",202,0)
 ;Move FM errors to RESULT
"RTN","IBCNBMI",203,0)
 D:$D(IBERR)>0 EHANDLE("POL",.IBERR,.RESULT)
"RTN","IBCNBMI",204,0)
 K IBERR
"RTN","IBCNBMI",205,0)
 I $D(IBCHNG)>9 D FILE^DIE("I","IBCHNG","IBERR")
"RTN","IBCNBMI",206,0)
 ;Move FM errors to RESULT
"RTN","IBCNBMI",207,0)
 D:$D(IBERR)>0 EHANDLE("POL",.IBERR,.RESULT)
"RTN","IBCNBMI",208,0)
 Q
"RTN","IBCNBMI",209,0)
 ;
"RTN","IBCNBMI",210,0)
PAT(DFN,IBPOLDA) ; Force DOB, SSN & SEX from Patient file (#2) in to Insurance Patient Policy file (2.312)
"RTN","IBCNBMI",211,0)
 N DA,DR,DIE,DOB,SSN,SEX,IENS,WI
"RTN","IBCNBMI",212,0)
 S IENS=IBPOLDA_","_DFN_","
"RTN","IBCNBMI",213,0)
 S WI=$$GET1^DIQ(2.312,IENS,6,"I")
"RTN","IBCNBMI",214,0)
 I WI'="v" Q  ; Only use when Whose Insurance is 'v'
"RTN","IBCNBMI",215,0)
 S DOB=$$GET1^DIQ(2,DFN,.03,"I")
"RTN","IBCNBMI",216,0)
 S SSN=$$GET1^DIQ(2,DFN,.09,"I")
"RTN","IBCNBMI",217,0)
 S SEX=$$GET1^DIQ(2,DFN,.02,"I")
"RTN","IBCNBMI",218,0)
 S DIE="^DPT("_DFN_",.312,",DA(1)=DFN,DA=IBPOLDA
"RTN","IBCNBMI",219,0)
 S DR="3.01///^S X=DOB;3.05///^S X=SSN;3.12///^S X=SEX"
"RTN","IBCNBMI",220,0)
 D ^DIE
"RTN","IBCNBMI",221,0)
 Q
"RTN","IBCNBMI",222,0)
 ;
"RTN","IBCNBMI",223,0)
EHANDLE(SET,FMERR,RESULT) ;
"RTN","IBCNBMI",224,0)
 ;Fileman Error Processing tracking added for ACCEPAPI^IBCNICB API.
"RTN","IBCNBMI",225,0)
 ; INPUT: 
"RTN","IBCNBMI",226,0)
 ;   SET    - File where fileman error occurred
"RTN","IBCNBMI",227,0)
 ;       Value = "INS" --> File 36    --> RESULT(1)
"RTN","IBCNBMI",228,0)
 ;       Value = "GRP" --> File 355.3 --> RESULT(2)
"RTN","IBCNBMI",229,0)
 ;       Value = "POL" --> File 2.312 --> RESULT(3)
"RTN","IBCNBMI",230,0)
 ;   FMERR  - Array that is returned by FM with error messages
"RTN","IBCNBMI",231,0)
 ; OUTPUT:
"RTN","IBCNBMI",232,0)
 ;   RESULT - Passed array to return FM error message if there are
"RTN","IBCNBMI",233,0)
 ;            errors when filing the data buffer data
"RTN","IBCNBMI",234,0)
 ;
"RTN","IBCNBMI",235,0)
 Q:$G(SET)']""!($D(FMERR)'>0)
"RTN","IBCNBMI",236,0)
 N SUB1,RNUM,ERRNUM,LINENUM
"RTN","IBCNBMI",237,0)
 ;Numeric 1st subscript of RESULT array based on file being updated
"RTN","IBCNBMI",238,0)
 ;File 36 = 1, 355.3 = 2, 2.312 = 3 
"RTN","IBCNBMI",239,0)
 S SUB1=$S(SET="INS":1,SET="GRP":2,SET="POL":3,1:"")
"RTN","IBCNBMI",240,0)
 ;Quit if SUB1 doesn't have a value.
"RTN","IBCNBMI",241,0)
 Q:SUB1']""
"RTN","IBCNBMI",242,0)
 S RNUM=$O(RESULT(SUB1,"ERR",9999999999),-1),ERRNUM=0
"RTN","IBCNBMI",243,0)
 F  S ERRNUM=$O(FMERR("DIERR",ERRNUM)) Q:+ERRNUM'>0  D
"RTN","IBCNBMI",244,0)
 . S LINENUM=0
"RTN","IBCNBMI",245,0)
 . F  S LINENUM=$O(FMERR("DIERR",ERRNUM,"TEXT",LINENUM)) Q:+LINENUM'>0  D
"RTN","IBCNBMI",246,0)
 . . S RNUM=RNUM+1
"RTN","IBCNBMI",247,0)
 . . S RESULT(SUB1,"ERR",RNUM)=FMERR("DIERR",ERRNUM,"TEXT",LINENUM)
"RTN","IBCNBMI",248,0)
 Q
"RTN","IBCNBMI",249,0)
 ;
"RTN","IBCNBMI",250,0)
REMOVDEL(FMERR) ;
"RTN","IBCNBMI",251,0)
 ;Removed field delete errors. SET and STUFF API delete data first and
"RTN","IBCNBMI",252,0)
 ;then update with new data from Insurance Buffer file. Error Code 712
"RTN","IBCNBMI",253,0)
 ;"Deletion was attempted but not allowed" errors will be removed from
"RTN","IBCNBMI",254,0)
 ;the returned FM error array 
"RTN","IBCNBMI",255,0)
 ; INPUT/OUTPUT:
"RTN","IBCNBMI",256,0)
 ;   FMERR  - Array that is returned by FM with error messages
"RTN","IBCNBMI",257,0)
 ;
"RTN","IBCNBMI",258,0)
 Q:$D(FMERR)'>0
"RTN","IBCNBMI",259,0)
 N ERRNUM
"RTN","IBCNBMI",260,0)
 S ERRNUM=0
"RTN","IBCNBMI",261,0)
 F  S ERRNUM=$O(FMERR("DIERR",ERRNUM)) Q:+ERRNUM'>0  D
"RTN","IBCNBMI",262,0)
 . I FMERR("DIERR",ERRNUM)=712 K FMERR("DIERR",ERRNUM)
"RTN","IBCNBMI",263,0)
 Q
"RTN","IBCNBU1")
0^57^B34498281^B33733092
"RTN","IBCNBU1",1,0)
IBCNBU1 ;ALB/ARH-Ins Buffer: Utilities ;1 Jun 97
"RTN","IBCNBU1",2,0)
 ;;2.0;INTEGRATED BILLING;**82,184,263,438,497**;21-MAR-94;Build 120
"RTN","IBCNBU1",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNBU1",4,0)
 ;
"RTN","IBCNBU1",5,0)
BUFFER(DFN) ; returns IFN of first buffer entry found for the patient, 0 otherwise
"RTN","IBCNBU1",6,0)
 Q +$O(^IBA(355.33,"C",+$G(DFN),0))
"RTN","IBCNBU1",7,0)
 ;
"RTN","IBCNBU1",8,0)
SELINS() ; user select an insurance company
"RTN","IBCNBU1",9,0)
 N IBX,DIE,DTOUT,DUOUT,DIC,X,Y S IBX=0
"RTN","IBCNBU1",10,0)
 S DIC="^DIC(36,",DIC(0)="AEQ",DIC("A")="Select INSURANCE COMPANY: ",DIC("S")="I '$P(^(0),U,5)" D ^DIC
"RTN","IBCNBU1",11,0)
 I +Y>0 S IBX=Y
"RTN","IBCNBU1",12,0)
 Q IBX
"RTN","IBCNBU1",13,0)
 ;
"RTN","IBCNBU1",14,0)
SELGRP(IBINSDA) ; given a specific insurance company, allow user to choose a group/plan
"RTN","IBCNBU1",15,0)
 N IBX,DIE,DTOUT,DUOUT,DIC,X,Y,IBINSNM S IBX=0
"RTN","IBCNBU1",16,0)
 S IBINSNM=$P($G(^DIC(36,+IBINSDA,0)),U,1)
"RTN","IBCNBU1",17,0)
 W !,IBINSNM
"RTN","IBCNBU1",18,0)
 S X=IBINSNM,DIC="^IBA(355.3,",DIC(0)="EQ",DIC("S")="I +^(0)="_+IBINSDA_"&('$P(^(0),U,11))" D ^DIC
"RTN","IBCNBU1",19,0)
 I +Y>0 S IBX=Y
"RTN","IBCNBU1",20,0)
 Q IBX
"RTN","IBCNBU1",21,0)
 ;
"RTN","IBCNBU1",22,0)
SELEXT(DFN) ; user select existing ins co, group, and if the patient is a member of the group also return the policy
"RTN","IBCNBU1",23,0)
 N IBX,IBINSDA,IBGRPDA,IBPOLDA S (IBINSDA,IBGRPDA,IBPOLDA)=""
"RTN","IBCNBU1",24,0)
 S IBINSDA=$$SELINS() S IBX=+IBINSDA
"RTN","IBCNBU1",25,0)
 I +IBINSDA S IBGRPDA=$$SELGRP(+IBINSDA) I +IBGRPDA S IBX=IBX_U_+IBGRPDA
"RTN","IBCNBU1",26,0)
 I +IBGRPDA,+$G(DFN) S IBPOLDA=$$PTGRP(DFN,IBINSDA,IBGRPDA) I +IBPOLDA S IBX=IBX_U_+IBPOLDA
"RTN","IBCNBU1",27,0)
 Q IBX
"RTN","IBCNBU1",28,0)
 ;
"RTN","IBCNBU1",29,0)
PTGRP(DFN,IBINSDA,IBGRPDA) ; return policy ifn if patient is a member of this group plan
"RTN","IBCNBU1",30,0)
 N IBX,IBY S IBX=0,DFN=+$G(DFN),IBINSDA=+$G(IBINSDA),IBGRPDA=+$G(IBGRPDA)
"RTN","IBCNBU1",31,0)
 S IBY=0 F  S IBY=$O(^DPT(DFN,.312,"B",IBINSDA,IBY)) Q:'IBY  I +$P($G(^DPT(DFN,.312,IBY,0)),U,18)=IBGRPDA S IBX=IBY
"RTN","IBCNBU1",32,0)
 Q IBX
"RTN","IBCNBU1",33,0)
 ;
"RTN","IBCNBU1",34,0)
DISPBUF(IBBUFDA) ; display summary info on a buffer entry
"RTN","IBCNBU1",35,0)
 ;
"RTN","IBCNBU1",36,0)
 Q:'$G(IBBUFDA)
"RTN","IBCNBU1",37,0)
 N IB0,IB60,IB90 S IB0=$G(^IBA(355.33,IBBUFDA,0)) Q:IB0=""
"RTN","IBCNBU1",38,0)
 S IB60=$G(^IBA(355.33,IBBUFDA,60)),IB90=$G(^IBA(355.33,IBBUFDA,90)) ;WCJ;IB*2*497 used new fields for SUB ID and GROUP#
"RTN","IBCNBU1",39,0)
 ;
"RTN","IBCNBU1",40,0)
 W !,"--------------------------------------------------------------------------------"
"RTN","IBCNBU1",41,0)
 W !,?2,"Entered: ",?15,$$FMTE^XLFDT(+IB0,2),?50,"Source: ",?60,$$EXPAND^IBTRE(355.33,.03,$P(IB0,U,3))
"RTN","IBCNBU1",42,0)
 W !,?2,"Entered By: ",?15,$$EXPAND^IBTRE(355.33,.02,+$P(IB0,U,2)),?50,"Verified: ",?60,$$FMTE^XLFDT($P(IB0,U,10),2)
"RTN","IBCNBU1",43,0)
 I +$P(IB0,U,10) W !,?50,"Verif By: ",?60,$E($$EXPAND^IBTRE(355.33,.11,$P(IB0,U,11)),1,20)
"RTN","IBCNBU1",44,0)
 W !!,?2,"Patient: ",?15,$$EXPAND^IBTRE(355.33,60.01,$P(IB60,U,1)),?50,"Sub Id: ",?60,$E($P(IB90,U,3),1,19)
"RTN","IBCNBU1",45,0)
 W !,?2,"Insurance: ",?15,$P($G(^IBA(355.33,+IBBUFDA,20)),U,1),?50,"Group #: ",?60,$E($P(IB90,U,2),1,19)
"RTN","IBCNBU1",46,0)
 W !,?15,$P($G(^IBA(355.33,+IBBUFDA,21)),U,1)
"RTN","IBCNBU1",47,0)
 W !,"--------------------------------------------------------------------------------"
"RTN","IBCNBU1",48,0)
 Q
"RTN","IBCNBU1",49,0)
 ;
"RTN","IBCNBU1",50,0)
LOCK(IBBUFDA,DISP,TO) ; return true if able to lock the buffer entry, if not an DISP is true then will display a message
"RTN","IBCNBU1",51,0)
 ; TO - lock attempt time out & hang time in seconds, default to 4
"RTN","IBCNBU1",52,0)
 N IBX S IBX=0
"RTN","IBCNBU1",53,0)
 S TO=$G(TO,4)
"RTN","IBCNBU1",54,0)
 I +$G(IBBUFDA) L +^IBA(355.33,+IBBUFDA):TO I +$T S IBX=1
"RTN","IBCNBU1",55,0)
 I 'IBX,+$G(DISP) W !!,"Another user is currently editing/processing this entry, please try again later.",! H TO
"RTN","IBCNBU1",56,0)
 I IBX D
"RTN","IBCNBU1",57,0)
 .; eIV real time inquiries temp. global
"RTN","IBCNBU1",58,0)
 .K ^TMP("IBCNERTQ",$J,+IBBUFDA)
"RTN","IBCNBU1",59,0)
 .S ^TMP("IBCNERTQ",$J,+IBBUFDA,"LOCK")=1
"RTN","IBCNBU1",60,0)
 .Q
"RTN","IBCNBU1",61,0)
 Q IBX
"RTN","IBCNBU1",62,0)
 ;
"RTN","IBCNBU1",63,0)
UNLOCK(IBBUFDA) ; unlock a Buffer entry
"RTN","IBCNBU1",64,0)
 K ^TMP("IBCNERTQ",$J,+IBBUFDA,"LOCK")
"RTN","IBCNBU1",65,0)
 I $G(^TMP("IBCNERTQ",$J,+IBBUFDA,"TRIGGER"))=1 D
"RTN","IBCNBU1",66,0)
 .; eIV real time inquiry
"RTN","IBCNBU1",67,0)
 .N TQIEN,RESPONSE,DIE,DA,DR,X,Y
"RTN","IBCNBU1",68,0)
 .S RESPONSE=0
"RTN","IBCNBU1",69,0)
 .; create an entry in eIV transmision queue
"RTN","IBCNBU1",70,0)
 .S TQIEN=$$IBE^IBCNERTQ(+IBBUFDA)
"RTN","IBCNBU1",71,0)
 .; Load and Send HL7 Message
"RTN","IBCNBU1",72,0)
 .I TQIEN S RESPONSE=$$PROCSEND^IBCNERTQ(TQIEN)
"RTN","IBCNBU1",73,0)
 .; set field 355.33/.16 (real time verification)
"RTN","IBCNBU1",74,0)
 .S DIE="^IBA(355.33,",DA=+IBBUFDA,DR=".16////^S X=RESPONSE" D ^DIE
"RTN","IBCNBU1",75,0)
 .K ^TMP("IBCNERTQ",$J,+IBBUFDA,"TRIGGER")
"RTN","IBCNBU1",76,0)
 .Q
"RTN","IBCNBU1",77,0)
 L -^IBA(355.33,+IBBUFDA)
"RTN","IBCNBU1",78,0)
 Q
"RTN","IBCNBU1",79,0)
 ;
"RTN","IBCNBU1",80,0)
DICINS(INSNAME,IBSCACT,IBLISTN) ; user search/selection of existing Insurance Company Names, does not list duplicates, based on names and synonyms
"RTN","IBCNBU1",81,0)
 ;
"RTN","IBCNBU1",82,0)
 ; Input parameters
"RTN","IBCNBU1",83,0)
 ;    INSNAME - user input; partial name match of insurance company
"RTN","IBCNBU1",84,0)
 ;    IBSCACT - 0/1 flag indicating if inactive insurance companies
"RTN","IBCNBU1",85,0)
 ;              should get screened out during the list building
"RTN","IBCNBU1",86,0)
 ;              Default is 0 (no screen)
"RTN","IBCNBU1",87,0)
 ;    IBLISTN - number of entries to display in the lister before
"RTN","IBCNBU1",88,0)
 ;              giving the user a chance to select. Default is 4.
"RTN","IBCNBU1",89,0)
 ; Output
"RTN","IBCNBU1",90,0)
 ;    returns Ins name, or -1 if ^, or 0 if none selected
"RTN","IBCNBU1",91,0)
 ;
"RTN","IBCNBU1",92,0)
 S IBSCACT=$G(IBSCACT,0)  ; flag to screen out inactive ins
"RTN","IBCNBU1",93,0)
 S IBLISTN=$G(IBLISTN,4)  ; number of list entries before user selection
"RTN","IBCNBU1",94,0)
 ;
"RTN","IBCNBU1",95,0)
 N IBX,IBINB,IBCX,IBSEL,IBXRF,IBNAME,IBSYNM,IBCNT,IBC1,IBINSIEN,IBLINE
"RTN","IBCNBU1",96,0)
 S IBSEL=0 K ^TMP($J,"IBINSS"),^TMP($J,"IBINSSB") I INSNAME="" G DINSQ
"RTN","IBCNBU1",97,0)
 ;
"RTN","IBCNBU1",98,0)
 S INSNAME=$$UP^XLFSTR(INSNAME),IBX=$L(INSNAME),IBINB=$E(INSNAME,1,(IBX-1))_$C($A($E(INSNAME,IBX))-1)_"~"
"RTN","IBCNBU1",99,0)
 ;
"RTN","IBCNBU1",100,0)
 F IBCX="C","B" S IBXRF=IBINB D
"RTN","IBCNBU1",101,0)
 . F  S IBXRF=$O(^DIC(36,IBCX,IBXRF)) Q:IBXRF=""!($E(IBXRF,1,IBX)'=INSNAME)  D
"RTN","IBCNBU1",102,0)
 .. S IBINSIEN=0
"RTN","IBCNBU1",103,0)
 .. F  S IBINSIEN=+$O(^DIC(36,IBCX,IBXRF,IBINSIEN)) Q:'IBINSIEN  D
"RTN","IBCNBU1",104,0)
 ... I '$D(^DIC(36,IBINSIEN,0)) Q  ; bad xref entry?
"RTN","IBCNBU1",105,0)
 ... I IBSCACT,$P($G(^DIC(36,IBINSIEN,0)),U,5) Q   ; inactive
"RTN","IBCNBU1",106,0)
 ... I IBSCACT,$P($G(^DIC(36,IBINSIEN,5)),U,1) Q   ; scheduled for deletion
"RTN","IBCNBU1",107,0)
 ... S IBNAME=$P($G(^DIC(36,IBINSIEN,0)),U,1)
"RTN","IBCNBU1",108,0)
 ... I IBNAME="" Q
"RTN","IBCNBU1",109,0)
 ... I $D(^TMP($J,"IBINSSB",IBNAME)) Q
"RTN","IBCNBU1",110,0)
 ... S ^TMP($J,"IBINSSB",IBNAME)=$S(IBNAME=IBXRF:"",1:IBXRF)
"RTN","IBCNBU1",111,0)
 ... Q
"RTN","IBCNBU1",112,0)
 ;
"RTN","IBCNBU1",113,0)
 S IBCNT=0,IBX="" F  S IBX=$O(^TMP($J,"IBINSSB",IBX)) Q:IBX=""  S IBCNT=IBCNT+1,^TMP($J,"IBINSS",IBCNT)=IBX
"RTN","IBCNBU1",114,0)
 ;
"RTN","IBCNBU1",115,0)
 S (IBCNT,IBC1)=0 F  S IBCNT=$O(^TMP($J,"IBINSS",IBCNT)) Q:'IBCNT  D  I +IBSEL Q
"RTN","IBCNBU1",116,0)
 . S IBNAME=^TMP($J,"IBINSS",IBCNT) Q:IBNAME=""  S IBSYNM=$G(^TMP($J,"IBINSSB",IBNAME))
"RTN","IBCNBU1",117,0)
 . S IBLINE=$J(IBCNT,7)_"   "_$$FO^IBCNEUT1(IBNAME,40)_IBSYNM
"RTN","IBCNBU1",118,0)
 . DO EN^DDIOL(IBLINE)
"RTN","IBCNBU1",119,0)
 . S IBC1=IBC1+1 I '(IBCNT#IBLISTN) S IBSEL=$$DIR(IBC1)
"RTN","IBCNBU1",120,0)
 . Q
"RTN","IBCNBU1",121,0)
 ;
"RTN","IBCNBU1",122,0)
 I 'IBSEL,+(IBC1#IBLISTN) S IBSEL=$$DIR(IBC1)
"RTN","IBCNBU1",123,0)
 ;
"RTN","IBCNBU1",124,0)
 I IBSEL>0 S IBSEL=$G(^TMP($J,"IBINSS",IBSEL))
"RTN","IBCNBU1",125,0)
 ;
"RTN","IBCNBU1",126,0)
DINSQ K ^TMP($J,"IBINSS"),^TMP($J,"IBCNSSB")
"RTN","IBCNBU1",127,0)
 Q IBSEL
"RTN","IBCNBU1",128,0)
 ;
"RTN","IBCNBU1",129,0)
DIR(MAX) ; DIR call for DICINS search for insurance company name
"RTN","IBCNBU1",130,0)
 N DIR,DIRUT,DTOUT,DUOUT,IBX,X,Y S IBX=0,DIR(0)="LOA^1:"_MAX_"^K:X'>0!(X>"_MAX_") X",DIR("A")="CHOOSE 1-"_MAX_": "
"RTN","IBCNBU1",131,0)
 I $G(MAX)>0 D ^DIR K DIR S IBX=$S($D(DTOUT)!$D(DUOUT):-1,+Y:+Y,1:0)
"RTN","IBCNBU1",132,0)
 Q IBX
"RTN","IBCNBU1",133,0)
 ;
"RTN","IBCNBU1",134,0)
DICBUF(INSNAME,DFN,IBDUZ) ; display list of editable buffer entries based on insurance name, may specify patient and/or enterer
"RTN","IBCNBU1",135,0)
 ; (non-MCCR people: only the person that created an entry should be able to edit it, everyone else should create new ones)
"RTN","IBCNBU1",136,0)
 N X,Y,IBX,DIC,DA,DR,DIR,DIRUT,DTOUT,DUOUT,D S IBX=0
"RTN","IBCNBU1",137,0)
 ;
"RTN","IBCNBU1",138,0)
 S DIC("W")="W ""   "",$P($G(^(20)),U,1),""   "",$P($G(^(21)),U,1)"
"RTN","IBCNBU1",139,0)
 S DIC("S")="I $P(^(0),U,4)=""E""&('$P(^(0),U,10))" S:+$G(IBDUZ) DIC("S")=DIC("S")_"&(+$P(^(0),U,2)="_IBDUZ_")" S:+$G(DFN) DIC("S")=DIC("S")_"&(+$G(^(60))="_DFN_")"
"RTN","IBCNBU1",140,0)
 S DIC="^IBA(355.33,",DIC(0)="EM",X=$$UP^XLFSTR($G(INSNAME)),D="D" D IX^DIC I '$D(DTOUT),'$D(DUOUT),+Y>0 S IBX=+Y
"RTN","IBCNBU1",141,0)
 Q IBX
"RTN","IBCNEBF")
0^12^B46385823^B46987961
"RTN","IBCNEBF",1,0)
IBCNEBF ;DAOU/ALA - Create an Entry in the Buffer File ;20-JUN-2002
"RTN","IBCNEBF",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,361,371,416,438,497**;21-MAR-94;Build 120
"RTN","IBCNEBF",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEBF",4,0)
 ;
"RTN","IBCNEBF",5,0)
 ;**Program Description**
"RTN","IBCNEBF",6,0)
 ;  This program will create a Buffer entry based upon input values
"RTN","IBCNEBF",7,0)
 ;
"RTN","IBCNEBF",8,0)
 Q
"RTN","IBCNEBF",9,0)
 ;
"RTN","IBCNEBF",10,0)
PT(DFN,IRIEN,SYMBOL,OVRRIDE,ADD,IBERROR) ;  Get data
"RTN","IBCNEBF",11,0)
 ;   from a specific patient and insurance record entry
"RTN","IBCNEBF",12,0)
 ;
"RTN","IBCNEBF",13,0)
 ;  Input Parameters
"RTN","IBCNEBF",14,0)
 ;    DFN = Patient IEN
"RTN","IBCNEBF",15,0)
 ;    IRIEN = Patient Insurance Record IEN
"RTN","IBCNEBF",16,0)
 ;    SYMBOL = eIV Symbol IEN
"RTN","IBCNEBF",17,0)
 ;    OVRRIDE = Override flag for ins. buffer record  (0 or 1)
"RTN","IBCNEBF",18,0)
 ;    ADD = If defined, then it will add a new Buffer entry
"RTN","IBCNEBF",19,0)
 ;    IBERROR = If defined, then it will be updated with error info.
"RTN","IBCNEBF",20,0)
 ;              OPTIONALLY PASSED BY REFERENCE
"RTN","IBCNEBF",21,0)
 ;
"RTN","IBCNEBF",22,0)
 I DFN=""!(IRIEN="") Q   ; * do not require SYMBOL or OVRRIDE
"RTN","IBCNEBF",23,0)
 ;
"RTN","IBCNEBF",24,0)
 ;
"RTN","IBCNEBF",25,0)
 N VBUF,IDATA0,IDATA3,IDATA7,IEN,INAME,PNAME,IIEN,GNUMB,GNAME,SUBID,PPHONE,PATID
"RTN","IBCNEBF",26,0)
 N BPHONE,EFFDT,EXPDT,WHO,REL,IDOB,ISSN,COB,TQIEN,RDATA,ISEX,NAME
"RTN","IBCNEBF",27,0)
 N MSG,XMSUB,MSGP,INSDATA,PCE,BFD,BFN,INSPCE,ESGHPARR
"RTN","IBCNEBF",28,0)
 N SUBADDR1,SUBADDR2,SUBCITY,SUBSTATE,SUBZIP,SUBCNTRY,SUBCNDIV
"RTN","IBCNEBF",29,0)
 ;
"RTN","IBCNEBF",30,0)
 S IDATA0=$G(^DPT(DFN,.312,IRIEN,0)),IDATA3=$G(^DPT(DFN,.312,IRIEN,3))
"RTN","IBCNEBF",31,0)
 S IDATA7=$G(^DPT(DFN,.312,IRIEN,7))
"RTN","IBCNEBF",32,0)
 S IIEN=$P(IDATA0,U,1),INAME=$$GET1^DIQ(36,IIEN,.01,"E")
"RTN","IBCNEBF",33,0)
 S PPHONE=$P($G(^DIC(36,IIEN,.13)),U,3),BPHONE=$P($G(^DIC(36,IIEN,.13)),U,2)
"RTN","IBCNEBF",34,0)
 S NAME=$P(IDATA7,U,1),SUBID=$P(IDATA7,U,2)
"RTN","IBCNEBF",35,0)
 S PATID=$P($G(^DPT(DFN,.312,IRIEN,5)),U,1)
"RTN","IBCNEBF",36,0)
 S WHO=$P(IDATA0,U,6),COB=$P(IDATA0,U,20)
"RTN","IBCNEBF",37,0)
 S IDOB=$P(IDATA3,U,1),ISSN=$P(IDATA3,U,5),ISEX=$P(IDATA3,U,12)
"RTN","IBCNEBF",38,0)
 S EFFDT=$P(IDATA0,U,8),EXPDT=$P(IDATA0,U,4)
"RTN","IBCNEBF",39,0)
 S REL=$P($G(^DPT(DFN,.312,IRIEN,4)),U,3)
"RTN","IBCNEBF",40,0)
 S SUBADDR1=$P(IDATA3,U,6),SUBADDR2=$P(IDATA3,U,7)
"RTN","IBCNEBF",41,0)
 S SUBCITY=$P(IDATA3,U,8),SUBSTATE=$P(IDATA3,U,9),SUBZIP=$P(IDATA3,U,10)
"RTN","IBCNEBF",42,0)
 S SUBCNTRY=$P(IDATA3,U,13),SUBCNDIV=$P(IDATA3,U,14)
"RTN","IBCNEBF",43,0)
 ;
"RTN","IBCNEBF",44,0)
 S IENS=IRIEN_","_DFN_","
"RTN","IBCNEBF",45,0)
 S GNUMB=$$GET1^DIQ(2.312,IENS,21,"E")
"RTN","IBCNEBF",46,0)
 S GNAME=$$GET1^DIQ(2.312,IENS,20,"E")
"RTN","IBCNEBF",47,0)
 ;
"RTN","IBCNEBF",48,0)
 ; Capture the employer sponsored insurance fields into array
"RTN","IBCNEBF",49,0)
 ;   ESGHPARR(buffer field number) = data
"RTN","IBCNEBF",50,0)
 ;
"RTN","IBCNEBF",51,0)
 S INSDATA=$G(^DPT(DFN,.312,IRIEN,2)),PCE=0
"RTN","IBCNEBF",52,0)
 F BFD=5:1:12,2,1,3,4 S PCE=PCE+1,BFN=BFD/100+61,INSPCE=$P(INSDATA,U,PCE) I INSPCE'="" S ESGHPARR(BFN)=INSPCE
"RTN","IBCNEBF",53,0)
 ;
"RTN","IBCNEBF",54,0)
 D FIL
"RTN","IBCNEBF",55,0)
 K ADD
"RTN","IBCNEBF",56,0)
 Q
"RTN","IBCNEBF",57,0)
 ;
"RTN","IBCNEBF",58,0)
RP(IEN,ADD,BUFF) ;  Get data from a specific response record
"RTN","IBCNEBF",59,0)
 ;
"RTN","IBCNEBF",60,0)
 ;  Input Parameter
"RTN","IBCNEBF",61,0)
 ;    IEN  = Internal entry number of the Response
"RTN","IBCNEBF",62,0)
 ;    ADD  = If defined, then it will add a new Buffer entry
"RTN","IBCNEBF",63,0)
 ;    BUFF = IEN of the Buffer Entry to be updated (optional)
"RTN","IBCNEBF",64,0)
 ;
"RTN","IBCNEBF",65,0)
 S BUFF=$G(BUFF) ; Initialize optional parameter
"RTN","IBCNEBF",66,0)
 ;
"RTN","IBCNEBF",67,0)
 N BPHONE,COB,DFN,EFFDT,EXPDT,GNAME,GNUMB,IDOB,IIEN,INAME,IRIEN,ISEX,ISSN,NAME
"RTN","IBCNEBF",68,0)
 N PATID,PIEN,PNAME,PPHONE,RDATA,RDATA5,RDATA13,RDATA14,REL,RSTYPE,SUBID,TQIEN,WHO
"RTN","IBCNEBF",69,0)
 N SUBADDR1,SUBADDR2,SUBCITY,SUBSTATE,SUBZIP,SUBCNTRY,SUBCNDIV
"RTN","IBCNEBF",70,0)
 ;
"RTN","IBCNEBF",71,0)
 S DFN=$P(^IBCN(365,IEN,0),U,2),TQIEN=$P(^IBCN(365,IEN,0),U,5)
"RTN","IBCNEBF",72,0)
 S PIEN=$P(^IBCN(365,IEN,0),U,3),RSTYPE=$P(^(0),U,10)
"RTN","IBCNEBF",73,0)
 I PIEN'="" S PNAME=$P(^IBE(365.12,PIEN,0),U,1)
"RTN","IBCNEBF",74,0)
 I TQIEN'="" S IRIEN=$P($G(^IBCN(365.1,TQIEN,0)),U,13)
"RTN","IBCNEBF",75,0)
 I $G(IRIEN)'="" S INAME="" D
"RTN","IBCNEBF",76,0)
 . S IIEN=$P($G(^DPT(DFN,.312,IRIEN,0)),U,1)
"RTN","IBCNEBF",77,0)
 . I IIEN="" Q
"RTN","IBCNEBF",78,0)
 . S INAME=$P(^DIC(36,IIEN,0),U,1)
"RTN","IBCNEBF",79,0)
 S RDATA=$G(^IBCN(365,IEN,1)),RDATA5=$G(^IBCN(365,IEN,5))
"RTN","IBCNEBF",80,0)
 S RDATA13=$G(^IBCN(365,IEN,13)),RDATA14=$G(^IBCN(365,IEN,14))
"RTN","IBCNEBF",81,0)
 S NAME=$P(RDATA13,U,1)
"RTN","IBCNEBF",82,0)
 S INAME=$S($G(INAME)'=""&(RSTYPE="O"):INAME,1:$G(PNAME))
"RTN","IBCNEBF",83,0)
 S IDOB=$P(RDATA,U,2)
"RTN","IBCNEBF",84,0)
 S ISSN=$P(RDATA,U,3)
"RTN","IBCNEBF",85,0)
 S ISEX=$P(RDATA,U,4)
"RTN","IBCNEBF",86,0)
 S COB=$P(RDATA,U,13)
"RTN","IBCNEBF",87,0)
 S SUBID=$P(RDATA13,U,2)
"RTN","IBCNEBF",88,0)
 S PATID=$P(RDATA,U,18)
"RTN","IBCNEBF",89,0)
 S GNAME=$P(RDATA14,U,1)
"RTN","IBCNEBF",90,0)
 S GNUMB=$P(RDATA14,U,2)
"RTN","IBCNEBF",91,0)
 S WHO=$P(RDATA,U,8)
"RTN","IBCNEBF",92,0)
 S REL=$$PREL^IBCNEHLU(355.33,60.14,$$GET1^DIQ(365,IEN,8.01))  ; IB*2*497  VALUE FROM 365,8.01 needs evaluation and possible conversion 
"RTN","IBCNEBF",93,0)
 S EFFDT=$P(RDATA,U,11)
"RTN","IBCNEBF",94,0)
 S EXPDT=$P(RDATA,U,12)
"RTN","IBCNEBF",95,0)
 S SUBADDR1=$P(RDATA5,U),SUBADDR2=$P(RDATA5,U,2),SUBCITY=$P(RDATA5,U,3)
"RTN","IBCNEBF",96,0)
 S SUBSTATE=$P(RDATA5,U,4),SUBZIP=$P(RDATA5,U,5),SUBCNTRY=$P(RDATA5,U,6)
"RTN","IBCNEBF",97,0)
 S SUBCNDIV=$P(RDATA5,U,7)
"RTN","IBCNEBF",98,0)
 S PPHONE="",BPHONE=""
"RTN","IBCNEBF",99,0)
 ;
"RTN","IBCNEBF",100,0)
 D FIL
"RTN","IBCNEBF",101,0)
 K DFN,VBUF,IEN,IRIEN,INAME,PNAME,IIEN,GNUMB,GNAME,SUBID,PPHONE,PATID
"RTN","IBCNEBF",102,0)
 K BPHONE,EFFDT,EXPDT,WHO,REL,IDOB,ISSN,COB,TQIEN,RDATA,ISEX,NAME
"RTN","IBCNEBF",103,0)
 K ADD,%DT,D0,DG,DIC,DISYS,DIW,IENS,IBEISTC
"RTN","IBCNEBF",104,0)
 Q
"RTN","IBCNEBF",105,0)
 ;
"RTN","IBCNEBF",106,0)
FIL ;  File Buffer Data
"RTN","IBCNEBF",107,0)
 ;
"RTN","IBCNEBF",108,0)
 S MSGP=$$MGRP^IBCNEUT5()
"RTN","IBCNEBF",109,0)
 ;
"RTN","IBCNEBF",110,0)
 ; Variable IDUZ is optionally set by the calling routine.  If it is
"RTN","IBCNEBF",111,0)
 ; not defined, it will be set to the specific, non-human user.
"RTN","IBCNEBF",112,0)
 ;
"RTN","IBCNEBF",113,0)
 I $G(IDUZ)="" S IDUZ=$$FIND1^DIC(200,"","X","INTERFACE,IB EIV")
"RTN","IBCNEBF",114,0)
 ;
"RTN","IBCNEBF",115,0)
 I $G(ADD) S VBUF(.02)=IDUZ  ; Entered By
"RTN","IBCNEBF",116,0)
 S VBUF(.12)=$G(SYMBOL)   ; Buffer Symbol
"RTN","IBCNEBF",117,0)
 S VBUF(.13)=$G(OVRRIDE) ; Override freshness flag
"RTN","IBCNEBF",118,0)
 S VBUF(.18)=$G(IBELIGDT) ; eligibility date, only comes from ^IBCNEQU (real time eIV inquiry)
"RTN","IBCNEBF",119,0)
 I '$G(ERACT) D  ; Only file if not an error
"RTN","IBCNEBF",120,0)
 . S VBUF(20.01)=INAME  ; Insurance Company/Payer Name
"RTN","IBCNEBF",121,0)
 . S VBUF(60.01)=DFN  ; Patient IEN
"RTN","IBCNEBF",122,0)
 . S VBUF(90.02)=GNUMB  ; Group Number
"RTN","IBCNEBF",123,0)
 . S VBUF(90.01)=GNAME  ; Group Name
"RTN","IBCNEBF",124,0)
 . S VBUF(91.01)=NAME  ; Name of Insured
"RTN","IBCNEBF",125,0)
 . S VBUF(90.03)=SUBID  ; Subscriber ID
"RTN","IBCNEBF",126,0)
 . S VBUF(62.01)=PATID  ; Patient/Member ID
"RTN","IBCNEBF",127,0)
 . S VBUF(20.04)=PPHONE  ; Precertification Phone
"RTN","IBCNEBF",128,0)
 . S VBUF(20.03)=BPHONE  ; Billing Phone
"RTN","IBCNEBF",129,0)
 . S VBUF(60.02)=EFFDT  ; Effective Date
"RTN","IBCNEBF",130,0)
 . S VBUF(60.03)=EXPDT  ; Expiration Date
"RTN","IBCNEBF",131,0)
 . S VBUF(60.05)=WHO  ; Whose Insurance
"RTN","IBCNEBF",132,0)
 . S VBUF(60.14)=REL  ;  Patient Relationship
"RTN","IBCNEBF",133,0)
 . S VBUF(60.08)=IDOB  ;  Insured's DOB
"RTN","IBCNEBF",134,0)
 . S VBUF(60.09)=ISSN  ;  Insured's SSN
"RTN","IBCNEBF",135,0)
 . S VBUF(60.12)=COB  ;  Coordination of Benefits
"RTN","IBCNEBF",136,0)
 . S VBUF(60.13)=ISEX  ;  Insured's Sex
"RTN","IBCNEBF",137,0)
 . S VBUF(62.02)=SUBADDR1 ; Subscriber address line 1
"RTN","IBCNEBF",138,0)
 . S VBUF(62.03)=SUBADDR2 ; Subscriber address line 2
"RTN","IBCNEBF",139,0)
 . S VBUF(62.04)=SUBCITY ; Subscriber address city
"RTN","IBCNEBF",140,0)
 . S VBUF(62.05)=SUBSTATE ; Subscriber address state
"RTN","IBCNEBF",141,0)
 . S VBUF(62.06)=SUBZIP ; Subscriber address zip code
"RTN","IBCNEBF",142,0)
 . S VBUF(62.07)=SUBCNTRY ; Subscriber address country code
"RTN","IBCNEBF",143,0)
 . S VBUF(62.08)=SUBCNDIV ; Subscriber address country subdivision code
"RTN","IBCNEBF",144,0)
 . ;
"RTN","IBCNEBF",145,0)
 . ; Define Service Type Code (STC) to be sent with Insurance Inquiry
"RTN","IBCNEBF",146,0)
 . ; IBEISTC contains the STC defined by User using option EI, otherwise default is sent
"RTN","IBCNEBF",147,0)
 . I +$G(IBEISTC) S VBUF(80.01)=IBEISTC
"RTN","IBCNEBF",148,0)
 . K IBEISTC
"RTN","IBCNEBF",149,0)
 . ;
"RTN","IBCNEBF",150,0)
 . ; If the employer sponsored insurance array exists, then merge it in
"RTN","IBCNEBF",151,0)
 . I $D(ESGHPARR) M VBUF=ESGHPARR
"RTN","IBCNEBF",152,0)
 ;
"RTN","IBCNEBF",153,0)
 ; Do not overwrite the existing insurance co. name if it already exists
"RTN","IBCNEBF",154,0)
 I $G(ADD)="",$G(BUFF)'="" K VBUF(20.01)
"RTN","IBCNEBF",155,0)
 ;
"RTN","IBCNEBF",156,0)
 ; ** initialize IBERROR
"RTN","IBCNEBF",157,0)
 S IBERROR=""
"RTN","IBCNEBF",158,0)
 ;
"RTN","IBCNEBF",159,0)
 ;  If need to add a new Buffer entry ...
"RTN","IBCNEBF",160,0)
 ;
"RTN","IBCNEBF",161,0)
 ;  Variable IBFDA is returned to the calling routine as the IEN of
"RTN","IBCNEBF",162,0)
 ;  the buffer entry that was just added.
"RTN","IBCNEBF",163,0)
 ;
"RTN","IBCNEBF",164,0)
 I $G(ADD) D
"RTN","IBCNEBF",165,0)
 . S IBFDA=$$ADDSTF^IBCNBES(5,DFN,.VBUF)
"RTN","IBCNEBF",166,0)
 . ; Error Message is 2nd piece of result
"RTN","IBCNEBF",167,0)
 . S IBERROR=$P(IBFDA,U,2)
"RTN","IBCNEBF",168,0)
 . S IBFDA=$P(IBFDA,U,1)
"RTN","IBCNEBF",169,0)
 ;
"RTN","IBCNEBF",170,0)
 ;  If an error, send an email message
"RTN","IBCNEBF",171,0)
 I IBERROR'="" D  Q
"RTN","IBCNEBF",172,0)
 . S MSG(1)="Error returned by $$ADDSTF^IBCNBES:"
"RTN","IBCNEBF",173,0)
 . S MSG(2)=IBERROR
"RTN","IBCNEBF",174,0)
 . S MSG(3)="Values:"
"RTN","IBCNEBF",175,0)
 . S MSG(4)=" Patient DFN = "_$G(DFN)
"RTN","IBCNEBF",176,0)
 . S MSG(5)=" Pt Ins Record IEN = "_$G(IRIEN)
"RTN","IBCNEBF",177,0)
 . S MSG(6)="Please log a Remedy Ticket for this problem."
"RTN","IBCNEBF",178,0)
 . S XMSUB="Error creating Buffer Entry."
"RTN","IBCNEBF",179,0)
 . D MSG^IBCNEUT5(MSGP,XMSUB,"MSG(")
"RTN","IBCNEBF",180,0)
 . K MSGP,MSG,XMSUB,IBERR
"RTN","IBCNEBF",181,0)
 ;
"RTN","IBCNEBF",182,0)
 ;  If need to update a new Buffer Entry ...
"RTN","IBCNEBF",183,0)
 ;
"RTN","IBCNEBF",184,0)
 ;  Variable BUFF is passed into this routine whenever the buffer
"RTN","IBCNEBF",185,0)
 ;  entry is known and the ADD flag is off.  The existing buffer entry
"RTN","IBCNEBF",186,0)
 ;  is edited in this case.
"RTN","IBCNEBF",187,0)
 ;
"RTN","IBCNEBF",188,0)
 I $G(ADD)="" D EDITSTF^IBCNBES(BUFF,.VBUF)
"RTN","IBCNEBF",189,0)
 ;
"RTN","IBCNEBF",190,0)
 ;  If an error occurred in EDITSTF, the error array is not returned
"RTN","IBCNEBF",191,0)
 ;
"RTN","IBCNEBF",192,0)
 Q
"RTN","IBCNEDE")
0^55^B34057908^B19636990
"RTN","IBCNEDE",1,0)
IBCNEDE ;DAOU/DAC - eIV DATA EXTRACTS ;04-JUN-2002
"RTN","IBCNEDE",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,300,416,438,497**;21-MAR-94;Build 120
"RTN","IBCNEDE",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDE",4,0)
 ;
"RTN","IBCNEDE",5,0)
 ;**Program Description**
"RTN","IBCNEDE",6,0)
 ;  This program is the main driver for all data extracts associated
"RTN","IBCNEDE",7,0)
 ;  with the electronic Insurance Verification interface.
"RTN","IBCNEDE",8,0)
 ;  This program will run each extract in the specified order, which 
"RTN","IBCNEDE",9,0)
 ;  populates the eIV Transmission File (sometimes it creates/updates 
"RTN","IBCNEDE",10,0)
 ;  an entry in the insurance buffer as well).  It then begins to 
"RTN","IBCNEDE",11,0)
 ;  process the inquiries in the eIV Transmission File.
"RTN","IBCNEDE",12,0)
 ;  08-08-2002
"RTN","IBCNEDE",13,0)
 ;  As this program will run in the background the variable ZTSTOP
"RTN","IBCNEDE",14,0)
 ;  can be returned from any of the extracts should a TaskMan stop
"RTN","IBCNEDE",15,0)
 ;  request occur.  Also, clear out the task record before exiting.
"RTN","IBCNEDE",16,0)
 ; 08-09-2002
"RTN","IBCNEDE",17,0)
 ;  Added check for "~NO PAYER", if it does not exist, build it
"RTN","IBCNEDE",18,0)
 ;
"RTN","IBCNEDE",19,0)
 Q
"RTN","IBCNEDE",20,0)
 ;
"RTN","IBCNEDE",21,0)
EN ; Entry Point
"RTN","IBCNEDE",22,0)
 ; Prevent simultaneous runs
"RTN","IBCNEDE",23,0)
 ; Set error trap to ensure that lock is released
"RTN","IBCNEDE",24,0)
 N $ES,$ET
"RTN","IBCNEDE",25,0)
 S $ET="D ER^IBCNEDE"
"RTN","IBCNEDE",26,0)
 ; Check lock
"RTN","IBCNEDE",27,0)
 L +^TMP("IBCNEDE"):1 I '$T D  G ENX
"RTN","IBCNEDE",28,0)
 . I '$D(ZTSK) W !!,"The eIV Nightly Task is already running, please retry later." D PAUSE^VALM1
"RTN","IBCNEDE",29,0)
 ; Reset reg ack flag
"RTN","IBCNEDE",30,0)
 S $P(^IBE(350.9,1,51),U,22)=""
"RTN","IBCNEDE",31,0)
 ; If "~NO PAYER" is not a valid Payer File entry, rebuild it from
"RTN","IBCNEDE",32,0)
 ;  the existing utility
"RTN","IBCNEDE",33,0)
 I '$$FIND1^DIC(365.12,,"X","~NO PAYER") D PAYR^IBCNEUT2
"RTN","IBCNEDE",34,0)
 ;
"RTN","IBCNEDE",35,0)
 ; Confirm that all necessary tables have been loaded
"RTN","IBCNEDE",36,0)
 ; before the extract is run
"RTN","IBCNEDE",37,0)
 I '$$TBLCHK() G EN1
"RTN","IBCNEDE",38,0)
 ;
"RTN","IBCNEDE",39,0)
 D AMCHECK^IBCNEUT6     ; ensure Auto Match entries are valid
"RTN","IBCNEDE",40,0)
 ;
"RTN","IBCNEDE",41,0)
 ; Run All 3 extracts and launch IBCNEDEP(Inquiries)
"RTN","IBCNEDE",42,0)
 D EN^IBCNEDE1 ; Insurance Buffer Extract
"RTN","IBCNEDE",43,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",44,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",45,0)
 D EN^IBCNEDE2 ; Pre Reg Extract
"RTN","IBCNEDE",46,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",47,0)
EN1 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",48,0)
 ; Send enrollment message
"RTN","IBCNEDE",49,0)
 D ^IBCNEHLM
"RTN","IBCNEDE",50,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",51,0)
 I '$G(QFL) D
"RTN","IBCNEDE",52,0)
 . ; Wait for 'AA' acknowledgement
"RTN","IBCNEDE",53,0)
 . D WAIT  Q:'+QFL
"RTN","IBCNEDE",54,0)
 . KILL QFL
"RTN","IBCNEDE",55,0)
 . ;
"RTN","IBCNEDE",56,0)
 . D ^IBCNEDEP  ; Inquiries Processing
"RTN","IBCNEDE",57,0)
 ;
"RTN","IBCNEDE",58,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",59,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",60,0)
 D MMQ         ; Queue the Daily MailMan message
"RTN","IBCNEDE",61,0)
 D DSTQ        ; queue daily statistical message to FSC
"RTN","IBCNEDE",62,0)
 ; Send MailMan message if first of month to report on records 
"RTN","IBCNEDE",63,0)
 ;  eligible to be purged
"RTN","IBCNEDE",64,0)
 I +$E($P($$NOW^XLFDT(),"."),6,7)=1 D MMPURGE^IBCNEKI2
"RTN","IBCNEDE",65,0)
 ;
"RTN","IBCNEDE",66,0)
ENX ; Purge task record - if queued
"RTN","IBCNEDE",67,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCNEDE",68,0)
 L -^TMP("IBCNEDE")
"RTN","IBCNEDE",69,0)
 Q
"RTN","IBCNEDE",70,0)
 ;
"RTN","IBCNEDE",71,0)
TBLCHK() ;
"RTN","IBCNEDE",72,0)
 ; Confirm that at least one eIV payer and that all X12 tables
"RTN","IBCNEDE",73,0)
 ; have been loaded
"RTN","IBCNEDE",74,0)
 N PAY,PAYIEN,PAYOK,TBLOK,II
"RTN","IBCNEDE",75,0)
 S (PAY,PAYIEN,PAYOK)="",TBLOK=1
"RTN","IBCNEDE",76,0)
 F  S PAY=$O(^IBE(365.12,"B",PAY)) Q:PAY=""!PAYOK  I PAY'="~NO PAYER" D
"RTN","IBCNEDE",77,0)
 .  F  S PAYIEN=$O(^IBE(365.12,"B",PAY,PAYIEN)) Q:PAYIEN=""!PAYOK  D
"RTN","IBCNEDE",78,0)
 ..    I $$PYRAPP^IBCNEUT5("IIV",PAYIEN) S PAYOK=1 Q
"RTN","IBCNEDE",79,0)
 I PAYOK D
"RTN","IBCNEDE",80,0)
 . F II=11:1:18,21 I $O(^IBE(II*.001+365,"B",""))="" S TBLOK="" Q
"RTN","IBCNEDE",81,0)
 Q PAYOK&TBLOK
"RTN","IBCNEDE",82,0)
 ;
"RTN","IBCNEDE",83,0)
WAIT ;  Wait for acknowledgement comes back from EC
"RTN","IBCNEDE",84,0)
 ;  Hang for 60 seconds and check status again
"RTN","IBCNEDE",85,0)
 ;  Try 360 times for a total of 21600 seconds (6 hours)
"RTN","IBCNEDE",86,0)
 S QFL=0,CT=0
"RTN","IBCNEDE",87,0)
 F  D  Q:QFL'=""!(CT>360)
"RTN","IBCNEDE",88,0)
 . S QFL=$$GET1^DIQ(350.9,"1,",51.22,"I")
"RTN","IBCNEDE",89,0)
 . Q:QFL'=""
"RTN","IBCNEDE",90,0)
 . HANG 60 S CT=CT+1
"RTN","IBCNEDE",91,0)
 KILL CT
"RTN","IBCNEDE",92,0)
 Q
"RTN","IBCNEDE",93,0)
 ;
"RTN","IBCNEDE",94,0)
FRESHDT(EXT,STALEDYS) ;  Calculate Freshness
"RTN","IBCNEDE",95,0)
 ;  Ext - ien of extract for future purposes
"RTN","IBCNEDE",96,0)
 ;  Staledys - # of days in the past in which an insurance verification
"RTN","IBCNEDE",97,0)
 ;  is considered still valid/current
"RTN","IBCNEDE",98,0)
 N STALEDT
"RTN","IBCNEDE",99,0)
 S STALEDT=$$FMADD^XLFDT(DT,-STALEDYS)
"RTN","IBCNEDE",100,0)
 Q STALEDT
"RTN","IBCNEDE",101,0)
 ;
"RTN","IBCNEDE",102,0)
 ; ---------------------------------------------------
"RTN","IBCNEDE",103,0)
MMQ ; This procedure is responsible for scheduling the creation and 
"RTN","IBCNEDE",104,0)
 ; sending of the daily MailMan statistical message if the site has
"RTN","IBCNEDE",105,0)
 ; defined this appropriately in the eIV site parameters.
"RTN","IBCNEDE",106,0)
 ;
"RTN","IBCNEDE",107,0)
 NEW IIV,CURRTIME,MTIME,MSG,Y,MGRP
"RTN","IBCNEDE",108,0)
 NEW ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTSAVE,ZTKIL,ZTSYNC,ZTSK
"RTN","IBCNEDE",109,0)
 ;
"RTN","IBCNEDE",110,0)
 S IIV=$G(^IBE(350.9,1,51))
"RTN","IBCNEDE",111,0)
 I '$P(IIV,U,2) G MMQX          ; site does not want daily messages
"RTN","IBCNEDE",112,0)
 I '$P(IIV,U,3) G MMQX          ; MM message time is not defined
"RTN","IBCNEDE",113,0)
 I '$P(IIV,U,4) G MMQX          ; Mail Group is not defined
"RTN","IBCNEDE",114,0)
 ;
"RTN","IBCNEDE",115,0)
 S CURRTIME=$P($H,",",2)        ; current $H time
"RTN","IBCNEDE",116,0)
 S MTIME=DT_"."_$P(IIV,U,3)     ; build a FileMan date/time
"RTN","IBCNEDE",117,0)
 S MTIME=$$FMTH^XLFDT(MTIME)    ; convert to $H format
"RTN","IBCNEDE",118,0)
 S MTIME=$P(MTIME,",",2)        ; $H time of MM message
"RTN","IBCNEDE",119,0)
 ;
"RTN","IBCNEDE",120,0)
 ; If the current time is after the MailMan message time, then 
"RTN","IBCNEDE",121,0)
 ; schedule the MM message for tomorrow at that time.
"RTN","IBCNEDE",122,0)
 I CURRTIME>MTIME S ZTDTH=($H+1)_","_MTIME
"RTN","IBCNEDE",123,0)
 ;
"RTN","IBCNEDE",124,0)
 ; Otherwise, schedule it for later today
"RTN","IBCNEDE",125,0)
 E  S ZTDTH=+$H_","_MTIME
"RTN","IBCNEDE",126,0)
 ;
"RTN","IBCNEDE",127,0)
 ; Set up the other TaskManager variables
"RTN","IBCNEDE",128,0)
 S ZTRTN="MAILMSG^IBCNERP7"
"RTN","IBCNEDE",129,0)
 S ZTDESC="eIV Daily Statistics E-Mail"
"RTN","IBCNEDE",130,0)
 S ZTIO=""
"RTN","IBCNEDE",131,0)
 D ^%ZTLOAD            ; Call TaskManager
"RTN","IBCNEDE",132,0)
 I $G(ZTSK) G MMQX     ; Task# is OK so get out
"RTN","IBCNEDE",133,0)
 ;
"RTN","IBCNEDE",134,0)
 ; Send a MailMan message if this Task could not get scheduled
"RTN","IBCNEDE",135,0)
 S MSG(1)="TaskManager could not schedule the daily eIV MailMan message"
"RTN","IBCNEDE",136,0)
 S MSG(2)="at the specified time of "_$E($P(IIV,U,3),1,2)_":"_$E($P(IIV,U,3),3,4)_"."
"RTN","IBCNEDE",137,0)
 S MSG(3)="This is defined in the eIV Site Parameters option."
"RTN","IBCNEDE",138,0)
 ; Set to IB site parameter MAILGROUP
"RTN","IBCNEDE",139,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDE",140,0)
 D MSG^IBCNEUT5(MGRP,"eIV Statistical Message Not Sent","MSG(")
"RTN","IBCNEDE",141,0)
 ;
"RTN","IBCNEDE",142,0)
MMQX ;
"RTN","IBCNEDE",143,0)
 Q
"RTN","IBCNEDE",144,0)
 ;
"RTN","IBCNEDE",145,0)
ER ; Unlock the eIV Nightly Task and return to log error
"RTN","IBCNEDE",146,0)
 L -^TMP("IBCNEDE")
"RTN","IBCNEDE",147,0)
 D ^%ZTER
"RTN","IBCNEDE",148,0)
 D UNWIND^%ZTER
"RTN","IBCNEDE",149,0)
 Q
"RTN","IBCNEDE",150,0)
 ;
"RTN","IBCNEDE",151,0)
DSTQ ; This procedure is responsible for scheduling the creation and 
"RTN","IBCNEDE",152,0)
 ; sending of the daily statistical message to FSC.
"RTN","IBCNEDE",153,0)
 ;
"RTN","IBCNEDE",154,0)
 N IIV,CURRTIME,MTIME,MSG,MGRP
"RTN","IBCNEDE",155,0)
 N ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTSAVE,ZTKIL,ZTSYNC,ZTSK
"RTN","IBCNEDE",156,0)
 ;
"RTN","IBCNEDE",157,0)
 S IIV=$G(^IBE(350.9,1,51))
"RTN","IBCNEDE",158,0)
 I '$P(IIV,U,3) G DSTQX          ; MM message time is not defined
"RTN","IBCNEDE",159,0)
 ;
"RTN","IBCNEDE",160,0)
 S CURRTIME=$P($H,",",2)        ; current $H time
"RTN","IBCNEDE",161,0)
 S MTIME=DT_"."_$P(IIV,U,3)     ; build a FileMan date/time
"RTN","IBCNEDE",162,0)
 S MTIME=$$FMTH^XLFDT(MTIME)    ; convert to $H format
"RTN","IBCNEDE",163,0)
 S MTIME=$P(MTIME,",",2)        ; $H time of MM message
"RTN","IBCNEDE",164,0)
 ;
"RTN","IBCNEDE",165,0)
 ; If the current time is after the MailMan message time, then schedule the message for tomorrow at that time.
"RTN","IBCNEDE",166,0)
 ; Otherwise, schedule it for later today.
"RTN","IBCNEDE",167,0)
 S ZTDTH=$S(CURRTIME>MTIME:$H+1,1:+$H)_","_MTIME
"RTN","IBCNEDE",168,0)
 ;
"RTN","IBCNEDE",169,0)
 ; Set up the other TaskManager variables
"RTN","IBCNEDE",170,0)
 S ZTRTN="EN1^IBCNEHLM"
"RTN","IBCNEDE",171,0)
 S ZTDESC="eIV Daily Statistics HL7 Message"
"RTN","IBCNEDE",172,0)
 S ZTIO=""
"RTN","IBCNEDE",173,0)
 D ^%ZTLOAD            ; Call TaskManager
"RTN","IBCNEDE",174,0)
 I $G(ZTSK) G DSTQX    ; Task# is OK so get out
"RTN","IBCNEDE",175,0)
 ;
"RTN","IBCNEDE",176,0)
 ; Send a MailMan message if this Task could not get scheduled
"RTN","IBCNEDE",177,0)
 S MSG(1)="TaskManager could not schedule the daily eIV Statistics HL7 message"
"RTN","IBCNEDE",178,0)
 S MSG(2)="at the specified time of "_$E($P(IIV,U,3),1,2)_":"_$E($P(IIV,U,3),3,4)_"."
"RTN","IBCNEDE",179,0)
 S MSG(3)="This is defined in the eIV Site Parameters option."
"RTN","IBCNEDE",180,0)
 ; Set to IB site parameter MAILGROUP
"RTN","IBCNEDE",181,0)
 S MGRP=$$MGRP^IBCNEUT5() I MGRP'="" D MSG^IBCNEUT5(MGRP,"eIV Statistical HL7 Message Not Sent","MSG(")
"RTN","IBCNEDE",182,0)
 ;
"RTN","IBCNEDE",183,0)
DSTQX ;
"RTN","IBCNEDE",184,0)
 Q
"RTN","IBCNEDE1")
0^28^B44623085^B43189276
"RTN","IBCNEDE1",1,0)
IBCNEDE1 ;DAOU/DAC - eIV INSURANCE BUFFER EXTRACT ;04-JUN-2002
"RTN","IBCNEDE1",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416,438,435,467,497**;21-MAR-94;Build 120
"RTN","IBCNEDE1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDE1",4,0)
 ;
"RTN","IBCNEDE1",5,0)
 ;**Program Description**
"RTN","IBCNEDE1",6,0)
 ; This routine loops through the insurance buffer and 
"RTN","IBCNEDE1",7,0)
 ; creates eIV transaction queue entries when appropriate.
"RTN","IBCNEDE1",8,0)
 ; Periodically check for stop request for background task
"RTN","IBCNEDE1",9,0)
 ;
"RTN","IBCNEDE1",10,0)
 Q   ; no direct calls allowed
"RTN","IBCNEDE1",11,0)
 ;
"RTN","IBCNEDE1",12,0)
EN ; Loop through designated cross-references for updates
"RTN","IBCNEDE1",13,0)
 ; Insurance Buffer Extract
"RTN","IBCNEDE1",14,0)
 ;
"RTN","IBCNEDE1",15,0)
 N TODAYSDT,FRESHDAY,LOOPDT,IEN,OVRFRESH,FRESHDT
"RTN","IBCNEDE1",16,0)
 N DFN,PDOD,SRVICEDT,VERIFDDT,PAYERSTR,PAYERID,SYMBOL,PAYRNAME
"RTN","IBCNEDE1",17,0)
 N PIEN,PNIEN,TQIEN,TRIEN,TRSRVCDT,TQCRTDT,TRANSNO,DISYS
"RTN","IBCNEDE1",18,0)
 N ORIGINSR,ORGRPSTR,ORGRPNUM,ORGRPNAM,ORGSUBCR
"RTN","IBCNEDE1",19,0)
 N MAXCNT,CNT,ISYMBOLM,DATA1,DATA2,ORIG,SETSTR,ISYMBOL,IBCNETOT
"RTN","IBCNEDE1",20,0)
 N SIDDATA,SID,SIDACT,BSID,FDA,PASSBUF,SIDCNT,SIDARRAY
"RTN","IBCNEDE1",21,0)
 N TQDT,TQIENS,TQOK,STATIEN,PATID,MCAREFLG,INSNAME,PREL
"RTN","IBCNEDE1",22,0)
 ;
"RTN","IBCNEDE1",23,0)
 S SETSTR=$$SETTINGS^IBCNEDE7(1) ; Returns buffer extract settings
"RTN","IBCNEDE1",24,0)
 I 'SETSTR Q                    ; Quit if extract is not active
"RTN","IBCNEDE1",25,0)
 S MAXCNT=$P(SETSTR,U,4)        ; Max # TQ entries that may be created
"RTN","IBCNEDE1",26,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNEDE1",27,0)
 ;
"RTN","IBCNEDE1",28,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U,1) ; System freshness days
"RTN","IBCNEDE1",29,0)
 ;
"RTN","IBCNEDE1",30,0)
 S CNT=0       ; Initialize count of TQ entries created
"RTN","IBCNEDE1",31,0)
 S IBCNETOT=0  ; Initialize count for periodic TaskMan check
"RTN","IBCNEDE1",32,0)
 ;
"RTN","IBCNEDE1",33,0)
 S LOOPDT="" ; Date used to loop through the IB global
"RTN","IBCNEDE1",34,0)
 F  S LOOPDT=$O(^IBA(355.33,"AEST","E",LOOPDT)) Q:LOOPDT=""!(CNT=MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE1",35,0)
 . S IEN=""
"RTN","IBCNEDE1",36,0)
 . F  S IEN=$O(^IBA(355.33,"AEST","E",LOOPDT,IEN)) Q:IEN=""!(CNT=MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE1",37,0)
 .. ; Update count for periodic check
"RTN","IBCNEDE1",38,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE1",39,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDE1",40,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE1",41,0)
 .. ;
"RTN","IBCNEDE1",42,0)
 .. ; Get symbol, if symbol'=" " OR "!" then quit
"RTN","IBCNEDE1",43,0)
 .. S ISYMBOL=$$SYMBOL^IBCNBLL(IEN) ; Insurance buffer symbol
"RTN","IBCNEDE1",44,0)
 .. I (ISYMBOL'=" ")&(ISYMBOL'="!") Q
"RTN","IBCNEDE1",45,0)
 .. ;
"RTN","IBCNEDE1",46,0)
 .. ; Don't extract ePharmacy buffer entries - IB*2*435
"RTN","IBCNEDE1",47,0)
 .. I +$P($G(^IBA(355.33,IEN,0)),U,17) Q
"RTN","IBCNEDE1",48,0)
 .. ;
"RTN","IBCNEDE1",49,0)
 .. ; Get the eIV STATUS IEN and quit for response related errors
"RTN","IBCNEDE1",50,0)
 .. S STATIEN=+$P($G(^IBA(355.33,IEN,0)),U,12)
"RTN","IBCNEDE1",51,0)
 .. I ",11,12,15,"[(","_STATIEN_",") Q  ; Prevent update for response errors
"RTN","IBCNEDE1",52,0)
 .. ;
"RTN","IBCNEDE1",53,0)
 .. S OVRFRESH=$P($G(^IBA(355.33,IEN,0)),U,13) ; Freshness OvrRd flag
"RTN","IBCNEDE1",54,0)
 .. S DFN=$P($G(^IBA(355.33,IEN,60)),U,1) ; Patient DFN
"RTN","IBCNEDE1",55,0)
 .. Q:DFN=""
"RTN","IBCNEDE1",56,0)
 .. I $P($G(^DPT(DFN,0)),U,21) Q           ; Exclude if test patient
"RTN","IBCNEDE1",57,0)
 .. ;
"RTN","IBCNEDE1",58,0)
 .. S PDOD=$P($G(^DPT(DFN,.35)),U,1)\1     ; Patient's date of death
"RTN","IBCNEDE1",59,0)
 .. S SRVICEDT=+$P($G(^IBA(355.33,IEN,0)),U,18) S:'SRVICEDT SRVICEDT=DT ; Service Date
"RTN","IBCNEDE1",60,0)
 .. I PDOD,PDOD<SRVICEDT S SRVICEDT=PDOD
"RTN","IBCNEDE1",61,0)
 .. S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNEDE1",62,0)
 .. S PAYERSTR=$$INSERROR^IBCNEUT3("B",IEN)          ; Payer String
"RTN","IBCNEDE1",63,0)
 .. S PAYERID=$P(PAYERSTR,U,3),PIEN=$P(PAYERSTR,U,2) ; Payer ID
"RTN","IBCNEDE1",64,0)
 .. S SYMBOL=+PAYERSTR                               ; Payer Symbol
"RTN","IBCNEDE1",65,0)
 .. I '$$PYRACTV^IBCNEDE7(PIEN) Q          ; Payer is not nationally active
"RTN","IBCNEDE1",66,0)
 .. ;
"RTN","IBCNEDE1",67,0)
 .. ; If payer symbol is returned set symbol in Ins. Buffer and quit
"RTN","IBCNEDE1",68,0)
 .. I SYMBOL D BUFF^IBCNEUT2(IEN,SYMBOL) Q
"RTN","IBCNEDE1",69,0)
 .. ;
"RTN","IBCNEDE1",70,0)
 .. D CLEAR^IBCNEUT4(IEN)                ; remove any existing symbol
"RTN","IBCNEDE1",71,0)
 .. ;
"RTN","IBCNEDE1",72,0)
 .. ; If no payer ID or no payer IEN is returned quit
"RTN","IBCNEDE1",73,0)
 .. I (PAYERID="")!('PIEN) Q
"RTN","IBCNEDE1",74,0)
 .. ;
"RTN","IBCNEDE1",75,0)
 .. ; Update service date and freshness date based on payer's allowed
"RTN","IBCNEDE1",76,0)
 .. ;  date range
"RTN","IBCNEDE1",77,0)
 .. D UPDDTS^IBCNEDE6(PIEN,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE1",78,0)
 .. ;
"RTN","IBCNEDE1",79,0)
 .. ; Update service dates for inquiries to be transmitted
"RTN","IBCNEDE1",80,0)
 .. D TQUPDSV^IBCNEUT5(DFN,PIEN,SRVICEDT)
"RTN","IBCNEDE1",81,0)
 .. ;
"RTN","IBCNEDE1",82,0)
 .. ; allow only one MEDICARE transmission per patient
"RTN","IBCNEDE1",83,0)
 .. S INSNAME=$P($G(^IBA(355.33,IEN,20)),U)
"RTN","IBCNEDE1",84,0)
 .. I INSNAME["MEDICARE",$G(MCAREFLG(DFN)) Q
"RTN","IBCNEDE1",85,0)
 .. ;
"RTN","IBCNEDE1",86,0)
 .. ; set pat. relationship to "self" if it's blank
"RTN","IBCNEDE1",87,0)
 .. D SETREL(IEN)
"RTN","IBCNEDE1",88,0)
 .. ;
"RTN","IBCNEDE1",89,0)
 .. ; make sure that service type codes are set
"RTN","IBCNEDE1",90,0)
 .. I '+$G(^IBA(355.33,IEN,80)) D SETSTC^IBCNERTQ(IEN)
"RTN","IBCNEDE1",91,0)
 .. ;
"RTN","IBCNEDE1",92,0)
 .. ; If freshness override flag is set, file to TQ and quit
"RTN","IBCNEDE1",93,0)
 .. I OVRFRESH=1 D  Q
"RTN","IBCNEDE1",94,0)
 ... NEW DIE,X,Y,DISYS
"RTN","IBCNEDE1",95,0)
 ... S FDA(355.33,IEN_",",.13)="" D FILE^DIE("","FDA") K FDA
"RTN","IBCNEDE1",96,0)
 ... S:INSNAME["MEDICARE" MCAREFLG(DFN)=1 D TQ
"RTN","IBCNEDE1",97,0)
 .. ; Check the existing TQ entries to confirm that this buffer IEN is
"RTN","IBCNEDE1",98,0)
 .. ; not included
"RTN","IBCNEDE1",99,0)
 .. S (TQDT,TQIENS)="",TQOK=1
"RTN","IBCNEDE1",100,0)
 .. F  S TQDT=$O(^IBCN(365.1,"AD",DFN,PIEN,TQDT)) Q:'TQDT!'TQOK  D
"RTN","IBCNEDE1",101,0)
 ... F  S TQIENS=$O(^IBCN(365.1,"AD",DFN,PIEN,TQDT,TQIENS)) Q:'TQIENS!'TQOK  D
"RTN","IBCNEDE1",102,0)
 ....    I $P($G(^IBCN(365.1,TQIENS,0)),U,5)=IEN S TQOK=0 Q
"RTN","IBCNEDE1",103,0)
 .. I TQOK S:INSNAME["MEDICARE" MCAREFLG(DFN)=1 D TQ
"RTN","IBCNEDE1",104,0)
 Q
"RTN","IBCNEDE1",105,0)
TQ ; Determine how many entries to create in the TQ file and set entries
"RTN","IBCNEDE1",106,0)
 ;
"RTN","IBCNEDE1",107,0)
 K SIDARRAY
"RTN","IBCNEDE1",108,0)
 S BSID=$P($G(^IBA(355.33,IEN,90)),U,3)   ; Subscriber ID from buffer (IB*2.0*497 - vd)
"RTN","IBCNEDE1",109,0)
 S PATID=$P($G(^IBA(355.33,IEN,62)),U)    ; Patient ID from buffer
"RTN","IBCNEDE1",110,0)
 S PREL=$P($G(^IBA(355.33,IEN,60)),U,14)  ; Pat. relationship from buffer
"RTN","IBCNEDE1",111,0)
 S SIDDATA=$$SIDCHK^IBCNEDE5(PIEN,DFN,BSID,.SIDARRAY,FRESHDT) ;determine rules to follow
"RTN","IBCNEDE1",112,0)
 S SIDACT=$P(SIDDATA,U,1)
"RTN","IBCNEDE1",113,0)
 S SIDCNT=$P(SIDDATA,U,2)                 ;Pull cnt of SIDs - shd be 1
"RTN","IBCNEDE1",114,0)
 ;
"RTN","IBCNEDE1",115,0)
 I SIDACT=3 D BUFF^IBCNEUT2(IEN,18) Q   ; update buffer w/ bang & quit - no subscriber id
"RTN","IBCNEDE1",116,0)
 I PREL'=18 D  Q
"RTN","IBCNEDE1",117,0)
 .I PATID="" D BUFF^IBCNEUT2(IEN,23) Q  ; update buffer w/ bang & quit - no patient id
"RTN","IBCNEDE1",118,0)
 .D SET(IEN,OVRFRESH,1,"") ; set TQ entry
"RTN","IBCNEDE1",119,0)
 .Q
"RTN","IBCNEDE1",120,0)
 I CNT+SIDCNT>MAXCNT Q
"RTN","IBCNEDE1",121,0)
 S SID=""
"RTN","IBCNEDE1",122,0)
 F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D:$P(SID,"_")'="" SET(IEN,OVRFRESH,1,$P(SID,"_"))    ; set TQ w/ 'Pass Buffer' flag
"RTN","IBCNEDE1",123,0)
 I SIDACT=4 D SET(IEN,OVRFRESH,1,"")       ; set TQ w/ 'Pass Buffer' flag w/ blank subscriber ID
"RTN","IBCNEDE1",124,0)
 Q
"RTN","IBCNEDE1",125,0)
 ;
"RTN","IBCNEDE1",126,0)
RET ; Record Retrieval - Insurance Buffer
"RTN","IBCNEDE1",127,0)
 ;
"RTN","IBCNEDE1",128,0)
 S ORIGINSR=$P($G(^IBA(355.33,IEN,20)),U,1) ;Original ins. co.
"RTN","IBCNEDE1",129,0)
 S ORGRPSTR=$G(^IBA(355.33,IEN,90)) ; Original group string (IB*2.0*497 - vd)
"RTN","IBCNEDE1",130,0)
 S ORGRPNUM=$P(ORGRPSTR,U,2) ;Original group number (IB*2.0*497 - vd)
"RTN","IBCNEDE1",131,0)
 S ORGRPNAM=$P(ORGRPSTR,U,1) ;Original group name (IB*2.0*497 - vd)
"RTN","IBCNEDE1",132,0)
 S ORGSUBCR=$P(ORGRPSTR,U,3) ; Original subscriber (IB*2.0*497 - vd)
"RTN","IBCNEDE1",133,0)
 ;
"RTN","IBCNEDE1",134,0)
 Q
"RTN","IBCNEDE1",135,0)
 ;
"RTN","IBCNEDE1",136,0)
SET(BUFFIEN,OVRFRESH,PASSBUF,SID1) ; Set data and check if set already
"RTN","IBCNEDE1",137,0)
 D RET
"RTN","IBCNEDE1",138,0)
 ;
"RTN","IBCNEDE1",139,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE1",140,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE1",141,0)
 S DATA1=DFN_U_PIEN_U_1_U_$G(BUFFIEN)_U_SID1_U_FRESHDT_U_PASSBUF ; SETTQ parameter 1
"RTN","IBCNEDE1",142,0)
 S $P(DATA1,U,8)=PATID     ; IB*2*416
"RTN","IBCNEDE1",143,0)
 ;
"RTN","IBCNEDE1",144,0)
 ;The hardcoded '1' in the 1st piece of DATA2 is the value to tell
"RTN","IBCNEDE1",145,0)
 ; the file 365.1 that it is the buffer extract.
"RTN","IBCNEDE1",146,0)
 S DATA2=1_U_"V"_U_SRVICEDT_U_"" ; SETTQ parameter 2
"RTN","IBCNEDE1",147,0)
 ;
"RTN","IBCNEDE1",148,0)
 S ORIG=ORIGINSR_U_ORGRPNUM_U_ORGRPNAM_U_ORGSUBCR ; SETTQ parameter 3
"RTN","IBCNEDE1",149,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2,ORIG,$G(OVRFRESH)) ; File TQ entry
"RTN","IBCNEDE1",150,0)
 I TQIEN'="" S CNT=CNT+1 ; If filed increment count
"RTN","IBCNEDE1",151,0)
 ;
"RTN","IBCNEDE1",152,0)
 Q
"RTN","IBCNEDE1",153,0)
 ;
"RTN","IBCNEDE1",154,0)
SETREL(IEN) ; set pat. relationship to "self"
"RTN","IBCNEDE1",155,0)
 N DA,DIE,DR,X,Y
"RTN","IBCNEDE1",156,0)
 I $P($G(^IBA(355.33,IEN,60)),U,14)="" S DIE="^IBA(355.33,",DA=IEN,DR="60.14///SELF" D ^DIE
"RTN","IBCNEDE1",157,0)
 Q
"RTN","IBCNEDE5")
0^46^B28666402^B26929333
"RTN","IBCNEDE5",1,0)
IBCNEDE5 ;DAOU/DAC - eIV DATA EXTRACTS ;15-OCT-2002
"RTN","IBCNEDE5",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416,497**;21-MAR-94;Build 120
"RTN","IBCNEDE5",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDE5",4,0)
 ;
"RTN","IBCNEDE5",5,0)
 Q    ; no direct calls allowed
"RTN","IBCNEDE5",6,0)
 ;
"RTN","IBCNEDE5",7,0)
SIDCHK(PIEN,DFN,BSID,SIDARRAY,FRESHDT) ; Checks the flag setting of
"RTN","IBCNEDE5",8,0)
 ; 'Identification Requires Subscriber ID'. The function returns a "^"
"RTN","IBCNEDE5",9,0)
 ; delimited string.  The first value is between 1 and 5 telling the
"RTN","IBCNEDE5",10,0)
 ; calling program what action(s) it should perform. The 2nd piece
"RTN","IBCNEDE5",11,0)
 ; indicates the Subcriber ID that the calling program should use for
"RTN","IBCNEDE5",12,0)
 ; setting the Subscriber IDs in the eIV Transmission Queue file (365.1).
"RTN","IBCNEDE5",13,0)
 ; The calling program is to address the blank Sub IDs.
"RTN","IBCNEDE5",14,0)
 ;
"RTN","IBCNEDE5",15,0)
 ; PIEN - Payer's IEN (file 365.12)
"RTN","IBCNEDE5",16,0)
 ; DFN - Patient's IEN (file 2)
"RTN","IBCNEDE5",17,0)
 ; INREC - Insurance IEN of Patients record (subfile 2.312)
"RTN","IBCNEDE5",18,0)
 ; BSID - Subscriber ID from buffer file (file 355.33 field 60.04)
"RTN","IBCNEDE5",19,0)
 ; SIDARRAY - Array of active subscribers
"RTN","IBCNEDE5",20,0)
 ; FRESHDT - Freshness Date - used for checking verified date
"RTN","IBCNEDE5",21,0)
 ;
"RTN","IBCNEDE5",22,0)
 ; Logic to follow:
"RTN","IBCNEDE5",23,0)
 ;
"RTN","IBCNEDE5",24,0)
 ; Id. Req.| Sub ID|Action|
"RTN","IBCNEDE5",25,0)
 ;  Sub ID | found |  #   | Create
"RTN","IBCNEDE5",26,0)
 ; ________|_______|______|________
"RTN","IBCNEDE5",27,0)
 ; YES        YES     1     1 Verification TQ entry w/ Sub ID
"RTN","IBCNEDE5",28,0)
 ; YES        NO      3     new buffer entry or modify existing saying manual verification required
"RTN","IBCNEDE5",29,0)
 ; NO         NO      4     1 Ver. TQ entry w/ blank Sub ID
"RTN","IBCNEDE5",30,0)
 ;
"RTN","IBCNEDE5",31,0)
 N SIDACT,SID,APPIEN,SIDSTR,SIDREQ
"RTN","IBCNEDE5",32,0)
 N INSSTR,INSSTR1,INSSTR7,SYMBOL,EXP,SUBID,SUBIDS,SIDCNT,INREC,MVER,VFLG,MCRTQ
"RTN","IBCNEDE5",33,0)
 ;
"RTN","IBCNEDE5",34,0)
 S FRESHDT=$G(FRESHDT),VFLG=0
"RTN","IBCNEDE5",35,0)
 ;
"RTN","IBCNEDE5",36,0)
 ; if the subscriber ID from the buffer extract exists, this is the only entry
"RTN","IBCNEDE5",37,0)
 I $G(BSID)'="" D  G SIDCHKX
"RTN","IBCNEDE5",38,0)
 . S SID=BSID,(SIDACT,SIDCNT)=1
"RTN","IBCNEDE5",39,0)
 . S SIDARRAY($$STRIP(SID,,DFN)_"_")=""
"RTN","IBCNEDE5",40,0)
 . Q
"RTN","IBCNEDE5",41,0)
 ;
"RTN","IBCNEDE5",42,0)
 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNEDE5",43,0)
 S SIDSTR=$G(^IBE(365.12,PIEN,1,APPIEN,0))
"RTN","IBCNEDE5",44,0)
 S SIDREQ=$P(SIDSTR,U,8)
"RTN","IBCNEDE5",45,0)
 ;
"RTN","IBCNEDE5",46,0)
 S INSSTR="",SIDCNT=0,INREC=$O(^DPT(DFN,.312,0)),MCRTQ=0 S:'INREC INREC=1
"RTN","IBCNEDE5",47,0)
 ;
"RTN","IBCNEDE5",48,0)
 I $D(BSID),BSID="" G SIDC1
"RTN","IBCNEDE5",49,0)
 ;
"RTN","IBCNEDE5",50,0)
 I $G(^DPT(DFN,.312,INREC,0)) F  D  Q:'INREC
"RTN","IBCNEDE5",51,0)
 . S INSSTR=$G(^DPT(DFN,.312,INREC,0))
"RTN","IBCNEDE5",52,0)
 . S INSSTR1=$G(^DPT(DFN,.312,INREC,1))
"RTN","IBCNEDE5",53,0)
 . S INSSTR7=$G(^DPT(DFN,.312,INREC,7))    ; IB*2.0*497 (vd)
"RTN","IBCNEDE5",54,0)
 . S SYMBOL=$$INSERROR^IBCNEUT3("I",+INSSTR)
"RTN","IBCNEDE5",55,0)
 . I $P(SYMBOL,U)="" D            ; no eIV related error w/ ins. company
"RTN","IBCNEDE5",56,0)
 .. N MCRPYR
"RTN","IBCNEDE5",57,0)
 .. I PIEN'=$P(SYMBOL,U,2) Q      ; wrong payer ien
"RTN","IBCNEDE5",58,0)
 .. ;
"RTN","IBCNEDE5",59,0)
 .. S MCRPYR=0                                           ; Medicare payer flag
"RTN","IBCNEDE5",60,0)
 .. I PIEN=+$P($G(^IBE(350.9,1,51)),U,25) S MCRPYR=1     ; this is the Medicare payer
"RTN","IBCNEDE5",61,0)
 .. I MCRPYR,MCRTQ Q      ; the Medicare payer is already in the array
"RTN","IBCNEDE5",62,0)
 .. ;
"RTN","IBCNEDE5",63,0)
 .. S SUBID=$P(INSSTR7,U,2)                ; IB*2.0*497 (vd)
"RTN","IBCNEDE5",64,0)
 .. I SUBID="" Q                           ; missing Subscriber ID
"RTN","IBCNEDE5",65,0)
 .. I $P(INSSTR,U,8)>DT Q                  ; future effective date
"RTN","IBCNEDE5",66,0)
 .. S EXP=$P(INSSTR,U,4) I EXP,EXP<DT Q    ; expired
"RTN","IBCNEDE5",67,0)
 .. S MVER=$P(INSSTR1,U,3)                 ; last verified date
"RTN","IBCNEDE5",68,0)
 .. I MVER'="",FRESHDT'="",MVER>FRESHDT S VFLG=1 Q     ; verified recently
"RTN","IBCNEDE5",69,0)
 .. S SUBIDS=$$STRIP(SUBID,,DFN)
"RTN","IBCNEDE5",70,0)
 .. I $D(SIDARRAY(SUBIDS_"_"_INREC)) Q            ; already in the array
"RTN","IBCNEDE5",71,0)
 .. S SIDARRAY(SUBIDS_"_"_INREC)="",SIDCNT=SIDCNT+1
"RTN","IBCNEDE5",72,0)
 .. I MCRPYR S MCRTQ=1     ; flag indicating Medicare payer is in the array
"RTN","IBCNEDE5",73,0)
 .. Q
"RTN","IBCNEDE5",74,0)
 . ;
"RTN","IBCNEDE5",75,0)
 . S INREC=$O(^DPT(DFN,.312,INREC))
"RTN","IBCNEDE5",76,0)
 . Q
"RTN","IBCNEDE5",77,0)
 ;
"RTN","IBCNEDE5",78,0)
 I SIDCNT S SIDACT=1 G SIDCHKX
"RTN","IBCNEDE5",79,0)
 I 'SIDCNT,VFLG S SIDACT=1 G SIDCHKX
"RTN","IBCNEDE5",80,0)
SIDC1 ;
"RTN","IBCNEDE5",81,0)
 S SIDACT=$S(SIDREQ:3,1:4)
"RTN","IBCNEDE5",82,0)
 ;
"RTN","IBCNEDE5",83,0)
SIDCHKX ; EXIT POINT
"RTN","IBCNEDE5",84,0)
 ;
"RTN","IBCNEDE5",85,0)
 Q SIDACT_U_SIDCNT
"RTN","IBCNEDE5",86,0)
 ;
"RTN","IBCNEDE5",87,0)
SSN(DFN) ; Get Patient SSN and update SIDARRAY, if needed
"RTN","IBCNEDE5",88,0)
 S SSN=$$GETSSN(DFN)
"RTN","IBCNEDE5",89,0)
 N SSNS
"RTN","IBCNEDE5",90,0)
 S SSNS=$$STRIP(SSN,1,DFN)
"RTN","IBCNEDE5",91,0)
 I $P($O(SIDARRAY(SSNS_"_")),"_")=SSNS Q
"RTN","IBCNEDE5",92,0)
 I SSNS'="",'$D(SIDARRAY(SSNS_"_")) S SIDARRAY(SSNS_"_")="",SIDCNT=SIDCNT+1
"RTN","IBCNEDE5",93,0)
 Q
"RTN","IBCNEDE5",94,0)
 ;
"RTN","IBCNEDE5",95,0)
GETSSN(DFN) ; Get Patient SSN
"RTN","IBCNEDE5",96,0)
 Q:'$G(DFN) ""
"RTN","IBCNEDE5",97,0)
 Q $P($G(^DPT(DFN,0)),U,9)
"RTN","IBCNEDE5",98,0)
 ;
"RTN","IBCNEDE5",99,0)
STRIP(ID,SS,DFN) ; Strip dashes and spaces if ssn
"RTN","IBCNEDE5",100,0)
 ;         ID can be ssn or subid
"RTN","IBCNEDE5",101,0)
 ;         if SS, ssn is being passed
"RTN","IBCNEDE5",102,0)
 N SSN,IDS,IDB
"RTN","IBCNEDE5",103,0)
 S SS=$G(SS)
"RTN","IBCNEDE5",104,0)
 ; If a ssn is passed, strip dashes and spaces
"RTN","IBCNEDE5",105,0)
 I SS Q $TR(ID,"- ")
"RTN","IBCNEDE5",106,0)
 ; If not ssn format, do not strip
"RTN","IBCNEDE5",107,0)
 S IDB=$TR(ID," ")
"RTN","IBCNEDE5",108,0)
 I IDB'?3N1"-"2N1"-"4N,IDB'?9N Q ID
"RTN","IBCNEDE5",109,0)
 ; Compare w/SSN - if it matches, strip dashes and spaces
"RTN","IBCNEDE5",110,0)
 S IDS=$TR(ID,"- ")
"RTN","IBCNEDE5",111,0)
 S SSN=$TR($$GETSSN(DFN),"- ")
"RTN","IBCNEDE5",112,0)
 I SSN=IDS Q IDS
"RTN","IBCNEDE5",113,0)
 Q ID
"RTN","IBCNEDE5",114,0)
 ;
"RTN","IBCNEDE5",115,0)
SIDCHK2(DFN,PIEN,SIDARRAY,FRESHDT) ;Checks the flag setting of 
"RTN","IBCNEDE5",116,0)
 ; 'Identification Requires Subscriber ID'. The function returns a "^"
"RTN","IBCNEDE5",117,0)
 ; delimited string.  The first value is between 1 and 8 telling the
"RTN","IBCNEDE5",118,0)
 ; calling program what action(s) it should perform.  The 2nd piece
"RTN","IBCNEDE5",119,0)
 ; indicates the number of unique Subscriber IDs found for the patient/payer
"RTN","IBCNEDE5",120,0)
 ; combo.  In addition, a local array of Subcriber IDs are passed back by
"RTN","IBCNEDE5",121,0)
 ; reference that the calling program should use for setting the Subscriber
"RTN","IBCNEDE5",122,0)
 ; IDs in eIV Transmission Queue file (#365.1).  The calling program is to
"RTN","IBCNEDE5",123,0)
 ; address the blank Sub IDs.
"RTN","IBCNEDE5",124,0)
 ;
"RTN","IBCNEDE5",125,0)
 ; PIEN - Payer's IEN (file 365.12)
"RTN","IBCNEDE5",126,0)
 ; DFN - Patient's IEN (file 2)
"RTN","IBCNEDE5",127,0)
 ; SIDARRAY - Local array passed by reference.  This function returns
"RTN","IBCNEDE5",128,0)
 ;            the array populated with the possible Subscriber IDs for
"RTN","IBCNEDE5",129,0)
 ;            that patient/payer combination.
"RTN","IBCNEDE5",130,0)
 ; FRESHDT - Freshness date used for checking last verified condition
"RTN","IBCNEDE5",131,0)
 ;
"RTN","IBCNEDE5",132,0)
 ; Logic to follow:
"RTN","IBCNEDE5",133,0)
 ;
"RTN","IBCNEDE5",134,0)
 ; Id. Req.| Sub ID|Action|
"RTN","IBCNEDE5",135,0)
 ;  Sub ID | found |  #   | Create
"RTN","IBCNEDE5",136,0)
 ; ________|_______|______|________
"RTN","IBCNEDE5",137,0)
 ; YES       YES     3     1 Iden. TQ entry for each unique old Sub ID
"RTN","IBCNEDE5",138,0)
 ; YES       NO      4     No TQ entries (may flag as error)
"RTN","IBCNEDE5",139,0)
 ; NO        YES     5     1 Iden. TQ entry w/ blank Sub ID, & 1 Iden. TQ entry for each unique old Sub ID
"RTN","IBCNEDE5",140,0)
 ; NO        NO      6     1 Iden. TQ entry w/ blank Sub ID
"RTN","IBCNEDE5",141,0)
 ;
"RTN","IBCNEDE5",142,0)
 N SIDACT,SID,APPIEN,SIDSTR,SIDREQ,INSSTR,INSSTR1,INSSTR7,INREC
"RTN","IBCNEDE5",143,0)
 N SYMBOL,SUBID,SUBIDS,SIDCNT,MVER,VFLG
"RTN","IBCNEDE5",144,0)
 ;
"RTN","IBCNEDE5",145,0)
 S FRESHDT=$G(FRESHDT),VFLG=0
"RTN","IBCNEDE5",146,0)
 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNEDE5",147,0)
 S SIDSTR=$G(^IBE(365.12,PIEN,1,APPIEN,0))
"RTN","IBCNEDE5",148,0)
 S SIDREQ=$P(SIDSTR,U,8)
"RTN","IBCNEDE5",149,0)
 S INSSTR="",(SID,SIDCNT)=0,INREC=$O(^DPT(DFN,.312,0)) S:'INREC INREC=1
"RTN","IBCNEDE5",150,0)
 ;
"RTN","IBCNEDE5",151,0)
 I $G(^DPT(DFN,.312,INREC,0)) F  D  Q:'INREC!VFLG
"RTN","IBCNEDE5",152,0)
 . S INSSTR=$G(^DPT(DFN,.312,INREC,0))
"RTN","IBCNEDE5",153,0)
 . S INSSTR1=$G(^DPT(DFN,.312,INREC,1))
"RTN","IBCNEDE5",154,0)
 . S INSSTR7=$G(^DPT(DFN,.312,INREC,7))    ; IB*2.0*497 (vd)
"RTN","IBCNEDE5",155,0)
 . S SYMBOL=$$INSERROR^IBCNEUT3("I",+INSSTR)
"RTN","IBCNEDE5",156,0)
 . I $P(SYMBOL,U)="" D            ; no eIV related error w/ ins. company
"RTN","IBCNEDE5",157,0)
 .. I PIEN'=$P(SYMBOL,U,2) Q      ; wrong payer ien
"RTN","IBCNEDE5",158,0)
 .. S SUBID=$P(INSSTR7,U,2)       ; IB*2.0*497 (vd)
"RTN","IBCNEDE5",159,0)
 .. I SUBID="" Q                           ; missing Subscriber ID
"RTN","IBCNEDE5",160,0)
 .. S MVER=$P(INSSTR1,U,3)                 ; last verified date
"RTN","IBCNEDE5",161,0)
 .. I MVER'="",FRESHDT'="",MVER>FRESHDT S VFLG=1 Q    ; verified recently
"RTN","IBCNEDE5",162,0)
 .. S SUBIDS=$$STRIP(SUBID,,DFN)
"RTN","IBCNEDE5",163,0)
 .. I $D(SIDARRAY(SUBIDS_"_")) Q            ; already in the array
"RTN","IBCNEDE5",164,0)
 .. S SIDARRAY(SUBIDS_"_"_INREC)="",SID=1,SIDCNT=SIDCNT+1
"RTN","IBCNEDE5",165,0)
 . S INREC=$O(^DPT(DFN,.312,INREC))
"RTN","IBCNEDE5",166,0)
 ;
"RTN","IBCNEDE5",167,0)
 I VFLG K SIDARRAY S SIDCNT=0,SIDACT=4 G SIDCK2X
"RTN","IBCNEDE5",168,0)
 I SIDREQ S SIDACT=$S(SID:3,1:4)
"RTN","IBCNEDE5",169,0)
 I 'SIDREQ S SIDACT=$S(SID:5,1:6)
"RTN","IBCNEDE5",170,0)
 ;
"RTN","IBCNEDE5",171,0)
SIDCK2X ; EXIT POINT
"RTN","IBCNEDE5",172,0)
 ;
"RTN","IBCNEDE5",173,0)
 Q SIDACT_U_SIDCNT
"RTN","IBCNEDE5",174,0)
 ;
"RTN","IBCNEDE6")
0^56^B32414593^B32927570
"RTN","IBCNEDE6",1,0)
IBCNEDE6 ;DAOU/DAC - eIV DATA EXTRACTS ;15-OCT-2002
"RTN","IBCNEDE6",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,345,416,497**;21-MAR-94;Build 120
"RTN","IBCNEDE6",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDE6",4,0)
 ;
"RTN","IBCNEDE6",5,0)
 Q    ; no direct calls allowed
"RTN","IBCNEDE6",6,0)
 ;
"RTN","IBCNEDE6",7,0)
 ; IB*2*416 removed the ability to perform Identification inquiries.
"RTN","IBCNEDE6",8,0)
 ; However, this code is being left as is for future changes.
"RTN","IBCNEDE6",9,0)
 ;
"RTN","IBCNEDE6",10,0)
INAC(IBCNCNT,MAXNUM,IBDDI,SRVICEDT,FDAYS,APPTFLG) ;Get Inactive Insurances
"RTN","IBCNEDE6",11,0)
 ; DAOU/BHS - 10/15/2002 - Replaced VRFDT w/ FDAYS (fresh days value)
"RTN","IBCNEDE6",12,0)
 ; APPTFLG - Appt extract flag ONLY set from IBCNEDE2 - optional 0/1
"RTN","IBCNEDE6",13,0)
 ;
"RTN","IBCNEDE6",14,0)
 ; IB patch 416 discontinued the practice of using eIV for fishing for insurance
"RTN","IBCNEDE6",15,0)
 ; using the "No Insurance" extract or by doing Identification inquiries.
"RTN","IBCNEDE6",16,0)
 Q 0
"RTN","IBCNEDE6",17,0)
 ;
"RTN","IBCNEDE6",18,0)
 NEW IDATA,INCP,IEN,TQIEN,INS,INACT,DATA1,DATA2,FRESHDT
"RTN","IBCNEDE6",19,0)
 NEW PAYER,PAYERID,RESULT,FOUND,SIDARRAY,SIDACT,SIDCNT,SID,INREC
"RTN","IBCNEDE6",20,0)
 ;
"RTN","IBCNEDE6",21,0)
 ; Need FOUND to avoid the creation of a no payer inquiry the day after
"RTN","IBCNEDE6",22,0)
 ; the original inquiry for pre-reg (appt) extract and no insurance
"RTN","IBCNEDE6",23,0)
 ; extract was created.
"RTN","IBCNEDE6",24,0)
 S FOUND=0 ; set flag to 1 if potential inquiry was found
"RTN","IBCNEDE6",25,0)
 ;
"RTN","IBCNEDE6",26,0)
 S APPTFLG=$G(APPTFLG)
"RTN","IBCNEDE6",27,0)
 S IDATA=$G(^IBE(350.9,1,51))
"RTN","IBCNEDE6",28,0)
 S INACT=$P(IDATA,U,8)
"RTN","IBCNEDE6",29,0)
 S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FDAYS)
"RTN","IBCNEDE6",30,0)
 ;
"RTN","IBCNEDE6",31,0)
 ;  If the search for inactive insurances is 'No', quit
"RTN","IBCNEDE6",32,0)
 I 'INACT G INACX
"RTN","IBCNEDE6",33,0)
 ;
"RTN","IBCNEDE6",34,0)
 S INCP="" F  S INCP=$O(IBDDI(INCP)) Q:INCP=""  D  Q:IBCNCNT'<MAXNUM
"RTN","IBCNEDE6",35,0)
 . S IEN="" F  S IEN=$O(^DPT(DFN,.312,"B",INCP,IEN)) Q:IEN=""  D
"RTN","IBCNEDE6",36,0)
 .. S INS=$P(^DPT(DFN,.312,IEN,0),U)
"RTN","IBCNEDE6",37,0)
 .. ;
"RTN","IBCNEDE6",38,0)
 .. ;Check for Medicaid
"RTN","IBCNEDE6",39,0)
 .. I $$EXCLUDE^IBCNEUT4($P($G(^DIC(36,INS,0)),U)) Q
"RTN","IBCNEDE6",40,0)
 .. ;
"RTN","IBCNEDE6",41,0)
 .. ;  Check for insurance company payer, etc.
"RTN","IBCNEDE6",42,0)
 .. S RESULT=$$INSERROR^IBCNEUT3("I",INS)
"RTN","IBCNEDE6",43,0)
 .. I $P(RESULT,U)'="" Q
"RTN","IBCNEDE6",44,0)
 .. ;
"RTN","IBCNEDE6",45,0)
 .. S PAYER=$P(RESULT,U,2),PAYERID=$P(RESULT,U,3)
"RTN","IBCNEDE6",46,0)
 .. I ('PAYER)!(PAYERID="") Q
"RTN","IBCNEDE6",47,0)
 .. ;
"RTN","IBCNEDE6",48,0)
 .. S FOUND=1  ; potential inquiry
"RTN","IBCNEDE6",49,0)
 .. ;
"RTN","IBCNEDE6",50,0)
 .. ; Update service date based on payer's allowed range
"RTN","IBCNEDE6",51,0)
 .. D UPDDTS(PAYER,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE6",52,0)
 .. ;  update service dates for inquiries to be transmitted
"RTN","IBCNEDE6",53,0)
 .. D TQUPDSV^IBCNEUT5(DFN,PAYER,SRVICEDT)
"RTN","IBCNEDE6",54,0)
 .. ;  check for outstanding/current entries in File 356.1
"RTN","IBCNEDE6",55,0)
 .. I '$$ADDTQ^IBCNEUT5(DFN,PAYER,SRVICEDT,FDAYS) Q
"RTN","IBCNEDE6",56,0)
 .. ;
"RTN","IBCNEDE6",57,0)
 .. ; Call function to set IIV TRANSMISSION QUEUE file #365.1
"RTN","IBCNEDE6",58,0)
 .. ;
"RTN","IBCNEDE6",59,0)
 .. K SIDARRAY
"RTN","IBCNEDE6",60,0)
 .. S SIDACT=$$SIDCHK2^IBCNEDE5(DFN,PAYER,.SIDARRAY,FRESHDT)
"RTN","IBCNEDE6",61,0)
 .. S SIDCNT=$P(SIDACT,U,2),SIDACT=$P(SIDACT,U)
"RTN","IBCNEDE6",62,0)
 .. ;  Add to SIDCNT to compensate for a TQ entry w/ blank Sub ID
"RTN","IBCNEDE6",63,0)
 .. I SIDACT=5!(SIDACT=6)!(SIDACT=7)!(SIDACT=8) S SIDCNT=SIDCNT+1
"RTN","IBCNEDE6",64,0)
 .. I IBCNCNT+SIDCNT>MAXNUM S IBCNCNT=MAXNUM Q  ; see if TQ entries will exceed MAXNUM
"RTN","IBCNEDE6",65,0)
 .. S SID="" F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D
"RTN","IBCNEDE6",66,0)
 ... S INREC=$P(SID,"_",2)   ; which patient ins rec ID is from
"RTN","IBCNEDE6",67,0)
 ... D INACSET($P(SID,"_"),INREC)
"RTN","IBCNEDE6",68,0)
 ... ; 
"RTN","IBCNEDE6",69,0)
 .. ;  Create TQ entry w/ blank Sub ID
"RTN","IBCNEDE6",70,0)
 .. I (SIDACT=5)!(SIDACT=6)!(SIDACT=7)!(SIDACT=8) S SID="" D INACSET("","")
"RTN","IBCNEDE6",71,0)
 K SIDARRAY
"RTN","IBCNEDE6",72,0)
INACX ;
"RTN","IBCNEDE6",73,0)
 Q FOUND
"RTN","IBCNEDE6",74,0)
 ;
"RTN","IBCNEDE6",75,0)
INACSET(SID,INREC) ; INAC. SET
"RTN","IBCNEDE6",76,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE6",77,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE6",78,0)
 ;
"RTN","IBCNEDE6",79,0)
 ; IB*2*416 removed the ability to perform identification inquiries
"RTN","IBCNEDE6",80,0)
 Q
"RTN","IBCNEDE6",81,0)
 ;
"RTN","IBCNEDE6",82,0)
 N FRESH
"RTN","IBCNEDE6",83,0)
 S FRESH=$$FMADD^XLFDT(SRVICEDT,-FDAYS)
"RTN","IBCNEDE6",84,0)
 S DATA1=DFN_U_PAYER_U_1_U_""_U_SID_U_FRESH
"RTN","IBCNEDE6",85,0)
 ;
"RTN","IBCNEDE6",86,0)
 ; The hardcoded 1st piece of DATA2 tells file 365.1 which extract
"RTN","IBCNEDE6",87,0)
 ; it is.
"RTN","IBCNEDE6",88,0)
 I APPTFLG S DATA2=2    ; appt extract IBCNEDE2
"RTN","IBCNEDE6",89,0)
 I 'APPTFLG S DATA2=4   ; no ins extract IBCNEDE4
"RTN","IBCNEDE6",90,0)
 S DATA2=DATA2_U_"I"_U_SRVICEDT_U_$G(INREC)
"RTN","IBCNEDE6",91,0)
 ;
"RTN","IBCNEDE6",92,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2)
"RTN","IBCNEDE6",93,0)
 I TQIEN'="" S IBCNCNT=IBCNCNT+1
"RTN","IBCNEDE6",94,0)
 ;
"RTN","IBCNEDE6",95,0)
 Q
"RTN","IBCNEDE6",96,0)
 ;
"RTN","IBCNEDE6",97,0)
UPDDTS(PIEN,SVDT,FRDT) ;  Update service date and freshness date per payer
"RTN","IBCNEDE6",98,0)
 ; date parameters FUTURE SERVICE DAYS (365.121,.14) and PAST SERVICE
"RTN","IBCNEDE6",99,0)
 ; DAYS (365.121,.15)
"RTN","IBCNEDE6",100,0)
 ; Output:
"RTN","IBCNEDE6",101,0)
 ;  SVDT - passed by reference - updates service date
"RTN","IBCNEDE6",102,0)
 ;  FRDT - passed by reference - updates freshness date - except for 
"RTN","IBCNEDE6",103,0)
 ;         INAC where it is optional
"RTN","IBCNEDE6",104,0)
 N FDAYS,PDAYS,DIFF,AIEN,DATA,OSVDT,EDTFLG
"RTN","IBCNEDE6",105,0)
 ;
"RTN","IBCNEDE6",106,0)
 ; Init vars - save original service date to calc diff
"RTN","IBCNEDE6",107,0)
 S (FDAYS,PDAYS,EDTFLG)=0,OSVDT=SVDT
"RTN","IBCNEDE6",108,0)
 ; Determine Payer App IEN
"RTN","IBCNEDE6",109,0)
 S AIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNEDE6",110,0)
 I AIEN="" Q  ; Quit without changing if app is not defined
"RTN","IBCNEDE6",111,0)
 S DATA=$G(^IBE(365.12,PIEN,1,AIEN,0))
"RTN","IBCNEDE6",112,0)
 I DATA="" Q  ; Quit without changing if node is not defined
"RTN","IBCNEDE6",113,0)
 S FDAYS=$P(DATA,U,14),PDAYS=$P(DATA,U,15)
"RTN","IBCNEDE6",114,0)
 ; Process past service days if not null
"RTN","IBCNEDE6",115,0)
 I PDAYS'="" D
"RTN","IBCNEDE6",116,0)
 . ; If zero, reset to today
"RTN","IBCNEDE6",117,0)
 . I PDAYS=0 S SVDT=$$DT^XLFDT,EDTFLG=1
"RTN","IBCNEDE6",118,0)
 . ; If non-zero and service date is earlier than the allowed
"RTN","IBCNEDE6",119,0)
 . ;  payer service date range, reset service date to earliest allowed
"RTN","IBCNEDE6",120,0)
 . ;  date for the payer
"RTN","IBCNEDE6",121,0)
 . I PDAYS,SVDT<$$FMADD^XLFDT($$DT^XLFDT,-PDAYS) D
"RTN","IBCNEDE6",122,0)
 . . S SVDT=$$FMADD^XLFDT($$DT^XLFDT,-PDAYS),EDTFLG=1
"RTN","IBCNEDE6",123,0)
 ; Process future service days if not edited and if not null
"RTN","IBCNEDE6",124,0)
 I EDTFLG=0,FDAYS'="" D
"RTN","IBCNEDE6",125,0)
 . ; If zero, reset to today
"RTN","IBCNEDE6",126,0)
 . I FDAYS=0 S SVDT=$$DT^XLFDT,EDTFLG=1
"RTN","IBCNEDE6",127,0)
 . ; If non-zero and service date is later than the allowed
"RTN","IBCNEDE6",128,0)
 . ;  payer service date range, reset service date to latest allowed
"RTN","IBCNEDE6",129,0)
 . ;  date for the payer
"RTN","IBCNEDE6",130,0)
 . I FDAYS,SVDT>$$FMADD^XLFDT($$DT^XLFDT,FDAYS) D
"RTN","IBCNEDE6",131,0)
 . . S SVDT=$$FMADD^XLFDT($$DT^XLFDT,FDAYS),EDTFLG=1
"RTN","IBCNEDE6",132,0)
 ;
"RTN","IBCNEDE6",133,0)
 ; Determine if difference exists
"RTN","IBCNEDE6",134,0)
 I EDTFLG,$G(FRDT)'="" S FRDT=$$FMADD^XLFDT(FRDT,$$FMDIFF^XLFDT(SVDT,OSVDT))
"RTN","IBCNEDE6",135,0)
 ;
"RTN","IBCNEDE6",136,0)
 Q
"RTN","IBCNEDE6",137,0)
 ;
"RTN","IBCNEDE6",138,0)
BLANKTQ(SRVICEDT,FRESHDT,YDAYS,IBCNCNT) ; 
"RTN","IBCNEDE6",139,0)
 ; This tag is only called from PROCESS^IBCNEDE4 
"RTN","IBCNEDE6",140,0)
 ; No new records were created in file 365.1 for this DFN.
"RTN","IBCNEDE6",141,0)
 ; Need to check if an inquiry for any payer exists for this DFN within
"RTN","IBCNEDE6",142,0)
 ; the freshness period.  If it doesn't exist create a new blank inquiry
"RTN","IBCNEDE6",143,0)
 ;
"RTN","IBCNEDE6",144,0)
 ; Input
"RTN","IBCNEDE6",145,0)
 ;    SRVICEDT - Service Date
"RTN","IBCNEDE6",146,0)
 ;    FRESHDT - Freshness Date
"RTN","IBCNEDE6",147,0)
 ;    YDAYS - 
"RTN","IBCNEDE6",148,0)
 ;    IBCNCNT - updated - Counter for the extract
"RTN","IBCNEDE6",149,0)
 ;
"RTN","IBCNEDE6",150,0)
 ; IB*2*416 removed the ability to perform identification inquiries
"RTN","IBCNEDE6",151,0)
 ;          - blank or otherwise
"RTN","IBCNEDE6",152,0)
 Q
"RTN","IBCNEDE6",153,0)
 ;
"RTN","IBCNEDE6",154,0)
 I $$TFL^IBCNEDE6(DFN)=0 Q
"RTN","IBCNEDE6",155,0)
 ;
"RTN","IBCNEDE6",156,0)
 N PAYER,DATA1,DATA2,TQIEN
"RTN","IBCNEDE6",157,0)
 ;
"RTN","IBCNEDE6",158,0)
 S PAYER=$$FIND1^DIC(365.12,,"X","~NO PAYER")
"RTN","IBCNEDE6",159,0)
 ;
"RTN","IBCNEDE6",160,0)
 ; Update service date and freshness date based on payer allowed
"RTN","IBCNEDE6",161,0)
 ;  date range
"RTN","IBCNEDE6",162,0)
 D UPDDTS^IBCNEDE6(PAYER,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE6",163,0)
 ;
"RTN","IBCNEDE6",164,0)
 ; Update service dates for inquiries to be transmitted
"RTN","IBCNEDE6",165,0)
 D TQUPDSV^IBCNEUT5(DFN,PAYER,SRVICEDT)
"RTN","IBCNEDE6",166,0)
 ;
"RTN","IBCNEDE6",167,0)
 ; Are we allowed to add it to the TQ file
"RTN","IBCNEDE6",168,0)
 I '$$ADDTQ^IBCNEUT5(DFN,PAYER,SRVICEDT,YDAYS,1) G BLANKXT
"RTN","IBCNEDE6",169,0)
 ;
"RTN","IBCNEDE6",170,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE6",171,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE6",172,0)
 S DATA1=DFN_U_PAYER_U_1_U_""_U_""_U_FRESHDT
"RTN","IBCNEDE6",173,0)
 ;
"RTN","IBCNEDE6",174,0)
 ; The hardcoded '4' in the 1st piece of DATA2 is the value to tell
"RTN","IBCNEDE6",175,0)
 ; the file 365.1 that it is the no active insurance extract.
"RTN","IBCNEDE6",176,0)
 S DATA2=4_U_"I"_U_SRVICEDT
"RTN","IBCNEDE6",177,0)
 ;
"RTN","IBCNEDE6",178,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2),PAYER=""
"RTN","IBCNEDE6",179,0)
 I TQIEN'="" S IBCNCNT=IBCNCNT+1
"RTN","IBCNEDE6",180,0)
 ;
"RTN","IBCNEDE6",181,0)
BLANKXT ;
"RTN","IBCNEDE6",182,0)
 Q
"RTN","IBCNEDE6",183,0)
 ;
"RTN","IBCNEDE6",184,0)
TFL(DFN) ; Examines treating facility list,
"RTN","IBCNEDE6",185,0)
 ; value returned is 1 if patient has visited at least one other site
"RTN","IBCNEDE6",186,0)
 N IBC,IBZ,IBS
"RTN","IBCNEDE6",187,0)
 D TFL^VAFCTFU1(.IBZ,DFN) Q:-$G(IBZ(1))=1 0
"RTN","IBCNEDE6",188,0)
 S IBS=+$P($$SITE^VASITE,"^",3),(IBZ,IBC)=0
"RTN","IBCNEDE6",189,0)
 ; Look for remote facilities of type VAMC:
"RTN","IBCNEDE6",190,0)
 F  S IBZ=$O(IBZ(IBZ)) Q:IBZ<1  I +IBZ(IBZ)>0,+IBZ(IBZ)'=IBS,$P(IBZ(IBZ),U,5)="VAMC" S IBC=1 Q
"RTN","IBCNEDE6",191,0)
 Q IBC
"RTN","IBCNEDE7")
0^30^B27880444^B24645310
"RTN","IBCNEDE7",1,0)
IBCNEDE7 ;DAOU/DAC - eIV DATA EXTRACTS ;04-JUN-2002
"RTN","IBCNEDE7",2,0)
 ;;2.0;INTEGRATED BILLING;**271,416,438,497**;21-MAR-94;Build 120
"RTN","IBCNEDE7",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDE7",4,0)
 ;
"RTN","IBCNEDE7",5,0)
 Q    ; no direct calls allowed
"RTN","IBCNEDE7",6,0)
 ; 
"RTN","IBCNEDE7",7,0)
SETTINGS(EXTNUM) ; Check site parameter settings for the extracts
"RTN","IBCNEDE7",8,0)
 ; Input Parameter:
"RTN","IBCNEDE7",9,0)
 ;
"RTN","IBCNEDE7",10,0)
 ; EXTNUM is either 1, 2, 3 to represent the different extracts
"RTN","IBCNEDE7",11,0)
 ; 1 - Insurance Buffer extract
"RTN","IBCNEDE7",12,0)
 ; 2 - Pre-Reg (appointments)
"RTN","IBCNEDE7",13,0)
 ; 3 - Non Verified
"RTN","IBCNEDE7",14,0)
 ;        IB*2*416 removed extract#4 for No Insurance
"RTN","IBCNEDE7",15,0)
 ;
"RTN","IBCNEDE7",16,0)
 ; Output:
"RTN","IBCNEDE7",17,0)
 ; Returns a "^" delimited string passing back:
"RTN","IBCNEDE7",18,0)
 ;    A flag of whether to consider the extract active
"RTN","IBCNEDE7",19,0)
 ;    Number of days to look back in the past when extracting data
"RTN","IBCNEDE7",20,0)
 ;    STALEDYS - "stale days": number of days from today to determine the
"RTN","IBCNEDE7",21,0)
 ;          freshness this is only used for the non-verified and no 
"RTN","IBCNEDE7",22,0)
 ;          insurance extract.  The other two extracts pull their days
"RTN","IBCNEDE7",23,0)
 ;          from the IB SITE PARAMETER file within their specific 
"RTN","IBCNEDE7",24,0)
 ;          extract routine.
"RTN","IBCNEDE7",25,0)
 ;    Max Number of entries you are allowed to set into the eIV 
"RTN","IBCNEDE7",26,0)
 ;          Transmission Queue file.  If null, # of entries allowed is
"RTN","IBCNEDE7",27,0)
 ;          unlimited.
"RTN","IBCNEDE7",28,0)
 ;    Suppress Buffer Flag - Either '0' (No) or '1' (Yes)
"RTN","IBCNEDE7",29,0)
 ;          1 will suppress the creation of buffer entries
"RTN","IBCNEDE7",30,0)
 ;          0 will not
"RTN","IBCNEDE7",31,0)
 ;          Applies to extracts 2 (Pre Reg) and 3 (Non verified)
"RTN","IBCNEDE7",32,0)
 ;
"RTN","IBCNEDE7",33,0)
 N DIC,DISYS,DA,X,Y,EACTIVE,XDAYS,STALEDYS,MAXCNT,OK,SUPPBUFF
"RTN","IBCNEDE7",34,0)
 S EACTIVE=0,(XDAYS,STALEDYS,MAXCNT)=""
"RTN","IBCNEDE7",35,0)
 S OK=$S(EXTNUM=1:1,EXTNUM=2:1,EXTNUM=3:1,1:0)
"RTN","IBCNEDE7",36,0)
 I 'OK G EXIT
"RTN","IBCNEDE7",37,0)
 S DA=1,DIC="^IBE(350.9,"_DA_",51.17,",DIC(0)="X",X=EXTNUM D ^DIC
"RTN","IBCNEDE7",38,0)
 ;
"RTN","IBCNEDE7",39,0)
 I Y<1 G EXIT  ; extract not defined in the IB Site Parameter
"RTN","IBCNEDE7",40,0)
 ;
"RTN","IBCNEDE7",41,0)
 S EACTIVE=$G(^IBE(350.9,1,51.17,+Y,0))
"RTN","IBCNEDE7",42,0)
 S XDAYS=$P(EACTIVE,U,3)
"RTN","IBCNEDE7",43,0)
 S STALEDYS=$P(EACTIVE,U,4)
"RTN","IBCNEDE7",44,0)
 S MAXCNT=$P(EACTIVE,U,5)
"RTN","IBCNEDE7",45,0)
 S SUPPBUFF=$P(EACTIVE,U,6)
"RTN","IBCNEDE7",46,0)
 I SUPPBUFF="" S SUPPBUFF=0
"RTN","IBCNEDE7",47,0)
 S EACTIVE=$P(EACTIVE,U,2)
"RTN","IBCNEDE7",48,0)
EXIT ;
"RTN","IBCNEDE7",49,0)
 I EXTNUM=2,(XDAYS="") S EACTIVE=0  ; missing required data
"RTN","IBCNEDE7",50,0)
 I EXTNUM=3 D
"RTN","IBCNEDE7",51,0)
 . I XDAYS=""!(STALEDYS="") S EACTIVE=0   ; missing required data
"RTN","IBCNEDE7",52,0)
 Q EACTIVE_U_XDAYS_U_STALEDYS_U_MAXCNT_U_SUPPBUFF
"RTN","IBCNEDE7",53,0)
 ;
"RTN","IBCNEDE7",54,0)
SETTQ(DATA1,DATA2,ORIG,OVERRIDE) ;Set extract data in TQ file 365.1
"RTN","IBCNEDE7",55,0)
 ;
"RTN","IBCNEDE7",56,0)
 ; DATA1, DATA2, & ORIG are "^" delimited variables containing the data
"RTN","IBCNEDE7",57,0)
 ; listed below
"RTN","IBCNEDE7",58,0)
 ;
"RTN","IBCNEDE7",59,0)
 ; OVERRIDE - flag indicates that this entry is a result of the 
"RTN","IBCNEDE7",60,0)
 ;         'Request Re-Verification' menu option.
"RTN","IBCNEDE7",61,0)
 ;
"RTN","IBCNEDE7",62,0)
 N BUFFIEN,FDA,IENARRAY,ERROR,TRANSNO,DFN,SRVCODE
"RTN","IBCNEDE7",63,0)
 ; do not allow "NO PAYER" entries
"RTN","IBCNEDE7",64,0)
 I $P(DATA1,U,2)=$$FIND1^DIC(365.12,"","X","~NO PAYER") Q
"RTN","IBCNEDE7",65,0)
 ; get service code (default to 30)
"RTN","IBCNEDE7",66,0)
 S BUFFIEN=$P(DATA1,U,4),SRVCODE=$S(BUFFIEN:$P($G(^IBA(355.33,BUFFIEN,80)),U),1:29)  ; ib*2*497  replace '30' to '29' in Select statement default value.  29 is the IEN for code 30 in file 365.013
"RTN","IBCNEDE7",67,0)
 ;
"RTN","IBCNEDE7",68,0)
 S TRANSNO=$P($G(^IBCN(365.1,0)),U,3)+1
"RTN","IBCNEDE7",69,0)
 S FDA(365.1,"+1,",.01)=TRANSNO             ; Transaction #
"RTN","IBCNEDE7",70,0)
 ;
"RTN","IBCNEDE7",71,0)
 S DFN=$P(DATA1,U)
"RTN","IBCNEDE7",72,0)
 S FDA(365.1,"+1,",.02)=DFN                 ; patient DFN
"RTN","IBCNEDE7",73,0)
 S FDA(365.1,"+1,",.03)=$P(DATA1,U,2)       ; ien of payer
"RTN","IBCNEDE7",74,0)
 S FDA(365.1,"+1,",.04)=$P(DATA1,U,3)       ; ien of transmission status
"RTN","IBCNEDE7",75,0)
 S FDA(365.1,"+1,",.15)=DT                  ; trans status date
"RTN","IBCNEDE7",76,0)
 S FDA(365.1,"+1,",.05)=BUFFIEN             ; ien of buffer
"RTN","IBCNEDE7",77,0)
 ;
"RTN","IBCNEDE7",78,0)
 S FDA(365.1,"+1,",.06)=$$NOW^XLFDT         ; creation date/time
"RTN","IBCNEDE7",79,0)
 S FDA(365.1,"+1,",.07)=0                   ; transmission retries
"RTN","IBCNEDE7",80,0)
 S FDA(365.1,"+1,",.08)=0                   ; number of retries
"RTN","IBCNEDE7",81,0)
 I $D(OVERRIDE) S FDA(365.1,"+1,",.14)=OVERRIDE  ; override flag
"RTN","IBCNEDE7",82,0)
 S FDA(365.1,"+1,",.16)=$P(DATA1,U,5)        ; Sub. ID
"RTN","IBCNEDE7",83,0)
 S FDA(365.1,"+1,",.17)=$P(DATA1,U,6)        ; Freshness Date
"RTN","IBCNEDE7",84,0)
 S FDA(365.1,"+1,",.18)=$P(DATA1,U,7)        ; Pass Buffer ien?
"RTN","IBCNEDE7",85,0)
 S FDA(365.1,"+1,",.19)=$P(DATA1,U,8)        ; Patient ID
"RTN","IBCNEDE7",86,0)
 S FDA(365.1,"+1,",.2)=SRVCODE               ; Service code
"RTN","IBCNEDE7",87,0)
 ;
"RTN","IBCNEDE7",88,0)
 I $D(DATA2) D
"RTN","IBCNEDE7",89,0)
 . S FDA(365.1,"+1,",.1)=$P(DATA2,U)          ; which extract (ien)
"RTN","IBCNEDE7",90,0)
 . S FDA(365.1,"+1,",.11)=$P(DATA2,U,2)       ; query flag
"RTN","IBCNEDE7",91,0)
 . S FDA(365.1,"+1,",.12)=$P(DATA2,U,3)       ; service date
"RTN","IBCNEDE7",92,0)
 . S FDA(365.1,"+1,",.13)=$P(DATA2,U,4)       ; patient insur. ien
"RTN","IBCNEDE7",93,0)
 ;
"RTN","IBCNEDE7",94,0)
 I $D(ORIG) D
"RTN","IBCNEDE7",95,0)
 . S FDA(365.1,"+1,",1.02)=$P(ORIG,U)   ; original ins co (in buffer)
"RTN","IBCNEDE7",96,0)
 . S FDA(365.1,"+1,",1.03)=$P(ORIG,U,2)   ; original grp # (in buffer)
"RTN","IBCNEDE7",97,0)
 . S FDA(365.1,"+1,",1.04)=$P(ORIG,U,3)   ; original grp name (in buffer)
"RTN","IBCNEDE7",98,0)
 . S FDA(365.1,"+1,",1.05)=$P(ORIG,U,4)   ; original subscriber ID
"RTN","IBCNEDE7",99,0)
 ;
"RTN","IBCNEDE7",100,0)
 D UPDATE^DIE("","FDA","IENARRAY","ERROR")
"RTN","IBCNEDE7",101,0)
 ;
"RTN","IBCNEDE7",102,0)
 I $G(ERROR("DIERR",1,"TEXT",1))'="" D  ; MailMan msg
"RTN","IBCNEDE7",103,0)
 . N MGRP,XMSUB,MSG
"RTN","IBCNEDE7",104,0)
 . ;
"RTN","IBCNEDE7",105,0)
 . ; Set to IB site parameter MAILGROUP
"RTN","IBCNEDE7",106,0)
 . S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDE7",107,0)
 . ;
"RTN","IBCNEDE7",108,0)
 . S XMSUB="eIV Problem: Trouble setting entry in File 365.1"
"RTN","IBCNEDE7",109,0)
 . S MSG(1)="Tried to create an entry in the eIV Transmission Queue File #365.1 without"
"RTN","IBCNEDE7",110,0)
 . S MSG(2)="success."
"RTN","IBCNEDE7",111,0)
 . S MSG(3)=""
"RTN","IBCNEDE7",112,0)
 . S MSG(4)="Error encountered: "_$G(ERROR("DIERR",1,"TEXT",1))
"RTN","IBCNEDE7",113,0)
 . S MSG(5)=""
"RTN","IBCNEDE7",114,0)
 . S MSG(6)="The data that was to be stored is as follows:"
"RTN","IBCNEDE7",115,0)
 . S MSG(7)=""
"RTN","IBCNEDE7",116,0)
 . S MSG(8)="Transaction #: "_TRANSNO
"RTN","IBCNEDE7",117,0)
 . S MSG(9)="Patient: "_$P($G(^DPT(DFN,0)),U)_$$SSN^IBCNEDEQ(DFN)
"RTN","IBCNEDE7",118,0)
 . S MSG(10)="Extract: "_$P($G(DATA2),U,1)
"RTN","IBCNEDE7",119,0)
 . S MSG(11)="Payer: "
"RTN","IBCNEDE7",120,0)
 . S:$P(DATA1,U,2)'="" MSG(11)=MSG(11)_$P($G(^IBE(365.12,$P(DATA1,U,2),0)),U,1)
"RTN","IBCNEDE7",121,0)
 . S MSG(12)="Please call the Help Desk about this problem."
"RTN","IBCNEDE7",122,0)
 . D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDE7",123,0)
 ;
"RTN","IBCNEDE7",124,0)
 Q $G(IENARRAY(1))
"RTN","IBCNEDE7",125,0)
 ;
"RTN","IBCNEDE7",126,0)
PYRACTV(PIEN) ; check if given payer is nationally active for eIV
"RTN","IBCNEDE7",127,0)
 ; returns 1 if payer is nationally active, 0 otherwise
"RTN","IBCNEDE7",128,0)
 N APPIEN,RES
"RTN","IBCNEDE7",129,0)
 S RES=0
"RTN","IBCNEDE7",130,0)
 I +$G(PIEN)'>0 G PYRACTVX
"RTN","IBCNEDE7",131,0)
 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNEDE7",132,0)
 I +$G(APPIEN)'>0 G PYRACTVX
"RTN","IBCNEDE7",133,0)
 I $P($G(^IBE(365.12,PIEN,1,APPIEN,0)),U,2)=1 S RES=1
"RTN","IBCNEDE7",134,0)
PYRACTVX ;
"RTN","IBCNEDE7",135,0)
 Q RES
"RTN","IBCNEDST")
0^9^B52803166^n/a
"RTN","IBCNEDST",1,0)
IBCNEDST ;Harris/YMG - HL7 Registration Message Statistics ;07-MAR-2013
"RTN","IBCNEDST",2,0)
 ;;2.0;INTEGRATED BILLING;**497**;21-MAR-94;Build 120
"RTN","IBCNEDST",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDST",4,0)
 ;
"RTN","IBCNEDST",5,0)
 Q
"RTN","IBCNEDST",6,0)
GETSTAT() ; get statistical data
"RTN","IBCNEDST",7,0)
 ;
"RTN","IBCNEDST",8,0)
 ; returns the following string, delimited by "^":
"RTN","IBCNEDST",9,0)
 ;   piece 1  - Number of patients with potential secondary/tertiary insurance as identified by Medicare
"RTN","IBCNEDST",10,0)
 ;   piece 2  - Number of automatically updated patient insurance records within last 24 hours
"RTN","IBCNEDST",11,0)
 ;   piece 3  - Number of queued 270 inquiries within last 24 hours
"RTN","IBCNEDST",12,0)
 ;   piece 4  - Number of deferred 270 inquiries within last 24 hours
"RTN","IBCNEDST",13,0)
 ;   piece 5  - Number of 270 inquiries pending receipt of 271 responses within last 24 hours
"RTN","IBCNEDST",14,0)
 ;   piece 6  - Number of insurance companies with no National ID
"RTN","IBCNEDST",15,0)
 ;   piece 7  - Number of locally disabled payers
"RTN","IBCNEDST",16,0)
 ;   piece 8  - Number of Verified (*) buffer entries within last 24 hours
"RTN","IBCNEDST",17,0)
 ;   piece 9  - Number of buffer entries indicated as having Active insurance (+) within last 24 hours
"RTN","IBCNEDST",18,0)
 ;   piece 10 - Number of buffer entries indicated as having Inactive insurance (-) within last 24 hours
"RTN","IBCNEDST",19,0)
 ;   piece 11 - Number of buffer entries indicated as policy status undetermined (#) within last 24 hours
"RTN","IBCNEDST",20,0)
 ;   piece 12 - Number of buffer entries indicated as requiring correction before 270 can be sent (!) within last 24 hours
"RTN","IBCNEDST",21,0)
 ;   piece 13 - Number of buffer entries awaiting processing within last 24 hours
"RTN","IBCNEDST",22,0)
 ;   piece 14 - Number of buffer entries indicated as waiting for a 271 response (?) within last 24 hours
"RTN","IBCNEDST",23,0)
 ;   piece 15 - Number of buffer entries entered by manual process with no further processing (blank) within last 24 hours
"RTN","IBCNEDST",24,0)
 ;   piece 16 - Number of unlinked insurance companies
"RTN","IBCNEDST",25,0)
 ;
"RTN","IBCNEDST",26,0)
 N BUFINFO,PAYINFO,RESPINFO,STARTDTTM,TQINFO
"RTN","IBCNEDST",27,0)
 ;
"RTN","IBCNEDST",28,0)
 S STARTDTTM=$$FMADD^XLFDT($$NOW^XLFDT(),,-24) ; set to current date/time - 24 hours
"RTN","IBCNEDST",29,0)
 S RESPINFO=$$RESPINFO(STARTDTTM) ; get data from file 365
"RTN","IBCNEDST",30,0)
 S TQINFO=$$TQINFO(STARTDTTM) ; get data from file 365.1
"RTN","IBCNEDST",31,0)
 S PAYINFO=$$PAYINFO() ; get data from file 365.12
"RTN","IBCNEDST",32,0)
 S BUFINFO=$$BUFINFO(STARTDTTM) ; get data from file 355.33
"RTN","IBCNEDST",33,0)
 Q RESPINFO_U_TQINFO_U_PAYINFO_U_BUFINFO
"RTN","IBCNEDST",34,0)
 ;
"RTN","IBCNEDST",35,0)
RESPINFO(DTTM) ; get data from IIV response file (file 365)
"RTN","IBCNEDST",36,0)
 ; DTTM - start date/time
"RTN","IBCNEDST",37,0)
 ;
"RTN","IBCNEDST",38,0)
 ; returns the following string, delimited by "^":
"RTN","IBCNEDST",39,0)
 ;   piece 1: number of patients with potential secondary/tertiary insurance as identified by Medicare
"RTN","IBCNEDST",40,0)
 ;   piece 2: number of automatically updated patient insurance records within last 24 hours
"RTN","IBCNEDST",41,0)
 ;
"RTN","IBCNEDST",42,0)
 N AUTOUPD,DATE,DFN,EBIEN,IEN,INSNAMES,INSTYPE,POLICY,PAYER,PAYERWNR,PYRNAME,SECINS,Z
"RTN","IBCNEDST",43,0)
 S (AUTOUPD,SECINS)=0
"RTN","IBCNEDST",44,0)
 S PAYERWNR=$P($G(^IBE(350.9,1,51)),U,25) ; get Medicare payer ien from IB site parameters
"RTN","IBCNEDST",45,0)
 S DATE=DTTM-0.000001 F  S DATE=$O(^IBCN(365,"AD",DATE)) Q:DATE=""  D
"RTN","IBCNEDST",46,0)
 .; if response received within the last 24 hrs, check if it auto-updated insurance policy
"RTN","IBCNEDST",47,0)
 .S PAYER=0 F  S PAYER=$O(^IBCN(365,"AD",DATE,PAYER)) Q:PAYER=""  D
"RTN","IBCNEDST",48,0)
 ..S DFN=0 F  S DFN=$O(^IBCN(365,"AD",DATE,PAYER,DFN)) Q:DFN=""  S AUTOUPD=AUTOUPD+$$PATINFO(DFN)
"RTN","IBCNEDST",49,0)
 ..Q
"RTN","IBCNEDST",50,0)
 .I PAYERWNR,$D(^IBCN(365,"AD",DATE,PAYERWNR)) D
"RTN","IBCNEDST",51,0)
 ..S DFN=0 F  S DFN=$O(^IBCN(365,"AD",DATE,PAYERWNR,DFN)) Q:DFN=""  D
"RTN","IBCNEDST",52,0)
 ...; create array of ins. company names for this patient (active policies only)
"RTN","IBCNEDST",53,0)
 ...K INSNAMES S INSTYPE=0 F  S INSTYPE=$O(^DPT(DFN,.312,"B",INSTYPE)) Q:INSTYPE=""  D
"RTN","IBCNEDST",54,0)
 ....S POLICY=0 F  S POLICY=$O(^DPT(DFN,.312,"B",INSTYPE,POLICY)) Q:POLICY=""  D
"RTN","IBCNEDST",55,0)
 .....; skip policies that are not active
"RTN","IBCNEDST",56,0)
 .....I $$CHK^IBCNS1(^DPT(DFN,.312,POLICY,0),DT,1) S INSNAMES($$EXTERNAL^DILFD(2.312,.01,,INSTYPE))=""
"RTN","IBCNEDST",57,0)
 .....Q
"RTN","IBCNEDST",58,0)
 ....Q
"RTN","IBCNEDST",59,0)
 ...S IEN=0 F  S IEN=$O(^IBCN(365,"AD",DATE,PAYERWNR,DFN,IEN)) Q:IEN=""  D
"RTN","IBCNEDST",60,0)
 ....S Z="" F  S Z=$O(^IBCN(365,IEN,2,"B",Z)) Q:Z=""  D
"RTN","IBCNEDST",61,0)
 .....S EBIEN=$O(^IBCN(365,IEN,2,"B",Z,""))
"RTN","IBCNEDST",62,0)
 .....; make sure eligibility code is "R"
"RTN","IBCNEDST",63,0)
 .....I $$GET1^DIQ(365.02,EBIEN_","_IEN_",",.02)'="R" Q
"RTN","IBCNEDST",64,0)
 .....S PYRNAME=$E($P($G(^IBCN(365,IEN,2,EBIEN,3)),U,3),1,30) ; grab first 30 chars to compare to 36/.01
"RTN","IBCNEDST",65,0)
 .....I PYRNAME'="",'$D(INSNAMES(PYRNAME)) S SECINS=SECINS+1
"RTN","IBCNEDST",66,0)
 .....Q
"RTN","IBCNEDST",67,0)
 ....Q
"RTN","IBCNEDST",68,0)
 ...Q
"RTN","IBCNEDST",69,0)
 ..Q
"RTN","IBCNEDST",70,0)
 .Q
"RTN","IBCNEDST",71,0)
 Q SECINS_U_AUTOUPD
"RTN","IBCNEDST",72,0)
 ;
"RTN","IBCNEDST",73,0)
PATINFO(DFN) ; get data from pat. insurance multiple (file 2.312)
"RTN","IBCNEDST",74,0)
 ; DFN - file 2 ien
"RTN","IBCNEDST",75,0)
 ;
"RTN","IBCNEDST",76,0)
 ; returns
"RTN","IBCNEDST",77,0)
 ;   number of automatically updated patient insurance records for a given patient within last 24 hours
"RTN","IBCNEDST",78,0)
 ;
"RTN","IBCNEDST",79,0)
 N AUTOUPD,INSTYPE,POLICY
"RTN","IBCNEDST",80,0)
 I 'DFN Q
"RTN","IBCNEDST",81,0)
 S AUTOUPD=0
"RTN","IBCNEDST",82,0)
 S INSTYPE=0 F  S INSTYPE=$O(^DPT(DFN,.312,"B",INSTYPE)) Q:INSTYPE=""  D
"RTN","IBCNEDST",83,0)
 .S POLICY=0 F  S POLICY=$O(^DPT(DFN,.312,"B",INSTYPE,POLICY)) Q:POLICY=""  D
"RTN","IBCNEDST",84,0)
 ..; if DATE LAST VERIFIED is no more than one day old and EIV AUTO-UPDATE is set, increment auto-update counter
"RTN","IBCNEDST",85,0)
 ..I +$P($G(^DPT(DFN,.312,POLICY,4)),U,4),$$FMDIFF^XLFDT(DT,+$P($G(^DPT(DFN,.312,POLICY,1)),U,3),1)<2 S AUTOUPD=AUTOUPD+1
"RTN","IBCNEDST",86,0)
 ..Q
"RTN","IBCNEDST",87,0)
 .Q
"RTN","IBCNEDST",88,0)
 Q AUTOUPD
"RTN","IBCNEDST",89,0)
 ;
"RTN","IBCNEDST",90,0)
TQINFO(DTTM) ; get data from transmission queue (file 365.1)
"RTN","IBCNEDST",91,0)
 ; DTTM - start date/time
"RTN","IBCNEDST",92,0)
 ;
"RTN","IBCNEDST",93,0)
 ; returns the following string, delimited by "^":
"RTN","IBCNEDST",94,0)
 ;   piece 1  - Number of queued 270 inquiries within last 24 hours
"RTN","IBCNEDST",95,0)
 ;   piece 2  - Number of deferred 270 inquiries within last 24 hours
"RTN","IBCNEDST",96,0)
 ;   piece 3  - Number of 270 inquiries pending receipt of 271 responses within last 24 hours
"RTN","IBCNEDST",97,0)
 ;
"RTN","IBCNEDST",98,0)
 N DATE,INQD,INQQ,INQP,INQUIRY,TQSTATUS
"RTN","IBCNEDST",99,0)
 S (INQD,INQQ,INQP)=0
"RTN","IBCNEDST",100,0)
 S DATE=DTTM F  S DATE=$O(^IBCN(365.1,"AE",DATE)) Q:DATE=""  D
"RTN","IBCNEDST",101,0)
 .S INQUIRY=0 F  S INQUIRY=$O(^IBCN(365.1,"AE",DATE,INQUIRY)) Q:INQUIRY=""  D
"RTN","IBCNEDST",102,0)
 ..S INQQ=INQQ+1 ; counter for queued inquiries
"RTN","IBCNEDST",103,0)
 ..S TQSTATUS=$$GET1^DIQ(365.1,INQUIRY_",",.04)
"RTN","IBCNEDST",104,0)
 ..I TQSTATUS="Transmitted" S INQP=INQP+1 Q  ; counter for inquiries pending receipt
"RTN","IBCNEDST",105,0)
 ..I TQSTATUS'="Response Received" S INQD=INQD+1 ; counter for deferred inquiries (neither "transmitted" nor "response received")
"RTN","IBCNEDST",106,0)
 ..Q
"RTN","IBCNEDST",107,0)
 .Q
"RTN","IBCNEDST",108,0)
 Q INQQ_U_INQD_U_INQP
"RTN","IBCNEDST",109,0)
 ;
"RTN","IBCNEDST",110,0)
PAYINFO() ; get data from payer (file 365.12)
"RTN","IBCNEDST",111,0)
 ; returns the following string, delimited by "^":
"RTN","IBCNEDST",112,0)
 ;   piece 1  - Number of insurance companies with no National ID
"RTN","IBCNEDST",113,0)
 ;   piece 2  - Number of locally disabled payers
"RTN","IBCNEDST",114,0)
 ;   piece 3  - Number of unlinked insurance companies
"RTN","IBCNEDST",115,0)
 ;
"RTN","IBCNEDST",116,0)
 N ACTIVE,APP,DATA,IDLIST,INSCO,INSTID,LOCDIS,NONATID,PAYER,PROFID,UNLINK,Z
"RTN","IBCNEDST",117,0)
 S (LOCDIS,NONATID,UNLINK)=0
"RTN","IBCNEDST",118,0)
 ; loop through PAYER file
"RTN","IBCNEDST",119,0)
 S Z="" F  S Z=$O(^IBE(365.12,"B",Z)) Q:Z=""  D
"RTN","IBCNEDST",120,0)
 .S PAYER=+$O(^IBE(365.12,"B",Z,"")) I '$$ACTAPP^IBCNEUT5(PAYER) Q  ; no active payer applications
"RTN","IBCNEDST",121,0)
 .S DATA=^IBE(365.12,PAYER,0)
"RTN","IBCNEDST",122,0)
 .I $P(DATA,U,2)="" S NONATID=NONATID+1 ; counter for missing national id 
"RTN","IBCNEDST",123,0)
 .; Must have at least 1 nationally active payer application
"RTN","IBCNEDST",124,0)
 .S (APP,ACTIVE)=0 F  S APP=$O(^IBE(365.12,PAYER,1,APP)) Q:'APP!ACTIVE  I $P($G(^IBE(365.12,PAYER,1,APP,0)),U,2)=1 S ACTIVE=1
"RTN","IBCNEDST",125,0)
 .I 'ACTIVE Q  ; no nationally active payer application found
"RTN","IBCNEDST",126,0)
 .; create a list of institutional and professional IDs
"RTN","IBCNEDST",127,0)
 .S PROFID=$P(DATA,U,5),INSTID=$P(DATA,U,6) S:PROFID'="" IDLIST("P",PROFID)="" S:INSTID'="" IDLIST("I",INSTID)=""
"RTN","IBCNEDST",128,0)
 .S APP=$$PYRAPP^IBCNEUT5("IIV",PAYER) I 'APP Q
"RTN","IBCNEDST",129,0)
 .S DATA=$G(^IBE(365.12,PAYER,1,APP,0))
"RTN","IBCNEDST",130,0)
 .I $P(DATA,U,2),'$P(DATA,U,3) S LOCDIS=LOCDIS+1 ; counter for locally disabled payers
"RTN","IBCNEDST",131,0)
 .Q
"RTN","IBCNEDST",132,0)
 ; loop through ins. co file
"RTN","IBCNEDST",133,0)
 S Z="" F  S Z=$O(^DIC(36,"B",Z)) Q:Z=""  D
"RTN","IBCNEDST",134,0)
 .S INSCO=$O(^DIC(36,"B",Z,""))
"RTN","IBCNEDST",135,0)
 .I '$$ACTIVE^IBCNEUT4(INSCO) Q  ; inactive ins co
"RTN","IBCNEDST",136,0)
 .S DATA=$G(^DIC(36,INSCO,3)) I $P(DATA,U,10)'="" Q  ; already linked to a payer
"RTN","IBCNEDST",137,0)
 .S PROFID=$P(DATA,U,2),INSTID=$P(DATA,U,4)
"RTN","IBCNEDST",138,0)
 .; if either professional or institutional id match those of active payers, increment unlinked companies counter
"RTN","IBCNEDST",139,0)
 .I PROFID'="",$D(IDLIST("P",PROFID)) S UNLINK=UNLINK+1 Q
"RTN","IBCNEDST",140,0)
 .I INSTID'="",$D(IDLIST("I",INSTID)) S UNLINK=UNLINK+1
"RTN","IBCNEDST",141,0)
 .Q
"RTN","IBCNEDST",142,0)
 Q NONATID_U_LOCDIS_U_UNLINK
"RTN","IBCNEDST",143,0)
 ;
"RTN","IBCNEDST",144,0)
BUFINFO(DTTM) ; get data from insurance buffer (dile 355.33)
"RTN","IBCNEDST",145,0)
 ; DTTM - start date/time
"RTN","IBCNEDST",146,0)
 ;
"RTN","IBCNEDST",147,0)
 ; returns the following string, delimited by "^":
"RTN","IBCNEDST",148,0)
 ;   piece 1  - Number of Verified (*) buffer entries within last 24 hours
"RTN","IBCNEDST",149,0)
 ;   piece 2  - Number of buffer entries indicated as having Active insurance (+) within last 24 hours
"RTN","IBCNEDST",150,0)
 ;   piece 3 - Number of buffer entries indicated as having Inactive insurance (-) within last 24 hours
"RTN","IBCNEDST",151,0)
 ;   piece 4 - Number of buffer entries indicated as policy status undetermined (#) within last 24 hours
"RTN","IBCNEDST",152,0)
 ;   piece 5 - Number of buffer entries indicated as requiring correction before 270 can be sent (!) within last 24 hours
"RTN","IBCNEDST",153,0)
 ;   piece 6 - Number of buffer entries awaiting processing within last 24 hours
"RTN","IBCNEDST",154,0)
 ;   piece 7 - Number of buffer entries indicated as waiting for a 271 response (?) within last 24 hours
"RTN","IBCNEDST",155,0)
 ;   piece 8 - Number of buffer entries entered by manual process with no further processing (blank) within last 24 hours 
"RTN","IBCNEDST",156,0)
 ;
"RTN","IBCNEDST",157,0)
 N ACTIVE,AMBIG,BUFF,DATE,ERROR,INACTIVE,MANUAL,PROCWAIT,RESPWAIT,STATUS,SYM,VERIFIED
"RTN","IBCNEDST",158,0)
 S (ACTIVE,AMBIG,ERROR,INACTIVE,MANUAL,PROCWAIT,RESPWAIT,VERIFIED)=0
"RTN","IBCNEDST",159,0)
 S STATUS="" F  S STATUS=$O(^IBA(355.33,"AEST",STATUS)) Q:STATUS=""  D
"RTN","IBCNEDST",160,0)
 .S DATE=DTTM F  S DATE=$O(^IBA(355.33,"AEST",STATUS,DATE)) Q:DATE=""  D
"RTN","IBCNEDST",161,0)
 ..S BUFF=0 F  S BUFF=$O(^IBA(355.33,"AEST",STATUS,DATE,BUFF)) Q:BUFF=""  D
"RTN","IBCNEDST",162,0)
 ...I STATUS="E" S PROCWAIT=PROCWAIT+1 ; entries awaiting processing
"RTN","IBCNEDST",163,0)
 ...S SYM=$$SYMBOL^IBCNBLL(BUFF)
"RTN","IBCNEDST",164,0)
 ...I SYM="*" S VERIFIED=VERIFIED+1 Q  ; verified entries
"RTN","IBCNEDST",165,0)
 ...I SYM="+" S ACTIVE=ACTIVE+1 Q      ; active insurance
"RTN","IBCNEDST",166,0)
 ...I SYM="-" S INACTIVE=INACTIVE+1 Q  ; inactive insurance
"RTN","IBCNEDST",167,0)
 ...I SYM="#" S AMBIG=AMBIG+1 Q        ; ambiguous response
"RTN","IBCNEDST",168,0)
 ...I SYM="!" S ERROR=ERROR+1 Q        ; entries requiring correction
"RTN","IBCNEDST",169,0)
 ...I SYM="?" S RESPWAIT=RESPWAIT+1 Q  ; awaiting response
"RTN","IBCNEDST",170,0)
 ...I SYM=" " S MANUAL=MANUAL+1        ; manually entered entries (no further processing)
"RTN","IBCNEDST",171,0)
 ...Q
"RTN","IBCNEDST",172,0)
 ..Q
"RTN","IBCNEDST",173,0)
 .Q
"RTN","IBCNEDST",174,0)
 Q VERIFIED_U_ACTIVE_U_INACTIVE_U_AMBIG_U_ERROR_U_PROCWAIT_U_RESPWAIT_U_MANUAL
"RTN","IBCNEHL1")
0^2^B206919324^B244020766
"RTN","IBCNEHL1",1,0)
IBCNEHL1 ;DAOU/ALA - HL7 Process Incoming RPI Messages ;26-JUN-2002
"RTN","IBCNEHL1",2,0)
 ;;2.0;INTEGRATED BILLING;**300,345,416,444,438,497**;21-MAR-94;Build 120
"RTN","IBCNEHL1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHL1",4,0)
 ;
"RTN","IBCNEHL1",5,0)
 ;**Program Description**
"RTN","IBCNEHL1",6,0)
 ;  This program will process incoming IIV response messages.
"RTN","IBCNEHL1",7,0)
 ;  This includes updating the record in the IIV Response File,
"RTN","IBCNEHL1",8,0)
 ;  updating the Buffer record (if there is one and creating a new
"RTN","IBCNEHL1",9,0)
 ;  one if there isn't) with the appropriate Buffer Symbol and data
"RTN","IBCNEHL1",10,0)
 ;
"RTN","IBCNEHL1",11,0)
 ;  Variables
"RTN","IBCNEHL1",12,0)
 ;    SEG = HL7 Segment Name
"RTN","IBCNEHL1",13,0)
 ;    MSGID = Original Message Control ID
"RTN","IBCNEHL1",14,0)
 ;    ACK =  Acknowledgment (AA=Accepted, AE=Error)
"RTN","IBCNEHL1",15,0)
 ;    ERTXT = Error Message Text
"RTN","IBCNEHL1",16,0)
 ;    ERFLG = Error quit flag
"RTN","IBCNEHL1",17,0)
 ;    ERACT = Error Action
"RTN","IBCNEHL1",18,0)
 ;    ERCON = Error Condition
"RTN","IBCNEHL1",19,0)
 ;    RIEN = Response Record IEN
"RTN","IBCNEHL1",20,0)
 ;    IIVSTAT = EC generated flag interpreting status of response
"RTN","IBCNEHL1",21,0)
 ;              1 = + (auto-update requirement)
"RTN","IBCNEHL1",22,0)
 ;              6 = -
"RTN","IBCNEHL1",23,0)
 ;              V = #
"RTN","IBCNEHL1",24,0)
 ;    MAP = Array that maps EC's IIV status flag to IIV STATUS TABLE (#365.15)   IEN
"RTN","IBCNEHL1",25,0)
 ;
"RTN","IBCNEHL1",26,0)
EN ; Entry Point
"RTN","IBCNEHL1",27,0)
 N AUTO,EBDA,ERFLG,ERROR,G2OFLG,HCT,HLCMP,HLREP,HLSCMP,IIVSTAT,IRIEN,MAP,MGRP,RIEN,RSUPDT,SEG,SUBID,TRACE,UP,ACK
"RTN","IBCNEHL1",28,0)
 S (ERFLG,G2OFLG)=0,MGRP=$$MGRP^IBCNEUT5(),HCT=1,SUBID="",IIVSTAT=""
"RTN","IBCNEHL1",29,0)
 ;
"RTN","IBCNEHL1",30,0)
 S HLCMP=$E(HL("ECH")) ; HL7 component separator
"RTN","IBCNEHL1",31,0)
 S HLSCMP=$E(HL("ECH"),4) ; HL7 subcomponent separator
"RTN","IBCNEHL1",32,0)
 S HLREP=$E(HL("ECH"),2) ; HL7 repetition separator
"RTN","IBCNEHL1",33,0)
 ; Create map from EC to VistA
"RTN","IBCNEHL1",34,0)
 S MAP(1)=8,MAP(6)=9,MAP("V")=21
"RTN","IBCNEHL1",35,0)
 ;
"RTN","IBCNEHL1",36,0)
 ;  Loop through the message and find each segment for processing
"RTN","IBCNEHL1",37,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:ERFLG
"RTN","IBCNEHL1",38,0)
 .D SPAR^IBCNEHLU
"RTN","IBCNEHL1",39,0)
 .S SEG=$G(IBSEG(1))
"RTN","IBCNEHL1",40,0)
 .; check if we are inside G2O group of segments
"RTN","IBCNEHL1",41,0)
 .I SEG="ZTY" S G2OFLG=1
"RTN","IBCNEHL1",42,0)
 .I G2OFLG,SEG'="ZTY",SEG'="CTD" S G2OFLG=0
"RTN","IBCNEHL1",43,0)
 .; If we are outside of Z_Benefit_group, kill EB multiple ien
"RTN","IBCNEHL1",44,0)
 .; I +$G(EBDA),".MSH.MSA.PRD.PID.GT1.IN1.IN3."[("."_SEG_".")!('G2OFLG&(SEG="CTD")) K EBDA
"RTN","IBCNEHL1",45,0)
 .;
"RTN","IBCNEHL1",46,0)
 .Q:SEG="PRD"  ; IB*2*497  PRD segment is not processed
"RTN","IBCNEHL1",47,0)
 .;
"RTN","IBCNEHL1",48,0)
 .I SEG="MSA" D MSA^IBCNEHL2(.ERACT,.ERCON,.ERROR,.ERTXT,.IBSEG,MGRP,.RIEN,.TRACE) Q
"RTN","IBCNEHL1",49,0)
 .;
"RTN","IBCNEHL1",50,0)
 .;  Contact Segment
"RTN","IBCNEHL1",51,0)
 .I SEG="CTD",'G2OFLG D CTD^IBCNEHL2(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",52,0)
 .;
"RTN","IBCNEHL1",53,0)
 .;  Patient Segment
"RTN","IBCNEHL1",54,0)
 .I SEG="PID" D PID^IBCNEHL2(.ERFLG,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",55,0)
 .;
"RTN","IBCNEHL1",56,0)
 .;  Guarantor Segment
"RTN","IBCNEHL1",57,0)
 .I SEG="GT1" D GT1^IBCNEHL2(.ERROR,.IBSEG,RIEN,.SUBID) Q
"RTN","IBCNEHL1",58,0)
 .;
"RTN","IBCNEHL1",59,0)
 .;  Insurance Segment
"RTN","IBCNEHL1",60,0)
 .I SEG="IN1" D IN1^IBCNEHL2(.ERROR,.IBSEG,RIEN,SUBID) Q
"RTN","IBCNEHL1",61,0)
 .;
"RTN","IBCNEHL1",62,0)
 .;  Addt'l Insurance Segment
"RTN","IBCNEHL1",63,0)
 .;I SEG="IN2" ; for future expansion, add IN2 tag to IBCNEHL2
"RTN","IBCNEHL1",64,0)
 .;
"RTN","IBCNEHL1",65,0)
 .;  Addt'l Insurance - Cert Segment
"RTN","IBCNEHL1",66,0)
 .I SEG="IN3" D IN3^IBCNEHL2(.ERROR,.IBSEG,RIEN) Q 
"RTN","IBCNEHL1",67,0)
 .;
"RTN","IBCNEHL1",68,0)
 .; IB*2*497 GROUP LEVEL REFERENCE ID segment (x12 loops 2100C and 2100D)
"RTN","IBCNEHL1",69,0)
 . I SEG="ZRF",'$D(EBDA) D GZRF^IBCNEHL5(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",70,0)
 .;
"RTN","IBCNEHL1",71,0)
 .;  Eligibility/Benefit Segment
"RTN","IBCNEHL1",72,0)
 .I SEG="ZEB" D ZEB^IBCNEHL2(.EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",73,0)
 .;
"RTN","IBCNEHL1",74,0)
 .; Healthcare Delivery Segment
"RTN","IBCNEHL1",75,0)
 .I SEG="ZHS" D ZHS^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",76,0)
 .;
"RTN","IBCNEHL1",77,0)
 .; Benefit level Reference ID Segment  (X12 loops 2110C and 2110D)
"RTN","IBCNEHL1",78,0)
 .I SEG="ZRF",+$G(EBDA) D ZRF^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q  ;IB*2*497 add check to make sure z benefit group
"RTN","IBCNEHL1",79,0)
 .;
"RTN","IBCNEHL1",80,0)
 .; Subscriber Date Segment
"RTN","IBCNEHL1",81,0)
 .I SEG="ZSD" D ZSD^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",82,0)
 .;
"RTN","IBCNEHL1",83,0)
 .; Subscriber Additional Info Segment
"RTN","IBCNEHL1",84,0)
 .I SEG="ZII" D ZII^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",85,0)
 .;
"RTN","IBCNEHL1",86,0)
 .; Benefit Related Entity Segment
"RTN","IBCNEHL1",87,0)
 .I SEG="ZTY" D ZTY^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",88,0)
 .;
"RTN","IBCNEHL1",89,0)
 .; Benefit Related Entity Contact Segment
"RTN","IBCNEHL1",90,0)
 .I SEG="CTD",G2OFLG D G2OCTD^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",91,0)
 .;
"RTN","IBCNEHL1",92,0)
 .; Benefit Related Entity Notes Segment
"RTN","IBCNEHL1",93,0)
 .I SEG="NTE",+$G(EBDA) D EBNTE^IBCNEHL2(EBDA,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",94,0)
 .;
"RTN","IBCNEHL1",95,0)
 .; Reject Reasons Segment
"RTN","IBCNEHL1",96,0)
 .I SEG="ERR" K ERDA D ERR^IBCNEHL4(.ERDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",97,0)
 .;
"RTN","IBCNEHL1",98,0)
 .; Notes Segment
"RTN","IBCNEHL1",99,0)
 .I SEG="NTE",'$D(EBDA),+$G(ERDA) D NTE^IBCNEHL4(ERDA,.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",100,0)
 .;
"RTN","IBCNEHL1",101,0)
 .; Subscriber date segment (subscriber level)
"RTN","IBCNEHL1",102,0)
 .I SEG="ZTP" D ZTP^IBCNEHL4(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",103,0)
 . ; ib*2*497  -  add processing for ROL, DG1, and ZMP segments
"RTN","IBCNEHL1",104,0)
 . ; Provider Code segment 
"RTN","IBCNEHL1",105,0)
 . I SEG="ROL" D ROL^IBCNEHL5(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",106,0)
 . ;
"RTN","IBCNEHL1",107,0)
 . ; Health Care Diagnosis Code segment
"RTN","IBCNEHL1",108,0)
 . I SEG="DG1" D DG1^IBCNEHL5(.ERROR,.IBSEG,RIEN) Q
"RTN","IBCNEHL1",109,0)
 .;
"RTN","IBCNEHL1",110,0)
 .; Military Personnel Information segment
"RTN","IBCNEHL1",111,0)
 . I SEG="ZMP" D ZMP^IBCNEHL5(.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",112,0)
 ;
"RTN","IBCNEHL1",113,0)
 S AUTO=$$AUTOUPD(RIEN)
"RTN","IBCNEHL1",114,0)
 I $G(ACK)'="AE",$G(ERACT)="",$G(ERTXT)="",'$D(ERROR),+AUTO D  Q
"RTN","IBCNEHL1",115,0)
 .D:$P(AUTO,U,3)'="" AUTOFIL($P(AUTO,U,2),$P(AUTO,U,3),$P(AUTO,U,6))
"RTN","IBCNEHL1",116,0)
 .D:$P(AUTO,U,4)'="" AUTOFIL($P(AUTO,U,2),$P(AUTO,U,4),$P(AUTO,U,6))
"RTN","IBCNEHL1",117,0)
 .Q
"RTN","IBCNEHL1",118,0)
 D FIL
"RTN","IBCNEHL1",119,0)
 Q
"RTN","IBCNEHL1",120,0)
 ;
"RTN","IBCNEHL1",121,0)
 ; =================================================================
"RTN","IBCNEHL1",122,0)
AUTOFIL(DFN,IEN312,ISSUB) ; Finish processing the response message - file directly into patient insurance
"RTN","IBCNEHL1",123,0)
 ;
"RTN","IBCNEHL1",124,0)
 N BUFF,DATA,ERROR,IENS,PREL,RDATA0,RDATA1,RDATA5,RDATA13,RSTYPE,TQN,TSTAMP,MIL,OKAY   ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",125,0)
 ;
"RTN","IBCNEHL1",126,0)
 Q:$G(RIEN)=""
"RTN","IBCNEHL1",127,0)
 S TSTAMP=$$NOW^XLFDT(),IENS=IEN312_","_DFN_","
"RTN","IBCNEHL1",128,0)
 S RDATA0=$G(^IBCN(365,RIEN,0)),RDATA1=$G(^IBCN(365,RIEN,1)),RDATA5=$G(^IBCN(365,RIEN,5))
"RTN","IBCNEHL1",129,0)
 S RDATA13=$G(^IBCN(365,RIEN,13))         ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",130,0)
 S TQN=$P(RDATA0,U,5),RSTYPE=$P(RDATA0,U,10)
"RTN","IBCNEHL1",131,0)
 I ISSUB S DATA(2.312,IENS,7.01)=$P(RDATA13,U) ; name     - IB*2.0*497 (vd)
"RTN","IBCNEHL1",132,0)
 S DATA(2.312,IENS,3.01)=$P(RDATA1,U,2) ; dob
"RTN","IBCNEHL1",133,0)
 S DATA(2.312,IENS,3.05)=$P(RDATA1,U,3) ; ssn
"RTN","IBCNEHL1",134,0)
 I ISSUB,$P(RDATA1,U,8)'="" S DATA(2.312,IENS,6)=$P(RDATA1,U,8) ; whose insurance
"RTN","IBCNEHL1",135,0)
 ; pt. relationship (365,8.01) IB*2*497 code from 365,8.01 needs evaluation and possible conversion
"RTN","IBCNEHL1",136,0)
 S PREL=$$GET1^DIQ(365,RIEN,8.01) I ISSUB,PREL'="" S DATA(2.312,IENS,4.03)=$$PREL^IBCNEHLU(2.312,4.03,PREL)
"RTN","IBCNEHL1",137,0)
 S DATA(2.312,IENS,1.03)=TSTAMP ; date last verified
"RTN","IBCNEHL1",138,0)
 S DATA(2.312,IENS,1.04)="" ; last verified by
"RTN","IBCNEHL1",139,0)
 S DATA(2.312,IENS,1.05)=TSTAMP ; date last edited
"RTN","IBCNEHL1",140,0)
 S DATA(2.312,IENS,1.06)="" ; last edited by
"RTN","IBCNEHL1",141,0)
 S DATA(2.312,IENS,1.09)=5 ; source of info = eIV
"RTN","IBCNEHL1",142,0)
 ;subscriber address
"RTN","IBCNEHL1",143,0)
 S DATA(2.312,IENS,3.06)=$P(RDATA5,U) ; street line 1
"RTN","IBCNEHL1",144,0)
 S DATA(2.312,IENS,3.07)=$P(RDATA5,U,2) ; street line 2
"RTN","IBCNEHL1",145,0)
 S DATA(2.312,IENS,3.08)=$P(RDATA5,U,3) ; city
"RTN","IBCNEHL1",146,0)
 S DATA(2.312,IENS,3.09)=$P(RDATA5,U,4) ; state
"RTN","IBCNEHL1",147,0)
 S DATA(2.312,IENS,3.1)=$P(RDATA5,U,5) ; zip
"RTN","IBCNEHL1",148,0)
 S DATA(2.312,IENS,3.13)=$P(RDATA5,U,6) ; country
"RTN","IBCNEHL1",149,0)
 S DATA(2.312,IENS,3.14)=$P(RDATA5,U,7) ; country subdivision
"RTN","IBCNEHL1",150,0)
 ;
"RTN","IBCNEHL1",151,0)
 L +^DPT(DFN,.312,IEN312):15 I '$T D LCKERR^IBCNEHL3 D FIL Q
"RTN","IBCNEHL1",152,0)
 D FILE^DIE("ET","DATA","ERROR") I $D(ERROR) D WARN^IBCNEHL3 K ERROR D FIL G AUTOFILX
"RTN","IBCNEHL1",153,0)
 ;
"RTN","IBCNEHL1",154,0)
 ; set eIV auto-update field separately because of the trigger on field 1.05
"RTN","IBCNEHL1",155,0)
 K DATA S DATA(2.312,IENS,4.04)="YES" D FILE^DIE("ET","DATA","ERROR") I $D(ERROR) D WARN^IBCNEHL3 G AUTOFILX
"RTN","IBCNEHL1",156,0)
 S ERFLG=$$GRPFILE(DFN,IEN312,RIEN,1) I $G(ERFLG) G AUTOFILX  ;IB*2*497  file data at 2.312, 9, 10 and 11 subfiles; if error is produced update buffer entry and then quit processing
"RTN","IBCNEHL1",157,0)
 ; file new EB data
"RTN","IBCNEHL1",158,0)
 S ERFLG=$$EBFILE(DFN,IEN312,RIEN,1)
"RTN","IBCNEHL1",159,0)
 ; bail out if something went wrong during filing of EB data
"RTN","IBCNEHL1",160,0)
 I $G(ERFLG) G AUTOFILX
"RTN","IBCNEHL1",161,0)
 ; update insurance record ien in transmission queue
"RTN","IBCNEHL1",162,0)
 D UPDIREC^IBCNEHL3(RIEN,IEN312)
"RTN","IBCNEHL1",163,0)
 ;  For an original response, set the Transmission Queue Status to 'Response Received' &
"RTN","IBCNEHL1",164,0)
 ;  update remaining retries to comm failure (5)
"RTN","IBCNEHL1",165,0)
 I $G(RSTYPE)="O" D SST^IBCNEUT2(TQN,3),RSTA^IBCNEUT7(TQN)
"RTN","IBCNEHL1",166,0)
 ; update buffer file entry so only stub remains and status is changed
"RTN","IBCNEHL1",167,0)
 S BUFF=+$P($G(^IBCN(365,RIEN,0)),U,4)
"RTN","IBCNEHL1",168,0)
 I BUFF D
"RTN","IBCNEHL1",169,0)
 .D STATUS^IBCNBEE(BUFF,"A",0,0,0) ; update buffer entry's status to accepted
"RTN","IBCNEHL1",170,0)
 .D DELDATA^IBCNBED(BUFF) ; delete buffer's insurance/patient data
"RTN","IBCNEHL1",171,0)
 .Q
"RTN","IBCNEHL1",172,0)
AUTOFILX ;
"RTN","IBCNEHL1",173,0)
 L -^DPT(DFN,.312,IEN312)
"RTN","IBCNEHL1",174,0)
 Q
"RTN","IBCNEHL1",175,0)
 ;
"RTN","IBCNEHL1",176,0)
GRPFILE(DFN,IEN312,RIEN,AFLG) ;  ib*2*497  file data at node 12 and at subfiles 2.312,9, 10 and 11
"RTN","IBCNEHL1",177,0)
 ; DFN - file 2 ien
"RTN","IBCNEHL1",178,0)
 ; IEN312 - file 2.312 ien
"RTN","IBCNEHL1",179,0)
 ; RIEN = file 365 ien
"RTN","IBCNEHL1",180,0)
 ; AFLG - 1 if called from autoupdate, 0 if called from ins. buffer process entry
"RTN","IBCNEHL1",181,0)
 ; output - returns 0 or 1
"RTN","IBCNEHL1",182,0)
 ;          0 - entry update received an error when attempting to file
"RTN","IBCNEHL1",183,0)
 ;          1 - successful update
"RTN","IBCNEHL1",184,0)
 N DA,Z,Z2,DATA12,IENS,IENS365,IENS312,REF,PROV,DIAG,REF3129,PROV332,DIAG3121,NODE,ERROR,ERFLG
"RTN","IBCNEHL1",185,0)
 ; retrieve external values of data located at node 12 of 365
"RTN","IBCNEHL1",186,0)
 S IENS=IEN312_","_DFN_","
"RTN","IBCNEHL1",187,0)
 D GETS^DIQ(365,RIEN,"12.01:12.07",,"MIL")
"RTN","IBCNEHL1",188,0)
 M DATA12(2.312,IENS)=MIL(365,RIEN_",")
"RTN","IBCNEHL1",189,0)
 D FILE^DIE("ET","DATA12","ERROR") I $D(ERROR) D:AFLG WARN^IBCNEHL3 K ERROR
"RTN","IBCNEHL1",190,0)
 ; remove existing sub-file entries at nodes 9, 10, and 11 before update of new data
"RTN","IBCNEHL1",191,0)
 F NODE="9","10","11" D
"RTN","IBCNEHL1",192,0)
 . S DIK="^DPT("_DFN_",.312,"_IEN312_","_NODE_",",DA(2)=DFN,DA(1)=IEN312
"RTN","IBCNEHL1",193,0)
 . S DA=0 F  S DA=$O(^DPT(DFN,.312,IEN312,NODE,DA)) Q:DA=""!(DA?1.A)  D ^DIK
"RTN","IBCNEHL1",194,0)
 S IENS312="+1,"_IEN312_","_DFN_","
"RTN","IBCNEHL1",195,0)
 ; update node 9 data
"RTN","IBCNEHL1",196,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,9,"B",Z)) Q:'Z  D
"RTN","IBCNEHL1",197,0)
 . S IENS365=$O(^IBCN(365,RIEN,9,"B",Z,""))_","_RIEN_","
"RTN","IBCNEHL1",198,0)
 . D GETS^DIQ(365.09,IENS365,"*",,"REF")
"RTN","IBCNEHL1",199,0)
 S Z2="" F  S Z2=$O(REF(365.09,Z2)) Q:Z2=""  M REF3129(2.3129,IENS312)=REF(365.09,Z2) D UPDATE^DIE("E","REF3129",,"ERROR") K REF3129 I $D(ERROR) D:AFLG WARN^IBCNEHL3 K ERROR
"RTN","IBCNEHL1",200,0)
 ; update node 10 data
"RTN","IBCNEHL1",201,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,10,"B",Z)) Q:'Z  D
"RTN","IBCNEHL1",202,0)
 . S IENS365=$O(^IBCN(365,RIEN,10,"B",Z,""))_","_RIEN_","
"RTN","IBCNEHL1",203,0)
 . D GETS^DIQ(365.04,IENS365,"*",,"PROV")
"RTN","IBCNEHL1",204,0)
 S Z2="" F  S Z2=$O(PROV(365.04,Z2)) Q:Z2=""  M PROV332(2.332,IENS312)=PROV(365.04,Z2) D UPDATE^DIE("E","PROV332",,"ERROR") K PROV332 I $D(ERROR) D:AFLG WARN^IBCNEHL3 K ERROR
"RTN","IBCNEHL1",205,0)
 ; update node 11 data
"RTN","IBCNEHL1",206,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,11,"B",Z)) Q:'Z  D
"RTN","IBCNEHL1",207,0)
 . S IENS365=$O(^IBCN(365,RIEN,11,"B",Z,""))_","_RIEN_","
"RTN","IBCNEHL1",208,0)
 . D GETS^DIQ(365.01,IENS365,"*",,"DIAG")
"RTN","IBCNEHL1",209,0)
 S Z2="" F  S Z2=$O(DIAG(365.01,Z2)) Q:Z2=""  M DIAG3121(2.31211,IENS312)=DIAG(365.01,Z2) D UPDATE^DIE("E","DIAG3121",,"ERROR") K DIAG3121 I $D(ERROR) D:AFLG WARN^IBCNEHL3 K ERROR
"RTN","IBCNEHL1",210,0)
GRPFILEX ;
"RTN","IBCNEHL1",211,0)
 Q $G(ERFLG)
"RTN","IBCNEHL1",212,0)
 ;
"RTN","IBCNEHL1",213,0)
FIL ; Finish processing the response message - file into insurance buffer
"RTN","IBCNEHL1",214,0)
 ;
"RTN","IBCNEHL1",215,0)
 ; Input Variables
"RTN","IBCNEHL1",216,0)
 ; ERACT, ERFLG, ERROR, IIVSTAT, MAP, RIEN, TRACE
"RTN","IBCNEHL1",217,0)
 ;
"RTN","IBCNEHL1",218,0)
 ; If no record IEN, quit
"RTN","IBCNEHL1",219,0)
 I $G(RIEN)="" Q
"RTN","IBCNEHL1",220,0)
 ;
"RTN","IBCNEHL1",221,0)
 N BUFF,DFN,FILEIT,IBFDA,IBIEN,IBQFL,RDAT0,RSRVDT,RSTYPE,SYMBOL,TQDATA,TQN,TQSRVDT
"RTN","IBCNEHL1",222,0)
 ; Initialize variables from the Response File
"RTN","IBCNEHL1",223,0)
 S RDAT0=$G(^IBCN(365,RIEN,0)),TQN=$P(RDAT0,U,5)
"RTN","IBCNEHL1",224,0)
 S TQDATA=$G(^IBCN(365.1,TQN,0))
"RTN","IBCNEHL1",225,0)
 S IBQFL=$P(TQDATA,U,11)
"RTN","IBCNEHL1",226,0)
 S DFN=$P(RDAT0,U,2),BUFF=$P(RDAT0,U,4)
"RTN","IBCNEHL1",227,0)
 S IBIEN=$P(TQDATA,U,5),RSTYPE=$P(RDAT0,U,10)
"RTN","IBCNEHL1",228,0)
 S RSRVDT=$P($G(^IBCN(365,RIEN,1)),U,10)
"RTN","IBCNEHL1",229,0)
 ;
"RTN","IBCNEHL1",230,0)
 ; If an unknown error action or an error filing the response message,
"RTN","IBCNEHL1",231,0)
 ; send a warning email message
"RTN","IBCNEHL1",232,0)
 ; Note - A call to UEACT will always set ERFLAG=1
"RTN","IBCNEHL1",233,0)
 I ",W,X,R,P,C,N,Y,S,"'[(","_$G(ERACT)_",")&($G(ERACT)'="")!$D(ERROR) D UEACT^IBCNEHL3
"RTN","IBCNEHL1",234,0)
 ;
"RTN","IBCNEHL1",235,0)
 ; If an error occurred, processing complete
"RTN","IBCNEHL1",236,0)
 I $G(ERFLG)=1 Q
"RTN","IBCNEHL1",237,0)
 ;
"RTN","IBCNEHL1",238,0)
 ;  For an original response, set the Transmission Queue Status to 'Response Received' &
"RTN","IBCNEHL1",239,0)
 ;  update remaining retries to comm failure (5)
"RTN","IBCNEHL1",240,0)
 I $G(RSTYPE)="O" D SST^IBCNEUT2(TQN,3),RSTA^IBCNEUT7(TQN)
"RTN","IBCNEHL1",241,0)
 ;
"RTN","IBCNEHL1",242,0)
 ; Update the TQ service date to the date in the response file
"RTN","IBCNEHL1",243,0)
 ; if they are different AND the Error Action <>
"RTN","IBCNEHL1",244,0)
 ; 'P' for 'Please submit original transaction'
"RTN","IBCNEHL1",245,0)
 ;
"RTN","IBCNEHL1",246,0)
 ; *** Temporary change to suppress update of service & freshness dates.
"RTN","IBCNEHL1",247,0)
 ; *** To reinstate, remove comment (;) from next line.
"RTN","IBCNEHL1",248,0)
 ;I TQN'="",$G(RSTYPE)="O" D
"RTN","IBCNEHL1",249,0)
 ;. S TQSRVDT=$P($G(^IBCN(365.1,TQN,0)),U,12)
"RTN","IBCNEHL1",250,0)
 ;. I RSRVDT'="",TQSRVDT'=RSRVDT,$G(ERACT)'="P" D SAVETQ^IBCNEUT2(TQN,RSRVDT)
"RTN","IBCNEHL1",251,0)
 ;. ; update freshness date by same delta
"RTN","IBCNEHL1",252,0)
 ;. D SAVFRSH^IBCNEUT5(TQN,+$$FMDIFF^XLFDT(RSRVDT,TQSRVDT,1))
"RTN","IBCNEHL1",253,0)
 ;
"RTN","IBCNEHL1",254,0)
 ;  Check for error action
"RTN","IBCNEHL1",255,0)
 I $G(ERACT)'=""!($G(ERTXT)'="") S ERACT=$$ERRACT^IBCNEHLU(RIEN),ERCON=$P(ERACT,U,2),ERACT=$P(ERACT,U) D ERROR^IBCNEHL3(TQN,ERACT,ERCON,TRACE) G FILX
"RTN","IBCNEHL1",256,0)
 ;
"RTN","IBCNEHL1",257,0)
 ; Stop processing if identification response and not an active policy
"RTN","IBCNEHL1",258,0)
 S FILEIT=1
"RTN","IBCNEHL1",259,0)
 I $G(IIVSTAT)=6,TQN]"" D
"RTN","IBCNEHL1",260,0)
 . I TQDATA="" Q
"RTN","IBCNEHL1",261,0)
 . I IBQFL'="I" Q
"RTN","IBCNEHL1",262,0)
 . S FILEIT=0
"RTN","IBCNEHL1",263,0)
 I 'FILEIT G FILX
"RTN","IBCNEHL1",264,0)
 ;
"RTN","IBCNEHL1",265,0)
 ;  If there is an associated buffer entry & one or both of the following
"RTN","IBCNEHL1",266,0)
 ;  is true, stop filing (don't update buffer entry)
"RTN","IBCNEHL1",267,0)
 ;  1) buffer status is not 'Entered'
"RTN","IBCNEHL1",268,0)
 ;  2) the buffer entry is verified (* symbol)
"RTN","IBCNEHL1",269,0)
 I BUFF'="",($P($G(^IBA(355.33,BUFF,0)),U,4)'="E")!($$SYMBOL^IBCNBLL(BUFF)="*") G FILX
"RTN","IBCNEHL1",270,0)
 ;
"RTN","IBCNEHL1",271,0)
 ;  Set buffer symbol based on value returned from EC
"RTN","IBCNEHL1",272,0)
 S SYMBOL=MAP(IIVSTAT)
"RTN","IBCNEHL1",273,0)
 ;
"RTN","IBCNEHL1",274,0)
 ;  If there is an associated buffer entry, update the buffer entry w/
"RTN","IBCNEHL1",275,0)
 ;  response data
"RTN","IBCNEHL1",276,0)
 I BUFF'="" D RP^IBCNEBF(RIEN,"",BUFF)
"RTN","IBCNEHL1",277,0)
 ;
"RTN","IBCNEHL1",278,0)
 ;  If no associated buffer entry, create one & populate w/ response
"RTN","IBCNEHL1",279,0)
 ;  data (routine call sets IBFDA)
"RTN","IBCNEHL1",280,0)
 I BUFF="" D RP^IBCNEBF(RIEN,1) S BUFF=+IBFDA,UP(365,RIEN_",",.04)=BUFF
"RTN","IBCNEHL1",281,0)
 ;
"RTN","IBCNEHL1",282,0)
 ;  Set eIV Processed Date to now
"RTN","IBCNEHL1",283,0)
 S UP(355.33,BUFF_",",.15)=$$NOW^XLFDT()
"RTN","IBCNEHL1",284,0)
 D FILE^DIE("I","UP","ERROR")
"RTN","IBCNEHL1",285,0)
FILX ;
"RTN","IBCNEHL1",286,0)
 Q
"RTN","IBCNEHL1",287,0)
 ;
"RTN","IBCNEHL1",288,0)
AUTOUPD(RIEN) ;
"RTN","IBCNEHL1",289,0)
 ; Returns "1^file 2 ien^file 2.312 ien^2nd file 2.312 ien^Medicare flag^subscriber flag", if entry
"RTN","IBCNEHL1",290,0)
 ; in file 365 is eligible for auto-update, returns 0 otherwise.
"RTN","IBCNEHL1",291,0)
 ;
"RTN","IBCNEHL1",292,0)
 ; Medicare flag: 1 for Medicare, 0 otherwise
"RTN","IBCNEHL1",293,0)
 ; Subscriber flag: 1 if patient is the subscriber, 0 otherwise
"RTN","IBCNEHL1",294,0)
 ;
"RTN","IBCNEHL1",295,0)
 ; For non-Medicare response: 1st file 2.312 ien is set, 2nd file 2.312 ien is empty, pieces 5-7 are empty
"RTN","IBCNEHL1",296,0)
 ; For Medicare response: 1st file 2.312 ien contains ien for Medicare Part A, 2nd file 2.312 ien contains ien for Medicare Part B,
"RTN","IBCNEHL1",297,0)
 ;                        either one may be empty, but at least one of them is set if entry is eligible.
"RTN","IBCNEHL1",298,0)
 ;
"RTN","IBCNEHL1",299,0)
 ; RIEN - ien in file 365
"RTN","IBCNEHL1",300,0)
 ;
"RTN","IBCNEHL1",301,0)
 N APPIEN,GDATA,GIEN,GNAME,GNUM,GNUM1,GOK,IEN2,IEN312,IEN36,IDATA0,IDATA3,ISSUB,MWNRA,MWNRB,MWNRIEN,MWNRTYP
"RTN","IBCNEHL1",302,0)
 N ONEPOL,PIEN,RDATA0,RDATA1,RES,TQIEN,IDATA7,RDATA13,RDATA14   ; IB*2.0*497
"RTN","IBCNEHL1",303,0)
 S RES=0
"RTN","IBCNEHL1",304,0)
 I +$G(RIEN)'>0 Q RES  ; invalid ien for file 365
"RTN","IBCNEHL1",305,0)
 I $G(IIVSTAT)'=1 Q RES ; only auto-update 'active policy' responses
"RTN","IBCNEHL1",306,0)
 S RDATA0=$G(^IBCN(365,RIEN,0)),RDATA1=$G(^IBCN(365,RIEN,1))
"RTN","IBCNEHL1",307,0)
 S RDATA13=$G(^IBCN(365,RIEN,13)),RDATA14=$G(^IBCN(365,RIEN,14))   ; IB*2.0*497  longer fields for GROUP NAME, GROUP NUMBER, NAME OF INSURED, and SUBSCRIBER ID
"RTN","IBCNEHL1",308,0)
 S PIEN=$P(RDATA0,U,3) I +PIEN>0 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNEHL1",309,0)
 I +$G(APPIEN)'>0 Q RES  ; couldn't find eIV application entry
"RTN","IBCNEHL1",310,0)
 ; Check dictionary 365.1 MANUAL REQUEST DATE/TIME Flag, Quit if Set.
"RTN","IBCNEHL1",311,0)
 I $P(RDATA0,U,5)'="",$P($G(^IBCN(365.1,$P(RDATA0,U,5),3)),U,1)'="" Q RES
"RTN","IBCNEHL1",312,0)
 I $P(^IBE(365.12,PIEN,1,APPIEN,0),U,7)=0 Q RES  ; auto-accept is OFF
"RTN","IBCNEHL1",313,0)
 S IEN2=$P(RDATA0,U,2) I +IEN2'>0 Q RES  ; couldn't find patient
"RTN","IBCNEHL1",314,0)
 S MWNRIEN=$P($G(^IBE(350.9,1,51)),U,25),MWNRTYP=0,(MWNRA,MWNRB)=""
"RTN","IBCNEHL1",315,0)
 I PIEN=MWNRIEN S MWNRTYP=$$ISMCR^IBCNEHLU(RIEN)
"RTN","IBCNEHL1",316,0)
 S ONEPOL=$$ONEPOL^IBCNEHLU(PIEN,IEN2)
"RTN","IBCNEHL1",317,0)
 ; try to find a matching pat. insurance
"RTN","IBCNEHL1",318,0)
 S IEN36="" F  S IEN36=$O(^DIC(36,"AC",PIEN,IEN36)) Q:IEN36=""!(RES>0)  D
"RTN","IBCNEHL1",319,0)
 .S IEN312="" F  S IEN312=$O(^DPT(IEN2,.312,"B",IEN36,IEN312)) Q:IEN312=""!(RES>0&('+MWNRTYP))  D
"RTN","IBCNEHL1",320,0)
 ..S IDATA0=$G(^DPT(IEN2,.312,IEN312,0)),IDATA3=$G(^DPT(IEN2,.312,IEN312,3))
"RTN","IBCNEHL1",321,0)
 ..S IDATA7=$G(^DPT(IEN2,.312,IEN312,7))   ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",322,0)
 ..I $$EXPIRED^IBCNEDE2($P(IDATA0,U,4)) Q  ; Insurance policy has expired
"RTN","IBCNEHL1",323,0)
 ..S ISSUB=$$PATISSUB^IBCNEHLU(IDATA0)
"RTN","IBCNEHL1",324,0)
 ..; Patient is the subscriber
"RTN","IBCNEHL1",325,0)
 ..I ISSUB,'$$CHK1^IBCNEHL3 Q
"RTN","IBCNEHL1",326,0)
 ..; Patient is the dependent
"RTN","IBCNEHL1",327,0)
 ..I 'ISSUB,'$$CHK2^IBCNEHL3(MWNRTYP) Q
"RTN","IBCNEHL1",328,0)
 ..; check group number
"RTN","IBCNEHL1",329,0)
 ..S GNUM=$P(RDATA14,U,2),GIEN=+$P(IDATA0,U,18),GOK=1  ;IB*2*497  group number needs to be retrieved from new field
"RTN","IBCNEHL1",330,0)
 ..; check non-Medicare group number
"RTN","IBCNEHL1",331,0)
 ..I '+MWNRTYP D  Q:'GOK  ; Group number doesn't match
"RTN","IBCNEHL1",332,0)
 ...I 'ONEPOL D
"RTN","IBCNEHL1",333,0)
 ....I GIEN'>0 S GOK=0 Q
"RTN","IBCNEHL1",334,0)
 ....S GNUM1=$P($G(^IBA(355.3,GIEN,2)),U,2)    ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",335,0)
 ....I GNUM=""!(GNUM1="")!(GNUM'=GNUM1) S GOK=0
"RTN","IBCNEHL1",336,0)
 ....Q
"RTN","IBCNEHL1",337,0)
 ...I ONEPOL D
"RTN","IBCNEHL1",338,0)
 ....I GNUM'="",GIEN'="" S GNUM1=$P($G(^IBA(355.3,GIEN,2)),U,2) I GNUM1'="",GNUM'=GNUM1 S GOK=0  ; IB*2.0*497 (vd)
"RTN","IBCNEHL1",339,0)
 ....Q
"RTN","IBCNEHL1",340,0)
 ...Q
"RTN","IBCNEHL1",341,0)
 ..; check for Medicare part A/B
"RTN","IBCNEHL1",342,0)
 ..I +MWNRTYP D  Q:'GOK  ; Group number doesn't match
"RTN","IBCNEHL1",343,0)
 ...I GIEN'>0 S GOK=0 Q
"RTN","IBCNEHL1",344,0)
 ...S GDATA=$G(^IBA(355.3,GIEN,0))
"RTN","IBCNEHL1",345,0)
 ...I $P(GDATA,U,14)="A" D
"RTN","IBCNEHL1",346,0)
 ....I $P(MWNRTYP,U,2)="MA"!($P(MWNRTYP,U,2)="B") S MWNRA=IEN312 Q
"RTN","IBCNEHL1",347,0)
 ....S GOK=0
"RTN","IBCNEHL1",348,0)
 ....Q
"RTN","IBCNEHL1",349,0)
 ...I $P(GDATA,U,14)="B" D
"RTN","IBCNEHL1",350,0)
 ....I $P(MWNRTYP,U,2)="MB"!($P(MWNRTYP,U,2)="B") S MWNRB=IEN312 Q
"RTN","IBCNEHL1",351,0)
 ....S GOK=0
"RTN","IBCNEHL1",352,0)
 ....Q
"RTN","IBCNEHL1",353,0)
 ...Q
"RTN","IBCNEHL1",354,0)
 ..S RES=1_U_IEN2_U_$S(+MWNRTYP:MWNRA_U_MWNRB_U_1,1:IEN312_U_U_0)
"RTN","IBCNEHL1",355,0)
 ..S $P(RES,U,6)=ISSUB
"RTN","IBCNEHL1",356,0)
 ..Q
"RTN","IBCNEHL1",357,0)
 .Q
"RTN","IBCNEHL1",358,0)
 Q RES
"RTN","IBCNEHL1",359,0)
 ;
"RTN","IBCNEHL1",360,0)
EBFILE(DFN,IEN312,RIEN,AFLG) ; file eligibility/benefit data from file 365 into file 2.312
"RTN","IBCNEHL1",361,0)
 ; DFN - file 2 ien
"RTN","IBCNEHL1",362,0)
 ; IEN312 - file 2.312 ien
"RTN","IBCNEHL1",363,0)
 ; RIEN - file 365 ien
"RTN","IBCNEHL1",364,0)
 ; AFLG - 1 if called from autoupdate, 0 if called from ins. buffer process entry
"RTN","IBCNEHL1",365,0)
 ; Returns "" on success, ERFLG on failure. Also called from ACCEPT^IBCNBAR for manual processing of ins. buffer entry.
"RTN","IBCNEHL1",366,0)
 ;
"RTN","IBCNEHL1",367,0)
 ;
"RTN","IBCNEHL1",368,0)
 N DA,DIK,DATA,DATA1,EBIENS,ERFLG,ERROR,GIEN,GSKIP,IENROOT,IENS,IENSTR,TYPE,TYPE1,Z,Z1,Z2
"RTN","IBCNEHL1",369,0)
 ; delete existing EB data
"RTN","IBCNEHL1",370,0)
 S DIK="^DPT("_DFN_",.312,"_IEN312_",6,",DA(2)=DFN,DA(1)=IEN312
"RTN","IBCNEHL1",371,0)
 S DA=0 F  S DA=$O(^DPT(DFN,.312,IEN312,6,DA)) Q:DA=""!(DA?1.A)  D ^DIK
"RTN","IBCNEHL1",372,0)
 ; file new EB data
"RTN","IBCNEHL1",373,0)
 S IENSTR=IEN312_","_DFN_","
"RTN","IBCNEHL1",374,0)
 S GIEN=+$P($G(^DPT(DFN,.312,IEN312,0)),U,18)
"RTN","IBCNEHL1",375,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,2,"B",Z)) Q:Z=""!$G(ERFLG)  D
"RTN","IBCNEHL1",376,0)
 .S EBIENS=$O(^IBCN(365,RIEN,2,"B",Z,""))_","_RIEN_","
"RTN","IBCNEHL1",377,0)
 .; if filing Medicare Part A/B data, make sure we only file the correct EB group
"RTN","IBCNEHL1",378,0)
 .S GSKIP=0 I GIEN>0 D
"RTN","IBCNEHL1",379,0)
 ..S TYPE=$$GET1^DIQ(365.02,EBIENS,.05)
"RTN","IBCNEHL1",380,0)
 ..S TYPE1=$P($G(^IBA(355.3,GIEN,0)),U,14)
"RTN","IBCNEHL1",381,0)
 ..I TYPE="MA",TYPE1="B" S GSKIP=1
"RTN","IBCNEHL1",382,0)
 ..I TYPE="MB",TYPE1="A" S GSKIP=1
"RTN","IBCNEHL1",383,0)
 ..Q
"RTN","IBCNEHL1",384,0)
 .I GSKIP Q  ; wrong Medicare Part A/B EB group - skip it
"RTN","IBCNEHL1",385,0)
 .D GETS^DIQ(365.02,EBIENS,"**",,"DATA","ERROR") I $D(ERROR) D:AFLG WARN^IBCNEHL3 Q
"RTN","IBCNEHL1",386,0)
 .; make sure we have data to file
"RTN","IBCNEHL1",387,0)
 .I '$D(DATA(365.02)) Q
"RTN","IBCNEHL1",388,0)
 .S IENS="+1,"_IENSTR,Z1=$O(DATA(365.02,"")) M DATA1(2.322,IENS)=DATA(365.02,Z1)
"RTN","IBCNEHL1",389,0)
 .D UPDATE^DIE("E","DATA1","IENROOT","ERROR") I $D(ERROR) D:AFLG WARN^IBCNEHL3 Q
"RTN","IBCNEHL1",390,0)
 .S IENS="+1,"_IENROOT(1)_","_IENSTR K DATA1,IENROOT
"RTN","IBCNEHL1",391,0)
 .S Z2="" F  S Z2=$O(DATA(365.26,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL1",392,0)
 ..M DATA1(2.3226,IENS)=DATA(365.26,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN^IBCNEHL3
"RTN","IBCNEHL1",393,0)
 ..Q
"RTN","IBCNEHL1",394,0)
 .S Z2="" F  S Z2=$O(DATA(365.27,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL1",395,0)
 ..M DATA1(2.3227,IENS)=DATA(365.27,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN^IBCNEHL3
"RTN","IBCNEHL1",396,0)
 ..Q
"RTN","IBCNEHL1",397,0)
 .S Z2="" F  S Z2=$O(DATA(365.28,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL1",398,0)
 ..M DATA1(2.3228,IENS)=DATA(365.28,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN^IBCNEHL3
"RTN","IBCNEHL1",399,0)
 ..Q
"RTN","IBCNEHL1",400,0)
 .S Z2="" F  S Z2=$O(DATA(365.29,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL1",401,0)
 ..M DATA1(2.3229,IENS)=DATA(365.29,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN^IBCNEHL3
"RTN","IBCNEHL1",402,0)
 ..Q
"RTN","IBCNEHL1",403,0)
 .S Z2="" F  S Z2=$O(DATA(365.291,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL1",404,0)
 ..M DATA1(2.32291,IENS)=DATA(365.291,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN^IBCNEHL3
"RTN","IBCNEHL1",405,0)
 ..Q
"RTN","IBCNEHL1",406,0)
 .S Z2="" F  S Z2=$O(DATA(365.292,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL1",407,0)
 ..M DATA1(2.32292,IENS)=DATA(365.292,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN^IBCNEHL3
"RTN","IBCNEHL1",408,0)
 ..Q
"RTN","IBCNEHL1",409,0)
 .K DATA
"RTN","IBCNEHL1",410,0)
 .Q
"RTN","IBCNEHL1",411,0)
 Q $G(ERFLG)
"RTN","IBCNEHL1",412,0)
 ;
"RTN","IBCNEHL2")
0^3^B70236887^B62824990
"RTN","IBCNEHL2",1,0)
IBCNEHL2 ;DAOU/ALA - HL7 Process Incoming RPI Msgs (cont.) ;26-JUN-2002  ; Compiled December 16, 2004 15:29:37
"RTN","IBCNEHL2",2,0)
 ;;2.0;INTEGRATED BILLING;**300,345,416,438,497**;21-MAR-94;Build 120
"RTN","IBCNEHL2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHL2",4,0)
 ;
"RTN","IBCNEHL2",5,0)
 ;**Program Description**
"RTN","IBCNEHL2",6,0)
 ;  This pgm will process the indiv segments of the
"RTN","IBCNEHL2",7,0)
 ;  incoming eIV response msgs.
"RTN","IBCNEHL2",8,0)
 ;
"RTN","IBCNEHL2",9,0)
 ; * Each of these tags are called by IBCNEHL1.
"RTN","IBCNEHL2",10,0)
 ; 
"RTN","IBCNEHL2",11,0)
 ;  This routine is based on IBCNEHLP which was introduced with patch 184, and subsequently
"RTN","IBCNEHL2",12,0)
 ;  patched with patches 252 and 271.  IBCNEHLP is obsolete and deleted with patch 300.
"RTN","IBCNEHL2",13,0)
 ;
"RTN","IBCNEHL2",14,0)
 ;  Variables
"RTN","IBCNEHL2",15,0)
 ;    SEG = HL7 Seg Name
"RTN","IBCNEHL2",16,0)
 ;    MSGID = Original Msg Control ID
"RTN","IBCNEHL2",17,0)
 ;    ACK =  Acknowledgment (AA=Accepted, AE=Error)
"RTN","IBCNEHL2",18,0)
 ;    ERTXT = Error Msg Text
"RTN","IBCNEHL2",19,0)
 ;    ERFLG = Error quit flag
"RTN","IBCNEHL2",20,0)
 ;    ERACT = Error Action
"RTN","IBCNEHL2",21,0)
 ;    ERCON = Error Condition
"RTN","IBCNEHL2",22,0)
 ;    RIEN = Response Record IEN
"RTN","IBCNEHL2",23,0)
 ;    IBSEG = Array of the segment
"RTN","IBCNEHL2",24,0)
 ;
"RTN","IBCNEHL2",25,0)
 Q  ; No direct calls
"RTN","IBCNEHL2",26,0)
 ;
"RTN","IBCNEHL2",27,0)
MSA(ERACT,ERCON,ERROR,ERTXT,IBSEG,MGRP,RIEN,TRACE) ;  Process the MSA seg
"RTN","IBCNEHL2",28,0)
 ;
"RTN","IBCNEHL2",29,0)
 ;  Input:
"RTN","IBCNEHL2",30,0)
 ;  IBSEG,MGRP
"RTN","IBCNEHL2",31,0)
 ;
"RTN","IBCNEHL2",32,0)
 ;  Output:
"RTN","IBCNEHL2",33,0)
 ;  ERACT,ERCON,ERROR,ERTXT,RIEN,TRACE,ACK
"RTN","IBCNEHL2",34,0)
 ;
"RTN","IBCNEHL2",35,0)
 D MSA^IBCNEHL4
"RTN","IBCNEHL2",36,0)
 Q
"RTN","IBCNEHL2",37,0)
 ;
"RTN","IBCNEHL2",38,0)
CTD(ERROR,IBSEG,RIEN) ; Process the CTD seg
"RTN","IBCNEHL2",39,0)
 ;
"RTN","IBCNEHL2",40,0)
 ; Input:
"RTN","IBCNEHL2",41,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL2",42,0)
 ;
"RTN","IBCNEHL2",43,0)
 ; Output:
"RTN","IBCNEHL2",44,0)
 ; ERROR
"RTN","IBCNEHL2",45,0)
 ;
"RTN","IBCNEHL2",46,0)
 N CTNAME,CTQUAL,CTNUM,CTQIEN,D1,DA,DATA,DIC,DILN,DISYS,DLAYGO,FFL,FLD,IENS,II,RSUPDT,X,Y
"RTN","IBCNEHL2",47,0)
 ;
"RTN","IBCNEHL2",48,0)
 ;  Parse out data from seg
"RTN","IBCNEHL2",49,0)
 S CTNAME=$G(IBSEG(3)),CTQUAL=$P($G(IBSEG(6)),$E(HLECH),9),CTNUM=$P($G(IBSEG(6)),$E(HLECH))
"RTN","IBCNEHL2",50,0)
 I $TR(CTNAME," ")="" S CTNAME="NOT SPECIFIED"
"RTN","IBCNEHL2",51,0)
 S CTQIEN=$$FIND1^DIC(365.021,"","X",CTQUAL)
"RTN","IBCNEHL2",52,0)
 I CTNAME[$E(HLECH) S CTNAME=$$DECHL7($$FMNAME^HLFNC(CTNAME,HLECH))
"RTN","IBCNEHL2",53,0)
 S CTNAME=$E(CTNAME,1,32)
"RTN","IBCNEHL2",54,0)
 ;
"RTN","IBCNEHL2",55,0)
 ;  Look up contact person
"RTN","IBCNEHL2",56,0)
 S DA(1)=RIEN,DIC="^IBCN(365,"_DA(1)_",3,",DIC(0)="LZ",DLAYGO=365.03
"RTN","IBCNEHL2",57,0)
 I '$D(^IBCN(365,DA(1),3,0)) S ^IBCN(365,DA(1),3,0)="^365.03^^"
"RTN","IBCNEHL2",58,0)
 S X=CTNAME D ^DIC
"RTN","IBCNEHL2",59,0)
 S DA=+Y,DATA=^IBCN(365,DA(1),3,DA,0),FLD=2,FFL=0
"RTN","IBCNEHL2",60,0)
 ;
"RTN","IBCNEHL2",61,0)
 ;  Check if contact already has this communication qualifier on file
"RTN","IBCNEHL2",62,0)
 F II=2,4,6 I $P(DATA,U,II)=CTQIEN S FLD=II,FFL=1 Q
"RTN","IBCNEHL2",63,0)
 I 'FFL F II=2,4,6 I $P(DATA,U,II)="" S FLD=II Q
"RTN","IBCNEHL2",64,0)
 ;
"RTN","IBCNEHL2",65,0)
 S IENS=$$IENS^DILF(.DA)
"RTN","IBCNEHL2",66,0)
 S RSUPDT(365.03,IENS,(FLD/2))=CTNUM   ;stuffs the communication # in the correct field ;IB*2.0*497
"RTN","IBCNEHL2",67,0)
 S RSUPDT(365.03,IENS,".0"_FLD)=CTQIEN
"RTN","IBCNEHL2",68,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHL2",69,0)
CTDX ;
"RTN","IBCNEHL2",70,0)
 Q
"RTN","IBCNEHL2",71,0)
 ;
"RTN","IBCNEHL2",72,0)
PID(ERFLG,ERROR,IBSEG,RIEN) ;  Process the PID seg
"RTN","IBCNEHL2",73,0)
 ;
"RTN","IBCNEHL2",74,0)
 ; Input:
"RTN","IBCNEHL2",75,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL2",76,0)
 ;
"RTN","IBCNEHL2",77,0)
 ; Output:
"RTN","IBCNEHL2",78,0)
 ; ERFLG,ERROR
"RTN","IBCNEHL2",79,0)
 ;
"RTN","IBCNEHL2",80,0)
 D PID^IBCNEHL4
"RTN","IBCNEHL2",81,0)
 Q
"RTN","IBCNEHL2",82,0)
 ;
"RTN","IBCNEHL2",83,0)
GT1(ERROR,IBSEG,RIEN,SUBID) ;  Process the GT1 Guarantor seg
"RTN","IBCNEHL2",84,0)
 ;
"RTN","IBCNEHL2",85,0)
 ; Input:
"RTN","IBCNEHL2",86,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL2",87,0)
 ;
"RTN","IBCNEHL2",88,0)
 ; Output:
"RTN","IBCNEHL2",89,0)
 ; ERROR,SUBID
"RTN","IBCNEHL2",90,0)
 ;
"RTN","IBCNEHL2",91,0)
 D GT1^IBCNEHL4
"RTN","IBCNEHL2",92,0)
 Q
"RTN","IBCNEHL2",93,0)
 ;
"RTN","IBCNEHL2",94,0)
IN1(ERROR,IBSEG,RIEN,SUBID) ;  Process the IN1 Insurance seg
"RTN","IBCNEHL2",95,0)
 ;
"RTN","IBCNEHL2",96,0)
 ; Input:
"RTN","IBCNEHL2",97,0)
 ; IBSEG,RIEN,SUBID,ACK
"RTN","IBCNEHL2",98,0)
 ;
"RTN","IBCNEHL2",99,0)
 ; Output:
"RTN","IBCNEHL2",100,0)
 ; ERROR
"RTN","IBCNEHL2",101,0)
 ;
"RTN","IBCNEHL2",102,0)
 N COB,EFFDT,EXPDT,GNAME,GNUMB,MBRID,PAYRID,PYRNM,RSUPDT,SRVDT
"RTN","IBCNEHL2",103,0)
 N PYLEDT,CERDT,RELTN
"RTN","IBCNEHL2",104,0)
 ;
"RTN","IBCNEHL2",105,0)
 ; Austin sending responses with an error indicator will populate IBSEG(3) w/ 
"RTN","IBCNEHL2",106,0)
 ;9 zeros in order to send the HL7 required field when the payer does not 
"RTN","IBCNEHL2",107,0)
 ;send a value for this field
"RTN","IBCNEHL2",108,0)
 S MBRID=$$DECHL7($G(IBSEG(3))) I ACK="AE",($TR(MBRID,0)="") S MBRID=""
"RTN","IBCNEHL2",109,0)
 S PAYRID=$G(IBSEG(4)),PYRNM=$G(IBSEG(5))
"RTN","IBCNEHL2",110,0)
 S GNAME=$$DECHL7($G(IBSEG(10))),GNUMB=$$DECHL7($G(IBSEG(9)))
"RTN","IBCNEHL2",111,0)
 ; make sure group number is not longer than 17 chars, send mailman notification
"RTN","IBCNEHL2",112,0)
 ; if truncation is necessary
"RTN","IBCNEHL2",113,0)
 I $L(GNUMB)>17 D TRNCWARN^IBCNEHLU(GNUMB,$G(TRACE)) S GNUMB=$E(GNUMB,1,17)
"RTN","IBCNEHL2",114,0)
 S EFFDT=$G(IBSEG(13)),EXPDT=$G(IBSEG(14))
"RTN","IBCNEHL2",115,0)
 S COB=$G(IBSEG(23)),SRVDT=$G(IBSEG(27))
"RTN","IBCNEHL2",116,0)
 S PYLEDT=$G(IBSEG(30)),RELTN=$G(IBSEG(18))
"RTN","IBCNEHL2",117,0)
 ;
"RTN","IBCNEHL2",118,0)
 ; Relationship codes sent through the HL7 msg are X12 codes
"RTN","IBCNEHL2",119,0)
 ; X12 codes from the interface that are special cases: "21"=unknown, "40"=cadaver donor
"RTN","IBCNEHL2",120,0)
 S RELTN=$S(RELTN="21":"",RELTN="40":"G8",1:RELTN)
"RTN","IBCNEHL2",121,0)
 S EFFDT=$$FMDATE^HLFNC(EFFDT),EXPDT=$$FMDATE^HLFNC(EXPDT)
"RTN","IBCNEHL2",122,0)
 S SRVDT=$$FMDATE^HLFNC(SRVDT),PYLEDT=$$FMDATE^HLFNC(PYLEDT)
"RTN","IBCNEHL2",123,0)
 ;
"RTN","IBCNEHL2",124,0)
 S RSUPDT(365,RIEN_",",1.11)=EFFDT
"RTN","IBCNEHL2",125,0)
 S RSUPDT(365,RIEN_",",1.12)=EXPDT,RSUPDT(365,RIEN_",",1.1)=SRVDT
"RTN","IBCNEHL2",126,0)
 S RSUPDT(365,RIEN_",",1.19)=PYLEDT
"RTN","IBCNEHL2",127,0)
 S RSUPDT(365,RIEN_",",1.13)=COB,RSUPDT(365,RIEN_",",1.18)=MBRID
"RTN","IBCNEHL2",128,0)
 D FILE^DIE("","RSUPDT","ERROR") Q:$D(ERROR)  ; data needs to filed as internal values
"RTN","IBCNEHL2",129,0)
 ; IB*2*497 - add the following lines
"RTN","IBCNEHL2",130,0)
 ; data at 365, 8.01,13.02,14.01, 14.02 needs to be validated before it can be filed; pass the 'E' flag to DBS filer
"RTN","IBCNEHL2",131,0)
 K RSUPDT
"RTN","IBCNEHL2",132,0)
 S RSUPDT(365,RIEN_",",8.01)=RELTN D CODECHK^IBCNEHLU(.RSUPDT)  ; IB*2*497  check for new coded values
"RTN","IBCNEHL2",133,0)
 S RSUPDT(365,RIEN_",",13.02)=$S($G(SUBID)'="":SUBID,1:MBRID)
"RTN","IBCNEHL2",134,0)
 S RSUPDT(365,RIEN_",",14.01)=GNAME
"RTN","IBCNEHL2",135,0)
 S RSUPDT(365,RIEN_",",14.02)=GNUMB
"RTN","IBCNEHL2",136,0)
 D FILE^DIE("E","RSUPDT","ERROR")
"RTN","IBCNEHL2",137,0)
IN1X ;
"RTN","IBCNEHL2",138,0)
 Q
"RTN","IBCNEHL2",139,0)
 ;
"RTN","IBCNEHL2",140,0)
IN3(ERROR,IBSEG,RIEN) ;  Process IN3 Addt'l Insurance - Cert Seg
"RTN","IBCNEHL2",141,0)
 ;
"RTN","IBCNEHL2",142,0)
 ; Input:
"RTN","IBCNEHL2",143,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL2",144,0)
 ;
"RTN","IBCNEHL2",145,0)
 ; Output:
"RTN","IBCNEHL2",146,0)
 ; ERROR
"RTN","IBCNEHL2",147,0)
 ;
"RTN","IBCNEHL2",148,0)
 N CRDT,RSUPDT
"RTN","IBCNEHL2",149,0)
 ;
"RTN","IBCNEHL2",150,0)
 S CRDT=$G(IBSEG(7))
"RTN","IBCNEHL2",151,0)
 S CRDT=$$FMDATE^HLFNC(CRDT)
"RTN","IBCNEHL2",152,0)
 S RSUPDT(365,RIEN_",",1.17)=CRDT
"RTN","IBCNEHL2",153,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHL2",154,0)
IN3X ;
"RTN","IBCNEHL2",155,0)
 Q
"RTN","IBCNEHL2",156,0)
 ;
"RTN","IBCNEHL2",157,0)
ZEB(EBDA,ERROR,IBSEG,RIEN) ;  Process the ZEB Elig/Benefit seg
"RTN","IBCNEHL2",158,0)
 ;
"RTN","IBCNEHL2",159,0)
 ; Input:
"RTN","IBCNEHL2",160,0)
 ; IBSEG,IIVSTAT,RIEN
"RTN","IBCNEHL2",161,0)
 ;
"RTN","IBCNEHL2",162,0)
 ; Output:
"RTN","IBCNEHL2",163,0)
 ; EBDA,ERROR
"RTN","IBCNEHL2",164,0)
 ;
"RTN","IBCNEHL2",165,0)
 N D1,DA,DIC,DILN,DISYS,DLAYGO,EBN,IENS,II,MSG,PRMODS,RSUPDT,STC,STCSTR,SUBJECT,X,XMY,Y,MA,CODES
"RTN","IBCNEHL2",166,0)
 ;
"RTN","IBCNEHL2",167,0)
 ; Set a default eIV Status value of # ("V")
"RTN","IBCNEHL2",168,0)
 I IIVSTAT="" D
"RTN","IBCNEHL2",169,0)
 .   I IBSEG(7)'="eIV Eligibility Determination" S IIVSTAT="V" Q
"RTN","IBCNEHL2",170,0)
 .   I $F("_1_6_V_","_"_IBSEG(3)_"_") S IIVSTAT=IBSEG(3) Q
"RTN","IBCNEHL2",171,0)
 .   ; Unknown code received from the EC
"RTN","IBCNEHL2",172,0)
 .   S SUBJECT="eIV: Invalid Eligibility Status flag"
"RTN","IBCNEHL2",173,0)
 .   S MSG(1)="An invalid Eligibility Status flag '"_$G(IBSEG(3))_"' was received for site "_$P($$SITE^VASITE,"^",3)_","
"RTN","IBCNEHL2",174,0)
 .   S MSG(2)="trace number "_$G(TRACE,"unknown")_" and message control id "_$G(MSGID,"unknown")_"."
"RTN","IBCNEHL2",175,0)
 .   S MSG(3)="It has been interpreted as an ambiguous response in VistA."
"RTN","IBCNEHL2",176,0)
 .   S XMY("FSCECADMIN@mail.domain.ext")=""
"RTN","IBCNEHL2",177,0)
 .   D MSG^IBCNEUT5("",SUBJECT,"MSG(",,.XMY)
"RTN","IBCNEHL2",178,0)
 .   S IIVSTAT="V"
"RTN","IBCNEHL2",179,0)
 ;
"RTN","IBCNEHL2",180,0)
 ; Process the ZEB
"RTN","IBCNEHL2",181,0)
 S EBN=$G(IBSEG(2))
"RTN","IBCNEHL2",182,0)
 S DA(1)=RIEN,DIC="^IBCN(365,"_DA(1)_",2,",DIC(0)="L",DLAYGO=365.02
"RTN","IBCNEHL2",183,0)
 I '$D(^IBCN(365,DA(1),2,0)) S ^IBCN(365,DA(1),2,0)="^365.02^^"
"RTN","IBCNEHL2",184,0)
 S X=EBN D ^DIC
"RTN","IBCNEHL2",185,0)
 S DA=+Y,EBDA=DA
"RTN","IBCNEHL2",186,0)
 ;
"RTN","IBCNEHL2",187,0)
 S IENS=$$IENS^DILF(.DA)
"RTN","IBCNEHL2",188,0)
 ;
"RTN","IBCNEHL2",189,0)
 ; decode plan description ZEB segment
"RTN","IBCNEHL2",190,0)
 S IBSEG(7)=$$DECHL7($G(IBSEG(7)))
"RTN","IBCNEHL2",191,0)
 S RSUPDT(365.02,IENS,".02")=$P($G(IBSEG(3)),HLCMP) ; elig/benefit info
"RTN","IBCNEHL2",192,0)
 S RSUPDT(365.02,IENS,".03")=$P($G(IBSEG(4)),HLCMP) ; coverage level
"RTN","IBCNEHL2",193,0)
 S RSUPDT(365.02,IENS,".05")=$P($G(IBSEG(6)),HLCMP) ; insurance type
"RTN","IBCNEHL2",194,0)
 S RSUPDT(365.02,IENS,".06")=$G(IBSEG(7))           ; plan coverage
"RTN","IBCNEHL2",195,0)
 S RSUPDT(365.02,IENS,".07")=$P($G(IBSEG(8)),HLCMP) ; time period qualifier
"RTN","IBCNEHL2",196,0)
 S MA=$G(IBSEG(9)) I $TR(MA," ","")'="" S MA=$J(MA,0,2)
"RTN","IBCNEHL2",197,0)
 S RSUPDT(365.02,IENS,".08")=$$NUMCHK(MA)            ; Monetary amt
"RTN","IBCNEHL2",198,0)
 S RSUPDT(365.02,IENS,".09")=$$NUMCHK($G(IBSEG(10))) ; Percent
"RTN","IBCNEHL2",199,0)
 S RSUPDT(365.02,IENS,".1")=$G(IBSEG(11))            ; Quantity Qual.
"RTN","IBCNEHL2",200,0)
 F II=11:1:13 S RSUPDT(365.02,IENS,"."_II)=$G(IBSEG(II+1))
"RTN","IBCNEHL2",201,0)
 S RSUPDT(365.02,IENS,"1.01")=$P($G(IBSEG(15)),HLCMP) ; Procedure coding method
"RTN","IBCNEHL2",202,0)
 S RSUPDT(365.02,IENS,"1.02")=$G(IBSEG(16)) ; Procedure code
"RTN","IBCNEHL2",203,0)
 ; Procedure modifiers
"RTN","IBCNEHL2",204,0)
 S PRMODS=$G(IBSEG(17)) F II=1:1:4 S RSUPDT(365.02,IENS,"1.0"_(II+2))=$TR($P(PRMODS,HLREP,II),HL("ECH"))
"RTN","IBCNEHL2",205,0)
 D CODECHK^IBCNEHLU(.RSUPDT)  ; IB*2*497  check for new coded values
"RTN","IBCNEHL2",206,0)
 D FILE^DIE("ET","RSUPDT","ERROR") I $D(ERROR) Q
"RTN","IBCNEHL2",207,0)
 ; service type codes
"RTN","IBCNEHL2",208,0)
 K RSUPDT S STCSTR=$P($G(IBSEG(5)),HLCMP)
"RTN","IBCNEHL2",209,0)
 F II=1:1 S STC=$P(STCSTR,HLREP,II) Q:STC=""  S RSUPDT(365.292,"+"_II_","_IENS,".01")=STC,CODES(365.292,II,.01)=STC  ; IB*2*497 set up CODES array
"RTN","IBCNEHL2",210,0)
 D CODECHK^IBCNEHLU(.CODES)  ;IB*2*497
"RTN","IBCNEHL2",211,0)
 I $D(RSUPDT) D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL2",212,0)
ZEBX ;
"RTN","IBCNEHL2",213,0)
 Q
"RTN","IBCNEHL2",214,0)
 ;
"RTN","IBCNEHL2",215,0)
EBNTE(EBDA,IBSEG,RIEN) ; Process NTE Benefit related entity Notes segment (in Eligibility/Benefit group)
"RTN","IBCNEHL2",216,0)
 ;
"RTN","IBCNEHL2",217,0)
 ; Input:
"RTN","IBCNEHL2",218,0)
 ; EBDA,IBSEG,RIEN
"RTN","IBCNEHL2",219,0)
 ;
"RTN","IBCNEHL2",220,0)
 ; Output:
"RTN","IBCNEHL2",221,0)
 ; ERROR
"RTN","IBCNEHL2",222,0)
 ;
"RTN","IBCNEHL2",223,0)
 N DA,IENS,NOTES
"RTN","IBCNEHL2",224,0)
 I $G(EBDA)="" G EBNTEX
"RTN","IBCNEHL2",225,0)
 S NOTES(1)=$$DECHL7($G(IBSEG(4)))
"RTN","IBCNEHL2",226,0)
 S DA(1)=RIEN,DA=EBDA
"RTN","IBCNEHL2",227,0)
 S IENS=$$IENS^DILF(.DA)
"RTN","IBCNEHL2",228,0)
 D WP^DIE(365.02,IENS,2,"A","NOTES","ERROR")
"RTN","IBCNEHL2",229,0)
EBNTEX ;
"RTN","IBCNEHL2",230,0)
 Q
"RTN","IBCNEHL2",231,0)
 ;
"RTN","IBCNEHL2",232,0)
DECHL7(STR,HLSEP,ECHARS) ; Decode HL7 escape seqs in data fields
"RTN","IBCNEHL2",233,0)
 ;
"RTN","IBCNEHL2",234,0)
 ; Input:
"RTN","IBCNEHL2",235,0)
 ; STR = Field data possible containing HL7 escape seqs for encoding chars
"RTN","IBCNEHL2",236,0)
 ; HLSEP (opt) = HL7 Field sep. char - assumes HLFS if not passed
"RTN","IBCNEHL2",237,0)
 ; ECHARS (opt) = HL7 encoding chars being used, assumes HL("ECH") if not passed
"RTN","IBCNEHL2",238,0)
 ;
"RTN","IBCNEHL2",239,0)
 ; Output Values
"RTN","IBCNEHL2",240,0)
 ; Fn returns string w/converted escape seqs
"RTN","IBCNEHL2",241,0)
 ;
"RTN","IBCNEHL2",242,0)
 N ESC,PAT,REPL,ECODE,PCE
"RTN","IBCNEHL2",243,0)
 ; Initialize opt. params.
"RTN","IBCNEHL2",244,0)
 I $G(HLSEP)="" S HLSEP=HLFS
"RTN","IBCNEHL2",245,0)
 I $G(ECHARS)="" S ECHARS=HL("ECH")
"RTN","IBCNEHL2",246,0)
 ;
"RTN","IBCNEHL2",247,0)
 S ESC=$E(ECHARS,3) ; Escape char.
"RTN","IBCNEHL2",248,0)
 ; Check for escape seqs, quit if not
"RTN","IBCNEHL2",249,0)
 I STR'[ESC G DECHL7X
"RTN","IBCNEHL2",250,0)
 ; Replace ^ w/{sp} (if any) to prevent filing problems
"RTN","IBCNEHL2",251,0)
 S ECHARS=$TR(ECHARS,"^"," ")
"RTN","IBCNEHL2",252,0)
 ;
"RTN","IBCNEHL2",253,0)
 ; Array of rep. chars
"RTN","IBCNEHL2",254,0)
 S REPL("F")=$TR(HLSEP,"^"," ") ;Field Sep
"RTN","IBCNEHL2",255,0)
 S REPL("S")=$E(ECHARS)     ;Comp Sep
"RTN","IBCNEHL2",256,0)
 S REPL("R")=$E(ECHARS,2)   ;Rep. sep
"RTN","IBCNEHL2",257,0)
 ; Temp. replace w/ASC 26, until after other ESC are stripped
"RTN","IBCNEHL2",258,0)
 S REPL("E")=$C(26)  ;Esc. sep
"RTN","IBCNEHL2",259,0)
 S REPL("T")=$E(ECHARS,4)   ;Subcomp. sep
"RTN","IBCNEHL2",260,0)
 ;
"RTN","IBCNEHL2",261,0)
 ; Translate out escape seqs left->right
"RTN","IBCNEHL2",262,0)
 F PCE=1:1:($L(STR,ESC)-1)\2 D
"RTN","IBCNEHL2",263,0)
 . ; Ignore empty esc. or unrec. esc. seq.
"RTN","IBCNEHL2",264,0)
 . S ECODE=$P(STR,ESC,2) I ECODE="" S ECODE="XXXX"
"RTN","IBCNEHL2",265,0)
 . I $D(REPL(ECODE))'>0 S STR=$P(STR,ESC)_$C(26)_$P(STR,ESC,2)_$C(26)_$P(STR,ESC,3,99999) Q
"RTN","IBCNEHL2",266,0)
 . ; Else, replace esc. seq. w/ char.
"RTN","IBCNEHL2",267,0)
 . S STR=$P(STR,ESC)_$G(REPL(ECODE))_$P(STR,ESC,3,99999)
"RTN","IBCNEHL2",268,0)
 ;
"RTN","IBCNEHL2",269,0)
 ;Replace the decoded ESC chars that were actually sent
"RTN","IBCNEHL2",270,0)
 S STR=$TR(STR,$C(26),ESC)
"RTN","IBCNEHL2",271,0)
 ;
"RTN","IBCNEHL2",272,0)
DECHL7X ; Exit w/return values
"RTN","IBCNEHL2",273,0)
 Q STR
"RTN","IBCNEHL2",274,0)
 ;
"RTN","IBCNEHL2",275,0)
NUMCHK(N) ; make sure that numeric value N is not greater than 99999
"RTN","IBCNEHL2",276,0)
 Q $S(+N>99999:99999,1:N)
"RTN","IBCNEHL3")
0^22^B168485042^B72667613
"RTN","IBCNEHL3",1,0)
IBCNEHL3 ;DAOU/ALA - HL7 Process Incoming RPI Continued ;03-JUL-2002  ; Compiled June 2, 2005 14:20:19
"RTN","IBCNEHL3",2,0)
 ;;2.0;INTEGRATED BILLING;**300,416,497**;21-MAR-94;Build 120
"RTN","IBCNEHL3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHL3",4,0)
 ;
"RTN","IBCNEHL3",5,0)
 ;**Program Description**
"RTN","IBCNEHL3",6,0)
 ;  This is a continuation of IBCNEHL1 which processes an incoming
"RTN","IBCNEHL3",7,0)
 ;  RPI IIV message.
"RTN","IBCNEHL3",8,0)
 ;  
"RTN","IBCNEHL3",9,0)
 ;  This routine is based on IBCNEHLS which was introduced with patch 184, and subsequently
"RTN","IBCNEHL3",10,0)
 ;  patched with patch 271.  IBCNEHLS is obsolete and deleted with patch 300.
"RTN","IBCNEHL3",11,0)
 ;
"RTN","IBCNEHL3",12,0)
 Q   ; no direct calls allow
"RTN","IBCNEHL3",13,0)
 ;
"RTN","IBCNEHL3",14,0)
ERROR(TQN,ERACT,ERCON,TRCN) ; Entry point
"RTN","IBCNEHL3",15,0)
 ; Input:  TQN - IEN for eIV Transmission Queue (#365.1), required
"RTN","IBCNEHL3",16,0)
 ;         ERACT - Error Action Code (#365.14), required
"RTN","IBCNEHL3",17,0)
 ;         ERCON - Error Condition Code (#365.17), required
"RTN","IBCNEHL3",18,0)
 ;         TRCN - Trace # from eIV Response (#365)
"RTN","IBCNEHL3",19,0)
 ;
"RTN","IBCNEHL3",20,0)
 ;         IIVSTAT - IIV status transmitted by EC
"RTN","IBCNEHL3",21,0)
 ;                   Note: MAP(IIVSTAT) = IIV STATUS IEN
"RTN","IBCNEHL3",22,0)
 N MSG,ERDESC,ERIEN,XMY,DA,DIE,DR
"RTN","IBCNEHL3",23,0)
 ;
"RTN","IBCNEHL3",24,0)
 I $G(TQN)="" G ERRORX
"RTN","IBCNEHL3",25,0)
 ;
"RTN","IBCNEHL3",26,0)
 ; Scenarios:
"RTN","IBCNEHL3",27,0)
 ; #1 - If error message = "Resubmission Allowed" OR "Please Resubmit
"RTN","IBCNEHL3",28,0)
 ;  Original Transaction" - set TQ
"RTN","IBCNEHL3",29,0)
 ;  Fut Trans Dt to T + Comm Failure Days and Status to "Hold"
"RTN","IBCNEHL3",30,0)
 I ERACT="R"!(ERACT="P") D  G ERRORX
"RTN","IBCNEHL3",31,0)
 . I $P($G(^IBCN(365.1,TQN,0)),U,9)="" D  Q    ; first time payer asked us to resubmit
"RTN","IBCNEHL3",32,0)
 . . ; Update IIV TQ fields: "Hold" (4), IIV Site Param Comm Failure Days
"RTN","IBCNEHL3",33,0)
 . . D UPDATE(TQN,4,+$P($G(^IBE(350.9,1,51)),U,5),ERACT)
"RTN","IBCNEHL3",34,0)
 . . ;
"RTN","IBCNEHL3",35,0)
 . ; payer asked us to resubmit for the 2nd time for this inquiry
"RTN","IBCNEHL3",36,0)
 . ; Update IIV TQ fields: "Response Received" (3), n/a ("")
"RTN","IBCNEHL3",37,0)
 . D UPDATE(TQN,3,"",ERACT,ERCON)
"RTN","IBCNEHL3",38,0)
 . ; clear future transmission date so it won't display in the buffer
"RTN","IBCNEHL3",39,0)
 . S DA=TQN,DIE="^IBCN(365.1,",DR=".09///@" D ^DIE
"RTN","IBCNEHL3",40,0)
 ;
"RTN","IBCNEHL3",41,0)
 ; #2 - If error message = "Please Wait 30 Days and Resubmit" - set TQ
"RTN","IBCNEHL3",42,0)
 ;  Fut Trans Dt to T + 30 and Status to "Hold"
"RTN","IBCNEHL3",43,0)
 I ERACT="W" D  G ERRORX
"RTN","IBCNEHL3",44,0)
 . ; Update IIV TQ fields: "Hold" (4), 30
"RTN","IBCNEHL3",45,0)
 . D UPDATE(TQN,4,30,ERACT)
"RTN","IBCNEHL3",46,0)
 ;
"RTN","IBCNEHL3",47,0)
 ; #3 - If error message = "Please Wait 10 Days and Resubmit" - set TQ
"RTN","IBCNEHL3",48,0)
 ;  Fut Trans Dt to T + 10 and Status to "Hold"
"RTN","IBCNEHL3",49,0)
 I ERACT="X" D  G ERRORX
"RTN","IBCNEHL3",50,0)
 . ; Update IIV TQ fields: "Hold" (4), 10
"RTN","IBCNEHL3",51,0)
 . D UPDATE(TQN,4,10,ERACT)
"RTN","IBCNEHL3",52,0)
 ;
"RTN","IBCNEHL3",53,0)
 ; #4 - If error message = "Resubmission Not Allowed" or
"RTN","IBCNEHL3",54,0)
 ;  "Do not resubmit ...." OR "Please correct and resubmit"
"RTN","IBCNEHL3",55,0)
 ;  - set TQ Status to "Response Received"
"RTN","IBCNEHL3",56,0)
 ; If we receive error txt, treat as an "N"
"RTN","IBCNEHL3",57,0)
 I ERACT="" S ERACT="N"
"RTN","IBCNEHL3",58,0)
 I ERACT="N"!(ERACT="Y")!(ERACT="S")!(ERACT="C") D  G ERRORX
"RTN","IBCNEHL3",59,0)
 . ; Update IIV TQ fields: "Response Received" (3), n/a ("")
"RTN","IBCNEHL3",60,0)
 . D UPDATE(TQN,3,"",ERACT,ERCON)
"RTN","IBCNEHL3",61,0)
 ;
"RTN","IBCNEHL3",62,0)
 ; #5 - Error message is unfamiliar - new Error Action Code
"RTN","IBCNEHL3",63,0)
 ; *** Currently processed in IBCNEHL1 ***
"RTN","IBCNEHL3",64,0)
 ;
"RTN","IBCNEHL3",65,0)
ERRORX ; ERROR exit pt
"RTN","IBCNEHL3",66,0)
 Q
"RTN","IBCNEHL3",67,0)
 ;
"RTN","IBCNEHL3",68,0)
UPDATE(TQN,TSTS,TDAYS,ERACT,ERCON) ;  Update Transmission Queue (#365.1)
"RTN","IBCNEHL3",69,0)
 ; Update/Create Buffer information as necessary
"RTN","IBCNEHL3",70,0)
 ; * If unsolicited error or negative Verification response do not
"RTN","IBCNEHL3",71,0)
 ; update TQ entry.  However, create a new Buffer entry.
"RTN","IBCNEHL3",72,0)
 ; Input Variables
"RTN","IBCNEHL3",73,0)
 ; ERACT,ERCON,IIVSTAT,TDAYS,TQN,TSTS
"RTN","IBCNEHL3",74,0)
 ;
"RTN","IBCNEHL3",75,0)
 ; Output Variables
"RTN","IBCNEHL3",76,0)
 ; IIVSTAT (updated)
"RTN","IBCNEHL3",77,0)
 ;
"RTN","IBCNEHL3",78,0)
 ; Init optional param
"RTN","IBCNEHL3",79,0)
 S ERCON=$G(ERCON)
"RTN","IBCNEHL3",80,0)
 ;
"RTN","IBCNEHL3",81,0)
 ; Init vars
"RTN","IBCNEHL3",82,0)
 N D,D0,DA,DFN,DI,DIC,DIE,DQ,DR,FTDT,IBDATA,IBIEN,IBQFL,IBSTS,IBSYM
"RTN","IBCNEHL3",83,0)
 N INSIEN,RSTYPE,SYMBOL,TQDATA,X
"RTN","IBCNEHL3",84,0)
 ;
"RTN","IBCNEHL3",85,0)
 ; If no ZEB segment received, set IIVSTAT to "V"
"RTN","IBCNEHL3",86,0)
 I $TR(IIVSTAT," ")="" S IIVSTAT="V"
"RTN","IBCNEHL3",87,0)
 ;
"RTN","IBCNEHL3",88,0)
 S TQDATA=$G(^IBCN(365.1,TQN,0))
"RTN","IBCNEHL3",89,0)
 I TQDATA="" G UPDATX
"RTN","IBCNEHL3",90,0)
 ;
"RTN","IBCNEHL3",91,0)
 ; Ins Buffer IEN
"RTN","IBCNEHL3",92,0)
 S IBIEN=$P(TQDATA,U,5)
"RTN","IBCNEHL3",93,0)
 S IBQFL=$P(TQDATA,U,11)
"RTN","IBCNEHL3",94,0)
 S RSTYPE=$P($G(^IBCN(365,RIEN,0)),U,10)
"RTN","IBCNEHL3",95,0)
 ;
"RTN","IBCNEHL3",96,0)
 ; If unsolicited error or negative Identification response DON'T
"RTN","IBCNEHL3",97,0)
 ; update TQ entry or Buffer (includes not creating a new buffer)
"RTN","IBCNEHL3",98,0)
 I RSTYPE="U",(IBQFL="I") G UPDATX
"RTN","IBCNEHL3",99,0)
 ;
"RTN","IBCNEHL3",100,0)
 I RSTYPE="U" S IBIEN=""  ; makes sure a new buffer is created
"RTN","IBCNEHL3",101,0)
 ;
"RTN","IBCNEHL3",102,0)
 ; Ins Buffer processing
"RTN","IBCNEHL3",103,0)
 I IBIEN'="" D
"RTN","IBCNEHL3",104,0)
 . ; Ins Buf data
"RTN","IBCNEHL3",105,0)
 . S IBDATA=$G(^IBA(355.33,+IBIEN,0))
"RTN","IBCNEHL3",106,0)
 . S IBSTS=$P(IBDATA,U,4)   ; Status
"RTN","IBCNEHL3",107,0)
 . S IBSYM=$P(IBDATA,U,12)  ; Symbol
"RTN","IBCNEHL3",108,0)
 . ; If IB status is (A)ccepted or (R)ejected or IB symbol is "*"
"RTN","IBCNEHL3",109,0)
 . ;  (verified) or IB symbol is "-" (denied), update TQ status to
"RTN","IBCNEHL3",110,0)
 . ;  Resp Rec'd (3) and DON'T update the Ins Buffer symbol
"RTN","IBCNEHL3",111,0)
 . I IBSTS="A"!(IBSTS="R")!(IBSYM=8)!(IBSYM=9) S TSTS=3 Q
"RTN","IBCNEHL3",112,0)
 . ; If TQ status is "Hold", update buffer symbol to "?" (10)
"RTN","IBCNEHL3",113,0)
 . I TSTS=4 D BUFF^IBCNEUT2(IBIEN,10) Q  ; Set buffer symbol to "?"
"RTN","IBCNEHL3",114,0)
 . ; If TQ status is "Response Received", update buffer symbol to "-" (9) for Error
"RTN","IBCNEHL3",115,0)
 . ; Action Codes ('N','Y','S') & Action Codes ('P','R', if 2nd time payer sent that code)
"RTN","IBCNEHL3",116,0)
 . I TSTS=3,(ERACT="N"!(ERACT="Y")!(ERACT="S")!(ERACT="C")!(ERACT="P")!(ERACT="R")) D  Q
"RTN","IBCNEHL3",117,0)
 .. S SYMBOL=MAP(IIVSTAT)
"RTN","IBCNEHL3",118,0)
 .. D BUFF^IBCNEUT2(IBIEN,SYMBOL) ; Set buffer symbol to EC value
"RTN","IBCNEHL3",119,0)
 .. D IIVPROC(IBIEN)   ; Set IIV process date & IIV status
"RTN","IBCNEHL3",120,0)
 . ; If TQ status is "Response Received", update buffer symbol to "!" (12 = B9) for new Error Action Code
"RTN","IBCNEHL3",121,0)
 . I TSTS=3,",W,X,R,P,C,N,Y,S,"'[(","_ERACT_",") D BUFF^IBCNEUT2(IBIEN,22) Q
"RTN","IBCNEHL3",122,0)
 ;
"RTN","IBCNEHL3",123,0)
 ; Non-Ins Buffer processing, create entry only for Verification queries
"RTN","IBCNEHL3",124,0)
 I IBIEN="",IBQFL="V" D
"RTN","IBCNEHL3",125,0)
 . ; Determine Patient DFN
"RTN","IBCNEHL3",126,0)
 . S DFN=$P(TQDATA,U,2)
"RTN","IBCNEHL3",127,0)
 . ; Determine Patient Ins record IEN
"RTN","IBCNEHL3",128,0)
 . S INSIEN=$P(TQDATA,U,13)  ; If INSIEN="" avoids TQ update
"RTN","IBCNEHL3",129,0)
 . ; If ERACT="C" symbol is passed by EC
"RTN","IBCNEHL3",130,0)
 . I ERACT="C" S SYMBOL=MAP(IIVSTAT) D BUF Q
"RTN","IBCNEHL3",131,0)
 . ;  Resubmission Not Allowed or Do Not Resubmit ...
"RTN","IBCNEHL3",132,0)
 . I ERACT="N"!(ERACT="Y")!(ERACT="S") S SYMBOL=MAP(IIVSTAT) D BUF Q
"RTN","IBCNEHL3",133,0)
 . ; An unknown error action - generate a '#'
"RTN","IBCNEHL3",134,0)
 . I ",W,X,R,P,C,N,Y,S,"'[(","_ERACT_",") S SYMBOL=22 D BUF Q
"RTN","IBCNEHL3",135,0)
 ;
"RTN","IBCNEHL3",136,0)
 I RSTYPE="U" G UPDATX  ; finished creating new buffer
"RTN","IBCNEHL3",137,0)
 ;
"RTN","IBCNEHL3",138,0)
 ; Update TQ record - Status
"RTN","IBCNEHL3",139,0)
 D SST^IBCNEUT2(TQN,TSTS)
"RTN","IBCNEHL3",140,0)
 ;
"RTN","IBCNEHL3",141,0)
 ; If TQ Status = "Hold", update TQ record - Future Transmission Date
"RTN","IBCNEHL3",142,0)
 I TSTS=4,+$G(TDAYS) D
"RTN","IBCNEHL3",143,0)
 . S FTDT=$$FMADD^XLFDT($$DT^XLFDT,TDAYS)
"RTN","IBCNEHL3",144,0)
 . S DIE="^IBCN(365.1,",DA=TQN,DR=".09///^S X=FTDT"
"RTN","IBCNEHL3",145,0)
 . D ^DIE
"RTN","IBCNEHL3",146,0)
 I TSTS=4,$P(TQDATA,U,8) D
"RTN","IBCNEHL3",147,0)
 . S DIE="^IBCN(365.1,",DA=TQN,DR=".08///0"
"RTN","IBCNEHL3",148,0)
 . D ^DIE
"RTN","IBCNEHL3",149,0)
 ;
"RTN","IBCNEHL3",150,0)
UPDATX ; UPDATE exit point
"RTN","IBCNEHL3",151,0)
 Q
"RTN","IBCNEHL3",152,0)
 ;
"RTN","IBCNEHL3",153,0)
PCK ; Payer Check
"RTN","IBCNEHL3",154,0)
 ;  Find the associated Response IEN
"RTN","IBCNEHL3",155,0)
 ;
"RTN","IBCNEHL3",156,0)
 ; Input Variables
"RTN","IBCNEHL3",157,0)
 ; MSGID
"RTN","IBCNEHL3",158,0)
 ;
"RTN","IBCNEHL3",159,0)
 ; Output Variables
"RTN","IBCNEHL3",160,0)
 ; RIEN,ERFLG
"RTN","IBCNEHL3",161,0)
 ;
"RTN","IBCNEHL3",162,0)
 N BUFF,DA,DFN,DIE,DR,IEN,IERN,IN1DATA,MDTM,QFL,PAYR,PIEN,PP
"RTN","IBCNEHL3",163,0)
 N PRDATA,PRIEN,RSIEN,X
"RTN","IBCNEHL3",164,0)
 N NOPAYER,TQIEN
"RTN","IBCNEHL3",165,0)
 ;
"RTN","IBCNEHL3",166,0)
 K ^TMP("IBCNEMID",$J)
"RTN","IBCNEHL3",167,0)
 D FIND^DIC(365,"","","P",MSGID,"","B","","","^TMP(""IBCNEMID"",$J)")
"RTN","IBCNEHL3",168,0)
 ;
"RTN","IBCNEHL3",169,0)
 S PP=0,QFL=0,(RIEN,PIEN)=""
"RTN","IBCNEHL3",170,0)
 S NOPAYER=$$FIND1^DIC(365.12,,"X","~NO PAYER"),TQIEN=$O(^IBCN(365.1,"C",MSGID,""))
"RTN","IBCNEHL3",171,0)
 F  S PP=$O(^TMP("IBCNEMID",$J,"DILIST",PP)) Q:'PP  D  Q:QFL
"RTN","IBCNEHL3",172,0)
 . S PRIEN=$P(^TMP("IBCNEMID",$J,"DILIST",PP,0),U,1)
"RTN","IBCNEHL3",173,0)
 . ;
"RTN","IBCNEHL3",174,0)
 . ;  If this is a response w/o an IN1 segment
"RTN","IBCNEHL3",175,0)
 . ;  Get payer IEN from TQ as original response shell will change for
"RTN","IBCNEHL3",176,0)
 . ;  ~NO PAYER if a payer response is received
"RTN","IBCNEHL3",177,0)
 . S IN1DATA=$$GIN1()
"RTN","IBCNEHL3",178,0)
 . I IN1DATA="",PRIEN'="",TQIEN'="" D
"RTN","IBCNEHL3",179,0)
 ..  S QFL=1,PIEN=$P(^IBCN(365.1,TQIEN,0),U,3)
"RTN","IBCNEHL3",180,0)
 . ;
"RTN","IBCNEHL3",181,0)
 . I 'PIEN D PFN(IN1DATA) I 'PIEN S QFL=1 Q
"RTN","IBCNEHL3",182,0)
 . ;
"RTN","IBCNEHL3",183,0)
 . ; If message id/payer found & Response (#365) status is NOT
"RTN","IBCNEHL3",184,0)
 . ; 'Response Received' update the existing response entry (set RIEN)
"RTN","IBCNEHL3",185,0)
 . I $P(^IBCN(365,PRIEN,0),U,3)=PIEN,($P(^IBCN(365,PRIEN,0),U,6)'=3) D  Q
"RTN","IBCNEHL3",186,0)
 .. S RIEN=PRIEN,QFL=1
"RTN","IBCNEHL3",187,0)
 ..;
"RTN","IBCNEHL3",188,0)
 ..; If message id/payer found & Response (#365) status equals
"RTN","IBCNEHL3",189,0)
 . ; 'Response Received', RIEN is still null so that this tag knows
"RTN","IBCNEHL3",190,0)
 . ; to create a new unsolicited response entry
"RTN","IBCNEHL3",191,0)
 . ; 
"RTN","IBCNEHL3",192,0)
 . ; If payer response received to ~NO PAYER, update eIV Response file
"RTN","IBCNEHL3",193,0)
 . ; w/ responding payer
"RTN","IBCNEHL3",194,0)
 . I RIEN="" S PRDATA=$G(^IBCN(365,PRIEN,0)) I $P(PRDATA,U,3)=NOPAYER,$P(PRDATA,U,6)'=3,$P(PRDATA,U,10)="O" D  Q
"RTN","IBCNEHL3",195,0)
 .. S RIEN=PRIEN,QFL=1
"RTN","IBCNEHL3",196,0)
 .. S DIE="^IBCN(365,",DA=RIEN,DR=".03///^S X=PIEN" D ^DIE
"RTN","IBCNEHL3",197,0)
 ;
"RTN","IBCNEHL3",198,0)
 ;  If message id/payer not found or unsolicited response, create new response entry
"RTN","IBCNEHL3",199,0)
 I RIEN="" D  Q:ERFLG
"RTN","IBCNEHL3",200,0)
 . I $G(PRIEN)'="" D
"RTN","IBCNEHL3",201,0)
 .. S PRDATA=$G(^IBCN(365,PRIEN,0))
"RTN","IBCNEHL3",202,0)
 .. S DFN=$P(PRDATA,U,2),IEN=$P(PRDATA,U,5),MDTM=$P(PRDATA,U,8)
"RTN","IBCNEHL3",203,0)
 . ;
"RTN","IBCNEHL3",204,0)
 . I PIEN="" D  Q:ERFLG
"RTN","IBCNEHL3",205,0)
 ..  S IN1DATA=$$GIN1()
"RTN","IBCNEHL3",206,0)
 ..  I IN1DATA]"" D PFN(IN1DATA) I 'PIEN S PIEN="",QFL=1
"RTN","IBCNEHL3",207,0)
 . S PAYR=PIEN,(RSTYPE,BUFF)=""
"RTN","IBCNEHL3",208,0)
 . D RESP^IBCNEDEQ
"RTN","IBCNEHL3",209,0)
 . S RIEN=RSIEN
"RTN","IBCNEHL3",210,0)
 ;
"RTN","IBCNEHL3",211,0)
 ; If no payer in response file, set it
"RTN","IBCNEHL3",212,0)
 I $G(PIEN)'="",$G(RIEN)'="",$P($G(^IBCN(365,PIEN,0)),U,3)="" D
"RTN","IBCNEHL3",213,0)
 . S DIE="^IBCN(365,",DA=RIEN,DR=".03///^S X=PIEN" D ^DIE
"RTN","IBCNEHL3",214,0)
 Q
"RTN","IBCNEHL3",215,0)
 ;
"RTN","IBCNEHL3",216,0)
BUF ; Create Buffer Record if Doesn't Exist
"RTN","IBCNEHL3",217,0)
 ;
"RTN","IBCNEHL3",218,0)
 ; Input Variables
"RTN","IBCNEHL3",219,0)
 ; RIEN,RSTYPE,TQN
"RTN","IBCNEHL3",220,0)
 ;
"RTN","IBCNEHL3",221,0)
 ; Output Variables
"RTN","IBCNEHL3",222,0)
 ; ERROR,SYMBOL is killed,TQIEN and IRIEN may be reset
"RTN","IBCNEHL3",223,0)
 ;
"RTN","IBCNEHL3",224,0)
 N BUFF,IBFDA,UP
"RTN","IBCNEHL3",225,0)
 I $G(RSTYPE)="U" S (TQIEN,IRIEN)=""
"RTN","IBCNEHL3",226,0)
 D RP^IBCNEBF(RIEN,1)
"RTN","IBCNEHL3",227,0)
 S BUFF=+IBFDA
"RTN","IBCNEHL3",228,0)
 S UP(365,RIEN_",",.04)=+IBFDA
"RTN","IBCNEHL3",229,0)
 I RSTYPE="O" S UP(365.1,TQN_",",.05)=+IBFDA
"RTN","IBCNEHL3",230,0)
 D FILE^DIE("I","UP","ERROR")
"RTN","IBCNEHL3",231,0)
 K SYMBOL
"RTN","IBCNEHL3",232,0)
 Q
"RTN","IBCNEHL3",233,0)
 ;
"RTN","IBCNEHL3",234,0)
IIVPROC(BUFF) ; Set IIV Processed Date to current dt/tm & IIV stat (aka SYMBOL)
"RTN","IBCNEHL3",235,0)
 ; Input Variables
"RTN","IBCNEHL3",236,0)
 ; BUFF
"RTN","IBCNEHL3",237,0)
 ;
"RTN","IBCNEHL3",238,0)
 ; Output Variables
"RTN","IBCNEHL3",239,0)
 ; SYMBOL
"RTN","IBCNEHL3",240,0)
 ;
"RTN","IBCNEHL3",241,0)
 N IDUZ,UP
"RTN","IBCNEHL3",242,0)
 S UP(355.33,BUFF_",",.15)=$$NOW^XLFDT()
"RTN","IBCNEHL3",243,0)
 ;  Set IDUZ to the specific, non-human user.
"RTN","IBCNEHL3",244,0)
 S IDUZ=$$FIND1^DIC(200,"","X","INTERFACE,IB EIV")
"RTN","IBCNEHL3",245,0)
 D FILE^DIE("I","UP","ERROR")
"RTN","IBCNEHL3",246,0)
 ; set the symbol of the buffer entry
"RTN","IBCNEHL3",247,0)
 D BUFF^IBCNEUT2(BUFF,SYMBOL)  ; reset symbol to appropriate value
"RTN","IBCNEHL3",248,0)
 Q
"RTN","IBCNEHL3",249,0)
 ;
"RTN","IBCNEHL3",250,0)
PFN(IN1DATA) ;  Find Payer from HL7 msg
"RTN","IBCNEHL3",251,0)
 ;
"RTN","IBCNEHL3",252,0)
 ; Input Variables
"RTN","IBCNEHL3",253,0)
 ; IN1DATA, TRACE
"RTN","IBCNEHL3",254,0)
 ;
"RTN","IBCNEHL3",255,0)
 ; Output Variables
"RTN","IBCNEHL3",256,0)
 ; ERFLG,ERROR,PIEN
"RTN","IBCNEHL3",257,0)
 ;
"RTN","IBCNEHL3",258,0)
 N IERN,PAYRID
"RTN","IBCNEHL3",259,0)
 S PAYRID=$$CLNSTR^IBCNEHLU($P($P(IN1DATA,HLFS,4),$E(HL("ECH"))),HL("ECH"),$E(HL("ECH")))
"RTN","IBCNEHL3",260,0)
 S PIEN=+$$FIND1^DIC(365.12,"","MX",PAYRID)
"RTN","IBCNEHL3",261,0)
 I PIEN=0 D  Q
"RTN","IBCNEHL3",262,0)
 . S ERFLG=1,IERN=$$ERRN^IBCNEUT7("ERROR(""DIERR"")")
"RTN","IBCNEHL3",263,0)
 . S ERROR("DIERR",IERN,"TEXT",1)="National Id: "_PAYRID_" not found in Payer Table"
"RTN","IBCNEHL3",264,0)
 . S ERROR("DIERR",IERN,"TEXT",2)="for Trace Number: "_TRACE
"RTN","IBCNEHL3",265,0)
 Q
"RTN","IBCNEHL3",266,0)
 ;
"RTN","IBCNEHL3",267,0)
GIN1() ;Get IN1 segment
"RTN","IBCNEHL3",268,0)
 ;
"RTN","IBCNEHL3",269,0)
 ; Input Variables
"RTN","IBCNEHL3",270,0)
 ; HCT
"RTN","IBCNEHL3",271,0)
 ;
"RTN","IBCNEHL3",272,0)
 ; Returns value of SEGMT
"RTN","IBCNEHL3",273,0)
 ;
"RTN","IBCNEHL3",274,0)
 N IPCT,SEGMT
"RTN","IBCNEHL3",275,0)
 S IPCT=HCT,SEGMT=""
"RTN","IBCNEHL3",276,0)
 F  S IPCT=$O(^TMP($J,"IBCNEHLI",IPCT)) Q:IPCT=""  D
"RTN","IBCNEHL3",277,0)
 . I $E(^TMP($J,"IBCNEHLI",IPCT,0),1,3)="IN1" S SEGMT=^TMP($J,"IBCNEHLI",IPCT,0)
"RTN","IBCNEHL3",278,0)
 Q SEGMT
"RTN","IBCNEHL3",279,0)
 ;
"RTN","IBCNEHL3",280,0)
 ; =================================================================
"RTN","IBCNEHL3",281,0)
WARN ;  Create and send a response processing error warning message
"RTN","IBCNEHL3",282,0)
 ;
"RTN","IBCNEHL3",283,0)
 ; Input Variables
"RTN","IBCNEHL3",284,0)
 ; ERROR, TRACE
"RTN","IBCNEHL3",285,0)
 ;
"RTN","IBCNEHL3",286,0)
 ; Output Variables
"RTN","IBCNEHL3",287,0)
 ; ERFLG=1
"RTN","IBCNEHL3",288,0)
 ;
"RTN","IBCNEHL3",289,0)
 N MCT,MSG,SUBCNT,VEN,XMY
"RTN","IBCNEHL3",290,0)
 S VEN=0,MCT=9,ERFLG=1,SUBCNT=""
"RTN","IBCNEHL3",291,0)
 S MSG(1)="IMPORTANT: Error While Processing Response Message from the EC"
"RTN","IBCNEHL3",292,0)
 S MSG(2)="-------------------------------------------------------------"
"RTN","IBCNEHL3",293,0)
 S MSG(3)="*** IRM *** Please contact Help Desk because the"
"RTN","IBCNEHL3",294,0)
 S MSG(4)="response message received from the Eligibility Communicator"
"RTN","IBCNEHL3",295,0)
 S MSG(5)="could not be processed.  Programming changes may be necessary"
"RTN","IBCNEHL3",296,0)
 S MSG(6)="to properly handle the response."
"RTN","IBCNEHL3",297,0)
 S MSG(7)="The associated Trace # is "_$S($G(TRACE)="":"Unknown",1:TRACE)_". If applicable,"
"RTN","IBCNEHL3",298,0)
 S MSG(8)="please review the response with the eIV Response Report by Trace#."
"RTN","IBCNEHL3",299,0)
 S MSG(9)=" "
"RTN","IBCNEHL3",300,0)
 F  S VEN=$O(ERROR("DIERR",VEN)) Q:'VEN  D
"RTN","IBCNEHL3",301,0)
 .S MCT=MCT+1,MSG(MCT)="Error:"
"RTN","IBCNEHL3",302,0)
 .F  S SUBCNT=$O(ERROR("DIERR",VEN,"TEXT",SUBCNT)) Q:'SUBCNT  S MCT=MCT+1,MSG(MCT)=ERROR("DIERR",VEN,"TEXT",SUBCNT)
"RTN","IBCNEHL3",303,0)
 .S MCT=MCT+1,MSG(MCT)=" "
"RTN","IBCNEHL3",304,0)
 .I $G(ERROR("DIERR",VEN,"PARAM","FILE"))'="" S MCT=MCT+1,MSG(MCT)="File: "_ERROR("DIERR",VEN,"PARAM","FILE")
"RTN","IBCNEHL3",305,0)
 .I $G(ERROR("DIERR",VEN,"PARAM","IENS"))'="" S MCT=MCT+1,MSG(MCT)="IENS: "_ERROR("DIERR",VEN,"PARAM","IENS")
"RTN","IBCNEHL3",306,0)
 .I $G(ERROR("DIERR",VEN,"PARAM","FIELD"))'="" S MCT=MCT+1,MSG(MCT)="Field: "_ERROR("DIERR",VEN,"PARAM","FIELD")
"RTN","IBCNEHL3",307,0)
 .S MCT=MCT+1,MSG(MCT)=" "
"RTN","IBCNEHL3",308,0)
 .Q
"RTN","IBCNEHL3",309,0)
 D MSG^IBCNEUT5(MGRP,MSG(1),"MSG(",,.XMY)
"RTN","IBCNEHL3",310,0)
 Q
"RTN","IBCNEHL3",311,0)
 ;
"RTN","IBCNEHL3",312,0)
 ; =================================================================
"RTN","IBCNEHL3",313,0)
UEACT ; Send warning msg if Unknown Error Action Code was received or
"RTN","IBCNEHL3",314,0)
 ; encountered problem filing date
"RTN","IBCNEHL3",315,0)
 ;
"RTN","IBCNEHL3",316,0)
 ; Input Variables
"RTN","IBCNEHL3",317,0)
 ; ERROR, IBIEN, IBQFL, RIEN, RSTYPE, TQDATA, TRACE
"RTN","IBCNEHL3",318,0)
 ;
"RTN","IBCNEHL3",319,0)
 ; Output Variables
"RTN","IBCNEHL3",320,0)
 ; ERFLG=1 (SET IN WARN TAG)
"RTN","IBCNEHL3",321,0)
 ;
"RTN","IBCNEHL3",322,0)
 N DFN,SYMBOL
"RTN","IBCNEHL3",323,0)
 D WARN  ; send warning msg
"RTN","IBCNEHL3",324,0)
 ;
"RTN","IBCNEHL3",325,0)
 ; If the response could not be created or there is no associated TQ entry, stop processing
"RTN","IBCNEHL3",326,0)
 I '$G(RIEN)!(TQDATA="") Q
"RTN","IBCNEHL3",327,0)
 ;
"RTN","IBCNEHL3",328,0)
 ;  For an original response, set the Transmission Queue Status to 'Response Received' &
"RTN","IBCNEHL3",329,0)
 ;  update remaining retries to comm failure (5)
"RTN","IBCNEHL3",330,0)
 I $G(RSTYPE)="O" D SST^IBCNEUT2(TQN,3),RSTA^IBCNEUT7(TQN)
"RTN","IBCNEHL3",331,0)
 ;
"RTN","IBCNEHL3",332,0)
 ; If it is an identification and policy is not active don't
"RTN","IBCNEHL3",333,0)
 ; create buffer entry
"RTN","IBCNEHL3",334,0)
 I IBQFL="I",IIVSTAT'=1 Q
"RTN","IBCNEHL3",335,0)
 ;
"RTN","IBCNEHL3",336,0)
 ; If unsolicited message or no buffer in TQ, create new buffer entry
"RTN","IBCNEHL3",337,0)
 I RSTYPE="U" S IBIEN=""
"RTN","IBCNEHL3",338,0)
 I IBIEN="" D  Q
"RTN","IBCNEHL3",339,0)
 .  S DFN=$P(TQDATA,U,2)        ; Determine Patient DFN
"RTN","IBCNEHL3",340,0)
 .  S SYMBOL=22 D BUF^IBCNEHL3  ; Create a new buffer entry
"RTN","IBCNEHL3",341,0)
 ;
"RTN","IBCNEHL3",342,0)
 ;Update buffer symbol
"RTN","IBCNEHL3",343,0)
 D BUFF^IBCNEUT2(IBIEN,22)
"RTN","IBCNEHL3",344,0)
 ;
"RTN","IBCNEHL3",345,0)
 Q
"RTN","IBCNEHL3",346,0)
 ;
"RTN","IBCNEHL3",347,0)
CHK1() ; check auto-update criteria for patient who is the subscriber
"RTN","IBCNEHL3",348,0)
 ; called from tag AUTOUPD, uses variables defined there
"RTN","IBCNEHL3",349,0)
 ;
"RTN","IBCNEHL3",350,0)
 ; returns 1 if given policy satisfies auto-update criteria, returns 0 otherwise
"RTN","IBCNEHL3",351,0)
 N RES
"RTN","IBCNEHL3",352,0)
 S RES=0
"RTN","IBCNEHL3",353,0)
 I $P(RDATA13,U,2)'=$P(IDATA7,U,2) G CHK1X  ; Subscriber ID doesn't match   ; IB*2.0*497 compare subscriber ID data at their new locations
"RTN","IBCNEHL3",354,0)
 I $P(RDATA1,U,2)'=$P(IDATA3,U) G CHK1X  ; DOB doesn't match
"RTN","IBCNEHL3",355,0)
 I '$$NAMECMP^IBCNEHLU($P(RDATA13,U),$P(IDATA7,U)) G CHK1X  ; Insured's name doesn't match  ; IB*2.0*497 compare name of insured data at their new locations
"RTN","IBCNEHL3",356,0)
 S RES=1
"RTN","IBCNEHL3",357,0)
CHK1X ;
"RTN","IBCNEHL3",358,0)
 Q RES
"RTN","IBCNEHL3",359,0)
 ;
"RTN","IBCNEHL3",360,0)
CHK2(MWNRTYP) ; check auto-update criteria for patient who is not the subscriber
"RTN","IBCNEHL3",361,0)
 ; called from tag AUTOUPD, uses variables defined there
"RTN","IBCNEHL3",362,0)
 ;
"RTN","IBCNEHL3",363,0)
 ; returns 1 if policy satisfies auto-update criteria, returns 0 otherwise
"RTN","IBCNEHL3",364,0)
 N DOB,ID,IDATA5,IENS,NAME,PDOB,PNAME,RES
"RTN","IBCNEHL3",365,0)
 S RES=0
"RTN","IBCNEHL3",366,0)
 S IDATA5=$G(^DPT(IEN2,.312,IEN312,5))
"RTN","IBCNEHL3",367,0)
 S IENS=IEN2_","
"RTN","IBCNEHL3",368,0)
 S ID=$P(RDATA13,U,2)    ; IB*2.0*497 Subscriber ID needs to be retrieved from its new location
"RTN","IBCNEHL3",369,0)
 I ID'=$P(IDATA7,U,2),ID'=$P(IDATA5,U) G CHK2X  ; both Subscriber ID and Patient ID don't match ; IB*2.0*497 compare subscriber ID at new locations
"RTN","IBCNEHL3",370,0)
 S DOB=$P(RDATA1,U,2),PDOB=$$GET1^DIQ(2,IENS,.03,"I")
"RTN","IBCNEHL3",371,0)
 I DOB'=$P(IDATA3,U),DOB'=PDOB G CHK2X  ; both Subscriber and Patient DOB don't match
"RTN","IBCNEHL3",372,0)
 S NAME=$P(RDATA13,U),PNAME=$$GET1^DIQ(2,IENS,.01)   ; IB*2.0*497 get name of insured at its new location
"RTN","IBCNEHL3",373,0)
 I '+MWNRTYP,'$$NAMECMP^IBCNEHLU(NAME,$P(IDATA7,U)),'$$NAMECMP^IBCNEHLU(NAME,PNAME) G CHK2X  ; non-Medicare, both Subscriber and Patient name don't match ; IB*2*497
"RTN","IBCNEHL3",374,0)
 I +MWNRTYP,'$$NAMECMP^IBCNEHLU(NAME,PNAME) G CHK2X  ; Medicare, Patient name doesn't match
"RTN","IBCNEHL3",375,0)
 S RES=1
"RTN","IBCNEHL3",376,0)
CHK2X ;
"RTN","IBCNEHL3",377,0)
 Q RES
"RTN","IBCNEHL3",378,0)
 ;
"RTN","IBCNEHL3",379,0)
UPDIREC(RIEN,IEN312) ; update insurance record field in transmission queue (365.1/.13)
"RTN","IBCNEHL3",380,0)
 ; RIEN - ien in eIV Response file (365)
"RTN","IBCNEHL3",381,0)
 ; IEN312 - ien in pat. insurance multiple (2.312)
"RTN","IBCNEHL3",382,0)
 ;
"RTN","IBCNEHL3",383,0)
 N DATA,ERROR,IENS
"RTN","IBCNEHL3",384,0)
 I RIEN'>0!(IEN312'>0) Q
"RTN","IBCNEHL3",385,0)
 S IENS=$P($G(^IBCN(365,RIEN,0)),U,5)_"," I IENS="," Q
"RTN","IBCNEHL3",386,0)
 S DATA(365.1,IENS,.13)=IEN312
"RTN","IBCNEHL3",387,0)
 D FILE^DIE("ET","DATA","ERROR")
"RTN","IBCNEHL3",388,0)
 Q
"RTN","IBCNEHL3",389,0)
 ;
"RTN","IBCNEHL3",390,0)
LCKERR ; send locking error message
"RTN","IBCNEHL3",391,0)
 N MSG,XMY
"RTN","IBCNEHL3",392,0)
 S MSG(1)="WARNING: Unable to Auto-file Response Message from the EC"
"RTN","IBCNEHL3",393,0)
 S MSG(2)="---------------------------------------------------------"
"RTN","IBCNEHL3",394,0)
 S MSG(3)="Failed to lock patient insurance entry:"
"RTN","IBCNEHL3",395,0)
 S MSG(4)="  Patient name - "_$$GET1^DIQ(2,DFN_",",.01)
"RTN","IBCNEHL3",396,0)
 S MSG(5)="  Insurance - "_$$GET1^DIQ(2.312,IENS,.01)
"RTN","IBCNEHL3",397,0)
 S MSG(6)="  IENS - "_$S($G(IENS)="":"Unknown",1:IENS)
"RTN","IBCNEHL3",398,0)
 S MSG(7)=" "
"RTN","IBCNEHL3",399,0)
 S MSG(8)="The response will be filed into Insurance Buffer instead."
"RTN","IBCNEHL3",400,0)
 S MSG(9)=" "
"RTN","IBCNEHL3",401,0)
 D MSG^IBCNEUT5(MGRP,MSG(1),"MSG(",,.XMY)
"RTN","IBCNEHL3",402,0)
 Q
"RTN","IBCNEHL4")
0^5^B174356077^B136544352
"RTN","IBCNEHL4",1,0)
IBCNEHL4 ;DAOU/ALA - HL7 Process Incoming RPI Msgs (cont.) ;26-JUN-2002  ; Compiled December 16, 2004 15:35:46
"RTN","IBCNEHL4",2,0)
 ;;2.0;INTEGRATED BILLING;**300,416,438,497**;21-MAR-94;Build 120
"RTN","IBCNEHL4",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHL4",4,0)
 ;
"RTN","IBCNEHL4",5,0)
 ;**Program Description**
"RTN","IBCNEHL4",6,0)
 ;  This pgm will process the non-repeating segments of the
"RTN","IBCNEHL4",7,0)
 ;  incoming eIV response msgs.
"RTN","IBCNEHL4",8,0)
 ;  It was separated out from IBCNEHL2 to conserve space.
"RTN","IBCNEHL4",9,0)
 ;  
"RTN","IBCNEHL4",10,0)
 ;  This routine is based on IBCNEHLP which was introduced with patch 184, and subsequently
"RTN","IBCNEHL4",11,0)
 ;  patched with patches 252 and 271.  IBCNEHLP is obsolete and deleted with patch 300.
"RTN","IBCNEHL4",12,0)
 ;
"RTN","IBCNEHL4",13,0)
 ; * Each of these tags are called by IBCNEHL2.
"RTN","IBCNEHL4",14,0)
 ;
"RTN","IBCNEHL4",15,0)
 ;  Variables
"RTN","IBCNEHL4",16,0)
 ;    SEG = HL7 Seg Name
"RTN","IBCNEHL4",17,0)
 ;    MSGID = Original Msg Control ID
"RTN","IBCNEHL4",18,0)
 ;    ACK =  Acknowledgment (AA=Accepted, AE=Error)
"RTN","IBCNEHL4",19,0)
 ;    ERTXT = Error Msg Text
"RTN","IBCNEHL4",20,0)
 ;    ERFLG = Error quit flag
"RTN","IBCNEHL4",21,0)
 ;    ERACT = Error Action
"RTN","IBCNEHL4",22,0)
 ;    ERCON = Error Condition
"RTN","IBCNEHL4",23,0)
 ;    RIEN = Response Record IEN
"RTN","IBCNEHL4",24,0)
 ;    IBSEG = Array of the segment
"RTN","IBCNEHL4",25,0)
 ;
"RTN","IBCNEHL4",26,0)
 Q  ; No direct calls
"RTN","IBCNEHL4",27,0)
 ;
"RTN","IBCNEHL4",28,0)
MSA ;  Process the MSA seg
"RTN","IBCNEHL4",29,0)
 ;
"RTN","IBCNEHL4",30,0)
 ;  Input:
"RTN","IBCNEHL4",31,0)
 ;  IBSEG,MGRP
"RTN","IBCNEHL4",32,0)
 ;
"RTN","IBCNEHL4",33,0)
 ;  Output:
"RTN","IBCNEHL4",34,0)
 ;  ERACT,ERCON,ERROR,ERTXT,RIEN,TRACE,ACK
"RTN","IBCNEHL4",35,0)
 ;
"RTN","IBCNEHL4",36,0)
 N MSGID,RSUPDT,VRFDT
"RTN","IBCNEHL4",37,0)
 S ACK=$G(IBSEG(2)),MSGID=$G(IBSEG(3)),TRACE=$G(IBSEG(4))
"RTN","IBCNEHL4",38,0)
 S ERTXT=$$DECHL7^IBCNEHL2($P($G(IBSEG(7)),$E(HLECH),2)),ERACT=$G(IBSEG(6)),ERCON=$P($G(IBSEG(7)),$E(HLECH),1)
"RTN","IBCNEHL4",39,0)
 ;
"RTN","IBCNEHL4",40,0)
 ; If no Control Id, send Mailman error msg
"RTN","IBCNEHL4",41,0)
 I MSGID="" D ERRMSA(TRACE,MGRP) S ERFLG=1 G MSAX
"RTN","IBCNEHL4",42,0)
 ;
"RTN","IBCNEHL4",43,0)
 ; Check for msg id/payer combination and get response IEN
"RTN","IBCNEHL4",44,0)
 D PCK^IBCNEHL3
"RTN","IBCNEHL4",45,0)
 ;
"RTN","IBCNEHL4",46,0)
 ; If no record IEN, quit
"RTN","IBCNEHL4",47,0)
 I $G(RIEN)="" G MSAX
"RTN","IBCNEHL4",48,0)
 ;
"RTN","IBCNEHL4",49,0)
 ; Update record w/info
"RTN","IBCNEHL4",50,0)
 S RSUPDT(365,RIEN_",",.09)=TRACE,RSUPDT(365,RIEN_",",.06)=3
"RTN","IBCNEHL4",51,0)
 S RSUPDT(365,RIEN_",",4.01)=ERTXT
"RTN","IBCNEHL4",52,0)
 S VRFDT=$$NOW^XLFDT(),RSUPDT(365,RIEN_",",.07)=VRFDT
"RTN","IBCNEHL4",53,0)
 ;
"RTN","IBCNEHL4",54,0)
 ; Update w/internal values
"RTN","IBCNEHL4",55,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHL4",56,0)
 ;
"RTN","IBCNEHL4",57,0)
 S RSUPDT(365,RIEN_",",1.14)=ERCON,RSUPDT(365,RIEN_",",1.15)=ERACT
"RTN","IBCNEHL4",58,0)
 ;
"RTN","IBCNEHL4",59,0)
 ; Update w/external values
"RTN","IBCNEHL4",60,0)
 D FILE^DIE("ET","RSUPDT","ERROR")
"RTN","IBCNEHL4",61,0)
MSAX ;
"RTN","IBCNEHL4",62,0)
 Q
"RTN","IBCNEHL4",63,0)
 ;
"RTN","IBCNEHL4",64,0)
ERRMSA(TRACE,MGRP) ; Msg Control Id is blank -  Send Mailman error msg
"RTN","IBCNEHL4",65,0)
 ;
"RTN","IBCNEHL4",66,0)
 N HCT,ICN,MSG,MSGCT,NAME,XMSUB
"RTN","IBCNEHL4",67,0)
 ;
"RTN","IBCNEHL4",68,0)
 ;1st find the PID seg to extract ICN and patient name
"RTN","IBCNEHL4",69,0)
 D GTICNM^IBCNEHLU(.ICN,.NAME)
"RTN","IBCNEHL4",70,0)
 ;
"RTN","IBCNEHL4",71,0)
 ;Send the Mailman error msg
"RTN","IBCNEHL4",72,0)
 S XMSUB="Message Control Id Field is Blank",MSGCT=$S(TRACE="":4,1:3)
"RTN","IBCNEHL4",73,0)
 S MSG(1)="A response was received w/a blank Message Control Id"
"RTN","IBCNEHL4",74,0)
 I TRACE="" S MSG(1)=MSG(1)_" and Trace #"
"RTN","IBCNEHL4",75,0)
 S MSG(2)="for "_$S(TRACE'="":"Trace #: "_TRACE_", ",1:"")_"ICN #: "_ICN_", Patient: "_NAME_"."
"RTN","IBCNEHL4",76,0)
 I TRACE="" D
"RTN","IBCNEHL4",77,0)
 . S MSG(3)="It is likely that there are communication issues with the EC."
"RTN","IBCNEHL4",78,0)
 S MSG(MSGCT)="This response cannot be processed.  Please contact the Help Desk."
"RTN","IBCNEHL4",79,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHL4",80,0)
 Q
"RTN","IBCNEHL4",81,0)
 ;
"RTN","IBCNEHL4",82,0)
PID ;  Process the PID seg
"RTN","IBCNEHL4",83,0)
 N DFN,DOB,DOD,FLD,ICN,IENSTR,LFAC,LUPDT,NAME,RSUPDT,SEX,SSN,STATE,XDFN,IDLIST
"RTN","IBCNEHL4",84,0)
 N SUBCNT,SUBC,SUBCID,SUBCDATA,IERN
"RTN","IBCNEHL4",85,0)
 ;
"RTN","IBCNEHL4",86,0)
 S ERFLG=0
"RTN","IBCNEHL4",87,0)
 S DOB=$G(IBSEG(8)),SEX=$G(IBSEG(9))
"RTN","IBCNEHL4",88,0)
 S NAME=$G(IBSEG(6))
"RTN","IBCNEHL4",89,0)
 S DOD=$G(IBSEG(30)),LUPDT=$G(IBSEG(34)),LFAC=$G(IBSEG(35))
"RTN","IBCNEHL4",90,0)
 ;
"RTN","IBCNEHL4",91,0)
 ; Parse Repeating ID field to fill in other identifiers
"RTN","IBCNEHL4",92,0)
 S (ICN,SSN,DFN)=""
"RTN","IBCNEHL4",93,0)
 S IDLIST=$G(IBSEG(4))
"RTN","IBCNEHL4",94,0)
 F SUBCNT=1:1:$L(IDLIST,$E(HLECH,2,2)) D
"RTN","IBCNEHL4",95,0)
 . S SUBC=$P(IDLIST,$E(HLECH,2,2),SUBCNT)
"RTN","IBCNEHL4",96,0)
 . S SUBCID=$P(SUBC,$E(HLECH),5)    ; Identifier Type Code
"RTN","IBCNEHL4",97,0)
 . S SUBCDATA=$P(SUBC,$E(HLECH),1) ; Data Value
"RTN","IBCNEHL4",98,0)
 . I SUBCID="PI" S DFN=SUBCDATA
"RTN","IBCNEHL4",99,0)
 . I SUBCID="SS" S SSN=SUBCDATA
"RTN","IBCNEHL4",100,0)
 . I SUBCID="NI" S ICN=SUBCDATA
"RTN","IBCNEHL4",101,0)
 ;
"RTN","IBCNEHL4",102,0)
 ;  Convert data from HL7 format to VistA format
"RTN","IBCNEHL4",103,0)
 S NAME=$$DECHL7^IBCNEHL2($$FMNAME^HLFNC(NAME,HLECH))
"RTN","IBCNEHL4",104,0)
 S DOD=$$FMDATE^HLFNC(DOD),DOB=$$FMDATE^HLFNC(DOB),LUPDT=$$FMDATE^HLFNC(LUPDT)
"RTN","IBCNEHL4",105,0)
 ;
"RTN","IBCNEHL4",106,0)
 ; Use ICN to find the patients DFN at this site
"RTN","IBCNEHL4",107,0)
 I ICN'="" D
"RTN","IBCNEHL4",108,0)
 .S XDFN=$$GETDFN^MPIF001(ICN)
"RTN","IBCNEHL4",109,0)
 .; if unsuccessful, wait 5 sec and try one more time
"RTN","IBCNEHL4",110,0)
 .I +$G(XDFN)'>0 H 5 S XDFN=$$GETDFN^MPIF001(ICN)
"RTN","IBCNEHL4",111,0)
 .Q
"RTN","IBCNEHL4",112,0)
 I +$G(XDFN)'>0,+$G(ICN)>0 D  Q
"RTN","IBCNEHL4",113,0)
 . S ERFLG=1,IERN=$$ERRN^IBCNEUT7("ERROR(""DIERR"")")
"RTN","IBCNEHL4",114,0)
 . S ERROR("DIERR",IERN,"TEXT",1)="Unable to determine the patient's DFN value for this site."
"RTN","IBCNEHL4",115,0)
 . S ERROR("DIERR",IERN,"TEXT",2)=" The ICN for the patient in this response is ICN: "_ICN
"RTN","IBCNEHL4",116,0)
 . S ERROR("DIERR",IERN,"TEXT",3)=" eIV was unable to file the response information."
"RTN","IBCNEHL4",117,0)
 ;
"RTN","IBCNEHL4",118,0)
 I +ICN>0 S DFN=XDFN
"RTN","IBCNEHL4",119,0)
 ;
"RTN","IBCNEHL4",120,0)
 ;  Perform date of death check
"RTN","IBCNEHL4",121,0)
 I DOD'="" D DODCK^IBCNEHLU(DFN,DOD,MGRP,NAME,RIEN,SSN)
"RTN","IBCNEHL4",122,0)
 ;
"RTN","IBCNEHL4",123,0)
 S IENSTR=RIEN_","
"RTN","IBCNEHL4",124,0)
 I $P(^IBCN(365,RIEN,0),U,2)="" S RSUPDT(365,IENSTR,.02)=DFN
"RTN","IBCNEHL4",125,0)
 S RSUPDT(365,IENSTR,1.02)=DOB,RSUPDT(365,IENSTR,1.04)=SEX
"RTN","IBCNEHL4",126,0)
 S RSUPDT(365,IENSTR,1.03)=SSN,RSUPDT(365,IENSTR,1.16)=DOD
"RTN","IBCNEHL4",127,0)
 S RSUPDT(365,IENSTR,1.08)="v"
"RTN","IBCNEHL4",128,0)
 S RSUPDT(365,IENSTR,1.09)="01"
"RTN","IBCNEHL4",129,0)
 ; Subscriber address
"RTN","IBCNEHL4",130,0)
 S FLD=$G(IBSEG(12))
"RTN","IBCNEHL4",131,0)
 S RSUPDT(365,IENSTR,5.01)=$P($P(FLD,HLCMP),HLSCMP) ; line 1
"RTN","IBCNEHL4",132,0)
 S RSUPDT(365,IENSTR,5.02)=$P(FLD,HLCMP,2) ; line 2
"RTN","IBCNEHL4",133,0)
 S RSUPDT(365,IENSTR,5.03)=$P(FLD,HLCMP,3) ; city
"RTN","IBCNEHL4",134,0)
 S STATE=+$$FIND1^DIC(5,,"X",$P(FLD,HLCMP,4),"C") I STATE>0 S RSUPDT(365,IENSTR,5.04)=STATE ; state
"RTN","IBCNEHL4",135,0)
 S RSUPDT(365,IENSTR,5.05)=$P(FLD,HLCMP,5) ; zip
"RTN","IBCNEHL4",136,0)
 S RSUPDT(365,IENSTR,5.06)=$P(FLD,HLCMP,6) ; country
"RTN","IBCNEHL4",137,0)
 S RSUPDT(365,IENSTR,5.07)=$P(FLD,HLCMP,8) ; country subdivision
"RTN","IBCNEHL4",138,0)
 D FILE^DIE("I","RSUPDT","ERROR") Q:$D(ERROR)
"RTN","IBCNEHL4",139,0)
 ; IB*2*497 - add the following lines 
"RTN","IBCNEHL4",140,0)
 ; the value at NAME OF INSURED (365,13.01) must be validated before it can be filed; pass the 'E' flag to DBS filer
"RTN","IBCNEHL4",141,0)
 K RSUPDT
"RTN","IBCNEHL4",142,0)
 S RSUPDT(365,IENSTR,13.01)=NAME
"RTN","IBCNEHL4",143,0)
 D FILE^DIE("E","RSUPDT","ERROR")
"RTN","IBCNEHL4",144,0)
PIDX ;
"RTN","IBCNEHL4",145,0)
 Q
"RTN","IBCNEHL4",146,0)
 ;
"RTN","IBCNEHL4",147,0)
GT1 ;  Process the GT1 Guarantor seg
"RTN","IBCNEHL4",148,0)
 ;
"RTN","IBCNEHL4",149,0)
 ; Input:
"RTN","IBCNEHL4",150,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL4",151,0)
 ;
"RTN","IBCNEHL4",152,0)
 ; Output:
"RTN","IBCNEHL4",153,0)
 ; ERROR,SUBID
"RTN","IBCNEHL4",154,0)
 ;
"RTN","IBCNEHL4",155,0)
 N DOB,IENSTR,NAME,RSUPDT,SEX,SSN,SUBIDC
"RTN","IBCNEHL4",156,0)
 S NAME=$G(IBSEG(4)),DOB=$G(IBSEG(9)),SEX=$G(IBSEG(10))
"RTN","IBCNEHL4",157,0)
 S SSN=$G(IBSEG(13)) ; fsc NO LONGER SENDS SSN
"RTN","IBCNEHL4",158,0)
 ; 
"RTN","IBCNEHL4",159,0)
 S SUBIDC=$G(IBSEG(3))  ; Raw field with sub-comp.
"RTN","IBCNEHL4",160,0)
 S SUBID=$P(SUBIDC,$E(HLECH),1)
"RTN","IBCNEHL4",161,0)
 S SUBID=$$DECHL7^IBCNEHL2(SUBID)
"RTN","IBCNEHL4",162,0)
 ;
"RTN","IBCNEHL4",163,0)
 S DOB=$$FMDATE^HLFNC(DOB),NAME=$$DECHL7^IBCNEHL2($$FMNAME^HLFNC(NAME,HLECH))
"RTN","IBCNEHL4",164,0)
 ;
"RTN","IBCNEHL4",165,0)
 S IENSTR=RIEN_","
"RTN","IBCNEHL4",166,0)
 S RSUPDT(365,RIEN_",",1.08)=""
"RTN","IBCNEHL4",167,0)
 S:DOB'="" RSUPDT(365,IENSTR,1.02)=DOB
"RTN","IBCNEHL4",168,0)
 S RSUPDT(365,RIEN_",",1.04)=SEX
"RTN","IBCNEHL4",169,0)
 S RSUPDT(365,IENSTR,1.03)=SSN
"RTN","IBCNEHL4",170,0)
 S RSUPDT(365,IENSTR,1.18)=SUBID
"RTN","IBCNEHL4",171,0)
 ; Subscriber address
"RTN","IBCNEHL4",172,0)
 S FLD=$G(IBSEG(6))
"RTN","IBCNEHL4",173,0)
 S RSUPDT(365,IENSTR,5.01)=$P($P(FLD,HLCMP),HLSCMP) ; line 1
"RTN","IBCNEHL4",174,0)
 S RSUPDT(365,IENSTR,5.02)=$P(FLD,HLCMP,2) ; line 2
"RTN","IBCNEHL4",175,0)
 S RSUPDT(365,IENSTR,5.03)=$P(FLD,HLCMP,3) ; city
"RTN","IBCNEHL4",176,0)
 S STATE=+$$FIND1^DIC(5,,"X",$P(FLD,HLCMP,4),"C") I STATE>0 S RSUPDT(365,IENSTR,5.04)=STATE ; state
"RTN","IBCNEHL4",177,0)
 S RSUPDT(365,IENSTR,5.05)=$P(FLD,HLCMP,5) ; zip
"RTN","IBCNEHL4",178,0)
 S RSUPDT(365,IENSTR,5.06)=$P(FLD,HLCMP,6) ; country
"RTN","IBCNEHL4",179,0)
 S RSUPDT(365,IENSTR,5.07)=$P(FLD,HLCMP,8) ; country subdivision
"RTN","IBCNEHL4",180,0)
 D FILE^DIE("I","RSUPDT","ERROR") Q:$D(ERROR)
"RTN","IBCNEHL4",181,0)
 ; IB*2*497 - add the following lines 
"RTN","IBCNEHL4",182,0)
 ; the value at NAME OF INSURED (365,13.01) must be validated before it can be filed; pass the 'E' flag to DBS filer
"RTN","IBCNEHL4",183,0)
 K RSUPDT
"RTN","IBCNEHL4",184,0)
 S RSUPDT(365,IENSTR,13.01)=NAME
"RTN","IBCNEHL4",185,0)
 D FILE^DIE("E","RSUPDT","ERROR")
"RTN","IBCNEHL4",186,0)
GT1X ;
"RTN","IBCNEHL4",187,0)
 Q
"RTN","IBCNEHL4",188,0)
 ;
"RTN","IBCNEHL4",189,0)
ZHS(EBDA,ERROR,IBSEG,RIEN) ; Process ZHS Healthcare services delivery segment
"RTN","IBCNEHL4",190,0)
 N IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",191,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",192,0)
 S IENSTR="+1,"_EBDA_","_RIEN_","
"RTN","IBCNEHL4",193,0)
 S RSUPDT(365.27,IENSTR,.01)=+$O(^IBCN(365,RIEN,2,EBDA,7,"B",""),-1)+1 ; ZHS sequence
"RTN","IBCNEHL4",194,0)
 ; Benefit quantity & qualifier
"RTN","IBCNEHL4",195,0)
 S QUAL=$P($G(IBSEG(3)),HLCMP),VALUE=$G(IBSEG(4))
"RTN","IBCNEHL4",196,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.27,IENSTR,.02)=$$NUMCHK^IBCNEHL2(VALUE),RSUPDT(365.27,IENSTR,.03)=QUAL
"RTN","IBCNEHL4",197,0)
 ; Sampling frequency & qualifier
"RTN","IBCNEHL4",198,0)
 S QUAL=$P($G(IBSEG(5)),HLCMP),VALUE=$G(IBSEG(6))
"RTN","IBCNEHL4",199,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.27,IENSTR,.04)=VALUE,RSUPDT(365.27,IENSTR,.05)=QUAL
"RTN","IBCNEHL4",200,0)
 ; Time period & qualifier
"RTN","IBCNEHL4",201,0)
 S QUAL=$P($G(IBSEG(7)),HLCMP),VALUE=$G(IBSEG(8))
"RTN","IBCNEHL4",202,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.27,IENSTR,.06)=$$NUMCHK^IBCNEHL2(VALUE),RSUPDT(365.27,IENSTR,.07)=QUAL
"RTN","IBCNEHL4",203,0)
 S RSUPDT(365.27,IENSTR,.08)=$P($G(IBSEG(9)),HLCMP) ; Delivery frequency
"RTN","IBCNEHL4",204,0)
 S RSUPDT(365.27,IENSTR,.09)=$P($G(IBSEG(10)),HLCMP) ; Delivery pattern
"RTN","IBCNEHL4",205,0)
 D CODECHK^IBCNEHLU(.RSUPDT)  ; IB*2*497  check for new coded values
"RTN","IBCNEHL4",206,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",207,0)
 Q
"RTN","IBCNEHL4",208,0)
 ;
"RTN","IBCNEHL4",209,0)
ZRF(EBDA,ERROR,IBSEG,RIEN) ; Process ZRF Reference identification segment
"RTN","IBCNEHL4",210,0)
 N IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",211,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",212,0)
 S IENSTR="+1,"_EBDA_","_RIEN_","
"RTN","IBCNEHL4",213,0)
 S RSUPDT(365.291,IENSTR,.01)=+$O(^IBCN(365,RIEN,2,EBDA,10,"B",""),-1)+1 ; ZRF sequence
"RTN","IBCNEHL4",214,0)
 ; Reference id & qualifier
"RTN","IBCNEHL4",215,0)
 S QUAL=$P($G(IBSEG(3)),HLCMP),VALUE=$G(IBSEG(4))
"RTN","IBCNEHL4",216,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.291,IENSTR,.02)=VALUE,RSUPDT(365.291,IENSTR,.03)=QUAL
"RTN","IBCNEHL4",217,0)
 S RSUPDT(365.291,IENSTR,.04)=$G(IBSEG(5)) ; Description
"RTN","IBCNEHL4",218,0)
 D CODECHK^IBCNEHLU(.RSUPDT)  ; IB*2*497  check for new coded values
"RTN","IBCNEHL4",219,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",220,0)
 Q
"RTN","IBCNEHL4",221,0)
 ;
"RTN","IBCNEHL4",222,0)
ZSD(EBDA,ERROR,IBSEG,RIEN) ; Process ZSD Subscriber date segment
"RTN","IBCNEHL4",223,0)
 N IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",224,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",225,0)
 S IENSTR="+1,"_EBDA_","_RIEN_","
"RTN","IBCNEHL4",226,0)
 S RSUPDT(365.28,IENSTR,.01)=+$O(^IBCN(365,RIEN,2,EBDA,8,"B",""),-1)+1 ; ZSD sequence
"RTN","IBCNEHL4",227,0)
 ; Date & qualifier
"RTN","IBCNEHL4",228,0)
 S QUAL=$P($G(IBSEG(3)),HLCMP),VALUE=$P($G(IBSEG(5)),HLCMP)
"RTN","IBCNEHL4",229,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.28,IENSTR,.02)=VALUE,RSUPDT(365.28,IENSTR,.03)=QUAL
"RTN","IBCNEHL4",230,0)
 S RSUPDT(365.28,IENSTR,.04)=$P($G(IBSEG(4)),HLCMP) ; Date format
"RTN","IBCNEHL4",231,0)
 D CODECHK^IBCNEHLU(.RSUPDT)  ; IB*2*497  check for new coded values
"RTN","IBCNEHL4",232,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",233,0)
 Q
"RTN","IBCNEHL4",234,0)
 ;
"RTN","IBCNEHL4",235,0)
ZII(EBDA,ERROR,IBSEG,RIEN) ; Process ZII Subscriber additional info segment
"RTN","IBCNEHL4",236,0)
 N IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",237,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",238,0)
 S IENSTR="+1,"_EBDA_","_RIEN_","
"RTN","IBCNEHL4",239,0)
 S RSUPDT(365.29,IENSTR,.01)=+$O(^IBCN(365,RIEN,2,EBDA,9,"B",""),-1)+1 ; ZII sequence
"RTN","IBCNEHL4",240,0)
 ; place of service or diagnosis (if qualifier is "BF" or "BK") & qualifier
"RTN","IBCNEHL4",241,0)
 S QUAL=$P($G(IBSEG(3)),HLCMP)
"RTN","IBCNEHL4",242,0)
 ; IB*2*497 set up for Nature of Injury type qualifiers "GR", "NI", or null value
"RTN","IBCNEHL4",243,0)
 I (QUAL="")!(".GR.NI."[("."_QUAL_".")) D
"RTN","IBCNEHL4",244,0)
 . S RSUPDT(365.29,IENSTR,.05)=$P($G(IBSEG(5)),U,2) ;nature of injury code
"RTN","IBCNEHL4",245,0)
 . S RSUPDT(365.29,IENSTR,.06)=$P($G(IBSEG(6)),U,2) ; nature of injury code category
"RTN","IBCNEHL4",246,0)
 . S RSUPDT(365.29,IENSTR,.07)=$G(IBSEG(7))  ; nature of injury code free text description
"RTN","IBCNEHL4",247,0)
 E  S RSUPDT(365.29,IENSTR,$S(".BF.BK."[("."_QUAL_"."):.03,1:.02))=$P($G(IBSEG(4)),HLCMP)
"RTN","IBCNEHL4",248,0)
 S RSUPDT(365.29,IENSTR,.04)=QUAL
"RTN","IBCNEHL4",249,0)
 D CODECHK^IBCNEHLU(.RSUPDT) ; IB*2*497  check for new coded values
"RTN","IBCNEHL4",250,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",251,0)
 Q
"RTN","IBCNEHL4",252,0)
 ;
"RTN","IBCNEHL4",253,0)
ZTY(EBDA,ERROR,IBSEG,RIEN) ; Process ZTY Benefit related entity segment
"RTN","IBCNEHL4",254,0)
 N FLD,IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",255,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",256,0)
 S IENSTR=EBDA_","_RIEN_","
"RTN","IBCNEHL4",257,0)
 ; Entity id code & qualifier
"RTN","IBCNEHL4",258,0)
 S QUAL=$P($G(IBSEG(4)),HLCMP),VALUE=$P($G(IBSEG(3)),HLCMP)
"RTN","IBCNEHL4",259,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.02,IENSTR,3.01)=VALUE,RSUPDT(365.02,IENSTR,3.02)=QUAL
"RTN","IBCNEHL4",260,0)
 ; Entity name
"RTN","IBCNEHL4",261,0)
 S FLD=$G(IBSEG(5))
"RTN","IBCNEHL4",262,0)
 ;S RSUPDT(365.02,IENSTR,3.03)=$P($P(FLD,HLCMP),HLSCMP)_","_$P(FLD,HLCMP,2)_" "_$P(FLD,HLCMP,3)_" "_$P(FLD,HLCMP,4)
"RTN","IBCNEHL4",263,0)
 S RSUPDT(365.02,IENSTR,3.03)=$P($P(FLD,HLCMP),HLSCMP)_" "_$P(FLD,HLCMP,2)_" "_$P(FLD,HLCMP,3)_" "_$P(FLD,HLCMP,4)  ;ib*2*497  prevent orphan commas
"RTN","IBCNEHL4",264,0)
 ; make sure that name is not empty
"RTN","IBCNEHL4",265,0)
 ;I $TR(RSUPDT(365.02,IENSTR,3.03),", ")="" K RSUPDT(365.02,IENSTR,3.03)
"RTN","IBCNEHL4",266,0)
 I $TR(RSUPDT(365.02,IENSTR,3.03)," ")="" K RSUPDT(365.02,IENSTR,3.03)  ;ib*2*497  remove comma from $TR statement
"RTN","IBCNEHL4",267,0)
 ; Entity id & qualifier
"RTN","IBCNEHL4",268,0)
 S QUAL=$P($G(IBSEG(6)),HLCMP),VALUE=$G(IBSEG(7))
"RTN","IBCNEHL4",269,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.02,IENSTR,3.04)=VALUE,RSUPDT(365.02,IENSTR,3.05)=QUAL
"RTN","IBCNEHL4",270,0)
 ; IB*2*497 - entity relationship code
"RTN","IBCNEHL4",271,0)
 S RSUPDT(365.02,IENSTR,3.06)=$G(IBSEG(14))
"RTN","IBCNEHL4",272,0)
 ; Entity address
"RTN","IBCNEHL4",273,0)
 S FLD=$G(IBSEG(8))
"RTN","IBCNEHL4",274,0)
 S RSUPDT(365.02,IENSTR,4.01)=$P($P(FLD,HLCMP),HLSCMP) ; line 1
"RTN","IBCNEHL4",275,0)
 S RSUPDT(365.02,IENSTR,4.02)=$P(FLD,HLCMP,2) ; line 2
"RTN","IBCNEHL4",276,0)
 S RSUPDT(365.02,IENSTR,4.03)=$P(FLD,HLCMP,3) ; city
"RTN","IBCNEHL4",277,0)
 S VALUE=+$$FIND1^DIC(5,,"X",$P(FLD,HLCMP,4),"C") I VALUE>0 S RSUPDT(365.02,IENSTR,4.04)=VALUE ; state
"RTN","IBCNEHL4",278,0)
 S RSUPDT(365.02,IENSTR,4.05)=$P(FLD,HLCMP,5) ; zip / postal code
"RTN","IBCNEHL4",279,0)
 S RSUPDT(365.02,IENSTR,4.06)=$P(FLD,HLCMP,6) ; country code
"RTN","IBCNEHL4",280,0)
 S RSUPDT(365.02,IENSTR,4.09)=$P(FLD,HLCMP,8) ; country subdivision code
"RTN","IBCNEHL4",281,0)
 ; Entity location & qualifier
"RTN","IBCNEHL4",282,0)
 S QUAL=$G(IBSEG(9)),VALUE=$G(IBSEG(10))
"RTN","IBCNEHL4",283,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.02,IENSTR,4.07)=VALUE,RSUPDT(365.02,IENSTR,4.08)=QUAL
"RTN","IBCNEHL4",284,0)
 ; Provider code
"RTN","IBCNEHL4",285,0)
 S RSUPDT(365.02,IENSTR,5.01)=$P($G(IBSEG(11)),HLCMP)
"RTN","IBCNEHL4",286,0)
 ; Reference id & qualifier
"RTN","IBCNEHL4",287,0)
 S QUAL=$P($G(IBSEG(12)),HLCMP),VALUE=$G(IBSEG(13))
"RTN","IBCNEHL4",288,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.02,IENSTR,5.02)=VALUE,RSUPDT(365.02,IENSTR,5.03)=QUAL
"RTN","IBCNEHL4",289,0)
 D CODECHK^IBCNEHLU(.RSUPDT)  ; IB*2*497  check for new coded values
"RTN","IBCNEHL4",290,0)
 D FILE^DIE("ET","RSUPDT","ERROR")
"RTN","IBCNEHL4",291,0)
 Q
"RTN","IBCNEHL4",292,0)
 ;
"RTN","IBCNEHL4",293,0)
G2OCTD(EBDA,ERROR,IBSEG,RIEN) ; Process G2O.CTD Benefit related entity contact data segment
"RTN","IBCNEHL4",294,0)
 N FLD,IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",295,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",296,0)
 S IENSTR="+1,"_EBDA_","_RIEN_","
"RTN","IBCNEHL4",297,0)
 S RSUPDT(365.26,IENSTR,.01)=+$O(^IBCN(365,RIEN,2,EBDA,6,"B",""),-1)+1 ; G2O.CTD sequence
"RTN","IBCNEHL4",298,0)
 ; Contact name
"RTN","IBCNEHL4",299,0)
 S FLD=$G(IBSEG(3))
"RTN","IBCNEHL4",300,0)
 S RSUPDT(365.26,IENSTR,.02)=$P(FLD,HLCMP,5)_" "_$P($P(FLD,HLCMP),HLSCMP)_","_$P(FLD,HLCMP,2)_" "_$P(FLD,HLCMP,3)_" "_$P(FLD,HLCMP,4)_" "_$P(FLD,HLCMP,6)
"RTN","IBCNEHL4",301,0)
 ; make sure that name is not empty
"RTN","IBCNEHL4",302,0)
 I $TR(RSUPDT(365.26,IENSTR,.02),", ")="" K RSUPDT(365.26,IENSTR,.02)
"RTN","IBCNEHL4",303,0)
 ; Contact number & qualifier
"RTN","IBCNEHL4",304,0)
 S FLD=$G(IBSEG(6)),QUAL=$P(FLD,HLCMP,9),VALUE=$P(FLD,HLCMP)
"RTN","IBCNEHL4",305,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.26,IENSTR,1)=VALUE,RSUPDT(365.26,IENSTR,.04)=QUAL ;ib*2*497  stuff COMMUNICATION NUMBER data into its new location (365.26,1) 
"RTN","IBCNEHL4",306,0)
 D CODECHK^IBCNEHLU(.RSUPDT)  ; IB*2*497  check for new coded values
"RTN","IBCNEHL4",307,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",308,0)
 Q
"RTN","IBCNEHL4",309,0)
 ;
"RTN","IBCNEHL4",310,0)
ERR(ERDA,ERROR,IBSEG,RIEN) ; Process ERR Reject reasons segment
"RTN","IBCNEHL4",311,0)
 N I,IENARR,IENSTR,FLD,LOC,RSUPDT,VAL
"RTN","IBCNEHL4",312,0)
 S IENSTR="+1,"_RIEN_","
"RTN","IBCNEHL4",313,0)
 S RSUPDT(365.06,IENSTR,.01)=+$O(^IBCN(365,RIEN,6,"B",""),-1)+1 ; ERR sequence
"RTN","IBCNEHL4",314,0)
 S FLD=$G(IBSEG(3)),LOC=$P(FLD,HLCMP)
"RTN","IBCNEHL4",315,0)
 F I=2:1:6 S VAL=$P(FLD,HLCMP,2) I VAL'="" S LOC=LOC_$S(I=2!(I=4):"("_VAL_")",1:"."_VAL_".")
"RTN","IBCNEHL4",316,0)
 S RSUPDT(365.06,IENSTR,.02)=LOC ; Error location (HL7)
"RTN","IBCNEHL4",317,0)
 S RSUPDT(365.06,IENSTR,.03)=$P($G(IBSEG(6)),HLCMP) ; Reject reason
"RTN","IBCNEHL4",318,0)
 S RSUPDT(365.06,IENSTR,.04)=$G(IBSEG(9)) ; Action code
"RTN","IBCNEHL4",319,0)
 S RSUPDT(365.06,IENSTR,.05)=$G(IBSEG(8)) ; Loop id
"RTN","IBCNEHL4",320,0)
 S RSUPDT(365.06,IENSTR,.06)=$P($G(IBSEG(6)),HLCMP,3) ; Source
"RTN","IBCNEHL4",321,0)
 D CODECHK^IBCNEHLU(.RSUPDT)  ; IB*2*497  check for new coded values
"RTN","IBCNEHL4",322,0)
 D UPDATE^DIE("E","RSUPDT","IENARR","ERROR")
"RTN","IBCNEHL4",323,0)
 S ERDA=IENARR(1)
"RTN","IBCNEHL4",324,0)
 Q
"RTN","IBCNEHL4",325,0)
 ;
"RTN","IBCNEHL4",326,0)
NTE(ERDA,ERROR,IBSEG,RIEN) ; Process NTE segment
"RTN","IBCNEHL4",327,0)
 N DA,IENS,MSG,MSGSTR,RSUPDT,Z
"RTN","IBCNEHL4",328,0)
 S DA(1)=RIEN,DA=ERDA
"RTN","IBCNEHL4",329,0)
 S IENS=$$IENS^DILF(.DA)
"RTN","IBCNEHL4",330,0)
 S MSGSTR=$G(IBSEG(4))
"RTN","IBCNEHL4",331,0)
 F Z=1:1 S MSG=$P(MSGSTR,HLREP,Z) Q:'MSG  S RSUPDT(365.061,"+"_Z_","_IENS,".01")=MSG
"RTN","IBCNEHL4",332,0)
 I $D(RSUPDT) D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",333,0)
 Q
"RTN","IBCNEHL4",334,0)
 ;
"RTN","IBCNEHL4",335,0)
ZTP(ERROR,IBSEG,RIEN) ; Process ZTP Subscriber date (subscriber level) segment
"RTN","IBCNEHL4",336,0)
 N IENSTR,QUAL,RSUPDT,VALUE,Z
"RTN","IBCNEHL4",337,0)
 S IENSTR="+1,"_RIEN_","
"RTN","IBCNEHL4",338,0)
 S RSUPDT(365.07,IENSTR,.01)=+$O(^IBCN(365,RIEN,7,"B",""),-1)+1 ; ZTP sequence
"RTN","IBCNEHL4",339,0)
 ; Date & qualifier
"RTN","IBCNEHL4",340,0)
 S QUAL=$P($G(IBSEG(3)),HLCMP),VALUE=$P($P($G(IBSEG(4)),HLCMP),HLSCMP)
"RTN","IBCNEHL4",341,0)
 S Z=$P($P($G(IBSEG(4)),HLCMP,2),HLSCMP) I Z'="" S VALUE=VALUE_" - "_Z
"RTN","IBCNEHL4",342,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.07,IENSTR,.02)=VALUE,RSUPDT(365.07,IENSTR,.03)=QUAL
"RTN","IBCNEHL4",343,0)
 S RSUPDT(365.07,IENSTR,.04)=$G(IBSEG(5)) ; Loop id
"RTN","IBCNEHL4",344,0)
 D CODECHK^IBCNEHLU(.RSUPDT)  ; IB*2*497  check for new coded values
"RTN","IBCNEHL4",345,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",346,0)
 Q
"RTN","IBCNEHL5")
0^6^B11250093^n/a
"RTN","IBCNEHL5",1,0)
IBCNEHL5 ;DALOI/KML - HL7 Process Incoming RPI Msgs (cont.) ;1-APRIL-2013
"RTN","IBCNEHL5",2,0)
 ;;2.0;INTEGRATED BILLING;**497**;21-MAR-94;Build 120
"RTN","IBCNEHL5",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHL5",4,0)
 ;
"RTN","IBCNEHL5",5,0)
 ;**Program Description**
"RTN","IBCNEHL5",6,0)
 Q  ; No direct calls
"RTN","IBCNEHL5",7,0)
 ;
"RTN","IBCNEHL5",8,0)
GZRF(ERROR,IBSEG,RIEN) ; Process Group level ZRF Reference identification segment (x12 loops 2100C and 2100D)
"RTN","IBCNEHL5",9,0)
 ;
"RTN","IBCNEHL5",10,0)
 ; Input:
"RTN","IBCNEHL5",11,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL5",12,0)
 ;
"RTN","IBCNEHL5",13,0)
 ; Output:
"RTN","IBCNEHL5",14,0)
 ; ERROR
"RTN","IBCNEHL5",15,0)
 ;
"RTN","IBCNEHL5",16,0)
 N IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL5",17,0)
 S IENSTR="+1,"_RIEN_","
"RTN","IBCNEHL5",18,0)
 S RSUPDT(365.09,IENSTR,.01)=+$O(^IBCN(365,RIEN,9,"B",""),-1)+1  ; node 9 sequence #
"RTN","IBCNEHL5",19,0)
 ; Reference id & qualifier
"RTN","IBCNEHL5",20,0)
 S QUAL=$P($G(IBSEG(3)),HLCMP),VALUE=$G(IBSEG(4))
"RTN","IBCNEHL5",21,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.09,IENSTR,.02)=VALUE,RSUPDT(365.09,IENSTR,.03)=QUAL
"RTN","IBCNEHL5",22,0)
 S RSUPDT(365.09,IENSTR,.04)=$G(IBSEG(5)) ; Description
"RTN","IBCNEHL5",23,0)
 D CODECHK^IBCNEHLU(.RSUPDT)  ;check for new coded values
"RTN","IBCNEHL5",24,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL5",25,0)
 Q
"RTN","IBCNEHL5",26,0)
 ;
"RTN","IBCNEHL5",27,0)
ZMP(ERROR,IBSEG,RIEN) ; Process Military Personnel Information that comes from X12 271 MPI segment of the 2100C and 2100D  loops 
"RTN","IBCNEHL5",28,0)
 ;
"RTN","IBCNEHL5",29,0)
 ; Input:
"RTN","IBCNEHL5",30,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL5",31,0)
 ;
"RTN","IBCNEHL5",32,0)
 ; Output:
"RTN","IBCNEHL5",33,0)
 ; ERROR
"RTN","IBCNEHL5",34,0)
 ;
"RTN","IBCNEHL5",35,0)
 N IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL5",36,0)
 S IENSTR=RIEN_","
"RTN","IBCNEHL5",37,0)
 S RSUPDT(365,IENSTR,12.01)=$G(IBSEG(3)) ; information status code
"RTN","IBCNEHL5",38,0)
 S RSUPDT(365,IENSTR,12.02)=$G(IBSEG(4))  ;employment status code
"RTN","IBCNEHL5",39,0)
 S RSUPDT(365,IENSTR,12.03)=$G(IBSEG(5))  ; government service affiliation code
"RTN","IBCNEHL5",40,0)
 S RSUPDT(365,IENSTR,12.04)=$G(IBSEG(6))  ; description
"RTN","IBCNEHL5",41,0)
 S RSUPDT(365,IENSTR,12.05)=$G(IBSEG(7))  ; Military service rank code
"RTN","IBCNEHL5",42,0)
 ;Date time period format qualifier and Date time period
"RTN","IBCNEHL5",43,0)
 S QUAL=$P($G(IBSEG(8)),HLCMP),VALUE=$G(IBSEG(9))
"RTN","IBCNEHL5",44,0)
 I VALUE'="",QUAL'="" S RSUPDT(365,IENSTR,12.06)=QUAL,RSUPDT(365,IENSTR,12.07)=VALUE
"RTN","IBCNEHL5",45,0)
 D CODECHK^IBCNEHLU(.RSUPDT)  ;check for new coded values
"RTN","IBCNEHL5",46,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL5",47,0)
 Q
"RTN","IBCNEHL5",48,0)
 ;
"RTN","IBCNEHL5",49,0)
ROL(ERROR,IBSEG,RIEN) ; process group level Provider Information in the X12 271 PRV segment of X12 loops: 2100B, 2100C, 2100D
"RTN","IBCNEHL5",50,0)
 ;
"RTN","IBCNEHL5",51,0)
 ; Input:
"RTN","IBCNEHL5",52,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL5",53,0)
 ;
"RTN","IBCNEHL5",54,0)
 ; Output:
"RTN","IBCNEHL5",55,0)
 ; ERROR
"RTN","IBCNEHL5",56,0)
 ;
"RTN","IBCNEHL5",57,0)
 N IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL5",58,0)
 S IENSTR="+1,"_RIEN_","
"RTN","IBCNEHL5",59,0)
 S RSUPDT(365.04,IENSTR,.01)=+$O(^IBCN(365,RIEN,10,"B",""),-1)+1  ; node 10 sequence #
"RTN","IBCNEHL5",60,0)
 S RSUPDT(365.04,IENSTR,.02)=$P($G(IBSEG(4)),HLCMP)  ; provider code
"RTN","IBCNEHL5",61,0)
 S RSUPDT(365.04,IENSTR,.03)=$P($G(IBSEG(5)),HLCMP)   ; reference ID
"RTN","IBCNEHL5",62,0)
 D CODECHK^IBCNEHLU(.RSUPDT)  ;check for new coded values
"RTN","IBCNEHL5",63,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL5",64,0)
 Q
"RTN","IBCNEHL5",65,0)
 ;
"RTN","IBCNEHL5",66,0)
DG1(ERROR,IBSEG,RIEN) ; process DIAGNOSIS codes in the X12 271 HI segment of X12 loops: 2100C, 2100D
"RTN","IBCNEHL5",67,0)
 ;
"RTN","IBCNEHL5",68,0)
 ; Input:
"RTN","IBCNEHL5",69,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL5",70,0)
 ;
"RTN","IBCNEHL5",71,0)
 ; Output:
"RTN","IBCNEHL5",72,0)
 ; ERROR
"RTN","IBCNEHL5",73,0)
 ;
"RTN","IBCNEHL5",74,0)
 N IENSTR,RSUPDT,DCODE
"RTN","IBCNEHL5",75,0)
 S IENSTR="+1,"_RIEN_","
"RTN","IBCNEHL5",76,0)
 S RSUPDT(365.01,IENSTR,.01)=+$O(^IBCN(365,RIEN,11,"B",""),-1)+1  ; node 11 sequence #
"RTN","IBCNEHL5",77,0)
 S DCODE=$P($G(IBSEG(4)),HLCMP)
"RTN","IBCNEHL5",78,0)
 S RSUPDT(365.01,IENSTR,.02)=$E(DCODE,1,3)_"."_$E(DCODE,4,99)  ; diagnosis code
"RTN","IBCNEHL5",79,0)
 S RSUPDT(365.01,IENSTR,.03)=$P($G(IBSEG(4)),HLCMP,3) ; diagnosis code qualifier
"RTN","IBCNEHL5",80,0)
 S RSUPDT(365.01,IENSTR,.04)=$S($P($G(IBSEG(16)),HLCMP)=1:"P",1:"S")  ; primary or secondary diagnosis code
"RTN","IBCNEHL5",81,0)
 I $D(RSUPDT) D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL5",82,0)
 Q
"RTN","IBCNEHL5",83,0)
 ;
"RTN","IBCNEHLM")
0^10^B26579443^B21127231
"RTN","IBCNEHLM",1,0)
IBCNEHLM ;DAOU/ALA - HL7 Registration MFN Message ;10-JUN-2002
"RTN","IBCNEHLM",2,0)
 ;;2.0;INTEGRATED BILLING;**184,251,300,416,438,497**;21-MAR-94;Build 120
"RTN","IBCNEHLM",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHLM",4,0)
 ;
"RTN","IBCNEHLM",5,0)
 ;**Program Description**
"RTN","IBCNEHLM",6,0)
 ;  This program will process the outgoing registration MFN message
"RTN","IBCNEHLM",7,0)
 ;
"RTN","IBCNEHLM",8,0)
 ;  Variables
"RTN","IBCNEHLM",9,0)
 ;    MCT = Lines of MailMan message counter
"RTN","IBCNEHLM",10,0)
 ;    QFL = Quit flag
"RTN","IBCNEHLM",11,0)
 ;    HL* = HL7 package specific variables
"RTN","IBCNEHLM",12,0)
 ;    TAXID = Tax ID
"RTN","IBCNEHLM",13,0)
 ;    CNTCPH = Contact Phone
"RTN","IBCNEHLM",14,0)
 ;    CNTCEM = Contact Email
"RTN","IBCNEHLM",15,0)
 ;    FRSH = Freshness Days
"RTN","IBCNEHLM",16,0)
 ;    MGRP = Mailgroup to email messages to
"RTN","IBCNEHLM",17,0)
 ;    INACT = Inactive Insurance Flag
"RTN","IBCNEHLM",18,0)
 ;    CNTC = Contact IEN
"RTN","IBCNEHLM",19,0)
 ;    APP = Application
"RTN","IBCNEHLM",20,0)
 ;    EVENT = HL7 Event
"RTN","IBCNEHLM",21,0)
 ;    CODE = Values sent in the MFN message
"RTN","IBCNEHLM",22,0)
 ;    IPP = IP Port
"RTN","IBCNEHLM",23,0)
 ;    IPA = IP Address
"RTN","IBCNEHLM",24,0)
 ;    RESP = Response Code
"RTN","IBCNEHLM",25,0)
 ;    IHLP = Interface HL7 Processing Type
"RTN","IBCNEHLM",26,0)
 ;    IHLT = Interface HL7 Batch Start Time
"RTN","IBCNEHLM",27,0)
 ;    IHLS = Interface HL7 Batch Stop Time
"RTN","IBCNEHLM",28,0)
 ;    IVER = Interface Version
"RTN","IBCNEHLM",29,0)
 ;
"RTN","IBCNEHLM",30,0)
 N IBPERSIST
"RTN","IBCNEHLM",31,0)
 S IBPERSIST="N" ; persistence flag - If "N", FSC will not use the statistics on the NTE segment
"RTN","IBCNEHLM",32,0)
 D REG
"RTN","IBCNEHLM",33,0)
 Q
"RTN","IBCNEHLM",34,0)
 ;
"RTN","IBCNEHLM",35,0)
EN1 ; TaskMan entry point
"RTN","IBCNEHLM",36,0)
 N IBPERSIST
"RTN","IBCNEHLM",37,0)
 S IBPERSIST="Y" ; persistence flag - If "Y", FSC will use NTE segment to update their copy of the site's stats
"RTN","IBCNEHLM",38,0)
 D REG
"RTN","IBCNEHLM",39,0)
 ; Purge the task record
"RTN","IBCNEHLM",40,0)
 S ZTREQ="@"
"RTN","IBCNEHLM",41,0)
 Q
"RTN","IBCNEHLM",42,0)
 ;
"RTN","IBCNEHLM",43,0)
REG ;  Registration message for when a site installs
"RTN","IBCNEHLM",44,0)
 NEW TAXID,CNTCPH,CNTCEM,CNTCNM,IBCNE,FRSH,MGRP,INACT,IHLP,MFE,HLSAN
"RTN","IBCNEHLM",45,0)
 NEW IHLT,CNTC,APP,EVENT,CODE,EDT,MFN,HL,HLFS,HLECH,MCT,HLPROD,HLX,ID
"RTN","IBCNEHLM",46,0)
 NEW HLEID,IPP,IPA,IBCNEDAT,HLCS,HLINST,HLN,RESP,HLHDR,HLREP
"RTN","IBCNEHLM",47,0)
 NEW HLTYPE,HLQ,HLRESLT,IHLS,HLCDOM,HLCINS,HLCSTCP,HLIP,%I,ZMID
"RTN","IBCNEHLM",48,0)
 NEW VMFE,IVER
"RTN","IBCNEHLM",49,0)
 K ^TMP("HLS",$J) S MCT=0,QFL=0
"RTN","IBCNEHLM",50,0)
 ;
"RTN","IBCNEHLM",51,0)
 ;  Get data from IB Parameters File
"RTN","IBCNEHLM",52,0)
 S TAXID=$TR($P($G(^IBE(350.9,1,1)),U,5),"-",""),CNTCPH="",CNTCEM="",CNTCNM=""
"RTN","IBCNEHLM",53,0)
 S IBCNE=$G(^IBE(350.9,1,51))
"RTN","IBCNEHLM",54,0)
 S FRSH=$P(IBCNE,U,1)
"RTN","IBCNEHLM",55,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEHLM",56,0)
 S INACT=$E($$GET1^DIQ(350.9,"1,",51.08,"E"))
"RTN","IBCNEHLM",57,0)
 S IHLP=$P(IBCNE,U,13),IHLT=$P(IBCNE,U,14),CNTC=$P(IBCNE,U,16)
"RTN","IBCNEHLM",58,0)
 S IHLS=$P(IBCNE,U,19)
"RTN","IBCNEHLM",59,0)
 S IVER="6"
"RTN","IBCNEHLM",60,0)
 ;
"RTN","IBCNEHLM",61,0)
 I IHLP="I" S (IHLT,IHLS)=""
"RTN","IBCNEHLM",62,0)
 ;
"RTN","IBCNEHLM",63,0)
 ;  Get contact specific information
"RTN","IBCNEHLM",64,0)
 I CNTC'="" D
"RTN","IBCNEHLM",65,0)
 . S CNTCNM=$P($G(^VA(200,CNTC,0)),U,1)
"RTN","IBCNEHLM",66,0)
 . S CNTCPH=$P($G(^VA(200,CNTC,.13)),U,2)
"RTN","IBCNEHLM",67,0)
 . S CNTCEM=$P($G(^VA(200,CNTC,.15)),U,1)
"RTN","IBCNEHLM",68,0)
 ;
"RTN","IBCNEHLM",69,0)
 ;  Email if any missing data
"RTN","IBCNEHLM",70,0)
 I CNTC="" S MCT=MCT+1,MSG(MCT)="The Contact Person is not defined in the eIV Site Parameters.  ",QFL=1
"RTN","IBCNEHLM",71,0)
 I CNTC'="",CNTCPH="" S MCT=MCT+1,MSG(MCT)="The office phone number of the eIV Contact Person is not defined  (File 200, Field .132).  ",QFL=1
"RTN","IBCNEHLM",72,0)
 I CNTC'="",CNTCEM="" S MCT=MCT+1,MSG(MCT)="The email address of the eIV Contact Person is not defined  (File 200, Field .151).  ",QFL=1
"RTN","IBCNEHLM",73,0)
 ;
"RTN","IBCNEHLM",74,0)
 I IHLP="B",IHLT=""!(IHLS="") D  S QFL=1
"RTN","IBCNEHLM",75,0)
 . S MCT=MCT+1,MSG(MCT)="The ""HL7 Response Processing Method"" selected is Batch but the HL7 Batch "
"RTN","IBCNEHLM",76,0)
 . I IHLT="",IHLS="" S MSG(MCT)=MSG(MCT)_"Start and End Times are blank.  " Q
"RTN","IBCNEHLM",77,0)
 . S MSG(MCT)=MSG(MCT)_$S(IHLT="":"Start",1:"End")_" Time is blank.  "
"RTN","IBCNEHLM",78,0)
 ;
"RTN","IBCNEHLM",79,0)
 I FRSH=""!(INACT="")!(IHLP="") D
"RTN","IBCNEHLM",80,0)
 . S MCT=MCT+1,MSG(MCT)="The following eIV Site Parameters are not defined:  "
"RTN","IBCNEHLM",81,0)
 . I FRSH="" S MCT=MCT+1,MSG(MCT)="""Days between electronic re-verification checks"" is blank.  "
"RTN","IBCNEHLM",82,0)
 . I INACT="" S MCT=MCT+1,MSG(MCT)="""Look at a patient's inactive insurance?"" is blank.  "
"RTN","IBCNEHLM",83,0)
 . I IHLP="" S MCT=MCT+1,MSG(MCT)="""HL7 Response Processing Method"" is blank.  "
"RTN","IBCNEHLM",84,0)
 . Q
"RTN","IBCNEHLM",85,0)
 ;
"RTN","IBCNEHLM",86,0)
 I $O(MSG(""))'="" D MLMN
"RTN","IBCNEHLM",87,0)
 I QFL=1 Q
"RTN","IBCNEHLM",88,0)
 ;
"RTN","IBCNEHLM",89,0)
HL ;  When a site installs, the enrollment should be an
"RTN","IBCNEHLM",90,0)
 ;  "MUP" (update) record.
"RTN","IBCNEHLM",91,0)
 N DSTAT,VNTE,VZRR
"RTN","IBCNEHLM",92,0)
 S MFE(1)="MUP"
"RTN","IBCNEHLM",93,0)
 ;
"RTN","IBCNEHLM",94,0)
 ;  Initialize the HL7
"RTN","IBCNEHLM",95,0)
 D INIT^HLFNC2("IBCNE IIV REGISTER",.HL)
"RTN","IBCNEHLM",96,0)
 S HLFS=HL("FS"),HLECH=HL("ECH"),HL("SAF")=$P($$SITE^VASITE,U,2,3),HLREP=$E(HL("ECH"),2)
"RTN","IBCNEHLM",97,0)
 ; S HLEID=$$HLP^IBCNEHLU("IBCNE IIV REGISTER")
"RTN","IBCNEHLM",98,0)
 ;
"RTN","IBCNEHLM",99,0)
 ;   Set the MFI segment
"RTN","IBCNEHLM",100,0)
 S ID="Facility Table",APP="",EVENT="UPD",RESP="NE"
"RTN","IBCNEHLM",101,0)
 S ^TMP("HLS",$J,1)=$$MFI^VAFHLMFI(ID,APP,EVENT,,,RESP)
"RTN","IBCNEHLM",102,0)
 ;
"RTN","IBCNEHLM",103,0)
 ;  Set the MFE segment
"RTN","IBCNEHLM",104,0)
 S EVENT=MFE(1),MFN="",EDT=$$DT^XLFDT()
"RTN","IBCNEHLM",105,0)
 S CODE=$P($$SITE^VASITE,U,3)_$E(HLECH)
"RTN","IBCNEHLM",106,0)
 S VMFE=$$MFE^VAFHLMFE(EVENT,MFN,EDT,CODE)
"RTN","IBCNEHLM",107,0)
 S ^TMP("HLS",$J,2)=VMFE_HLFS_"CE"
"RTN","IBCNEHLM",108,0)
 ;
"RTN","IBCNEHLM",109,0)
 ;  Set the ZRR segment
"RTN","IBCNEHLM",110,0)
 S VZRR="ZRR"_HLFS_"1"_HLFS_TAXID_HLFS_HLFS_$$HLNAME^HLFNC(CNTCNM,$E(HLECH))_"^C"_HLFS
"RTN","IBCNEHLM",111,0)
 S VZRR=VZRR_CNTCPH_$E(HLECH)_$E(HLECH)_$E(HLECH)_CNTCEM_HLFS_FRSH_HLFS_IHLP_HLFS_IHLT_$E(HLECH)_IHLS_HLFS_INACT_HLFS_IVER
"RTN","IBCNEHLM",112,0)
 S ^TMP("HLS",$J,3)=VZRR
"RTN","IBCNEHLM",113,0)
 ;
"RTN","IBCNEHLM",114,0)
 ; Set the NTE segment
"RTN","IBCNEHLM",115,0)
 S DSTAT=$$GETSTAT^IBCNEDST()
"RTN","IBCNEHLM",116,0)
 S VNTE="NTE"_HLFS_"1"_HLFS_HLFS_IBPERSIST_HLREP_$TR(DSTAT,U,HLREP)
"RTN","IBCNEHLM",117,0)
 S ^TMP("HLS",$J,4)=VNTE
"RTN","IBCNEHLM",118,0)
 ;
"RTN","IBCNEHLM",119,0)
 D GENERATE^HLMA("IBCNE IIV REGISTER","GM",1,.HLRESLT,"")
"RTN","IBCNEHLM",120,0)
 I $P(HLRESLT,U,2)]"" S HLRESLT="Error - "_$P(HLRESLT,U,2,99) D  Q
"RTN","IBCNEHLM",121,0)
 . S MSG(1)="HL7 eIV Registration Message not created."
"RTN","IBCNEHLM",122,0)
 . S MSG(2)=HLRESLT
"RTN","IBCNEHLM",123,0)
 . D MLMN
"RTN","IBCNEHLM",124,0)
 K ^TMP("HLS",$J)
"RTN","IBCNEHLM",125,0)
 Q
"RTN","IBCNEHLM",126,0)
 ;
"RTN","IBCNEHLM",127,0)
MLMN ;  MailMan Message
"RTN","IBCNEHLM",128,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEHLM",129,0)
 S XMSUB="eIV Registration Failure"
"RTN","IBCNEHLM",130,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHLM",131,0)
 K XMSUB,XMY,MSG,XMZ,XMDUZ
"RTN","IBCNEHLM",132,0)
 Q
"RTN","IBCNEHLQ")
0^11^B44383583^B43557440
"RTN","IBCNEHLQ",1,0)
IBCNEHLQ ;DAOU/ALA - HL7 RQI Message ;17-JUN-2002
"RTN","IBCNEHLQ",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,300,361,416,438,467,497**;21-MAR-94;Build 120
"RTN","IBCNEHLQ",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHLQ",4,0)
 ;
"RTN","IBCNEHLQ",5,0)
 ;**Program Description**
"RTN","IBCNEHLQ",6,0)
 ;  This routine builds an eIV Verification (RQI^I01) or
"RTN","IBCNEHLQ",7,0)
 ;  Identification (RQI^I03) request
"RTN","IBCNEHLQ",8,0)
 ;
"RTN","IBCNEHLQ",9,0)
 ;**Modified by  Date        Reason
"RTN","IBCNEHLQ",10,0)
 ;  DAOU/BHS     10/04/2002  Implementing Transmit SSN logic
"RTN","IBCNEHLQ",11,0)
 ;  DAOU/DB      03/19/2004  Stripped dashes from SSN (PID, GT1)
"RTN","IBCNEHLQ",12,0)
 ;
"RTN","IBCNEHLQ",13,0)
EN ;  Entry Point
"RTN","IBCNEHLQ",14,0)
 ;  Variables
"RTN","IBCNEHLQ",15,0)
 ;    HLFS = Field Separator
"RTN","IBCNEHLQ",16,0)
 ;    DFN = Patient IEN
"RTN","IBCNEHLQ",17,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEHLQ",18,0)
 ;    BUFF = Buffer IEN
"RTN","IBCNEHLQ",19,0)
 ;    FRDT = Freshness Date
"RTN","IBCNEHLQ",20,0)
 ;
"RTN","IBCNEHLQ",21,0)
PID ; Patient Identification Segment
"RTN","IBCNEHLQ",22,0)
 N VAFSTR,ICN,NM,I,PID11,EDQ
"RTN","IBCNEHLQ",23,0)
 S VAFSTR=",1,7,8,11,",DFN=+$G(DFN)
"RTN","IBCNEHLQ",24,0)
 S PID=$$EN^VAFHLPID(DFN,VAFSTR,1)
"RTN","IBCNEHLQ",25,0)
 S PID11=$P(PID,HLFS,12)
"RTN","IBCNEHLQ",26,0)
 I $P(PID11,HLECH,2)="""""" D
"RTN","IBCNEHLQ",27,0)
 . S $P(PID11,HLECH,2)=""
"RTN","IBCNEHLQ",28,0)
 . S $P(PID,HLFS,12)=PID11
"RTN","IBCNEHLQ",29,0)
 ; Encode special characters into Name and address pieces
"RTN","IBCNEHLQ",30,0)
 ; **NOTE: If $$EN^VAFHLPID should, in the future, return more than 11 pieces than the lines below may
"RTN","IBCNEHLQ",31,0)
 ;         need to be modified as they currently expect 11 pieces to be returned.
"RTN","IBCNEHLQ",32,0)
 I DFN D
"RTN","IBCNEHLQ",33,0)
 .; try to get name of insured from NAME OF INSURED
"RTN","IBCNEHLQ",34,0)
 .I EXT'=1,IRIEN S NM=$P($G(^DPT(DFN,.312,IRIEN,7)),U,1)
"RTN","IBCNEHLQ",35,0)
 .I EXT=1,BUFF,$G(NM)="" S NM=$P($G(^IBA(355.33,BUFF,91)),U)
"RTN","IBCNEHLQ",36,0)
 .S NM=$$HLNAME^HLFNC(NM,HLECH)
"RTN","IBCNEHLQ",37,0)
 .; if unsuccessful, get patient name from 2/.01
"RTN","IBCNEHLQ",38,0)
 .I NM="" D
"RTN","IBCNEHLQ",39,0)
 ..S NM("FILE")=2,NM("IENS")=DFN,NM("FIELD")=.01
"RTN","IBCNEHLQ",40,0)
 ..S NM=$$HLNAME^XLFNAME(.NM,"",$E(HLECH)),NM=$S(NM]"":NM,1:HLQ)
"RTN","IBCNEHLQ",41,0)
 ..Q
"RTN","IBCNEHLQ",42,0)
 .S I=$L(NM,HLFS),NM=$$ENCHL7(NM),$P(PID,HLFS,6,5+I)=NM
"RTN","IBCNEHLQ",43,0)
 .S $P(PID,HLFS,12,99)=$$ENCHL7($P(PID,HLFS,12,99))
"RTN","IBCNEHLQ",44,0)
 .S ICN=$P($G(^DPT(DFN,"MPI")),U,1)
"RTN","IBCNEHLQ",45,0)
 .S $P(PID,HLFS,4)=ICN_HLECH_HLECH_HLECH_"USVHA"_HLECH_"NI"_HLECH_"~"_DFN_HLECH_HLECH_HLECH_"USVHA"_HLECH_"PI"_HLECH_$P($$SITE^VASITE,U,3)_HLECH
"RTN","IBCNEHLQ",46,0)
 .Q
"RTN","IBCNEHLQ",47,0)
 S FRDT=$$HLDATE^HLFNC($G(FRDT))
"RTN","IBCNEHLQ",48,0)
 S $P(PID,HLFS,34)=FRDT
"RTN","IBCNEHLQ",49,0)
 Q
"RTN","IBCNEHLQ",50,0)
 ;
"RTN","IBCNEHLQ",51,0)
GT1 ;  Guarantor Segment
"RTN","IBCNEHLQ",52,0)
 N WHO,NM,IDOB,ISEX,SEX,RLIEN,PER,PLIEN,RDATA,IBSDATA,IBADDR
"RTN","IBCNEHLQ",53,0)
 ;
"RTN","IBCNEHLQ",54,0)
 S GT1=""
"RTN","IBCNEHLQ",55,0)
 I $G(QUERY)="I" Q
"RTN","IBCNEHLQ",56,0)
 ;
"RTN","IBCNEHLQ",57,0)
 ;  If the data was extracted from Buffer get specifics from Buffer file
"RTN","IBCNEHLQ",58,0)
 I EXT=1 D
"RTN","IBCNEHLQ",59,0)
 . S WHO=$P($G(^IBA(355.33,BUFF,60)),U,5)
"RTN","IBCNEHLQ",60,0)
 . I WHO="v"!(WHO="") Q
"RTN","IBCNEHLQ",61,0)
 . S NM=$P($G(^IBA(355.33,BUFF,60)),U,7),NM=$$NAME^IBCNEHLU(NM)
"RTN","IBCNEHLQ",62,0)
 . S NM=$$HLNAME^HLFNC(NM,HLECH)
"RTN","IBCNEHLQ",63,0)
 . S NM=$$ENCHL7(NM)
"RTN","IBCNEHLQ",64,0)
 . S $P(GT1,HLFS,3)=NM_HLECH_HLECH_HLECH
"RTN","IBCNEHLQ",65,0)
 . S IDOB=$P($G(^IBA(355.33,BUFF,60)),U,8),IDOB=$$HLDATE^HLFNC(IDOB)
"RTN","IBCNEHLQ",66,0)
 . S $P(GT1,HLFS,8)=IDOB
"RTN","IBCNEHLQ",67,0)
 . S $P(GT1,HLFS,2)=$$SCRUB($G(SUBID))_HLECH_HLECH_HLECH_HLECH_"HC"
"RTN","IBCNEHLQ",68,0)
 . Q
"RTN","IBCNEHLQ",69,0)
 ;
"RTN","IBCNEHLQ",70,0)
 ;  If the data was extracted from non-Buffer, check Patient file
"RTN","IBCNEHLQ",71,0)
 I EXT'=1 D
"RTN","IBCNEHLQ",72,0)
 . I IRIEN="" Q
"RTN","IBCNEHLQ",73,0)
 . S WHO=$P($G(^DPT(DFN,.312,IRIEN,0)),U,6)
"RTN","IBCNEHLQ",74,0)
 . I WHO="v"!(WHO="") Q
"RTN","IBCNEHLQ",75,0)
 . ;S NM=$P($G(^DPT(DFN,.312,IRIEN,0)),U,17)  ; WCJ;IB*2.0*497
"RTN","IBCNEHLQ",76,0)
 . S NM=$P($G(^DPT(DFN,.312,IRIEN,7)),U,1)  ; WCJ;IB*2.0*497
"RTN","IBCNEHLQ",77,0)
 . S NM=$$HLNAME^HLFNC(NM,HLECH)
"RTN","IBCNEHLQ",78,0)
 . S NM=$$ENCHL7(NM)
"RTN","IBCNEHLQ",79,0)
 . S $P(GT1,HLFS,3)=NM_HLECH_HLECH_HLECH
"RTN","IBCNEHLQ",80,0)
 . S IDOB=$P($G(^DPT(DFN,.312,IRIEN,3)),U,1),IDOB=$$HLDATE^HLFNC(IDOB)
"RTN","IBCNEHLQ",81,0)
 . S $P(GT1,HLFS,8)=IDOB
"RTN","IBCNEHLQ",82,0)
 . S $P(GT1,HLFS,2)=$$SCRUB($G(SUBID))_HLECH_HLECH_HLECH_HLECH_"HC"
"RTN","IBCNEHLQ",83,0)
 . ;
"RTN","IBCNEHLQ",84,0)
 . S IBSDATA=$G(^DPT(DFN,.312,IRIEN,3))
"RTN","IBCNEHLQ",85,0)
 . S IBADDR=$$HLADDR^HLFNC($P(IBSDATA,U,6,7),$P(IBSDATA,U,8,10))
"RTN","IBCNEHLQ",86,0)
 . S $P(GT1,HLFS,5)=$$ENCHL7(IBADDR)
"RTN","IBCNEHLQ",87,0)
 . ;
"RTN","IBCNEHLQ",88,0)
 . D CHK
"RTN","IBCNEHLQ",89,0)
 . I $P(GT1,HLFS,8)=""&(IDOB'="") S $P(GT1,HLFS,8)=$$HLDATE^HLFNC(IDOB)
"RTN","IBCNEHLQ",90,0)
 . I $P(GT1,HLFS,9)=""&(ISEX'="") S $P(GT1,HLFS,9)=ISEX
"RTN","IBCNEHLQ",91,0)
 . I $P(GT1,HLFS,9)="",WHO="s" D
"RTN","IBCNEHLQ",92,0)
 .. S SEX=$P($G(^DPT(DFN,.312,IRIEN,3)),U,12) ; get policy holder sex
"RTN","IBCNEHLQ",93,0)
 .. I SEX="" S SEX=$P(^DPT(DFN,0),U,2),SEX=$S(SEX="M":"F",1:"M") ; if null, use alternative method
"RTN","IBCNEHLQ",94,0)
 .. S $P(GT1,HLFS,9)=SEX
"RTN","IBCNEHLQ",95,0)
 ;
"RTN","IBCNEHLQ",96,0)
 I GT1="" Q
"RTN","IBCNEHLQ",97,0)
 S $P(GT1,HLFS,1)=1
"RTN","IBCNEHLQ",98,0)
 S GT1="GT1"_HLFS_GT1
"RTN","IBCNEHLQ",99,0)
 Q
"RTN","IBCNEHLQ",100,0)
 ;
"RTN","IBCNEHLQ",101,0)
IN1 ;  Insurance Segment
"RTN","IBCNEHLQ",102,0)
 N EFFDT,ELIGDT,EXPDT,PREL,ADMN,ADMDT,IENS
"RTN","IBCNEHLQ",103,0)
 S IN1=""
"RTN","IBCNEHLQ",104,0)
 ;
"RTN","IBCNEHLQ",105,0)
 ;  If the data was extracted from Buffer get specifics from Buffer file
"RTN","IBCNEHLQ",106,0)
 I EXT=1 D
"RTN","IBCNEHLQ",107,0)
 .S PREL=$P($G(^IBA(355.33,BUFF,60)),U,14)
"RTN","IBCNEHLQ",108,0)
 .S ELIGDT=$P($G(TRANSR),U,12) I ELIGDT=DT S ELIGDT=""
"RTN","IBCNEHLQ",109,0)
 .S $P(IN1,HLFS,2)=$S(PREL=18:$$SCRUB($G(SUBID)),PREL="":$$SCRUB($G(SUBID)),1:$$SCRUB($G(PATID)))
"RTN","IBCNEHLQ",110,0)
 .I PAYR'=$$FIND1^DIC(365.12,"","X","~NO PAYER") D
"RTN","IBCNEHLQ",111,0)
 ..S $P(IN1,HLFS,3)=$$ENCHL7($P(^IBE(365.12,PAYR,0),U,2))_HLECH_HLECH_HLECH_"USVHA"_HLECH_"VP"_HLECH
"RTN","IBCNEHLQ",112,0)
 ..S $P(IN1,HLFS,4)=$$ENCHL7($P(^IBE(365.12,PAYR,0),U,1))
"RTN","IBCNEHLQ",113,0)
 .S $P(IN1,HLFS,8)=$$ENCHL7($P($G(^IBA(355.33,BUFF,40)),U,3))
"RTN","IBCNEHLQ",114,0)
 .S $P(IN1,HLFS,9)=$$ENCHL7($P($G(^IBA(355.33,BUFF,40)),U,2))
"RTN","IBCNEHLQ",115,0)
 .S EFFDT=$P($G(^IBA(355.33,BUFF,60)),U,2),EFFDT=$$HLDATE^HLFNC(EFFDT)
"RTN","IBCNEHLQ",116,0)
 .S EXPDT=$P($G(^IBA(355.33,BUFF,60)),U,3),EXPDT=$$HLDATE^HLFNC(EXPDT)
"RTN","IBCNEHLQ",117,0)
 .S $P(IN1,HLFS,12)=EFFDT
"RTN","IBCNEHLQ",118,0)
 .S $P(IN1,HLFS,13)=EXPDT
"RTN","IBCNEHLQ",119,0)
 .S $P(IN1,HLFS,17)=$$PATREL(PREL)
"RTN","IBCNEHLQ",120,0)
 .S $P(IN1,HLFS,26)=$$HLDATE^HLFNC(ELIGDT)
"RTN","IBCNEHLQ",121,0)
 ;
"RTN","IBCNEHLQ",122,0)
 ;  If the data was extracted from non-Buffer, check Patient file
"RTN","IBCNEHLQ",123,0)
 I EXT'=1 D
"RTN","IBCNEHLQ",124,0)
 . I IRIEN="" Q
"RTN","IBCNEHLQ",125,0)
 . I $$SCRUB($G(SUBID))'=$$SCRUB($P($G(^DPT(DFN,.312,IRIEN,0)),U,2)) Q
"RTN","IBCNEHLQ",126,0)
 . S EFFDT=$P($G(^DPT(DFN,.312,IRIEN,0)),U,8),EFFDT=$$HLDATE^HLFNC(EFFDT)
"RTN","IBCNEHLQ",127,0)
 . S EXPDT=$P($G(^DPT(DFN,.312,IRIEN,0)),U,4),EXPDT=$$HLDATE^HLFNC(EXPDT)
"RTN","IBCNEHLQ",128,0)
 . S $P(IN1,HLFS,12)=EFFDT
"RTN","IBCNEHLQ",129,0)
 . S $P(IN1,HLFS,13)=EXPDT
"RTN","IBCNEHLQ",130,0)
 . S PREL=$P($G(^DPT(DFN,.312,IRIEN,4)),U,3)
"RTN","IBCNEHLQ",131,0)
 . S $P(IN1,HLFS,2)=$S(PREL=18:$$SCRUB($G(SUBID)),PREL="":$$SCRUB($G(SUBID)),1:$$SCRUB($G(PATID)))
"RTN","IBCNEHLQ",132,0)
 . I PAYR'=$$FIND1^DIC(365.12,"","X","~NO PAYER") D
"RTN","IBCNEHLQ",133,0)
 .. S $P(IN1,HLFS,3)=$$ENCHL7($P(^IBE(365.12,PAYR,0),U,2))_HLECH_HLECH_HLECH_"USVHA"_HLECH_"VP"_HLECH
"RTN","IBCNEHLQ",134,0)
 .. S $P(IN1,HLFS,4)=$$ENCHL7($P(^IBE(365.12,PAYR,0),U,1))
"RTN","IBCNEHLQ",135,0)
 . S $P(IN1,HLFS,17)=$$PATREL(PREL)
"RTN","IBCNEHLQ",136,0)
 . S IENS=IRIEN_","_DFN_","
"RTN","IBCNEHLQ",137,0)
 . S $P(IN1,HLFS,8)=$$ENCHL7($$GET1^DIQ(2.312,IENS,21,"E"))
"RTN","IBCNEHLQ",138,0)
 . S $P(IN1,HLFS,9)=$$ENCHL7($$GET1^DIQ(2.312,IENS,20,"E"))
"RTN","IBCNEHLQ",139,0)
 ;
"RTN","IBCNEHLQ",140,0)
 I IN1="" Q
"RTN","IBCNEHLQ",141,0)
 ;
"RTN","IBCNEHLQ",142,0)
 I $P(IN1,HLFS,17)="" S $P(IN1,HLFS,17)=18
"RTN","IBCNEHLQ",143,0)
 S $P(IN1,HLFS,1)=1
"RTN","IBCNEHLQ",144,0)
 S IN1="IN1"_HLFS_IN1
"RTN","IBCNEHLQ",145,0)
 Q
"RTN","IBCNEHLQ",146,0)
 ;
"RTN","IBCNEHLQ",147,0)
NTE ;  NTE Segment
"RTN","IBCNEHLQ",148,0)
 ; TRANSR is 0 node of TQ, set in PROC^IBCNEDEP
"RTN","IBCNEHLQ",149,0)
 S NTE=$$EXTERNAL^DILFD(365.1,.2,,$P($G(TRANSR),U,20)) ; service code from 365.1/.2
"RTN","IBCNEHLQ",150,0)
 S NTE="NTE"_HLFS_HLFS_HLFS_NTE
"RTN","IBCNEHLQ",151,0)
 Q
"RTN","IBCNEHLQ",152,0)
 ;
"RTN","IBCNEHLQ",153,0)
CHK ;  Check for spouse or other information in the Patient Relation File
"RTN","IBCNEHLQ",154,0)
 ;  DGREL = Relationship (1=Self, 2=Spouse, 3-34,99=Other)
"RTN","IBCNEHLQ",155,0)
 NEW IEN,QFL
"RTN","IBCNEHLQ",156,0)
 S IEN="",RLIEN="",ISEX="",QFL=0
"RTN","IBCNEHLQ",157,0)
 F  S IEN=$O(^DGPR(408.12,"B",DFN,IEN)) Q:IEN=""  D  Q:QFL
"RTN","IBCNEHLQ",158,0)
 . S DGREL=$P($G(^DGPR(408.12,IEN,0)),U,2)
"RTN","IBCNEHLQ",159,0)
 . ;
"RTN","IBCNEHLQ",160,0)
 . ;  If person is veteran, quit
"RTN","IBCNEHLQ",161,0)
 . I DGREL=1 Q
"RTN","IBCNEHLQ",162,0)
 . ;
"RTN","IBCNEHLQ",163,0)
 . ;  If person is spouse, pick that record and quit
"RTN","IBCNEHLQ",164,0)
 . I WHO="s",DGREL=2 S RLIEN=IEN,QFL=1 Q
"RTN","IBCNEHLQ",165,0)
 . ;
"RTN","IBCNEHLQ",166,0)
 . ;  Otherwise it should be an 'other' dependent
"RTN","IBCNEHLQ",167,0)
 . S RLIEN=IEN
"RTN","IBCNEHLQ",168,0)
 ;
"RTN","IBCNEHLQ",169,0)
 I RLIEN="" Q
"RTN","IBCNEHLQ",170,0)
 ;
"RTN","IBCNEHLQ",171,0)
 ;  Check for Sex, SSN, DOB in INCOME PERSON File
"RTN","IBCNEHLQ",172,0)
 S PER=$P(^DGPR(408.12,RLIEN,0),U,3)
"RTN","IBCNEHLQ",173,0)
 I PER'["DGPR(408.13" Q
"RTN","IBCNEHLQ",174,0)
 S PLIEN=$P(PER,";",1)
"RTN","IBCNEHLQ",175,0)
 I PLIEN="" Q
"RTN","IBCNEHLQ",176,0)
 S RDATA=$G(^DGPR(408.13,PLIEN,0)),ISEX=$P(RDATA,U,2),IDOB=$P(RDATA,U,3)
"RTN","IBCNEHLQ",177,0)
 I $P(RDATA,U,4)'="" N DFN S DFN=$P(RDATA,U,4),ISEX=$P(^DPT(DFN,0),U,2),IDOB=$P(^DPT(DFN,0),U,3)
"RTN","IBCNEHLQ",178,0)
 Q
"RTN","IBCNEHLQ",179,0)
 ;
"RTN","IBCNEHLQ",180,0)
ENCHL7(STR) ; Encode HL7 escape seqs in data fields
"RTN","IBCNEHLQ",181,0)
 ;
"RTN","IBCNEHLQ",182,0)
 ; Input:
"RTN","IBCNEHLQ",183,0)
 ; STR = Field data possible containing HL7 encoding chars
"RTN","IBCNEHLQ",184,0)
 ;
"RTN","IBCNEHLQ",185,0)
 ; Output Values
"RTN","IBCNEHLQ",186,0)
 ; Fn returns string w/converted escape seqs
"RTN","IBCNEHLQ",187,0)
 ;
"RTN","IBCNEHLQ",188,0)
 N CHR,NEW,RPLC,CNT,LOOP
"RTN","IBCNEHLQ",189,0)
 ;
"RTN","IBCNEHLQ",190,0)
 ; Replace "\" "&" "~" "|" with \F\ \R\ \E\ \T\ respectively
"RTN","IBCNEHLQ",191,0)
 F CHR="\","&","~","|" S CNT=$L(STR,CHR) I CNT>1 D
"RTN","IBCNEHLQ",192,0)
 . S NEW=$P(STR,CHR)
"RTN","IBCNEHLQ",193,0)
 . S RPLC="\"_$TR(CHR,"|~\&","FRET")_"\"
"RTN","IBCNEHLQ",194,0)
 . F LOOP=2:1:CNT S NEW=NEW_RPLC_$P(STR,CHR,LOOP)
"RTN","IBCNEHLQ",195,0)
 . S STR=NEW
"RTN","IBCNEHLQ",196,0)
 ;
"RTN","IBCNEHLQ",197,0)
 Q STR
"RTN","IBCNEHLQ",198,0)
 ;
"RTN","IBCNEHLQ",199,0)
SCRUB(Z) ; remove all punctuation from the string and convert lowercase to uppercase
"RTN","IBCNEHLQ",200,0)
 ; IB*2*416 - used for subscriber and patient ID fields
"RTN","IBCNEHLQ",201,0)
 S Z=$$NOPUNCT^IBCEF(Z,1)
"RTN","IBCNEHLQ",202,0)
 S Z=$$UP^XLFSTR(Z)
"RTN","IBCNEHLQ",203,0)
SCRUBX ;
"RTN","IBCNEHLQ",204,0)
 Q Z
"RTN","IBCNEHLQ",205,0)
 ;
"RTN","IBCNEHLQ",206,0)
PATREL(REL) ; convert pat.relationship to insured from VistA to X12 and return X12 value
"RTN","IBCNEHLQ",207,0)
 ; REL - VistA value
"RTN","IBCNEHLQ",208,0)
 ; 
"RTN","IBCNEHLQ",209,0)
 ; VistA values of Self (18), Spouse (01), and Child (19) remain unchanged,
"RTN","IBCNEHLQ",210,0)
 ; anything else is converted to X12 value of Other Adult (34)
"RTN","IBCNEHLQ",211,0)
 ;
"RTN","IBCNEHLQ",212,0)
 Q $S($G(REL)="":"",".01.18.19."[("."_REL_"."):REL,1:34)
"RTN","IBCNEHLU")
0^13^B88168048^B53561238
"RTN","IBCNEHLU",1,0)
IBCNEHLU ;DAOU/ALA - HL7 Utilities ;10-JUN-2002  ; Compiled December 16, 2004 15:36:12
"RTN","IBCNEHLU",2,0)
 ;;2.0;INTEGRATED BILLING;**184,300,416,438,497**;21-MAR-94;Build 120
"RTN","IBCNEHLU",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHLU",4,0)
 ;
"RTN","IBCNEHLU",5,0)
HLP(PROTOCOL) ;  Find the Protocol IEN
"RTN","IBCNEHLU",6,0)
 Q +$O(^ORD(101,"B",PROTOCOL,0))
"RTN","IBCNEHLU",7,0)
 ;
"RTN","IBCNEHLU",8,0)
NAME(NM) ;  Convert a name that isn't in standard VISTA format -
"RTN","IBCNEHLU",9,0)
 NEW LNM,FNM,MI
"RTN","IBCNEHLU",10,0)
 ;
"RTN","IBCNEHLU",11,0)
 I NM?." " Q NM
"RTN","IBCNEHLU",12,0)
 ;  LastName,FirstName MI
"RTN","IBCNEHLU",13,0)
 I NM["," Q NM
"RTN","IBCNEHLU",14,0)
 ;
"RTN","IBCNEHLU",15,0)
 ; Remove double-spaces from name
"RTN","IBCNEHLU",16,0)
 F  Q:$L(NM,"  ")<2  S NM=$P(NM,"  ",1)_" "_$P(NM,"  ",2,9999)
"RTN","IBCNEHLU",17,0)
 ;
"RTN","IBCNEHLU",18,0)
 ; Trim leading/trailing spaces
"RTN","IBCNEHLU",19,0)
 S NM=$$TRIM^XLFSTR(NM)
"RTN","IBCNEHLU",20,0)
 ;
"RTN","IBCNEHLU",21,0)
 ; Find number of spaces in name
"RTN","IBCNEHLU",22,0)
 S II=$L(NM," ")
"RTN","IBCNEHLU",23,0)
 ;
"RTN","IBCNEHLU",24,0)
 I II>3 Q NM
"RTN","IBCNEHLU",25,0)
 I II=3 S FNM=$P(NM," ",1),MI=" "_$P(NM," ",2),LNM=$P(NM," ",3)
"RTN","IBCNEHLU",26,0)
 I II=2 S FNM=$P(NM," ",1),LNM=$P(NM," ",2),MI=""
"RTN","IBCNEHLU",27,0)
 I II<2 Q NM
"RTN","IBCNEHLU",28,0)
 Q LNM_","_FNM_MI
"RTN","IBCNEHLU",29,0)
 ;
"RTN","IBCNEHLU",30,0)
DODCK(DFN,DOD,MGRP,NAME,RIEN,SSN) ;  Date of death check
"RTN","IBCNEHLU",31,0)
 ;
"RTN","IBCNEHLU",32,0)
 ; Input Variables
"RTN","IBCNEHLU",33,0)
 ; DFN, DOD, MGRP, NAME, RIEN, SSN
"RTN","IBCNEHLU",34,0)
 ;
"RTN","IBCNEHLU",35,0)
 N CDOD,CIDDSP,IDDSP,IDSSN,MSG,XMSUB
"RTN","IBCNEHLU",36,0)
 S CDOD=$P($G(^DPT(DFN,.35)),U,1),CIDDSP=$$FMTE^XLFDT(CDOD,"5Z")
"RTN","IBCNEHLU",37,0)
 S IDDSP=$$FMTE^XLFDT(DOD,"5Z")
"RTN","IBCNEHLU",38,0)
 S IDSSN=$E(SSN,$L(SSN)-3,$L(SSN))
"RTN","IBCNEHLU",39,0)
 ;
"RTN","IBCNEHLU",40,0)
 ; If the two dates of death are the same, quit
"RTN","IBCNEHLU",41,0)
 I CDOD=DOD G DODCKX
"RTN","IBCNEHLU",42,0)
 ;
"RTN","IBCNEHLU",43,0)
 ;  If no current date of death but payer sent one
"RTN","IBCNEHLU",44,0)
 I CDOD="" D  G DODCKX
"RTN","IBCNEHLU",45,0)
 . ;  Send an email message
"RTN","IBCNEHLU",46,0)
 . S XMSUB="Date of Death Received"
"RTN","IBCNEHLU",47,0)
 . S MSG(1)="A Date of Death ("_IDDSP_") was received for patient: "_NAME_"/"_IDSSN_" "_$$GETDOB^IBCNEDEQ(DFN)_" from"
"RTN","IBCNEHLU",48,0)
 . S MSG(2)="payer "_$$GET1^DIQ(365,RIEN,.03,"E")_".  There is no current Date of Death on file for "
"RTN","IBCNEHLU",49,0)
 . S MSG(3)="this patient."
"RTN","IBCNEHLU",50,0)
 . D TXT^IBCNEUT7("MSG")
"RTN","IBCNEHLU",51,0)
 . D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHLU",52,0)
 ;
"RTN","IBCNEHLU",53,0)
 S XMSUB="Variant Date of Death"
"RTN","IBCNEHLU",54,0)
 S MSG(1)="A Date of Death ("_IDDSP_") was received for patient: "_NAME_"/"_IDSSN_" "_$$GETDOB^IBCNEDEQ(DFN)_" from payer "_$$GET1^DIQ(365,RIEN,.03,"E")_"."
"RTN","IBCNEHLU",55,0)
 S MSG(2)="This Date of Death does not currently match the Date of Death ("_CIDDSP_") on file for this patient. "
"RTN","IBCNEHLU",56,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEHLU",57,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHLU",58,0)
DODCKX   ;
"RTN","IBCNEHLU",59,0)
 Q
"RTN","IBCNEHLU",60,0)
 ;
"RTN","IBCNEHLU",61,0)
SPAR     ;  Segment Parsing
"RTN","IBCNEHLU",62,0)
 ;
"RTN","IBCNEHLU",63,0)
 ; This tag will parse the current segment referenced by the HCT index
"RTN","IBCNEHLU",64,0)
 ; and place the results in the IBSEG array.
"RTN","IBCNEHLU",65,0)
 ;
"RTN","IBCNEHLU",66,0)
 ; Input Variables
"RTN","IBCNEHLU",67,0)
 ; HCT
"RTN","IBCNEHLU",68,0)
 ;
"RTN","IBCNEHLU",69,0)
 ; Output Variables
"RTN","IBCNEHLU",70,0)
 ; IBSEG (ARRAY of fields in segment)
"RTN","IBCNEHLU",71,0)
 ;
"RTN","IBCNEHLU",72,0)
 N II,IJ,IK,IM,IS,ISBEG,ISCT,ISDATA,ISEND,ISPEC,LSDATA,NPC
"RTN","IBCNEHLU",73,0)
 ;
"RTN","IBCNEHLU",74,0)
 ;Reset IBSEG
"RTN","IBCNEHLU",75,0)
 K IBSEG
"RTN","IBCNEHLU",76,0)
 ;
"RTN","IBCNEHLU",77,0)
 S ISCT="",II=0,IS=0
"RTN","IBCNEHLU",78,0)
 F  S ISCT=$O(^TMP($J,"IBCNEHLI",HCT,ISCT)) Q:ISCT=""  D
"RTN","IBCNEHLU",79,0)
 . S IS=IS+1
"RTN","IBCNEHLU",80,0)
 . S ISDATA(IS)=$G(^TMP($J,"IBCNEHLI",HCT,ISCT))
"RTN","IBCNEHLU",81,0)
 . I $O(^TMP($J,"IBCNEHLI",HCT,ISCT))="" S ISDATA(IS)=ISDATA(IS)_HLFS
"RTN","IBCNEHLU",82,0)
 . S ISPEC(IS)=$L(ISDATA(IS),HLFS)
"RTN","IBCNEHLU",83,0)
 ;
"RTN","IBCNEHLU",84,0)
 S IM=0,LSDATA=""
"RTN","IBCNEHLU",85,0)
LP S IM=IM+1 Q:IM>IS
"RTN","IBCNEHLU",86,0)
 S LSDATA=LSDATA_ISDATA(IM),NPC=ISPEC(IM)
"RTN","IBCNEHLU",87,0)
 F IJ=1:1:NPC-1 D
"RTN","IBCNEHLU",88,0)
 . S II=II+1,IBSEG(II)=$$CLNSTR($P(LSDATA,HLFS,IJ),$E(HL("ECH"),1,2)_$E(HL("ECH"),4),$E(HL("ECH")))
"RTN","IBCNEHLU",89,0)
 S LSDATA=$P(LSDATA,HLFS,NPC)
"RTN","IBCNEHLU",90,0)
 G LP
"RTN","IBCNEHLU",91,0)
CLNSTR(STRING,CHARS,SUBSEP)      ; Remove extra trailing components and subcomponents in the HL7 seg
"RTN","IBCNEHLU",92,0)
 ;
"RTN","IBCNEHLU",93,0)
 N NUMPEC,PEC,RTSTRING
"RTN","IBCNEHLU",94,0)
 ;
"RTN","IBCNEHLU",95,0)
 S RTSTRING=$$RTRIMCH(STRING,CHARS)
"RTN","IBCNEHLU",96,0)
 ; Now we have string w/o trailing chars, remove from subs
"RTN","IBCNEHLU",97,0)
 S NUMPEC=$L(RTSTRING,SUBSEP)
"RTN","IBCNEHLU",98,0)
 F PEC=1:1:NUMPEC S $P(RTSTRING,SUBSEP,PEC)=$$RTRIMCH($P(RTSTRING,SUBSEP,PEC),CHARS)
"RTN","IBCNEHLU",99,0)
 Q RTSTRING
"RTN","IBCNEHLU",100,0)
 ;
"RTN","IBCNEHLU",101,0)
RTRIMCH(STR,CHRS) ; Remove the trailing chars from string
"RTN","IBCNEHLU",102,0)
 ;
"RTN","IBCNEHLU",103,0)
 N R,L
"RTN","IBCNEHLU",104,0)
 ;
"RTN","IBCNEHLU",105,0)
 S L=1,CHRS=$G(CHRS," ")
"RTN","IBCNEHLU",106,0)
 F R=$L(STR):-1:1 Q:CHRS'[$E(STR,R)
"RTN","IBCNEHLU",107,0)
 I L=R,(CHRS[$E(STR)) S STR=""
"RTN","IBCNEHLU",108,0)
 Q $E(STR,L,R)
"RTN","IBCNEHLU",109,0)
 ;
"RTN","IBCNEHLU",110,0)
 ;
"RTN","IBCNEHLU",111,0)
GTICNM(ICN,NAME) ; Retrieve PID segment and set ICN and patient name
"RTN","IBCNEHLU",112,0)
 ;
"RTN","IBCNEHLU",113,0)
 N HCT,ERFLG,SEG,IBSEG
"RTN","IBCNEHLU",114,0)
 S (HCT,ICN,NAME)="",ERFLG=0
"RTN","IBCNEHLU",115,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:ERFLG
"RTN","IBCNEHLU",116,0)
 .  D SPAR
"RTN","IBCNEHLU",117,0)
 .  S SEG=$G(IBSEG(1)) Q:SEG'="PID"
"RTN","IBCNEHLU",118,0)
 .  S ICN=$G(IBSEG(4)),NAME=$G(IBSEG(6)),ERFLG=1
"RTN","IBCNEHLU",119,0)
 Q
"RTN","IBCNEHLU",120,0)
 ;
"RTN","IBCNEHLU",121,0)
PATISSUB(IDATA0) ; check if patient is the subscriber
"RTN","IBCNEHLU",122,0)
 ; IDATA0 - 0 node of file 2.312
"RTN","IBCNEHLU",123,0)
 ;
"RTN","IBCNEHLU",124,0)
 ; returns 1 if patient is the subscriber, 0 otherwise
"RTN","IBCNEHLU",125,0)
 ;
"RTN","IBCNEHLU",126,0)
 N PREL,RES
"RTN","IBCNEHLU",127,0)
 S RES=0
"RTN","IBCNEHLU",128,0)
 ; check field 2.312/16 first
"RTN","IBCNEHLU",129,0)
 S PREL=$P(IDATA0,U,16) I PREL'="" S:PREL="01" RES=1 Q RES
"RTN","IBCNEHLU",130,0)
 ; if 2.312/16 is empty, try field 2.312/6
"RTN","IBCNEHLU",131,0)
 I $P(IDATA0,U,6)="v" S RES=1
"RTN","IBCNEHLU",132,0)
 Q RES
"RTN","IBCNEHLU",133,0)
 ;
"RTN","IBCNEHLU",134,0)
ONEPOL(PIEN,IEN2) ; check if patient has only one policy on file for a given payer
"RTN","IBCNEHLU",135,0)
 ; PIEN - payer ien
"RTN","IBCNEHLU",136,0)
 ; IEN2 - patient ien (file 2)
"RTN","IBCNEHLU",137,0)
 ;
"RTN","IBCNEHLU",138,0)
 ; returns 1 if only one policy is found, 0 otherwise
"RTN","IBCNEHLU",139,0)
 N CNT,IEN36,IEN312,RES
"RTN","IBCNEHLU",140,0)
 S (CNT,RES)=0
"RTN","IBCNEHLU",141,0)
 I +$G(PIEN)'>0!(+$G(IEN2)'>0) Q RES
"RTN","IBCNEHLU",142,0)
 S IEN36="" F  S IEN36=$O(^DIC(36,"AC",PIEN,IEN36)) Q:IEN36=""  D
"RTN","IBCNEHLU",143,0)
 .S IEN312="" F  S IEN312=$O(^DPT(IEN2,.312,"B",IEN36,IEN312)) Q:IEN312=""  S CNT=CNT+1
"RTN","IBCNEHLU",144,0)
 .Q
"RTN","IBCNEHLU",145,0)
 I CNT=1 S RES=1
"RTN","IBCNEHLU",146,0)
 Q RES
"RTN","IBCNEHLU",147,0)
 ;
"RTN","IBCNEHLU",148,0)
MCRDT(RIEN,EBIEN) ; find effective date for Medicare response
"RTN","IBCNEHLU",149,0)
 ; RIEN - file 365 ien
"RTN","IBCNEHLU",150,0)
 ; EBIEN - subfile 365.02 ien
"RTN","IBCNEHLU",151,0)
 ;
"RTN","IBCNEHLU",152,0)
 ; returns date in FM format or "" if effective date was not found
"RTN","IBCNEHLU",153,0)
 ;
"RTN","IBCNEHLU",154,0)
 N DONE,DTIEN,IENS,RES,Z
"RTN","IBCNEHLU",155,0)
 S RES="",DONE=0
"RTN","IBCNEHLU",156,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,2,EBIEN,8,"B",Z)) Q:Z=""!DONE  D
"RTN","IBCNEHLU",157,0)
 .S DTIEN=$O(^IBCN(365,RIEN,2,EBIEN,8,"B",Z,"")) I 'DTIEN Q
"RTN","IBCNEHLU",158,0)
 .S IENS=DTIEN_","_EBIEN_","_RIEN_","
"RTN","IBCNEHLU",159,0)
 .; effective date has "eligibility" qualifier
"RTN","IBCNEHLU",160,0)
 .I $$GET1^DIQ(365.28,IENS,.03)=307 S RES=$$FMDATE^HLFNC($$GET1^DIQ(365.28,IENS,.02)),DONE=1
"RTN","IBCNEHLU",161,0)
 .Q
"RTN","IBCNEHLU",162,0)
 Q RES
"RTN","IBCNEHLU",163,0)
 ;
"RTN","IBCNEHLU",164,0)
ISMCR(RIEN) ; check if response is for Medicare part A/B
"RTN","IBCNEHLU",165,0)
 ; RIEN - file 365 ien
"RTN","IBCNEHLU",166,0)
 ;
"RTN","IBCNEHLU",167,0)
 ; returns a four piece string:
"RTN","IBCNEHLU",168,0)
 ;   piece 1 = 1 if response if for Medicare, 0 otherwise
"RTN","IBCNEHLU",169,0)
 ;   piece 2 = "MA" if response is for Medicare Part A
"RTN","IBCNEHLU",170,0)
 ;           = "MB" if response is for Medicare Part B
"RTN","IBCNEHLU",171,0)
 ;           = "B" if response is for both Part A and Part B
"RTN","IBCNEHLU",172,0)
 ;           = "" if response if not for Medicare
"RTN","IBCNEHLU",173,0)
 ;   piece 3 = effective date for Medicare Part A if response if for Part A or both parts, "" otherwise
"RTN","IBCNEHLU",174,0)
 ;   piece 4 = effective date for Medicare Part B if response if for Part B or both parts, "" otherwise
"RTN","IBCNEHLU",175,0)
 ;
"RTN","IBCNEHLU",176,0)
 N DONE,EBIEN,RES,TYPE,Z
"RTN","IBCNEHLU",177,0)
 S RES="0^",DONE=0
"RTN","IBCNEHLU",178,0)
 I +RIEN'>0 Q RES
"RTN","IBCNEHLU",179,0)
 I '$D(^IBCN(365,RIEN)) Q RES
"RTN","IBCNEHLU",180,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,2,"B",Z)) Q:Z=""!DONE  D
"RTN","IBCNEHLU",181,0)
 .S EBIEN=$O(^IBCN(365,RIEN,2,"B",Z,"")),TYPE=$$GET1^DIQ(365.02,EBIEN_","_RIEN_",",.05)
"RTN","IBCNEHLU",182,0)
 .I TYPE="MA" S $P(RES,U)=1,$P(RES,U,2)=$S($P(RES,U,2)="":"MA",1:"B"),$P(RES,U,3)=$$MCRDT(RIEN,EBIEN)
"RTN","IBCNEHLU",183,0)
 .I TYPE="MB" S $P(RES,U)=1,$P(RES,U,2)=$S($P(RES,U,2)="":"MB",1:"B"),$P(RES,U,4)=$$MCRDT(RIEN,EBIEN)
"RTN","IBCNEHLU",184,0)
 .I $P(RES,U,2)="B" S DONE=1
"RTN","IBCNEHLU",185,0)
 .Q
"RTN","IBCNEHLU",186,0)
 Q RES
"RTN","IBCNEHLU",187,0)
 ;
"RTN","IBCNEHLU",188,0)
ERRACT(RIEN) ; pick error action code to use for re-transmission
"RTN","IBCNEHLU",189,0)
 ; RIEN - ien in file 365
"RTN","IBCNEHLU",190,0)
 ;
"RTN","IBCNEHLU",191,0)
 ; returns "error action ^ error condition" string
"RTN","IBCNEHLU",192,0)
 ;
"RTN","IBCNEHLU",193,0)
 ; If any of C,N,S,Y action codes are found, the  first one encountered is returned.
"RTN","IBCNEHLU",194,0)
 ; Otherwise, if W action code is found, it is returned.
"RTN","IBCNEHLU",195,0)
 ; Otherwise, if X action code is found, it is returned.
"RTN","IBCNEHLU",196,0)
 ; Otherwise, one of the P,R action codes is returned.
"RTN","IBCNEHLU",197,0)
 ;
"RTN","IBCNEHLU",198,0)
 N ACODE,AIEN,ECCODE,ECIEN,DONE,IEN,RES,Z
"RTN","IBCNEHLU",199,0)
 S RES="" I '+$G(RIEN) G ERRACTX
"RTN","IBCNEHLU",200,0)
 S DONE=0
"RTN","IBCNEHLU",201,0)
 S Z="" F  S IEN=$O(^IBCN(365,RIEN,6,"B",Z)) Q:Z=""!DONE  D
"RTN","IBCNEHLU",202,0)
 .S IEN=+$O(^IBCN(365,RIEN,6,"B",Z,"")) I 'IEN Q
"RTN","IBCNEHLU",203,0)
 .S ECIEN=+$P(^IBCN(365,RIEN,6,IEN,0),U,3) I 'ECIEN Q
"RTN","IBCNEHLU",204,0)
 .S AIEN=+$P(^IBCN(365,RIEN,6,IEN,0),U,4) I 'AIEN Q
"RTN","IBCNEHLU",205,0)
 .S ACODE=$P(^IBE(365.018,AIEN,0),U),ECCODE=$P(^IBE(365.017,ECIEN,0),U)
"RTN","IBCNEHLU",206,0)
 .I ".C.N.S.Y"[("."_ACODE_".") S RES=ACODE_U_ECCODE,DONE=1 Q  ; one of "do not retransmit" codes
"RTN","IBCNEHLU",207,0)
 .I ACODE="W" S RES=ACODE_U_ECCODE Q  ; "retransmit after 30 days" code
"RTN","IBCNEHLU",208,0)
 .I ACODE="X" S:RES'="W" RES=ACODE_U_ECCODE Q  ; "retransmit after 10 days" code
"RTN","IBCNEHLU",209,0)
 .I RES'="W",RES'="X" S RES=ACODE_U_ECCODE  ; "retransmit whenever" codes
"RTN","IBCNEHLU",210,0)
 .Q
"RTN","IBCNEHLU",211,0)
ERRACTX  ;
"RTN","IBCNEHLU",212,0)
 Q RES
"RTN","IBCNEHLU",213,0)
 ;
"RTN","IBCNEHLU",214,0)
NAMECMP(NAME1,NAME2) ; check if 2 names have the same first name and last name components
"RTN","IBCNEHLU",215,0)
 ; NAME1, NAME2 - names to compare, should be in "last,first [middle]" format
"RTN","IBCNEHLU",216,0)
 ;
"RTN","IBCNEHLU",217,0)
 ; returns 1 if both first name and last name are the same between two names, returns 0 otherwise
"RTN","IBCNEHLU",218,0)
 N NM1,NM2,RES
"RTN","IBCNEHLU",219,0)
 S RES=0
"RTN","IBCNEHLU",220,0)
 S NM1=$$HLNAME^HLFNC(NAME1),NM2=$$HLNAME^HLFNC(NAME2)
"RTN","IBCNEHLU",221,0)
 I $P(NM1,U)=$P(NM2,U),$P(NM1,U,2)=$P(NM2,U,2) S RES=1
"RTN","IBCNEHLU",222,0)
 Q RES
"RTN","IBCNEHLU",223,0)
 ;
"RTN","IBCNEHLU",224,0)
TRNCWARN(GNUM,TRACE) ; send group number truncation warning message
"RTN","IBCNEHLU",225,0)
 N MSG
"RTN","IBCNEHLU",226,0)
 S MSG(1)="WARNING: Group number in the Response Message from the EC has been truncated"
"RTN","IBCNEHLU",227,0)
 S MSG(2)="----------------------------------------------------------------------------"
"RTN","IBCNEHLU",228,0)
 S MSG(3)="Original group number (in the eIV response received): "_$G(GNUM)
"RTN","IBCNEHLU",229,0)
 S MSG(4)="Truncated group number (filed into response file): "_$E($G(GNUM),1,17)
"RTN","IBCNEHLU",230,0)
 S MSG(5)=" "
"RTN","IBCNEHLU",231,0)
 S MSG(6)="The associated Trace # is "_$S($G(TRACE)="":"Unknown",1:TRACE)
"RTN","IBCNEHLU",232,0)
 S MSG(7)=" "
"RTN","IBCNEHLU",233,0)
 D MSG^IBCNEUT5($G(MGRP),MSG(1),"MSG(")
"RTN","IBCNEHLU",234,0)
 Q
"RTN","IBCNEHLU",235,0)
 ;
"RTN","IBCNEHLU",236,0)
CODECHK(RSUPDT) ;  IB*2*497
"RTN","IBCNEHLU",237,0)
 ; need to determine if codes and qualifiers sent in the 271 HL7 message
"RTN","IBCNEHLU",238,0)
 ; are new.  If code/qualifier does not exist in table then file new code into table 
"RTN","IBCNEHLU",239,0)
 ; input -
"RTN","IBCNEHLU",240,0)
 ; RSUPDT = FDA array that will be passed to the DBS filer to update the 
"RTN","IBCNEHLU",241,0)
 ;          entry/subentry into the IIV RESPONSE file
"RTN","IBCNEHLU",242,0)
 ; example: RSUPDT(365.02,IENS,".02") = data to be filed into 365.02 subfile at field .02
"RTN","IBCNEHLU",243,0)
 ; order through the RSUPDT array and determine if pointer to file
"RTN","IBCNEHLU",244,0)
 ; if pointer to file then pass file name and value of code/qualifier
"RTN","IBCNEHLU",245,0)
 N IENS,FLD,FILE,RES,TOFILE,NEWARRY,Z,ZIENS
"RTN","IBCNEHLU",246,0)
 S (IENS,FILE,FLD)="",Z=0
"RTN","IBCNEHLU",247,0)
 F  S FILE=$O(RSUPDT(FILE)) Q:FILE=""  F  S IENS=$O(RSUPDT(FILE,IENS))  Q:IENS=""  D
"RTN","IBCNEHLU",248,0)
 . F  S FLD=$O(RSUPDT(FILE,IENS,FLD)) Q:FLD=""  D
"RTN","IBCNEHLU",249,0)
 . . Q:RSUPDT(FILE,IENS,FLD)=""   ; value was not sent by payer; no need to continue
"RTN","IBCNEHLU",250,0)
 . . D FIELD^DID(FILE,FLD,"","POINTER","RES") ; get the name of the file that is pointed to (if any)
"RTN","IBCNEHLU",251,0)
 . . Q:RES("POINTER")=""  ; field is not defined as a pointer to a file
"RTN","IBCNEHLU",252,0)
 . . S TOFILE=$P($P(RES("POINTER"),","),"(",2)  ; example: RES("POINTER")="IBE(365.011,"
"RTN","IBCNEHLU",253,0)
 . . Q:+TOFILE=0
"RTN","IBCNEHLU",254,0)
 . . Q:$$FIND1^DIC(TOFILE,"","X",RSUPDT(FILE,IENS,FLD))  ; code is already in file.  No need to update the pointed-to-file
"RTN","IBCNEHLU",255,0)
 . . S Z=Z+1,ZIENS="+"_Z_","
"RTN","IBCNEHLU",256,0)
 . . S NEWARRY(TOFILE,ZIENS,.01)=RSUPDT(FILE,IENS,FLD) ; code passed into VistA from 271 message
"RTN","IBCNEHLU",257,0)
 . . S NEWARRY(TOFILE,ZIENS,.02)="OTHER"  ; Description of code
"RTN","IBCNEHLU",258,0)
 . . S NEWARRY(TOFILE,ZIENS,.03)=0   ; INACTIVE FLAG
"RTN","IBCNEHLU",259,0)
 I $D(NEWARRY) D UPDATE^DIE("","NEWARRY")
"RTN","IBCNEHLU",260,0)
 Q
"RTN","IBCNEHLU",261,0)
 ;
"RTN","IBCNEHLU",262,0)
PREL(FILE,FIELD,CODE) ; IB*2*497  code from x12 271 message may need to be converted to 'other' if there is no match.  Refer to tag SETLST 
"RTN","IBCNEHLU",263,0)
 ;
"RTN","IBCNEHLU",264,0)
 ;          INPUT - FILE = file # of the file that will be evaluated
"RTN","IBCNEHLU",265,0)
 ;                  FIELD = field # that is defined with the SET OF CODE values
"RTN","IBCNEHLU",266,0)
 ;                  CODE = patient relationship code sent by the X12 271 message
"RTN","IBCNEHLU",267,0)
 ;          OUTPUT - = converted or non-converted coded value
"RTN","IBCNEHLU",268,0)
 N STRING,CODESTR,ARRAY,VAL,I,DEF
"RTN","IBCNEHLU",269,0)
 S CODE=$G(CODE)
"RTN","IBCNEHLU",270,0)
 I CODE="" Q CODE   ; quit when code was not sent from payer
"RTN","IBCNEHLU",271,0)
 D FIELD^DID(FILE,FIELD,"","TYPE","DEF")
"RTN","IBCNEHLU",272,0)
 I DEF("TYPE")="SET" D
"RTN","IBCNEHLU",273,0)
 . S CODESTR=$P($G(^DD(FILE,FIELD,0)),U,3)
"RTN","IBCNEHLU",274,0)
 . F I=1:1 S VAL=$P($P(CODESTR,";",I),":") Q:VAL=""  S ARRAY(VAL)=$P($P(CODESTR,";",I),":",2)
"RTN","IBCNEHLU",275,0)
 Q $S($D(ARRAY(CODE)):CODE,1:"G8") ; if coded value does not exist in the array of codes then this is a new code sent by X12 271 message and will default to OTHER
"RTN","IBCNEHLU",276,0)
 ;
"RTN","IBCNEHLU",277,0)
SETLST ; SET OF CODES defined to 355.33,60.14 and 2.312,4.03; this tag is not referenced in any procedure.  It's here for documentation purposes.
"RTN","IBCNEHLU",278,0)
 ;;01^SPOUSE
"RTN","IBCNEHLU",279,0)
 ;;18^SELF 
"RTN","IBCNEHLU",280,0)
 ;;19^CHILD 
"RTN","IBCNEHLU",281,0)
 ;;20^EMPLOYEE 
"RTN","IBCNEHLU",282,0)
 ;;29^SIGNIFICANT OTHER 
"RTN","IBCNEHLU",283,0)
 ;;32^MOTHER 
"RTN","IBCNEHLU",284,0)
 ;;33^FATHER 
"RTN","IBCNEHLU",285,0)
 ;;39^ORGAN DONOR 
"RTN","IBCNEHLU",286,0)
 ;;41^INJURED PLAINTIFF 
"RTN","IBCNEHLU",287,0)
 ;;53^LIFE PARTNER 
"RTN","IBCNEHLU",288,0)
 ;;G8^OTHER RELATIONSHIP
"RTN","IBCNEQU")
0^14^B126099513^B109122026
"RTN","IBCNEQU",1,0)
IBCNEQU ;DAOU/BHS - eIV REQUEST ELECTRONIC INSURANCE INQUIRY ;24-JUN-2002
"RTN","IBCNEQU",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416,438,497**;21-MAR-94;Build 120
"RTN","IBCNEQU",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEQU",4,0)
 ;
"RTN","IBCNEQU",5,0)
 ; eIV - Insurance Verification Interface
"RTN","IBCNEQU",6,0)
 ;
"RTN","IBCNEQU",7,0)
 ; Must call from EN
"RTN","IBCNEQU",8,0)
 Q
"RTN","IBCNEQU",9,0)
 ;
"RTN","IBCNEQU",10,0)
EN ; Entry pt
"RTN","IBCNEQU",11,0)
 ; Init vars
"RTN","IBCNEQU",12,0)
 N DFN,X,POP,IBFASTXT,VALMCNT,VALMBG,VALMHDR,VALMBCK,IDUZ
"RTN","IBCNEQU",13,0)
 ;
"RTN","IBCNEQU",14,0)
EN1 I $G(IBFASTXT) G ENX
"RTN","IBCNEQU",15,0)
 S DFN=$$PAT I 'DFN G ENX
"RTN","IBCNEQU",16,0)
 D EN^VALM("IBCNE REQUEST INS INQUIRY LIST")
"RTN","IBCNEQU",17,0)
 G EN1
"RTN","IBCNEQU",18,0)
 ;
"RTN","IBCNEQU",19,0)
ENX ; EN exit pt
"RTN","IBCNEQU",20,0)
 Q
"RTN","IBCNEQU",21,0)
 ;
"RTN","IBCNEQU",22,0)
INIT ; -- set up initial variables
"RTN","IBCNEQU",23,0)
 S VALMCNT=0,VALMBG=1,IDUZ=DUZ
"RTN","IBCNEQU",24,0)
 K ^TMP("IBCNEQU",$J),^TMP("IBCNEQUX",$J),^TMP("IBCNEQUDTS",$J)
"RTN","IBCNEQU",25,0)
 D HDR
"RTN","IBCNEQU",26,0)
 D BLD(DFN)
"RTN","IBCNEQU",27,0)
 ;
"RTN","IBCNEQU",28,0)
INITX ; INIT exit pt
"RTN","IBCNEQU",29,0)
 Q
"RTN","IBCNEQU",30,0)
 ;
"RTN","IBCNEQU",31,0)
HDR ; -- screen header for initial screen
"RTN","IBCNEQU",32,0)
 N VA,VAERR,%DT,II
"RTN","IBCNEQU",33,0)
 D PID^VADPT
"RTN","IBCNEQU",34,0)
 S VALMHDR(1)="Request Electronic Insurance Inquiry for Patient: "_$E($P($G(^DPT(DFN,0)),U),1,20)_" "_$E($G(^(0)),1)_VA("BID")
"RTN","IBCNEQU",35,0)
 S VALMHDR(2)=" "
"RTN","IBCNEQU",36,0)
 S VALMHDR(3)=" "
"RTN","IBCNEQU",37,0)
 S II=1
"RTN","IBCNEQU",38,0)
 I +$$BUFFER^IBCNBU1(DFN) S II=II+1,VALMHDR(II)="*** Patient has Insurance Buffer Records"
"RTN","IBCNEQU",39,0)
 I $P($G(^DPT(DFN,.35)),U)'="" S II=II+1,VALMHDR(II)="*** Date of Death: "_$$FMTE^XLFDT($P($G(^DPT(DFN,.35)),U)\1,"5Z")
"RTN","IBCNEQU",40,0)
 Q
"RTN","IBCNEQU",41,0)
 ;
"RTN","IBCNEQU",42,0)
HELP ; -- help code
"RTN","IBCNEQU",43,0)
 D FULL^VALM1
"RTN","IBCNEQU",44,0)
 W @IOF
"RTN","IBCNEQU",45,0)
 W !,"This screen lists all eligible (non-Medicaid) Insurance policies"
"RTN","IBCNEQU",46,0)
 W !,"for the patient.  Selecting an entry in this list creates an Insurance Buffer"
"RTN","IBCNEQU",47,0)
 W !,"entry with Source 'eIV' and Override Freshness Flag 'Yes'.  Setting this flag"
"RTN","IBCNEQU",48,0)
 W !,"is designed to force the eIV extract to attempt to create an insurance"
"RTN","IBCNEQU",49,0)
 W !,"inquiry based on this entry."
"RTN","IBCNEQU",50,0)
 W !!,"Entries with an asterisk (*) preceding the Insurance Co name already exist in"
"RTN","IBCNEQU",51,0)
 W !,"the Insurance Buffer with the exact same name, the exact same Group Number,"
"RTN","IBCNEQU",52,0)
 W !,"and the Override Freshness Flag set to 'Yes'.  Selecting an entry with an"
"RTN","IBCNEQU",53,0)
 W !,"asterisk (*) will create a duplicate entry in the Insurance Buffer file for"
"RTN","IBCNEQU",54,0)
 W !,"the patient."
"RTN","IBCNEQU",55,0)
 D PAUSE^VALM1
"RTN","IBCNEQU",56,0)
 S VALMBCK="R"
"RTN","IBCNEQU",57,0)
 Q
"RTN","IBCNEQU",58,0)
 ;
"RTN","IBCNEQU",59,0)
EXIT ; -- exit code
"RTN","IBCNEQU",60,0)
 K ^TMP("IBCNEQU",$J),^TMP("IBCNEQUX",$J)
"RTN","IBCNEQU",61,0)
 Q
"RTN","IBCNEQU",62,0)
 ;
"RTN","IBCNEQU",63,0)
PAT() ; Prompt user to select a patient
"RTN","IBCNEQU",64,0)
 ; Init vars
"RTN","IBCNEQU",65,0)
 N DIC,X,Y,DISYS,%H,%I,DUOUT,DTOUT
"RTN","IBCNEQU",66,0)
 ;
"RTN","IBCNEQU",67,0)
 W !
"RTN","IBCNEQU",68,0)
 ; Exclude non-Veterans
"RTN","IBCNEQU",69,0)
 S DIC(0)="AEQMN"
"RTN","IBCNEQU",70,0)
 S DIC("S")="I $G(^(""VET""))=""Y"",('$P($G(^(0)),U,21))",DIC="^DPT("
"RTN","IBCNEQU",71,0)
 D ^DIC
"RTN","IBCNEQU",72,0)
 I $D(DUOUT)!$D(DTOUT)!(Y<1) Q ""
"RTN","IBCNEQU",73,0)
 ;
"RTN","IBCNEQU",74,0)
 Q +Y
"RTN","IBCNEQU",75,0)
 ;
"RTN","IBCNEQU",76,0)
BLD(DFN) ; Build list of all insurance for patient
"RTN","IBCNEQU",77,0)
 N IBCT,IBINS,IBDATA0,IBDATA1,IBDATA2,II,STR,IBINSIEN,IBINAME,IBHOLD
"RTN","IBCNEQU",78,0)
 N VNODT,X,POP,IBBUF,IBBUFNM,IBIEN,IBBUFDT,TMPNM,GRPNUM,SFANAME
"RTN","IBCNEQU",79,0)
 ;
"RTN","IBCNEQU",80,0)
 K ^TMP("IBCNEQU",$J),^TMP("IBCNEQUX",$J)
"RTN","IBCNEQU",81,0)
 ;
"RTN","IBCNEQU",82,0)
 S (IBCT,VALMCNT)=0
"RTN","IBCNEQU",83,0)
 ;
"RTN","IBCNEQU",84,0)
 ; Determine if buffer entries exist for this DFN and build array by name
"RTN","IBCNEQU",85,0)
 S IBIEN=0
"RTN","IBCNEQU",86,0)
 F  S IBIEN=$O(^IBA(355.33,"C",DFN,IBIEN)) Q:'IBIEN  D
"RTN","IBCNEQU",87,0)
 . S IBBUFDT=$G(^IBA(355.33,IBIEN,0))
"RTN","IBCNEQU",88,0)
 . ; Include E status only
"RTN","IBCNEQU",89,0)
 . I $P(IBBUFDT,U,4)'="E" Q
"RTN","IBCNEQU",90,0)
 . S IBBUFNM=$$TRIM^XLFSTR($P($G(^IBA(355.33,IBIEN,20)),U))
"RTN","IBCNEQU",91,0)
 . I IBBUFNM="" Q
"RTN","IBCNEQU",92,0)
 . ;S GRPNUM=$$TRIM^XLFSTR($P($G(^IBA(355.33,IBIEN,40)),U,3))
"RTN","IBCNEQU",93,0)
 . S GRPNUM=$$TRIM^XLFSTR($P($G(^IBA(355.33,IBIEN,90)),U,2))  ; ib*2*497  get group number from it's new location
"RTN","IBCNEQU",94,0)
 . S IBBUF(IBBUFNM," "_GRPNUM)=""
"RTN","IBCNEQU",95,0)
 . Q
"RTN","IBCNEQU",96,0)
 ;
"RTN","IBCNEQU",97,0)
 ; Populate IBINS array with Patient Insurance records
"RTN","IBCNEQU",98,0)
 D ALL^IBCNS1(DFN,"IBINS")
"RTN","IBCNEQU",99,0)
 I $G(IBINS(0)) S II=0 F  S II=$O(IBINS(II)) Q:'II  D
"RTN","IBCNEQU",100,0)
 . S IBDATA0=$G(IBINS(II,0))
"RTN","IBCNEQU",101,0)
 . S IBDATA1=$G(IBINS(II,1))
"RTN","IBCNEQU",102,0)
 . S IBDATA2=$G(^IBA(355.3,+$P(IBDATA0,U,18),0))
"RTN","IBCNEQU",103,0)
 . S GRPNUM=$$TRIM^XLFSTR($P($G(^IBA(355.3,+$P(IBDATA0,U,18),2)),U,2))  ; ib*2*497  get group number from it's new location
"RTN","IBCNEQU",104,0)
 . ;S GRPNUM=$$TRIM^XLFSTR($P(GRPNUM,U,2))
"RTN","IBCNEQU",105,0)
 . ;S GRPNUM=$$TRIM^XLFSTR($P(IBDATA2,U,4))
"RTN","IBCNEQU",106,0)
 . S IBINSIEN=+$P(IBDATA0,U)
"RTN","IBCNEQU",107,0)
 . Q:'IBINSIEN!'$D(^DIC(36,IBINSIEN,0))
"RTN","IBCNEQU",108,0)
 . S IBINAME=$P($G(^DIC(36,IBINSIEN,0)),U)
"RTN","IBCNEQU",109,0)
 . S TMPNM=$$TRIM^XLFSTR(IBINAME)
"RTN","IBCNEQU",110,0)
 . ; Filter Ins Co's by name - currently filter Medicaid
"RTN","IBCNEQU",111,0)
 . I $$EXCLUDE^IBCNEUT4(TMPNM) Q
"RTN","IBCNEQU",112,0)
 . S IBCT=IBCT+1
"RTN","IBCNEQU",113,0)
 . S STR=""
"RTN","IBCNEQU",114,0)
 . S STR=$$SETFLD^VALM1(IBCT,STR,"NUMBER")
"RTN","IBCNEQU",115,0)
 . ; Update IBINAME if found in buffer already
"RTN","IBCNEQU",116,0)
 . S IBINAME=$S($D(IBBUF(TMPNM," "_GRPNUM)):"*",1:"")_IBINAME
"RTN","IBCNEQU",117,0)
 . S STR=$$SETFLD^VALM1(IBINAME,STR,"NAME")
"RTN","IBCNEQU",118,0)
 . S STR=$$SETFLD^VALM1($E($P(IBDATA0,U,2),1,14),STR,"POLICY")
"RTN","IBCNEQU",119,0)
 . S IBHOLD=$P(IBDATA0,U,6),STR=$$SETFLD^VALM1($S(IBHOLD="v":"SELF",IBHOLD="s":"SPOUSE",IBHOLD="o":"OTHER",1:"UNKNOWN"),STR,"HOLDER")
"RTN","IBCNEQU",120,0)
 . S STR=$$SETFLD^VALM1($E($$GRP^IBCNS($P(IBDATA0,U,18)),1,10),STR,"GROUP")
"RTN","IBCNEQU",121,0)
 . S STR=$$SETFLD^VALM1($$FMTE^XLFDT($P(IBDATA0,U,8),"5Z"),STR,"EFFDT")
"RTN","IBCNEQU",122,0)
 . S STR=$$SETFLD^VALM1($$FMTE^XLFDT($P(IBDATA0,U,4),"5Z"),STR,"EXPIRE")
"RTN","IBCNEQU",123,0)
 . S STR=$$SETFLD^VALM1($E($P($G(^IBE(355.1,+$P(IBDATA2,U,9),0)),U),1,8),STR,"TYPE")
"RTN","IBCNEQU",124,0)
 . S STR=$$SETFLD^VALM1($P($G(^IBE(355.1,+$P(IBDATA2,U,9),0)),U),STR,"TYPEPOL")
"RTN","IBCNEQU",125,0)
 . S STR=$$SETFLD^VALM1($E($P($G(^VA(200,+$P(IBDATA1,U,4),0)),U),1,15),STR,"VERIFIED BY")
"RTN","IBCNEQU",126,0)
 . S STR=$$SETFLD^VALM1($$FMTE^XLFDT($P(IBDATA1,U,3),"5Z"),STR,"VERIFIED ON")
"RTN","IBCNEQU",127,0)
 . S STR=$$SETFLD^VALM1($$YN($P(IBDATA2,U,6)),STR,"PRECERT")
"RTN","IBCNEQU",128,0)
 . S STR=$$SETFLD^VALM1($$YN($P(IBDATA2,U,5)),STR,"UR")
"RTN","IBCNEQU",129,0)
 . S STR=$$SETFLD^VALM1($$YN($P(IBDATA0,U,20)),STR,"COB")
"RTN","IBCNEQU",130,0)
 . D SET(STR)
"RTN","IBCNEQU",131,0)
 . Q
"RTN","IBCNEQU",132,0)
 ;
"RTN","IBCNEQU",133,0)
 I 'IBCT D
"RTN","IBCNEQU",134,0)
 . S VALMCNT=VALMCNT+1
"RTN","IBCNEQU",135,0)
 . S ^TMP("IBCNEQU",$J,VALMCNT,0)=" "
"RTN","IBCNEQU",136,0)
 . S VALMCNT=VALMCNT+1
"RTN","IBCNEQU",137,0)
 . S ^TMP("IBCNEQU",$J,VALMCNT,0)="      No eligible insurance policies found."
"RTN","IBCNEQU",138,0)
 . Q
"RTN","IBCNEQU",139,0)
 ;
"RTN","IBCNEQU",140,0)
 S VNODT=$P($G(^IBA(354,DFN,60)),U,1) I VNODT D
"RTN","IBCNEQU",141,0)
 . S VALMCNT=VALMCNT+1
"RTN","IBCNEQU",142,0)
 . S ^TMP("IBCNEQU",$J,VALMCNT,0)=" "
"RTN","IBCNEQU",143,0)
 . S VALMCNT=VALMCNT+1
"RTN","IBCNEQU",144,0)
 . S ^TMP("IBCNEQU",$J,VALMCNT,0)="      Verification of No Coverage "_$$FMTE^XLFDT(VNODT,"5Z")_"."
"RTN","IBCNEQU",145,0)
 . Q
"RTN","IBCNEQU",146,0)
 ;
"RTN","IBCNEQU",147,0)
BLDX ; BLD exit pt
"RTN","IBCNEQU",148,0)
 Q
"RTN","IBCNEQU",149,0)
 ;
"RTN","IBCNEQU",150,0)
SET(LINE) ; -- set arrays
"RTN","IBCNEQU",151,0)
 ; LINE - line of text to display
"RTN","IBCNEQU",152,0)
 S VALMCNT=VALMCNT+1
"RTN","IBCNEQU",153,0)
 S ^TMP("IBCNEQU",$J,VALMCNT,0)=LINE
"RTN","IBCNEQU",154,0)
 S ^TMP("IBCNEQU",$J,"IDX",VALMCNT,IBCT)=""
"RTN","IBCNEQU",155,0)
 S ^TMP("IBCNEQUX",$J,IBCT)=VALMCNT_U_DFN_U_II_U_IBINAME_U_IBDATA0
"RTN","IBCNEQU",156,0)
 S ^TMP("IBCNEQUX",$J)=$G(^TMP("IBCNEQUX",$J))+1
"RTN","IBCNEQU",157,0)
 Q
"RTN","IBCNEQU",158,0)
 ;
"RTN","IBCNEQU",159,0)
YN(X) ; -- convert 1 or 0 to yes/no/unknown
"RTN","IBCNEQU",160,0)
 Q $S(X=0:"NO",X=1:"YES",1:"UNK")
"RTN","IBCNEQU",161,0)
 ;
"RTN","IBCNEQU",162,0)
SELECT ; User selects insurance from list to be reconfirmed
"RTN","IBCNEQU",163,0)
 N IBDATA,IBDPT,IBDA,DIR,X,Y,D0,DG,DIC,DISYS,DIW,IENS,IBELIGDT,IBERROR,IBIEN,IBSYM
"RTN","IBCNEQU",164,0)
 ;
"RTN","IBCNEQU",165,0)
 D FULL^VALM1
"RTN","IBCNEQU",166,0)
 S VALMBCK="R"
"RTN","IBCNEQU",167,0)
 ;
"RTN","IBCNEQU",168,0)
 I '$O(^TMP("IBCNEQUX",$J,0)) D  G SELECTX
"RTN","IBCNEQU",169,0)
 . W !!,"No Insurance policies to select."
"RTN","IBCNEQU",170,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEQU",171,0)
 . Q
"RTN","IBCNEQU",172,0)
 ;
"RTN","IBCNEQU",173,0)
 S (IBDPT,IBDA,IBERROR)=""
"RTN","IBCNEQU",174,0)
 S IBDATA=$$SEL()
"RTN","IBCNEQU",175,0)
 S IBDPT=+$P(IBDATA,U)       ; Patient DFN
"RTN","IBCNEQU",176,0)
 S IBDA=+$P(IBDATA,U,2)      ; 2.312 ptr
"RTN","IBCNEQU",177,0)
 I +IBDPT,+IBDA D
"RTN","IBCNEQU",178,0)
 . S IBIEN=+$P(IBDATA,U,4)     ; Ins Co IEN (#36)
"RTN","IBCNEQU",179,0)
 . S IBSYM=$P($$INSERROR^IBCNEUT3("I",IBIEN),"^",1)
"RTN","IBCNEQU",180,0)
 . S ^TMP("IBCNEQUDTS",$J)=1
"RTN","IBCNEQU",181,0)
 . D PT^IBCNEBF(IBDPT,IBDA,IBSYM,1,1,.IBERROR)
"RTN","IBCNEQU",182,0)
 . ; Check for errors
"RTN","IBCNEQU",183,0)
 . I $G(IBERROR)'="" W !!,"Insurance Buffer entry could not be created due to error!  Please try again.",!
"RTN","IBCNEQU",184,0)
 . I $G(IBERROR)="" W !!,"Insurance Buffer entry created!",!
"RTN","IBCNEQU",185,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEQU",186,0)
 . K ^TMP("IBCNEQUDTS",$J)
"RTN","IBCNEQU",187,0)
 ;
"RTN","IBCNEQU",188,0)
 I $P(IBDATA,U,3)="~NO PAYER" D
"RTN","IBCNEQU",189,0)
 . W !!,"Payer missing. Identification inquiries not allowed."    ; IB*2*416
"RTN","IBCNEQU",190,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEQU",191,0)
 . Q
"RTN","IBCNEQU",192,0)
 ;
"RTN","IBCNEQU",193,0)
SELECTX ;
"RTN","IBCNEQU",194,0)
 S VALMBCK="R"
"RTN","IBCNEQU",195,0)
 Q
"RTN","IBCNEQU",196,0)
 ;
"RTN","IBCNEQU",197,0)
SEL() ; User selects insurance from list
"RTN","IBCNEQU",198,0)
 N IBSELN,DIR,X,Y,DIRUT,DUOUT
"RTN","IBCNEQU",199,0)
 ;
"RTN","IBCNEQU",200,0)
 S IBSELN=""
"RTN","IBCNEQU",201,0)
 ; Select entry to reconfirm
"RTN","IBCNEQU",202,0)
 S DIR(0)="NO^1:"_$G(^TMP("IBCNEQUX",$J))_":0"
"RTN","IBCNEQU",203,0)
 S DIR("A")="Select entry to request electronic inquiry"
"RTN","IBCNEQU",204,0)
 S DIR("?",1)="  Select an entry to initiate an insurance inquiry."
"RTN","IBCNEQU",205,0)
 S DIR("?",2)="  If entry contains an Insurance Co name, an Insurance"
"RTN","IBCNEQU",206,0)
 S DIR("?",3)="  Buffer entry will be created for nightly batch extract."
"RTN","IBCNEQU",207,0)
 S DIR("?")="  "
"RTN","IBCNEQU",208,0)
 D ^DIR K DIR
"RTN","IBCNEQU",209,0)
 I $D(DIRUT)!$D(DUOUT)!(Y<1) G SELX
"RTN","IBCNEQU",210,0)
 S IBSELN=$O(^TMP("IBCNEQU",$J,"IDX",Y,0))
"RTN","IBCNEQU",211,0)
 I IBSELN S IBSELN=$P($G(^TMP("IBCNEQUX",$J,IBSELN)),U,2,99)
"RTN","IBCNEQU",212,0)
 I $E($P(IBSELN,U,3))="*" W ! D  S IBSELN="" G SELX
"RTN","IBCNEQU",213,0)
 .S DIR(0)="EA"
"RTN","IBCNEQU",214,0)
 .S DIR("A",1)=""
"RTN","IBCNEQU",215,0)
 .S DIR("A",2)="Selected policy has an existing buffer entry."
"RTN","IBCNEQU",216,0)
 .S DIR("A",3)="You must first process the existing buffer entry."
"RTN","IBCNEQU",217,0)
 .S DIR("A")="Press RETURN to continue " D ^DIR K DIR W !
"RTN","IBCNEQU",218,0)
 .Q
"RTN","IBCNEQU",219,0)
 ;
"RTN","IBCNEQU",220,0)
 ; Get service type code
"RTN","IBCNEQU",221,0)
 D STC
"RTN","IBCNEQU",222,0)
 I X="^" S IBSELN="" G SELX  ; '^' entered thus backup a level & re-ask Insurance question
"RTN","IBCNEQU",223,0)
 ; Get eligibility date
"RTN","IBCNEQU",224,0)
 S IBELIGDT=$$ELIGDT() I 'IBELIGDT S IBSELN="" G SELX
"RTN","IBCNEQU",225,0)
 W !
"RTN","IBCNEQU",226,0)
 S DIR(0)="Y"
"RTN","IBCNEQU",227,0)
 S DIR("A")="Are you sure you want to request an insurance inquiry"
"RTN","IBCNEQU",228,0)
 S DIR("B")="NO"
"RTN","IBCNEQU",229,0)
 S DIR("?",1)="  If yes, a request will be created for the nightly batch."
"RTN","IBCNEQU",230,0)
 D ^DIR K DIR
"RTN","IBCNEQU",231,0)
 I $D(DIRUT)!$D(DUOUT)!('Y) S IBSELN=""
"RTN","IBCNEQU",232,0)
 ;
"RTN","IBCNEQU",233,0)
SELX Q IBSELN
"RTN","IBCNEQU",234,0)
 ;
"RTN","IBCNEQU",235,0)
STC ; Ask for service type code to send
"RTN","IBCNEQU",236,0)
 N DIR,X,Y
"RTN","IBCNEQU",237,0)
 ; IBEISTC used as STC variable
"RTN","IBCNEQU",238,0)
 S IBEISTC=""
"RTN","IBCNEQU",239,0)
 S DIR(0)="PAO^365.013:EMZ",DIR("A")="Enter Service Type Code: "
"RTN","IBCNEQU",240,0)
 S DIR("??")="^D HELPSTC2^IBCNEQU"
"RTN","IBCNEQU",241,0)
STCEN ; Intital and re-enterant tag upon error
"RTN","IBCNEQU",242,0)
 D ^DIR Q:X="^"
"RTN","IBCNEQU",243,0)
 ; Check to verify code is active, if not, display error and ask again
"RTN","IBCNEQU",244,0)
 I $P($G(Y(0)),U,3)'="" W !,"Code selected is not an active code - please select another code.",! G STCEN
"RTN","IBCNEQU",245,0)
 ; If valid STC entered, set IBEISTC to be STC IEN. If no code entered, default to service code 30
"RTN","IBCNEQU",246,0)
 S IBEISTC=$S(+Y>0:$P(Y,U,1),1:$O(^IBE(365.013,"B",30,"")))
"RTN","IBCNEQU",247,0)
 Q
"RTN","IBCNEQU",248,0)
 ;
"RTN","IBCNEQU",249,0)
FASTEXIT ; Sets flag to indicate a quick exit from the option
"RTN","IBCNEQU",250,0)
 N DIR,DIRUT,X,Y
"RTN","IBCNEQU",251,0)
 S VALMBCK="Q"
"RTN","IBCNEQU",252,0)
 D FULL^VALM1
"RTN","IBCNEQU",253,0)
 S DIR(0)="Y",DIR("A")="Exit option entirely",DIR("B")="NO"
"RTN","IBCNEQU",254,0)
 D ^DIR
"RTN","IBCNEQU",255,0)
 I +Y S IBFASTXT=1
"RTN","IBCNEQU",256,0)
 Q
"RTN","IBCNEQU",257,0)
 ;
"RTN","IBCNEQU",258,0)
ADD() ;
"RTN","IBCNEQU",259,0)
 NEW PAYER,TQIEN,OK,STR,SRVICEDT,FRESHDT,DATA1,DATA2,TQIEN,FRESHDAY
"RTN","IBCNEQU",260,0)
 I '$D(^IBCN(365.1,"E",DFN)) Q 0  ; Does this pt have a TQ entry?
"RTN","IBCNEQU",261,0)
 S (TQIEN,OK)=""
"RTN","IBCNEQU",262,0)
 S PAYER=$$FIND1^DIC(365.12,,"X","~NO PAYER") ; Get payer IEN
"RTN","IBCNEQU",263,0)
 F  S TQIEN=$O(^IBCN(365.1,"E",DFN,TQIEN)) Q:'TQIEN!OK  D
"RTN","IBCNEQU",264,0)
 . S STR=$G(^IBCN(365.1,TQIEN,0))
"RTN","IBCNEQU",265,0)
 . ; If "~NO PAYER" & Transmitted
"RTN","IBCNEQU",266,0)
 . I $P(STR,U,3)=PAYER,$P(STR,U,4)=2 S OK=1 Q
"RTN","IBCNEQU",267,0)
 . ; If "~NO PAYER" & Ready to Transmit & override flag
"RTN","IBCNEQU",268,0)
 . I $P(STR,U,3)=PAYER,($P(STR,U,4)=1),($P(STR,U,14)=1) S OK=1 Q
"RTN","IBCNEQU",269,0)
 I 'OK Q 0
"RTN","IBCNEQU",270,0)
 Q 1
"RTN","IBCNEQU",271,0)
 ;
"RTN","IBCNEQU",272,0)
BLKTQ ;  Create a ~NO PAYER request for 'Search for All'
"RTN","IBCNEQU",273,0)
 Q    ; no longer allowed  IB*2*416
"RTN","IBCNEQU",274,0)
 NEW PAYER,SRVICEDT,FRESHDT,DATA1,DATA2,TQIEN,FRESHDAY
"RTN","IBCNEQU",275,0)
 S PAYER=$$FIND1^DIC(365.12,,"X","~NO PAYER")
"RTN","IBCNEQU",276,0)
 D NPINIT ; Update service date and freshness
"RTN","IBCNEQU",277,0)
 ; Update service dates for inquiries to be transmitted
"RTN","IBCNEQU",278,0)
 S DATA1=DFN_U_PAYER_U_1_U_""_U_""_U_FRESHDT
"RTN","IBCNEQU",279,0)
 S DATA2=4_U_"I"_U_SRVICEDT
"RTN","IBCNEQU",280,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2,"",1)
"RTN","IBCNEQU",281,0)
 Q
"RTN","IBCNEQU",282,0)
 ;
"RTN","IBCNEQU",283,0)
BLKX Q
"RTN","IBCNEQU",284,0)
 ;
"RTN","IBCNEQU",285,0)
NPINIT ; Initialize variables for ~NO PAYER
"RTN","IBCNEQU",286,0)
 S SRVICEDT=DT
"RTN","IBCNEQU",287,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U)
"RTN","IBCNEQU",288,0)
 S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNEQU",289,0)
 ;
"RTN","IBCNEQU",290,0)
 ; Update service date and freshness date based on payer allowed
"RTN","IBCNEQU",291,0)
 Q
"RTN","IBCNEQU",292,0)
 ;
"RTN","IBCNEQU",293,0)
HELPSTC2 ; Text to display in response to '??' entry
"RTN","IBCNEQU",294,0)
 N DIR
"RTN","IBCNEQU",295,0)
 D FULL^VALM1
"RTN","IBCNEQU",296,0)
 W @IOF
"RTN","IBCNEQU",297,0)
 W !,"Enter the single SERVICE TYPE CODE to be sent with inquiry or press 'ENTER' to"
"RTN","IBCNEQU",298,0)
 W !,"send default service type code 30 (Health Benefit Plan Coverage)."
"RTN","IBCNEQU",299,0)
 W !,"No response generated by this option will auto-update the patient file."
"RTN","IBCNEQU",300,0)
 Q
"RTN","IBCNEQU",301,0)
 ;
"RTN","IBCNEQU",302,0)
ELIGDT() ; Prompt user for eligibility date
"RTN","IBCNEQU",303,0)
 N DIR,X,Y,DIRUT,DUOUT,STARTDT,ENDDT,ELIGDT
"RTN","IBCNEQU",304,0)
 S ELIGDT=""
"RTN","IBCNEQU",305,0)
 D DT^DILF(,"T-12M",.STARTDT) ; start date within the last 12 months
"RTN","IBCNEQU",306,0)
 ; allow end date up to the end of the current month
"RTN","IBCNEQU",307,0)
 S ENDDT=$$SCH^XLFDT("1M(L@1A)",DT)\1 ; ICR#10103 this call returns the last day of the current month at 1 AM.  If not time was sent, it would actually return the next to last day at 2400 hours.
"RTN","IBCNEQU",308,0)
 S DIR(0)="DA^"_STARTDT_":"_ENDDT_":"_"EX",DIR("A")="Enter Eligibility Date: ",DIR("B")="TODAY"
"RTN","IBCNEQU",309,0)
 S DIR("?",1)="Select an eligibility date to be sent in the inquiry."
"RTN","IBCNEQU",310,0)
 S DIR("?")="Date must be within the last 12 months or up to the end of the current month."
"RTN","IBCNEQU",311,0)
 D ^DIR
"RTN","IBCNEQU",312,0)
 I $D(DIRUT)!$D(DUOUT)!('Y) G ELIGDTX
"RTN","IBCNEQU",313,0)
 S ELIGDT=Y
"RTN","IBCNEQU",314,0)
ELIGDTX ; 
"RTN","IBCNEQU",315,0)
 Q ELIGDT
"RTN","IBCNERPE")
0^1^B60593817^B42391865
"RTN","IBCNERPE",1,0)
IBCNERPE ;DAOU/BHS - IBCNE eIV RESPONSE REPORT (cont'd);03-JUN-2002
"RTN","IBCNERPE",2,0)
 ;;2.0;INTEGRATED BILLING;**271,300,416,438,497**;21-MAR-94;Build 120
"RTN","IBCNERPE",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERPE",4,0)
 ;
"RTN","IBCNERPE",5,0)
 ; Must call at tag
"RTN","IBCNERPE",6,0)
 Q
"RTN","IBCNERPE",7,0)
 ;
"RTN","IBCNERPE",8,0)
 ; This tag is only called from IBCNERP2
"RTN","IBCNERPE",9,0)
 ;
"RTN","IBCNERPE",10,0)
GETDATA(IEN,RPTDATA) ; Retrieve response data
"RTN","IBCNERPE",11,0)
 ; Init
"RTN","IBCNERPE",12,0)
 N %,CNPTR,CT,DIW,DIWI,DIWT,DIWTC,DIWX,DN,EACT,ELOC,ESRC,ETXT,DQUAL,DTYPE,FUTDT,IENS,II,LOOP,NODE0,PC,TQIEN,Z
"RTN","IBCNERPE",13,0)
 ;
"RTN","IBCNERPE",14,0)
 ; Insured Info from eIV Response #365
"RTN","IBCNERPE",15,0)
 S RPTDATA(0)=$G(^IBCN(365,IEN,0)),TQIEN=$P(RPTDATA(0),U,5)
"RTN","IBCNERPE",16,0)
 ; Trans dates to ext format
"RTN","IBCNERPE",17,0)
 S $P(RPTDATA(0),U,7)=$$FMTE^XLFDT($P(RPTDATA(0),U,7)\1,"5Z")
"RTN","IBCNERPE",18,0)
 S RPTDATA(1)=$G(^IBCN(365,IEN,1))
"RTN","IBCNERPE",19,0)
 ; Trans ext values for SET of CODES values
"RTN","IBCNERPE",20,0)
 S IENS=IEN_","
"RTN","IBCNERPE",21,0)
 S $P(RPTDATA(1),U,8)=$$GET1^DIQ(365,IENS,1.08,"E")   ; Whose Ins
"RTN","IBCNERPE",22,0)
 S $P(RPTDATA(1),U,13)=$$GET1^DIQ(365,IENS,1.13,"E")  ; COB
"RTN","IBCNERPE",23,0)
 S RPTDATA(8)=$$GET1^DIQ(365,IENS,8.01,"E")   ; Pt Rel to Sub
"RTN","IBCNERPE",24,0)
 ; if pt. rel is empty, try to get value from the old field 365/1.09
"RTN","IBCNERPE",25,0)
 I RPTDATA(8)="" S RPTDATA(8)=$$GET1^DIQ(365,IENS,1.09,"E")
"RTN","IBCNERPE",26,0)
 ; Trans err actions/codes to ext
"RTN","IBCNERPE",27,0)
 S $P(RPTDATA(1),U,14)=$$X12^IBCNERP2(365.017,$P(RPTDATA(1),U,14))
"RTN","IBCNERPE",28,0)
 S $P(RPTDATA(1),U,15)=$$X12^IBCNERP2(365.018,$P(RPTDATA(1),U,15))
"RTN","IBCNERPE",29,0)
 ; Trans dates to ext format - check format
"RTN","IBCNERPE",30,0)
 F PC=2,9:1:12,16,17,19 S $P(RPTDATA(1),U,PC)=$$FMTE^XLFDT($P(RPTDATA(1),U,PC),"5Z")
"RTN","IBCNERPE",31,0)
 ;
"RTN","IBCNERPE",32,0)
 ; Loop thru mult Contact segs
"RTN","IBCNERPE",33,0)
 S CT=0
"RTN","IBCNERPE",34,0)
 F  S CT=$O(^IBCN(365,IEN,3,CT)) Q:'CT  D
"RTN","IBCNERPE",35,0)
 .S RPTDATA(3,CT)=$G(^IBCN(365,IEN,3,CT,0))
"RTN","IBCNERPE",36,0)
 .; Obtain the various Communication Text fields
"RTN","IBCNERPE",37,0)
 .F II=1:1:3 S RPTDATA(3,CT,II)=$G(^IBCN(365,IEN,3,CT,II))
"RTN","IBCNERPE",38,0)
 .; Disp. blank if NOT SPECIFIED
"RTN","IBCNERPE",39,0)
 . I $P(RPTDATA(3,CT),U)="NOT SPECIFIED" S $P(RPTDATA(3,CT),U)=""
"RTN","IBCNERPE",40,0)
 .; Comm Qual #1-3
"RTN","IBCNERPE",41,0)
 .F II=1:1:3 D
"RTN","IBCNERPE",42,0)
 ..S CNPTR=$$X12^IBCNERP2(365.021,$P(RPTDATA(3,CT),U,II*2))
"RTN","IBCNERPE",43,0)
 ..;;;I CNPTR'="" S $P(RPTDATA(3,CT),U,II*2)=CNPTR_": "_$P(RPTDATA(3,CT),U,II*2+1),$P(RPTDATA(3,CT),U,II*2+1)=""
"RTN","IBCNERPE",44,0)
 ..I CNPTR'="" S RPTDATA(3,CT,II)=CNPTR_": "_$G(RPTDATA(3,CT,II))
"RTN","IBCNERPE",45,0)
 ;
"RTN","IBCNERPE",46,0)
 ; Subscriber level dates (ZTP segments)
"RTN","IBCNERPE",47,0)
 S CT=0 F  S CT=$O(^IBCN(365,IEN,7,CT)) Q:'CT  D
"RTN","IBCNERPE",48,0)
 .S NODE0=$G(^IBCN(365,IEN,7,CT,0))
"RTN","IBCNERPE",49,0)
 .S DQUAL=$P(NODE0,U,3) I 'DQUAL Q
"RTN","IBCNERPE",50,0)
 .S LOOP=$$GET1^DIQ(365.027,$P(NODE0,U,4)_",",.01)
"RTN","IBCNERPE",51,0)
 .S DTYPE=$S(LOOP["C":"S",LOOP["D":"P",1:"O")
"RTN","IBCNERPE",52,0)
 .S RPTDATA(7,DTYPE,CT)=$$X12^IBCNERP2(365.026,DQUAL)_U_$P(NODE0,U,2)
"RTN","IBCNERPE",53,0)
 .Q
"RTN","IBCNERPE",54,0)
 ;
"RTN","IBCNERPE",55,0)
 ; Reject reasons
"RTN","IBCNERPE",56,0)
 S CT=0 F  S CT=$O(^IBCN(365,IEN,6,CT)) Q:'CT  D
"RTN","IBCNERPE",57,0)
 .S NODE0=$G(^IBCN(365,IEN,6,CT,0)) I '$P(NODE0,U,3) Q
"RTN","IBCNERPE",58,0)
 .S ETXT=$$X12^IBCNERP2(365.017,$P(NODE0,U,3))
"RTN","IBCNERPE",59,0)
 .S ELOC=$P(NODE0,U,2) S:ELOC="" ELOC="N/A"
"RTN","IBCNERPE",60,0)
 .S EACT=$$X12^IBCNERP2(365.018,$P(NODE0,U,4)) S:EACT="" EACT="N/A"
"RTN","IBCNERPE",61,0)
 .S LOOP=$$X12^IBCNERP2(365.027,$P(NODE0,U,5)) S:LOOP="" LOOP="N/A"
"RTN","IBCNERPE",62,0)
 .S ESRC=$P(NODE0,U,6) S:ESRC="" ESRC="N/A"
"RTN","IBCNERPE",63,0)
 .;IB*2*497   modify existing line below to retrieve external value of ERROR CODE and ACTION CODE
"RTN","IBCNERPE",64,0)
 . ;and build as part of the composite string at RPTDATA(6,CT).
"RTN","IBCNERPE",65,0)
 .S RPTDATA(6,CT)=ELOC_U_$$GET1^DIQ(365.017,$P(NODE0,U,3)_",",.01)_U_ETXT_U_$$GET1^DIQ(365.018,$P(NODE0,U,4)_",",.01)_U_EACT_U_LOOP_U_ESRC
"RTN","IBCNERPE",66,0)
 .; IB*2*497  retrieve additional messages
"RTN","IBCNERPE",67,0)
 .S Z=0 F  S Z=$O(^IBCN(365,IEN,6,CT,1,Z)) Q:'Z  S RPTDATA(6,CT,"AMSG",Z)=$P($G(^IBCN(365,IEN,6,CT,1,Z,0)),U)
"RTN","IBCNERPE",68,0)
 .Q
"RTN","IBCNERPE",69,0)
 ;
"RTN","IBCNERPE",70,0)
 ; Subscriber Data
"RTN","IBCNERPE",71,0)
 S RPTDATA(13)=$G(^IBCN(365,IEN,13))
"RTN","IBCNERPE",72,0)
 ;
"RTN","IBCNERPE",73,0)
 ; Group Data
"RTN","IBCNERPE",74,0)
 S RPTDATA(14)=$G(^IBCN(365,IEN,14))
"RTN","IBCNERPE",75,0)
 ;
"RTN","IBCNERPE",76,0)
FUTDT I TQIEN D  ; If there is a future date, display it
"RTN","IBCNERPE",77,0)
 . S FUTDT=$P($G(^IBCN(365.1,TQIEN,0)),U,9) Q:FUTDT=""
"RTN","IBCNERPE",78,0)
 . S II=$O(RPTDATA(5,""),-1)+1
"RTN","IBCNERPE",79,0)
 . S RPTDATA(5,II)=" ",II=II+1
"RTN","IBCNERPE",80,0)
 . S RPTDATA(5,II)="Inquiry will be automatically resubmitted on "_$$FMTE^XLFDT(FUTDT,"5Z")_"."
"RTN","IBCNERPE",81,0)
 ;
"RTN","IBCNERPE",82,0)
GETDATX ; GETDATA exit point
"RTN","IBCNERPE",83,0)
 Q
"RTN","IBCNERPE",84,0)
 ;
"RTN","IBCNERPE",85,0)
 ; This tag is only called from IBCNERP3
"RTN","IBCNERPE",86,0)
 ;
"RTN","IBCNERPE",87,0)
DATA(DISPDATA)  ;  Build disp lines
"RTN","IBCNERPE",88,0)
 N LCT,CT,SEGCT,ITEM,CT2,NTCT,CNCT,ERCT,RPTDATA,DCT,DTYPE
"RTN","IBCNERPE",89,0)
 ; Merge into local array
"RTN","IBCNERPE",90,0)
 M RPTDATA=^TMP($J,RTN,SORT1,SORT2,CNT)
"RTN","IBCNERPE",91,0)
 ; Build
"RTN","IBCNERPE",92,0)
 S LCT=1,ITEM=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,13.01),17,"R")_$P(RPTDATA(13),U,1) D WRAPIT(ITEM,.LCT,.DISPDATA,74,17)
"RTN","IBCNERPE",93,0)
 S LCT=LCT+1,ITEM=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,13.02),17,"R")_$P(RPTDATA(13),U,2) D WRAPIT(ITEM,.LCT,.DISPDATA,74,17)
"RTN","IBCNERPE",94,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.02),17,"R")_$P(RPTDATA(1),U,2)
"RTN","IBCNERPE",95,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.03),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,3),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.04),22,"R")_$P(RPTDATA(1),U,4)
"RTN","IBCNERPE",96,0)
 S LCT=LCT+1,ITEM=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,14.01),17,"R")_$P(RPTDATA(14),U,1) D WRAPIT(ITEM,.LCT,.DISPDATA,74,17)
"RTN","IBCNERPE",97,0)
 S LCT=LCT+1,ITEM=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,14.02),17,"R")_$P(RPTDATA(14),U,2) D WRAPIT(ITEM,.LCT,.DISPDATA,74,17)
"RTN","IBCNERPE",98,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.08),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,8),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,8.01),22,"R")_RPTDATA(8)
"RTN","IBCNERPE",99,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.18),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,18),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.13),22,"R")_$P(RPTDATA(1),U,13)
"RTN","IBCNERPE",100,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.1),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,10),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.16),22,"R")_$P(RPTDATA(1),U,16)
"RTN","IBCNERPE",101,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.11),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,11),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.17),22,"R")_$P(RPTDATA(1),U,17)
"RTN","IBCNERPE",102,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.12),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,12),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.19),22,"R")_$P(RPTDATA(1),U,19)
"RTN","IBCNERPE",103,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,.07),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(0),U,7),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,.09),22,"R")_$P(RPTDATA(0),U,9)
"RTN","IBCNERPE",104,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.2),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,20),20)
"RTN","IBCNERPE",105,0)
 ;
"RTN","IBCNERPE",106,0)
 ; Dates
"RTN","IBCNERPE",107,0)
 F DTYPE="S","P","O" D
"RTN","IBCNERPE",108,0)
 .I '$D(RPTDATA(7,DTYPE)) Q
"RTN","IBCNERPE",109,0)
 .S LCT=LCT+1,DISPDATA(LCT)=""
"RTN","IBCNERPE",110,0)
 .S LCT=LCT+1,DISPDATA(LCT)=$S(DTYPE="S":"Subscriber",DTYPE="P":"Patient",1:"Other")_" Dates:"
"RTN","IBCNERPE",111,0)
 .S LCT=LCT+1,DISPDATA(LCT)=""
"RTN","IBCNERPE",112,0)
 .S DCT="" F  S DCT=$O(RPTDATA(7,DTYPE,DCT)) Q:DCT=""  D
"RTN","IBCNERPE",113,0)
 ..S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($P(RPTDATA(7,DTYPE,DCT),U)_": ",40)_$P(RPTDATA(7,DTYPE,DCT),U,2)
"RTN","IBCNERPE",114,0)
 ..Q
"RTN","IBCNERPE",115,0)
 .Q
"RTN","IBCNERPE",116,0)
 ;
"RTN","IBCNERPE",117,0)
 ; Contacts
"RTN","IBCNERPE",118,0)
CONT ;
"RTN","IBCNERPE",119,0)
 N TEXT
"RTN","IBCNERPE",120,0)
 S CNCT=+$O(RPTDATA(3,""),-1) I 'CNCT G ERR
"RTN","IBCNERPE",121,0)
 S DISPDATA(LCT)="",LCT=LCT+1,DISPDATA(LCT)="CONTACT INFORMATION:",LCT=LCT+1
"RTN","IBCNERPE",122,0)
 ; Build
"RTN","IBCNERPE",123,0)
 F CT=1:1:CNCT D
"RTN","IBCNERPE",124,0)
 . S DISPDATA(LCT)="",LCT=LCT+1,DISPDATA(LCT)=" "
"RTN","IBCNERPE",125,0)
 . S SEGCT=$O(RPTDATA(3,CT,""),-1)
"RTN","IBCNERPE",126,0)
 . S (DISPDATA(LCT),TEXT)=""
"RTN","IBCNERPE",127,0)
 . I $L($P(RPTDATA(3,CT),U,1)) S TEXT=$P(RPTDATA(3,CT),U,1)
"RTN","IBCNERPE",128,0)
 . F CT2=1:1:SEGCT S ITEM=$G(RPTDATA(3,CT,CT2)) D
"RTN","IBCNERPE",129,0)
 . . Q:'$L(ITEM)
"RTN","IBCNERPE",130,0)
 . . S TEXT=$S($L(TEXT):" "_TEXT_",  ",1:" ")_ITEM
"RTN","IBCNERPE",131,0)
 . . F  D  Q:'$L(TEXT)
"RTN","IBCNERPE",132,0)
 . . . S DISPDATA(LCT)=$E(TEXT,1,74)
"RTN","IBCNERPE",133,0)
 . . . S LCT=LCT+1
"RTN","IBCNERPE",134,0)
 . . . I $L(TEXT)>74 S TEXT=$E(TEXT,75,$L(TEXT)) Q
"RTN","IBCNERPE",135,0)
 . . . S TEXT=""
"RTN","IBCNERPE",136,0)
 . . . Q
"RTN","IBCNERPE",137,0)
 . . Q
"RTN","IBCNERPE",138,0)
 ; Err Info
"RTN","IBCNERPE",139,0)
ERR S ERCT=+$O(RPTDATA(6,""),-1) I 'ERCT G DATAX
"RTN","IBCNERPE",140,0)
 S DISPDATA(LCT)="",LCT=LCT+1
"RTN","IBCNERPE",141,0)
 S DISPDATA(LCT)="ERROR INFORMATION:",LCT=LCT+1
"RTN","IBCNERPE",142,0)
 S DISPDATA(LCT)=""
"RTN","IBCNERPE",143,0)
 F CT=1:1:ERCT D
"RTN","IBCNERPE",144,0)
 .S LCT=LCT+1,DISPDATA(LCT)="Reject Reason Code: "_$P(RPTDATA(6,CT),U,2) ; ib*2*497
"RTN","IBCNERPE",145,0)
 .S LCT=LCT+1,DISPDATA(LCT)="Reject Reason Text: "_$P(RPTDATA(6,CT),U,3) ; ib*2*497
"RTN","IBCNERPE",146,0)
 .S LCT=LCT+1,DISPDATA(LCT)="Action Code:   "_$P(RPTDATA(6,CT),U,4)   ; ib*2*497
"RTN","IBCNERPE",147,0)
 .S LCT=LCT+1,DISPDATA(LCT)="Action Code Text: "_$P(RPTDATA(6,CT),U,5)  ;IB*2*497
"RTN","IBCNERPE",148,0)
 .S LCT=LCT+1,DISPDATA(LCT)="HIPAA Loop:    "_$P(RPTDATA(6,CT),U,6)   ; ib*2*497
"RTN","IBCNERPE",149,0)
 .S LCT=LCT+1,DISPDATA(LCT)="HL7 Location:  "_$P(RPTDATA(6,CT),U)
"RTN","IBCNERPE",150,0)
 .S LCT=LCT+1,DISPDATA(LCT)="Error Source:  "_$P(RPTDATA(6,CT),U,7)   ; ib*2*497
"RTN","IBCNERPE",151,0)
 .I $D(RPTDATA(6,CT,"AMSG")) D
"RTN","IBCNERPE",152,0)
 ..S LCT=LCT+1,DISPDATA(LCT)=""
"RTN","IBCNERPE",153,0)
 ..S LCT=LCT+1,DISPDATA(LCT)="Additional Messages:"
"RTN","IBCNERPE",154,0)
 ..S LCT=LCT+1,DISPDATA(LCT)=""
"RTN","IBCNERPE",155,0)
 ..S Z=0 F  S Z=$O(RPTDATA(6,CT,"AMSG",Z)) Q:'Z  S LCT=LCT+1,DISPDATA(LCT)=RPTDATA(6,CT,"AMSG",Z)
"RTN","IBCNERPE",156,0)
 ..Q
"RTN","IBCNERPE",157,0)
 .S LCT=LCT+1,DISPDATA(LCT)=""
"RTN","IBCNERPE",158,0)
 .Q
"RTN","IBCNERPE",159,0)
 ;
"RTN","IBCNERPE",160,0)
DATAX ;
"RTN","IBCNERPE",161,0)
 ; Disp Future Date and Misc. Comments
"RTN","IBCNERPE",162,0)
 I $O(RPTDATA(5,0))'="" D
"RTN","IBCNERPE",163,0)
 . F CT=1:1:+$O(RPTDATA(5,""),-1) D
"RTN","IBCNERPE",164,0)
 .. S DISPDATA(LCT)=" "_$$FO^IBCNEUT1("",7,"R")_$G(RPTDATA(5,CT)),LCT=LCT+1
"RTN","IBCNERPE",165,0)
 ;
"RTN","IBCNERPE",166,0)
 Q
"RTN","IBCNERPE",167,0)
 ;
"RTN","IBCNERPE",168,0)
WRAPIT(ITEM,RCTR,DARRAY,MAX,INDENT) ; Module to wrap text into a display array.
"RTN","IBCNERPE",169,0)
 ;   ITEM = Text to be wrapped.
"RTN","IBCNERPE",170,0)
 ;   RCTR = Current Record counter.
"RTN","IBCNERPE",171,0)
 ;   DARRAY = Current Display Array.
"RTN","IBCNERPE",172,0)
 ;   MAX = Maximum number of characters for one line before wrapping.
"RTN","IBCNERPE",173,0)
 ;   INDENT = Character position to indent extra text when wrapping.
"RTN","IBCNERPE",174,0)
 ;
"RTN","IBCNERPE",175,0)
 N TXT,I,SPACE
"RTN","IBCNERPE",176,0)
 S TXT=ITEM,$P(SPACE," ",INDENT)=" "
"RTN","IBCNERPE",177,0)
 F  D  Q:'$L(TXT)
"RTN","IBCNERPE",178,0)
 .S DARRAY(RCTR)=$E(TXT,1,MAX)
"RTN","IBCNERPE",179,0)
 .S TXT=$E(TXT,MAX+1,$L(TXT)) Q:'$L(TXT)
"RTN","IBCNERPE",180,0)
 .S RCTR=RCTR+1
"RTN","IBCNERPE",181,0)
 .S TXT=SPACE_TXT
"RTN","IBCNERPE",182,0)
 Q
"RTN","IBCNERPI")
0^26^B43723857^n/a
"RTN","IBCNERPI",1,0)
IBCNERPI ;ALB/EJK - IBCNE EIV SECONDARY INSURANCE REPORT PRINT;08-APR-2013
"RTN","IBCNERPI",2,0)
 ;;2.0;INTEGRATED BILLING;**497**;08-APR-13;Build 120
"RTN","IBCNERPI",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERPI",4,0)
 ;
"RTN","IBCNERPI",5,0)
 ; variables from IBCNESI:
"RTN","IBCNERPI",6,0)
 ;  IBCNERTN = "IBCNERPI"
"RTN","IBCNERPI",7,0)
 ;  ^TMP($J,"IBCNESI1")
"RTN","IBCNERPI",8,0)
 ;  IBCNESPC("TYPE")
"RTN","IBCNERPI",9,0)
 ;  IBCOMP - FLAG FOR COMPLETED ENTRIES
"RTN","IBCNERPI",10,0)
 ;  IBSDT - REPORT START DATE
"RTN","IBCNERPI",11,0)
 ;  IBEDT - REPORT END DATE
"RTN","IBCNERPI",12,0)
 Q
"RTN","IBCNERPI",13,0)
 ;
"RTN","IBCNERPI",14,0)
EN ; Entry point
"RTN","IBCNERPI",15,0)
 N DLINE,CRT,DFN,EORMSG,IBDFN,IBDOB,IBDT,IBEIEN,IBURTE,IBSTR1,IBSEQ,IBCNT
"RTN","IBCNERPI",16,0)
 S (IBPYR,RIEN,IBELG,IBDT,IBDFN,IBRIEN,IBEIEN)=""
"RTN","IBCNERPI",17,0)
 S (IBPGC,IBPXT)=0
"RTN","IBCNERPI",18,0)
 S NONEMSG="* * * N O  D A T A  F O U N D * * *"
"RTN","IBCNERPI",19,0)
 S EORMSG="*** END OF REPORT ***"
"RTN","IBCNERPI",20,0)
 ;S NPROC="Not Processed"
"RTN","IBCNERPI",21,0)
 S TSTAMP=$$FMTE^XLFDT($$NOW^XLFDT,1) ; time of report
"RTN","IBCNERPI",22,0)
 S TYPE=$G(IBCNESPC("TYPE")) ; report type
"RTN","IBCNERPI",23,0)
 S WIDTH=$S(TYPE="S":79,1:131)
"RTN","IBCNERPI",24,0)
 S IBSDT=$$FMTE^XLFDT(IBSDT,"5Z"),IBEDT=$$FMTE^XLFDT(IBEDT,"5Z")
"RTN","IBCNERPI",25,0)
 ; Determine IO parameters
"RTN","IBCNERPI",26,0)
 S MAXCNT=IOSL-6,CRT=0
"RTN","IBCNERPI",27,0)
 S:IOST["C-" MAXCNT=IOSL-3,CRT=1
"RTN","IBCNERPI",28,0)
 ; print data
"RTN","IBCNERPI",29,0)
 D HEADER I $G(ZTSTOP)!IBPXT Q
"RTN","IBCNERPI",30,0)
 ; If global does not exist - display No Data message
"RTN","IBCNERPI",31,0)
 I '$D(^TMP($J,"IBCNESI1")) D LINE($$FO^IBCNEUT1(NONEMSG,$$CENTER(NONEMSG),"R")) G EXIT
"RTN","IBCNERPI",32,0)
 F  S IBDT=$O(^TMP($J,"IBCNESI1",IBDT)) Q:IBDT=""  D  Q:$G(ZTSTOP)!IBPXT
"RTN","IBCNERPI",33,0)
 .F  S IBDFN=$O(^TMP($J,"IBCNESI1",IBDT,IBDFN)) Q:IBDFN=""  D  Q:$G(ZTSTOP)!IBPXT
"RTN","IBCNERPI",34,0)
 ..F  S IBRIEN=$O(^TMP($J,"IBCNESI1",IBDT,IBDFN,IBRIEN)) Q:IBRIEN=""  D  Q:$G(ZTSTOP)!IBPXT
"RTN","IBCNERPI",35,0)
 ...D PTHDR Q:$G(ZTSTOP)!IBPXT
"RTN","IBCNERPI",36,0)
 ...F  S IBEIEN=$O(^TMP($J,"IBCNESI1",IBDT,IBDFN,IBRIEN,"INS",IBEIEN)) Q:IBEIEN=""  D PTDTL Q:$G(ZTSTOP)!IBPXT
"RTN","IBCNERPI",37,0)
 ...Q:$G(ZTSTOP)!IBPXT
"RTN","IBCNERPI",38,0)
 ...D PTCMT
"RTN","IBCNERPI",39,0)
 ...Q
"RTN","IBCNERPI",40,0)
 ..Q
"RTN","IBCNERPI",41,0)
 .Q
"RTN","IBCNERPI",42,0)
 I $G(ZTSTOP)!IBPXT Q
"RTN","IBCNERPI",43,0)
 ;
"RTN","IBCNERPI",44,0)
EXIT ;
"RTN","IBCNERPI",45,0)
 D LINE($$FO^IBCNEUT1(EORMSG,$$CENTER(EORMSG),"R"))
"RTN","IBCNERPI",46,0)
 I CRT,IBPGC>0,'$D(ZTQUEUED) D EOL
"RTN","IBCNERPI",47,0)
 K IBCNESPC("TYPE"),IBELG,IBPGC,IBPXT,IBPYR,IBRIEN,MAXCNT,NONEMSG,RIEN,TSTAMP,TYPE,WIDTH,IBCOMP,IBEDT,IBSDT,IBSORT
"RTN","IBCNERPI",48,0)
 Q
"RTN","IBCNERPI",49,0)
 ;
"RTN","IBCNERPI",50,0)
EOL ; display "end of page" message and set exit flag
"RTN","IBCNERPI",51,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,LIN
"RTN","IBCNERPI",52,0)
 I MAXCNT<51 F LIN=1:1:(MAXCNT-$Y) W !
"RTN","IBCNERPI",53,0)
 S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERPI",54,0)
 I $D(DTOUT)!$D(DUOUT) S IBPXT=1
"RTN","IBCNERPI",55,0)
 Q
"RTN","IBCNERPI",56,0)
 ;
"RTN","IBCNERPI",57,0)
HEADER ; print header for each page
"RTN","IBCNERPI",58,0)
 N DASHES,HDR,OFFSET,SRT
"RTN","IBCNERPI",59,0)
 ;
"RTN","IBCNERPI",60,0)
 I CRT,IBPGC>0,'$D(ZTQUEUED) D EOL I IBPXT Q
"RTN","IBCNERPI",61,0)
 S TSTAMP=$$FMTE^XLFDT($$NOW^XLFDT,1) ; time of report
"RTN","IBCNERPI",62,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD() S (ZTSTOP,IBPXT)=1 Q
"RTN","IBCNERPI",63,0)
 S IBPGC=IBPGC+1
"RTN","IBCNERPI",64,0)
 W @IOF,!,"Pt. Secondary Insurance Report"
"RTN","IBCNERPI",65,0)
 S HDR=TSTAMP_"  Page: "_IBPGC,OFFSET=WIDTH-$L(HDR)
"RTN","IBCNERPI",66,0)
 W ?OFFSET,HDR,!
"RTN","IBCNERPI",67,0)
 I IBSORT="+1" W "Sort: Chronological Order"
"RTN","IBCNERPI",68,0)
 I IBSORT=-1 W "Sort: Reverse Chronological Order"
"RTN","IBCNERPI",69,0)
 S HDR=IBSDT_" - "_IBEDT
"RTN","IBCNERPI",70,0)
 S OFFSET=WIDTH-$L(HDR)
"RTN","IBCNERPI",71,0)
 W ?OFFSET,HDR,!
"RTN","IBCNERPI",72,0)
 W "Includes: "
"RTN","IBCNERPI",73,0)
 W $S(IBCOMP=3!(IBCOMP=4):"non-",1:""),"Completed Entries"
"RTN","IBCNERPI",74,0)
 W $S(IBCOMP=1!(IBCOMP=3):" without",1:" with")," associated comments"
"RTN","IBCNERPI",75,0)
 W !
"RTN","IBCNERPI",76,0)
 Q
"RTN","IBCNERPI",77,0)
 ;
"RTN","IBCNERPI",78,0)
PTHDR ;HEADER FOR EACH PATIENT ENTRY
"RTN","IBCNERPI",79,0)
 N REVSTAT
"RTN","IBCNERPI",80,0)
 W !,$G(^TMP($J,"IBCNESI1",IBDT*IBSORT,IBDFN,IBRIEN,"PATIENT NAME"))
"RTN","IBCNERPI",81,0)
 S IBDOB=$G(^TMP($J,"IBCNESI1",IBDT*IBSORT,IBDFN,IBRIEN,"DOB"))
"RTN","IBCNERPI",82,0)
 I IBDOB>0 S IBDOB=17000000+IBDOB,IBDOB=$E(IBDOB,5,6)_"/"_$E(IBDOB,7,8)_"/"_$E(IBDOB,1,4)
"RTN","IBCNERPI",83,0)
 W "  "_IBDOB
"RTN","IBCNERPI",84,0)
 S REVSTAT=$P($G(^TMP($J,"IBCNESI1",IBDT*IBSORT,IBDFN,IBRIEN,"REV STATUS")),U)
"RTN","IBCNERPI",85,0)
 W "  Review Status: "_$S(REVSTAT=0:"Not Reviewed",REVSTAT=1:"In Process",REVSTAT=2:"Complete",1:"")
"RTN","IBCNERPI",86,0)
 S $P(DASHES,"-",WIDTH)="" D LINE(DASHES)
"RTN","IBCNERPI",87,0)
 Q
"RTN","IBCNERPI",88,0)
 ;
"RTN","IBCNERPI",89,0)
PTDTL ;PRINT PATIENT DETAIL LINES
"RTN","IBCNERPI",90,0)
 S DLINE=IBDT*IBSORT,DLINE=$$FMTE^XLFDT(DLINE,"5Z") D LINE(DLINE)
"RTN","IBCNERPI",91,0)
 S DLINE=$G(^TMP($J,"IBCNESI1",IBDT*IBSORT,IBDFN,IBRIEN,"INS",IBEIEN,"EMFLAG"))_"   "_$G(^TMP($J,"IBCNESI1",IBDT*IBSORT,IBDFN,IBRIEN,"INS",IBEIEN,"NAME")) D LINE(DLINE) Q:$G(ZTSTOP)!IBPXT
"RTN","IBCNERPI",92,0)
 I $G(^TMP($J,"IBCNESI1",IBDT*IBSORT,IBDFN,IBRIEN,"INS",IBEIEN,"ID"))]"" S DLINE="     Payer ID: "_$G(^TMP($J,"IBCNESI1",IBDT*IBSORT,IBDFN,IBRIEN,"INS",IBEIEN,"ID")) D LINE(DLINE) Q:$G(ZTSTOP)!IBPXT
"RTN","IBCNERPI",93,0)
 I $G(^TMP($J,"IBCNESI1",IBDT*IBSORT,IBDFN,IBRIEN,"INS",IBEIEN,"ADDRESS 1"))]"" S DLINE="     "_$G(^TMP($J,"IBCNESI1",IBDT*IBSORT,IBDFN,IBRIEN,"INS",IBEIEN,"ADDRESS 1")) D LINE(DLINE) Q:$G(ZTSTOP)!IBPXT
"RTN","IBCNERPI",94,0)
 I $G(^TMP($J,"IBCNESI1",IBDT*IBSORT,IBDFN,IBRIEN,"INS",IBEIEN,"ADDRESS 2"))]"" S DLINE="     "_$G(^TMP($J,"IBCNESI1",IBDT*IBSORT,IBDFN,IBRIEN,"INS",IBEIEN,"ADDRESS 2")) D LINE(DLINE) Q:$G(ZTSTOP)!IBPXT
"RTN","IBCNERPI",95,0)
 S DLINE="     "
"RTN","IBCNERPI",96,0)
 S DLINE=DLINE_$G(^TMP($J,"IBCNESI1",IBDT*IBSORT,IBDFN,IBRIEN,"INS",IBEIEN,"CITY"))_", "
"RTN","IBCNERPI",97,0)
 S DLINE=DLINE_$G(^TMP($J,"IBCNESI1",IBDT*IBSORT,IBDFN,IBRIEN,"INS",IBEIEN,"STATE"))_" "
"RTN","IBCNERPI",98,0)
 S DLINE=DLINE_$G(^TMP($J,"IBCNESI1",IBDT*IBSORT,IBDFN,IBRIEN,"INS",IBEIEN,"ZIP"))
"RTN","IBCNERPI",99,0)
 D LINE(DLINE) I $G(ZTSTOP)!IBPXT Q
"RTN","IBCNERPI",100,0)
 F IBURTE="TE","UR" D  I $G(ZTSTOP)!IBPXT Q
"RTN","IBCNERPI",101,0)
 . S IBSEQ=0,IBSEQ=$O(^TMP($J,"IBCNESI2",IBRIEN,"INS",IBEIEN,IBURTE,IBSEQ)) Q:'IBSEQ
"RTN","IBCNERPI",102,0)
 . S IBSTR1=$S(IBURTE="TE":"Phone: ",1:"Website: ")_^TMP($J,"IBCNESI1",IBDT*IBSORT,IBDFN,IBRIEN,"INS",IBEIEN,IBURTE,IBSEQ) D WRAP^IBCNESI2(.IBSTR1,70)
"RTN","IBCNERPI",103,0)
 . F IBCNT=1:1:$O(IBSTR1(""),-1) S DLINE="     "_IBSTR1(IBCNT) D LINE(DLINE) I $G(ZTSTOP)!IBPXT Q
"RTN","IBCNERPI",104,0)
 . Q
"RTN","IBCNERPI",105,0)
 I '$G(ZTSTOP)&'IBPXT D LINE("")
"RTN","IBCNERPI",106,0)
 Q
"RTN","IBCNERPI",107,0)
PTCMT ; print comments
"RTN","IBCNERPI",108,0)
 ; print comments
"RTN","IBCNERPI",109,0)
 N DIWF,DIWL,DIWR,IBCMDT,IBCMIEN,IBLN,IBRVIEN,IENS,X
"RTN","IBCNERPI",110,0)
 I '+$G(^TMP($J,"IBCNESI1",IBDT*IBSORT,IBDFN,IBRIEN,"NO CMNT")) D
"RTN","IBCNERPI",111,0)
 .D LINE("") I $G(ZTSTOP)!IBPXT Q
"RTN","IBCNERPI",112,0)
 .D LINE("Comments:") I $G(ZTSTOP)!IBPXT Q
"RTN","IBCNERPI",113,0)
 .D LINE("") I $G(ZTSTOP)!IBPXT Q
"RTN","IBCNERPI",114,0)
 .S IBRVIEN=+$G(^TMP($J,"IBCNESI1",IBDT*IBSORT,IBDFN,IBRIEN,"REV IEN"))
"RTN","IBCNERPI",115,0)
 .I '$D(^IBCN(365.2,IBRVIEN,1)) D LINE("     No Comments Entered."),LINE("") Q
"RTN","IBCNERPI",116,0)
 .S IBCMDT="" F  S IBCMDT=$O(^IBCN(365.2,IBRVIEN,1,"B",IBCMDT),-1) Q:'IBCMDT!$G(ZTSTOP)!IBPXT  D
"RTN","IBCNERPI",117,0)
 ..S IBCMIEN=$O(^IBCN(365.2,IBRVIEN,1,"B",IBCMDT,"")) I IBCMIEN="" Q
"RTN","IBCNERPI",118,0)
 ..S IENS=IBCMIEN_","_IBRVIEN_","
"RTN","IBCNERPI",119,0)
 ..S DLINE=$$FMTE^XLFDT($$GET1^DIQ(365.21,IENS,.01),"5Z")_"     Entered by: "_$$GET1^DIQ(365.21,IENS,.02)
"RTN","IBCNERPI",120,0)
 ..D LINE(DLINE) I $G(ZTSTOP)!IBPXT Q
"RTN","IBCNERPI",121,0)
 ..K ^UTILITY($J,"W")
"RTN","IBCNERPI",122,0)
 ..F IBLN=1:1:$P($G(^IBCN(365.2,IBRVIEN,1,IBCMIEN,1,0)),U,3) S X=$G(^IBCN(365.2,IBRVIEN,1,IBCMIEN,1,IBLN,0)),DIWL=1,DIWR=70,DIWF="" D ^DIWP
"RTN","IBCNERPI",123,0)
 ..I $D(^UTILITY($J,"W")) S IBLN=0 F  S IBLN=$O(^UTILITY($J,"W",1,IBLN)) Q:'IBLN!$G(ZTSTOP)!IBPXT  D
"RTN","IBCNERPI",124,0)
 ...S DLINE="     "_$G(^UTILITY($J,"W",1,IBLN,0)) D LINE(DLINE)
"RTN","IBCNERPI",125,0)
 ...Q
"RTN","IBCNERPI",126,0)
 ..I '$G(ZTSTOP),'IBPXT,$O(^IBCN(365.2,IBRVIEN,1,"B",IBCMDT),-1)'="" D LINE("")
"RTN","IBCNERPI",127,0)
 ..Q
"RTN","IBCNERPI",128,0)
 .D LINE("") ; blank line before next person
"RTN","IBCNERPI",129,0)
 .Q
"RTN","IBCNERPI",130,0)
 K ^UTILITY($J,"W")
"RTN","IBCNERPI",131,0)
 Q
"RTN","IBCNERPI",132,0)
 ;
"RTN","IBCNERPI",133,0)
LINE(LINE) ; Print line of data
"RTN","IBCNERPI",134,0)
 I $Y+1>MAXCNT D HEADER I $G(ZTSTOP)!IBPXT Q
"RTN","IBCNERPI",135,0)
 W !,?1,LINE
"RTN","IBCNERPI",136,0)
 Q
"RTN","IBCNERPI",137,0)
 ;
"RTN","IBCNERPI",138,0)
CENTER(LINE) ; return length of a centered line
"RTN","IBCNERPI",139,0)
 ; LINE - line to center
"RTN","IBCNERPI",140,0)
 N LENGTH,OFFSET
"RTN","IBCNERPI",141,0)
 S LENGTH=$L(LINE),OFFSET=IOM-$L(LINE)\2
"RTN","IBCNERPI",142,0)
 Q OFFSET+LENGTH
"RTN","IBCNERTQ")
0^15^B44184624^B45372080
"RTN","IBCNERTQ",1,0)
IBCNERTQ ;ALB/BI - Real-time Insurance Verification ;27-AUG-2010
"RTN","IBCNERTQ",2,0)
 ;;2.0;INTEGRATED BILLING;**438,467,497**;21-MAR-94;Build 120
"RTN","IBCNERTQ",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERTQ",4,0)
 Q
"RTN","IBCNERTQ",5,0)
 ;
"RTN","IBCNERTQ",6,0)
TRIG(N2) ; Called by triggers in the INSURANCE BUFFER FILE Dictionary (355.33)
"RTN","IBCNERTQ",7,0)
 ; Fields:  20.01 - INSURANCE COMPANY NAME
"RTN","IBCNERTQ",8,0)
 ;          90.01 - GROUP NAME
"RTN","IBCNERTQ",9,0)
 ;          90.02 - GROUP NUMBER
"RTN","IBCNERTQ",10,0)
 ;          60.01 - PATIENT NAME
"RTN","IBCNERTQ",11,0)
 ;          90.03 - SUBSCRIBER ID
"RTN","IBCNERTQ",12,0)
 ;          60.08 - INSURED'S DOB
"RTN","IBCNERTQ",13,0)
 ;          62.01 - PATIENT ID
"RTN","IBCNERTQ",14,0)
 ;
"RTN","IBCNERTQ",15,0)
 ; To make a request for Real Time Verification
"RTN","IBCNERTQ",16,0)
 ; The following fields must contain data.
"RTN","IBCNERTQ",17,0)
 ;          20.01 - INSURANCE COMPANY NAME
"RTN","IBCNERTQ",18,0)
 ;          60.01 - PATIENT NAME
"RTN","IBCNERTQ",19,0)
 ;          90.03 - SUBSCRIBER ID (if patient is the subscriber)
"RTN","IBCNERTQ",20,0)
 ;          60.08 - INSURED'S DOB (if patient is not the subscriber)
"RTN","IBCNERTQ",21,0)
 ;          62.01 - PATIENT ID (if patient is not the subscriber)
"RTN","IBCNERTQ",22,0)
 ;
"RTN","IBCNERTQ",23,0)
 N TQIEN,TQN0,NODE20,NODE60,NODE90,QF,N4,PTID,SUBID,MGRP,DFN,PREL
"RTN","IBCNERTQ",24,0)
 N RESPONSE S RESPONSE=0
"RTN","IBCNERTQ",25,0)
 ; Protect the FileMan variables.
"RTN","IBCNERTQ",26,0)
 N DA,DB,DC,DH,DI,DK,DL,DM,DP,DQ,DR,INI,MR,NX,UP
"RTN","IBCNERTQ",27,0)
 ;
"RTN","IBCNERTQ",28,0)
 I N2="" Q RESPONSE
"RTN","IBCNERTQ",29,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNERTQ",30,0)
 S NODE20=$G(^IBA(355.33,N2,20))
"RTN","IBCNERTQ",31,0)
 S NODE60=$G(^IBA(355.33,N2,60))
"RTN","IBCNERTQ",32,0)
 S NODE90=$G(^IBA(355.33,N2,90))
"RTN","IBCNERTQ",33,0)
 S PREL=$P(NODE60,U,14)
"RTN","IBCNERTQ",34,0)
 I $P(NODE20,U,1)="" Q RESPONSE                       ;INSURANCE COMPANY NAME
"RTN","IBCNERTQ",35,0)
 I $P(NODE60,U,1)="" Q RESPONSE                       ;PATIENT NAME
"RTN","IBCNERTQ",36,0)
 I $P(NODE90,U,3)="" Q RESPONSE                       ;SUBSCRIBER ID
"RTN","IBCNERTQ",37,0)
 ; exclude dependent inquiries w/o patient id or DOB
"RTN","IBCNERTQ",38,0)
 I PREL'=18,PREL'="",($P($G(^IBA(355.33,N2,62)),U)=""!($P(NODE60,U,8)="")) Q RESPONSE
"RTN","IBCNERTQ",39,0)
 ; exclude ePharmacy buffer entries
"RTN","IBCNERTQ",40,0)
 I $G(IBNCPDPELIG) Q RESPONSE  ; variable set in ^IBNCPDP3
"RTN","IBCNERTQ",41,0)
 I $P($G(^IBA(355.33,N2,0)),U,17)'="" Q RESPONSE
"RTN","IBCNERTQ",42,0)
 ;
"RTN","IBCNERTQ",43,0)
 ; prevent HMS entries from creating inquiries
"RTN","IBCNERTQ",44,0)
 N PTR S PTR=+$P($G(^IBA(355.33,N2,0)),U,3)
"RTN","IBCNERTQ",45,0)
 I PTR,$P($G(^IBE(355.12,PTR,0)),U,2)="HMS",PREL="" Q RESPONSE
"RTN","IBCNERTQ",46,0)
 ;
"RTN","IBCNERTQ",47,0)
 ; Quit if a waiting transaction exists in file #365.1
"RTN","IBCNERTQ",48,0)
 S PTID=$P(NODE60,U,1)
"RTN","IBCNERTQ",49,0)
 S SUBID=$P(NODE90,U,3)
"RTN","IBCNERTQ",50,0)
 S QF=0,N4=""
"RTN","IBCNERTQ",51,0)
 F  S N4=$O(^IBCN(365.1,"E",PTID,N4)) Q:N4=""  Q:QF=1  D
"RTN","IBCNERTQ",52,0)
 .S TQN0=$G(^IBCN(365.1,N4,0))
"RTN","IBCNERTQ",53,0)
 .; don't send again if there's an entry in the queue with the same subscriber id, same buffer entry, and
"RTN","IBCNERTQ",54,0)
 .; transmission status other than "response received" or "cancelled" 
"RTN","IBCNERTQ",55,0)
 .I $P(TQN0,U,5)=N2,".3.7."'[("."_$P(TQN0,U,4)_"."),$P(TQN0,U,16)=SUBID S QF=1 Q
"RTN","IBCNERTQ",56,0)
 .Q
"RTN","IBCNERTQ",57,0)
 I QF=1 Q RESPONSE                                    ; DON'T SEND AGAIN.
"RTN","IBCNERTQ",58,0)
 ;
"RTN","IBCNERTQ",59,0)
 ; Quit if there is a lock on patient and policy in file #355.33
"RTN","IBCNERTQ",60,0)
 L +^IBA(355.33,N2):1 I '$T Q RESPONSE                ; RECORD LOCKED By Another Process
"RTN","IBCNERTQ",61,0)
 ;
"RTN","IBCNERTQ",62,0)
 ;Store Service Type Code in BUFFER file #355.33 just before sending to EIV TRANSMISSION QUEUE
"RTN","IBCNERTQ",63,0)
 I +$G(^IBA(355.33,N2,80))'>0 D SETSTC(N2)
"RTN","IBCNERTQ",64,0)
 ;
"RTN","IBCNERTQ",65,0)
 ; Save and clear the dictionary 355.33 temporary error global, ^TMP("DIERR",$J)
"RTN","IBCNERTQ",66,0)
 K ^TMP("IBCNERTQ","DIERR",$J)
"RTN","IBCNERTQ",67,0)
 M ^TMP("IBCNERTQ","DIERR",$J)=^TMP("DIERR",$J)
"RTN","IBCNERTQ",68,0)
 K ^TMP("DIERR",$J)
"RTN","IBCNERTQ",69,0)
 ;
"RTN","IBCNERTQ",70,0)
 ; if buffer entry is currently being edited, set the flag and quit
"RTN","IBCNERTQ",71,0)
 I $G(^TMP("IBCNERTQ",$J,N2,"LOCK"))=1 S ^TMP("IBCNERTQ",$J,N2,"TRIGGER")=1 G ENDTRIG
"RTN","IBCNERTQ",72,0)
 ;
"RTN","IBCNERTQ",73,0)
 ; Sending to the EIV TRANSMISION QUEUE.
"RTN","IBCNERTQ",74,0)
 S TQIEN=$$IBE(N2) I 'TQIEN G ENDTRIG
"RTN","IBCNERTQ",75,0)
 ; Load and Send HL7 Message
"RTN","IBCNERTQ",76,0)
 S RESPONSE=$$PROCSEND(TQIEN)
"RTN","IBCNERTQ",77,0)
 ;
"RTN","IBCNERTQ",78,0)
ENDTRIG ; Final Clean Up.
"RTN","IBCNERTQ",79,0)
 ;
"RTN","IBCNERTQ",80,0)
 ; Restore the dictionary 355.33 temporary error global, ^TMP("DIERR",$J)
"RTN","IBCNERTQ",81,0)
 K ^TMP("DIERR",$J)
"RTN","IBCNERTQ",82,0)
 M ^TMP("DIERR",$J)=^TMP("IBCNERTQ","DIERR",$J)
"RTN","IBCNERTQ",83,0)
 K ^TMP("IBCNERTQ","DIERR",$J)
"RTN","IBCNERTQ",84,0)
 ;
"RTN","IBCNERTQ",85,0)
 ; Remove Dictionary Entry Lock.
"RTN","IBCNERTQ",86,0)
 L -^IBA(355.33,N2)
"RTN","IBCNERTQ",87,0)
 Q RESPONSE
"RTN","IBCNERTQ",88,0)
 ;
"RTN","IBCNERTQ",89,0)
IBE(IEN) ; Insurance Buffer Extract
"RTN","IBCNERTQ",90,0)
 N SETSTR,FRESHDAY,ISYMBOL,STATIEN,OVRFRESH
"RTN","IBCNERTQ",91,0)
 N PDOD,SRVICEDT,FRESHDT,PAYERSTR,PAYERID,SYMBOL
"RTN","IBCNERTQ",92,0)
 N PIEN,INSNAME,MCAREFLG,TQDT,TQIENS,TQOK,QUEUED
"RTN","IBCNERTQ",93,0)
 N TQIEN,CNT,SIDCNT,MAXCNT
"RTN","IBCNERTQ",94,0)
 ;
"RTN","IBCNERTQ",95,0)
 S CNT=0
"RTN","IBCNERTQ",96,0)
 ;
"RTN","IBCNERTQ",97,0)
 S QUEUED=0
"RTN","IBCNERTQ",98,0)
 S SETSTR=$$SETTINGS^IBCNEDE7(1)     ;Returns buffer extract settings
"RTN","IBCNERTQ",99,0)
 I 'SETSTR Q QUEUED                  ;Quit if extract is not active
"RTN","IBCNERTQ",100,0)
 S MAXCNT=$P(SETSTR,U,4)             ;Max # TQ entries that may be created
"RTN","IBCNERTQ",101,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNERTQ",102,0)
 ;
"RTN","IBCNERTQ",103,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U,1)          ;System freshness days
"RTN","IBCNERTQ",104,0)
 ;
"RTN","IBCNERTQ",105,0)
 ; Get symbol, if symbol'=" " OR "!" OR "#" then quit
"RTN","IBCNERTQ",106,0)
 S ISYMBOL=$$SYMBOL^IBCNBLL(IEN)                  ;Insurance buffer symbol
"RTN","IBCNERTQ",107,0)
 I (ISYMBOL'=" ")&(ISYMBOL'="!")&(ISYMBOL'="#") Q QUEUED
"RTN","IBCNERTQ",108,0)
 ;
"RTN","IBCNERTQ",109,0)
 ; Get the eIV STATUS IEN and quit for response related errors
"RTN","IBCNERTQ",110,0)
 S STATIEN=+$P($G(^IBA(355.33,IEN,0)),U,12)
"RTN","IBCNERTQ",111,0)
 I ",11,12,15,"[(","_STATIEN_",") Q QUEUED        ;Prevent update for response errors
"RTN","IBCNERTQ",112,0)
 ;
"RTN","IBCNERTQ",113,0)
 S OVRFRESH=$P($G(^IBA(355.33,IEN,0)),U,13)       ;Freshness OvrRd flag
"RTN","IBCNERTQ",114,0)
 S DFN=$P($G(^IBA(355.33,IEN,60)),U,1)            ;Patient DFN
"RTN","IBCNERTQ",115,0)
 Q:DFN="" QUEUED
"RTN","IBCNERTQ",116,0)
 I $P($G(^DPT(DFN,0)),U,21) Q QUEUED              ;Exclude if test patient
"RTN","IBCNERTQ",117,0)
 ;
"RTN","IBCNERTQ",118,0)
 S PDOD=$P($G(^DPT(DFN,.35)),U,1)\1               ;Patient's date of death
"RTN","IBCNERTQ",119,0)
 S SRVICEDT=+$P($G(^IBA(355.33,IEN,0)),U,18) S:'SRVICEDT SRVICEDT=DT ; Service Date
"RTN","IBCNERTQ",120,0)
 I PDOD,PDOD<SRVICEDT S SRVICEDT=PDOD
"RTN","IBCNERTQ",121,0)
 S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNERTQ",122,0)
 S PAYERSTR=$$INSERROR^IBCNEUT3("B",IEN)          ;Payer String
"RTN","IBCNERTQ",123,0)
 S PAYERID=$P(PAYERSTR,U,3),PIEN=$P(PAYERSTR,U,2) ;Payer ID
"RTN","IBCNERTQ",124,0)
 S SYMBOL=+PAYERSTR                               ;Payer Symbol
"RTN","IBCNERTQ",125,0)
 I '$$PYRACTV^IBCNEDE7(PIEN) Q QUEUED             ;Payer is not nationally active
"RTN","IBCNERTQ",126,0)
 ;
"RTN","IBCNERTQ",127,0)
 ; If payer symbol is returned set symbol in Ins. Buffer and quit
"RTN","IBCNERTQ",128,0)
 I SYMBOL D BUFF^IBCNEUT2(IEN,SYMBOL) Q QUEUED
"RTN","IBCNERTQ",129,0)
 ;
"RTN","IBCNERTQ",130,0)
 D CLEAR^IBCNEUT4(IEN)                            ;Remove any existing symbol
"RTN","IBCNERTQ",131,0)
 ;
"RTN","IBCNERTQ",132,0)
 ; If no payer ID or no payer IEN is returned quit
"RTN","IBCNERTQ",133,0)
 I (PAYERID="")!('PIEN) Q QUEUED
"RTN","IBCNERTQ",134,0)
 ;
"RTN","IBCNERTQ",135,0)
 ; Update service date and freshness date based on payer's allowed
"RTN","IBCNERTQ",136,0)
 ;  date range
"RTN","IBCNERTQ",137,0)
 D UPDDTS^IBCNEDE6(PIEN,.SRVICEDT,.FRESHDT)
"RTN","IBCNERTQ",138,0)
 ;
"RTN","IBCNERTQ",139,0)
 ; Update service dates for inquiries to be transmitted
"RTN","IBCNERTQ",140,0)
 D TQUPDSV^IBCNEUT5(DFN,PIEN,SRVICEDT)
"RTN","IBCNERTQ",141,0)
 ;
"RTN","IBCNERTQ",142,0)
 ; Allow only one MEDICARE transmission per patient
"RTN","IBCNERTQ",143,0)
 S INSNAME=$P($G(^IBA(355.33,IEN,20)),U)
"RTN","IBCNERTQ",144,0)
 I INSNAME["MEDICARE",$G(MCAREFLG(DFN)) Q QUEUED
"RTN","IBCNERTQ",145,0)
 ; make sure that entries have pat. relationship set to "self"
"RTN","IBCNERTQ",146,0)
 D SETREL^IBCNEDE1(IEN)
"RTN","IBCNERTQ",147,0)
 ;
"RTN","IBCNERTQ",148,0)
 ; If freshness override flag is set, file to TQ and quit
"RTN","IBCNERTQ",149,0)
 I OVRFRESH=1 D  Q $G(TQIEN)
"RTN","IBCNERTQ",150,0)
 . NEW DIE,X,Y,DISYS
"RTN","IBCNERTQ",151,0)
 . S FDA(355.33,IEN_",",.13)="" D FILE^DIE("","FDA") K FDA
"RTN","IBCNERTQ",152,0)
 . S:INSNAME["MEDICARE" MCAREFLG(DFN)=1 D TQ^IBCNEDE1
"RTN","IBCNERTQ",153,0)
 ; Check the existing TQ entries to confirm that this buffer IEN is
"RTN","IBCNERTQ",154,0)
 ; not included
"RTN","IBCNERTQ",155,0)
 S (TQDT,TQIENS)="",TQOK=1
"RTN","IBCNERTQ",156,0)
 I ISYMBOL'="#" F  S TQDT=$O(^IBCN(365.1,"AD",DFN,PIEN,TQDT)) Q:'TQDT!'TQOK  D
"RTN","IBCNERTQ",157,0)
 . F  S TQIENS=$O(^IBCN(365.1,"AD",DFN,PIEN,TQDT,TQIENS)) Q:'TQIENS!'TQOK  D
"RTN","IBCNERTQ",158,0)
 .. I $P($G(^IBCN(365.1,TQIENS,0)),U,5)=IEN S TQOK=0 Q
"RTN","IBCNERTQ",159,0)
 I TQOK S:INSNAME["MEDICARE" MCAREFLG(DFN)=1 D TQ^IBCNEDE1
"RTN","IBCNERTQ",160,0)
 Q $G(TQIEN)
"RTN","IBCNERTQ",161,0)
 ;
"RTN","IBCNERTQ",162,0)
PROCSEND(TQIEN) ; Make call to PROC^IBCNEDEP to build the HL7 message.  Then send the Message.
"RTN","IBCNERTQ",163,0)
 N BUFF,CNT,D,D0,DFN,DIC,DIE,DILOCKTM,DISYS,EXT
"RTN","IBCNERTQ",164,0)
 N FRDT,GT1,HCT,HL,HLCDOM,HLCINS,HLCS,HLCSTCP,HLDOM,HLECH
"RTN","IBCNERTQ",165,0)
 N HLFS,HLHDR,HLINST,HLIP,HLN,HLP,HLPARAM,HLPROD,HLQ,HLRESLT
"RTN","IBCNERTQ",166,0)
 N HLSAN,HLTYPE,HLX,IBCNHLP,IEN,IHCNT,IN1,IRIEN,MSGID,TOT
"RTN","IBCNERTQ",167,0)
 N NRETR,NTRAN,OVRIDE,PATID,PAYR,PID,QUERY,RSTYPE,SRVDT,STA
"RTN","IBCNERTQ",168,0)
 N SUB4,SUBID,TRANSR,U,VACNTRY,VNUM,X,ZMID
"RTN","IBCNERTQ",169,0)
 ;
"RTN","IBCNERTQ",170,0)
 K ^TMP("HLS",$J)
"RTN","IBCNERTQ",171,0)
 S IEN=TQIEN
"RTN","IBCNERTQ",172,0)
 I $D(DT)=0 N DT S DT=$$DT^XLFDT
"RTN","IBCNERTQ",173,0)
 S U="^",CNT=0,TOT=0,IHCNT=0
"RTN","IBCNERTQ",174,0)
 S QUERY=$P($G(^IBCN(365.1,IEN,0)),U,11)
"RTN","IBCNERTQ",175,0)
 I QUERY="V" S VNUM=3
"RTN","IBCNERTQ",176,0)
 I $D(VNUM)=0 Q 0
"RTN","IBCNERTQ",177,0)
 ;  Initialize HL7 variables protocol for Verifications
"RTN","IBCNERTQ",178,0)
 S IBCNHLP="IBCNE IIV RQV OUT"
"RTN","IBCNERTQ",179,0)
 D INIT^IBCNEHLO
"RTN","IBCNERTQ",180,0)
 D PROC^IBCNEDEP
"RTN","IBCNERTQ",181,0)
 D GENERATE^HLMA(IBCNHLP,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNERTQ",182,0)
 ;  If not successful
"RTN","IBCNERTQ",183,0)
 I $P(HLRESLT,U,2)]"" D HLER^IBCNEDEQ Q 0
"RTN","IBCNERTQ",184,0)
 ;  If successful
"RTN","IBCNERTQ",185,0)
 D SCC^IBCNEDEQ
"RTN","IBCNERTQ",186,0)
 K ^TMP("HLS",$J)
"RTN","IBCNERTQ",187,0)
 ;
"RTN","IBCNERTQ",188,0)
 I $G(^TMP("IBCNEQUDTS",$J)) D
"RTN","IBCNERTQ",189,0)
 . S DA=IEN,DIE="^IBCN(365.1,",DR="3.01////^S X=$$NOW^XLFDT" D ^DIE
"RTN","IBCNERTQ",190,0)
 ;
"RTN","IBCNERTQ",191,0)
 Q 1
"RTN","IBCNERTQ",192,0)
 ;
"RTN","IBCNERTQ",193,0)
SETSTC(BUFF) ; set service type code
"RTN","IBCNERTQ",194,0)
 N DIE,DA,DR,X,Y
"RTN","IBCNERTQ",195,0)
 I '+$G(BUFF) Q
"RTN","IBCNERTQ",196,0)
 ; Define Service Type Code (STC) to be sent with Insurance Inquiry
"RTN","IBCNERTQ",197,0)
 S DIE="^IBA(355.33,",DA=BUFF
"RTN","IBCNERTQ",198,0)
 S DR="80.01////"_$P($G(^IBE(350.9,1,60)),U)
"RTN","IBCNERTQ",199,0)
 D ^DIE
"RTN","IBCNERTQ",200,0)
 Q
"RTN","IBCNES")
0^27^B28429551^B25439392
"RTN","IBCNES",1,0)
IBCNES ;ALB/ESG - eIV elig/Benefit screen ;14-Jul-2009
"RTN","IBCNES",2,0)
 ;;2.0;INTEGRATED BILLING;**416,438,497**;21-MAR-94;Build 120
"RTN","IBCNES",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNES",4,0)
 ;
"RTN","IBCNES",5,0)
 Q
"RTN","IBCNES",6,0)
 ;
"RTN","IBCNES",7,0)
EB(IBVF,IBVIENS,IBVEBFLG,IBVV,IBVSUB) ; entry point for main list display
"RTN","IBCNES",8,0)
 ; see below at tag INIT for a description of the parameters
"RTN","IBCNES",9,0)
 ; IBVSUB is required at this entry point because the ListMan array uses this variable
"RTN","IBCNES",10,0)
 ;
"RTN","IBCNES",11,0)
 D EN^VALM("IBCNE ELIGIBILITY/BENEFIT INFO")
"RTN","IBCNES",12,0)
EBX ;
"RTN","IBCNES",13,0)
 Q
"RTN","IBCNES",14,0)
 ;
"RTN","IBCNES",15,0)
HDR ; -- header code - called by ListManager
"RTN","IBCNES",16,0)
 ; build the header area based on the values of IBVF and IBVIENS
"RTN","IBCNES",17,0)
 ;
"RTN","IBCNES",18,0)
 ; pt. insurance
"RTN","IBCNES",19,0)
 I IBVF=2.322 D
"RTN","IBCNES",20,0)
 . N DFN,IBCDFN,PNB,PN,LPID,INS,INSNM
"RTN","IBCNES",21,0)
 . S DFN=+$P(IBVIENS,",",2)
"RTN","IBCNES",22,0)
 . S IBCDFN=+$P(IBVIENS,",",1)
"RTN","IBCNES",23,0)
 . S PNB=$$PT^IBEFUNC(DFN)
"RTN","IBCNES",24,0)
 . S PN=$P(PNB,U,1)    ; pt name
"RTN","IBCNES",25,0)
 . S LPID=$P(PNB,U,2)  ; pt id
"RTN","IBCNES",26,0)
 . S INS=+$P($G(^DPT(DFN,.312,IBCDFN,0)),U,1),INSNM=""
"RTN","IBCNES",27,0)
 . I INS S INSNM=$P($G(^DIC(36,INS,0)),U,1)
"RTN","IBCNES",28,0)
 . S VALMHDR(1)=$$FO^IBCNEUT1(PN,30)_"  "_$$FO^IBCNEUT1(LPID,15)_"  "_$$FO^IBCNEUT1(INSNM,30)
"RTN","IBCNES",29,0)
 . Q
"RTN","IBCNES",30,0)
 ;
"RTN","IBCNES",31,0)
 ; eIV response file
"RTN","IBCNES",32,0)
 I IBVF=365.02 D
"RTN","IBCNES",33,0)
 . N RSPIEN,IBX,DFN,INS,PNB,PN,LPID,INSNM
"RTN","IBCNES",34,0)
 . S RSPIEN=+IBVIENS
"RTN","IBCNES",35,0)
 . S IBX=$G(^IBCN(365,RSPIEN,0))
"RTN","IBCNES",36,0)
 . S DFN=+$P(IBX,U,2)   ; pt ien
"RTN","IBCNES",37,0)
 . S INS=+$P(IBX,U,3)   ; payer ien
"RTN","IBCNES",38,0)
 . S INSNM=""
"RTN","IBCNES",39,0)
 . S PNB=$$PT^IBEFUNC(DFN)
"RTN","IBCNES",40,0)
 . S PN=$P(PNB,U,1)     ; pt name
"RTN","IBCNES",41,0)
 . S LPID=$P(PNB,U,2)   ; pt id
"RTN","IBCNES",42,0)
 . I INS S INSNM=$P($G(^IBE(365.12,INS,0)),U,1)   ; payer name
"RTN","IBCNES",43,0)
 . S VALMHDR(1)=$$FO^IBCNEUT1(PN,30)_"  "_$$FO^IBCNEUT1(LPID,15)_"  "_$$FO^IBCNEUT1(INSNM,30)
"RTN","IBCNES",44,0)
 . Q
"RTN","IBCNES",45,0)
 ;
"RTN","IBCNES",46,0)
 I $G(IBBUFDA) D
"RTN","IBCNES",47,0)
 .N SRVARRAY,Z
"RTN","IBCNES",48,0)
 .D SERVLN^IBCNBLE(IBBUFDA,.SRVARRAY) I SRVARRAY F Z=1:1:SRVARRAY S VALMHDR(Z+1)=SRVARRAY(Z)
"RTN","IBCNES",49,0)
 .Q
"RTN","IBCNES",50,0)
 Q
"RTN","IBCNES",51,0)
 ;
"RTN","IBCNES",52,0)
INIT(IBVF,IBVIENS,IBVEBFLG,IBVV,IBVSUB) ; List Entry
"RTN","IBCNES",53,0)
 ;
"RTN","IBCNES",54,0)
 ;     IBVF = file# 2.322 or 365.02 (required)
"RTN","IBCNES",55,0)
 ;  IBVIENS = std IENS list of internal entry numbers - NOT including any EB iens (required)
"RTN","IBCNES",56,0)
 ; IBVEBFLG = flag indicating which EB records to pull
"RTN","IBCNES",57,0)
 ;            "A" - all of them
"RTN","IBCNES",58,0)
 ;            "L" - only the last one (default)
"RTN","IBCNES",59,0)
 ;            "F" - only the first one
"RTN","IBCNES",60,0)
 ;            "M" - multiple, pass IBEBFLG by reference and include the IB iens in
"RTN","IBCNES",61,0)
 ;                  an array as follows:
"RTN","IBCNES",62,0)
 ;                  IBVEBFLG="M"
"RTN","IBCNES",63,0)
 ;                  IBVEBFLG(3)=""
"RTN","IBCNES",64,0)
 ;                  IBVEBFLG(5)=""
"RTN","IBCNES",65,0)
 ;     IBVV = Video attributes flag
"RTN","IBCNES",66,0)
 ;            1 = reverse video (default)
"RTN","IBCNES",67,0)
 ;            2 = bold
"RTN","IBCNES",68,0)
 ;            3 = underline
"RTN","IBCNES",69,0)
 ;   IBVSUB = literal subscript to use in the display scratch global
"RTN","IBCNES",70,0)
 ;
"RTN","IBCNES",71,0)
 NEW IBVDA,GLO,IBVLIST,IEN,IBVEBIEN,IBVEBTOT,IBVEBCNT
"RTN","IBCNES",72,0)
 ;
"RTN","IBCNES",73,0)
 S IBVSUB=$G(IBVSUB)
"RTN","IBCNES",74,0)
 I IBVSUB="" S IBVSUB="EB ELIG/BEN"
"RTN","IBCNES",75,0)
 K ^TMP(IBVSUB,$J)
"RTN","IBCNES",76,0)
 I $D(VALMEVL) D CLEAN^VALM10,KILL^VALM10()
"RTN","IBCNES",77,0)
 ;
"RTN","IBCNES",78,0)
 D DA^DILF(IBVIENS,.IBVDA)    ; build the IBVDA array for the iens
"RTN","IBCNES",79,0)
 I '$D(IBVDA) D NODATA G INITX
"RTN","IBCNES",80,0)
 ;
"RTN","IBCNES",81,0)
 I $D(VALMEVL),'$G(IBVV) S IBVV=1    ; default reverse video for ListMan
"RTN","IBCNES",82,0)
 I '$D(VALMEVL) S IBVV=""            ; no video attributes for non-ListMan
"RTN","IBCNES",83,0)
 ;
"RTN","IBCNES",84,0)
 D RPDM^IBCNES3($S(IBVF=365.02:365,1:2.312),.IBVDA,IBVV,IBVSUB)  ; IB*2*497  display group level eligibility information
"RTN","IBCNES",85,0)
 ;
"RTN","IBCNES",86,0)
 I IBVF=2.322 S GLO=$NA(^DPT(+$G(IBVDA(1)),.312,+$G(IBVDA),6))   ; pt. insurance
"RTN","IBCNES",87,0)
 I IBVF=365.02 S GLO=$NA(^IBCN(365,+$G(IBVDA),2))                ; response file
"RTN","IBCNES",88,0)
 I $G(GLO)="" D NODATA G INITX
"RTN","IBCNES",89,0)
 ;
"RTN","IBCNES",90,0)
 S IBVEBFLG=$G(IBVEBFLG,"L")
"RTN","IBCNES",91,0)
 K IBVLIST
"RTN","IBCNES",92,0)
 I IBVEBFLG="L" S IEN=+$O(@GLO@(" "),-1) I IEN S IBVLIST(IEN)=""            ; last EB ien on file
"RTN","IBCNES",93,0)
 I IBVEBFLG="F" S IEN=+$O(@GLO@(0)) I IEN S IBVLIST(IEN)=""                 ; first EB ien on file
"RTN","IBCNES",94,0)
 I IBVEBFLG="A" S IEN=0 F  S IEN=$O(@GLO@(IEN)) Q:'IEN  S IBVLIST(IEN)=""   ; all EB iens on file
"RTN","IBCNES",95,0)
 I IBVEBFLG="M" S IEN=0 F  S IEN=$O(IBVEBFLG(IEN)) Q:'IEN  I $D(@GLO@(IEN)) S IBVLIST(IEN)=""   ; multiple
"RTN","IBCNES",96,0)
 ;
"RTN","IBCNES",97,0)
 I '$D(IBVLIST) D NODATA G INITX
"RTN","IBCNES",98,0)
 ;
"RTN","IBCNES",99,0)
 ; count them
"RTN","IBCNES",100,0)
 S IEN=0 F IBVEBTOT=0:1 S IEN=$O(IBVLIST(IEN)) Q:'IEN
"RTN","IBCNES",101,0)
 I 'IBVEBTOT D NODATA G INITX
"RTN","IBCNES",102,0)
 ;
"RTN","IBCNES",103,0)
 S (IBVEBIEN,IBVEBCNT)=0
"RTN","IBCNES",104,0)
 F  S IBVEBIEN=$O(IBVLIST(IBVEBIEN)) Q:'IBVEBIEN  D
"RTN","IBCNES",105,0)
 . S IBVEBCNT=IBVEBCNT+1
"RTN","IBCNES",106,0)
 . N TXVIENS
"RTN","IBCNES",107,0)
 . ;
"RTN","IBCNES",108,0)
 . ; if there is more than 1 EB group, then display a header line for separation
"RTN","IBCNES",109,0)
 . I IBVEBTOT>1 D
"RTN","IBCNES",110,0)
 .. N DSP,LN,IBZ
"RTN","IBCNES",111,0)
 .. S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))
"RTN","IBCNES",112,0)
 .. S LN=+$O(@DSP@(""),-1)
"RTN","IBCNES",113,0)
 .. S IBZ="eIV Eligibility/Benefit Data Group# "_IBVEBCNT_" of "_IBVEBTOT
"RTN","IBCNES",114,0)
 .. S IBZ=$$FO^IBCNEUT1($J("",20)_IBZ,80)
"RTN","IBCNES",115,0)
 .. S LN=LN+1 D SET^IBCNES1(LN,1,IBZ,,IBVV)
"RTN","IBCNES",116,0)
 .. S LN=LN+1 D SET^IBCNES1(LN)
"RTN","IBCNES",117,0)
 .. Q
"RTN","IBCNES",118,0)
 . ;
"RTN","IBCNES",119,0)
 . ; add this EB ien to the list of iens
"RTN","IBCNES",120,0)
 . S TXVIENS=IBVEBIEN_","_IBVIENS
"RTN","IBCNES",121,0)
 . ;
"RTN","IBCNES",122,0)
 . ; call the screen sections to build the display
"RTN","IBCNES",123,0)
 . D EB^IBCNES1(IBVF,TXVIENS,IBVV,IBVSUB)
"RTN","IBCNES",124,0)
 . D CMPI^IBCNES1(IBVF,TXVIENS,IBVV,IBVSUB)
"RTN","IBCNES",125,0)
 . D HCSD^IBCNES1(IBVF,TXVIENS,IBVV,IBVSUB)
"RTN","IBCNES",126,0)
 . D NTE^IBCNES1(IBVF,TXVIENS,IBVV,IBVSUB)
"RTN","IBCNES",127,0)
 . D BRE^IBCNES1(IBVF,TXVIENS,IBVV,IBVSUB)
"RTN","IBCNES",128,0)
 . ;
"RTN","IBCNES",129,0)
 . Q
"RTN","IBCNES",130,0)
 ;
"RTN","IBCNES",131,0)
 S VALMCNT=$O(^TMP(IBVSUB,$J,"DISP"," "),-1)
"RTN","IBCNES",132,0)
 ;
"RTN","IBCNES",133,0)
INITX ;
"RTN","IBCNES",134,0)
 Q
"RTN","IBCNES",135,0)
 ;
"RTN","IBCNES",136,0)
NODATA ; display no data found
"RTN","IBCNES",137,0)
 N DSP,LN
"RTN","IBCNES",138,0)
 S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))       ; scratch global display array
"RTN","IBCNES",139,0)
 S LN=+$O(@DSP@(""),-1)                  ; last line# used in scratch global
"RTN","IBCNES",140,0)
 S LN=LN+1 D SET^IBCNES1(LN)
"RTN","IBCNES",141,0)
 S LN=LN+1 D SET^IBCNES1(LN,5,"No eIV Eligibility/Benefit Data Found")
"RTN","IBCNES",142,0)
 S VALMCNT=$O(^TMP(IBVSUB,$J,"DISP"," "),-1)
"RTN","IBCNES",143,0)
NODATAX ;
"RTN","IBCNES",144,0)
 Q
"RTN","IBCNES",145,0)
 ;
"RTN","IBCNES",146,0)
HELP ; -- help code
"RTN","IBCNES",147,0)
 S X="?",VALMANS="??" D DISP^XQORM1 W !!
"RTN","IBCNES",148,0)
 Q
"RTN","IBCNES",149,0)
 ;
"RTN","IBCNES",150,0)
EXIT ; -- exit code
"RTN","IBCNES",151,0)
 K ^TMP(IBVSUB,$J)
"RTN","IBCNES",152,0)
 I $D(VALMEVL) D CLEAN^VALM10,KILL^VALM10()
"RTN","IBCNES",153,0)
 Q
"RTN","IBCNES",154,0)
 ;
"RTN","IBCNES1")
0^7^B145502085^B120790247
"RTN","IBCNES1",1,0)
IBCNES1 ;ALB/ESG - eIV elig/benefit utilities ;14-Sept-2009
"RTN","IBCNES1",2,0)
 ;;2.0;INTEGRATED BILLING;**416,438,497**;21-MAR-94;Build 120
"RTN","IBCNES1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNES1",4,0)
 ;
"RTN","IBCNES1",5,0)
 Q
"RTN","IBCNES1",6,0)
 ;
"RTN","IBCNES1",7,0)
EB(IBVF,IBVIENS,IBVV,IBVSUB) ; Main Eligibility/Benefit Information
"RTN","IBCNES1",8,0)
 ;
"RTN","IBCNES1",9,0)
 ;    IBVF = file# 2.322 or 365.02
"RTN","IBCNES1",10,0)
 ; IBVIENS = std IENS list of internal entry numbers
"RTN","IBCNES1",11,0)
 ;    IBVV = video attributes flag
"RTN","IBCNES1",12,0)
 ;  IBVSUB = display scratch global subscript
"RTN","IBCNES1",13,0)
 ;
"RTN","IBCNES1",14,0)
 N EB,EBERR,DSP,LN,COL1,COL2,ZF,ZIEN
"RTN","IBCNES1",15,0)
 D GETS^DIQ(IBVF,IBVIENS,".02:.13;8*;11*","IEN","EB","EBERR")
"RTN","IBCNES1",16,0)
 S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))       ; scratch global display array
"RTN","IBCNES1",17,0)
 S LN=+$O(@DSP@(""),-1)                  ; last line# used in scratch global
"RTN","IBCNES1",18,0)
 ;
"RTN","IBCNES1",19,0)
 S COL1=2,COL2=40
"RTN","IBCNES1",20,0)
 ;
"RTN","IBCNES1",21,0)
 S LN=LN+1
"RTN","IBCNES1",22,0)
 D SET(LN,1,"Eligibility/Benefit Information",,IBVV)
"RTN","IBCNES1",23,0)
 ;
"RTN","IBCNES1",24,0)
 S LN=LN+1
"RTN","IBCNES1",25,0)
 D SET(LN,COL1,"Elig/Ben Info",$P($G(^IBE(365.011,+$G(EB(IBVF,IBVIENS,.02,"I")),0)),U,2))
"RTN","IBCNES1",26,0)
 D SET(.LN,COL2,"Coverage Level",$P($G(^IBE(365.012,+$G(EB(IBVF,IBVIENS,.03,"I")),0)),U,2))
"RTN","IBCNES1",27,0)
 ;
"RTN","IBCNES1",28,0)
 ; now loop through and display all of the dates and date qualifiers
"RTN","IBCNES1",29,0)
 S ZF=2.3228
"RTN","IBCNES1",30,0)
 I IBVF=365.02 S ZF=365.28     ; subscriber dates subfile#
"RTN","IBCNES1",31,0)
 I '$D(EB(ZF)) S EB(ZF,1)=""   ; so the fields display once
"RTN","IBCNES1",32,0)
 S ZIEN="" F  S ZIEN=$O(EB(ZF,ZIEN)) Q:ZIEN=""  D
"RTN","IBCNES1",33,0)
 . N HLDT,DTYP,EXDT
"RTN","IBCNES1",34,0)
 . S LN=LN+1
"RTN","IBCNES1",35,0)
 . D SET(LN,COL1,"Date/Time Qual",$P($G(^IBE(365.026,+$G(EB(ZF,ZIEN,.03,"I")),0)),U,2))
"RTN","IBCNES1",36,0)
 . S HLDT=$G(EB(ZF,ZIEN,.02,"E"))
"RTN","IBCNES1",37,0)
 . S DTYP=$G(EB(ZF,ZIEN,.04,"I"))
"RTN","IBCNES1",38,0)
 . S EXDT=$S(DTYP="D8":$$DATE(HLDT),DTYP="RD8":($$DATE($P(HLDT,"-",1))_"-"_$$DATE($P(HLDT,"-",2))),1:HLDT)
"RTN","IBCNES1",39,0)
 . D SET(.LN,COL2,"D/T Period",EXDT)
"RTN","IBCNES1",40,0)
 . Q
"RTN","IBCNES1",41,0)
 ; loop through service type codes
"RTN","IBCNES1",42,0)
 S ZF=2.32292
"RTN","IBCNES1",43,0)
 I IBVF=365.02 S ZF=365.292  ; service types subfile#
"RTN","IBCNES1",44,0)
 I '$D(EB(ZF)) S EB(ZF,1)=""   ; so the fields display once
"RTN","IBCNES1",45,0)
 S ZIEN="" F  S ZIEN=$O(EB(ZF,ZIEN)) Q:ZIEN=""  S LN=LN+1 D SET(LN,COL1,"Service Type",$P($G(^IBE(365.013,+$G(EB(ZF,ZIEN,.01,"I")),0)),U,2))
"RTN","IBCNES1",46,0)
 ;
"RTN","IBCNES1",47,0)
 S LN=LN+1
"RTN","IBCNES1",48,0)
 D SET(LN,COL1,"Time Period",$P($G(^IBE(365.015,+$G(EB(IBVF,IBVIENS,.07,"I")),0)),U,2))
"RTN","IBCNES1",49,0)
 ;
"RTN","IBCNES1",50,0)
 S LN=LN+1
"RTN","IBCNES1",51,0)
 D SET(LN,COL1,"Insurance Type",$P($G(^IBE(365.014,+$G(EB(IBVF,IBVIENS,.05,"I")),0)),U,2))
"RTN","IBCNES1",52,0)
 ;
"RTN","IBCNES1",53,0)
 S LN=LN+1
"RTN","IBCNES1",54,0)
 D SET(LN,COL1,"Plan Coverage Desc",$G(EB(IBVF,IBVIENS,.06,"E")))
"RTN","IBCNES1",55,0)
 ;
"RTN","IBCNES1",56,0)
 S LN=LN+1
"RTN","IBCNES1",57,0)
 D SET(LN,COL1,"Benefit Amount",$G(EB(IBVF,IBVIENS,.08,"E")))
"RTN","IBCNES1",58,0)
 D SET(.LN,COL2,"Benefit %",$G(EB(IBVF,IBVIENS,.09,"E")))
"RTN","IBCNES1",59,0)
 ;
"RTN","IBCNES1",60,0)
 S LN=LN+1
"RTN","IBCNES1",61,0)
 D SET(LN,COL1,"Quantity Qual",$P($G(^IBE(365.016,+$G(EB(IBVF,IBVIENS,.1,"I")),0)),U,2))
"RTN","IBCNES1",62,0)
 D SET(.LN,COL2,"Quantity Amount",$G(EB(IBVF,IBVIENS,.11,"E")))
"RTN","IBCNES1",63,0)
 ;
"RTN","IBCNES1",64,0)
 S LN=LN+1
"RTN","IBCNES1",65,0)
 D SET(LN,COL1,"Auth/Certification Required",$P($G(^IBE(365.033,+$G(EB(IBVF,IBVIENS,.12,"I")),0)),U,2))  ;IB*2*497
"RTN","IBCNES1",66,0)
 D SET(.LN,COL2,"In-Plan-Network",$P($G(^IBE(365.033,+$G(EB(IBVF,IBVIENS,.13,"I")),0)),U,2)) ;IB*2*497
"RTN","IBCNES1",67,0)
 ;
"RTN","IBCNES1",68,0)
 S LN=LN+1
"RTN","IBCNES1",69,0)
 D SET(LN)
"RTN","IBCNES1",70,0)
 ;
"RTN","IBCNES1",71,0)
EBX ;
"RTN","IBCNES1",72,0)
 Q
"RTN","IBCNES1",73,0)
 ;
"RTN","IBCNES1",74,0)
CMPI(IBVF,IBVIENS,IBVV,IBVSUB) ; Composite Medical Procedure Information
"RTN","IBCNES1",75,0)
 ;
"RTN","IBCNES1",76,0)
 ;    IBVF = file# 2.322 or 365.02
"RTN","IBCNES1",77,0)
 ; IBVIENS = std IENS list of internal entry numbers
"RTN","IBCNES1",78,0)
 ;    IBVV = video attributes flag
"RTN","IBCNES1",79,0)
 ;  IBVSUB = display scratch global subscript
"RTN","IBCNES1",80,0)
 ;
"RTN","IBCNES1",81,0)
 N CMPI,CMPIERR,DSP,LN,COL1,COL2,PCTYP,PCODE,PCIEN,PCDESC,MODLST,FCZ,PM,ZF,ZIEN,POS,POSD,DX,DXD
"RTN","IBCNES1",82,0)
 D GETS^DIQ(IBVF,IBVIENS,"1.01:1.06;9*","IEN","CMPI","CMPIERR")
"RTN","IBCNES1",83,0)
 S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))       ; scratch global display array
"RTN","IBCNES1",84,0)
 S LN=+$O(@DSP@(""),-1)                  ; last line# used in scratch global
"RTN","IBCNES1",85,0)
 ;
"RTN","IBCNES1",86,0)
 S COL1=2,COL2=40
"RTN","IBCNES1",87,0)
 ;
"RTN","IBCNES1",88,0)
 S LN=LN+1
"RTN","IBCNES1",89,0)
 I '$D(CMPI) G CMPIX
"RTN","IBCNES1",90,0)
 D SET(LN,1,"Composite Medical Procedure Information",,IBVV)
"RTN","IBCNES1",91,0)
 ;
"RTN","IBCNES1",92,0)
 ; get procedure code, desc, and type information
"RTN","IBCNES1",93,0)
 S PCTYP=$G(CMPI(IBVF,IBVIENS,1.01,"E"))  ;IB*2*497
"RTN","IBCNES1",94,0)
 S PCODE=$G(CMPI(IBVF,IBVIENS,1.02,"E"))
"RTN","IBCNES1",95,0)
 S PCIEN=0,PCDESC=""
"RTN","IBCNES1",96,0)
 I PCTYP="CJ"!(PCTYP="HC") D     ; cpt or hcpcs procedure codes
"RTN","IBCNES1",97,0)
 . Q:PCODE=""
"RTN","IBCNES1",98,0)
 . S PCIEN=+$O(^ICPT("BA",PCODE_" ",0))
"RTN","IBCNES1",99,0)
 . Q:'PCIEN
"RTN","IBCNES1",100,0)
 . S PCDESC=$P($$CPT^IBACSV(PCIEN),U,2)
"RTN","IBCNES1",101,0)
 . S PCDESC=$$TITLE^XLFSTR(PCDESC)
"RTN","IBCNES1",102,0)
 . Q
"RTN","IBCNES1",103,0)
 ;
"RTN","IBCNES1",104,0)
 I PCTYP="ID" D         ; icd-9-cm procedure codes
"RTN","IBCNES1",105,0)
 . Q:PCODE=""
"RTN","IBCNES1",106,0)
 . S PCIEN=+$O(^ICD0("BA",PCODE_" ",0))
"RTN","IBCNES1",107,0)
 . Q:'PCIEN
"RTN","IBCNES1",108,0)
 . S PCDESC=$P($$ICD0^IBACSV(PCIEN),U,4)
"RTN","IBCNES1",109,0)
 . S PCDESC=$$TITLE^XLFSTR(PCDESC)
"RTN","IBCNES1",110,0)
 . Q
"RTN","IBCNES1",111,0)
 ;
"RTN","IBCNES1",112,0)
 S LN=LN+1
"RTN","IBCNES1",113,0)
 D SET(LN,COL1,"Prod/Serv ID Qual",$G(CMPI(IBVF,IBVIENS,1.01,"E")))
"RTN","IBCNES1",114,0)
 D SET(.LN,COL2,"Procedure Code",PCODE_" "_PCDESC)
"RTN","IBCNES1",115,0)
 ;
"RTN","IBCNES1",116,0)
 S LN=LN+1
"RTN","IBCNES1",117,0)
 S MODLST=""
"RTN","IBCNES1",118,0)
 F FCZ=1.03:.01:1.06 S PM=$G(CMPI(IBVF,IBVIENS,FCZ,"E")) I PM'="" S MODLST=$S(MODLST="":PM,1:(MODLST_", "_PM))
"RTN","IBCNES1",119,0)
 D SET(LN,COL1,"Procedure Modifier(s)",MODLST)
"RTN","IBCNES1",120,0)
 ;
"RTN","IBCNES1",121,0)
 ; now loop through and display all of the additional info (POS and DX)
"RTN","IBCNES1",122,0)
 S ZF=2.3229
"RTN","IBCNES1",123,0)
 I IBVF=365.02 S ZF=365.29   ; additional info subfile#
"RTN","IBCNES1",124,0)
 ;
"RTN","IBCNES1",125,0)
 ; if no additional info (POS and DX), then display the prompts here once
"RTN","IBCNES1",126,0)
 I '$D(CMPI(ZF)) D
"RTN","IBCNES1",127,0)
 . S LN=LN+1
"RTN","IBCNES1",128,0)
 . D SET(LN,COL1,"DX/Facility Qual","")
"RTN","IBCNES1",129,0)
 . D SET(.LN,COL2,"DX/Facility","")
"RTN","IBCNES1",130,0)
 . S LN=LN+1
"RTN","IBCNES1",131,0)
 . D SET(LN,COL1,"Nature of Injury Code","")
"RTN","IBCNES1",132,0)
 . D SET(.LN,COL2,"Injury Category","")
"RTN","IBCNES1",133,0)
 . S LN=LN+1
"RTN","IBCNES1",134,0)
 . D SET(LN,COL1,"Nature of Injury Description","")
"RTN","IBCNES1",135,0)
 . Q
"RTN","IBCNES1",136,0)
 ;
"RTN","IBCNES1",137,0)
 S ZIEN="" F  S ZIEN=$O(CMPI(ZF,ZIEN)) Q:ZIEN=""  D
"RTN","IBCNES1",138,0)
 . ;
"RTN","IBCNES1",139,0)
 . ; check to see if we have a valid POS pointer
"RTN","IBCNES1",140,0)
 . S POS=+$G(CMPI(ZF,ZIEN,.02,"I")),POSD=""
"RTN","IBCNES1",141,0)
 . I POS S POSD=$P($G(^IBE(353.1,POS,0)),U,2)
"RTN","IBCNES1",142,0)
 . I POSD'="" D
"RTN","IBCNES1",143,0)
 .. S POSD=$$TITLE^XLFSTR(POSD)
"RTN","IBCNES1",144,0)
 .. S LN=LN+1
"RTN","IBCNES1",145,0)
 .. D SET(LN,COL1,"DX/Facility Qual","POS")
"RTN","IBCNES1",146,0)
 .. D SET(.LN,COL2,"DX/Facility",$G(CMPI(ZF,ZIEN,.02,"E"))_" "_POSD)
"RTN","IBCNES1",147,0)
 .. Q
"RTN","IBCNES1",148,0)
 . ;
"RTN","IBCNES1",149,0)
 . ; now check for a DX
"RTN","IBCNES1",150,0)
 . S DX=+$G(CMPI(ZF,ZIEN,.03,"I")),DXD=""
"RTN","IBCNES1",151,0)
 . I DX S DXD=$P($$ICD9^IBACSV(DX),U,3)
"RTN","IBCNES1",152,0)
 . I DXD'="" D
"RTN","IBCNES1",153,0)
 .. S DXD=$$TITLE^XLFSTR(DXD)
"RTN","IBCNES1",154,0)
 .. S LN=LN+1
"RTN","IBCNES1",155,0)
 .. D SET(LN,COL1,"DX/Facility Qual","DX")
"RTN","IBCNES1",156,0)
 .. D SET(.LN,COL2,"DX/Facility",$G(CMPI(ZF,ZIEN,.03,"E"))_" "_DXD)
"RTN","IBCNES1",157,0)
 .. Q
"RTN","IBCNES1",158,0)
 . ;
"RTN","IBCNES1",159,0)
 . ; nature of injury code
"RTN","IBCNES1",160,0)
 . S LN=LN+1
"RTN","IBCNES1",161,0)
 . D SET(LN,COL1,"Nature of Injury Code",$G(CMPI(ZF,ZIEN,.05,"E")))
"RTN","IBCNES1",162,0)
 . D SET(.LN,COL2,"Injury Category",$G(CMPI(ZF,ZIEN,.06,"E")))
"RTN","IBCNES1",163,0)
 . S LN=LN+1
"RTN","IBCNES1",164,0)
 . D SET(LN,COL1,"Nature of Injury Description",$G(CMPI(ZF,ZIEN,.07,"E")))
"RTN","IBCNES1",165,0)
 . Q
"RTN","IBCNES1",166,0)
 ;
"RTN","IBCNES1",167,0)
 S LN=LN+1
"RTN","IBCNES1",168,0)
 D SET(LN)
"RTN","IBCNES1",169,0)
 ;
"RTN","IBCNES1",170,0)
CMPIX ;
"RTN","IBCNES1",171,0)
 Q
"RTN","IBCNES1",172,0)
 ;
"RTN","IBCNES1",173,0)
HCSD(IBVF,IBVIENS,IBVV,IBVSUB) ; Healthcare Services Delivery multiple display
"RTN","IBCNES1",174,0)
 ;
"RTN","IBCNES1",175,0)
 ;    IBVF = file# 2.322 or 365.02
"RTN","IBCNES1",176,0)
 ; IBVIENS = std IENS list of internal entry numbers
"RTN","IBCNES1",177,0)
 ;    IBVV = video attributes flag
"RTN","IBCNES1",178,0)
 ;  IBVSUB = display scratch global subscript
"RTN","IBCNES1",179,0)
 ;
"RTN","IBCNES1",180,0)
 N HCSD,HCSDERR,DSP,LN,ZF,HCNT,ZIEN,HCTOT,COL1,COL2
"RTN","IBCNES1",181,0)
 D GETS^DIQ(IBVF,IBVIENS,"7*","IEN","HCSD","HCSDERR")
"RTN","IBCNES1",182,0)
 S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))       ; scratch global display array
"RTN","IBCNES1",183,0)
 S LN=+$O(@DSP@(""),-1)                  ; last line# used in scratch global
"RTN","IBCNES1",184,0)
 ;
"RTN","IBCNES1",185,0)
 ; loop through and count the # of hcsd multiples
"RTN","IBCNES1",186,0)
 S ZF=2.3227,HCNT=0
"RTN","IBCNES1",187,0)
 I IBVF=365.02 S ZF=365.27   ; healthcare services delivery subfile#
"RTN","IBCNES1",188,0)
 S ZIEN="" F  S ZIEN=$O(HCSD(ZF,ZIEN)) Q:ZIEN=""  S HCNT=HCNT+1
"RTN","IBCNES1",189,0)
 S HCTOT=HCNT
"RTN","IBCNES1",190,0)
 ;
"RTN","IBCNES1",191,0)
 I 'HCTOT G HCSDX
"RTN","IBCNES1",192,0)
 ;
"RTN","IBCNES1",193,0)
 S COL1=2,COL2=40
"RTN","IBCNES1",194,0)
 ;
"RTN","IBCNES1",195,0)
 ; loop again to display
"RTN","IBCNES1",196,0)
 S HCNT=0
"RTN","IBCNES1",197,0)
 S ZIEN="" F  S ZIEN=$O(HCSD(ZF,ZIEN)) Q:ZIEN=""  D
"RTN","IBCNES1",198,0)
 . S HCNT=HCNT+1
"RTN","IBCNES1",199,0)
 . ;
"RTN","IBCNES1",200,0)
 . S LN=LN+1
"RTN","IBCNES1",201,0)
 . I HCTOT>1 D SET(LN,1,"Health Care Service Delivery ("_HCNT_" of "_HCTOT_")",,IBVV)
"RTN","IBCNES1",202,0)
 . I HCTOT'>1 D SET(LN,1,"Health Care Service Delivery",,IBVV)
"RTN","IBCNES1",203,0)
 . ;
"RTN","IBCNES1",204,0)
 . S LN=LN+1
"RTN","IBCNES1",205,0)
 . D SET(LN,COL1,"Quantity Qualifier",$P($G(^IBE(365.016,+$G(HCSD(ZF,ZIEN,.03,"I")),0)),U,2))
"RTN","IBCNES1",206,0)
 . D SET(.LN,COL2,"Benefit Quantity",$G(HCSD(ZF,ZIEN,.02,"E")))
"RTN","IBCNES1",207,0)
 . ;
"RTN","IBCNES1",208,0)
 . S LN=LN+1
"RTN","IBCNES1",209,0)
  .D SET(LN,COL1,"Unit/Basis for Measurement",$P($G(^IBE(365.029,+$G(HCSD(ZF,ZIEN,.05,"I")),0)),U,2))  ;IB*2*497
"RTN","IBCNES1",210,0)
 . D SET(.LN,COL2,"Sampling Frequency",$G(HCSD(ZF,ZIEN,.04,"E")))
"RTN","IBCNES1",211,0)
 . ;
"RTN","IBCNES1",212,0)
 . S LN=LN+1
"RTN","IBCNES1",213,0)
 . D SET(LN,COL1,"Period Count Qual",$P($G(^IBE(365.015,+$G(HCSD(ZF,ZIEN,.07,"I")),0)),U,2))
"RTN","IBCNES1",214,0)
 . D SET(.LN,COL2,"Period Count",$G(HCSD(ZF,ZIEN,.06,"E")))
"RTN","IBCNES1",215,0)
 . ;
"RTN","IBCNES1",216,0)
 . S LN=LN+1
"RTN","IBCNES1",217,0)
 . D SET(LN,COL1,"Delivery Freq. Code",$P($G(^IBE(365.025,+$G(HCSD(ZF,ZIEN,.08,"I")),0)),U,2))
"RTN","IBCNES1",218,0)
 . ;
"RTN","IBCNES1",219,0)
 . S LN=LN+1
"RTN","IBCNES1",220,0)
 . D SET(LN,COL1,"Delivery Pattern Time Code",$P($G(^IBE(365.036,+$G(HCSD(ZF,ZIEN,.09,"I")),0)),U,2)) ;IB*2*497
"RTN","IBCNES1",221,0)
 . ;
"RTN","IBCNES1",222,0)
 . S LN=LN+1
"RTN","IBCNES1",223,0)
 . D SET(LN)
"RTN","IBCNES1",224,0)
 . Q
"RTN","IBCNES1",225,0)
 ;
"RTN","IBCNES1",226,0)
HCSDX ;
"RTN","IBCNES1",227,0)
 Q
"RTN","IBCNES1",228,0)
 ;
"RTN","IBCNES1",229,0)
NTE(IBVF,IBVIENS,IBVV,IBVSUB) ; Notes display
"RTN","IBCNES1",230,0)
 ;
"RTN","IBCNES1",231,0)
 ;    IBVF = file# 2.322 or 365.02
"RTN","IBCNES1",232,0)
 ; IBVIENS = std IENS list of internal entry numbers
"RTN","IBCNES1",233,0)
 ;    IBVV = video attributes flag
"RTN","IBCNES1",234,0)
 ;  IBVSUB = display scratch global subscript
"RTN","IBCNES1",235,0)
 ;
"RTN","IBCNES1",236,0)
 N COL,DSP,LN,NTED,NTEDERR,ZIEN
"RTN","IBCNES1",237,0)
 D GETS^DIQ(IBVF,IBVIENS,2,"N","NTED","NTEDERR")
"RTN","IBCNES1",238,0)
 S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))       ; scratch global display array
"RTN","IBCNES1",239,0)
 S LN=+$O(@DSP@(""),-1)                  ; last line# used in scratch global
"RTN","IBCNES1",240,0)
 I '$D(NTED) G NTEX
"RTN","IBCNES1",241,0)
 S COL=2
"RTN","IBCNES1",242,0)
 S LN=LN+1 D SET(LN,1,"Notes and Comments",,IBVV)
"RTN","IBCNES1",243,0)
 S ZIEN=0 F  S ZIEN=$O(NTED(IBVF,IBVIENS,2,ZIEN)) Q:'ZIEN  S LN=LN+1 D SET(LN,COL,$G(NTED(IBVF,IBVIENS,2,ZIEN)))
"RTN","IBCNES1",244,0)
 S LN=LN+1
"RTN","IBCNES1",245,0)
 D SET(LN)
"RTN","IBCNES1",246,0)
 ;
"RTN","IBCNES1",247,0)
NTEX ;
"RTN","IBCNES1",248,0)
 Q
"RTN","IBCNES1",249,0)
 ;
"RTN","IBCNES1",250,0)
BRE(IBVF,IBVIENS,IBVV,IBVSUB) ; Benefit Related Entity data extract/display
"RTN","IBCNES1",251,0)
 ;
"RTN","IBCNES1",252,0)
 ;    IBVF = file# 2.322 or 365.02
"RTN","IBCNES1",253,0)
 ; IBVIENS = std IENS list of internal entry numbers
"RTN","IBCNES1",254,0)
 ;    IBVV = video attributes flag
"RTN","IBCNES1",255,0)
 ;  IBVSUB = display scratch global subscript
"RTN","IBCNES1",256,0)
 ;
"RTN","IBCNES1",257,0)
 N BRE,BREERR,DSP,LN,ADDR,ADDR1,ADDR2,CITY,ST,ZIP,ZF,ZIEN,COL1,COL2
"RTN","IBCNES1",258,0)
 D GETS^DIQ(IBVF,IBVIENS,"3.01:5.03;6*","IEN","BRE","BREERR")
"RTN","IBCNES1",259,0)
 S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))       ; scratch global display array
"RTN","IBCNES1",260,0)
 S LN=+$O(@DSP@(""),-1)                  ; last line# used in scratch global
"RTN","IBCNES1",261,0)
 ;
"RTN","IBCNES1",262,0)
 S COL1=2,COL2=40
"RTN","IBCNES1",263,0)
 ;
"RTN","IBCNES1",264,0)
 S LN=LN+1
"RTN","IBCNES1",265,0)
 I '$D(BRE) G BREX
"RTN","IBCNES1",266,0)
 D SET(LN,1,"Benefit Related Entity",,IBVV)
"RTN","IBCNES1",267,0)
 ;
"RTN","IBCNES1",268,0)
 S LN=LN+1
"RTN","IBCNES1",269,0)
 D SET(LN,COL1,"Entity ID Code",$P($G(^IBE(365.022,+$G(BRE(IBVF,IBVIENS,3.01,"I")),0)),U,2))
"RTN","IBCNES1",270,0)
 D SET(.LN,COL2,"Entity Type Qual",$P($G(^IBE(365.043,+$G(BRE(IBVF,IBVIENS,3.02,"I")),0)),U,2))  ; IB*2*497
"RTN","IBCNES1",271,0)
 ;
"RTN","IBCNES1",272,0)
 S LN=LN+1
"RTN","IBCNES1",273,0)
 D SET(LN,COL1,"Entity ID Name",$G(BRE(IBVF,IBVIENS,3.03,"E")))
"RTN","IBCNES1",274,0)
 ;
"RTN","IBCNES1",275,0)
 S LN=LN+1
"RTN","IBCNES1",276,0)
 D SET(LN,COL1,"ID Qualifier",$P($G(^IBE(365.023,+$G(BRE(IBVF,IBVIENS,3.05,"I")),0)),U,2))
"RTN","IBCNES1",277,0)
 D SET(.LN,COL2,"Entity ID Number",$G(BRE(IBVF,IBVIENS,3.04,"E")))
"RTN","IBCNES1",278,0)
 ;
"RTN","IBCNES1",279,0)
 S LN=LN+1  ;IB*2*497
"RTN","IBCNES1",280,0)
 D SET(LN,COL1,"Entity Relationship",$P($G(^IBE(365.031,+$G(BRE(IBVF,IBVIENS,3.06,"I")),0)),U,2))  ;IB*2*497
"RTN","IBCNES1",281,0)
 ;
"RTN","IBCNES1",282,0)
 S ADDR1=$G(BRE(IBVF,IBVIENS,4.01,"E"))
"RTN","IBCNES1",283,0)
 S ADDR2=$G(BRE(IBVF,IBVIENS,4.02,"E"))
"RTN","IBCNES1",284,0)
 S CITY=$G(BRE(IBVF,IBVIENS,4.03,"E"))
"RTN","IBCNES1",285,0)
 S ST=+$G(BRE(IBVF,IBVIENS,4.04,"I"))
"RTN","IBCNES1",286,0)
 S ST=$S(ST:$P($G(^DIC(5,ST,0)),U,2),1:"")
"RTN","IBCNES1",287,0)
 S ZIP=$G(BRE(IBVF,IBVIENS,4.05,"E"))
"RTN","IBCNES1",288,0)
 S ADDR=ADDR1
"RTN","IBCNES1",289,0)
 I ADDR2'="" S ADDR=ADDR_" "_ADDR2
"RTN","IBCNES1",290,0)
 ;I CITY'="" S ADDR=ADDR_", "_CITY  
"RTN","IBCNES1",291,0)
 ;I ST'="" S ADDR=ADDR_","_ST
"RTN","IBCNES1",292,0)
 ;I ZIP'="" S ADDR=ADDR_" "_ZIP
"RTN","IBCNES1",293,0)
 S ADDR=ADDR_" "_CITY_" "_ST_" "_ZIP   ;IB*2*497  prevent orphan commas being displayed
"RTN","IBCNES1",294,0)
 S LN=LN+1
"RTN","IBCNES1",295,0)
 D SET(LN,COL1,"Entity Address",ADDR)
"RTN","IBCNES1",296,0)
 ;
"RTN","IBCNES1",297,0)
 S LN=LN+1
"RTN","IBCNES1",298,0)
 D SET(LN,COL1,"Country Code",$G(BRE(IBVF,IBVIENS,4.06,"E")))
"RTN","IBCNES1",299,0)
 D SET(.LN,COL2,"Country Subdivision",$G(BRE(IBVF,IBVIENS,4.09,"E")))
"RTN","IBCNES1",300,0)
 ;
"RTN","IBCNES1",301,0)
 S LN=LN+1
"RTN","IBCNES1",302,0)
 D SET(LN,COL1,"Location Qual",$P($G(^IBE(365.034,+$G(BRE(IBVF,IBVIENS,4.08,"I")),0)),U,2))  ;IB*2*497
"RTN","IBCNES1",303,0)
 D SET(.LN,COL2,"DOD Health Service Region Code",$G(BRE(IBVF,IBVIENS,4.07,"E")))
"RTN","IBCNES1",304,0)
 ;
"RTN","IBCNES1",305,0)
 ; now loop through and display all of the benefit related entity contact information
"RTN","IBCNES1",306,0)
 S ZF=2.3226
"RTN","IBCNES1",307,0)
 I IBVF=365.02 S ZF=365.26       ; contact information subfile#
"RTN","IBCNES1",308,0)
 I '$D(BRE(ZF)) S BRE(ZF,1)=""   ; so the fields display once
"RTN","IBCNES1",309,0)
 S ZIEN="" F  S ZIEN=$O(BRE(ZF,ZIEN)) Q:ZIEN=""  D
"RTN","IBCNES1",310,0)
 . N IBDATA,IBLABEL,IBLEN
"RTN","IBCNES1",311,0)
 . S LN=LN+1
"RTN","IBCNES1",312,0)
 . D SET(LN,COL1,"Comm. Number Qual",$P($G(^IBE(365.021,+$G(BRE(ZF,ZIEN,.04,"I")),0)),U,2))
"RTN","IBCNES1",313,0)
 . S IBDATA=$G(BRE(ZF,ZIEN,1,"E")),IBLABEL="Entity Comm. Number"
"RTN","IBCNES1",314,0)
 . I $L(IBLABEL)+2+$L(IBDATA)<40 D  Q
"RTN","IBCNES1",315,0)
 .. D SET(.LN,COL2,IBLABEL,IBDATA)
"RTN","IBCNES1",316,0)
 . I $L(IBLABEL)+2+$L(IBDATA)<80 D  Q
"RTN","IBCNES1",317,0)
 .. S LN=LN+1
"RTN","IBCNES1",318,0)
 .. D SET(LN,COL1,IBLABEL,IBDATA)
"RTN","IBCNES1",319,0)
 . F  D  I '$L(IBDATA) Q
"RTN","IBCNES1",320,0)
 .. S IBLEN=80-$L(IBLABEL),LN=LN+1
"RTN","IBCNES1",321,0)
 .. D SET(LN,COL1,IBLABEL,$E(IBDATA,1,IBLEN))
"RTN","IBCNES1",322,0)
 .. S IBDATA=$E(IBDATA,IBLEN+1,$L(IBDATA)),IBLABEL=""
"RTN","IBCNES1",323,0)
 . Q
"RTN","IBCNES1",324,0)
 ;
"RTN","IBCNES1",325,0)
 S LN=LN+1
"RTN","IBCNES1",326,0)
 D SET(LN)
"RTN","IBCNES1",327,0)
 ;
"RTN","IBCNES1",328,0)
 S LN=LN+1
"RTN","IBCNES1",329,0)
 D SET(LN,1,"Benefit Related Provider Information",,IBVV)
"RTN","IBCNES1",330,0)
 ;
"RTN","IBCNES1",331,0)
 S LN=LN+1
"RTN","IBCNES1",332,0)
 D SET(LN,COL1,"Provider Code",$P($G(^IBE(365.024,+$G(BRE(IBVF,IBVIENS,5.01,"I")),0)),U,2))
"RTN","IBCNES1",333,0)
 D SET(.LN,COL2,"Provider ID Qual",$P($G(^IBE(365.028,+$G(BRE(IBVF,IBVIENS,5.03,"I")),0)),U,2))  ;IB*2*497
"RTN","IBCNES1",334,0)
 ;
"RTN","IBCNES1",335,0)
 S LN=LN+1
"RTN","IBCNES1",336,0)
 D SET(LN,COL1,"Provider ID",$G(BRE(IBVF,IBVIENS,5.02,"E")))
"RTN","IBCNES1",337,0)
 ;
"RTN","IBCNES1",338,0)
 S LN=LN+1
"RTN","IBCNES1",339,0)
 D SET(LN)
"RTN","IBCNES1",340,0)
BREX ;
"RTN","IBCNES1",341,0)
 Q
"RTN","IBCNES1",342,0)
 ;
"RTN","IBCNES1",343,0)
SET(LN,COL,LABEL,DATA,IBVV) ; set data into display scratch global
"RTN","IBCNES1",344,0)
 ;
"RTN","IBCNES1",345,0)
 ; LN must be passed by reference when COL>20 because of the special variable IBVEBCOL flag to produce a single column
"RTN","IBCNES1",346,0)
 ;
"RTN","IBCNES1",347,0)
 ; IBVV - video attributes flag
"RTN","IBCNES1",348,0)
 ;        1 = reverse video
"RTN","IBCNES1",349,0)
 ;        2 = bold
"RTN","IBCNES1",350,0)
 ;        3 = underline
"RTN","IBCNES1",351,0)
 ;
"RTN","IBCNES1",352,0)
 N STR,D1
"RTN","IBCNES1",353,0)
 S COL=$G(COL,1)
"RTN","IBCNES1",354,0)
 I $G(IBVEBCOL),COL>20 S LN=LN+1,COL=2   ; single column flag
"RTN","IBCNES1",355,0)
 I $G(LABEL)'="",COL>1 S LABEL=" "_LABEL,COL=COL-1
"RTN","IBCNES1",356,0)
 S STR=$G(@DSP@(LN,0))    ; get the current string
"RTN","IBCNES1",357,0)
 S D1=""
"RTN","IBCNES1",358,0)
 I $G(LABEL)'="" S D1=LABEL
"RTN","IBCNES1",359,0)
 I $D(DATA) S D1=D1_": "_$G(DATA)   ; build the new display
"RTN","IBCNES1",360,0)
 ;
"RTN","IBCNES1",361,0)
 S STR=$$SETSTR^VALM1(D1,STR,+COL,(81-COL))   ; insert new data
"RTN","IBCNES1",362,0)
 ;
"RTN","IBCNES1",363,0)
 S @DSP@(LN,0)=STR    ; set the new data back into the scratch global
"RTN","IBCNES1",364,0)
 ;
"RTN","IBCNES1",365,0)
 ; Add the video attributes if requested
"RTN","IBCNES1",366,0)
 I $G(IBVV) D
"RTN","IBCNES1",367,0)
 . I IBVV=1 D CNTRL^VALM10(LN,COL,$L(LABEL),IORVON,IORVOFF)  ; reverse video
"RTN","IBCNES1",368,0)
 . I IBVV=2 D CNTRL^VALM10(LN,COL,$L(LABEL),IOINHI,IOINORM)  ; bold
"RTN","IBCNES1",369,0)
 . I IBVV=3 D CNTRL^VALM10(LN,COL,$L(LABEL),IOUON,IOUOFF)    ; underline
"RTN","IBCNES1",370,0)
 . Q
"RTN","IBCNES1",371,0)
 ;
"RTN","IBCNES1",372,0)
SETX ;
"RTN","IBCNES1",373,0)
 Q
"RTN","IBCNES1",374,0)
 ;
"RTN","IBCNES1",375,0)
DATE(Z) ; convert date in Z in format CCYYMMDD to MM/DD/CCYY format for display
"RTN","IBCNES1",376,0)
 I Z?8N S Z=$E(Z,5,6)_"/"_$E(Z,7,8)_"/"_$E(Z,1,4)
"RTN","IBCNES1",377,0)
 Q Z
"RTN","IBCNES1",378,0)
 ;
"RTN","IBCNES3")
0^17^B25873283^n/a
"RTN","IBCNES3",1,0)
IBCNES3 ;DALOI/KML - eIV elig/Benefit screen, con't ;1-May-2013
"RTN","IBCNES3",2,0)
 ;;2.0;INTEGRATED BILLING;**497**;21-MAR-94;Build 120
"RTN","IBCNES3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNES3",4,0)
 ;
"RTN","IBCNES3",5,0)
 Q
"RTN","IBCNES3",6,0)
 ; called by IBCNES
"RTN","IBCNES3",7,0)
RPDM(IBVF,IBVDA,IBVV,IBVSUB) ; Eligibility/Group Information procedure
"RTN","IBCNES3",8,0)
 ; --- Called by IBCNES
"RTN","IBCNES3",9,0)
 ;          input
"RTN","IBCNES3",10,0)
 ;              IBVF = file file# 2.322 or 365.02
"RTN","IBCNES3",11,0)
 ;              IBVDA - ien of 365 OR 2.312
"RTN","IBCNES3",12,0)
 S IBVV=+$G(IBVV)
"RTN","IBCNES3",13,0)
 N IBL,IBY,IBLINE,LN,DSP,COL1,COL2,GLO
"RTN","IBCNES3",14,0)
 ;^DPT(D0,.312,D1,9,0)
"RTN","IBCNES3",15,0)
 I IBVF=2.312 S GLO=$NA(^DPT(+$G(IBVDA(1)),.312,+$G(IBVDA)))   ; pt. insurance
"RTN","IBCNES3",16,0)
 I IBVF=365 S GLO=$NA(^IBCN(365,+$G(IBVDA)))                ; response file
"RTN","IBCNES3",17,0)
 S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))       ; scratch global display array
"RTN","IBCNES3",18,0)
 S LN=+$O(@DSP@(""),-1)                  ; last line# used in scratch global
"RTN","IBCNES3",19,0)
 S COL1=2,COL2=47
"RTN","IBCNES3",20,0)
 ;
"RTN","IBCNES3",21,0)
 S LN=LN+1
"RTN","IBCNES3",22,0)
 D SET^IBCNES1(LN,1,"Eligibility/Group Plan Information",,IBVV)
"RTN","IBCNES3",23,0)
 S LN=LN+1
"RTN","IBCNES3",24,0)
 D SET^IBCNES1(LN)
"RTN","IBCNES3",25,0)
 D REF(GLO,IBVF,.IBVDA)
"RTN","IBCNES3",26,0)
 D PROV(GLO,IBVF,.IBVDA)
"RTN","IBCNES3",27,0)
 D DIAG(GLO,IBVF,.IBVDA)
"RTN","IBCNES3",28,0)
 D MIL(GLO,IBVF,.IBVDA)
"RTN","IBCNES3",29,0)
 ;
"RTN","IBCNES3",30,0)
 Q
"RTN","IBCNES3",31,0)
 ;
"RTN","IBCNES3",32,0)
REF(GLO,IBVF,IBVDA) ;  policy level reference ID display
"RTN","IBCNES3",33,0)
 ; 
"RTN","IBCNES3",34,0)
 ;    input - 
"RTN","IBCNES3",35,0)
 N REF,SIEN,IENS,REFLST
"RTN","IBCNES3",36,0)
 S IBVF=$S(IBVF=365:365.09,1:2.3129)
"RTN","IBCNES3",37,0)
 S SIEN=0 F  S SIEN=$O(@GLO@(9,SIEN)) Q:'SIEN  S REFLST(SIEN)=""
"RTN","IBCNES3",38,0)
 I '$D(REFLST) S REFLST(1)=""  ; field labels need to display once even if no values exist
"RTN","IBCNES3",39,0)
 S SIEN=0 F  S SIEN=$O(REFLST(SIEN)) Q:'SIEN  D
"RTN","IBCNES3",40,0)
 . S IENS=$S(IBVF=365.09:SIEN_","_IBVDA_",",1:SIEN_","_IBVDA_","_IBVDA(1)_",")
"RTN","IBCNES3",41,0)
 . D GETS^DIQ(IBVF,IENS,"*","IEN","REF")
"RTN","IBCNES3",42,0)
 . D SET^IBCNES1(LN,COL1,"Reference ID Qualifier",$P($G(^IBE(365.028,+$G(REF(IBVF,IENS,.03,"I")),0)),U,2))
"RTN","IBCNES3",43,0)
 . D SET^IBCNES1(.LN,COL2,"Reference ID",$G(REF(IBVF,IENS,.02,"E")))
"RTN","IBCNES3",44,0)
 . S LN=LN+1
"RTN","IBCNES3",45,0)
 . D SET^IBCNES1(LN,COL1,"Reference ID description",$G(REF(IBVF,IENS,.04,"E")))
"RTN","IBCNES3",46,0)
 . S LN=LN+1
"RTN","IBCNES3",47,0)
 . D SET^IBCNES1(LN)
"RTN","IBCNES3",48,0)
 S LN=LN+1
"RTN","IBCNES3",49,0)
 D SET^IBCNES1(LN)
"RTN","IBCNES3",50,0)
 Q
"RTN","IBCNES3",51,0)
 ;
"RTN","IBCNES3",52,0)
PROV(GLO,IBVF,IBVDA) ; GROUP level provider info
"RTN","IBCNES3",53,0)
 ;          input
"RTN","IBCNES3",54,0)
 ;              RIEN - ien of 365
"RTN","IBCNES3",55,0)
 N PVLIST,SIEN,IENS,PV
"RTN","IBCNES3",56,0)
 S IBVF=$S(IBVF=365:365.04,1:2.332)
"RTN","IBCNES3",57,0)
 S SIEN=0 F  S SIEN=$O(@GLO@(10,SIEN)) Q:'SIEN  S PVLIST(SIEN)=""
"RTN","IBCNES3",58,0)
 I '$D(PVLIST) S PVLIST(1)=""  ; field labels need to display once even if no values exist
"RTN","IBCNES3",59,0)
 S SIEN=0 F  S SIEN=$O(PVLIST(SIEN)) Q:'SIEN  D
"RTN","IBCNES3",60,0)
 . S IENS=$S(IBVF=365.04:SIEN_","_IBVDA_",",1:SIEN_","_IBVDA_","_IBVDA(1)_",")
"RTN","IBCNES3",61,0)
 . D GETS^DIQ(IBVF,IENS,"*","IEN","PV")
"RTN","IBCNES3",62,0)
 . D SET^IBCNES1(LN,COL1,"Provider Code",$P($G(^IBE(365.024,+$G(PV(IBVF,IENS,.02,"I")),0)),U,2))
"RTN","IBCNES3",63,0)
 . S LN=LN+1
"RTN","IBCNES3",64,0)
 . D SET^IBCNES1(LN,COL1,"Reference ID",$G(PV(IBVF,IENS,.03,"E")))
"RTN","IBCNES3",65,0)
 . S LN=LN+1
"RTN","IBCNES3",66,0)
 . D SET^IBCNES1(LN)
"RTN","IBCNES3",67,0)
 S LN=LN+1
"RTN","IBCNES3",68,0)
 D SET^IBCNES1(LN)
"RTN","IBCNES3",69,0)
 Q
"RTN","IBCNES3",70,0)
 ;
"RTN","IBCNES3",71,0)
DIAG(GLO,IBVF,IBVDA) ; DIAGNOSIS INFO
"RTN","IBCNES3",72,0)
 N IENS,SIEN,HDLIST,DIAG,ICDSTR,PRIMSEC
"RTN","IBCNES3",73,0)
 S IBVF=$S(IBVF=365:365.01,1:2.31211)
"RTN","IBCNES3",74,0)
 S SIEN=0 F  S SIEN=$O(@GLO@(11,SIEN)) Q:'SIEN  S HDLIST(SIEN)=""
"RTN","IBCNES3",75,0)
 I '$D(HDLIST) S HDLIST(1)=""  ; field labels need to display once even if no values exist
"RTN","IBCNES3",76,0)
 S SIEN=0 F  S SIEN=$O(HDLIST(SIEN)) Q:'SIEN  D
"RTN","IBCNES3",77,0)
 . S IENS=$S(IBVF=365.01:SIEN_","_IBVDA_",",1:SIEN_","_IBVDA_","_IBVDA(1)_",")
"RTN","IBCNES3",78,0)
 . D GETS^DIQ(IBVF,IENS,"*","IEN","DIAG")
"RTN","IBCNES3",79,0)
 . S ICDSTR=$G(^ICD9(+$G(DIAG(IBVF,IENS,.02,"I")),0))  ; IA# 5388 (Supported agreement)
"RTN","IBCNES3",80,0)
 . S PRIMSEC=$G(DIAG(IBVF,IENS,.04,"I"))
"RTN","IBCNES3",81,0)
 . D SET^IBCNES1(LN,COL1,$S(PRIMSEC="P":"Primary ",PRIMSEC="":"Primary ",1:"Secondary ")_"Diagnosis Code",$P(ICDSTR,U)_" "_$P(ICDSTR,U,3))
"RTN","IBCNES3",82,0)
 . S LN=LN+1
"RTN","IBCNES3",83,0)
 . D SET^IBCNES1(LN)
"RTN","IBCNES3",84,0)
 S LN=LN+1
"RTN","IBCNES3",85,0)
 D SET^IBCNES1(LN)
"RTN","IBCNES3",86,0)
 Q
"RTN","IBCNES3",87,0)
 ;
"RTN","IBCNES3",88,0)
MIL(GLO,IBVF,IBVDA) ; military personnel information display
"RTN","IBCNES3",89,0)
 ; 
"RTN","IBCNES3",90,0)
 ;    input - 
"RTN","IBCNES3",91,0)
 N IENS
"RTN","IBCNES3",92,0)
 S IENS=IBVDA_","
"RTN","IBCNES3",93,0)
 S IENS=$S(IBVF=365:IBVDA_",",1:IBVDA_","_IBVDA(1)_",")
"RTN","IBCNES3",94,0)
 S IBVF=$S(IBVF=365:365,1:2.312)
"RTN","IBCNES3",95,0)
 D GETS^DIQ(IBVF,IENS,"12.01:12.07","IEN","MIL")
"RTN","IBCNES3",96,0)
 D SET^IBCNES1(LN,COL1,"Military Info Status",$P($G(^IBE(365.039,+$G(MIL(IBVF,IENS,12.01,"I")),0)),U,2))
"RTN","IBCNES3",97,0)
 D SET^IBCNES1(.LN,COL2,"Employment Status",$P($G(^IBE(365.046,+$G(MIL(IBVF,IENS,12.02,"I")),0)),U,2))
"RTN","IBCNES3",98,0)
 S LN=LN+1
"RTN","IBCNES3",99,0)
 D SET^IBCNES1(LN,COL1,"Government Affiliation",$P($G(^IBE(365.041,+$G(MIL(IBVF,IENS,12.03,"I")),0)),U,2))
"RTN","IBCNES3",100,0)
 D SET^IBCNES1(.LN,COL2,"Date Time Period",$$DFMT(.MIL,IBVF,IENS))
"RTN","IBCNES3",101,0)
 S LN=LN+1
"RTN","IBCNES3",102,0)
 D SET^IBCNES1(LN,COL1,"Service Rank",$P($G(^IBE(365.042,+$G(MIL(IBVF,IENS,12.05,"I")),0)),U,2))
"RTN","IBCNES3",103,0)
 S LN=LN+1
"RTN","IBCNES3",104,0)
 D SET^IBCNES1(LN,COL1,"Desc",$G(MIL(IBVF,IENS,12.04,"E")))
"RTN","IBCNES3",105,0)
 S LN=LN+1
"RTN","IBCNES3",106,0)
 D SET^IBCNES1(LN)
"RTN","IBCNES3",107,0)
 Q
"RTN","IBCNES3",108,0)
 ;
"RTN","IBCNES3",109,0)
DFMT(MIL,IBVF,IENS) ;  return proper date format string
"RTN","IBCNES3",110,0)
 ; 
"RTN","IBCNES3",111,0)
 ;    input - MIL = data array containing the data extracted from the military information fields (365, 12.01-12.07)
"RTN","IBCNES3",112,0)
 ;            IENS = ien of 365 entry or 2.312 entry
"RTN","IBCNES3",113,0)
 ;    output - RES = formatted date string
"RTN","IBCNES3",114,0)
 N TODT,FROMDT,RES
"RTN","IBCNES3",115,0)
 ; date range  
"RTN","IBCNES3",116,0)
 I $G(MIL(IBVF,IENS,12.06,"E"))="RD8" S FROMDT=$P($G(MIL(IBVF,IENS,12.07,"E")),"-"),TODT=$P($G(MIL(IBVF,IENS,12.07,"E")),"-",2),RES=$$FMTE^XLFDT($$HL7TFM^XLFDT(FROMDT),2)_" - "_$$FMTE^XLFDT($$HL7TFM^XLFDT(TODT),2)
"RTN","IBCNES3",117,0)
 E  S RES=$$FMTE^XLFDT($$HL7TFM^XLFDT($G(MIL(IBVF,IENS,12.07,"E"))),2)  ; single date
"RTN","IBCNES3",118,0)
 Q RES
"RTN","IBCNES3",119,0)
 ;
"RTN","IBCNESI")
0^21^B17756591^n/a
"RTN","IBCNESI",1,0)
IBCNESI ;ALB/TAZ - Potential Medicare COB Prompts ;15-JAN-2013
"RTN","IBCNESI",2,0)
 ;;2.0;INTEGRATED BILLING;**497**;21-MAR-94;Build 120
"RTN","IBCNESI",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNESI",4,0)
 ;
"RTN","IBCNESI",5,0)
EN ;PRIMARY ENTRY POINT
"RTN","IBCNESI",6,0)
 N IBSDT,IBEDT,IBCOMP,IBREP,IBSORT,IBERD
"RTN","IBCNESI",7,0)
 ;
"RTN","IBCNESI",8,0)
 S IBERD=$P($O(^IBCN(365,"AD","")),".",1)
"RTN","IBCNESI",9,0)
 W !,"The earliest date in the IIV RESPONSE file is "_$$FMTE^XLFDT(IBERD),!!
"RTN","IBCNESI",10,0)
Q1 ; Question 1 - Begin Search Date
"RTN","IBCNESI",11,0)
 N X,Y,DIRUT
"RTN","IBCNESI",12,0)
 S DIR(0)="DA^"_IBERD_":DT:EX"
"RTN","IBCNESI",13,0)
 S DIR("A")="Select Earliest Report Date: ",DIR("B")="TODAY-7"
"RTN","IBCNESI",14,0)
 S DIR("?",1)="   Please enter a valid date for which an eIV Response"
"RTN","IBCNESI",15,0)
 S DIR("?",2)="   would have been received (earliest date is "_$$FMTE^XLFDT(IBERD)_")."
"RTN","IBCNESI",16,0)
 S DIR("?")="   Future dates are not allowed."
"RTN","IBCNESI",17,0)
 D ^DIR K DIR
"RTN","IBCNESI",18,0)
 I $D(DIRUT) G ENQ
"RTN","IBCNESI",19,0)
 S IBSDT=+Y
"RTN","IBCNESI",20,0)
 ;
"RTN","IBCNESI",21,0)
Q2 ; Question 2 - End Search Date
"RTN","IBCNESI",22,0)
 S DIR(0)="DA^"_IBSDT_":DT:EX"
"RTN","IBCNESI",23,0)
 S DIR("A")="Select Latest Report Date ",DIR("B")="TODAY"
"RTN","IBCNESI",24,0)
 S DIR("?",1)="   Please enter a valid date for which an eIV Response"
"RTN","IBCNESI",25,0)
 S DIR("?",2)="   would have been received.  This date must not precede"
"RTN","IBCNESI",26,0)
 S DIR("?")="   the Start Date.  Future dates are not allowed."
"RTN","IBCNESI",27,0)
 D ^DIR K DIR
"RTN","IBCNESI",28,0)
 I $D(DIRUT) G ENQ
"RTN","IBCNESI",29,0)
 S IBEDT=+Y
"RTN","IBCNESI",30,0)
 ;
"RTN","IBCNESI",31,0)
Q3 ;Question 3 - Sort Criteria
"RTN","IBCNESI",32,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBCNESI",33,0)
 W !
"RTN","IBCNESI",34,0)
 S DIR(0)="SA^1:Chronological Order;2:Reverse Chronological Order"
"RTN","IBCNESI",35,0)
 S DIR("A")="Sort Report By: "
"RTN","IBCNESI",36,0)
 S DIR("B")="Chronological Order"
"RTN","IBCNESI",37,0)
 D ^DIR
"RTN","IBCNESI",38,0)
 I $D(DTOUT)!$D(DUOUT)!(Y<0) G ENQ
"RTN","IBCNESI",39,0)
 S IBSORT=$S(Y=2:"-1",1:"+1")
"RTN","IBCNESI",40,0)
 ;
"RTN","IBCNESI",41,0)
Q4 ;
"RTN","IBCNESI",42,0)
 S DIR(0)="SA^R:Report;S:Screen List"
"RTN","IBCNESI",43,0)
 S DIR("A")="Do you want a (R)eport or a (S)creen List format?: "
"RTN","IBCNESI",44,0)
 S DIR("B")="Screen List"
"RTN","IBCNESI",45,0)
 W ! D ^DIR K DIR
"RTN","IBCNESI",46,0)
 I $D(DTOUT)!$D(DUOUT) G ENQ
"RTN","IBCNESI",47,0)
 S IBREP=Y
"RTN","IBCNESI",48,0)
 ;
"RTN","IBCNESI",49,0)
 I IBREP="S" S IBCOMP=0 D LIST^IBCNESI1 G ENQ
"RTN","IBCNESI",50,0)
 ;
"RTN","IBCNESI",51,0)
Q5 ; Include completed entries
"RTN","IBCNESI",52,0)
 W !!,"1) Display COMPLETED entries, but do not display any comments"
"RTN","IBCNESI",53,0)
 W !,"2) Display COMPLETED entries along with any associated comments"
"RTN","IBCNESI",54,0)
 W !!,"3) Display non-COMPLETED entries, but do not display any comments"
"RTN","IBCNESI",55,0)
 W !,"4) Display non-COMPLETED entries along with any associated comments",!
"RTN","IBCNESI",56,0)
 S DIR("A")="Which report type do you want? "
"RTN","IBCNESI",57,0)
 S DIR(0)="SA^1:Display COMPLETED entries, but do not display any comments;2:Display COMPLETED entries along with any associated comments"
"RTN","IBCNESI",58,0)
 S DIR(0)=DIR(0)_";3:Display non-COMPLETED entries, but do not display any comments;4:Display non-COMPLETED entries along with any associated comments"
"RTN","IBCNESI",59,0)
 S DIR("B")=1
"RTN","IBCNESI",60,0)
 W ! D ^DIR K DIR
"RTN","IBCNESI",61,0)
 I $D(DTOUT)!$D(DUOUT) G ENQ
"RTN","IBCNESI",62,0)
 S IBCOMP=Y
"RTN","IBCNESI",63,0)
 ;
"RTN","IBCNESI",64,0)
Q6 ; Select device
"RTN","IBCNESI",65,0)
 F  S IBACT=0 D DEVSEL(.IBACT) Q:IBACT
"RTN","IBCNESI",66,0)
 I IBACT=99 G ENQ
"RTN","IBCNESI",67,0)
 U IO
"RTN","IBCNESI",68,0)
 D LIST^IBCNESI1
"RTN","IBCNESI",69,0)
 ;
"RTN","IBCNESI",70,0)
ENQ ;
"RTN","IBCNESI",71,0)
 Q
"RTN","IBCNESI",72,0)
 ;
"RTN","IBCNESI",73,0)
DEVSEL(IBACT) ;
"RTN","IBCNESI",74,0)
 N DIR,POP,X,Y,ZTRTN,ZTSAVE,ZTDESC,IBOK,%ZIS
"RTN","IBCNESI",75,0)
 W !!,"You will need a 132 column printer for this report!"
"RTN","IBCNESI",76,0)
 S %ZIS="QM" D ^%ZIS I POP S IBACT=99 G DEVSELQ
"RTN","IBCNESI",77,0)
 I $G(IOM),IOM<132 S IBOK=1 D  I 'IBOK S IBACT=0 G DEVSELQ
"RTN","IBCNESI",78,0)
 . S DIR(0)="YA",DIR("A",1)="This report requires output to a 132 column device."
"RTN","IBCNESI",79,0)
 . S DIR("A",2)="The device you have chosen is only set for "_IOM_"."
"RTN","IBCNESI",80,0)
 . S DIR("A")="Are you sure you want to continue?: ",DIR("B")="No"
"RTN","IBCNESI",81,0)
 . W ! D ^DIR K DIR
"RTN","IBCNESI",82,0)
 . I Y'=1 S IBOK=0 W !
"RTN","IBCNESI",83,0)
 I $D(IO("Q")) D  S IBACT=99 G DEVSELQ
"RTN","IBCNESI",84,0)
 . K IO("Q")
"RTN","IBCNESI",85,0)
 . S ZTRTN="LIST^IBCNESI",ZTSAVE("IBCRIT(")="",ZTSAVE("IB*")="",ZTSAVE("^TMP(""IB_POT_COB_RPT"",$J)")="",ZTDESC="IBCNE - Potential COB Report"
"RTN","IBCNESI",86,0)
 . D ^%ZTLOAD K ZTSK D HOME^%ZIS
"RTN","IBCNESI",87,0)
 S IBACT=1
"RTN","IBCNESI",88,0)
DEVSELQ ;
"RTN","IBCNESI",89,0)
 Q
"RTN","IBCNESI",90,0)
 ;
"RTN","IBCNESI1")
0^20^B73077962^n/a
"RTN","IBCNESI1",1,0)
IBCNESI1 ;ALB/TAZ - MEDICARE POTENTIAL COB Patient Selection ;15 Jan 13
"RTN","IBCNESI1",2,0)
 ;;2.0;INTEGRATED BILLING;**497**;21-MAR-94;Build 120
"RTN","IBCNESI1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNESI1",4,0)
 ;
"RTN","IBCNESI1",5,0)
 Q  ;Only enter at labels.
"RTN","IBCNESI1",6,0)
 ;
"RTN","IBCNESI1",7,0)
LIST ; Entry Point from IBCNESI
"RTN","IBCNESI1",8,0)
 ; IBSDT - Start Date
"RTN","IBCNESI1",9,0)
 ; IBEDT - End Date
"RTN","IBCNESI1",10,0)
 ; IBSORT - Sort Direction
"RTN","IBCNESI1",11,0)
 ; IBREP - Report or Screen
"RTN","IBCNESI1",12,0)
 ; IBCOMP - 
"RTN","IBCNESI1",13,0)
 ;  1 = include completed entries only
"RTN","IBCNESI1",14,0)
 ;  2 = include completed entries only with comments
"RTN","IBCNESI1",15,0)
 ;  3 = exclude completed entries
"RTN","IBCNESI1",16,0)
 ;  4 = exclude completed entries with comments
"RTN","IBCNESI1",17,0)
 ;
"RTN","IBCNESI1",18,0)
 N IBDT,IBDT1,IBPYR,IBMPYR,IBDFN,IBRIEN,IBRVIEN,IBEIEN,IBDATA,IENS,IBSEQ,IBCIEN,IBEIDCD,IBRVST,IBELIG,IBNOCMT,IBCNT
"RTN","IBCNESI1",19,0)
 K ^TMP($J,"IBCNESI1"),^TMP($J,"IBCNESI2"),^TMP("IBCNESI1",$J),^UTILITY("VADM",$J)
"RTN","IBCNESI1",20,0)
 S IBPYR=$P($G(^IBE(350.9,1,51)),U,25) ; get Medicare payer ien from IB site parameters
"RTN","IBCNESI1",21,0)
 S IBDT=IBSDT-.1,IBCNT=0
"RTN","IBCNESI1",22,0)
 D BLDTMP
"RTN","IBCNESI1",23,0)
 I IBREP="R" D EN^IBCNERPI
"RTN","IBCNESI1",24,0)
 Q
"RTN","IBCNESI1",25,0)
 ;
"RTN","IBCNESI1",26,0)
BLDTMP ;  construct the temporary global array according to filter and sort criteria selected by user
"RTN","IBCNESI1",27,0)
 F  S IBDT=$O(^IBCN(365,"AD",IBDT)) Q:'IBDT!(IBDT>(IBEDT+1))  D
"RTN","IBCNESI1",28,0)
 . S IBDFN=0
"RTN","IBCNESI1",29,0)
 . F  S IBDFN=$O(^IBCN(365,"AD",IBDT,IBPYR,IBDFN)) Q:'IBDFN  D
"RTN","IBCNESI1",30,0)
 .. S IBRIEN=0
"RTN","IBCNESI1",31,0)
 .. F  S IBRIEN=$O(^IBCN(365,"AD",IBDT,IBPYR,IBDFN,IBRIEN)) Q:'IBRIEN  D
"RTN","IBCNESI1",32,0)
 ... ; Transmission Status must be "Response Received"
"RTN","IBCNESI1",33,0)
 ... I $$GET1^DIQ(365,IBRIEN_",",.06,"I")'=$O(^IBE(365.14,"B","Response Received","")) Q
"RTN","IBCNESI1",34,0)
 ... ; Get Response Review Status and check if there are comments. Include/exclude entries according to the report type.
"RTN","IBCNESI1",35,0)
 ... S IBRVIEN=$O(^IBCN(365.2,"B",IBRIEN,"")),IBRVST=+$$GET1^DIQ(365.2,IBRVIEN_",",.02,"I")
"RTN","IBCNESI1",36,0)
 ... S IBNOCMT=IBCOMP#2 ; 1 - don't print comments, 0 - print comments
"RTN","IBCNESI1",37,0)
 ... I "^1^2^"[(U_IBCOMP_U),IBRVST'=2 Q           ; type = 1 or 2, status is not "review complete"
"RTN","IBCNESI1",38,0)
 ... I "^3^4^"[(U_IBCOMP_U),IBRVST=2 Q            ; type = 3 or 4, status is "review complete"
"RTN","IBCNESI1",39,0)
 ... ; Get eligibility Data and set up COB nodes
"RTN","IBCNESI1",40,0)
 ... S IBDT1=(IBDT\1)*IBSORT
"RTN","IBCNESI1",41,0)
 ... S IBEIEN=0
"RTN","IBCNESI1",42,0)
 ... F  S IBEIEN=$O(^IBCN(365,IBRIEN,2,IBEIEN)) Q:'IBEIEN  D
"RTN","IBCNESI1",43,0)
 .... ;Get Eligibility Code.  We want R codes only.
"RTN","IBCNESI1",44,0)
 .... S IENS=IBEIEN_","_IBRIEN_","
"RTN","IBCNESI1",45,0)
 .... S IBELIG=$$GET1^DIQ(365.02,IENS,.02) I IBELIG'="R" Q
"RTN","IBCNESI1",46,0)
 .... S IBEIDCD=$$GET1^DIQ(365.02,IENS,3.01) ;I ",PR,PRP,SEP,TTP,"'[(","_IBEIDCD_",") Q
"RTN","IBCNESI1",47,0)
 .... S IBDATA=$$GET1^DIQ(365.02,IENS,3.03),^TMP($J,"IBCNESI1",IBDT1,IBDFN,IBRIEN,"INS",IBEIEN,"NAME")=IBDATA
"RTN","IBCNESI1",48,0)
 .... S ^TMP($J,"IBCNESI1",IBDT1,IBDFN,IBRIEN,"INS",IBEIEN,"ENT ID CD")=$S(",PRP,SEP,TTP,"[(","_IBEIDCD_","):IBEIDCD,1:"")
"RTN","IBCNESI1",49,0)
 .... S ^TMP($J,"IBCNESI1",IBDT1,IBDFN,IBRIEN,"INS",IBEIEN,"EMFLAG")=$$MATCH(IBDFN,IBDATA)
"RTN","IBCNESI1",50,0)
 .... S IBDATA=$$GET1^DIQ(365.02,IENS,3.04) I IBDATA'="" S ^TMP($J,"IBCNESI1",IBDT1,IBDFN,IBRIEN,"INS",IBEIEN,"ID")=IBDATA
"RTN","IBCNESI1",51,0)
 .... S IBDATA=$$GET1^DIQ(365.02,IENS,3.05,"I") I IBDATA'="" S ^TMP($J,"IBCNESI1",IBDT1,IBDFN,IBRIEN,"INS",IBEIEN,"ID QUAL")=$P(^IBE(365.023,IBDATA,0),U,2)
"RTN","IBCNESI1",52,0)
 .... S IBDATA=$$GET1^DIQ(365.02,IENS,4.01) I IBDATA'="" S ^TMP($J,"IBCNESI1",IBDT1,IBDFN,IBRIEN,"INS",IBEIEN,"ADDRESS 1")=IBDATA
"RTN","IBCNESI1",53,0)
 .... S IBDATA=$$GET1^DIQ(365.02,IENS,4.02) I IBDATA'="" S ^TMP($J,"IBCNESI1",IBDT1,IBDFN,IBRIEN,"INS",IBEIEN,"ADDRESS 2")=IBDATA
"RTN","IBCNESI1",54,0)
 .... S IBDATA=$$GET1^DIQ(365.02,IENS,4.03) I IBDATA'="" S ^TMP($J,"IBCNESI1",IBDT1,IBDFN,IBRIEN,"INS",IBEIEN,"CITY")=IBDATA
"RTN","IBCNESI1",55,0)
 .... S IBDATA=$$GET1^DIQ(365.02,IENS,4.04,"I") I IBDATA'="" S ^TMP($J,"IBCNESI1",IBDT1,IBDFN,IBRIEN,"INS",IBEIEN,"STATE")=$$GET1^DIQ(5,IBDATA_",",1)
"RTN","IBCNESI1",56,0)
 .... S IBDATA=$$GET1^DIQ(365.02,IENS,4.05) I IBDATA'="" S ^TMP($J,"IBCNESI1",IBDT1,IBDFN,IBRIEN,"INS",IBEIEN,"ZIP")=IBDATA
"RTN","IBCNESI1",57,0)
 .... S IBCIEN=0
"RTN","IBCNESI1",58,0)
 .... ; display Contact Information
"RTN","IBCNESI1",59,0)
 .... F  S IBCIEN=$O(^IBCN(365,IBRIEN,2,IBEIEN,6,IBCIEN)) Q:'IBCIEN  D
"RTN","IBCNESI1",60,0)
 ..... S IENS=IBCIEN_","_IBEIEN_","_IBRIEN_","
"RTN","IBCNESI1",61,0)
 ..... S IBDATA=$$GET1^DIQ(365.26,IENS,.04) I ",UR,TE,"'[(","_IBDATA_",") Q  ;Phone and Web only
"RTN","IBCNESI1",62,0)
 ..... S IBSEQ=$$GET1^DIQ(365.26,IENS,.01)
"RTN","IBCNESI1",63,0)
 ..... S ^TMP($J,"IBCNESI1",IBDT1,IBDFN,IBRIEN,"INS",IBEIEN,IBDATA,IBSEQ)=$$GET1^DIQ(365.26,IENS,1)
"RTN","IBCNESI1",64,0)
 ... ;If COB data found set up Patient Info
"RTN","IBCNESI1",65,0)
 ... I $D(^TMP($J,"IBCNESI1",IBDT1,IBDFN,IBRIEN)) D
"RTN","IBCNESI1",66,0)
 .... N VAHOW,DFN,VADM
"RTN","IBCNESI1",67,0)
 .... S VAHOW=2,DFN=IBDFN D DEM^VADPT
"RTN","IBCNESI1",68,0)
 .... S ^TMP($J,"IBCNESI1",IBDT1,IBDFN,IBRIEN,"PATIENT NAME")=$P($G(^UTILITY("VADM",$J,1)),U)
"RTN","IBCNESI1",69,0)
 .... S ^TMP($J,"IBCNESI1",IBDT1,IBDFN,IBRIEN,"DOB")=$P($G(^UTILITY("VADM",$J,3)),U)
"RTN","IBCNESI1",70,0)
 .... S ^TMP($J,"IBCNESI1",IBDT1,IBDFN,IBRIEN,"SSN")=$E($P($G(^UTILITY("VADM",$J,2)),U),6,10)
"RTN","IBCNESI1",71,0)
 .... S ^TMP($J,"IBCNESI1",IBDT1,IBDFN,IBRIEN,"REV IEN")=+$G(IBRVIEN)
"RTN","IBCNESI1",72,0)
 ....;KML need to have capability of accessing the REV STATUS subscript when REVIEW STATUS is updated by user
"RTN","IBCNESI1",73,0)
 .... S ^TMP($J,"IBCNESI1",IBDT1,IBDFN,IBRIEN,"REV STATUS")=+$G(IBRVST)_U_IBDT1_U_IBDFN
"RTN","IBCNESI1",74,0)
 .... S ^TMP($J,"IBCNESI1",IBDT1,IBDFN,IBRIEN,"NO CMNT")=+$G(IBNOCMT)
"RTN","IBCNESI1",75,0)
 .... K ^UTILITY("VADM",$J)
"RTN","IBCNESI1",76,0)
 .... S IBCNT=IBCNT+1 I '$D(ZTQUEUED),'(IBCNT#15) W ". "
"RTN","IBCNESI1",77,0)
 ... M ^TMP($J,"IBCNESI2",IBRIEN)=^TMP($J,"IBCNESI1",IBDT1,IBDFN,IBRIEN)
"RTN","IBCNESI1",78,0)
 I IBREP="S" D EN^VALM("IBCNE MEDICARE COB LIST")
"RTN","IBCNESI1",79,0)
 Q
"RTN","IBCNESI1",80,0)
 ;
"RTN","IBCNESI1",81,0)
MATCH(IBDFN,INSCONM) ;Match Insurance Companies with Insurance Type subfile.
"RTN","IBCNESI1",82,0)
 N EXPDT,MATCH,NAME,IENS,IBITYP
"RTN","IBCNESI1",83,0)
 S MATCH=0
"RTN","IBCNESI1",84,0)
 S IBITYP=0
"RTN","IBCNESI1",85,0)
 F  S IBITYP=$O(^DPT(IBDFN,.312,IBITYP)) Q:'IBITYP  D  I MATCH Q
"RTN","IBCNESI1",86,0)
 . S IENS=IBITYP_","_IBDFN_","
"RTN","IBCNESI1",87,0)
 . S EXPDT=$$GET1^DIQ(2.312,IENS,.03) I EXPDT&(DT>(EXPDT-1)) Q  ;Only allow current Insurance Type entries
"RTN","IBCNESI1",88,0)
 . S NAME=$$GET1^DIQ(2.312,IENS,.01)
"RTN","IBCNESI1",89,0)
 . I NAME=$E(INSCONM,1,30) S MATCH=1  ;Names must be an exact match
"RTN","IBCNESI1",90,0)
MATCHQ ;
"RTN","IBCNESI1",91,0)
 Q $S(MATCH:"*",1:"")
"RTN","IBCNESI1",92,0)
 ;
"RTN","IBCNESI1",93,0)
HDR ; -- header code
"RTN","IBCNESI1",94,0)
 S VALMHDR(1)=""
"RTN","IBCNESI1",95,0)
 S VALMHDR(2)="Sorted in "_$S((IBSORT<0):"Reverse ",1:"")_"Chronological Order."
"RTN","IBCNESI1",96,0)
 S VALM("TITLE")="Medicare Potential COB List",VALMSG="*Exact Match"
"RTN","IBCNESI1",97,0)
 Q
"RTN","IBCNESI1",98,0)
 ;
"RTN","IBCNESI1",99,0)
INIT ; -- init variables and list array
"RTN","IBCNESI1",100,0)
 D BLDSCRN
"RTN","IBCNESI1",101,0)
 Q
"RTN","IBCNESI1",102,0)
 ;
"RTN","IBCNESI1",103,0)
HELP ; -- help code
"RTN","IBCNESI1",104,0)
 D FULL^VALM1
"RTN","IBCNESI1",105,0)
 S VALMBCK="R"
"RTN","IBCNESI1",106,0)
 W @IOF
"RTN","IBCNESI1",107,0)
 W !,"Status of entries displayed:"
"RTN","IBCNESI1",108,0)
 W !,"   Y - Entry has been reviewed but is not yet complete"
"RTN","IBCNESI1",109,0)
 W !,"   N - Entry has not been reviewed"
"RTN","IBCNESI1",110,0)
 W !
"RTN","IBCNESI1",111,0)
 W !,"* Denotes that the Insurance Company in the Response Record"
"RTN","IBCNESI1",112,0)
 W !,"  matches an Insurance Company in the Insurance Type "
"RTN","IBCNESI1",113,0)
 W !,"  sub-file of the Patient File."
"RTN","IBCNESI1",114,0)
 D PAUSE^VALM1
"RTN","IBCNESI1",115,0)
 Q
"RTN","IBCNESI1",116,0)
 ;
"RTN","IBCNESI1",117,0)
EXIT ; -- exit code
"RTN","IBCNESI1",118,0)
 K ^TMP($J,"IBCNESI1"),^TMP($J,"IBCNESI2"),^TMP("IBCNESI1",$J),^UTILITY("VADM",$J)
"RTN","IBCNESI1",119,0)
 Q
"RTN","IBCNESI1",120,0)
 ;
"RTN","IBCNESI1",121,0)
EXPND ; -- expand code
"RTN","IBCNESI1",122,0)
 N DA,DD,DIC,DIK,DLAYGO,X,Y,IBDA,IBIEN
"RTN","IBCNESI1",123,0)
 D SEL(.IBDA,1) S:$O(IBDA(0)) IBRIEN=+IBDA($O(IBDA(0))) I '$G(IBRIEN) G EXPNDQ
"RTN","IBCNESI1",124,0)
 D EN^IBCNESI2(IBRIEN)
"RTN","IBCNESI1",125,0)
EXPNDQ ;
"RTN","IBCNESI1",126,0)
 D BLDSCRN
"RTN","IBCNESI1",127,0)
 S VALMBCK="R"
"RTN","IBCNESI1",128,0)
 Q
"RTN","IBCNESI1",129,0)
 ;
"RTN","IBCNESI1",130,0)
BLDSCRN ;build screen of worklist entries
"RTN","IBCNESI1",131,0)
 N IBLN,IBRVSTAT,LINEVAR,DISPDATE
"RTN","IBCNESI1",132,0)
 K @VALMAR
"RTN","IBCNESI1",133,0)
 S IBDT="",(IBLN,VALMCNT)=0
"RTN","IBCNESI1",134,0)
 F  S IBDT=$O(^TMP($J,"IBCNESI1",IBDT)) Q:'IBDT  D
"RTN","IBCNESI1",135,0)
 . S DISPDATE=1
"RTN","IBCNESI1",136,0)
 . S IBDFN=""
"RTN","IBCNESI1",137,0)
 . F  S IBDFN=$O(^TMP($J,"IBCNESI1",IBDT,IBDFN)) Q:'IBDFN  D
"RTN","IBCNESI1",138,0)
 .. S IBRIEN=""
"RTN","IBCNESI1",139,0)
 .. F  S IBRIEN=$O(^TMP($J,"IBCNESI1",IBDT,IBDFN,IBRIEN)) Q:'IBRIEN  D
"RTN","IBCNESI1",140,0)
 ... S IBRVSTAT=$P($G(^TMP($J,"IBCNESI1",IBDT,IBDFN,IBRIEN,"REV STATUS")),U)
"RTN","IBCNESI1",141,0)
 ... I IBRVSTAT=2 Q  ;Do not include completes on the screen
"RTN","IBCNESI1",142,0)
 ... ;Only display the date if there are incomplete entries on that date.
"RTN","IBCNESI1",143,0)
 ... I DISPDATE S LINEVAR="",LINEVAR=$$SETSTR^VALM1($$FMTE^XLFDT((IBDT*IBSORT),"2Z"),LINEVAR,3,11) D SET(LINEVAR,IBLN+1) S DISPDATE=0
"RTN","IBCNESI1",144,0)
 ... S LINEVAR="",IBLN=IBLN+1
"RTN","IBCNESI1",145,0)
 ... S LINEVAR=$$SETFLD^VALM1($J(IBLN,3),LINEVAR,"COUNTER")
"RTN","IBCNESI1",146,0)
 ... S LINEVAR=$$SETFLD^VALM1($J(" ",7)_$G(^TMP($J,"IBCNESI2",IBRIEN,"PATIENT NAME")),LINEVAR,"PATIENT")
"RTN","IBCNESI1",147,0)
 ... S LINEVAR=$$SETFLD^VALM1($G(^TMP($J,"IBCNESI2",IBRIEN,"SSN")),LINEVAR,"SSN")
"RTN","IBCNESI1",148,0)
 ... S LINEVAR=$$SETFLD^VALM1($$FMTE^XLFDT($G(^TMP($J,"IBCNESI2",IBRIEN,"DOB")),"2Z"),LINEVAR,"DOB")
"RTN","IBCNESI1",149,0)
 ... S LINEVAR=$$SETFLD^VALM1($J($S(IBRVSTAT:"Y",1:"N"),2),LINEVAR,"STATUS")
"RTN","IBCNESI1",150,0)
 ... ; Get 1st Insurance Co
"RTN","IBCNESI1",151,0)
 ... S IBEIEN=0
"RTN","IBCNESI1",152,0)
 ... S IBEIEN=$O(^TMP($J,"IBCNESI1",IBDT,IBDFN,IBRIEN,"INS",IBEIEN))
"RTN","IBCNESI1",153,0)
 ... S LINEVAR=$$SETFLD^VALM1($G(^TMP($J,"IBCNESI2",IBRIEN,"INS",IBEIEN,"EMFLAG")),LINEVAR,"EMFLAG")
"RTN","IBCNESI1",154,0)
 ... S IBDATA=$E($G(^TMP($J,"IBCNESI2",IBRIEN,"INS",IBEIEN,"NAME")),1,31)
"RTN","IBCNESI1",155,0)
 ... I ^TMP($J,"IBCNESI2",IBRIEN,"INS",IBEIEN,"ENT ID CD")]"" S IBDATA=IBDATA_" ("_$E(^TMP($J,"IBCNESI2",IBRIEN,"INS",IBEIEN,"ENT ID CD"),1)_")"
"RTN","IBCNESI1",156,0)
 ... S LINEVAR=$$SETFLD^VALM1(IBDATA,LINEVAR,"INSCO")
"RTN","IBCNESI1",157,0)
 ... D SET(LINEVAR,IBLN,IBRIEN)
"RTN","IBCNESI1",158,0)
 ... F  S IBEIEN=$O(^TMP($J,"IBCNESI2",IBRIEN,"INS",IBEIEN)) Q:'IBEIEN  D
"RTN","IBCNESI1",159,0)
 .... S LINEVAR=""
"RTN","IBCNESI1",160,0)
 .... S LINEVAR=$$SETFLD^VALM1($G(^TMP($J,"IBCNESI2",IBRIEN,"INS",IBEIEN,"EMFLAG")),LINEVAR,"EMFLAG")
"RTN","IBCNESI1",161,0)
 .... S IBDATA=$E($G(^TMP($J,"IBCNESI2",IBRIEN,"INS",IBEIEN,"NAME")),1,31)
"RTN","IBCNESI1",162,0)
 .... I ^TMP($J,"IBCNESI2",IBRIEN,"INS",IBEIEN,"ENT ID CD")]"" S IBDATA=IBDATA_" ("_$E(^TMP($J,"IBCNESI2",IBRIEN,"INS",IBEIEN,"ENT ID CD"),1)_")"
"RTN","IBCNESI1",163,0)
 .... S LINEVAR=$$SETFLD^VALM1(IBDATA,LINEVAR,"INSCO")
"RTN","IBCNESI1",164,0)
 .... D SET(LINEVAR,IBLN,IBRIEN)
"RTN","IBCNESI1",165,0)
 I VALMCNT=0 D SET("",IBLN+1),SET("* * * No Worklist Entries to Display * * *",IBLN+1),SET("Review Status is 'Complete' for all entries within given Date Range",IBLN+1)
"RTN","IBCNESI1",166,0)
 Q
"RTN","IBCNESI1",167,0)
 ;
"RTN","IBCNESI1",168,0)
SET(X,CNT,IBIEN) ;set up list manager screen array
"RTN","IBCNESI1",169,0)
 S VALMCNT=VALMCNT+1
"RTN","IBCNESI1",170,0)
 S @VALMAR@(VALMCNT,0)=X
"RTN","IBCNESI1",171,0)
 S @VALMAR@("IDX",VALMCNT,CNT)=""
"RTN","IBCNESI1",172,0)
 I $G(IBIEN),$G(@VALMAR@(CNT))="" S @VALMAR@(CNT)=VALMCNT_U_IBIEN
"RTN","IBCNESI1",173,0)
 Q
"RTN","IBCNESI1",174,0)
 ;
"RTN","IBCNESI1",175,0)
SEL(IBDA,ONE) ; Select entry(s) from list
"RTN","IBCNESI1",176,0)
 ; IBDA = array returned if selections made
"RTN","IBCNESI1",177,0)
 ;    IBDA(n)=ien of entry selected (file 365)
"RTN","IBCNESI1",178,0)
 ; ONE = if set to 1, only one selection can be made at a time
"RTN","IBCNESI1",179,0)
 N VALMY,VALMBG,VALMLST
"RTN","IBCNESI1",180,0)
 I $D(@VALMAR) D
"RTN","IBCNESI1",181,0)
 . S VALMBG=$O(@VALMAR@("IDX","")),VALMLST=$O(@VALMAR@("IDX",""),-1)
"RTN","IBCNESI1",182,0)
 . K IBDA
"RTN","IBCNESI1",183,0)
 . D FULL^VALM1
"RTN","IBCNESI1",184,0)
 . ;D EN^VALM2("",$S('$G(ONE):"",1:"S")) ; WCJ
"RTN","IBCNESI1",185,0)
 . D EN^VALM2($G(XQORNOD(0)),$S('$G(ONE):"",1:"S"))   ;WCJ
"RTN","IBCNESI1",186,0)
 . S IBDA=0 F  S IBDA=$O(VALMY(IBDA)) Q:'IBDA  S IBDA(IBDA)=$P($G(@VALMAR@(+IBDA)),U,2,6)
"RTN","IBCNESI1",187,0)
 Q
"RTN","IBCNESI2")
0^19^B50676612^n/a
"RTN","IBCNESI2",1,0)
IBCNESI2 ;ALB/TAZ - MEDICARE PATIENTS WITH SUBSEQUENT INSURANCE ;15 Jan 13
"RTN","IBCNESI2",2,0)
 ;;2.0;INTEGRATED BILLING;**497**;21-MAR-94;Build 120
"RTN","IBCNESI2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNESI2",4,0)
 ;
"RTN","IBCNESI2",5,0)
 Q  ;Only enter at labels.
"RTN","IBCNESI2",6,0)
 ;
"RTN","IBCNESI2",7,0)
EN(IBRIEN) ; Main Entry Point
"RTN","IBCNESI2",8,0)
 N IBRVST,IBRVIEN
"RTN","IBCNESI2",9,0)
 D EN^VALM("IBCNE MEDICARE COB DISPLAY")
"RTN","IBCNESI2",10,0)
ENQ ;Exit
"RTN","IBCNESI2",11,0)
 S VALMBCK="R"
"RTN","IBCNESI2",12,0)
 Q
"RTN","IBCNESI2",13,0)
 ;
"RTN","IBCNESI2",14,0)
INIT ; Initialize Variables
"RTN","IBCNESI2",15,0)
 S IBRVST="Not Reviewed."
"RTN","IBCNESI2",16,0)
 S IBRVIEN=$$GETREV(IBRIEN)
"RTN","IBCNESI2",17,0)
 D BLD
"RTN","IBCNESI2",18,0)
 Q
"RTN","IBCNESI2",19,0)
 ;
"RTN","IBCNESI2",20,0)
GETREV(IBRIEN) ;Set Review IEN if not already defined.
"RTN","IBCNESI2",21,0)
 N IEN,MSGID
"RTN","IBCNESI2",22,0)
 S IEN=$G(^TMP($J,"IBCNESI2",IBRIEN,"REV IEN"))
"RTN","IBCNESI2",23,0)
 I 'IEN D
"RTN","IBCNESI2",24,0)
 . S MSGID=$$GET1^DIQ(365,IBRIEN_",",.01)
"RTN","IBCNESI2",25,0)
 . S DIC=365.2,DIC(0)="L",DLAYGO=365.2,X=MSGID
"RTN","IBCNESI2",26,0)
 . ; Set Response IEN into .01 field and Not Reviewed in .02 field
"RTN","IBCNESI2",27,0)
 . S DIC("DR")=".01///"_MSGID_";.02///0"
"RTN","IBCNESI2",28,0)
 . D ^DIC
"RTN","IBCNESI2",29,0)
 . S IEN=+Y I IEN>0 S ^TMP($J,"IBCNESI2",IBRIEN,"REV IEN")=IEN
"RTN","IBCNESI2",30,0)
 Q IEN
"RTN","IBCNESI2",31,0)
 ;
"RTN","IBCNESI2",32,0)
BLD ; Build Screen
"RTN","IBCNESI2",33,0)
 N IBLN,IBSTR,IBSTR1,LINEVAR,DIWF,DIWL,DIWR,IBCMDT,IBCMIEN,IBCNT,IBEIEN,IBSEQ,IBURTE,IENS
"RTN","IBCNESI2",34,0)
 K @VALMAR
"RTN","IBCNESI2",35,0)
 S (VALMCNT,IBEIEN)=0
"RTN","IBCNESI2",36,0)
 F  S IBEIEN=$O(^TMP($J,"IBCNESI2",IBRIEN,"INS",IBEIEN)) Q:'IBEIEN  D
"RTN","IBCNESI2",37,0)
 . S IBSTR="",IBSTR=$$SETSTR^VALM1(^TMP($J,"IBCNESI2",IBRIEN,"INS",IBEIEN,"ENT ID CD"),IBSTR,2,4)
"RTN","IBCNESI2",38,0)
 . S IBSTR=$$SETSTR^VALM1($G(^TMP($J,"IBCNESI2",IBRIEN,"INS",IBEIEN,"EMFLAG")),IBSTR,7,7)
"RTN","IBCNESI2",39,0)
 . K IBSTR1 S IBSTR1=$G(^TMP($J,"IBCNESI2",IBRIEN,"INS",IBEIEN,"NAME")) D WRAP(.IBSTR1,70)
"RTN","IBCNESI2",40,0)
 . F IBCNT=1:1:$O(IBSTR1(""),-1) S IBSTR=$$SETSTR^VALM1(IBSTR1(IBCNT),IBSTR,8,78) D SET(IBSTR)
"RTN","IBCNESI2",41,0)
 . S IBSTR=""
"RTN","IBCNESI2",42,0)
 . K IBSTR1 S IBSTR1=$G(^TMP($J,"IBCNESI2",IBRIEN,"INS",IBEIEN,"ID QUAL")) I $L(IBSTR1) S IBSTR1=IBSTR1_": "
"RTN","IBCNESI2",43,0)
 . S IBSTR1=IBSTR1_$G(^TMP($J,"IBCNESI2",IBRIEN,"INS",IBEIEN,"ID")) D WRAP(.IBSTR1,70)
"RTN","IBCNESI2",44,0)
 . F IBCNT=1:1:$O(IBSTR1(""),-1) S IBSTR=$$SETSTR^VALM1(IBSTR1(IBCNT),IBSTR,8,78) D SET(IBSTR)
"RTN","IBCNESI2",45,0)
 . S IBSTR1=$G(^TMP($J,"IBCNESI2",IBRIEN,"INS",IBEIEN,"ADDRESS 1")) I IBSTR1'="" S IBSTR=$$SETSTR^VALM1(IBSTR1,IBSTR,8,78) D SET(IBSTR)
"RTN","IBCNESI2",46,0)
 . S IBSTR1=$G(^TMP($J,"IBCNESI2",IBRIEN,"INS",IBEIEN,"ADDRESS 2")) I IBSTR1'="" S IBSTR=$$SETSTR^VALM1(IBSTR1,IBSTR,8,78) D SET(IBSTR)
"RTN","IBCNESI2",47,0)
 . S IBSTR=$G(^TMP($J,"IBCNESI2",IBRIEN,"INS",IBEIEN,"CITY")) I $L(IBSTR) S IBSTR1=IBSTR_", "
"RTN","IBCNESI2",48,0)
 . S IBSTR=$G(^TMP($J,"IBCNESI2",IBRIEN,"INS",IBEIEN,"STATE")) I $L(IBSTR) S IBSTR1=IBSTR1_IBSTR_" "
"RTN","IBCNESI2",49,0)
 . S IBSTR=$G(^TMP($J,"IBCNESI2",IBRIEN,"INS",IBEIEN,"ZIP")) I $L(IBSTR) S IBSTR1=IBSTR1_IBSTR,IBSTR=""
"RTN","IBCNESI2",50,0)
 . S IBSTR=$$SETSTR^VALM1(IBSTR1,IBSTR,8,78) D SET(IBSTR)
"RTN","IBCNESI2",51,0)
 . F IBURTE="TE","UR" D
"RTN","IBCNESI2",52,0)
 .. S IBSEQ=0
"RTN","IBCNESI2",53,0)
 .. S IBSEQ=$O(^TMP($J,"IBCNESI2",IBRIEN,"INS",IBEIEN,IBURTE,IBSEQ)) Q:'IBSEQ  D
"RTN","IBCNESI2",54,0)
 ... K ^UTILITY($J,"W")
"RTN","IBCNESI2",55,0)
 ... K IBSTR1 S IBSTR1=$S(IBURTE="TE":"Phone: ",1:"Website: ")_^TMP($J,"IBCNESI2",IBRIEN,"INS",IBEIEN,IBURTE,IBSEQ) D WRAP(.IBSTR1,70)
"RTN","IBCNESI2",56,0)
 ... F IBCNT=1:1:$O(IBSTR1(""),-1) S IBSTR=$$SETSTR^VALM1(IBSTR1(IBCNT),IBSTR,8,78) D SET(IBSTR)
"RTN","IBCNESI2",57,0)
 . S IBSTR=" " D SET(IBSTR)
"RTN","IBCNESI2",58,0)
 S IBSTR=$$SETSTR^VALM1("Comments:",IBSTR,8,78) D SET(IBSTR)
"RTN","IBCNESI2",59,0)
 S IBSTR=" " D SET(IBSTR)
"RTN","IBCNESI2",60,0)
 I '$D(^IBCN(365.2,IBRVIEN,1)) S IBSTR=$$SETSTR^VALM1("No Comments Entered.",IBSTR,8,78) D SET(IBSTR)
"RTN","IBCNESI2",61,0)
 S (IBCNT,IBSEQ)=0
"RTN","IBCNESI2",62,0)
 S IBCMDT=""
"RTN","IBCNESI2",63,0)
 F  S IBCMDT=$O(^IBCN(365.2,IBRVIEN,1,"B",IBCMDT),-1) Q:'IBCMDT  D
"RTN","IBCNESI2",64,0)
 . N IBX
"RTN","IBCNESI2",65,0)
 . S IBCMIEN=$O(^IBCN(365.2,IBRVIEN,1,"B",IBCMDT,"")) I IBCMIEN="" Q
"RTN","IBCNESI2",66,0)
 . S IENS=IBCMIEN_","_IBRVIEN_",",IBSTR=""
"RTN","IBCNESI2",67,0)
 . S IBSTR=$$SETSTR^VALM1($$FMTE^XLFDT($$GET1^DIQ(365.21,IENS,.01),"5Z"),IBSTR,8,38)
"RTN","IBCNESI2",68,0)
 . S IBSTR=$$SETSTR^VALM1("Entered by: "_$$GET1^DIQ(365.21,IENS,.02),IBSTR,40,38)
"RTN","IBCNESI2",69,0)
 . D SET(IBSTR)
"RTN","IBCNESI2",70,0)
 . K ^UTILITY($J,"W")
"RTN","IBCNESI2",71,0)
 . F IBLN=1:1:$P($G(^IBCN(365.2,IBRVIEN,1,IBCMIEN,1,0)),U,3) D
"RTN","IBCNESI2",72,0)
 .. S X=$G(^IBCN(365.2,IBRVIEN,1,IBCMIEN,1,IBLN,0)) S DIWL=1,DIWR=70,DIWF="" D ^DIWP
"RTN","IBCNESI2",73,0)
 . I $D(^UTILITY($J,"W")) S IBLN=0 F  S IBLN=$O(^UTILITY($J,"W",1,IBLN)) Q:'IBLN  D
"RTN","IBCNESI2",74,0)
 .. S IBSTR="",IBSTR=$$SETSTR^VALM1($G(^UTILITY($J,"W",1,IBLN,0)),IBSTR,8,78)
"RTN","IBCNESI2",75,0)
 .. D SET(IBSTR)
"RTN","IBCNESI2",76,0)
 . I $O(^IBCN(365.2,IBRVIEN,1,"B",IBCMDT),-1)'="" D SET(" ")
"RTN","IBCNESI2",77,0)
 Q
"RTN","IBCNESI2",78,0)
 ;
"RTN","IBCNESI2",79,0)
SET(IBX) ; Set up Build Array
"RTN","IBCNESI2",80,0)
 S VALMCNT=VALMCNT+1
"RTN","IBCNESI2",81,0)
 D SET^VALM10(VALMCNT,IBX)
"RTN","IBCNESI2",82,0)
 Q
"RTN","IBCNESI2",83,0)
 ;
"RTN","IBCNESI2",84,0)
WRAP(STR,LEN) ; Wrap Lines
"RTN","IBCNESI2",85,0)
 N PCE,CNT,DATA
"RTN","IBCNESI2",86,0)
 S CNT=1,STR(CNT)=""
"RTN","IBCNESI2",87,0)
 F PCE=1:1:$L(STR," ") D
"RTN","IBCNESI2",88,0)
 . S DATA=$P(STR," ",PCE)
"RTN","IBCNESI2",89,0)
 . I $L(DATA)>LEN F  D  I $L(DATA)<LEN Q
"RTN","IBCNESI2",90,0)
 .. S STR(CNT)=STR(CNT)_$S($L(STR(CNT)):" ",1:"")_$E(DATA,1,LEN),CNT=CNT+1,STR(CNT)="",DATA=" "_$E(DATA,LEN+1,$L(DATA))
"RTN","IBCNESI2",91,0)
 . I $L(STR(CNT))+$S($L(STR(CNT)):1,1:0)+$L(DATA)>LEN S CNT=CNT+1,STR(CNT)=""
"RTN","IBCNESI2",92,0)
 . S STR(CNT)=STR(CNT)_$S($L(STR(CNT)):" ",1:"")_$E(DATA,1,LEN)
"RTN","IBCNESI2",93,0)
 Q
"RTN","IBCNESI2",94,0)
 ;
"RTN","IBCNESI2",95,0)
HDR ; -- header code
"RTN","IBCNESI2",96,0)
 N IBPNAM,IBRVST
"RTN","IBCNESI2",97,0)
 S IBRVST=$$GET1^DIQ(365.2,IBRVIEN_",",.02) I 
"RTN","IBCNESI2",98,0)
 S IBPNAM=$G(^TMP($J,"IBCNESI2",IBRIEN,"PATIENT NAME"))
"RTN","IBCNESI2",99,0)
 S (VALMHDR(1),VALMHDR(2))=""
"RTN","IBCNESI2",100,0)
 S VALMHDR(2)=$$SETSTR^VALM1("Patient: "_IBPNAM,VALMHDR(2),1,(75-$L(IBRVST)))
"RTN","IBCNESI2",101,0)
 S VALMHDR(2)=$$SETSTR^VALM1(IBRVST,VALMHDR(2),(78-$L(IBRVST)),80)
"RTN","IBCNESI2",102,0)
 S VALM("TITLE")="Medicare Potential COB List",VALMSG="*Exact Match"
"RTN","IBCNESI2",103,0)
 Q
"RTN","IBCNESI2",104,0)
 ;
"RTN","IBCNESI2",105,0)
HELP ; -- help code
"RTN","IBCNESI2",106,0)
 D FULL^VALM1
"RTN","IBCNESI2",107,0)
 S VALMBCK="R"
"RTN","IBCNESI2",108,0)
 W @IOF
"RTN","IBCNESI2",109,0)
 W !,"The CODE, if populated, indicates if the insurance is primary, secondary",!,"or tertiary."
"RTN","IBCNESI2",110,0)
 D PAUSE^VALM1
"RTN","IBCNESI2",111,0)
 Q
"RTN","IBCNESI2",112,0)
 ;
"RTN","IBCNESI2",113,0)
EXIT ; -- exit code
"RTN","IBCNESI2",114,0)
 K ^TMP("IBCNCE",$J)
"RTN","IBCNESI2",115,0)
 D CLEAN^VALM10
"RTN","IBCNESI2",116,0)
 Q
"RTN","IBCNESI2",117,0)
 ;
"RTN","IBCNESI2",118,0)
EXPND ; -- expand code
"RTN","IBCNESI2",119,0)
 Q
"RTN","IBCNESI2",120,0)
 ;
"RTN","IBCNESI2",121,0)
CMNT ; Enter Comments
"RTN","IBCNESI2",122,0)
 N DA,DD,DIC,DIK,DLAYGO,X,Y
"RTN","IBCNESI2",123,0)
 W !
"RTN","IBCNESI2",124,0)
 ; make sure this entry is not locked already
"RTN","IBCNESI2",125,0)
 L +^IBCN(365.2,IBRVIEN):3 I '$T W !,*7,"Sorry, another user currently editing this entry." D PAUSE^VALM1 G CMNTQ
"RTN","IBCNESI2",126,0)
 S DA(1)=IBRVIEN
"RTN","IBCNESI2",127,0)
 K DO S DIC="^IBCN(365.2,"_DA(1)_",1,",DIC(0)="L",DIC("DR")="1",X=$$NOW^XLFDT,DLAYGO=365.21
"RTN","IBCNESI2",128,0)
 D FILE^DICN
"RTN","IBCNESI2",129,0)
 S DA=+Y I DA>0 D
"RTN","IBCNESI2",130,0)
 . ;Make sure a comment or followup date was created.  Otherwise delete the entry.
"RTN","IBCNESI2",131,0)
 . I '$D(^IBCN(365.2,DA(1),1,DA,1)) S DIK=DIC D ^DIK Q
"RTN","IBCNESI2",132,0)
 . ;There is a comment or follow up date so ask status prompt
"RTN","IBCNESI2",133,0)
 . K DIC
"RTN","IBCNESI2",134,0)
 . D STATUS1
"RTN","IBCNESI2",135,0)
 L -^IBCN(365.2,IBRVIEN)
"RTN","IBCNESI2",136,0)
CMNTQ ;
"RTN","IBCNESI2",137,0)
 S VALMBCK="R"
"RTN","IBCNESI2",138,0)
 D BLD
"RTN","IBCNESI2",139,0)
 Q
"RTN","IBCNESI2",140,0)
 ;
"RTN","IBCNESI2",141,0)
STATUS ; change review status
"RTN","IBCNESI2",142,0)
 L +^IBCN(365.2,IBRVIEN):3 I '$T W !,*7,"Sorry, another user currently editing this entry." D PAUSE^VALM1 G STATUSX
"RTN","IBCNESI2",143,0)
 D STATUS1
"RTN","IBCNESI2",144,0)
STATUSX ;
"RTN","IBCNESI2",145,0)
 ;update list manager display
"RTN","IBCNESI2",146,0)
 L -^IBCN(365.2,IBRVIEN)
"RTN","IBCNESI2",147,0)
 D HDR,BLD
"RTN","IBCNESI2",148,0)
 S VALMBCK="R"
"RTN","IBCNESI2",149,0)
 Q
"RTN","IBCNESI2",150,0)
 ;
"RTN","IBCNESI2",151,0)
STATUS1 ; Entry point from comments section
"RTN","IBCNESI2",152,0)
 N IBSTAT,IBTEXT,DR,DTOUT,DUOUT,DTSS,DFNSS
"RTN","IBCNESI2",153,0)
 ; make sure this entry is not locked already
"RTN","IBCNESI2",154,0)
 ; Prompt for status change
"RTN","IBCNESI2",155,0)
 W !
"RTN","IBCNESI2",156,0)
 S DIR(0)="365.2,.02",DIR("B")="In Process"
"RTN","IBCNESI2",157,0)
 D ^DIR K DIR
"RTN","IBCNESI2",158,0)
 I $D(DTOUT)!$D(DUOUT) G STATUS1X
"RTN","IBCNESI2",159,0)
 M IBSTAT=Y
"RTN","IBCNESI2",160,0)
 I IBSTAT=2 D
"RTN","IBCNESI2",161,0)
 . W !
"RTN","IBCNESI2",162,0)
 . S DIR(0)="Y",DIR("A")="Marking the review complete will remove the entry from the list. Are you sure?",DIR("B")="NO"
"RTN","IBCNESI2",163,0)
 . D ^DIR K DIR
"RTN","IBCNESI2",164,0)
 . I $D(DTOUT)!$D(DUOUT)!'Y S IBSTAT="" Q
"RTN","IBCNESI2",165,0)
 . ; Enter comment for removal from worklist
"RTN","IBCNESI2",166,0)
 . S IBTEXT(1)="Review completed and entry removed from worklist."
"RTN","IBCNESI2",167,0)
 . S DA(1)=IBRVIEN
"RTN","IBCNESI2",168,0)
 . K DO S DIC="^IBCN(365.2,"_DA(1)_",1,",DIC(0)="",X=$$NOW^XLFDT,DLAYGO=365.21
"RTN","IBCNESI2",169,0)
 . D FILE^DICN
"RTN","IBCNESI2",170,0)
 . S DA=+Y I DA'>0 Q
"RTN","IBCNESI2",171,0)
 . D WP^DIE(365.21,DA_","_DA(1)_",",1,,"IBTEXT")
"RTN","IBCNESI2",172,0)
 . K DIC
"RTN","IBCNESI2",173,0)
 I IBSTAT'="" S DIE=365.2,DA=IBRVIEN,DR=".02///"_IBSTAT(0) D ^DIE,CLEAN^DILF S IBRVST=IBSTAT(0) K DIE
"RTN","IBCNESI2",174,0)
 ; need to update the REV STATUS node of the temporary global array
"RTN","IBCNESI2",175,0)
 S DTSS=$P(^TMP($J,"IBCNESI2",IBRIEN,"REV STATUS"),U,2),DFNSS=$P(^TMP($J,"IBCNESI2",IBRIEN,"REV STATUS"),U,3)
"RTN","IBCNESI2",176,0)
 S $P(^TMP($J,"IBCNESI1",DTSS,DFNSS,IBRIEN,"REV STATUS"),U)=IBSTAT  ; update with internal representation of review status
"RTN","IBCNESI2",177,0)
STATUS1X ;
"RTN","IBCNESI2",178,0)
 Q
"RTN","IBCNESI2",179,0)
 ;
"RTN","IBCNEUT1")
0^23^B35326232^B33603643
"RTN","IBCNEUT1",1,0)
IBCNEUT1 ;DAOU/ESG - IIV MISC. UTILITIES ;03-JUN-2002
"RTN","IBCNEUT1",2,0)
 ;;2.0;INTEGRATED BILLING;**184,497**;21-MAR-94;Build 120
"RTN","IBCNEUT1",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNEUT1",4,0)
 ;
"RTN","IBCNEUT1",5,0)
 ; Can't be called from the top
"RTN","IBCNEUT1",6,0)
 Q
"RTN","IBCNEUT1",7,0)
 ;
"RTN","IBCNEUT1",8,0)
FO(VALUE,LENGTH,JUSTIFY,FILL,TRUNC) ; Formatted output function
"RTN","IBCNEUT1",9,0)
 ;
"RTN","IBCNEUT1",10,0)
 ; Input parameters:
"RTN","IBCNEUT1",11,0)
 ;   VALUE    the data to get formatted (required)
"RTN","IBCNEUT1",12,0)
 ;   LENGTH   the resulting length of the formatted string (required)
"RTN","IBCNEUT1",13,0)
 ;   JUSTIFY  "L" or "R" to indicate left or right justification
"RTN","IBCNEUT1",14,0)
 ;               Default is "L" if not passed
"RTN","IBCNEUT1",15,0)
 ;   FILL     the character to fill in the spaces
"RTN","IBCNEUT1",16,0)
 ;               Default is a space if not passed
"RTN","IBCNEUT1",17,0)
 ;   TRUNC    Whether or not to truncate Value if its longer than length
"RTN","IBCNEUT1",18,0)
 ;               Default is Yes, to truncate if not passed
"RTN","IBCNEUT1",19,0)
 ;
"RTN","IBCNEUT1",20,0)
 NEW PAD,Z
"RTN","IBCNEUT1",21,0)
 I LENGTH>245 S LENGTH=245
"RTN","IBCNEUT1",22,0)
 S JUSTIFY=$G(JUSTIFY,"L")               ; default Left
"RTN","IBCNEUT1",23,0)
 S FILL=$E($G(FILL)_" ")                 ; default space
"RTN","IBCNEUT1",24,0)
 S TRUNC=$G(TRUNC,1)                     ; default true
"RTN","IBCNEUT1",25,0)
 S $P(PAD,FILL,LENGTH-$L(VALUE)+1)=""
"RTN","IBCNEUT1",26,0)
 S Z=""
"RTN","IBCNEUT1",27,0)
 ;
"RTN","IBCNEUT1",28,0)
 ; Check for JUSTIFY being "R" first
"RTN","IBCNEUT1",29,0)
 I JUSTIFY["R" D  G FOXIT
"RTN","IBCNEUT1",30,0)
 . I $L(VALUE)'>LENGTH S Z=PAD_VALUE Q
"RTN","IBCNEUT1",31,0)
 . I 'TRUNC S Z=VALUE Q
"RTN","IBCNEUT1",32,0)
 . S Z=$E(VALUE,$L(VALUE)-LENGTH+1,$L(VALUE)) Q
"RTN","IBCNEUT1",33,0)
 . Q
"RTN","IBCNEUT1",34,0)
 ;
"RTN","IBCNEUT1",35,0)
 ; JUSTIFY is "L" below
"RTN","IBCNEUT1",36,0)
 I $L(VALUE)'>LENGTH S Z=$E(VALUE_PAD,1,LENGTH) G FOXIT
"RTN","IBCNEUT1",37,0)
 I 'TRUNC S Z=VALUE G FOXIT
"RTN","IBCNEUT1",38,0)
 S Z=$E(VALUE,1,LENGTH)
"RTN","IBCNEUT1",39,0)
 ;
"RTN","IBCNEUT1",40,0)
FOXIT ;
"RTN","IBCNEUT1",41,0)
 Q Z
"RTN","IBCNEUT1",42,0)
 ;
"RTN","IBCNEUT1",43,0)
 ;
"RTN","IBCNEUT1",44,0)
AMLOOK(NAME,ERRFLG,LIST) ; Look-up an ins. co. name in Auto Match
"RTN","IBCNEUT1",45,0)
 ;
"RTN","IBCNEUT1",46,0)
 ; Input parameters
"RTN","IBCNEUT1",47,0)
 ;   NAME       Insurance company name to look for (required)
"RTN","IBCNEUT1",48,0)
 ;   ERRFLG     Error flag to determine whether or not to return
"RTN","IBCNEUT1",49,0)
 ;                an array of all hits (optional)
"RTN","IBCNEUT1",50,0)
 ;   LIST       The array to be built - passed by reference
"RTN","IBCNEUT1",51,0)
 ;                (optional)
"RTN","IBCNEUT1",52,0)
 ;                LIST(ins co name)=auto match value
"RTN","IBCNEUT1",53,0)
 ;
"RTN","IBCNEUT1",54,0)
 ; Output
"RTN","IBCNEUT1",55,0)
 ;   The value of this function is either 0 or 1.
"RTN","IBCNEUT1",56,0)
 ;     0 - no matches in the Auto Match file for this name
"RTN","IBCNEUT1",57,0)
 ;     1 - at least one match was found in the Auto Match file
"RTN","IBCNEUT1",58,0)
 ;
"RTN","IBCNEUT1",59,0)
 NEW FOUND,AMIEN,INSNAME,AMV,AMVSTART,NOMATCH
"RTN","IBCNEUT1",60,0)
 S FOUND=0                         ; default to not found
"RTN","IBCNEUT1",61,0)
 KILL LIST                         ; initialize results array
"RTN","IBCNEUT1",62,0)
 S ERRFLG=+$G(ERRFLG)              ; ERRFLG default is 0 if not present
"RTN","IBCNEUT1",63,0)
 S NAME=$$TRIM^XLFSTR($G(NAME))    ; strip leading/trailing spaces
"RTN","IBCNEUT1",64,0)
 I NAME="" G AMLOOKX               ; get out if NAME not present
"RTN","IBCNEUT1",65,0)
 ;
"RTN","IBCNEUT1",66,0)
 ; First look for direct hits in the Auto Match file
"RTN","IBCNEUT1",67,0)
 S AMIEN=$O(^IBCN(365.11,"B",NAME,""))
"RTN","IBCNEUT1",68,0)
 I AMIEN D
"RTN","IBCNEUT1",69,0)
 . S FOUND=1
"RTN","IBCNEUT1",70,0)
 . I 'ERRFLG Q
"RTN","IBCNEUT1",71,0)
 . S INSNAME=$P($G(^IBCN(365.11,AMIEN,0)),U,2)
"RTN","IBCNEUT1",72,0)
 . I INSNAME'="" S LIST(INSNAME)=NAME
"RTN","IBCNEUT1",73,0)
 . Q
"RTN","IBCNEUT1",74,0)
 ;
"RTN","IBCNEUT1",75,0)
 ; If we found one and we're not building the array, then exit
"RTN","IBCNEUT1",76,0)
 I FOUND,'ERRFLG G AMLOOKX
"RTN","IBCNEUT1",77,0)
 ;
"RTN","IBCNEUT1",78,0)
 ; Use the first character of the NAME as a seed value to start
"RTN","IBCNEUT1",79,0)
 ; looping through the Auto Match entries.  Only need to look at
"RTN","IBCNEUT1",80,0)
 ; entries with the "*" wildcard character.
"RTN","IBCNEUT1",81,0)
 S AMV=$E(NAME)
"RTN","IBCNEUT1",82,0)
 F  S AMV=$O(^IBCN(365.11,"B",AMV)) Q:$E(AMV)'=$E(NAME)  D  I FOUND,'ERRFLG Q
"RTN","IBCNEUT1",83,0)
 . I AMV'["*" Q    ; only looking for wildcarded entries
"RTN","IBCNEUT1",84,0)
 . ;
"RTN","IBCNEUT1",85,0)
 . ; Ensure that the first part of NAME is the same as the first
"RTN","IBCNEUT1",86,0)
 . ; part of the Auto Match value.
"RTN","IBCNEUT1",87,0)
 . S AMVSTART=$P(AMV,"*",1)
"RTN","IBCNEUT1",88,0)
 . I AMVSTART'="",$E(NAME,1,$L(AMVSTART))'=AMVSTART Q
"RTN","IBCNEUT1",89,0)
 . ;
"RTN","IBCNEUT1",90,0)
 . ; Build the NOMATCH variable and check it
"RTN","IBCNEUT1",91,0)
 . D AMC("NAME",AMV,.NOMATCH,0)
"RTN","IBCNEUT1",92,0)
 . I @NOMATCH Q
"RTN","IBCNEUT1",93,0)
 . ;
"RTN","IBCNEUT1",94,0)
 . ; We've got a match so process this accordingly
"RTN","IBCNEUT1",95,0)
 . S FOUND=1
"RTN","IBCNEUT1",96,0)
 . I 'ERRFLG Q
"RTN","IBCNEUT1",97,0)
 . S AMIEN=$O(^IBCN(365.11,"B",AMV,""))
"RTN","IBCNEUT1",98,0)
 . S INSNAME=$P($G(^IBCN(365.11,+AMIEN,0)),U,2)
"RTN","IBCNEUT1",99,0)
 . I INSNAME'="" S LIST(INSNAME)=AMV
"RTN","IBCNEUT1",100,0)
 . Q
"RTN","IBCNEUT1",101,0)
 ;
"RTN","IBCNEUT1",102,0)
 ; If we found one and we're not building the array, then exit
"RTN","IBCNEUT1",103,0)
 I FOUND,'ERRFLG G AMLOOKX
"RTN","IBCNEUT1",104,0)
 ;
"RTN","IBCNEUT1",105,0)
 ; Now we need to look at the Auto Match entries which start with
"RTN","IBCNEUT1",106,0)
 ; the "*" wildcard character.
"RTN","IBCNEUT1",107,0)
 S AMV="*"
"RTN","IBCNEUT1",108,0)
 F  S AMV=$O(^IBCN(365.11,"B",AMV)) Q:$E(AMV)'="*"  D  I FOUND,'ERRFLG Q
"RTN","IBCNEUT1",109,0)
 . D AMC("NAME",AMV,.NOMATCH,0)    ; build the NOMATCH variable
"RTN","IBCNEUT1",110,0)
 . I @NOMATCH Q                    ; check it
"RTN","IBCNEUT1",111,0)
 . S FOUND=1                       ; We've got a match
"RTN","IBCNEUT1",112,0)
 . I 'ERRFLG Q
"RTN","IBCNEUT1",113,0)
 . S AMIEN=$O(^IBCN(365.11,"B",AMV,""))
"RTN","IBCNEUT1",114,0)
 . S INSNAME=$P($G(^IBCN(365.11,+AMIEN,0)),U,2)
"RTN","IBCNEUT1",115,0)
 . I INSNAME'="" S LIST(INSNAME)=AMV
"RTN","IBCNEUT1",116,0)
 . Q
"RTN","IBCNEUT1",117,0)
 ;
"RTN","IBCNEUT1",118,0)
AMLOOKX ;
"RTN","IBCNEUT1",119,0)
 Q FOUND
"RTN","IBCNEUT1",120,0)
 ;
"RTN","IBCNEUT1",121,0)
 ;
"RTN","IBCNEUT1",122,0)
AMC(NAME,AMV,MATCH,FLAG) ; Auto Match check function
"RTN","IBCNEUT1",123,0)
 ;
"RTN","IBCNEUT1",124,0)
 ; NAME   - literal variable name to be matched; enclosed in quotes
"RTN","IBCNEUT1",125,0)
 ; AMV    - Auto Match Value to be pattern matched
"RTN","IBCNEUT1",126,0)
 ; MATCH  - Variable passed by reference; returns condition check command
"RTN","IBCNEUT1",127,0)
 ; FLAG   - if 1, then pattern match check is positive (default)
"RTN","IBCNEUT1",128,0)
 ;        - if 0, then pattern match check is negative
"RTN","IBCNEUT1",129,0)
 ;
"RTN","IBCNEUT1",130,0)
 NEW NUMPCE,J,PCE,PCE1
"RTN","IBCNEUT1",131,0)
 S FLAG=$G(FLAG,1)
"RTN","IBCNEUT1",132,0)
 S MATCH=NAME_$S('FLAG:"'?",1:"?")
"RTN","IBCNEUT1",133,0)
 S NUMPCE=$L(AMV,"*")
"RTN","IBCNEUT1",134,0)
 F J=1:1:NUMPCE D
"RTN","IBCNEUT1",135,0)
 . S PCE=$P(AMV,"*",J),PCE1=""
"RTN","IBCNEUT1",136,0)
 . I PCE'="" S PCE1="1"""_PCE_""""
"RTN","IBCNEUT1",137,0)
 . S MATCH=MATCH_PCE1
"RTN","IBCNEUT1",138,0)
 . I J'=NUMPCE S MATCH=MATCH_".E"
"RTN","IBCNEUT1",139,0)
 . Q
"RTN","IBCNEUT1",140,0)
AMCX ;
"RTN","IBCNEUT1",141,0)
 Q
"RTN","IBCNEUT1",142,0)
 ;
"RTN","IBCNEUT1",143,0)
 ;
"RTN","IBCNEUT1",144,0)
AMSEL(AMARRAY) ; Select an insurance company name from an Auto Match hit list
"RTN","IBCNEUT1",145,0)
 ;
"RTN","IBCNEUT1",146,0)
 ; Input
"RTN","IBCNEUT1",147,0)
 ;   Array of Auto Match hits.  The structure of this array is the
"RTN","IBCNEUT1",148,0)
 ;   same as that returned by the call to $$AMLOOK above.
"RTN","IBCNEUT1",149,0)
 ;   AMARRAY(ins co name) = Auto Match value
"RTN","IBCNEUT1",150,0)
 ;
"RTN","IBCNEUT1",151,0)
 ; Output
"RTN","IBCNEUT1",152,0)
 ;   Insurance Company name (subscript of input array), or
"RTN","IBCNEUT1",153,0)
 ;   -1 if user entered "^" or timed out, or
"RTN","IBCNEUT1",154,0)
 ;   0 if user didn't select any of these names
"RTN","IBCNEUT1",155,0)
 ;   No changes are made to the array.
"RTN","IBCNEUT1",156,0)
 ;
"RTN","IBCNEUT1",157,0)
 NEW SEL,NM,CNT,MSG,MSGNUM,CH,TXT
"RTN","IBCNEUT1",158,0)
 NEW DIR,X,Y,DIRUT,DTOUT,DUOUT,DIROUT
"RTN","IBCNEUT1",159,0)
 S SEL=0
"RTN","IBCNEUT1",160,0)
 I '$D(AMARRAY) G AMSELX    ; Get out if array not passed in
"RTN","IBCNEUT1",161,0)
 ;
"RTN","IBCNEUT1",162,0)
 ; Display the contents of the array
"RTN","IBCNEUT1",163,0)
 S MSG(1)="Results of Auto Match search"
"RTN","IBCNEUT1",164,0)
 S MSG(2)=""
"RTN","IBCNEUT1",165,0)
 S MSG(3)="  "_$$FO("Insurance Company Name",30)_"   Auto Match Value"
"RTN","IBCNEUT1",166,0)
 S MSG(4)="  "_$$FO("----------------------",30)_"   ----------------"
"RTN","IBCNEUT1",167,0)
 S MSG(1,"F")="!!"
"RTN","IBCNEUT1",168,0)
 S NM="",MSGNUM=$O(MSG(""),-1),CNT=0,CH=""
"RTN","IBCNEUT1",169,0)
 F  S NM=$O(AMARRAY(NM)) Q:NM=""  D
"RTN","IBCNEUT1",170,0)
 . S CNT=CNT+1
"RTN","IBCNEUT1",171,0)
 . S TXT=$$FO(NM,30)_"   "_AMARRAY(NM)
"RTN","IBCNEUT1",172,0)
 . S MSGNUM=MSGNUM+1
"RTN","IBCNEUT1",173,0)
 . S MSG(MSGNUM)="  "_TXT
"RTN","IBCNEUT1",174,0)
 . I $L(CH)>440 Q
"RTN","IBCNEUT1",175,0)
 . I CH="" S CH=CNT_":"_TXT       ; building the set of codes string
"RTN","IBCNEUT1",176,0)
 . E  S CH=CH_";"_CNT_":"_TXT     ; for the DIR reader later on
"RTN","IBCNEUT1",177,0)
 . Q
"RTN","IBCNEUT1",178,0)
 ;
"RTN","IBCNEUT1",179,0)
 ; Get out if there are no entries in the list
"RTN","IBCNEUT1",180,0)
 I 'CNT G AMSELX
"RTN","IBCNEUT1",181,0)
 ;
"RTN","IBCNEUT1",182,0)
 ; One more blank line in the display
"RTN","IBCNEUT1",183,0)
 S MSGNUM=MSGNUM+1
"RTN","IBCNEUT1",184,0)
 S MSG(MSGNUM)=""
"RTN","IBCNEUT1",185,0)
 ;
"RTN","IBCNEUT1",186,0)
 ; Display the entries in the list
"RTN","IBCNEUT1",187,0)
 DO EN^DDIOL(.MSG)
"RTN","IBCNEUT1",188,0)
 ;
"RTN","IBCNEUT1",189,0)
 ; Ask the first question
"RTN","IBCNEUT1",190,0)
 S DIR(0)="YO"
"RTN","IBCNEUT1",191,0)
 S DIR("A")="Would you like to select this insurance company"
"RTN","IBCNEUT1",192,0)
 I CNT>1 S DIR("A")="Would you like to select one of these insurance companies"
"RTN","IBCNEUT1",193,0)
 S DIR("B")="Yes"
"RTN","IBCNEUT1",194,0)
 D ^DIR K DIR
"RTN","IBCNEUT1",195,0)
 I $D(DIRUT) S SEL=-1 G AMSELX
"RTN","IBCNEUT1",196,0)
 I 'Y S SEL=0 G AMSELX
"RTN","IBCNEUT1",197,0)
 ;
"RTN","IBCNEUT1",198,0)
 ; User said Yes to the above question
"RTN","IBCNEUT1",199,0)
 ; Get out if there is only one entry in the array
"RTN","IBCNEUT1",200,0)
 I CNT=1 S SEL=$O(AMARRAY("")) G AMSELX
"RTN","IBCNEUT1",201,0)
 ;
"RTN","IBCNEUT1",202,0)
 ; At this point we know there are multiple entries in the list
"RTN","IBCNEUT1",203,0)
 S DIR(0)="SO^"_CH
"RTN","IBCNEUT1",204,0)
 S DIR("A")="Please choose an insurance company"
"RTN","IBCNEUT1",205,0)
 D ^DIR K DIR
"RTN","IBCNEUT1",206,0)
 I $D(DIRUT) S SEL=-1 G AMSELX
"RTN","IBCNEUT1",207,0)
 I 'Y S SEL=0 G AMSELX
"RTN","IBCNEUT1",208,0)
 S SEL=$$TRIM^XLFSTR($E(Y(0),1,30),"R")    ; strip trailing spaces
"RTN","IBCNEUT1",209,0)
AMSELX ;
"RTN","IBCNEUT1",210,0)
 Q SEL
"RTN","IBCNEUT1",211,0)
 ;
"RTN","IBCNEUT1",212,0)
LENCHK(VAL,MAX,NUMFLG) ; check value length, called from input transforms on eIV fields
"RTN","IBCNEUT1",213,0)
 ; VAL - value to check
"RTN","IBCNEUT1",214,0)
 ; MAX - max. allowed length for free text field, or max. value for numeric field
"RTN","IBCNEUT1",215,0)
 ; NUMFLG - 1 if field is numeric, 0 if free text
"RTN","IBCNEUT1",216,0)
 ;
"RTN","IBCNEUT1",217,0)
 ; returns 1 if length is acceptable, 0 otherwise
"RTN","IBCNEUT1",218,0)
 N RES
"RTN","IBCNEUT1",219,0)
 S RES=1
"RTN","IBCNEUT1",220,0)
 ; check IB site parameter
"RTN","IBCNEUT1",221,0)
 I '+$P($G(^IBE(350.9,1,62)),U) G LENCHKX
"RTN","IBCNEUT1",222,0)
 I $S(NUMFLG:VAL,1:$L(VAL))>MAX S RES=0
"RTN","IBCNEUT1",223,0)
LENCHKX ;
"RTN","IBCNEUT1",224,0)
 Q RES
"RTN","IBCNEUT4")
0^47^B50266196^B50167663
"RTN","IBCNEUT4",1,0)
IBCNEUT4 ;DAOU/ESG - eIV MISC. UTILITIES ;17-JUN-2002
"RTN","IBCNEUT4",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,345,416,497**;21-MAR-94;Build 120
"RTN","IBCNEUT4",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEUT4",4,0)
 ;
"RTN","IBCNEUT4",5,0)
 ; Can't be called from the top
"RTN","IBCNEUT4",6,0)
 Q
"RTN","IBCNEUT4",7,0)
 ;
"RTN","IBCNEUT4",8,0)
 ;
"RTN","IBCNEUT4",9,0)
ACTIVE(INSDA) ; Is this insurance company currently active?  1:yes or 0:no
"RTN","IBCNEUT4",10,0)
 ; Insurance company name returned in the second piece.
"RTN","IBCNEUT4",11,0)
 ; Input:  INSDA - insurance company ien
"RTN","IBCNEUT4",12,0)
 NEW ACTFLG,INSDATA
"RTN","IBCNEUT4",13,0)
 S ACTFLG=0                                  ; default inactive
"RTN","IBCNEUT4",14,0)
 I '$G(INSDA) G ACTIVEX                      ; bad data passed in
"RTN","IBCNEUT4",15,0)
 S INSDATA=$G(^DIC(36,INSDA,0))              ; zero node of File 36
"RTN","IBCNEUT4",16,0)
 I INSDATA="" G ACTIVEX                      ; bad record
"RTN","IBCNEUT4",17,0)
 I $P(INSDATA,U,5) G ACTIVEX                 ; INACTIVE flag is true
"RTN","IBCNEUT4",18,0)
 I $P($G(^DIC(36,INSDA,5)),U,1) G ACTIVEX    ; SCHEDULED FOR DELETION flag is true
"RTN","IBCNEUT4",19,0)
 S ACTFLG=1                                  ; Otherwise, its active
"RTN","IBCNEUT4",20,0)
ACTIVEX ;
"RTN","IBCNEUT4",21,0)
 Q ACTFLG_U_$P($G(^DIC(36,+$G(INSDA),0)),U,1)
"RTN","IBCNEUT4",22,0)
 ;
"RTN","IBCNEUT4",23,0)
 ;
"RTN","IBCNEUT4",24,0)
EXCLUDE(NAME) ; This function determines if we should exclude the insurance
"RTN","IBCNEUT4",25,0)
 ; company based on the name.
"RTN","IBCNEUT4",26,0)
 ; This function returns 1 if we should exclude the insurance company.
"RTN","IBCNEUT4",27,0)
 ; This function returns 0 if we should not exclude it (i.e. include it)
"RTN","IBCNEUT4",28,0)
 ;
"RTN","IBCNEUT4",29,0)
 ; Initialize flag; default to not exclude it
"RTN","IBCNEUT4",30,0)
 NEW EXCL
"RTN","IBCNEUT4",31,0)
 S EXCL=0
"RTN","IBCNEUT4",32,0)
 ;
"RTN","IBCNEUT4",33,0)
 ; Screen out bad data
"RTN","IBCNEUT4",34,0)
 I $G(NAME)="" S EXCL=1 G EXCLUDX
"RTN","IBCNEUT4",35,0)
 ;
"RTN","IBCNEUT4",36,0)
 ; Screen out MEDICAID ins co
"RTN","IBCNEUT4",37,0)
 I NAME["MEDICAID" S EXCL=1
"RTN","IBCNEUT4",38,0)
EXCLUDX ;
"RTN","IBCNEUT4",39,0)
 Q EXCL
"RTN","IBCNEUT4",40,0)
 ;
"RTN","IBCNEUT4",41,0)
 ;
"RTN","IBCNEUT4",42,0)
CLEAR(DA,EDITED,FORCE) ; This procedure will clear the eIV status field from an
"RTN","IBCNEUT4",43,0)
 ; Insurance Buffer entry (pass in the internal entry number of the
"RTN","IBCNEUT4",44,0)
 ; buffer entry).  If the FORCE variable is not passed then the eIV
"RTN","IBCNEUT4",45,0)
 ; status will only be cleared if the existing status is an error status
"RTN","IBCNEUT4",46,0)
 ;
"RTN","IBCNEUT4",47,0)
 ; Parameters
"RTN","IBCNEUT4",48,0)
 ;        DA - required input parameter; buffer ien
"RTN","IBCNEUT4",49,0)
 ;    EDITED - optional output parameter; this will tell you if the
"RTN","IBCNEUT4",50,0)
 ;             buffer symbol was cleared
"RTN","IBCNEUT4",51,0)
 ;     FORCE - optional input parameter; if this is set to 1 then the
"RTN","IBCNEUT4",52,0)
 ;             eIV status field will be cleared regardless of the
"RTN","IBCNEUT4",53,0)
 ;             current status 
"RTN","IBCNEUT4",54,0)
 NEW DIE,DR,D,D0,DI,DIC,DISYS,DQ,X,%
"RTN","IBCNEUT4",55,0)
 I '$G(DA) G CLEARX
"RTN","IBCNEUT4",56,0)
 I '$D(FORCE) S FORCE=0
"RTN","IBCNEUT4",57,0)
 I 'FORCE,$$SYMBOL^IBCNBLL(DA)'="!" G CLEARX
"RTN","IBCNEUT4",58,0)
 S DIE=355.33,DR=".12///@"
"RTN","IBCNEUT4",59,0)
 D ^DIE
"RTN","IBCNEUT4",60,0)
 S EDITED=1
"RTN","IBCNEUT4",61,0)
CLEARX ;
"RTN","IBCNEUT4",62,0)
 Q
"RTN","IBCNEUT4",63,0)
 ;
"RTN","IBCNEUT4",64,0)
 ;
"RTN","IBCNEUT4",65,0)
INFO(IBBUFDA) ; Return original and current buffer data
"RTN","IBCNEUT4",66,0)
 ; This procedure will retrieve the following data from the buffer and
"RTN","IBCNEUT4",67,0)
 ; from the transmission queue file.  The buffer holds the current data
"RTN","IBCNEUT4",68,0)
 ; and the TQ file holds the original buffer data.
"RTN","IBCNEUT4",69,0)
 ; Input
"RTN","IBCNEUT4",70,0)
 ;    IBBUFDA - buffer internal entry number
"RTN","IBCNEUT4",71,0)
 ; Output
"RTN","IBCNEUT4",72,0)
 ;    a pieced string as follows
"RTN","IBCNEUT4",73,0)
 ;    [1]  Has this buffer entry been transmitted? 1/0
"RTN","IBCNEUT4",74,0)
 ;    [2]  Current buffer source of information (external)
"RTN","IBCNEUT4",75,0)
 ;    [3]  Current buffer source of information (internal)
"RTN","IBCNEUT4",76,0)
 ;    [4]  Current buffer insurance company name
"RTN","IBCNEUT4",77,0)
 ;    [5]  Current buffer group number
"RTN","IBCNEUT4",78,0)
 ;    [6]  Current buffer group name
"RTN","IBCNEUT4",79,0)
 ;    [7]  Current buffer subscriber ID
"RTN","IBCNEUT4",80,0)
 ;    [8]  Original buffer insurance company name
"RTN","IBCNEUT4",81,0)
 ;    [9]  Original buffer group number
"RTN","IBCNEUT4",82,0)
 ;   [10]  Original buffer group name
"RTN","IBCNEUT4",83,0)
 ;   [11]  Original buffer subscriber ID
"RTN","IBCNEUT4",84,0)
 ;
"RTN","IBCNEUT4",85,0)
 NEW IB0,IB20,IB90,DATA,RESPIEN,FOUND,TQIEN,TQDATA,TQDATA1,DISYS
"RTN","IBCNEUT4",86,0)
 S DATA=""
"RTN","IBCNEUT4",87,0)
 I '$G(IBBUFDA) G INFOX
"RTN","IBCNEUT4",88,0)
 I '$D(^IBA(355.33,IBBUFDA)) G INFOX
"RTN","IBCNEUT4",89,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0))
"RTN","IBCNEUT4",90,0)
 S IB20=$G(^IBA(355.33,IBBUFDA,20))
"RTN","IBCNEUT4",91,0)
 S IB90=$G(^IBA(355.33,IBBUFDA,90))    ; IB*2.0*497 (vd)
"RTN","IBCNEUT4",92,0)
 S $P(DATA,U,1)=0    ; default to not been transmitted
"RTN","IBCNEUT4",93,0)
 S $P(DATA,U,2)=$$EXTERNAL^DILFD(355.33,.03,"",$P(IB0,U,3))  ; source
"RTN","IBCNEUT4",94,0)
 S $P(DATA,U,3)=$P(IB0,U,3)     ; internal source
"RTN","IBCNEUT4",95,0)
 S $P(DATA,U,4)=$P(IB20,U,1)    ; insurance company name
"RTN","IBCNEUT4",96,0)
 S $P(DATA,U,5)=$P(IB90,U,2)    ; group number - IB*2.0*497 (vd)
"RTN","IBCNEUT4",97,0)
 S $P(DATA,U,6)=$P(IB90,U,1)    ; group name - IB*2.0*497 (vd)
"RTN","IBCNEUT4",98,0)
 S $P(DATA,U,7)=$P(IB90,U,3)    ; subscriber id - IB*2.0*497 (vd)
"RTN","IBCNEUT4",99,0)
 ;
"RTN","IBCNEUT4",100,0)
 ; Look at the response file and the transmission queue file.  Since
"RTN","IBCNEUT4",101,0)
 ; we're trying to get the original data look at the oldest data first.
"RTN","IBCNEUT4",102,0)
 S RESPIEN=0,FOUND=0
"RTN","IBCNEUT4",103,0)
 F  S RESPIEN=$O(^IBCN(365,"AF",IBBUFDA,RESPIEN)) Q:'RESPIEN  D  Q:FOUND
"RTN","IBCNEUT4",104,0)
 . S TQIEN=$P($G(^IBCN(365,RESPIEN,0)),U,5)
"RTN","IBCNEUT4",105,0)
 . I 'TQIEN Q
"RTN","IBCNEUT4",106,0)
 . S TQDATA=$G(^IBCN(365.1,TQIEN,0))
"RTN","IBCNEUT4",107,0)
 . S TQDATA1=$G(^IBCN(365.1,TQIEN,1))
"RTN","IBCNEUT4",108,0)
 . I TQDATA="" Q
"RTN","IBCNEUT4",109,0)
 . S $P(DATA,U,8)=$P(TQDATA1,U,2)    ; insurance company name
"RTN","IBCNEUT4",110,0)
 . S $P(DATA,U,9)=$P(TQDATA1,U,3)    ; group number
"RTN","IBCNEUT4",111,0)
 . S $P(DATA,U,10)=$P(TQDATA1,U,4)    ; group name
"RTN","IBCNEUT4",112,0)
 . S $P(DATA,U,11)=$P(TQDATA1,U,5)    ; subscriber id
"RTN","IBCNEUT4",113,0)
 . S FOUND=1                          ; Stop once we have some data
"RTN","IBCNEUT4",114,0)
 . Q
"RTN","IBCNEUT4",115,0)
 ;
"RTN","IBCNEUT4",116,0)
 I FOUND S $P(DATA,U,1)=1
"RTN","IBCNEUT4",117,0)
INFOX ;
"RTN","IBCNEUT4",118,0)
 Q DATA
"RTN","IBCNEUT4",119,0)
 ;
"RTN","IBCNEUT4",120,0)
 ;
"RTN","IBCNEUT4",121,0)
VALID(INSIEN,PAYIEN,PAYID,SYMIEN) ; Validate an Ins Co IEN
"RTN","IBCNEUT4",122,0)
 ; Input parameter: INSIEN - Ins co IEN, passed by value
"RTN","IBCNEUT4",123,0)
 ; Output parameters: PAYIEN, PAYID, SYMIEN, passed by reference
"RTN","IBCNEUT4",124,0)
 N APPDATA,APPIEN,INSNAME
"RTN","IBCNEUT4",125,0)
 ; Retrieve the Ins Co name
"RTN","IBCNEUT4",126,0)
 S INSNAME=$P($G(^DIC(36,INSIEN,0)),U,1)
"RTN","IBCNEUT4",127,0)
 I INSNAME="" S SYMIEN=$$ERROR^IBCNEUT8("B9","Insurance company IEN "_INSIEN_" doesn't have a name on file.") G VALIDX
"RTN","IBCNEUT4",128,0)
 ; Screen out MEDICAID ins co
"RTN","IBCNEUT4",129,0)
 I $$EXCLUDE(INSNAME) S SYMIEN=$$ERROR^IBCNEUT8("B11","Insurance company "_INSNAME_" contains MEDICAID in the name.  Electronic inquiries cannot be made to this insurance company.") G VALIDX
"RTN","IBCNEUT4",130,0)
 ; Retrieve the Payer IEN associated with this ins co
"RTN","IBCNEUT4",131,0)
 S PAYIEN=$P($G(^DIC(36,INSIEN,3)),U,10)
"RTN","IBCNEUT4",132,0)
 I PAYIEN="" S SYMIEN=$$ERROR^IBCNEUT8("B4","Insurance company "_INSNAME_" is not linked to a Payer.") G VALIDX
"RTN","IBCNEUT4",133,0)
 D VALPYR(INSNAME) ; Payer val'n
"RTN","IBCNEUT4",134,0)
VALIDX ;
"RTN","IBCNEUT4",135,0)
 Q
"RTN","IBCNEUT4",136,0)
 ;
"RTN","IBCNEUT4",137,0)
PAYER(PAYIEN) ;
"RTN","IBCNEUT4",138,0)
 ; Entry pt for Most Pop Payer (called by POP^IBCNEDE4)
"RTN","IBCNEUT4",139,0)
 N SYMIEN,PAYID
"RTN","IBCNEUT4",140,0)
 N APPDATA,APPIEN ; Set within tag VALPYR these variables are never
"RTN","IBCNEUT4",141,0)
 ;                  killed. Using tag VALID's method of NEWing variables
"RTN","IBCNEUT4",142,0)
 ;                  first will allow them to be killed appropriately.
"RTN","IBCNEUT4",143,0)
 N ARRAY ; This is an array that is set by ERROR^IBCNEUT8 but never
"RTN","IBCNEUT4",144,0)
 ;         killed.  When there is a most popular payer that is not
"RTN","IBCNEUT4",145,0)
 ;         eligible for inquiries, ARRAY would continue to grow.
"RTN","IBCNEUT4",146,0)
 S (SYMIEN,PAYID)=""
"RTN","IBCNEUT4",147,0)
 D VALPYR("")
"RTN","IBCNEUT4",148,0)
 Q SYMIEN_U_PAYID
"RTN","IBCNEUT4",149,0)
 ;
"RTN","IBCNEUT4",150,0)
VALPYR(INSNM) ;
"RTN","IBCNEUT4",151,0)
 ; Payer Val'n - note: PAYIEN (payer IEN) must be set
"RTN","IBCNEUT4",152,0)
 ; If INSNM="" val'n is for Most Pop Payer
"RTN","IBCNEUT4",153,0)
 N PAYNM
"RTN","IBCNEUT4",154,0)
 ;
"RTN","IBCNEUT4",155,0)
 S INSNM=$G(INSNM) ; Init variable if not passed
"RTN","IBCNEUT4",156,0)
 ; Retrieve the National ID(Payer ID) for this Payer IEN
"RTN","IBCNEUT4",157,0)
 S PAYID=$P($G(^IBE(365.12,PAYIEN,0)),U,2)
"RTN","IBCNEUT4",158,0)
 I PAYID="" S SYMIEN=$$ERROR^IBCNEUT8("B9","Payer IEN "_PAYIEN_" does not have a Payer.") Q
"RTN","IBCNEUT4",159,0)
 ; Retrieve payer name
"RTN","IBCNEUT4",160,0)
 S PAYNM=$P($G(^IBE(365.12,PAYIEN,0)),U,1)
"RTN","IBCNEUT4",161,0)
 ; Retrieve the IEN of the eIV Application
"RTN","IBCNEUT4",162,0)
 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PAYIEN)
"RTN","IBCNEUT4",163,0)
 I APPIEN="" S SYMIEN=$$ERROR^IBCNEUT8("B9","The eIV Payer Application has not been created for this site.") Q
"RTN","IBCNEUT4",164,0)
 ; Verify the existence of the application for this Payer
"RTN","IBCNEUT4",165,0)
 I '$D(^IBE(365.12,PAYIEN,1,APPIEN)) S SYMIEN=$$ERROR^IBCNEUT8("B7","Insurance company "_INSNM_" is linked to Payer "_PAYNM_" which is not set up to accept electronic insurance eligibility requests.") Q
"RTN","IBCNEUT4",166,0)
 ; Retrieve the eIV-specific application data for this Payer
"RTN","IBCNEUT4",167,0)
 S APPDATA=$G(^IBE(365.12,PAYIEN,1,APPIEN,0))
"RTN","IBCNEUT4",168,0)
 ; Check if the Payer doesn't have either an active national or an
"RTN","IBCNEUT4",169,0)
 ; active local connection and return one or, if applicable, BOTH errors
"RTN","IBCNEUT4",170,0)
 I '$P(APPDATA,U,3) S SYMIEN=$$ERROR^IBCNEUT8("B6","Insurance company "_INSNM_" is linked to Payer "_PAYNM_" which is not locally active for eIV.")
"RTN","IBCNEUT4",171,0)
 I '$P(APPDATA,U,2) S SYMIEN=$$ERROR^IBCNEUT8("B5","Insurance company "_INSNM_" is linked to Payer "_PAYNM_" which is not nationally active for eIV.")
"RTN","IBCNEUT4",172,0)
 ; Check if the Payer has been deactivated, if so report it
"RTN","IBCNEUT4",173,0)
 I $P(APPDATA,U,11) S SYMIEN=$$ERROR^IBCNEUT8("B14","Insurance company "_INSNM_" is linked to Payer "_PAYNM_" which has been deactivated as of "_$$FMTE^XLFDT($P(APPDATA,U,12),"5Z")_".")
"RTN","IBCNEUT4",174,0)
 Q
"RTN","IBCNEUT4",175,0)
 ;
"RTN","IBCNEUT4",176,0)
MULTNAME(TEXT,LIST) ; Function to return an error message with a list of multiple names
"RTN","IBCNEUT4",177,0)
 ; Input parameters:
"RTN","IBCNEUT4",178,0)
 ;  TEXT - Error text to display
"RTN","IBCNEUT4",179,0)
 ;  LIST - List of items, can be either a list of ins co
"RTN","IBCNEUT4",180,0)
 ;         names or National ID names
"RTN","IBCNEUT4",181,0)
 ; Output parameter: Function value - Formatted list of items in 1 string
"RTN","IBCNEUT4",182,0)
 N COLIST,I,NAME,TOOLONG
"RTN","IBCNEUT4",183,0)
 S NAME="",COLIST=TEXT,TOOLONG=0
"RTN","IBCNEUT4",184,0)
 F I=1:1 S NAME=$O(LIST(NAME)) Q:NAME=""  D  Q:TOOLONG
"RTN","IBCNEUT4",185,0)
 . ; Add this name to the list of found names
"RTN","IBCNEUT4",186,0)
 . I I=1 S COLIST=COLIST_": "_NAME
"RTN","IBCNEUT4",187,0)
 . E  S COLIST=COLIST_", "_NAME
"RTN","IBCNEUT4",188,0)
 . ; check if the list of items may cause a MAXSTRING error
"RTN","IBCNEUT4",189,0)
 . I $L(COLIST)<450 Q
"RTN","IBCNEUT4",190,0)
 . S COLIST=COLIST_" (Too many items to display)",TOOLONG=1
"RTN","IBCNEUT4",191,0)
 ;
"RTN","IBCNEUT4",192,0)
 Q COLIST_"."
"RTN","IBCNEUT4",193,0)
 ;
"RTN","IBCNSC4")
0^61^B18086570^B17661433
"RTN","IBCNSC4",1,0)
IBCNSC4 ;ALB/TMP - INSURANCE PLAN DETAIL SCREEN UTILITIES ; 09-AUG-94
"RTN","IBCNSC4",2,0)
 ;;2.0;INTEGRATED BILLING;**43,85,103,251,416,497**;21-MAR-94;Build 120
"RTN","IBCNSC4",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSC4",4,0)
 ;
"RTN","IBCNSC4",5,0)
INIT ; -- Load the plan detail segments
"RTN","IBCNSC4",6,0)
 N IBLCNT
"RTN","IBCNSC4",7,0)
 K ^TMP("IBCNSCP",$J)
"RTN","IBCNSC4",8,0)
 K VALMQUIT
"RTN","IBCNSC4",9,0)
 S VALMBG=1,(IBLCNT,VALMCNT)=0
"RTN","IBCNSC4",10,0)
 D KILL^VALM10()
"RTN","IBCNSC4",11,0)
 ;
"RTN","IBCNSC4",12,0)
 Q:'$G(IBCPOL)
"RTN","IBCNSC4",13,0)
 ;
"RTN","IBCNSC4",14,0)
 S IBCPOLD=$G(^IBA(355.3,IBCPOL,0)),IBCND1=$G(^(1)),$P(IBCDFND,U,18)=IBCPOL
"RTN","IBCNSC4",15,0)
 S IBCPOLD2=$G(^IBA(355.3,IBCPOL,6)) ;; Daou/EEN adding BIN and PCN
"RTN","IBCNSC4",16,0)
 S IBCPOLDL=$G(^IBA(355.3,IBCPOL,2)) ;; Daou/EEN adding BIN and PCN
"RTN","IBCNSC4",17,0)
 D POLICY^IBCNSP0,UR,LIM,AB,VER,COMMENT
"RTN","IBCNSC4",18,0)
 Q
"RTN","IBCNSC4",19,0)
 ;
"RTN","IBCNSC4",20,0)
UR ; -- UR region
"RTN","IBCNSC4",21,0)
 N START,OFFSET
"RTN","IBCNSC4",22,0)
 S START=1,OFFSET=43,VALMCNT=+$O(@VALMAR@(""),-1)
"RTN","IBCNSC4",23,0)
 D SET(START,OFFSET," Utilization Review Info ",IORVON,IORVOFF)
"RTN","IBCNSC4",24,0)
 D SET(START+1,OFFSET,"         Require UR: "_$$EXPAND^IBTRE(355.3,.05,$P(IBCPOLD,"^",5)))
"RTN","IBCNSC4",25,0)
 D SET(START+2,OFFSET,"   Require Amb Cert: "_$$EXPAND^IBTRE(355.3,.12,$P(IBCPOLD,"^",12)))
"RTN","IBCNSC4",26,0)
 D SET(START+3,OFFSET,"   Require Pre-Cert: "_$$EXPAND^IBTRE(355.3,.06,$P(IBCPOLD,"^",6)))
"RTN","IBCNSC4",27,0)
 D SET(START+4,OFFSET,"   Exclude Pre-Cond: "_$$EXPAND^IBTRE(355.3,.07,$P(IBCPOLD,"^",7)))
"RTN","IBCNSC4",28,0)
 D SET(START+5,OFFSET,"Benefits Assignable: "_$$EXPAND^IBTRE(355.3,.08,$P(IBCPOLD,"^",8)))
"RTN","IBCNSC4",29,0)
 Q
"RTN","IBCNSC4",30,0)
 ;
"RTN","IBCNSC4",31,0)
LIM ; Plan coverage limitations region
"RTN","IBCNSC4",32,0)
 N START,OFFSET
"RTN","IBCNSC4",33,0)
 S START=+$O(@VALMAR@(""),-1)+$S($P($G(IBCPOLD),U,14)]"":3,1:2),OFFSET=2
"RTN","IBCNSC4",34,0)
 D BLANK(START-1) S VALMCNT=VALMCNT+1
"RTN","IBCNSC4",35,0)
 D LIMBLD^IBCNSC41(START,OFFSET,.IBLCNT)
"RTN","IBCNSC4",36,0)
 Q
"RTN","IBCNSC4",37,0)
 ;
"RTN","IBCNSC4",38,0)
AB ; -- Annual benefit years region
"RTN","IBCNSC4",39,0)
 N OFFSET,START,ADT,Z
"RTN","IBCNSC4",40,0)
 S START=+$O(@VALMAR@(""),-1)+2,OFFSET=2
"RTN","IBCNSC4",41,0)
 D BLANK(START-1) S VALMCNT=VALMCNT+1
"RTN","IBCNSC4",42,0)
 D SET(START,OFFSET," Annual Benefit Dates ",IORVON,IORVOFF)
"RTN","IBCNSC4",43,0)
 I $O(^IBA(355.4,"APY",IBCPOL,""))="" D SET(START+1,OFFSET+2,"No Annual Benefits Information") G ABQ
"RTN","IBCNSC4",44,0)
 S ADT="" F Z=0:1:6 S ADT=$O(^IBA(355.4,"APY",IBCPOL,ADT)) Q:'ADT  D SET(START+1,OFFSET+3+(10*Z),$$DAT1^IBOUTL(-ADT))
"RTN","IBCNSC4",45,0)
 I ADT'="",$O(^IBA(355.4,"APY",IBCPOL,ADT))'="" D SET(START+1,OFFSET+3+(10*(Z+1)),"*More dates on file - use AB to see them")
"RTN","IBCNSC4",46,0)
ABQ Q
"RTN","IBCNSC4",47,0)
 ;
"RTN","IBCNSC4",48,0)
VER ; -- Plan detail User Information Region
"RTN","IBCNSC4",49,0)
 N OFFSET,START
"RTN","IBCNSC4",50,0)
 S START=+$O(@VALMAR@(""),-1)+2,OFFSET=2
"RTN","IBCNSC4",51,0)
 D BLANK(START-1) S VALMCNT=VALMCNT+1
"RTN","IBCNSC4",52,0)
 D SET(START,OFFSET," User Information ",IORVON,IORVOFF)
"RTN","IBCNSC4",53,0)
 I IBCND1="" D SET(START+1,OFFSET,"No User Information") G VERQ
"RTN","IBCNSC4",54,0)
 D SET(START+1,OFFSET,"      Entered By: "_$E($P($G(^VA(200,+$P(IBCND1,"^",2),0)),"^",1),1,20))
"RTN","IBCNSC4",55,0)
 D SET(START+2,OFFSET,"      Entered On: "_$$DAT1^IBOUTL(+IBCND1))
"RTN","IBCNSC4",56,0)
 D SET(START+3,OFFSET," Last Updated By: "_$E($P($G(^VA(200,+$P(IBCND1,"^",6),0)),"^",1),1,20))
"RTN","IBCNSC4",57,0)
 D SET(START+4,OFFSET," Last Updated On: "_$$DAT1^IBOUTL(+$P(IBCND1,"^",5)))
"RTN","IBCNSC4",58,0)
VERQ Q
"RTN","IBCNSC4",59,0)
 ;
"RTN","IBCNSC4",60,0)
COMMENT ; -- Plan detail comment region
"RTN","IBCNSC4",61,0)
 N START,OFFSET,LINE
"RTN","IBCNSC4",62,0)
 S START=+$O(@VALMAR@(""),-1)+2,OFFSET=2,LINE=1
"RTN","IBCNSC4",63,0)
 D BLANK(START-1) S VALMCNT=VALMCNT+1
"RTN","IBCNSC4",64,0)
 D SET(START,OFFSET," Plan Comments ",IORVON,IORVOFF)
"RTN","IBCNSC4",65,0)
 S IBI=0
"RTN","IBCNSC4",66,0)
 F LINE=LINE:1 S IBI=$O(^IBA(355.3,+IBCPOL,11,IBI)) Q:'IBI  D SET(START+LINE,OFFSET,"  "_$E($G(^IBA(355.3,+IBCPOL,11,IBI,0)),1,80))
"RTN","IBCNSC4",67,0)
 D SET(START+LINE,OFFSET,"  ")
"RTN","IBCNSC4",68,0)
 S IBLCNT=$G(IBLCNT)+LINE
"RTN","IBCNSC4",69,0)
 Q
"RTN","IBCNSC4",70,0)
 ;
"RTN","IBCNSC4",71,0)
BLANK(LINE) ; -- Build blank line
"RTN","IBCNSC4",72,0)
 D SET^VALM10(.LINE,$J("",90))
"RTN","IBCNSC4",73,0)
 Q
"RTN","IBCNSC4",74,0)
 ;
"RTN","IBCNSC4",75,0)
SET(LINE,COL,TEXT,ON,OFF) ; -- set display info in array
"RTN","IBCNSC4",76,0)
 I '$D(@VALMAR@(LINE,0)) D BLANK(.LINE) S VALMCNT=$G(VALMCNT)+1
"RTN","IBCNSC4",77,0)
 D SET^VALM10(.LINE,$$SETSTR^VALM1(.TEXT,@VALMAR@(LINE,0),.COL,$L(TEXT)))
"RTN","IBCNSC4",78,0)
 D:$G(ON)]""!($G(OFF)]"") CNTRL^VALM10(.LINE,.COL,$L(TEXT),$G(ON),$G(OFF))
"RTN","IBCNSC4",79,0)
 W:'(LINE#5) "."
"RTN","IBCNSC4",80,0)
 Q
"RTN","IBCNSC4",81,0)
 ;
"RTN","IBCNSC4",82,0)
HDR ; Active plan list header
"RTN","IBCNSC4",83,0)
 N IBCNS0,IBLEAD,X,X2
"RTN","IBCNSC4",84,0)
 S IBCNS0=$G(^DIC(36,+IBCNS,0))
"RTN","IBCNSC4",85,0)
 S IBLEAD=$S($G(IBIND):"All ",1:"")_$S($G(IBW):"",1:"Active ")_"Plans for: "_$P(IBCNS0,U)_" Insurance Company"
"RTN","IBCNSC4",86,0)
 S VALMHDR(1)=$$SETSTR^VALM1(IBLEAD,"",1,80)
"RTN","IBCNSC4",87,0)
 S X=$TR($J("",$L(IBLEAD)),""," ")
"RTN","IBCNSC4",88,0)
 S VALMHDR(2)=$$SETSTR^VALM1(X,"",$L(IBLEAD)+1,80)
"RTN","IBCNSC4",89,0)
 S X="#" I $G(IBIND) S X="#  + => Indiv. Plan"
"RTN","IBCNSC4",90,0)
 I $G(IBW) S X=$E(X_$J("",23),1,23)_"* => Inactive Plan"
"RTN","IBCNSC4",91,0)
 S VALMHDR(3)=$$SETSTR^VALM1("Pre-  Pre-  Ben",X,64,17)
"RTN","IBCNSC4",92,0)
 Q
"RTN","IBCNSC4",93,0)
 ;
"RTN","IBCNSEVT")
0^50^B4726698^B2530934
"RTN","IBCNSEVT",1,0)
IBCNSEVT ;ALB/AAS - NEW INSURANCE POLICY EVENT DRIVER ; 12-DEC-92
"RTN","IBCNSEVT",2,0)
 ;;2.0;INTEGRATED BILLING;**6,497**;21-MAR-94;Build 120
"RTN","IBCNSEVT",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSEVT",4,0)
 ;
"RTN","IBCNSEVT",5,0)
% ; -- Invokes items on the IB NEW INSURANCE EVENT protocol menu
"RTN","IBCNSEVT",6,0)
 ;    Input  =:     dfn   = patient file ien
"RTN","IBCNSEVT",7,0)
 ;              IBEVTP0   = insurance type zeroth node of policy
"RTN","IBCNSEVT",8,0)
 ;                          before editing
"RTN","IBCNSEVT",9,0)
 ;              IBEVTP1   = insurance type 1 node of policy 
"RTN","IBCNSEVT",10,0)
 ;                          before editing
"RTN","IBCNSEVT",11,0)
 ;              IBEVTP2   = insurance type 2 node of policy
"RTN","IBCNSEVT",12,0)
 ;                          before editing
"RTN","IBCNSEVT",13,0)
 ;              IBEVTP3   = insurance type 3 node of policy        - IB*2.0*497 (vd)
"RTN","IBCNSEVT",14,0)
 ;                          before editing
"RTN","IBCNSEVT",15,0)
 ;              IBEVTP7   = insurance type 7 node of policy        - IB*2.0*497 (vd)
"RTN","IBCNSEVT",16,0)
 ;                          before editing
"RTN","IBCNSEVT",17,0)
 ;              IBEVTA0   = insurance type zeroth node of new policy
"RTN","IBCNSEVT",18,0)
 ;                          contains effective/expiration dates
"RTN","IBCNSEVT",19,0)
 ;              IBEVTA1   = insurance type 1 node of new policy
"RTN","IBCNSEVT",20,0)
 ;                          contains date added and by whom
"RTN","IBCNSEVT",21,0)
 ;              IBEVTA2   = insurance type 2 node of new policy
"RTN","IBCNSEVT",22,0)
 ;              IBEVTA3   = insurance type 2 node of new policy    - IB*2.0*497 (vd)
"RTN","IBCNSEVT",23,0)
 ;              IBEVTA7   = insurance type 2 node of new policy    - IB*2.0*497 (vd)
"RTN","IBCNSEVT",24,0)
 ;               IBCDFN   = internal number of policy as in ^dpt(dfn,
"RTN","IBCNSEVT",25,0)
 ;                          .312,ibcdfn,0))
"RTN","IBCNSEVT",26,0)
 ;             IBEVTACT   = flag indicating whether action is add, edit
"RTN","IBCNSEVT",27,0)
 ;                          or delete
"RTN","IBCNSEVT",28,0)
 ;
"RTN","IBCNSEVT",29,0)
 ;
"RTN","IBCNSEVT",30,0)
 N DTOUT,DIROUT
"RTN","IBCNSEVT",31,0)
 ;S X=$O(^ORD(101,"B","IBCN NEW INSURANCE EVENTS",0))_";ORD(101," D EN1^XQOR:X
"RTN","IBCNSEVT",32,0)
 I IBEVTP0=IBEVTA0,IBEVTP1=IBEVTA1,IBEVTP2=IBEVTA2,IBEVTP3=IBEVTA3,IBEVTP7=IBEVTA7 G EVTQ    ; IB*2.0*497 (vd)
"RTN","IBCNSEVT",33,0)
 S X="IBCN NEW INSURANCE EVENTS",DIC=101 D EN1^XQOR
"RTN","IBCNSEVT",34,0)
EVTQ K X,DIC,IBEVTP0,IBEVTP1,IBEVTP2,IBEVTA0,IBEVTA1,IBEVTA2,IBEVTACT
"RTN","IBCNSEVT",35,0)
 K IBEVTP3,IBEVTP7,IBEVTA3,IBEVTA7    ; IB*2.0*497 (vd)
"RTN","IBCNSEVT",36,0)
 Q
"RTN","IBCNSEVT",37,0)
 ;
"RTN","IBCNSEVT",38,0)
BEFORE ; -- get insurance type values before adding/editing
"RTN","IBCNSEVT",39,0)
 ;
"RTN","IBCNSEVT",40,0)
 I $G(IBNEW) S (IBEVTP0,IBEVTP1,IBEVTP2,IBEVTP3,IBEVTP7)="" G BEFQ       ; IB*2.0*497 (vd)
"RTN","IBCNSEVT",41,0)
 S IBEVTP0=$G(^DPT(DFN,.312,IBCDFN,0))
"RTN","IBCNSEVT",42,0)
 S IBEVTP1=$G(^DPT(DFN,.312,IBCDFN,1))
"RTN","IBCNSEVT",43,0)
 S IBEVTP2=$G(^DPT(DFN,.312,IBCDFN,2))
"RTN","IBCNSEVT",44,0)
 S IBEVTP3=$G(^DPT(DFN,.312,IBCDFN,3))   ; IB*2.0*497 (vd)
"RTN","IBCNSEVT",45,0)
 S IBEVTP7=$G(^DPT(DFN,.312,IBCDFN,7))   ; IB*2.0*497 (vd)
"RTN","IBCNSEVT",46,0)
BEFQ Q
"RTN","IBCNSEVT",47,0)
 ;
"RTN","IBCNSEVT",48,0)
AFTER ; -- get insurance type values after adding/editing. set action flag.
"RTN","IBCNSEVT",49,0)
 ; -- get exemption after change
"RTN","IBCNSEVT",50,0)
 ;    input  =:  DFN    = patient file ien
"RTN","IBCNSEVT",51,0)
 ;
"RTN","IBCNSEVT",52,0)
 S IBEVTA0=$G(^DPT(DFN,.312,IBCDFN,0))
"RTN","IBCNSEVT",53,0)
 S IBEVTA1=$G(^DPT(DFN,.312,IBCDFN,1))
"RTN","IBCNSEVT",54,0)
 S IBEVTA2=$G(^DPT(DFN,.312,IBCDFN,2))
"RTN","IBCNSEVT",55,0)
 S IBEVTA3=$G(^DPT(DFN,.312,IBCDFN,3))   ; IB*2.0*497 (vd)
"RTN","IBCNSEVT",56,0)
 S IBEVTA7=$G(^DPT(DFN,.312,IBCDFN,7))   ; IB*2.0*497 (vd)
"RTN","IBCNSEVT",57,0)
 I IBEVTP0="",IBEVTA0'="" S IBEVTACT="ADD"
"RTN","IBCNSEVT",58,0)
 I IBEVTP0'="",IBEVTA0'="" S IBEVTACT="EDT"
"RTN","IBCNSEVT",59,0)
 I IBEVTP0'="",IBEVTA0="" S IBEVTACT="DEL"
"RTN","IBCNSEVT",60,0)
 Q
"RTN","IBCNSJ3")
0^44^B17659726^B16975505
"RTN","IBCNSJ3",1,0)
IBCNSJ3 ;ALB/CPM - ADD NEW INSURANCE PLAN ; 11-JAN-95
"RTN","IBCNSJ3",2,0)
 ;;2.0;INTEGRATED BILLING;**28,497**;21-MAR-94;Build 120
"RTN","IBCNSJ3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSJ3",4,0)
 ;
"RTN","IBCNSJ3",5,0)
NEW(IBCNS,IBCPOL,IBFG) ; Add a new insurance plan
"RTN","IBCNSJ3",6,0)
 ;  Input:   IBCNS  --  Pointer to an insurance company in file #36
"RTN","IBCNSJ3",7,0)
 ;            IBFG  --  [Optional] -> Set to 1 to force creation
"RTN","IBCNSJ3",8,0)
 ;                      of a group plan
"RTN","IBCNSJ3",9,0)
 ; Output:  IBCPOL  --  0, if a new plan was not added, or
"RTN","IBCNSJ3",10,0)
 ;                      >0 => pointer to the new plan in file #355.3
"RTN","IBCNSJ3",11,0)
 ;
"RTN","IBCNSJ3",12,0)
 N DA,DIR,DIRUT,DIROUT,DTOUT,DUOUT,IBTL,IBGRP,IBGNA,IBGNU,X,Y
"RTN","IBCNSJ3",13,0)
 S IBCPOL=0
"RTN","IBCNSJ3",14,0)
 I '$G(IBCNS) G NEWQ
"RTN","IBCNSJ3",15,0)
 ;
"RTN","IBCNSJ3",16,0)
 S DIR(0)="Y",DIR("B")="NO",DIR("A")="Do you wish to add a new Insurance Plan"
"RTN","IBCNSJ3",17,0)
 S DIR("?")="If you have identified a new plan that has not been previously entered, and you wish to add it, answer 'YES'.  If you do not wish to add a new plan, enter 'NO'."
"RTN","IBCNSJ3",18,0)
 D ^DIR K DIR I Y<1!($D(DIRUT)) G NEWQ
"RTN","IBCNSJ3",19,0)
 ;
"RTN","IBCNSJ3",20,0)
 ; - collect plan characteristics
"RTN","IBCNSJ3",21,0)
 I $G(IBFG) S IBGRP=1 G MORE
"RTN","IBCNSJ3",22,0)
 S DIR(0)="355.3,.02",DIR("A")="  IS THIS A GROUP PLAN" D ^DIR K DIR S IBGRP=Y
"RTN","IBCNSJ3",23,0)
 I $D(DIRUT) G NEWQ
"RTN","IBCNSJ3",24,0)
 ;
"RTN","IBCNSJ3",25,0)
MORE S IBTL="  "_$S(IBGRP:"GROUP",1:"INDIVIDUAL")_" PLAN "
"RTN","IBCNSJ3",26,0)
 S DIR(0)="355.3,2.01",DIR("A")=IBTL_"NAME" D ^DIR K DIR G NEWQ:$D(DUOUT)!$D(DTOUT) S IBGNA=Y
"RTN","IBCNSJ3",27,0)
 S DIR(0)="355.3,2.02",DIR("A")=IBTL_"NUMBER" D ^DIR K DIR G NEWQ:$D(DUOUT)!$D(DTOUT) S IBGNU=Y
"RTN","IBCNSJ3",28,0)
 ;
"RTN","IBCNSJ3",29,0)
 ; - check for duplicates and file the plan
"RTN","IBCNSJ3",30,0)
 I $$CHECK(IBCNS,IBGNA,IBGNU) S IBCPOL=$$ADDH^IBCNSU(IBCNS,IBGRP,IBGNA,IBGNU)
"RTN","IBCNSJ3",31,0)
NEWQ Q
"RTN","IBCNSJ3",32,0)
 ;
"RTN","IBCNSJ3",33,0)
 ;
"RTN","IBCNSJ3",34,0)
CHECK(IBCNS,IBGNA,IBGNU) ; Check for potential duplicate plans
"RTN","IBCNSJ3",35,0)
 ;  Input:   IBCNS  --  Pointer to an insurance company in file #36
"RTN","IBCNSJ3",36,0)
 ;           IBGNA  --  Plan Name for potential new plan
"RTN","IBCNSJ3",37,0)
 ;           IBGNU  --  Plan Number for potential new plan
"RTN","IBCNSJ3",38,0)
 ; Output:   IBANS  --  1 ->  Okay to add the new plan
"RTN","IBCNSJ3",39,0)
 ;                      0 ->  Don't add the new plan.
"RTN","IBCNSJ3",40,0)
 ;
"RTN","IBCNSJ3",41,0)
 N IBANS,IBCT,IBCNSD
"RTN","IBCNSJ3",42,0)
 S (IBANS,IBCT)=1
"RTN","IBCNSJ3",43,0)
 S IBCNSD=$G(^DIC(36,+$G(IBCNS),0)) I IBCNSD="" G CHECKQ
"RTN","IBCNSJ3",44,0)
 K ^TMP($J,"DUP"),^TMP($J,"DUP1")
"RTN","IBCNSJ3",45,0)
 W !!,"  Searching for potential duplicate plans offered by ",$E($P(IBCNSD,"^"),1,20),"..."
"RTN","IBCNSJ3",46,0)
 I '$D(^IBA(355.3,"B",IBCNS)) G CHECKQ
"RTN","IBCNSJ3",47,0)
 ;
"RTN","IBCNSJ3",48,0)
 ; - look for potential duplicate plans
"RTN","IBCNSJ3",49,0)
 D:$G(IBGNA)]"" FIND(IBCNS,IBGNA)
"RTN","IBCNSJ3",50,0)
 D:$G(IBGNU)]"" FIND(IBCNS,IBGNU)
"RTN","IBCNSJ3",51,0)
 ;
"RTN","IBCNSJ3",52,0)
 ; - display potential duplicates and see if plan should be filed
"RTN","IBCNSJ3",53,0)
 I $D(^TMP($J,"DUP")) D LIST
"RTN","IBCNSJ3",54,0)
 ;
"RTN","IBCNSJ3",55,0)
CHECKQ I '$D(^TMP($J,"DUP")) W !!,"  No potential duplicate plans have been identified."
"RTN","IBCNSJ3",56,0)
 K ^TMP($J,"DUP"),^TMP($J,"DUP1")
"RTN","IBCNSJ3",57,0)
 Q IBANS
"RTN","IBCNSJ3",58,0)
 ;
"RTN","IBCNSJ3",59,0)
 ;
"RTN","IBCNSJ3",60,0)
FIND(IBCNS,IBGN) ; Check cross-references for duplicate plans
"RTN","IBCNSJ3",61,0)
 ;  Input:  IBCNS  --  Pointer to the insurance company in file #36
"RTN","IBCNSJ3",62,0)
 ;           IBGN  --  value to use to find duplicates
"RTN","IBCNSJ3",63,0)
 ;
"RTN","IBCNSJ3",64,0)
 N INP,LEN,SUB,TYPE
"RTN","IBCNSJ3",65,0)
 F SUB="AGNA","AGNU","ACCP" D
"RTN","IBCNSJ3",66,0)
 .I SUB="ACCP" S IBGN=$$COMP^IBCNSJ(IBGN)
"RTN","IBCNSJ3",67,0)
 .S INP=IBGN,LEN=$L(INP) Q:LEN<2!(LEN>20)
"RTN","IBCNSJ3",68,0)
 .S TYPE=$S(IBGN?1N.N:"NUM",1:"STR")
"RTN","IBCNSJ3",69,0)
 .I $D(^IBA(355.3,SUB,IBCNS,INP)) D GDATA
"RTN","IBCNSJ3",70,0)
 .I TYPE="STR" F  S INP=$O(^IBA(355.3,SUB,IBCNS,INP)) Q:$E(INP,1,LEN)'=IBGN  D GDATA
"RTN","IBCNSJ3",71,0)
 .I TYPE="NUM" F  S INP=$O(^IBA(355.3,SUB,IBCNS,INP)) Q:INP=""  I $E(INP,1,LEN)=IBGN D GDATA
"RTN","IBCNSJ3",72,0)
 Q
"RTN","IBCNSJ3",73,0)
 ;
"RTN","IBCNSJ3",74,0)
GDATA ; Place potential duplicate plan into an array.
"RTN","IBCNSJ3",75,0)
 N X,Y,Y2 S X=0       ; IB*2.0*497 (vd)
"RTN","IBCNSJ3",76,0)
 F  S X=$O(^IBA(355.3,SUB,IBCNS,INP,X)) Q:'X  I '$D(^TMP($J,"DUP",X)) D
"RTN","IBCNSJ3",77,0)
 .S Y=$G(^IBA(355.3,X,0)),Y2=$G(^IBA(355.3,X,2)),IBCT=IBCT+1    ; IB*2.0*497 (vd)
"RTN","IBCNSJ3",78,0)
 .S ^TMP($J,"DUP",X)="",^TMP($J,"DUP1",IBCT)=$P(Y2,"^",2)_U_$P(Y2,"^",1)_U_$P(Y,"^",2)_U_$P(Y,"^",11)  ; IB*2.0*497 (vd)
"RTN","IBCNSJ3",79,0)
 Q
"RTN","IBCNSJ3",80,0)
 ;
"RTN","IBCNSJ3",81,0)
LIST ; List potential duplicates to screen and prompt to add plan.
"RTN","IBCNSJ3",82,0)
 W !!,"  The following plans have been identified as potential duplicates:"
"RTN","IBCNSJ3",83,0)
 W !!,?3,"PLAN",?22,"PLAN",?45,"GROUP",?55,"ACTIVE",!,?2,"NUMBER",?22,"NAME",?45,"PLAN?",?55,"PLAN?",!
"RTN","IBCNSJ3",84,0)
 S IBCT=0 F  S IBCT=$O(^TMP($J,"DUP1",IBCT)) Q:'IBCT  D
"RTN","IBCNSJ3",85,0)
 .S IBST=$G(^TMP($J,"DUP1",IBCT))
"RTN","IBCNSJ3",86,0)
 .W !?2,$S($P(IBST,"^")'="":$P(IBST,"^"),1:"<NO PLAN NUM>"),?22,$S($P(IBST,"^",2)'="":$P(IBST,"^",2),1:"<NO PLAN NAME>")
"RTN","IBCNSJ3",87,0)
 .W ?45,$S($P(IBST,"^",3)'="":$$EXPAND^IBTRE(355.3,.02,$P(IBST,"^",3)),1:"<UNK>"),?55,$S($P(IBST,"^",4):"NO",1:"YES")
"RTN","IBCNSJ3",88,0)
 ;
"RTN","IBCNSJ3",89,0)
 ; - see if it is okay to add the plan
"RTN","IBCNSJ3",90,0)
 S DIR(0)="Y",DIR("A",1)="Do you still want to add a new plan with Plan Name "_$S(IBGNA'="":IBGNA,1:"<NO PLAN NAME>")
"RTN","IBCNSJ3",91,0)
 S DIR("A")="and Plan Number "_$S(IBGNU'="":IBGNU,1:"<NO PLAN NUMBER>")
"RTN","IBCNSJ3",92,0)
 S DIR("B")="NO"
"RTN","IBCNSJ3",93,0)
 W ! D ^DIR K DIR S IBANS=Y
"RTN","IBCNSJ3",94,0)
 Q
"RTN","IBCNSM31")
0^53^B21224087^B20882944
"RTN","IBCNSM31",1,0)
IBCNSM31 ;ALB/AAS - INSURANCE MANAGEMENT - OUTPUTS ;28-MAY-93
"RTN","IBCNSM31",2,0)
 ;;2.0;INTEGRATED BILLING;**6,28,68,413,497**;21-MAR-94;Build 120
"RTN","IBCNSM31",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSM31",4,0)
 ;
"RTN","IBCNSM31",5,0)
% G EN^IBCNSM
"RTN","IBCNSM31",6,0)
 ;
"RTN","IBCNSM31",7,0)
EA ; -- Edit all insurance policy data
"RTN","IBCNSM31",8,0)
 N IBDIF,I,J,IBXX,IBCDFN,IBTRC,VALMY
"RTN","IBCNSM31",9,0)
 D EN^VALM2($G(XQORNOD(0)))
"RTN","IBCNSM31",10,0)
 D FULL^VALM1
"RTN","IBCNSM31",11,0)
 I $D(VALMY) S IBXX=0 F  S IBXX=$O(VALMY(IBXX)) Q:'IBXX  D  ;W !,"Entry ",X,"Selected" D
"RTN","IBCNSM31",12,0)
 .S IBPPOL=$G(^TMP("IBNSMDX",$J,$O(^TMP("IBNSM",$J,"IDX",IBXX,0))))
"RTN","IBCNSM31",13,0)
 .Q:IBPPOL=""
"RTN","IBCNSM31",14,0)
 .S IBCDFN=$P($G(IBPPOL),"^",4) I 'IBCDFN W !!,"Can't identify the policy!" Q
"RTN","IBCNSM31",15,0)
 .; -- edit patient data
"RTN","IBCNSM31",16,0)
 .N IBQUIT S IBQUIT=0
"RTN","IBCNSM31",17,0)
 .S IBCNSEH=$P($G(^IBE(350.9,1,4)),"^",1) D PAT^IBCNSEH
"RTN","IBCNSM31",18,0)
 .D BEFORE^IBCNSEVT
"RTN","IBCNSM31",19,0)
 .D PATPOL^IBCNSM32(IBCDFN)
"RTN","IBCNSM31",20,0)
 .D AFTER^IBCNSEVT,^IBCNSEVT
"RTN","IBCNSM31",21,0)
 .; -- edit policy data
"RTN","IBCNSM31",22,0)
 .D:'$G(IBQUIT) POL^IBCNSEH,EDPOL^IBCNSM3(IBCDFN)
"RTN","IBCNSM31",23,0)
 .W ! D AI^IBCNSP1 D:$G(IBTRC) AIP^IBCNSP02(IBTRC)
"RTN","IBCNSM31",24,0)
 .Q
"RTN","IBCNSM31",25,0)
 ;
"RTN","IBCNSM31",26,0)
EAQ D BLD^IBCNSM
"RTN","IBCNSM31",27,0)
 S VALMBCK="R"
"RTN","IBCNSM31",28,0)
 Q
"RTN","IBCNSM31",29,0)
 ;
"RTN","IBCNSM31",30,0)
LK(IBCNS) ; -- screened look up to policy file
"RTN","IBCNSM31",31,0)
 ;      input:   IBCNS = pointer to insurance company file (36)
"RTN","IBCNSM31",32,0)
 ;
"RTN","IBCNSM31",33,0)
 N DIC,IBX,DIR,DUOUT,DTOUT,DIROUT,DIRUT,X,Y,IBCPOL
"RTN","IBCNSM31",34,0)
 S IBCPOL=""
"RTN","IBCNSM31",35,0)
 I $G(IBCNS)="" G LKQ
"RTN","IBCNSM31",36,0)
 ;
"RTN","IBCNSM31",37,0)
 I '$$ANYGP^IBCNSJ(IBCNS) W !!,"This company does not offer any active group plans." G LKQ
"RTN","IBCNSM31",38,0)
 ;
"RTN","IBCNSM31",39,0)
 S DIR(0)="Y",DIR("A")="This company offers active group plans.  Do you wish to select one"
"RTN","IBCNSM31",40,0)
 S DIR("?")="The look-up facility to select an active group plan has been enhanced to use the List Manager.  Enter 'YES' if you wish to select a plan from this look-up, or 'NO' to add your own plan."
"RTN","IBCNSM31",41,0)
 D ^DIR K DIR I 'Y G LKQ
"RTN","IBCNSM31",42,0)
 ;
"RTN","IBCNSM31",43,0)
 S DIR(0)="Y",DIR("B")="YES",DIR("A")="Do you wish to directly enter this plan"
"RTN","IBCNSM31",44,0)
 S DIR("?")="The look-up facility to select an active group plan has been enhanced to use the List Manager.  Enter 'NO' if you wish to select a plan from this look-up, or 'YES' to directly enter the plan."
"RTN","IBCNSM31",45,0)
 D ^DIR K DIR I $D(DIRUT) G LKQ
"RTN","IBCNSM31",46,0)
 ;
"RTN","IBCNSM31",47,0)
 I 'Y D LKP^IBCNSU2(IBCNS,0,0,.IBCPOL,$G(IBALR)) G LKQ
"RTN","IBCNSM31",48,0)
 ;
"RTN","IBCNSM31",49,0)
 S DIC("A")="Select an Active GROUP PLAN: "
"RTN","IBCNSM31",50,0)
 S DIC="^IBA(355.3,",DIC(0)="AEQM",DIC("S")="I +^(0)=IBCNS,$P(^(0),U,2),'$P(^(0),U,11),$G(IBALR)'=+Y"
"RTN","IBCNSM31",51,0)
 S DIC("W")="N IBX S IBX=$G(^(0)) W ""   Name: "",$E($S($P(IBX,U,3)]"""":$P(IBX,U,3),1:""<none>"")_$J("""",20),1,20),""   Number: "",$S($P(IBX,U,4)]"""":$P(IBX,U,4),1:""<none>"")"
"RTN","IBCNSM31",52,0)
 D ^DIC K DIC I +Y>0 S IBCPOL=+Y
"RTN","IBCNSM31",53,0)
 ;
"RTN","IBCNSM31",54,0)
 ; -- see if only one policy
"RTN","IBCNSM31",55,0)
 ;I '$O(^IBA(355.3,"B",+IBCNS,IBX) D  G LKQ
"RTN","IBCNSM31",56,0)
 ;
"RTN","IBCNSM31",57,0)
 ; -- is more than one plan to choose from, let fileman do it.
"RTN","IBCNSM31",58,0)
 ;S DIC("A")="Select GROUP INSURANCE PLAN: "
"RTN","IBCNSM31",59,0)
 ;
"RTN","IBCNSM31",60,0)
 ;S DIC="^IBA(355.3,",DIC(0)="AEQM",DIC("S")="I $P(^(0),U)=IBCNS,($P(^(0),U,2)=1!($P(^(0),U,10)=$G(DFN)))"
"RTN","IBCNSM31",61,0)
 ;
"RTN","IBCNSM31",62,0)
 ;D ^DIC K DIC I +Y>0 S IBCPOL=+Y
"RTN","IBCNSM31",63,0)
 ;
"RTN","IBCNSM31",64,0)
LKQ Q IBCPOL
"RTN","IBCNSM31",65,0)
 ;
"RTN","IBCNSM31",66,0)
FUTURE ; -- if expiration date in future give warning
"RTN","IBCNSM31",67,0)
 I $G(IBFUTUR) K IBFUTUR Q
"RTN","IBCNSM31",68,0)
 I $P(^DPT(DFN,.312,IBCDFN,0),"^",4),$P(^(0),"^",4)>DT W !!,*7,"WARNING:  The expiration date for this policy is in the future!",!,"          Normally this is a past date or left blank or a past date",! S Y="@333"
"RTN","IBCNSM31",69,0)
 S IBFUTUR=1
"RTN","IBCNSM31",70,0)
 Q
"RTN","IBCNSM31",71,0)
 ;
"RTN","IBCNSM31",72,0)
COVERED(DFN,IBCOVP) ; -- update covered by insurance in background
"RTN","IBCNSM31",73,0)
 ; -- input ibcovp = the covered by insurance field prior to editing
"RTN","IBCNSM31",74,0)
 ;                   (add/edit/delete) of the 2.312 insurance type mult.
"RTN","IBCNSM31",75,0)
 ;
"RTN","IBCNSM31",76,0)
 Q:$G(DFN)<1
"RTN","IBCNSM31",77,0)
 N X,Y,I,IBCOV,IBNCOV,DA,DR,DIE,DIC,IBINS,IBINSD
"RTN","IBCNSM31",78,0)
 S (IBCOV,IBNCOV)=$P($G(^DPT(DFN,.31)),"^",11)
"RTN","IBCNSM31",79,0)
 D ALL^IBCNS1(DFN,"IBINS",2,DT) S IBINSD=+$G(IBINS(0))
"RTN","IBCNSM31",80,0)
 ;
"RTN","IBCNSM31",81,0)
 ; -- initial value ="" or Unknown
"RTN","IBCNSM31",82,0)
 I $G(IBCOVP)=""!($G(IBCOVP)="U") S IBNCOV=$S('$O(^DPT(DFN,.312,0)):"U",IBINSD:"Y",1:"N")
"RTN","IBCNSM31",83,0)
 ;
"RTN","IBCNSM31",84,0)
 ; -- initial value = YES or NO (treat the same)
"RTN","IBCNSM31",85,0)
 I $G(IBCOVP)="Y"!($G(IBCOVP)="N") S IBNCOV=$S('$O(^DPT(DFN,.312,0)):"N",IBINSD:"Y",1:"N")
"RTN","IBCNSM31",86,0)
 ;
"RTN","IBCNSM31",87,0)
 ;
"RTN","IBCNSM31",88,0)
 I IBCOV'=IBNCOV D
"RTN","IBCNSM31",89,0)
 .S DIE="^DPT(",DR=".3192////"_IBNCOV,DA=DFN D ^DIE
"RTN","IBCNSM31",90,0)
 .I '$D(ZTQUEUED)&($G(IBSUPRES)'>0) W !!,"COVERED BY HEALTH INSURANCE changed to '"_$S(IBNCOV="Y":"YES",IBNCOV="N":"NO",1:"UNKNOWN"),"'.",! H 3
"RTN","IBCNSM31",91,0)
 .Q
"RTN","IBCNSM31",92,0)
 Q
"RTN","IBCNSM31",93,0)
 ;
"RTN","IBCNSM31",94,0)
3 ; -- display group name as uneditable
"RTN","IBCNSM31",95,0)
 ;    called by die, expects da = entry in 355.3
"RTN","IBCNSM31",96,0)
 N X
"RTN","IBCNSM31",97,0)
 S X=$P($G(^IBA(355.3,DA,2)),"^",1)      ; IB*2.0*497 (vd)
"RTN","IBCNSM31",98,0)
 W !,"GROUP NAME: ",X,$S(X'="":"// ",1:""),"  (No Editing)"
"RTN","IBCNSM31",99,0)
 Q
"RTN","IBCNSM31",100,0)
 ;
"RTN","IBCNSM31",101,0)
4 ; -- display group number as uneditable
"RTN","IBCNSM31",102,0)
 ;    called by die, expects da = entry in 355.3
"RTN","IBCNSM31",103,0)
 N X
"RTN","IBCNSM31",104,0)
 S X=$P($G(^IBA(355.3,DA,2)),"^",2)      ; IB*2.0*497 (vd)
"RTN","IBCNSM31",105,0)
 W !,"GROUP NUMBER: ",X,$S(X'="":"// ",1:""),"  (No Editing)"
"RTN","IBCNSM31",106,0)
 Q
"RTN","IBCNSM5")
0^58^B21379064^B20324152
"RTN","IBCNSM5",1,0)
IBCNSM5 ;ALB/NLR - INSURANCE MANAGEMENT WORKSHEET ; 23-JUL-93
"RTN","IBCNSM5",2,0)
 ;;2.0;INTEGRATED BILLING;**28,497**;21-MAR-94;Build 120
"RTN","IBCNSM5",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSM5",4,0)
 ;
"RTN","IBCNSM5",5,0)
% G EN^IBCNSM
"RTN","IBCNSM5",6,0)
 ;
"RTN","IBCNSM5",7,0)
WPPC ; -- print insurance management worksheet, insurance coverage
"RTN","IBCNSM5",8,0)
 ;
"RTN","IBCNSM5",9,0)
 I '$G(IBCPOL) D  G WPPCQ
"RTN","IBCNSM5",10,0)
 .D FULL^VALM1
"RTN","IBCNSM5",11,0)
 .W !!,"There is no plan associated with this policy!"
"RTN","IBCNSM5",12,0)
 .W !!,"Please use the action 'Change Plan Info', which will create a plan"
"RTN","IBCNSM5",13,0)
 .W !,"for the policy."
"RTN","IBCNSM5",14,0)
 .N DIR,DTOUT,DUOUT,DIROUT S DIR(0)="E" W ! D ^DIR
"RTN","IBCNSM5",15,0)
 ;
"RTN","IBCNSM5",16,0)
 N IBCAB,IBPIB1,IBPAG,IBQUIT,IBW
"RTN","IBCNSM5",17,0)
 S IBPIB1=1,IBW=1
"RTN","IBCNSM5",18,0)
 D GETEN1 I ('($G(IBW)))!(IBYR<(DT-10000)&($G(IBLINE)))!($D(DIRUT)) G WPPCQ
"RTN","IBCNSM5",19,0)
 D DEV
"RTN","IBCNSM5",20,0)
 I $G(IBQUIT) G WPPCQ
"RTN","IBCNSM5",21,0)
DQ ;
"RTN","IBCNSM5",22,0)
 S IBPAG=0,IBHDT=$$HTE^XLFDT($H,1)
"RTN","IBCNSM5",23,0)
 D PR
"RTN","IBCNSM5",24,0)
 D:IBCY GETEN2
"RTN","IBCNSM5",25,0)
 D:IBYR&IBCY PR
"RTN","IBCNSM5",26,0)
 I $E(IOST,1,2)="C-",IBPAG D PAUSE^VALM1 I $D(DIRUT) S IBQUIT=1 Q
"RTN","IBCNSM5",27,0)
WPPCQ I $D(ZTQUEUED) S ZTREQ="@" Q
"RTN","IBCNSM5",28,0)
 D ^%ZISC
"RTN","IBCNSM5",29,0)
 K IBCPOL,IBYR,IBPIB1,IBW
"RTN","IBCNSM5",30,0)
 Q 
"RTN","IBCNSM5",31,0)
PR ; -- set variables needed for file navigation, print insurance worksheet or coverage
"RTN","IBCNSM5",32,0)
 ;
"RTN","IBCNSM5",33,0)
 D SETVAR
"RTN","IBCNSM5",34,0)
 D PRINT
"RTN","IBCNSM5",35,0)
PRQ Q
"RTN","IBCNSM5",36,0)
 ;
"RTN","IBCNSM5",37,0)
GETEN1 ; -- find IEN of most recent policy
"RTN","IBCNSM5",38,0)
 ;
"RTN","IBCNSM5",39,0)
 ;N IBCDFND,IBCDFND1,IBCDFND2
"RTN","IBCNSM5",40,0)
 ;I $G(IBYR)="" S IBYR=DT
"RTN","IBCNSM5",41,0)
 ;I '$G(IBCPOL) S IBCPOL=$P($G(^IBA(355.4,$G(DA),0)),"^",2)
"RTN","IBCNSM5",42,0)
 ;I 'IBCPOL G GETEN1Q
"RTN","IBCNSM5",43,0)
 S IBYR=$O(^IBA(355.4,"APY",IBCPOL,-(DT+.0001))) I IBYR S:IBYR<0 IBYR=-IBYR
"RTN","IBCNSM5",44,0)
 I ('IBYR),'IBLINE D ASK I ($D(DIRUT))!('($G(IBW))) G GETEN1Q
"RTN","IBCNSM5",45,0)
 I $G(IBLINE)&(('IBYR)!(IBYR<(DT-10000))) S IBYR=DT
"RTN","IBCNSM5",46,0)
 S IBCAB="" S IBCAB=$O(^IBA(355.4,"APY",IBCPOL,-IBYR,IBCAB))
"RTN","IBCNSM5",47,0)
 ;W !!,"DATE OF PREVIOUS ENTRY IS "_$$DAT1^IBOUTL(IBYR),!! H 3
"RTN","IBCNSM5",48,0)
 ;I IBYR<(DT-10000),IBLINE S IBYR=DT
"RTN","IBCNSM5",49,0)
 ;I IBYR<(DT-10000),IBLINE W !!,"MOST RECENT ENTRY IS "_$$DAT1^IBOUTL(IBYR)_".  ENTRY CANNOT BE MORE THAN A YEAR OLD.",!!,"YOU MAY PRINT ENTRY UNDER 'PC'.",!! H 4
"RTN","IBCNSM5",50,0)
GETEN1Q Q
"RTN","IBCNSM5",51,0)
 ;
"RTN","IBCNSM5",52,0)
SETVAR ; -- set variables needed for file navigation
"RTN","IBCNSM5",53,0)
 ;
"RTN","IBCNSM5",54,0)
 S IBCDFND=$G(^DPT(DFN,.312,$P(IBPPOL,"^",4),0)),IBCNS=+IBCDFND
"RTN","IBCNSM5",55,0)
 S IBCDFND1=$G(^DPT(DFN,.312,$P(IBPPOL,"^",4),1))
"RTN","IBCNSM5",56,0)
 S IBCDFND2=$G(^DPT(DFN,.312,$P(IBPPOL,"^",4),2))
"RTN","IBCNSM5",57,0)
 S IBCDFNDA=$G(^DIC(36,+IBCDFND,.11))
"RTN","IBCNSM5",58,0)
 S IBCDFNDB=$G(^DIC(36,+IBCDFND,.13))
"RTN","IBCNSM5",59,0)
 S IBCPOL=+$P(IBCDFND,"^",18),IBCNS=+IBCDFND,IBCDFN=$P(IBPPOL,"^",4)
"RTN","IBCNSM5",60,0)
 S IBCPOLD=$G(^IBA(355.3,+$P(IBCDFND,"^",18),0))
"RTN","IBCNSM5",61,0)
 S FILE="^DPT("_DFN_",.312,"
"RTN","IBCNSM5",62,0)
 S IBCBU=$O(^IBA(355.5,"APPY",DFN,IBCPOL,-IBYR,IBCDFN,0))
"RTN","IBCNSM5",63,0)
 S IBCBUD=$G(^IBA(355.5,+IBCBU,0))
"RTN","IBCNSM5",64,0)
 S IBCBUD1=$G(^IBA(355.5,+IBCBU,1))
"RTN","IBCNSM5",65,0)
 S IBCGN=$$GRP^IBCNS(IBCPOL)
"RTN","IBCNSM5",66,0)
 S IBPAT=1
"RTN","IBCNSM5",67,0)
 S IBCABD=$G(^IBA(355.4,+IBCAB,0))
"RTN","IBCNSM5",68,0)
 S IBCABD2=$G(^IBA(355.4,+IBCAB,2))
"RTN","IBCNSM5",69,0)
 S IBCABD3=$G(^IBA(355.4,+IBCAB,3))
"RTN","IBCNSM5",70,0)
 S IBCABD4=$G(^IBA(355.4,+IBCAB,4))
"RTN","IBCNSM5",71,0)
 S IBCABD5=$G(^IBA(355.4,+IBCAB,5))
"RTN","IBCNSM5",72,0)
 Q
"RTN","IBCNSM5",73,0)
 ;
"RTN","IBCNSM5",74,0)
DEV ; -- ask for device
"RTN","IBCNSM5",75,0)
 ;
"RTN","IBCNSM5",76,0)
 W !!,"*** You will need a 132 column printer for this report. ***",!
"RTN","IBCNSM5",77,0)
 S %ZIS="QM" D ^%ZIS I POP S IBQUIT=1 G R1Q
"RTN","IBCNSM5",78,0)
 I $D(IO("Q")) K IO("Q") S IBQUIT=1,ZTRTN="DQ^IBCNSM5",ZTSAVE("IB*")="",ZTSAVE("DFN")="",ZTDESC="INSURANCE MANAGEMENT WORKSHEET" D ^%ZTLOAD K ZTSK D HOME^%ZIS Q
"RTN","IBCNSM5",79,0)
 I $E(IOST,1,2)="C-" D FULL^VALM1
"RTN","IBCNSM5",80,0)
 U IO
"RTN","IBCNSM5",81,0)
R1Q Q
"RTN","IBCNSM5",82,0)
 ;
"RTN","IBCNSM5",83,0)
PRINT ; -- print insurance management worksheet/insurance coverage
"RTN","IBCNSM5",84,0)
 ;
"RTN","IBCNSM5",85,0)
 D PID^VADPT
"RTN","IBCNSM5",86,0)
 D HDR
"RTN","IBCNSM5",87,0)
 D BL1^IBCNSM6,BL2^IBCNSM7,BL3^IBCNSM8,BL4^IBCNSM8,BL5^IBCNSM9,BL6^IBCNSM9,BL7^IBCNSM9
"RTN","IBCNSM5",88,0)
 Q
"RTN","IBCNSM5",89,0)
 ;
"RTN","IBCNSM5",90,0)
HDR ; -- print header
"RTN","IBCNSM5",91,0)
 ;
"RTN","IBCNSM5",92,0)
 I $E(IOST,1,2)["C-",IBPAG D PAUSE^VALM1 I $D(DIRUT) S IBQUIT=1 Q
"RTN","IBCNSM5",93,0)
 W:$E(IOST,1,2)["C-"!($G(IBPAG)) @IOF
"RTN","IBCNSM5",94,0)
 S IBPAG=$G(IBPAG)+1
"RTN","IBCNSM5",95,0)
 W !,$S($G(IBLINE):"INSURANCE MANAGEMENT WORKSHEET",1:"INSURANCE COVERAGE FOR "_$S($G(IBPIB1):"CURRENT ENTRY",1:"NEXT-MOST-CURRENT ENTRY")),?(IOM-30),IBHDT,"  PAGE ",IBPAG
"RTN","IBCNSM5",96,0)
 W !,$TR($J(" ",IOM)," ","_")
"RTN","IBCNSM5",97,0)
 D DEM^VADPT
"RTN","IBCNSM5",98,0)
 W !!,VADM(1),?34,"PT ID:  "_VA("PID"),?79,"DOB:  "_$P(VADM(3),"^",2)
"RTN","IBCNSM5",99,0)
 W !,$E($P($G(^DIC(36,+IBCDFND,0)),"^"),1,28),?31," GROUP #:  ",$$DOL^IBCNSM6(355.3,2.02,$P(IBCPOLD,"^",4),$G(IBLINE))  ;WCJ;IB*2.0*497 changed .04 to 2.02 for new Group# field
"RTN","IBCNSM5",100,0)
 W ?74,"For YEAR:  "_$S($G(IBCAB):$$DAT1^IBOUTL(IBYR),1:"______________")
"RTN","IBCNSM5",101,0)
 W !?30,"Ins. Type:  ",$$DOL^IBCNSM6(355.1,.01,$P($G(^IBE(355.1,+$P(IBCPOLD,"^",9),0)),"^"),$G(IBLINE))
"RTN","IBCNSM5",102,0)
 Q
"RTN","IBCNSM5",103,0)
 ;
"RTN","IBCNSM5",104,0)
GETEN2 ; -- get IEN of next-to-most-recent entry (Print Coverage)
"RTN","IBCNSM5",105,0)
 ;
"RTN","IBCNSM5",106,0)
 S IBYR=$O(^IBA(355.4,"APY",IBCPOL,-IBYR)) I 'IBYR G PR1Q
"RTN","IBCNSM5",107,0)
 S:IBYR<0 IBYR=-IBYR
"RTN","IBCNSM5",108,0)
 S IBCAB="" S IBCAB=$O(^IBA(355.4,"APY",IBCPOL,-IBYR,IBCAB))
"RTN","IBCNSM5",109,0)
 S IBPIB1=0
"RTN","IBCNSM5",110,0)
PR1Q Q
"RTN","IBCNSM5",111,0)
 ;
"RTN","IBCNSM5",112,0)
ASK ; -- if Print Coverage and no benefit years for selected policy, ask if user wants worksheet 
"RTN","IBCNSM5",113,0)
 ;
"RTN","IBCNSM5",114,0)
 W !
"RTN","IBCNSM5",115,0)
 S DIR(0)="YO",DIR("A")="No Benefit Years on File.  Do you want to fill out a worksheet",DIR("B")="No"
"RTN","IBCNSM5",116,0)
 W !
"RTN","IBCNSM5",117,0)
 D ^DIR K DIR I $D(DIRUT) S IBQUIT=1 G ASKQ
"RTN","IBCNSM5",118,0)
 I Y S IBW=1,IBLINE=1,IBCY=0 G ASKQ
"RTN","IBCNSM5",119,0)
 S IBW=0 D PAUSE^VALM1
"RTN","IBCNSM5",120,0)
ASKQ ;
"RTN","IBCNSM5",121,0)
 Q
"RTN","IBCNSMM1")
0^45^B27818840^B25964261
"RTN","IBCNSMM1",1,0)
IBCNSMM1 ;ALB/CMS -MEDICARE INSURANCE INTAKE (CONT) ; 11/8/06 9:32am
"RTN","IBCNSMM1",2,0)
 ;;2.0;INTEGRATED BILLING;**103,359,497**;21-MAR-94;Build 120
"RTN","IBCNSMM1",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNSMM1",4,0)
 ;;(THIS ROUTINE WAS DEACTIVATED VIA PATCH 497...AND SHOULD BE RESEARCHED
"RTN","IBCNSMM1",5,0)
 ;;IF REACTIVATED...REFER TO FIELDS (40.02, 40.03, 60.04, 60.07 OF THE
"RTN","IBCNSMM1",6,0)
 ;;355.33 FILE.)
"RTN","IBCNSMM1",7,0)
 Q
"RTN","IBCNSMM1",8,0)
 ;
"RTN","IBCNSMM1",9,0)
SETP(IBP) ; -- Stuff data fields in patient policy
"RTN","IBCNSMM1",10,0)
 ;  Required Input:
"RTN","IBCNSMM1",11,0)
 ;  IBP =A for Part A, B for Part B
"RTN","IBCNSMM1",12,0)
 ;  DFN =pt. ien
"RTN","IBCNSMM1",13,0)
 ;  IBCDFN =patient policy ien
"RTN","IBCNSMM1",14,0)
 ;  IBNAME =Name of Insured
"RTN","IBCNSMM1",15,0)
 ;  IBHICN =Subscriber ID
"RTN","IBCNSMM1",16,0)
 ;  IBAEFF =Effective Date of Plan A
"RTN","IBCNSMM1",17,0)
 ;  IBBEFF =Effective Date of Plan B
"RTN","IBCNSMM1",18,0)
 ;  IBCNSP =Medicare (WNR) ien ^Part A ien ^Part B ien
"RTN","IBCNSMM1",19,0)
 ;  IBCOBI =Coordination of Benefits (Internal value)
"RTN","IBCNSMM1",20,0)
 ;
"RTN","IBCNSMM1",21,0)
 N D,DA,DIE,DR,IBBDA,X,Y
"RTN","IBCNSMM1",22,0)
 I '$D(^DPT(DFN,.312,+IBCDFN,0)) G SETPQ
"RTN","IBCNSMM1",23,0)
 ;
"RTN","IBCNSMM1",24,0)
 ; -- Stuff the pt. policy fields
"RTN","IBCNSMM1",25,0)
 ;   #2  *Group Number              #.18  Group Plan
"RTN","IBCNSMM1",26,0)
 ;   #6  Whose Ins.                 #.2   COB
"RTN","IBCNSMM1",27,0)
 ;   #8  Effective Date of Policy   #7.02    Sub. ID
"RTN","IBCNSMM1",28,0)
 ;   #15 *Group Name                #7.01   Name of Insured
"RTN","IBCNSMM1",29,0)
 ;   #16 Pt. Relationship to Insured
"RTN","IBCNSMM1",30,0)
 ;
"RTN","IBCNSMM1",31,0)
 S DIE="^DPT("_DFN_",.312,",DA=+IBCDFN,DA(1)=DFN
"RTN","IBCNSMM1",32,0)
 S DR="2///"_$S(IBP="A":$P(IBCNSP,U,4),IBP="B":$P(IBCNSP,U,6),1:"")
"RTN","IBCNSMM1",33,0)
 S DR=DR_";7.01///"_IBNAME_";7.02///"_IBHICN       ; IB*2.0*497 (vd)
"RTN","IBCNSMM1",34,0)
 S DR=DR_";6///v;8///"_$S(IBP="A":$G(IBAEFF),IBP="B":$G(IBBEFF),1:"")
"RTN","IBCNSMM1",35,0)
 S DR=DR_";.2////"_IBCOBI_";15///"_$S(IBP="A":"PART A",IBP="B":"PART B",1:"")
"RTN","IBCNSMM1",36,0)
 S DR=DR_";16///01;.18////"_$S(IBP="A":+$P(IBCNSP,U,3),IBP="B":+$P(IBCNSP,U,5),1:"")
"RTN","IBCNSMM1",37,0)
 D ^DIE
"RTN","IBCNSMM1",38,0)
 ;
"RTN","IBCNSMM1",39,0)
 ;  -- Update Insurance Event
"RTN","IBCNSMM1",40,0)
 S IBCOVP=$P($G(^DPT(DFN,.31)),U,11)
"RTN","IBCNSMM1",41,0)
 D BEFORE^IBCNSEVT S IBNEW=1
"RTN","IBCNSMM1",42,0)
 ;
"RTN","IBCNSMM1",43,0)
 ; -- Ask to Verify at this time
"RTN","IBCNSMM1",44,0)
 K DIR S DIR("A")="Verify Medicare (WNR) Part "_IBP_" Coverage Now"
"RTN","IBCNSMM1",45,0)
 S DIR("?")="Enter 'No' to not Verify Coverage at this time."
"RTN","IBCNSMM1",46,0)
 W ! S IBOK=0 D OK I 'IBOK G SETEV
"RTN","IBCNSMM1",47,0)
 ;
"RTN","IBCNSMM1",48,0)
 ; -- Check to see if Pt. Name = name of Insured
"RTN","IBCNSMM1",49,0)
 I IBNAME'=$P($G(^DPT(DFN,0)),U,1) D
"RTN","IBCNSMM1",50,0)
 .W !!,"WARNING: Patient Name: '"_$P($G(^DPT(DFN,0)),U,1)_"'  DOES NOT MATCH"
"RTN","IBCNSMM1",51,0)
 .W !,"      Name of Insured: '"_IBNAME_"'.",!
"RTN","IBCNSMM1",52,0)
 ;
"RTN","IBCNSMM1",53,0)
 ; -- verify policy
"RTN","IBCNSMM1",54,0)
 S DIE="^DPT("_DFN_",.312,",DA=IBCDFN,DA(1)=DFN
"RTN","IBCNSMM1",55,0)
 S DR="1.03///NOW;1.04////"_DUZ D ^DIE
"RTN","IBCNSMM1",56,0)
 W !,"  PART "_IBP_" COVERAGE VERIFIED."
"RTN","IBCNSMM1",57,0)
 ;
"RTN","IBCNSMM1",58,0)
SETEV ; -- Update Insurance event
"RTN","IBCNSMM1",59,0)
 N X,Y
"RTN","IBCNSMM1",60,0)
 D COVERED^IBCNSM31(DFN,IBCOVP)
"RTN","IBCNSMM1",61,0)
 I $G(IBCDFN)>0,IBNEW=1 D AFTER^IBCNSEVT,^IBCNSEVT
"RTN","IBCNSMM1",62,0)
 ;
"RTN","IBCNSMM1",63,0)
SETPQ Q
"RTN","IBCNSMM1",64,0)
 ;
"RTN","IBCNSMM1",65,0)
 ;
"RTN","IBCNSMM1",66,0)
BUFF(IBP) ; -- Set IBBUF array with policy info for Buffer File
"RTN","IBCNSMM1",67,0)
 ; Return: IBBUF array
"RTN","IBCNSMM1",68,0)
 ;    IBBUF(355.33 field #s)=corresponding policy, plan and company data
"RTN","IBCNSMM1",69,0)
 ;    i.e.  IBBUF(20.01)=Insurance Company Name
"RTN","IBCNSMM1",70,0)
 ;          IBBUF(90.01)=Group Name
"RTN","IBCNSMM1",71,0)
 ;          IBBUF(60.01)=DFN
"RTN","IBCNSMM1",72,0)
 ;
"RTN","IBCNSMM1",73,0)
 ; Input: DFN, IBCNSP, IBNAME, IBHICN, IBAEFF, IBBEFF, IBCOBI
"RTN","IBCNSMM1",74,0)
 ;           
"RTN","IBCNSMM1",75,0)
 ; Auto stuff other fields
"RTN","IBCNSMM1",76,0)
 ;
"RTN","IBCNSMM1",77,0)
 N IBP0 K IBBUF S IBBUF=""
"RTN","IBCNSMM1",78,0)
 S IBBUF(.03)=$G(IBSOUR)
"RTN","IBCNSMM1",79,0)
 S IBBUF(20.01)=$P(IBCNSP,U,2)
"RTN","IBCNSMM1",80,0)
 S IBBUF(90.01)=$S(IBP="A":$P(IBCNSP,U,4),IBP="B":$P(IBCNSP,U,6),1:"")   ; IB*2.0*497 (vd)
"RTN","IBCNSMM1",81,0)
 S IBBUF(90.02)=IBBUF(90.01)           ; IB*2.0*497 (vd)
"RTN","IBCNSMM1",82,0)
 S IBBUF(60.01)=+DFN
"RTN","IBCNSMM1",83,0)
 S IBBUF(60.02)=$S(IBP="A":IBAEFF,IBP="B":IBBEFF,1:"")
"RTN","IBCNSMM1",84,0)
 S IBBUF(90.03)=IBHICN                 ; IB*2.0*497 (vd)
"RTN","IBCNSMM1",85,0)
 S IBBUF(60.05)="v"
"RTN","IBCNSMM1",86,0)
 S IBBUF(60.06)="01"
"RTN","IBCNSMM1",87,0)
 S IBBUF(91.01)=IBNAME                 ; IB*2.0*497 (vd)
"RTN","IBCNSMM1",88,0)
 S IBBUF(60.12)=IBCOBI
"RTN","IBCNSMM1",89,0)
 S IBBDA=$$ADDSTF^IBCNBES(1,DFN,.IBBUF)
"RTN","IBCNSMM1",90,0)
 I +IBBDA W !,?3,$P(IBCNSP,U,2)," PART "_IBP_" entry #"_+IBBDA_" added to Insurance Buffer File."
"RTN","IBCNSMM1",91,0)
 I 'IBBDA W !,*7,?3,"Warning: Could not add new policy Part "_IBP_" in Buffer File.",!,?13,"("_$P(IBBDA,U,2)_")",!
"RTN","IBCNSMM1",92,0)
 Q
"RTN","IBCNSMM1",93,0)
 ;
"RTN","IBCNSMM1",94,0)
OK ; -- ask okay
"RTN","IBCNSMM1",95,0)
 N DTOUT,DIROUT,DIRUT,DUOUT,X,Y
"RTN","IBCNSMM1",96,0)
 ; Returns:
"RTN","IBCNSMM1",97,0)
 ; IBQUIT=1 Exit user timedout
"RTN","IBCNSMM1",98,0)
 ;   IBOK=1 Yes
"RTN","IBCNSMM1",99,0)
 ;   IBOK=0 No
"RTN","IBCNSMM1",100,0)
 S IBQUIT=0,DIR(0)="Y",DIR("B")="YES" W !
"RTN","IBCNSMM1",101,0)
 I $G(DIR("A"))="" S DIR("A")="Is this Data Correct"
"RTN","IBCNSMM1",102,0)
 I $G(DIR("?"))="" S DIR("?")="Enter 'No' to edit Medicare Card information"
"RTN","IBCNSMM1",103,0)
 D ^DIR K DIR
"RTN","IBCNSMM1",104,0)
 I $D(DTOUT) S IBQUIT=1
"RTN","IBCNSMM1",105,0)
 S IBOK=$G(Y) I IBOK["^" S IBQUIT=1
"RTN","IBCNSMM1",106,0)
 Q
"RTN","IBCNSMM1",107,0)
 ;
"RTN","IBCNSMM1",108,0)
GETWNR() ; -- Find and return the MEDICARE (WNR) ien
"RTN","IBCNSMM1",109,0)
 ;         -- Returns Error message or
"RTN","IBCNSMM1",110,0)
 ;            DIC(36 IEN ^"MEDICARE (WNR)"^IBA(355.3 PART A IEN ^"PART A"^ IBA(355.3 PART B IEN ^"PART B"
"RTN","IBCNSMM1",111,0)
 ;
"RTN","IBCNSMM1",112,0)
 N IBWNR,IB0,IBP0,IBQ,IBPQ,IBPX,IBX,IBY,IBPGN
"RTN","IBCNSMM1",113,0)
 S IBY="MEDICARE (WNR)",IBQ=0
"RTN","IBCNSMM1",114,0)
 S IBX=0 F  S IBX=$O(^DIC(36,"B",IBY,IBX)) Q:('IBX)  D  Q:IBQ
"RTN","IBCNSMM1",115,0)
 .S IB0=$G(^DIC(36,IBX,0))
"RTN","IBCNSMM1",116,0)
 .K IBWNR("INS")
"RTN","IBCNSMM1",117,0)
 .I $P(IB0,U,1)'=IBY Q  ;name
"RTN","IBCNSMM1",118,0)
 .I $P(IB0,U,2)'="N" Q  ;Reimb?
"RTN","IBCNSMM1",119,0)
 .;I '$P(IB0,U,3) Q  ;Sig Req.  --> removed edit, cm, 5/18/99
"RTN","IBCNSMM1",120,0)
 .I $P(IB0,U,5) Q  ;Inactive
"RTN","IBCNSMM1",121,0)
 .I $P($G(^IBE(355.2,+$P(IB0,U,13),0)),U)'="MEDICARE" Q  ;Major Cat.
"RTN","IBCNSMM1",122,0)
 .S IBWNR("INS")=IBX_U_IBY
"RTN","IBCNSMM1",123,0)
 .;
"RTN","IBCNSMM1",124,0)
 .; -- Must have Active Group Plan Category Medicare Part A and B
"RTN","IBCNSMM1",125,0)
 .;
"RTN","IBCNSMM1",126,0)
 .K IBWNR("A"),IBWNR("B")
"RTN","IBCNSMM1",127,0)
 .S IBPX=0 F  S IBPX=$O(^IBA(355.3,"B",IBX,IBPX)) Q:('IBPX)!(IBQ)  D
"RTN","IBCNSMM1",128,0)
 ..S IBP0=$G(^IBA(355.3,IBPX,0))
"RTN","IBCNSMM1",129,0)
 ..I $P(IBP0,U,11) Q  ;Inactive
"RTN","IBCNSMM1",130,0)
 ..I $P(IBP0,U,14)'="A",$P(IBP0,U,14)'="B" Q  ;Not Plan Category Part A or B 
"RTN","IBCNSMM1",131,0)
 ..S IBPGN=$TR($P(IBP0,U,3),"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
"RTN","IBCNSMM1",132,0)
 ..I IBPGN'="PART A",IBPGN'="PART B" Q  ;excludes non PART A and PART B plans
"RTN","IBCNSMM1",133,0)
 ..S IBWNR($P(IBP0,U,14))=IBPX_U_$P(IBP0,U,3)
"RTN","IBCNSMM1",134,0)
 ..I $G(IBWNR("A")),$G(IBWNR("B")) S IBQ=1
"RTN","IBCNSMM1",135,0)
 ;
"RTN","IBCNSMM1",136,0)
 S IBX=$G(IBWNR("INS"))_U_$G(IBWNR("A"))_U_$G(IBWNR("B"))
"RTN","IBCNSMM1",137,0)
 I 'IBX S IBX="Error: Standard Medicare (WNR) Insurance Company not setup properly." G GETWNRQ
"RTN","IBCNSMM1",138,0)
 I '$P(IBX,U,3) S IBX="Error: Standard Medicare (WNR) plan PART A not setup properly." G GETWNRQ
"RTN","IBCNSMM1",139,0)
 I '$G(IBWNR("B")) S IBX="Error: Standard Medicare (WNR) plan PART B not setup properly."
"RTN","IBCNSMM1",140,0)
GETWNRQ Q IBX
"RTN","IBCNSOK")
0^59^B26943633^B25432692
"RTN","IBCNSOK",1,0)
IBCNSOK ;ALB/AAS - Patient Insurance consistency checker ; 2/22/93
"RTN","IBCNSOK",2,0)
 ;;2.0;INTEGRATED BILLING;**497**;21-MAR-94;Build 120
"RTN","IBCNSOK",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSOK",4,0)
 ;
"RTN","IBCNSOK",5,0)
% I '$D(DT) D DT^DICRW
"RTN","IBCNSOK",6,0)
 K ^TMP("IBCNS-ERR",$J)
"RTN","IBCNSOK",7,0)
 ;
"RTN","IBCNSOK",8,0)
 W !!,"Check Patient file Insurance Type Group Plan consistency"
"RTN","IBCNSOK",9,0)
 W !!,"I'm going to check the Insurance company for each patient policy with the",!,"Insurance company in the associated Group Plan file."
"RTN","IBCNSOK",10,0)
 W !!,"This will take a while, please queue this job to a device.  I'll print",!,"a report when I'm done.",!!
"RTN","IBCNSOK",11,0)
 ;
"RTN","IBCNSOK",12,0)
UP S IBUPDAT=0
"RTN","IBCNSOK",13,0)
 S DIR(0)="Y",DIR("A")="Update any Inconsistencies",DIR("B")="NO"
"RTN","IBCNSOK",14,0)
 S DIR("?")="Enter YES if you want any inconsistencies updated, enter NO if you just want the report."
"RTN","IBCNSOK",15,0)
 D ^DIR K DIR
"RTN","IBCNSOK",16,0)
 S IBUPDAT=+Y I $D(DIRUT) G END
"RTN","IBCNSOK",17,0)
 ;
"RTN","IBCNSOK",18,0)
DEV W !! S %ZIS="QM" D ^%ZIS G:POP END
"RTN","IBCNSOK",19,0)
 I $D(IO("Q")) K IO("Q") D  G END
"RTN","IBCNSOK",20,0)
 .S ZTRTN="DQ^IBCNSOK",ZTDESC="IB - v2 PATIENT FILE DOUBLE CHECK",ZTIO="",ZTSAVE("IB*")=""
"RTN","IBCNSOK",21,0)
 .W ! D ^%ZTLOAD D HOME^%ZIS
"RTN","IBCNSOK",22,0)
 .I $D(ZTSK) W !,"    Patient file update queued as task ",ZTSK K ZTSK Q
"RTN","IBCNSOK",23,0)
 ;
"RTN","IBCNSOK",24,0)
 D DQ G END
"RTN","IBCNSOK",25,0)
 Q
"RTN","IBCNSOK",26,0)
 ;
"RTN","IBCNSOK",27,0)
END K ^TMP("IBCNS-ERR",$J)
"RTN","IBCNSOK",28,0)
 I $D(ZTQUEUED) S ZTREQ="@" Q
"RTN","IBCNSOK",29,0)
 D ^%ZISC
"RTN","IBCNSOK",30,0)
 K %ZIS,DIRUT,I,J,X,Y,DA,DR,DIC,DIE,DIR,IBCPOL,IBCOPOL2,IBCDFND,NODE,IBI,IBCNTI,IBCNTP,IBCNTPP,IBUPDT,IBCDFN
"RTN","IBCNSOK",31,0)
 Q
"RTN","IBCNSOK",32,0)
 ;
"RTN","IBCNSOK",33,0)
DQ ; -- entry point from task man
"RTN","IBCNSOK",34,0)
 U IO
"RTN","IBCNSOK",35,0)
 S IBQUIT=0
"RTN","IBCNSOK",36,0)
 D NOW^%DTC S IBSPDT=%
"RTN","IBCNSOK",37,0)
 I '$D(ZTQUEUED) D
"RTN","IBCNSOK",38,0)
 .W !!,"    I'll write a dot for each 100 entries"
"RTN","IBCNSOK",39,0)
 .W:IBUPDAT !,"    and a + for each entry updated"
"RTN","IBCNSOK",40,0)
 .W !,"    Start time: " S Y=IBSPDT D DT^DIQ
"RTN","IBCNSOK",41,0)
 N DFN,IBI,IBCPOL,IBCDFND,DA,DR,DIE,DIC,IBCNT,IBCNTP,IBCNTPP,IBCNTI,IBCDFN
"RTN","IBCNSOK",42,0)
 S (IBCNT,IBCNTP,IBCNTPP,IBCNTI,DFN)=0
"RTN","IBCNSOK",43,0)
 ;
"RTN","IBCNSOK",44,0)
 F  S DFN=$O(^DPT(DFN)) Q:'DFN  S IBCNT=IBCNT+1,IBCDFN=0 S:$O(^DPT(DFN,.312,IBCDFN)) IBCNTI=IBCNTI+1 F  S IBCDFN=$O(^DPT(DFN,.312,IBCDFN)) Q:'IBCDFN  D
"RTN","IBCNSOK",45,0)
 .I '$D(ZTQUEUED) W:'(IBCNTPP#100) "."
"RTN","IBCNSOK",46,0)
 .S IBCNTPP=IBCNTPP+1
"RTN","IBCNSOK",47,0)
 .S IBCDFND=$G(^DPT(DFN,.312,IBCDFN,0))
"RTN","IBCNSOK",48,0)
 .I IBCDFND="",$D(^DPT(DFN,.312,IBCDFN)) D ERR3
"RTN","IBCNSOK",49,0)
 .;
"RTN","IBCNSOK",50,0)
 .S IBCPOL=+$G(^IBA(355.3,+$P(IBCDFND,"^",18),0))
"RTN","IBCNSOK",51,0)
 .I '$P(IBCDFND,"^",18) D ERR1 Q  ; no group plan field
"RTN","IBCNSOK",52,0)
 .I +IBCPOL'=+IBCDFND D ERR2 Q  ;   ins. companies don't match
"RTN","IBCNSOK",53,0)
 .Q
"RTN","IBCNSOK",54,0)
 ;
"RTN","IBCNSOK",55,0)
 D REPORT G END
"RTN","IBCNSOK",56,0)
 Q
"RTN","IBCNSOK",57,0)
 ;
"RTN","IBCNSOK",58,0)
ERR1 ; -- no group plan pointer
"RTN","IBCNSOK",59,0)
 S NODE="IBCNS-ERR1" D FIX
"RTN","IBCNSOK",60,0)
 Q
"RTN","IBCNSOK",61,0)
 ;
"RTN","IBCNSOK",62,0)
ERR2 ; -- wrong insurance pointer
"RTN","IBCNSOK",63,0)
 S NODE="IBCNS-ERR2" D FIX
"RTN","IBCNSOK",64,0)
 Q
"RTN","IBCNSOK",65,0)
 ;
"RTN","IBCNSOK",66,0)
ERR3 ; -- dangle insurance node left
"RTN","IBCNSOK",67,0)
 S NODE="IBCNS-ERR3" D SET
"RTN","IBCNSOK",68,0)
 I IBUPDAT K ^DPT(DFN,.312,IBCDFN) W:'$D(ZTQUEUED) "+"
"RTN","IBCNSOK",69,0)
 Q
"RTN","IBCNSOK",70,0)
 ;
"RTN","IBCNSOK",71,0)
FIX ; -- reset pointer correctly
"RTN","IBCNSOK",72,0)
 S IBCPOL2=IBCPOL
"RTN","IBCNSOK",73,0)
 ;
"RTN","IBCNSOK",74,0)
 S IBCPOL=$$CHIP^IBCNSU(IBCDFND)
"RTN","IBCNSOK",75,0)
 Q:'IBCPOL
"RTN","IBCNSOK",76,0)
 Q:+IBCDFND'=+$G(^IBA(355.3,+IBCPOL,0))  ; patient ins. and policy must have same ins. company file.
"RTN","IBCNSOK",77,0)
 S DA=IBCDFN,DA(1)=DFN,DIE="^DPT("_DFN_",.312,"
"RTN","IBCNSOK",78,0)
 S DR="1.09////1;.18////"_IBCPOL
"RTN","IBCNSOK",79,0)
 D:IBUPDAT ^DIE K DA,DR,DIE,DIC W:'$D(ZTQUEUED) "+"
"RTN","IBCNSOK",80,0)
SET S ^TMP("IBCNS-ERR",$J,$P(^DPT(DFN,0),"^"),DFN,IBCDFN)=IBCPOL2_"^"_IBCPOL_"^"_NODE
"RTN","IBCNSOK",81,0)
 Q
"RTN","IBCNSOK",82,0)
 ;
"RTN","IBCNSOK",83,0)
REPORT ; -- Okay now tell us about the errors
"RTN","IBCNSOK",84,0)
 D NOW^%DTC S IBHDT=$$FMTE^XLFDT(%),IBPAG=0
"RTN","IBCNSOK",85,0)
 D HDR
"RTN","IBCNSOK",86,0)
 S NAME="",NODE="IBCNS-ERR"
"RTN","IBCNSOK",87,0)
 I '$D(^TMP(NODE,$J)) W !!,"No Errors Found!" Q
"RTN","IBCNSOK",88,0)
 F  S NAME=$O(^TMP(NODE,$J,NAME)) Q:NAME=""  D
"RTN","IBCNSOK",89,0)
 .S DFN=0 F  S DFN=$O(^TMP(NODE,$J,NAME,DFN)) Q:'DFN  D
"RTN","IBCNSOK",90,0)
 ..S IBCDFN=0 F  S IBCDFN=$O(^TMP(NODE,$J,NAME,DFN,IBCDFN)) Q:'IBCDFN  S IBDATA=^(IBCDFN) D ONE
"RTN","IBCNSOK",91,0)
 Q
"RTN","IBCNSOK",92,0)
 ;
"RTN","IBCNSOK",93,0)
ONE ; -- print one line
"RTN","IBCNSOK",94,0)
 D PID^VADPT
"RTN","IBCNSOK",95,0)
 W !,$E($P($G(^DPT(DFN,0)),"^"),1,16)_" ("_DFN_")"
"RTN","IBCNSOK",96,0)
 W ?25,VA("PID")
"RTN","IBCNSOK",97,0)
 S IBCDFND=$G(^DPT(DFN,.312,IBCDFN,0))
"RTN","IBCNSOK",98,0)
 W ?39,$E($P($G(^DIC(36,+IBCDFND,0)),"^"),1,25)
"RTN","IBCNSOK",99,0)
 S IBCPOLD=$G(^IBA(355.3,+IBDATA,0))
"RTN","IBCNSOK",100,0)
 N IBCPOLD2 ;WCJ;IB*2*497
"RTN","IBCNSOK",101,0)
 S IBCPOLD2=$G(^IBA(355.3,+IBDATA,2)) ;WCJ;IB*2*497
"RTN","IBCNSOK",102,0)
 I +IBCPOLD W ?68,$E($P(IBCPOLD2,"^",2)_"("_$P($G(^DIC(36,+IBCPOLD,0)),"^"),1,33)_")" ;WCJ;IB*2*497
"RTN","IBCNSOK",103,0)
 S IBCPOLD=$G(^IBA(355.3,$P(IBDATA,"^",2),0))
"RTN","IBCNSOK",104,0)
 S IBCPOLD2=$G(^IBA(355.3,$P(IBDATA,"^",2),2)) ;WCJ;IB*2*497
"RTN","IBCNSOK",105,0)
 I +IBCPOLD W ?105,$E($P(IBCPOLD2,"^",2)_"("_$P($G(^DIC(36,+IBCPOLD,0)),"^"),1,20)_")" ;WCJ;IB*2*497
"RTN","IBCNSOK",106,0)
 W ?127,$S($G(IBUPDAT):"YES",1:"NO")
"RTN","IBCNSOK",107,0)
 W !?5,"Error: ",$S($P(IBDATA,"^",3)="IBCNS-ERR1":"Policy is missing group Plan",$P(IBDATA,"^",3)="IBCNS-ERR3":"Dangling insurance node detected",1:"Group Plan is with different insurance company")
"RTN","IBCNSOK",108,0)
 Q
"RTN","IBCNSOK",109,0)
 ;
"RTN","IBCNSOK",110,0)
HDR ; -- Print header
"RTN","IBCNSOK",111,0)
 Q:IBQUIT
"RTN","IBCNSOK",112,0)
 I $E(IOST,1,2)="C-",IBPAG D PAUSE^VALM1 I $D(DIRUT) S IBQUIT=1 Q
"RTN","IBCNSOK",113,0)
 I $E(IOST,1,2)="C-"!(IBPAG) W @IOF
"RTN","IBCNSOK",114,0)
 S IBPAG=IBPAG+1
"RTN","IBCNSOK",115,0)
 W !,"Patients with Incorrect Group Plans",?(IOM-33),"Page ",IBPAG,"  ",IBHDT
"RTN","IBCNSOK",116,0)
 W !,"PATIENT",?25,"PATIENT ID",?39,"INSURANCE CO.",?68,"OLD PLAN",?105,"NEW PLAN",?127,"UPDATED"
"RTN","IBCNSOK",117,0)
 W !,$TR($J(" ",IOM)," ","-")
"RTN","IBCNSOK",118,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD S ZTSTOP=1,IBQUIT=1 W !!,"....task stoped at user request" Q
"RTN","IBCNSOK",119,0)
 Q
"RTN","IBCNSOK1")
0^52^B13344891^B12417789
"RTN","IBCNSOK1",1,0)
IBCNSOK1 ;ALB/AAS - Insurance consisitency stuff ; 2/22/93
"RTN","IBCNSOK1",2,0)
 ;;2.0;INTEGRATED BILLING;**497**;21-MAR-94;Build 120
"RTN","IBCNSOK1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSOK1",4,0)
 ;
"RTN","IBCNSOK1",5,0)
DUPCO(DFN,IBCNS,IBCDFN,IBTALK) ; -- is this a duplicate company for this patient
"RTN","IBCNSOK1",6,0)
 ; -- make this call after selecting a company
"RTN","IBCNSOK1",7,0)
 ; -- input    DFN = patient file pointer (required)
"RTN","IBCNSOK1",8,0)
 ;           IBCNS = new insurance company selected
"RTN","IBCNSOK1",9,0)
 ;          IBCDFN = if added to patient ins type mult is required as enter number in multiple
"RTN","IBCNSOK1",10,0)
 ;          IBTALK = (optional) if defined and true will write messages to current device if not queued
"RTN","IBCNSOK1",11,0)
 ;  -- output      = $p1 - 0 if no other entry 1 if possible dup.
"RTN","IBCNSOK1",12,0)
 ;                   $p2 - 1 if another active entry for same company
"RTN","IBCNSOK1",13,0)
 ;                   $p3 - 1 if same co, same subscriber
"RTN","IBCNSOK1",14,0)
 ;                   $p4 - 1 if same co, same dates
"RTN","IBCNSOK1",15,0)
 ;                   $p5 - 1 if same co, same plan
"RTN","IBCNSOK1",16,0)
 ;                   $p6 - 1 if spouse insurer but not listed
"RTN","IBCNSOK1",17,0)
 ;                   $p7 - 1 if spouse insurer but no employer
"RTN","IBCNSOK1",18,0)
 N IBI,IBJ,IBX,IBY,I,J,X,Y,Z,IBDUP,IBACT,IBCDFND
"RTN","IBCNSOK1",19,0)
 S (I,IBDUP)=0
"RTN","IBCNSOK1",20,0)
 I '$O(^DPT(DFN,.312,0)) G DUPCOQ ; no policies on file, don't bother
"RTN","IBCNSOK1",21,0)
 ;
"RTN","IBCNSOK1",22,0)
 ; -- use b x-ref
"RTN","IBCNSOK1",23,0)
 F  S I=$O(^DPT(DFN,.312,"B",IBCNS,I)) Q:'I  S IBX=$G(^DPT(DFN,.312,I,0)) I $S('$G(IBCDFN):1,I=$G(IBCDFN):0,1:1) D
"RTN","IBCNSOK1",24,0)
 .S IBDUP=1
"RTN","IBCNSOK1",25,0)
 .S IBACT=$$CHK^IBCNS1(IBX,DT,2) I IBACT S $P(IBDUP,"^",2)=1 ; another active entry
"RTN","IBCNSOK1",26,0)
 .I '$G(IBCDFN) Q  ;quit if not stored in dpt
"RTN","IBCNSOK1",27,0)
 .I 'IBACT Q
"RTN","IBCNSOK1",28,0)
 .;
"RTN","IBCNSOK1",29,0)
 .S IBCDFND=$G(^DPT(DFN,.312,+IBCDFN,0)) I IBCDFND=""!(IBCDFND=+IBCDFND) Q
"RTN","IBCNSOK1",30,0)
 .I $P(IBX,"^",6)=$P(IBCDFND,"^",6) S $P(IBDUP,"^",3)=1 ; same whose ins.
"RTN","IBCNSOK1",31,0)
 .I $P(IBX,"^",4)="",$P(IBCDFND,"^",4)="" S $P(IBDUP,"^",4)=1 ; no expiration date
"RTN","IBCNSOK1",32,0)
 .I $P(IBX,"^",8)="",$P(IBCDFND,"^",8)="" S $P(IBDUP,"^",4)=1 ; no effective date
"RTN","IBCNSOK1",33,0)
 .; need to figure out overlapping date logic.  not simple
"RTN","IBCNSOK1",34,0)
 .I $P(IBX,"^",18)=$P(IBCDFND,"^",18) S $P(IBDUP,"^",5)=1 ; same plan
"RTN","IBCNSOK1",35,0)
 .I $P(IBCDFND,"^",6)="s" I $P(^DPT(DFN,0),"^",5)=6!($P(^DPT(DFN,0),"^",5)=7) S $P(IBDUP,"^",6)=1 ; marital status inconsistent
"RTN","IBCNSOK1",36,0)
 .I $P(IBCDFND,"^",6)="s",$P($G(^DPT(DFN,.25)),"^")="" S $P(IBDUP,"^",7)=1
"RTN","IBCNSOK1",37,0)
 I 'IBDUP G DUPCOQ
"RTN","IBCNSOK1",38,0)
 I IBDUP,$G(IBTALK),'$D(ZTQUEUED) D
"RTN","IBCNSOK1",39,0)
 .W !!,*7,"Warning:  Insurance Company selected already on file for this patient."
"RTN","IBCNSOK1",40,0)
 .I $P(IBDUP,"^",2) W !,"          The previous entry is active."
"RTN","IBCNSOK1",41,0)
 .I $P(IBDUP,"^",3) W !,"          The WHOSE INSURANCE are the same."
"RTN","IBCNSOK1",42,0)
 .I $P(IBDUP,"^",4) W !,"          The Effective and Expiration dates may cover overlapping dates."
"RTN","IBCNSOK1",43,0)
 .I $P(IBDUP,"^",5) W !,"          The Group Plans are the same."
"RTN","IBCNSOK1",44,0)
 .I $P(IBDUP,"^",6) W !,"          WHOSE INSURANCE is Spouse, patient marital Status Inconsistent."
"RTN","IBCNSOK1",45,0)
 .I $P(IBDUP,"^",7) W !,"          WHOSE INSURANCE is Spouse but no Employer listed."
"RTN","IBCNSOK1",46,0)
 .Q
"RTN","IBCNSOK1",47,0)
 ;
"RTN","IBCNSOK1",48,0)
DUPCOQ Q IBDUP
"RTN","IBCNSOK1",49,0)
 ;
"RTN","IBCNSOK1",50,0)
DUPPOL(IBCPOL,IBTALK) ; -- is this a duplicate policy for this company
"RTN","IBCNSOK1",51,0)
 N I,J,J2,X,X2,Y,Z,IBDUP,IBCNS     ; IB*2.0*497 (vd)
"RTN","IBCNSOK1",52,0)
 S (I,IBDUP)=0,J=$G(^IBA(366.3,IBCPOL,0)),J2=$G(^(2)),IBCNS=+J    ; IB*2.0*497 (vd)
"RTN","IBCNSOK1",53,0)
 F  S I=$O(^IBA(355.3,"B",IBCNS,I)) Q:'I  I I'=IBCPOL S X=$G(^IBA(355.3,I,0)),X2=$G(^(2)) D    ; IB*2.0*497 (vd)
"RTN","IBCNSOK1",54,0)
 .Q:'$P(X,"^",2)  ;skip individual policies
"RTN","IBCNSOK1",55,0)
 .I $P(J2,"^",1)'="",$P(J2,"^",1)=$P(X2,"^",1) S $P(IBDUP,"^")=1      ; IB*2.0*497 (vd)
"RTN","IBCNSOK1",56,0)
 .I $P(J2,"^",2)'="",$P(J2,"^",2)=$P(X2,"^",2) S $P(IBDUP,"^",2)=1    ; IB*2.0*497 (vd)
"RTN","IBCNSOK1",57,0)
 I IBDUP,$G(IBTALK),'$D(ZTQUEUED) D
"RTN","IBCNSOK1",58,0)
 .I $P(IBDUP,"^",1) W !!,"Warning:  There is another policy with the same Group Name."
"RTN","IBCNSOK1",59,0)
 .I $P(IBDUP,"^",2) W !!,"Warning:  There is another policy with the same Group Number."
"RTN","IBCNSOK1",60,0)
 ;
"RTN","IBCNSOK1",61,0)
DUPPOLQ Q IBDUP
"RTN","IBCNSP")
0^33^B48468493^B42954824
"RTN","IBCNSP",1,0)
IBCNSP ;ALB/AAS - INSURANCE MANAGEMENT - EXPANDED POLICY ;05-MAR-1993
"RTN","IBCNSP",2,0)
 ;;2.0;INTEGRATED BILLING;**6,28,43,52,85,251,363,371,416,497**;21-MAR-94;Build 120
"RTN","IBCNSP",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSP",4,0)
% ;
"RTN","IBCNSP",5,0)
EN ; -- main entry point for IBCNS EXPANDED POLICY
"RTN","IBCNSP",6,0)
 N IB1ST
"RTN","IBCNSP",7,0)
 K VALMQUIT,IBPPOL
"RTN","IBCNSP",8,0)
 S IBTOP="IBCNSP"
"RTN","IBCNSP",9,0)
 D EN^VALM("IBCNS EXPANDED POLICY")
"RTN","IBCNSP",10,0)
 Q
"RTN","IBCNSP",11,0)
 ;
"RTN","IBCNSP",12,0)
HDR ; -- header code
"RTN","IBCNSP",13,0)
 N W,X,Y,Z
"RTN","IBCNSP",14,0)
 S VALMHDR(1)="Expanded Policy Information for: "_$E($P(^DPT(DFN,0),U),1,20)_"  "_$P($$PT^IBEFUNC(DFN),U,2)
"RTN","IBCNSP",15,0)
 S Z=$G(^DPT(DFN,.312,+$P(IBPPOL,U,4),0))
"RTN","IBCNSP",16,0)
 S W=$P($G(^IBA(355.3,+$P(Z,U,18),0)),U,11)
"RTN","IBCNSP",17,0)
 S Y=$E($P($G(^DIC(36,+Z,0)),U),1,20)_" Insurance Company"
"RTN","IBCNSP",18,0)
 S X="** Plan Currently "_$S(W:"Ina",1:"A")_"ctive **"
"RTN","IBCNSP",19,0)
 S VALMHDR(2)=$$SETSTR^VALM1(X,Y,48,29)
"RTN","IBCNSP",20,0)
 Q
"RTN","IBCNSP",21,0)
 ;
"RTN","IBCNSP",22,0)
INIT ; -- init variables and list array
"RTN","IBCNSP",23,0)
 K VALMQUIT
"RTN","IBCNSP",24,0)
 S VALMCNT=0,VALMBG=1
"RTN","IBCNSP",25,0)
 I '$D(IBPPOL) D PPOL Q:$D(VALMQUIT)
"RTN","IBCNSP",26,0)
 K ^TMP("IBCNSVP",$J)
"RTN","IBCNSP",27,0)
 D BLD,HDR
"RTN","IBCNSP",28,0)
 Q
"RTN","IBCNSP",29,0)
 ;
"RTN","IBCNSP",30,0)
BLD ; -- list builder
"RTN","IBCNSP",31,0)
 K ^TMP("IBCNSVP",$J),^TMP("IBCNSVPDX",$J)
"RTN","IBCNSP",32,0)
 D KILL^VALM10()
"RTN","IBCNSP",33,0)
 N IBCDFND,IBCDFND1,IBCDFND2,IBCDFND4,IBCDFND5,IBCDFND7
"RTN","IBCNSP",34,0)
 S IBCDFND=$G(^DPT(DFN,.312,$P(IBPPOL,U,4),0)),IBCDFND1=$G(^(1)),IBCDFND2=$G(^(2)),IBCDFND4=$G(^(4)),IBCDFND5=$G(^(5)),IBCDFND7=$G(^(7))
"RTN","IBCNSP",35,0)
 S IBCPOL=+$P(IBCDFND,U,18),IBCNS=+IBCDFND,IBCDFN=$P(IBPPOL,U,4)
"RTN","IBCNSP",36,0)
 S IBCPOLD=$G(^IBA(355.3,+$P(IBCDFND,U,18),0)),IBCPOLD1=$G(^(1))
"RTN","IBCNSP",37,0)
 S IBCPOLD2=$G(^IBA(355.3,+$G(IBCPOL),6)) ;; Daou/EEN adding BIN and PCN
"RTN","IBCNSP",38,0)
 S IBCPOLDL=$G(^IBA(355.3,+$G(IBCPOL),2))  ;IB*2*497  new group name and group number locations
"RTN","IBCNSP",39,0)
 ;
"RTN","IBCNSP",40,0)
 D INS^IBCNSP0                      ; insurance company
"RTN","IBCNSP",41,0)
 D POLICY^IBCNSP0                   ; plan information
"RTN","IBCNSP",42,0)
 D UR                               ; utilization review info
"RTN","IBCNSP",43,0)
 D EFFECT                           ; effective dates & source of info
"RTN","IBCNSP",44,0)
 D SUBSC^IBCNSP01                   ; subscriber info
"RTN","IBCNSP",45,0)
 D EMP                              ; subscriber's employer info
"RTN","IBCNSP",46,0)
 D PRV^IBCNSP01                     ; subscriber's provider contact info ;IB*2*497
"RTN","IBCNSP",47,0)
 D SPON^IBCNSP0                     ; insured person's info
"RTN","IBCNSP",48,0)
 D ID^IBCNSP01                      ; ins co ID numbers (IB*2*371)
"RTN","IBCNSP",49,0)
 D PLIM                             ; plan coverage limitations
"RTN","IBCNSP",50,0)
 D VER^IBCNSP01                     ; user/verifier/editor info
"RTN","IBCNSP",51,0)
 D CONTACT^IBCNSP0                  ; last insurance contact
"RTN","IBCNSP",52,0)
 D COMMENT                          ; comments - policy & plan
"RTN","IBCNSP",53,0)
 D RIDER^IBCNSP01                   ; policy rider info
"RTN","IBCNSP",54,0)
 ;
"RTN","IBCNSP",55,0)
 S VALMCNT=+$O(^TMP("IBCNSVP",$J,""),-1)
"RTN","IBCNSP",56,0)
 Q
"RTN","IBCNSP",57,0)
 ;
"RTN","IBCNSP",58,0)
COMMENT ; -- Comment region
"RTN","IBCNSP",59,0)
 N START,OFFSET,IBL,IBI
"RTN","IBCNSP",60,0)
 S (START,IBL)=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSP",61,0)
 S IB1ST("COMMENT")=START
"RTN","IBCNSP",62,0)
 D SET(START,OFFSET," Comment -- Patient Policy ",IORVON,IORVOFF)
"RTN","IBCNSP",63,0)
 S IBL=IBL+1
"RTN","IBCNSP",64,0)
 D SET(IBL,OFFSET,$S($P(IBCDFND1,U,8)="":"None",1:$P(IBCDFND1,U,8)))
"RTN","IBCNSP",65,0)
 S IBL=IBL+1
"RTN","IBCNSP",66,0)
 D SET(IBL,OFFSET," ")
"RTN","IBCNSP",67,0)
 S IBL=IBL+1
"RTN","IBCNSP",68,0)
 D SET(IBL,OFFSET," Comment -- Group Plan ",IORVON,IORVOFF)
"RTN","IBCNSP",69,0)
 S IBI=0 F  S IBI=$O(^IBA(355.3,+IBCPOL,11,IBI)) Q:IBI<1  D
"RTN","IBCNSP",70,0)
 . S IBL=IBL+1
"RTN","IBCNSP",71,0)
 . D SET(IBL,OFFSET,"  "_$E($G(^IBA(355.3,+IBCPOL,11,IBI,0)),1,80))
"RTN","IBCNSP",72,0)
 . Q
"RTN","IBCNSP",73,0)
 S IBL=IBL+1 D SET(IBL,OFFSET," ")
"RTN","IBCNSP",74,0)
 S IBL=IBL+1 D SET(IBL,OFFSET," ")
"RTN","IBCNSP",75,0)
 Q
"RTN","IBCNSP",76,0)
 ;
"RTN","IBCNSP",77,0)
EFFECT ; -- Effective date region
"RTN","IBCNSP",78,0)
 N START,OFFSET
"RTN","IBCNSP",79,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)-6  ;ib*2*497 lines need to be displayed alongside UR region
"RTN","IBCNSP",80,0)
 S OFFSET=45
"RTN","IBCNSP",81,0)
 D SET(START,OFFSET-4," Effective Dates & Source ",IORVON,IORVOFF)
"RTN","IBCNSP",82,0)
 D SET(START+1,OFFSET," Effective Date: "_$$DAT1^IBOUTL($P(IBCDFND,U,8)))
"RTN","IBCNSP",83,0)
 D SET(START+2,OFFSET,"Expiration Date: "_$$DAT1^IBOUTL($P(IBCDFND,U,4)))
"RTN","IBCNSP",84,0)
 D SET(START+3,OFFSET," Source of Info: "_$$EXPAND^IBTRE(2.312,1.09,$P($G(IBCDFND1),U,9)))
"RTN","IBCNSP",85,0)
 D SET(START+4,OFFSET-4,"Policy Not Billable: "_$S($P($G(^DPT(DFN,.312,IBCDFN,3)),"^",4):"YES",1:"NO"))
"RTN","IBCNSP",86,0)
 Q
"RTN","IBCNSP",87,0)
 ;
"RTN","IBCNSP",88,0)
UR ; -- UR of insurance region
"RTN","IBCNSP",89,0)
 N START,OFFSET
"RTN","IBCNSP",90,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2  ;IB*2*497
"RTN","IBCNSP",91,0)
 D SET(START,OFFSET," Utilization Review Info ",IORVON,IORVOFF)
"RTN","IBCNSP",92,0)
 D SET(START+1,OFFSET,"         Require UR: "_$$EXPAND^IBTRE(355.3,.05,$P(IBCPOLD,U,5)))
"RTN","IBCNSP",93,0)
 D SET(START+2,OFFSET,"   Require Amb Cert: "_$$EXPAND^IBTRE(355.3,.12,$P(IBCPOLD,U,12)))
"RTN","IBCNSP",94,0)
 D SET(START+3,OFFSET,"   Require Pre-Cert: "_$$EXPAND^IBTRE(355.3,.06,$P(IBCPOLD,U,6)))
"RTN","IBCNSP",95,0)
 D SET(START+4,OFFSET,"   Exclude Pre-Cond: "_$$EXPAND^IBTRE(355.3,.07,$P(IBCPOLD,U,7)))
"RTN","IBCNSP",96,0)
 D SET(START+5,OFFSET,"Benefits Assignable: "_$$EXPAND^IBTRE(355.3,.08,$P(IBCPOLD,U,8)))
"RTN","IBCNSP",97,0)
 D SET(START+6,2," ")
"RTN","IBCNSP",98,0)
 Q
"RTN","IBCNSP",99,0)
EMP ; -- Insurance Employer Region   
"RTN","IBCNSP",100,0)
 ; ib*2*497 move employer lines around
"RTN","IBCNSP",101,0)
 N OFFSET,START,IBADD,COL2
"RTN","IBCNSP",102,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSP",103,0)
 D SET(START,OFFSET," Subscriber's Employer Information ",IORVON,IORVOFF)
"RTN","IBCNSP",104,0)
 D SET(START+1,OFFSET,$$RJ^XLFSTR(" Employment Status: ",20)_$$EXPAND^IBTRE(2.312,2.11,$P(IBCDFND2,U,11)))
"RTN","IBCNSP",105,0)
 S COL2=START+1
"RTN","IBCNSP",106,0)
 D SET(START+2,OFFSET,$$RJ^XLFSTR("Employer: ",20)_$P(IBCDFND2,U,9))
"RTN","IBCNSP",107,0)
 D SET(START+3,OFFSET,$$RJ^XLFSTR("Street: ",20)_$P(IBCDFND2,U,2)) S IBADD=1
"RTN","IBCNSP",108,0)
 I $P(IBCDFND2,U,3)'="" D SET(START+4,OFFSET,$$RJ^XLFSTR("Street 2: ",20)_$P(IBCDFND2,U,3)) S IBADD=2
"RTN","IBCNSP",109,0)
 I $P(IBCDFND2,U,4)'="" D SET(START+5,OFFSET,$$RJ^XLFSTR("Street 3: ",20)_$P(IBCDFND2,U,4)) S IBADD=3
"RTN","IBCNSP",110,0)
 D SET(START+3+IBADD,OFFSET,$$RJ^XLFSTR("City/State: ",20)_$E($P(IBCDFND2,U,5),1,15)_$S($P(IBCDFND2,U,5)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCDFND2,U,6),0)),U,2)_" "_$E($P(IBCDFND2,U,7),1,5))
"RTN","IBCNSP",111,0)
 D SET(START+4+IBADD,OFFSET,$$RJ^XLFSTR("Phone: ",20)_$P(IBCDFND2,U,8))
"RTN","IBCNSP",112,0)
 D SET(START+5+IBADD,OFFSET," ")  ; ib*2*497  only 1 blank line to end the section
"RTN","IBCNSP",113,0)
 ;
"RTN","IBCNSP",114,0)
 S START=COL2,OFFSET=40
"RTN","IBCNSP",115,0)
 D SET(START,OFFSET,"Emp Sponsored Plan: "_$S(+$P(IBCDFND2,U,10):"Yes",1:"No"))
"RTN","IBCNSP",116,0)
 D SET(START+1,OFFSET,"Claims to Employer: "_$S(+IBCDFND2:"Yes, Send to Employer",1:"No, Send to Insurance Company"))
"RTN","IBCNSP",117,0)
 D SET(START+2,OFFSET,"   Retirement Date: "_$$DAT1^IBOUTL($P(IBCDFND2,U,12)))
"RTN","IBCNSP",118,0)
 ;
"RTN","IBCNSP",119,0)
EMPQ Q
"RTN","IBCNSP",120,0)
 ;
"RTN","IBCNSP",121,0)
PLIM ; plan coverage limitations/plan limitation category display
"RTN","IBCNSP",122,0)
 N START,END S START=$O(^TMP("IBCNSVP",$J,""),-1)+1
"RTN","IBCNSP",123,0)
 S IB1ST("PLIM")=START
"RTN","IBCNSP",124,0)
 D LIMBLD^IBCNSC41(START,2)
"RTN","IBCNSP",125,0)
 S END=$O(^TMP("IBCNSVP",$J,""),-1)  ; last line constructed
"RTN","IBCNSP",126,0)
 D SET(END+1,2," ")    ; 2 blank lines to end this section
"RTN","IBCNSP",127,0)
 D SET(END+2,2," ")
"RTN","IBCNSP",128,0)
PLIMX ;
"RTN","IBCNSP",129,0)
 Q
"RTN","IBCNSP",130,0)
 ; 
"RTN","IBCNSP",131,0)
HELP ; -- help code
"RTN","IBCNSP",132,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBCNSP",133,0)
 Q
"RTN","IBCNSP",134,0)
 ;
"RTN","IBCNSP",135,0)
EXIT ; -- exit code
"RTN","IBCNSP",136,0)
 K IBPPOL,VALMQUIT,IBCNS,IBCDFN,IBCPOL,IBCPOLD,IBCPOLD1,IBCPOLD2,IBCPOLDL,IBCDFND,IBCDFND1,IBCDFND2,IBVPCLBG,IBVPCLEN
"RTN","IBCNSP",137,0)
 D CLEAN^VALM10,CLEAR^VALM1
"RTN","IBCNSP",138,0)
 Q
"RTN","IBCNSP",139,0)
 ;
"RTN","IBCNSP",140,0)
EXPND ; -- expand code
"RTN","IBCNSP",141,0)
 Q
"RTN","IBCNSP",142,0)
 ;
"RTN","IBCNSP",143,0)
PPOL ; -- select patient, select policy
"RTN","IBCNSP",144,0)
 I '$D(DFN) D  G:$D(VALMQUIT) PPOLQ
"RTN","IBCNSP",145,0)
 .S DIC="^DPT(",DIC(0)="AEQMN" D ^DIC
"RTN","IBCNSP",146,0)
 .S DFN=+Y
"RTN","IBCNSP",147,0)
 I $G(DFN)<1 S VALMQUIT="" G PPOLQ
"RTN","IBCNSP",148,0)
 ;
"RTN","IBCNSP",149,0)
 I '$O(^DPT(DFN,.312,0)) W !!,"Patient doesn't have Insurance" K DFN G PPOL
"RTN","IBCNSP",150,0)
 ;
"RTN","IBCNSP",151,0)
 S DIC="^DPT("_DFN_",.312,",DIC(0)="AEQMN",DIC("A")="Select Patient Policy: "
"RTN","IBCNSP",152,0)
 D ^DIC I +Y<1 S VALMQUIT=""
"RTN","IBCNSP",153,0)
 G:$D(VALMQUIT) PPOLQ
"RTN","IBCNSP",154,0)
 S IBPPOL="^2^"_DFN_U_+Y_U_$G(^DPT(DFN,.312,+Y,0))
"RTN","IBCNSP",155,0)
PPOLQ K DIC Q
"RTN","IBCNSP",156,0)
 ;
"RTN","IBCNSP",157,0)
BLANK(LINE) ; -- Build blank line
"RTN","IBCNSP",158,0)
 D SET^VALM10(.LINE,$J("",80))
"RTN","IBCNSP",159,0)
 Q
"RTN","IBCNSP",160,0)
 ;
"RTN","IBCNSP",161,0)
SET(LINE,COL,TEXT,ON,OFF) ; -- set display info in array
"RTN","IBCNSP",162,0)
 I '$D(@VALMAR@(LINE,0)) D BLANK(.LINE) S VALMCNT=$G(VALMCNT)+1
"RTN","IBCNSP",163,0)
 D SET^VALM10(.LINE,$$SETSTR^VALM1(.TEXT,@VALMAR@(LINE,0),.COL,$L(TEXT)))
"RTN","IBCNSP",164,0)
 D:$G(ON)]""!($G(OFF)]"") CNTRL^VALM10(.LINE,.COL,$L(TEXT),$G(ON),$G(OFF))
"RTN","IBCNSP",165,0)
 W:'(LINE#5) "."
"RTN","IBCNSP",166,0)
 Q
"RTN","IBCNSP",167,0)
 ;
"RTN","IBCNSP0")
0^34^B37737467^B34211643
"RTN","IBCNSP0",1,0)
IBCNSP0 ;ALB/AAS - INSURANCE MANAGEMENT - EXPANDED POLICY ;05-MAR-1993
"RTN","IBCNSP0",2,0)
 ;;2.0;INTEGRATED BILLING;**28,43,52,85,93,103,137,229,251,363,371,399,438,458,497**;21-MAR-94;Build 120
"RTN","IBCNSP0",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSP0",4,0)
 ;
"RTN","IBCNSP0",5,0)
 ;
"RTN","IBCNSP0",6,0)
CONTACT ; -- Insurance Contact Information
"RTN","IBCNSP0",7,0)
 N OFFSET,START
"RTN","IBCNSP0",8,0)
 ;
"RTN","IBCNSP0",9,0)
 ; The start of this section is designed to start on the same line
"RTN","IBCNSP0",10,0)
 ; as the User Information section (see VER^IBCNSP01).
"RTN","IBCNSP0",11,0)
 ;
"RTN","IBCNSP0",12,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)-8
"RTN","IBCNSP0",13,0)
 S IB1ST("CONTACT")=START
"RTN","IBCNSP0",14,0)
 S OFFSET=42
"RTN","IBCNSP0",15,0)
 N IBTRC,IBTRCD,IBTCOD,IBCREFN
"RTN","IBCNSP0",16,0)
 S IBTCOD=$O(^IBE(356.11,"ACODE",85,0))
"RTN","IBCNSP0",17,0)
 ;
"RTN","IBCNSP0",18,0)
 S IBTRC=0,IBTRCD="",IBCREFN=""
"RTN","IBCNSP0",19,0)
 F  S IBTRC=$O(^IBT(356.2,"D",DFN,IBTRC)) Q:'IBTRC  D
"RTN","IBCNSP0",20,0)
 .Q:$P($G(^IBT(356.2,+IBTRC,1)),"^",5)'=IBCDFN  ; must be same policy
"RTN","IBCNSP0",21,0)
 .Q:$P($G(^IBT(356.2,+IBTRC,0)),"^",4)'=IBTCOD  ; must be ins. ver. type
"RTN","IBCNSP0",22,0)
 .S IBTRCD=$G(^IBT(356.2,+IBTRC,0)),IBCREFN=$P($G(^IBT(356.2,+IBTRC,2)),U,1)
"RTN","IBCNSP0",23,0)
 ;
"RTN","IBCNSP0",24,0)
 D SET(START,OFFSET," Insurance Contact (last) ",IORVON,IORVOFF)
"RTN","IBCNSP0",25,0)
 D SET(START+1,OFFSET," Person Contacted: "_$$EXPAND^IBTRE(356.2,.06,$P(IBTRCD,"^",6)))
"RTN","IBCNSP0",26,0)
 D SET(START+2,OFFSET,"Method of Contact: "_$$EXPAND^IBTRE(356.2,.17,$P(IBTRCD,"^",17)))
"RTN","IBCNSP0",27,0)
 D SET(START+3,OFFSET,"  Contact's Phone: "_$$EXPAND^IBTRE(356.2,.07,$P(IBTRCD,"^",7)))
"RTN","IBCNSP0",28,0)
 D SET(START+4,OFFSET,"    Call Ref. No.: "_$E(IBCREFN,1,19)_$S($L(IBCREFN)>19:"*",1:""))
"RTN","IBCNSP0",29,0)
 D SET(START+5,OFFSET,"     Contact Date: "_$$EXPAND^IBTRE(356.2,.01,$P(IBTRCD,"^")))
"RTN","IBCNSP0",30,0)
 ; no blank lines here because the User Information section is on the
"RTN","IBCNSP0",31,0)
 ; left and it is bigger than this section
"RTN","IBCNSP0",32,0)
 Q
"RTN","IBCNSP0",33,0)
 ;
"RTN","IBCNSP0",34,0)
POLICY ; -- Policy Region
"RTN","IBCNSP0",35,0)
 ; -- if pointer to policy file exists get data from policy file
"RTN","IBCNSP0",36,0)
 N OFFSET,START,IBP,IBX,IBPLNID,IBPLNNM,IBPLNNA,IBPLNLA
"RTN","IBCNSP0",37,0)
 S (IBPLNID,IBPLNNM,IBPLNNA,IBPLNLA)=""
"RTN","IBCNSP0",38,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSP0",39,0)
 D GPLAN(+IBCPOLD2)
"RTN","IBCNSP0",40,0)
 D SET(START,OFFSET," Plan Information ",IORVON,IORVOFF)
"RTN","IBCNSP0",41,0)
 D SET(START+1,OFFSET,"   Is Group Plan: "_$S($P(IBCPOLD,"^",2)=1:"YES",1:"NO"))
"RTN","IBCNSP0",42,0)
 D SET(START+2,OFFSET,"      Group Name: "_$E($P(IBCPOLDL,"^"),1,58))
"RTN","IBCNSP0",43,0)
 S IBX=3
"RTN","IBCNSP0",44,0)
 I $TR($E($P(IBCPOLD2,"^"),59,80)," ","")'="" D SET(START+IBX,OFFSET,$$REPEAT^XLFSTR(" ",18)_$E($P(IBCPOLD2,"^"),59,80)) S IBX=IBX+1
"RTN","IBCNSP0",45,0)
 D SET(START+IBX,OFFSET,"    Group Number: "_$P(IBCPOLDL,"^",2)) S IBX=IBX+1
"RTN","IBCNSP0",46,0)
 D SET(START+IBX,OFFSET,"             BIN: "_$P(IBCPOLD2,"^",2)) S IBX=IBX+1
"RTN","IBCNSP0",47,0)
 D SET(START+IBX,OFFSET,"             PCN: "_$P(IBCPOLD2,"^",3)) S IBX=IBX+1
"RTN","IBCNSP0",48,0)
 D SET(START+IBX,OFFSET,"    Type of Plan: "_$E($P($G(^IBE(355.1,+$P(IBCPOLD,"^",9),0)),"^"),1,23)) S IBX=IBX+1
"RTN","IBCNSP0",49,0)
 I $P(IBCPOLD,U,14)]"" D SET(START+IBX,OFFSET,"   Plan Category: "_$$EXPAND^IBTRE(355.3,.14,$P(IBCPOLD,"^",14))) S IBX=IBX+1
"RTN","IBCNSP0",50,0)
 I $P(IBCPOLD,U,15)]"" D SET(START+IBX,OFFSET," Electronic Type: "_$$EXPAND^IBTRE(355.3,.15,$P(IBCPOLD,"^",15))) S IBX=IBX+1
"RTN","IBCNSP0",51,0)
 D SET(START+IBX,OFFSET,"  Plan Filing TF: "_$P(IBCPOLD,"^",13)_$S($P(IBCPOLD,U,16):" ("_$$FTFN^IBCNSU31(IBCPOL)_")",1:"")) S IBX=IBX+1
"RTN","IBCNSP0",52,0)
 ;
"RTN","IBCNSP0",53,0)
 D SET(START+IBX,OFFSET,"      ePharmacy Plan ID: "_IBPLNID) S IBX=IBX+1
"RTN","IBCNSP0",54,0)
 D SET(START+IBX,OFFSET,"    ePharmacy Plan Name: "_IBPLNNM) S IBX=IBX+1
"RTN","IBCNSP0",55,0)
 D SET(START+IBX,OFFSET,"  ePharmacy Natl Status: "_IBPLNNA) S IBX=IBX+1
"RTN","IBCNSP0",56,0)
 D SET(START+IBX,OFFSET," ePharmacy Local Status: "_IBPLNLA) S IBX=IBX+1
"RTN","IBCNSP0",57,0)
 D SET(START+IBX,OFFSET," ")
"RTN","IBCNSP0",58,0)
 ;
"RTN","IBCNSP0",59,0)
 ; -- in case pointer is missing
"RTN","IBCNSP0",60,0)
 I '$G(^IBA(355.3,+$P(IBCDFND,"^",18),0)) D
"RTN","IBCNSP0",61,0)
 .D SET(START+1,OFFSET,"Insurance Number: "_$P(IBCDFND,"^",2))
"RTN","IBCNSP0",62,0)
 .D SET(START+2,OFFSET,"      Group Name: "_$P(IBCDFND,"^",15))
"RTN","IBCNSP0",63,0)
 .D SET(START+3,OFFSET,"    Group Number: "_$P(IBCDFND,"^",3))
"RTN","IBCNSP0",64,0)
 .Q
"RTN","IBCNSP0",65,0)
 Q
"RTN","IBCNSP0",66,0)
 ;
"RTN","IBCNSP0",67,0)
INS ; -- Insurance Co. Region  ;IB*2*497 offset changed to display starting at offset 2
"RTN","IBCNSP0",68,0)
 N OFFSET,START,IBADD,IBCDFNDA,IBCDFNDB
"RTN","IBCNSP0",69,0)
 S START=1,OFFSET=2
"RTN","IBCNSP0",70,0)
 D SET(START,OFFSET," Insurance Company ",IORVON,IORVOFF)
"RTN","IBCNSP0",71,0)
 D SET(START+1,OFFSET,"   Company: "_$P($G(^DIC(36,+IBCDFND,0)),"^"))
"RTN","IBCNSP0",72,0)
 S IBCDFNDA=$G(^DIC(36,+IBCDFND,.11)),IBCDFNDB=$G(^(.13))
"RTN","IBCNSP0",73,0)
 G:IBCDFNDA="" INSQ
"RTN","IBCNSP0",74,0)
 D SET(START+2,OFFSET,"    Street: "_$P(IBCDFNDA,"^")) S IBADD=1
"RTN","IBCNSP0",75,0)
 I $P(IBCDFNDA,"^",2)'="" D SET(START+3,OFFSET,"  Street 2: "_$P(IBCDFNDA,"^",2)) S IBADD=2
"RTN","IBCNSP0",76,0)
 I $P(IBCDFNDA,"^",3)'="" D SET(START+4,OFFSET,"  Street 3: "_$P(IBCDFNDA,"^",3)) S IBADD=3
"RTN","IBCNSP0",77,0)
 D SET(START+2+IBADD,OFFSET,"City/State: "_$E($P(IBCDFNDA,"^",4),1,15)_$S($P(IBCDFNDA,"^",4)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCDFNDA,"^",5),0)),"^",2)_" "_$E($P(IBCDFNDA,"^",6),1,5))
"RTN","IBCNSP0",78,0)
 D SET(START+3+IBADD,OFFSET,"Billing Ph: "_$P(IBCDFNDB,"^",2))
"RTN","IBCNSP0",79,0)
 D SET(START+4+IBADD,OFFSET,"Precert Ph: "_$$PHONE^IBCNSC01(IBCDFNDB))
"RTN","IBCNSP0",80,0)
 D SET(START+5+IBADD,OFFSET," ")
"RTN","IBCNSP0",81,0)
 ;
"RTN","IBCNSP0",82,0)
INSQ Q
"RTN","IBCNSP0",83,0)
 ;
"RTN","IBCNSP0",84,0)
SPON ; -- Sponsor (Insured Person) Region  ;IB*2*497  rearrange lines and move all lines into a single column
"RTN","IBCNSP0",85,0)
 N IBC3,IBZIP,START,OFFSET,IBA,DA,DR,DIC,DIQ
"RTN","IBCNSP0",86,0)
 S IBC3=$G(^DPT(DFN,.312,IBCDFN,3))
"RTN","IBCNSP0",87,0)
 S DA=+$P(IBC3,"^",2),DR=.01,DIQ(0)="E",DIC="^DIC(23,",DIQ="IBA" D EN^DIQ1
"RTN","IBCNSP0",88,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSP0",89,0)
 D SET(START,OFFSET," Insured Person's Information (use Subscriber Update Action) ",IORVON,IORVOFF)
"RTN","IBCNSP0",90,0)
 D SET(START+1,OFFSET,$$RJ^XLFSTR("Insured's DOB: ",18)_$$DAT3^IBOUTL($P(IBC3,"^")))
"RTN","IBCNSP0",91,0)
 S Y=$P(IBC3,"^",10) D ZIPOUT^VAFADDR S IBZIP=Y
"RTN","IBCNSP0",92,0)
 D SET(START+2,OFFSET,$$RJ^XLFSTR("Str 1: ",18)_$P(IBC3,"^",6))
"RTN","IBCNSP0",93,0)
 D SET(START+3,OFFSET,$$RJ^XLFSTR("Str 2: ",18)_$P(IBC3,"^",7))
"RTN","IBCNSP0",94,0)
 D SET(START+4,OFFSET,$$RJ^XLFSTR("City: ",18)_$P(IBC3,"^",8))
"RTN","IBCNSP0",95,0)
 D SET(START+5,OFFSET,$$RJ^XLFSTR("St/Zip: ",18)_$P($G(^DIC(5,+$P(IBC3,"^",9),0)),"^",2)_"  "_IBZIP)
"RTN","IBCNSP0",96,0)
 D SET(START+6,OFFSET,$$RJ^XLFSTR("SubDiv: ",18)_$P(IBC3,"^",14))
"RTN","IBCNSP0",97,0)
 D SET(START+7,OFFSET,$$RJ^XLFSTR("Country: ",18)_$P(IBC3,"^",13))
"RTN","IBCNSP0",98,0)
 D SET(START+8,OFFSET,$$RJ^XLFSTR("Phone: ",18)_$P(IBC3,"^",11))
"RTN","IBCNSP0",99,0)
 D SET(START+9,OFFSET,$$RJ^XLFSTR("Insured's Sex: ",18)_$$EXTERNAL^DILFD(2.312,3.12,,$P(IBC3,U,12)))
"RTN","IBCNSP0",100,0)
 D SET(START+10,OFFSET,$$RJ^XLFSTR("Insured's Branch: ",18)_$G(IBA(23,DA,.01,"E")))
"RTN","IBCNSP0",101,0)
 D SET(START+11,OFFSET,$$RJ^XLFSTR("Insured's Rank: ",18)_$P(IBC3,"^",3))
"RTN","IBCNSP0",102,0)
 ; blank lines at end of section
"RTN","IBCNSP0",103,0)
 D SET(START+12,2," ")
"RTN","IBCNSP0",104,0)
 D SET(START+13,2," ")
"RTN","IBCNSP0",105,0)
 Q
"RTN","IBCNSP0",106,0)
 ;
"RTN","IBCNSP0",107,0)
BLANK(LINE) ; -- Build blank line
"RTN","IBCNSP0",108,0)
 D SET^VALM10(.LINE,$J("",80))
"RTN","IBCNSP0",109,0)
 Q
"RTN","IBCNSP0",110,0)
 ;
"RTN","IBCNSP0",111,0)
SET(LINE,COL,TEXT,ON,OFF) ; -- set display info in array
"RTN","IBCNSP0",112,0)
 D:'$D(@VALMAR@(LINE,0)) BLANK(.LINE)
"RTN","IBCNSP0",113,0)
 D SET^VALM10(.LINE,$$SETSTR^VALM1(.TEXT,@VALMAR@(LINE,0),.COL,$L(TEXT)))
"RTN","IBCNSP0",114,0)
 D:$G(ON)]""!($G(OFF)]"") CNTRL^VALM10(.LINE,.COL,$L(TEXT),$G(ON),$G(OFF))
"RTN","IBCNSP0",115,0)
 W:'(LINE#5) "."
"RTN","IBCNSP0",116,0)
 Q
"RTN","IBCNSP0",117,0)
 ;
"RTN","IBCNSP0",118,0)
GPLAN(IBPLDA) ; get data from PLAN file (#366.03) related to the
"RTN","IBCNSP0",119,0)
 ; GROUP INSURANCE PLAN file (#355.3) and the INSURANCE COMPANY file (#36)
"RTN","IBCNSP0",120,0)
 ; that is associated with the PATIENT
"RTN","IBCNSP0",121,0)
 ; input - IBPLDA - ien of the PLAN file (#366.03)
"RTN","IBCNSP0",122,0)
 N IBPLN0,IBAIEN,IBAPIEN,IBAP0
"RTN","IBCNSP0",123,0)
 S IBPLN0=$G(^IBCNR(366.03,IBPLDA,0)) ;; Q:'$P(IBPLN0,"^",3) ;quit if payer not defined 
"RTN","IBCNSP0",124,0)
 S IBPLNID=$P(IBPLN0,"^"),IBPLNNM=$P(IBPLN0,"^",2)
"RTN","IBCNSP0",125,0)
 S IBAIEN=$O(^IBCNR(366.13,"B","E-PHARM","")) Q:'IBAIEN
"RTN","IBCNSP0",126,0)
 S IBAPIEN=$O(^IBCNR(366.03,IBPLDA,3,"B",IBAIEN,"")) Q:'IBAPIEN
"RTN","IBCNSP0",127,0)
 S IBAP0=$G(^IBCNR(366.03,IBPLDA,3,IBAPIEN,0))
"RTN","IBCNSP0",128,0)
 S IBPLNNA=$S($P(IBAP0,"^",2)=0:"NOT ACTIVE",1:"ACTIVE")
"RTN","IBCNSP0",129,0)
 S IBPLNLA=$S($P(IBAP0,"^",3)=0:"NOT ACTIVE",1:"ACTIVE")
"RTN","IBCNSP0",130,0)
 Q
"RTN","IBCNSP0",131,0)
 ;
"RTN","IBCNSP0",132,0)
 ;IBCNSP0
"RTN","IBCNSP01")
0^35^B52258890^B38322308
"RTN","IBCNSP01",1,0)
IBCNSP01 ;ALB/AAS - INSURANCE MANAGEMENT - EXPANDED POLICY  ;05-MAR-1993
"RTN","IBCNSP01",2,0)
 ;;2.0;INTEGRATED BILLING;**43,52,85,251,371,377,416,452,497**;21-MAR-94;Build 120
"RTN","IBCNSP01",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSP01",4,0)
 ;
"RTN","IBCNSP01",5,0)
 ;
"RTN","IBCNSP01",6,0)
% D SUBSC,RIDER
"RTN","IBCNSP01",7,0)
 Q
"RTN","IBCNSP01",8,0)
 ;
"RTN","IBCNSP01",9,0)
SUBSC ; -- subscriber region  ;IB*2*497 move subscriber lines around
"RTN","IBCNSP01",10,0)
 N OFFSET,START,RX,DATARRY,X1,SAV
"RTN","IBCNSP01",11,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2,RX=0  ;IB*2*497  
"RTN","IBCNSP01",12,0)
 D SET^IBCNSP(START,OFFSET," Subscriber Information ",IORVON,IORVOFF)
"RTN","IBCNSP01",13,0)
 S Y=$P(IBCDFND,U,6),C=$P(^DD(2.312,6,0),U,2) D Y^DIQ
"RTN","IBCNSP01",14,0)
 D SET^IBCNSP(START+1,OFFSET,$$RJ^XLFSTR("Whose Insurance: ",19)_Y)
"RTN","IBCNSP01",15,0)
 D SPLIT(OFFSET,$$RJ^XLFSTR("Subscriber Name: ",19),$P(IBCDFND7,U),.DATARRY)
"RTN","IBCNSP01",16,0)
 S (SAV,X1)=0 F  S X1=$O(DATARRY(X1)) Q:'X1  D
"RTN","IBCNSP01",17,0)
 . S START=$O(^TMP("IBCNSVP",$J,""),-1)+1
"RTN","IBCNSP01",18,0)
 . D SET^IBCNSP(START,OFFSET,DATARRY(X1))
"RTN","IBCNSP01",19,0)
 S Y=$P(IBCDFND4,U,3),C=$P(^DD(2.312,4.03,0),U,2) D Y^DIQ
"RTN","IBCNSP01",20,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)+1
"RTN","IBCNSP01",21,0)
 D SET^IBCNSP(START,OFFSET,$$RJ^XLFSTR("Relationship: ",19)_Y)
"RTN","IBCNSP01",22,0)
 K DATARRY D SPLIT(OFFSET,$$RJ^XLFSTR("Primary ID: ",19),$P(IBCDFND7,U,2),.DATARRY)
"RTN","IBCNSP01",23,0)
 S X1=0 F  S X1=$O(DATARRY(X1)) Q:'X1  D
"RTN","IBCNSP01",24,0)
 . S START=$O(^TMP("IBCNSVP",$J,""),-1)+1
"RTN","IBCNSP01",25,0)
 . D SET^IBCNSP(START,OFFSET,DATARRY(X1))
"RTN","IBCNSP01",26,0)
 S Y=$P(IBCDFND,U,20),C=$P(^DD(2.312,.2,0),U,2) D Y^DIQ
"RTN","IBCNSP01",27,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)+1
"RTN","IBCNSP01",28,0)
 D SET^IBCNSP(START,OFFSET,$$RJ^XLFSTR("Coord.  Benefits: ",19)_Y)
"RTN","IBCNSP01",29,0)
 ;
"RTN","IBCNSP01",30,0)
 ; IB*2*452 - esg - display Pharmacy fields if they exist
"RTN","IBCNSP01",31,0)
 I $P(IBCDFND4,U,5)'=""!($P(IBCDFND4,U,6)'="") D
"RTN","IBCNSP01",32,0)
 . N G,IBY S G=+$P(IBCDFND4,U,5),IBY=""
"RTN","IBCNSP01",33,0)
 . I G S IBY=$$GET1^DIQ(9002313.19,G_",",.01)_" - "_$$GET1^DIQ(9002313.19,G_",",.02)
"RTN","IBCNSP01",34,0)
 . S START=$O(^TMP("IBCNSVP",$J,""),-1)+1
"RTN","IBCNSP01",35,0)
 . D SET^IBCNSP(START,OFFSET,$$RJ^XLFSTR("Rx Relationship: ",19)_IBY)
"RTN","IBCNSP01",36,0)
 . D SET^IBCNSP(START,OFFSET,$$RJ^XLFSTR("Rx Person Code: ",19)_$P(IBCDFND4,U,6))
"RTN","IBCNSP01",37,0)
 . Q
"RTN","IBCNSP01",38,0)
 ; Two blank lines at end of section
"RTN","IBCNSP01",39,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)+1
"RTN","IBCNSP01",40,0)
 D SET^IBCNSP(START,OFFSET," ")
"RTN","IBCNSP01",41,0)
 Q
"RTN","IBCNSP01",42,0)
 ;
"RTN","IBCNSP01",43,0)
PRV ;  Provider and contact info  IB*2*497 move provider contact info so that prints after employer related info
"RTN","IBCNSP01",44,0)
 ; inputs
"RTN","IBCNSP01",45,0)
 ;       IBCDFND,IBCDFND4 - data strings equal to the 0 and 4 subscripts of the INSURANCE TYPE Subfile (2.312) entry
"RTN","IBCNSP01",46,0)
 ; output 
"RTN","IBCNSP01",47,0)
 ;       - an entry at the nth node of ^TMP("IBCNSVP",$J,n)
"RTN","IBCNSP01",48,0)
 N OFFSET,START
"RTN","IBCNSP01",49,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSP01",50,0)
 D SET^IBCNSP(START,OFFSET,"Primary Provider: "_$P(IBCDFND4,U,1))
"RTN","IBCNSP01",51,0)
 D SET^IBCNSP(START+1,OFFSET," Prim Prov Phone: "_$P(IBCDFND4,U,2))
"RTN","IBCNSP01",52,0)
 D SET^IBCNSP(START+2,2," ")
"RTN","IBCNSP01",53,0)
 Q
"RTN","IBCNSP01",54,0)
 ;
"RTN","IBCNSP01",55,0)
VER ; -- Entered/Verfied Region
"RTN","IBCNSP01",56,0)
 N OFFSET,START,EIVFLG
"RTN","IBCNSP01",57,0)
 S EIVFLG=+$P(IBCDFND4,U,4)
"RTN","IBCNSP01",58,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSP01",59,0)
 S IB1ST("VERIFY")=START
"RTN","IBCNSP01",60,0)
 D SET^IBCNSP(START,OFFSET," User Information ",IORVON,IORVOFF)
"RTN","IBCNSP01",61,0)
 D SET^IBCNSP(START+1,OFFSET,"      Entered By: "_$E($P($G(^VA(200,+$P(IBCDFND1,U,2),0)),U,1),1,20))
"RTN","IBCNSP01",62,0)
 D SET^IBCNSP(START+2,OFFSET,"      Entered On: "_$$DAT1^IBOUTL(+IBCDFND1))
"RTN","IBCNSP01",63,0)
 D SET^IBCNSP(START+3,OFFSET,"Last Verified By: "_$S(EIVFLG:"AUTOUPDATE,IB-eIV",1:$E($P($G(^VA(200,+$P(IBCDFND1,U,4),0)),U,1),1,20)))
"RTN","IBCNSP01",64,0)
 D SET^IBCNSP(START+4,OFFSET,"Last Verified On: "_$$DAT1^IBOUTL(+$P(IBCDFND1,U,3)))
"RTN","IBCNSP01",65,0)
 D SET^IBCNSP(START+5,OFFSET," Last Updated By: "_$S(EIVFLG:"AUTOUPDATE,IB-eIV",1:$E($P($G(^VA(200,+$P(IBCDFND1,U,6),0)),U,1),1,20)))
"RTN","IBCNSP01",66,0)
 D SET^IBCNSP(START+6,OFFSET," Last Updated On: "_$$DAT1^IBOUTL(+$P(IBCDFND1,U,5)))
"RTN","IBCNSP01",67,0)
 D SET^IBCNSP(START+7,2," ")   ; 2 blank lines to end section
"RTN","IBCNSP01",68,0)
 D SET^IBCNSP(START+8,2," ")
"RTN","IBCNSP01",69,0)
VERQ Q
"RTN","IBCNSP01",70,0)
 ;
"RTN","IBCNSP01",71,0)
ID ; Subscriber and patient primary and secondary ID's and qualifiers
"RTN","IBCNSP01",72,0)
 NEW START,OFFSET,IBL,G,PCE,QUAL,QUAL1
"RTN","IBCNSP01",73,0)
 S G=IBCDFND5
"RTN","IBCNSP01",74,0)
 S (START,IBL)=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSP01",75,0)
 S IB1ST("ID")=START
"RTN","IBCNSP01",76,0)
 D SET^IBCNSP(START,OFFSET," Insurance Company ID Numbers (use Subscriber Update Action) ",IORVON,IORVOFF)
"RTN","IBCNSP01",77,0)
 D SPLIT(OFFSET,"  Subscriber ID: ",$P(IBCDFND7,U,2),.DATARRY)
"RTN","IBCNSP01",78,0)
 S (SAV,X1)=0 F  S X1=$O(DATARRY(X1)) Q:'X1  D
"RTN","IBCNSP01",79,0)
 . S IBL=IBL+1
"RTN","IBCNSP01",80,0)
 . D SET^IBCNSP(IBL,OFFSET,DATARRY(X1))
"RTN","IBCNSP01",81,0)
 ;
"RTN","IBCNSP01",82,0)
 F PCE=3,5,7 D            ; subscriber secondary IDs
"RTN","IBCNSP01",83,0)
 . I $P(G,U,PCE)="" Q     ; no secondary ID#
"RTN","IBCNSP01",84,0)
 . S QUAL=$P(G,U,PCE-1)   ; internal qualifier code
"RTN","IBCNSP01",85,0)
 . S QUAL1=$S(QUAL="23":"Client#",QUAL="IG":"Ins. Policy#",QUAL="SY":"SSN",1:"Unknown")
"RTN","IBCNSP01",86,0)
 . S IBL=IBL+1
"RTN","IBCNSP01",87,0)
 . D SET^IBCNSP(IBL,OFFSET,"Subscriber Secondary ID: "_$P(G,U,PCE))
"RTN","IBCNSP01",88,0)
 . D SET^IBCNSP(IBL,52,"ID Qual: "_QUAL_" ("_QUAL1_")")
"RTN","IBCNSP01",89,0)
 . Q
"RTN","IBCNSP01",90,0)
 ;
"RTN","IBCNSP01",91,0)
 ; patient=subscriber so skip over patient ID# display
"RTN","IBCNSP01",92,0)
 I +$P(IBCDFND,U,16)=1 G ID1
"RTN","IBCNSP01",93,0)
 ;
"RTN","IBCNSP01",94,0)
 S IBL=IBL+1 D SET^IBCNSP(IBL,2," ")   ; blank line
"RTN","IBCNSP01",95,0)
 S IBL=IBL+1
"RTN","IBCNSP01",96,0)
 D SET^IBCNSP(IBL,OFFSET,"     Patient Primary ID: "_$P(G,U,1))
"RTN","IBCNSP01",97,0)
 ;
"RTN","IBCNSP01",98,0)
 F PCE=9,11,13 D          ; patient secondary IDs
"RTN","IBCNSP01",99,0)
 . I $P(G,U,PCE)="" Q     ; no secondary ID#
"RTN","IBCNSP01",100,0)
 . S QUAL=$P(G,U,PCE-1)   ; internal qualifier code
"RTN","IBCNSP01",101,0)
 . S QUAL1=$S(QUAL="23":"Client#",QUAL="IG":"Ins. Policy#",QUAL="SY":"SSN",1:"Unknown")
"RTN","IBCNSP01",102,0)
 . S IBL=IBL+1
"RTN","IBCNSP01",103,0)
 . D SET^IBCNSP(IBL,OFFSET,"   Patient Secondary ID: "_$P(G,U,PCE))
"RTN","IBCNSP01",104,0)
 . D SET^IBCNSP(IBL,52,"ID Qual: "_QUAL_" ("_QUAL1_")")
"RTN","IBCNSP01",105,0)
 . Q
"RTN","IBCNSP01",106,0)
 ;
"RTN","IBCNSP01",107,0)
ID1 ; end of section - 2 blank lines
"RTN","IBCNSP01",108,0)
 S IBL=IBL+1 D SET^IBCNSP(IBL,2," ")
"RTN","IBCNSP01",109,0)
 S IBL=IBL+1 D SET^IBCNSP(IBL,2," ")
"RTN","IBCNSP01",110,0)
IDQ ;
"RTN","IBCNSP01",111,0)
 Q
"RTN","IBCNSP01",112,0)
 ;
"RTN","IBCNSP01",113,0)
RIDER ; -- Personal policy riders
"RTN","IBCNSP01",114,0)
 N OFFSET,START,IBI,IBL,IBPR,IBPRD
"RTN","IBCNSP01",115,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2,IBL=0
"RTN","IBCNSP01",116,0)
 D SET^IBCNSP(START,OFFSET," Personal Riders ",IORVON,IORVOFF)
"RTN","IBCNSP01",117,0)
 S IBI="" F  S IBI=$O(^IBA(355.7,"APP",DFN,IBCDFN,IBI)) Q:'IBI  S IBPR=$O(^(IBI,0)),IBPRD=+$G(^IBA(355.7,IBPR,0)),IBL=IBL+1 D
"RTN","IBCNSP01",118,0)
 . D SET^IBCNSP(START+IBL,OFFSET,"   Rider #"_IBL_": "_$$EXPAND^IBTRE(355.7,.01,IBPRD))
"RTN","IBCNSP01",119,0)
 . Q
"RTN","IBCNSP01",120,0)
 S IBL=IBL+1 D SET^IBCNSP(START+IBL,OFFSET," ")
"RTN","IBCNSP01",121,0)
 S IBL=IBL+1 D SET^IBCNSP(START+IBL,OFFSET," ")
"RTN","IBCNSP01",122,0)
 Q
"RTN","IBCNSP01",123,0)
 ;
"RTN","IBCNSP01",124,0)
AI ; -- Add ins. verification entry
"RTN","IBCNSP01",125,0)
 ;    called from ai^ibcnsp1
"RTN","IBCNSP01",126,0)
 ;
"RTN","IBCNSP01",127,0)
 ; -- see if current inpatient
"RTN","IBCNSP01",128,0)
 D INP^VADPT I +VAIN(1) D
"RTN","IBCNSP01",129,0)
 .S IBTRN=$O(^IBT(356,"AD",+VAIN(1),0))
"RTN","IBCNSP01",130,0)
 ;
"RTN","IBCNSP01",131,0)
 S IBXIFN=$O(^IBE(356.11,"ACODE",85,0))
"RTN","IBCNSP01",132,0)
 ;
"RTN","IBCNSP01",133,0)
 ; -- if not tracking id allow selecting
"RTN","IBCNSP01",134,0)
 I '$G(IBTRN) D  G:IBQUIT AIQ
"RTN","IBCNSP01",135,0)
 .W !,"You can now enter a contact and relate it to a Claims Tracking Admission entry."
"RTN","IBCNSP01",136,0)
 .S DIC("A")="Select RELATED ADMISSION DATE: "
"RTN","IBCNSP01",137,0)
 .S DIC="^IBT(356,",DIC(0)="AEQ",D="ADFN"_DFN,DIC("S")="I $P(^(0),U,5)"
"RTN","IBCNSP01",138,0)
 .D IX^DIC K DA,DR,DIC,DIE I $D(DUOUT)!($D(DTOUT)) S IBQUIT=1 Q
"RTN","IBCNSP01",139,0)
 .I +Y>1 S IBTRN=+Y
"RTN","IBCNSP01",140,0)
 ;
"RTN","IBCNSP01",141,0)
 I '$G(IBTRN) W !!,"Warning: This contact is not associated with any care in Claims Tracking.",!,"You may only edit or view this contact using this action.",!
"RTN","IBCNSP01",142,0)
 ;
"RTN","IBCNSP01",143,0)
 ; -- select date
"RTN","IBCNSP01",144,0)
 S IBOK=0,IBI=0 F  S IBI=$O(^IBT(356.2,"D",DFN,IBI)) Q:'IBI  I $P($G(^IBT(356.2,+IBI,0)),U,4)=IBXIFN,$P($G(^(1)),U,5)=IBCDFN S IBOK=1
"RTN","IBCNSP01",145,0)
 I IBOK D  G:IBQUIT AIQ
"RTN","IBCNSP01",146,0)
 .S DIC="^IBT(356.2,",DIC("A")="Select Contact Date: "
"RTN","IBCNSP01",147,0)
 .S X="??",DIC(0)="EQ",DIC("S")="I $P($G(^(1)),U,5)=IBCDFN,$P(^(0),U,4)=IBXIFN" ;,DLAYGO=356.2
"RTN","IBCNSP01",148,0)
 .S D="ADFN"_DFN
"RTN","IBCNSP01",149,0)
 .D IX^DIC K DIC,DR,DA,DIE,D I $D(DUOUT)!($D(DTOUT)) S IBQUIT=1
"RTN","IBCNSP01",150,0)
 ;
"RTN","IBCNSP01",151,0)
 S DIC="^IBT(356.2,",DIC("A")="Select Contact Date: ",DIC("B")="TODAY"
"RTN","IBCNSP01",152,0)
 S DIC("DR")=".02////"_$G(IBTRN)_";.04////"_IBXIFN_";.05////"_DFN_";.19////1;1.01///NOW;1.02////"_DUZ_";1.05////"_IBCDFN
"RTN","IBCNSP01",153,0)
 S DIC(0)="AEQL",DIC("S")="I $P(^(0),U,5)=DFN,$P($G(^(1)),U,5)=IBCDFN,$P(^(0),U,4)=IBXIFN",DLAYGO=356.2
"RTN","IBCNSP01",154,0)
 D ^DIC K DIC
"RTN","IBCNSP01",155,0)
 I $D(DTOUT)!($D(DUOUT))!(+Y<1) G AIQ
"RTN","IBCNSP01",156,0)
 S IBTRC=+Y
"RTN","IBCNSP01",157,0)
 I $G(IBTRC),$G(IBTRN),'$P(^IBT(356.2,+IBTRC,0),U,2) S DA=IBTRC,DIE="^IBT(356.2,",DR=".02////"_$G(IBTRN) D ^DIE
"RTN","IBCNSP01",158,0)
 ;
"RTN","IBCNSP01",159,0)
 ; -- edit ins ver type
"RTN","IBCNSP01",160,0)
 D EDIT^IBTRCD1("[IBT INS VERIFICATION]",1)
"RTN","IBCNSP01",161,0)
AIQ Q
"RTN","IBCNSP01",162,0)
 ;
"RTN","IBCNSP01",163,0)
SPLIT(OFFSET,LABEL,DATA,DATARRY) ; ib*2*497  reformat data that is too large to fit on one line 
"RTN","IBCNSP01",164,0)
 ; 
"RTN","IBCNSP01",165,0)
 ;  INPUTS
"RTN","IBCNSP01",166,0)
 ;         OFFSET - left margin starting point (e.g., 2)
"RTN","IBCNSP01",167,0)
 ;         LABEL - the data label that gets displayed alongside the actual data (e.g."subscriber name:)
"RTN","IBCNSP01",168,0)
 ;         DATA - the value to be set for display on a line (e.g.,   IB, PATIENT")
"RTN","IBCNSP01",169,0)
 ;  OUTPUT
"RTN","IBCNSP01",170,0)
 ;         DATARRY - an array which contains the data to be displayed on more than 1 line
"RTN","IBCNSP01",171,0)
 ;
"RTN","IBCNSP01",172,0)
 N STRING,I,SAVPOS,QUIT
"RTN","IBCNSP01",173,0)
 S STRING=LABEL_DATA
"RTN","IBCNSP01",174,0)
 I $L(STRING)+OFFSET<81 S DATARRY(1)=STRING Q 
"RTN","IBCNSP01",175,0)
 S DATARRY(1)=$E(STRING,1,80-OFFSET)
"RTN","IBCNSP01",176,0)
 S SAVPOS=$L(DATARRY(1))
"RTN","IBCNSP01",177,0)
 S QUIT=0 F I=2:1 D  Q:QUIT
"RTN","IBCNSP01",178,0)
 . S DATARRY(I)=$$REPEAT^XLFSTR(" ",$L(LABEL))_$E(STRING,SAVPOS+1,$L(STRING))
"RTN","IBCNSP01",179,0)
 . I $TR(DATARRY(I)," ")']"" K DATARRY(I) S QUIT=1 Q
"RTN","IBCNSP01",180,0)
 . I $L(DATARRY(I))+OFFSET>80 S DATARRY(I)=$E(DATARRY(I),1,80-OFFSET) S SAVPOS=SAVPOS+$L(DATARRY(I)) Q
"RTN","IBCNSP01",181,0)
 . S QUIT=1
"RTN","IBCNSP01",182,0)
 Q
"RTN","IBCNSP1")
0^54^B60114361^B59835347
"RTN","IBCNSP1",1,0)
IBCNSP1 ;ALB/AAS - INSURANCE MANAGEMENT - policy actions ;22-OCT-92
"RTN","IBCNSP1",2,0)
 ;;2.0;INTEGRATED BILLING;**6,28,40,43,52,85,103,361,371,377,497**;21-MAR-94;Build 120
"RTN","IBCNSP1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSP1",4,0)
 ;;ICR#5002 for read of ^DIE input template data
"RTN","IBCNSP1",5,0)
 ;
"RTN","IBCNSP1",6,0)
% G EN^IBCNSP
"RTN","IBCNSP1",7,0)
 ;
"RTN","IBCNSP1",8,0)
EA ; -- Edit all
"RTN","IBCNSP1",9,0)
 N IBCDFN,IBTRC,IBTRN
"RTN","IBCNSP1",10,0)
 D FULL^VALM1 W !!
"RTN","IBCNSP1",11,0)
 S IBCDFN=$P($G(IBPPOL),"^",4) I 'IBCDFN W !!,"Can't identify the policy!" G EAQ
"RTN","IBCNSP1",12,0)
 S IBCNSEH=1 D PAT^IBCNSEH
"RTN","IBCNSP1",13,0)
 ;
"RTN","IBCNSP1",14,0)
 D BEFORE^IBCNSEVT
"RTN","IBCNSP1",15,0)
 D PATPOL^IBCNSM32(IBCDFN)
"RTN","IBCNSP1",16,0)
 D AFTER^IBCNSEVT,^IBCNSEVT
"RTN","IBCNSP1",17,0)
 ;
"RTN","IBCNSP1",18,0)
 ; -- edit policy data
"RTN","IBCNSP1",19,0)
 D POL^IBCNSEH
"RTN","IBCNSP1",20,0)
 D EDPOL^IBCNSM3(IBCDFN)
"RTN","IBCNSP1",21,0)
 ;
"RTN","IBCNSP1",22,0)
 W !! D AI
"RTN","IBCNSP1",23,0)
 ;
"RTN","IBCNSP1",24,0)
EAQ D:$G(IBTRC) AIP^IBCNSP02(IBTRC)
"RTN","IBCNSP1",25,0)
 D BLD^IBCNSP
"RTN","IBCNSP1",26,0)
 S VALMBCK="R"
"RTN","IBCNSP1",27,0)
 Q
"RTN","IBCNSP1",28,0)
 ;
"RTN","IBCNSP1",29,0)
AB ; -- Annual Benefits
"RTN","IBCNSP1",30,0)
 S X=+$P($G(IBPPOL),"^",4),IBCNS=+$G(^DPT(DFN,.312,X,0)),IBCPOL=+$P($G(^(0)),"^",18)
"RTN","IBCNSP1",31,0)
 I 'IBCPOL W !!,"Can't identify the plan!" S VALMBCK="" G ABQ
"RTN","IBCNSP1",32,0)
 D FULL^VALM1 W !!
"RTN","IBCNSP1",33,0)
 D EN^VALM("IBCNS ANNUAL BENEFITS")
"RTN","IBCNSP1",34,0)
 S VALMBCK="R"
"RTN","IBCNSP1",35,0)
ABQ Q
"RTN","IBCNSP1",36,0)
 ;
"RTN","IBCNSP1",37,0)
BU ; -- Benefits Used
"RTN","IBCNSP1",38,0)
 S IBCDFN=+$P($G(IBPPOL),"^",4),IBCNS=+$G(^DPT(DFN,.312,IBCDFN,0)),IBCPOL=+$P($G(^(0)),"^",18)
"RTN","IBCNSP1",39,0)
 I 'IBCPOL W !!,"Can't identify the plan!" S VALMBCK="" G BUQ
"RTN","IBCNSP1",40,0)
 D FULL^VALM1 W !!
"RTN","IBCNSP1",41,0)
 D EN^VALM("IBCNS BENEFITS USED BY DATE")
"RTN","IBCNSP1",42,0)
 S VALMBCK="R"
"RTN","IBCNSP1",43,0)
BUQ Q
"RTN","IBCNSP1",44,0)
 ;
"RTN","IBCNSP1",45,0)
IT ; -- edit insurance type info from patient policy and plan edit
"RTN","IBCNSP1",46,0)
 D FULL^VALM1 W !!
"RTN","IBCNSP1",47,0)
 N IBCDFN
"RTN","IBCNSP1",48,0)
 S IBCDFN=+$P($G(IBPPOL),"^",4),IBCPOL=+$P($G(^DPT(DFN,.312,IBCDFN,0)),"^",18)
"RTN","IBCNSP1",49,0)
 I 'IBCPOL W !!,"Can't identify the plan!" S VALMBCK="" G ITQ
"RTN","IBCNSP1",50,0)
 D ITEDIT(IBCPOL,IBCDFN)
"RTN","IBCNSP1",51,0)
ITQ S VALMBCK="R" Q
"RTN","IBCNSP1",52,0)
 ;
"RTN","IBCNSP1",53,0)
IT1 ; -- edit insurance type info from patient policy
"RTN","IBCNSP1",54,0)
 D ITEDIT(IBCPOL)
"RTN","IBCNSP1",55,0)
 S VALMBCK="R"
"RTN","IBCNSP1",56,0)
 Q
"RTN","IBCNSP1",57,0)
 ;
"RTN","IBCNSP1",58,0)
ITEDIT(IBCPOL,IBCDFN) ;Edit insurance type info once you have plan (IBCPOL)
"RTN","IBCNSP1",59,0)
 ; IBCDFN = the ifn of the policy multiple for pt in ^DPT, node .312
"RTN","IBCNSP1",60,0)
 ;          only defined for editing via patient policy
"RTN","IBCNSP1",61,0)
 G:'$G(IBCPOL) ITEDITQ
"RTN","IBCNSP1",62,0)
 D SAVE^IBCNSP3(IBCPOL)
"RTN","IBCNSP1",63,0)
 L +^IBA(355.3,+IBCPOL):5 I '$T D LOCKED^IBTRCD1 G ITEDITQ
"RTN","IBCNSP1",64,0)
 I $G(IBCDFN) S IBCNSEH=+$G(^IBE(350.9,1,4)) D POL^IBCNSEH
"RTN","IBCNSP1",65,0)
 I $P($G(^IBA(355.3,IBCPOL,0)),"^",11) W !?2,*7,"Please note that this plan is inactive!",!
"RTN","IBCNSP1",66,0)
 S DA=IBCPOL,DIE="^IBA(355.3,",DR=".05;.12;.06;.07;.08"
"RTN","IBCNSP1",67,0)
 D ^DIE K DIC,DIE,DA,DR
"RTN","IBCNSP1",68,0)
 D COMP^IBCNSP3(IBCPOL)
"RTN","IBCNSP1",69,0)
 I IBDIF D UPDATE^IBCNSP3(IBCPOL) D:$G(IBCDFN) UPDATPT^IBCNSP3(DFN,IBCDFN),BLD^IBCNSP D:'$G(IBCDFN) INIT^IBCNSC4
"RTN","IBCNSP1",70,0)
 L -^IBA(355.3,+IBCPOL)
"RTN","IBCNSP1",71,0)
ITEDITQ Q
"RTN","IBCNSP1",72,0)
 ;
"RTN","IBCNSP1",73,0)
ED ; -- Edit effective dates
"RTN","IBCNSP1",74,0)
 D FULL^VALM1 W !!
"RTN","IBCNSP1",75,0)
 N IBDIF,DA,DR,DIE,DIC
"RTN","IBCNSP1",76,0)
 D BEFORE^IBCNSEVT
"RTN","IBCNSP1",77,0)
 D SAVEPT^IBCNSP3(DFN,IBCDFN)
"RTN","IBCNSP1",78,0)
 L +^DPT(DFN,.312,+$P($G(IBPPOL),"^",4)):5 I '$T D LOCKED^IBTRCD1 G EDQ
"RTN","IBCNSP1",79,0)
 D VARS^IBCNSP3
"RTN","IBCNSP1",80,0)
 S DR="8;3;1.09//;3.04"
"RTN","IBCNSP1",81,0)
 D ^DIE K DIC,DIE,DA,DR
"RTN","IBCNSP1",82,0)
 D COMPPT^IBCNSP3(DFN,IBCDFN) I IBDIF D UPDATPT^IBCNSP3(DFN,IBCDFN),UPDCLM(DFN,IBCDFN),AFTER^IBCNSEVT,^IBCNSEVT,BLD^IBCNSP
"RTN","IBCNSP1",83,0)
 L -^DPT(DFN,.312,+$P($G(IBPPOL),"^",4))
"RTN","IBCNSP1",84,0)
EDQ S VALMBCK="R" Q
"RTN","IBCNSP1",85,0)
 ;
"RTN","IBCNSP1",86,0)
VC ; -- Verify Coverage
"RTN","IBCNSP1",87,0)
 D FULL^VALM1 W !!
"RTN","IBCNSP1",88,0)
 D VFY^IBCNSM2
"RTN","IBCNSP1",89,0)
 D BLD^IBCNSP
"RTN","IBCNSP1",90,0)
 S VALMBCK="R" Q
"RTN","IBCNSP1",91,0)
 ;
"RTN","IBCNSP1",92,0)
SU ; -- Subscriber Update
"RTN","IBCNSP1",93,0)
 D FULL^VALM1 W !!
"RTN","IBCNSP1",94,0)
 ;Patch 40
"RTN","IBCNSP1",95,0)
 N IBDIF,DA,DR,DIC,DIE,DGSENFLG
"RTN","IBCNSP1",96,0)
 S DGSENFLG=1
"RTN","IBCNSP1",97,0)
 D SAVEPT^IBCNSP3(DFN,IBCDFN)
"RTN","IBCNSP1",98,0)
 D VARS^IBCNSP3
"RTN","IBCNSP1",99,0)
 L +^DPT(DFN,.312,+$P($G(IBPPOL),"^",4)):5 I '$T D LOCKED^IBTRCD1 G SUQ
"RTN","IBCNSP1",100,0)
 ;
"RTN","IBCNSP1",101,0)
 D EDIT(DFN,IBCDFN)   ; IB*371 - edit pat ins 2.312 subfile fields
"RTN","IBCNSP1",102,0)
 ;
"RTN","IBCNSP1",103,0)
 D COMPPT^IBCNSP3(DFN,IBCDFN)
"RTN","IBCNSP1",104,0)
 I IBDIF D UPDATPT^IBCNSP3(DFN,IBCDFN),BLD^IBCNSP
"RTN","IBCNSP1",105,0)
 L -^DPT(DFN,.312,+$P($G(IBPPOL),"^",4))
"RTN","IBCNSP1",106,0)
SUQ S VALMBCK="R" Q
"RTN","IBCNSP1",107,0)
 ;
"RTN","IBCNSP1",108,0)
IC ; -- Insurance Contact Information
"RTN","IBCNSP1",109,0)
 D FULL^VALM1 W !!
"RTN","IBCNSP1",110,0)
 N IBDIF,DA,DR,DIC,DIE,IBTRC,DIR,DUOUT,DTOUT,DIRUT,IBTRN
"RTN","IBCNSP1",111,0)
 D AI
"RTN","IBCNSP1",112,0)
 D:$G(IBTRC) AIP^IBCNSP02(IBTRC),BLD^IBCNSP
"RTN","IBCNSP1",113,0)
 S VALMBCK="R" Q
"RTN","IBCNSP1",114,0)
 Q
"RTN","IBCNSP1",115,0)
AI ; -- Add ins. verification entry
"RTN","IBCNSP1",116,0)
 N X,Y,I,J,DA,DR,DIC,DIE,DR,DD,DO,VA,VAIN,VAERR,IBQUIT,IBXIFN,IBTRN,DUOUT,IBX,IBQUIT,DTOUT
"RTN","IBCNSP1",117,0)
 Q:'$G(DFN)
"RTN","IBCNSP1",118,0)
 Q:'$G(IBCDFN)  S IBQUIT=0
"RTN","IBCNSP1",119,0)
 D AI^IBCNSP02
"RTN","IBCNSP1",120,0)
 Q
"RTN","IBCNSP1",121,0)
 ;
"RTN","IBCNSP1",122,0)
PIDEF(IBREL,FLD,IBDFN,SPDEF) ; Function to return patient file defaults
"RTN","IBCNSP1",123,0)
 ; Called from input template IBCN PATIENT INSURANCE
"RTN","IBCNSP1",124,0)
 ; IBREL = value from 2.312,4.03 field (PT. RELATIONSHIP - HIPAA)
"RTN","IBCNSP1",125,0)
 ;   FLD = field# in file 2.312
"RTN","IBCNSP1",126,0)
 ; IBDFN = patient ien to file 2
"RTN","IBCNSP1",127,0)
 ; SPDEF = spouse default flag =1 if this field should be defaulted
"RTN","IBCNSP1",128,0)
 ;         when the spouse is the policy holder
"RTN","IBCNSP1",129,0)
 ;
"RTN","IBCNSP1",130,0)
 ; The purpose is to provide a default value for the field when the
"RTN","IBCNSP1",131,0)
 ; patient and the ins. subscriber are the same.
"RTN","IBCNSP1",132,0)
 ;
"RTN","IBCNSP1",133,0)
 NEW VAL
"RTN","IBCNSP1",134,0)
 S VAL=""
"RTN","IBCNSP1",135,0)
 I +$G(IBREL)'=1,+$G(IBREL)'=18 G PIDEFX     ; patient not the insured or spouse, get out
"RTN","IBCNSP1",136,0)
 I +$G(IBREL)=1,'$G(SPDEF) G PIDEFX          ; not a field for spouse default
"RTN","IBCNSP1",137,0)
 I '$G(FLD) G PIDEFX                         ; no field# passed in
"RTN","IBCNSP1",138,0)
 I '$G(IBDFN) G PIDEFX                       ; no patient passed in
"RTN","IBCNSP1",139,0)
 ;
"RTN","IBCNSP1",140,0)
 ; Build the patient demographics area
"RTN","IBCNSP1",141,0)
 I '$D(^UTILITY("VADM",$J)) D
"RTN","IBCNSP1",142,0)
 . N VAHOW,DFN,VADM
"RTN","IBCNSP1",143,0)
 . S VAHOW=2,DFN=IBDFN D DEM^VADPT
"RTN","IBCNSP1",144,0)
 . Q
"RTN","IBCNSP1",145,0)
 ;
"RTN","IBCNSP1",146,0)
 ; Build the patient address area
"RTN","IBCNSP1",147,0)
 I '$D(^UTILITY("VAPA",$J)) D
"RTN","IBCNSP1",148,0)
 . N VAHOW,DFN,VAPA
"RTN","IBCNSP1",149,0)
 . S VAHOW=2,DFN=IBDFN,VAPA("P")="" D ADD^VADPT
"RTN","IBCNSP1",150,0)
 . Q
"RTN","IBCNSP1",151,0)
 ;
"RTN","IBCNSP1",152,0)
 I FLD=7.01 S VAL=$P($G(^UTILITY("VADM",$J,1)),U,1) G PIDEFX                        ; Name    - IB*2.0*497 (vd)
"RTN","IBCNSP1",153,0)
 I FLD=3.01 S VAL=$$FMTE^XLFDT($P($G(^UTILITY("VADM",$J,3)),U,1),"5Z") G PIDEFX     ; Date of Birth
"RTN","IBCNSP1",154,0)
 I FLD=3.02 S VAL=$$EXTERNAL^DILFD(2,.325,,$P($G(^DPT(IBDFN,.32)),U,5)) G PIDEFX    ; Branch
"RTN","IBCNSP1",155,0)
 I FLD=3.05 S VAL=$P($G(^UTILITY("VADM",$J,2)),U,2) G PIDEFX                        ; SSN
"RTN","IBCNSP1",156,0)
 I FLD=3.06 S VAL=$P($G(^UTILITY("VAPA",$J,1)),U,1) G PIDEFX                        ; Street Address 1
"RTN","IBCNSP1",157,0)
 I FLD=3.07 S VAL=$P($G(^UTILITY("VAPA",$J,2)),U,1) G PIDEFX                        ; Street Address 2
"RTN","IBCNSP1",158,0)
 I FLD=3.08 S VAL=$P($G(^UTILITY("VAPA",$J,4)),U,1) G PIDEFX                        ; City
"RTN","IBCNSP1",159,0)
 I FLD=3.09 S VAL=$P($G(^UTILITY("VAPA",$J,5)),U,2) G PIDEFX                        ; State
"RTN","IBCNSP1",160,0)
 I FLD=3.1 S VAL=$P($G(^UTILITY("VAPA",$J,11)),U,2) G PIDEFX                        ; Zipcode
"RTN","IBCNSP1",161,0)
 I FLD=3.11 S VAL=$P($G(^UTILITY("VAPA",$J,8)),U,1) G PIDEFX                        ; Phone#
"RTN","IBCNSP1",162,0)
 I FLD=3.12 S VAL=$P($G(^UTILITY("VADM",$J,5)),U,2) G PIDEFX                        ; Sex
"RTN","IBCNSP1",163,0)
PIDEFX ;
"RTN","IBCNSP1",164,0)
 Q VAL
"RTN","IBCNSP1",165,0)
 ;
"RTN","IBCNSP1",166,0)
ASK(QUES,DEFLT) ; Function to ask Yes/No Question
"RTN","IBCNSP1",167,0)
 ; Returns 1 (yes), 0 (no, up-arrow, or timeout)
"RTN","IBCNSP1",168,0)
 NEW X,Y,DIR,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNSP1",169,0)
 S DIR(0)="Y",DIR("A")=$G(QUES)
"RTN","IBCNSP1",170,0)
 S DIR("B")=$S($G(DEFLT):"Yes",1:"No")
"RTN","IBCNSP1",171,0)
 W ! D ^DIR W:Y !
"RTN","IBCNSP1",172,0)
 I $D(DIRUT) S Y=0
"RTN","IBCNSP1",173,0)
ASKX ;
"RTN","IBCNSP1",174,0)
 Q Y
"RTN","IBCNSP1",175,0)
 ;
"RTN","IBCNSP1",176,0)
EDIT(IBDFN,IBCDFN,IBQUIT) ; Main call to edit data in 2.312 pat ins subfile
"RTN","IBCNSP1",177,0)
 ;  IBDFN - patient DFN
"RTN","IBCNSP1",178,0)
 ; IBCDFN - ien for patient insurance policy in subfile 2.312
"RTN","IBCNSP1",179,0)
 ; IBQUIT - Output variable.  Pass by reference.  Will be set to 1 if
"RTN","IBCNSP1",180,0)
 ;          the user entered an up-arrow, timed-out, or deleted the
"RTN","IBCNSP1",181,0)
 ;          2.312 subfile entry by entering "@" at the .01 field
"RTN","IBCNSP1",182,0)
 ; 
"RTN","IBCNSP1",183,0)
 NEW DA,DR,DIE,IBZ,IBY,X,Y,DTOUT
"RTN","IBCNSP1",184,0)
 NEW IDS,SUB,PAT,PCE,SUB1,PAT1
"RTN","IBCNSP1",185,0)
 S DA(1)=+$G(IBDFN)    ; patient IEN
"RTN","IBCNSP1",186,0)
 S DA=+$G(IBCDFN)      ; patient insurance IEN
"RTN","IBCNSP1",187,0)
 I 'DA!'DA(1) G EDITX
"RTN","IBCNSP1",188,0)
 S DIE="^DPT("_IBDFN_",.312,"
"RTN","IBCNSP1",189,0)
 ;
"RTN","IBCNSP1",190,0)
 ; Find the input template IEN for the [IBCN PATIENT INSURANCE] template
"RTN","IBCNSP1",191,0)
 S IBY=+$$FIND1^DIC(.402,,"X","IBCN PATIENT INSURANCE")
"RTN","IBCNSP1",192,0)
 I 'IBY G EDITX
"RTN","IBCNSP1",193,0)
 ;
"RTN","IBCNSP1",194,0)
 ; Build the DR array/string - ICR# 5002
"RTN","IBCNSP1",195,0)
 M DR(1)=^DIE(IBY,"DR",2)
"RTN","IBCNSP1",196,0)
 S DR=$G(DR(1,2.312))
"RTN","IBCNSP1",197,0)
 I DR="" G EDITX
"RTN","IBCNSP1",198,0)
 ;
"RTN","IBCNSP1",199,0)
 S $P(^DIE(IBY,0),U,7)=DT   ; see TEM+2^DIE  ICR# 5002
"RTN","IBCNSP1",200,0)
 ;
"RTN","IBCNSP1",201,0)
 D ^DIE     ; edit subfile data
"RTN","IBCNSP1",202,0)
 ;
"RTN","IBCNSP1",203,0)
 ; If the user entered an up-arrow, or timed-out, or deleted the entry,
"RTN","IBCNSP1",204,0)
 ; then set the output variable IBQUIT
"RTN","IBCNSP1",205,0)
 I $D(Y)!$D(DTOUT)!'$D(DA) S IBQUIT=1
"RTN","IBCNSP1",206,0)
 ;
"RTN","IBCNSP1",207,0)
 F IBZ="VADM","VAPA" K ^UTILITY(IBZ,$J)    ; cleanup scratch global
"RTN","IBCNSP1",208,0)
 ;
"RTN","IBCNSP1",209,0)
 D UPDCLM(IBDFN,IBCDFN)      ; update editable claims
"RTN","IBCNSP1",210,0)
 ;
"RTN","IBCNSP1",211,0)
 ; Cleanup any problems in the secondary ID area
"RTN","IBCNSP1",212,0)
 S IDS=$G(^DPT(IBDFN,.312,IBCDFN,5))           ; whole 5 node
"RTN","IBCNSP1",213,0)
 S (SUB,PAT)=""
"RTN","IBCNSP1",214,0)
 F PCE=3:1:8 S $P(SUB,U,PCE)=$P(IDS,U,PCE-1)   ; subscriber sec ID/qual
"RTN","IBCNSP1",215,0)
 F PCE=3:1:8 S $P(PAT,U,PCE)=$P(IDS,U,PCE+5)   ; patient sec ID/qual
"RTN","IBCNSP1",216,0)
 ; SUB and PAT are 8-piece strings with pieces 1 and 2 being nil
"RTN","IBCNSP1",217,0)
 S SUB1=$$SCRUB^IBCEF21(SUB)                   ; scrub 8-piece string
"RTN","IBCNSP1",218,0)
 S PAT1=$$SCRUB^IBCEF21(PAT)                   ; scrub 8-piece string
"RTN","IBCNSP1",219,0)
 I SUB'=SUB1 S $P(^DPT(IBDFN,.312,IBCDFN,5),U,2,7)=$P(SUB1,U,3,8)
"RTN","IBCNSP1",220,0)
 I PAT'=PAT1 S $P(^DPT(IBDFN,.312,IBCDFN,5),U,8,13)=$P(PAT1,U,3,8)
"RTN","IBCNSP1",221,0)
 ;
"RTN","IBCNSP1",222,0)
EDITX ;
"RTN","IBCNSP1",223,0)
 Q
"RTN","IBCNSP1",224,0)
 ;
"RTN","IBCNSP1",225,0)
UPDCLM(IBDFN,IBCDFN) ; Update the Insurance nodes of claims that are still editable
"RTN","IBCNSP1",226,0)
 NEW IBIFN
"RTN","IBCNSP1",227,0)
 S IBIFN=0 F  S IBIFN=$O(^DGCR(399,"C",IBDFN,IBIFN)) Q:'IBIFN  D UPDCLM^IBCNSP2(IBIFN,IBDFN,IBCDFN)
"RTN","IBCNSP1",228,0)
 ;
"RTN","IBCNSP1",229,0)
UPDCLMX ;
"RTN","IBCNSP1",230,0)
 Q
"RTN","IBCNSP1",231,0)
 ;
"RTN","IBCNSP1",232,0)
PRELCNV(CODE,FLG) ; conversion between X12, NCPDP and VistA pt. relationship codes
"RTN","IBCNSP1",233,0)
 ; CODE - code for pt. relationship to convert
"RTN","IBCNSP1",234,0)
 ; FLG - 0 for X12 -> VistA conversion, 1 for VistA -> X12 conversion, 2 - for VistA -> NCPDP conversion
"RTN","IBCNSP1",235,0)
 ; returns converted code for pt. relationship, or null if no match found
"RTN","IBCNSP1",236,0)
 N I,RES,VSTR,X12STR
"RTN","IBCNSP1",237,0)
 S VSTR="01^02^03^08^11^15^32^33^34^35^36"
"RTN","IBCNSP1",238,0)
 S X12STR="18^01^19^20^39^41^32^33^29^53^G8"
"RTN","IBCNSP1",239,0)
 S RES=""
"RTN","IBCNSP1",240,0)
 I FLG=0 F I=1:1:11 S:$P(X12STR,U,I)=CODE RES=$P(VSTR,U,I) Q:RES'=""
"RTN","IBCNSP1",241,0)
 I FLG=1 F I=1:1:11 S:$P(VSTR,U,I)=CODE RES=$P(X12STR,U,I) Q:RES'=""
"RTN","IBCNSP1",242,0)
 I FLG=2,+CODE>0 S RES=$S(+CODE>3:"04",1:CODE)
"RTN","IBCNSP1",243,0)
 Q RES
"RTN","IBCNSP3")
0^49^B38854605^B35837178
"RTN","IBCNSP3",1,0)
IBCNSP3 ;ALB/AAS - INSURANCE MANAGEMENT EDIT ;06-JUL-93
"RTN","IBCNSP3",2,0)
 ;;2.0;INTEGRATED BILLING;**28,52,85,251,371,497**;21-MAR-94;Build 120
"RTN","IBCNSP3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSP3",4,0)
 ;
"RTN","IBCNSP3",5,0)
% G ^IBCNSM4
"RTN","IBCNSP3",6,0)
 ;
"RTN","IBCNSP3",7,0)
SAVEPT(DFN,DA) ; -- Save the global before editing
"RTN","IBCNSP3",8,0)
 K ^TMP($J,"IBCNSPT")
"RTN","IBCNSP3",9,0)
 S ^TMP($J,"IBCNSPT",2.312,DFN,+DA,0)=$G(^DPT(DFN,.312,+DA,0))
"RTN","IBCNSP3",10,0)
 S ^TMP($J,"IBCNSPT",2.312,DFN,+DA,1)=$G(^DPT(DFN,.312,+DA,1))
"RTN","IBCNSP3",11,0)
 S ^TMP($J,"IBCNSPT",2.312,DFN,+DA,2)=$G(^DPT(DFN,.312,+DA,2))
"RTN","IBCNSP3",12,0)
 S ^TMP($J,"IBCNSPT",2.312,DFN,+DA,3)=$G(^DPT(DFN,.312,+DA,3))
"RTN","IBCNSP3",13,0)
 S ^TMP($J,"IBCNSPT",2.312,DFN,+DA,4)=$G(^DPT(DFN,.312,+DA,4))
"RTN","IBCNSP3",14,0)
 S ^TMP($J,"IBCNSPT",2.312,DFN,+DA,5)=$G(^DPT(DFN,.312,+DA,5))
"RTN","IBCNSP3",15,0)
 S ^TMP($J,"IBCNSPT",2.312,DFN,+DA,7)=$G(^DPT(DFN,.312,+DA,7))    ; IB*2.0*497 (vd)
"RTN","IBCNSP3",16,0)
 Q
"RTN","IBCNSP3",17,0)
 ;
"RTN","IBCNSP3",18,0)
COMPPT(DFN,DA) ; -- Compare before editing with globals
"RTN","IBCNSP3",19,0)
 S IBDIF=0
"RTN","IBCNSP3",20,0)
 I $G(^DPT(DFN,.312,+DA,0))'=$G(^TMP($J,"IBCNSPT",2.312,DFN,+DA,0)) S IBDIF=1 G COMPPTQ
"RTN","IBCNSP3",21,0)
 I $G(^DPT(DFN,.312,+DA,1))'=$G(^TMP($J,"IBCNSPT",2.312,DFN,+DA,1)) S IBDIF=1 G COMPPTQ
"RTN","IBCNSP3",22,0)
 I $G(^DPT(DFN,.312,+DA,2))'=$G(^TMP($J,"IBCNSPT",2.312,DFN,+DA,2)) S IBDIF=1 G COMPPTQ
"RTN","IBCNSP3",23,0)
 I $G(^DPT(DFN,.312,+DA,3))'=$G(^TMP($J,"IBCNSPT",2.312,DFN,+DA,3)) S IBDIF=1 G COMPPTQ
"RTN","IBCNSP3",24,0)
 I $G(^DPT(DFN,.312,+DA,4))'=$G(^TMP($J,"IBCNSPT",2.312,DFN,+DA,4)) S IBDIF=1 G COMPPTQ
"RTN","IBCNSP3",25,0)
 I $G(^DPT(DFN,.312,+DA,5))'=$G(^TMP($J,"IBCNSPT",2.312,DFN,+DA,5)) S IBDIF=1 G COMPPTQ
"RTN","IBCNSP3",26,0)
 I $G(^DPT(DFN,.312,+DA,7))'=$G(^TMP($J,"IBCNSPT",2.312,DFN,+DA,7)) S IBDIF=1 G COMPPTQ    ; IB*2.0*497 (vd)
"RTN","IBCNSP3",27,0)
 ;
"RTN","IBCNSP3",28,0)
COMPPTQ I IBDIF D:'$D(IBCOVP) COVERED^IBCNSM31(DFN,$P($G(^DPT(DFN,.31)),"^",11))
"RTN","IBCNSP3",29,0)
 Q
"RTN","IBCNSP3",30,0)
 ;
"RTN","IBCNSP3",31,0)
UPDATPT(DFN,DA) ; -- enter date and user if editing has taken place
"RTN","IBCNSP3",32,0)
 N DR,DIE,DIC
"RTN","IBCNSP3",33,0)
 S DIE="^DPT("_DFN_",.312,",DA(1)=DFN
"RTN","IBCNSP3",34,0)
 S DR="1.05///NOW;1.06////"_DUZ
"RTN","IBCNSP3",35,0)
 D ^DIE
"RTN","IBCNSP3",36,0)
 Q
"RTN","IBCNSP3",37,0)
 ;
"RTN","IBCNSP3",38,0)
EM ; -- Employer for claims update
"RTN","IBCNSP3",39,0)
 D FULL^VALM1 W !!
"RTN","IBCNSP3",40,0)
 N IBDIF,DA,DR,DIC,DIE
"RTN","IBCNSP3",41,0)
 D SAVEPT(DFN,IBCDFN)
"RTN","IBCNSP3",42,0)
 D VARS
"RTN","IBCNSP3",43,0)
 L +^DPT(DFN,.312,+$P($G(IBPPOL),"^",4)):5 I '$T D LOCKED^IBTRCD1 G EMQ
"RTN","IBCNSP3",44,0)
 ;
"RTN","IBCNSP3",45,0)
 ;S DR="2.01;S:'$P($G(^DPT(DFN,.312,+$G(DA),2)),U) Y=""@999"";W !!,""*** If ROI applies, make sure current consent is signed! ***"",!;2.015;2.02;2.03;2.04;2.05;2.06;2.07;2.08;2.09;@999"
"RTN","IBCNSP3",46,0)
 ;
"RTN","IBCNSP3",47,0)
 S DR="2.1" D ^DIE K DIE,DR
"RTN","IBCNSP3",48,0)
 ;
"RTN","IBCNSP3",49,0)
 I +$P($G(^DPT(DFN,.312,+$G(DA),2)),U,10),$P($G(^DPT(DFN,.312,+$G(DA),2)),U,9)="" D EMPSET(DFN,$G(DA)) ; curr emp
"RTN","IBCNSP3",50,0)
 ;
"RTN","IBCNSP3",51,0)
 I +$P($G(^DPT(DFN,.312,+$G(DA),2)),U,10) D VARS S DR="2.015;2.11;2.12;2.01;W:+X !!,""*** If ROI applies, make sure current consent is signed! ***"",!!;2.02;2.03;2.04;2.05;2.06;2.07;2.08;@999" D ^DIE K DIE,DR
"RTN","IBCNSP3",52,0)
 ;
"RTN","IBCNSP3",53,0)
 ;I '$P($G(^DPT(DFN,.312,+$G(DA),2)),U) D VARS S DR="2.015///@;2.02///@;2.03///@;2.04///@;2.05///@;2.06///@;2.07///@;2.08///@" D ^DIE
"RTN","IBCNSP3",54,0)
 ;
"RTN","IBCNSP3",55,0)
 I '$P($G(^DPT(DFN,.312,+$G(DA),2)),U,10) D VARS S DR="2.01///@;2.015///@;2.02///@;2.03///@;2.04///@;2.05///@;2.06///@;2.07///@;2.08///@;2.11///@;2.12///@" D ^DIE
"RTN","IBCNSP3",56,0)
 ;
"RTN","IBCNSP3",57,0)
 D COMPPT(DFN,IBCDFN)
"RTN","IBCNSP3",58,0)
 I IBDIF D UPDATPT(DFN,IBCDFN),BLD^IBCNSP
"RTN","IBCNSP3",59,0)
 L -^DPT(DFN,.312,+$P($G(IBPPOL),"^",4))
"RTN","IBCNSP3",60,0)
EMQ S VALMBCK="R" Q
"RTN","IBCNSP3",61,0)
 ;
"RTN","IBCNSP3",62,0)
AC ; -- Add Comment
"RTN","IBCNSP3",63,0)
 D FULL^VALM1 W !!
"RTN","IBCNSP3",64,0)
 N IBDIF,DA,DR,DIE,DIC,X,Y
"RTN","IBCNSP3",65,0)
 D SAVEPT(DFN,IBCDFN)
"RTN","IBCNSP3",66,0)
 W !!,"You may now enter a brief comment about this patient's policy"
"RTN","IBCNSP3",67,0)
 D VARS
"RTN","IBCNSP3",68,0)
 L +^DPT(DFN,.312,+$P($G(IBPPOL),"^",4)):5 I '$T D LOCKED^IBTRCD1 G ACQ
"RTN","IBCNSP3",69,0)
 S DR="1.08" D ^DIE
"RTN","IBCNSP3",70,0)
 D COMPPT(DFN,IBCDFN) I IBDIF D UPDATPT(DFN,IBCDFN)
"RTN","IBCNSP3",71,0)
 L -^DPT(DFN,.312,+$P($G(IBPPOL),"^",4))
"RTN","IBCNSP3",72,0)
 W !!,"You may now enter comments about this Group Plan that pertains to all Patients"
"RTN","IBCNSP3",73,0)
 L +^IBA(355.3,+IBCPOL):5 I '$T D LOCKED^IBTRCD1 G ACQ
"RTN","IBCNSP3",74,0)
 S DIE="^IBA(355.3,",DA=IBCPOL,DR="11" D ^DIE
"RTN","IBCNSP3",75,0)
 D BLD^IBCNSP
"RTN","IBCNSP3",76,0)
 L -^IBA(355.3,+IBCPOL)
"RTN","IBCNSP3",77,0)
ACQ S VALMBCK="R" Q
"RTN","IBCNSP3",78,0)
 ;
"RTN","IBCNSP3",79,0)
BLS(X,Y) ; -- blank a section of lines
"RTN","IBCNSP3",80,0)
 N I
"RTN","IBCNSP3",81,0)
 F I=X:1:Y D BLANK^IBCNSP(.I)
"RTN","IBCNSP3",82,0)
 Q
"RTN","IBCNSP3",83,0)
 ;
"RTN","IBCNSP3",84,0)
VARS ; -- set vars for call to die for .312 node
"RTN","IBCNSP3",85,0)
 S DA(1)=DFN,DA=$P(IBPPOL,"^",4)
"RTN","IBCNSP3",86,0)
 S DIE="^DPT("_DA(1)_",.312,"
"RTN","IBCNSP3",87,0)
 Q
"RTN","IBCNSP3",88,0)
 ;
"RTN","IBCNSP3",89,0)
SAVE(IBCPOL) ; -- Save the global before editing
"RTN","IBCNSP3",90,0)
 K ^TMP($J,"IBCNSP")
"RTN","IBCNSP3",91,0)
 S ^TMP($J,"IBCNSP",355.3,+IBCPOL,0)=$G(^IBA(355.3,+IBCPOL,0))
"RTN","IBCNSP3",92,0)
 S ^TMP($J,"IBCNSP",355.3,+IBCPOL,1)=$G(^IBA(355.3,+IBCPOL,1))
"RTN","IBCNSP3",93,0)
 S ^TMP($J,"IBCNSP",355.3,+IBCPOL,2)=$G(^IBA(355.3,+IBCPOL,2))   ; IB*2.0*497 (vd)
"RTN","IBCNSP3",94,0)
 ;;Daou/EEN - adding BIN and PCN
"RTN","IBCNSP3",95,0)
 S ^TMP($J,"IBCNSP",355.3,+IBCPOL,6)=$G(^IBA(355.3,+IBCPOL,6))
"RTN","IBCNSP3",96,0)
 Q
"RTN","IBCNSP3",97,0)
 ;
"RTN","IBCNSP3",98,0)
COMP(IBCPOL) ; -- Compare before editing with globals
"RTN","IBCNSP3",99,0)
 S IBDIF=0
"RTN","IBCNSP3",100,0)
 I $G(^IBA(355.3,+IBCPOL,0))'=$G(^TMP($J,"IBCNSP",355.3,+IBCPOL,0)) S IBDIF=1 Q
"RTN","IBCNSP3",101,0)
 I $G(^IBA(355.3,+IBCPOL,1))'=$G(^TMP($J,"IBCNSP",355.3,+IBCPOL,1)) S IBDIF=1 Q
"RTN","IBCNSP3",102,0)
 I $G(^IBA(355.3,+IBCPOL,2))'=$G(^TMP($J,"IBCNSP",355.3,+IBCPOL,2)) S IBDIF=1 Q    ; IB*2.0*497 (vd)
"RTN","IBCNSP3",103,0)
 ;;Daou/EEN - adding BIN and PCN
"RTN","IBCNSP3",104,0)
 I $G(^IBA(355.3,+IBCPOL,6))'=$G(^TMP($J,"IBCNSP",355.3,+IBCPOL,6)) S IBDIF=1 Q
"RTN","IBCNSP3",105,0)
 Q
"RTN","IBCNSP3",106,0)
 ;
"RTN","IBCNSP3",107,0)
UPDATE(IBCPOL) ; -- Update last edited by
"RTN","IBCNSP3",108,0)
 N DA,DIC,DIE,DR
"RTN","IBCNSP3",109,0)
 S DIE="^IBA(355.3,",DA=IBCPOL,DR="1.05///NOW;1.06////"_DUZ
"RTN","IBCNSP3",110,0)
 D ^DIE
"RTN","IBCNSP3",111,0)
 Q
"RTN","IBCNSP3",112,0)
 ;
"RTN","IBCNSP3",113,0)
RIDERS ; -- add/edit personal riders
"RTN","IBCNSP3",114,0)
 ;
"RTN","IBCNSP3",115,0)
 D FULL^VALM1
"RTN","IBCNSP3",116,0)
 N IBDIF,DA,DR,DIE,DIC,X,Y,IBCDFN,IBPRD,IBPRY
"RTN","IBCNSP3",117,0)
 S IBCDFN=$P(IBPPOL,"^",4)
"RTN","IBCNSP3",118,0)
 W ! D DISPR W !
"RTN","IBCNSP3",119,0)
 ;
"RTN","IBCNSP3",120,0)
R1 S DIC="^IBA(355.7,",DIC(0)="AEQML",DLAYGO=355.7
"RTN","IBCNSP3",121,0)
 S DIC("DR")=".02////"_DFN_";.03////"_IBCDFN
"RTN","IBCNSP3",122,0)
 S DIC("S")="I $P(^(0),U,2)=DFN,$P(^(0),U,3)=IBCDFN"
"RTN","IBCNSP3",123,0)
 I $D(IBPRD) S DIC("B")=IBPRD
"RTN","IBCNSP3",124,0)
 D ^DIC K DIC,IBPRD
"RTN","IBCNSP3",125,0)
 I +Y<1 G RIDERQ
"RTN","IBCNSP3",126,0)
 S IBPRY=+Y
"RTN","IBCNSP3",127,0)
 L +^IBA(355.7,IBPRY):5 I '$T D LOCKED^IBTRCD1 G RIDERQ
"RTN","IBCNSP3",128,0)
 S DIE="^IBA(355.7,",DA=+Y,DR=".01",DIDEL=355.7
"RTN","IBCNSP3",129,0)
 D ^DIE K DA,DR,DIE,DIC,DIDEL
"RTN","IBCNSP3",130,0)
 L -^IBA(355.7,IBPRY)
"RTN","IBCNSP3",131,0)
 W ! G R1
"RTN","IBCNSP3",132,0)
RIDERQ S VALMBCK="R"
"RTN","IBCNSP3",133,0)
 Q
"RTN","IBCNSP3",134,0)
 ;
"RTN","IBCNSP3",135,0)
RD ; -- Add riders/ for multiple policies
"RTN","IBCNSP3",136,0)
 D FULL^VALM1
"RTN","IBCNSP3",137,0)
 N I,J,IBXX,VALMY
"RTN","IBCNSP3",138,0)
 D EN^VALM2($G(XQORNOD(0)))
"RTN","IBCNSP3",139,0)
 I $D(VALMY) S IBXX=0 F  S IBXX=$O(VALMY(IBXX)) Q:'IBXX  D
"RTN","IBCNSP3",140,0)
 .S IBPPOL=$G(^TMP("IBNSMDX",$J,$O(^TMP("IBNSM",$J,"IDX",IBXX,0))))
"RTN","IBCNSP3",141,0)
 .Q:IBPPOL=""
"RTN","IBCNSP3",142,0)
 .D RIDERS
"RTN","IBCNSP3",143,0)
 .Q
"RTN","IBCNSP3",144,0)
 D BLD^IBCNSM
"RTN","IBCNSP3",145,0)
 S VALMBCK="R"
"RTN","IBCNSP3",146,0)
 Q
"RTN","IBCNSP3",147,0)
 ;
"RTN","IBCNSP3",148,0)
DISPR ; -- Display riders
"RTN","IBCNSP3",149,0)
 N IBPR,I,J
"RTN","IBCNSP3",150,0)
 S I=0
"RTN","IBCNSP3",151,0)
 I '$G(IBCDFN)!('$G(DFN)) G DISPRQ
"RTN","IBCNSP3",152,0)
 W !,"Current Personal Riders: "
"RTN","IBCNSP3",153,0)
 F  S I=$O(^IBA(355.7,"APP",DFN,IBCDFN,I)) Q:'I  S J=$O(^(I,0)),IBPR=$G(^IBA(355.7,+J,0)) D
"RTN","IBCNSP3",154,0)
 .S IBPRD=$$EXPAND^IBTRE(355.7,.01,+IBPR)
"RTN","IBCNSP3",155,0)
 .W !?5,IBPRD
"RTN","IBCNSP3",156,0)
 I '$D(IBPRD) W !?5,"None Indicated"
"RTN","IBCNSP3",157,0)
DISPRQ Q
"RTN","IBCNSP3",158,0)
 ;
"RTN","IBCNSP3",159,0)
EMPSET(DFN,IBCPOL) ; insert patient or spouses current employer as ESGHP address if that employer sponsors this plan
"RTN","IBCNSP3",160,0)
 N IBWHOS,VAOA,DIR,IBE,IBEMPST,DR,X,Y
"RTN","IBCNSP3",161,0)
 I +$G(DFN) S IBWHOS=$P($G(^DPT(DFN,.312,+$G(IBCPOL),0)),U,6) S VAOA("A")=$S(IBWHOS="v":5,IBWHOS="s":6,1:"")
"RTN","IBCNSP3",162,0)
 I $G(VAOA("A"))'="" D OAD^VADPT I $G(VAOA(9))'="" D
"RTN","IBCNSP3",163,0)
 . ;
"RTN","IBCNSP3",164,0)
 . S DIR("A")="Current Employer "_VAOA(9)_" Sponsors this Plan",DIR("B")="No",DIR(0)="Y" W ! D ^DIR W ! Q:'Y  W "...."
"RTN","IBCNSP3",165,0)
 . D VARS S IBE=$S(IBWHOS="v":.311,1:.25),IBEMPST=$P($G(^DPT(DFN,IBE)),U,15)
"RTN","IBCNSP3",166,0)
 . ;
"RTN","IBCNSP3",167,0)
 . S DR="2.015///"_VAOA(9)_";2.02///"_VAOA(1)_";2.03///"_VAOA(2)_";2.04///"_VAOA(3)_";2.05///"_VAOA(4) D ^DIE
"RTN","IBCNSP3",168,0)
 . S DR="2.06////"_$P(VAOA(5),U,1)_";2.07////"_$P(VAOA(11),U,1)_";2.08///"_$E(VAOA(8),1,15)_";2.11////"_IBEMPST D ^DIE
"RTN","IBCNSP3",169,0)
 Q
"RTN","IBCNSU2")
0^60^B19732446^B19118425
"RTN","IBCNSU2",1,0)
IBCNSU2 ;ALB/NLR - INSURANCE PLAN LOOK-UP UTILITY ; 18-NOV-94
"RTN","IBCNSU2",2,0)
 ;;2.0;INTEGRATED BILLING;**28,62,497**;21-MAR-94;Build 120
"RTN","IBCNSU2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSU2",4,0)
 ;
"RTN","IBCNSU2",5,0)
LKP(IBCNS,IBIND,IBMULT,IBSEL,IBALR,IBW) ; Look-up Utility for Insurance Plans
"RTN","IBCNSU2",6,0)
 ;  Input:    IBCNS  --  Pointer to the ins. company in file #36
"RTN","IBCNSU2",7,0)
 ;            IBIND  --  Include Individual Plans?  (1 - Yes | 0 - No)
"RTN","IBCNSU2",8,0)
 ;           IBMULT  --  If set to 1, allows multiple plans to be chosen
"RTN","IBCNSU2",9,0)
 ;            IBALR  --  May be set to point to plan in file #355.3
"RTN","IBCNSU2",10,0)
 ;                       to be excluded from selection
"RTN","IBCNSU2",11,0)
 ;              IBW  --  If set to 1, allows inactive plans to be chosen
"RTN","IBCNSU2",12,0)
 ; Output:    IBSEL  --  Set to the pointer to the plan in file #355.3
"RTN","IBCNSU2",13,0)
 ;                       if only a single plan is to be selected.
"RTN","IBCNSU2",14,0)
 ;
"RTN","IBCNSU2",15,0)
 ;                       The array ^TMP($J,"IBSEL",ptr)="" is returned
"RTN","IBCNSU2",16,0)
 ;                       (where 'ptr' points to the plan in file
"RTN","IBCNSU2",17,0)
 ;                       #355.3) if multiple plans are to be selected.
"RTN","IBCNSU2",18,0)
 ;
"RTN","IBCNSU2",19,0)
 I '$G(IBCNS) G LKPQ
"RTN","IBCNSU2",20,0)
 N VALMY,VALMHDR
"RTN","IBCNSU2",21,0)
 S IBIND=$G(IBIND)>0,IBW=$G(IBW)>0,IBMULT=+$G(IBMULT),IBSEL=0
"RTN","IBCNSU2",22,0)
 D EN^VALM("IBCNS PLAN LOOKUP")
"RTN","IBCNSU2",23,0)
LKPQ Q
"RTN","IBCNSU2",24,0)
 ;
"RTN","IBCNSU2",25,0)
INIT ; Build the list of plans.
"RTN","IBCNSU2",26,0)
 N IBP,IBCPOLD,X,IBCPOLD2  ;WCJ;IB*2*497
"RTN","IBCNSU2",27,0)
 K ^TMP("IBCNSJ",$J)
"RTN","IBCNSU2",28,0)
 S VALMCNT=0,VALMBG=1
"RTN","IBCNSU2",29,0)
 S IBP=0 F  S IBP=$O(^IBA(355.3,"B",+IBCNS,IBP)) Q:'IBP  D
"RTN","IBCNSU2",30,0)
 .S IBCPOLD=$G(^IBA(355.3,+IBP,0))
"RTN","IBCNSU2",31,0)
 .S IBCPOLD2=$G(^IBA(355.3,+IBP,2))  ;WCJ;IB*2.0*497
"RTN","IBCNSU2",32,0)
 .I 'IBIND,'$P(IBCPOLD,"^",2) Q  ;    exclude individual plans
"RTN","IBCNSU2",33,0)
 .I 'IBW,$P(IBCPOLD,"^",11) Q  ;      plan is inactive
"RTN","IBCNSU2",34,0)
 .;
"RTN","IBCNSU2",35,0)
 .S VALMCNT=VALMCNT+1
"RTN","IBCNSU2",36,0)
 .S X=$$SETFLD^VALM1(VALMCNT,"","NUMBER")
"RTN","IBCNSU2",37,0)
 .I '$P(IBCPOLD,"^",2) S $E(X,4)="+"
"RTN","IBCNSU2",38,0)
 .S X=$$SETFLD^VALM1($P(IBCPOLD2,"^",1),X,"GNAME")  ;WCJ;IB*2.0*497
"RTN","IBCNSU2",39,0)
 .I $P(IBCPOLD,"^",11) S $E(X,24)="*"
"RTN","IBCNSU2",40,0)
 .S X=$$SETFLD^VALM1($P(IBCPOLD2,"^",2),X,"GNUM")  ;WCJ;IB*2.0*497
"RTN","IBCNSU2",41,0)
 .S X=$$SETFLD^VALM1($$EXPAND^IBTRE(355.3,.09,$P(IBCPOLD,"^",9)),X,"TYPE")
"RTN","IBCNSU2",42,0)
 .S X=$$SETFLD^VALM1($$YN^IBCNSM($P(IBCPOLD,"^",5)),X,"UR")
"RTN","IBCNSU2",43,0)
 .S X=$$SETFLD^VALM1($$YN^IBCNSM($P(IBCPOLD,"^",6)),X,"PREC")
"RTN","IBCNSU2",44,0)
 .S X=$$SETFLD^VALM1($$YN^IBCNSM($P(IBCPOLD,"^",7)),X,"PREEX")
"RTN","IBCNSU2",45,0)
 .S X=$$SETFLD^VALM1($$YN^IBCNSM($P(IBCPOLD,"^",8)),X,"BENAS")
"RTN","IBCNSU2",46,0)
 .;
"RTN","IBCNSU2",47,0)
 .S ^TMP("IBCNSJ",$J,VALMCNT,0)=X
"RTN","IBCNSU2",48,0)
 .S ^TMP("IBCNSJ",$J,"IDX",VALMCNT,VALMCNT)=IBP
"RTN","IBCNSU2",49,0)
 ;
"RTN","IBCNSU2",50,0)
 I '$D(^TMP("IBCNSJ",$J)) S VALMCNT=2,^TMP("IBCNSJ",$J,1,0)=" ",^TMP("IBCNSJ",$J,2,0)="   No plans were identified for this company."
"RTN","IBCNSU2",51,0)
 Q
"RTN","IBCNSU2",52,0)
 ;
"RTN","IBCNSU2",53,0)
HDR ; Build the list header.
"RTN","IBCNSU2",54,0)
 N IBCNS0,IBCNS11,IBCNS13,IBLEAD,X,X1,X2
"RTN","IBCNSU2",55,0)
 S IBCNS0=$G(^DIC(36,+IBCNS,0)),IBCNS11=$G(^(.11)),IBCNS13=$G(^(.13))
"RTN","IBCNSU2",56,0)
 S X2=$S(IBW:"",1:"Active ")
"RTN","IBCNSU2",57,0)
 S IBLEAD=$S(IBIND:"All "_X2,1:X2_"Group ")_"Plans for: "
"RTN","IBCNSU2",58,0)
 S X="Phone: "_$S($P(IBCNS13,"^")]"":$P(IBCNS13,"^"),1:"<not filed>")
"RTN","IBCNSU2",59,0)
 S VALMHDR(1)=$$SETSTR^VALM1(X,IBLEAD_$P(IBCNS0,"^"),81-$L(X),40)
"RTN","IBCNSU2",60,0)
 S X1="Precerts: "_$S($P(IBCNS13,"^",3)]"":$P(IBCNS13,"^",3),1:"<not filed>")
"RTN","IBCNSU2",61,0)
 S X=$TR($J("",$L(IBLEAD)),""," ")_$S($P(IBCNS11,"^")]"":$P(IBCNS11,"^"),1:"<no street address>")
"RTN","IBCNSU2",62,0)
 S VALMHDR(2)=$$SETSTR^VALM1(X1,X,81-$L(X1),40)
"RTN","IBCNSU2",63,0)
 S X=$S($P(IBCNS11,"^",4)]"":$P(IBCNS11,"^",4),1:"<no city>")_", "
"RTN","IBCNSU2",64,0)
 S X=X_$S($P(IBCNS11,"^",5):$P($G(^DIC(5,$P(IBCNS11,"^",5),0)),"^",2),1:"<no state>")_"  "_$E($P(IBCNS11,"^",6),1,5)_$S($E($P(IBCNS11,"^",6),6,9)]"":"-"_$E($P(IBCNS11,"^",6),6,9),1:"")
"RTN","IBCNSU2",65,0)
 S VALMHDR(3)=$$SETSTR^VALM1(X,"",$L(IBLEAD)+1,80)
"RTN","IBCNSU2",66,0)
 S X="#" I $G(IBIND) S X="#  + => Indiv. Plan"
"RTN","IBCNSU2",67,0)
 I $G(IBW) S X=$E(X_$J("",23),1,23)_"* => Inactive Plan"
"RTN","IBCNSU2",68,0)
 S VALMHDR(4)=$$SETSTR^VALM1("Pre-  Pre-  Ben",X,64,17)
"RTN","IBCNSU2",69,0)
 Q
"RTN","IBCNSU2",70,0)
 ;
"RTN","IBCNSU2",71,0)
FNL ; Exit action.
"RTN","IBCNSU2",72,0)
 K ^TMP("IBCNSJ",$J),VALMBCK
"RTN","IBCNSU2",73,0)
 D CLEAN^VALM10,CLEAR^VALM1
"RTN","IBCNSU2",74,0)
 Q
"RTN","IBCNSU2",75,0)
 ;
"RTN","IBCNSU2",76,0)
SP ; 'Select Plan' Action
"RTN","IBCNSU2",77,0)
 N DIR,DIRUT,DUOUT,DTOUT,DIROUT,IBOK,IBQUIT,IBX,Y
"RTN","IBCNSU2",78,0)
 D EN^VALM2($G(XQORNOD(0)),"O"),FULL^VALM1
"RTN","IBCNSU2",79,0)
 S IBX=$O(VALMY(0)),VALMBCK="R"
"RTN","IBCNSU2",80,0)
 I 'IBX W !!,"No plan selected!" G SPQ
"RTN","IBCNSU2",81,0)
 I 'IBMULT D  G SPQ
"RTN","IBCNSU2",82,0)
 .I $O(VALMY(IBX)) W !!,*7,"You may only select a single plan!" Q
"RTN","IBCNSU2",83,0)
 .I $G(IBALR),+$G(^TMP("IBCNSJ",$J,"IDX",IBX,IBX))=IBALR W !!,*7,"This plan is not allowed for selection!" Q
"RTN","IBCNSU2",84,0)
 .D OK^IBCNSM3
"RTN","IBCNSU2",85,0)
 .I IBQUIT S VALMBCK="Q" Q
"RTN","IBCNSU2",86,0)
 .I IBOK S IBSEL=+$G(^TMP("IBCNSJ",$J,"IDX",IBX,IBX)),VALMBCK="Q"
"RTN","IBCNSU2",87,0)
 ;
"RTN","IBCNSU2",88,0)
 S IBX=0 F  S IBX=$O(VALMY(IBX)) Q:'IBX  S ^TMP($J,"IBSEL",+$G(^TMP("IBCNSJ",$J,"IDX",IBX,IBX)))=""
"RTN","IBCNSU2",89,0)
 S DIR(0)="Y",DIR("B")="NO",DIR("A")="Would you like to select any other plans"
"RTN","IBCNSU2",90,0)
 S DIR("?")="If you wish to select plans from other screens, please answer 'YES'.  Otherwise, answer 'NO'."
"RTN","IBCNSU2",91,0)
 D ^DIR K DIR I Y<1!($D(DIRUT)) S VALMBCK="Q"
"RTN","IBCNSU2",92,0)
 ;
"RTN","IBCNSU2",93,0)
SPQ I '$O(IBSEL(0)),VALMBCK="R" D PAUSE^VALM1
"RTN","IBCNSU2",94,0)
 Q
"RTN","IBCNSU41")
0^48^B22019975^B21365764
"RTN","IBCNSU41",1,0)
IBCNSU41 ;ALB/CPM - SPONSOR UTILITIES (CON'T) ; 5/9/03 1:25pm
"RTN","IBCNSU41",2,0)
 ;;2.0;INTEGRATED BILLING;**52,211,240,497**;21-MAR-94;Build 120
"RTN","IBCNSU41",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNSU41",4,0)
 ;
"RTN","IBCNSU41",5,0)
SPON(DFN) ; Add/edit sponsor/sponsor relationships for a patient.
"RTN","IBCNSU41",6,0)
 ;  Input:    DFN  --  Pointer to the patient in file #2
"RTN","IBCNSU41",7,0)
 ;
"RTN","IBCNSU41",8,0)
 I '$G(DFN) G SPONQ
"RTN","IBCNSU41",9,0)
 N IBQ S IBQ=0
"RTN","IBCNSU41",10,0)
 F  D LSP Q:IBQ
"RTN","IBCNSU41",11,0)
SPONQ Q
"RTN","IBCNSU41",12,0)
 ;
"RTN","IBCNSU41",13,0)
 ;
"RTN","IBCNSU41",14,0)
 ;
"RTN","IBCNSU41",15,0)
LSP ; Main loop to collect sponsor and relation data.
"RTN","IBCNSU41",16,0)
 S DIR(0)="FAO^3:30",DIR("A")="Select SPONSOR: " D ^DIR K DIR
"RTN","IBCNSU41",17,0)
 I $D(DIRUT)!$D(DIROUT)!$D(DUOUT)!$D(DTOUT) K DIRUT,DIROUT,DTOUT,DUOUT S IBQ=1 G LSPQ
"RTN","IBCNSU41",18,0)
 S IBX=X
"RTN","IBCNSU41",19,0)
 ;
"RTN","IBCNSU41",20,0)
 ; - perform lookup to find sponsor or add a patient sponsor
"RTN","IBCNSU41",21,0)
 S DIC(0)="ELMZ",DIC="^IBA(355.8,",DLAYGO=355.8 D ^DIC K DIC,DLAYGO
"RTN","IBCNSU41",22,0)
 I Y>0 S IBSP=+Y,IBSPD=$G(^IBA(355.8,IBSP,0)),IBNAM=Y(0,0) G LSPC
"RTN","IBCNSU41",23,0)
 I IBX'?1.A1","1.ANP W !,"New sponsors must be in the format LAST,FIRST.",! G LSP
"RTN","IBCNSU41",24,0)
 ;
"RTN","IBCNSU41",25,0)
 ; - is this a new sponsor to be added to the system?
"RTN","IBCNSU41",26,0)
 S DIR(0)="Y",DIR("A")="  Are you adding '"_IBX_"' as a new SPONSOR"
"RTN","IBCNSU41",27,0)
 D ^DIR K DIR
"RTN","IBCNSU41",28,0)
 I 'Y!$D(DIRUT)!$D(DIROUT)!$D(DUOUT)!$D(DTOUT) K DIRUT,DIROUT,DTOUT,DUOUT G LSP
"RTN","IBCNSU41",29,0)
 ;
"RTN","IBCNSU41",30,0)
 ; - add non-patient sponsor to file #355.82 (sponsor person file)
"RTN","IBCNSU41",31,0)
 S (X,IBNAM)=IBX,DIC(0)="L",DIC="^IBA(355.82,",DLAYGO=355.82
"RTN","IBCNSU41",32,0)
 D FILE^DICN S IBSPP=+Y K DLAYGO
"RTN","IBCNSU41",33,0)
 I IBSPP<0 W !,"Unable to add a new sponsor!" G LSPQ
"RTN","IBCNSU41",34,0)
 ;
"RTN","IBCNSU41",35,0)
 ; - now add to file #355.8 (sponsor file)
"RTN","IBCNSU41",36,0)
 S (IBSPD,X)=IBSPP_";IBA(355.82,",DIC(0)="L",DIC="^IBA(355.8,",DLAYGO=355.8
"RTN","IBCNSU41",37,0)
 D FILE^DICN S IBSP=+Y K DLAYGO
"RTN","IBCNSU41",38,0)
 I IBSP<0 W !,"Unable to add a new sponsor!" G LSPQ
"RTN","IBCNSU41",39,0)
 ;
"RTN","IBCNSU41",40,0)
LSPC ; - allow edit of non-patient sponsor name/dob/ssn
"RTN","IBCNSU41",41,0)
 I $P(IBSPD,"^")["IBA" D
"RTN","IBCNSU41",42,0)
 .S DIE="^IBA(355.82,",DA=+IBSPD
"RTN","IBCNSU41",43,0)
 .S DR=".01  NAME;.02  DATE OF BIRTH;.03  SOCIAL SECURITY NUMBER"
"RTN","IBCNSU41",44,0)
 .D ^DIE K DIE,DA,DR
"RTN","IBCNSU41",45,0)
 ;
"RTN","IBCNSU41",46,0)
 ; - edit remaining sponsor attributes
"RTN","IBCNSU41",47,0)
 S DIE="^IBA(355.8,",DA=IBSP
"RTN","IBCNSU41",48,0)
 S DR=".02  MILITARY STATUS;.03  BRANCH;.04  RANK"
"RTN","IBCNSU41",49,0)
 D ^DIE K DA,DR,DIE
"RTN","IBCNSU41",50,0)
 ;
"RTN","IBCNSU41",51,0)
 ; - find patient relation to sponsor, or create one
"RTN","IBCNSU41",52,0)
 S IBSPR=0 F  S IBSPR=$O(^IBA(355.81,"B",DFN,IBSPR)) Q:'IBSPR  I $P($G(^IBA(355.81,IBSPR,0)),"^",2)=IBSP Q
"RTN","IBCNSU41",53,0)
 I 'IBSPR S IBQQ=0 D  G:IBQQ LSPQ
"RTN","IBCNSU41",54,0)
 .W !!,"The person '",IBNAM,"' is not currently the sponsor of this patient."
"RTN","IBCNSU41",55,0)
 .S DIR(0)="Y",DIR("A")="Okay to add this person as the patient's sponsor"
"RTN","IBCNSU41",56,0)
 .S DIR("?")="Please enter 'YES' to add this person as the patient's sponsor, or 'NO' to select a new sponsor."
"RTN","IBCNSU41",57,0)
 .D ^DIR K DIR I 'Y W ! S IBQQ=1 Q
"RTN","IBCNSU41",58,0)
 .;
"RTN","IBCNSU41",59,0)
 .S X=DFN,DIC="^IBA(355.81,",DIC(0)="L",DIC("DR")=".02////"_IBSP,DLAYGO=355.81
"RTN","IBCNSU41",60,0)
 .D FILE^DICN S IBSPR=+Y S:Y<0 IBQQ=1 K DLAYGO
"RTN","IBCNSU41",61,0)
 ;
"RTN","IBCNSU41",62,0)
 ; - edit sponsor relation attributes
"RTN","IBCNSU41",63,0)
 S DIE="^IBA(355.81,",DA=IBSPR,DR=".03:.06" D ^DIE K DA,DIE,DR
"RTN","IBCNSU41",64,0)
 W !
"RTN","IBCNSU41",65,0)
 ;
"RTN","IBCNSU41",66,0)
LSPQ K IBSP,IBSPD,IBSPP,IBSPR,IBQQ,IBNAM,IBX,DIRUT,DIROUT,DTOUT,DUOUT,X,Y
"RTN","IBCNSU41",67,0)
 Q
"RTN","IBCNSU41",68,0)
 ;
"RTN","IBCNSU41",69,0)
 ;
"RTN","IBCNSU41",70,0)
 ;
"RTN","IBCNSU41",71,0)
POL(DFN) ; Update TRICARE policies with Sponsor information.
"RTN","IBCNSU41",72,0)
 ;  Input:   DFN  --  Pointer to the patient in file #2
"RTN","IBCNSU41",73,0)
 ;
"RTN","IBCNSU41",74,0)
 I '$G(DFN) G POLQ
"RTN","IBCNSU41",75,0)
 N IBX,IBY,IBY7,SPON,X,X1,X3,Y,Z
"RTN","IBCNSU41",76,0)
 ;
"RTN","IBCNSU41",77,0)
 S X=0 F  S X=$O(^IBA(355.81,"B",DFN,X)) Q:'X  D  Q:$D(Z)
"RTN","IBCNSU41",78,0)
 .S Y=$G(^IBA(355.81,X,0))
"RTN","IBCNSU41",79,0)
 .;
"RTN","IBCNSU41",80,0)
 .; - relationship must be with a Tricare sponsor
"RTN","IBCNSU41",81,0)
 .Q:$P(Y,"^",4)'="T"
"RTN","IBCNSU41",82,0)
 .;
"RTN","IBCNSU41",83,0)
 .S SPON=$G(^IBA(355.8,+$P(Y,"^",2),0)) Q:SPON=""
"RTN","IBCNSU41",84,0)
 .;
"RTN","IBCNSU41",85,0)
 .; - if sponsor is a patient, get name/dob/SSN from the patient
"RTN","IBCNSU41",86,0)
 .;   file; otherwise, use file #355.82
"RTN","IBCNSU41",87,0)
 .I $P(SPON,"^")["DPT" D
"RTN","IBCNSU41",88,0)
 ..S X1=$G(^DPT(+SPON,0)) Q:X1=""
"RTN","IBCNSU41",89,0)
 ..S Z("NAME")=$P(X1,"^"),Z("DOB")=$P(X1,"^",3),Z("SSN")=$P(X1,"^",9)
"RTN","IBCNSU41",90,0)
 .E  D
"RTN","IBCNSU41",91,0)
 ..S X1=$G(^IBA(355.82,+SPON,0)) Q:X1=""
"RTN","IBCNSU41",92,0)
 ..S Z("NAME")=$P(X1,"^"),Z("DOB")=$P(X1,"^",2),Z("SSN")=$TR($P(X1,"^",3),"-","")
"RTN","IBCNSU41",93,0)
 .;
"RTN","IBCNSU41",94,0)
 .S Z("BRAN")=$P(SPON,"^",3),Z("RANK")=$P(SPON,"^",4)
"RTN","IBCNSU41",95,0)
 ;
"RTN","IBCNSU41",96,0)
 ; - if no Tricare sponsors were found, quit.
"RTN","IBCNSU41",97,0)
 I '$D(Z) G POLQ
"RTN","IBCNSU41",98,0)
 ;
"RTN","IBCNSU41",99,0)
 ; - update any policies with TRICARE plans
"RTN","IBCNSU41",100,0)
 S IBX=0 F  S IBX=$O(^DPT(DFN,.312,IBX)) Q:'IBX  S IBY=$G(^(IBX,0)),IBY7=$G(^(7)) D       ; IB*2.0*497 (vd)
"RTN","IBCNSU41",101,0)
 .;
"RTN","IBCNSU41",102,0)
 .; - only consider TRICARE plans
"RTN","IBCNSU41",103,0)
 .Q:$P($G(^IBE(355.1,+$P($G(^IBA(355.3,+$P(IBY,"^",18),0)),"^",9),0)),"^",3)'=7
"RTN","IBCNSU41",104,0)
 .;
"RTN","IBCNSU41",105,0)
 .; - the policyholder should not be the veteran (patient)
"RTN","IBCNSU41",106,0)
 .Q:$P(IBY,"^",6)="v"
"RTN","IBCNSU41",107,0)
 .;
"RTN","IBCNSU41",108,0)
 .; - if a sponsor DOB exists, be sure it's the same as the
"RTN","IBCNSU41",109,0)
 .;   sponsor file DOB
"RTN","IBCNSU41",110,0)
 .S X3=$G(^DPT(DFN,.312,IBX,3))
"RTN","IBCNSU41",111,0)
 .I X3,+X3'=Z("DOB") Q
"RTN","IBCNSU41",112,0)
 .;
"RTN","IBCNSU41",113,0)
 .S DR=""
"RTN","IBCNSU41",114,0)
 .;IB*2*211
"RTN","IBCNSU41",115,0)
 .I $P(IBY7,"^")="" S DR=DR_"7.01////"_Z("NAME")_";"            ; IB*2.0*497 (vd)
"RTN","IBCNSU41",116,0)
 .I $P(X3,"^")="",Z("DOB") S DR=DR_"3.01////"_Z("DOB")_";"
"RTN","IBCNSU41",117,0)
 .I $P(X3,"^",2)="",Z("BRAN") S DR=DR_"3.02////"_Z("BRAN")_";"
"RTN","IBCNSU41",118,0)
 .I $P(X3,"^",3)="",Z("RANK")]"" S DR=DR_"3.03////"_Z("RANK")_";"
"RTN","IBCNSU41",119,0)
 .I $P(X3,"^",5)="",Z("SSN")]"" S DR=DR_"3.05////"_Z("SSN")_";"
"RTN","IBCNSU41",120,0)
 .;
"RTN","IBCNSU41",121,0)
 .Q:DR=""
"RTN","IBCNSU41",122,0)
 .I $E(DR,$L(DR))=";" S DR=$E(DR,1,$L(DR)-1)
"RTN","IBCNSU41",123,0)
 .;
"RTN","IBCNSU41",124,0)
 .S DIE="^DPT(DFN,.312,",DA(1)=DFN,DA=IBX D ^DIE K DA,DIE,DR
"RTN","IBCNSU41",125,0)
 ;
"RTN","IBCNSU41",126,0)
POLQ Q
"RTN","IBCNUPD")
0^38^B15205533^n/a
"RTN","IBCNUPD",1,0)
IBCNUPD ;ALB/TAZ - UPDATE SUBCRIBER INFO FOR SELECTED PATIENTS ; 07 Mar 2013  14:44 PM
"RTN","IBCNUPD",2,0)
 ;;2.0;INTEGRATED BILLING;**497**;21-MAR-94;Build 120
"RTN","IBCNUPD",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNUPD",4,0)
 ;
"RTN","IBCNUPD",5,0)
 ; Call at tags only
"RTN","IBCNUPD",6,0)
 Q
"RTN","IBCNUPD",7,0)
 ;
"RTN","IBCNUPD",8,0)
 ;
"RTN","IBCNUPD",9,0)
EN ; Entry Point for TaskMan.  The routine should be called at label TASK since it will take awhile to complete.
"RTN","IBCNUPD",10,0)
 ;
"RTN","IBCNUPD",11,0)
 N DFN,FILE,INS,IBREL,IBVAL,IENS,FIELD,DATA,DA,DR,DIE,EXPDT,X,Y
"RTN","IBCNUPD",12,0)
 S DFN=0
"RTN","IBCNUPD",13,0)
 S FILE=2.312
"RTN","IBCNUPD",14,0)
 F  S DFN=$O(^DPT(DFN)) Q:'DFN  D
"RTN","IBCNUPD",15,0)
 . K ^UTILITY("VAPA",$J),^UTILITY("VADM",$J)
"RTN","IBCNUPD",16,0)
 . S INS=0
"RTN","IBCNUPD",17,0)
 . F  S INS=$O(^DPT(DFN,.312,INS)) Q:'INS  D
"RTN","IBCNUPD",18,0)
 .. S IENS=INS_","_DFN_","
"RTN","IBCNUPD",19,0)
 .. S EXPDT=+$$GET1^DIQ(FILE,IENS,3,"I")
"RTN","IBCNUPD",20,0)
 .. I EXPDT,EXPDT<DT Q  ;insurance expiration date exists and it's a past date which means inactive policy
"RTN","IBCNUPD",21,0)
 .. I $$GET1^DIQ(FILE,IENS,4.03)'="SELF" Q
"RTN","IBCNUPD",22,0)
 .. S IBREL=$$GET1^DIQ(FILE,IENS,4.03,"I")
"RTN","IBCNUPD",23,0)
 .. F FIELD=7.01,3.01,3.02,3.05,3.06,3.07,3.08,3.09,3.1,3.11,3.12 D      ; IB*2.0*497 (vd)
"RTN","IBCNUPD",24,0)
 ... S DATA=$$GET1^DIQ(FILE,IENS,FIELD) I DATA'="" Q
"RTN","IBCNUPD",25,0)
 ... S IBVAL=$$PIDEF^IBCNSP1(IBREL,FIELD,DFN,0) I IBVAL="" Q
"RTN","IBCNUPD",26,0)
 ... S DIE="^DPT("_DFN_",.312,"
"RTN","IBCNUPD",27,0)
 ... S DA(1)=DFN,DA=INS
"RTN","IBCNUPD",28,0)
 ... S DR=FIELD_"///^S X=IBVAL"
"RTN","IBCNUPD",29,0)
 ... D ^DIE
"RTN","IBCNUPD",30,0)
 Q
"RTN","IBCNUPD",31,0)
 ;
"RTN","IBCNUPD",32,0)
OPT ; Enter from the option
"RTN","IBCNUPD",33,0)
 W !,$$TASK()
"RTN","IBCNUPD",34,0)
OPTQ ;
"RTN","IBCNUPD",35,0)
 Q
"RTN","IBCNUPD",36,0)
 ;
"RTN","IBCNUPD",37,0)
TASK(IBQ) ;Set up task to run the option
"RTN","IBCNUPD",38,0)
 N X,Y,IDT,XDT,TSK,MSG,DTOUT,DUOUT
"RTN","IBCNUPD",39,0)
 ;
"RTN","IBCNUPD",40,0)
 ;If option is queued, set up queue date/time and bypass prompt
"RTN","IBCNUPD",41,0)
 I $G(IBQ) D  G TASK1
"RTN","IBCNUPD",42,0)
 . S X="T+1@2100"
"RTN","IBCNUPD",43,0)
 . S %DT="FR"
"RTN","IBCNUPD",44,0)
 . D ^%DT
"RTN","IBCNUPD",45,0)
 ;
"RTN","IBCNUPD",46,0)
 W !,"*************************** IMPORTANT!! ********************************"
"RTN","IBCNUPD",47,0)
 W !,"This option will scan through the entire Patient File for patients with "
"RTN","IBCNUPD",48,0)
 W !,"insurance where the relationship to insured is self.  Certain fields in "
"RTN","IBCNUPD",49,0)
 W !,"Insurance Type sub-file will be updated to match the patient data if it "
"RTN","IBCNUPD",50,0)
 W !,"does not already exist.  This will take awhile and must be queued to run"
"RTN","IBCNUPD",51,0)
 W !,"in the background when there are few users on the system. The default is"
"RTN","IBCNUPD",52,0)
 W !,"Tomorrow at 9:00 p.m."
"RTN","IBCNUPD",53,0)
 W !
"RTN","IBCNUPD",54,0)
 ;
"RTN","IBCNUPD",55,0)
 ;Set Date and Time
"RTN","IBCNUPD",56,0)
 K %DT
"RTN","IBCNUPD",57,0)
 S %DT="AEFR"
"RTN","IBCNUPD",58,0)
 S %DT("A")="Enter date/time to queue the option: "
"RTN","IBCNUPD",59,0)
 S %DT("B")="T+1@2100"
"RTN","IBCNUPD",60,0)
 S %DT(0)="NOW"  ; prevent past date/time being entered
"RTN","IBCNUPD",61,0)
 D ^%DT
"RTN","IBCNUPD",62,0)
 I $D(DTOUT)!$D(DUOUT)!(Y<0) S MSG="Task Aborted. Option NOT scheduled." G TASKQ
"RTN","IBCNUPD",63,0)
 ;
"RTN","IBCNUPD",64,0)
TASK1 ;bypass for queued task
"RTN","IBCNUPD",65,0)
 S IDT=Y D DD^%DT S XDT=Y
"RTN","IBCNUPD",66,0)
 ;
"RTN","IBCNUPD",67,0)
 ;Check if task already scheduled for date/time
"RTN","IBCNUPD",68,0)
 S TSK=$$GETTASK(IDT)
"RTN","IBCNUPD",69,0)
 I TSK D  G TASKQ
"RTN","IBCNUPD",70,0)
 . S Y=$P(TSK,U,2) D DD^%DT
"RTN","IBCNUPD",71,0)
 . S MSG=" Task (#"_+TSK_") already scheduled to run on "_Y
"RTN","IBCNUPD",72,0)
 ;
"RTN","IBCNUPD",73,0)
 ;Schedule the task
"RTN","IBCNUPD",74,0)
 S TSK=$$SCHED(IDT)
"RTN","IBCNUPD",75,0)
 ;
"RTN","IBCNUPD",76,0)
 ;Check for scheduling problem
"RTN","IBCNUPD",77,0)
 I 'TSK S MSG=" Task Could Not Be Scheduled" G TASKQ
"RTN","IBCNUPD",78,0)
 ;
"RTN","IBCNUPD",79,0)
 ;Send successful schedule message
"RTN","IBCNUPD",80,0)
 S MSG=" Update Subscriber Information Scheduled for "_XDT
"RTN","IBCNUPD",81,0)
 ;
"RTN","IBCNUPD",82,0)
TASKQ ;
"RTN","IBCNUPD",83,0)
 Q MSG
"RTN","IBCNUPD",84,0)
 ;
"RTN","IBCNUPD",85,0)
GETTASK(IDT) ;
"RTN","IBCNUPD",86,0)
 N TASK,TASKNO,TDT,XUSUCI,Y,ZTSK0
"RTN","IBCNUPD",87,0)
 ;
"RTN","IBCNUPD",88,0)
 ;Retrieve UCI
"RTN","IBCNUPD",89,0)
 X ^%ZOSF("UCI") S XUSUCI=Y
"RTN","IBCNUPD",90,0)
 ;       
"RTN","IBCNUPD",91,0)
 S (TASK,TDT)=0,TASKNO=""
"RTN","IBCNUPD",92,0)
 F  S TASK=$O(^%ZTSK(TASK)) Q:'TASK  D  Q:TASKNO
"RTN","IBCNUPD",93,0)
 .I $G(^%ZTSK(TASK,.03))["IBCN SUBSCRIBER UPDATE" D
"RTN","IBCNUPD",94,0)
 ..S ZTSK0=$G(^%ZTSK(TASK,0))
"RTN","IBCNUPD",95,0)
 ..;
"RTN","IBCNUPD",96,0)
 ..;Exclude tasks scheduled by TaskMan
"RTN","IBCNUPD",97,0)
 ..Q:ZTSK0["ZTSK^XQ1"
"RTN","IBCNUPD",98,0)
 ..;
"RTN","IBCNUPD",99,0)
 ..;Exclude tasks in other ucis
"RTN","IBCNUPD",100,0)
 ..Q:(($P(ZTSK0,U,11)_","_$P(ZTSK0,U,12))'=XUSUCI)
"RTN","IBCNUPD",101,0)
 ..;
"RTN","IBCNUPD",102,0)
 ..;Check for correct date and time
"RTN","IBCNUPD",103,0)
 ..S TDT=$$HTFM^XLFDT($P(ZTSK0,"^",6))
"RTN","IBCNUPD",104,0)
 ..;I TDT=IDT S TASKNO=TASK
"RTN","IBCNUPD",105,0)
 Q TASKNO_U_TDT
"RTN","IBCNUPD",106,0)
 ;
"RTN","IBCNUPD",107,0)
 ;Schedule Task
"RTN","IBCNUPD",108,0)
 ;
"RTN","IBCNUPD",109,0)
SCHED(ZTDTH) ;
"RTN","IBCNUPD",110,0)
 N ZTRTN,ZTDESC,ZTIO,ZTSK
"RTN","IBCNUPD",111,0)
 S ZTRTN="EN^IBCNUPD"
"RTN","IBCNUPD",112,0)
 S ZTDESC="IBCN SUBSCRIBER UPDATE"
"RTN","IBCNUPD",113,0)
 S ZTIO=""
"RTN","IBCNUPD",114,0)
 D ^%ZTLOAD
"RTN","IBCNUPD",115,0)
 Q ZTSK
"RTN","IBCNUPD",116,0)
 ;
"RTN","IBJPI5")
0^18^B4489364^B37149088
"RTN","IBJPI5",1,0)
IBJPI5 ;ENS/GSS - IBJP5 eIV SITE PARAMETERS SCREEN ;30-AUG-2010
"RTN","IBJPI5",2,0)
 ;;2.0;INTEGRATED BILLING;**438,497**;31-AUG-10;Build 120
"RTN","IBJPI5",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBJPI5",4,0)
 ;
"RTN","IBJPI5",5,0)
 ; eIV - Electronic Insurance Verification Site Selected Service Type Codes
"RTN","IBJPI5",6,0)
 ;
"RTN","IBJPI5",7,0)
 Q
"RTN","IBJPI5",8,0)
 ;
"RTN","IBJPI5",9,0)
EN ; main entry point for IBJP EIV SITE SELECTED CODES
"RTN","IBJPI5",10,0)
 N DIR,I,IBDIRS,IBFLD,IBMAXDSC,IBSTCDF,IBSTCDFI,IBSTCR,X,Y
"RTN","IBJPI5",11,0)
 ;
"RTN","IBJPI5",12,0)
 D INIT,BLD
"RTN","IBJPI5",13,0)
 ;
"RTN","IBJPI5",14,0)
EXIT ; Exit
"RTN","IBJPI5",15,0)
 K ^TMP("IBJPI5",$J)
"RTN","IBJPI5",16,0)
 S VALMBCK="R"
"RTN","IBJPI5",17,0)
 Q
"RTN","IBJPI5",18,0)
 ;
"RTN","IBJPI5",19,0)
INIT ; Initialize
"RTN","IBJPI5",20,0)
 S IBMAXDSC=1  ; max # of DEFAULT STCs
"RTN","IBJPI5",21,0)
 ; IBSTCDF=default STC IENs which herein remain unchanged
"RTN","IBJPI5",22,0)
 S IBSTCDF=$G(^IBE(350.9,1,60)),IBSTCDFI=U_IBSTCDF_U
"RTN","IBJPI5",23,0)
 Q
"RTN","IBJPI5",24,0)
 ;
"RTN","IBJPI5",25,0)
BLD ; Build screen and prompt for action
"RTN","IBJPI5",26,0)
 N DIR,X,Y
"RTN","IBJPI5",27,0)
 W @IOF,IORVON,"Service Type Codes",IORVOFF
"RTN","IBJPI5",28,0)
 W !!,IOUON,"Default Service Type Codes",IOUOFF
"RTN","IBJPI5",29,0)
 F IBFLD=1:1:IBMAXDSC D
"RTN","IBJPI5",30,0)
 . S IBSTCR=^IBE(365.013,$P(IBSTCDF,U,IBFLD),0)
"RTN","IBJPI5",31,0)
 . W:IBFLD#2=1 !
"RTN","IBJPI5",32,0)
 . W:IBFLD#2=0 ?40 W $J($P(IBSTCR,U,1),2)," - ",$P(IBSTCR,U,2)
"RTN","IBJPI5",33,0)
 F IBFLD=IBFLD:1:20 W !
"RTN","IBJPI5",34,0)
 W !,IORVON,"          Enter ?? for more information                                         ",IORVOFF
"RTN","IBJPI5",35,0)
 W !,"EX  Exit"
"RTN","IBJPI5",36,0)
 S DIR("A")="Select Action: Exit//"
"RTN","IBJPI5",37,0)
 S DIR(0)="SAO^EX:Exit^"
"RTN","IBJPI5",38,0)
 S DIR("?")="^D HELP1^IBJPI5"
"RTN","IBJPI5",39,0)
 S DIR("??")="^D HELP2^IBJPI5"
"RTN","IBJPI5",40,0)
 D ACTN
"RTN","IBJPI5",41,0)
 I $F("^E",X) Q
"RTN","IBJPI5",42,0)
 G BLD
"RTN","IBJPI5",43,0)
 ;
"RTN","IBJPI5",44,0)
ACTN ;
"RTN","IBJPI5",45,0)
 D ^DIR
"RTN","IBJPI5",46,0)
 S X=$E(X,1),X=$TR(X,"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
"RTN","IBJPI5",47,0)
 I '$F("^E",X) G ACTN
"RTN","IBJPI5",48,0)
 Q
"RTN","IBJPI5",49,0)
 ;
"RTN","IBJPI5",50,0)
HELP1 ; Display actions in response to '?' entry
"RTN","IBJPI5",51,0)
 D FULL^VALM1
"RTN","IBJPI5",52,0)
 W @IOF
"RTN","IBJPI5",53,0)
 Q
"RTN","IBJPI5",54,0)
 ;
"RTN","IBJPI5",55,0)
HELP2 ; Text to display in response to '??' entry
"RTN","IBJPI5",56,0)
 N DIR
"RTN","IBJPI5",57,0)
 D FULL^VALM1
"RTN","IBJPI5",58,0)
 W @IOF
"RTN","IBJPI5",59,0)
 W !,"The DEFAULT SERVICE TYPE CODES are not editable but defined by CBO."
"RTN","IBJPI5",60,0)
 W !,"Action available is 'EX' to Exit"
"RTN","IBJPI5",61,0)
 W !,"Enter '^' to quit."
"RTN","IBJPI5",62,0)
 Q
"RTN","IBJTCA1")
0^25^B52135617^B53091604
"RTN","IBJTCA1",1,0)
IBJTCA1 ;ALB/ARH - TPI CLAIMS INFO BUILD ;10/31/07  14:17
"RTN","IBJTCA1",2,0)
 ;;2.0;INTEGRATED BILLING;**39,80,106,137,223,276,363,384,432,452,473,497**;21-MAR-94;Build 120
"RTN","IBJTCA1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBJTCA1",4,0)
 ;
"RTN","IBJTCA1",5,0)
BLD ; build array for Third Party Joint Inquiry Claims Info screen, IBIFN must be defined
"RTN","IBJTCA1",6,0)
 ;
"RTN","IBJTCA1",7,0)
 N X,IBY,IBZ,IBZ0,IBI,IBT,IBD,IBLN,IBLR,IBD0,IBDI1,IBDM,IBDM1,IBDU,IBDS,IBDU2,IBID0,IBID13,IBNC,IBTC,IBTW,IBSW,IBGRPB,IBGRPE,IBWNR,IBDTX,IBBX19,IBPRVO,IBNABP,IBLVL,IBCNT,IBPRVTYP
"RTN","IBJTCA1",8,0)
 N IBXSAVE  ; IB*2.0*473 bi
"RTN","IBJTCA1",9,0)
 S VALMCNT=0,X="",IBD0=$G(^DGCR(399,+$G(IBIFN),0)) I IBD0="" S VALMQUIT="" G BLDQ
"RTN","IBJTCA1",10,0)
 F IBI="M","M1","U","S","U2","TX" S @("IBD"_IBI)=$G(^DGCR(399,+IBIFN,IBI))
"RTN","IBJTCA1",11,0)
 S IBDI1=$P(IBD0,U,21),IBDI1=$S(IBDI1="S":"I2",IBDI1="T":"I3",1:"I1") S IBDI1=$G(^DGCR(399,+IBIFN,IBDI1))
"RTN","IBJTCA1",12,0)
 S IBID0=$G(^DIC(36,+IBDI1,0)),IBID13=$G(^DIC(36,+IBDI1,.13))
"RTN","IBJTCA1",13,0)
 ;
"RTN","IBJTCA1",14,0)
 ;
"RTN","IBJTCA1",15,0)
 S (IBLN,VALMCNT)=1
"RTN","IBJTCA1",16,0)
 ;IB*2.0*432/TAZ - Added IBTW(6) and IBSW(6)
"RTN","IBJTCA1",17,0)
 S (IBNC(1),IBTC(1),IBTC(4),IBTC(6))=2,IBTC(5)=78,(IBNC(2),IBTC(2))=42,IBNC(3)=35,IBTW(1)=15,IBTW(2)=16,IBTW(4)=12,IBTW(5)=1,IBTW(6)=20,IBSW(1)=23,IBSW(2)=21,IBSW(4)=60,IBSW(5)=1,IBSW(6)=49
"RTN","IBJTCA1",18,0)
 ;
"RTN","IBJTCA1",19,0)
 S IBLR=1
"RTN","IBJTCA1",20,0)
 ;
"RTN","IBJTCA1",21,0)
 S IBT="Insurance Demographics" S IBLN=$$SETN(IBT,IBLN,IBLR,1)
"RTN","IBJTCA1",22,0)
 S IBWNR=$$WNRBILL^IBEFUNC(IBIFN)
"RTN","IBJTCA1",23,0)
 S IBNABP=$$NABP^IBNCPDPU(IBIFN)
"RTN","IBJTCA1",24,0)
 S IBT=$S(IBWNR:" *",1:"  ")_"Bill Payer: ",IBD=$P(IBID0,U,1) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",25,0)
 S IBT="Claim Address: " D  S IBD=$P(IBDM,U,5) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",26,0)
 . I $P(IBID0,U,1)'=$P(IBDM,U,4) S IBD=$P(IBDM,U,4) S IBLN=$$SET(IBT,IBD,IBLN,IBLR) S IBT=""
"RTN","IBJTCA1",27,0)
 I $P(IBDM,U,6)'="" S IBT="",IBD=$P(IBDM,U,6) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",28,0)
 I $P(IBDM1,U,1)'="" S IBT="",IBD=$P(IBDM1,U,1) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",29,0)
 S IBT="",IBD=$P(IBDM,U,7),IBD=IBD_$S(IBD'="":", ",1:"")_$P($G(^DIC(5,+$P(IBDM,U,8),0)),U,2)_" "_$P(IBDM,U,9),IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",30,0)
 S IBT="Claim Phone: ",IBD=$P($$BADD^IBJTU3(+IBIFN),U,2) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",31,0)
 S IBLN=$$SET("","",IBLN,5)
"RTN","IBJTCA1",32,0)
 ;
"RTN","IBJTCA1",33,0)
 S IBT="Subscriber Demographics" S IBLN=$$SETN(IBT,IBLN,IBLR,1)
"RTN","IBJTCA1",34,0)
 S IBT="Group Number: ",IBD=$P(IBDI1,U,3) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",35,0)
 S IBT="Group Name: ",IBD=$P(IBDI1,U,15) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",36,0)
 S IBT="Subscriber ID: ",IBD=$P(IBDI1,U,2) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",37,0)
 S IBT="Employer: ",IBD=$$EMPL(+DFN) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",38,0)
 S IBT="Insured's Name: ",IBD=$P(IBDI1,U,17) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",39,0)
 S IBT="Relationship: ",IBD=$$EXSET^IBJU1($P(IBDI1,U,16),2.312,16) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",40,0)
 ;
"RTN","IBJTCA1",41,0)
 S (IBNC(1),IBTC(1))=2,(IBNC(2),IBTC(2))=42,IBNC(3)=29,IBTW(1)=12,IBTW(2)=16,IBSW(1)=26,IBSW(2)=22
"RTN","IBJTCA1",42,0)
 S (IBT,IBD)="" S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",43,0)
 ;
"RTN","IBJTCA1",44,0)
 I $$FT^IBCEF(IBIFN)=2 D
"RTN","IBJTCA1",45,0)
 . N IBXDATA,IBXSAVE K ^TMP("IBXSAVE",$J)
"RTN","IBJTCA1",46,0)
 . D F^IBCEF("N-HCFA 1500 BOX 19",,,IBIFN)
"RTN","IBJTCA1",47,0)
 . I IBXDATA'="" S IBBX19(1)=$E(IBXDATA,1,40) S:$E(IBXDATA,41,$L(IBXDATA))'="" IBBX19(2)=$E(IBXDATA,41,$L(IBXDATA))
"RTN","IBJTCA1",48,0)
 ;
"RTN","IBJTCA1",49,0)
 S IBGRPB=IBLN,IBLR=1
"RTN","IBJTCA1",50,0)
 S IBT="Claim Information" S IBLN=$$SETN(IBT,IBLN,3,1)
"RTN","IBJTCA1",51,0)
 S IBT="Bill Type: ",IBD=$$EXSET^IBJU1($P(IBD0,U,5),399,.05) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",52,0)
 S IBT="Time Frame: ",IBD=$$EXSET^IBJU1($P(IBD0,U,6),399,.06) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",53,0)
 S IBT="Rate Type: ",IBD=$P($G(^DGCR(399.3,+$P(IBD0,U,7),0)),U,1) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",54,0)
 S IBT="AR Status: ",IBD=$P($$ARSTATA^IBJTU4(IBIFN),U,1) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",55,0)
 S IBT=" Sequence: ",IBD=$P($$EXSET^IBJU1($P(IBD0,U,21),399,.21)," ",1) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",56,0)
 S IBT="Purch Svc: ",IBD=$S($P(IBDU2,U,11)="":"NO",1:$$EXPAND^IBTRE(399,233,$P(IBDU2,U,11))),IBLN=$$SET(IBT,IBD,IBLN,4)
"RTN","IBJTCA1",57,0)
 I $P(IBDM1,"^",8) S IBT="  ECME No: ",IBD=$P($P(IBDM1,"^",8),";",1),IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",58,0)
 I $L($P(IBDM1,"^",9)) S IBT="ECME Ap No: ",IBD=$P(IBDM1,"^",9),IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",59,0)
 I IBNABP'="" S IBT=$S(($L($TR(IBNABP," ",""))=7):"  NCPDP No: ",1:"       NPI: "),IBD=IBNABP,IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",60,0)
 I IBWNR S IBT="MRA Status: ",IBD=$S($P(IBDTX,U,5):$P(IBDTX,U,5),1:"NOT RECEIVED"),IBLN=$$SET(IBT,$S(IBD:$$EXPAND^IBTRE(399,24,IBD),1:IBD),IBLN,IBLR)
"RTN","IBJTCA1",61,0)
 I $G(IBBX19(1))'="" D
"RTN","IBJTCA1",62,0)
 . S IBT="   Box 19: ",IBD=IBBX19(1),IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",63,0)
 . I $G(IBBX19(2))'="" S IBT=$J("",11),IBD=IBBX19(2),IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",64,0)
 ;
"RTN","IBJTCA1",65,0)
 S IBLR=6,IBPRVO=""
"RTN","IBJTCA1",66,0)
 S IBT="Providers: ",IBD="NONE"
"RTN","IBJTCA1",67,0)
 ;IB*2.0*432/TAZ - Changed how providers are displayed to take line-level providers into account.
"RTN","IBJTCA1",68,0)
 ;D F^IBCEF("N-ALL PROVIDERS","IBZ",,IBIFN)
"RTN","IBJTCA1",69,0)
 D F^IBCEF("N-ALL PROVIDERS 1","IBZ",,IBIFN)
"RTN","IBJTCA1",70,0)
 S IBZ0=0
"RTN","IBJTCA1",71,0)
 S IBLVL=0
"RTN","IBJTCA1",72,0)
 ;F  S Z=$O(IBZ(Z)) Q:'Z  D
"RTN","IBJTCA1",73,0)
 ;. I $G(IBZ(Z)),$G(IBZ(Z,1))'="" S IBLN=$$SET(IBT,"(OLD PROV DATA) "_IBZ(Z,1),IBLN,IBLR),IBZ0=1 Q
"RTN","IBJTCA1",74,0)
 ;. I $P($G(IBZ(Z,1)),U)'="" S IBD=$E($$EXPAND^IBTRE(399.0222,.01,Z)_":"_$J("",15),1,15)_$P(IBZ(Z,1),U)_$S($P(IBZ(Z,1),U,4)'="":" ("_$P(IBZ(Z,1),U,4)_")",1:"") S IBLN=$$SET(IBT,IBD,IBLN,IBLR) S IBT=$J("",11),IBZ0=1
"RTN","IBJTCA1",75,0)
 ;I 'IBZ0 S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",76,0)
 S IBLVL=0
"RTN","IBJTCA1",77,0)
 F  S IBLVL=$O(IBZ(IBLVL)) Q:'IBLVL  D
"RTN","IBJTCA1",78,0)
 . S IBT=IBT_$S(IBLVL=1:"Claim: ",1:"Line: ")
"RTN","IBJTCA1",79,0)
 . S IBPRVTYP="",IBCNT=0
"RTN","IBJTCA1",80,0)
 . F  S IBCNT=$O(IBZ(IBLVL,IBCNT)) Q:'IBCNT  D
"RTN","IBJTCA1",81,0)
 .. I IBLVL=1 S IBD=$J("",5)
"RTN","IBJTCA1",82,0)
 .. I IBLVL=2 S IBD=$E("("_IBCNT_")"_$J("",5),1,5)
"RTN","IBJTCA1",83,0)
 .. F  S IBPRVTYP=$O(IBZ(IBLVL,IBCNT,IBPRVTYP)) Q:'IBPRVTYP  D
"RTN","IBJTCA1",84,0)
 ... S IBD=IBD_$E($$EXPAND^IBTRE(399.0222,.01,IBPRVTYP)_":"_$J("",15),1,15)
"RTN","IBJTCA1",85,0)
 ... S IBD=IBD_$P(IBZ(IBLVL,IBCNT,IBPRVTYP),U)
"RTN","IBJTCA1",86,0)
 ... I $L($P(IBZ(IBLVL,IBCNT,IBPRVTYP),U,4)) S IBD=IBD_" ("_$P(IBZ(IBLVL,IBCNT,IBPRVTYP),U,4)_")"
"RTN","IBJTCA1",87,0)
 ... S IBLN=$$SET(IBT,IBD,IBLN,IBLR),IBT="",IBD=$J("",5)
"RTN","IBJTCA1",88,0)
 ;
"RTN","IBJTCA1",89,0)
 S IBGRPE=IBLN,IBLN=IBGRPB+1,IBLR=2
"RTN","IBJTCA1",90,0)
 ;
"RTN","IBJTCA1",91,0)
 S IBT="Charge Type: ",IBD=$$EXSET^IBJU1($P(IBD0,U,27),399,.27) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",92,0)
 S IBT="Service Dates: ",IBD=$$DATE^IBJU1($P(IBDU,U,1))_" - "_$$DATE^IBJU1($P(IBDU,U,2)) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",93,0)
 S IBT="Orig Claim: ",IBD=$$BILL^RCJIBFN2(+IBIFN) S IBLN=$$SET(IBT,$J($P(IBD,U,1),9,2),IBLN,IBLR)
"RTN","IBJTCA1",94,0)
 S IBT="Balance Due: ",IBD=$J($P(IBD,U,3),9,2) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",95,0)
 I +$P(IBDM,U,2) S IBX=$S($P(IBD0,U,21)="P":2,1:1) D  S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",96,0)
 . S IBT=$S(IBX=2:"Secondary",1:"Primary")_": ",IBD=$P($G(^DIC(36,+$P(IBDM,U,IBX),0)),U,1)
"RTN","IBJTCA1",97,0)
 . S IBX=$P(IBDU2,U,(IBX+3)) I +IBX S IBX="("_$J(IBX,0,2)_")" S IBD=$E(IBD,1,(IBSW(IBLR)-$L(IBX)-2))_"  "_IBX
"RTN","IBJTCA1",98,0)
 I +$P(IBDM,U,3) S IBX=$S($P(IBD0,U,21)="T":2,1:3) D  S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",99,0)
 . S IBT=$S(IBX=2:"Secondary",1:"Tertiary")_": ",IBD=$P($G(^DIC(36,+$P(IBDM,U,IBX),0)),U,1)
"RTN","IBJTCA1",100,0)
 . S IBX=$P(IBDU2,U,(IBX+3)) I +IBX S IBX="("_$J(IBX,0,2)_")" S IBD=$E(IBD,1,(IBSW(IBLR)-$L(IBX)-2))_"  "_IBX
"RTN","IBJTCA1",101,0)
 S IBLN=$$SET("","",IBLN,5)
"RTN","IBJTCA1",102,0)
 I IBWNR S IBT="MRA Rec Date: " D  S IBLN=$$SET(IBT,IBD,IBLN,2)
"RTN","IBJTCA1",103,0)
 . N Z
"RTN","IBJTCA1",104,0)
 . ; find last MRA for receipt date
"RTN","IBJTCA1",105,0)
 . S (IBD,Z)="" F  S Z=$O(^IBM(361.1,"B",IBIFN,Z),-1) Q:'Z  I $P($G(^IBM(361.1,Z,0)),U,4)=1 S IBD=$$DATE^IBJU1($P($P(^IBM(361.1,Z,0),U,6),".")) Q
"RTN","IBJTCA1",106,0)
 F Z=IBLN:1:IBGRPE S IBLN=$$SET("","",IBLN,5)
"RTN","IBJTCA1",107,0)
 ;
"RTN","IBJTCA1",108,0)
 S (IBLN,VALMCNT)=$S(IBLN>IBGRPE:IBLN,1:IBGRPE)
"RTN","IBJTCA1",109,0)
 ;
"RTN","IBJTCA1",110,0)
 S IBGRPB=IBLN,IBLR=1
"RTN","IBJTCA1",111,0)
 D CONT^IBJTCA2
"RTN","IBJTCA1",112,0)
 ;
"RTN","IBJTCA1",113,0)
COPAY I $O(^IBA(362.4,"C",IBIFN,0)) D
"RTN","IBJTCA1",114,0)
 . S (IBT,IBD)="" S IBLN=$$SET(IBT,IBD,IBLN,IBLR)   ; blank line
"RTN","IBJTCA1",115,0)
 . S IBT="Related Prescription Copay Information" S IBLN=$$SETN(IBT,IBLN,1,1)
"RTN","IBJTCA1",116,0)
 . N IBZ,IBX,IBC,IBCAP
"RTN","IBJTCA1",117,0)
 . S IBZ=0 F  S IBZ=$O(^IBA(362.4,"C",IBIFN,IBZ)) Q:'IBZ  D
"RTN","IBJTCA1",118,0)
 .. K ^TMP("IBTPJI",$J)
"RTN","IBJTCA1",119,0)
 .. S IBC=$G(^IBA(362.4,IBZ,0))
"RTN","IBJTCA1",120,0)
 .. D:$P(IBC,"^",5) RX^PSO52API($P(IBD0,"^",2),"IBTPJI",$P(IBC,"^",5),"","I^")
"RTN","IBJTCA1",121,0)
 .. ; original fill
"RTN","IBJTCA1",122,0)
 .. I $P(IBC,"^",10)=0 D
"RTN","IBJTCA1",123,0)
 ... S IBX=+$G(^TMP($J,"IBTPJI",$P(IBD0,"^",2),+$P(IBC,"^",5),106)),IBCAP=+$G(^(106.6))
"RTN","IBJTCA1",124,0)
 .. ; refills
"RTN","IBJTCA1",125,0)
 .. E  D
"RTN","IBJTCA1",126,0)
 ... S IBX=+$G(^TMP($J,"IBTPJI",$P(IBD0,"^",2),+$P(IBC,"^",5),"IB",+$P(IBC,"^",10),9)),IBCAP=+$G(^(9.1))
"RTN","IBJTCA1",127,0)
 .. I '$G(IBX),$G(IBCAP) S IBT="  <copay exceeded cap>",IBLN=$$SET(IBT,"",IBLN,4) Q
"RTN","IBJTCA1",128,0)
 .. I '$G(IBX) S IBT="  <none found>",IBLN=$$SET(IBT,"",IBLN,4) Q
"RTN","IBJTCA1",129,0)
 .. S IBX=$G(^IB(IBX,0))
"RTN","IBJTCA1",130,0)
 .. S IBT="Rx: "_$P(IBC,"^")_"  Chg: $"_$FN($P(IBX,"^",7),",",2)_"   Status: "_$$TITLE^XLFSTR($$EXTERNAL^DILFD(350,.05,"",$P(IBX,"^",5)))_"   Bill: "_$P(IBX,"^",11)
"RTN","IBJTCA1",131,0)
 .. S IBLN=$$SET(IBT,"",IBLN,4)
"RTN","IBJTCA1",132,0)
 K ^TMP("IBTPJI",$J)
"RTN","IBJTCA1",133,0)
 ;
"RTN","IBJTCA1",134,0)
 S (IBLN,VALMCNT)=IBLN-1
"RTN","IBJTCA1",135,0)
 ;
"RTN","IBJTCA1",136,0)
BLDQ Q
"RTN","IBJTCA1",137,0)
 ;
"RTN","IBJTCA1",138,0)
EMPL(DFN) ; returns employer name
"RTN","IBJTCA1",139,0)
 Q $P($G(^DPT(+DFN,.311)),U,1)
"RTN","IBJTCA1",140,0)
 ;
"RTN","IBJTCA1",141,0)
SET(TTL,DATA,LN,LR) ;
"RTN","IBJTCA1",142,0)
 N IBY
"RTN","IBJTCA1",143,0)
 S IBY=$J(TTL,IBTW(LR))_DATA D SET1(IBY,LN,IBTC(LR),(IBTW(LR)+IBSW(LR)))
"RTN","IBJTCA1",144,0)
 S LN=LN+1
"RTN","IBJTCA1",145,0)
 Q LN
"RTN","IBJTCA1",146,0)
 ;
"RTN","IBJTCA1",147,0)
SETN(TTL,LN,LR,RV) ;
"RTN","IBJTCA1",148,0)
 N IBY
"RTN","IBJTCA1",149,0)
 S IBY=" "_TTL_" " D SET1(IBY,LN,IBNC(LR),$L(IBY),$G(RV))
"RTN","IBJTCA1",150,0)
 S LN=LN+1
"RTN","IBJTCA1",151,0)
 Q LN
"RTN","IBJTCA1",152,0)
 ;
"RTN","IBJTCA1",153,0)
SET1(STR,LN,COL,WD,RV) ; set up TMP array with screen data
"RTN","IBJTCA1",154,0)
 N IBX S IBX=$G(^TMP("IBJTCA",$J,LN,0))
"RTN","IBJTCA1",155,0)
 S IBX=$$SETSTR^VALM1(STR,IBX,COL,WD)
"RTN","IBJTCA1",156,0)
 D SET^VALM10(LN,IBX) I $G(RV)'="" D CNTRL^VALM10(LN,COL,WD,IORVON,IORVOFF)
"RTN","IBJTCA1",157,0)
 Q
"RTN","IBY497PO")
0^^B137982293^n/a
"RTN","IBY497PO",1,0)
IBY497PO ;ALB/TAZ/KML/YG - Post install routine for patch 497 ; 10 Feb 2013  14:44 PM
"RTN","IBY497PO",2,0)
 ;;2.0;INTEGRATED BILLING;**497**;21-MAR-94;Build 120
"RTN","IBY497PO",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBY497PO",4,0)
 ;
"RTN","IBY497PO",5,0)
EN ;Post Install Routine primary entry point
"RTN","IBY497PO",6,0)
 D FIXDD
"RTN","IBY497PO",7,0)
 I $$INSTALDT^XPDUTL("IB*2.0*497")>0 D BMES^XPDUTL("Post-Install already performed.  No need to run again.") Q  ;DBIA#10141   ; don't perform the post installation if the patch has been installed previously 
"RTN","IBY497PO",8,0)
 N IBY,Y
"RTN","IBY497PO",9,0)
 F IBY="RMSG","NEWPARAM","REINDEX","RMDEFSTC","RMSSSTC","UPDATE","PROC365","PROC2" D
"RTN","IBY497PO",10,0)
 . S Y=$$NEWCP^XPDUTL(IBY,IBY_"^IBY497PO")
"RTN","IBY497PO",11,0)
 . I 'Y D BMES^XPDUTL("ERROR Creating "_IBY_" Checkpoint.")
"RTN","IBY497PO",12,0)
 Q
"RTN","IBY497PO",13,0)
 ;
"RTN","IBY497PO",14,0)
FIXDD ; delete field 365.26/1.01 if it exists
"RTN","IBY497PO",15,0)
 ; this doesn't do anything for normal install and only affects target account that has field 365.26/1.01 already created
"RTN","IBY497PO",16,0)
 ; by test version of the build.
"RTN","IBY497PO",17,0)
 N DIK,DA
"RTN","IBY497PO",18,0)
 S DIK="^DD(365.26,",DA=1.01,DA(1)=365.26 D ^DIK
"RTN","IBY497PO",19,0)
 Q
"RTN","IBY497PO",20,0)
 ;
"RTN","IBY497PO",21,0)
RMSG ; send site registration message to FSC
"RTN","IBY497PO",22,0)
 D MES^XPDUTL("Sending site registration message to FSC ... ")
"RTN","IBY497PO",23,0)
 I '$$PROD^XUPROD(1) D MES^XPDUTL(" N/A - not a production account") G RMSGX  ; only sent reg. message from production account
"RTN","IBY497PO",24,0)
 D ^IBCNEHLM
"RTN","IBY497PO",25,0)
RMSGX ;
"RTN","IBY497PO",26,0)
 Q
"RTN","IBY497PO",27,0)
 ;
"RTN","IBY497PO",28,0)
NEWPARAM ;
"RTN","IBY497PO",29,0)
 ; set new IB site parameter to control length of eIV fields
"RTN","IBY497PO",30,0)
 ; set IB site parameter DAILY MAILMAN MSG to YES
"RTN","IBY497PO",31,0)
 ; set IB site parameter DAILY MSG TIME to 07:00
"RTN","IBY497PO",32,0)
 D MES^XPDUTL("Change values of IB site parameters")
"RTN","IBY497PO",33,0)
 N DIE,DA,DR,X,Y
"RTN","IBY497PO",34,0)
 S DIE=350.9,DA=1,DR="62.01///YES;51.02///YES;51.03///0700"
"RTN","IBY497PO",35,0)
 D ^DIE
"RTN","IBY497PO",36,0)
 Q
"RTN","IBY497PO",37,0)
 ;
"RTN","IBY497PO",38,0)
REINDEX ; run triggers on new eIV fields
"RTN","IBY497PO",39,0)
 D MES^XPDUTL("Re-index of new eIV fields in the IIV RESPONSE, INSURANCE TYPE,")
"RTN","IBY497PO",40,0)
 D MES^XPDUTL("INSURANCE BUFFER, and GROUP INSURANCE PLAN files/subfiles ")
"RTN","IBY497PO",41,0)
 N DA,DIK,FLD,IEN,IEN1,IEN2
"RTN","IBY497PO",42,0)
 ; file 365, top level
"RTN","IBY497PO",43,0)
 S DIK="^IBCN(365,"
"RTN","IBY497PO",44,0)
 F FLD=1.01,1.05,1.06,1.07 S DIK(1)=FLD_"^1" D ENALL^DIK
"RTN","IBY497PO",45,0)
 ;
"RTN","IBY497PO",46,0)
 S IEN=0 F  S IEN=$O(^IBCN(365,IEN)) Q:'IEN  D  ; file 365 ien
"RTN","IBY497PO",47,0)
 .; sub-file 365.03
"RTN","IBY497PO",48,0)
 .S DA(1)=IEN,DIK="^IBCN(365,"_IEN_",3,"
"RTN","IBY497PO",49,0)
 .F FLD=.03,.05,.07 S DIK(1)=FLD_"^1" D ENALL^DIK
"RTN","IBY497PO",50,0)
 .;sub-file 365.26
"RTN","IBY497PO",51,0)
 .S IEN1=0 F  S IEN1=$O(^IBCN(365,IEN,2,IEN1)) Q:'IEN1  D  ; sub-file 365.02 ien
"RTN","IBY497PO",52,0)
 ..; sub-file 365.26
"RTN","IBY497PO",53,0)
 ..S DA(2)=IEN,DA(1)=IEN1,DIK="^IBCN(365,"_IEN_",2,"_IEN1_",6,"
"RTN","IBY497PO",54,0)
 ..S DIK(1)=".03^1" D ENALL^DIK
"RTN","IBY497PO",55,0)
 ..Q
"RTN","IBY497PO",56,0)
 .Q
"RTN","IBY497PO",57,0)
 ; sub-file 2.312
"RTN","IBY497PO",58,0)
 S IEN=0 F  S IEN=$O(^DPT(IEN)) Q:'IEN  D  ; file 2 ien
"RTN","IBY497PO",59,0)
 .S DA(1)=IEN,DIK="^DPT("_IEN_",.312,"
"RTN","IBY497PO",60,0)
 .S DIK(1)="1^3" D ENALL^DIK
"RTN","IBY497PO",61,0)
 .S DIK(1)="17^2" D ENALL^DIK
"RTN","IBY497PO",62,0)
 .S IEN1=0 F  S IEN1=$O(^DPT(IEN,.312,IEN1)) Q:'IEN1  D  ; file 2.312 ien
"RTN","IBY497PO",63,0)
 ..S IEN2=0 F  S IEN2=$O(^DPT(IEN,.312,IEN1,6,IEN2)) Q:'IEN2  D  ; file 2.322 ien
"RTN","IBY497PO",64,0)
 ...; sub-file 2.3226
"RTN","IBY497PO",65,0)
 ...S DA(3)=IEN,DA(2)=IEN1,DA(1)=IEN2,DIK="^DPT("_IEN_",.312,"_IEN1_",6,"_IEN2_",6,"
"RTN","IBY497PO",66,0)
 ...S DIK(1)=".03^1" D ENALL^DIK
"RTN","IBY497PO",67,0)
 ...Q
"RTN","IBY497PO",68,0)
 ..Q
"RTN","IBY497PO",69,0)
 .Q
"RTN","IBY497PO",70,0)
 ; file 355.3
"RTN","IBY497PO",71,0)
 S DIK="^IBA(355.3,"
"RTN","IBY497PO",72,0)
 S DIK(1)=".03^4" D ENALL^DIK
"RTN","IBY497PO",73,0)
 S DIK(1)=".04^5" D ENALL^DIK
"RTN","IBY497PO",74,0)
 ; file 355.33
"RTN","IBY497PO",75,0)
 S DIK="^IBA(355.33,"
"RTN","IBY497PO",76,0)
 F FLD=40.02,40.03,60.04 S DIK(1)=FLD_"^2" D ENALL^DIK
"RTN","IBY497PO",77,0)
 S DIK(1)="60.07^1" D ENALL^DIK
"RTN","IBY497PO",78,0)
 Q
"RTN","IBY497PO",79,0)
 ;
"RTN","IBY497PO",80,0)
RMDEFSTC ;Remove Default Service Type Codes except for Type 30
"RTN","IBY497PO",81,0)
 ;VARIABLES:
"RTN","IBY497PO",82,0)
 ;D0 = Site IEN
"RTN","IBY497PO",83,0)
 ;IEN30 - IEN of Service Type Code 30
"RTN","IBY497PO",84,0)
 ;STC - List of Service Type Codes
"RTN","IBY497PO",85,0)
 N DA,DIE,DR,STC,IEN30,FIELD
"RTN","IBY497PO",86,0)
 S DA=0,DIE=350.9
"RTN","IBY497PO",87,0)
 D MES^XPDUTL("Removing Default Service Type Codes except for Type 30... ")
"RTN","IBY497PO",88,0)
 S IEN30=$O(^IBE(365.013,"B",30,""))
"RTN","IBY497PO",89,0)
 ;
"RTN","IBY497PO",90,0)
 F DA=$O(^IBE(350.9,DA)) Q:DA=""  D
"RTN","IBY497PO",91,0)
 . ;Set Default Service Type Code 1 to 30
"RTN","IBY497PO",92,0)
 . S FIELD=60.01,DR="60.01///30" D ^DIE
"RTN","IBY497PO",93,0)
 . ;Remove all other Default Service Type Codes
"RTN","IBY497PO",94,0)
 . F FIELD=60.02:.01:60.11 S STC=$$GET1^DIQ(350.9,DA,FIELD,"I") D
"RTN","IBY497PO",95,0)
 .. I STC="" Q
"RTN","IBY497PO",96,0)
 .. S DR=FIELD_"///@"
"RTN","IBY497PO",97,0)
 .. D ^DIE
"RTN","IBY497PO",98,0)
 Q
"RTN","IBY497PO",99,0)
 ;
"RTN","IBY497PO",100,0)
RMSSSTC ;Remove Default Service Type Codes except for Type 30
"RTN","IBY497PO",101,0)
 ;VARIABLES:
"RTN","IBY497PO",102,0)
 ;IEN30 - IEN of Service Type Code 30
"RTN","IBY497PO",103,0)
 N DA,DIE,DR,FIELD,STC
"RTN","IBY497PO",104,0)
 S DA=0,DIE=350.9
"RTN","IBY497PO",105,0)
 D MES^XPDUTL("Removing Site Specific Service Type Codes... ")
"RTN","IBY497PO",106,0)
 ;
"RTN","IBY497PO",107,0)
 F DA=$O(^IBE(350.9,DA)) Q:DA=""  D
"RTN","IBY497PO",108,0)
 . F FIELD=61.01:.01:61.09 S STC=$$GET1^DIQ(350.9,DA,FIELD,"I") D
"RTN","IBY497PO",109,0)
 .. I STC="" Q
"RTN","IBY497PO",110,0)
 .. S DR=FIELD_"///@"
"RTN","IBY497PO",111,0)
 .. D ^DIE
"RTN","IBY497PO",112,0)
 Q
"RTN","IBY497PO",113,0)
 ;
"RTN","IBY497PO",114,0)
UPDATE ;Call option to update Insurance Type File
"RTN","IBY497PO",115,0)
 ; Schedule through TaskMan to run at night?
"RTN","IBY497PO",116,0)
 N MSG
"RTN","IBY497PO",117,0)
 D MES^XPDUTL("Creating Task to update the Insurance Type File... ")
"RTN","IBY497PO",118,0)
 U IO(0)
"RTN","IBY497PO",119,0)
UPDATE1 S MSG=$$TASK^IBCNUPD($D(ZTQUEUED)) I MSG["Aborted" D  G UPDATE1
"RTN","IBY497PO",120,0)
 . S MSG="You MUST schedule this task in order to continue." D MES^XPDUTL(MSG) H 3
"RTN","IBY497PO",121,0)
 U IO
"RTN","IBY497PO",122,0)
 D BMES^XPDUTL(MSG)
"RTN","IBY497PO",123,0)
 Q
"RTN","IBY497PO",124,0)
 ; PROC365 and PROC2 subroutines will update the data stored at fields redefined in the data dictionary from a SET OF CODES to a Pointer to a File.
"RTN","IBY497PO",125,0)
 ; The entries that will receive the data conversion are stored at the ELIGIBILITY/BENEFIT subfiles
"RTN","IBY497PO",126,0)
 ;  of the IIV RESPONSE file (365) and the INSURANCE TYPE subfile (2.312)
"RTN","IBY497PO",127,0)
 ; The fields will need to be updated with the CODE ien that is stored in the POINTED-TO-FILE.  
"RTN","IBY497PO",128,0)
 ; The pointed-to-file will be one of the new X12 271 related files.
"RTN","IBY497PO",129,0)
 ;
"RTN","IBY497PO",130,0)
PROC365 ;Process entries in the IIV RESPONSE file (365)
"RTN","IBY497PO",131,0)
 ; Tag FLDLST documents the specific fields that need to be converted
"RTN","IBY497PO",132,0)
 ;
"RTN","IBY497PO",133,0)
 D BMES^XPDUTL("Conversion of data at specific fields in the ELIGIBILITY/BENEFIT file (365.02)")
"RTN","IBY497PO",134,0)
 D BMES^XPDUTL("started at "_$$FMTE^XLFDT($$NOW^XLFDT))
"RTN","IBY497PO",135,0)
 N IENS,IEN,SIEN,CNT,RSUPDT,VALUE,FILE,FLD,SFILE,SSIEN
"RTN","IBY497PO",136,0)
 S CNT=0
"RTN","IBY497PO",137,0)
 ;  need to create zero node of ^XTMP global per SACC 2.3.2.5.2 for proper XTMP clean-up
"RTN","IBY497PO",138,0)
 I '$D(^XTMP("IBY497PO")) S ^XTMP("IBY497PO",0)=$$FMADD^XLFDT(DT,30)_"^"_DT_"^file 365.02 and 2.322 data conversions; PROC2 and PROC365 subscripts are last ien processed"
"RTN","IBY497PO",139,0)
 S IEN=+$G(^XTMP("IBY497PO","PROC365"))    ; restart ien.  in case install is RESTARTED, need to ensure that conversion begins with the next entry
"RTN","IBY497PO",140,0)
 F  S IEN=$O(^IBCN(365,IEN)) Q:'IEN  D 
"RTN","IBY497PO",141,0)
 . D 8(IEN,.RSUPDT)
"RTN","IBY497PO",142,0)
 . S SIEN=0 F  S SIEN=$O(^IBCN(365,IEN,2,SIEN)) Q:'SIEN  D PROCFLDS(365,IEN,SIEN,0)
"RTN","IBY497PO",143,0)
 . D FILE^DIE("E","RSUPDT")
"RTN","IBY497PO",144,0)
 . K RSUPDT
"RTN","IBY497PO",145,0)
 . S CNT=CNT+1
"RTN","IBY497PO",146,0)
 . S ^XTMP("IBY497PO","PROC365")=IEN  ; record last updated entry
"RTN","IBY497PO",147,0)
 . I '(CNT#10000) D BMES^XPDUTL("Status: Processed "_CNT_" records")
"RTN","IBY497PO",148,0)
 D BMES^XPDUTL("Total IIV RESPONSE file PROCESSED "_CNT)
"RTN","IBY497PO",149,0)
 Q
"RTN","IBY497PO",150,0)
 ;
"RTN","IBY497PO",151,0)
PROC2 ; process entries in the ELIGIBILITY/BENEFIT multiple of the INSURANCE TYPE subfile (2.322)
"RTN","IBY497PO",152,0)
 ; Tag FLDLST documents the specific fields that need to be converted
"RTN","IBY497PO",153,0)
 ;
"RTN","IBY497PO",154,0)
 D BMES^XPDUTL("Conversion of data at specific fields in the ELIGIBILITY/BENEFIT file (2.322)")
"RTN","IBY497PO",155,0)
 D BMES^XPDUTL("started at "_$$FMTE^XLFDT($$NOW^XLFDT))
"RTN","IBY497PO",156,0)
 N CNT,IENS,DFN,IEN,SIEN,RSUPDT,FLD,FILE,VALUE,SFILE,SSIEN
"RTN","IBY497PO",157,0)
 S CNT=0
"RTN","IBY497PO",158,0)
 I '$D(^XTMP("IBY497PO")) S ^XTMP("IBY497PO",0)=$$FMADD^XLFDT(DT,30)_"^"_DT_"^file 365.02 and 2.322 data conversions; PROC2 and PROC365 subscripts are last ien processed"
"RTN","IBY497PO",159,0)
 S DFN=+$G(^XTMP("IBY497PO","PROC2"))   ; restart ien.  in case install is RESTARTED, need to ensure that conversion begins with the next entry
"RTN","IBY497PO",160,0)
 F  S DFN=$O(^DPT(DFN)) Q:'DFN  D
"RTN","IBY497PO",161,0)
 . S (IEN,SIEN)=0 F  S IEN=$O(^DPT(DFN,.312,IEN)) Q:'IEN  S SIEN=+SIEN F  S SIEN=$O(^DPT(DFN,.312,IEN,6,SIEN)) Q:'SIEN  D PROCFLDS(2,IEN,SIEN,DFN)
"RTN","IBY497PO",162,0)
 . D FILE^DIE("E","RSUPDT")
"RTN","IBY497PO",163,0)
 . K RSUPDT
"RTN","IBY497PO",164,0)
 . S CNT=CNT+1
"RTN","IBY497PO",165,0)
 . S ^XTMP("IBY497PO","PROC2")=DFN ; record last updated entry
"RTN","IBY497PO",166,0)
 . I '(CNT#10000) D BMES^XPDUTL("Status: Processed "_CNT_" records")
"RTN","IBY497PO",167,0)
 D BMES^XPDUTL("Total INSURANCE TYPE subfile PROCESSED "_CNT)
"RTN","IBY497PO",168,0)
 Q
"RTN","IBY497PO",169,0)
 ;
"RTN","IBY497PO",170,0)
PROCFLDS(FILE,IEN,SIEN,DFN) ; go through each of the affected flds and convert data
"RTN","IBY497PO",171,0)
 ;
"RTN","IBY497PO",172,0)
 ;  input
"RTN","IBY497PO",173,0)
 ;    FILE - 365 or 2
"RTN","IBY497PO",174,0)
 ;    IEN - internal entry number at 2.312 or 365
"RTN","IBY497PO",175,0)
 ;    SIEN - internal entry number at subfile 365.02 or 2.322
"RTN","IBY497PO",176,0)
 ;    DFN - ien of PATIENT file (#2)  (equals zero for 365 processing)
"RTN","IBY497PO",177,0)
 ;
"RTN","IBY497PO",178,0)
 ;  output
"RTN","IBY497PO",179,0)
 ;    RSUPDT - FDA array that gets passed to the Fileman DBS filer API
"RTN","IBY497PO",180,0)
 ;
"RTN","IBY497PO",181,0)
 S IENS=$S('DFN:SIEN_","_IEN_",",1:SIEN_","_IEN_","_DFN_",")
"RTN","IBY497PO",182,0)
 S FILE=$S(FILE=365:365.02,1:2.322)
"RTN","IBY497PO",183,0)
 D 12(FILE,IEN,SIEN,DFN,IENS,.RSUPDT)
"RTN","IBY497PO",184,0)
 D 101(FILE,IEN,SIEN,DFN,IENS,.RSUPDT)
"RTN","IBY497PO",185,0)
 D 302(FILE,IEN,SIEN,DFN,IENS,.RSUPDT)
"RTN","IBY497PO",186,0)
 D 408(FILE,IEN,SIEN,DFN,IENS,.RSUPDT)
"RTN","IBY497PO",187,0)
 D 503(FILE,IEN,SIEN,DFN,IENS,.RSUPDT)
"RTN","IBY497PO",188,0)
 D 705(FILE,IEN,SIEN,DFN,IENS,.RSUPDT)
"RTN","IBY497PO",189,0)
 D 804(FILE,IEN,SIEN,DFN,IENS,.RSUPDT)
"RTN","IBY497PO",190,0)
 D 904(FILE,IEN,SIEN,DFN,IENS,.RSUPDT)
"RTN","IBY497PO",191,0)
 Q
"RTN","IBY497PO",192,0)
 ;
"RTN","IBY497PO",193,0)
8(IEN,RSUPDT) ; converts PT. RELATIONSHIP - HIPAA data at 365,8.01
"RTN","IBY497PO",194,0)
 ; ^IBCN(365,D0,8)= (#8.01) PT. RELATIONSHIP - HIPAA [1P:365.037] ^
"RTN","IBY497PO",195,0)
 S VALUE=$P($G(^IBCN(365,IEN,8)),U)
"RTN","IBY497PO",196,0)
 I VALUE]"",+$O(^IBE(365.037,"B",VALUE,"")) S RSUPDT(365,IEN_",",8.01)=VALUE
"RTN","IBY497PO",197,0)
 Q
"RTN","IBY497PO",198,0)
 ;
"RTN","IBY497PO",199,0)
12(FILE,IEN,SIEN,DFN,IENS,RSUPDT) ; procedure will convert AUTHORIZATION/CERTIFICATION and IN PLAN data at 365.02,.12, 365.02,.13, 2.322,.12, and 2.322,.13
"RTN","IBY497PO",200,0)
 ; ^IBCN(365,D0,2,D1,0)= ^^^^^^^^^^^(#.12) AUTHORIZATION/CERTIFICATION [12P:365.033] ^ (#.13) IN PLAN [13P:365.033] ^ 
"RTN","IBY497PO",201,0)
 ; ^DPT(D0,.312,D1,6,D2,0)= ^^^^^^^^^^^(#.12) AUTHORIZATION/CERTIFICATION [12P:365.033] ^ (#.13) IN PLAN [13P:365.033] ^ 
"RTN","IBY497PO",202,0)
 F FLD=12,13 D
"RTN","IBY497PO",203,0)
 . I FILE=365.02 S VALUE=$P($G(^IBCN(365,IEN,2,SIEN,0)),U,FLD)
"RTN","IBY497PO",204,0)
 . E  S VALUE=$P($G(^DPT(DFN,.312,IEN,6,SIEN,0)),U,FLD)
"RTN","IBY497PO",205,0)
 . I VALUE]"",+$O(^IBE(365.033,"B",VALUE,"")) S RSUPDT(FILE,IENS,"."_FLD)=VALUE  ;update field with ien of valid code in X12 file; otherwise leave with invalid code
"RTN","IBY497PO",206,0)
 Q
"RTN","IBY497PO",207,0)
 ;
"RTN","IBY497PO",208,0)
101(FILE,IEN,SIEN,DFN,IENS,RSUPDT) ; procedure will convert PROCEDURE CODING METHOD data at 365.02, 1.01 and 2.322,1.01
"RTN","IBY497PO",209,0)
 ; ^IBCN(365,D0,2,D1,1)= (#1.01) PROCEDURE CODING METHOD [1P:365.035] ^
"RTN","IBY497PO",210,0)
 ; ^DPT(D0,.312,D1,6,D2,1)= (#1.01) PROCEDURE CODING METHOD [1P:365.035] ^
"RTN","IBY497PO",211,0)
 I FILE=365.02 S VALUE=$P($G(^IBCN(365,IEN,2,SIEN,1)),U)
"RTN","IBY497PO",212,0)
 E  S VALUE=$P($G(^DPT(DFN,.312,IEN,6,SIEN,1)),U)
"RTN","IBY497PO",213,0)
 I VALUE]"",+$O(^IBE(365.035,"B",VALUE,"")) S RSUPDT(FILE,IENS,1.01)=VALUE  ;update field with ien of valid code in X12 file; otherwise leave with invalid code
"RTN","IBY497PO",214,0)
 Q
"RTN","IBY497PO",215,0)
 ;
"RTN","IBY497PO",216,0)
302(FILE,IEN,SIEN,DFN,IENS,RSUPDT) ; procedure will convert ENTITY TYPE data at 365.02,3.02 and 2.322,3.02
"RTN","IBY497PO",217,0)
 ; ^IBCN(365,D0,2,D1,3)=  ^ (#3.02) ENTITY TYPE [2P:365.043]
"RTN","IBY497PO",218,0)
 ; ^DPT(D0,.312,D1,6,D2,3)=  ^ (#3.02) ENTITY TYPE [2P:365.043]
"RTN","IBY497PO",219,0)
 I FILE=365.02 S VALUE=$P($G(^IBCN(365,IEN,2,SIEN,3)),U,2)
"RTN","IBY497PO",220,0)
 E  S VALUE=$P($G(^DPT(DFN,.312,IEN,6,SIEN,3)),U,2)
"RTN","IBY497PO",221,0)
 I VALUE]"",+$O(^IBE(365.043,"B",VALUE,"")) S RSUPDT(FILE,IENS,3.02)=VALUE  ;update field with ien of valid code in X12 file; otherwise leave with invalid code
"RTN","IBY497PO",222,0)
 Q
"RTN","IBY497PO",223,0)
 ;
"RTN","IBY497PO",224,0)
408(FILE,IEN,SIEN,DFN,IENS,RSUPDT) ; procedure will convert LOCATION QUALIFIER data at 365.02,4.08 and 2.322,4.08
"RTN","IBY497PO",225,0)
 ; ^IBCN(365,D0,2,D1,4)= ^^^^^^^(#4.08) LOCATION QUALIFIER [8P:365.034] 
"RTN","IBY497PO",226,0)
 ; ^DPT(D0,.312,D1,6,D2,4)= ^^^^^^^(#4.08) LOCATION QUALIFIER  [8P:365.034]
"RTN","IBY497PO",227,0)
 I FILE=365.02 S VALUE=$P($G(^IBCN(365,IEN,2,SIEN,4)),U,8)
"RTN","IBY497PO",228,0)
 E  S VALUE=$P($G(^DPT(DFN,.312,IEN,6,SIEN,4)),U,8)
"RTN","IBY497PO",229,0)
 I VALUE]"",+$O(^IBE(365.034,"B",VALUE,"")) S RSUPDT(FILE,IENS,4.08)=VALUE  ;update field with ien of valid code in X12 file; otherwise leave with invalid code
"RTN","IBY497PO",230,0)
 Q
"RTN","IBY497PO",231,0)
 ;
"RTN","IBY497PO",232,0)
503(FILE,IEN,SIEN,DFN,IENS,RSUPDT) ; procedure will convert REFERENCE ID QUALIFIER data at 365.02,5.03 and 2.322,5.03
"RTN","IBY497PO",233,0)
 ; ^IBCN(365,D0,2,D1,5)= ^^ (#5.03) REFERENCE ID QUALIFIER [3P:365.028] 
"RTN","IBY497PO",234,0)
 ; ^DPT(D0,.312,D1,6,D2,5)= ^^ (#5.03) REFERENCE ID QUALIFIER [3P:365.028] 
"RTN","IBY497PO",235,0)
 I FILE=365.02 S VALUE=$P($G(^IBCN(365,IEN,2,SIEN,5)),U,3)
"RTN","IBY497PO",236,0)
 E  S VALUE=$P($G(^DPT(DFN,.312,IEN,6,SIEN,5)),U,3)
"RTN","IBY497PO",237,0)
 I VALUE]"",+$O(^IBE(365.028,"B",VALUE,"")) S RSUPDT(FILE,IENS,5.03)=VALUE  ;update field with ien of valid code in X12 file; otherwise leave with invalid code
"RTN","IBY497PO",238,0)
 Q
"RTN","IBY497PO",239,0)
 ;
"RTN","IBY497PO",240,0)
705(FILE,IEN,SIEN,DFN,IENS,RSUPDT) ; procedure will convert UNITS OF MEASUREMENT and DELIVERY PATTERN data at 365.27,.05 and .09, 2.3227,.05, and .09
"RTN","IBY497PO",241,0)
 ; ^IBCN(365,D0,2,D1,7,D2,0)= ^^^^(#.05) UNITS OF MEASUREMENT [5P:365.029]^^^^ (#.09) DELIVERY PATTERN [9P:365.036] ^ 
"RTN","IBY497PO",242,0)
 ; ^DPT(D0,.312,D1,6,D2,7,D3,0)= ^^^^(#.05) UNITS OF MEASUREMENT [5P:365.029]^^^^ (#.09) DELIVERY PATTERN [9P:365.036] ^ 
"RTN","IBY497PO",243,0)
 I FILE=365.02 S SFILE=365.27,SSIEN=0 F  S SSIEN=$O(^IBCN(365,IEN,2,SIEN,7,SSIEN)) Q:'SSIEN  F FLD=5,9 S VALUE=$P($G(^IBCN(365,IEN,2,SIEN,7,SSIEN,0)),U,FLD) D MORE705
"RTN","IBY497PO",244,0)
 I FILE=2.322 S SFILE=2.3227,SSIEN=0 F  S SSIEN=$O(^DPT(DFN,.312,IEN,6,SIEN,7,SSIEN)) Q:'SSIEN  F FLD=5,9 S VALUE=$P($G(^DPT(DFN,.312,IEN,6,SIEN,7,SSIEN,0)),U,FLD) D MORE705
"RTN","IBY497PO",245,0)
 Q
"RTN","IBY497PO",246,0)
 ;
"RTN","IBY497PO",247,0)
MORE705 ;
"RTN","IBY497PO",248,0)
 I VALUE]"",+$O(^IBE($S(FLD=5:365.029,1:365.036),"B",VALUE,"")) S RSUPDT(SFILE,SSIEN_","_IENS,".0"_FLD)=VALUE  ;update field with ien of valid code in X12 file; otherwise leave with invalid code
"RTN","IBY497PO",249,0)
 Q
"RTN","IBY497PO",250,0)
 ;
"RTN","IBY497PO",251,0)
804(FILE,IEN,SIEN,DFN,IENS,RSUPDT) ; procedure will convert DATE FORMAT data at 365.28,.04 and 2.3228,.04
"RTN","IBY497PO",252,0)
 ; ^IBCN(365,D0,2,D1,8,D2,0)= ^^^ (#.04) DATE FORMAT [4P:365.032]
"RTN","IBY497PO",253,0)
 ; ^DPT(D0,.312,D1,6,D2,8,D3,0)= ^^^ (#.04) DATE FORMAT [4P:365.032]
"RTN","IBY497PO",254,0)
 I FILE=365.02 S SFILE=365.28,SSIEN=0 F  S SSIEN=$O(^IBCN(365,IEN,2,SIEN,8,SSIEN)) Q:'SSIEN  S VALUE=$P($G(^IBCN(365,IEN,2,SIEN,8,SSIEN,0)),U,4) D MORE804
"RTN","IBY497PO",255,0)
 I FILE=2.322 S SFILE=2.3228,SSIEN=0 F  S SSIEN=$O(^DPT(DFN,.312,IEN,6,SIEN,8,SSIEN)) Q:'SSIEN  S VALUE=$P($G(^DPT(DFN,.312,IEN,6,SIEN,8,SSIEN,0)),U,4) D MORE804
"RTN","IBY497PO",256,0)
 Q
"RTN","IBY497PO",257,0)
 ;
"RTN","IBY497PO",258,0)
MORE804 ;
"RTN","IBY497PO",259,0)
 I VALUE]"",+$O(^IBE(365.032,"B",VALUE,"")) S RSUPDT(SFILE,SSIEN_","_IENS,.04)=VALUE  ;update field with ien of valid code in X12 file; otherwise leave with invalid code
"RTN","IBY497PO",260,0)
 Q
"RTN","IBY497PO",261,0)
 ;
"RTN","IBY497PO",262,0)
904(FILE,IEN,SIEN,DFN,IENS,RSUPDT) ; procedure will convert QUALIFIER data at 365.29,.04 and 2.3229,.04
"RTN","IBY497PO",263,0)
 ; ^IBCN(365,D0,2,D1,9,D2,0)= ^^^(#.04) QUALIFIER [4P:365.044]
"RTN","IBY497PO",264,0)
 ; ^DPT(D0,.312,D1,6,D2,9,D3,0)= ^^^(#.04) QUALIFIER [4P:365.044]
"RTN","IBY497PO",265,0)
 I FILE=365.02 S SFILE=365.29,SSIEN=0 F  S SSIEN=$O(^IBCN(365,IEN,2,SIEN,9,SSIEN)) Q:'SSIEN  S VALUE=$P($G(^IBCN(365,IEN,2,SIEN,9,SSIEN,0)),U,4) D MORE904
"RTN","IBY497PO",266,0)
 I FILE=2.322 S SFILE=2.3229,SSIEN=0 F  S SSIEN=$O(^DPT(DFN,.312,IEN,6,SIEN,9,SSIEN)) Q:'SSIEN  S VALUE=$P($G(^DPT(DFN,.312,IEN,6,SIEN,9,SSIEN,0)),U,4) D MORE904
"RTN","IBY497PO",267,0)
 Q
"RTN","IBY497PO",268,0)
 ;
"RTN","IBY497PO",269,0)
MORE904 ;
"RTN","IBY497PO",270,0)
 I VALUE]"",+$O(^IBE(365.044,"B",VALUE,"")) S RSUPDT(SFILE,SSIEN_","_IENS,.04)=VALUE  ;update field with ien of valid code in X12 file; otherwise leave with invalid code
"RTN","IBY497PO",271,0)
 Q
"RTN","IBY497PO",272,0)
 ;
"RTN","IBY497PO",273,0)
FLDLST ; these are the DD fields that were modified from a set of codes to a Pointer to a file
"RTN","IBY497PO",274,0)
 ;;file#^field#^field label^pointed-to file#
"RTN","IBY497PO",275,0)
 ;;365^8.01^PT. RELATIONSHIP - HIPAA^365.037
"RTN","IBY497PO",276,0)
 ;;365.02^.12^AUTHORIZATION/CERTIFICATION^365.033
"RTN","IBY497PO",277,0)
 ;;365.02^.13^IN PLAN^365.033
"RTN","IBY497PO",278,0)
 ;;365.02^1.01^PROCEDURE CODING METHOD^365.035
"RTN","IBY497PO",279,0)
 ;;365.02^3.02^ENTITY TYPE^365.043
"RTN","IBY497PO",280,0)
 ;;365.02^4.08^LOCATION QUALIFIER^365.034
"RTN","IBY497PO",281,0)
 ;;365.02^5.03^REFERENCE ID QUALIFIER^365.028
"RTN","IBY497PO",282,0)
 ;;365.27^.05^UNITS OF MEASUREMENT^365.029
"RTN","IBY497PO",283,0)
 ;;365.27^.09^DELIVERY PATTERN^365.036
"RTN","IBY497PO",284,0)
 ;;365.28^.04^DATE FORMAT^365.032
"RTN","IBY497PO",285,0)
 ;;365.29^.04^QUALIFIER^365.044
"RTN","IBY497PO",286,0)
 ;;2.322^.12^AUTHORIZATION/CERTIFICATION^365.033
"RTN","IBY497PO",287,0)
 ;;2.322^.13^IN PLAN^365.033
"RTN","IBY497PO",288,0)
 ;;2.322^1.01^PROCEDURE CODING METHOD^365.035
"RTN","IBY497PO",289,0)
 ;;2.322^3.02^ENTITY TYPE^365.043
"RTN","IBY497PO",290,0)
 ;;2.322^4.08^LOCATION QUALIFIER^365.034
"RTN","IBY497PO",291,0)
 ;;2.322^5.03^REFERENCE ID QUALIFIER^365.028
"RTN","IBY497PO",292,0)
 ;;2.3227^.05^UNITS OF MEASUREMENT^365.029
"RTN","IBY497PO",293,0)
 ;;2.3227^.09^DELIVERY PATTERN^365.036
"RTN","IBY497PO",294,0)
 ;;2.3228^.04^DATE FORMAT^365.032
"RTN","IBY497PO",295,0)
 ;;2.3229^.04^QUALIFIER^365.044
"RTN","IBY497PO",296,0)
 ;;
"RTN","IBY497PO",297,0)
 Q
"RTN","IBY497PO",298,0)
 ;
"UP",2,2.312,-1)
2^.312
"UP",2,2.312,0)
2.312
"UP",2,2.31211,-2)
2^.312
"UP",2,2.31211,-1)
2.312^11
"UP",2,2.31211,0)
2.31211
"UP",2,2.3129,-2)
2^.312
"UP",2,2.3129,-1)
2.312^9
"UP",2,2.3129,0)
2.3129
"UP",2,2.322,-2)
2^.312
"UP",2,2.322,-1)
2.312^6
"UP",2,2.322,0)
2.322
"UP",2,2.3226,-3)
2^.312
"UP",2,2.3226,-2)
2.312^6
"UP",2,2.3226,-1)
2.322^6
"UP",2,2.3226,0)
2.3226
"UP",2,2.3227,-3)
2^.312
"UP",2,2.3227,-2)
2.312^6
"UP",2,2.3227,-1)
2.322^7
"UP",2,2.3227,0)
2.3227
"UP",2,2.3228,-3)
2^.312
"UP",2,2.3228,-2)
2.312^6
"UP",2,2.3228,-1)
2.322^8
"UP",2,2.3228,0)
2.3228
"UP",2,2.3229,-3)
2^.312
"UP",2,2.3229,-2)
2.312^6
"UP",2,2.3229,-1)
2.322^9
"UP",2,2.3229,0)
2.3229
"UP",2,2.32291,-3)
2^.312
"UP",2,2.32291,-2)
2.312^6
"UP",2,2.32291,-1)
2.322^10
"UP",2,2.32291,0)
2.32291
"UP",2,2.32292,-3)
2^.312
"UP",2,2.32292,-2)
2.312^6
"UP",2,2.32292,-1)
2.322^11
"UP",2,2.32292,0)
2.32292
"UP",2,2.332,-2)
2^.312
"UP",2,2.332,-1)
2.312^10
"UP",2,2.332,0)
2.332
"UP",365,365.01,-1)
365^11
"UP",365,365.01,0)
365.01
"UP",365,365.02,-1)
365^2
"UP",365,365.02,0)
365.02
"UP",365,365.03,-1)
365^3
"UP",365,365.03,0)
365.03
"UP",365,365.04,-1)
365^10
"UP",365,365.04,0)
365.04
"UP",365,365.06,-1)
365^6
"UP",365,365.06,0)
365.06
"UP",365,365.061,-2)
365^6
"UP",365,365.061,-1)
365.06^1
"UP",365,365.061,0)
365.061
"UP",365,365.07,-1)
365^7
"UP",365,365.07,0)
365.07
"UP",365,365.09,-1)
365^9
"UP",365,365.09,0)
365.09
"UP",365,365.26,-2)
365^2
"UP",365,365.26,-1)
365.02^6
"UP",365,365.26,0)
365.26
"UP",365,365.27,-2)
365^2
"UP",365,365.27,-1)
365.02^7
"UP",365,365.27,0)
365.27
"UP",365,365.28,-2)
365^2
"UP",365,365.28,-1)
365.02^8
"UP",365,365.28,0)
365.28
"UP",365,365.29,-2)
365^2
"UP",365,365.29,-1)
365.02^9
"UP",365,365.29,0)
365.29
"UP",365,365.291,-2)
365^2
"UP",365,365.291,-1)
365.02^10
"UP",365,365.291,0)
365.291
"UP",365,365.292,-2)
365^2
"UP",365,365.292,-1)
365.02^14
"UP",365,365.292,0)
365.292
"VER")
8.0^22.0
"^DD",2,2.312,1,0)
*SUBSCRIBER ID^FX^^0;2^D SUBID^IBCNSU1
"^DD",2,2.312,1,.1)
INSURANCE NUMBER
"^DD",2,2.312,1,1,0)
^.1
"^DD",2,2.312,1,1,1,0)
2.312^ADGRU3121^MUMPS
"^DD",2,2.312,1,1,1,1)
D:($T(ADGRU^DGRUDD01)'="") ADGRU^DGRUDD01(+$G(DA(1)))
"^DD",2,2.312,1,1,1,2)
D:($T(ADGRU^DGRUDD01)'="") ADGRU^DGRUDD01(+$G(DA(1)))
"^DD",2,2.312,1,1,1,"%D",0)
^^1^1^3000420^
"^DD",2,2.312,1,1,1,"%D",1,0)
RAI/MDS: field monitored for changes.
"^DD",2,2.312,1,1,1,"DT")
3000420
"^DD",2,2.312,1,1,2,0)
2.312^AENR1^MUMPS
"^DD",2,2.312,1,1,2,1)
D EVENT^IVMPLOG($G(DA(1)))
"^DD",2,2.312,1,1,2,2)
D EVENT^IVMPLOG($G(DA(1)))
"^DD",2,2.312,1,1,2,3)
 DO NOT DELETE
"^DD",2,2.312,1,1,2,"%D",0)
^.101^2^2^3050913^^^^
"^DD",2,2.312,1,1,2,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",2,2.312,1,1,2,"%D",2,0)
enrollment.
"^DD",2,2.312,1,1,2,"DT")
3050913
"^DD",2,2.312,1,1,3,0)
^^TRIGGER^2.312^7.02
"^DD",2,2.312,1,1,3,1)
X ^DD(2.312,1,1,3,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.312,D1,7)):^(7),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X=$P(^DPT(DA(1),.312,DA,0),U,2) X ^DD(2.312,1,1,3,1.4)
"^DD",2,2.312,1,1,3,1.3)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S X=($P(^DPT(DA(1),.312,DA,0),U,2)'=$E($P($G(^DPT(DA(1),.312,DA,7)),U,2),1,20))
"^DD",2,2.312,1,1,3,1.4)
S DIH=$G(^DPT(DIV(0),.312,DIV(1),7)),DIV=X S $P(^(7),U,2)=DIV,DIH=2.312,DIG=7.02 D ^DICR
"^DD",2,2.312,1,1,3,2)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S X=($P(^DPT(DA(1),.312,DA,0),U,2)="") I X S X=DIV S Y(1)=$S($D(^DPT(D0,.312,D1,7)):^(7),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X="" X ^DD(2.312,1,1,3,2.4)
"^DD",2,2.312,1,1,3,2.4)
S DIH=$G(^DPT(DIV(0),.312,DIV(1),7)),DIV=X S $P(^(7),U,2)=DIV,DIH=2.312,DIG=7.02 D ^DICR
"^DD",2,2.312,1,1,3,"%D",0)
^.101^1^1^3131029^^
"^DD",2,2.312,1,1,3,"%D",1,0)
Triggers field 2.312/7.02 if first 20 chars of its value differ from the value in this field. Deletes field 2.312/7.02 if field 2.312/1 is deleted.
"^DD",2,2.312,1,1,3,"CREATE CONDITION")
S X=($P(^DPT(DA(1),.312,DA,0),U,2)'=$E($P($G(^DPT(DA(1),.312,DA,7)),U,2),1,20))
"^DD",2,2.312,1,1,3,"CREATE VALUE")
S X=$P(^DPT(DA(1),.312,DA,0),U,2)
"^DD",2,2.312,1,1,3,"DELETE CONDITION")
S X=($P(^DPT(DA(1),.312,DA,0),U,2)="")
"^DD",2,2.312,1,1,3,"DELETE VALUE")
@
"^DD",2,2.312,1,1,3,"DT")
3131020
"^DD",2,2.312,1,1,3,"FIELD")
SUBSCRIBER ID
"^DD",2,2.312,1,3)
Answer must be 3-20 characters in length.
"^DD",2,2.312,1,5,1,0)
2.312^7.02^1
"^DD",2,2.312,1,21,0)
^^4^4^3131120^
"^DD",2,2.312,1,21,1,0)
Enter the Subscriber's Primary ID number.  This number is assigned
"^DD",2,2.312,1,21,2,0)
by the payer and can be found on the subscriber's insurance card.
"^DD",2,2.312,1,21,3,0)
 
"^DD",2,2.312,1,21,4,0)
This field is scheduled for deletion in May 2015.
"^DD",2,2.312,1,"DT")
3131120
"^DD",2,2.312,3.06,0)
INSURED'S STREET 1^FX^^3;6^K:$L(X)>55!($L(X)<3)!'$$LENCHK^IBCNEUT1(X,30,0) X
"^DD",2,2.312,3.06,3)
Answer must be 3-30 characters in length.
"^DD",2,2.312,3.06,21,0)
^.001^1^1^3130211^^^^
"^DD",2,2.312,3.06,21,1,0)
This field contains the first street address of the policyholder.
"^DD",2,2.312,3.06,23,0)
^^1^1^3130605^
"^DD",2,2.312,3.06,23,1,0)
Length of this field is temporarily limited to 30 characters.
"^DD",2,2.312,3.06,"DT")
3130605
"^DD",2,2.312,3.07,0)
INSURED'S STREET 2^FX^^3;7^K:$L(X)>55!($L(X)<3)!'$$LENCHK^IBCNEUT1(X,30,0) X
"^DD",2,2.312,3.07,3)
Answer must be 3-30 characters in length.
"^DD",2,2.312,3.07,21,0)
^^2^2^3130605^
"^DD",2,2.312,3.07,21,1,0)
This field contains the second line of the street address of
"^DD",2,2.312,3.07,21,2,0)
the policyholder.
"^DD",2,2.312,3.07,23,0)
^^1^1^3130605^
"^DD",2,2.312,3.07,23,1,0)
Length of this field is temporarily limited to 30 characters.
"^DD",2,2.312,3.07,"DT")
3130605
"^DD",2,2.312,3.08,0)
INSURED'S CITY^FX^^3;8^K:$L(X)>30!($L(X)<2)!'$$LENCHK^IBCNEUT1(X,25,0) X
"^DD",2,2.312,3.08,3)
Answer must be 2-25 characters in length.
"^DD",2,2.312,3.08,21,0)
^.001^1^1^3130205^^^^
"^DD",2,2.312,3.08,21,1,0)
This field contains the city of the policyholder.
"^DD",2,2.312,3.08,23,0)
^^1^1^3130605^
"^DD",2,2.312,3.08,23,1,0)
Length of this field is temporarily limited to 25 characters.
"^DD",2,2.312,3.08,"DT")
3130605
"^DD",2,2.312,7.01,0)
NAME OF INSURED^RFX^^7;1^K:$L(X)>130!($L(X)<2)!'$$LENCHK^IBCNEUT1(X,50,0)!(X'[",") X
"^DD",2,2.312,7.01,.1)

"^DD",2,2.312,7.01,1,0)
^.1
"^DD",2,2.312,7.01,1,1,0)
^^TRIGGER^2.312^17
"^DD",2,2.312,7.01,1,1,1)
X ^DD(2.312,7.01,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.312,D1,0)):^(0),1:"") S X=$P(Y(1),U,17),X=X S DIU=X K Y S X=DIV S X=$E($P(^DPT(DA(1),.312,DA,7),U),1,50) X ^DD(2.312,7.01,1,1,1.4)
"^DD",2,2.312,7.01,1,1,1.3)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S X=($P(^DPT(DA(1),.312,DA,0),U,17)'=$E($P(^DPT(DA(1),.312,DA,7),U),1,50))
"^DD",2,2.312,7.01,1,1,1.4)
S DIH=$G(^DPT(DIV(0),.312,DIV(1),0)),DIV=X S $P(^(0),U,17)=DIV,DIH=2.312,DIG=17 D ^DICR
"^DD",2,2.312,7.01,1,1,2)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S X=($P(^DPT(DA(1),.312,DA,7),U)="") I X S X=DIV S Y(1)=$S($D(^DPT(D0,.312,D1,0)):^(0),1:"") S X=$P(Y(1),U,17),X=X S DIU=X K Y S X="" X ^DD(2.312,7.01,1,1,2.4)
"^DD",2,2.312,7.01,1,1,2.4)
S DIH=$G(^DPT(DIV(0),.312,DIV(1),0)),DIV=X S $P(^(0),U,17)=DIV,DIH=2.312,DIG=17 D ^DICR
"^DD",2,2.312,7.01,1,1,"%D",0)
^.101^1^1^3131029^^
"^DD",2,2.312,7.01,1,1,"%D",1,0)
Triggers field 2.312/17 if its value differs from first 50 chars of the value in this field. Deletes field 2.312/17 if field 2.312/7.01 is deleted.
"^DD",2,2.312,7.01,1,1,"CREATE CONDITION")
S X=($P(^DPT(DA(1),.312,DA,0),U,17)'=$E($P(^DPT(DA(1),.312,DA,7),U),1,50))
"^DD",2,2.312,7.01,1,1,"CREATE VALUE")
S X=$E($P(^DPT(DA(1),.312,DA,7),U),1,50)
"^DD",2,2.312,7.01,1,1,"DELETE CONDITION")
S X=($P(^DPT(DA(1),.312,DA,7),U)="")
"^DD",2,2.312,7.01,1,1,"DELETE VALUE")
@
"^DD",2,2.312,7.01,1,1,"DT")
3131020
"^DD",2,2.312,7.01,1,1,"FIELD")
*NAME OF INSURED
"^DD",2,2.312,7.01,3)
Answer must be 2-50 characters in length.
"^DD",2,2.312,7.01,5,1,0)
2.312^17^2
"^DD",2,2.312,7.01,21,0)
^^5^5^3130419^
"^DD",2,2.312,7.01,21,1,0)
Enter the name of the individual for which this insurance policy was 
"^DD",2,2.312,7.01,21,2,0)
issued. If the patient and the insurance subscriber are the same, then 
"^DD",2,2.312,7.01,21,3,0)
this field will be defaulted from the patient name field.
"^DD",2,2.312,7.01,21,4,0)
 
"^DD",2,2.312,7.01,21,5,0)
The name must contain a comma and be entered in Last,First format.
"^DD",2,2.312,7.01,23,0)
^^2^2^3130605^
"^DD",2,2.312,7.01,23,1,0)
Replaces field 17. Length of this field is temporarily limited to 50 
"^DD",2,2.312,7.01,23,2,0)
characters.
"^DD",2,2.312,7.01,"DT")
3140115
"^DD",2,2.312,7.02,0)
SUBSCRIBER ID^FX^^7;2^K:$L(X)>80!($L(X)<1)!'$$LENCHK^IBCNEUT1(X,20,0) X
"^DD",2,2.312,7.02,1,0)
^.1
"^DD",2,2.312,7.02,1,1,0)
^^TRIGGER^2.312^1
"^DD",2,2.312,7.02,1,1,1)
X ^DD(2.312,7.02,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.312,D1,0)):^(0),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X=$E($P(^DPT(DA(1),.312,DA,7),U,2),1,20) X ^DD(2.312,7.02,1,1,1.4)
"^DD",2,2.312,7.02,1,1,1.3)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S X=($P(^DPT(DA(1),.312,DA,0),U,2)'=$E($P(^DPT(DA(1),.312,DA,7),U,2),1,20))
"^DD",2,2.312,7.02,1,1,1.4)
S DIH=$G(^DPT(DIV(0),.312,DIV(1),0)),DIV=X S $P(^(0),U,2)=DIV,DIH=2.312,DIG=1 D ^DICR
"^DD",2,2.312,7.02,1,1,2)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S X=($P(^DPT(DA(1),.312,DA,7),U,2)="") I X S X=DIV S Y(1)=$S($D(^DPT(D0,.312,D1,0)):^(0),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X="" X ^DD(2.312,7.02,1,1,2.4)
"^DD",2,2.312,7.02,1,1,2.4)
S DIH=$G(^DPT(DIV(0),.312,DIV(1),0)),DIV=X S $P(^(0),U,2)=DIV,DIH=2.312,DIG=1 D ^DICR
"^DD",2,2.312,7.02,1,1,"%D",0)
^.101^1^1^3131029^^
"^DD",2,2.312,7.02,1,1,"%D",1,0)
Triggers field 2.312/1 if its value differs from first 20 chars of the value in this field. Deletes field 2.312/1 if field 2.312/7.02 is deleted.
"^DD",2,2.312,7.02,1,1,"CREATE CONDITION")
S X=($P(^DPT(DA(1),.312,DA,0),U,2)'=$E($P(^DPT(DA(1),.312,DA,7),U,2),1,20))
"^DD",2,2.312,7.02,1,1,"CREATE VALUE")
S X=$E($P(^DPT(DA(1),.312,DA,7),U,2),1,20)
"^DD",2,2.312,7.02,1,1,"DELETE CONDITION")
S X=($P(^DPT(DA(1),.312,DA,7),U,2)="")
"^DD",2,2.312,7.02,1,1,"DELETE VALUE")
@
"^DD",2,2.312,7.02,1,1,"DT")
3131020
"^DD",2,2.312,7.02,1,1,"FIELD")
*SUBSCRIBER ID
"^DD",2,2.312,7.02,3)
Answer must be 1-20 characters in length.
"^DD",2,2.312,7.02,5,1,0)
2.312^1^3
"^DD",2,2.312,7.02,21,0)
^^2^2^3130419^
"^DD",2,2.312,7.02,21,1,0)
Enter the Subscriber's Primary ID number. This number is assigned by the 
"^DD",2,2.312,7.02,21,2,0)
payer and can be found on the subscriber's insurance card.
"^DD",2,2.312,7.02,23,0)
^^2^2^3130605^
"^DD",2,2.312,7.02,23,1,0)
Replaces field 1. Length of this field is temporarily limited to 20 
"^DD",2,2.312,7.02,23,2,0)
characters.
"^DD",2,2.312,7.02,"DT")
3131120
"^DD",2,2.312,9,0)
GROUP REFERENCE INFORMATION^2.3129^^9;0
"^DD",2,2.312,9,21,0)
^^1^1^3130522^
"^DD",2,2.312,9,21,1,0)
Subscriber/Dependent additional identification data.
"^DD",2,2.312,10,0)
GROUP PROVIDER INFO^2.332^^10;0
"^DD",2,2.312,10,21,0)
^^1^1^3130516^
"^DD",2,2.312,10,21,1,0)
Entries in this sub-file identify the characteristics of a provider.
"^DD",2,2.312,11,0)
HEALTH CARE CODE INFORMATION^2.31211^^11;0
"^DD",2,2.312,11,21,0)
^^1^1^3130516^
"^DD",2,2.312,11,21,1,0)
To supply information related to the delivery of health care.
"^DD",2,2.312,12.01,0)
MILITARY INFO STATUS CODE^P365.039^IBE(365.039,^12;1^Q
"^DD",2,2.312,12.01,3)
Enter the military information status code.
"^DD",2,2.312,12.01,21,0)
^^1^1^3130520^
"^DD",2,2.312,12.01,21,1,0)
Code to indicate the status of the military information sent by the payer.
"^DD",2,2.312,12.01,23,0)
^^1^1^3130520^
"^DD",2,2.312,12.01,23,1,0)
Source: 271 HL7 message ZMP.2
"^DD",2,2.312,12.01,"DT")
3130520
"^DD",2,2.312,12.02,0)
MILITARY EMPLOYMENT STATUS^P365.046^IBE(365.046,^12;2^Q
"^DD",2,2.312,12.02,3)
Select the appropriate code for claimant's military employment status.
"^DD",2,2.312,12.02,21,0)
^^2^2^3130520^
"^DD",2,2.312,12.02,21,1,0)
Code showing the general military employment status of an
"^DD",2,2.312,12.02,21,2,0)
employee/claimant.  
"^DD",2,2.312,12.02,23,0)
^^1^1^3130520^
"^DD",2,2.312,12.02,23,1,0)
Source: 271 HL7 message ZMP.3
"^DD",2,2.312,12.02,"DT")
3130520
"^DD",2,2.312,12.03,0)
MILITARY GOVT AFFILIATION CODE^P365.041'^IBE(365.041,^12;3^Q
"^DD",2,2.312,12.03,3)
Select the code that supports the claimant's military affiliation.
"^DD",2,2.312,12.03,21,0)
^^1^1^3130520^
"^DD",2,2.312,12.03,21,1,0)
Code specifying the military service affiliation.
"^DD",2,2.312,12.03,23,0)
^^1^1^3130520^
"^DD",2,2.312,12.03,23,1,0)
Source: 271 HL7 message ZMP.4
"^DD",2,2.312,12.03,"DT")
3130612
"^DD",2,2.312,12.04,0)
MILITARY PERSONNEL DESCRIPTION^F^^12;4^K:$L(X)>80!($L(X)<1) X
"^DD",2,2.312,12.04,3)
Answer must be 1-80 characters in length.
"^DD",2,2.312,12.04,21,0)
^^1^1^3130520^
"^DD",2,2.312,12.04,21,1,0)
This field further identifies the exact military unit.
"^DD",2,2.312,12.04,23,0)
^^1^1^3130520^
"^DD",2,2.312,12.04,23,1,0)
Source: 271 HL7 message ZMP.5 
"^DD",2,2.312,12.04,"DT")
3130520
"^DD",2,2.312,12.05,0)
MILITARY SERVICE RANK CODE^P365.042^IBE(365.042,^12;5^Q
"^DD",2,2.312,12.05,3)
Select the Military Service Rank code.
"^DD",2,2.312,12.05,21,0)
^^1^1^3130520^
"^DD",2,2.312,12.05,21,1,0)
Code specifying the military service rank. 
"^DD",2,2.312,12.05,23,0)
^^1^1^3130520^
"^DD",2,2.312,12.05,23,1,0)
Source: 271 HL7 message ZMP.6
"^DD",2,2.312,12.05,"DT")
3130521
"^DD",2,2.312,12.06,0)
DATE TIME PERIOD FORMAT QUAL^P365.032^IBE(365.032,^12;6^Q
"^DD",2,2.312,12.06,3)
Select the qualifier for the date time period.
"^DD",2,2.312,12.06,21,0)
^^2^2^3130520^
"^DD",2,2.312,12.06,21,1,0)
Code qualifier indicating the date format, time format, or date and time
"^DD",2,2.312,12.06,21,2,0)
format respective of the DATE TIME PERIOD field (#12.07).
"^DD",2,2.312,12.06,23,0)
^^1^1^3130520^
"^DD",2,2.312,12.06,23,1,0)
Source: 271 HL7 message ZMP.7
"^DD",2,2.312,12.06,"DT")
3130520
"^DD",2,2.312,12.07,0)
DATE TIME PERIOD^FX^^12;7^K:$L(X)>17!($L(X)<8)!'(X?8N!(X?8N1"-"8N)) X
"^DD",2,2.312,12.07,3)
Enter the date or range of dates in CCYYMMD or CCYYMMDD-CCYYMMDD format
"^DD",2,2.312,12.07,21,0)
^^2^2^3130520^
"^DD",2,2.312,12.07,21,1,0)
Expression of a date or range of dates that indicates the date span of
"^DD",2,2.312,12.07,21,2,0)
military service.
"^DD",2,2.312,12.07,23,0)
^^1^1^3130520^
"^DD",2,2.312,12.07,23,1,0)
Source: 271 HL7 message ZMP.8
"^DD",2,2.312,12.07,"DT")
3130520
"^DD",2,2.312,17,0)
*NAME OF INSURED^RFX^^0;17^K:$L(X)>50!($L(X)<2)!(X'[",") X
"^DD",2,2.312,17,1,0)
^.1
"^DD",2,2.312,17,1,1,0)
2.312^AENR17^MUMPS
"^DD",2,2.312,17,1,1,1)
D EVENT^IVMPLOG($G(DA(1)))
"^DD",2,2.312,17,1,1,2)
D EVENT^IVMPLOG($G(DA(1)))
"^DD",2,2.312,17,1,1,3)
 DO NOT DELETE
"^DD",2,2.312,17,1,1,"%D",0)
^.101^2^2^3050913^^^^
"^DD",2,2.312,17,1,1,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",2,2.312,17,1,1,"%D",2,0)
enrollment.
"^DD",2,2.312,17,1,1,"DT")
3050913
"^DD",2,2.312,17,1,2,0)
^^TRIGGER^2.312^7.01
"^DD",2,2.312,17,1,2,1)
X ^DD(2.312,17,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.312,D1,7)):^(7),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y S X=DIV S X=$P(^DPT(DA(1),.312,DA,0),U,17) X ^DD(2.312,17,1,2,1.4)
"^DD",2,2.312,17,1,2,1.3)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S X=($P(^DPT(DA(1),.312,DA,0),U,17)'=$E($P($G(^DPT(DA(1),.312,DA,7)),U),1,50))
"^DD",2,2.312,17,1,2,1.4)
S DIH=$G(^DPT(DIV(0),.312,DIV(1),7)),DIV=X S $P(^(7),U,1)=DIV,DIH=2.312,DIG=7.01 D ^DICR
"^DD",2,2.312,17,1,2,2)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S X=($P(^DPT(DA(1),.312,DA,0),U,17)="") I X S X=DIV S Y(1)=$S($D(^DPT(D0,.312,D1,7)):^(7),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y S X="" X ^DD(2.312,17,1,2,2.4)
"^DD",2,2.312,17,1,2,2.4)
S DIH=$G(^DPT(DIV(0),.312,DIV(1),7)),DIV=X S $P(^(7),U,1)=DIV,DIH=2.312,DIG=7.01 D ^DICR
"^DD",2,2.312,17,1,2,"%D",0)
^.101^1^1^3131029^^
"^DD",2,2.312,17,1,2,"%D",1,0)
Triggers field 2.312/7.01 if first 50 chars of its value differ from the value in this field. Deletes field 2.312/7.01 if field 2.312/17 is deleted.
"^DD",2,2.312,17,1,2,"CREATE CONDITION")
S X=($P(^DPT(DA(1),.312,DA,0),U,17)'=$E($P($G(^DPT(DA(1),.312,DA,7)),U),1,50))
"^DD",2,2.312,17,1,2,"CREATE VALUE")
S X=$P(^DPT(DA(1),.312,DA,0),U,17)
"^DD",2,2.312,17,1,2,"DELETE CONDITION")
S X=($P(^DPT(DA(1),.312,DA,0),U,17)="")
"^DD",2,2.312,17,1,2,"DELETE VALUE")
@
"^DD",2,2.312,17,1,2,"DT")
3131020
"^DD",2,2.312,17,1,2,"FIELD")
NAME OF INSURED
"^DD",2,2.312,17,3)
Enter 2-50 character name of person who holds this insurance policy.
"^DD",2,2.312,17,5,1,0)
2.312^7.01^1
"^DD",2,2.312,17,21,0)
^^7^7^3131120^
"^DD",2,2.312,17,21,1,0)
Enter the name of the individual for which this insurance policy was
"^DD",2,2.312,17,21,2,0)
issued.  If the patient and the insurance subscriber are the same,
"^DD",2,2.312,17,21,3,0)
then this field will be defaulted from the patient name field.
"^DD",2,2.312,17,21,4,0)
 
"^DD",2,2.312,17,21,5,0)
The name must contain a comma and be entered in Last,First format.
"^DD",2,2.312,17,21,6,0)
 
"^DD",2,2.312,17,21,7,0)
This field is scheduled for deletion in May 2015.
"^DD",2,2.312,17,"DT")
3140115
"^DD",2,2.31211,0)
HEALTH CARE CODE INFORMATION SUB-FIELD^^.04^4
"^DD",2,2.31211,0,"DT")
3130522
"^DD",2,2.31211,0,"IX","B",2.31211,.01)

"^DD",2,2.31211,0,"NM","HEALTH CARE CODE INFORMATION")

"^DD",2,2.31211,0,"UP")
2.312
"^DD",2,2.31211,.01,0)
SEQUENCE^MRNJ5,0^^0;1^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."1.N) X
"^DD",2,2.31211,.01,1,0)
^.1
"^DD",2,2.31211,.01,1,1,0)
2.31211^B
"^DD",2,2.31211,.01,1,1,1)
S ^DPT(DA(2),.312,DA(1),11,"B",$E(X,1,30),DA)=""
"^DD",2,2.31211,.01,1,1,2)
K ^DPT(DA(2),.312,DA(1),11,"B",$E(X,1,30),DA)
"^DD",2,2.31211,.01,3)
Type a number between 1 and 99999, 0 decimal digits.
"^DD",2,2.31211,.01,21,0)
^^2^2^3130610^
"^DD",2,2.31211,.01,21,1,0)
This field contains a sequential number generated at the time a record is
"^DD",2,2.31211,.01,21,2,0)
stored in the subfile.  
"^DD",2,2.31211,.01,23,0)
^^1^1^3130522^
"^DD",2,2.31211,.01,23,1,0)
Sequential number 1..N, assigned automatically.
"^DD",2,2.31211,.01,"DT")
3130610
"^DD",2,2.31211,.02,0)
DIAGNOSIS CODE^P80'^ICD9(^0;2^Q
"^DD",2,2.31211,.02,3)
Select the diagnosis code.
"^DD",2,2.31211,.02,21,0)
^^2^2^3130522^
"^DD",2,2.31211,.02,21,1,0)
Diagnosis Code sent by the payer in response to the insurance eligibility
"^DD",2,2.31211,.02,21,2,0)
inquiry.
"^DD",2,2.31211,.02,23,0)
^^2^2^3130522^
"^DD",2,2.31211,.02,23,1,0)
Source:  Health Care Diagnosis Code information in the X12 271 HI segment
"^DD",2,2.31211,.02,23,2,0)
in these X12 loops: 2100C, 2100D.   271 HL7 message DG1.3.1
"^DD",2,2.31211,.02,"DT")
3130522
"^DD",2,2.31211,.03,0)
DIAGNOSIS CODE QUALIFIER^F^^0;3^K:$L(X)>10!($L(X)<1) X
"^DD",2,2.31211,.03,3)
Answer must be 1-10 characters in length.
"^DD",2,2.31211,.03,21,0)
^^2^2^3130522^
"^DD",2,2.31211,.03,21,1,0)
Diagnosis Type Code identifying a specific industry code list ICD-9 or
"^DD",2,2.31211,.03,21,2,0)
ICD-10.
"^DD",2,2.31211,.03,23,0)
^^11^11^3130522^
"^DD",2,2.31211,.03,23,1,0)
Source: 271 HL7 message DG1.3.3 
"^DD",2,2.31211,.03,23,2,0)
"ABK or BK" - represent ICD-10-CM and
"^DD",2,2.31211,.03,23,3,0)
ICD-9-CM principal diagnosis code qualifiers. These qualifiers also
"^DD",2,2.31211,.03,23,4,0)
represent the code as a primary code.
"^DD",2,2.31211,.03,23,5,0)
 
"^DD",2,2.31211,.03,23,6,0)
"ABF or BF" - also represent ICD-10-CM and ICD-9-CM diagnosis code
"^DD",2,2.31211,.03,23,7,0)
qualifiers and these qualifiers represent the code as a secondary code.
"^DD",2,2.31211,.03,23,8,0)
 
"^DD",2,2.31211,.03,23,9,0)
When the payer sends an ABK or an ABF, the Eligibility Communicator will
"^DD",2,2.31211,.03,23,10,0)
map these to the HL7 code "I10C". When the payer sends an ABK or an ABF,
"^DD",2,2.31211,.03,23,11,0)
the Eligibility Communicator will map these to the HL7 code "I9C".
"^DD",2,2.31211,.03,"DT")
3130522
"^DD",2,2.31211,.04,0)
PRIMARY OR SECONDARY?^S^P:PRIMARY;S:SECONDARY;^0;4^Q
"^DD",2,2.31211,.04,3)
Does this code represent a primary or secondary diagnosis?
"^DD",2,2.31211,.04,21,0)
^^2^2^3130522^
"^DD",2,2.31211,.04,21,1,0)
This field indicates whether the code in the DIAGNOSIS CODE (#.02) field
"^DD",2,2.31211,.04,21,2,0)
is a primary or secondary diagnosis.
"^DD",2,2.31211,.04,"DT")
3130522
"^DD",2,2.3129,0)
GROUP REFERENCE INFORMATION SUB-FIELD^^.04^4
"^DD",2,2.3129,0,"DT")
3130522
"^DD",2,2.3129,0,"IX","B",2.3129,.01)

"^DD",2,2.3129,0,"NM","GROUP REFERENCE INFORMATION")

"^DD",2,2.3129,0,"UP")
2.312
"^DD",2,2.3129,.01,0)
SEQUENCE^MRNJ5,0^^0;1^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."1.N) X
"^DD",2,2.3129,.01,1,0)
^.1
"^DD",2,2.3129,.01,1,1,0)
2.3129^B
"^DD",2,2.3129,.01,1,1,1)
S ^DPT(DA(2),.312,DA(1),9,"B",$E(X,1,30),DA)=""
"^DD",2,2.3129,.01,1,1,2)
K ^DPT(DA(2),.312,DA(1),9,"B",$E(X,1,30),DA)
"^DD",2,2.3129,.01,3)
Type a number between 1 and 99999, 0 decimal digits.
"^DD",2,2.3129,.01,21,0)
^^2^2^3130610^
"^DD",2,2.3129,.01,21,1,0)
This field contains a sequential number generated at the time a record is
"^DD",2,2.3129,.01,21,2,0)
stored in the subfile.  
"^DD",2,2.3129,.01,23,0)
^^1^1^3130522^
"^DD",2,2.3129,.01,23,1,0)
Sequential number 1..N, assigned automatically.
"^DD",2,2.3129,.01,"DT")
3130610
"^DD",2,2.3129,.02,0)
REFERENCE ID (GROUP)^F^^0;2^K:$L(X)>50!($L(X)<1) X
"^DD",2,2.3129,.02,3)
Answer must be 1-50 characters in length.
"^DD",2,2.3129,.02,21,0)
^^1^1^3130522^
"^DD",2,2.3129,.02,21,1,0)
Subscriber Supplemental Identifier.
"^DD",2,2.3129,.02,23,0)
^^2^2^3130522^
"^DD",2,2.3129,.02,23,1,0)
X12: 271, 2100C/2100D, REF02 Reference Identification.  Source: 271 HL7
"^DD",2,2.3129,.02,23,2,0)
message, ZRF.3
"^DD",2,2.3129,.02,"DT")
3130522
"^DD",2,2.3129,.03,0)
REF ID QUALIFIER (GROUP)^P365.028^IBE(365.028,^0;3^Q
"^DD",2,2.3129,.03,3)
Select the reference ID qualifier.
"^DD",2,2.3129,.03,21,0)
^^2^2^3130522^
"^DD",2,2.3129,.03,21,1,0)
 Describes the type of reference ID at the REFERENCE ID (GROUP) (#.02)
"^DD",2,2.3129,.03,21,2,0)
field. 
"^DD",2,2.3129,.03,23,0)
^^2^2^3130522^
"^DD",2,2.3129,.03,23,1,0)
X12: 271, 2100C/2100D, REF01 Reference Identification Qualifier.  Source:
"^DD",2,2.3129,.03,23,2,0)
271 HL7 message, ZRF.2.1
"^DD",2,2.3129,.03,"DT")
3130522
"^DD",2,2.3129,.04,0)
DESCRIPTION^F^^0;4^K:$L(X)>80!($L(X)<1) X
"^DD",2,2.3129,.04,3)
Answer must be 1-80 characters in length.
"^DD",2,2.3129,.04,21,0)
^^3^3^3130522^
"^DD",2,2.3129,.04,21,1,0)
A free-form description to clarify the Reference ID in the REFERENCE ID
"^DD",2,2.3129,.04,21,2,0)
(GROUP) (#.02) field.  It will be populated with the Plan, Group or Plan
"^DD",2,2.3129,.04,21,3,0)
Network Name.
"^DD",2,2.3129,.04,23,0)
^^1^1^3130522^
"^DD",2,2.3129,.04,23,1,0)
X12: 271, 2100C/2100D, REF03 DESCRIPTION.  271 HL7 message, ZRF.4
"^DD",2,2.3129,.04,"DT")
3130522
"^DD",2,2.322,.02,0)
ELIGIBILITY/BENEFIT INFO^P365.011^IBE(365.011,^0;2^Q
"^DD",2,2.322,.02,.1)
Elig/Ben Info
"^DD",2,2.322,.02,3)
Enter an eligibility/benefit code from the list.
"^DD",2,2.322,.02,21,0)
^^2^2^3091013^
"^DD",2,2.322,.02,21,1,0)
This field contains a code identifying the eligibility status
"^DD",2,2.322,.02,21,2,0)
of the individual or the benefit returned by the Payer.
"^DD",2,2.322,.02,23,0)
^^1^1^3091013^
"^DD",2,2.322,.02,23,1,0)
It corresponds to X.12 271 EB01 data element.
"^DD",2,2.322,.02,"DT")
3130307
"^DD",2,2.322,.03,0)
COVERAGE LEVEL^P365.012^IBE(365.012,^0;3^Q
"^DD",2,2.322,.03,.1)
Coverage Level
"^DD",2,2.322,.03,3)
Enter a coverage level code from the list.
"^DD",2,2.322,.03,21,0)
^^1^1^3091013^
"^DD",2,2.322,.03,21,1,0)
This field identifies the level of coverage of benefits.
"^DD",2,2.322,.03,23,0)
^^1^1^3091013^
"^DD",2,2.322,.03,23,1,0)
It corresponds to X.12 271 EB02 data element.
"^DD",2,2.322,.03,"DT")
3130307
"^DD",2,2.322,.05,0)
INSURANCE TYPE^P365.014^IBE(365.014,^0;5^Q
"^DD",2,2.322,.05,.1)
Insurance Type
"^DD",2,2.322,.05,3)
Enter the insurance type code from the list.
"^DD",2,2.322,.05,21,0)
^^2^2^3100428^
"^DD",2,2.322,.05,21,1,0)
This is a code identifying the type of insurance policy within
"^DD",2,2.322,.05,21,2,0)
a specific insurance program.
"^DD",2,2.322,.05,23,0)
^^1^1^3091013^
"^DD",2,2.322,.05,23,1,0)
It corresponds to X.12 271 EB04 data element.
"^DD",2,2.322,.05,"DT")
3130307
"^DD",2,2.322,.07,0)
TIME PERIOD QUALIFIER^P365.015^IBE(365.015,^0;7^Q
"^DD",2,2.322,.07,.1)
Time Period
"^DD",2,2.322,.07,3)
Enter the type of time period code from the list.
"^DD",2,2.322,.07,21,0)
^^2^2^3100428^
"^DD",2,2.322,.07,21,1,0)
This is a code for the time period category that determines
"^DD",2,2.322,.07,21,2,0)
for how long the benefits are available.
"^DD",2,2.322,.07,23,0)
^^1^1^3091013^
"^DD",2,2.322,.07,23,1,0)
It corresponds to X.12 271 EB06 data element.
"^DD",2,2.322,.07,"DT")
3130307
"^DD",2,2.322,.08,0)
MONETARY AMOUNT^FX^^0;8^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(+X>999999999999999)!(+X<0)!(X?.E1"."3.N) X
"^DD",2,2.322,.08,3)
Type a dollar amount between 0 and 999999999999999, 2 decimal digits.
"^DD",2,2.322,.08,21,0)
^.001^2^2^3130211^^^
"^DD",2,2.322,.08,21,1,0)
This field is populated if eligibility or benefit must be
"^DD",2,2.322,.08,21,2,0)
qualified by a monetary amount.
"^DD",2,2.322,.08,23,0)
^.001^1^1^3130211^^^
"^DD",2,2.322,.08,23,1,0)
It corresponds to X.12 271 EB07 data element.
"^DD",2,2.322,.08,"DT")
3130612
"^DD",2,2.322,.1,0)
QUANTITY QUALIFIER^P365.016^IBE(365.016,^0;10^Q
"^DD",2,2.322,.1,.1)
Quantity
"^DD",2,2.322,.1,3)
Enter the type of quantity code from the list.
"^DD",2,2.322,.1,21,0)
^^2^2^3091013^
"^DD",2,2.322,.1,21,1,0)
This field is used to identify the type of units that are being
"^DD",2,2.322,.1,21,2,0)
conveyed in the QUANTITY field (#.11).
"^DD",2,2.322,.1,23,0)
^^1^1^3091013^
"^DD",2,2.322,.1,23,1,0)
It corresponds to X.12 271 EB09 data element.
"^DD",2,2.322,.1,"DT")
3130307
"^DD",2,2.322,.12,0)
AUTHORIZATION/CERTIFICATION^P365.033^IBE(365.033,^0;12^Q
"^DD",2,2.322,.12,.1)
Authorization/Certification
"^DD",2,2.322,.12,3)
Enter YES if authorization or certification is required.
"^DD",2,2.322,.12,21,0)
^^2^2^3091013^
"^DD",2,2.322,.12,21,1,0)
This field indicates that an authorization or certification
"^DD",2,2.322,.12,21,2,0)
is required per plan provisions.
"^DD",2,2.322,.12,23,0)
^^1^1^3091013^
"^DD",2,2.322,.12,23,1,0)
It corresponds to X.12 271 EB11 data element.
"^DD",2,2.322,.12,"DT")
3130326
"^DD",2,2.322,.13,0)
IN PLAN^P365.033^IBE(365.033,^0;13^Q
"^DD",2,2.322,.13,.1)
In-Plan-Network
"^DD",2,2.322,.13,3)
Enter YES if the benefits identified are In-Plan-Network.
"^DD",2,2.322,.13,21,0)
^^5^5^3091013^
"^DD",2,2.322,.13,21,1,0)
This field indicates the plan network indicator.  A YES value indicates
"^DD",2,2.322,.13,21,2,0)
the benefits identified are considered In-Plan-Network.  A NO value
"^DD",2,2.322,.13,21,3,0)
indicates that the benefits identified are considered 
"^DD",2,2.322,.13,21,4,0)
Out-Of-Plan-Network.  A "U" value indicates it is unknown whether the
"^DD",2,2.322,.13,21,5,0)
benefits identified are part of the Plan Network.
"^DD",2,2.322,.13,23,0)
^^1^1^3091013^
"^DD",2,2.322,.13,23,1,0)
It corresponds to X.12 271 EB12 data element.
"^DD",2,2.322,.13,"DT")
3130326
"^DD",2,2.322,1.01,0)
PROCEDURE CODING METHOD^P365.035^IBE(365.035,^1;1^Q
"^DD",2,2.322,1.01,3)
Enter the code describing procedure coding method.
"^DD",2,2.322,1.01,21,0)
^^1^1^3090922^
"^DD",2,2.322,1.01,21,1,0)
Two character code describing procedure coding method.
"^DD",2,2.322,1.01,23,0)
^^1^1^3090922^
"^DD",2,2.322,1.01,23,1,0)
Source: 271 HL7 message, ZEB.14.1
"^DD",2,2.322,1.01,"DT")
3130307
"^DD",2,2.322,3.01,0)
ENTITY ID CODE^P365.022^IBE(365.022,^3;1^Q
"^DD",2,2.322,3.01,3)
Select X12 code for entity identifier.
"^DD",2,2.322,3.01,21,0)
^^1^1^3090723^
"^DD",2,2.322,3.01,21,1,0)
X12 Entity Identifier Code.
"^DD",2,2.322,3.01,23,0)
^^1^1^3090723^
"^DD",2,2.322,3.01,23,1,0)
Source: 271 HL7 message, ZTY.2.1
"^DD",2,2.322,3.01,"DT")
3130305
"^DD",2,2.322,3.02,0)
ENTITY TYPE^P365.043^IBE(365.043,^3;2^Q
"^DD",2,2.322,3.02,3)
Select type of the entity.
"^DD",2,2.322,3.02,21,0)
^^1^1^3090723^
"^DD",2,2.322,3.02,21,1,0)
Entity Type Qualifier.
"^DD",2,2.322,3.02,23,0)
^^1^1^3090723^
"^DD",2,2.322,3.02,23,1,0)
Source: 271 HL7 message, ZTY.3.1
"^DD",2,2.322,3.02,"DT")
3130305
"^DD",2,2.322,3.05,0)
ENTITY ID QUALIFIER^P365.023^IBE(365.023,^3;5^Q
"^DD",2,2.322,3.05,3)
Select X12 code for ID qualifier.
"^DD",2,2.322,3.05,21,0)
^^1^1^3090723^
"^DD",2,2.322,3.05,21,1,0)
Code designating the system/method used for Identification.
"^DD",2,2.322,3.05,23,0)
^^1^1^3090723^
"^DD",2,2.322,3.05,23,1,0)
Source: 271 HL7 message, ZTY.5.1
"^DD",2,2.322,3.05,"DT")
3130306
"^DD",2,2.322,3.06,0)
ENTITY RELATIONSHIP CODE^P365.031^IBE(365.031,^3;6^Q
"^DD",2,2.322,3.06,3)
Enter the code that represents the relationship to the patient.
"^DD",2,2.322,3.06,21,0)
^^1^1^3130305^
"^DD",2,2.322,3.06,21,1,0)
Benefit Related Entity's relationship to the patient.
"^DD",2,2.322,3.06,23,0)
^^2^2^3130305^
"^DD",2,2.322,3.06,23,1,0)
Populated by the eInsurance application when processing the data from the 
"^DD",2,2.322,3.06,23,2,0)
incoming HL7 271 MESSAGE.
"^DD",2,2.322,3.06,"DT")
3130305
"^DD",2,2.322,4.08,0)
LOCATION QUALIFIER^P365.034^IBE(365.034,^4;8^Q
"^DD",2,2.322,4.08,3)
Select location qualifier.
"^DD",2,2.322,4.08,21,0)
^^1^1^3090723^
"^DD",2,2.322,4.08,21,1,0)
Entity address, location qualifier.
"^DD",2,2.322,4.08,23,0)
^^1^1^3090723^
"^DD",2,2.322,4.08,23,1,0)
Source: 271 HL7 message, ZTY.8
"^DD",2,2.322,4.08,"DT")
3130306
"^DD",2,2.322,5.01,0)
PROVIDER CODE^P365.024^IBE(365.024,^5;1^Q
"^DD",2,2.322,5.01,3)
Select provider code.
"^DD",2,2.322,5.01,21,0)
^^1^1^3090724^
"^DD",2,2.322,5.01,21,1,0)
Code identifying the type of provider.
"^DD",2,2.322,5.01,23,0)
^^1^1^3090724^
"^DD",2,2.322,5.01,23,1,0)
Source: 271 HL7 message, ZTY.10.1
"^DD",2,2.322,5.01,"DT")
3130306
"^DD",2,2.322,5.03,0)
REFERENCE ID QUALIFIER^P365.028^IBE(365.028,^5;3^Q
"^DD",2,2.322,5.03,3)
Select reference id qualifier.
"^DD",2,2.322,5.03,21,0)
^^1^1^3090724^
"^DD",2,2.322,5.03,21,1,0)
Reference identifier type.
"^DD",2,2.322,5.03,23,0)
^^1^1^3090724^
"^DD",2,2.322,5.03,23,1,0)
Source: 271 HL7 message, ZTY.11.1
"^DD",2,2.322,5.03,"DT")
3130306
"^DD",2,2.322,11,0)
SERVICE TYPES^2.32292PA^^11;0
"^DD",2,2.3226,.03,0)
*COMMUNICATION NUMBER^F^^0;3^K:$L(X)>30!($L(X)<1) X
"^DD",2,2.3226,.03,1,0)
^.1
"^DD",2,2.3226,.03,1,1,0)
^^TRIGGER^2.3226^1
"^DD",2,2.3226,.03,1,1,1)
X ^DD(2.3226,.03,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.312,D1,6,D2,6,D3,1)):^(1),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y X ^DD(2.3226,.03,1,1,1.1) X ^DD(2.3226,.03,1,1,1.4)
"^DD",2,2.3226,.03,1,1,1.1)
S X=DIV S X=$P(^DPT(DA(3),.312,DA(2),6,DA(1),6,DA,0),U,3)
"^DD",2,2.3226,.03,1,1,1.3)
K DIV S DIV=X,D0=DA(3),DIV(0)=D0,D1=DA(2),DIV(1)=D1,D2=DA(1),DIV(2)=D2,D3=DA,DIV(3)=D3 S Y(0)=X S X=($P(^DPT(DA(3),.312,DA(2),6,DA(1),6,DA,0),U,3)'=$E($P($G(^DPT(DA(3),.312,DA(2),6,DA(1),6,DA,1)),U),1,30))
"^DD",2,2.3226,.03,1,1,1.4)
S DIH=$G(^DPT(DIV(0),.312,DIV(1),6,DIV(2),6,DIV(3),1)),DIV=X S $P(^(1),U,1)=DIV,DIH=2.3226,DIG=1 D ^DICR
"^DD",2,2.3226,.03,1,1,2)
X ^DD(2.3226,.03,1,1,2.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.312,D1,6,D2,6,D3,1)):^(1),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y S X="" X ^DD(2.3226,.03,1,1,2.4)
"^DD",2,2.3226,.03,1,1,2.3)
K DIV S DIV=X,D0=DA(3),DIV(0)=D0,D1=DA(2),DIV(1)=D1,D2=DA(1),DIV(2)=D2,D3=DA,DIV(3)=D3 S Y(0)=X S X=($P(^DPT(DA(3),.312,DA(2),6,DA(1),6,DA,0),U,3)="")
"^DD",2,2.3226,.03,1,1,2.4)
S DIH=$G(^DPT(DIV(0),.312,DIV(1),6,DIV(2),6,DIV(3),1)),DIV=X S $P(^(1),U,1)=DIV,DIH=2.3226,DIG=1 D ^DICR
"^DD",2,2.3226,.03,1,1,"%D",0)
^.101^1^1^3131029^^
"^DD",2,2.3226,.03,1,1,"%D",1,0)
Triggers field 2.3226/1 if first 30 chars of its value differ from the value in this field. Deletes field 2.3226/1 if field 2.3226/.03 is deleted.
"^DD",2,2.3226,.03,1,1,"CREATE CONDITION")
S X=($P(^DPT(DA(3),.312,DA(2),6,DA(1),6,DA,0),U,3)'=$E($P($G(^DPT(DA(3),.312,DA(2),6,DA(1),6,DA,1)),U),1,30))
"^DD",2,2.3226,.03,1,1,"CREATE VALUE")
S X=$P(^DPT(DA(3),.312,DA(2),6,DA(1),6,DA,0),U,3)
"^DD",2,2.3226,.03,1,1,"DELETE CONDITION")
S X=($P(^DPT(DA(3),.312,DA(2),6,DA(1),6,DA,0),U,3)="")
"^DD",2,2.3226,.03,1,1,"DELETE VALUE")
@
"^DD",2,2.3226,.03,1,1,"DT")
3131020
"^DD",2,2.3226,.03,1,1,"FIELD")
COMMUNICATION NUMBER (LONG)
"^DD",2,2.3226,.03,3)
Answer must be 1-30 characters in length.
"^DD",2,2.3226,.03,5,1,0)
2.3226^1^1
"^DD",2,2.3226,.03,21,0)
^^3^3^3131120^
"^DD",2,2.3226,.03,21,1,0)
Phone, fax, email, etc.
"^DD",2,2.3226,.03,21,2,0)
 
"^DD",2,2.3226,.03,21,3,0)
This field is scheduled for deletion in May 2015.
"^DD",2,2.3226,.03,23,0)
^^2^2^3130605^
"^DD",2,2.3226,.03,23,1,0)
This field has been moved to 2.3226/1 Source:
"^DD",2,2.3226,.03,23,2,0)
271 HL7 message, G2O.CTD.5.1
"^DD",2,2.3226,.03,"DT")
3131120
"^DD",2,2.3226,.04,0)
COMMUNICATION QUALIFIER^P365.021^IBE(365.021,^0;4^Q
"^DD",2,2.3226,.04,3)
Select type of communication number.
"^DD",2,2.3226,.04,21,0)
^^1^1^3090724^
"^DD",2,2.3226,.04,21,1,0)
Code describing type of communication number.
"^DD",2,2.3226,.04,23,0)
^^1^1^3090724^
"^DD",2,2.3226,.04,23,1,0)
Source: 271 HL7 message, G2O.CTD.5.9
"^DD",2,2.3226,.04,"DT")
3130306
"^DD",2,2.3226,1,0)
COMMUNICATION NUMBER^FX^^1;1^K:$L(X)>245!($L(X)<1) X
"^DD",2,2.3226,1,1,0)
^.1
"^DD",2,2.3226,1,1,1,0)
^^TRIGGER^2.3226^.03
"^DD",2,2.3226,1,1,1,1)
X ^DD(2.3226,1,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.312,D1,6,D2,6,D3,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y X ^DD(2.3226,1,1,1,1.1) X ^DD(2.3226,1,1,1,1.4)
"^DD",2,2.3226,1,1,1,1.1)
S X=DIV S X=$E($P(^DPT(DA(3),.312,DA(2),6,DA(1),6,DA,1),U),1,30)
"^DD",2,2.3226,1,1,1,1.3)
K DIV S DIV=X,D0=DA(3),DIV(0)=D0,D1=DA(2),DIV(1)=D1,D2=DA(1),DIV(2)=D2,D3=DA,DIV(3)=D3 S Y(0)=X S X=($P(^DPT(DA(3),.312,DA(2),6,DA(1),6,DA,0),U,3)'=$E($P(^DPT(DA(3),.312,DA(2),6,DA(1),6,DA,1),U),1,30))
"^DD",2,2.3226,1,1,1,1.4)
S DIH=$G(^DPT(DIV(0),.312,DIV(1),6,DIV(2),6,DIV(3),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=2.3226,DIG=.03 D ^DICR
"^DD",2,2.3226,1,1,1,2)
X ^DD(2.3226,1,1,1,2.3) I X S X=DIV S Y(1)=$S($D(^DPT(D0,.312,D1,6,D2,6,D3,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(2.3226,1,1,1,2.4)
"^DD",2,2.3226,1,1,1,2.3)
K DIV S DIV=X,D0=DA(3),DIV(0)=D0,D1=DA(2),DIV(1)=D1,D2=DA(1),DIV(2)=D2,D3=DA,DIV(3)=D3 S Y(0)=X S X=($P(^DPT(DA(3),.312,DA(2),6,DA(1),6,DA,1),U)="")
"^DD",2,2.3226,1,1,1,2.4)
S DIH=$G(^DPT(DIV(0),.312,DIV(1),6,DIV(2),6,DIV(3),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=2.3226,DIG=.03 D ^DICR
"^DD",2,2.3226,1,1,1,"%D",0)
^.101^1^1^3131029^^
"^DD",2,2.3226,1,1,1,"%D",1,0)
Triggers field 2.3226/.03 if its value differs from first 30 chars of the value in this field. Deletes field 2.3226/.03 if field 2.3226/1 is deleted.
"^DD",2,2.3226,1,1,1,"CREATE CONDITION")
S X=($P(^DPT(DA(3),.312,DA(2),6,DA(1),6,DA,0),U,3)'=$E($P(^DPT(DA(3),.312,DA(2),6,DA(1),6,DA,1),U),1,30))
"^DD",2,2.3226,1,1,1,"CREATE VALUE")
S X=$E($P(^DPT(DA(3),.312,DA(2),6,DA(1),6,DA,1),U),1,30)
"^DD",2,2.3226,1,1,1,"DELETE CONDITION")
S X=($P(^DPT(DA(3),.312,DA(2),6,DA(1),6,DA,1),U)="")
"^DD",2,2.3226,1,1,1,"DELETE VALUE")
@
"^DD",2,2.3226,1,1,1,"DT")
3131020
"^DD",2,2.3226,1,1,1,"FIELD")
COMMUNICATION NUMBER
"^DD",2,2.3226,1,3)
Answer must be 1-245 characters in length.
"^DD",2,2.3226,1,5,1,0)
2.3226^.03^1
"^DD",2,2.3226,1,21,0)
^^1^1^3130225^
"^DD",2,2.3226,1,21,1,0)
Phone, fax, email, URL
"^DD",2,2.3226,1,23,0)
^^1^1^3130605^
"^DD",2,2.3226,1,23,1,0)
Replaces field .03. Source: 271 HL7 message, G2O.CTD.5.1
"^DD",2,2.3226,1,"DT")
3131120
"^DD",2,2.3227,.03,0)
QUANTITY QUALIFIER^P365.016^IBE(365.016,^0;3^Q
"^DD",2,2.3227,.03,3)
Select benefit quantity qualifier.
"^DD",2,2.3227,.03,21,0)
^^1^1^3090727^
"^DD",2,2.3227,.03,21,1,0)
Benefit quantity qualifier.
"^DD",2,2.3227,.03,23,0)
^^1^1^3090727^
"^DD",2,2.3227,.03,23,1,0)
Source: 271 HL7 message, ZHS.2.1
"^DD",2,2.3227,.03,"DT")
3130502
"^DD",2,2.3227,.05,0)
UNITS OF MEASUREMENT^P365.029^IBE(365.029,^0;5^Q
"^DD",2,2.3227,.05,3)
Select units of measurement.
"^DD",2,2.3227,.05,21,0)
^^1^1^3090727^
"^DD",2,2.3227,.05,21,1,0)
Units of measurement for frequency of the benefits.
"^DD",2,2.3227,.05,23,0)
^^1^1^3090727^
"^DD",2,2.3227,.05,23,1,0)
Source: 271 HL7 message, ZHS.4.1
"^DD",2,2.3227,.05,"DT")
3130307
"^DD",2,2.3227,.07,0)
TIME PERIOD QUALIFIER^P365.015^IBE(365.015,^0;7^Q
"^DD",2,2.3227,.07,3)
Select qualifier for the time period.
"^DD",2,2.3227,.07,21,0)
^^1^1^3090727^
"^DD",2,2.3227,.07,21,1,0)
Code that defines a time period.
"^DD",2,2.3227,.07,23,0)
^^1^1^3090727^
"^DD",2,2.3227,.07,23,1,0)
Source: 271 HL7 message, ZHS.6.1
"^DD",2,2.3227,.07,"DT")
3130502
"^DD",2,2.3227,.08,0)
DELIVERY FREQUENCY^P365.025^IBE(365.025,^0;8^Q
"^DD",2,2.3227,.08,3)
Select code for delivery frequency.
"^DD",2,2.3227,.08,21,0)
^^1^1^3090727^
"^DD",2,2.3227,.08,21,1,0)
Code that defines frequency of deliveries.
"^DD",2,2.3227,.08,23,0)
^^1^1^3090727^
"^DD",2,2.3227,.08,23,1,0)
Source: 271 HL7 message, ZHS.8.1
"^DD",2,2.3227,.08,"DT")
3130307
"^DD",2,2.3227,.09,0)
DELIVERY PATTERN^P365.036^IBE(365.036,^0;9^Q
"^DD",2,2.3227,.09,3)
Select delivery pattern.
"^DD",2,2.3227,.09,21,0)
^^1^1^3090727^
"^DD",2,2.3227,.09,21,1,0)
Code that defines pattern of deliveries.
"^DD",2,2.3227,.09,23,0)
^^1^1^3090727^
"^DD",2,2.3227,.09,23,1,0)
Source: 271 HL7 message, ZHS.9.1
"^DD",2,2.3227,.09,"DT")
3130307
"^DD",2,2.3228,.03,0)
DATE QUALIFIER^P365.026^IBE(365.026,^0;3^Q
"^DD",2,2.3228,.03,3)
Select date qualifier.
"^DD",2,2.3228,.03,21,0)
^^1^1^3090727^
"^DD",2,2.3228,.03,21,1,0)
Code describing the type of date.
"^DD",2,2.3228,.03,23,0)
^^1^1^3090727^
"^DD",2,2.3228,.03,23,1,0)
Source: 271 HL7 message, ZSD.2.1
"^DD",2,2.3228,.03,"DT")
3130306
"^DD",2,2.3228,.04,0)
DATE FORMAT^P365.032^IBE(365.032,^0;4^Q
"^DD",2,2.3228,.04,3)
Select date format.
"^DD",2,2.3228,.04,21,0)
^^1^1^3090727^
"^DD",2,2.3228,.04,21,1,0)
Format of the date representation.
"^DD",2,2.3228,.04,23,0)
^^1^1^3090727^
"^DD",2,2.3228,.04,23,1,0)
Source: 271 HL7 message, ZSD.3.1
"^DD",2,2.3228,.04,"DT")
3130307
"^DD",2,2.3229,.02,0)
PLACE OF SERVICE^P353.1^IBE(353.1,^0;2^Q
"^DD",2,2.3229,.02,3)
Select code for place of service.
"^DD",2,2.3229,.02,21,0)
^^1^1^3090922^
"^DD",2,2.3229,.02,21,1,0)
Place of service code.
"^DD",2,2.3229,.02,23,0)
^^1^1^3090922^
"^DD",2,2.3229,.02,23,1,0)
Source: 271 HL7 message, ZII.3.1 when ZII.2.1 has value of "ZZ"
"^DD",2,2.3229,.02,"DT")
3130306
"^DD",2,2.3229,.04,0)
QUALIFIER^P365.044^IBE(365.044,^0;4^Q
"^DD",2,2.3229,.04,3)
Select additional information qualifier.
"^DD",2,2.3229,.04,21,0)
^^1^1^3090727^
"^DD",2,2.3229,.04,21,1,0)
Additional information qualifier.
"^DD",2,2.3229,.04,23,0)
^^1^1^3090727^
"^DD",2,2.3229,.04,23,1,0)
Source: 271 HL7 message, ZII.2.1
"^DD",2,2.3229,.04,"DT")
3130306
"^DD",2,2.3229,.05,0)
NATURE OF INJURY CODE^P365.045^IBE(365.045,^0;5^Q
"^DD",2,2.3229,.05,3)
Enter the nature of injury code.
"^DD",2,2.3229,.05,21,0)
^^1^1^3130306^
"^DD",2,2.3229,.05,21,1,0)
Code that represents the nature of the patient injury.
"^DD",2,2.3229,.05,23,0)
^^1^1^3130306^
"^DD",2,2.3229,.05,23,1,0)
Source: 271 HL7 message, ZII.4 when ZII.2.1 has value of "GR" or "NI".
"^DD",2,2.3229,.05,"DT")
3130306
"^DD",2,2.3229,.06,0)
NATURE OF INJURY CATEGORY^F^^0;6^K:$L(X)>30!($L(X)<1) X
"^DD",2,2.3229,.06,3)
Answer must be 1-30 characters in length.
"^DD",2,2.3229,.06,21,0)
^^1^1^3130306^
"^DD",2,2.3229,.06,21,1,0)
Specifies the situation or category to which the code applies.
"^DD",2,2.3229,.06,23,0)
^^1^1^3130306^
"^DD",2,2.3229,.06,23,1,0)
Source: 271 HL7 message, ZII.5
"^DD",2,2.3229,.06,"DT")
3130306
"^DD",2,2.3229,.07,0)
NATURE OF INJURY TEXT^F^^0;7^K:$L(X)>80!($L(X)<1) X
"^DD",2,2.3229,.07,3)
Answer must be 1-80 characters in length.
"^DD",2,2.3229,.07,21,0)
^^1^1^3130306^
"^DD",2,2.3229,.07,21,1,0)
Describes the injured body part or parts.
"^DD",2,2.3229,.07,23,0)
^^1^1^3130306^
"^DD",2,2.3229,.07,23,1,0)
Source: 271 HL7 message, ZII.6
"^DD",2,2.3229,.07,"DT")
3130306
"^DD",2,2.32291,.03,0)
REFERENCE ID QUALIFIER^P365.028^IBE(365.028,^0;3^Q
"^DD",2,2.32291,.03,3)
Select reference id qualifier.
"^DD",2,2.32291,.03,21,0)
^^1^1^3090910^
"^DD",2,2.32291,.03,21,1,0)
Code describing the type of reference id.
"^DD",2,2.32291,.03,23,0)
^^1^1^3090910^
"^DD",2,2.32291,.03,23,1,0)
Source: 271 HL7 message, ZRF.2.1.
"^DD",2,2.32291,.03,"DT")
3130306
"^DD",2,2.32292,0)
SERVICE TYPES SUB-FIELD^^.01^1
"^DD",2,2.32292,0,"NM","SERVICE TYPES")

"^DD",2,2.32292,.01,0)
SERVICE TYPES^P365.013^IBE(365.013,^0;1^Q
"^DD",2,2.32292,.01,1,0)
^.1
"^DD",2,2.32292,.01,1,1,0)
2.32292^B
"^DD",2,2.32292,.01,1,1,1)
S ^DPT(DA(3),.312,DA(2),6,DA(1),11,"B",$E(X,1,30),DA)=""
"^DD",2,2.32292,.01,1,1,2)
K ^DPT(DA(3),.312,DA(2),6,DA(1),11,"B",$E(X,1,30),DA)
"^DD",2,2.32292,.01,3)
Select a service type code returned from eligibility inquiry.
"^DD",2,2.32292,.01,21,0)
^^1^1^3101130^
"^DD",2,2.32292,.01,21,1,0)
This is a service type code returned from an eligibility inquiry.
"^DD",2,2.32292,.01,"DT")
3130307
"^DD",2,2.332,0)
GROUP PROVIDER INFO SUB-FIELD^^.03^3
"^DD",2,2.332,0,"DT")
3130522
"^DD",2,2.332,0,"IX","B",2.332,.01)

"^DD",2,2.332,0,"NM","GROUP PROVIDER INFO")

"^DD",2,2.332,0,"UP")
2.312
"^DD",2,2.332,.01,0)
SEQUENCE^MRNJ5,0^^0;1^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."1.N) X
"^DD",2,2.332,.01,1,0)
^.1
"^DD",2,2.332,.01,1,1,0)
2.332^B
"^DD",2,2.332,.01,1,1,1)
S ^DPT(DA(2),.312,DA(1),10,"B",$E(X,1,30),DA)=""
"^DD",2,2.332,.01,1,1,2)
K ^DPT(DA(2),.312,DA(1),10,"B",$E(X,1,30),DA)
"^DD",2,2.332,.01,3)
Type a number between 1 and 99999, 0 decimal digits.
"^DD",2,2.332,.01,21,0)
^^2^2^3130610^
"^DD",2,2.332,.01,21,1,0)
This field contains a sequential number generated at the time a record is
"^DD",2,2.332,.01,21,2,0)
stored in the subfile.  
"^DD",2,2.332,.01,23,0)
^^1^1^3130522^
"^DD",2,2.332,.01,23,1,0)
Sequential number 1..N, assigned automatically.
"^DD",2,2.332,.01,"DT")
3130610
"^DD",2,2.332,.02,0)
PROVIDER CODE^P365.024^IBE(365.024,^0;2^Q
"^DD",2,2.332,.02,3)
Select the group provider code.
"^DD",2,2.332,.02,21,0)
^^1^1^3130522^
"^DD",2,2.332,.02,21,1,0)
Code that identifies the type of provider (e.g., "AD" for Admitting).
"^DD",2,2.332,.02,23,0)
^^2^2^3130522^
"^DD",2,2.332,.02,23,1,0)
Source:  X12 271 LOOPS 2100B, 2100C, 2100D. PRV01 PROVIDER CODE HL7
"^DD",2,2.332,.02,23,2,0)
message, ROL.3.1
"^DD",2,2.332,.02,"DT")
3130522
"^DD",2,2.332,.03,0)
PROV REFERENCE ID^F^^0;3^K:$L(X)>50!($L(X)<1) X
"^DD",2,2.332,.03,3)
Answer must be 1-50 characters in length.
"^DD",2,2.332,.03,21,0)
^^1^1^3130522^
"^DD",2,2.332,.03,21,1,0)
Provider specialty type identifier.
"^DD",2,2.332,.03,23,0)
^^2^2^3130522^
"^DD",2,2.332,.03,23,1,0)
Source: X12 271 LOOPS 2100B, 2100C, 2100D. PRV03 PROVIDER CODE
"^DD",2,2.332,.03,23,2,0)
HL7 message ROL.4.1
"^DD",2,2.332,.03,"DT")
3130522
"^DD",350.9,350.9,60.02,0)
DEFAULT SERVICE TYPE CODE 2^P365.013'^IBE(365.013,^60;2^Q
"^DD",350.9,350.9,60.02,3)
Enter a default service type code.
"^DD",350.9,350.9,60.02,21,0)
^.001^1^1^3100913^^
"^DD",350.9,350.9,60.02,21,1,0)
Second Default Service Type Code sent with eIV Eligibility Inquiry.
"^DD",350.9,350.9,60.02,"DT")
3130306
"^DD",350.9,350.9,60.03,0)
DEFAULT SERVICE TYPE CODE 3^P365.013'^IBE(365.013,^60;3^Q
"^DD",350.9,350.9,60.03,3)
Enter a default service type code.
"^DD",350.9,350.9,60.03,21,0)
^.001^1^1^3100913^^
"^DD",350.9,350.9,60.03,21,1,0)
Third Default Service Type Code sent with eIV Eligibility Inquiry.
"^DD",350.9,350.9,60.03,"DT")
3130306
"^DD",350.9,350.9,60.04,0)
DEFAULT SERVICE TYPE CODE 4^P365.013'^IBE(365.013,^60;4^Q
"^DD",350.9,350.9,60.04,3)
Enter a default service type code.
"^DD",350.9,350.9,60.04,21,0)
^.001^1^1^3100913^^^
"^DD",350.9,350.9,60.04,21,1,0)
Fourth Default Service Type Code sent with eIV Eligibility Inquiry.
"^DD",350.9,350.9,60.04,"DT")
3130306
"^DD",350.9,350.9,60.05,0)
DEFAULT SERVICE TYPE CODE 5^P365.013'^IBE(365.013,^60;5^Q
"^DD",350.9,350.9,60.05,3)
Enter a default service type code.
"^DD",350.9,350.9,60.05,21,0)
^.001^1^1^3100913^^^
"^DD",350.9,350.9,60.05,21,1,0)
Fifth Default Service Type Code sent with eIV Eligibility Inquiry.
"^DD",350.9,350.9,60.05,"DT")
3130306
"^DD",350.9,350.9,60.06,0)
DEFAULT SERVICE TYPE CODE 6^P365.013'^IBE(365.013,^60;6^Q
"^DD",350.9,350.9,60.06,3)
Enter a default service type code.
"^DD",350.9,350.9,60.06,21,0)
^.001^1^1^3100913^^
"^DD",350.9,350.9,60.06,21,1,0)
Sixth Default Service Type Code sent with eIV Eligibility Inquiry.
"^DD",350.9,350.9,60.06,"DT")
3130306
"^DD",350.9,350.9,60.07,0)
DEFAULT SERVICE TYPE CODE 7^P365.013'^IBE(365.013,^60;7^Q
"^DD",350.9,350.9,60.07,3)
Enter a default service type code.
"^DD",350.9,350.9,60.07,21,0)
^.001^1^1^3100913^^
"^DD",350.9,350.9,60.07,21,1,0)
Seventh Default Service Type Code sent with eIV Eligibility Inquiry.
"^DD",350.9,350.9,60.07,"DT")
3130306
"^DD",350.9,350.9,60.08,0)
DEFAULT SERVICE TYPE CODE 8^P365.013'^IBE(365.013,^60;8^Q
"^DD",350.9,350.9,60.08,3)
Enter a default service type code.
"^DD",350.9,350.9,60.08,21,0)
^.001^1^1^3100913^^
"^DD",350.9,350.9,60.08,21,1,0)
Eighth Default Service Type Code sent with eIV Eligibility Inquiry.
"^DD",350.9,350.9,60.08,"DT")
3130306
"^DD",350.9,350.9,60.09,0)
DEFAULT SERVICE TYPE CODE 9^P365.013'^IBE(365.013,^60;9^Q
"^DD",350.9,350.9,60.09,3)
Enter a default service type code.
"^DD",350.9,350.9,60.09,21,0)
^.001^1^1^3100913^^^
"^DD",350.9,350.9,60.09,21,1,0)
Ninth Default Service Type Code sent with eIV Eligibility Inquiry.
"^DD",350.9,350.9,60.09,"DT")
3130306
"^DD",350.9,350.9,60.1,0)
DEFAULT SERVICE TYPE CODE 10^P365.013'^IBE(365.013,^60;10^Q
"^DD",350.9,350.9,60.1,3)
Enter a default service type code.
"^DD",350.9,350.9,60.1,21,0)
^.001^1^1^3100913^^^
"^DD",350.9,350.9,60.1,21,1,0)
Tenth Default Service Type Code sent with eIV Eligibility Inquiry.
"^DD",350.9,350.9,60.1,"DT")
3130306
"^DD",350.9,350.9,60.11,0)
DEFAULT SERVICE TYPE CODE 11^P365.013'^IBE(365.013,^60;11^Q
"^DD",350.9,350.9,60.11,3)
Enter a default service type code.
"^DD",350.9,350.9,60.11,21,0)
^.001^1^1^3100913^^
"^DD",350.9,350.9,60.11,21,1,0)
Eleventh Default Service Type Code sent with eIV Eligibility Inquiry.
"^DD",350.9,350.9,60.11,"DT")
3130306
"^DD",350.9,350.9,62.01,0)
LIMIT LENGTH OF EIV FIELDS?^S^0:NO;1:YES;^62;1^Q
"^DD",350.9,350.9,62.01,3)
Set to YES, if length of values in eIV fields should be limited.
"^DD",350.9,350.9,62.01,21,0)
^^2^2^3130512^
"^DD",350.9,350.9,62.01,21,1,0)
If set to YES, eIV field values will be limited to pre-patch IB*2.0*497 
"^DD",350.9,350.9,62.01,21,2,0)
lengths via corresponding input transforms.
"^DD",350.9,350.9,62.01,"DT")
3130512
"^DD",355.3,355.3,.03,0)
*GROUP NAME^F^^0;3^K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>20!($L(X)<2) X
"^DD",355.3,355.3,.03,1,0)
^.1
"^DD",355.3,355.3,.03,1,1,0)
355.3^D
"^DD",355.3,355.3,.03,1,1,1)
S ^IBA(355.3,"D",$E(X,1,30),DA)=""
"^DD",355.3,355.3,.03,1,1,2)
K ^IBA(355.3,"D",$E(X,1,30),DA)
"^DD",355.3,355.3,.03,1,1,"DT")
2930525
"^DD",355.3,355.3,.03,1,2,0)
355.3^AGNA^MUMPS
"^DD",355.3,355.3,.03,1,2,1)
S:+^IBA(355.3,DA,0) ^IBA(355.3,"AGNA",+^(0),X,DA)=""
"^DD",355.3,355.3,.03,1,2,2)
K ^IBA(355.3,"AGNA",+^IBA(355.3,DA,0),X,DA)
"^DD",355.3,355.3,.03,1,2,"%D",0)
^^2^2^2930527^
"^DD",355.3,355.3,.03,1,2,"%D",1,0)
Cross reference of insurance companies and group names.
"^DD",355.3,355.3,.03,1,2,"%D",2,0)
|
"^DD",355.3,355.3,.03,1,2,"DT")
2930527
"^DD",355.3,355.3,.03,1,3,0)
355.3^ACCP^MUMPS
"^DD",355.3,355.3,.03,1,3,1)
N Y S Y=$$COMP^IBCNSJ(X) I $L(Y) S ^IBA(355.3,"ACCP",+^IBA(355.3,DA,0),Y,DA)=""
"^DD",355.3,355.3,.03,1,3,2)
N Y S Y=$$COMP^IBCNSJ(X) I $L(Y) K ^IBA(355.3,"ACCP",+^IBA(355.3,DA,0),Y,DA)
"^DD",355.3,355.3,.03,1,3,"%D",0)
^^2^2^2941213^^^^
"^DD",355.3,355.3,.03,1,3,"%D",1,0)
Compresses entries by eliminating punctuation marks and leading zeroes, and
"^DD",355.3,355.3,.03,1,3,"%D",2,0)
converting lowercase to uppercase.
"^DD",355.3,355.3,.03,1,3,"DT")
2941213
"^DD",355.3,355.3,.03,1,4,0)
^^TRIGGER^355.3^2.01
"^DD",355.3,355.3,.03,1,4,1)
X ^DD(355.3,.03,1,4,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.3,D0,2)):^(2),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y S X=DIV S X=$P(^IBA(355.3,DA,0),U,3) X ^DD(355.3,.03,1,4,1.4)
"^DD",355.3,355.3,.03,1,4,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBA(355.3,DA,0),U,3)'=$E($P($G(^IBA(355.3,DA,2)),U),1,20))
"^DD",355.3,355.3,.03,1,4,1.4)
S DIH=$G(^IBA(355.3,DIV(0),2)),DIV=X S $P(^(2),U,1)=DIV,DIH=355.3,DIG=2.01 D ^DICR
"^DD",355.3,355.3,.03,1,4,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBA(355.3,DA,0),U,3)="") I X S X=DIV S Y(1)=$S($D(^IBA(355.3,D0,2)):^(2),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y S X="" X ^DD(355.3,.03,1,4,2.4)
"^DD",355.3,355.3,.03,1,4,2.4)
S DIH=$G(^IBA(355.3,DIV(0),2)),DIV=X S $P(^(2),U,1)=DIV,DIH=355.3,DIG=2.01 D ^DICR
"^DD",355.3,355.3,.03,1,4,"%D",0)
^.101^1^1^3131029^^
"^DD",355.3,355.3,.03,1,4,"%D",1,0)
Triggers field 2.01 if first 20 chars of its value differ from the value in this field. Deletes field 2.01 if field .03 is deleted.
"^DD",355.3,355.3,.03,1,4,"CREATE CONDITION")
S X=($P(^IBA(355.3,DA,0),U,3)'=$E($P($G(^IBA(355.3,DA,2)),U),1,20))
"^DD",355.3,355.3,.03,1,4,"CREATE VALUE")
S X=$P(^IBA(355.3,DA,0),U,3)
"^DD",355.3,355.3,.03,1,4,"DELETE CONDITION")
S X=($P(^IBA(355.3,DA,0),U,3)="")
"^DD",355.3,355.3,.03,1,4,"DELETE VALUE")
@
"^DD",355.3,355.3,.03,1,4,"DT")
3131020
"^DD",355.3,355.3,.03,1,4,"FIELD")
GROUP NAME
"^DD",355.3,355.3,.03,3)
Answer must be 2-20 characters in length.
"^DD",355.3,355.3,.03,5,1,0)
355.3^2.01^1
"^DD",355.3,355.3,.03,21,0)
^^8^8^3131120^
"^DD",355.3,355.3,.03,21,1,0)
If this is a group policy, enter the name of the group that this policy
"^DD",355.3,355.3,.03,21,2,0)
is associated with.  This is the name that the insurance
"^DD",355.3,355.3,.03,21,3,0)
company uses to identify the plan.  This will appear 
"^DD",355.3,355.3,.03,21,4,0)
on the health claims forms in the appropriate blocks.  It will also be
"^DD",355.3,355.3,.03,21,5,0)
used to help identify this policy so that other patients with the same
"^DD",355.3,355.3,.03,21,6,0)
plan can be associated with it.
"^DD",355.3,355.3,.03,21,7,0)
 
"^DD",355.3,355.3,.03,21,8,0)
This field is scheduled for deletion in May 2015.
"^DD",355.3,355.3,.03,"DT")
3131120
"^DD",355.3,355.3,.04,0)
*GROUP NUMBER^FX^^0;4^I $D(X) K:$L(X)>17!($L(X)<2) X
"^DD",355.3,355.3,.04,1,0)
^.1
"^DD",355.3,355.3,.04,1,1,0)
355.3^E
"^DD",355.3,355.3,.04,1,1,1)
S ^IBA(355.3,"E",$E(X,1,30),DA)=""
"^DD",355.3,355.3,.04,1,1,2)
K ^IBA(355.3,"E",$E(X,1,30),DA)
"^DD",355.3,355.3,.04,1,1,"DT")
2930525
"^DD",355.3,355.3,.04,1,2,0)
355.3^AGNU^MUMPS
"^DD",355.3,355.3,.04,1,2,1)
S:+^IBA(355.3,DA,0) ^IBA(355.3,"AGNU",+^(0),X,DA)=""
"^DD",355.3,355.3,.04,1,2,2)
K ^IBA(355.3,"AGNU",+^IBA(355.3,DA,0),X,DA)
"^DD",355.3,355.3,.04,1,2,"%D",0)
^^1^1^2930527^
"^DD",355.3,355.3,.04,1,2,"%D",1,0)
Cross reference of insurance companies and group names.
"^DD",355.3,355.3,.04,1,2,"DT")
2930527
"^DD",355.3,355.3,.04,1,3,0)
355.3^ACCP1^MUMPS
"^DD",355.3,355.3,.04,1,3,1)
N Y S Y=$$COMP^IBCNSJ(X) I $L(Y) S ^IBA(355.3,"ACCP",+^IBA(355.3,DA,0),Y,DA)=""
"^DD",355.3,355.3,.04,1,3,2)
N Y S Y=$$COMP^IBCNSJ(X) I $L(Y) K ^IBA(355.3,"ACCP",+^IBA(355.3,DA,0),Y,DA)
"^DD",355.3,355.3,.04,1,3,"%D",0)
^^2^2^2941213^^
"^DD",355.3,355.3,.04,1,3,"%D",1,0)
Compresses entries by eliminating punctuation marks and leading zeroes, and
"^DD",355.3,355.3,.04,1,3,"%D",2,0)
converting lowercase to uppercase.
"^DD",355.3,355.3,.04,1,3,"DT")
2941213
"^DD",355.3,355.3,.04,1,4,0)
355.3^AENR04^MUMPS
"^DD",355.3,355.3,.04,1,4,1)
D EVENT^IVMPLOG($P($G(^IBA(355.3,DA,0)),U,10))
"^DD",355.3,355.3,.04,1,4,2)
D EVENT^IVMPLOG($P($G(^IBA(355.3,DA,0)),U,10))
"^DD",355.3,355.3,.04,1,4,3)
 DO NOT DELETE
"^DD",355.3,355.3,.04,1,4,"%D",0)
^.101^2^2^3070925^^^^
"^DD",355.3,355.3,.04,1,4,"%D",1,0)
This cross-reference is used to notify HEC of changes that may affect
"^DD",355.3,355.3,.04,1,4,"%D",2,0)
enrollment.
"^DD",355.3,355.3,.04,1,4,"DT")
3070925
"^DD",355.3,355.3,.04,1,5,0)
^^TRIGGER^355.3^2.02
"^DD",355.3,355.3,.04,1,5,1)
X ^DD(355.3,.04,1,5,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.3,D0,2)):^(2),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X=$P(^IBA(355.3,DA,0),U,4) X ^DD(355.3,.04,1,5,1.4)
"^DD",355.3,355.3,.04,1,5,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBA(355.3,DA,0),U,4)'=$E($P($G(^IBA(355.3,DA,2)),U,2),1,17))
"^DD",355.3,355.3,.04,1,5,1.4)
S DIH=$G(^IBA(355.3,DIV(0),2)),DIV=X S $P(^(2),U,2)=DIV,DIH=355.3,DIG=2.02 D ^DICR
"^DD",355.3,355.3,.04,1,5,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBA(355.3,DA,0),U,4)="") I X S X=DIV S Y(1)=$S($D(^IBA(355.3,D0,2)):^(2),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X="" X ^DD(355.3,.04,1,5,2.4)
"^DD",355.3,355.3,.04,1,5,2.4)
S DIH=$G(^IBA(355.3,DIV(0),2)),DIV=X S $P(^(2),U,2)=DIV,DIH=355.3,DIG=2.02 D ^DICR
"^DD",355.3,355.3,.04,1,5,"%D",0)
^.101^1^1^3131029^^
"^DD",355.3,355.3,.04,1,5,"%D",1,0)
Triggers field 2.02 if first 17 chars of its value differ from the value in this field. Deletes field 2.02 if field .04 is deleted.
"^DD",355.3,355.3,.04,1,5,"CREATE CONDITION")
S X=($P(^IBA(355.3,DA,0),U,4)'=$E($P($G(^IBA(355.3,DA,2)),U,2),1,17))
"^DD",355.3,355.3,.04,1,5,"CREATE VALUE")
S X=$P(^IBA(355.3,DA,0),U,4)
"^DD",355.3,355.3,.04,1,5,"DELETE CONDITION")
S X=($P(^IBA(355.3,DA,0),U,4)="")
"^DD",355.3,355.3,.04,1,5,"DELETE VALUE")
@
"^DD",355.3,355.3,.04,1,5,"DT")
3131020
"^DD",355.3,355.3,.04,1,5,"FIELD")
GROUP NUMBER
"^DD",355.3,355.3,.04,3)
Answer must be 2-17 characters in length.
"^DD",355.3,355.3,.04,5,1,0)
355.3^2.02^1
"^DD",355.3,355.3,.04,21,0)
^^5^5^3131120^
"^DD",355.3,355.3,.04,21,1,0)
If this is a group policy enter the number which identifies this policy,
"^DD",355.3,355.3,.04,21,2,0)
i.e. group number/code that the insurance company uses to identify this
"^DD",355.3,355.3,.04,21,3,0)
plan.
"^DD",355.3,355.3,.04,21,4,0)
 
"^DD",355.3,355.3,.04,21,5,0)
This field is scheduled for deletion in May 2015.
"^DD",355.3,355.3,.04,"DT")
3131120
"^DD",355.3,355.3,2.01,0)
GROUP NAME^FX^^2;1^K:$L(X)>80!($L(X)<2)!'$$LENCHK^IBCNEUT1(X,20,0) X
"^DD",355.3,355.3,2.01,1,0)
^.1
"^DD",355.3,355.3,2.01,1,1,0)
^^TRIGGER^355.3^.03
"^DD",355.3,355.3,2.01,1,1,1)
X ^DD(355.3,2.01,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.3,D0,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X=DIV S X=$E($P(^IBA(355.3,DA,2),U),1,20) X ^DD(355.3,2.01,1,1,1.4)
"^DD",355.3,355.3,2.01,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBA(355.3,DA,0),U,3)'=$E($P(^IBA(355.3,DA,2),U),1,20))
"^DD",355.3,355.3,2.01,1,1,1.4)
S DIH=$G(^IBA(355.3,DIV(0),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=355.3,DIG=.03 D ^DICR
"^DD",355.3,355.3,2.01,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBA(355.3,DA,2),U)="") I X S X=DIV S Y(1)=$S($D(^IBA(355.3,D0,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(355.3,2.01,1,1,2.4)
"^DD",355.3,355.3,2.01,1,1,2.4)
S DIH=$G(^IBA(355.3,DIV(0),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=355.3,DIG=.03 D ^DICR
"^DD",355.3,355.3,2.01,1,1,"%D",0)
^.101^1^1^3131029^^
"^DD",355.3,355.3,2.01,1,1,"%D",1,0)
Triggers field .03 if its value differs from first 20 chars of the value in this field. Deletes field .03 if field 2.01 is deleted.
"^DD",355.3,355.3,2.01,1,1,"CREATE CONDITION")
S X=($P(^IBA(355.3,DA,0),U,3)'=$E($P(^IBA(355.3,DA,2),U),1,20))
"^DD",355.3,355.3,2.01,1,1,"CREATE VALUE")
S X=$E($P(^IBA(355.3,DA,2),U),1,20)
"^DD",355.3,355.3,2.01,1,1,"DELETE CONDITION")
S X=($P(^IBA(355.3,DA,2),U)="")
"^DD",355.3,355.3,2.01,1,1,"DELETE VALUE")
@
"^DD",355.3,355.3,2.01,1,1,"DT")
3131020
"^DD",355.3,355.3,2.01,1,1,"FIELD")
*GROUP NAME
"^DD",355.3,355.3,2.01,3)
Answer must be 2-20 characters in length.
"^DD",355.3,355.3,2.01,5,1,0)
355.3^.03^4
"^DD",355.3,355.3,2.01,21,0)
^^5^5^3130421^
"^DD",355.3,355.3,2.01,21,1,0)
If this is a group policy, enter the name of the group that this policy 
"^DD",355.3,355.3,2.01,21,2,0)
is associated with. This is the name that the insurance company uses to 
"^DD",355.3,355.3,2.01,21,3,0)
identify the plan. This will appear on the health claims forms in the 
"^DD",355.3,355.3,2.01,21,4,0)
appropriate blocks. It will also be used to help identify this policy so 
"^DD",355.3,355.3,2.01,21,5,0)
that other patients with the same plan can be associated with it.
"^DD",355.3,355.3,2.01,23,0)
^^2^2^3130605^
"^DD",355.3,355.3,2.01,23,1,0)
Replaces field .03. Length of this field is temporarily limited to 20 
"^DD",355.3,355.3,2.01,23,2,0)
characters.
"^DD",355.3,355.3,2.01,"DT")
3131120
"^DD",355.3,355.3,2.02,0)
GROUP NUMBER^FX^^2;2^K:$L(X)>55!($L(X)<2)!'$$LENCHK^IBCNEUT1(X,17,0) X
"^DD",355.3,355.3,2.02,1,0)
^.1
"^DD",355.3,355.3,2.02,1,1,0)
^^TRIGGER^355.3^.04
"^DD",355.3,355.3,2.02,1,1,1)
X ^DD(355.3,2.02,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.3,D0,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X=DIV S X=$E($P(^IBA(355.3,DA,2),U,2),1,17) X ^DD(355.3,2.02,1,1,1.4)
"^DD",355.3,355.3,2.02,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBA(355.3,DA,0),U,4)'=$E($P(^IBA(355.3,DA,2),U,2),1,17))
"^DD",355.3,355.3,2.02,1,1,1.4)
S DIH=$G(^IBA(355.3,DIV(0),0)),DIV=X S $P(^(0),U,4)=DIV,DIH=355.3,DIG=.04 D ^DICR
"^DD",355.3,355.3,2.02,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBA(355.3,DA,2),U,2)="") I X S X=DIV S Y(1)=$S($D(^IBA(355.3,D0,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X="" X ^DD(355.3,2.02,1,1,2.4)
"^DD",355.3,355.3,2.02,1,1,2.4)
S DIH=$G(^IBA(355.3,DIV(0),0)),DIV=X S $P(^(0),U,4)=DIV,DIH=355.3,DIG=.04 D ^DICR
"^DD",355.3,355.3,2.02,1,1,"%D",0)
^.101^1^1^3131029^^
"^DD",355.3,355.3,2.02,1,1,"%D",1,0)
Triggers field .04 if its value differs from first 17 chars of the value in this field. Deletes field .04 if field 2.02 is deleted.
"^DD",355.3,355.3,2.02,1,1,"CREATE CONDITION")
S X=($P(^IBA(355.3,DA,0),U,4)'=$E($P(^IBA(355.3,DA,2),U,2),1,17))
"^DD",355.3,355.3,2.02,1,1,"CREATE VALUE")
S X=$E($P(^IBA(355.3,DA,2),U,2),1,17)
"^DD",355.3,355.3,2.02,1,1,"DELETE CONDITION")
S X=($P(^IBA(355.3,DA,2),U,2)="")
"^DD",355.3,355.3,2.02,1,1,"DELETE VALUE")
@
"^DD",355.3,355.3,2.02,1,1,"DT")
3131020
"^DD",355.3,355.3,2.02,1,1,"FIELD")
*GROUP NUMBER
"^DD",355.3,355.3,2.02,3)
Answer must be 2-17 characters in length.
"^DD",355.3,355.3,2.02,5,1,0)
355.3^.04^5
"^DD",355.3,355.3,2.02,21,0)
^^3^3^3130421^
"^DD",355.3,355.3,2.02,21,1,0)
If this is a group policy enter the number which identifies this policy, 
"^DD",355.3,355.3,2.02,21,2,0)
i.e. group number/code that the insurance company uses to identify this 
"^DD",355.3,355.3,2.02,21,3,0)
plan.
"^DD",355.3,355.3,2.02,23,0)
^^2^2^3130605^
"^DD",355.3,355.3,2.02,23,1,0)
Replaces field .04. Length of this field is temporarily limited to 17 
"^DD",355.3,355.3,2.02,23,2,0)
characters.
"^DD",355.3,355.3,2.02,"DT")
3131120
"^DD",355.33,355.33,.18,0)
SERVICE DATE^D^^0;18^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",355.33,355.33,.18,3)
Enter the service date to be included in eIV inquiry.
"^DD",355.33,355.33,.18,21,0)
^^1^1^3130507^
"^DD",355.33,355.33,.18,21,1,0)
Service date to be included in eIV inquiry.
"^DD",355.33,355.33,.18,"DT")
3130507
"^DD",355.33,355.33,40.02,0)
*GROUP NAME^F^^40;2^K:$L(X)>20!($L(X)<2) X
"^DD",355.33,355.33,40.02,1,0)
^.1^^-1
"^DD",355.33,355.33,40.02,1,2,0)
^^TRIGGER^355.33^90.01
"^DD",355.33,355.33,40.02,1,2,1)
X ^DD(355.33,40.02,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.33,D0,90)):^(90),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y S X=DIV S X=$P(^IBA(355.33,DA,40),U,2) X ^DD(355.33,40.02,1,2,1.4)
"^DD",355.33,355.33,40.02,1,2,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBA(355.33,DA,40),U,2)'=$E($P($G(^IBA(355.33,DA,90)),U),1,20))
"^DD",355.33,355.33,40.02,1,2,1.4)
S DIH=$G(^IBA(355.33,DIV(0),90)),DIV=X S $P(^(90),U,1)=DIV,DIH=355.33,DIG=90.01 D ^DICR
"^DD",355.33,355.33,40.02,1,2,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBA(355.33,DA,40),U,2)="") I X S X=DIV S Y(1)=$S($D(^IBA(355.33,D0,90)):^(90),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y S X="" X ^DD(355.33,40.02,1,2,2.4)
"^DD",355.33,355.33,40.02,1,2,2.4)
S DIH=$G(^IBA(355.33,DIV(0),90)),DIV=X S $P(^(90),U,1)=DIV,DIH=355.33,DIG=90.01 D ^DICR
"^DD",355.33,355.33,40.02,1,2,"%D",0)
^.101^1^1^3131029^^
"^DD",355.33,355.33,40.02,1,2,"%D",1,0)
Triggers field 90.01 if first 20 chars of its value differ from the value in this field. Deletes field 90.01 if field 40.02 is deleted.
"^DD",355.33,355.33,40.02,1,2,"CREATE CONDITION")
S X=($P(^IBA(355.33,DA,40),U,2)'=$E($P($G(^IBA(355.33,DA,90)),U),1,20))
"^DD",355.33,355.33,40.02,1,2,"CREATE VALUE")
S X=$P(^IBA(355.33,DA,40),U,2)
"^DD",355.33,355.33,40.02,1,2,"DELETE CONDITION")
S X=($P(^IBA(355.33,DA,40),U,2)="")
"^DD",355.33,355.33,40.02,1,2,"DELETE VALUE")
@
"^DD",355.33,355.33,40.02,1,2,"DT")
3131021
"^DD",355.33,355.33,40.02,1,2,"FIELD")
GROUP NAME
"^DD",355.33,355.33,40.02,3)
Enter the name of the group this policy is associated with.  Answer must be 2-20 characters in length.
"^DD",355.33,355.33,40.02,5,1,0)
355.33^90.01^1
"^DD",355.33,355.33,40.02,21,0)
^^3^3^3131120^
"^DD",355.33,355.33,40.02,21,1,0)
This is the name that the insurance company uses to identify this plan.
"^DD",355.33,355.33,40.02,21,2,0)
 
"^DD",355.33,355.33,40.02,21,3,0)
This field is scheduled for deletion in May 2015.
"^DD",355.33,355.33,40.02,"DT")
3131203
"^DD",355.33,355.33,40.03,0)
*GROUP NUMBER^F^^40;3^K:$L(X)>17!($L(X)<2) X
"^DD",355.33,355.33,40.03,1,0)
^.1^^-1
"^DD",355.33,355.33,40.03,1,2,0)
^^TRIGGER^355.33^90.02
"^DD",355.33,355.33,40.03,1,2,1)
X ^DD(355.33,40.03,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.33,D0,90)):^(90),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X=$P(^IBA(355.33,DA,40),U,3) X ^DD(355.33,40.03,1,2,1.4)
"^DD",355.33,355.33,40.03,1,2,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBA(355.33,DA,40),U,3)'=$E($P($G(^IBA(355.33,DA,90)),U,2),1,17))
"^DD",355.33,355.33,40.03,1,2,1.4)
S DIH=$G(^IBA(355.33,DIV(0),90)),DIV=X S $P(^(90),U,2)=DIV,DIH=355.33,DIG=90.02 D ^DICR
"^DD",355.33,355.33,40.03,1,2,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBA(355.33,DA,40),U,3)="") I X S X=DIV S Y(1)=$S($D(^IBA(355.33,D0,90)):^(90),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X="" X ^DD(355.33,40.03,1,2,2.4)
"^DD",355.33,355.33,40.03,1,2,2.4)
S DIH=$G(^IBA(355.33,DIV(0),90)),DIV=X S $P(^(90),U,2)=DIV,DIH=355.33,DIG=90.02 D ^DICR
"^DD",355.33,355.33,40.03,1,2,"%D",0)
^.101^1^1^3131029^^
"^DD",355.33,355.33,40.03,1,2,"%D",1,0)
Triggers field 90.02 if first 17 chars of its value differ from the value in this field. Deletes field 90.02 if field 40.03 is deleted.
"^DD",355.33,355.33,40.03,1,2,"CREATE CONDITION")
S X=($P(^IBA(355.33,DA,40),U,3)'=$E($P($G(^IBA(355.33,DA,90)),U,2),1,17))
"^DD",355.33,355.33,40.03,1,2,"CREATE VALUE")
S X=$P(^IBA(355.33,DA,40),U,3)
"^DD",355.33,355.33,40.03,1,2,"DELETE CONDITION")
S X=($P(^IBA(355.33,DA,40),U,3)="")
"^DD",355.33,355.33,40.03,1,2,"DELETE VALUE")
@
"^DD",355.33,355.33,40.03,1,2,"DT")
3131021
"^DD",355.33,355.33,40.03,1,2,"FIELD")
GROUP NUMBER
"^DD",355.33,355.33,40.03,3)
Enter the number that identifies this group/plan.  Answer must be 2-17 characters in length.
"^DD",355.33,355.33,40.03,5,1,0)
355.33^90.02^1
"^DD",355.33,355.33,40.03,21,0)
^^4^4^3131120^
"^DD",355.33,355.33,40.03,21,1,0)
This is the number or code which the insurance company uses to identify
"^DD",355.33,355.33,40.03,21,2,0)
this plan.
"^DD",355.33,355.33,40.03,21,3,0)
 
"^DD",355.33,355.33,40.03,21,4,0)
This field is scheduled for deletion in May 2015.
"^DD",355.33,355.33,40.03,"DT")
3131203
"^DD",355.33,355.33,60.04,0)
*SUBSCRIBER ID^FX^^60;4^K:$L(X)>20!($L(X)<3) X
"^DD",355.33,355.33,60.04,.1)
SUBSCRIBER PRIMARY ID
"^DD",355.33,355.33,60.04,1,0)
^.1^^-1
"^DD",355.33,355.33,60.04,1,2,0)
^^TRIGGER^355.33^90.03
"^DD",355.33,355.33,60.04,1,2,1)
X ^DD(355.33,60.04,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.33,D0,90)):^(90),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X=DIV S X=$P(^IBA(355.33,DA,60),U,4) X ^DD(355.33,60.04,1,2,1.4)
"^DD",355.33,355.33,60.04,1,2,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBA(355.33,DA,60),U,4)'=$E($P($G(^IBA(355.33,DA,90)),U,3),1,20))
"^DD",355.33,355.33,60.04,1,2,1.4)
S DIH=$G(^IBA(355.33,DIV(0),90)),DIV=X S $P(^(90),U,3)=DIV,DIH=355.33,DIG=90.03 D ^DICR
"^DD",355.33,355.33,60.04,1,2,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBA(355.33,DA,60),U,4)="") I X S X=DIV S Y(1)=$S($D(^IBA(355.33,D0,90)):^(90),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(355.33,60.04,1,2,2.4)
"^DD",355.33,355.33,60.04,1,2,2.4)
S DIH=$G(^IBA(355.33,DIV(0),90)),DIV=X S $P(^(90),U,3)=DIV,DIH=355.33,DIG=90.03 D ^DICR
"^DD",355.33,355.33,60.04,1,2,"%D",0)
^.101^1^1^3131029^^
"^DD",355.33,355.33,60.04,1,2,"%D",1,0)
Triggers field 90.03 if first 20 chars of its value differ from the value in this field. Deletes field 90.03 if field 60.04 is deleted.
"^DD",355.33,355.33,60.04,1,2,"CREATE CONDITION")
S X=($P(^IBA(355.33,DA,60),U,4)'=$E($P($G(^IBA(355.33,DA,90)),U,3),1,20))
"^DD",355.33,355.33,60.04,1,2,"CREATE VALUE")
S X=$P(^IBA(355.33,DA,60),U,4)
"^DD",355.33,355.33,60.04,1,2,"DELETE CONDITION")
S X=($P(^IBA(355.33,DA,60),U,4)="")
"^DD",355.33,355.33,60.04,1,2,"DELETE VALUE")
@
"^DD",355.33,355.33,60.04,1,2,"DT")
3131021
"^DD",355.33,355.33,60.04,1,2,"FIELD")
SUBSCRIBER ID
"^DD",355.33,355.33,60.04,3)
Answer must be 3-20 characters in length.
"^DD",355.33,355.33,60.04,5,1,0)
355.33^90.03^1
"^DD",355.33,355.33,60.04,21,0)
^^4^4^3131120^
"^DD",355.33,355.33,60.04,21,1,0)
Enter the Subscriber's Primary ID number.  This number is assigned
"^DD",355.33,355.33,60.04,21,2,0)
by the payer and can be found on the subscriber's insurance card.
"^DD",355.33,355.33,60.04,21,3,0)
 
"^DD",355.33,355.33,60.04,21,4,0)
This field is scheduled for deletion in May 2015.
"^DD",355.33,355.33,60.04,"DT")
3131203
"^DD",355.33,355.33,60.07,0)
*NAME OF INSURED^FX^^60;7^N Z1 S Z1=$G(^IBA(355.33,DA,60)) S:$P(Z1,U,6)="01"&X X=$P($G(^DPT(+Z1,0)),U,1) K:$L(X)>30!($L(X)<2) X
"^DD",355.33,355.33,60.07,1,0)
^.1
"^DD",355.33,355.33,60.07,1,1,0)
^^TRIGGER^355.33^91.01
"^DD",355.33,355.33,60.07,1,1,1)
X ^DD(355.33,60.07,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.33,D0,91)):^(91),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y S X=DIV S X=$P(^IBA(355.33,DA,60),U,7) X ^DD(355.33,60.07,1,1,1.4)
"^DD",355.33,355.33,60.07,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBA(355.33,DA,60),U,7)'=$E($P($G(^IBA(355.33,DA,91)),U),1,30))
"^DD",355.33,355.33,60.07,1,1,1.4)
S DIH=$G(^IBA(355.33,DIV(0),91)),DIV=X S $P(^(91),U,1)=DIV,DIH=355.33,DIG=91.01 D ^DICR
"^DD",355.33,355.33,60.07,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBA(355.33,DA,60),U,7)="") I X S X=DIV S Y(1)=$S($D(^IBA(355.33,D0,91)):^(91),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y S X="" X ^DD(355.33,60.07,1,1,2.4)
"^DD",355.33,355.33,60.07,1,1,2.4)
S DIH=$G(^IBA(355.33,DIV(0),91)),DIV=X S $P(^(91),U,1)=DIV,DIH=355.33,DIG=91.01 D ^DICR
"^DD",355.33,355.33,60.07,1,1,"%D",0)
^.101^1^1^3131029^^
"^DD",355.33,355.33,60.07,1,1,"%D",1,0)
Triggers field 91.01 if first 30 chars of its value differ from the value in this field. Deletes field 91.01 if field 60.07 is deleted.
"^DD",355.33,355.33,60.07,1,1,"CREATE CONDITION")
S X=($P(^IBA(355.33,DA,60),U,7)'=$E($P($G(^IBA(355.33,DA,91)),U),1,30))
"^DD",355.33,355.33,60.07,1,1,"CREATE VALUE")
S X=$P(^IBA(355.33,DA,60),U,7)
"^DD",355.33,355.33,60.07,1,1,"DELETE CONDITION")
S X=($P(^IBA(355.33,DA,60),U,7)="")
"^DD",355.33,355.33,60.07,1,1,"DELETE VALUE")
@
"^DD",355.33,355.33,60.07,1,1,"DT")
3131021
"^DD",355.33,355.33,60.07,1,1,"FIELD")
NAME OF INSURED
"^DD",355.33,355.33,60.07,3)
Enter the name of the person who holds the policy.  Answer must be 2-30 characters in length.
"^DD",355.33,355.33,60.07,5,1,0)
355.33^91.01^1
"^DD",355.33,355.33,60.07,21,0)
^^5^5^3131120^
"^DD",355.33,355.33,60.07,21,1,0)
Enter the name of the individual for which this policy was issued.  If the
"^DD",355.33,355.33,60.07,21,2,0)
Patients Relationship to the Insured is 'Patient' then this name will 
"^DD",355.33,355.33,60.07,21,3,0)
default to the patients name via input transform.
"^DD",355.33,355.33,60.07,21,4,0)
 
"^DD",355.33,355.33,60.07,21,5,0)
This field is scheduled for deletion in May 2015.
"^DD",355.33,355.33,60.07,"DT")
3131120
"^DD",355.33,355.33,60.14,0)
PT. RELATIONSHIP - HIPAA^S^01:SPOUSE;18:SELF;19:CHILD;20:EMPLOYEE;29:SIGNIFICANT OTHER;32:MOTHER;33:FATHER;39:ORGAN DONOR;41:INJURED PLAINTIFF;53:LIFE PARTNER;G8:OTHER RELATIONSHIP;^60;14^Q
"^DD",355.33,355.33,60.14,.1)
PT. RELATIONSHIP TO INSURED
"^DD",355.33,355.33,60.14,1,0)
^.1
"^DD",355.33,355.33,60.14,1,1,0)
^^TRIGGER^355.33^60.06
"^DD",355.33,355.33,60.14,1,1,1)
X ^DD(355.33,60.14,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.33,D0,60)):^(60),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X=DIV S X=$$PRELCNV^IBCNSP1($P(^IBA(355.33,DA,60),U,14),0) X ^DD(355.33,60.14,1,1,1.4)
"^DD",355.33,355.33,60.14,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 N Z S Z=$$PRELCNV^IBCNSP1($P(^IBA(355.33,D0,60),U,14),0),X=(Z'=""&(Z'=$P(^IBA(355.33,D0,60),U,6)))
"^DD",355.33,355.33,60.14,1,1,1.4)
S DIH=$G(^IBA(355.33,DIV(0),60)),DIV=X S $P(^(60),U,6)=DIV,DIH=355.33,DIG=60.06 D ^DICR
"^DD",355.33,355.33,60.14,1,1,2)
Q
"^DD",355.33,355.33,60.14,1,1,"%D",0)
^^1^1^3080204^
"^DD",355.33,355.33,60.14,1,1,"%D",1,0)
Triggers field 60.06 if its value differs from value in this field.
"^DD",355.33,355.33,60.14,1,1,"CREATE CONDITION")
N Z S Z=$$PRELCNV^IBCNSP1($P(^IBA(355.33,D0,60),U,14),0),X=(Z'=""&(Z'=$P(^IBA(355.33,D0,60),U,6)))
"^DD",355.33,355.33,60.14,1,1,"CREATE VALUE")
S X=$$PRELCNV^IBCNSP1($P(^IBA(355.33,DA,60),U,14),0)
"^DD",355.33,355.33,60.14,1,1,"DELETE VALUE")
NO EFFECT
"^DD",355.33,355.33,60.14,1,1,"FIELD")
PT. RELATIONSHIP TO INSURED
"^DD",355.33,355.33,60.14,3)
Enter the HIPAA code which indicates the patient's relationship to the injured party.
"^DD",355.33,355.33,60.14,5,1,0)
355.33^60.06^2
"^DD",355.33,355.33,60.14,21,0)
^^6^6^3080204^
"^DD",355.33,355.33,60.14,21,1,0)
Select the HIPAA relationship code that
"^DD",355.33,355.33,60.14,21,2,0)
describes the relationship this patient has to
"^DD",355.33,355.33,60.14,21,3,0)
the holder of this insurance policy. If the
"^DD",355.33,355.33,60.14,21,4,0)
policy belongs to the patient enter '18' for
"^DD",355.33,355.33,60.14,21,5,0)
SELF. If the policy belongs to the spouse enter
"^DD",355.33,355.33,60.14,21,6,0)
'01' for SPOUSE, etc.
"^DD",355.33,355.33,60.14,"DT")
3130513
"^DD",355.33,355.33,90.01,0)
GROUP NAME^FX^^90;1^K:$L(X)>80!($L(X)<2)!'$$LENCHK^IBCNEUT1(X,20,0) X
"^DD",355.33,355.33,90.01,1,0)
^.1
"^DD",355.33,355.33,90.01,1,1,0)
^^TRIGGER^355.33^40.02
"^DD",355.33,355.33,90.01,1,1,1)
X ^DD(355.33,90.01,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.33,D0,40)):^(40),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X=$E($P(^IBA(355.33,DA,90),U),1,20) X ^DD(355.33,90.01,1,1,1.4)
"^DD",355.33,355.33,90.01,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P($G(^IBA(355.33,DA,40)),U,2)'=$E($P(^IBA(355.33,DA,90),U),1,20))
"^DD",355.33,355.33,90.01,1,1,1.4)
S DIH=$G(^IBA(355.33,DIV(0),40)),DIV=X S $P(^(40),U,2)=DIV,DIH=355.33,DIG=40.02 D ^DICR
"^DD",355.33,355.33,90.01,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBA(355.33,DA,90),U)="") I X S X=DIV S Y(1)=$S($D(^IBA(355.33,D0,40)):^(40),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X="" X ^DD(355.33,90.01,1,1,2.4)
"^DD",355.33,355.33,90.01,1,1,2.4)
S DIH=$G(^IBA(355.33,DIV(0),40)),DIV=X S $P(^(40),U,2)=DIV,DIH=355.33,DIG=40.02 D ^DICR
"^DD",355.33,355.33,90.01,1,1,"%D",0)
^.101^1^1^3131029^^
"^DD",355.33,355.33,90.01,1,1,"%D",1,0)
Triggers field 40.02 if its value differs from first 20 chars of the value in this field. Deletes field 40.02 if field 90.01 is deleted.
"^DD",355.33,355.33,90.01,1,1,"CREATE CONDITION")
S X=($P($G(^IBA(355.33,DA,40)),U,2)'=$E($P(^IBA(355.33,DA,90),U),1,20))
"^DD",355.33,355.33,90.01,1,1,"CREATE VALUE")
S X=$E($P(^IBA(355.33,DA,90),U),1,20)
"^DD",355.33,355.33,90.01,1,1,"DELETE CONDITION")
S X=($P(^IBA(355.33,DA,90),U)="")
"^DD",355.33,355.33,90.01,1,1,"DELETE VALUE")
@
"^DD",355.33,355.33,90.01,1,1,"DT")
3131021
"^DD",355.33,355.33,90.01,1,1,"FIELD")
*GROUP NAME
"^DD",355.33,355.33,90.01,1,2,0)
^^TRIGGER^355.33^.16
"^DD",355.33,355.33,90.01,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(355.33,D0,0)):^(0),1:"") S X=$P(Y(1),U,16),X=X S DIU=X K Y S X=DIV S X=$$TRIG^IBCNERTQ(DA) S DIH=$G(^IBA(355.33,DIV(0),0)),DIV=X S $P(^(0),U,16)=DIV,DIH=355.33,DIG=.16 D ^DICR
"^DD",355.33,355.33,90.01,1,2,2)
Q
"^DD",355.33,355.33,90.01,1,2,"%D",0)
^^1^1^3131203^
"^DD",355.33,355.33,90.01,1,2,"%D",1,0)
Sets the  REAL TIME VERIFICATION (#.16) field to 1 when this record has been queued for real time verification.
"^DD",355.33,355.33,90.01,1,2,"CREATE VALUE")
S X=$$TRIG^IBCNERTQ(DA)
"^DD",355.33,355.33,90.01,1,2,"DELETE VALUE")
NO EFFECT
"^DD",355.33,355.33,90.01,1,2,"DT")
3131203
"^DD",355.33,355.33,90.01,1,2,"FIELD")
REAL TIME
"^DD",355.33,355.33,90.01,3)
Answer must be 2-20 characters in length.
"^DD",355.33,355.33,90.01,5,1,0)
355.33^40.02^2
"^DD",355.33,355.33,90.01,21,0)
^^1^1^3130421^
"^DD",355.33,355.33,90.01,21,1,0)
This is the name that the insurance company uses to identify this plan.
"^DD",355.33,355.33,90.01,23,0)
^^2^2^3130605^
"^DD",355.33,355.33,90.01,23,1,0)
Replaces field 40.02. Length of this field is temporarily limited to 20 
"^DD",355.33,355.33,90.01,23,2,0)
characters.
"^DD",355.33,355.33,90.01,"DT")
3131203
"^DD",355.33,355.33,90.02,0)
GROUP NUMBER^FX^^90;2^K:$L(X)>55!($L(X)<2)!'$$LENCHK^IBCNEUT1(X,17,0) X
"^DD",355.33,355.33,90.02,1,0)
^.1
"^DD",355.33,355.33,90.02,1,1,0)
^^TRIGGER^355.33^40.03
"^DD",355.33,355.33,90.02,1,1,1)
X ^DD(355.33,90.02,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.33,D0,40)):^(40),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X=DIV S X=$E($P(^IBA(355.33,DA,90),U,2),1,17) X ^DD(355.33,90.02,1,1,1.4)
"^DD",355.33,355.33,90.02,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P($G(^IBA(355.33,DA,40)),U,3)'=$E($P(^IBA(355.33,DA,90),U,2),1,17))
"^DD",355.33,355.33,90.02,1,1,1.4)
S DIH=$G(^IBA(355.33,DIV(0),40)),DIV=X S $P(^(40),U,3)=DIV,DIH=355.33,DIG=40.03 D ^DICR
"^DD",355.33,355.33,90.02,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBA(355.33,DA,90),U,2)="") I X S X=DIV S Y(1)=$S($D(^IBA(355.33,D0,40)):^(40),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(355.33,90.02,1,1,2.4)
"^DD",355.33,355.33,90.02,1,1,2.4)
S DIH=$G(^IBA(355.33,DIV(0),40)),DIV=X S $P(^(40),U,3)=DIV,DIH=355.33,DIG=40.03 D ^DICR
"^DD",355.33,355.33,90.02,1,1,"%D",0)
^.101^1^1^3131029^^
"^DD",355.33,355.33,90.02,1,1,"%D",1,0)
Triggers field 40.03 if its value differs from first 17 chars of the value in this field. Deletes field 40.03 if field 90.02 is deleted.
"^DD",355.33,355.33,90.02,1,1,"CREATE CONDITION")
S X=($P($G(^IBA(355.33,DA,40)),U,3)'=$E($P(^IBA(355.33,DA,90),U,2),1,17))
"^DD",355.33,355.33,90.02,1,1,"CREATE VALUE")
S X=$E($P(^IBA(355.33,DA,90),U,2),1,17)
"^DD",355.33,355.33,90.02,1,1,"DELETE CONDITION")
S X=($P(^IBA(355.33,DA,90),U,2)="")
"^DD",355.33,355.33,90.02,1,1,"DELETE VALUE")
@
"^DD",355.33,355.33,90.02,1,1,"DT")
3131021
"^DD",355.33,355.33,90.02,1,1,"FIELD")
*GROUP NUMBER
"^DD",355.33,355.33,90.02,1,2,0)
^^TRIGGER^355.33^.16
"^DD",355.33,355.33,90.02,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(355.33,D0,0)):^(0),1:"") S X=$P(Y(1),U,16),X=X S DIU=X K Y S X=DIV S X=$$TRIG^IBCNERTQ(DA) S DIH=$G(^IBA(355.33,DIV(0),0)),DIV=X S $P(^(0),U,16)=DIV,DIH=355.33,DIG=.16 D ^DICR
"^DD",355.33,355.33,90.02,1,2,2)
Q
"^DD",355.33,355.33,90.02,1,2,"%D",0)
^^1^1^3131203^
"^DD",355.33,355.33,90.02,1,2,"%D",1,0)
Sets the  REAL TIME VERIFICATION (#.16) field to 1 when this record has been queued for real time verification.
"^DD",355.33,355.33,90.02,1,2,"CREATE VALUE")
S X=$$TRIG^IBCNERTQ(DA)
"^DD",355.33,355.33,90.02,1,2,"DELETE VALUE")
NO EFFECT
"^DD",355.33,355.33,90.02,1,2,"DT")
3131203
"^DD",355.33,355.33,90.02,1,2,"FIELD")
REAL TIME
"^DD",355.33,355.33,90.02,3)
Answer must be 2-17 characters in length.
"^DD",355.33,355.33,90.02,5,1,0)
355.33^40.03^2
"^DD",355.33,355.33,90.02,21,0)
^^1^1^3130421^
"^DD",355.33,355.33,90.02,21,1,0)
This is the number or code which the insurance company uses to identify this plan.
"^DD",355.33,355.33,90.02,23,0)
^^2^2^3130605^
"^DD",355.33,355.33,90.02,23,1,0)
Replaces field 40.03. Length of this field is temporarily limited to 17 
"^DD",355.33,355.33,90.02,23,2,0)
characters.
"^DD",355.33,355.33,90.02,"DT")
3131203
"^DD",355.33,355.33,90.03,0)
SUBSCRIBER ID^FX^^90;3^K:$L(X)>80!($L(X)<3)!'$$LENCHK^IBCNEUT1(X,20,0) X
"^DD",355.33,355.33,90.03,1,0)
^.1
"^DD",355.33,355.33,90.03,1,1,0)
^^TRIGGER^355.33^60.04
"^DD",355.33,355.33,90.03,1,1,1)
X ^DD(355.33,90.03,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.33,D0,60)):^(60),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X=DIV S X=$E($P(^IBA(355.33,DA,90),U,3),1,20) X ^DD(355.33,90.03,1,1,1.4)
"^DD",355.33,355.33,90.03,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P($G(^IBA(355.33,DA,60)),U,4)'=$E($P(^IBA(355.33,DA,90),U,3),1,20))
"^DD",355.33,355.33,90.03,1,1,1.4)
S DIH=$G(^IBA(355.33,DIV(0),60)),DIV=X S $P(^(60),U,4)=DIV,DIH=355.33,DIG=60.04 D ^DICR
"^DD",355.33,355.33,90.03,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBA(355.33,DA,90),U,3)="") I X S X=DIV S Y(1)=$S($D(^IBA(355.33,D0,60)):^(60),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X="" X ^DD(355.33,90.03,1,1,2.4)
"^DD",355.33,355.33,90.03,1,1,2.4)
S DIH=$G(^IBA(355.33,DIV(0),60)),DIV=X S $P(^(60),U,4)=DIV,DIH=355.33,DIG=60.04 D ^DICR
"^DD",355.33,355.33,90.03,1,1,"%D",0)
^.101^1^1^3131029^^
"^DD",355.33,355.33,90.03,1,1,"%D",1,0)
Triggers field 60.04 if its value differs from first 20 chars of the value in this field. Deletes field 60.04 if field 90.03 is deleted.
"^DD",355.33,355.33,90.03,1,1,"CREATE CONDITION")
S X=($P($G(^IBA(355.33,DA,60)),U,4)'=$E($P(^IBA(355.33,DA,90),U,3),1,20))
"^DD",355.33,355.33,90.03,1,1,"CREATE VALUE")
S X=$E($P(^IBA(355.33,DA,90),U,3),1,20)
"^DD",355.33,355.33,90.03,1,1,"DELETE CONDITION")
S X=($P(^IBA(355.33,DA,90),U,3)="")
"^DD",355.33,355.33,90.03,1,1,"DELETE VALUE")
@
"^DD",355.33,355.33,90.03,1,1,"DT")
3131021
"^DD",355.33,355.33,90.03,1,1,"FIELD")
*SUBSCRIBER ID
"^DD",355.33,355.33,90.03,1,2,0)
^^TRIGGER^355.33^.16
"^DD",355.33,355.33,90.03,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(355.33,D0,0)):^(0),1:"") S X=$P(Y(1),U,16),X=X S DIU=X K Y S X=DIV S X=$$TRIG^IBCNERTQ(DA) S DIH=$G(^IBA(355.33,DIV(0),0)),DIV=X S $P(^(0),U,16)=DIV,DIH=355.33,DIG=.16 D ^DICR
"^DD",355.33,355.33,90.03,1,2,2)
Q
"^DD",355.33,355.33,90.03,1,2,"%D",0)
^^1^1^3131203^
"^DD",355.33,355.33,90.03,1,2,"%D",1,0)
Sets the  REAL TIME VERIFICATION (#.16) field to 1 when this record has been queued for real time verification.
"^DD",355.33,355.33,90.03,1,2,"CREATE VALUE")
S X=$$TRIG^IBCNERTQ(DA)
"^DD",355.33,355.33,90.03,1,2,"DELETE VALUE")
NO EFFECT
"^DD",355.33,355.33,90.03,1,2,"DT")
3131203
"^DD",355.33,355.33,90.03,1,2,"FIELD")
REAL TIME
"^DD",355.33,355.33,90.03,3)
Answer must be 3-20 characters in length.
"^DD",355.33,355.33,90.03,5,1,0)
355.33^60.04^2
"^DD",355.33,355.33,90.03,21,0)
^^1^1^3130421^
"^DD",355.33,355.33,90.03,21,1,0)
Enter the Subscriber's Primary ID number. This number is assigned by the payer and can be found on the subscriber's insurance card.
"^DD",355.33,355.33,90.03,23,0)
^^2^2^3130605^
"^DD",355.33,355.33,90.03,23,1,0)
Replaces field 60.04. Length of this field is temporarily limited to 20 
"^DD",355.33,355.33,90.03,23,2,0)
characters.
"^DD",355.33,355.33,90.03,"DT")
3131203
"^DD",355.33,355.33,91.01,0)
NAME OF INSURED^FX^^91;1^N Z1 S Z1=$G(^IBA(355.33,DA,60)) S:$P(Z1,U,6)="01"&X X=$P($G(^DPT(+Z1,0)),U,1) K:$L(X)>130!($L(X)<2)!'$$LENCHK^IBCNEUT1(X,30,0) X
"^DD",355.33,355.33,91.01,1,0)
^.1
"^DD",355.33,355.33,91.01,1,1,0)
^^TRIGGER^355.33^60.07
"^DD",355.33,355.33,91.01,1,1,1)
X ^DD(355.33,91.01,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.33,D0,60)):^(60),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X=DIV S X=$E($P(^IBA(355.33,DA,91),U),1,30) X ^DD(355.33,91.01,1,1,1.4)
"^DD",355.33,355.33,91.01,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P($G(^IBA(355.33,DA,60)),U,7)'=$E($P(^IBA(355.33,DA,91),U),1,30))
"^DD",355.33,355.33,91.01,1,1,1.4)
S DIH=$G(^IBA(355.33,DIV(0),60)),DIV=X S $P(^(60),U,7)=DIV,DIH=355.33,DIG=60.07 D ^DICR
"^DD",355.33,355.33,91.01,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBA(355.33,DA,91),U)="") I X S X=DIV S Y(1)=$S($D(^IBA(355.33,D0,60)):^(60),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X="" X ^DD(355.33,91.01,1,1,2.4)
"^DD",355.33,355.33,91.01,1,1,2.4)
S DIH=$G(^IBA(355.33,DIV(0),60)),DIV=X S $P(^(60),U,7)=DIV,DIH=355.33,DIG=60.07 D ^DICR
"^DD",355.33,355.33,91.01,1,1,"%D",0)
^.101^1^1^3131029^^
"^DD",355.33,355.33,91.01,1,1,"%D",1,0)
Triggers field 60.07 if its value differs from first 30 chars of the value in this field. Deletes field 60.07 if field 91.01 is deleted.
"^DD",355.33,355.33,91.01,1,1,"CREATE CONDITION")
S X=($P($G(^IBA(355.33,DA,60)),U,7)'=$E($P(^IBA(355.33,DA,91),U),1,30))
"^DD",355.33,355.33,91.01,1,1,"CREATE VALUE")
S X=$E($P(^IBA(355.33,DA,91),U),1,30)
"^DD",355.33,355.33,91.01,1,1,"DELETE CONDITION")
S X=($P(^IBA(355.33,DA,91),U)="")
"^DD",355.33,355.33,91.01,1,1,"DELETE VALUE")
@
"^DD",355.33,355.33,91.01,1,1,"DT")
3131021
"^DD",355.33,355.33,91.01,1,1,"FIELD")
*NAME OF INSURED
"^DD",355.33,355.33,91.01,3)
Enter the name of the person who holds the policy. Answer must be 2-30 characters in length.
"^DD",355.33,355.33,91.01,5,1,0)
355.33^60.07^1
"^DD",355.33,355.33,91.01,21,0)
^^3^3^3130605^
"^DD",355.33,355.33,91.01,21,1,0)
This is the name of the individual for which this policy was issued. If 
"^DD",355.33,355.33,91.01,21,2,0)
the Patient Relationship to the Insured is 'Patient' then this name will 
"^DD",355.33,355.33,91.01,21,3,0)
default to the patient name via input transform.
"^DD",355.33,355.33,91.01,23,0)
^^2^2^3130605^
"^DD",355.33,355.33,91.01,23,1,0)
Replaces field 60.07. Length of this field is temporarily limited to 30 
"^DD",355.33,355.33,91.01,23,2,0)
characters.
"^DD",355.33,355.33,91.01,"DT")
3131120
"^DD",365,365,1.01,0)
*NAME OF INSURED^F^^1;1^K:$L(X)>30!($L(X)<1) X
"^DD",365,365,1.01,.1)
Subscriber
"^DD",365,365,1.01,1,0)
^.1
"^DD",365,365,1.01,1,1,0)
^^TRIGGER^365^13.01
"^DD",365,365,1.01,1,1,1)
X ^DD(365,1.01,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,13)):^(13),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y S X=DIV S X=$P(^IBCN(365,DA,1),U) X ^DD(365,1.01,1,1,1.4)
"^DD",365,365,1.01,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBCN(365,DA,1),U)'=$E($P($G(^IBCN(365,DA,13)),U),1,30))
"^DD",365,365,1.01,1,1,1.4)
S DIH=$G(^IBCN(365,DIV(0),13)),DIV=X S $P(^(13),U,1)=DIV,DIH=365,DIG=13.01 D ^DICR
"^DD",365,365,1.01,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBCN(365,DA,1),U)="") I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,13)):^(13),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y S X="" X ^DD(365,1.01,1,1,2.4)
"^DD",365,365,1.01,1,1,2.4)
S DIH=$G(^IBCN(365,DIV(0),13)),DIV=X S $P(^(13),U,1)=DIV,DIH=365,DIG=13.01 D ^DICR
"^DD",365,365,1.01,1,1,"%D",0)
^.101^1^1^3131029^^
"^DD",365,365,1.01,1,1,"%D",1,0)
Triggers field 13.01 if first 30 chars of its value differ from the value in this field. Deletes field 13.01 if field 1.01 is deleted.
"^DD",365,365,1.01,1,1,"CREATE CONDITION")
S X=($P(^IBCN(365,DA,1),U)'=$E($P($G(^IBCN(365,DA,13)),U),1,30))
"^DD",365,365,1.01,1,1,"CREATE VALUE")
S X=$P(^IBCN(365,DA,1),U)
"^DD",365,365,1.01,1,1,"DELETE CONDITION")
S X=($P(^IBCN(365,DA,1),U)="")
"^DD",365,365,1.01,1,1,"DELETE VALUE")
@
"^DD",365,365,1.01,1,1,"DT")
3131017
"^DD",365,365,1.01,1,1,"FIELD")
NAME OF INSURED
"^DD",365,365,1.01,3)
Answer must be 1-30 characters in length.
"^DD",365,365,1.01,5,1,0)
365^13.01^1
"^DD",365,365,1.01,21,0)
^^6^6^3131120^
"^DD",365,365,1.01,21,1,0)
This is the name of the insured person in LastName,FirstName MI
"^DD",365,365,1.01,21,2,0)
format.  If the patient is the subscriber, this field is the
"^DD",365,365,1.01,21,3,0)
same.  If the patient is a dependent, the subscriber's name is
"^DD",365,365,1.01,21,4,0)
stored here.
"^DD",365,365,1.01,21,5,0)
 
"^DD",365,365,1.01,21,6,0)
This field is scheduled for deletion in May 2015.
"^DD",365,365,1.01,"DT")
3131120
"^DD",365,365,1.05,0)
*SUBSCRIBER ID^F^^1;5^K:$L(X)>20!($L(X)<1) X
"^DD",365,365,1.05,.1)
Subscriber ID
"^DD",365,365,1.05,1,0)
^.1
"^DD",365,365,1.05,1,1,0)
^^TRIGGER^365^13.02
"^DD",365,365,1.05,1,1,1)
X ^DD(365,1.05,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,13)):^(13),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X=$P(^IBCN(365,DA,1),U,5) X ^DD(365,1.05,1,1,1.4)
"^DD",365,365,1.05,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBCN(365,DA,1),U,5)'=$E($P($G(^IBCN(365,DA,13)),U,2),1,20))
"^DD",365,365,1.05,1,1,1.4)
S DIH=$G(^IBCN(365,DIV(0),13)),DIV=X S $P(^(13),U,2)=DIV,DIH=365,DIG=13.02 D ^DICR
"^DD",365,365,1.05,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBCN(365,DA,1),U,5)="") I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,13)):^(13),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X="" X ^DD(365,1.05,1,1,2.4)
"^DD",365,365,1.05,1,1,2.4)
S DIH=$G(^IBCN(365,DIV(0),13)),DIV=X S $P(^(13),U,2)=DIV,DIH=365,DIG=13.02 D ^DICR
"^DD",365,365,1.05,1,1,"%D",0)
^.101^1^1^3131029^^
"^DD",365,365,1.05,1,1,"%D",1,0)
Triggers field 13.02 if first 20 chars of its value differ from the value in this field. Deletes field 13.02 if field 1.05 is deleted.
"^DD",365,365,1.05,1,1,"CREATE CONDITION")
S X=($P(^IBCN(365,DA,1),U,5)'=$E($P($G(^IBCN(365,DA,13)),U,2),1,20))
"^DD",365,365,1.05,1,1,"CREATE VALUE")
S X=$P(^IBCN(365,DA,1),U,5)
"^DD",365,365,1.05,1,1,"DELETE CONDITION")
S X=($P(^IBCN(365,DA,1),U,5)="")
"^DD",365,365,1.05,1,1,"DELETE VALUE")
@
"^DD",365,365,1.05,1,1,"DT")
3131018
"^DD",365,365,1.05,1,1,"FIELD")
SUBSCRIBER ID
"^DD",365,365,1.05,3)
Answer must be 1-20 characters in length.
"^DD",365,365,1.05,5,1,0)
365^13.02^1
"^DD",365,365,1.05,21,0)
^^3^3^3131120^
"^DD",365,365,1.05,21,1,0)
The subscriber identification of the insured person.
"^DD",365,365,1.05,21,2,0)
 
"^DD",365,365,1.05,21,3,0)
This field is scheduled for deletion in May 2015.
"^DD",365,365,1.05,"DT")
3131120
"^DD",365,365,1.06,0)
*GROUP NAME^F^^1;6^K:$L(X)>20!($L(X)<1) X
"^DD",365,365,1.06,.1)
Group Name
"^DD",365,365,1.06,1,0)
^.1
"^DD",365,365,1.06,1,1,0)
^^TRIGGER^365^14.01
"^DD",365,365,1.06,1,1,1)
X ^DD(365,1.06,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,14)):^(14),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y S X=DIV S X=$P(^IBCN(365,DA,1),U,6) X ^DD(365,1.06,1,1,1.4)
"^DD",365,365,1.06,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBCN(365,DA,1),U,6)'=$E($P($G(^IBCN(365,DA,14)),U),1,20))
"^DD",365,365,1.06,1,1,1.4)
S DIH=$G(^IBCN(365,DIV(0),14)),DIV=X S $P(^(14),U,1)=DIV,DIH=365,DIG=14.01 D ^DICR
"^DD",365,365,1.06,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBCN(365,DA,1),U,6)="") I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,14)):^(14),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y S X="" X ^DD(365,1.06,1,1,2.4)
"^DD",365,365,1.06,1,1,2.4)
S DIH=$G(^IBCN(365,DIV(0),14)),DIV=X S $P(^(14),U,1)=DIV,DIH=365,DIG=14.01 D ^DICR
"^DD",365,365,1.06,1,1,"%D",0)
^.101^1^1^3131029^^
"^DD",365,365,1.06,1,1,"%D",1,0)
Triggers field 14.01 if first 20 chars of its value differ from the value in this field. Deletes field 14.01 if field 1.06 is deleted.
"^DD",365,365,1.06,1,1,"CREATE CONDITION")
S X=($P(^IBCN(365,DA,1),U,6)'=$E($P($G(^IBCN(365,DA,14)),U),1,20))
"^DD",365,365,1.06,1,1,"CREATE VALUE")
S X=$P(^IBCN(365,DA,1),U,6)
"^DD",365,365,1.06,1,1,"DELETE CONDITION")
S X=($P(^IBCN(365,DA,1),U,6)="")
"^DD",365,365,1.06,1,1,"DELETE VALUE")
@
"^DD",365,365,1.06,1,1,"DT")
3131018
"^DD",365,365,1.06,1,1,"FIELD")
GROUP NAME
"^DD",365,365,1.06,3)
Answer must be 1-20 characters in length.
"^DD",365,365,1.06,5,1,0)
365^14.01^1
"^DD",365,365,1.06,21,0)
^^3^3^3131120^
"^DD",365,365,1.06,21,1,0)
The name of the group or plan if not an individual policy.
"^DD",365,365,1.06,21,2,0)
 
"^DD",365,365,1.06,21,3,0)
This field is scheduled for deletion in May 2015.
"^DD",365,365,1.06,"DT")
3131120
"^DD",365,365,1.07,0)
*GROUP NUMBER^F^^1;7^K:$L(X)>17!($L(X)<1) X
"^DD",365,365,1.07,.1)
Group ID
"^DD",365,365,1.07,1,0)
^.1
"^DD",365,365,1.07,1,1,0)
^^TRIGGER^365^14.02
"^DD",365,365,1.07,1,1,1)
X ^DD(365,1.07,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,14)):^(14),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X=$P(^IBCN(365,DA,1),U,7) X ^DD(365,1.07,1,1,1.4)
"^DD",365,365,1.07,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBCN(365,DA,1),U,7)'=$E($P($G(^IBCN(365,DA,14)),U,2),1,17))
"^DD",365,365,1.07,1,1,1.4)
S DIH=$G(^IBCN(365,DIV(0),14)),DIV=X S $P(^(14),U,2)=DIV,DIH=365,DIG=14.02 D ^DICR
"^DD",365,365,1.07,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBCN(365,DA,1),U,7)="") I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,14)):^(14),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X="" X ^DD(365,1.07,1,1,2.4)
"^DD",365,365,1.07,1,1,2.4)
S DIH=$G(^IBCN(365,DIV(0),14)),DIV=X S $P(^(14),U,2)=DIV,DIH=365,DIG=14.02 D ^DICR
"^DD",365,365,1.07,1,1,"%D",0)
^.101^1^1^3131029^^
"^DD",365,365,1.07,1,1,"%D",1,0)
Triggers field 14.02 if first 17 chars of its value differ from the value in this field. Deletes field 14.02 if field 1.07 is deleted.
"^DD",365,365,1.07,1,1,"CREATE CONDITION")
S X=($P(^IBCN(365,DA,1),U,7)'=$E($P($G(^IBCN(365,DA,14)),U,2),1,17))
"^DD",365,365,1.07,1,1,"CREATE VALUE")
S X=$P(^IBCN(365,DA,1),U,7)
"^DD",365,365,1.07,1,1,"DELETE CONDITION")
S X=($P(^IBCN(365,DA,1),U,7)="")
"^DD",365,365,1.07,1,1,"DELETE VALUE")
@
"^DD",365,365,1.07,1,1,"DT")
3131018
"^DD",365,365,1.07,1,1,"FIELD")
GROUP NUMBER
"^DD",365,365,1.07,3)
Answer must be 1-17 characters in length.
"^DD",365,365,1.07,5,1,0)
365^14.02^1
"^DD",365,365,1.07,21,0)
^^3^3^3131120^
"^DD",365,365,1.07,21,1,0)
The number that identifies the group or plan.
"^DD",365,365,1.07,21,2,0)
 
"^DD",365,365,1.07,21,3,0)
This field is scheduled for deletion in May 2015.
"^DD",365,365,1.07,"DT")
3131120
"^DD",365,365,8.01,0)
PT. RELATIONSHIP - HIPAA^P365.037^IBE(365.037,^8;1^Q
"^DD",365,365,8.01,3)
Enter the HIPAA code which indicates the patient's relationship to the injured party.
"^DD",365,365,8.01,21,0)
^^4^4^3130318^^
"^DD",365,365,8.01,21,1,0)
This is the HIPAA relationship code that describes the relationship this 
"^DD",365,365,8.01,21,2,0)
patient has to the holder of this insurance policy. If the policy belongs 
"^DD",365,365,8.01,21,3,0)
to the patient enter '18' for SELF. If the policy belongs to the spouse 
"^DD",365,365,8.01,21,4,0)
enter '01' for SPOUSE, etc.
"^DD",365,365,8.01,23,0)
^^1^1^3130318^
"^DD",365,365,8.01,23,1,0)
Data comes in the IN1 segment - IN1.17.1
"^DD",365,365,8.01,"DT")
3130318
"^DD",365,365,9,0)
GROUP REFERENCE INFORMATION^365.09^^9;0
"^DD",365,365,9,21,0)
^^1^1^3130522^
"^DD",365,365,9,21,1,0)
Subscriber/Dependent additional identification data.
"^DD",365,365,9,"DT")
3130522
"^DD",365,365,10,0)
GROUP PROVIDER INFO^365.04^^10;0
"^DD",365,365,10,21,0)
^^1^1^3130514^
"^DD",365,365,10,21,1,0)
Entries in this sub-file identify the characteristics of a provider.
"^DD",365,365,11,0)
HEALTH CARE CODE INFORMATION^365.01^^11;0
"^DD",365,365,11,21,0)
^^1^1^3130514^
"^DD",365,365,11,21,1,0)
To supply information related to the delivery of health care.
"^DD",365,365,12.01,0)
MILITARY INFO STATUS CODE^P365.039^IBE(365.039,^12;1^Q
"^DD",365,365,12.01,3)
Enter the military information status code.
"^DD",365,365,12.01,21,0)
^^2^2^3130514^
"^DD",365,365,12.01,21,1,0)
Code to indicate the status of the military information sent by the 
"^DD",365,365,12.01,21,2,0)
payer.   
"^DD",365,365,12.01,23,0)
^^1^1^3130514^
"^DD",365,365,12.01,23,1,0)
Source: 271 HL7 message ZMP.2
"^DD",365,365,12.01,"DT")
3130514
"^DD",365,365,12.02,0)
MILITARY EMPLOYMENT STATUS^P365.046^IBE(365.046,^12;2^Q
"^DD",365,365,12.02,3)
Select the appropriate code for claimant's military employment status.
"^DD",365,365,12.02,21,0)
^^2^2^3130514^
"^DD",365,365,12.02,21,1,0)
Code showing the general military employment status of an
"^DD",365,365,12.02,21,2,0)
employee/claimant.
"^DD",365,365,12.02,23,0)
^^1^1^3130514^
"^DD",365,365,12.02,23,1,0)
Source: 271 HL7 message ZMP.3
"^DD",365,365,12.02,"DT")
3130514
"^DD",365,365,12.03,0)
MILITARY GOVT AFFILIATION CODE^P365.041^IBE(365.041,^12;3^Q
"^DD",365,365,12.03,3)
Select the code that supports the claimant's military affiliation.
"^DD",365,365,12.03,21,0)
^^1^1^3130514^^
"^DD",365,365,12.03,21,1,0)
Code specifying the military service affiliation.
"^DD",365,365,12.03,23,0)
^^1^1^3130514^
"^DD",365,365,12.03,23,1,0)
Source: 271 HL7 message ZMP.4
"^DD",365,365,12.03,"DT")
3130612
"^DD",365,365,12.04,0)
MILITARY PERSONNEL DESCRIPTION^F^^12;4^K:$L(X)>80!($L(X)<1) X
"^DD",365,365,12.04,3)
Answer must be 1-80 characters in length.
"^DD",365,365,12.04,21,0)
^^2^2^3130514^
"^DD",365,365,12.04,21,1,0)
Free-form text description that further identifies the exact military
"^DD",365,365,12.04,21,2,0)
unit.
"^DD",365,365,12.04,23,0)
^^1^1^3130514^
"^DD",365,365,12.04,23,1,0)
Source: 271 HL7 message ZMP.5
"^DD",365,365,12.04,"DT")
3130514
"^DD",365,365,12.05,0)
MILITARY SERVICE RANK CODE^P365.042^IBE(365.042,^12;5^Q
"^DD",365,365,12.05,3)
Select the Military Service Rank code.
"^DD",365,365,12.05,21,0)
^^1^1^3130514^
"^DD",365,365,12.05,21,1,0)
Code specifying the military service rank.
"^DD",365,365,12.05,23,0)
^^1^1^3130514^
"^DD",365,365,12.05,23,1,0)
Source: 271 HL7 message ZMP.6
"^DD",365,365,12.05,"DT")
3130521
"^DD",365,365,12.06,0)
DATE TIME PERIOD FORMAT QUAL^P365.032^IBE(365.032,^12;6^Q
"^DD",365,365,12.06,3)
Select the qualifier for the date time period.
"^DD",365,365,12.06,21,0)
^^2^2^3130515^
"^DD",365,365,12.06,21,1,0)
Code qualifier indicating the date format, time format, or date and time
"^DD",365,365,12.06,21,2,0)
format respective of the DATE TIME PERIOD field (#12.07).
"^DD",365,365,12.06,23,0)
^^1^1^3130514^^
"^DD",365,365,12.06,23,1,0)
Source: 271 HL7 message ZMP.7
"^DD",365,365,12.06,"DT")
3130515
"^DD",365,365,12.07,0)
DATE TIME PERIOD^F^^12;7^K:$L(X)>17!($L(X)<8)!'(X?8N!(X?8N1"-"8N)) X
"^DD",365,365,12.07,3)
Answer must be 8-17 characters in length.
"^DD",365,365,12.07,21,0)
^^2^2^3130514^
"^DD",365,365,12.07,21,1,0)
Expression of a date or range of dates that indicates the date span of
"^DD",365,365,12.07,21,2,0)
military service.
"^DD",365,365,12.07,23,0)
^^1^1^3130312^^
"^DD",365,365,12.07,23,1,0)
Source: 271 HL7 message ZMP.8
"^DD",365,365,12.07,"DT")
3130514
"^DD",365,365,13.01,0)
NAME OF INSURED^FX^^13;1^K:$L(X)>130!($L(X)<1)!'$$LENCHK^IBCNEUT1(X,30,0) X
"^DD",365,365,13.01,.1)
Subscriber
"^DD",365,365,13.01,1,0)
^.1
"^DD",365,365,13.01,1,1,0)
^^TRIGGER^365^1.01
"^DD",365,365,13.01,1,1,1)
X ^DD(365,13.01,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,1)):^(1),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y S X=DIV S X=$E($P(^IBCN(365,DA,13),U),1,30) X ^DD(365,13.01,1,1,1.4)
"^DD",365,365,13.01,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBCN(365,DA,1),U)'=$E($P(^IBCN(365,DA,13),U),1,30))
"^DD",365,365,13.01,1,1,1.4)
S DIH=$G(^IBCN(365,DIV(0),1)),DIV=X S $P(^(1),U,1)=DIV,DIH=365,DIG=1.01 D ^DICR
"^DD",365,365,13.01,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBCN(365,DA,13),U)="") I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,1)):^(1),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y S X="" X ^DD(365,13.01,1,1,2.4)
"^DD",365,365,13.01,1,1,2.4)
S DIH=$G(^IBCN(365,DIV(0),1)),DIV=X S $P(^(1),U,1)=DIV,DIH=365,DIG=1.01 D ^DICR
"^DD",365,365,13.01,1,1,"%D",0)
^.101^1^1^3131029^^
"^DD",365,365,13.01,1,1,"%D",1,0)
Triggers field 1.01 if its value differs from first 30 chars of the value in this field. Deletes field 1.01 if field 13.01 is deleted.
"^DD",365,365,13.01,1,1,"CREATE CONDITION")
S X=($P(^IBCN(365,DA,1),U)'=$E($P(^IBCN(365,DA,13),U),1,30))
"^DD",365,365,13.01,1,1,"CREATE VALUE")
S X=$E($P(^IBCN(365,DA,13),U),1,30)
"^DD",365,365,13.01,1,1,"DELETE CONDITION")
S X=($P(^IBCN(365,DA,13),U)="")
"^DD",365,365,13.01,1,1,"DELETE VALUE")
@
"^DD",365,365,13.01,1,1,"DT")
3131017
"^DD",365,365,13.01,1,1,"FIELD")
*NAME OF INSURED
"^DD",365,365,13.01,3)
Answer must be 1-30 characters in length.
"^DD",365,365,13.01,5,1,0)
365^1.01^1
"^DD",365,365,13.01,21,0)
^^3^3^3130408^
"^DD",365,365,13.01,21,1,0)
This is the name of the insured person in LastName,FirstName MI format. 
"^DD",365,365,13.01,21,2,0)
If the patient is the subscriber, this field is the same. If the patient 
"^DD",365,365,13.01,21,3,0)
is a dependent, the subscriber's name is stored here.
"^DD",365,365,13.01,23,0)
^^2^2^3130605^
"^DD",365,365,13.01,23,1,0)
Replaces field 1.01. Length of this field is temporarily limited to 30 
"^DD",365,365,13.01,23,2,0)
characters.
"^DD",365,365,13.01,"DT")
3131120
"^DD",365,365,13.02,0)
SUBSCRIBER ID^FX^^13;2^K:$L(X)>80!($L(X)<1)!'$$LENCHK^IBCNEUT1(X,20,0) X
"^DD",365,365,13.02,.1)
Subscriber ID
"^DD",365,365,13.02,1,0)
^.1
"^DD",365,365,13.02,1,1,0)
^^TRIGGER^365^1.05
"^DD",365,365,13.02,1,1,1)
X ^DD(365,13.02,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,1)):^(1),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X=DIV S X=$E($P(^IBCN(365,DA,13),U,2),1,20) X ^DD(365,13.02,1,1,1.4)
"^DD",365,365,13.02,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBCN(365,DA,1),U,5)'=$E($P(^IBCN(365,DA,13),U,2),1,20))
"^DD",365,365,13.02,1,1,1.4)
S DIH=$G(^IBCN(365,DIV(0),1)),DIV=X S $P(^(1),U,5)=DIV,DIH=365,DIG=1.05 D ^DICR
"^DD",365,365,13.02,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBCN(365,DA,13),U,2)="") I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,1)):^(1),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X="" X ^DD(365,13.02,1,1,2.4)
"^DD",365,365,13.02,1,1,2.4)
S DIH=$G(^IBCN(365,DIV(0),1)),DIV=X S $P(^(1),U,5)=DIV,DIH=365,DIG=1.05 D ^DICR
"^DD",365,365,13.02,1,1,"%D",0)
^.101^1^1^3131029^^
"^DD",365,365,13.02,1,1,"%D",1,0)
Triggers field 1.05 if its value differs from first 20 chars of the value in this field. Deletes field 1.05 if field 13.02 is deleted.
"^DD",365,365,13.02,1,1,"CREATE CONDITION")
S X=($P(^IBCN(365,DA,1),U,5)'=$E($P(^IBCN(365,DA,13),U,2),1,20))
"^DD",365,365,13.02,1,1,"CREATE VALUE")
S X=$E($P(^IBCN(365,DA,13),U,2),1,20)
"^DD",365,365,13.02,1,1,"DELETE CONDITION")
S X=($P(^IBCN(365,DA,13),U,2)="")
"^DD",365,365,13.02,1,1,"DELETE VALUE")
@
"^DD",365,365,13.02,1,1,"DT")
3131018
"^DD",365,365,13.02,1,1,"FIELD")
*SUBSCRIBER ID
"^DD",365,365,13.02,3)
Answer must be 1-20 characters in length.
"^DD",365,365,13.02,5,1,0)
365^1.05^1
"^DD",365,365,13.02,21,0)
^^1^1^3130408^
"^DD",365,365,13.02,21,1,0)
The subscriber identification of the insured person.
"^DD",365,365,13.02,23,0)
^^2^2^3130605^
"^DD",365,365,13.02,23,1,0)
Replaces field 1.05. Length of this field is temporarily limited to 20 
"^DD",365,365,13.02,23,2,0)
characters.
"^DD",365,365,13.02,"DT")
3131120
"^DD",365,365,14.01,0)
GROUP NAME^FX^^14;1^K:$L(X)>80!($L(X)<1)!'$$LENCHK^IBCNEUT1(X,20,0) X
"^DD",365,365,14.01,.1)
Group Name
"^DD",365,365,14.01,1,0)
^.1
"^DD",365,365,14.01,1,1,0)
^^TRIGGER^365^1.06
"^DD",365,365,14.01,1,1,1)
X ^DD(365,14.01,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,1)):^(1),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X=DIV S X=$E($P(^IBCN(365,DA,14),U),1,20) X ^DD(365,14.01,1,1,1.4)
"^DD",365,365,14.01,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBCN(365,DA,1),U,6)'=$E($P(^IBCN(365,DA,14),U),1,20))
"^DD",365,365,14.01,1,1,1.4)
S DIH=$G(^IBCN(365,DIV(0),1)),DIV=X S $P(^(1),U,6)=DIV,DIH=365,DIG=1.06 D ^DICR
"^DD",365,365,14.01,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBCN(365,DA,14),U)="") I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,1)):^(1),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" X ^DD(365,14.01,1,1,2.4)
"^DD",365,365,14.01,1,1,2.4)
S DIH=$G(^IBCN(365,DIV(0),1)),DIV=X S $P(^(1),U,6)=DIV,DIH=365,DIG=1.06 D ^DICR
"^DD",365,365,14.01,1,1,"%D",0)
^.101^1^1^3131029^^
"^DD",365,365,14.01,1,1,"%D",1,0)
Triggers field 1.06 if its value differs from first 20 chars of the value in this field. Deletes field 1.06 if field 14.01 is deleted.
"^DD",365,365,14.01,1,1,"CREATE CONDITION")
S X=($P(^IBCN(365,DA,1),U,6)'=$E($P(^IBCN(365,DA,14),U),1,20))
"^DD",365,365,14.01,1,1,"CREATE VALUE")
S X=$E($P(^IBCN(365,DA,14),U),1,20)
"^DD",365,365,14.01,1,1,"DELETE CONDITION")
S X=($P(^IBCN(365,DA,14),U)="")
"^DD",365,365,14.01,1,1,"DELETE VALUE")
@
"^DD",365,365,14.01,1,1,"DT")
3131018
"^DD",365,365,14.01,1,1,"FIELD")
*GROUP NAME
"^DD",365,365,14.01,3)
Answer must be 1-20 characters in length.
"^DD",365,365,14.01,5,1,0)
365^1.06^1
"^DD",365,365,14.01,21,0)
^^1^1^3130408^
"^DD",365,365,14.01,21,1,0)
The name of the group or plan if not an individual policy.
"^DD",365,365,14.01,23,0)
^^2^2^3130605^
"^DD",365,365,14.01,23,1,0)
Replaces field 1.06. Length of this field is temporarily limited to 20 
"^DD",365,365,14.01,23,2,0)
characters.
"^DD",365,365,14.01,"DT")
3131120
"^DD",365,365,14.02,0)
GROUP NUMBER^FX^^14;2^K:$L(X)>55!($L(X)<1)!'$$LENCHK^IBCNEUT1(X,17,0) X
"^DD",365,365,14.02,.1)
Group ID
"^DD",365,365,14.02,1,0)
^.1
"^DD",365,365,14.02,1,1,0)
^^TRIGGER^365^1.07
"^DD",365,365,14.02,1,1,1)
X ^DD(365,14.02,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,1)):^(1),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X=DIV S X=$E($P(^IBCN(365,DA,14),U,2),1,17) X ^DD(365,14.02,1,1,1.4)
"^DD",365,365,14.02,1,1,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBCN(365,DA,1),U,7)'=$E($P(^IBCN(365,DA,14),U,2),1,17))
"^DD",365,365,14.02,1,1,1.4)
S DIH=$G(^IBCN(365,DIV(0),1)),DIV=X S $P(^(1),U,7)=DIV,DIH=365,DIG=1.07 D ^DICR
"^DD",365,365,14.02,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=($P(^IBCN(365,DA,14),U,2)="") I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,1)):^(1),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X="" X ^DD(365,14.02,1,1,2.4)
"^DD",365,365,14.02,1,1,2.4)
S DIH=$G(^IBCN(365,DIV(0),1)),DIV=X S $P(^(1),U,7)=DIV,DIH=365,DIG=1.07 D ^DICR
"^DD",365,365,14.02,1,1,"%D",0)
^.101^1^1^3131029^^
"^DD",365,365,14.02,1,1,"%D",1,0)
Triggers field 1.07 if its value differs from first 17 chars of the value in this field. Deletes field 1.07 if field 14.02 is deleted.
"^DD",365,365,14.02,1,1,"CREATE CONDITION")
S X=($P(^IBCN(365,DA,1),U,7)'=$E($P(^IBCN(365,DA,14),U,2),1,17))
"^DD",365,365,14.02,1,1,"CREATE VALUE")
S X=$E($P(^IBCN(365,DA,14),U,2),1,17)
"^DD",365,365,14.02,1,1,"DELETE CONDITION")
S X=($P(^IBCN(365,DA,14),U,2)="")
"^DD",365,365,14.02,1,1,"DELETE VALUE")
@
"^DD",365,365,14.02,1,1,"DT")
3131018
"^DD",365,365,14.02,1,1,"FIELD")
*GROUP NUMBER
"^DD",365,365,14.02,3)
Answer must be 1-17 characters in length.
"^DD",365,365,14.02,5,1,0)
365^1.07^1
"^DD",365,365,14.02,21,0)
^^1^1^3130408^
"^DD",365,365,14.02,21,1,0)
The number that identifies the group or plan.
"^DD",365,365,14.02,23,0)
^^2^2^3130605^
"^DD",365,365,14.02,23,1,0)
Replaces field 1.07. Length of this field is temporarily limited to 17 
"^DD",365,365,14.02,23,2,0)
characters.
"^DD",365,365,14.02,"DT")
3131120
"^DD",365,365.01,0)
HEALTH CARE CODE INFORMATION SUB-FIELD^^.04^4
"^DD",365,365.01,0,"DT")
3130522
"^DD",365,365.01,0,"IX","B",365.01,.01)

"^DD",365,365.01,0,"NM","HEALTH CARE CODE INFORMATION")

"^DD",365,365.01,0,"UP")
365
"^DD",365,365.01,.01,0)
SEQUENCE^RNJ5,0^^0;1^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."1.N) X
"^DD",365,365.01,.01,1,0)
^.1
"^DD",365,365.01,.01,1,1,0)
365.01^B
"^DD",365,365.01,.01,1,1,1)
S ^IBCN(365,DA(1),11,"B",$E(X,1,30),DA)=""
"^DD",365,365.01,.01,1,1,2)
K ^IBCN(365,DA(1),11,"B",$E(X,1,30),DA)
"^DD",365,365.01,.01,3)
Type a number between 1 and 99999, 0 decimal digits.
"^DD",365,365.01,.01,21,0)
^^2^2^3130610^
"^DD",365,365.01,.01,21,1,0)
This field contains a sequential number generated at the time a record is
"^DD",365,365.01,.01,21,2,0)
stored in the subfile.  
"^DD",365,365.01,.01,23,0)
^^1^1^3130522^
"^DD",365,365.01,.01,23,1,0)
Sequential number 1..N, assigned automatically.
"^DD",365,365.01,.01,"DT")
3130610
"^DD",365,365.01,.02,0)
DIAGNOSIS CODE^P80'^ICD9(^0;2^Q
"^DD",365,365.01,.02,3)
Select the diagnosis code.
"^DD",365,365.01,.02,21,0)
^^2^2^3130522^
"^DD",365,365.01,.02,21,1,0)
Diagnosis Code sent by the payer in response to the insurance eligibility
"^DD",365,365.01,.02,21,2,0)
inquiry.
"^DD",365,365.01,.02,23,0)
^^2^2^3130522^
"^DD",365,365.01,.02,23,1,0)
Source:  Health Care Diagnosis Code information in the X12 271 HI segment
"^DD",365,365.01,.02,23,2,0)
in these X12 loops: 2100C, 2100D.   271 HL7 message DG1.3.1
"^DD",365,365.01,.02,"DT")
3130522
"^DD",365,365.01,.03,0)
DIAGNOSIS CODE QUALIFIER^F^^0;3^K:$L(X)>10!($L(X)<1) X
"^DD",365,365.01,.03,3)
Answer must be 1-10 characters in length.
"^DD",365,365.01,.03,10)
 
"^DD",365,365.01,.03,21,0)
^^2^2^3130522^
"^DD",365,365.01,.03,21,1,0)
Diagnosis Type Code identifying a specific industry code list ICD-9 or
"^DD",365,365.01,.03,21,2,0)
ICD-10.
"^DD",365,365.01,.03,23,0)
^^13^13^3130522^
"^DD",365,365.01,.03,23,1,0)
Source: 271 HL7 message DG1.3.3
"^DD",365,365.01,.03,23,2,0)
 
"^DD",365,365.01,.03,23,3,0)
ABK or BK" - represent ICD-10-CM and ICD-9-CM principal diagnosis code
"^DD",365,365.01,.03,23,4,0)
qualifiers. These qualifiers also represent the code as a primary code.
"^DD",365,365.01,.03,23,5,0)
                                                                   
"^DD",365,365.01,.03,23,6,0)
"ABF or BF" - also represent ICD-10-CM and ICD-9-CM diagnosis code
"^DD",365,365.01,.03,23,7,0)
qualifiers and these qualifiers represent the code as a secondary code.
"^DD",365,365.01,.03,23,8,0)
                                                      
"^DD",365,365.01,.03,23,9,0)
When the payer sends an ABK or an ABF, the Eligibility Communicator will
"^DD",365,365.01,.03,23,10,0)
map these to the HL7 code "I10C".
"^DD",365,365.01,.03,23,11,0)
     
"^DD",365,365.01,.03,23,12,0)
When the payer sends an ABK or an ABF, the Eligibility Communicator will
"^DD",365,365.01,.03,23,13,0)
map these to the HL7 code "I9C".
"^DD",365,365.01,.03,"DT")
3130522
"^DD",365,365.01,.04,0)
PRIMARY OR SECONDARY?^S^P:PRIMARY;S:SECONDARY;^0;4^Q
"^DD",365,365.01,.04,3)
Does this code represent a primary or secondary diagnosis?
"^DD",365,365.01,.04,21,0)
^^2^2^3130522^
"^DD",365,365.01,.04,21,1,0)
This field indicates whether the code in the DIAGNOSIS CODE (#.02) field
"^DD",365,365.01,.04,21,2,0)
is a primary or secondary diagnosis.
"^DD",365,365.01,.04,"DT")
3130522
"^DD",365,365.02,.02,0)
ELIGIBILITY/BENEFIT INFO^P365.011^IBE(365.011,^0;2^Q
"^DD",365,365.02,.02,.1)
Elig/Ben Info
"^DD",365,365.02,.02,3)
Enter an eligibility/benefit code from the list.
"^DD",365,365.02,.02,21,0)
^^2^2^3091013^
"^DD",365,365.02,.02,21,1,0)
This field contains a code identifying the eligibility status
"^DD",365,365.02,.02,21,2,0)
of the individual or the benefit returned by the Payer.
"^DD",365,365.02,.02,23,0)
^^1^1^3091013^
"^DD",365,365.02,.02,23,1,0)
It corresponds to X.12 271 EB01 data element.
"^DD",365,365.02,.02,"DT")
3130307
"^DD",365,365.02,.03,0)
COVERAGE LEVEL^P365.012^IBE(365.012,^0;3^Q
"^DD",365,365.02,.03,.1)
Coverage Level
"^DD",365,365.02,.03,3)
Enter a coverage level code from the list.
"^DD",365,365.02,.03,21,0)
^^1^1^3091013^
"^DD",365,365.02,.03,21,1,0)
This field identifies the level of coverage of benefits.
"^DD",365,365.02,.03,23,0)
^^1^1^3091013^
"^DD",365,365.02,.03,23,1,0)
It corresponds to X.12 271 EB02 data element.
"^DD",365,365.02,.03,"DT")
3130307
"^DD",365,365.02,.05,0)
INSURANCE TYPE^P365.014^IBE(365.014,^0;5^Q
"^DD",365,365.02,.05,.1)
Insurance Type
"^DD",365,365.02,.05,3)
Enter the insurance type code from the list.
"^DD",365,365.02,.05,21,0)
^^2^2^3100428^
"^DD",365,365.02,.05,21,1,0)
This is a code identifying the type of insurance policy within
"^DD",365,365.02,.05,21,2,0)
a specific insurance program.
"^DD",365,365.02,.05,23,0)
^^1^1^3091013^
"^DD",365,365.02,.05,23,1,0)
It corresponds to X.12 271 EB04 data element.
"^DD",365,365.02,.05,"DT")
3130307
"^DD",365,365.02,.07,0)
TIME PERIOD QUALIFIER^P365.015^IBE(365.015,^0;7^Q
"^DD",365,365.02,.07,.1)
Time Period
"^DD",365,365.02,.07,3)
Enter the type of time period code from the list.
"^DD",365,365.02,.07,21,0)
^^2^2^3100428^
"^DD",365,365.02,.07,21,1,0)
This is a code for the time period category that determines for how long 
"^DD",365,365.02,.07,21,2,0)
the benefits are available.
"^DD",365,365.02,.07,23,0)
^^1^1^3091013^
"^DD",365,365.02,.07,23,1,0)
It corresponds to X.12 271 EB06 data element.
"^DD",365,365.02,.07,"DT")
3130307
"^DD",365,365.02,.08,0)
MONETARY AMOUNT^FX^^0;8^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(+X>999999999999999)!(+X<0)!(X?.E1"."3.N) X
"^DD",365,365.02,.08,3)
Type a dollar amount between 0 and 999999999999999, 2 decimal digits.
"^DD",365,365.02,.08,21,0)
^.001^2^2^3130211^^^
"^DD",365,365.02,.08,21,1,0)
This field is populated if eligibility or benefit must be
"^DD",365,365.02,.08,21,2,0)
qualified by a monetary amount.
"^DD",365,365.02,.08,23,0)
^.001^1^1^3130211^^^
"^DD",365,365.02,.08,23,1,0)
It corresponds to X.12 271 EB07 data element.
"^DD",365,365.02,.08,"DT")
3130612
"^DD",365,365.02,.1,0)
QUANTITY QUALIFIER^P365.016^IBE(365.016,^0;10^Q
"^DD",365,365.02,.1,.1)
Quantity
"^DD",365,365.02,.1,3)
Enter the type of quantity code from the list.
"^DD",365,365.02,.1,21,0)
^^2^2^3091013^
"^DD",365,365.02,.1,21,1,0)
This field is used to identify the type of units that are being
"^DD",365,365.02,.1,21,2,0)
conveyed in the QUANTITY field (#.11).
"^DD",365,365.02,.1,23,0)
^^1^1^3091013^
"^DD",365,365.02,.1,23,1,0)
It corresponds to X.12 271 EB09 data element.
"^DD",365,365.02,.1,"DT")
3130307
"^DD",365,365.02,.12,0)
AUTHORIZATION/CERTIFICATION^P365.033^IBE(365.033,^0;12^Q
"^DD",365,365.02,.12,.1)
Authorization/Certification
"^DD",365,365.02,.12,3)
Enter YES if authorization or certification is required.
"^DD",365,365.02,.12,21,0)
^^2^2^3091013^
"^DD",365,365.02,.12,21,1,0)
This field indicates that an authorization or certification
"^DD",365,365.02,.12,21,2,0)
is required per plan provisions.
"^DD",365,365.02,.12,23,0)
^^1^1^3091013^
"^DD",365,365.02,.12,23,1,0)
It corresponds to X.12 271 EB11 data element.
"^DD",365,365.02,.12,"DT")
3130326
"^DD",365,365.02,.13,0)
IN PLAN^P365.033^IBE(365.033,^0;13^Q
"^DD",365,365.02,.13,.1)
In-Plan-Network
"^DD",365,365.02,.13,3)
Enter YES if the benefits identified are In-Plan-Network.
"^DD",365,365.02,.13,21,0)
^^5^5^3091013^
"^DD",365,365.02,.13,21,1,0)
This field indicates the plan network indicator.  A YES value indicates
"^DD",365,365.02,.13,21,2,0)
the benefits identified are considered In-Plan-Network.  A NO value
"^DD",365,365.02,.13,21,3,0)
indicates that the benefits identified are considered 
"^DD",365,365.02,.13,21,4,0)
Out-Of-Plan-Network.  A "U" value indicates it is unknown whether the
"^DD",365,365.02,.13,21,5,0)
benefits identified are part of the Plan Network.
"^DD",365,365.02,.13,23,0)
^^1^1^3091013^
"^DD",365,365.02,.13,23,1,0)
It corresponds to X.12 271 EB12 data element.
"^DD",365,365.02,.13,"DT")
3130326
"^DD",365,365.02,1.01,0)
PROCEDURE CODING METHOD^P365.035^IBE(365.035,^1;1^Q
"^DD",365,365.02,1.01,3)
Enter the code describing procedure coding method.
"^DD",365,365.02,1.01,21,0)
^.001^1^1^3090710^^
"^DD",365,365.02,1.01,21,1,0)
Two character code describing procedure coding method.
"^DD",365,365.02,1.01,23,0)
^^1^1^3090710^
"^DD",365,365.02,1.01,23,1,0)
Source: 271 HL7 message, ZEB.14.1
"^DD",365,365.02,1.01,"DT")
3130307
"^DD",365,365.02,3.01,0)
ENTITY ID CODE^P365.022^IBE(365.022,^3;1^Q
"^DD",365,365.02,3.01,3)
Select X12 code for entity identifier.
"^DD",365,365.02,3.01,21,0)
^.001^1^1^3090710^^
"^DD",365,365.02,3.01,21,1,0)
X12 Entity Identifier Code.
"^DD",365,365.02,3.01,23,0)
^^1^1^3090710^
"^DD",365,365.02,3.01,23,1,0)
Source: 271 HL7 message, ZTY.2.1
"^DD",365,365.02,3.01,"DT")
3130305
"^DD",365,365.02,3.02,0)
ENTITY TYPE^P365.043^IBE(365.043,^3;2^Q
"^DD",365,365.02,3.02,3)
Select type of the entity.
"^DD",365,365.02,3.02,21,0)
^^1^1^3130305^
"^DD",365,365.02,3.02,21,1,0)
Describes the type of Entity.
"^DD",365,365.02,3.02,23,0)
^^1^1^3130305^^
"^DD",365,365.02,3.02,23,1,0)
Source: 271 HL7 message, ZTY.3.1
"^DD",365,365.02,3.02,"DT")
3130305
"^DD",365,365.02,3.05,0)
ENTITY ID QUALIFIER^P365.023^IBE(365.023,^3;5^Q
"^DD",365,365.02,3.05,3)
Select X12 code for ID qualifier.
"^DD",365,365.02,3.05,21,0)
^.001^1^1^3090710^^
"^DD",365,365.02,3.05,21,1,0)
Code designating the system/method used for Identification.
"^DD",365,365.02,3.05,23,0)
^^1^1^3090710^
"^DD",365,365.02,3.05,23,1,0)
Source: 271 HL7 message, ZTY.5.1
"^DD",365,365.02,3.05,"DT")
3130306
"^DD",365,365.02,3.06,0)
ENTITY RELATIONSHIP CODE^P365.031^IBE(365.031,^3;6^Q
"^DD",365,365.02,3.06,3)
Enter the code that represents the relationship to the patient.
"^DD",365,365.02,3.06,21,0)
^^1^1^3130318^
"^DD",365,365.02,3.06,21,1,0)
Benefit Related Entity's relationship to the patient.
"^DD",365,365.02,3.06,23,0)
^^1^1^3130318^
"^DD",365,365.02,3.06,23,1,0)
Source: 271 HL7 message ZTY.13 
"^DD",365,365.02,3.06,"DT")
3130318
"^DD",365,365.02,4.08,0)
LOCATION QUALIFIER^P365.034^IBE(365.034,^4;8^Q
"^DD",365,365.02,4.08,3)
Select location qualifier.
"^DD",365,365.02,4.08,21,0)
^.001^1^1^3090710^^
"^DD",365,365.02,4.08,21,1,0)
Entity address, location qualifier.
"^DD",365,365.02,4.08,23,0)
^^1^1^3130306^^
"^DD",365,365.02,4.08,23,1,0)
Source: 271 HL7 message, ZTY.8
"^DD",365,365.02,4.08,"DT")
3130306
"^DD",365,365.02,5.01,0)
PROVIDER CODE^P365.024^IBE(365.024,^5;1^Q
"^DD",365,365.02,5.01,3)
Select provider code.
"^DD",365,365.02,5.01,21,0)
^.001^1^1^3090713^^
"^DD",365,365.02,5.01,21,1,0)
Code identifying the type of provider.
"^DD",365,365.02,5.01,23,0)
^^1^1^3090713^
"^DD",365,365.02,5.01,23,1,0)
Source: 271 HL7 message, ZTY.10.1
"^DD",365,365.02,5.01,"DT")
3130306
"^DD",365,365.02,5.03,0)
REFERENCE ID QUALIFIER^P365.028^IBE(365.028,^5;3^Q
"^DD",365,365.02,5.03,3)
Select reference id qualifier.
"^DD",365,365.02,5.03,21,0)
^.001^1^1^3090713^^
"^DD",365,365.02,5.03,21,1,0)
Reference identifier type.
"^DD",365,365.02,5.03,23,0)
^^1^1^3090713^
"^DD",365,365.02,5.03,23,1,0)
Source: 271 HL7 message, ZTY.11.1
"^DD",365,365.02,5.03,"DT")
3130306
"^DD",365,365.02,14,0)
SERVICE TYPES^365.292PA^^14;0
"^DD",365,365.02,14,21,0)
^^1^1^3130506^
"^DD",365,365.02,14,21,1,0)
Contains the Service type codes returned from eligibility inquiry.
"^DD",365,365.03,.03,0)
*COMMUNICATION NUMBER #1^F^^0;3^K:$L(X)>20!($L(X)<1) X
"^DD",365,365.03,.03,1,0)
^.1
"^DD",365,365.03,.03,1,1,0)
^^TRIGGER^365.03^1
"^DD",365,365.03,.03,1,1,1)
X ^DD(365.03,.03,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,3,D1,1)):^(1),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y S X=DIV S X=$P(^IBCN(365,DA(1),3,DA,0),U,3) X ^DD(365.03,.03,1,1,1.4)
"^DD",365,365.03,.03,1,1,1.3)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S X=($P(^IBCN(365,DA(1),3,DA,0),U,3)'=$E($P($G(^IBCN(365,DA(1),3,DA,1)),U),1,20))
"^DD",365,365.03,.03,1,1,1.4)
S DIH=$G(^IBCN(365,DIV(0),3,DIV(1),1)),DIV=X S $P(^(1),U,1)=DIV,DIH=365.03,DIG=1 D ^DICR
"^DD",365,365.03,.03,1,1,2)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S X=($P(^IBCN(365,DA(1),3,DA,0),U,3)="") I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,3,D1,1)):^(1),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y S X="" X ^DD(365.03,.03,1,1,2.4)
"^DD",365,365.03,.03,1,1,2.4)
S DIH=$G(^IBCN(365,DIV(0),3,DIV(1),1)),DIV=X S $P(^(1),U,1)=DIV,DIH=365.03,DIG=1 D ^DICR
"^DD",365,365.03,.03,1,1,"%D",0)
^.101^1^1^3131029^^
"^DD",365,365.03,.03,1,1,"%D",1,0)
Triggers field 365.03/1 if first 20 chars of its value differ from the value in this field. Deletes field 365.03/1 if field 365.03/.03 is deleted.
"^DD",365,365.03,.03,1,1,"CREATE CONDITION")
S X=($P(^IBCN(365,DA(1),3,DA,0),U,3)'=$E($P($G(^IBCN(365,DA(1),3,DA,1)),U),1,20))
"^DD",365,365.03,.03,1,1,"CREATE VALUE")
S X=$P(^IBCN(365,DA(1),3,DA,0),U,3)
"^DD",365,365.03,.03,1,1,"DELETE CONDITION")
S X=($P(^IBCN(365,DA(1),3,DA,0),U,3)="")
"^DD",365,365.03,.03,1,1,"DELETE VALUE")
@
"^DD",365,365.03,.03,1,1,"DT")
3131018
"^DD",365,365.03,.03,1,1,"FIELD")
COMMUNICATION NUMBER #1 (LONG)
"^DD",365,365.03,.03,3)
Answer must be 1-20 characters in length.
"^DD",365,365.03,.03,5,1,0)
365.03^1^1
"^DD",365,365.03,.03,21,0)
^^5^5^3131120^
"^DD",365,365.03,.03,21,1,0)
This is the value of the information defined in the COMMUNICATION 
"^DD",365,365.03,.03,21,2,0)
QUALIFIER #1 field (field .02). It could be a phone number or email 
"^DD",365,365.03,.03,21,3,0)
address, etc.
"^DD",365,365.03,.03,21,4,0)
 
"^DD",365,365.03,.03,21,5,0)
This field is scheduled for deletion in May 2015.
"^DD",365,365.03,.03,"DT")
3131120
"^DD",365,365.03,.05,0)
*COMMUNICATION NUMBER #2^F^^0;5^K:$L(X)>20!($L(X)<1) X
"^DD",365,365.03,.05,1,0)
^.1
"^DD",365,365.03,.05,1,1,0)
^^TRIGGER^365.03^2
"^DD",365,365.03,.05,1,1,1)
X ^DD(365.03,.05,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,3,D1,2)):^(2),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y S X=DIV S X=$P(^IBCN(365,DA(1),3,DA,0),U,5) X ^DD(365.03,.05,1,1,1.4)
"^DD",365,365.03,.05,1,1,1.3)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S X=($P(^IBCN(365,DA(1),3,DA,0),U,5)'=$E($P($G(^IBCN(365,DA(1),3,DA,2)),U),1,20))
"^DD",365,365.03,.05,1,1,1.4)
S DIH=$G(^IBCN(365,DIV(0),3,DIV(1),2)),DIV=X S $P(^(2),U,1)=DIV,DIH=365.03,DIG=2 D ^DICR
"^DD",365,365.03,.05,1,1,2)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S X=($P(^IBCN(365,DA(1),3,DA,0),U,5)="") I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,3,D1,2)):^(2),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y S X="" X ^DD(365.03,.05,1,1,2.4)
"^DD",365,365.03,.05,1,1,2.4)
S DIH=$G(^IBCN(365,DIV(0),3,DIV(1),2)),DIV=X S $P(^(2),U,1)=DIV,DIH=365.03,DIG=2 D ^DICR
"^DD",365,365.03,.05,1,1,"%D",0)
^.101^1^1^3131029^^
"^DD",365,365.03,.05,1,1,"%D",1,0)
Triggers field 365.03/2 if first 20 chars of its value differ from the value in this field. Deletes field 365.03/2 if field 365.03/.05 is deleted.
"^DD",365,365.03,.05,1,1,"CREATE CONDITION")
S X=($P(^IBCN(365,DA(1),3,DA,0),U,5)'=$E($P($G(^IBCN(365,DA(1),3,DA,2)),U),1,20))
"^DD",365,365.03,.05,1,1,"CREATE VALUE")
S X=$P(^IBCN(365,DA(1),3,DA,0),U,5)
"^DD",365,365.03,.05,1,1,"DELETE CONDITION")
S X=($P(^IBCN(365,DA(1),3,DA,0),U,5)="")
"^DD",365,365.03,.05,1,1,"DELETE VALUE")
@
"^DD",365,365.03,.05,1,1,"DT")
3131018
"^DD",365,365.03,.05,1,1,"FIELD")
COMMUNICATION NUMBER #2 (LONG)
"^DD",365,365.03,.05,3)
Answer must be 1-20 characters in length.
"^DD",365,365.03,.05,5,1,0)
365.03^2^1
"^DD",365,365.03,.05,21,0)
^^5^5^3131120^
"^DD",365,365.03,.05,21,1,0)
This is the value of the information defined in the COMMUNICATION 
"^DD",365,365.03,.05,21,2,0)
QUALIFIER #2 field (field .04). It could be a phone number or email 
"^DD",365,365.03,.05,21,3,0)
address, etc.
"^DD",365,365.03,.05,21,4,0)
 
"^DD",365,365.03,.05,21,5,0)
This field is scheduled for deletion in May 2015.
"^DD",365,365.03,.05,"DT")
3131120
"^DD",365,365.03,.07,0)
*COMMUNICATION NUMBER #3^F^^0;7^K:$L(X)>20!($L(X)<1) X
"^DD",365,365.03,.07,1,0)
^.1
"^DD",365,365.03,.07,1,1,0)
^^TRIGGER^365.03^3
"^DD",365,365.03,.07,1,1,1)
X ^DD(365.03,.07,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,3,D1,3)):^(3),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y S X=DIV S X=$P(^IBCN(365,DA(1),3,DA,0),U,7) X ^DD(365.03,.07,1,1,1.4)
"^DD",365,365.03,.07,1,1,1.3)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S X=($P(^IBCN(365,DA(1),3,DA,0),U,7)'=$E($P($G(^IBCN(365,DA(1),3,DA,3)),U),1,20))
"^DD",365,365.03,.07,1,1,1.4)
S DIH=$G(^IBCN(365,DIV(0),3,DIV(1),3)),DIV=X S $P(^(3),U,1)=DIV,DIH=365.03,DIG=3 D ^DICR
"^DD",365,365.03,.07,1,1,2)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S X=($P(^IBCN(365,DA(1),3,DA,0),U,7)="") I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,3,D1,3)):^(3),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y S X="" X ^DD(365.03,.07,1,1,2.4)
"^DD",365,365.03,.07,1,1,2.4)
S DIH=$G(^IBCN(365,DIV(0),3,DIV(1),3)),DIV=X S $P(^(3),U,1)=DIV,DIH=365.03,DIG=3 D ^DICR
"^DD",365,365.03,.07,1,1,"%D",0)
^.101^1^1^3131029^^
"^DD",365,365.03,.07,1,1,"%D",1,0)
Triggers field 365.03/3 if first 20 chars of its value differ from the value in this field. Deletes field 365.03/3 if field 365.03/.07 is deleted.
"^DD",365,365.03,.07,1,1,"CREATE CONDITION")
S X=($P(^IBCN(365,DA(1),3,DA,0),U,7)'=$E($P($G(^IBCN(365,DA(1),3,DA,3)),U),1,20))
"^DD",365,365.03,.07,1,1,"CREATE VALUE")
S X=$P(^IBCN(365,DA(1),3,DA,0),U,7)
"^DD",365,365.03,.07,1,1,"DELETE CONDITION")
S X=($P(^IBCN(365,DA(1),3,DA,0),U,7)="")
"^DD",365,365.03,.07,1,1,"DELETE VALUE")
@
"^DD",365,365.03,.07,1,1,"DT")
3131018
"^DD",365,365.03,.07,1,1,"FIELD")
COMMUNICATION NUMBER #3 (LONG)
"^DD",365,365.03,.07,3)
Answer must be 1-20 characters in length.
"^DD",365,365.03,.07,5,1,0)
365.03^3^1
"^DD",365,365.03,.07,21,0)
^^5^5^3131120^
"^DD",365,365.03,.07,21,1,0)
This is the value of the information defined in the COMMUNICATION 
"^DD",365,365.03,.07,21,2,0)
QUALIFIER #3 field (field .06). It could be a phone number or email 
"^DD",365,365.03,.07,21,3,0)
address, etc.
"^DD",365,365.03,.07,21,4,0)
 
"^DD",365,365.03,.07,21,5,0)
This field is scheduled for deletion in May 2015.
"^DD",365,365.03,.07,"DT")
3131120
"^DD",365,365.03,1,0)
COMMUNICATION NUMBER #1^FX^^1;1^K:$L(X)>245!($L(X)<1) X
"^DD",365,365.03,1,1,0)
^.1
"^DD",365,365.03,1,1,1,0)
^^TRIGGER^365.03^.03
"^DD",365,365.03,1,1,1,1)
X ^DD(365.03,1,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,3,D1,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X=DIV S X=$E($P(^IBCN(365,DA(1),3,DA,1),U),1,20) X ^DD(365.03,1,1,1,1.4)
"^DD",365,365.03,1,1,1,1.3)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S X=($P(^IBCN(365,DA(1),3,DA,0),U,3)'=$E($P(^IBCN(365,DA(1),3,DA,1),U),1,20))
"^DD",365,365.03,1,1,1,1.4)
S DIH=$G(^IBCN(365,DIV(0),3,DIV(1),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=365.03,DIG=.03 D ^DICR
"^DD",365,365.03,1,1,1,2)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S X=($P(^IBCN(365,DA(1),3,DA,1),U)="") I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,3,D1,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" X ^DD(365.03,1,1,1,2.4)
"^DD",365,365.03,1,1,1,2.4)
S DIH=$G(^IBCN(365,DIV(0),3,DIV(1),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=365.03,DIG=.03 D ^DICR
"^DD",365,365.03,1,1,1,"%D",0)
^.101^1^1^3131029^^
"^DD",365,365.03,1,1,1,"%D",1,0)
Triggers field 365.03/.03 if its value differs from first 20 chars of the value in this field. Deletes field 365.03/.03 if field 365.03/1 is deleted.
"^DD",365,365.03,1,1,1,"CREATE CONDITION")
S X=($P(^IBCN(365,DA(1),3,DA,0),U,3)'=$E($P(^IBCN(365,DA(1),3,DA,1),U),1,20))
"^DD",365,365.03,1,1,1,"CREATE VALUE")
S X=$E($P(^IBCN(365,DA(1),3,DA,1),U),1,20)
"^DD",365,365.03,1,1,1,"DELETE CONDITION")
S X=($P(^IBCN(365,DA(1),3,DA,1),U)="")
"^DD",365,365.03,1,1,1,"DELETE VALUE")
@
"^DD",365,365.03,1,1,1,"DT")
3131018
"^DD",365,365.03,1,1,1,"FIELD")
COMMUNICATION NUMBER #1
"^DD",365,365.03,1,3)
Answer must be 1-245 characters in length.
"^DD",365,365.03,1,5,1,0)
365.03^.03^1
"^DD",365,365.03,1,21,0)
^^3^3^3130605^
"^DD",365,365.03,1,21,1,0)
This is the value of the information defined in the COMMUNICATION 
"^DD",365,365.03,1,21,2,0)
QUALIFIER #1 field (field .02). It could be a phone number or email 
"^DD",365,365.03,1,21,3,0)
address, etc.
"^DD",365,365.03,1,23,0)
^^1^1^3130605^
"^DD",365,365.03,1,23,1,0)
Replaces field .03.
"^DD",365,365.03,1,"DT")
3131120
"^DD",365,365.03,2,0)
COMMUNICATION NUMBER #2^FX^^2;1^K:$L(X)>245!($L(X)<1) X
"^DD",365,365.03,2,1,0)
^.1
"^DD",365,365.03,2,1,1,0)
^^TRIGGER^365.03^.05
"^DD",365,365.03,2,1,1,1)
X ^DD(365.03,2,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,3,D1,0)):^(0),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X=DIV S X=$E($P(^IBCN(365,DA(1),3,DA,2),U),1,20) X ^DD(365.03,2,1,1,1.4)
"^DD",365,365.03,2,1,1,1.3)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S X=($P(^IBCN(365,DA(1),3,DA,0),U,5)'=$E($P(^IBCN(365,DA(1),3,DA,2),U),1,20))
"^DD",365,365.03,2,1,1,1.4)
S DIH=$G(^IBCN(365,DIV(0),3,DIV(1),0)),DIV=X S $P(^(0),U,5)=DIV,DIH=365.03,DIG=.05 D ^DICR
"^DD",365,365.03,2,1,1,2)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S X=($P(^IBCN(365,DA(1),3,DA,2),U)="") I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,3,D1,0)):^(0),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X="" X ^DD(365.03,2,1,1,2.4)
"^DD",365,365.03,2,1,1,2.4)
S DIH=$G(^IBCN(365,DIV(0),3,DIV(1),0)),DIV=X S $P(^(0),U,5)=DIV,DIH=365.03,DIG=.05 D ^DICR
"^DD",365,365.03,2,1,1,"%D",0)
^.101^1^1^3131029^^
"^DD",365,365.03,2,1,1,"%D",1,0)
Triggers field 365.03/.05 if its value differs from first 20 chars of the value in this field. Deletes field 365.03/.05 if field 365.03/2 is deleted.
"^DD",365,365.03,2,1,1,"CREATE CONDITION")
S X=($P(^IBCN(365,DA(1),3,DA,0),U,5)'=$E($P(^IBCN(365,DA(1),3,DA,2),U),1,20))
"^DD",365,365.03,2,1,1,"CREATE VALUE")
S X=$E($P(^IBCN(365,DA(1),3,DA,2),U),1,20)
"^DD",365,365.03,2,1,1,"DELETE CONDITION")
S X=($P(^IBCN(365,DA(1),3,DA,2),U)="")
"^DD",365,365.03,2,1,1,"DELETE VALUE")
@
"^DD",365,365.03,2,1,1,"DT")
3131018
"^DD",365,365.03,2,1,1,"FIELD")
COMMUNICATION NUMBER #2
"^DD",365,365.03,2,3)
Answer must be 1-245 characters in length.
"^DD",365,365.03,2,5,1,0)
365.03^.05^1
"^DD",365,365.03,2,21,0)
^^3^3^3130605^
"^DD",365,365.03,2,21,1,0)
This is the value of the information defined in the COMMUNICATION 
"^DD",365,365.03,2,21,2,0)
QUALIFIER #2 field (field .04). It could be a phone number or email 
"^DD",365,365.03,2,21,3,0)
address, etc.
"^DD",365,365.03,2,23,0)
^^1^1^3130605^
"^DD",365,365.03,2,23,1,0)
Replaces field .05.
"^DD",365,365.03,2,"DT")
3131120
"^DD",365,365.03,3,0)
COMMUNICATION NUMBER #3^FX^^3;1^K:$L(X)>245!($L(X)<1) X
"^DD",365,365.03,3,1,0)
^.1
"^DD",365,365.03,3,1,1,0)
^^TRIGGER^365.03^.07
"^DD",365,365.03,3,1,1,1)
X ^DD(365.03,3,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,3,D1,0)):^(0),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X=DIV S X=$E($P(^IBCN(365,DA(1),3,DA,3),U),1,20) X ^DD(365.03,3,1,1,1.4)
"^DD",365,365.03,3,1,1,1.3)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S X=($P(^IBCN(365,DA(1),3,DA,0),U,7)'=$E($P(^IBCN(365,DA(1),3,DA,3),U),1,20))
"^DD",365,365.03,3,1,1,1.4)
S DIH=$G(^IBCN(365,DIV(0),3,DIV(1),0)),DIV=X S $P(^(0),U,7)=DIV,DIH=365.03,DIG=.07 D ^DICR
"^DD",365,365.03,3,1,1,2)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S X=($P(^IBCN(365,DA(1),3,DA,3),U)="") I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,3,D1,0)):^(0),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X="" X ^DD(365.03,3,1,1,2.4)
"^DD",365,365.03,3,1,1,2.4)
S DIH=$G(^IBCN(365,DIV(0),3,DIV(1),0)),DIV=X S $P(^(0),U,7)=DIV,DIH=365.03,DIG=.07 D ^DICR
"^DD",365,365.03,3,1,1,"%D",0)
^.101^1^1^3131029^^
"^DD",365,365.03,3,1,1,"%D",1,0)
Triggers field 365.03/.07 if its value differs from first 20 chars of the value in this field. Deletes field 365.03/.07 if field 365.03/3 is deleted.
"^DD",365,365.03,3,1,1,"CREATE CONDITION")
S X=($P(^IBCN(365,DA(1),3,DA,0),U,7)'=$E($P(^IBCN(365,DA(1),3,DA,3),U),1,20))
"^DD",365,365.03,3,1,1,"CREATE VALUE")
S X=$E($P(^IBCN(365,DA(1),3,DA,3),U),1,20)
"^DD",365,365.03,3,1,1,"DELETE CONDITION")
S X=($P(^IBCN(365,DA(1),3,DA,3),U)="")
"^DD",365,365.03,3,1,1,"DELETE VALUE")
@
"^DD",365,365.03,3,1,1,"DT")
3131018
"^DD",365,365.03,3,1,1,"FIELD")
COMMUNICATION NUMBER #3
"^DD",365,365.03,3,3)
Answer must be 1-245 characters in length.
"^DD",365,365.03,3,5,1,0)
365.03^.07^1
"^DD",365,365.03,3,21,0)
^^3^3^3130605^
"^DD",365,365.03,3,21,1,0)
This is the value of the information defined in the COMMUNICATION 
"^DD",365,365.03,3,21,2,0)
QUALIFIER #3 field (field .06). It could be a phone number or email 
"^DD",365,365.03,3,21,3,0)
address, etc.
"^DD",365,365.03,3,23,0)
^^1^1^3130605^
"^DD",365,365.03,3,23,1,0)
Replaces field .07.
"^DD",365,365.03,3,"DT")
3131120
"^DD",365,365.04,0)
GROUP PROVIDER INFO SUB-FIELD^^.03^3
"^DD",365,365.04,0,"DT")
3130522
"^DD",365,365.04,0,"IX","B",365.04,.01)

"^DD",365,365.04,0,"NM","GROUP PROVIDER INFO")

"^DD",365,365.04,0,"UP")
365
"^DD",365,365.04,.01,0)
SEQUENCE^MNJ5,0^^0;1^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."1.N) X
"^DD",365,365.04,.01,1,0)
^.1
"^DD",365,365.04,.01,1,1,0)
365.04^B
"^DD",365,365.04,.01,1,1,1)
S ^IBCN(365,DA(1),10,"B",$E(X,1,30),DA)=""
"^DD",365,365.04,.01,1,1,2)
K ^IBCN(365,DA(1),10,"B",$E(X,1,30),DA)
"^DD",365,365.04,.01,3)
Type a number between 1 and 99999, 0 decimal digits.
"^DD",365,365.04,.01,21,0)
^^2^2^3130610^
"^DD",365,365.04,.01,21,1,0)
This field contains a sequential number generated at the time a record is
"^DD",365,365.04,.01,21,2,0)
stored in the subfile.  
"^DD",365,365.04,.01,23,0)
^^1^1^3130522^
"^DD",365,365.04,.01,23,1,0)
Sequential number 1..N, assigned automatically.
"^DD",365,365.04,.01,"DT")
3130610
"^DD",365,365.04,.02,0)
PROVIDER CODE^P365.024^IBE(365.024,^0;2^Q
"^DD",365,365.04,.02,3)
Select the group provider code.
"^DD",365,365.04,.02,21,0)
^^1^1^3130522^
"^DD",365,365.04,.02,21,1,0)
Code that identifies the type of provider (e.g., "AD" for Admitting).
"^DD",365,365.04,.02,23,0)
^^2^2^3130522^
"^DD",365,365.04,.02,23,1,0)
Source:  X12 271 LOOPS 2100B, 2100C, 2100D. PRV01 PROVIDER CODE
"^DD",365,365.04,.02,23,2,0)
HL7 message, ROL.3.1
"^DD",365,365.04,.02,"DT")
3130522
"^DD",365,365.04,.03,0)
PROV REFERENCE ID^F^^0;3^K:$L(X)>50!($L(X)<1) X
"^DD",365,365.04,.03,3)
Describe provider's specialty type (1-50 characters).
"^DD",365,365.04,.03,21,0)
^^1^1^3130522^
"^DD",365,365.04,.03,21,1,0)
Provider specialty type identifier.
"^DD",365,365.04,.03,23,0)
^^2^2^3130522^
"^DD",365,365.04,.03,23,1,0)
Source: X12 271 LOOPS 2100B, 2100C, 2100D. PRV03 PROVIDER CODE       
"^DD",365,365.04,.03,23,2,0)
HL7 message ROL.4.1
"^DD",365,365.04,.03,"DT")
3130522
"^DD",365,365.06,.03,0)
REJECT REASON^P365.017^IBE(365.017,^0;3^Q
"^DD",365,365.06,.03,3)
Enter code describing the reason for inquiry rejection.
"^DD",365,365.06,.03,21,0)
^.001^1^1^3130205^^^
"^DD",365,365.06,.03,21,1,0)
Code describing the reason for inquiry rejection.
"^DD",365,365.06,.03,23,0)
^.001^1^1^3130205^^^
"^DD",365,365.06,.03,23,1,0)
Source: 271 HL7 message, ERR.5.1
"^DD",365,365.06,.03,"DT")
3130306
"^DD",365,365.06,.04,0)
ACTION CODE^P365.018^IBE(365.018,^0;4^Q
"^DD",365,365.06,.04,3)
Enter the code for action needed to correct the error.
"^DD",365,365.06,.04,21,0)
^^1^1^3100912^^
"^DD",365,365.06,.04,21,1,0)
Code describing an action needed to correct the error.
"^DD",365,365.06,.04,23,0)
^^1^1^3100912^^
"^DD",365,365.06,.04,23,1,0)
Source: 271 HL7 message, ERR.8
"^DD",365,365.06,.04,"DT")
3130306
"^DD",365,365.06,1,0)
ADDITIONAL MSGS^365.061A^^1;0
"^DD",365,365.06,1,21,0)
^^2^2^3130220^
"^DD",365,365.06,1,21,1,0)
This multiple contains additional error or informational messages 
"^DD",365,365.06,1,21,2,0)
associated with reject reasons.
"^DD",365,365.06,1,23,0)
^^1^1^3130220^
"^DD",365,365.06,1,23,1,0)
Source: 271 HL7 message, error group, NTE.3 (repeating field).
"^DD",365,365.061,0)
ADDITIONAL MSGS SUB-FIELD^^.01^1
"^DD",365,365.061,0,"DT")
3130220
"^DD",365,365.061,0,"IX","B",365.061,.01)

"^DD",365,365.061,0,"NM","ADDITIONAL MSGS")

"^DD",365,365.061,0,"UP")
365.06
"^DD",365,365.061,.01,0)
ADDITIONAL MSG^F^^0;1^K:$L(X)>250!($L(X)<1) X
"^DD",365,365.061,.01,1,0)
^.1
"^DD",365,365.061,.01,1,1,0)
365.061^B
"^DD",365,365.061,.01,1,1,1)
S ^IBCN(365,DA(2),6,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",365,365.061,.01,1,1,2)
K ^IBCN(365,DA(2),6,DA(1),1,"B",$E(X,1,30),DA)
"^DD",365,365.061,.01,3)
Answer must be 1-250 characters in length.
"^DD",365,365.061,.01,21,0)
^^1^1^3130220^
"^DD",365,365.061,.01,21,1,0)
Contains a single additional error / informational message.
"^DD",365,365.061,.01,23,0)
^^1^1^3130220^
"^DD",365,365.061,.01,23,1,0)
Source: 271 HL7 message, error group, NTE.3.
"^DD",365,365.061,.01,"DT")
3130220
"^DD",365,365.07,.03,0)
DATE QUALIFIER^P365.026^IBE(365.026,^0;3^Q
"^DD",365,365.07,.03,3)
Select date qualifier.
"^DD",365,365.07,.03,21,0)
^.001^1^1^3100912^^^
"^DD",365,365.07,.03,21,1,0)
Code describing the type of date.
"^DD",365,365.07,.03,23,0)
^^1^1^3100912^^
"^DD",365,365.07,.03,23,1,0)
Source: 271 HL7 message, ZTP.2.1.
"^DD",365,365.07,.03,"DT")
3130506
"^DD",365,365.09,0)
GROUP REFERENCE INFORMATION SUB-FIELD^^.04^4
"^DD",365,365.09,0,"DT")
3130522
"^DD",365,365.09,0,"IX","B",365.09,.01)

"^DD",365,365.09,0,"NM","GROUP REFERENCE INFORMATION")

"^DD",365,365.09,0,"UP")
365
"^DD",365,365.09,.01,0)
SEQUENCE^MRMNJ5,0^^0;1^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."1.N) X
"^DD",365,365.09,.01,1,0)
^.1
"^DD",365,365.09,.01,1,1,0)
365.09^B
"^DD",365,365.09,.01,1,1,1)
S ^IBCN(365,DA(1),9,"B",$E(X,1,30),DA)=""
"^DD",365,365.09,.01,1,1,2)
K ^IBCN(365,DA(1),9,"B",$E(X,1,30),DA)
"^DD",365,365.09,.01,3)
Type a number between 1 and 99999, 0 decimal digits.
"^DD",365,365.09,.01,21,0)
^^2^2^3130610^
"^DD",365,365.09,.01,21,1,0)
This field contains a sequential number generated at the time a record is
"^DD",365,365.09,.01,21,2,0)
stored in the subfile.  
"^DD",365,365.09,.01,23,0)
^^1^1^3130522^
"^DD",365,365.09,.01,23,1,0)
Sequential number 1..N, assigned automatically.
"^DD",365,365.09,.01,"DT")
3130610
"^DD",365,365.09,.02,0)
REFERENCE ID (GROUP)^F^^0;2^K:$L(X)>50!($L(X)<1) X
"^DD",365,365.09,.02,3)
Answer must be 1-50 characters in length.
"^DD",365,365.09,.02,21,0)
^^1^1^3130522^
"^DD",365,365.09,.02,21,1,0)
Subscriber Supplemental Identifier.
"^DD",365,365.09,.02,23,0)
^^2^2^3130522^^
"^DD",365,365.09,.02,23,1,0)
X12: 271, 2100C/2100D, REF02 Reference Identification.  Source: 271 HL7
"^DD",365,365.09,.02,23,2,0)
message, ZRF.3
"^DD",365,365.09,.02,"DT")
3130522
"^DD",365,365.09,.03,0)
REF ID QUALIFIER (GROUP)^P365.028^IBE(365.028,^0;3^Q
"^DD",365,365.09,.03,3)
Select the reference ID qualifier.
"^DD",365,365.09,.03,21,0)
^^2^2^3130522^
"^DD",365,365.09,.03,21,1,0)
Describes the type of reference ID at the REFERENCE ID (GROUP) (#.02)
"^DD",365,365.09,.03,21,2,0)
field. 
"^DD",365,365.09,.03,23,0)
^^2^2^3130522^
"^DD",365,365.09,.03,23,1,0)
X12: 271, 2100C/2100D, REF01 Reference Identification Qualifier.  Source:
"^DD",365,365.09,.03,23,2,0)
271 HL7 message, ZRF.2.1
"^DD",365,365.09,.03,"DT")
3130522
"^DD",365,365.09,.04,0)
DESCRIPTION^F^^0;4^K:$L(X)>80!($L(X)<1) X
"^DD",365,365.09,.04,3)
Answer must be 1-80 characters in length.
"^DD",365,365.09,.04,21,0)
^^3^3^3130522^
"^DD",365,365.09,.04,21,1,0)
A free-form description to clarify the Reference ID in the REFERENCE ID
"^DD",365,365.09,.04,21,2,0)
(GROUP) (#.02) field.  It will be populated with the Plan, Group or Plan
"^DD",365,365.09,.04,21,3,0)
Network Name.
"^DD",365,365.09,.04,23,0)
^^1^1^3130522^
"^DD",365,365.09,.04,23,1,0)
X12: 271, 2100C/2100D, REF03 DESCRIPTION.  271 HL7 message, ZRF.4
"^DD",365,365.09,.04,"DT")
3130522
"^DD",365,365.26,.03,0)
*COMMUNICATION NUMBER^F^^0;3^K:$L(X)>30!($L(X)<1) X
"^DD",365,365.26,.03,1,0)
^.1
"^DD",365,365.26,.03,1,1,0)
^^TRIGGER^365.26^1
"^DD",365,365.26,.03,1,1,1)
X ^DD(365.26,.03,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,2,D1,6,D2,1)):^(1),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y S X=DIV S X=$P(^IBCN(365,DA(2),2,DA(1),6,DA,0),U,3) X ^DD(365.26,.03,1,1,1.4)
"^DD",365,365.26,.03,1,1,1.3)
K DIV S DIV=X,D0=DA(2),DIV(0)=D0,D1=DA(1),DIV(1)=D1,D2=DA,DIV(2)=D2 S Y(0)=X S X=($P(^IBCN(365,DA(2),2,DA(1),6,DA,0),U,3)'=$E($P($G(^IBCN(365,DA(2),2,DA(1),6,DA,1)),U),1,30))
"^DD",365,365.26,.03,1,1,1.4)
S DIH=$G(^IBCN(365,DIV(0),2,DIV(1),6,DIV(2),1)),DIV=X S $P(^(1),U,1)=DIV,DIH=365.26,DIG=1 D ^DICR
"^DD",365,365.26,.03,1,1,2)
X ^DD(365.26,.03,1,1,2.3) I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,2,D1,6,D2,1)):^(1),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y S X="" S DIH=$G(^IBCN(365,DIV(0),2,DIV(1),6,DIV(2),1)),DIV=X S $P(^(1),U,1)=DIV,DIH=365.26,DIG=1 D ^DICR
"^DD",365,365.26,.03,1,1,2.3)
K DIV S DIV=X,D0=DA(2),DIV(0)=D0,D1=DA(1),DIV(1)=D1,D2=DA,DIV(2)=D2 S Y(0)=X S X=($P(^IBCN(365,DA(2),2,DA(1),6,DA,0),U,3)="")
"^DD",365,365.26,.03,1,1,"%D",0)
^^2^2^3131204^
"^DD",365,365.26,.03,1,1,"%D",1,0)
Triggers field 365.26/1 if first 30 chars of its value differ from the value in this field.
"^DD",365,365.26,.03,1,1,"%D",2,0)
Deletes field 365.26/1 if field 365.26/.03 is deleted.
"^DD",365,365.26,.03,1,1,"CREATE CONDITION")
S X=($P(^IBCN(365,DA(2),2,DA(1),6,DA,0),U,3)'=$E($P($G(^IBCN(365,DA(2),2,DA(1),6,DA,1)),U),1,30))
"^DD",365,365.26,.03,1,1,"CREATE VALUE")
S X=$P(^IBCN(365,DA(2),2,DA(1),6,DA,0),U,3)
"^DD",365,365.26,.03,1,1,"DELETE CONDITION")
S X=($P(^IBCN(365,DA(2),2,DA(1),6,DA,0),U,3)="")
"^DD",365,365.26,.03,1,1,"DELETE VALUE")
@
"^DD",365,365.26,.03,1,1,"DT")
3131204
"^DD",365,365.26,.03,1,1,"FIELD")
COMMUNICATION NUMBER
"^DD",365,365.26,.03,3)
Answer must be 1-30 characters in length.
"^DD",365,365.26,.03,5,1,0)
365.26^1^1
"^DD",365,365.26,.03,21,0)
^^3^3^3131120^
"^DD",365,365.26,.03,21,1,0)
Phone, fax, email, etc.
"^DD",365,365.26,.03,21,2,0)
 
"^DD",365,365.26,.03,21,3,0)
This field is scheduled for deletion in May 2015.
"^DD",365,365.26,.03,23,0)
^.001^1^1^3130211^^^^
"^DD",365,365.26,.03,23,1,0)
Source: 271 HL7 message, G2O.CTD.5.1
"^DD",365,365.26,.03,"DT")
3131204
"^DD",365,365.26,.04,0)
COMMUNICATION QUALIFIER^P365.021^IBE(365.021,^0;4^Q
"^DD",365,365.26,.04,3)
Select type of communication number.
"^DD",365,365.26,.04,21,0)
^.001^1^1^3090713^^
"^DD",365,365.26,.04,21,1,0)
Code describing type of communication number.
"^DD",365,365.26,.04,23,0)
^^1^1^3090713^
"^DD",365,365.26,.04,23,1,0)
Source: 271 HL7 message, G2O.CTD.5.9
"^DD",365,365.26,.04,"DT")
3130306
"^DD",365,365.26,1,0)
COMMUNICATION NUMBER^F^^1;1^K:$L(X)>245!($L(X)<1) X
"^DD",365,365.26,1,1,0)
^.1
"^DD",365,365.26,1,1,1,0)
^^TRIGGER^365.26^.03
"^DD",365,365.26,1,1,1,1)
X ^DD(365.26,1,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,2,D1,6,D2,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X=DIV S X=$E($P(^IBCN(365,DA(2),2,DA(1),6,DA,1),U),1,30) X ^DD(365.26,1,1,1,1.4)
"^DD",365,365.26,1,1,1,1.3)
K DIV S DIV=X,D0=DA(2),DIV(0)=D0,D1=DA(1),DIV(1)=D1,D2=DA,DIV(2)=D2 S Y(0)=X S X=($P(^IBCN(365,DA(2),2,DA(1),6,DA,0),U,3)'=$E($P($G(^IBCN(365,DA(2),2,DA(1),6,DA,1)),U),1,30))
"^DD",365,365.26,1,1,1,1.4)
S DIH=$G(^IBCN(365,DIV(0),2,DIV(1),6,DIV(2),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=365.26,DIG=.03 D ^DICR
"^DD",365,365.26,1,1,1,2)
X ^DD(365.26,1,1,1,2.3) I X S X=DIV S Y(1)=$S($D(^IBCN(365,D0,2,D1,6,D2,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" S DIH=$G(^IBCN(365,DIV(0),2,DIV(1),6,DIV(2),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=365.26,DIG=.03 D ^DICR
"^DD",365,365.26,1,1,1,2.3)
K DIV S DIV=X,D0=DA(2),DIV(0)=D0,D1=DA(1),DIV(1)=D1,D2=DA,DIV(2)=D2 S Y(0)=X S X=($P(^IBCN(365,DA(2),2,DA(1),6,DA,1),U)="")
"^DD",365,365.26,1,1,1,"%D",0)
^^2^2^3131204^
"^DD",365,365.26,1,1,1,"%D",1,0)
Triggers field 365.26/.03 if its value differs from first 30 chars of the value in this field.
"^DD",365,365.26,1,1,1,"%D",2,0)
Deletes field 365.26/.03 if field 365.26/1 is deleted.
"^DD",365,365.26,1,1,1,"CREATE CONDITION")
S X=($P(^IBCN(365,DA(2),2,DA(1),6,DA,0),U,3)'=$E($P($G(^IBCN(365,DA(2),2,DA(1),6,DA,1)),U),1,30))
"^DD",365,365.26,1,1,1,"CREATE VALUE")
S X=$E($P(^IBCN(365,DA(2),2,DA(1),6,DA,1),U),1,30)
"^DD",365,365.26,1,1,1,"DELETE CONDITION")
S X=($P(^IBCN(365,DA(2),2,DA(1),6,DA,1),U)="")
"^DD",365,365.26,1,1,1,"DELETE VALUE")
@
"^DD",365,365.26,1,1,1,"FIELD")
COMMUNICATION NUMBER
"^DD",365,365.26,1,3)
Answer must be 1-245 characters in length.
"^DD",365,365.26,1,5,1,0)
365.26^.03^1
"^DD",365,365.26,1,21,0)
^^1^1^3131204^
"^DD",365,365.26,1,21,1,0)
Phone, fax, email, etc.
"^DD",365,365.26,1,23,0)
^^1^1^3131204^
"^DD",365,365.26,1,23,1,0)
Replaces field .03. Source: 271 HL7 message,G2O.CTD.5.1
"^DD",365,365.26,1,"DT")
3131204
"^DD",365,365.27,.03,0)
QUANTITY QUALIFIER^P365.016^IBE(365.016,^0;3^Q
"^DD",365,365.27,.03,3)
Select benefit quantity qualifier.
"^DD",365,365.27,.03,21,0)
^.001^1^1^3090713^^
"^DD",365,365.27,.03,21,1,0)
Benefit quantity qualifier.
"^DD",365,365.27,.03,23,0)
^^1^1^3090713^
"^DD",365,365.27,.03,23,1,0)
Source: 271 HL7 message, ZHS.2.1
"^DD",365,365.27,.03,"DT")
3130502
"^DD",365,365.27,.05,0)
UNITS OF MEASUREMENT^P365.029^IBE(365.029,^0;5^Q
"^DD",365,365.27,.05,3)
Select units of measurement.
"^DD",365,365.27,.05,21,0)
^.001^1^1^3090713^^
"^DD",365,365.27,.05,21,1,0)
Units of measurement for frequency of the benefits.
"^DD",365,365.27,.05,23,0)
^^1^1^3090713^
"^DD",365,365.27,.05,23,1,0)
Source: 271 HL7 message, ZHS.4.1
"^DD",365,365.27,.05,"DT")
3130307
"^DD",365,365.27,.07,0)
TIME PERIOD QUALIFIER^P365.015^IBE(365.015,^0;7^Q
"^DD",365,365.27,.07,3)
Select qualifier for the time period.
"^DD",365,365.27,.07,21,0)
^.001^1^1^3090713^^
"^DD",365,365.27,.07,21,1,0)
Code that defines a time period.
"^DD",365,365.27,.07,23,0)
^^1^1^3090713^
"^DD",365,365.27,.07,23,1,0)
Source: 271 HL7 message, ZHS.6.1
"^DD",365,365.27,.07,"DT")
3130502
"^DD",365,365.27,.08,0)
DELIVERY FREQUENCY^P365.025^IBE(365.025,^0;8^Q
"^DD",365,365.27,.08,3)
Select code for delivery frequency.
"^DD",365,365.27,.08,21,0)
^.001^1^1^3090713^^
"^DD",365,365.27,.08,21,1,0)
Code that defines frequency of deliveries.
"^DD",365,365.27,.08,23,0)
^^1^1^3090713^
"^DD",365,365.27,.08,23,1,0)
Source: 271 HL7 message, ZHS.8.1
"^DD",365,365.27,.08,"DT")
3130307
"^DD",365,365.27,.09,0)
DELIVERY PATTERN^P365.036^IBE(365.036,^0;9^Q
"^DD",365,365.27,.09,3)
Select delivery pattern.
"^DD",365,365.27,.09,21,0)
^.001^1^1^3090713^^
"^DD",365,365.27,.09,21,1,0)
Code that defines pattern of deliveries.
"^DD",365,365.27,.09,23,0)
^^1^1^3090713^
"^DD",365,365.27,.09,23,1,0)
Source: 271 HL7 message, ZHS.9.1
"^DD",365,365.27,.09,"DT")
3130307
"^DD",365,365.28,.03,0)
DATE QUALIFIER^P365.026^IBE(365.026,^0;3^Q
"^DD",365,365.28,.03,3)
Select date qualifier.
"^DD",365,365.28,.03,21,0)
^.001^1^1^3090714^^
"^DD",365,365.28,.03,21,1,0)
Code describing the type of date.
"^DD",365,365.28,.03,23,0)
^^1^1^3090714^
"^DD",365,365.28,.03,23,1,0)
Source: 271 HL7 message, ZSD.2.1
"^DD",365,365.28,.03,"DT")
3130306
"^DD",365,365.28,.04,0)
DATE FORMAT^P365.032^IBE(365.032,^0;4^Q
"^DD",365,365.28,.04,3)
Select date format.
"^DD",365,365.28,.04,21,0)
^^1^1^3091106^
"^DD",365,365.28,.04,21,1,0)
Format of the date representation.
"^DD",365,365.28,.04,23,0)
^^1^1^3091106^
"^DD",365,365.28,.04,23,1,0)
Source: 271 HL7 message, ZSD.3.1
"^DD",365,365.28,.04,"DT")
3130307
"^DD",365,365.29,.02,0)
PLACE OF SERVICE^P353.1^IBE(353.1,^0;2^Q
"^DD",365,365.29,.02,3)
Select code for place of service.
"^DD",365,365.29,.02,21,0)
^.001^1^1^3090714^^^
"^DD",365,365.29,.02,21,1,0)
Place of service code.
"^DD",365,365.29,.02,23,0)
^^1^1^3090714^
"^DD",365,365.29,.02,23,1,0)
Source: 271 HL7 message, ZII.3.1 when ZII.2.1 has value of "ZZ"
"^DD",365,365.29,.02,"DT")
3130306
"^DD",365,365.29,.04,0)
QUALIFIER^P365.044^IBE(365.044,^0;4^Q
"^DD",365,365.29,.04,3)
Select additional information qualifier.
"^DD",365,365.29,.04,21,0)
^.001^1^1^3090714^^
"^DD",365,365.29,.04,21,1,0)
Additional information qualifier.
"^DD",365,365.29,.04,23,0)
^^1^1^3090714^
"^DD",365,365.29,.04,23,1,0)
Source: 271 HL7 message, ZII.2.1
"^DD",365,365.29,.04,"DT")
3130306
"^DD",365,365.29,.05,0)
NATURE OF INJURY CODE^P365.045^IBE(365.045,^0;5^Q
"^DD",365,365.29,.05,3)
Enter the Nature of Injury code.
"^DD",365,365.29,.05,21,0)
^^1^1^3130306^
"^DD",365,365.29,.05,21,1,0)
Code that represents the nature of the patient injury.
"^DD",365,365.29,.05,23,0)
^^1^1^3130306^
"^DD",365,365.29,.05,23,1,0)
Source: 271 HL7 message, ZII.4 when ZII.2.1 has value of "GR" or "NI".
"^DD",365,365.29,.05,"DT")
3130306
"^DD",365,365.29,.06,0)
NATURE OF INJURY CATEGORY^P365.038^IBE(365.038,^0;6^Q
"^DD",365,365.29,.06,3)
Select the injury category.
"^DD",365,365.29,.06,21,0)
^^2^2^3130506^
"^DD",365,365.29,.06,21,1,0)
Specifies the situation or category to which the code applies.   Used to 
"^DD",365,365.29,.06,21,2,0)
categorize the data in the NATURE OF INJURY TEXT (#.07) field.
"^DD",365,365.29,.06,23,0)
^^1^1^3130306^
"^DD",365,365.29,.06,23,1,0)
Source: 271 HL7 message, ZII.5
"^DD",365,365.29,.06,"DT")
3130506
"^DD",365,365.29,.07,0)
NATURE OF INJURY TEXT^F^^0;7^K:$L(X)>80!($L(X)<1) X
"^DD",365,365.29,.07,3)
Answer must be 1-80 characters in length.
"^DD",365,365.29,.07,21,0)
^^1^1^3130306^
"^DD",365,365.29,.07,21,1,0)
Describes the injured body part or parts.
"^DD",365,365.29,.07,23,0)
^^1^1^3130306^
"^DD",365,365.29,.07,23,1,0)
Source: 271 HL7 message, ZII.6
"^DD",365,365.29,.07,"DT")
3130306
"^DD",365,365.291,.03,0)
REFERENCE ID QUALIFIER^P365.028^IBE(365.028,^0;3^Q
"^DD",365,365.291,.03,3)
Select reference id qualifier.
"^DD",365,365.291,.03,21,0)
^.001^1^1^3090914^^^
"^DD",365,365.291,.03,21,1,0)
Code describing the type of reference id.
"^DD",365,365.291,.03,23,0)
^^1^1^3090914^
"^DD",365,365.291,.03,23,1,0)
Source: 271 HL7 message, ZRF.2.1.
"^DD",365,365.291,.03,"DT")
3130306
"^DD",365,365.292,0)
SERVICE TYPES SUB-FIELD^^.01^1
"^DD",365,365.292,0,"NM","SERVICE TYPES")

"^DD",365,365.292,.01,0)
SERVICE TYPES^P365.013^IBE(365.013,^0;1^Q
"^DD",365,365.292,.01,1,0)
^.1
"^DD",365,365.292,.01,1,1,0)
365.292^B
"^DD",365,365.292,.01,1,1,1)
S ^IBCN(365,DA(2),2,DA(1),14,"B",$E(X,1,30),DA)=""
"^DD",365,365.292,.01,1,1,2)
K ^IBCN(365,DA(2),2,DA(1),14,"B",$E(X,1,30),DA)
"^DD",365,365.292,.01,3)
Select/enter the code that identifies the type of service.
"^DD",365,365.292,.01,21,0)
^^1^1^3130506^
"^DD",365,365.292,.01,21,1,0)
Contains the service type code returned from eligibility inquiry.
"^DD",365,365.292,.01,"DT")
3130506
"^DD",365.028,365.028,0)
FIELD^^.03^3
"^DD",365.028,365.028,0,"DDA")
N
"^DD",365.028,365.028,0,"DT")
3130306
"^DD",365.028,365.028,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.028,365.028,0,"IX","B",365.028,.01)

"^DD",365.028,365.028,0,"NM","X12 271 REFERENCE IDENTIFICATION")

"^DD",365.028,365.028,0,"PT",2.3129,.03)

"^DD",365.028,365.028,0,"PT",2.322,5.03)

"^DD",365.028,365.028,0,"PT",2.32291,.03)

"^DD",365.028,365.028,0,"PT",365.02,5.03)

"^DD",365.028,365.028,0,"PT",365.09,.03)

"^DD",365.028,365.028,0,"PT",365.291,.03)

"^DD",365.028,365.028,0,"VRPK")
IB
"^DD",365.028,365.028,.01,0)
CODE^RF^^0;1^K:$L(X)>10!($L(X)<1)!'(X'?1P.E) X
"^DD",365.028,365.028,.01,1,0)
^.1
"^DD",365.028,365.028,.01,1,1,0)
365.028^B
"^DD",365.028,365.028,.01,1,1,1)
S ^IBE(365.028,"B",$E(X,1,30),DA)=""
"^DD",365.028,365.028,.01,1,1,2)
K ^IBE(365.028,"B",$E(X,1,30),DA)
"^DD",365.028,365.028,.01,3)
Answer must be 1-10 characters in length.
"^DD",365.028,365.028,.01,21,0)
^^1^1^3090909^
"^DD",365.028,365.028,.01,21,1,0)
This is the code value sent in an X.12 message.
"^DD",365.028,365.028,.01,"DT")
3130306
"^DD",365.028,365.028,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>55!($L(X)<1) X
"^DD",365.028,365.028,.02,3)
Answer must be 1-55 characters in length.
"^DD",365.028,365.028,.02,21,0)
^^1^1^3090909^
"^DD",365.028,365.028,.02,21,1,0)
This describes the code value in more detail.
"^DD",365.028,365.028,.02,"DT")
3090909
"^DD",365.028,365.028,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.028,365.028,.03,3)
Set this to YES in order to deactivate the code.
"^DD",365.028,365.028,.03,21,0)
^^2^2^3090909^
"^DD",365.028,365.028,.03,21,1,0)
This field will be marked inactive if a code is determined to no longer 
"^DD",365.028,365.028,.03,21,2,0)
be used by X.12.
"^DD",365.028,365.028,.03,"DT")
3090909
"^DD",365.029,365.029,0)
FIELD^^.03^3
"^DD",365.029,365.029,0,"DDA")
N
"^DD",365.029,365.029,0,"DT")
3130307
"^DD",365.029,365.029,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.029,365.029,0,"IX","B",365.029,.01)

"^DD",365.029,365.029,0,"NM","X12 271 UNITS OF MEASUREMENT")

"^DD",365.029,365.029,0,"PT",2.3227,.05)

"^DD",365.029,365.029,0,"PT",365.27,.05)

"^DD",365.029,365.029,.01,0)
CODE^RF^^0;1^K:$L(X)>10!($L(X)<1)!'(X'?1P.E) X
"^DD",365.029,365.029,.01,1,0)
^.1
"^DD",365.029,365.029,.01,1,1,0)
365.029^B
"^DD",365.029,365.029,.01,1,1,1)
S ^IBE(365.029,"B",$E(X,1,30),DA)=""
"^DD",365.029,365.029,.01,1,1,2)
K ^IBE(365.029,"B",$E(X,1,30),DA)
"^DD",365.029,365.029,.01,3)
Answer must be 1-10 characters in length.
"^DD",365.029,365.029,.01,21,0)
^^1^1^3130311^
"^DD",365.029,365.029,.01,21,1,0)
The unit of measurement code that is sent in the X12 271 message.
"^DD",365.029,365.029,.01,"DT")
3130311
"^DD",365.029,365.029,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>75!($L(X)<1) X
"^DD",365.029,365.029,.02,3)
Answer must be 1-75 characters in length.
"^DD",365.029,365.029,.02,21,0)
^^1^1^3130311^
"^DD",365.029,365.029,.02,21,1,0)
This describes the unit of measurement code value in more detail.
"^DD",365.029,365.029,.02,"DT")
3130311
"^DD",365.029,365.029,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.029,365.029,.03,3)
Is the code inactive?
"^DD",365.029,365.029,.03,21,0)
^^2^2^3130311^
"^DD",365.029,365.029,.03,21,1,0)
This field indicates whether or not the code is inactive. This field will 
"^DD",365.029,365.029,.03,21,2,0)
be marked inactive if a code is determined to no longer be used by X12.
"^DD",365.029,365.029,.03,"DT")
3130311
"^DD",365.031,365.031,0)
FIELD^^.03^3
"^DD",365.031,365.031,0,"DDA")
N
"^DD",365.031,365.031,0,"DT")
3130305
"^DD",365.031,365.031,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.031,365.031,0,"IX","B",365.031,.01)

"^DD",365.031,365.031,0,"NM","X12 271 ENTITY RELATIONSHIP CODE")

"^DD",365.031,365.031,0,"PT",2.322,3.06)

"^DD",365.031,365.031,0,"PT",365.02,3.06)

"^DD",365.031,365.031,.01,0)
CODE^RF^^0;1^K:$L(X)>10!($L(X)<1)!'(X'?1P.E) X
"^DD",365.031,365.031,.01,1,0)
^.1
"^DD",365.031,365.031,.01,1,1,0)
365.031^B
"^DD",365.031,365.031,.01,1,1,1)
S ^IBE(365.031,"B",$E(X,1,30),DA)=""
"^DD",365.031,365.031,.01,1,1,2)
K ^IBE(365.031,"B",$E(X,1,30),DA)
"^DD",365.031,365.031,.01,3)
Answer must be 1-10 characters in length.
"^DD",365.031,365.031,.01,21,0)
^^2^2^3130311^
"^DD",365.031,365.031,.01,21,1,0)
This code represents the entity relationship and is the value of the code
"^DD",365.031,365.031,.01,21,2,0)
sent in the X12 271 message.
"^DD",365.031,365.031,.01,"DT")
3130311
"^DD",365.031,365.031,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>75!($L(X)<1) X
"^DD",365.031,365.031,.02,3)
Answer must be 1-75 characters in length.
"^DD",365.031,365.031,.02,21,0)
^^1^1^3130311^
"^DD",365.031,365.031,.02,21,1,0)
This describes the entity relationship code value in more detail.
"^DD",365.031,365.031,.02,"DT")
3130311
"^DD",365.031,365.031,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.031,365.031,.03,3)
Is this code inactive?
"^DD",365.031,365.031,.03,21,0)
^^2^2^3130311^
"^DD",365.031,365.031,.03,21,1,0)
This field indicates whether or not the code is inactive and field will be
"^DD",365.031,365.031,.03,21,2,0)
marked inactive if a code is determined to no longer be used by X12.
"^DD",365.031,365.031,.03,"DT")
3130311
"^DD",365.032,365.032,0)
FIELD^^.03^3
"^DD",365.032,365.032,0,"DDA")
N
"^DD",365.032,365.032,0,"DT")
3130305
"^DD",365.032,365.032,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.032,365.032,0,"IX","B",365.032,.01)

"^DD",365.032,365.032,0,"NM","X12 271 DATE FORMAT QUALIFIER")

"^DD",365.032,365.032,0,"PT",2.312,12.06)

"^DD",365.032,365.032,0,"PT",2.3228,.04)

"^DD",365.032,365.032,0,"PT",365,12.06)

"^DD",365.032,365.032,0,"PT",365.28,.04)

"^DD",365.032,365.032,.01,0)
CODE^RF^^0;1^K:$L(X)>10!($L(X)<1)!'(X'?1P.E) X
"^DD",365.032,365.032,.01,1,0)
^.1
"^DD",365.032,365.032,.01,1,1,0)
365.032^B
"^DD",365.032,365.032,.01,1,1,1)
S ^IBE(365.032,"B",$E(X,1,30),DA)=""
"^DD",365.032,365.032,.01,1,1,2)
K ^IBE(365.032,"B",$E(X,1,30),DA)
"^DD",365.032,365.032,.01,3)
Answer must be 1-10 characters in length.
"^DD",365.032,365.032,.01,21,0)
^^1^1^3130311^
"^DD",365.032,365.032,.01,21,1,0)
The value of the DATE FORMAT QUALIFIER code sent in the X12 271 message.
"^DD",365.032,365.032,.01,"DT")
3130311
"^DD",365.032,365.032,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>75!($L(X)<1) X
"^DD",365.032,365.032,.02,3)
Answer must be 1-75 characters in length.
"^DD",365.032,365.032,.02,21,0)
^^1^1^3130311^
"^DD",365.032,365.032,.02,21,1,0)
This describes the DATE FORMAT QUALIFIER code value in more detail.
"^DD",365.032,365.032,.02,"DT")
3130311
"^DD",365.032,365.032,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.032,365.032,.03,3)
Is the code inactive?
"^DD",365.032,365.032,.03,21,0)
^^2^2^3130311^
"^DD",365.032,365.032,.03,21,1,0)
This field indicates whether or not the code is inactive and will be 
"^DD",365.032,365.032,.03,21,2,0)
marked inactive if a code is determined to no longer be used by X12.  
"^DD",365.032,365.032,.03,"DT")
3130311
"^DD",365.033,365.033,0)
FIELD^^.03^3
"^DD",365.033,365.033,0,"DDA")
N
"^DD",365.033,365.033,0,"DT")
3130315
"^DD",365.033,365.033,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.033,365.033,0,"IX","B",365.033,.01)

"^DD",365.033,365.033,0,"NM","X12 271 YES/NO RESPONSE CODE ")

"^DD",365.033,365.033,0,"PT",2.322,.12)

"^DD",365.033,365.033,0,"PT",2.322,.13)

"^DD",365.033,365.033,0,"PT",365.02,.12)

"^DD",365.033,365.033,0,"PT",365.02,.13)

"^DD",365.033,365.033,.01,0)
CODE^RF^^0;1^K:$L(X)>10!($L(X)<1)!'(X'?1P.E) X
"^DD",365.033,365.033,.01,1,0)
^.1
"^DD",365.033,365.033,.01,1,1,0)
365.033^B
"^DD",365.033,365.033,.01,1,1,1)
S ^IBE(365.033,"B",$E(X,1,30),DA)=""
"^DD",365.033,365.033,.01,1,1,2)
K ^IBE(365.033,"B",$E(X,1,30),DA)
"^DD",365.033,365.033,.01,3)
Answer must be 1-10 characters in length.
"^DD",365.033,365.033,.01,21,0)
^^1^1^3130315^
"^DD",365.033,365.033,.01,21,1,0)
The value of the YES/NO RESPONSE code sent in the X12 271 message.
"^DD",365.033,365.033,.01,"DT")
3130315
"^DD",365.033,365.033,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>75!($L(X)<1) X
"^DD",365.033,365.033,.02,3)
Answer must be 1-75 characters in length.
"^DD",365.033,365.033,.02,21,0)
^^1^1^3130315^
"^DD",365.033,365.033,.02,21,1,0)
This describes the YES/NO RESPONSE code value in more detail.
"^DD",365.033,365.033,.02,"DT")
3130315
"^DD",365.033,365.033,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.033,365.033,.03,3)
Is this code inactive?
"^DD",365.033,365.033,.03,21,0)
^^2^2^3130315^
"^DD",365.033,365.033,.03,21,1,0)
This field indicates whether or not the code is inactive and will be
"^DD",365.033,365.033,.03,21,2,0)
marked inactive if a code is determined to no longer be used by X12.
"^DD",365.033,365.033,.03,"DT")
3130315
"^DD",365.034,365.034,0)
FIELD^^.03^3
"^DD",365.034,365.034,0,"DDA")
N
"^DD",365.034,365.034,0,"DT")
3130306
"^DD",365.034,365.034,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.034,365.034,0,"IX","B",365.034,.01)

"^DD",365.034,365.034,0,"NM","X12 271 LOCATION QUALIFER")

"^DD",365.034,365.034,0,"PT",2.322,4.08)

"^DD",365.034,365.034,0,"PT",365.02,4.08)

"^DD",365.034,365.034,.01,0)
CODE^RF^^0;1^K:$L(X)>10!($L(X)<1)!'(X'?1P.E) X
"^DD",365.034,365.034,.01,1,0)
^.1
"^DD",365.034,365.034,.01,1,1,0)
365.034^B
"^DD",365.034,365.034,.01,1,1,1)
S ^IBE(365.034,"B",$E(X,1,30),DA)=""
"^DD",365.034,365.034,.01,1,1,2)
K ^IBE(365.034,"B",$E(X,1,30),DA)
"^DD",365.034,365.034,.01,3)
Answer must be 1-10 characters in length.
"^DD",365.034,365.034,.01,21,0)
^^1^1^3130311^
"^DD",365.034,365.034,.01,21,1,0)
The value of the LOCATION QUALIFER code sent in the X12 271 message.
"^DD",365.034,365.034,.01,"DT")
3130311
"^DD",365.034,365.034,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>75!($L(X)<1) X
"^DD",365.034,365.034,.02,3)
Answer must be 1-75 characters in length.
"^DD",365.034,365.034,.02,21,0)
^^1^1^3130311^
"^DD",365.034,365.034,.02,21,1,0)
This describes the LOCATION QUALIFER code value in more detail.
"^DD",365.034,365.034,.02,"DT")
3130311
"^DD",365.034,365.034,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.034,365.034,.03,3)
Is this code inactive?
"^DD",365.034,365.034,.03,21,0)
^^2^2^3130311^
"^DD",365.034,365.034,.03,21,1,0)
This field indicates whether or not the code is inactive and will be 
"^DD",365.034,365.034,.03,21,2,0)
marked inactive if a code is determined to no longer be used by X12.  
"^DD",365.034,365.034,.03,"DT")
3130311
"^DD",365.035,365.035,0)
FIELD^^.03^3
"^DD",365.035,365.035,0,"DDA")
N
"^DD",365.035,365.035,0,"DT")
3130307
"^DD",365.035,365.035,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.035,365.035,0,"IX","B",365.035,.01)

"^DD",365.035,365.035,0,"NM","X12 271 PROCEDURE CODING METHOD")

"^DD",365.035,365.035,0,"PT",2.322,1.01)

"^DD",365.035,365.035,0,"PT",365.02,1.01)

"^DD",365.035,365.035,.01,0)
CODE^RF^^0;1^K:$L(X)>10!($L(X)<1)!'(X'?1P.E) X
"^DD",365.035,365.035,.01,1,0)
^.1
"^DD",365.035,365.035,.01,1,1,0)
365.035^B
"^DD",365.035,365.035,.01,1,1,1)
S ^IBE(365.035,"B",$E(X,1,30),DA)=""
"^DD",365.035,365.035,.01,1,1,2)
K ^IBE(365.035,"B",$E(X,1,30),DA)
"^DD",365.035,365.035,.01,3)
Answer must be 1-10 characters in length.
"^DD",365.035,365.035,.01,21,0)
^^1^1^3130311^
"^DD",365.035,365.035,.01,21,1,0)
The value of the PROCEDURE CODING METHOD code sent in the X12 271 message.
"^DD",365.035,365.035,.01,"DT")
3130311
"^DD",365.035,365.035,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>75!($L(X)<1) X
"^DD",365.035,365.035,.02,3)
Answer must be 1-75 characters in length.
"^DD",365.035,365.035,.02,21,0)
^^1^1^3130311^
"^DD",365.035,365.035,.02,21,1,0)
This describes the PROCEDURE CODING METHOD code value in more detail.
"^DD",365.035,365.035,.02,"DT")
3130311
"^DD",365.035,365.035,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.035,365.035,.03,3)
Is the code inactive?
"^DD",365.035,365.035,.03,21,0)
^^2^2^3130311^
"^DD",365.035,365.035,.03,21,1,0)
This field indicates whether or not the code is inactive and will be 
"^DD",365.035,365.035,.03,21,2,0)
marked inactive if a code is determined to no longer be used by X12.
"^DD",365.035,365.035,.03,"DT")
3130311
"^DD",365.036,365.036,0)
FIELD^^.03^3
"^DD",365.036,365.036,0,"DDA")
N
"^DD",365.036,365.036,0,"DT")
3130307
"^DD",365.036,365.036,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.036,365.036,0,"IX","B",365.036,.01)

"^DD",365.036,365.036,0,"NM","X12 271 DELIVERY PATTERN")

"^DD",365.036,365.036,0,"PT",2.3227,.09)

"^DD",365.036,365.036,0,"PT",365.27,.09)

"^DD",365.036,365.036,.01,0)
CODE^RF^^0;1^K:$L(X)>10!($L(X)<1)!'(X'?1P.E) X
"^DD",365.036,365.036,.01,1,0)
^.1
"^DD",365.036,365.036,.01,1,1,0)
365.036^B
"^DD",365.036,365.036,.01,1,1,1)
S ^IBE(365.036,"B",$E(X,1,30),DA)=""
"^DD",365.036,365.036,.01,1,1,2)
K ^IBE(365.036,"B",$E(X,1,30),DA)
"^DD",365.036,365.036,.01,3)
Answer must be 1-10 characters in length.
"^DD",365.036,365.036,.01,21,0)
^^1^1^3130311^
"^DD",365.036,365.036,.01,21,1,0)
The value of the DELIVERY PATTERN code sent in the X12 271 message.
"^DD",365.036,365.036,.01,"DT")
3130311
"^DD",365.036,365.036,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>75!($L(X)<1) X
"^DD",365.036,365.036,.02,3)
Answer must be 1-75 characters in length.
"^DD",365.036,365.036,.02,21,0)
^^1^1^3130311^
"^DD",365.036,365.036,.02,21,1,0)
This describes the DELIVERY PATTERN code value in more detail.
"^DD",365.036,365.036,.02,"DT")
3130311
"^DD",365.036,365.036,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.036,365.036,.03,3)
Is the code inactive?
"^DD",365.036,365.036,.03,21,0)
^^2^2^3130311^
"^DD",365.036,365.036,.03,21,1,0)
This field indicates whether or not the code is inactive and will be 
"^DD",365.036,365.036,.03,21,2,0)
marked inactive if a code is determined to no longer be used by X12. 
"^DD",365.036,365.036,.03,"DT")
3130311
"^DD",365.037,365.037,0)
FIELD^^.03^3
"^DD",365.037,365.037,0,"DDA")
N
"^DD",365.037,365.037,0,"DT")
3130318
"^DD",365.037,365.037,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.037,365.037,0,"IX","B",365.037,.01)

"^DD",365.037,365.037,0,"NM","X12 271 PATIENT RELATIONSHIP")

"^DD",365.037,365.037,0,"PT",365,8.01)

"^DD",365.037,365.037,.01,0)
CODE^RF^^0;1^K:$L(X)>10!($L(X)<1)!'(X'?1P.E) X
"^DD",365.037,365.037,.01,1,0)
^.1
"^DD",365.037,365.037,.01,1,1,0)
365.037^B
"^DD",365.037,365.037,.01,1,1,1)
S ^IBE(365.037,"B",$E(X,1,30),DA)=""
"^DD",365.037,365.037,.01,1,1,2)
K ^IBE(365.037,"B",$E(X,1,30),DA)
"^DD",365.037,365.037,.01,3)
Answer must be 1-10 characters in length.
"^DD",365.037,365.037,.01,21,0)
^^1^1^3130318^
"^DD",365.037,365.037,.01,21,1,0)
The value of the PATIENT RELATIONSHIP code sent in the X12 271 message.
"^DD",365.037,365.037,.01,"DT")
3130318
"^DD",365.037,365.037,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>75!($L(X)<1) X
"^DD",365.037,365.037,.02,3)
Answer must be 1-75 characters in length.
"^DD",365.037,365.037,.02,21,0)
^^1^1^3130318^
"^DD",365.037,365.037,.02,21,1,0)
This describes the PATIENT RELATIONSHIP code value in more detail.
"^DD",365.037,365.037,.02,"DT")
3130318
"^DD",365.037,365.037,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.037,365.037,.03,3)
Is the code inactive? 
"^DD",365.037,365.037,.03,21,0)
^^2^2^3130318^
"^DD",365.037,365.037,.03,21,1,0)
This field indicates whether or not the code is inactive and will be
"^DD",365.037,365.037,.03,21,2,0)
marked inactive if a code is determined to no longer be used by X12.
"^DD",365.037,365.037,.03,"DT")
3130318
"^DD",365.038,365.038,0)
FIELD^^.03^3
"^DD",365.038,365.038,0,"DDA")
N
"^DD",365.038,365.038,0,"DT")
3130506
"^DD",365.038,365.038,0,"IX","B",365.038,.01)

"^DD",365.038,365.038,0,"NM","X12 271 INJURY CATEGORY")

"^DD",365.038,365.038,0,"PT",365.29,.06)

"^DD",365.038,365.038,.01,0)
CODE^RF^^0;1^K:$L(X)>10!($L(X)<1)!'(X'?1P.E) X
"^DD",365.038,365.038,.01,1,0)
^.1
"^DD",365.038,365.038,.01,1,1,0)
365.038^B
"^DD",365.038,365.038,.01,1,1,1)
S ^IBE(365.038,"B",$E(X,1,30),DA)=""
"^DD",365.038,365.038,.01,1,1,2)
K ^IBE(365.038,"B",$E(X,1,30),DA)
"^DD",365.038,365.038,.01,3)
Answer must be 1-10 characters in length.
"^DD",365.038,365.038,.01,21,0)
^^2^2^3130604^
"^DD",365.038,365.038,.01,21,1,0)
The value of the NATURY OF INJURY CATEGORY code sent in the X12 271 
"^DD",365.038,365.038,.01,21,2,0)
message.  Used to categorize the nature of the injury.
"^DD",365.038,365.038,.01,"DT")
3130604
"^DD",365.038,365.038,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>75!($L(X)<1) X
"^DD",365.038,365.038,.02,3)
Answer must be 1-75 characters in length.
"^DD",365.038,365.038,.02,21,0)
^^1^1^3130506^
"^DD",365.038,365.038,.02,21,1,0)
This field provides more detail on the Nature of Injury category.
"^DD",365.038,365.038,.02,"DT")
3130506
"^DD",365.038,365.038,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.038,365.038,.03,3)
Is the code inactive?
"^DD",365.038,365.038,.03,21,0)
^^3^3^3130506^
"^DD",365.038,365.038,.03,21,1,0)
This field indicates whether or not the code is inactive and will be
"^DD",365.038,365.038,.03,21,2,0)
marked inactive if a code is determined to no longer be used by
"^DD",365.038,365.038,.03,21,3,0)
X12.  
"^DD",365.038,365.038,.03,"DT")
3130506
"^DD",365.039,365.039,0)
FIELD^^.03^3
"^DD",365.039,365.039,0,"DDA")
N
"^DD",365.039,365.039,0,"DT")
3130305
"^DD",365.039,365.039,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.039,365.039,0,"IX","B",365.039,.01)

"^DD",365.039,365.039,0,"NM","X12 271 MILITARY PERSONNEL INFO STATUS CODE")

"^DD",365.039,365.039,0,"PT",2.312,12.01)

"^DD",365.039,365.039,0,"PT",365,12.01)

"^DD",365.039,365.039,.01,0)
CODE^RF^^0;1^K:$L(X)>10!($L(X)<1)!'(X'?1P.E) X
"^DD",365.039,365.039,.01,1,0)
^.1
"^DD",365.039,365.039,.01,1,1,0)
365.039^B
"^DD",365.039,365.039,.01,1,1,1)
S ^IBE(365.039,"B",$E(X,1,30),DA)=""
"^DD",365.039,365.039,.01,1,1,2)
K ^IBE(365.039,"B",$E(X,1,30),DA)
"^DD",365.039,365.039,.01,3)
Answer must be 1-10 characters in length.
"^DD",365.039,365.039,.01,21,0)
^^2^2^3130311^
"^DD",365.039,365.039,.01,21,1,0)
The value of the MILITARY PERSONNEL INFO STATUS code sent in the X12 271
"^DD",365.039,365.039,.01,21,2,0)
message.
"^DD",365.039,365.039,.01,"DT")
3130311
"^DD",365.039,365.039,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>75!($L(X)<1) X
"^DD",365.039,365.039,.02,3)
Answer must be 1-75 characters in length.
"^DD",365.039,365.039,.02,21,0)
^^2^2^3130311^
"^DD",365.039,365.039,.02,21,1,0)
This describes the MILITARY PERSONNEL INFO STATUS code value in more
"^DD",365.039,365.039,.02,21,2,0)
detail.
"^DD",365.039,365.039,.02,"DT")
3130311
"^DD",365.039,365.039,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.039,365.039,.03,3)
Is the code inactive?
"^DD",365.039,365.039,.03,21,0)
^^2^2^3130311^
"^DD",365.039,365.039,.03,21,1,0)
This field indicates whether or not the code is inactive and will be 
"^DD",365.039,365.039,.03,21,2,0)
marked inactive if a code is determined to no longer be used by X12. 
"^DD",365.039,365.039,.03,"DT")
3130311
"^DD",365.041,365.041,0)
FIELD^^.03^3
"^DD",365.041,365.041,0,"DDA")
N
"^DD",365.041,365.041,0,"DT")
3130305
"^DD",365.041,365.041,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.041,365.041,0,"IX","B",365.041,.01)

"^DD",365.041,365.041,0,"NM","X12 271 MILITARY GOVT SERVICE AFFILIATION")

"^DD",365.041,365.041,0,"PT",2.312,12.03)

"^DD",365.041,365.041,0,"PT",365,12.03)

"^DD",365.041,365.041,.01,0)
CODE^RF^^0;1^K:$L(X)>10!($L(X)<1)!'(X'?1P.E) X
"^DD",365.041,365.041,.01,1,0)
^.1
"^DD",365.041,365.041,.01,1,1,0)
365.041^B
"^DD",365.041,365.041,.01,1,1,1)
S ^IBE(365.041,"B",$E(X,1,30),DA)=""
"^DD",365.041,365.041,.01,1,1,2)
K ^IBE(365.041,"B",$E(X,1,30),DA)
"^DD",365.041,365.041,.01,3)
Answer must be 1-10 characters in length.
"^DD",365.041,365.041,.01,21,0)
^^2^2^3130311^
"^DD",365.041,365.041,.01,21,1,0)
The value of the MILITARY GOVT SERVICE AFFILIATION code sent in the X12
"^DD",365.041,365.041,.01,21,2,0)
271 message.
"^DD",365.041,365.041,.01,"DT")
3130311
"^DD",365.041,365.041,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>75!($L(X)<1) X
"^DD",365.041,365.041,.02,3)
Answer must be 1-75 characters in length.
"^DD",365.041,365.041,.02,21,0)
^^2^2^3130311^
"^DD",365.041,365.041,.02,21,1,0)
This describes the MILITARY GOVT SERVICE AFFILIATION code value in more
"^DD",365.041,365.041,.02,21,2,0)
detail.
"^DD",365.041,365.041,.02,"DT")
3130311
"^DD",365.041,365.041,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.041,365.041,.03,3)
Is the code inactive?
"^DD",365.041,365.041,.03,21,0)
^^2^2^3130311^
"^DD",365.041,365.041,.03,21,1,0)
This field indicates whether or not the code is inactive and will be 
"^DD",365.041,365.041,.03,21,2,0)
marked inactive if a code is determined to no longer be used by X12.  
"^DD",365.041,365.041,.03,"DT")
3130311
"^DD",365.042,365.042,0)
FIELD^^.03^3
"^DD",365.042,365.042,0,"DDA")
N
"^DD",365.042,365.042,0,"DT")
3130305
"^DD",365.042,365.042,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.042,365.042,0,"IX","B",365.042,.01)

"^DD",365.042,365.042,0,"NM","X12 271 MILITARY SERVICE RANK")

"^DD",365.042,365.042,0,"PT",2.312,12.05)

"^DD",365.042,365.042,0,"PT",365,12.05)

"^DD",365.042,365.042,.01,0)
CODE^RF^^0;1^K:$L(X)>10!($L(X)<1)!'(X'?1P.E) X
"^DD",365.042,365.042,.01,1,0)
^.1
"^DD",365.042,365.042,.01,1,1,0)
365.042^B
"^DD",365.042,365.042,.01,1,1,1)
S ^IBE(365.042,"B",$E(X,1,30),DA)=""
"^DD",365.042,365.042,.01,1,1,2)
K ^IBE(365.042,"B",$E(X,1,30),DA)
"^DD",365.042,365.042,.01,3)
Answer must be 1-10 characters in length.
"^DD",365.042,365.042,.01,21,0)
^^1^1^3130311^
"^DD",365.042,365.042,.01,21,1,0)
The value of the MILITARY SERVICE RANK code sent in the X12 271 message.
"^DD",365.042,365.042,.01,"DT")
3130311
"^DD",365.042,365.042,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>75!($L(X)<1) X
"^DD",365.042,365.042,.02,3)
Answer must be 1-75 characters in length.
"^DD",365.042,365.042,.02,21,0)
^^1^1^3130311^
"^DD",365.042,365.042,.02,21,1,0)
This describes the MILITARY SERVICE RANK code value in more detail.
"^DD",365.042,365.042,.02,"DT")
3130311
"^DD",365.042,365.042,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.042,365.042,.03,3)
Is the code inactive?
"^DD",365.042,365.042,.03,21,0)
^^2^2^3130311^
"^DD",365.042,365.042,.03,21,1,0)
This field indicates whether or not the code is inactive and will be 
"^DD",365.042,365.042,.03,21,2,0)
marked inactive if a code is determined to no longer be used by X12.
"^DD",365.042,365.042,.03,"DT")
3130311
"^DD",365.043,365.043,0)
FIELD^^.03^3
"^DD",365.043,365.043,0,"DDA")
N
"^DD",365.043,365.043,0,"DT")
3130305
"^DD",365.043,365.043,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.043,365.043,0,"IX","B",365.043,.01)

"^DD",365.043,365.043,0,"NM","X12 271 ENTITY TYPE QUALIFIER")

"^DD",365.043,365.043,0,"PT",2.322,3.02)

"^DD",365.043,365.043,0,"PT",365.02,3.02)

"^DD",365.043,365.043,.01,0)
CODE^RF^^0;1^K:$L(X)>10!($L(X)<1)!'(X'?1P.E) X
"^DD",365.043,365.043,.01,1,0)
^.1
"^DD",365.043,365.043,.01,1,1,0)
365.043^B
"^DD",365.043,365.043,.01,1,1,1)
S ^IBE(365.043,"B",$E(X,1,30),DA)=""
"^DD",365.043,365.043,.01,1,1,2)
K ^IBE(365.043,"B",$E(X,1,30),DA)
"^DD",365.043,365.043,.01,3)
Answer must be 1-10 characters in length.
"^DD",365.043,365.043,.01,21,0)
^^1^1^3130311^
"^DD",365.043,365.043,.01,21,1,0)
The value of the ENTITY TYPE QUALIFIER code sent in the X12 271 message.
"^DD",365.043,365.043,.01,"DT")
3130311
"^DD",365.043,365.043,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>75!($L(X)<1) X
"^DD",365.043,365.043,.02,3)
Answer must be 1-75 characters in length.
"^DD",365.043,365.043,.02,21,0)
^^1^1^3130311^
"^DD",365.043,365.043,.02,21,1,0)
This describes the ENTITY TYPE QUALIFIER code value in more detail.
"^DD",365.043,365.043,.02,"DT")
3130311
"^DD",365.043,365.043,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.043,365.043,.03,3)
is the code inactive?
"^DD",365.043,365.043,.03,21,0)
^^2^2^3130311^
"^DD",365.043,365.043,.03,21,1,0)
This field indicates whether or not the code is inactive and will be 
"^DD",365.043,365.043,.03,21,2,0)
marked inactive if a code is determined to no longer be used by X12.
"^DD",365.043,365.043,.03,"DT")
3130311
"^DD",365.044,365.044,0)
FIELD^^.03^3
"^DD",365.044,365.044,0,"DDA")
N
"^DD",365.044,365.044,0,"DT")
3130306
"^DD",365.044,365.044,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.044,365.044,0,"IX","B",365.044,.01)

"^DD",365.044,365.044,0,"NM","X12 271 CODE LIST QUALIFIER")

"^DD",365.044,365.044,0,"PT",2.3229,.04)

"^DD",365.044,365.044,0,"PT",365.29,.04)

"^DD",365.044,365.044,.01,0)
CODE^RF^^0;1^K:$L(X)>10!($L(X)<1)!'(X'?1P.E) X
"^DD",365.044,365.044,.01,1,0)
^.1
"^DD",365.044,365.044,.01,1,1,0)
365.044^B
"^DD",365.044,365.044,.01,1,1,1)
S ^IBE(365.044,"B",$E(X,1,30),DA)=""
"^DD",365.044,365.044,.01,1,1,2)
K ^IBE(365.044,"B",$E(X,1,30),DA)
"^DD",365.044,365.044,.01,3)
Answer must be 1-10 characters in length.
"^DD",365.044,365.044,.01,21,0)
^^1^1^3130311^
"^DD",365.044,365.044,.01,21,1,0)
The value of the CODE LIST QUALIFIER  sent in the X12 271 message.
"^DD",365.044,365.044,.01,"DT")
3130311
"^DD",365.044,365.044,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>75!($L(X)<1) X
"^DD",365.044,365.044,.02,3)
Answer must be 1-75 characters in length.
"^DD",365.044,365.044,.02,21,0)
^^1^1^3130311^
"^DD",365.044,365.044,.02,21,1,0)
This describes the CODE LIST QUALIFIER value in more detail.
"^DD",365.044,365.044,.02,"DT")
3130311
"^DD",365.044,365.044,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.044,365.044,.03,3)
is the code inactive?
"^DD",365.044,365.044,.03,21,0)
^^2^2^3130311^
"^DD",365.044,365.044,.03,21,1,0)
This field indicates whether or not the code is inactive and will be 
"^DD",365.044,365.044,.03,21,2,0)
marked inactive if a code is determined to no longer be used by X12.
"^DD",365.044,365.044,.03,"DT")
3130311
"^DD",365.045,365.045,0)
FIELD^^.03^3
"^DD",365.045,365.045,0,"DDA")
N
"^DD",365.045,365.045,0,"DT")
3130306
"^DD",365.045,365.045,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.045,365.045,0,"IX","B",365.045,.01)

"^DD",365.045,365.045,0,"NM","X12 271 NATURE OF INJURY CODES")

"^DD",365.045,365.045,0,"PT",2.3229,.05)

"^DD",365.045,365.045,0,"PT",365.29,.05)

"^DD",365.045,365.045,.01,0)
CODE^RF^^0;1^K:$L(X)>10!($L(X)<1)!'(X'?1P.E) X
"^DD",365.045,365.045,.01,1,0)
^.1
"^DD",365.045,365.045,.01,1,1,0)
365.045^B
"^DD",365.045,365.045,.01,1,1,1)
S ^IBE(365.045,"B",$E(X,1,30),DA)=""
"^DD",365.045,365.045,.01,1,1,2)
K ^IBE(365.045,"B",$E(X,1,30),DA)
"^DD",365.045,365.045,.01,3)
Answer must be 1-10 characters in length.
"^DD",365.045,365.045,.01,21,0)
^^1^1^3130311^
"^DD",365.045,365.045,.01,21,1,0)
The value of the NATURE OF INJURY code sent in the X12 271 message.
"^DD",365.045,365.045,.01,"DT")
3130311
"^DD",365.045,365.045,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>75!($L(X)<1) X
"^DD",365.045,365.045,.02,3)
Answer must be 1-75 characters in length.
"^DD",365.045,365.045,.02,21,0)
^^1^1^3130311^
"^DD",365.045,365.045,.02,21,1,0)
This describes the NATURE OF INJURY code value in more detail.
"^DD",365.045,365.045,.02,"DT")
3130311
"^DD",365.045,365.045,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.045,365.045,.03,3)
Is the code inactive?
"^DD",365.045,365.045,.03,21,0)
^^2^2^3130311^
"^DD",365.045,365.045,.03,21,1,0)
This field indicates whether or not the code is inactive and will be 
"^DD",365.045,365.045,.03,21,2,0)
marked inactive if a code is determined to no longer be used by X12.
"^DD",365.045,365.045,.03,"DT")
3130311
"^DD",365.046,365.046,0)
FIELD^^.03^3
"^DD",365.046,365.046,0,"DDA")
N
"^DD",365.046,365.046,0,"DT")
3130305
"^DD",365.046,365.046,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.046,365.046,0,"IX","B",365.046,.01)

"^DD",365.046,365.046,0,"NM","X12 271 MILITARY EMPLOYMENT STATUS CODE")

"^DD",365.046,365.046,0,"PT",2.312,12.02)

"^DD",365.046,365.046,0,"PT",365,12.02)

"^DD",365.046,365.046,.01,0)
CODE^RF^^0;1^K:$L(X)>10!($L(X)<1)!'(X'?1P.E) X
"^DD",365.046,365.046,.01,1,0)
^.1
"^DD",365.046,365.046,.01,1,1,0)
365.046^B
"^DD",365.046,365.046,.01,1,1,1)
S ^IBE(365.046,"B",$E(X,1,30),DA)=""
"^DD",365.046,365.046,.01,1,1,2)
K ^IBE(365.046,"B",$E(X,1,30),DA)
"^DD",365.046,365.046,.01,3)
Answer must be 1-10 characters in length.
"^DD",365.046,365.046,.01,21,0)
^^2^2^3130311^
"^DD",365.046,365.046,.01,21,1,0)
The value of the MILITARY EMPLOYMENT STATUS code sent in the X12 271
"^DD",365.046,365.046,.01,21,2,0)
message.
"^DD",365.046,365.046,.01,"DT")
3130311
"^DD",365.046,365.046,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>75!($L(X)<1) X
"^DD",365.046,365.046,.02,3)
Answer must be 1-75 characters in length.
"^DD",365.046,365.046,.02,21,0)
^^1^1^3130311^
"^DD",365.046,365.046,.02,21,1,0)
This describes the MILITARY EMPLOYMENT STATUS code value in more detail.
"^DD",365.046,365.046,.02,"DT")
3130311
"^DD",365.046,365.046,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.046,365.046,.03,3)
Is the code inactive?
"^DD",365.046,365.046,.03,21,0)
^^2^2^3130311^
"^DD",365.046,365.046,.03,21,1,0)
This field indicates whether or not the code is inactive and will be 
"^DD",365.046,365.046,.03,21,2,0)
marked inactive if a code is determined to no longer be used by X12.
"^DD",365.046,365.046,.03,"DT")
3130311
"^DD",365.1,365.1,.2,0)
SERVICE TYPE CODE^P365.013'^IBE(365.013,^0;20^Q
"^DD",365.1,365.1,.2,3)
Enter service type code to be sent with eIV insurance inquiry.
"^DD",365.1,365.1,.2,21,0)
^^1^1^3130512^
"^DD",365.1,365.1,.2,21,1,0)
Service Type code to be sent with eIV insurance inquiry.
"^DD",365.1,365.1,.2,"DT")
3130512
"^DD",365.2,365.2,0)
FIELD^^1^3
"^DD",365.2,365.2,0,"DDA")
N
"^DD",365.2,365.2,0,"DT")
3130910
"^DD",365.2,365.2,0,"IX","B",365.2,.01)

"^DD",365.2,365.2,0,"NM","IIV RESPONSE REVIEW")

"^DD",365.2,365.2,.01,0)
RESPONSE ID^RP365^IBCN(365,^0;1^Q
"^DD",365.2,365.2,.01,1,0)
^.1
"^DD",365.2,365.2,.01,1,1,0)
365.2^B
"^DD",365.2,365.2,.01,1,1,1)
S ^IBCN(365.2,"B",$E(X,1,30),DA)=""
"^DD",365.2,365.2,.01,1,1,2)
K ^IBCN(365.2,"B",$E(X,1,30),DA)
"^DD",365.2,365.2,.01,3)
Select the IIV Response to be reviewed.
"^DD",365.2,365.2,.01,21,0)
^^1^1^3130522^
"^DD",365.2,365.2,.01,21,1,0)
This is the IIV Response being reviewed.
"^DD",365.2,365.2,.01,"DT")
3130522
"^DD",365.2,365.2,.02,0)
REVIEW STATUS^S^0:Not Reviewed;1:In Process;2:Complete;^0;2^Q
"^DD",365.2,365.2,.02,3)
Enter the status for the IIV Response Review.
"^DD",365.2,365.2,.02,21,0)
^^1^1^3130522^
"^DD",365.2,365.2,.02,21,1,0)
This the status of the review of the IIV Response.
"^DD",365.2,365.2,.02,"DT")
3130910
"^DD",365.2,365.2,1,0)
COMMENT^365.21DA^^1;0
"^DD",365.2,365.2,1,21,0)
^^1^1^3130522^
"^DD",365.2,365.2,1,21,1,0)
This multiple contains comments pertaining to the IIV Response.
"^DD",365.2,365.2,1,"DT")
3130522
"^DD",365.2,365.21,0)
COMMENT SUB-FIELD^^1^3
"^DD",365.2,365.21,0,"DT")
3130501
"^DD",365.2,365.21,0,"IX","B",365.21,.01)

"^DD",365.2,365.21,0,"NM","COMMENT")

"^DD",365.2,365.21,0,"UP")
365.2
"^DD",365.2,365.21,.01,0)
COMMENT DATE TIME^D^^0;1^S %DT="ESTX" D ^%DT S X=Y K:X<1 X
"^DD",365.2,365.21,.01,1,0)
^.1
"^DD",365.2,365.21,.01,1,1,0)
365.21^B
"^DD",365.2,365.21,.01,1,1,1)
S ^IBCN(365.2,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",365.2,365.21,.01,1,1,2)
K ^IBCN(365.2,DA(1),1,"B",$E(X,1,30),DA)
"^DD",365.2,365.21,.01,1,2,0)
^^TRIGGER^365.21^.02
"^DD",365.2,365.21,.01,1,2,1)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(1)=$S($D(^IBCN(365.2,D0,1,D1,0)):^(0),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X=DUZ X ^DD(365.21,.01,1,2,1.4)
"^DD",365.2,365.21,.01,1,2,1.4)
S DIH=$G(^IBCN(365.2,DIV(0),1,DIV(1),0)),DIV=X S $P(^(0),U,2)=DIV,DIH=365.21,DIG=.02 D ^DICR
"^DD",365.2,365.21,.01,1,2,2)
Q
"^DD",365.2,365.21,.01,1,2,"%D",0)
^^2^2^3130501^
"^DD",365.2,365.21,.01,1,2,"%D",1,0)
This trigger will insert the current user into ENTERED BY field of the
"^DD",365.2,365.21,.01,1,2,"%D",2,0)
COMMENT DATE TIME multiple.
"^DD",365.2,365.21,.01,1,2,"CREATE VALUE")
S X=DUZ
"^DD",365.2,365.21,.01,1,2,"DELETE VALUE")
NO EFFECT
"^DD",365.2,365.21,.01,1,2,"DT")
3130501
"^DD",365.2,365.21,.01,1,2,"FIELD")
#.02
"^DD",365.2,365.21,.01,3)
Enter the date/time that the comment is being entered.
"^DD",365.2,365.21,.01,21,0)
^^3^3^3130409^
"^DD",365.2,365.21,.01,21,1,0)
This is the date and time the comment was entered by the user.  It is 
"^DD",365.2,365.21,.01,21,2,0)
defaulted to NOW when added a comment from the IBCN Potential COB 
"^DD",365.2,365.21,.01,21,3,0)
Worklist.
"^DD",365.2,365.21,.01,"DT")
3130501
"^DD",365.2,365.21,.02,0)
ENTERED BY^P200'^VA(200,^0;2^Q
"^DD",365.2,365.21,.02,3)
Enter the user adding the comment.
"^DD",365.2,365.21,.02,5,1,0)
365.21^.01^2
"^DD",365.2,365.21,.02,21,0)
^^2^2^3130409^
"^DD",365.2,365.21,.02,21,1,0)
This is the user that who added the comment.  The field is not asked but 
"^DD",365.2,365.21,.02,21,2,0)
is automatically stored when comments are entered.
"^DD",365.2,365.21,.02,"DT")
3130522
"^DD",365.2,365.21,1,0)
COMMENT^365.211^^1;0
"^DD",365.2,365.21,1,21,0)
^^2^2^3130501^
"^DD",365.2,365.21,1,21,1,0)
This field is for any comments the user chooses to enter in regards to 
"^DD",365.2,365.21,1,21,2,0)
the selected IIV Response.
"^DD",365.2,365.211,0)
COMMENT SUB-FIELD^^.01^1
"^DD",365.2,365.211,0,"DT")
3130501
"^DD",365.2,365.211,0,"NM","COMMENT")

"^DD",365.2,365.211,0,"UP")
365.21
"^DD",365.2,365.211,.01,0)
COMMENT^Wx^^0;1
"^DD",365.2,365.211,.01,3)
Enter the comment for the selected response file entry.
"^DD",365.2,365.211,.01,"DT")
3130501
"^DIC",365.028,365.028,0)
X12 271 REFERENCE IDENTIFICATION^365.028
"^DIC",365.028,365.028,0,"GL")
^IBE(365.028,
"^DIC",365.028,365.028,"%",0)
^1.005^^0
"^DIC",365.028,365.028,"%D",0)
^^7^7^3090909^
"^DIC",365.028,365.028,"%D",1,0)
This file contains all the corresponding X.12 codes for reference 
"^DIC",365.028,365.028,"%D",2,0)
identification codes.
"^DIC",365.028,365.028,"%D",3,0)
 
"^DIC",365.028,365.028,"%D",4,0)
 
"^DIC",365.028,365.028,"%D",5,0)
 
"^DIC",365.028,365.028,"%D",6,0)
Per VHA Directive 10-93-142, this file definition should not be 
"^DIC",365.028,365.028,"%D",7,0)
modified.
"^DIC",365.028,"B","X12 271 REFERENCE IDENTIFICATION",365.028)

"^DIC",365.029,365.029,0)
X12 271 UNITS OF MEASUREMENT^365.029
"^DIC",365.029,365.029,0,"GL")
^IBE(365.029,
"^DIC",365.029,365.029,"%",0)
^1.005^^
"^DIC",365.029,365.029,"%D",0)
^^1^1^3130307^
"^DIC",365.029,365.029,"%D",1,0)
This file contains all the corresponding X.12 271 Units of measurement.
"^DIC",365.029,"B","X12 271 UNITS OF MEASUREMENT",365.029)

"^DIC",365.031,365.031,0)
X12 271 ENTITY RELATIONSHIP CODE^365.031
"^DIC",365.031,365.031,0,"GL")
^IBE(365.031,
"^DIC",365.031,365.031,"%",0)
^1.005^^
"^DIC",365.031,365.031,"%D",0)
^^2^2^3130305^
"^DIC",365.031,365.031,"%D",1,0)
This file contains all the corresponding X.12 271 Entity Relationship 
"^DIC",365.031,365.031,"%D",2,0)
codes.
"^DIC",365.031,"B","X12 271 ENTITY RELATIONSHIP CODE",365.031)

"^DIC",365.032,365.032,0)
X12 271 DATE FORMAT QUALIFIER^365.032
"^DIC",365.032,365.032,0,"GL")
^IBE(365.032,
"^DIC",365.032,365.032,"%",0)
^1.005^^
"^DIC",365.032,365.032,"%D",0)
^^1^1^3130305^
"^DIC",365.032,365.032,"%D",1,0)
This file contains all the corresponding X.12 271 date format qualifiers.
"^DIC",365.032,"B","X12 271 DATE FORMAT QUALIFIER",365.032)

"^DIC",365.033,365.033,0)
X12 271 YES/NO RESPONSE CODE ^365.033
"^DIC",365.033,365.033,0,"GL")
^IBE(365.033,
"^DIC",365.033,365.033,"%",0)
^1.005^^
"^DIC",365.033,365.033,"%D",0)
^^2^2^3130319^
"^DIC",365.033,365.033,"%D",1,0)
This file contains the corresponding X.12 271 YES/NO CONDITION OR 
"^DIC",365.033,365.033,"%D",2,0)
RESPONSE CODES.
"^DIC",365.033,"B","X12 271 YES/NO RESPONSE CODE ",365.033)

"^DIC",365.034,365.034,0)
X12 271 LOCATION QUALIFER^365.034
"^DIC",365.034,365.034,0,"GL")
^IBE(365.034,
"^DIC",365.034,365.034,"%",0)
^1.005^^
"^DIC",365.034,365.034,"%D",0)
^^1^1^3130306^
"^DIC",365.034,365.034,"%D",1,0)
This file contains all the corresponding X.12 271 Location Qualifiers. 
"^DIC",365.034,"B","X12 271 LOCATION QUALIFER",365.034)

"^DIC",365.035,365.035,0)
X12 271 PROCEDURE CODING METHOD^365.035
"^DIC",365.035,365.035,0,"GL")
^IBE(365.035,
"^DIC",365.035,365.035,"%",0)
^1.005^^
"^DIC",365.035,365.035,"%D",0)
^^2^2^3130307^
"^DIC",365.035,365.035,"%D",1,0)
This file contains all the corresponding X.12 271 procedure coding 
"^DIC",365.035,365.035,"%D",2,0)
methods.
"^DIC",365.035,"B","X12 271 PROCEDURE CODING METHOD",365.035)

"^DIC",365.036,365.036,0)
X12 271 DELIVERY PATTERN^365.036
"^DIC",365.036,365.036,0,"GL")
^IBE(365.036,
"^DIC",365.036,365.036,"%",0)
^1.005^^
"^DIC",365.036,365.036,"%D",0)
^^1^1^3130312^
"^DIC",365.036,365.036,"%D",1,0)
This file contains all the corresponding X12 271 Delivery Pattern codes.
"^DIC",365.036,"B","X12 271 DELIVERY PATTERN",365.036)

"^DIC",365.037,365.037,0)
X12 271 PATIENT RELATIONSHIP^365.037
"^DIC",365.037,365.037,0,"GL")
^IBE(365.037,
"^DIC",365.037,365.037,"%",0)
^1.005^^
"^DIC",365.037,365.037,"%D",0)
^^2^2^3130318^
"^DIC",365.037,365.037,"%D",1,0)
This file contains all the corresponding X.12 271 patient relationship
"^DIC",365.037,365.037,"%D",2,0)
codes.
"^DIC",365.037,"B","X12 271 PATIENT RELATIONSHIP",365.037)

"^DIC",365.038,365.038,0)
X12 271 INJURY CATEGORY^365.038
"^DIC",365.038,365.038,0,"GL")
^IBE(365.038,
"^DIC",365.038,365.038,"%",0)
^1.005^^
"^DIC",365.038,365.038,"%D",0)
^^2^2^3130506^
"^DIC",365.038,365.038,"%D",1,0)
This file contains all the corresponding X.12 271 NATURE OF INJURY 
"^DIC",365.038,365.038,"%D",2,0)
CATEGORY codes.
"^DIC",365.038,"B","X12 271 INJURY CATEGORY",365.038)

"^DIC",365.039,365.039,0)
X12 271 MILITARY PERSONNEL INFO STATUS CODE^365.039
"^DIC",365.039,365.039,0,"GL")
^IBE(365.039,
"^DIC",365.039,365.039,"%",0)
^1.005^^
"^DIC",365.039,365.039,"%D",0)
^^5^5^3130305^
"^DIC",365.039,365.039,"%D",1,0)
This file contains all the corresponding X.12 271 military personnel 
"^DIC",365.039,365.039,"%D",2,0)
information status codes.
"^DIC",365.039,365.039,"%D",3,0)
 
"^DIC",365.039,365.039,"%D",4,0)
Per VHA Directive 10-93-142, this file definition should not be 
"^DIC",365.039,365.039,"%D",5,0)
modified.
"^DIC",365.039,"B","X12 271 MILITARY PERSONNEL INFO STATUS CODE",365.039)

"^DIC",365.041,365.041,0)
X12 271 MILITARY GOVT SERVICE AFFILIATION^365.041
"^DIC",365.041,365.041,0,"GL")
^IBE(365.041,
"^DIC",365.041,365.041,"%",0)
^1.005^^
"^DIC",365.041,365.041,"%D",0)
^^2^2^3130613^
"^DIC",365.041,365.041,"%D",1,0)
This file contains all the corresponding X.12 271 Military Personnel 
"^DIC",365.041,365.041,"%D",2,0)
Information government service affiliation codes.
"^DIC",365.041,"B","X12 271 MILITARY GOVT SERVICE AFFILIATION",365.041)

"^DIC",365.042,365.042,0)
X12 271 MILITARY SERVICE RANK^365.042
"^DIC",365.042,365.042,0,"GL")
^IBE(365.042,
"^DIC",365.042,365.042,"%",0)
^1.005^^
"^DIC",365.042,365.042,"%D",0)
^^2^2^3130613^
"^DIC",365.042,365.042,"%D",1,0)
This file contains all the corresponding X.12 271 Military Personnel 
"^DIC",365.042,365.042,"%D",2,0)
Information rank codes.
"^DIC",365.042,"B","X12 271 MILITARY SERVICE RANK",365.042)

"^DIC",365.043,365.043,0)
X12 271 ENTITY TYPE QUALIFIER^365.043
"^DIC",365.043,365.043,0,"GL")
^IBE(365.043,
"^DIC",365.043,365.043,"%",0)
^1.005^^
"^DIC",365.043,365.043,"%D",0)
^^1^1^3130305^
"^DIC",365.043,365.043,"%D",1,0)
This file contains all the corresponding X.12 271 Entity Type Qualifiers.
"^DIC",365.043,"B","X12 271 ENTITY TYPE QUALIFIER",365.043)

"^DIC",365.044,365.044,0)
X12 271 CODE LIST QUALIFIER^365.044
"^DIC",365.044,365.044,0,"GL")
^IBE(365.044,
"^DIC",365.044,365.044,"%",0)
^1.005^^
"^DIC",365.044,365.044,"%D",0)
^^1^1^3130306^
"^DIC",365.044,365.044,"%D",1,0)
This file contains all the corresponding X.12 271 code list qualifiers.
"^DIC",365.044,"B","X12 271 CODE LIST QUALIFIER",365.044)

"^DIC",365.045,365.045,0)
X12 271 NATURE OF INJURY CODES^365.045
"^DIC",365.045,365.045,0,"GL")
^IBE(365.045,
"^DIC",365.045,365.045,"%",0)
^1.005^^
"^DIC",365.045,365.045,"%D",0)
^^1^1^3130306^
"^DIC",365.045,365.045,"%D",1,0)
This file contains all the corresponding X.12 271 NATURE OF INJURY CODES.
"^DIC",365.045,"B","X12 271 NATURE OF INJURY CODES",365.045)

"^DIC",365.046,365.046,0)
X12 271 MILITARY EMPLOYMENT STATUS CODE^365.046
"^DIC",365.046,365.046,0,"GL")
^IBE(365.046,
"^DIC",365.046,365.046,"%",0)
^1.005^^
"^DIC",365.046,365.046,"%D",0)
^^4^4^3130305^
"^DIC",365.046,365.046,"%D",1,0)
This file contains all the corresponding X.12 271 MPI employment status 
"^DIC",365.046,365.046,"%D",2,0)
codes.
"^DIC",365.046,365.046,"%D",3,0)
 
"^DIC",365.046,365.046,"%D",4,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365.046,"B","X12 271 MILITARY EMPLOYMENT STATUS CODE",365.046)

"^DIC",365.2,365.2,0)
IIV RESPONSE REVIEW^365.2
"^DIC",365.2,365.2,0,"GL")
^IBCN(365.2,
"^DIC",365.2,365.2,"%",0)
^1.005^^
"^DIC",365.2,365.2,"%D",0)
^^2^2^3130522^
"^DIC",365.2,365.2,"%D",1,0)
This file holds the reviews of the IIV Response messages. Per VHA 
"^DIC",365.2,365.2,"%D",2,0)
Directive 10-93-142, this file definition should not be modified.
"^DIC",365.2,"B","IIV RESPONSE REVIEW",365.2)

"BLD",9092,6)
^471
**END**
**END**


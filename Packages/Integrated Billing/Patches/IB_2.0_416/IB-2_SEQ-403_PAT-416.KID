Released IB*2*416 SEQ #403
Extracted from mail message
**KIDS**:IB*2.0*416^

**INSTALL NAME**
IB*2.0*416
"BLD",7487,0)
IB*2.0*416^INTEGRATED BILLING^0^3100915^y
"BLD",7487,1,0)
^^1^1^3090818^
"BLD",7487,1,1,0)
eIV Phase 3, Iteration 1
"BLD",7487,4,0)
^9.64PA^365.028^17
"BLD",7487,4,2,0)
2
"BLD",7487,4,2,2,0)
^9.641^2.312^2
"BLD",7487,4,2,2,2.312,0)
INSURANCE TYPE  (sub-file)
"BLD",7487,4,2,2,2.312,1,0)
^9.6411^4.04^2
"BLD",7487,4,2,2,2.312,1,1.05,0)
DATE LAST EDITED
"BLD",7487,4,2,2,2.312,1,4.04,0)
EIV AUTO-UPDATE
"BLD",7487,4,2,2,2.322,0)
ELIGIBILITY/BENEFIT  (sub-file)
"BLD",7487,4,2,2,2.322,1,0)
^9.6411^^
"BLD",7487,4,2,222)
y^y^p^^^^n^^n
"BLD",7487,4,2,224)

"BLD",7487,4,350.9,0)
350.9
"BLD",7487,4,350.9,2,0)
^9.641^350.9002^2
"BLD",7487,4,350.9,2,350.9,0)
IB SITE PARAMETERS  (File-top level)
"BLD",7487,4,350.9,2,350.9,1,0)
^9.6411^51.25^11
"BLD",7487,4,350.9,2,350.9,1,51.02,0)
DAILY MAILMAN MSG
"BLD",7487,4,350.9,2,350.9,1,51.03,0)
DAILY MSG TIME
"BLD",7487,4,350.9,2,350.9,1,51.04,0)
MESSAGES MAILGROUP
"BLD",7487,4,350.9,2,350.9,1,51.06,0)
NUMBER RETRIES
"BLD",7487,4,350.9,2,350.9,1,51.13,0)
HL7 RESPONSE PROCESSING
"BLD",7487,4,350.9,2,350.9,1,51.14,0)
HL7 START TIME
"BLD",7487,4,350.9,2,350.9,1,51.15,0)
HL7 MAXIMUM NUMBER
"BLD",7487,4,350.9,2,350.9,1,51.19,0)
HL7 STOP TIME
"BLD",7487,4,350.9,2,350.9,1,51.2,0)
FAILURE MAILMAN MSG
"BLD",7487,4,350.9,2,350.9,1,51.22,0)
REGISTRATION COMPLETE
"BLD",7487,4,350.9,2,350.9,1,51.25,0)
MEDICARE PAYER
"BLD",7487,4,350.9,2,350.9002,0)
BATCH EXTRACTS  (sub-file)
"BLD",7487,4,350.9,2,350.9002,1,0)
^9.6411^^0
"BLD",7487,4,350.9,222)
y^y^p^^^^n^^n
"BLD",7487,4,350.9,224)

"BLD",7487,4,355.33,0)
355.33
"BLD",7487,4,355.33,2,0)
^9.641^355.33^1
"BLD",7487,4,355.33,2,355.33,0)
INSURANCE BUFFER  (File-top level)
"BLD",7487,4,355.33,2,355.33,1,0)
^9.6411^62.06^5
"BLD",7487,4,355.33,2,355.33,1,62.02,0)
SUBSCRIBER ADDRESS LINE 1
"BLD",7487,4,355.33,2,355.33,1,62.03,0)
SUBSCRIBER ADDRESS LINE 2
"BLD",7487,4,355.33,2,355.33,1,62.04,0)
SUBSCRIBER ADDRESS CITY
"BLD",7487,4,355.33,2,355.33,1,62.05,0)
SUBSCRIBER ADDRESS STATE
"BLD",7487,4,355.33,2,355.33,1,62.06,0)
SUBSCRIBER ADDRESS ZIP
"BLD",7487,4,355.33,222)
y^y^p^^^^n^^n
"BLD",7487,4,355.33,224)

"BLD",7487,4,365,0)
365
"BLD",7487,4,365,2,0)
^9.641^365^2
"BLD",7487,4,365,2,365,0)
IIV RESPONSE  (File-top level)
"BLD",7487,4,365,2,365,1,0)
^9.6411^5.05^6
"BLD",7487,4,365,2,365,1,1.09,0)
PT RELATIONSHIP TO INSURED
"BLD",7487,4,365,2,365,1,5.01,0)
SUBSCRIBER ADDRESS LINE 1
"BLD",7487,4,365,2,365,1,5.02,0)
SUBSCRIBER ADDRESS LINE 2
"BLD",7487,4,365,2,365,1,5.03,0)
SUBSCRIBER ADDRESS CITY
"BLD",7487,4,365,2,365,1,5.04,0)
SUBSCRIBER ADDRESS STATE
"BLD",7487,4,365,2,365,1,5.05,0)
SUBSCRIBER ADDRESS ZIP
"BLD",7487,4,365,2,365.02,0)
ELIGIBILITY/BENEFIT  (sub-file)
"BLD",7487,4,365,2,365.02,1,0)
^9.6411^^
"BLD",7487,4,365,222)
y^y^p^^^^n^^n
"BLD",7487,4,365,224)

"BLD",7487,4,365.011,0)
365.011
"BLD",7487,4,365.011,222)
y^y^f^^n^^y^o^n
"BLD",7487,4,365.013,0)
365.013
"BLD",7487,4,365.013,222)
y^y^f^^n^^y^o^n
"BLD",7487,4,365.014,0)
365.014
"BLD",7487,4,365.014,222)
y^y^f^^n^^y^o^n
"BLD",7487,4,365.016,0)
365.016
"BLD",7487,4,365.016,222)
y^y^f^^n^^y^o^n
"BLD",7487,4,365.022,0)
365.022
"BLD",7487,4,365.022,222)
y^y^f^^n^^y^o^n
"BLD",7487,4,365.023,0)
365.023
"BLD",7487,4,365.023,222)
y^y^f^^n^^y^o^n
"BLD",7487,4,365.024,0)
365.024
"BLD",7487,4,365.024,222)
y^y^f^^n^^y^o^n
"BLD",7487,4,365.025,0)
365.025
"BLD",7487,4,365.025,222)
y^y^f^^n^^y^o^n
"BLD",7487,4,365.026,0)
365.026
"BLD",7487,4,365.026,222)
y^y^f^^n^^y^o^n
"BLD",7487,4,365.028,0)
365.028
"BLD",7487,4,365.028,222)
y^y^f^^n^^y^o^n
"BLD",7487,4,365.1,0)
365.1
"BLD",7487,4,365.1,2,0)
^9.641^365.1^1
"BLD",7487,4,365.1,2,365.1,0)
IIV TRANSMISSION QUEUE  (File-top level)
"BLD",7487,4,365.1,2,365.1,1,0)
^9.6411^.19^2
"BLD",7487,4,365.1,2,365.1,1,.1,0)
WHICH EXTRACT
"BLD",7487,4,365.1,2,365.1,1,.19,0)
HL7 PATIENT ID FIELD
"BLD",7487,4,365.1,222)
y^y^p^^^^n^^n
"BLD",7487,4,365.1,224)

"BLD",7487,4,365.12,0)
365.12
"BLD",7487,4,365.12,2,0)
^9.641^365.1213^2
"BLD",7487,4,365.12,2,365.1212,0)
ACTIVE FLAG LOG  (sub-file)
"BLD",7487,4,365.12,2,365.1212,1,0)
^9.6411^^
"BLD",7487,4,365.12,2,365.1213,0)
TRUSTED FLAG LOG  (sub-file)
"BLD",7487,4,365.12,2,365.1213,1,0)
^9.6411^^
"BLD",7487,4,365.12,222)
y^y^p^^^^n^^n
"BLD",7487,4,365.12,224)

"BLD",7487,4,365.15,0)
365.15
"BLD",7487,4,365.15,222)
n^y^f^^y^^y^o^n
"BLD",7487,4,"APDD",2,2.312)

"BLD",7487,4,"APDD",2,2.312,1.05)

"BLD",7487,4,"APDD",2,2.312,4.04)

"BLD",7487,4,"APDD",2,2.322)

"BLD",7487,4,"APDD",350.9,350.9)

"BLD",7487,4,"APDD",350.9,350.9,51.02)

"BLD",7487,4,"APDD",350.9,350.9,51.03)

"BLD",7487,4,"APDD",350.9,350.9,51.04)

"BLD",7487,4,"APDD",350.9,350.9,51.06)

"BLD",7487,4,"APDD",350.9,350.9,51.13)

"BLD",7487,4,"APDD",350.9,350.9,51.14)

"BLD",7487,4,"APDD",350.9,350.9,51.15)

"BLD",7487,4,"APDD",350.9,350.9,51.19)

"BLD",7487,4,"APDD",350.9,350.9,51.2)

"BLD",7487,4,"APDD",350.9,350.9,51.22)

"BLD",7487,4,"APDD",350.9,350.9,51.25)

"BLD",7487,4,"APDD",350.9,350.9002)

"BLD",7487,4,"APDD",355.33,355.33)

"BLD",7487,4,"APDD",355.33,355.33,62.02)

"BLD",7487,4,"APDD",355.33,355.33,62.03)

"BLD",7487,4,"APDD",355.33,355.33,62.04)

"BLD",7487,4,"APDD",355.33,355.33,62.05)

"BLD",7487,4,"APDD",355.33,355.33,62.06)

"BLD",7487,4,"APDD",365,365)

"BLD",7487,4,"APDD",365,365,1.09)

"BLD",7487,4,"APDD",365,365,5.01)

"BLD",7487,4,"APDD",365,365,5.02)

"BLD",7487,4,"APDD",365,365,5.03)

"BLD",7487,4,"APDD",365,365,5.04)

"BLD",7487,4,"APDD",365,365,5.05)

"BLD",7487,4,"APDD",365,365.02)

"BLD",7487,4,"APDD",365.1,365.1)

"BLD",7487,4,"APDD",365.1,365.1,.1)

"BLD",7487,4,"APDD",365.1,365.1,.19)

"BLD",7487,4,"APDD",365.12,365.1212)

"BLD",7487,4,"APDD",365.12,365.1213)

"BLD",7487,4,"B",2,2)

"BLD",7487,4,"B",350.9,350.9)

"BLD",7487,4,"B",355.33,355.33)

"BLD",7487,4,"B",365,365)

"BLD",7487,4,"B",365.011,365.011)

"BLD",7487,4,"B",365.013,365.013)

"BLD",7487,4,"B",365.014,365.014)

"BLD",7487,4,"B",365.016,365.016)

"BLD",7487,4,"B",365.022,365.022)

"BLD",7487,4,"B",365.023,365.023)

"BLD",7487,4,"B",365.024,365.024)

"BLD",7487,4,"B",365.025,365.025)

"BLD",7487,4,"B",365.026,365.026)

"BLD",7487,4,"B",365.028,365.028)

"BLD",7487,4,"B",365.1,365.1)

"BLD",7487,4,"B",365.12,365.12)

"BLD",7487,4,"B",365.15,365.15)

"BLD",7487,6.3)
58
"BLD",7487,"ABPKG")
n
"BLD",7487,"INID")
^y
"BLD",7487,"INIT")
IBY416PO
"BLD",7487,"KRN",0)
^9.67PA^779.2^20
"BLD",7487,"KRN",.4,0)
.4
"BLD",7487,"KRN",.401,0)
.401
"BLD",7487,"KRN",.402,0)
.402
"BLD",7487,"KRN",.402,"NM",0)
^9.68A^1^1
"BLD",7487,"KRN",.402,"NM",1,0)
IBCNE GENERAL PARAMETER EDIT    FILE #350.9^350.9^0
"BLD",7487,"KRN",.402,"NM","B","IBCNE GENERAL PARAMETER EDIT    FILE #350.9",1)

"BLD",7487,"KRN",.403,0)
.403
"BLD",7487,"KRN",.403,"NM",0)
^9.68A^^
"BLD",7487,"KRN",.5,0)
.5
"BLD",7487,"KRN",.84,0)
.84
"BLD",7487,"KRN",3.6,0)
3.6
"BLD",7487,"KRN",3.8,0)
3.8
"BLD",7487,"KRN",9.2,0)
9.2
"BLD",7487,"KRN",9.8,0)
9.8
"BLD",7487,"KRN",9.8,"NM",0)
^9.68A^74^73
"BLD",7487,"KRN",9.8,"NM",1,0)
IBJPI^^0^B20701382
"BLD",7487,"KRN",9.8,"NM",2,0)
IBJPI2^^0^B5452535
"BLD",7487,"KRN",9.8,"NM",3,0)
IBCNSU1^^0^B18872542
"BLD",7487,"KRN",9.8,"NM",4,0)
IBCNEQU^^0^B82573317
"BLD",7487,"KRN",9.8,"NM",5,0)
IBJPM^^0^B10531686
"BLD",7487,"KRN",9.8,"NM",6,0)
IBCNEHLQ^^0^B38577924
"BLD",7487,"KRN",9.8,"NM",7,0)
IBCNEUT5^^0^B57334702
"BLD",7487,"KRN",9.8,"NM",8,0)
IBCNEDE^^0^B20320433
"BLD",7487,"KRN",9.8,"NM",9,0)
IBCNEPM1^^0^B31433472
"BLD",7487,"KRN",9.8,"NM",10,0)
IBCNEPY^^0^B17186468
"BLD",7487,"KRN",9.8,"NM",11,0)
IBCNEHL1^^0^B225142720
"BLD",7487,"KRN",9.8,"NM",12,0)
IBCNEHL2^^0^B53025337
"BLD",7487,"KRN",9.8,"NM",13,0)
IBCNEHL4^^0^B96805218
"BLD",7487,"KRN",9.8,"NM",14,0)
IBCNSC01^^0^B53646224
"BLD",7487,"KRN",9.8,"NM",15,0)
IBCNEDEP^^0^B83667847
"BLD",7487,"KRN",9.8,"NM",16,0)
IBCNEUT4^^0^B50167663
"BLD",7487,"KRN",9.8,"NM",17,0)
IBCNEDE2^^0^B58601408
"BLD",7487,"KRN",9.8,"NM",18,0)
IBCNERPE^^0^B36361133
"BLD",7487,"KRN",9.8,"NM",19,0)
IBCNERP3^^0^B28161597
"BLD",7487,"KRN",9.8,"NM",20,0)
IBCNERPA^^0^B6564371
"BLD",7487,"KRN",9.8,"NM",21,0)
IBCNERP0^^0^B5707694
"BLD",7487,"KRN",9.8,"NM",22,0)
IBCNERP1^^0^B79692188
"BLD",7487,"KRN",9.8,"NM",23,0)
IBCNERP4^^0^B61656289
"BLD",7487,"KRN",9.8,"NM",24,0)
IBCNERP6^^0^B74223457
"BLD",7487,"KRN",9.8,"NM",25,0)
IBCNERP7^^0^B26715367
"BLD",7487,"KRN",9.8,"NM",26,0)
IBCNERP9^^0^B102330381
"BLD",7487,"KRN",9.8,"NM",27,0)
IBCNERPB^^0^B47288196
"BLD",7487,"KRN",9.8,"NM",28,0)
IBCNERPD^^0^B44163811
"BLD",7487,"KRN",9.8,"NM",29,0)
IBCNERP8^^0^B66453982
"BLD",7487,"KRN",9.8,"NM",30,0)
IBCNEHLT^^0^B77352947
"BLD",7487,"KRN",9.8,"NM",31,0)
IBCNERPF^^0^B16361185
"BLD",7487,"KRN",9.8,"NM",32,0)
IBCNERPG^^0^B15534927
"BLD",7487,"KRN",9.8,"NM",33,0)
IBCNERPH^^0^B19008482
"BLD",7487,"KRN",9.8,"NM",34,0)
IBCNBAA^^0^B67963575
"BLD",7487,"KRN",9.8,"NM",35,0)
IBCNES^^0^B24997316
"BLD",7487,"KRN",9.8,"NM",36,0)
IBCNES1^^0^B103884237
"BLD",7487,"KRN",9.8,"NM",37,0)
IBCNES2^^0^B9476079
"BLD",7487,"KRN",9.8,"NM",38,0)
IBCNSC4^^0^B17661433
"BLD",7487,"KRN",9.8,"NM",39,0)
IBCNSC41^^0^B9252371
"BLD",7487,"KRN",9.8,"NM",40,0)
IBCNSP^^0^B42954824
"BLD",7487,"KRN",9.8,"NM",41,0)
IBCNS3^^0^B62573337
"BLD",7487,"KRN",9.8,"NM",43,0)
IBCNSP01^^0^B33683555
"BLD",7487,"KRN",9.8,"NM",44,0)
IBCNEBF^^0^B36248866
"BLD",7487,"KRN",9.8,"NM",45,0)
IBCNEDE5^^0^B26929333
"BLD",7487,"KRN",9.8,"NM",46,0)
IBCNEDE1^^0^B37016330
"BLD",7487,"KRN",9.8,"NM",47,0)
IBCNEDE3^^0^B57677467
"BLD",7487,"KRN",9.8,"NM",48,0)
IBCNEDE4^^0^B81971988
"BLD",7487,"KRN",9.8,"NM",49,0)
IBCNEDE6^^0^B32927570
"BLD",7487,"KRN",9.8,"NM",50,0)
IBCNEDE7^^0^B24335491
"BLD",7487,"KRN",9.8,"NM",51,0)
IBCNEKI2^^0^B9273638
"BLD",7487,"KRN",9.8,"NM",52,0)
IBCNERP2^^0^B30801647
"BLD",7487,"KRN",9.8,"NM",53,0)
IBCNERP5^^0^B43579817
"BLD",7487,"KRN",9.8,"NM",54,0)
IBCNERPC^^0^B46095484
"BLD",7487,"KRN",9.8,"NM",55,0)
IBCNEUT3^^0^B56842259
"BLD",7487,"KRN",9.8,"NM",56,0)
IBCNEUT8^^0^B5629329
"BLD",7487,"KRN",9.8,"NM",57,0)
IBCNBLL^^0^B90593913
"BLD",7487,"KRN",9.8,"NM",58,0)
IBCNBLA^^0^B65832730
"BLD",7487,"KRN",9.8,"NM",59,0)
IBCNEDEQ^^0^B27902088
"BLD",7487,"KRN",9.8,"NM",60,0)
IBCNEHL3^^0^B72667613
"BLD",7487,"KRN",9.8,"NM",61,0)
IBCNEHLI^^0^B8196060
"BLD",7487,"KRN",9.8,"NM",62,0)
IBCNEUT2^^0^B2594683
"BLD",7487,"KRN",9.8,"NM",63,0)
IBCNBLB^^0^B1130107
"BLD",7487,"KRN",9.8,"NM",64,0)
IBCNBLE^^0^B77550797
"BLD",7487,"KRN",9.8,"NM",65,0)
IBCNBCD^^0^B84472806
"BLD",7487,"KRN",9.8,"NM",66,0)
IBCNBMI^^0^B85358524
"BLD",7487,"KRN",9.8,"NM",67,0)
IBCNBEE^^0^B45989984
"BLD",7487,"KRN",9.8,"NM",68,0)
IBCNBLA1^^0^B77705604
"BLD",7487,"KRN",9.8,"NM",69,0)
IBCNBAR^^0^B44012684
"BLD",7487,"KRN",9.8,"NM",70,0)
IBCNBLE1^^0^B27906815
"BLD",7487,"KRN",9.8,"NM",71,0)
IBCNEKIT^^0^B54158297
"BLD",7487,"KRN",9.8,"NM",72,0)
IBCNEHLM^^0^B21127175
"BLD",7487,"KRN",9.8,"NM",73,0)
IBCNICB^^0^B106011881
"BLD",7487,"KRN",9.8,"NM",74,0)
IBCNEHLU^^0^B30725766
"BLD",7487,"KRN",9.8,"NM","B","IBCNBAA",34)

"BLD",7487,"KRN",9.8,"NM","B","IBCNBAR",69)

"BLD",7487,"KRN",9.8,"NM","B","IBCNBCD",65)

"BLD",7487,"KRN",9.8,"NM","B","IBCNBEE",67)

"BLD",7487,"KRN",9.8,"NM","B","IBCNBLA",58)

"BLD",7487,"KRN",9.8,"NM","B","IBCNBLA1",68)

"BLD",7487,"KRN",9.8,"NM","B","IBCNBLB",63)

"BLD",7487,"KRN",9.8,"NM","B","IBCNBLE",64)

"BLD",7487,"KRN",9.8,"NM","B","IBCNBLE1",70)

"BLD",7487,"KRN",9.8,"NM","B","IBCNBLL",57)

"BLD",7487,"KRN",9.8,"NM","B","IBCNBMI",66)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEBF",44)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEDE",8)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEDE1",46)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEDE2",17)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEDE3",47)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEDE4",48)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEDE5",45)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEDE6",49)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEDE7",50)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEDEP",15)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEDEQ",59)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEHL1",11)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEHL2",12)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEHL3",60)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEHL4",13)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEHLI",61)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEHLM",72)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEHLQ",6)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEHLT",30)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEHLU",74)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEKI2",51)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEKIT",71)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEPM1",9)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEPY",10)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEQU",4)

"BLD",7487,"KRN",9.8,"NM","B","IBCNERP0",21)

"BLD",7487,"KRN",9.8,"NM","B","IBCNERP1",22)

"BLD",7487,"KRN",9.8,"NM","B","IBCNERP2",52)

"BLD",7487,"KRN",9.8,"NM","B","IBCNERP3",19)

"BLD",7487,"KRN",9.8,"NM","B","IBCNERP4",23)

"BLD",7487,"KRN",9.8,"NM","B","IBCNERP5",53)

"BLD",7487,"KRN",9.8,"NM","B","IBCNERP6",24)

"BLD",7487,"KRN",9.8,"NM","B","IBCNERP7",25)

"BLD",7487,"KRN",9.8,"NM","B","IBCNERP8",29)

"BLD",7487,"KRN",9.8,"NM","B","IBCNERP9",26)

"BLD",7487,"KRN",9.8,"NM","B","IBCNERPA",20)

"BLD",7487,"KRN",9.8,"NM","B","IBCNERPB",27)

"BLD",7487,"KRN",9.8,"NM","B","IBCNERPC",54)

"BLD",7487,"KRN",9.8,"NM","B","IBCNERPD",28)

"BLD",7487,"KRN",9.8,"NM","B","IBCNERPE",18)

"BLD",7487,"KRN",9.8,"NM","B","IBCNERPF",31)

"BLD",7487,"KRN",9.8,"NM","B","IBCNERPG",32)

"BLD",7487,"KRN",9.8,"NM","B","IBCNERPH",33)

"BLD",7487,"KRN",9.8,"NM","B","IBCNES",35)

"BLD",7487,"KRN",9.8,"NM","B","IBCNES1",36)

"BLD",7487,"KRN",9.8,"NM","B","IBCNES2",37)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEUT2",62)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEUT3",55)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEUT4",16)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEUT5",7)

"BLD",7487,"KRN",9.8,"NM","B","IBCNEUT8",56)

"BLD",7487,"KRN",9.8,"NM","B","IBCNICB",73)

"BLD",7487,"KRN",9.8,"NM","B","IBCNS3",41)

"BLD",7487,"KRN",9.8,"NM","B","IBCNSC01",14)

"BLD",7487,"KRN",9.8,"NM","B","IBCNSC4",38)

"BLD",7487,"KRN",9.8,"NM","B","IBCNSC41",39)

"BLD",7487,"KRN",9.8,"NM","B","IBCNSP",40)

"BLD",7487,"KRN",9.8,"NM","B","IBCNSP01",43)

"BLD",7487,"KRN",9.8,"NM","B","IBCNSU1",3)

"BLD",7487,"KRN",9.8,"NM","B","IBJPI",1)

"BLD",7487,"KRN",9.8,"NM","B","IBJPI2",2)

"BLD",7487,"KRN",9.8,"NM","B","IBJPM",5)

"BLD",7487,"KRN",19,0)
19
"BLD",7487,"KRN",19,"NM",0)
^9.68A^14^14
"BLD",7487,"KRN",19,"NM",1,0)
IBCNE IIV MENU^^0
"BLD",7487,"KRN",19,"NM",2,0)
IBCNE IIV RESPONSE REPORT^^0
"BLD",7487,"KRN",19,"NM",3,0)
IBCNE IIV PAYER REPORT^^0
"BLD",7487,"KRN",19,"NM",4,0)
IBCNE IIV STATISTICAL REPORT^^0
"BLD",7487,"KRN",19,"NM",5,0)
IBCNE IIV PAYER LINK REPORT^^0
"BLD",7487,"KRN",19,"NM",6,0)
IBCNE IIV INACTIVE POLICY RPT^^0
"BLD",7487,"KRN",19,"NM",7,0)
IBCNE IIV AMBIGUOUS POLICY RPT^^0
"BLD",7487,"KRN",19,"NM",8,0)
IBCNE PURGE IIV DATA^^0
"BLD",7487,"KRN",19,"NM",9,0)
IBCNE REQUEST INQUIRY^^0
"BLD",7487,"KRN",19,"NM",10,0)
IBCNE EIV UPDATE REPORT^^0
"BLD",7487,"KRN",19,"NM",11,0)
IBCNE AUTO MATCH BUFFER^^0
"BLD",7487,"KRN",19,"NM",12,0)
IBCNE AUTO MATCH ENTER/EDIT^^0
"BLD",7487,"KRN",19,"NM",13,0)
IBCNE POTENTIAL NEW INS FOUND^^0
"BLD",7487,"KRN",19,"NM",14,0)
IBCNE IIV BATCH PROCESS^^0
"BLD",7487,"KRN",19,"NM","B","IBCNE AUTO MATCH BUFFER",11)

"BLD",7487,"KRN",19,"NM","B","IBCNE AUTO MATCH ENTER/EDIT",12)

"BLD",7487,"KRN",19,"NM","B","IBCNE EIV UPDATE REPORT",10)

"BLD",7487,"KRN",19,"NM","B","IBCNE IIV AMBIGUOUS POLICY RPT",7)

"BLD",7487,"KRN",19,"NM","B","IBCNE IIV BATCH PROCESS",14)

"BLD",7487,"KRN",19,"NM","B","IBCNE IIV INACTIVE POLICY RPT",6)

"BLD",7487,"KRN",19,"NM","B","IBCNE IIV MENU",1)

"BLD",7487,"KRN",19,"NM","B","IBCNE IIV PAYER LINK REPORT",5)

"BLD",7487,"KRN",19,"NM","B","IBCNE IIV PAYER REPORT",3)

"BLD",7487,"KRN",19,"NM","B","IBCNE IIV RESPONSE REPORT",2)

"BLD",7487,"KRN",19,"NM","B","IBCNE IIV STATISTICAL REPORT",4)

"BLD",7487,"KRN",19,"NM","B","IBCNE POTENTIAL NEW INS FOUND",13)

"BLD",7487,"KRN",19,"NM","B","IBCNE PURGE IIV DATA",8)

"BLD",7487,"KRN",19,"NM","B","IBCNE REQUEST INQUIRY",9)

"BLD",7487,"KRN",19.1,0)
19.1
"BLD",7487,"KRN",19.1,"NM",0)
^9.68A^^
"BLD",7487,"KRN",101,0)
101
"BLD",7487,"KRN",101,"NM",0)
^9.68A^122^120
"BLD",7487,"KRN",101,"NM",1,0)
IBJ EXIT^^0
"BLD",7487,"KRN",101,"NM",2,0)
IBJP INS VER SCREEN^^0
"BLD",7487,"KRN",101,"NM",3,0)
IBJP INS VER MENU^^0
"BLD",7487,"KRN",101,"NM",4,0)
IBJP IIV BATCH EXTRACT EDIT^^0
"BLD",7487,"KRN",101,"NM",5,0)
IBJP IIV GENERAL EDIT^^0
"BLD",7487,"KRN",101,"NM",6,0)
IBCNSA ANNUAL BENEFITS^^0
"BLD",7487,"KRN",101,"NM",7,0)
IBCNSA AN BEN POL INF^^0
"BLD",7487,"KRN",101,"NM",8,0)
IBCNSA AN BEN OPT^^0
"BLD",7487,"KRN",101,"NM",9,0)
IBCNSA AN BEN INPT^^0
"BLD",7487,"KRN",101,"NM",10,0)
IBCNSA AN BEN MEN H^^0
"BLD",7487,"KRN",101,"NM",11,0)
IBCNSA AN BEN HOME HEA^^0
"BLD",7487,"KRN",101,"NM",12,0)
IBCNSA AN BEN HOSPC^^0
"BLD",7487,"KRN",101,"NM",13,0)
IBCNSA AN BEN ED ALL^^0
"BLD",7487,"KRN",101,"NM",14,0)
IBCNSA AN BEN CH YR^^0
"BLD",7487,"KRN",101,"NM",15,0)
IBCNS EXIT^^0
"BLD",7487,"KRN",101,"NM",16,0)
IBCNSA AN BEN REHAB^^0
"BLD",7487,"KRN",101,"NM",17,0)
IBCNSA AN BEN IV MGMT^^0
"BLD",7487,"KRN",101,"NM",18,0)
IBCNE AB VIEW EXP ELIG BEN SCREEN^^0
"BLD",7487,"KRN",101,"NM",19,0)
IBCNSC PLAN DETAIL^^0
"BLD",7487,"KRN",101,"NM",20,0)
IBCNS QUIT^^0
"BLD",7487,"KRN",101,"NM",21,0)
IBCNSJ EDIT PLAN INFO^^0
"BLD",7487,"KRN",101,"NM",22,0)
IBCNSJ INS CO EDIT COVERAGE LIMITS^^0
"BLD",7487,"KRN",101,"NM",23,0)
IBCNSJ INS CO INACTIVATE PLAN^^0
"BLD",7487,"KRN",101,"NM",24,0)
IBCNSJ PLAN COMMENT^^0
"BLD",7487,"KRN",101,"NM",25,0)
IBCNSJ PLAN UR INFO^^0
"BLD",7487,"KRN",101,"NM",26,0)
IBCNSJ SWITCH PLANS^^0
"BLD",7487,"KRN",101,"NM",27,0)
IBCNSJ UPDATE ANNUAL BENEFITS^^0
"BLD",7487,"KRN",101,"NM",29,0)
IBCNSM PATIENT INSURANCE^^0
"BLD",7487,"KRN",101,"NM",30,0)
IBCNSM CHANGE PATIENT^^0
"BLD",7487,"KRN",101,"NM",31,0)
IBCNSM VIEW PAT POLICY^^0
"BLD",7487,"KRN",101,"NM",32,0)
IBCNSM BENEFITS USED^^0
"BLD",7487,"KRN",101,"NM",33,0)
IBCNSM ADD POLICY^^0
"BLD",7487,"KRN",101,"NM",34,0)
IBCNSM UPDATE ANNUAL BENEFITS^^0
"BLD",7487,"KRN",101,"NM",35,0)
IBCNSM PRINT WORKSHEET^^0
"BLD",7487,"KRN",101,"NM",36,0)
IBCNSM PRINT PATIENT INS^^0
"BLD",7487,"KRN",101,"NM",37,0)
IBCNSM DELETE POLICY^^0
"BLD",7487,"KRN",101,"NM",38,0)
IBCNSM EDIT ALL^^0
"BLD",7487,"KRN",101,"NM",39,0)
IBCNSM VERIFY INS^^0
"BLD",7487,"KRN",101,"NM",40,0)
IBCNSM PERSONAL RIDERS^^0
"BLD",7487,"KRN",101,"NM",41,0)
VALM BLANK 1^^0
"BLD",7487,"KRN",101,"NM",42,0)
IBCNE SV VIEW EXP ELIG BEN SCREEN^^0
"BLD",7487,"KRN",101,"NM",43,0)
IBCNSP POLICY MENU^^0
"BLD",7487,"KRN",101,"NM",44,0)
IBCNSP EDIT POLICY INFO^^0
"BLD",7487,"KRN",101,"NM",45,0)
IBCNSP EDIT EFFECTIVE DATES^^0
"BLD",7487,"KRN",101,"NM",46,0)
IBCNSP VERIFY COVERAGE^^0
"BLD",7487,"KRN",101,"NM",47,0)
IBCNSP SUBSCRIBER UPDATE^^0
"BLD",7487,"KRN",101,"NM",48,0)
IBCNSP EMPLOYER INFO FOR CLAIMS^^0
"BLD",7487,"KRN",101,"NM",49,0)
IBCNSP UR INFO^^0
"BLD",7487,"KRN",101,"NM",50,0)
IBCNSP ANNUAL BENEFITS^^0
"BLD",7487,"KRN",101,"NM",51,0)
IBCNSP BENEFITS USED^^0
"BLD",7487,"KRN",101,"NM",52,0)
IBCNSP INSURANCE CONTACT INF^^0
"BLD",7487,"KRN",101,"NM",53,0)
IBCNSJ INACTIVATE PLAN^^0
"BLD",7487,"KRN",101,"NM",54,0)
IBCNSJ CHANGE PLAN^^0
"BLD",7487,"KRN",101,"NM",55,0)
IBCNSJ EDIT COVERAGE LIMITS^^0
"BLD",7487,"KRN",101,"NM",56,0)
IBCNSP ADD COMMENT^^0
"BLD",7487,"KRN",101,"NM",57,0)
IBCNSP EDIT ALL^^0
"BLD",7487,"KRN",101,"NM",58,0)
IBCNE VP VIEW EXP ELIG BEN SCREEN^^0
"BLD",7487,"KRN",101,"NM",60,0)
IBCNSV ANNUAL BENEFITS^^0
"BLD",7487,"KRN",101,"NM",61,0)
IBCNSV PATIENT INSURANCE^^0
"BLD",7487,"KRN",101,"NM",62,0)
IBCNSV VIEW AN BEN^^0
"BLD",7487,"KRN",101,"NM",63,0)
IBCNSV VIEW EXP POL^^0
"BLD",7487,"KRN",101,"NM",64,0)
IBCNSV VIEW BEN USED^^0
"BLD",7487,"KRN",101,"NM",65,0)
IBCNSV POLICY MENU^^0
"BLD",7487,"KRN",101,"NM",66,0)
IBJT CLAIM SCREEN MENU^^0
"BLD",7487,"KRN",101,"NM",67,0)
IBJT BILL CHARGES SCREEN^^0
"BLD",7487,"KRN",101,"NM",68,0)
IBJT BILL DX SCREEN^^0
"BLD",7487,"KRN",101,"NM",69,0)
IBJT BILL PROCEDURES SCREEN^^0
"BLD",7487,"KRN",101,"NM",70,0)
IBJT CHANGE BILL^^0
"BLD",7487,"KRN",101,"NM",71,0)
IBJT AR ACCOUNT PROFILE SCREEN^^0
"BLD",7487,"KRN",101,"NM",72,0)
IBJT AR COMMENT HISTORY SCREEN^^0
"BLD",7487,"KRN",101,"NM",73,0)
IBJT CT/IR COMMUNICATIONS LIST SCREEN^^0
"BLD",7487,"KRN",101,"NM",74,0)
IBJT HS HEALTH SUMMARY^^0
"BLD",7487,"KRN",101,"NM",75,0)
IBJT ACTIVE LIST SCREEN SKIP^^0
"BLD",7487,"KRN",101,"NM",76,0)
IBJT NS VIEW INS CO SCREEN^^0
"BLD",7487,"KRN",101,"NM",77,0)
IBJT NS VIEW EXP POL SCREEN^^0
"BLD",7487,"KRN",101,"NM",78,0)
IBJT NS VIEW AN BEN SCREEN^^0
"BLD",7487,"KRN",101,"NM",79,0)
IBJT PT ELIGIBILITY SCREEN^^0
"BLD",7487,"KRN",101,"NM",80,0)
IBJT EDI STATUS SCREEN^^0
"BLD",7487,"KRN",101,"NM",81,0)
IBCNE JT VIEW EXP ELIG BEN SCREEN^^0
"BLD",7487,"KRN",101,"NM",82,0)
IBJT NS VIEW AN BEN MENU^^0
"BLD",7487,"KRN",101,"NM",83,0)
IBJT CLAIM SCREEN SKIP^^0
"BLD",7487,"KRN",101,"NM",84,0)
IBJT NS VIEW AN BEN REDISPLAY^^0
"BLD",7487,"KRN",101,"NM",85,0)
IBJT NS VIEW EXP POL MENU^^0
"BLD",7487,"KRN",101,"NM",86,0)
IBJT NS VIEW EXP POL REDISPLAY^^0
"BLD",7487,"KRN",101,"NM",87,0)
IBCNE JT COVERAGE LIMIT DATE RANGE^^0
"BLD",7487,"KRN",101,"NM",88,0)
IBCNB LIST POSITIVE VIEW^^0
"BLD",7487,"KRN",101,"NM",89,0)
IBCNB LIST NEGATIVE VIEW^^0
"BLD",7487,"KRN",101,"NM",90,0)
IBCNB LIST MEDICARE VIEW^^0
"BLD",7487,"KRN",101,"NM",91,0)
IBCNB LIST APPOINTMENTS VIEW^^0
"BLD",7487,"KRN",101,"NM",92,0)
IBCNB LIST SCREEN MENU^^0
"BLD",7487,"KRN",101,"NM",93,0)
IBCNB ENTRY SCREEN MENU^^0
"BLD",7487,"KRN",101,"NM",94,0)
IBCNB EXPAND BENEFITS^^0
"BLD",7487,"KRN",101,"NM",95,0)
IBCNB ENTRY EDIT POLICY^^0
"BLD",7487,"KRN",101,"NM",96,0)
IBCNB ENTRY EDIT INSURANCE^^0
"BLD",7487,"KRN",101,"NM",97,0)
IBCNB ENTRY RESPONSE REPORT^^0
"BLD",7487,"KRN",101,"NM",98,0)
IBCNB LIST ENTRY SCREEN^^0
"BLD",7487,"KRN",101,"NM",99,0)
IBCNB LIST PROCESS SCREEN^^0
"BLD",7487,"KRN",101,"NM",100,0)
IBCNB PROCESS SCREEN MENU^^0
"BLD",7487,"KRN",101,"NM",101,0)
IBCNB LIST REJECT^^0
"BLD",7487,"KRN",101,"NM",102,0)
IBCNB LIST ADD^^0
"BLD",7487,"KRN",101,"NM",103,0)
IBCNB LIST SORT^^0
"BLD",7487,"KRN",101,"NM",104,0)
IBCNB FAST EXIT^^0
"BLD",7487,"KRN",101,"NM",105,0)
IBCNB LIST CHECK NAMES^^0
"BLD",7487,"KRN",101,"NM",106,0)
IBCNB PROCESS ACCEPT^^0
"BLD",7487,"KRN",101,"NM",107,0)
IBCNB PROCESS REJECT^^0
"BLD",7487,"KRN",101,"NM",108,0)
IBCNB PROCESS COMPARE/EDIT^^0
"BLD",7487,"KRN",101,"NM",109,0)
IBCNB PROCESS ENTRY SCREEN^^0
"BLD",7487,"KRN",101,"NM",110,0)
IBCNB PROCESS TOGGLE^^0
"BLD",7487,"KRN",101,"NM",111,0)
IBCNB ENTRY EDIT ALL^^0
"BLD",7487,"KRN",101,"NM",112,0)
IBCNB ENTRY EDIT GROUP^^0
"BLD",7487,"KRN",101,"NM",113,0)
IBCNB ENTRY VERIFY^^0
"BLD",7487,"KRN",101,"NM",114,0)
IBCNE ELIG BEN INFO MENU^^0
"BLD",7487,"KRN",101,"NM",115,0)
IBCNE FAST EXIT^^0
"BLD",7487,"KRN",101,"NM",116,0)
IBCNE PAYER EXPAND MENU^^0
"BLD",7487,"KRN",101,"NM",117,0)
IBCNE PAYER EXIT^^0
"BLD",7487,"KRN",101,"NM",118,0)
IBCNE PAYER LINK^^0
"BLD",7487,"KRN",101,"NM",119,0)
VALM PRINT LIST^^0
"BLD",7487,"KRN",101,"NM",120,0)
IBCNE PAYER MAINT MENU^^0
"BLD",7487,"KRN",101,"NM",121,0)
IBCNE PAYER EXPAND^^0
"BLD",7487,"KRN",101,"NM",122,0)
IBCNSM RX COB DETERMINATION^^0
"BLD",7487,"KRN",101,"NM","B","IBCNB ENTRY EDIT ALL",111)

"BLD",7487,"KRN",101,"NM","B","IBCNB ENTRY EDIT GROUP",112)

"BLD",7487,"KRN",101,"NM","B","IBCNB ENTRY EDIT INSURANCE",96)

"BLD",7487,"KRN",101,"NM","B","IBCNB ENTRY EDIT POLICY",95)

"BLD",7487,"KRN",101,"NM","B","IBCNB ENTRY RESPONSE REPORT",97)

"BLD",7487,"KRN",101,"NM","B","IBCNB ENTRY SCREEN MENU",93)

"BLD",7487,"KRN",101,"NM","B","IBCNB ENTRY VERIFY",113)

"BLD",7487,"KRN",101,"NM","B","IBCNB EXPAND BENEFITS",94)

"BLD",7487,"KRN",101,"NM","B","IBCNB FAST EXIT",104)

"BLD",7487,"KRN",101,"NM","B","IBCNB LIST ADD",102)

"BLD",7487,"KRN",101,"NM","B","IBCNB LIST APPOINTMENTS VIEW",91)

"BLD",7487,"KRN",101,"NM","B","IBCNB LIST CHECK NAMES",105)

"BLD",7487,"KRN",101,"NM","B","IBCNB LIST ENTRY SCREEN",98)

"BLD",7487,"KRN",101,"NM","B","IBCNB LIST MEDICARE VIEW",90)

"BLD",7487,"KRN",101,"NM","B","IBCNB LIST NEGATIVE VIEW",89)

"BLD",7487,"KRN",101,"NM","B","IBCNB LIST POSITIVE VIEW",88)

"BLD",7487,"KRN",101,"NM","B","IBCNB LIST PROCESS SCREEN",99)

"BLD",7487,"KRN",101,"NM","B","IBCNB LIST REJECT",101)

"BLD",7487,"KRN",101,"NM","B","IBCNB LIST SCREEN MENU",92)

"BLD",7487,"KRN",101,"NM","B","IBCNB LIST SORT",103)

"BLD",7487,"KRN",101,"NM","B","IBCNB PROCESS ACCEPT",106)

"BLD",7487,"KRN",101,"NM","B","IBCNB PROCESS COMPARE/EDIT",108)

"BLD",7487,"KRN",101,"NM","B","IBCNB PROCESS ENTRY SCREEN",109)

"BLD",7487,"KRN",101,"NM","B","IBCNB PROCESS REJECT",107)

"BLD",7487,"KRN",101,"NM","B","IBCNB PROCESS SCREEN MENU",100)

"BLD",7487,"KRN",101,"NM","B","IBCNB PROCESS TOGGLE",110)

"BLD",7487,"KRN",101,"NM","B","IBCNE AB VIEW EXP ELIG BEN SCREEN",18)

"BLD",7487,"KRN",101,"NM","B","IBCNE ELIG BEN INFO MENU",114)

"BLD",7487,"KRN",101,"NM","B","IBCNE FAST EXIT",115)

"BLD",7487,"KRN",101,"NM","B","IBCNE JT COVERAGE LIMIT DATE RANGE",87)

"BLD",7487,"KRN",101,"NM","B","IBCNE JT VIEW EXP ELIG BEN SCREEN",81)

"BLD",7487,"KRN",101,"NM","B","IBCNE PAYER EXIT",117)

"BLD",7487,"KRN",101,"NM","B","IBCNE PAYER EXPAND",121)

"BLD",7487,"KRN",101,"NM","B","IBCNE PAYER EXPAND MENU",116)

"BLD",7487,"KRN",101,"NM","B","IBCNE PAYER LINK",118)

"BLD",7487,"KRN",101,"NM","B","IBCNE PAYER MAINT MENU",120)

"BLD",7487,"KRN",101,"NM","B","IBCNE SV VIEW EXP ELIG BEN SCREEN",42)

"BLD",7487,"KRN",101,"NM","B","IBCNE VP VIEW EXP ELIG BEN SCREEN",58)

"BLD",7487,"KRN",101,"NM","B","IBCNS EXIT",15)

"BLD",7487,"KRN",101,"NM","B","IBCNS QUIT",20)

"BLD",7487,"KRN",101,"NM","B","IBCNSA AN BEN CH YR",14)

"BLD",7487,"KRN",101,"NM","B","IBCNSA AN BEN ED ALL",13)

"BLD",7487,"KRN",101,"NM","B","IBCNSA AN BEN HOME HEA",11)

"BLD",7487,"KRN",101,"NM","B","IBCNSA AN BEN HOSPC",12)

"BLD",7487,"KRN",101,"NM","B","IBCNSA AN BEN INPT",9)

"BLD",7487,"KRN",101,"NM","B","IBCNSA AN BEN IV MGMT",17)

"BLD",7487,"KRN",101,"NM","B","IBCNSA AN BEN MEN H",10)

"BLD",7487,"KRN",101,"NM","B","IBCNSA AN BEN OPT",8)

"BLD",7487,"KRN",101,"NM","B","IBCNSA AN BEN POL INF",7)

"BLD",7487,"KRN",101,"NM","B","IBCNSA AN BEN REHAB",16)

"BLD",7487,"KRN",101,"NM","B","IBCNSA ANNUAL BENEFITS",6)

"BLD",7487,"KRN",101,"NM","B","IBCNSC PLAN DETAIL",19)

"BLD",7487,"KRN",101,"NM","B","IBCNSJ CHANGE PLAN",54)

"BLD",7487,"KRN",101,"NM","B","IBCNSJ EDIT COVERAGE LIMITS",55)

"BLD",7487,"KRN",101,"NM","B","IBCNSJ EDIT PLAN INFO",21)

"BLD",7487,"KRN",101,"NM","B","IBCNSJ INACTIVATE PLAN",53)

"BLD",7487,"KRN",101,"NM","B","IBCNSJ INS CO EDIT COVERAGE LIMITS",22)

"BLD",7487,"KRN",101,"NM","B","IBCNSJ INS CO INACTIVATE PLAN",23)

"BLD",7487,"KRN",101,"NM","B","IBCNSJ PLAN COMMENT",24)

"BLD",7487,"KRN",101,"NM","B","IBCNSJ PLAN UR INFO",25)

"BLD",7487,"KRN",101,"NM","B","IBCNSJ SWITCH PLANS",26)

"BLD",7487,"KRN",101,"NM","B","IBCNSJ UPDATE ANNUAL BENEFITS",27)

"BLD",7487,"KRN",101,"NM","B","IBCNSM ADD POLICY",33)

"BLD",7487,"KRN",101,"NM","B","IBCNSM BENEFITS USED",32)

"BLD",7487,"KRN",101,"NM","B","IBCNSM CHANGE PATIENT",30)

"BLD",7487,"KRN",101,"NM","B","IBCNSM DELETE POLICY",37)

"BLD",7487,"KRN",101,"NM","B","IBCNSM EDIT ALL",38)

"BLD",7487,"KRN",101,"NM","B","IBCNSM PATIENT INSURANCE",29)

"BLD",7487,"KRN",101,"NM","B","IBCNSM PERSONAL RIDERS",40)

"BLD",7487,"KRN",101,"NM","B","IBCNSM PRINT PATIENT INS",36)

"BLD",7487,"KRN",101,"NM","B","IBCNSM PRINT WORKSHEET",35)

"BLD",7487,"KRN",101,"NM","B","IBCNSM RX COB DETERMINATION",122)

"BLD",7487,"KRN",101,"NM","B","IBCNSM UPDATE ANNUAL BENEFITS",34)

"BLD",7487,"KRN",101,"NM","B","IBCNSM VERIFY INS",39)

"BLD",7487,"KRN",101,"NM","B","IBCNSM VIEW PAT POLICY",31)

"BLD",7487,"KRN",101,"NM","B","IBCNSP ADD COMMENT",56)

"BLD",7487,"KRN",101,"NM","B","IBCNSP ANNUAL BENEFITS",50)

"BLD",7487,"KRN",101,"NM","B","IBCNSP BENEFITS USED",51)

"BLD",7487,"KRN",101,"NM","B","IBCNSP EDIT ALL",57)

"BLD",7487,"KRN",101,"NM","B","IBCNSP EDIT EFFECTIVE DATES",45)

"BLD",7487,"KRN",101,"NM","B","IBCNSP EDIT POLICY INFO",44)

"BLD",7487,"KRN",101,"NM","B","IBCNSP EMPLOYER INFO FOR CLAIMS",48)

"BLD",7487,"KRN",101,"NM","B","IBCNSP INSURANCE CONTACT INF",52)

"BLD",7487,"KRN",101,"NM","B","IBCNSP POLICY MENU",43)

"BLD",7487,"KRN",101,"NM","B","IBCNSP SUBSCRIBER UPDATE",47)

"BLD",7487,"KRN",101,"NM","B","IBCNSP UR INFO",49)

"BLD",7487,"KRN",101,"NM","B","IBCNSP VERIFY COVERAGE",46)

"BLD",7487,"KRN",101,"NM","B","IBCNSV ANNUAL BENEFITS",60)

"BLD",7487,"KRN",101,"NM","B","IBCNSV PATIENT INSURANCE",61)

"BLD",7487,"KRN",101,"NM","B","IBCNSV POLICY MENU",65)

"BLD",7487,"KRN",101,"NM","B","IBCNSV VIEW AN BEN",62)

"BLD",7487,"KRN",101,"NM","B","IBCNSV VIEW BEN USED",64)

"BLD",7487,"KRN",101,"NM","B","IBCNSV VIEW EXP POL",63)

"BLD",7487,"KRN",101,"NM","B","IBJ EXIT",1)

"BLD",7487,"KRN",101,"NM","B","IBJP IIV BATCH EXTRACT EDIT",4)

"BLD",7487,"KRN",101,"NM","B","IBJP IIV GENERAL EDIT",5)

"BLD",7487,"KRN",101,"NM","B","IBJP INS VER MENU",3)

"BLD",7487,"KRN",101,"NM","B","IBJP INS VER SCREEN",2)

"BLD",7487,"KRN",101,"NM","B","IBJT ACTIVE LIST SCREEN SKIP",75)

"BLD",7487,"KRN",101,"NM","B","IBJT AR ACCOUNT PROFILE SCREEN",71)

"BLD",7487,"KRN",101,"NM","B","IBJT AR COMMENT HISTORY SCREEN",72)

"BLD",7487,"KRN",101,"NM","B","IBJT BILL CHARGES SCREEN",67)

"BLD",7487,"KRN",101,"NM","B","IBJT BILL DX SCREEN",68)

"BLD",7487,"KRN",101,"NM","B","IBJT BILL PROCEDURES SCREEN",69)

"BLD",7487,"KRN",101,"NM","B","IBJT CHANGE BILL",70)

"BLD",7487,"KRN",101,"NM","B","IBJT CLAIM SCREEN MENU",66)

"BLD",7487,"KRN",101,"NM","B","IBJT CLAIM SCREEN SKIP",83)

"BLD",7487,"KRN",101,"NM","B","IBJT CT/IR COMMUNICATIONS LIST SCREEN",73)

"BLD",7487,"KRN",101,"NM","B","IBJT EDI STATUS SCREEN",80)

"BLD",7487,"KRN",101,"NM","B","IBJT HS HEALTH SUMMARY",74)

"BLD",7487,"KRN",101,"NM","B","IBJT NS VIEW AN BEN MENU",82)

"BLD",7487,"KRN",101,"NM","B","IBJT NS VIEW AN BEN REDISPLAY",84)

"BLD",7487,"KRN",101,"NM","B","IBJT NS VIEW AN BEN SCREEN",78)

"BLD",7487,"KRN",101,"NM","B","IBJT NS VIEW EXP POL MENU",85)

"BLD",7487,"KRN",101,"NM","B","IBJT NS VIEW EXP POL REDISPLAY",86)

"BLD",7487,"KRN",101,"NM","B","IBJT NS VIEW EXP POL SCREEN",77)

"BLD",7487,"KRN",101,"NM","B","IBJT NS VIEW INS CO SCREEN",76)

"BLD",7487,"KRN",101,"NM","B","IBJT PT ELIGIBILITY SCREEN",79)

"BLD",7487,"KRN",101,"NM","B","VALM BLANK 1",41)

"BLD",7487,"KRN",101,"NM","B","VALM PRINT LIST",119)

"BLD",7487,"KRN",409.61,0)
409.61
"BLD",7487,"KRN",409.61,"NM",0)
^9.68A^7^7
"BLD",7487,"KRN",409.61,"NM",1,0)
IBJP IIV SITE PARAMETERS^^0
"BLD",7487,"KRN",409.61,"NM",2,0)
IBCNE ELIGIBILITY/BENEFIT INFO^^0
"BLD",7487,"KRN",409.61,"NM",3,0)
IBCNS EXPANDED POLICY^^0
"BLD",7487,"KRN",409.61,"NM",4,0)
IBCNS INS CO PLAN DETAIL^^0
"BLD",7487,"KRN",409.61,"NM",5,0)
IBJT CLAIM INFO^^0
"BLD",7487,"KRN",409.61,"NM",6,0)
IBCNB INSURANCE BUFFER LIST^^0
"BLD",7487,"KRN",409.61,"NM",7,0)
IBCNE REQUEST INS INQUIRY LIST^^0
"BLD",7487,"KRN",409.61,"NM","B","IBCNB INSURANCE BUFFER LIST",6)

"BLD",7487,"KRN",409.61,"NM","B","IBCNE ELIGIBILITY/BENEFIT INFO",2)

"BLD",7487,"KRN",409.61,"NM","B","IBCNE REQUEST INS INQUIRY LIST",7)

"BLD",7487,"KRN",409.61,"NM","B","IBCNS EXPANDED POLICY",3)

"BLD",7487,"KRN",409.61,"NM","B","IBCNS INS CO PLAN DETAIL",4)

"BLD",7487,"KRN",409.61,"NM","B","IBJP IIV SITE PARAMETERS",1)

"BLD",7487,"KRN",409.61,"NM","B","IBJT CLAIM INFO",5)

"BLD",7487,"KRN",771,0)
771
"BLD",7487,"KRN",771,"NM",0)
^9.68A^^
"BLD",7487,"KRN",779.2,0)
779.2
"BLD",7487,"KRN",870,0)
870
"BLD",7487,"KRN",8989.51,0)
8989.51
"BLD",7487,"KRN",8989.52,0)
8989.52
"BLD",7487,"KRN",8994,0)
8994
"BLD",7487,"KRN","B",.4,.4)

"BLD",7487,"KRN","B",.401,.401)

"BLD",7487,"KRN","B",.402,.402)

"BLD",7487,"KRN","B",.403,.403)

"BLD",7487,"KRN","B",.5,.5)

"BLD",7487,"KRN","B",.84,.84)

"BLD",7487,"KRN","B",3.6,3.6)

"BLD",7487,"KRN","B",3.8,3.8)

"BLD",7487,"KRN","B",9.2,9.2)

"BLD",7487,"KRN","B",9.8,9.8)

"BLD",7487,"KRN","B",19,19)

"BLD",7487,"KRN","B",19.1,19.1)

"BLD",7487,"KRN","B",101,101)

"BLD",7487,"KRN","B",409.61,409.61)

"BLD",7487,"KRN","B",771,771)

"BLD",7487,"KRN","B",779.2,779.2)

"BLD",7487,"KRN","B",870,870)

"BLD",7487,"KRN","B",8989.51,8989.51)

"BLD",7487,"KRN","B",8989.52,8989.52)

"BLD",7487,"KRN","B",8994,8994)

"BLD",7487,"QDEF")
^^^^NO^^^^NO^^NO
"BLD",7487,"QUES",0)
^9.62^^
"BLD",7487,"REQB",0)
^9.611^6^6
"BLD",7487,"REQB",1,0)
IB*2.0*284^2
"BLD",7487,"REQB",2,0)
IB*2.0*316^2
"BLD",7487,"REQB",3,0)
IB*2.0*377^2
"BLD",7487,"REQB",4,0)
IB*2.0*399^2
"BLD",7487,"REQB",5,0)
IB*2.0*400^2
"BLD",7487,"REQB",6,0)
IB*2.0*413^2
"BLD",7487,"REQB","B","IB*2.0*284",1)

"BLD",7487,"REQB","B","IB*2.0*316",2)

"BLD",7487,"REQB","B","IB*2.0*377",3)

"BLD",7487,"REQB","B","IB*2.0*399",4)

"BLD",7487,"REQB","B","IB*2.0*400",5)

"BLD",7487,"REQB","B","IB*2.0*413",6)

"DATA",365.011,1,0)
1^Active Coverage
"DATA",365.011,2,0)
2^Active/Full Risk Capitation
"DATA",365.011,3,0)
3^Active/Service Capitated
"DATA",365.011,4,0)
4^Active/Service Capitated to PCP
"DATA",365.011,5,0)
5^Active/Pending Investigation
"DATA",365.011,6,0)
6^Inactive
"DATA",365.011,7,0)
7^Inactive/Pending Elig. Update
"DATA",365.011,8,0)
8^Inactive/Pending Investigation
"DATA",365.011,9,0)
A^Co-Insurance
"DATA",365.011,10,0)
B^Co-Payment
"DATA",365.011,11,0)
C^Deductible
"DATA",365.011,12,0)
CB^Coverage Basis
"DATA",365.011,13,0)
D^Benefit Description
"DATA",365.011,14,0)
E^Exclusions
"DATA",365.011,15,0)
F^Limitations
"DATA",365.011,16,0)
G^Out of Pocket (Stop Loss)
"DATA",365.011,17,0)
H^Unlimited
"DATA",365.011,18,0)
I^Non-Covered
"DATA",365.011,19,0)
J^Cost Containment
"DATA",365.011,20,0)
K^Reserve
"DATA",365.011,21,0)
L^PCP
"DATA",365.011,22,0)
M^Pre-existing Condition
"DATA",365.011,23,0)
MC^Managed Care Coordinator
"DATA",365.011,24,0)
N^Services Restricted to Following Prov
"DATA",365.011,25,0)
O^Not Deemed Medical Necessity
"DATA",365.011,26,0)
P^Benefit Disclaimer
"DATA",365.011,27,0)
Q^2nd Surgical Opinion Required
"DATA",365.011,28,0)
R^Other or Additional Payor
"DATA",365.011,29,0)
S^Prior Year(s) History
"DATA",365.011,30,0)
T^Card Reported Lost/Stolen
"DATA",365.011,31,0)
U^Contact Following Entity for EB Info
"DATA",365.011,32,0)
V^Cannot Process
"DATA",365.011,33,0)
W^Other Source of Data
"DATA",365.011,34,0)
X^Health Care Facility
"DATA",365.011,35,0)
Y^Spend Down
"DATA",365.013,1,0)
1^Medical Care
"DATA",365.013,2,0)
2^Surgical
"DATA",365.013,3,0)
3^Consultation
"DATA",365.013,4,0)
4^Diagnostic X-Ray
"DATA",365.013,5,0)
5^Diagnostic Lab
"DATA",365.013,6,0)
6^Radiation Therapy
"DATA",365.013,7,0)
7^Anesthesia
"DATA",365.013,8,0)
8^Surgical Assistance
"DATA",365.013,9,0)
9^Other Medical
"DATA",365.013,10,0)
10^Blood Charges
"DATA",365.013,11,0)
11^Used DME
"DATA",365.013,12,0)
12^DME Purchase
"DATA",365.013,13,0)
13^Ambulatory SC Facility
"DATA",365.013,14,0)
14^Renal Supplies/Home
"DATA",365.013,15,0)
15^Alt. Method Dialysis
"DATA",365.013,16,0)
16^CRD Equipment
"DATA",365.013,17,0)
17^Pre-Admission Testing
"DATA",365.013,18,0)
18^DME Rental
"DATA",365.013,19,0)
19^Pneumonia Vaccine
"DATA",365.013,20,0)
20^2nd Surgical Opinion
"DATA",365.013,21,0)
21^3rd Surgical Opinion
"DATA",365.013,22,0)
22^Social Work
"DATA",365.013,23,0)
23^Diagnostic Dental
"DATA",365.013,24,0)
24^Periodontics
"DATA",365.013,25,0)
25^Restorative
"DATA",365.013,26,0)
26^Endodontics
"DATA",365.013,27,0)
27^Maxillofacial Prosth.
"DATA",365.013,28,0)
28^Adjunctive Dental Serv
"DATA",365.013,29,0)
30^Health Benefit Plan Cov
"DATA",365.013,30,0)
32^Plan Waiting Period
"DATA",365.013,31,0)
33^Chiropractic
"DATA",365.013,32,0)
34^Chiropractic Office Vst
"DATA",365.013,33,0)
35^Dental Care
"DATA",365.013,34,0)
36^Dental Crowns
"DATA",365.013,35,0)
37^Dental Accident
"DATA",365.013,36,0)
38^Orthodontics
"DATA",365.013,37,0)
39^Prosthodontics
"DATA",365.013,38,0)
40^Oral Surgery
"DATA",365.013,39,0)
41^Rout/Preventive Dental
"DATA",365.013,40,0)
42^Home Health Care
"DATA",365.013,41,0)
43^Home Health RX
"DATA",365.013,42,0)
44^Home Health Vst
"DATA",365.013,43,0)
45^Hospice
"DATA",365.013,44,0)
46^Respite Care
"DATA",365.013,45,0)
47^Hospital
"DATA",365.013,46,0)
48^Hosp/Inpatient
"DATA",365.013,47,0)
49^Hosp/R & B
"DATA",365.013,48,0)
50^Hosp/Outpatient
"DATA",365.013,49,0)
51^Hosp/Emergency Accident
"DATA",365.013,50,0)
52^Hosp/Emergency Medical
"DATA",365.013,51,0)
53^Hosp/Ambulatory Surg
"DATA",365.013,52,0)
54^Long Term Care
"DATA",365.013,53,0)
55^Major Medical
"DATA",365.013,54,0)
56^Med Related Transport
"DATA",365.013,55,0)
57^Air Transportation
"DATA",365.013,56,0)
58^Cabulance
"DATA",365.013,57,0)
59^Licensed Ambulance
"DATA",365.013,58,0)
60^General Benefits
"DATA",365.013,59,0)
61^In-vitro Fertilization
"DATA",365.013,60,0)
62^MRI/CAT Scan
"DATA",365.013,61,0)
63^Donor Procedures
"DATA",365.013,62,0)
64^Acupuncture
"DATA",365.013,63,0)
65^Newborn Care
"DATA",365.013,64,0)
66^Pathology
"DATA",365.013,65,0)
67^Smoking Cessation
"DATA",365.013,66,0)
68^Well Baby Care
"DATA",365.013,67,0)
69^Maternity
"DATA",365.013,68,0)
70^Transplants
"DATA",365.013,69,0)
71^Audiology Exams
"DATA",365.013,70,0)
72^Inhalation Therapy
"DATA",365.013,71,0)
73^Diagnostic Medical
"DATA",365.013,72,0)
74^Private Duty Nursing
"DATA",365.013,73,0)
75^Prosthetic Device
"DATA",365.013,74,0)
76^Dialysis
"DATA",365.013,75,0)
77^Otological Exam
"DATA",365.013,76,0)
78^Chemotherapy
"DATA",365.013,77,0)
79^Allergy Testing
"DATA",365.013,78,0)
80^Immunizations
"DATA",365.013,79,0)
81^Routine Physical
"DATA",365.013,80,0)
82^Family Planning
"DATA",365.013,81,0)
83^Infertility
"DATA",365.013,82,0)
84^Abortion
"DATA",365.013,83,0)
85^AIDS
"DATA",365.013,84,0)
86^Emergency Services
"DATA",365.013,85,0)
87^Cancer
"DATA",365.013,86,0)
88^Pharmacy
"DATA",365.013,87,0)
89^Free Standing RX Drug
"DATA",365.013,88,0)
90^Mail Order RX Drug
"DATA",365.013,89,0)
91^Brand Name RX Drug
"DATA",365.013,90,0)
92^Generic RX Drug
"DATA",365.013,91,0)
93^Podiatry
"DATA",365.013,92,0)
94^Podiatry/Office Visits
"DATA",365.013,93,0)
95^Podiatry/Nurs Home Vst
"DATA",365.013,94,0)
96^Professional (Phy)
"DATA",365.013,95,0)
97^Anesthesiologist
"DATA",365.013,96,0)
98^Prof(Phy) Visit/Office
"DATA",365.013,97,0)
99^Prof(Phy) Visit/Inpt
"DATA",365.013,98,0)
A0^Prof(Phy) Visit/Outpt
"DATA",365.013,99,0)
A1^Prof(Phy) Visit/NH
"DATA",365.013,100,0)
A2^Prof(Phy) Vst/Nrs Fac
"DATA",365.013,101,0)
A3^Prof(Phy) Visit/Home
"DATA",365.013,102,0)
A4^Psychiatric
"DATA",365.013,103,0)
A5^Psychiatric/R & B
"DATA",365.013,104,0)
A6^Psychotherapy
"DATA",365.013,105,0)
A7^Psychiatric/Inpt
"DATA",365.013,106,0)
A8^Psychiatric/Outpt
"DATA",365.013,107,0)
A9^Rehabilitation
"DATA",365.013,108,0)
AA^Rehab/R & B
"DATA",365.013,109,0)
AB^Rehab/Inpt
"DATA",365.013,110,0)
AC^Rehab/Outpt
"DATA",365.013,111,0)
AD^Occupational Therapy
"DATA",365.013,112,0)
AE^Physical Medicine
"DATA",365.013,113,0)
AF^Speech Therapy
"DATA",365.013,114,0)
AG^SNC
"DATA",365.013,115,0)
AH^SNC/R & B
"DATA",365.013,116,0)
AI^Substance Abuse
"DATA",365.013,117,0)
AJ^Alcoholism
"DATA",365.013,118,0)
AK^Drug Addiction
"DATA",365.013,119,0)
AL^Vision (Optometry)
"DATA",365.013,120,0)
AM^Frames
"DATA",365.013,121,0)
AN^Routine Exam
"DATA",365.013,122,0)
AO^Lenses
"DATA",365.013,123,0)
AQ^N/Medically Nec Physical
"DATA",365.013,124,0)
AR^Experimental Drug Therapy
"DATA",365.013,125,0)
BA^Independent Medical Eval
"DATA",365.013,126,0)
BB^Partial Hosp (Psych)
"DATA",365.013,127,0)
BC^Day Care (Psych)
"DATA",365.013,128,0)
BD^Cognitive Therapy
"DATA",365.013,129,0)
BE^Massage Therapy
"DATA",365.013,130,0)
BF^Pulmonary Rehab
"DATA",365.013,131,0)
BG^Cardiac Rehab
"DATA",365.013,132,0)
BH^Pediatric
"DATA",365.013,133,0)
BI^Nursery
"DATA",365.013,134,0)
BJ^Skin
"DATA",365.013,135,0)
BK^Orthopedic
"DATA",365.013,136,0)
BL^Cardiac
"DATA",365.013,137,0)
BM^Lymphatic
"DATA",365.013,138,0)
BN^Gastrointestinal
"DATA",365.013,139,0)
BP^Endocrine
"DATA",365.013,140,0)
BQ^Neurology
"DATA",365.013,141,0)
BR^Eye
"DATA",365.013,142,0)
BS^Invasive Procedures
"DATA",365.014,1,0)
42^Medicare 2ndary Veterans Admin
"DATA",365.014,2,0)
AP^Auto Insurance Policy
"DATA",365.014,3,0)
C1^Commercial
"DATA",365.014,4,0)
CO^COBRA
"DATA",365.014,5,0)
GP^Group Policy
"DATA",365.014,6,0)
HM^HMO
"DATA",365.014,7,0)
HN^HMO - Medicare Risk
"DATA",365.014,8,0)
IP^Individual Policy
"DATA",365.014,9,0)
MA^Medicare Part A
"DATA",365.014,10,0)
MB^Medicare Part B
"DATA",365.014,11,0)
MC^Medicaid
"DATA",365.014,12,0)
PR^PPO
"DATA",365.014,13,0)
PS^Point of Service (POS)
"DATA",365.014,14,0)
SP^Supplemental Policy
"DATA",365.014,15,0)
WC^Workers Compensation
"DATA",365.014,16,0)
12^Medicare 2ndary Working Aged Beneficiary or Spouse with Employer GHP
"DATA",365.014,17,0)
13^Medicare 2ndary ESRD Beneficiary in the 12 month coordination period with Employer GHP
"DATA",365.014,18,0)
14^Medicare 2ndary, No-fault Insurance including Auto is Primary
"DATA",365.014,19,0)
15^Medicare 2ndary Workers Compensation
"DATA",365.014,20,0)
16^Medicare 2ndary PHS or Other Federal Agency
"DATA",365.014,21,0)
41^Medicare 2ndary Black Lung
"DATA",365.014,22,0)
43^Medicare 2ndary Disabled Beneficial <65 with Large LGHP
"DATA",365.014,23,0)
47^Medicare 2ndary, Other Liability Insurance is Primary
"DATA",365.014,24,0)
CP^Medicare Conditionally Primary
"DATA",365.014,25,0)
D^Disability
"DATA",365.014,26,0)
DB^Disability Benefits
"DATA",365.014,27,0)
EP^Exclusive Provider Organization
"DATA",365.014,28,0)
FF^Family or Friends
"DATA",365.014,29,0)
HS^Special Low Income Medicare Beneficiary
"DATA",365.014,30,0)
IN^Indemnity
"DATA",365.014,31,0)
LC^Long Term Care
"DATA",365.014,32,0)
LD^Long Term Policy
"DATA",365.014,33,0)
LI^Life Insurance
"DATA",365.014,34,0)
LT^Litigation
"DATA",365.014,35,0)
MH^Medigap Part A
"DATA",365.014,36,0)
MI^Medigap Part B
"DATA",365.014,37,0)
MP^Medicare Primary
"DATA",365.014,38,0)
OT^Other
"DATA",365.014,39,0)
PE^Property Insurance - Personal
"DATA",365.014,40,0)
PL^Personal
"DATA",365.014,41,0)
PP^Personal Payment/Cash - No Insurance
"DATA",365.014,42,0)
QM^Qualified Medicare Beneficiary
"DATA",365.014,43,0)
RP^Property Insurance - Real
"DATA",365.014,44,0)
TF^TEFRA
"DATA",365.014,45,0)
WU^Wrap Up Policy
"DATA",365.016,1,0)
99^Quantity Used
"DATA",365.016,2,0)
CA^Covered/Actual
"DATA",365.016,3,0)
CE^Covered/Estimated
"DATA",365.016,4,0)
DB^Deduct. Blood Units
"DATA",365.016,5,0)
DY^Days
"DATA",365.016,6,0)
HS^Hours
"DATA",365.016,7,0)
LA^Lifetime Reserve/Actual
"DATA",365.016,8,0)
LE^Lifetime Reserve/Est
"DATA",365.016,9,0)
MN^Month
"DATA",365.016,10,0)
P6^Number of Serv/Proc
"DATA",365.016,11,0)
QA^Quantity Approved
"DATA",365.016,12,0)
S7^Age/High Value
"DATA",365.016,13,0)
S8^Age/Low Value
"DATA",365.016,14,0)
VS^Visits
"DATA",365.016,15,0)
YY^Years
"DATA",365.016,16,0)
FL^Units
"DATA",365.022,1,0)
13^Contracted Serv Prov
"DATA",365.022,2,0)
1P^Provider
"DATA",365.022,3,0)
2B^Third Party Admin
"DATA",365.022,4,0)
36^Employer
"DATA",365.022,5,0)
73^Other Physician
"DATA",365.022,6,0)
FA^Facility
"DATA",365.022,7,0)
GP^Gateway Prov
"DATA",365.022,8,0)
IL^Insured/Subscriber
"DATA",365.022,9,0)
LR^Legal Rep
"DATA",365.022,10,0)
P3^PCP
"DATA",365.022,11,0)
P4^Prior Ins Carrier
"DATA",365.022,12,0)
P5^Plan Sponsor
"DATA",365.022,13,0)
PR^Payer
"DATA",365.022,14,0)
PRP^Primary Payer
"DATA",365.022,15,0)
SEP^Secondary Payer
"DATA",365.022,16,0)
TTP^Tertiary Payer
"DATA",365.022,17,0)
VN^Vendor
"DATA",365.022,18,0)
X3^UM Organization
"DATA",365.023,1,0)
24^Employer's ID
"DATA",365.023,2,0)
34^SSN
"DATA",365.023,3,0)
46^Elect Transmitter ID
"DATA",365.023,4,0)
FA^Facility ID
"DATA",365.023,5,0)
FI^Federal Tax ID
"DATA",365.023,6,0)
MI^Member ID
"DATA",365.023,7,0)
NI^NAIC
"DATA",365.023,8,0)
PI^Payer ID
"DATA",365.023,9,0)
PP^Pharm Processor Num
"DATA",365.023,10,0)
SV^Service Prov Num
"DATA",365.023,11,0)
XV^National Plan ID
"DATA",365.023,12,0)
XX^National Prov ID
"DATA",365.023,13,0)
ZZ^Mutually Defined
"DATA",365.024,1,0)
AT^Attending
"DATA",365.024,2,0)
BI^Billing
"DATA",365.024,3,0)
CO^Consulting
"DATA",365.024,4,0)
CV^Covering
"DATA",365.024,5,0)
H^Hospital
"DATA",365.024,6,0)
HH^Home Healthcare
"DATA",365.024,7,0)
LA^Laboratory
"DATA",365.024,8,0)
OT^Other Physician
"DATA",365.024,9,0)
P1^Pharmacist
"DATA",365.024,10,0)
P2^Pharmacy
"DATA",365.024,11,0)
PC^PCP
"DATA",365.024,12,0)
PE^Performing
"DATA",365.024,13,0)
R^Rural Health Clinic
"DATA",365.024,14,0)
RF^Referring
"DATA",365.024,15,0)
SK^Skilled Nursing Facility
"DATA",365.024,16,0)
SB^Submitting
"DATA",365.024,17,0)
SU^Supervising
"DATA",365.025,1,0)
1^1st Wk of Month
"DATA",365.025,2,0)
2^2nd Wk of the Month
"DATA",365.025,3,0)
3^3rd Wk of Month
"DATA",365.025,4,0)
4^4th Wk of Month
"DATA",365.025,5,0)
5^5th Wk of Month
"DATA",365.025,6,0)
6^1st & 3rd Wk of Month
"DATA",365.025,7,0)
7^2nd & 4th Wk of Month
"DATA",365.025,8,0)
8^1st Working Day of Period
"DATA",365.025,9,0)
9^Last Working Day of Period
"DATA",365.025,10,0)
A^Mon. through Fri.
"DATA",365.025,11,0)
B^Mon. through Sat.
"DATA",365.025,12,0)
C^Mon. through Sun.
"DATA",365.025,13,0)
D^Mon.
"DATA",365.025,14,0)
E^Tues.
"DATA",365.025,15,0)
F^Wed.
"DATA",365.025,16,0)
G^Thurs.
"DATA",365.025,17,0)
H^Fri.
"DATA",365.025,18,0)
J^Sat.
"DATA",365.025,19,0)
K^Sun.
"DATA",365.025,20,0)
L^Mon. through Thurs.
"DATA",365.025,21,0)
M^Immediately
"DATA",365.025,22,0)
N^As Directed
"DATA",365.025,23,0)
O^Daily Mon. through Fri.
"DATA",365.025,24,0)
P^1/2 Mon., 1/2 Thurs.
"DATA",365.025,25,0)
Q^1/2 Tues., 1/2 Thurs.
"DATA",365.025,26,0)
R^1/2 Wed., 1/2 Fri.
"DATA",365.025,27,0)
S^Once Anytime Mon. through Fri.
"DATA",365.025,28,0)
SG^Tues. through Fri.
"DATA",365.025,29,0)
SL^Mon., Tues., Thurs.
"DATA",365.025,30,0)
SP^Mon., Tues., Fri.
"DATA",365.025,31,0)
SX^Wed., Thurs.
"DATA",365.025,32,0)
SY^Mon., Wed., Thurs.
"DATA",365.025,33,0)
SZ^Tues., Thurs., Fri.
"DATA",365.025,34,0)
T^1/2 Tue., 1/2 Fri.
"DATA",365.025,35,0)
U^1/2 Mon., 1/2 Wed.
"DATA",365.025,36,0)
V^1/3 Mon., 1/3 Wed., 1/3 Fri.
"DATA",365.025,37,0)
W^Whenever Necessary
"DATA",365.025,38,0)
X^1/2 By Wed., Bal. By Fri.
"DATA",365.025,39,0)
Y^None
"DATA",365.026,1,0)
193^Period Start
"DATA",365.026,2,0)
194^Period End
"DATA",365.026,3,0)
198^Completion
"DATA",365.026,4,0)
290^COB
"DATA",365.026,5,0)
292^Benefit
"DATA",365.026,6,0)
295^PCP
"DATA",365.026,7,0)
304^Latest Visit/Consultation
"DATA",365.026,8,0)
307^Eligibility
"DATA",365.026,9,0)
318^Added
"DATA",365.026,10,0)
348^Benefit Begin
"DATA",365.026,11,0)
349^Benefit End
"DATA",365.026,12,0)
356^Eligibility Begin
"DATA",365.026,13,0)
357^Eligibility End
"DATA",365.026,14,0)
435^Admission
"DATA",365.026,15,0)
472^Service
"DATA",365.026,16,0)
636^Date Last Update
"DATA",365.026,17,0)
771^Status
"DATA",365.028,1,0)
18^Plan Number
"DATA",365.028,2,0)
1L^Group or Policy Number
"DATA",365.028,3,0)
1W^Member Identification Number
"DATA",365.028,4,0)
49^Family Unit Number
"DATA",365.028,5,0)
6P^Group Number
"DATA",365.028,6,0)
9F^Referral Number
"DATA",365.028,7,0)
A6^Employee Identification Number
"DATA",365.028,8,0)
F6^Health Insurance Claim (HIC) Number
"DATA",365.028,9,0)
G1^Prior Authorization Number
"DATA",365.028,10,0)
IG^Insurance Policy Number
"DATA",365.028,11,0)
N6^Plan Network Identification Number
"DATA",365.028,12,0)
NQ^Medicaid Recipient Identification Number
"DATA",365.15,1,0)
B1^33^1
"DATA",365.15,1,1,0)
^^3^3^3091007^
"DATA",365.15,1,1,1,0)
eIV could not create an inquiry for this entry.  eIV could not match the
"DATA",365.15,1,1,2,0)
insurance company name in the Insurance Buffer file (#355.33) to a valid
"DATA",365.15,1,1,3,0)
insurance company name in the Insurance Company file (#36).
"DATA",365.15,1,2,0)
^^4^4^3091007^
"DATA",365.15,1,2,1,0)
Action to take:  Correct the spelling of the insurance company name found
"DATA",365.15,1,2,2,0)
in the buffer so that it matches one found in the Insurance Company file (#36).
"DATA",365.15,1,2,3,0)
Otherwise, contact the insurance company to manually verify this insurance
"DATA",365.15,1,2,4,0)
information.
"DATA",365.15,2,0)
B2^33^1
"DATA",365.15,2,1,0)
^^5^5^3091007^
"DATA",365.15,2,1,1,0)
eIV could not create an inquiry for this entry. eIV matched the insurance
"DATA",365.15,2,1,2,0)
company name in the Insurance Buffer file (#355.33) to more than one
"DATA",365.15,2,1,3,0)
uniquely named insurance company in the Insurance Company file (#36). This
"DATA",365.15,2,1,4,0)
indicates that the Auto Match check or the Synonym check yielded multiple
"DATA",365.15,2,1,5,0)
insurance companies from the Insurance Company file.
"DATA",365.15,2,2,0)
^^7^7^3091007^
"DATA",365.15,2,2,1,0)
Action to take:  Correct the spelling of the insurance company name found
"DATA",365.15,2,2,2,0)
in the buffer so that it matches one found in the Insurance Company file
"DATA",365.15,2,2,3,0)
(#36). Otherwise, contact the insurance company to manually verify this
"DATA",365.15,2,2,4,0)
insurance information. (* Advanced users: Use the option "Enter/Edit Auto
"DATA",365.15,2,2,5,0)
Match Entries" to check the entries in the Auto Match file (#365.11). Make
"DATA",365.15,2,2,6,0)
sure there is no more than one entry in the Auto Match file, if any, which
"DATA",365.15,2,2,7,0)
corresponds to the insurance company name found in this buffer entry.)
"DATA",365.15,3,0)
B3^33^1
"DATA",365.15,3,1,0)
^^4^4^3091007^
"DATA",365.15,3,1,1,0)
eIV could not create an inquiry for this entry. eIV matched the insurance
"DATA",365.15,3,1,2,0)
company name in the Insurance Buffer file (#355.33) to more than one insurance
"DATA",365.15,3,1,3,0)
company entry with the same name in the Insurance Company file (#36).  At least
"DATA",365.15,3,1,4,0)
one of these matching entries are linked to a different payer.
"DATA",365.15,3,2,0)
^^6^6^3091007^
"DATA",365.15,3,2,1,0)
Action to take:  Run the "eIV Payer Link Report" option by Insurance
"DATA",365.15,3,2,2,0)
Company List, for all linked insurance companies, using the keyword
"DATA",365.15,3,2,3,0)
feature to narrow down the search.  This will provide a report showing
"DATA",365.15,3,2,4,0)
which payer the different insurance company records are linked to.  Next,
"DATA",365.15,3,2,5,0)
use the "Insurance Company Entry/Edit" option to correct those insurance
"DATA",365.15,3,2,6,0)
companies who are linked to the wrong payer.
"DATA",365.15,4,0)
B4^33^1
"DATA",365.15,4,1,0)
^^6^6^3091007^
"DATA",365.15,4,1,1,0)
eIV could not create an inquiry for this entry. There is no link for this
"DATA",365.15,4,1,2,0)
insurance company between the Insurance Company file (#36) and the Payer
"DATA",365.15,4,1,3,0)
file (#365.12). This may occur because the insurance staff did not attempt
"DATA",365.15,4,1,4,0)
to manually link the named insurance company to the payer list or the
"DATA",365.15,4,1,5,0)
insurance staff did not find a payer in the payer list that they wanted to
"DATA",365.15,4,1,6,0)
link this insurance company to.
"DATA",365.15,4,2,0)
^^9^9^3091007^
"DATA",365.15,4,2,1,0)
Action to take:  Either contact the insurance company to manually verify
"DATA",365.15,4,2,2,0)
this insurance information or link the insurance company to a payer.
"DATA",365.15,4,2,3,0)
Steps to link an insurance company to a payer are as follows: run the
"DATA",365.15,4,2,4,0)
"eIV Payer Link Report" option by Insurance Company List, for all
"DATA",365.15,4,2,5,0)
unlinked insurance companies.  Use the keyword feature when running the
"DATA",365.15,4,2,6,0)
report to narrow down the search.  This will provide a report showing
"DATA",365.15,4,2,7,0)
which insurance companies are not linked to a payer.  Next, use the
"DATA",365.15,4,2,8,0)
"Insurance Company Entry/Edit" option to link those insurance companies
"DATA",365.15,4,2,9,0)
to the correct payer.
"DATA",365.15,5,0)
B5^33^1
"DATA",365.15,5,1,0)
^^2^2^3091007^
"DATA",365.15,5,1,1,0)
eIV could not create an inquiry for this entry.  The payer is not
"DATA",365.15,5,1,2,0)
nationally active for eIV.
"DATA",365.15,5,2,0)
^365.17^2^2^3091007^^^^
"DATA",365.15,5,2,1,0)
Action to take:  Contact the insurance company to manually verify this
"DATA",365.15,5,2,2,0)
insurance information.
"DATA",365.15,6,0)
B6^33^1
"DATA",365.15,6,1,0)
^^2^2^3091007^
"DATA",365.15,6,1,1,0)
eIV could not create an inquiry for this entry.  The payer is not locally
"DATA",365.15,6,1,2,0)
active for eIV.
"DATA",365.15,6,2,0)
^365.17^3^3^3091007^^^^
"DATA",365.15,6,2,1,0)
Action to take:  Either use the option "Payer Edit (Activate/Inactivate)"
"DATA",365.15,6,2,2,0)
to locally activate this payer or contact the insurance company to
"DATA",365.15,6,2,3,0)
manually verify this insurance information.
"DATA",365.15,7,0)
B7^33^1
"DATA",365.15,7,1,0)
^^3^3^3091007^
"DATA",365.15,7,1,1,0)
eIV could not create an inquiry for this entry.  The payer does not accept
"DATA",365.15,7,1,2,0)
electronic insurance eligibility requests.  The eIV application data does
"DATA",365.15,7,1,3,0)
not exist in the Payer file (#365.12) for this payer.
"DATA",365.15,7,2,0)
^365.17^2^2^3091007^^^^
"DATA",365.15,7,2,1,0)
Action to take:  Contact the insurance company to manually verify this
"DATA",365.15,7,2,2,0)
insurance information.
"DATA",365.15,8,0)
A1^43^0
"DATA",365.15,8,1,0)
^365.152^2^2^3091007^^^^
"DATA",365.15,8,1,1,0)
Information received via electronic inquiry indicates patient has active
"DATA",365.15,8,1,2,0)
insurance.
"DATA",365.15,8,2,0)
^365.17^2^2^3091007^^
"DATA",365.15,8,2,1,0)
Action to take:  Review the details listed in the eIV Response Report
"DATA",365.15,8,2,2,0)
before processing this buffer entry.
"DATA",365.15,9,0)
D1^45^0
"DATA",365.15,9,1,0)
^365.152^2^2^3091007^^^^
"DATA",365.15,9,1,1,0)
Information received via electronic inquiry indicates patient does NOT
"DATA",365.15,9,1,2,0)
have active insurance.
"DATA",365.15,9,2,0)
^^2^2^3091007^
"DATA",365.15,9,2,1,0)
Action to take:  Review the details listed in the eIV Response Report
"DATA",365.15,9,2,2,0)
before processing this buffer entry.
"DATA",365.15,10,0)
Q1^63^0
"DATA",365.15,10,1,0)
^^3^3^3091007^
"DATA",365.15,10,1,1,0)
This buffer entry is currently still being processed by the eIV
"DATA",365.15,10,1,2,0)
application. Unless instructed otherwise, there is no reason you
"DATA",365.15,10,1,3,0)
should do anything with this buffer entry.
"DATA",365.15,10,2,0)
^365.17^1^1^3091007^^^^
"DATA",365.15,10,2,1,0)
Action to take: None.
"DATA",365.15,11,0)
B8^33^0
"DATA",365.15,11,1,0)
^365.152^2^2^3091007^^^^
"DATA",365.15,11,1,1,0)
The electronic response indicated an error of some kind that needs to be
"DATA",365.15,11,1,2,0)
corrected before the insurance inquiry can be re-transmitted.
"DATA",365.15,11,2,0)
^365.17^2^2^3091007^^^^
"DATA",365.15,11,2,1,0)
Action to take:  Contact the insurance company to manually verify this
"DATA",365.15,11,2,2,0)
insurance information.
"DATA",365.15,12,0)
B9^33^1
"DATA",365.15,12,1,0)
^365.152^1^1^3091007^^^^
"DATA",365.15,12,1,1,0)
An unknown and unforeseen error has occurred with this entry.
"DATA",365.15,12,2,0)
^^2^2^3091007^
"DATA",365.15,12,2,1,0)
Action to take:  Please call the Help Desk for this issue; include a trace
"DATA",365.15,12,2,2,0)
number if available.
"DATA",365.15,13,0)
B10^33^1
"DATA",365.15,13,1,0)
^365.152^2^2^3091007^^
"DATA",365.15,13,1,1,0)
eIV could not create an inquiry for this entry.  The insurance
"DATA",365.15,13,1,2,0)
company found is listed as inactive in the Insurance Company file (#36).
"DATA",365.15,13,2,0)
^365.17^2^2^3091007^^^^
"DATA",365.15,13,2,1,0)
Action to take:  Contact the insurance company to manually verify this
"DATA",365.15,13,2,2,0)
insurance information.
"DATA",365.15,14,0)
B11^33^1
"DATA",365.15,14,1,0)
^^2^2^3091007^
"DATA",365.15,14,1,1,0)
eIV could not create an inquiry for this entry.  eIV cannot send inquiries
"DATA",365.15,14,1,2,0)
to Medicaid.
"DATA",365.15,14,2,0)
^365.17^2^2^3091007^^^^
"DATA",365.15,14,2,1,0)
Action to take:  Contact the insurance company to manually verify this
"DATA",365.15,14,2,2,0)
insurance information.
"DATA",365.15,15,0)
B12^33^0
"DATA",365.15,15,1,0)
^365.152^2^2^3091007^^
"DATA",365.15,15,1,1,0)
eIV was unable to electronically verify this insurance information due to
"DATA",365.15,15,1,2,0)
a communication failure.
"DATA",365.15,15,2,0)
^365.17^2^2^3091007^^^^
"DATA",365.15,15,2,1,0)
Action to take:  Contact the insurance company to manually verify this
"DATA",365.15,15,2,2,0)
insurance information.
"DATA",365.15,16,0)
B13^33^1
"DATA",365.15,16,1,0)
^365.152^1^1^3091007^^^^
"DATA",365.15,16,1,1,0)
The insurance company name for this buffer entry is blank.
"DATA",365.15,16,2,0)
^^2^2^3091007^
"DATA",365.15,16,2,1,0)
Action to take:  Please call the Help Desk and provide them with buffer 
"DATA",365.15,16,2,2,0)
information and trace number, if available.
"DATA",365.15,17,0)
B14^33^1
"DATA",365.15,17,1,0)
^^2^2^3091007^
"DATA",365.15,17,1,1,0)
eIV could not create an inquiry for this entry.  The payer associated with
"DATA",365.15,17,1,2,0)
this insurance company has been deactivated.
"DATA",365.15,17,2,0)
^365.17^3^3^3091007^^^^
"DATA",365.15,17,2,1,0)
Action to take:  Either edit this insurance company and link it to another
"DATA",365.15,17,2,2,0)
payer, using the "Insurance Company Entry/Edit" option; otherwise, contact
"DATA",365.15,17,2,3,0)
the insurance company to manually verify this insurance information.
"DATA",365.15,18,0)
B15^33^1
"DATA",365.15,18,1,0)
^^3^3^3091007^
"DATA",365.15,18,1,1,0)
eIV could not create an inquiry for this entry.  This patient's 
"DATA",365.15,18,1,2,0)
insurance must be verified manually because the Subscriber ID is 
"DATA",365.15,18,1,3,0)
missing.
"DATA",365.15,18,2,0)
^365.17^2^2^3091007^^^^
"DATA",365.15,18,2,1,0)
Action to take:  Contact the insurance company to manually verify this
"DATA",365.15,18,2,2,0)
insurance information.
"DATA",365.15,21,0)
U1^35^0
"DATA",365.15,21,1,0)
^365.152^4^4^3091007^^^^
"DATA",365.15,21,1,1,0)
An ambiguous response has been received.  It could NOT be determined 
"DATA",365.15,21,1,2,0)
whether the insurance company identified the patient as an active member 
"DATA",365.15,21,1,3,0)
of the insurance plan.  Please contact the insurance company to manually 
"DATA",365.15,21,1,4,0)
verify this insurance information.
"DATA",365.15,21,2,0)
^^3^3^3091007^
"DATA",365.15,21,2,1,0)
Action to take:  Review the details listed in the eIV Response Report and
"DATA",365.15,21,2,2,0)
contact the insurance company to manually verify this insurance 
"DATA",365.15,21,2,3,0)
information.
"DATA",365.15,22,0)
U2^35^0
"DATA",365.15,22,1,0)
^365.152^2^2^3091007^^^^
"DATA",365.15,22,1,1,0)
While processing a payer response, an unknown and unforeseen error has 
"DATA",365.15,22,1,2,0)
occurred with this entry.
"DATA",365.15,22,2,0)
^^6^6^3091007^
"DATA",365.15,22,2,1,0)
Action to take:  Please call the Help Desk for this issue; include a trace
"DATA",365.15,22,2,2,0)
number if available. A user may process this buffer entry if a Help Desk 
"DATA",365.15,22,2,3,0)
call has been logged with the associated trace number. To process this
"DATA",365.15,22,2,4,0)
buffer entry, review the details listed in the eIV Response Report and
"DATA",365.15,22,2,5,0)
contact the insurance company to manually verify this insurance
"DATA",365.15,22,2,6,0)
information.
"FIA",2)
PATIENT
"FIA",2,0)
^DPT(
"FIA",2,0,0)
2I
"FIA",2,0,1)
y^y^p^^^^n^^n
"FIA",2,0,10)

"FIA",2,0,11)

"FIA",2,0,"RLRO")

"FIA",2,0,"VR")
2.0^IB
"FIA",2,2)
1
"FIA",2,2.312)
1
"FIA",2,2.312,1.05)

"FIA",2,2.312,4.04)

"FIA",2,2.312,60)

"FIA",2,2.322)
0
"FIA",2,2.3222)
0
"FIA",2,2.3226)
0
"FIA",2,2.3227)
0
"FIA",2,2.3228)
0
"FIA",2,2.3229)
0
"FIA",2,2.32291)
0
"FIA",350.9)
IB SITE PARAMETERS
"FIA",350.9,0)
^IBE(350.9,
"FIA",350.9,0,0)
350.9I
"FIA",350.9,0,1)
y^y^p^^^^n^^n
"FIA",350.9,0,10)

"FIA",350.9,0,11)

"FIA",350.9,0,"RLRO")

"FIA",350.9,0,"VR")
2.0^IB
"FIA",350.9,350.9)
1
"FIA",350.9,350.9,51.02)

"FIA",350.9,350.9,51.03)

"FIA",350.9,350.9,51.04)

"FIA",350.9,350.9,51.06)

"FIA",350.9,350.9,51.13)

"FIA",350.9,350.9,51.14)

"FIA",350.9,350.9,51.15)

"FIA",350.9,350.9,51.17)

"FIA",350.9,350.9,51.19)

"FIA",350.9,350.9,51.2)

"FIA",350.9,350.9,51.22)

"FIA",350.9,350.9,51.25)

"FIA",350.9,350.9002)
0
"FIA",355.33)
INSURANCE BUFFER
"FIA",355.33,0)
^IBA(355.33,
"FIA",355.33,0,0)
355.33DA
"FIA",355.33,0,1)
y^y^p^^^^n^^n
"FIA",355.33,0,10)

"FIA",355.33,0,11)

"FIA",355.33,0,"RLRO")

"FIA",355.33,0,"VR")
2.0^IB
"FIA",355.33,355.33)
1
"FIA",355.33,355.33,62.02)

"FIA",355.33,355.33,62.03)

"FIA",355.33,355.33,62.04)

"FIA",355.33,355.33,62.05)

"FIA",355.33,355.33,62.06)

"FIA",365)
IIV RESPONSE
"FIA",365,0)
^IBCN(365,
"FIA",365,0,0)
365
"FIA",365,0,1)
y^y^p^^^^n^^n
"FIA",365,0,10)

"FIA",365,0,11)

"FIA",365,0,"RLRO")

"FIA",365,0,"VR")
2.0^IB
"FIA",365,365)
1
"FIA",365,365,1.09)

"FIA",365,365,2)

"FIA",365,365,5.01)

"FIA",365,365,5.02)

"FIA",365,365,5.03)

"FIA",365,365,5.04)

"FIA",365,365,5.05)

"FIA",365,365.02)
0
"FIA",365,365.22)
0
"FIA",365,365.26)
0
"FIA",365,365.27)
0
"FIA",365,365.28)
0
"FIA",365,365.29)
0
"FIA",365,365.291)
0
"FIA",365.011)
X12 271 ELIGIBILITY/BENEFIT
"FIA",365.011,0)
^IBE(365.011,
"FIA",365.011,0,0)
365.011I
"FIA",365.011,0,1)
y^y^f^^n^^y^o^n
"FIA",365.011,0,10)

"FIA",365.011,0,11)

"FIA",365.011,0,"RLRO")

"FIA",365.011,0,"VR")
2.0^IB
"FIA",365.011,365.011)
0
"FIA",365.013)
X12 271 SERVICE TYPE
"FIA",365.013,0)
^IBE(365.013,
"FIA",365.013,0,0)
365.013I
"FIA",365.013,0,1)
y^y^f^^n^^y^o^n
"FIA",365.013,0,10)

"FIA",365.013,0,11)

"FIA",365.013,0,"RLRO")

"FIA",365.013,0,"VR")
2.0^IB
"FIA",365.013,365.013)
0
"FIA",365.014)
X12 271 INSURANCE TYPE
"FIA",365.014,0)
^IBE(365.014,
"FIA",365.014,0,0)
365.014I
"FIA",365.014,0,1)
y^y^f^^n^^y^o^n
"FIA",365.014,0,10)

"FIA",365.014,0,11)

"FIA",365.014,0,"RLRO")

"FIA",365.014,0,"VR")
2.0^IB
"FIA",365.014,365.014)
0
"FIA",365.016)
X12 271 QUANTITY QUALIFIER
"FIA",365.016,0)
^IBE(365.016,
"FIA",365.016,0,0)
365.016I
"FIA",365.016,0,1)
y^y^f^^n^^y^o^n
"FIA",365.016,0,10)

"FIA",365.016,0,11)

"FIA",365.016,0,"RLRO")

"FIA",365.016,0,"VR")
2.0^IB
"FIA",365.016,365.016)
0
"FIA",365.022)
X12 271 ENTITY IDENTIFIER CODE
"FIA",365.022,0)
^IBE(365.022,
"FIA",365.022,0,0)
365.022I
"FIA",365.022,0,1)
y^y^f^^n^^y^o^n
"FIA",365.022,0,10)

"FIA",365.022,0,11)

"FIA",365.022,0,"RLRO")

"FIA",365.022,0,"VR")
2.0^IB
"FIA",365.022,365.022)
0
"FIA",365.023)
X12 271 IDENTIFICATION QUALIFIER
"FIA",365.023,0)
^IBE(365.023,
"FIA",365.023,0,0)
365.023I
"FIA",365.023,0,1)
y^y^f^^n^^y^o^n
"FIA",365.023,0,10)

"FIA",365.023,0,11)

"FIA",365.023,0,"RLRO")

"FIA",365.023,0,"VR")
2.0^IB
"FIA",365.023,365.023)
0
"FIA",365.024)
X12 271 PROVIDER CODE
"FIA",365.024,0)
^IBE(365.024,
"FIA",365.024,0,0)
365.024I
"FIA",365.024,0,1)
y^y^f^^n^^y^o^n
"FIA",365.024,0,10)

"FIA",365.024,0,11)

"FIA",365.024,0,"RLRO")

"FIA",365.024,0,"VR")
2.0^IB
"FIA",365.024,365.024)
0
"FIA",365.025)
X12 271 DELIVERY FREQUENCY CODE
"FIA",365.025,0)
^IBE(365.025,
"FIA",365.025,0,0)
365.025I
"FIA",365.025,0,1)
y^y^f^^n^^y^o^n
"FIA",365.025,0,10)

"FIA",365.025,0,11)

"FIA",365.025,0,"RLRO")

"FIA",365.025,0,"VR")
2.0^IB
"FIA",365.025,365.025)
0
"FIA",365.026)
X12 271 DATE QUALIFIER
"FIA",365.026,0)
^IBE(365.026,
"FIA",365.026,0,0)
365.026I
"FIA",365.026,0,1)
y^y^f^^n^^y^o^n
"FIA",365.026,0,10)

"FIA",365.026,0,11)

"FIA",365.026,0,"RLRO")

"FIA",365.026,0,"VR")
2.0^IB
"FIA",365.026,365.026)
0
"FIA",365.028)
X12 271 REFERENCE IDENTIFICATION
"FIA",365.028,0)
^IBE(365.028,
"FIA",365.028,0,0)
365.028I
"FIA",365.028,0,1)
y^y^f^^n^^y^o^n
"FIA",365.028,0,10)

"FIA",365.028,0,11)

"FIA",365.028,0,"RLRO")

"FIA",365.028,0,"VR")
2.0^IB
"FIA",365.028,365.028)
0
"FIA",365.1)
IIV TRANSMISSION QUEUE
"FIA",365.1,0)
^IBCN(365.1,
"FIA",365.1,0,0)
365.1
"FIA",365.1,0,1)
y^y^p^^^^n^^n
"FIA",365.1,0,10)

"FIA",365.1,0,11)

"FIA",365.1,0,"RLRO")

"FIA",365.1,0,"VR")
2.0^IB
"FIA",365.1,365.1)
1
"FIA",365.1,365.1,.1)

"FIA",365.1,365.1,.19)

"FIA",365.12)
PAYER
"FIA",365.12,0)
^IBE(365.12,
"FIA",365.12,0,0)
365.12
"FIA",365.12,0,1)
y^y^p^^^^n^^n
"FIA",365.12,0,10)

"FIA",365.12,0,11)

"FIA",365.12,0,"RLRO")

"FIA",365.12,0,"VR")
2.0^IB
"FIA",365.12,365.12)
1
"FIA",365.12,365.121)
1
"FIA",365.12,365.121,2)

"FIA",365.12,365.121,3)

"FIA",365.12,365.1212)
0
"FIA",365.12,365.1213)
0
"FIA",365.15)
IIV STATUS TABLE
"FIA",365.15,0)
^IBE(365.15,
"FIA",365.15,0,0)
365.15
"FIA",365.15,0,1)
n^y^f^^y^^y^o^n
"FIA",365.15,0,10)

"FIA",365.15,0,11)

"FIA",365.15,0,"RLRO")

"FIA",365.15,0,"VR")
2.0^IB
"FIA",365.15,365.15)
0
"FIA",365.15,365.152)
0
"FIA",365.15,365.17)
0
"INIT")
IBY416PO
"KRN",.402,2569,-1)
0^1
"KRN",.402,2569,0)
IBCNE GENERAL PARAMETER EDIT^3090901.2348^@^350.9^^@^3100722
"KRN",.402,2569,"DIAB",1,1,200,0)
OFFICE PHONE;REQ
"KRN",.402,2569,"DIAB",2,1,200,0)
EMAIL ADDRESS;REQ
"KRN",.402,2569,"DIAB",13,0,350.9,0)
CONTACT PERSON:
"KRN",.402,2569,"DR",1,350.9)
51.01;51.02;S:'X Y="@10";51.03;@10;51.04;51.13;S:X="I" Y="@1";51.14;51.19;@1;51.16;^200^VA(200,^^S I(0,0)=D0 S Y(1)=$S($D(^IBE(350.9,D0,51)):^(51),1:"") S X=$P(Y(1),U,16),X=X S D(0)=+X S X=$S(D(0)>0:D(0),1:"");51.2;
"KRN",.402,2569,"DR",2,200)
.132R~;.151R~;
"KRN",19,11172,-1)
0^12
"KRN",19,11172,0)
IBCNE AUTO MATCH ENTER/EDIT^Enter/Edit Auto Match Entries^^R^^IBCNE IIV AUTO MATCH^^^^^^INTEGRATED BILLING
"KRN",19,11172,1,0)
^19.06^2^2^3091026^^
"KRN",19,11172,1,1,0)
This option allows the user to manage the entries in the
"KRN",19,11172,1,2,0)
Auto Match file.
"KRN",19,11172,25)
ENTER^IBCNEAME
"KRN",19,11172,"U")
ENTER/EDIT AUTO MATCH ENTRIES
"KRN",19,11173,-1)
0^2
"KRN",19,11173,0)
IBCNE IIV RESPONSE REPORT^eIV Response Report^^R^^^^^^^^
"KRN",19,11173,1,0)
^19.06^3^3^3091026^^
"KRN",19,11173,1,1,0)
Generate eIV Payer Report based on the eIV Responses for a given date
"KRN",19,11173,1,2,0)
range, Payer name range and Patient name range.  All the response
"KRN",19,11173,1,3,0)
information is displayed for the selected responses.
"KRN",19,11173,25)
EN^IBCNERP1(0)
"KRN",19,11173,"U")
EIV RESPONSE REPORT
"KRN",19,11174,-1)
0^3
"KRN",19,11174,0)
IBCNE IIV PAYER REPORT^eIV Payer Report^^R^^^^^^^^
"KRN",19,11174,1,0)
^19.06^2^2^3091026^^
"KRN",19,11174,1,1,0)
Generate the eIV Payer Report based on eIV Responses received for a given 
"KRN",19,11174,1,2,0)
date range by Payer.
"KRN",19,11174,25)
EN^IBCNERP4
"KRN",19,11174,"U")
EIV PAYER REPORT
"KRN",19,11175,-1)
0^4
"KRN",19,11175,0)
IBCNE IIV STATISTICAL REPORT^eIV Statistical Report^^R^^^^^^^^
"KRN",19,11175,1,0)
^19.06^2^2^3091026^^
"KRN",19,11175,1,1,0)
Generate eIV Statistical Report based on eIV Inquiries and Responses for a
"KRN",19,11175,1,2,0)
given date range and current Insurance Buffer data.
"KRN",19,11175,25)
EN^IBCNERP7
"KRN",19,11175,"U")
EIV STATISTICAL REPORT
"KRN",19,11176,-1)
0^11
"KRN",19,11176,0)
IBCNE AUTO MATCH BUFFER^Add Auto Match Entries Using Insurance Buffer Data^^R^^IBCNE IIV AUTO MATCH^^^^^^INTEGRATED BILLING
"KRN",19,11176,1,0)
^19.06^4^4^3091026^^
"KRN",19,11176,1,1,0)
This option allows the user to see insurance company names in the 
"KRN",19,11176,1,2,0)
Insurance Buffer file that do not exist in the Insurance Company file 
"KRN",19,11176,1,3,0)
(File# 36) and that do not exist or pattern match with anything in the 
"KRN",19,11176,1,4,0)
Auto Match file (File# 365.11).
"KRN",19,11176,25)
EN^IBCNEAMC
"KRN",19,11176,"U")
ADD AUTO MATCH ENTRIES USING I
"KRN",19,11177,-1)
0^9
"KRN",19,11177,0)
IBCNE REQUEST INQUIRY^Request Electronic Insurance Inquiry^^R^^IBCNE IIV SUPERVISOR^^^^^^INTEGRATED BILLING^^
"KRN",19,11177,1,0)
^^2^2^3091026^
"KRN",19,11177,1,1,0)
Option to allow users to force electronic inquiry of patient insurance
"KRN",19,11177,1,2,0)
information through the eIV application.
"KRN",19,11177,20)

"KRN",19,11177,25)
EN^IBCNEQU
"KRN",19,11177,"U")
REQUEST ELECTRONIC INSURANCE I
"KRN",19,11179,-1)
0^8
"KRN",19,11179,0)
IBCNE PURGE IIV DATA^Purge eIV Transactions^^R^^XUMGR^^^^^^INTEGRATED BILLING
"KRN",19,11179,1,0)
^^3^3^3091026^
"KRN",19,11179,1,1,0)
This option is responsible for purging data from file 365 (eIV Response) 
"KRN",19,11179,1,2,0)
and from file 365.1 (eIV Transmission Queue).  Only data that is 
"KRN",19,11179,1,3,0)
older than 6 months can be purged.
"KRN",19,11179,25)
EN^IBCNEKIT
"KRN",19,11179,"U")
PURGE EIV TRANSACTIONS
"KRN",19,11181,-1)
0^14
"KRN",19,11181,0)
IBCNE IIV BATCH PROCESS^eIV NIGHTLY PROCESS^^R^^^^^^^n^INTEGRATED BILLING
"KRN",19,11181,1,0)
^19.06^6^6^3091026^^
"KRN",19,11181,1,1,0)
This option is not to be placed on any menu nor run by any user.  This 
"KRN",19,11181,1,2,0)
option is specifically designed to be scheduled in TaskMan to be executed 
"KRN",19,11181,1,3,0)
once a day during off-peak hours.  Running this more than once a day may 
"KRN",19,11181,1,4,0)
cause unexpected results.  This option is the eIV nightly task that 
"KRN",19,11181,1,5,0)
extracts the patient/insurance data from VISTA and transmits it to AAC 
"KRN",19,11181,1,6,0)
while following the eIV Site Parameters within file #350.9.
"KRN",19,11181,25)
EN^IBCNEDE
"KRN",19,11181,99)
59298,56894
"KRN",19,11181,200.9)
y
"KRN",19,11181,"U")
EIV NIGHTLY PROCESS
"KRN",19,11182,-1)
0^1
"KRN",19,11182,0)
IBCNE IIV MENU^eIV Menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",19,11182,1,0)
^19.06^2^2^3091026^^
"KRN",19,11182,1,1,0)
This menu contains options related to eIV (Electronic Insurance
"KRN",19,11182,1,2,0)
Verification).
"KRN",19,11182,10,0)
^19.01IP^9^9
"KRN",19,11182,10,1,0)
11172^AE
"KRN",19,11182,10,1,"^")
IBCNE AUTO MATCH ENTER/EDIT
"KRN",19,11182,10,2,0)
11176^AB
"KRN",19,11182,10,2,"^")
IBCNE AUTO MATCH BUFFER
"KRN",19,11182,10,3,0)
11177^EI
"KRN",19,11182,10,3,"^")
IBCNE REQUEST INQUIRY
"KRN",19,11182,10,4,0)
11174^PR
"KRN",19,11182,10,4,"^")
IBCNE IIV PAYER REPORT
"KRN",19,11182,10,5,0)
11175^SR
"KRN",19,11182,10,5,"^")
IBCNE IIV STATISTICAL REPORT
"KRN",19,11182,10,6,0)
11173^RR
"KRN",19,11182,10,6,"^")
IBCNE IIV RESPONSE REPORT
"KRN",19,11182,10,7,0)
11184^LR
"KRN",19,11182,10,7,"^")
IBCNE IIV PAYER LINK REPORT
"KRN",19,11182,10,8,0)
11765^NI
"KRN",19,11182,10,8,"^")
IBCNE POTENTIAL NEW INS FOUND
"KRN",19,11182,10,9,0)
12771^IU^
"KRN",19,11182,10,9,"^")
IBCNE EIV UPDATE REPORT
"KRN",19,11182,99)
61634,53716
"KRN",19,11182,"U")
EIV MENU
"KRN",19,11184,-1)
0^5
"KRN",19,11184,0)
IBCNE IIV PAYER LINK REPORT^eIV Payer Link Report^^R^^^^^^^^
"KRN",19,11184,1,0)
^19.06^2^2^3091026^^^^
"KRN",19,11184,1,1,0)
This report shows the relationship between the insurance companies in 
"KRN",19,11184,1,2,0)
file 36 and the payers in file 365.12.
"KRN",19,11184,25)
EN^IBCNERPB
"KRN",19,11184,"U")
EIV PAYER LINK REPORT
"KRN",19,11764,-1)
0^6
"KRN",19,11764,0)
IBCNE IIV INACTIVE POLICY RPT^eIV Inactive Policy Report^^R^^^^^^^^INTEGRATED BILLING
"KRN",19,11764,1,0)
^19.06^3^3^3091026^^
"KRN",19,11764,1,1,0)
This report will allow a user to display any Inactive Insurance Policies
"KRN",19,11764,1,2,0)
that the eIV software discovered while questioning Payers.  These policies
"KRN",19,11764,1,3,0)
are not necessarily on the patient's insurance file.
"KRN",19,11764,25)
EN^IBCNERP1(1)
"KRN",19,11764,"U")
EIV INACTIVE POLICY REPORT
"KRN",19,11765,-1)
0^13
"KRN",19,11765,0)
IBCNE POTENTIAL NEW INS FOUND^Potential New Insurance Found^^M^^^^^^^^
"KRN",19,11765,1,0)
^^3^3^3091026^
"KRN",19,11765,1,1,0)
While eIV was trying to identify/find (guess) insurance policies, using
"KRN",19,11765,1,2,0)
the Most Popular Payer list and/or old expired insurance policies, 
"KRN",19,11765,1,3,0)
potential insurance policies were discovered.
"KRN",19,11765,10,0)
^19.01IP^2^2
"KRN",19,11765,10,1,0)
11764^IR
"KRN",19,11765,10,1,"^")
IBCNE IIV INACTIVE POLICY RPT
"KRN",19,11765,10,2,0)
11766^AR
"KRN",19,11765,10,2,"^")
IBCNE IIV AMBIGUOUS POLICY RPT
"KRN",19,11765,99)
61620,43535
"KRN",19,11765,"U")
POTENTIAL NEW INSURANCE FOUND
"KRN",19,11766,-1)
0^7
"KRN",19,11766,0)
IBCNE IIV AMBIGUOUS POLICY RPT^eIV Ambiguous Policy Report^^R^^^^^^^^INTEGRATED BILLING
"KRN",19,11766,1,0)
^19.06^5^5^3091026^^
"KRN",19,11766,1,1,0)
This report will allow a user to display any Ambiguous Payer Responses
"KRN",19,11766,1,2,0)
for insurance policies that the eIV software discovered while questioning 
"KRN",19,11766,1,3,0)
Payers.  These policies are not necessarily on the patient's insurance
"KRN",19,11766,1,4,0)
file.  Ambiguous payer responses are those responses that do not have
"KRN",19,11766,1,5,0)
enough information to safely determine if the policy is active or not.
"KRN",19,11766,25)
EN^IBCNERP1(2)
"KRN",19,11766,"U")
EIV AMBIGUOUS POLICY REPORT
"KRN",19,12771,-1)
0^10
"KRN",19,12771,0)
IBCNE EIV UPDATE REPORT^eIV Patient Insurance Update Report^^R^^^^^^^^INTEGRATED BILLING^^
"KRN",19,12771,1,0)
^19.06^2^2^3091026^^
"KRN",19,12771,1,1,0)
Generate eIV Patient Insurance Update Report based on eIV Inquiries and
"KRN",19,12771,1,2,0)
Responses for a given date range and current Patient Insurance data.
"KRN",19,12771,20)

"KRN",19,12771,25)
EN^IBCNERPF
"KRN",19,12771,"U")
EIV PATIENT INSURANCE UPDATE R
"KRN",101,644,-1)
0^119
"KRN",101,644,0)
VALM PRINT LIST^Print List^^A^^^^^^^^LIST MANAGER
"KRN",101,644,1,0)
^^2^2^2920113^
"KRN",101,644,1,1,0)
This action allws the user to print the entire list of
"KRN",101,644,1,2,0)
entries currently being displayed.
"KRN",101,644,20)
D PRTL^VALM1
"KRN",101,644,99)
61828,53517
"KRN",101,647,-1)
0^41
"KRN",101,647,0)
VALM BLANK 1^^^A^^^^^^^^LIST MANAGER
"KRN",101,647,1,0)
^^1^1^2920203^
"KRN",101,647,1,1,0)
This protocol is used to format spaces in menu lists.
"KRN",101,647,10,0)
^101.01PA^0^0
"KRN",101,878,-1)
0^30
"KRN",101,878,0)
IBCNSM CHANGE PATIENT^Change Patient^^A^^^^^^^^
"KRN",101,878,20)
D CP^IBCNSM
"KRN",101,878,24)
I '$G(IBTRN)
"KRN",101,878,99)
56420,33307
"KRN",101,879,-1)
0^31
"KRN",101,879,0)
IBCNSM VIEW PAT POLICY^Policy Edit/View^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,879,15)
I $G(IBFASTXT) S VALMBCK="Q"
"KRN",101,879,20)
D VP^IBCNSM1
"KRN",101,879,99)
56420,33308
"KRN",101,880,-1)
0^34
"KRN",101,880,0)
IBCNSM UPDATE ANNUAL BENEFITS^Annual Benefits^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,880,15)
I $G(IBFASTXT) S VALMBCK="Q"
"KRN",101,880,20)
D AB^IBCNSM1
"KRN",101,880,99)
56420,33308
"KRN",101,882,-1)
0^35
"KRN",101,882,0)
IBCNSM PRINT WORKSHEET^Worksheet Print^^A^^^^^^^^
"KRN",101,882,20)
D WP^IBCNSM1
"KRN",101,882,99)
56420,33308
"KRN",101,883,-1)
0^36
"KRN",101,883,0)
IBCNSM PRINT PATIENT INS^Print Insurance Cov.^^A^^^^^^^^
"KRN",101,883,20)
D PC^IBCNSM1
"KRN",101,883,99)
56420,33308
"KRN",101,884,-1)
0^39
"KRN",101,884,0)
IBCNSM VERIFY INS^Verify Coverage^^A^^^^^^^^
"KRN",101,884,20)
D VC^IBCNSM2
"KRN",101,884,99)
56420,33308
"KRN",101,890,-1)
0^44
"KRN",101,890,0)
IBCNSP EDIT POLICY INFO^Change Plan Info^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,890,15)
S VALMBG=1
"KRN",101,890,20)
D PI^IBCNSP11
"KRN",101,890,99)
56420,33308
"KRN",101,891,-1)
0^45
"KRN",101,891,0)
IBCNSP EDIT EFFECTIVE DATES^Effective Dates^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,891,15)
S VALMBG=16
"KRN",101,891,20)
D ED^IBCNSP1
"KRN",101,891,99)
61020,26225
"KRN",101,892,-1)
0^46
"KRN",101,892,0)
IBCNSP VERIFY COVERAGE^Verify Coverage^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,892,15)
S VALMBG=$G(IB1ST("VERIFY"),1)
"KRN",101,892,20)
D VC^IBCNSP1
"KRN",101,892,99)
61020,26225
"KRN",101,893,-1)
0^47
"KRN",101,893,0)
IBCNSP SUBSCRIBER UPDATE^Subscriber Update^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,893,15)
S VALMBG=$S($G(IB1ST("ID EDIT")):$G(IB1ST("ID"),24),1:24)
"KRN",101,893,20)
D SU^IBCNSP1
"KRN",101,893,99)
61020,26225
"KRN",101,894,-1)
0^48
"KRN",101,894,0)
IBCNSP EMPLOYER INFO FOR CLAIMS^Employer Info^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,894,15)
S VALMBG=24
"KRN",101,894,20)
D EM^IBCNSP3
"KRN",101,894,99)
61020,26225
"KRN",101,895,-1)
0^56
"KRN",101,895,0)
IBCNSP ADD COMMENT^Add Comment^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,895,15)
S VALMBG=$G(IB1ST("COMMENT"),1)
"KRN",101,895,20)
D AC^IBCNSP3
"KRN",101,895,99)
61020,26225
"KRN",101,896,-1)
0^49
"KRN",101,896,0)
IBCNSP UR INFO^UR Info^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,896,15)
S VALMBG=16
"KRN",101,896,20)
D IT^IBCNSP1
"KRN",101,896,99)
61020,26225
"KRN",101,902,-1)
0^32
"KRN",101,902,0)
IBCNSM BENEFITS USED^Benefits Used^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,902,15)
I $G(IBFASTXT)=1 S VALMBCK="Q"
"KRN",101,902,20)
D BU^IBCNSM2
"KRN",101,902,99)
56420,33306
"KRN",101,903,-1)
0^33
"KRN",101,903,0)
IBCNSM ADD POLICY^Add Policy^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,903,20)
D AD^IBCNSM3
"KRN",101,903,99)
56420,33306
"KRN",101,904,-1)
0^37
"KRN",101,904,0)
IBCNSM DELETE POLICY^Delete Policy^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,904,20)
D DP^IBCNSM1
"KRN",101,904,99)
56420,33307
"KRN",101,905,-1)
0^7
"KRN",101,905,0)
IBCNSA AN BEN POL INF^Policy Info^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,905,4)
^^^PI
"KRN",101,905,10,0)
^101.01PA^0^0
"KRN",101,905,15)
S VALMBG=1
"KRN",101,905,20)
D ED^IBCNSA2("[IBCN AB POL INF]")
"KRN",101,905,99)
56420,33303
"KRN",101,907,-1)
0^8
"KRN",101,907,0)
IBCNSA AN BEN OPT^Outpatient^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,907,4)
^^^OP
"KRN",101,907,15)
S VALMBG=15
"KRN",101,907,20)
D ED^IBCNSA2("[IBCN AB OPT]")
"KRN",101,907,99)
56420,33303
"KRN",101,908,-1)
0^9
"KRN",101,908,0)
IBCNSA AN BEN INPT^Inpatient^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,908,4)
^^^IP
"KRN",101,908,15)
S VALMBG=1
"KRN",101,908,20)
D ED^IBCNSA2("[IBCN AB INPT]")
"KRN",101,908,99)
56420,33303
"KRN",101,909,-1)
0^10
"KRN",101,909,0)
IBCNSA AN BEN MEN H^Mental Health^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,909,4)
^^^MH
"KRN",101,909,15)
S VALMBG=15
"KRN",101,909,20)
D ED^IBCNSA2("[IBCN AB MEN H]")
"KRN",101,909,99)
56420,33303
"KRN",101,910,-1)
0^11
"KRN",101,910,0)
IBCNSA AN BEN HOME HEA^Home Health^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,910,4)
^^^HH
"KRN",101,910,15)
S VALMBG=29
"KRN",101,910,20)
D ED^IBCNSA2("[IBCN AB HOME HEA]")
"KRN",101,910,99)
56420,33303
"KRN",101,911,-1)
0^12
"KRN",101,911,0)
IBCNSA AN BEN HOSPC^Hospice^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,911,4)
^^^HO
"KRN",101,911,15)
S VALMBG=29
"KRN",101,911,20)
D ED^IBCNSA2("[IBCN AB HOSPC]")
"KRN",101,911,99)
56420,33303
"KRN",101,914,-1)
0^13
"KRN",101,914,0)
IBCNSA AN BEN ED ALL^Edit All^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,914,4)
^^^EA
"KRN",101,914,15)
S VALMBG=1
"KRN",101,914,20)
D ED^IBCNSA2("[IBCN AB EDIT ALL]")
"KRN",101,914,99)
56420,33303
"KRN",101,915,-1)
0^14
"KRN",101,915,0)
IBCNSA AN BEN CH YR^Change Year^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,915,4)
^^^CY
"KRN",101,915,15)
S VALMBG=1
"KRN",101,915,20)
D CY^IBCNSA2
"KRN",101,915,99)
56420,33303
"KRN",101,916,-1)
0^50
"KRN",101,916,0)
IBCNSP ANNUAL BENEFITS^Annual Benefits^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,916,15)
I $G(IBFASTXT) S VALMBCK="Q"
"KRN",101,916,20)
D AB^IBCNSP1
"KRN",101,916,99)
56420,33308
"KRN",101,917,-1)
0^51
"KRN",101,917,0)
IBCNSP BENEFITS USED^Benefits Used^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,917,15)
I $G(IBFASTXT) S VALMBCK="Q"
"KRN",101,917,20)
D BU^IBCNSP1
"KRN",101,917,99)
56420,33308
"KRN",101,918,-1)
0^57
"KRN",101,918,0)
IBCNSP EDIT ALL^Fast Edit All^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,918,15)
S VALMBG=1
"KRN",101,918,20)
D EA^IBCNSP1
"KRN",101,918,99)
56582,61510
"KRN",101,919,-1)
0^38
"KRN",101,919,0)
IBCNSM EDIT ALL^Fast Edit All^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,919,15)
I $G(IBFASTXT)=1 S VALMBCK="Q"
"KRN",101,919,20)
D EA^IBCNSM31
"KRN",101,919,99)
56420,33307
"KRN",101,924,-1)
0^43
"KRN",101,924,0)
IBCNSP POLICY MENU^Insurance Policy Menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,924,4)
26^4
"KRN",101,924,10,0)
^101.01PA^20^17
"KRN",101,924,10,1,0)
890^PI^11^
"KRN",101,924,10,1,"^")
IBCNSP EDIT POLICY INFO
"KRN",101,924,10,2,0)
891^ED^13^
"KRN",101,924,10,2,"^")
IBCNSP EDIT EFFECTIVE DATES
"KRN",101,924,10,3,0)
892^VC^32^
"KRN",101,924,10,3,"^")
IBCNSP VERIFY COVERAGE
"KRN",101,924,10,4,0)
893^SU^14^
"KRN",101,924,10,4,"^")
IBCNSP SUBSCRIBER UPDATE
"KRN",101,924,10,5,0)
894^EM^22^
"KRN",101,924,10,5,"^")
IBCNSP EMPLOYER INFO FOR CLAIMS
"KRN",101,924,10,7,0)
896^UI^12^
"KRN",101,924,10,7,"^")
IBCNSP UR INFO
"KRN",101,924,10,8,0)
916^AB^33^
"KRN",101,924,10,8,"^")
IBCNSP ANNUAL BENEFITS
"KRN",101,924,10,9,0)
917^BU^34^
"KRN",101,924,10,9,"^")
IBCNSP BENEFITS USED
"KRN",101,924,10,11,0)
927^EX^16^
"KRN",101,924,10,11,"^")
IBCNS EXIT
"KRN",101,924,10,12,0)
1066^IC^21^
"KRN",101,924,10,12,"^")
IBCNSP INSURANCE CONTACT INF
"KRN",101,924,10,14,0)
1294^IP^15^
"KRN",101,924,10,14,"^")
IBCNSJ INACTIVATE PLAN
"KRN",101,924,10,15,0)
1293^CP^31^
"KRN",101,924,10,15,"^")
IBCNSJ CHANGE PLAN
"KRN",101,924,10,16,0)
1341^CV^23^
"KRN",101,924,10,16,"^")
IBCNSJ EDIT COVERAGE LIMITS
"KRN",101,924,10,17,0)
895^AC^24^
"KRN",101,924,10,17,"^")
IBCNSP ADD COMMENT
"KRN",101,924,10,18,0)
918^EA^25^
"KRN",101,924,10,18,"^")
IBCNSP EDIT ALL
"KRN",101,924,10,19,0)
4564^EB^35^
"KRN",101,924,10,19,"^")
IBCNE VP VIEW EXP ELIG BEN SCREEN
"KRN",101,924,10,20,0)
647^^26^
"KRN",101,924,10,20,"^")
VALM BLANK 1
"KRN",101,924,15)
I $G(IBFASTXT)=1 S VALMBCK="Q"
"KRN",101,924,26)
D SHOW^VALM
"KRN",101,924,28)
Select Action: 
"KRN",101,924,99)
61943,41522
"KRN",101,925,-1)
0^6
"KRN",101,925,0)
IBCNSA ANNUAL BENEFITS^Annual Benefits Editor^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,925,4)
26^4^^AB
"KRN",101,925,10,0)
^101.01PA^13^12
"KRN",101,925,10,1,0)
905^PI^11^
"KRN",101,925,10,1,"^")
IBCNSA AN BEN POL INF
"KRN",101,925,10,3,0)
907^OP^13^
"KRN",101,925,10,3,"^")
IBCNSA AN BEN OPT
"KRN",101,925,10,4,0)
908^IP^12^
"KRN",101,925,10,4,"^")
IBCNSA AN BEN INPT
"KRN",101,925,10,5,0)
909^MH^14^
"KRN",101,925,10,5,"^")
IBCNSA AN BEN MEN H
"KRN",101,925,10,6,0)
910^HH^21^
"KRN",101,925,10,6,"^")
IBCNSA AN BEN HOME HEA
"KRN",101,925,10,7,0)
911^HS^22^
"KRN",101,925,10,7,"^")
IBCNSA AN BEN HOSPC
"KRN",101,925,10,8,0)
914^EA^31^
"KRN",101,925,10,8,"^")
IBCNSA AN BEN ED ALL
"KRN",101,925,10,9,0)
915^CY^32^
"KRN",101,925,10,9,"^")
IBCNSA AN BEN CH YR
"KRN",101,925,10,10,0)
927^EX^34^
"KRN",101,925,10,10,"^")
IBCNS EXIT
"KRN",101,925,10,11,0)
954^RH^23^
"KRN",101,925,10,11,"^")
IBCNSA AN BEN REHAB
"KRN",101,925,10,12,0)
955^IV^24^
"KRN",101,925,10,12,"^")
IBCNSA AN BEN IV MGMT
"KRN",101,925,10,13,0)
4563^EB^33^
"KRN",101,925,10,13,"^")
IBCNE AB VIEW EXP ELIG BEN SCREEN
"KRN",101,925,15)
I $G(IBFASTXT)=1 S VALMBCK="Q"
"KRN",101,925,20)

"KRN",101,925,26)
D SHOW^VALM
"KRN",101,925,28)
Select Action: 
"KRN",101,925,99)
61633,57843
"KRN",101,926,-1)
0^29
"KRN",101,926,0)
IBCNSM PATIENT INSURANCE^Patient Insurance^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,926,4)
26^4
"KRN",101,926,10,0)
^101.01PA^16^15
"KRN",101,926,10,1,0)
878^CP^31^
"KRN",101,926,10,1,"^")
IBCNSM CHANGE PATIENT
"KRN",101,926,10,2,0)
879^VP^12^
"KRN",101,926,10,2,"^")
IBCNSM VIEW PAT POLICY
"KRN",101,926,10,3,0)
902^BU^22^
"KRN",101,926,10,3,"^")
IBCNSM BENEFITS USED
"KRN",101,926,10,4,0)
903^AP^11^
"KRN",101,926,10,4,"^")
IBCNSM ADD POLICY
"KRN",101,926,10,5,0)
880^AB^14^
"KRN",101,926,10,5,"^")
IBCNSM UPDATE ANNUAL BENEFITS
"KRN",101,926,10,6,0)
882^WP^32^
"KRN",101,926,10,6,"^")
IBCNSM PRINT WORKSHEET
"KRN",101,926,10,7,0)
883^PC^33^
"KRN",101,926,10,7,"^")
IBCNSM PRINT PATIENT INS
"KRN",101,926,10,8,0)
904^DP^13^
"KRN",101,926,10,8,"^")
IBCNSM DELETE POLICY
"KRN",101,926,10,9,0)
919^EA^21^
"KRN",101,926,10,9,"^")
IBCNSM EDIT ALL
"KRN",101,926,10,11,0)
884^VC^23^
"KRN",101,926,10,11,"^")
IBCNSM VERIFY INS
"KRN",101,926,10,12,0)
1081^RI^24^
"KRN",101,926,10,12,"^")
IBCNSM PERSONAL RIDERS
"KRN",101,926,10,13,0)
1103^EX^25^
"KRN",101,926,10,13,"^")
IBCNS QUIT
"KRN",101,926,10,14,0)
647^^35^
"KRN",101,926,10,14,"^")
VALM BLANK 1
"KRN",101,926,10,15,0)
4561^EB^34^
"KRN",101,926,10,15,"^")
IBCNE SV VIEW EXP ELIG BEN SCREEN
"KRN",101,926,10,16,0)
4580^RX^15^
"KRN",101,926,10,16,"^")
IBCNSM RX COB DETERMINATION
"KRN",101,926,26)
D SHOW^VALM
"KRN",101,926,99)
61970,60161
"KRN",101,927,-1)
0^15
"KRN",101,927,0)
IBCNS EXIT^Exit^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,927,1,0)
^^2^2^2951204^^^^
"KRN",101,927,1,1,0)
Allows the user to exit the system without quitting through the hierarchy of
"KRN",101,927,1,2,0)
screens, or the user can exit to the previous screen.
"KRN",101,927,2,0)
^101.02A^1^1
"KRN",101,927,2,1,0)
EX
"KRN",101,927,2,"B","EX",1)

"KRN",101,927,4)
^^^EX
"KRN",101,927,10,0)
^101.01PA^0^0
"KRN",101,927,20)
D FASTEXIT^IBCNSM
"KRN",101,927,28)
EX
"KRN",101,927,99)
56420,33303
"KRN",101,930,-1)
0^60
"KRN",101,930,0)
IBCNSV ANNUAL BENEFITS^View An Ben^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,930,4)
26^4^^AB
"KRN",101,930,10,0)
^101.01PA^3^3
"KRN",101,930,10,1,0)
915^CY^11^
"KRN",101,930,10,1,"^")
IBCNSA AN BEN CH YR
"KRN",101,930,10,2,0)
927^EX^31^
"KRN",101,930,10,2,"^")
IBCNS EXIT
"KRN",101,930,10,3,0)
4563^EB^21^
"KRN",101,930,10,3,"^")
IBCNE AB VIEW EXP ELIG BEN SCREEN
"KRN",101,930,15)
I $G(IBFASTXT)=1 S VALMBCK="Q"
"KRN",101,930,26)
D SHOW^VALM
"KRN",101,930,28)
Select Action: 
"KRN",101,930,99)
61633,58180
"KRN",101,931,-1)
0^61
"KRN",101,931,0)
IBCNSV PATIENT INSURANCE^Patient Insurance^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,931,4)
26^4
"KRN",101,931,10,0)
^101.01PA^7^6
"KRN",101,931,10,1,0)
878^CP^22^
"KRN",101,931,10,1,"^")
IBCNSM CHANGE PATIENT
"KRN",101,931,10,3,0)
933^AB^12^
"KRN",101,931,10,3,"^")
IBCNSV VIEW AN BEN
"KRN",101,931,10,4,0)
932^VP^11^
"KRN",101,931,10,4,"^")
IBCNSV VIEW EXP POL
"KRN",101,931,10,5,0)
934^BU^21^
"KRN",101,931,10,5,"^")
IBCNSV VIEW BEN USED
"KRN",101,931,10,6,0)
1103^EX^32^
"KRN",101,931,10,6,"^")
IBCNS QUIT
"KRN",101,931,10,7,0)
4561^EB^31^
"KRN",101,931,10,7,"^")
IBCNE SV VIEW EXP ELIG BEN SCREEN
"KRN",101,931,15)
I $G(IBFASTXT)=1 S VALMBCK="Q"
"KRN",101,931,24)
I 1 X:$D(^ORD(101,+$P(^ORD(101,DA(1),10,DA,0),"^"),24)) ^(24)
"KRN",101,931,26)
D SHOW^VALM
"KRN",101,931,28)
Select Action: 
"KRN",101,931,99)
61629,38774
"KRN",101,932,-1)
0^63
"KRN",101,932,0)
IBCNSV VIEW EXP POL^View Policy Info^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,932,4)
^^^VP
"KRN",101,932,10,0)
^101.01PA^0^0
"KRN",101,932,15)
I $G(IBFASTXT)=1 S VALMBCK="Q"
"KRN",101,932,20)
D NXT^IBCNSV("IBCNS VIEW EXP POL")
"KRN",101,932,99)
56420,33310
"KRN",101,933,-1)
0^62
"KRN",101,933,0)
IBCNSV VIEW AN BEN^Annual Benefits ^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,933,4)
^^^VB
"KRN",101,933,20)
D NXT^IBCNSV("IBCNS VIEW AN BEN")
"KRN",101,933,28)

"KRN",101,933,99)
56420,33310
"KRN",101,934,-1)
0^64
"KRN",101,934,0)
IBCNSV VIEW BEN USED^Benefits Used^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,934,4)
^^^VU
"KRN",101,934,15)
I $G(IBFASTXT)=1 S VALMBCK="Q"
"KRN",101,934,20)
D NXT^IBCNSV("IBCNS VIEW BEN USED")
"KRN",101,934,28)

"KRN",101,934,99)
56420,33310
"KRN",101,936,-1)
0^65
"KRN",101,936,0)
IBCNSV POLICY MENU^Insurance Policy Menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,936,4)
26^4
"KRN",101,936,10,0)
^101.01PA^3^3
"KRN",101,936,10,1,0)
927^EX^31^
"KRN",101,936,10,1,"^")
IBCNS EXIT
"KRN",101,936,10,2,0)
4564^EB^11^
"KRN",101,936,10,2,"^")
IBCNE VP VIEW EXP ELIG BEN SCREEN
"KRN",101,936,15)
I $G(IBFASTXT)=1 S VALMBCK="Q"
"KRN",101,936,26)
D SHOW^VALM
"KRN",101,936,28)
Select Action: 
"KRN",101,936,99)
61636,60190
"KRN",101,954,-1)
0^16
"KRN",101,954,0)
IBCNSA AN BEN REHAB^Rehab^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,954,4)
^^^RH
"KRN",101,954,15)
S VALMBG=29
"KRN",101,954,20)
D ED^IBCNSA2("[IBCN AB REHAB]")
"KRN",101,954,99)
56420,33303
"KRN",101,955,-1)
0^17
"KRN",101,955,0)
IBCNSA AN BEN IV MGMT^IV Mgmt.^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,955,4)
^^^IV
"KRN",101,955,15)
S VALMBG=29
"KRN",101,955,20)
D ED^IBCNSA2("[IBCN AB IV MGMT]")
"KRN",101,955,99)
56420,33303
"KRN",101,1066,-1)
0^52
"KRN",101,1066,0)
IBCNSP INSURANCE CONTACT INF^Insur. Contact Inf.^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1066,4)
^^^IC
"KRN",101,1066,10,0)
^101.01PA^0^0
"KRN",101,1066,15)
S VALMBG=$G(IB1ST("CONTACT"),1)
"KRN",101,1066,20)
D IC^IBCNSP1
"KRN",101,1066,26)

"KRN",101,1066,28)
IC
"KRN",101,1066,99)
61020,26225
"KRN",101,1081,-1)
0^40
"KRN",101,1081,0)
IBCNSM PERSONAL RIDERS^Personal Riders^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1081,20)
D RD^IBCNSP3
"KRN",101,1081,99)
56420,33308
"KRN",101,1103,-1)
0^20
"KRN",101,1103,0)
IBCNS QUIT^Exit^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1103,4)
^^^EX
"KRN",101,1103,10,0)
^101.01PA^0^0
"KRN",101,1103,15)
S VALMBCK="Q"
"KRN",101,1103,20)
S VALMBCK="Q"
"KRN",101,1103,99)
59205,53471
"KRN",101,1293,-1)
0^54
"KRN",101,1293,0)
IBCNSJ CHANGE PLAN^Change Policy Plan^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1293,20)
D CSTP^IBCNSJ2
"KRN",101,1293,99)
56582,61508
"KRN",101,1294,-1)
0^53
"KRN",101,1294,0)
IBCNSJ INACTIVATE PLAN^Inactivate Plan^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1294,20)
D IA^IBCNSJ1
"KRN",101,1294,99)
56279,45669
"KRN",101,1338,-1)
0^21
"KRN",101,1338,0)
IBCNSJ EDIT PLAN INFO^Change Plan Info^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1338,15)
S VALMBG=1
"KRN",101,1338,20)
D PI1^IBCNSP11
"KRN",101,1338,99)
56582,61509
"KRN",101,1339,-1)
0^19
"KRN",101,1339,0)
IBCNSC PLAN DETAIL^^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,1339,4)
26^4
"KRN",101,1339,10,0)
^101.01PA^8^8
"KRN",101,1339,10,1,0)
1103^EX^23^
"KRN",101,1339,10,1,"^")
IBCNS QUIT
"KRN",101,1339,10,2,0)
1338^PI^11^
"KRN",101,1339,10,2,"^")
IBCNSJ EDIT PLAN INFO
"KRN",101,1339,10,3,0)
1340^CV^13^
"KRN",101,1339,10,3,"^")
IBCNSJ INS CO EDIT COVERAGE LIMITS
"KRN",101,1339,10,4,0)
1345^IP^22^
"KRN",101,1339,10,4,"^")
IBCNSJ INS CO INACTIVATE PLAN
"KRN",101,1339,10,5,0)
1348^PC^21^
"KRN",101,1339,10,5,"^")
IBCNSJ PLAN COMMENT
"KRN",101,1339,10,6,0)
1349^UI^12^
"KRN",101,1339,10,6,"^")
IBCNSJ PLAN UR INFO
"KRN",101,1339,10,7,0)
1346^CP^32^
"KRN",101,1339,10,7,"^")
IBCNSJ SWITCH PLANS
"KRN",101,1339,10,8,0)
1344^AB^31^
"KRN",101,1339,10,8,"^")
IBCNSJ UPDATE ANNUAL BENEFITS
"KRN",101,1339,26)
D SHOW^VALM
"KRN",101,1339,28)
Select Action: 
"KRN",101,1339,99)
61947,51377
"KRN",101,1340,-1)
0^22
"KRN",101,1340,0)
IBCNSJ INS CO EDIT COVERAGE LIMITS^Add/Edit Coverage^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1340,15)
S VALMBG=1
"KRN",101,1340,20)
D CV1^IBCNSJ5
"KRN",101,1340,99)
56582,61509
"KRN",101,1341,-1)
0^55
"KRN",101,1341,0)
IBCNSJ EDIT COVERAGE LIMITS^Add/Edit Coverage^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1341,15)
S VALMBG=$G(IB1ST("PLIM"),1)
"KRN",101,1341,20)
D CV^IBCNSJ5
"KRN",101,1341,99)
61020,26225
"KRN",101,1344,-1)
0^27
"KRN",101,1344,0)
IBCNSJ UPDATE ANNUAL BENEFITS^Annual Benefits^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1344,15)
I $G(IBFASTXT) S VALMBCK="Q"
"KRN",101,1344,20)
D AB^IBCNSJ5
"KRN",101,1344,99)
56582,61510
"KRN",101,1345,-1)
0^23
"KRN",101,1345,0)
IBCNSJ INS CO INACTIVATE PLAN^(In)Activate Plan^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1345,20)
D IA^IBCNSJ5
"KRN",101,1345,99)
56582,61509
"KRN",101,1346,-1)
0^26
"KRN",101,1346,0)
IBCNSJ SWITCH PLANS^Change Plan^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1346,20)
D CP^IBCNSJ5
"KRN",101,1346,99)
56582,61509
"KRN",101,1348,-1)
0^24
"KRN",101,1348,0)
IBCNSJ PLAN COMMENT^Edit Comments^^A^^^^^^^^
"KRN",101,1348,15)

"KRN",101,1348,20)
D PC^IBCNSJ5
"KRN",101,1348,99)
59205,53471
"KRN",101,1349,-1)
0^25
"KRN",101,1349,0)
IBCNSJ PLAN UR INFO^UR Info^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1349,15)
S VALMBG=1
"KRN",101,1349,20)
D IT1^IBCNSP1
"KRN",101,1349,99)
56582,61509
"KRN",101,1356,-1)
0^66
"KRN",101,1356,0)
IBJT CLAIM SCREEN MENU^Claim Information Menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,1356,4)
26^4
"KRN",101,1356,10,0)
^101.01PA^17^17
"KRN",101,1356,10,1,0)
1388^BC^11^
"KRN",101,1356,10,1,"^")
IBJT BILL CHARGES SCREEN
"KRN",101,1356,10,2,0)
1389^DX^12^
"KRN",101,1356,10,2,"^")
IBJT BILL DX SCREEN
"KRN",101,1356,10,3,0)
1390^PR^13^
"KRN",101,1356,10,3,"^")
IBJT BILL PROCEDURES SCREEN
"KRN",101,1356,10,4,0)
1398^CB^14^
"KRN",101,1356,10,4,"^")
IBJT CHANGE BILL
"KRN",101,1356,10,5,0)
1391^AR^21^
"KRN",101,1356,10,5,"^")
IBJT AR ACCOUNT PROFILE SCREEN
"KRN",101,1356,10,6,0)
1403^CM^22^
"KRN",101,1356,10,6,"^")
IBJT AR COMMENT HISTORY SCREEN
"KRN",101,1356,10,7,0)
1400^IR^23^
"KRN",101,1356,10,7,"^")
IBJT CT/IR COMMUNICATIONS LIST SCREEN
"KRN",101,1356,10,8,0)
1402^HS^24^
"KRN",101,1356,10,8,"^")
IBJT HS HEALTH SUMMARY
"KRN",101,1356,10,9,0)
1394^AL^25^
"KRN",101,1356,10,9,"^")
IBJT ACTIVE LIST SCREEN SKIP
"KRN",101,1356,10,10,0)
1385^VI^31^
"KRN",101,1356,10,10,"^")
IBJT NS VIEW INS CO SCREEN
"KRN",101,1356,10,11,0)
1386^VP^32^
"KRN",101,1356,10,11,"^")
IBJT NS VIEW EXP POL SCREEN
"KRN",101,1356,10,12,0)
1387^AB^33^
"KRN",101,1356,10,12,"^")
IBJT NS VIEW AN BEN SCREEN
"KRN",101,1356,10,13,0)
1399^EL^34^
"KRN",101,1356,10,13,"^")
IBJT PT ELIGIBILITY SCREEN
"KRN",101,1356,10,14,0)
1380^EX^16^
"KRN",101,1356,10,14,"^")
IBJ EXIT
"KRN",101,1356,10,15,0)
3428^ED^15^
"KRN",101,1356,10,15,"^")
IBJT EDI STATUS SCREEN
"KRN",101,1356,10,16,0)
4560^EB^35^
"KRN",101,1356,10,16,"^")
IBCNE JT VIEW EXP ELIG BEN SCREEN
"KRN",101,1356,10,17,0)
647^^26^
"KRN",101,1356,10,17,"^")
VALM BLANK 1
"KRN",101,1356,15)
I $G(IBFASTXT)>3 S VALMBCK="Q"
"KRN",101,1356,20)
K IBFASTXT
"KRN",101,1356,26)
D BM^IBJU1(21,16),SHOW^VALM
"KRN",101,1356,28)
Select Action: 
"KRN",101,1356,99)
61628,81648
"KRN",101,1359,-1)
0^82
"KRN",101,1359,0)
IBJT NS VIEW AN BEN MENU^Annual Benefits Menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,1359,4)
26^4
"KRN",101,1359,10,0)
^101.01PA^15^15
"KRN",101,1359,10,1,0)
1388^BC^11^
"KRN",101,1359,10,1,"^")
IBJT BILL CHARGES SCREEN
"KRN",101,1359,10,2,0)
1389^DX^12^
"KRN",101,1359,10,2,"^")
IBJT BILL DX SCREEN
"KRN",101,1359,10,3,0)
1390^PR^13^
"KRN",101,1359,10,3,"^")
IBJT BILL PROCEDURES SCREEN
"KRN",101,1359,10,4,0)
1397^CI^14^
"KRN",101,1359,10,4,"^")
IBJT CLAIM SCREEN SKIP
"KRN",101,1359,10,5,0)
1391^AR^21^
"KRN",101,1359,10,5,"^")
IBJT AR ACCOUNT PROFILE SCREEN
"KRN",101,1359,10,6,0)
1403^CM^22^
"KRN",101,1359,10,6,"^")
IBJT AR COMMENT HISTORY SCREEN
"KRN",101,1359,10,7,0)
1400^IR^23^
"KRN",101,1359,10,7,"^")
IBJT CT/IR COMMUNICATIONS LIST SCREEN
"KRN",101,1359,10,8,0)
1402^HS^24^
"KRN",101,1359,10,8,"^")
IBJT HS HEALTH SUMMARY
"KRN",101,1359,10,9,0)
1394^AL^25^
"KRN",101,1359,10,9,"^")
IBJT ACTIVE LIST SCREEN SKIP
"KRN",101,1359,10,10,0)
1385^VI^31^
"KRN",101,1359,10,10,"^")
IBJT NS VIEW INS CO SCREEN
"KRN",101,1359,10,11,0)
1386^VP^32^
"KRN",101,1359,10,11,"^")
IBJT NS VIEW EXP POL SCREEN
"KRN",101,1359,10,12,0)
1407^AB^33^
"KRN",101,1359,10,12,"^")
IBJT NS VIEW AN BEN REDISPLAY
"KRN",101,1359,10,13,0)
1399^EL^34^
"KRN",101,1359,10,13,"^")
IBJT PT ELIGIBILITY SCREEN
"KRN",101,1359,10,14,0)
1380^EX^35^
"KRN",101,1359,10,14,"^")
IBJ EXIT
"KRN",101,1359,10,15,0)
4560^EB^15^
"KRN",101,1359,10,15,"^")
IBCNE JT VIEW EXP ELIG BEN SCREEN
"KRN",101,1359,15)
I $G(IBPRVSCR)'="IBCNSA",$G(IBFASTXT)>2 S VALMBCK="Q"
"KRN",101,1359,20)
K IBFASTXT
"KRN",101,1359,26)
D BM^IBJU1(21,17),SHOW^VALM
"KRN",101,1359,28)
Select Action: 
"KRN",101,1359,99)
61635,62788
"KRN",101,1360,-1)
0^85
"KRN",101,1360,0)
IBJT NS VIEW EXP POL MENU^Policy Menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,1360,4)
26^4
"KRN",101,1360,10,0)
^101.01PA^14^14
"KRN",101,1360,10,1,0)
1388^BC^11^
"KRN",101,1360,10,1,"^")
IBJT BILL CHARGES SCREEN
"KRN",101,1360,10,2,0)
1389^DX^12^
"KRN",101,1360,10,2,"^")
IBJT BILL DX SCREEN
"KRN",101,1360,10,3,0)
1390^PR^13^
"KRN",101,1360,10,3,"^")
IBJT BILL PROCEDURES SCREEN
"KRN",101,1360,10,4,0)
1397^CI^14^
"KRN",101,1360,10,4,"^")
IBJT CLAIM SCREEN SKIP
"KRN",101,1360,10,5,0)
1391^AR^21^
"KRN",101,1360,10,5,"^")
IBJT AR ACCOUNT PROFILE SCREEN
"KRN",101,1360,10,6,0)
1403^CM^22^
"KRN",101,1360,10,6,"^")
IBJT AR COMMENT HISTORY SCREEN
"KRN",101,1360,10,7,0)
1400^IR^23^
"KRN",101,1360,10,7,"^")
IBJT CT/IR COMMUNICATIONS LIST SCREEN
"KRN",101,1360,10,8,0)
1402^HS^24^
"KRN",101,1360,10,8,"^")
IBJT HS HEALTH SUMMARY
"KRN",101,1360,10,9,0)
1394^AL^15^
"KRN",101,1360,10,9,"^")
IBJT ACTIVE LIST SCREEN SKIP
"KRN",101,1360,10,10,0)
1385^VI^31^
"KRN",101,1360,10,10,"^")
IBJT NS VIEW INS CO SCREEN
"KRN",101,1360,10,11,0)
1406^VP^32^
"KRN",101,1360,10,11,"^")
IBJT NS VIEW EXP POL REDISPLAY
"KRN",101,1360,10,12,0)
1387^AB^33^
"KRN",101,1360,10,12,"^")
IBJT NS VIEW AN BEN SCREEN
"KRN",101,1360,10,13,0)
1399^EL^34^
"KRN",101,1360,10,13,"^")
IBJT PT ELIGIBILITY SCREEN
"KRN",101,1360,10,14,0)
1380^EX^25^
"KRN",101,1360,10,14,"^")
IBJ EXIT
"KRN",101,1360,15)
I $G(IBPRVSCR)'="IBCNSVP",$G(IBFASTXT)>2 S VALMBCK="Q"
"KRN",101,1360,20)
K IBFASTXT
"KRN",101,1360,26)
D BM^IBJU1(21,17),SHOW^VALM
"KRN",101,1360,28)
Select Action: 
"KRN",101,1360,99)
61943,42661
"KRN",101,1380,-1)
0^1
"KRN",101,1380,0)
IBJ EXIT^Exit^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1380,20)
D FASTEXIT^IBJU1
"KRN",101,1380,99)
61593,59347
"KRN",101,1385,-1)
0^76
"KRN",101,1385,0)
IBJT NS VIEW INS CO SCREEN^Insurance Company^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1385,15)

"KRN",101,1385,20)
I '$$PRVSCR^IBJTU1("IBCNSC") D VI^IBJTNA(0)
"KRN",101,1385,99)
56634,34671
"KRN",101,1386,-1)
0^77
"KRN",101,1386,0)
IBJT NS VIEW EXP POL SCREEN^Policy^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1386,15)

"KRN",101,1386,20)
I '$$PRVSCR^IBJTU1("IBCNSVP") D VP^IBJTNB(0)
"KRN",101,1386,99)
56634,34651
"KRN",101,1387,-1)
0^78
"KRN",101,1387,0)
IBJT NS VIEW AN BEN SCREEN^Annual Benefits^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1387,15)

"KRN",101,1387,20)
I '$$PRVSCR^IBJTU1("IBCNSA") D AB^IBJTNB(0)
"KRN",101,1387,99)
56634,34630
"KRN",101,1388,-1)
0^67
"KRN",101,1388,0)
IBJT BILL CHARGES SCREEN^Bill Charges^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1388,15)

"KRN",101,1388,20)
I '$$PRVSCR^IBJTU1("IBJTBA") D EN^IBJTBA
"KRN",101,1388,99)
56634,34599
"KRN",101,1389,-1)
0^68
"KRN",101,1389,0)
IBJT BILL DX SCREEN^Bill Diagnosis^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1389,15)

"KRN",101,1389,20)
I '$$PRVSCR^IBJTU1("IBJTBB") D EN^IBJTBB
"KRN",101,1389,99)
56634,34603
"KRN",101,1390,-1)
0^69
"KRN",101,1390,0)
IBJT BILL PROCEDURES SCREEN^Bill Procedures^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1390,15)

"KRN",101,1390,20)
I '$$PRVSCR^IBJTU1("IBJTBC") D EN^IBJTBC
"KRN",101,1390,99)
56634,34609
"KRN",101,1391,-1)
0^71
"KRN",101,1391,0)
IBJT AR ACCOUNT PROFILE SCREEN^Account Profile^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1391,20)
I '$$PRVSCR^IBJTU1("IBJTTA") D EN^IBJTTA
"KRN",101,1391,99)
56634,34588
"KRN",101,1394,-1)
0^75
"KRN",101,1394,0)
IBJT ACTIVE LIST SCREEN SKIP^Go to Active List^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1394,20)
S:'$G(IBNOTPJI) IBFASTXT=4 Q:'$G(IBNOTPJI)  D FULL^VALM1 W !!,*7,"This action is not available for the current path into TPJI" S VALMBCK="R" N DIR S DIR(0)="E" D ^DIR W !
"KRN",101,1394,99)
58954,27839
"KRN",101,1397,-1)
0^83
"KRN",101,1397,0)
IBJT CLAIM SCREEN SKIP^Go to Claim Screen^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1397,20)
S IBFASTXT=3
"KRN",101,1397,99)
56634,34615
"KRN",101,1398,-1)
0^70
"KRN",101,1398,0)
IBJT CHANGE BILL^Change Bill^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1398,20)
D CB^IBJTA1
"KRN",101,1398,99)
56634,34609
"KRN",101,1399,-1)
0^79
"KRN",101,1399,0)
IBJT PT ELIGIBILITY SCREEN^Patient Eligibility^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1399,20)
I '$$PRVSCR^IBJTU1("IBJTEA") D EN^IBJTEA
"KRN",101,1399,99)
56634,34684
"KRN",101,1400,-1)
0^73
"KRN",101,1400,0)
IBJT CT/IR COMMUNICATIONS LIST SCREEN^Insurance Reviews^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1400,20)
I '$$PRVSCR^IBJTU1("IBJTRA") D EN^IBJTRA
"KRN",101,1400,99)
56634,34620
"KRN",101,1402,-1)
0^74
"KRN",101,1402,0)
IBJT HS HEALTH SUMMARY^Health Summary^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1402,20)
D HS^IBJTA1
"KRN",101,1402,99)
56634,34621
"KRN",101,1403,-1)
0^72
"KRN",101,1403,0)
IBJT AR COMMENT HISTORY SCREEN^Comment History^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1403,20)
I '$$PRVSCR^IBJTU1("IBJTTC") D EN^IBJTTC
"KRN",101,1403,99)
56634,34593
"KRN",101,1406,-1)
0^86
"KRN",101,1406,0)
IBJT NS VIEW EXP POL REDISPLAY^Policy^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1406,20)
D VP^IBJTNB(1)
"KRN",101,1406,99)
56634,34651
"KRN",101,1407,-1)
0^84
"KRN",101,1407,0)
IBJT NS VIEW AN BEN REDISPLAY^Annual Benefits^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1407,20)
D AB^IBJTNB(1)
"KRN",101,1407,99)
56634,34630
"KRN",101,2267,-1)
0^92
"KRN",101,2267,0)
IBCNB LIST SCREEN MENU^List Menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,2267,4)
20^3
"KRN",101,2267,10,0)
^101.01PA^11^11
"KRN",101,2267,10,1,0)
2271^PE^11^
"KRN",101,2267,10,1,"^")
IBCNB LIST PROCESS SCREEN
"KRN",101,2267,10,2,0)
2270^RE^12^
"KRN",101,2267,10,2,"^")
IBCNB LIST REJECT
"KRN",101,2267,10,3,0)
2269^EE^13^
"KRN",101,2267,10,3,"^")
IBCNB LIST ENTRY SCREEN
"KRN",101,2267,10,4,0)
2285^AE^21^
"KRN",101,2267,10,4,"^")
IBCNB LIST ADD
"KRN",101,2267,10,5,0)
2268^ST^22^
"KRN",101,2267,10,5,"^")
IBCNB LIST SORT
"KRN",101,2267,10,6,0)
2281^EX^42^
"KRN",101,2267,10,6,"^")
IBCNB FAST EXIT
"KRN",101,2267,10,7,0)
3713^CC^23^
"KRN",101,2267,10,7,"^")
IBCNB LIST CHECK NAMES
"KRN",101,2267,10,8,0)
4568^PB^31^
"KRN",101,2267,10,8,"^")
IBCNB LIST POSITIVE VIEW
"KRN",101,2267,10,9,0)
4569^NB^32^
"KRN",101,2267,10,9,"^")
IBCNB LIST NEGATIVE VIEW
"KRN",101,2267,10,10,0)
4570^MB^33^
"KRN",101,2267,10,10,"^")
IBCNB LIST MEDICARE VIEW
"KRN",101,2267,10,11,0)
4571^FA^41^
"KRN",101,2267,10,11,"^")
IBCNB LIST APPOINTMENTS VIEW
"KRN",101,2267,15)
I $D(IBFASTXT) S VALMBCK="Q"
"KRN",101,2267,20)
K IBFASTXT
"KRN",101,2267,24)
I 1 X:$D(^ORD(101,+$P(^ORD(101,DA(1),10,DA,0),"^"),24)) ^(24)
"KRN",101,2267,26)
D SHOW^VALM
"KRN",101,2267,28)
Select Action: 
"KRN",101,2267,99)
61922,42867
"KRN",101,2268,-1)
0^103
"KRN",101,2268,0)
IBCNB LIST SORT^Sort List^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,2268,20)
D SELSORT^IBCNBLA
"KRN",101,2268,99)
57687,60964
"KRN",101,2269,-1)
0^98
"KRN",101,2269,0)
IBCNB LIST ENTRY SCREEN^Expand Entry^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,2269,20)
D LNXTSCRN^IBCNBLA("IBCNB INSURANCE BUFFER ENTRY","IBCNBLLX",AVIEW)
"KRN",101,2269,99)
57687,60964
"KRN",101,2270,-1)
0^101
"KRN",101,2270,0)
IBCNB LIST REJECT^Reject Entry^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,2270,20)
D LREJECT^IBCNBLA("IBCNBLLX")
"KRN",101,2270,24)
I $D(^XUSEC("IB INSURANCE SUPERVISOR",DUZ))
"KRN",101,2270,99)
57687,60964
"KRN",101,2271,-1)
0^99
"KRN",101,2271,0)
IBCNB LIST PROCESS SCREEN^Process Entry^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,2271,10,0)
^101.01PA
"KRN",101,2271,15)

"KRN",101,2271,20)
D LNXTSCRN^IBCNBLA("IBCNB INSURANCE BUFFER PROCESS","IBCNBLLX",AVIEW)
"KRN",101,2271,99)
57687,60964
"KRN",101,2272,-1)
0^100
"KRN",101,2272,0)
IBCNB PROCESS SCREEN MENU^Process Menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,2272,4)
26^4
"KRN",101,2272,10,0)
^101.01PA^6^6
"KRN",101,2272,10,1,0)
2283^AE^11^
"KRN",101,2272,10,1,"^")
IBCNB PROCESS ACCEPT
"KRN",101,2272,10,2,0)
2282^RE^12^
"KRN",101,2272,10,2,"^")
IBCNB PROCESS REJECT
"KRN",101,2272,10,3,0)
2279^CE^21^
"KRN",101,2272,10,3,"^")
IBCNB PROCESS COMPARE/EDIT
"KRN",101,2272,10,4,0)
2280^EE^22^
"KRN",101,2272,10,4,"^")
IBCNB PROCESS ENTRY SCREEN
"KRN",101,2272,10,5,0)
2273^VP^31^
"KRN",101,2272,10,5,"^")
IBCNB PROCESS TOGGLE
"KRN",101,2272,10,6,0)
2281^EX^32^
"KRN",101,2272,10,6,"^")
IBCNB FAST EXIT
"KRN",101,2272,15)
I $D(IBFASTXT) S VALMBCK="Q"
"KRN",101,2272,20)
K IBFASTXT
"KRN",101,2272,24)
I 1 X:$D(^ORD(101,+$P(^ORD(101,DA(1),10,DA,0),"^"),24)) ^(24)
"KRN",101,2272,26)
D SHOW^VALM
"KRN",101,2272,28)
Select Action: 
"KRN",101,2272,99)
61649,45900
"KRN",101,2273,-1)
0^110
"KRN",101,2273,0)
IBCNB PROCESS TOGGLE^Insurance Co/Patient^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,2273,20)
D TGLSCRN^IBCNBLA(IBBUFDA)
"KRN",101,2273,99)
57687,60964
"KRN",101,2274,-1)
0^93
"KRN",101,2274,0)
IBCNB ENTRY SCREEN MENU^Entry Menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,2274,4)
26^4
"KRN",101,2274,10,0)
^101.01PA^8^8
"KRN",101,2274,10,1,0)
2275^EI^11^
"KRN",101,2274,10,1,"^")
IBCNB ENTRY EDIT INSURANCE
"KRN",101,2274,10,2,0)
2278^EA^12^
"KRN",101,2274,10,2,"^")
IBCNB ENTRY EDIT ALL
"KRN",101,2274,10,3,0)
2276^PE^13^
"KRN",101,2274,10,3,"^")
IBCNB ENTRY EDIT GROUP
"KRN",101,2274,10,4,0)
2284^VE^21^
"KRN",101,2274,10,4,"^")
IBCNB ENTRY VERIFY
"KRN",101,2274,10,5,0)
2277^PI^22^
"KRN",101,2274,10,5,"^")
IBCNB ENTRY EDIT POLICY
"KRN",101,2274,10,6,0)
2281^EX^32^
"KRN",101,2274,10,6,"^")
IBCNB FAST EXIT
"KRN",101,2274,10,7,0)
3727^RR^23^
"KRN",101,2274,10,7,"^")
IBCNB ENTRY RESPONSE REPORT
"KRN",101,2274,10,8,0)
4572^EB^31^
"KRN",101,2274,10,8,"^")
IBCNB EXPAND BENEFITS
"KRN",101,2274,15)
I $D(IBFASTXT) S VALMBCK="Q"
"KRN",101,2274,20)
K IBFASTXT
"KRN",101,2274,24)
I 1 X:$D(^ORD(101,+$P(^ORD(101,DA(1),10,DA,0),"^"),24)) ^(24)
"KRN",101,2274,26)
D SHOW^VALM
"KRN",101,2274,28)
Select Action: 
"KRN",101,2274,99)
61648,61958
"KRN",101,2275,-1)
0^96
"KRN",101,2275,0)
IBCNB ENTRY EDIT INSURANCE^Ins. Co. Edit^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,2275,20)
D INSEDIT^IBCNBLA1(IBBUFDA)
"KRN",101,2275,99)
61648,60668
"KRN",101,2276,-1)
0^112
"KRN",101,2276,0)
IBCNB ENTRY EDIT GROUP^Group/Plan Edit^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,2276,20)
D GRPEDIT^IBCNBLA1(IBBUFDA)
"KRN",101,2276,99)
57687,60964
"KRN",101,2277,-1)
0^95
"KRN",101,2277,0)
IBCNB ENTRY EDIT POLICY^Pt. Policy Edit^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,2277,20)
D POLEDIT^IBCNBLA1(IBBUFDA)
"KRN",101,2277,99)
61648,60614
"KRN",101,2278,-1)
0^111
"KRN",101,2278,0)
IBCNB ENTRY EDIT ALL^All Edit^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,2278,20)
D ALLEDIT^IBCNBLA1(IBBUFDA)
"KRN",101,2278,99)
57687,60964
"KRN",101,2279,-1)
0^108
"KRN",101,2279,0)
IBCNB PROCESS COMPARE/EDIT^Compare Entry^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,2279,20)
D CMPEDIT^IBCNBLA1(IBBUFDA)
"KRN",101,2279,99)
57687,60964
"KRN",101,2280,-1)
0^109
"KRN",101,2280,0)
IBCNB PROCESS ENTRY SCREEN^Expand Entry^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,2280,20)
D PNXTSCRN^IBCNBLA("IBCNB INSURANCE BUFFER ENTRY",$G(IBBUFDA))
"KRN",101,2280,99)
57687,60964
"KRN",101,2281,-1)
0^104
"KRN",101,2281,0)
IBCNB FAST EXIT^Exit^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,2281,20)
D FASTEXIT^IBCNBLA
"KRN",101,2281,99)
57687,60964
"KRN",101,2282,-1)
0^107
"KRN",101,2282,0)
IBCNB PROCESS REJECT^Reject Entry^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,2282,20)
D REJECT^IBCNBLA1(IBBUFDA)
"KRN",101,2282,24)
I $D(^XUSEC("IB INSURANCE SUPERVISOR",DUZ))
"KRN",101,2282,99)
57687,60964
"KRN",101,2283,-1)
0^106
"KRN",101,2283,0)
IBCNB PROCESS ACCEPT^Accept Entry^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,2283,20)
D ACCEPT^IBCNBLA1(IBBUFDA)
"KRN",101,2283,24)
I $D(^XUSEC("IB INSURANCE SUPERVISOR",DUZ))
"KRN",101,2283,99)
57687,60964
"KRN",101,2284,-1)
0^113
"KRN",101,2284,0)
IBCNB ENTRY VERIFY^Verify Entry^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,2284,20)
D VERIFY^IBCNBLA1(IBBUFDA)
"KRN",101,2284,99)
57687,60964
"KRN",101,2285,-1)
0^102
"KRN",101,2285,0)
IBCNB LIST ADD^Add Entry^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,2285,20)
D ADDBUF^IBCNBLA1
"KRN",101,2285,99)
57687,60964
"KRN",101,3428,-1)
0^80
"KRN",101,3428,0)
IBJT EDI STATUS SCREEN^EDI Status^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,3428,1,0)
^101.06^2^2^3010516^^^^
"KRN",101,3428,1,1,0)
This action is used to display latest status message, return message 
"KRN",101,3428,1,2,0)
and transmit message for a selected bill.
"KRN",101,3428,20)
I '$$PRVSCR^IBJTU1("IBJTED") D EN^IBJTED
"KRN",101,3428,99)
58954,27839
"KRN",101,3704,-1)
0^2
"KRN",101,3704,0)
IBJP INS VER SCREEN^Ins. Verification^^A^^^^^^^^
"KRN",101,3704,1,0)
^^1^1^3090820^
"KRN",101,3704,1,1,0)
Insurance Verification screen to display/edit eIV Site Parameters
"KRN",101,3704,20)
D EN^IBJPI
"KRN",101,3704,99)
61593,59366
"KRN",101,3705,-1)
0^4
"KRN",101,3705,0)
IBJP IIV BATCH EXTRACT EDIT^Batch Extracts^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,3705,20)
D BE^IBJPI2
"KRN",101,3705,99)
59485,39005
"KRN",101,3707,-1)
0^5
"KRN",101,3707,0)
IBJP IIV GENERAL EDIT^General Parameters^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,3707,20)
D IIVEDIT^IBJPI2(0)
"KRN",101,3707,99)
59485,39005
"KRN",101,3709,-1)
0^3
"KRN",101,3709,0)
IBJP INS VER MENU^Insurance Verification Menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,3709,4)
26^4
"KRN",101,3709,10,0)
^101.01PA^5^4
"KRN",101,3709,10,1,0)
3705^BE^2^
"KRN",101,3709,10,1,"^")
IBJP IIV BATCH EXTRACT EDIT
"KRN",101,3709,10,3,0)
3707^GP^1^
"KRN",101,3709,10,3,"^")
IBJP IIV GENERAL EDIT
"KRN",101,3709,10,5,0)
1380^EX^5^
"KRN",101,3709,10,5,"^")
IBJ EXIT
"KRN",101,3709,15)
I $G(IBFASTXT) S VALMBCK="Q"
"KRN",101,3709,20)
K IBFASTXT
"KRN",101,3709,24)
I 1 X:$D(^ORD(101,+$P(^ORD(101,DA(1),10,DA,0),"^"),24)) ^(24)
"KRN",101,3709,26)
D SHOW^VALM
"KRN",101,3709,28)
Select Action: 
"KRN",101,3709,99)
61605,51732
"KRN",101,3713,-1)
0^105
"KRN",101,3713,0)
IBCNB LIST CHECK NAMES^Check Ins Co's^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,3713,1,0)
^101.06^3^3^3020620^^
"KRN",101,3713,1,1,0)
This action protocol will allow the user to see what insurance company 
"KRN",101,3713,1,2,0)
names in the buffer are bad and allow for correction with the Auto Match 
"KRN",101,3713,1,3,0)
utility.
"KRN",101,3713,20)
D AMCHK^IBCNBLA
"KRN",101,3713,99)
59485,39005
"KRN",101,3716,-1)
0^115
"KRN",101,3716,0)
IBCNE FAST EXIT^Exit^^A^^^^^^^^
"KRN",101,3716,20)
D FASTEXIT^IBCNEQU
"KRN",101,3716,99)
59485,39005
"KRN",101,3722,-1)
0^120
"KRN",101,3722,0)
IBCNE PAYER MAINT MENU^IBCNE PAYER MAINT MENU^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,3722,4)
40^3
"KRN",101,3722,10,0)
^101.01PA^2^2
"KRN",101,3722,10,1,0)
3723^EE^1^
"KRN",101,3722,10,1,"^")
IBCNE PAYER EXPAND
"KRN",101,3722,10,2,0)
3725^EX^^
"KRN",101,3722,10,2,"^")
IBCNE PAYER EXIT
"KRN",101,3722,26)
D SHOW^VALM
"KRN",101,3722,28)
Select Action: 
"KRN",101,3722,99)
61674,38709
"KRN",101,3723,-1)
0^121
"KRN",101,3723,0)
IBCNE PAYER EXPAND^Expand Entry^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,3723,15)

"KRN",101,3723,20)
D EXPND^IBCNEPM2
"KRN",101,3723,99)
59485,39005
"KRN",101,3724,-1)
0^116
"KRN",101,3724,0)
IBCNE PAYER EXPAND MENU^IBCNE PAYER EXPAND MENU^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,3724,4)
40^3
"KRN",101,3724,10,0)
^101.01PA^5^5
"KRN",101,3724,10,3,0)
3725^EX^21^
"KRN",101,3724,10,3,"^")
IBCNE PAYER EXIT
"KRN",101,3724,10,4,0)
3726^LP^12^
"KRN",101,3724,10,4,"^")
IBCNE PAYER LINK
"KRN",101,3724,10,5,0)
644^PL^11^
"KRN",101,3724,10,5,"^")
VALM PRINT LIST
"KRN",101,3724,26)
D SHOW^VALM
"KRN",101,3724,28)
Select Action: 
"KRN",101,3724,99)
61828,53517
"KRN",101,3725,-1)
0^117
"KRN",101,3725,0)
IBCNE PAYER EXIT^Exit^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,3725,15)
Q
"KRN",101,3725,20)
Q
"KRN",101,3725,99)
59485,39005
"KRN",101,3726,-1)
0^118
"KRN",101,3726,0)
IBCNE PAYER LINK^Link Payer^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,3726,1,0)
^^2^2^3030117^
"KRN",101,3726,1,1,0)
This is the action protocol to link the payer with the selected
"KRN",101,3726,1,2,0)
insurance company.
"KRN",101,3726,20)
D LINK^IBCNEPM1
"KRN",101,3726,99)
59485,39005
"KRN",101,3727,-1)
0^97
"KRN",101,3727,0)
IBCNB ENTRY RESPONSE REPORT^Response Report^^A^^^^^^^^
"KRN",101,3727,1,0)
^^3^3^3030605^
"KRN",101,3727,1,1,0)
This action protocol will allow the user to generate an IIV Response 
"KRN",101,3727,1,2,0)
Report, using the associated Trace Number as input, from the Expand Entry 
"KRN",101,3727,1,3,0)
screen.
"KRN",101,3727,20)
D RESP^IBCNBLA1(IBBUFDA)
"KRN",101,3727,24)
I '$G(AVIEW)
"KRN",101,3727,99)
59485,39005
"KRN",101,4560,-1)
0^81
"KRN",101,4560,0)
IBCNE JT VIEW EXP ELIG BEN SCREEN^Expand Benefits^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4560,1,0)
^^2^2^3090925^
"KRN",101,4560,1,1,0)
This is the action protocol for the Expanded eligibility/benefits screen
"KRN",101,4560,1,2,0)
used from TPJI - Third Party Joint Inquiry.
"KRN",101,4560,20)
D EBJT^IBCNES2
"KRN",101,4560,99)
61628,79159
"KRN",101,4561,-1)
0^42
"KRN",101,4561,0)
IBCNE SV VIEW EXP ELIG BEN SCREEN^Expand Benefits^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4561,1,0)
^^2^2^3090925^
"KRN",101,4561,1,1,0)
This is the action protocol for the Expanded eligibility/benefits screen 
"KRN",101,4561,1,2,0)
used from the edit/view patient insurance options.
"KRN",101,4561,15)
I $G(IBFASTXT) S VALMBCK="Q"
"KRN",101,4561,20)
D EBSV^IBCNES2
"KRN",101,4561,99)
61629,37528
"KRN",101,4562,-1)
0^114
"KRN",101,4562,0)
IBCNE ELIG BEN INFO MENU^eIV elig/ben menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,4562,4)
26^4
"KRN",101,4562,10,0)
^101.01PA^1^1
"KRN",101,4562,10,1,0)
3716^EX^11^
"KRN",101,4562,10,1,"^")
IBCNE FAST EXIT
"KRN",101,4562,15)
I $G(IBFASTXT) S VALMBCK="Q"
"KRN",101,4562,26)
D SHOW^VALM
"KRN",101,4562,28)
Select Action: 
"KRN",101,4562,99)
61629,50667
"KRN",101,4563,-1)
0^18
"KRN",101,4563,0)
IBCNE AB VIEW EXP ELIG BEN SCREEN^Expand Benefits^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4563,1,0)
^^2^2^3090929^
"KRN",101,4563,1,1,0)
This is the action protocol for the Expanded eligibility/benefits screen
"KRN",101,4563,1,2,0)
used from the edit/view Annual Benefits lists/menu protocols.
"KRN",101,4563,15)
I $G(IBFASTXT) S VALMBCK="Q"
"KRN",101,4563,20)
D EBAB^IBCNES2
"KRN",101,4563,99)
61633,56966
"KRN",101,4564,-1)
0^58
"KRN",101,4564,0)
IBCNE VP VIEW EXP ELIG BEN SCREEN^Expand Benefits^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4564,1,0)
^^3^3^3090929^
"KRN",101,4564,1,1,0)
This is the action protocol for the Expanded eligibility/benefits screen
"KRN",101,4564,1,2,0)
used from the VP - view/edit insurance policy action on the pt. insurance
"KRN",101,4564,1,3,0)
screens.
"KRN",101,4564,15)
I $G(IBFASTXT) S VALMBCK="Q"
"KRN",101,4564,20)
D EBVP^IBCNES2
"KRN",101,4564,99)
61633,80219
"KRN",101,4567,-1)
0^87
"KRN",101,4567,0)
IBCNE JT COVERAGE LIMIT DATE RANGE^Coverage Limits^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4567,1,0)
^^3^3^3091001^
"KRN",101,4567,1,1,0)
This is the action protocol in order to adjust the date range for the 
"KRN",101,4567,1,2,0)
display of the plan coverage limitations from the Third Party Joint 
"KRN",101,4567,1,3,0)
Inquiry - Claim Information - VP view policy screen.
"KRN",101,4567,15)
D BLD^IBCNSP S VALMBG=$G(IB1ST("PLIM"))
"KRN",101,4567,20)
D CL^IBCNSC41
"KRN",101,4567,99)
61635,64169
"KRN",101,4568,-1)
0^88
"KRN",101,4568,0)
IBCNB LIST POSITIVE VIEW^Pos. Buffer^^A^^^^^^^^INSURANCE MANAGEMENT
"KRN",101,4568,1,0)
^^1^1^3091012^
"KRN",101,4568,1,1,0)
Positive Buffer View.
"KRN",101,4568,20)
K IBCNSORT D EN1^IBCNBLL(1)
"KRN",101,4568,99)
61646,47254
"KRN",101,4569,-1)
0^89
"KRN",101,4569,0)
IBCNB LIST NEGATIVE VIEW^Neg. Buffer^^A^^^^^^^^INSURANCE MANAGEMENT
"KRN",101,4569,1,0)
^^1^1^3091012^
"KRN",101,4569,1,1,0)
Negative Buffer View.
"KRN",101,4569,20)
K IBCNSORT D EN1^IBCNBLL(2)
"KRN",101,4569,99)
61646,47803
"KRN",101,4570,-1)
0^90
"KRN",101,4570,0)
IBCNB LIST MEDICARE VIEW^Medicare Buffer^^A^^^^^^^^INSURANCE MANAGEMENT
"KRN",101,4570,1,0)
^^1^1^3091012^
"KRN",101,4570,1,1,0)
Medicare Buffer View.
"KRN",101,4570,20)
K IBCNSORT D EN1^IBCNBLL(3)
"KRN",101,4570,99)
61646,47910
"KRN",101,4571,-1)
0^91
"KRN",101,4571,0)
IBCNB LIST APPOINTMENTS VIEW^Future Appts.^^A^^^^^^^^INSURANCE MANAGEMENT
"KRN",101,4571,1,0)
^101.06^1^1^3100715^^
"KRN",101,4571,1,1,0)
Appointments Buffer View.
"KRN",101,4571,20)
K IBCNSORT D EN1^IBCNBLL(4)
"KRN",101,4571,99)
61922,42836
"KRN",101,4572,-1)
0^94
"KRN",101,4572,0)
IBCNB EXPAND BENEFITS^Expand Benefits^^A^^^^^^^^INSURANCE MANAGEMENT
"KRN",101,4572,20)
D EN^IBCNBLB
"KRN",101,4572,24)
I '$G(AVIEW)
"KRN",101,4572,99)
61648,58846
"KRN",101,4580,-1)
0^122
"KRN",101,4580,0)
IBCNSM RX COB DETERMINATION^RX COB Determination^^A^^^^^^^^
"KRN",101,4580,4)
^^^CB
"KRN",101,4580,20)
D EN^IBNCPDS1
"KRN",101,4580,99)
61940,47202
"KRN",409.61,193,-1)
0^3
"KRN",409.61,193,0)
IBCNS EXPANDED POLICY^1^^80^5^16^1^1^Policy^IBCNSP POLICY MENU^Patient Policy Information^1
"KRN",409.61,193,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,193,"ARRAY")
 ^TMP("IBCNSVP",$J)
"KRN",409.61,193,"COL",0)
^409.621^^0
"KRN",409.61,193,"FNL")
D EXIT^IBCNSP
"KRN",409.61,193,"HDR")
D HDR^IBCNSP
"KRN",409.61,193,"HLP")
D HELP^IBCNSP
"KRN",409.61,193,"INIT")
D INIT^IBCNSP
"KRN",409.61,237,-1)
0^4
"KRN",409.61,237,0)
IBCNS INS CO PLAN DETAIL^1^^80^5^19^1^1^Plan^IBCNSC PLAN DETAIL^View/Edit Plan
"KRN",409.61,237,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,237,"ARRAY")
 ^TMP("IBCNSCP",$J)
"KRN",409.61,237,"FNL")
D EXIT^IBCNSC41
"KRN",409.61,237,"HDR")
D HDR^IBCNSC41
"KRN",409.61,237,"HLP")
D HELP^IBCNSC41
"KRN",409.61,237,"INIT")
D INIT^IBCNSC4
"KRN",409.61,250,-1)
0^5
"KRN",409.61,250,0)
IBJT CLAIM INFO^1^^80^4^16^1^1^Claim Information^IBJT CLAIM SCREEN MENU^Claim Information^^^
"KRN",409.61,250,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,250,"ARRAY")
 ^TMP("IBJTCA",$J)
"KRN",409.61,250,"FNL")
D EXIT^IBJTCA
"KRN",409.61,250,"HDR")
D HDR^IBJTCA
"KRN",409.61,250,"HLP")
D HELP^IBJTCA
"KRN",409.61,250,"INIT")
D INIT^IBJTCA
"KRN",409.61,424,-1)
0^6
"KRN",409.61,424,0)
IBCNB INSURANCE BUFFER LIST^1^^80^4^19^1^1^Buffer Entry^IBCNB LIST SCREEN MENU^Insurance Buffer List^1^^1
"KRN",409.61,424,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,424,"ARRAY")
 ^TMP("IBCNBLL",$J)
"KRN",409.61,424,"COL",0)
^409.621^8^8
"KRN",409.61,424,"COL",1,0)
NUMBER^1^4
"KRN",409.61,424,"COL",2,0)
PAT NAME^6^20^Patient Name
"KRN",409.61,424,"COL",3,0)
SSN^27^4
"KRN",409.61,424,"COL",4,0)
INS NAME^32^17^Insurance Company
"KRN",409.61,424,"COL",5,0)
SUB ID^50^13^Subscr Id
"KRN",409.61,424,"COL",6,0)
SOURCE^64^1^S
"KRN",409.61,424,"COL",7,0)
ENTERED^66^8^Entered
"KRN",409.61,424,"COL",8,0)
FLAGS^76^5^iIEYH
"KRN",409.61,424,"COL","B","ENTERED",7)

"KRN",409.61,424,"COL","B","FLAGS",8)

"KRN",409.61,424,"COL","B","INS NAME",4)

"KRN",409.61,424,"COL","B","NUMBER",1)

"KRN",409.61,424,"COL","B","PAT NAME",2)

"KRN",409.61,424,"COL","B","SOURCE",6)

"KRN",409.61,424,"COL","B","SSN",3)

"KRN",409.61,424,"COL","B","SUB ID",5)

"KRN",409.61,424,"FNL")
D EXIT^IBCNBLL
"KRN",409.61,424,"HDR")
D HDR^IBCNBLL
"KRN",409.61,424,"HLP")
D HELP^IBCNBLL
"KRN",409.61,424,"INIT")
D INIT^IBCNBLL
"KRN",409.61,671,-1)
0^1
"KRN",409.61,671,0)
IBJP IIV SITE PARAMETERS^1^^80^4^20^1^1^^IBJP INS VER MENU^eIV Site Parameters^1^^1
"KRN",409.61,671,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,671,"ARRAY")
 ^TMP($J,"IBJPI")
"KRN",409.61,671,"FNL")
D EXIT^IBJPI
"KRN",409.61,671,"HDR")
D HDR^IBJPI
"KRN",409.61,671,"HLP")
D HELP^IBJPI
"KRN",409.61,671,"INIT")
D INIT^IBJPI
"KRN",409.61,672,-1)
0^7
"KRN",409.61,672,0)
IBCNE REQUEST INS INQUIRY LIST^1^1^160^6^19^^1^^IBCNE REVERIFY INSURANCE MENU^eIV Insurance Request
"KRN",409.61,672,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,672,"ARRAY")
 ^TMP("IBCNEQU",$J)
"KRN",409.61,672,"COL",0)
^409.621^14^14
"KRN",409.61,672,"COL",1,0)
NUMBER^1^4^^^0
"KRN",409.61,672,"COL",2,0)
NAME^5^15^Insurance Co.^^1
"KRN",409.61,672,"COL",3,0)
POLICY^139^15^Subscriber ID
"KRN",409.61,672,"COL",4,0)
GROUP^38^11^Group
"KRN",409.61,672,"COL",5,0)
HOLDER^50^8^Holder
"KRN",409.61,672,"COL",6,0)
EFFDT^59^10^Effect.
"KRN",409.61,672,"COL",7,0)
EXPIRE^71^10^Expires
"KRN",409.61,672,"COL",8,0)
TYPE^85^8^Type
"KRN",409.61,672,"COL",9,0)
VERIFIED BY^95^12^Verified By
"KRN",409.61,672,"COL",10,0)
VERIFIED ON^109^10^Date Ver.
"KRN",409.61,672,"COL",11,0)
PRECERT^121^5^Pre
"KRN",409.61,672,"COL",12,0)
UR^127^5^UR
"KRN",409.61,672,"COL",13,0)
COB^133^4^COB
"KRN",409.61,672,"COL",14,0)
TYPEPOL^21^14^Type of Policy
"KRN",409.61,672,"COL","AIDENT",0,1)

"KRN",409.61,672,"COL","AIDENT",1,2)

"KRN",409.61,672,"COL","B","COB",13)

"KRN",409.61,672,"COL","B","EFFDT",6)

"KRN",409.61,672,"COL","B","EXPIRE",7)

"KRN",409.61,672,"COL","B","GROUP",4)

"KRN",409.61,672,"COL","B","HOLDER",5)

"KRN",409.61,672,"COL","B","NAME",2)

"KRN",409.61,672,"COL","B","NUMBER",1)

"KRN",409.61,672,"COL","B","POLICY",3)

"KRN",409.61,672,"COL","B","PRECERT",11)

"KRN",409.61,672,"COL","B","TYPE",8)

"KRN",409.61,672,"COL","B","TYPEPOL",14)

"KRN",409.61,672,"COL","B","UR",12)

"KRN",409.61,672,"COL","B","VERIFIED BY",9)

"KRN",409.61,672,"COL","B","VERIFIED ON",10)

"KRN",409.61,672,"FNL")
D EXIT^IBCNEQU
"KRN",409.61,672,"HDR")
D HDR^IBCNEQU
"KRN",409.61,672,"HLP")
D HELP^IBCNEQU
"KRN",409.61,672,"INIT")
D INIT^IBCNEQU
"KRN",409.61,812,-1)
0^2
"KRN",409.61,812,0)
IBCNE ELIGIBILITY/BENEFIT INFO^1^^80^4^21^1^1^^IBCNE ELIG BEN INFO MENU^eIV Elig/Benefit Information^^^
"KRN",409.61,812,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,812,"ARRAY")
 ^TMP(IBVSUB,$J,"DISP")
"KRN",409.61,812,"FNL")
D EXIT^IBCNES
"KRN",409.61,812,"HDR")
D HDR^IBCNES
"KRN",409.61,812,"HLP")
D HELP^IBCNES
"KRN",409.61,812,"INIT")
D INIT^IBCNES(IBVF,IBVIENS,.IBVEBFLG,IBVV,IBVSUB)
"MBREQ")
0
"ORD",7,.402)
.402;7;;;EDEOUT^DIFROMSO(.402,DA,"",XPDA);FPRE^DIFROMSI(.402,"",XPDA);EPRE^DIFROMSI(.402,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.402,DA,"",XPDA);DEL^DIFROMSK(.402,"",%)
"ORD",7,.402,0)
INPUT TEMPLATE
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"ORD",17,409.61)
409.61;17;1;;;;;;;LMDEL^XPDIA1
"ORD",17,409.61,0)
LIST TEMPLATE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",200,-1)
1^1
"PKG",200,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",200,20,0)
^9.402P^1^1
"PKG",200,20,1,0)
2^^IBAXDR
"PKG",200,20,1,1)

"PKG",200,20,"B",2,1)

"PKG",200,22,0)
^9.49I^1^1
"PKG",200,22,1,0)
2.0^2940321^2990406^2447
"PKG",200,22,1,"PAH",1,0)
416^3100915
"PKG",200,22,1,"PAH",1,1,0)
^^1^1^3100915
"PKG",200,22,1,"PAH",1,1,1,0)
eIV Phase 3, Iteration 1
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
74
"RTN","IBCNBAA")
0^34^B67963575^B59752666
"RTN","IBCNBAA",1,0)
IBCNBAA ;ALB/ARH-Ins Buffer: process Accept set-up ;1 Jun 97
"RTN","IBCNBAA",2,0)
 ;;2.0;INTEGRATED BILLING;**82,184,246,416**;21-MAR-94;Build 58
"RTN","IBCNBAA",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBAA",4,0)
 ;
"RTN","IBCNBAA",5,0)
 ;
"RTN","IBCNBAA",6,0)
ACCEPT(IBBUFDA,IBINSDA,IBGRPDA,IBPOLDA) ; process a buffer entry for acceptance then save in Insurance files
"RTN","IBCNBAA",7,0)
 ;    1) for Insurance Company, Group/Plan and Policy sets of data:
"RTN","IBCNBAA",8,0)
 ;        a) display the set of buffer data and corresponding existing selected ins data
"RTN","IBCNBAA",9,0)
 ;        b) if ins record exists confirm with user that it is the correct one to use
"RTN","IBCNBAA",10,0)
 ;        c) if ins record exists user selects method of saving to ins record: Merge/Overwrite/Replace/No Change/Individually Accept(skip blanks)
"RTN","IBCNBAA",11,0)
 ;        d) if new record needs to be created get user confirmation
"RTN","IBCNBAA",12,0)
 ;    2) display the actions that will be taken
"RTN","IBCNBAA",13,0)
 ;    3) user confirms that is correct
"RTN","IBCNBAA",14,0)
 ;    4) data moved into insurance files, new records created if needed or edit existing ones
"RTN","IBCNBAA",15,0)
 ;    5) complete some general functions that are executed whenever insurance is entered/edited
"RTN","IBCNBAA",16,0)
 ;    6) allow user to view buffer entry and new/updated insurance records
"RTN","IBCNBAA",17,0)
 ;    7) buffer ins/group/policy data deleted
"RTN","IBCNBAA",18,0)
 ;    8) buffer entry status updated
"RTN","IBCNBAA",19,0)
 ;
"RTN","IBCNBAA",20,0)
 N DFN,IBX,IBELIG,IBHELP,IBNEWINS,IBNEWGRP,IBNEWPOL,IBMVINS,IBMVGRP,IBMVPOL,IBACCPT,DIR,X,Y,DIRUT,IBDONE S IBDONE=0
"RTN","IBCNBAA",21,0)
 K ^TMP($J,"IB BUFFER SELECTED")  ; initialize selection file
"RTN","IBCNBAA",22,0)
 S IBINSDA=+$G(IBINSDA),IBGRPDA=+$G(IBGRPDA),IBPOLDA=+$G(IBPOLDA),(IBNEWINS,IBNEWGRP,IBNEWPOL,IBMVINS,IBMVGRP,IBMVPOL)=0
"RTN","IBCNBAA",23,0)
 S DFN=+$G(^IBA(355.33,+$G(IBBUFDA),60)) I 'DFN G ACCPTQ
"RTN","IBCNBAA",24,0)
 I +IBINSDA,+IBGRPDA,'IBPOLDA S IBPOLDA=$$PTGRP^IBCNBU1(DFN,IBINSDA,IBGRPDA) ; pateint already member of plan
"RTN","IBCNBAA",25,0)
 ;
"RTN","IBCNBAA",26,0)
 I $P($G(^IBA(355.33,$G(IBBUFDA),0)),U,4)'="E" G ACCPTQ
"RTN","IBCNBAA",27,0)
 I +IBINSDA,$G(^DIC(36,IBINSDA,0))="" G ACCPTQ
"RTN","IBCNBAA",28,0)
 I +IBGRPDA,+$G(^IBA(355.3,IBGRPDA,0))'=IBINSDA G ACCPTQ
"RTN","IBCNBAA",29,0)
 I +IBGRPDA S IBX=$G(^IBA(355.3,IBGRPDA,0)) I $P(IBX,U,2)=0,+$P(IBX,U,10),$P(IBX,U,10)'=DFN G ACCPTQ
"RTN","IBCNBAA",30,0)
 I +IBPOLDA,+$G(^DPT(DFN,.312,IBPOLDA,0))'=IBINSDA G ACCPTQ
"RTN","IBCNBAA",31,0)
 I +IBPOLDA,$P($G(^DPT(DFN,.312,IBPOLDA,0)),U,18)'=IBGRPDA G ACCPTQ
"RTN","IBCNBAA",32,0)
 ;
"RTN","IBCNBAA",33,0)
ACINS ;
"RTN","IBCNBAA",34,0)
 W @IOF S IBHELP=",INS^IBCNBCD("_IBBUFDA_","_IBINSDA_")"
"RTN","IBCNBAA",35,0)
 D INS^IBCNBCD(IBBUFDA,IBINSDA)
"RTN","IBCNBAA",36,0)
 I +IBINSDA S IBACCPT=$$MATCH("INSURANCE COMPANY") S:'IBACCPT (IBINSDA,IBGRPDA,IBPOLDA)=0 I $D(DIRUT) G ACCPTQ
"RTN","IBCNBAA",37,0)
 I +IBINSDA S IBMVINS=$$MOVE("INSURANCE COMPANY",IBHELP) I $D(DIRUT)!(IBMVINS="") G ACCPTQ
"RTN","IBCNBAA",38,0)
 I 'IBINSDA S IBNEWINS=$$NEW("INSURANCE COMPANY"),IBMVINS=3,(IBGRPDA,IBPOLDA)=0 I 'IBNEWINS G ACCPTQ
"RTN","IBCNBAA",39,0)
 ;
"RTN","IBCNBAA",40,0)
 I +IBMVINS=4 D INS^IBCNBAC(IBBUFDA,IBINSDA,1) ; Ind. Accept-Skip Blanks
"RTN","IBCNBAA",41,0)
 ;
"RTN","IBCNBAA",42,0)
ACGRP ;
"RTN","IBCNBAA",43,0)
 W @IOF S IBHELP=",GRP^IBCNBCD("_IBBUFDA_","_IBGRPDA_")"
"RTN","IBCNBAA",44,0)
 I +IBGRPDA W !,?14,"Patient is "_$S(+IBPOLDA:"",1:"NOT ")_"a member of this Insurance Group/Plan",!
"RTN","IBCNBAA",45,0)
 D GRP^IBCNBCD(IBBUFDA,IBGRPDA)
"RTN","IBCNBAA",46,0)
 I +IBGRPDA S IBACCPT=$$MATCH("GROUP/PLAN") S:'IBACCPT (IBGRPDA,IBPOLDA)=0 I $D(DIRUT) G ACCPTQ
"RTN","IBCNBAA",47,0)
 I +IBGRPDA S IBMVGRP=$$MOVE("GROUP/PLAN",IBHELP) I $D(DIRUT)!(IBMVGRP="") G ACCPTQ
"RTN","IBCNBAA",48,0)
 I 'IBGRPDA S IBNEWGRP=$$NEW("GROUP/PLAN"),IBMVGRP=3,IBPOLDA=0 I 'IBNEWGRP G ACCPTQ
"RTN","IBCNBAA",49,0)
 ;
"RTN","IBCNBAA",50,0)
 I +IBMVGRP=4 D GRP^IBCNBAC(IBBUFDA,IBGRPDA,1) ; Ind. Accept-Skip Blanks
"RTN","IBCNBAA",51,0)
 ;
"RTN","IBCNBAA",52,0)
ACPOL ;
"RTN","IBCNBAA",53,0)
 W @IOF S IBHELP=",POLICY^IBCNBCD("_IBBUFDA_","_IBPOLDA_")"
"RTN","IBCNBAA",54,0)
 I 'IBPOLDA W !,"This will be a New policy for this group and patient.",!
"RTN","IBCNBAA",55,0)
 D POLICY^IBCNBCD(IBBUFDA,IBPOLDA)
"RTN","IBCNBAA",56,0)
 I +IBPOLDA S IBACCPT=$$MATCH("PATIENT POLICY") S:'IBACCPT IBPOLDA=0 I $D(DIRUT) G ACCPTQ
"RTN","IBCNBAA",57,0)
 I +IBPOLDA S IBMVPOL=$$MOVE("PATIENT POLICY",IBHELP) I $D(DIRUT)!(IBMVPOL="") G ACCPTQ
"RTN","IBCNBAA",58,0)
 I 'IBPOLDA S IBNEWPOL=$$NEW("PATIENT POLICY"),IBMVPOL=3 I 'IBNEWPOL G ACCPTQ
"RTN","IBCNBAA",59,0)
 ;
"RTN","IBCNBAA",60,0)
 I +IBMVPOL=4 D POLICY^IBCNBAC(IBBUFDA,IBPOLDA,1) ; Ind. Accept-Skip Blanks
"RTN","IBCNBAA",61,0)
 ;
"RTN","IBCNBAA",62,0)
ACEB ;
"RTN","IBCNBAA",63,0)
 W @IOF
"RTN","IBCNBAA",64,0)
 D ELIG^IBCNBCD(IBBUFDA,IBPOLDA) S IBELIG=$$REPL() I $D(DIRUT) G ACCPTQ
"RTN","IBCNBAA",65,0)
 ;
"RTN","IBCNBAA",66,0)
CHECK ; display changes that will be made and ask user for confirmation
"RTN","IBCNBAA",67,0)
 W @IOF
"RTN","IBCNBAA",68,0)
 ;
"RTN","IBCNBAA",69,0)
 I +IBINSDA S IBX="The Buffer data will "_$P(IBMVINS,U,2)_" the existing Insurance Company data."
"RTN","IBCNBAA",70,0)
 I +IBINSDA,'IBMVINS S IBX="There will be "_$P(IBMVINS,U,2)_" to the existing Insurance Company data."
"RTN","IBCNBAA",71,0)
 I 'IBINSDA S IBX=$P(^IBA(355.33,IBBUFDA,20),U,1)_" will be added as a NEW Insurance Company."
"RTN","IBCNBAA",72,0)
 W !!,$G(IORVON)_"STEP 1: Insurance Company"_$J("",55)_$G(IORVOFF) W !,IBX
"RTN","IBCNBAA",73,0)
 ;
"RTN","IBCNBAA",74,0)
 I +IBGRPDA S IBX="The Buffer data will "_$P(IBMVGRP,U,2)_" the existing Group/Plan data."
"RTN","IBCNBAA",75,0)
 I +IBGRPDA,'IBMVGRP S IBX="There will be "_$P(IBMVGRP,U,2)_" to the existing Group/Plan data."
"RTN","IBCNBAA",76,0)
 I 'IBGRPDA S IBX="A NEW Group Plan will be added to this Insurance Company."
"RTN","IBCNBAA",77,0)
 W !!,$G(IORVON)_"STEP 2: Group/Plan"_$J("",62)_$G(IORVOFF) W !,IBX
"RTN","IBCNBAA",78,0)
 ;
"RTN","IBCNBAA",79,0)
 I +IBPOLDA S IBX="The Buffer data will "_$P(IBMVPOL,U,2)_" the existing Policy data."
"RTN","IBCNBAA",80,0)
 I +IBPOLDA,'IBMVPOL S IBX="There will be "_$P(IBMVPOL,U,2)_" to the existing Policy data."
"RTN","IBCNBAA",81,0)
 I 'IBPOLDA S IBX="A NEW Patient Policy will be added for this patient and this Group/Plan."
"RTN","IBCNBAA",82,0)
 W !!,$G(IORVON)_"STEP 3: Patient Policy"_$J("",58)_$G(IORVOFF) W !,IBX
"RTN","IBCNBAA",83,0)
 ;
"RTN","IBCNBAA",84,0)
 I IBELIG S IBX="The Buffer data will"_$S(IBELIG:"",1:" not")_" replace the existing EB data."
"RTN","IBCNBAA",85,0)
 W !!,$G(IORVON)_"STEP 4: Eligibility/Benefits"_$J("",58)_$G(IORVOFF) W !,IBX
"RTN","IBCNBAA",86,0)
 ;
"RTN","IBCNBAA",87,0)
 I +IBINSDA,$P(IBMVINS,U,1)=0,+IBGRPDA,$P(IBMVGRP,U,1)=0,+IBPOLDA,$P(IBMVPOL,U,1)=0,+IBELIG=0 W !!!,"This would result in No Change to the existing Insurance data.  Process aborted." D WAIT G ACCPTQ
"RTN","IBCNBAA",88,0)
 ;
"RTN","IBCNBAA",89,0)
 I '$$OK G ACCPTQ
"RTN","IBCNBAA",90,0)
 ;
"RTN","IBCNBAA",91,0)
PROCESS ; process all changes selected by user, add/edit insurance files based on buffer data, cleanup, ...
"RTN","IBCNBAA",92,0)
 ;
"RTN","IBCNBAA",93,0)
 D ACCEPT^IBCNBAR(IBBUFDA,DFN,IBINSDA,IBGRPDA,IBPOLDA,IBMVINS,IBMVGRP,IBMVPOL,IBNEWINS,IBNEWGRP,IBNEWPOL,IBELIG)
"RTN","IBCNBAA",94,0)
 S IBDONE=1
"RTN","IBCNBAA",95,0)
 ;
"RTN","IBCNBAA",96,0)
ACCPTQ K ^TMP($J,"IB BUFFER SELECTED")  ; cleanup selection file
"RTN","IBCNBAA",97,0)
 Q IBDONE
"RTN","IBCNBAA",98,0)
 ;
"RTN","IBCNBAA",99,0)
 ;
"RTN","IBCNBAA",100,0)
 ;
"RTN","IBCNBAA",101,0)
MATCH(IBDESC) ; ask the user if the buffer entry is a match with the selected insurance file entry
"RTN","IBCNBAA",102,0)
 ; returns 1 if there is a match, 0 otherwise
"RTN","IBCNBAA",103,0)
 N DIR,X,Y,IBX S IBX=0
"RTN","IBCNBAA",104,0)
 S DIR("?")="Enter Yes if this existing "_IBDESC_" corresponds to the buffer entry "_IBDESC_".  Enter No to add new "_IBDESC_"."
"RTN","IBCNBAA",105,0)
 S DIR("?",1)="Entering Yes will match this existing "_IBDESC_" with the buffer entry,"
"RTN","IBCNBAA",106,0)
 S DIR("?",2)="no new "_IBDESC_" will be created.  Any existing "_IBDESC_" data"
"RTN","IBCNBAA",107,0)
 S DIR("?",3)="changes based on the Buffer data will be applied to this "_IBDESC_"."
"RTN","IBCNBAA",108,0)
 S DIR("?",4)="Enter No to create a new "_IBDESC_" if the Buffer entry's "
"RTN","IBCNBAA",109,0)
 S DIR("?",5)=IBDESC_" data does not match any existing "_IBDESC_".",DIR("?",6)=""
"RTN","IBCNBAA",110,0)
 ;
"RTN","IBCNBAA",111,0)
 W ! S DIR(0)="YO",DIR("A")="Is this the correct "_IBDESC_" to match with this Buffer entry" D ^DIR I Y=1 S IBX=1
"RTN","IBCNBAA",112,0)
 Q IBX
"RTN","IBCNBAA",113,0)
 ;
"RTN","IBCNBAA",114,0)
MOVE(IBDESC,IBHELP) ; ask the user what method they want to use to transfer buffer data to the insurance files
"RTN","IBCNBAA",115,0)
 ; returns 1^merge, 2^overwrite, 3^replace, 4^individually accept (skip blanks),
"RTN","IBCNBAA",116,0)
 ;  0^no change,
"RTN","IBCNBAA",117,0)
 ;  or "" if none of the methods was chosen
"RTN","IBCNBAA",118,0)
 N DIR,X,Y,IBX S IBX=""
"RTN","IBCNBAA",119,0)
 S DIR("?")="^D HELP^IBCNBUH,WAIT^IBCNBAA"_$G(IBHELP),DIR("??")="^D HELP2^IBCNBUH,WAIT^IBCNBAA"_$G(IBHELP)
"RTN","IBCNBAA",120,0)
 S DIR("A")="Select the method to update the "_IBDESC
"RTN","IBCNBAA",121,0)
 ; DAOU/BHS - 08/28/2002 - Added INDIVIDUALLY ACCEPT methods
"RTN","IBCNBAA",122,0)
 W ! S DIR(0)="SOB^M:MERGE;O:OVERWRITE;R:REPLACE;N:NO CHANGE;I:INDIVIDUALLY ACCEPT (SKIP BLANKS)" D ^DIR
"RTN","IBCNBAA",123,0)
 S IBX=$S(Y="M":1,Y="O":2,Y="R":3,Y="I":4,Y="N":0,1:"") I IBX'="" S IBX=IBX_U_$G(Y(0))_$S(+IBX=1:" with",1:"")
"RTN","IBCNBAA",124,0)
 Q IBX
"RTN","IBCNBAA",125,0)
 ;
"RTN","IBCNBAA",126,0)
NEW(IBDESC) ; ask user if they want to add a new entry to the insurance files (36, 355.3, or 2.312)
"RTN","IBCNBAA",127,0)
 ; returns 1 if Yes create a new entry, 0 otherwise
"RTN","IBCNBAA",128,0)
 N DIR,X,Y,IBX S IBX=0
"RTN","IBCNBAA",129,0)
 I IBDESC="INSURANCE COMPANY",'$D(^XUSEC("IB INSURANCE COMPANY ADD",DUZ)) W !!,"Sorry, but you do not have the required privileges to add",!,"new Insurance Companies." D WAIT G NEWQ
"RTN","IBCNBAA",130,0)
 ;
"RTN","IBCNBAA",131,0)
 S DIR("?")="Enter Yes to create a new "_IBDESC_". Enter No to stop this process."
"RTN","IBCNBAA",132,0)
 S DIR("?",1)="Enter Yes to create a new "_IBDESC_" in the Insurance files for"
"RTN","IBCNBAA",133,0)
 S DIR("?",2)="this Buffer entry only if no existing "_IBDESC_" could be found"
"RTN","IBCNBAA",134,0)
 S DIR("?",3)="that matches this buffer entry.",DIR("?",4)=""
"RTN","IBCNBAA",135,0)
 W ! S DIR(0)="YO",DIR("A")="No "_IBDESC_" Selected, Add a New "_IBDESC D ^DIR I +Y=1 S IBX=1
"RTN","IBCNBAA",136,0)
NEWQ Q IBX
"RTN","IBCNBAA",137,0)
 ;
"RTN","IBCNBAA",138,0)
REPL() ; ask user if they want to replace eligibility/benefits data in pt. insuarance
"RTN","IBCNBAA",139,0)
 N DIR,X,Y,IBX
"RTN","IBCNBAA",140,0)
 S IBX=0
"RTN","IBCNBAA",141,0)
 S DIR(0)="YO",DIR("A")="Replace the Pt's Eligibility/Benefits data",DIR("B")="YES"
"RTN","IBCNBAA",142,0)
 S DIR("?")="Enter Yes to replace existing Eligibility/Benefits data with one from eIV response."
"RTN","IBCNBAA",143,0)
 W ! D ^DIR I +Y=1 S IBX=1
"RTN","IBCNBAA",144,0)
 Q IBX
"RTN","IBCNBAA",145,0)
 ;
"RTN","IBCNBAA",146,0)
OK() ; ask the user if the buffer data should be moved to the insurance files
"RTN","IBCNBAA",147,0)
 ; returns 1 if yes, 0 otherwise
"RTN","IBCNBAA",148,0)
 N DIR,X,Y,IBX S IBX=0 W !!!
"RTN","IBCNBAA",149,0)
 S DIR("?")="Enter Yes to accept/verify the buffer data and move it to the insurance files.  Enter No to stop this process."
"RTN","IBCNBAA",150,0)
 S DIR("?",1)="Entering Yes will cause several things to happen:"
"RTN","IBCNBAA",151,0)
 S DIR("?",2)="  1 - the above changes will be completed and the Insurance files updated with"
"RTN","IBCNBAA",152,0)
 S DIR("?",3)="      the buffer data."
"RTN","IBCNBAA",153,0)
 S DIR("?",4)="  2 - the Insurance entries modified or added will be flagged as verified."
"RTN","IBCNBAA",154,0)
 S DIR("?",5)="  3 - most of the insurance and patient related information in the buffer entry"
"RTN","IBCNBAA",155,0)
 S DIR("?",6)="      will be deleted, leaving only a stub entry for reporting purposes.",DIR("?",7)=""
"RTN","IBCNBAA",156,0)
 S DIR(0)="YO",DIR("A")="Is this Correct, update the existing Insurance files now" D ^DIR I Y=1 S IBX=1
"RTN","IBCNBAA",157,0)
 Q IBX
"RTN","IBCNBAA",158,0)
 ;
"RTN","IBCNBAA",159,0)
WAIT N DIR,DIRUT,DUOUT,DTOUT,X,Y W !! S DIR(0)="E",DIR("A")="Enter RETURN to continue" D ^DIR W !!
"RTN","IBCNBAA",160,0)
 Q
"RTN","IBCNBAR")
0^69^B44012684^B41255372
"RTN","IBCNBAR",1,0)
IBCNBAR ;ALB/ARH-Ins Buffer: process Accept and Reject ;15 Jan 2009
"RTN","IBCNBAR",2,0)
 ;;2.0;INTEGRATED BILLING;**82,240,345,413,416**;21-MAR-94;Build 58
"RTN","IBCNBAR",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBAR",4,0)
 ;
"RTN","IBCNBAR",5,0)
 ;
"RTN","IBCNBAR",6,0)
ACCEPT(IBBUFDA,DFN,IBINSDA,IBGRPDA,IBPOLDA,IBMVINS,IBMVGRP,IBMVPOL,IBNEWINS,IBNEWGRP,IBNEWPOL,IBELIG) ; move buffer data into Insurance files then cleanup
"RTN","IBCNBAR",7,0)
 ;    1) data moved into insurance files, new records created if needed or edit existing ones
"RTN","IBCNBAR",8,0)
 ;    2) complete some general functions that are executed whenever insurance is entered/edited
"RTN","IBCNBAR",9,0)
 ;    3) allow user to view buffer entry and new/updated insurance records
"RTN","IBCNBAR",10,0)
 ;    4) buffer ins/group/policy data deleted
"RTN","IBCNBAR",11,0)
 ;    5) buffer entry status updated
"RTN","IBCNBAR",12,0)
 ;
"RTN","IBCNBAR",13,0)
 N RESULT,IBSUPRES
"RTN","IBCNBAR",14,0)
 ;Set IBSUPRES to zero to not suppress I/O within Accept 
"RTN","IBCNBAR",15,0)
 S IBSUPRES=0
"RTN","IBCNBAR",16,0)
 ;
"RTN","IBCNBAR",17,0)
PROCESS ; process all changes selected by user, add/edit insurance files based
"RTN","IBCNBAR",18,0)
 ; on buffer data. Entry point for ACCEPAPI^IBCNICB (patch 413)
"RTN","IBCNBAR",19,0)
 ;
"RTN","IBCNBAR",20,0)
 N IVMINSUP,IBNEW,IBCDFN,RIEN S IBCDFN=IBPOLDA S:+IBNEWPOL IBNEW=1 D BEFORE^IBCNSEVT ; insurance event driver
"RTN","IBCNBAR",21,0)
 ;
"RTN","IBCNBAR",22,0)
 N DIR,X,Y,IBX,IBINSH,IBGRPH,IBPOLH S (IBINSH,IBGRPH,IBPOLH)="Updated" W:$G(IBSUPRES)'>0 " ...",!
"RTN","IBCNBAR",23,0)
 ;
"RTN","IBCNBAR",24,0)
 S RESULT(0)="-1^Add new INSURANCE COMPANY failed"
"RTN","IBCNBAR",25,0)
 I +IBNEWINS S IBINSDA=+$$NEWINS^IBCNBMN(IBBUFDA) G:'IBINSDA ACCPTQ  S IBINSH="Created",RESULT(1)="IBINSDA^"_IBINSDA
"RTN","IBCNBAR",26,0)
 ;
"RTN","IBCNBAR",27,0)
 S RESULT(0)="-1^Add new GROUP INSURANCE PLAN failed"
"RTN","IBCNBAR",28,0)
 I +IBNEWGRP S IBGRPDA=+$$NEWGRP^IBCNBMN(IBBUFDA,+IBINSDA) G:'IBGRPDA ACCPTQ S IBGRPH="Created",RESULT(2)="IBGRPDA^"_IBGRPDA
"RTN","IBCNBAR",29,0)
 ;
"RTN","IBCNBAR",30,0)
 S RESULT(0)="-1^Add new patient insurance policy failed"
"RTN","IBCNBAR",31,0)
 I +IBNEWPOL S IBPOLDA=+$$NEWPOL^IBCNBMN(IBBUFDA,+IBINSDA,+IBGRPDA) G:'IBPOLDA ACCPTQ S IBPOLH="Created",RESULT(3)="IBPOLDA^"_IBPOLDA
"RTN","IBCNBAR",32,0)
 ;
"RTN","IBCNBAR",33,0)
 ;Only do this check for ICB ACCEPAPI^IBCNICB interface
"RTN","IBCNBAR",34,0)
 S RESULT(0)="-1^Move TYPE parameter value="_IBMVINS_" is invalid"
"RTN","IBCNBAR",35,0)
 I $G(IBSUPRES)>0,"^1^2^3^"'[("^"_IBMVINS_"^") Q
"RTN","IBCNBAR",36,0)
 ;
"RTN","IBCNBAR",37,0)
 S RESULT(0)="-1^Move buffer data to insurance files failed"
"RTN","IBCNBAR",38,0)
 I +IBINSDA,+IBMVINS D INS^IBCNBMI(IBBUFDA,IBINSDA,+IBMVINS,.RESULT) W:$G(IBSUPRES)'>0 !,"Insurance Company "_IBINSH_"..."
"RTN","IBCNBAR",39,0)
 I +IBINSDA,+IBMVGRP,+IBGRPDA D 
"RTN","IBCNBAR",40,0)
 . D GRP^IBCNBMI(IBBUFDA,IBGRPDA,+IBMVGRP,.RESULT)
"RTN","IBCNBAR",41,0)
 . ; For ICB Interface ensure INDIVIDUAL POLICY PATIENT (.1) field is
"RTN","IBCNBAR",42,0)
 . ; appropriate for IS THIS A GROUP POLICY? (.02) field
"RTN","IBCNBAR",43,0)
 . I $G(IBSUPRES)>0 D
"RTN","IBCNBAR",44,0)
 . . N IBFLDS,IBISGRP,IBPAT
"RTN","IBCNBAR",45,0)
 . . S IBISGRP=$$GET1^DIQ(355.3,IBGRPDA,.02,"I")
"RTN","IBCNBAR",46,0)
 . . S IBPAT=$$GET1^DIQ(355.3,IBGRPDA,.1,"I")
"RTN","IBCNBAR",47,0)
 . . ;Quit if Group Policy and .1 field isn't populated
"RTN","IBCNBAR",48,0)
 . . I IBISGRP>0,IBPAT'>0 Q
"RTN","IBCNBAR",49,0)
 . . ;Quit if Individual Policy and .1 field is populated.
"RTN","IBCNBAR",50,0)
 . . I IBISGRP'>0,IBPAT>0 Q
"RTN","IBCNBAR",51,0)
 . . ;Delete .1 field if Group Policy
"RTN","IBCNBAR",52,0)
 . . I IBISGRP>0 S IBFLDS(355.3,IBGRPDA_",",.1)="@"
"RTN","IBCNBAR",53,0)
 . . I IBISGRP'>0 S IBFLDS(355.3,IBGRPDA_",",.1)=DFN
"RTN","IBCNBAR",54,0)
 . . D FILE^DIE("","IBFLDS","IBERR")
"RTN","IBCNBAR",55,0)
 . W:$G(IBSUPRES)'>0 !,"Group/Plan "_IBGRPH_"..."
"RTN","IBCNBAR",56,0)
 I +IBINSDA,+IBMVPOL,+IBGRPDA,+IBPOLDA D POLICY^IBCNBMI(IBBUFDA,IBPOLDA,+IBMVPOL,.RESULT) W:$G(IBSUPRES)'>0 !,"Patient Policy "_IBPOLH_"..."
"RTN","IBCNBAR",57,0)
 I +IBELIG S RIEN=$O(^IBCN(365,"AF",IBBUFDA,""),-1) I RIEN D EBFILE^IBCNEHL1(DFN,IBPOLDA,RIEN,0) W:$G(IBSUPRES)'>0 !,"Eligibility/Benfits data Updated..."
"RTN","IBCNBAR",58,0)
 ;
"RTN","IBCNBAR",59,0)
 ;Only do this update for ICB ACCEPAPI^IBCNICB interface
"RTN","IBCNBAR",60,0)
 I $G(IBSUPRES)>0,+IBMVPOL,+IBGRPDA,+IBPOLDA,'IBNEWPOL D UPDPOL^IBCNICB(.RESULT,IBBUFDA,DFN,IBINSDA,IBGRPDA,IBPOLDA)
"RTN","IBCNBAR",61,0)
 ;
"RTN","IBCNBAR",62,0)
CLEANUP ; general updates and checks done whenever insurance is added/edited and clean up buffer file
"RTN","IBCNBAR",63,0)
 N IBSOURCE S IBSOURCE=$P($G(^IBA(355.33,IBBUFDA,0)),U,3)
"RTN","IBCNBAR",64,0)
 ;
"RTN","IBCNBAR",65,0)
 ;Don't do PAT^IBCNBMI for ICB ACCEPAPI^IBCNICB interface
"RTN","IBCNBAR",66,0)
 I $G(IBSUPRES)'>0,+IBPOLDA D PAT^IBCNBMI(DFN,IBPOLDA) ; update DOB&SSN of Pat Ins from Pat file
"RTN","IBCNBAR",67,0)
 D POL^IBCNSU41(DFN) ; update Tricare sponsor data
"RTN","IBCNBAR",68,0)
 D COVERED^IBCNSM31(DFN) ; update 'Covered by Insurance' field (2,.3192
"RTN","IBCNBAR",69,0)
 I +IBSOURCE=3 D IVM(1,IBBUFDA,$G(IVMREPTR),$G(IBSUPRES)) ; update/notify IVM
"RTN","IBCNBAR",70,0)
 ;Suppress Write in $$DUPCO^IBCNSOK1 if called from ICB Interface
"RTN","IBCNBAR",71,0)
 I +IBINSDA,+IBPOLDA S IBX=$$DUPCO^IBCNSOK1(DFN,IBINSDA,IBPOLDA,$S($G(IBSUPRES)>0:0,1:1)) ; warning if duplicate policy added for patient
"RTN","IBCNBAR",72,0)
 S RESULT(0)="0"_$S($G(IBX):"^Warning - Duplicate or inconsistent insurance data",1:"")
"RTN","IBCNBAR",73,0)
 ;
"RTN","IBCNBAR",74,0)
 ;Suppress Write in $$DUPPOL^IBCNSOK1 if called from ICB Interface
"RTN","IBCNBAR",75,0)
 I +IBGRPDA S IBX=$$DUPPOL^IBCNSOK1(IBGRPDA,$S($G(IBSUPRES)>0:0,1:1)) ; warning if duplicate plan was added
"RTN","IBCNBAR",76,0)
 S:IBX RESULT(0)=RESULT(0)_"^Warning - Duplicate or inconsistent policy data"
"RTN","IBCNBAR",77,0)
 ;
"RTN","IBCNBAR",78,0)
 ;Suppress Write in $$PTHLD^IBOHCR if called from ICB Interface
"RTN","IBCNBAR",79,0)
 I +IBNEWPOL I +$$PTHLD^IBOHCR(DFN,1,$S($G(IBSUPRES)>0:0,1:1)) D
"RTN","IBCNBAR",80,0)
 . W:$G(IBSUPRES)'>0 !!,"Patient's bills On Hold date updated due to new insurance."
"RTN","IBCNBAR",81,0)
 . S RESULT(0)=RESULT(0)_"^Patient's bills On Hold date updated due to new insurance"
"RTN","IBCNBAR",82,0)
 ;
"RTN","IBCNBAR",83,0)
 I $$HOLD^IBCNBLL(DFN) D
"RTN","IBCNBAR",84,0)
 . W:$G(IBSUPRES)'>0 !!,"There are bills On Hold for this patient."
"RTN","IBCNBAR",85,0)
 . S RESULT(0)=RESULT(0)_"^There are bills On Hold for this patient"
"RTN","IBCNBAR",86,0)
 ;
"RTN","IBCNBAR",87,0)
 ;Suppress DIR call functionality for ICB ACCEPAPI^IBCNICB interface
"RTN","IBCNBAR",88,0)
 D:$G(IBSUPRES)'>0
"RTN","IBCNBAR",89,0)
 . W !! S DIR(0)="FO",DIR("A")="Press 'V' to view the changes or Return to continue" D ^DIR
"RTN","IBCNBAR",90,0)
 . I Y="V"!(Y="v") W !! D INS^IBCNBCD(IBBUFDA,IBINSDA),WAIT^IBCNBUH,GRP^IBCNBCD(IBBUFDA,IBGRPDA),WAIT^IBCNBUH,POLICY^IBCNBCD(IBBUFDA,IBPOLDA),WAIT^IBCNBUH
"RTN","IBCNBAR",91,0)
 ;
"RTN","IBCNBAR",92,0)
 ; if source is eIV, update insurance record field in transmission queue (365.1/.13)
"RTN","IBCNBAR",93,0)
 I $P(^IBA(355.33,IBBUFDA,0),U,3)=5 D UPDIREC^IBCNEHL1($O(^IBCN(365,"AF",IBBUFDA,"")),IBPOLDA)
"RTN","IBCNBAR",94,0)
 ; update buffer file entry so only stub remains and status is changed
"RTN","IBCNBAR",95,0)
 D STATUS^IBCNBEE(IBBUFDA,"A",IBNEWINS,IBNEWGRP,IBNEWPOL) ; update buffer entry's status to accepted
"RTN","IBCNBAR",96,0)
 D DELDATA^IBCNBED(IBBUFDA) ; delete buffer's insurance/patient data
"RTN","IBCNBAR",97,0)
 ;
"RTN","IBCNBAR",98,0)
 S IBCDFN=IBPOLDA S:+IBSOURCE=3 IVMINSUP=1 D AFTER^IBCNSEVT,^IBCNSEVT ; insurance event driver
"RTN","IBCNBAR",99,0)
 ;
"RTN","IBCNBAR",100,0)
ACCPTQ Q
"RTN","IBCNBAR",101,0)
 ;
"RTN","IBCNBAR",102,0)
REJECT(IBBUFDA) ; process a buffer entry reject
"RTN","IBCNBAR",103,0)
 ;    1) update/notify IVM
"RTN","IBCNBAR",104,0)
 ;    2) buffer ins/group/policy data deleted
"RTN","IBCNBAR",105,0)
 ;    3) buffer entry status updated
"RTN","IBCNBAR",106,0)
 ;    4) if patient has no other active insurance then release any patient bills On Hold
"RTN","IBCNBAR",107,0)
 ;
"RTN","IBCNBAR",108,0)
 N IBSUPRES,RESULT
"RTN","IBCNBAR",109,0)
 ;Set IBSUPRES to 0 to not suppress I/O within REJECT
"RTN","IBCNBAR",110,0)
 S IBSUPRES=0
"RTN","IBCNBAR",111,0)
 ;
"RTN","IBCNBAR",112,0)
REJPROC ;Entry point for REJECAPI^IBCNICB (Patch 413)
"RTN","IBCNBAR",113,0)
 ;
"RTN","IBCNBAR",114,0)
 N DFN S DFN=+$G(^IBA(355.33,+IBBUFDA,60))
"RTN","IBCNBAR",115,0)
 S RESULT="-1^PATIENT IEN MISSING FROM BUFFER ENTRY" Q:'$G(DFN)
"RTN","IBCNBAR",116,0)
 I +$P($G(^IBA(355.33,+IBBUFDA,0)),U,3)=3 D IVM(0,IBBUFDA,$G(IVMREPTR),$G(IBSUPRES))
"RTN","IBCNBAR",117,0)
 ;
"RTN","IBCNBAR",118,0)
 S RESULT=0
"RTN","IBCNBAR",119,0)
 D STATUS^IBCNBEE(+IBBUFDA,"R",0,0,0),DELDATA^IBCNBED(+IBBUFDA) W:$G(IBSUPRES)'>0 " ... done."
"RTN","IBCNBAR",120,0)
 ;
"RTN","IBCNBAR",121,0)
 I +DFN,'$$INSURED^IBCNS1(DFN),'$$BUFFER^IBCNBU1(DFN) D
"RTN","IBCNBAR",122,0)
 . ;Suppress Write in $$PTHLD^IBOHCR if called from ICB Interface
"RTN","IBCNBAR",123,0)
 . I +$$PTHLD^IBOHCR(DFN,2,$S($G(IBSUPRES)>0:0,1:1)) D
"RTN","IBCNBAR",124,0)
 . . I $G(IBSUPRES)'>0 W !!,"Patient has no other active Insurance.",!,"All patient bills On Hold waiting for Insurance to be released." D WAIT^IBCNBUH
"RTN","IBCNBAR",125,0)
 . . S RESULT=RESULT_"^Patient has no other active Insurance.  All patient bills On Hold waiting for Insurance to be released."
"RTN","IBCNBAR",126,0)
 ;
"RTN","IBCNBAR",127,0)
 Q
"RTN","IBCNBAR",128,0)
 ;
"RTN","IBCNBAR",129,0)
 ;
"RTN","IBCNBAR",130,0)
IVM(AR,IBBUFDA,IVMREPTR,IBSUPRES) ; IVM must be notified whenever a buffer entry
"RTN","IBCNBAR",131,0)
 ; that originated in IVM is accepted or rejected. This lets IVM clean up
"RTN","IBCNBAR",132,0)
 ; its files since IVM also has a buffer type file of insurance uploaded
"RTN","IBCNBAR",133,0)
 ; from the IVM center.
"RTN","IBCNBAR",134,0)
 ; If rejected and Interactive Reads not suppressed, IVM then ask the 
"RTN","IBCNBAR",135,0)
 ; user for a reason it was rejected
"RTN","IBCNBAR",136,0)
 ; input:  AR = 1 if accepted, 0 if rejected
"RTN","IBCNBAR",137,0)
 ;    IBBUFDA = Internal Entry Number to 355.33 file
"RTN","IBCNBAR",138,0)
 ;   IVMREPTR = Internal Entry Number to 301.91 file (Optional)
"RTN","IBCNBAR",139,0)
 ;   IBSUPRES = If equals 1, suppress writes and interactive reads
"RTN","IBCNBAR",140,0)
 ;
"RTN","IBCNBAR",141,0)
 N DFN,IBX,IBY I $P($G(^IBA(355.33,+IBBUFDA,0)),U,3)'=3 Q
"RTN","IBCNBAR",142,0)
 ;
"RTN","IBCNBAR",143,0)
 S DFN=+$G(^IBA(355.33,+IBBUFDA,60))
"RTN","IBCNBAR",144,0)
 S IBX=$P($G(^IBA(355.33,+IBBUFDA,20)),U,1)_U_$P($G(^IBA(355.33,+IBBUFDA,21)),U,1)_U_$P($G(^IBA(355.33,+IBBUFDA,40)),U,3)
"RTN","IBCNBAR",145,0)
 ;
"RTN","IBCNBAR",146,0)
 S IBY=$$UPDATE^IVMLINS4(DFN,AR,IBX,$G(IVMREPTR),$G(IBSUPRES))
"RTN","IBCNBAR",147,0)
 Q
"RTN","IBCNBAR",148,0)
 ;
"RTN","IBCNBCD")
0^65^B84472806^B35866486
"RTN","IBCNBCD",1,0)
IBCNBCD ;ALB/ARH-Ins Buffer: display/compare buffer and existing ins ;1 Jun 97
"RTN","IBCNBCD",2,0)
 ;;2.0;INTEGRATED BILLING;**82,251,361,371,416**;21-MAR-94;Build 58
"RTN","IBCNBCD",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBCD",4,0)
 ;
"RTN","IBCNBCD",5,0)
INS(IBBUFDA,IBINSDA) ; display a buffer entry's insurance company fields and
"RTN","IBCNBCD",6,0)
 ; an existing insurance company's fields for comparison
"RTN","IBCNBCD",7,0)
 N IBEXTDA,IBFLD1,IBFLD2,X I '$G(IBBUFDA) Q
"RTN","IBCNBCD",8,0)
 ;
"RTN","IBCNBCD",9,0)
 S IBEXTDA=$G(IBINSDA)_","
"RTN","IBCNBCD",10,0)
 ;
"RTN","IBCNBCD",11,0)
 I +$P($G(^DIC(36,+IBEXTDA,0)),U,5) W !,?10,"Selected Insurance Company "_$$GET1^DIQ(36,IBEXTDA,.01)_" is Inactive!",!
"RTN","IBCNBCD",12,0)
 ;
"RTN","IBCNBCD",13,0)
 W ! D WRTFLD("  Insurance Data:  Buffer Data                     Selected Insurance Company   ",0,80,"BU")
"RTN","IBCNBCD",14,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,20.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(36,IBEXTDA,.01),1:"<none selected>") D WRTLN("Company Name:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBCD",15,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,20.05),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(36,IBEXTDA,1),1:"") D WRTLN("Reimburse?:",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",16,0)
 ;
"RTN","IBCNBCD",17,0)
 D DISPLAY(20.02,36,.131,"Phone Number:")
"RTN","IBCNBCD",18,0)
 D DISPLAY(20.03,36,.132,"Billing Phone:")
"RTN","IBCNBCD",19,0)
 D DISPLAY(20.04,36,.133,"Pre-Cert Phone:")
"RTN","IBCNBCD",20,0)
 D DISPLAY(21.01,36,.111,"Street [Line 1]:")
"RTN","IBCNBCD",21,0)
 D DISPLAY(21.02,36,.112,"Street [Line 2]:")
"RTN","IBCNBCD",22,0)
 D DISPLAY(21.03,36,.113,"Street [Line 3]:")
"RTN","IBCNBCD",23,0)
 D DISPLAY(21.04,36,.114,"City:")
"RTN","IBCNBCD",24,0)
 D DISPLAY(21.05,36,.115,"State:")
"RTN","IBCNBCD",25,0)
 D DISPLAY(21.06,36,.116,"Zip Code:")
"RTN","IBCNBCD",26,0)
 ;
"RTN","IBCNBCD",27,0)
 S IBFLD1="(bold=accepted on Merge)",IBFLD2="(bold=replaced on Overwrite)" D WRTLN("",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",28,0)
 Q
"RTN","IBCNBCD",29,0)
 ;
"RTN","IBCNBCD",30,0)
GRP(IBBUFDA,IBGRPDA) ; display a buffer entry's group insurance fields and an existing group/plan's fields for comparison
"RTN","IBCNBCD",31,0)
 N IBEXTDA,IBFLD1,IBFLD2,X I '$G(IBBUFDA) Q
"RTN","IBCNBCD",32,0)
 ;
"RTN","IBCNBCD",33,0)
 S IBEXTDA=$G(IBGRPDA)_","
"RTN","IBCNBCD",34,0)
 ;
"RTN","IBCNBCD",35,0)
 I +$P($G(^IBA(355.3,+IBEXTDA,0)),U,11) W !,?23,"Selected Group/Plan is Inactive!",!
"RTN","IBCNBCD",36,0)
 ;
"RTN","IBCNBCD",37,0)
 W ! D WRTFLD(" Group/Plan Data:  Buffer Data                     Selected Group/Plan          ",0,80,"BU")
"RTN","IBCNBCD",38,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,20.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(355.3,IBEXTDA,.01),1:"<none selected>") D WRTLN("Company Name:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBCD",39,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,40.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(355.3,IBEXTDA,.02),1:"") D WRTLN("Is Group Plan?:",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",40,0)
 ;
"RTN","IBCNBCD",41,0)
 D DISPLAY(40.02,355.3,.03,"Group Name:")
"RTN","IBCNBCD",42,0)
 D DISPLAY(40.03,355.3,.04,"Group Number:")
"RTN","IBCNBCD",43,0)
 D DISPLAY(40.1,355.3,6.02,"BIN:") ;;Daou/EEN - adding BIN and PCN
"RTN","IBCNBCD",44,0)
 D DISPLAY(40.11,355.3,6.03,"PCN:")
"RTN","IBCNBCD",45,0)
 D DISPLAY(40.04,355.3,.05,"Require UR:")
"RTN","IBCNBCD",46,0)
 D DISPLAY(40.05,355.3,.06,"Require Pre-Cert:")
"RTN","IBCNBCD",47,0)
 D DISPLAY(40.06,355.3,.12,"Require Amb Cert:")
"RTN","IBCNBCD",48,0)
 D DISPLAY(40.07,355.3,.07,"Exclude Pre-Cond:")
"RTN","IBCNBCD",49,0)
 D DISPLAY(40.08,355.3,.08,"Benefits Assign:")
"RTN","IBCNBCD",50,0)
 D DISPLAY(40.09,355.3,.09,"Type of Plan:")
"RTN","IBCNBCD",51,0)
 ;
"RTN","IBCNBCD",52,0)
 S IBFLD1="(bold=accepted on merge)",IBFLD2="(bold=replaced on overwrite)" D WRTLN("",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",53,0)
 Q
"RTN","IBCNBCD",54,0)
 ;
"RTN","IBCNBCD",55,0)
POLICY(IBBUFDA,IBPOLDA) ; display a buffer entry's patient policy fields and an existing patient policy's fields for comparison
"RTN","IBCNBCD",56,0)
 N DFN,IBEXTDA,IBFLD1,IBFLD2,X,Y,DIR,DIRUT I '$G(IBBUFDA) Q
"RTN","IBCNBCD",57,0)
 S DFN=+$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBCD",58,0)
 ;
"RTN","IBCNBCD",59,0)
 S IBEXTDA=$G(IBPOLDA)_","_DFN_","
"RTN","IBCNBCD",60,0)
 ;
"RTN","IBCNBCD",61,0)
 W ! D WRTFLD("     Policy Data:  Buffer Data                     Selected Policy              ",0,80,"BU")
"RTN","IBCNBCD",62,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,20.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(2.312,IBEXTDA,.01),1:"<none selected>") D WRTLN("Company Name:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBCD",63,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,40.03),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(2.312,IBEXTDA,21),1:"") D WRTLN("Group #:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBCD",64,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,60.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(2,DFN,.01),1:"") D WRTLN("Patient Name:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBCD",65,0)
 S IBFLD1=$P($$GET1^DIQ(355.33,IBBUFDA,.1),"@"),IBFLD2=$S(+IBEXTDA:$P($$GET1^DIQ(2.312,IBEXTDA,1.03),"@"),1:"") D WRTLN("Last Verified:",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",66,0)
 ;
"RTN","IBCNBCD",67,0)
 D DISPLAY(60.02,2.312,8,"Effective Date:")
"RTN","IBCNBCD",68,0)
 D DISPLAY(60.03,2.312,3,"Expiration Date:")
"RTN","IBCNBCD",69,0)
 D DISPLAY(60.04,2.312,1,"Subscriber Id:")
"RTN","IBCNBCD",70,0)
 D DISPLAY(60.05,2.312,6,"Whose Insurance:")
"RTN","IBCNBCD",71,0)
 D DISPLAY(60.06,2.312,16,"Relationship:")
"RTN","IBCNBCD",72,0)
 D DISPLAY(60.07,2.312,17,"Name of Insured:")
"RTN","IBCNBCD",73,0)
 D DISPLAY(60.08,2.312,3.01,"Insured's DOB:")
"RTN","IBCNBCD",74,0)
 D DISPLAY(60.09,2.312,3.05,"Insured's SSN:")
"RTN","IBCNBCD",75,0)
 D DISPLAY(60.13,2.312,3.12,"Insured's SEX:")
"RTN","IBCNBCD",76,0)
 D DISPLAY(60.1,2.312,4.01,"Primary Provider:")
"RTN","IBCNBCD",77,0)
 D DISPLAY(60.11,2.312,4.02,"Provider Phone:")
"RTN","IBCNBCD",78,0)
 D DISPLAY(60.12,2.312,.2,"Coor of Benefits:")
"RTN","IBCNBCD",79,0)
 D DISPLAY(61.01,2.312,2.1,"Emp Sponsored?:")
"RTN","IBCNBCD",80,0)
 D DISPLAY(62.01,2.312,5.01,"Patient Id:")
"RTN","IBCNBCD",81,0)
 D DISPLAY(62.02,2.312,3.06,"Subscr Str Ln 1:")
"RTN","IBCNBCD",82,0)
 D DISPLAY(62.03,2.312,3.07,"Subscr Str Ln 2:")
"RTN","IBCNBCD",83,0)
 D DISPLAY(62.04,2.312,3.08,"Subscr City:")
"RTN","IBCNBCD",84,0)
 D DISPLAY(62.05,2.312,3.09,"Subscr State:")
"RTN","IBCNBCD",85,0)
 D DISPLAY(62.06,2.312,3.1,"Subscr Zip:")
"RTN","IBCNBCD",86,0)
 ;
"RTN","IBCNBCD",87,0)
 I +$G(^IBA(355.33,IBBUFDA,61))!($$GET1^DIQ(2.312,IBEXTDA,2.1)="YES") D ESGHP
"RTN","IBCNBCD",88,0)
 ;
"RTN","IBCNBCD",89,0)
 S IBFLD1="(bold=accepted on merge)",IBFLD2="(bold=replaced on overwrite)" D WRTLN("",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",90,0)
 ;
"RTN","IBCNBCD",91,0)
 Q
"RTN","IBCNBCD",92,0)
 ;
"RTN","IBCNBCD",93,0)
ESGHP ; display employee sponsored group health plan
"RTN","IBCNBCD",94,0)
 W ! S DIR(0)="E",DIR("A")="Enter RETURN to continue" D ^DIR W ! Q:$D(DIRUT)
"RTN","IBCNBCD",95,0)
 ;
"RTN","IBCNBCD",96,0)
 D DISPLAY(61.02,2.312,2.015,"Employer Name:")
"RTN","IBCNBCD",97,0)
 D DISPLAY(61.03,2.312,2.11,"Emp Status:")
"RTN","IBCNBCD",98,0)
 D DISPLAY(61.04,2.312,2.12,"Retirement Date:")
"RTN","IBCNBCD",99,0)
 D DISPLAY(61.05,2.312,2.01,"Send to Employer:")
"RTN","IBCNBCD",100,0)
 D DISPLAY(61.06,2.312,2.02,"Emp Street Ln 1:")
"RTN","IBCNBCD",101,0)
 D DISPLAY(61.07,2.312,2.03,"Emp Street Ln 2:")
"RTN","IBCNBCD",102,0)
 D DISPLAY(61.08,2.312,2.04,"Emp Street Ln 3:")
"RTN","IBCNBCD",103,0)
 D DISPLAY(61.09,2.312,2.05,"Emp City:")
"RTN","IBCNBCD",104,0)
 D DISPLAY(61.1,2.312,2.06,"Emp State:")
"RTN","IBCNBCD",105,0)
 D DISPLAY(61.11,2.312,2.07,"Emp Zip Code:")
"RTN","IBCNBCD",106,0)
 D DISPLAY(61.12,2.312,2.08,"Emp Phone:")
"RTN","IBCNBCD",107,0)
 ;
"RTN","IBCNBCD",108,0)
 Q
"RTN","IBCNBCD",109,0)
 ;
"RTN","IBCNBCD",110,0)
ELIG(IBBUFDA,IBPOLDA) ; display eligibilty/benefit data
"RTN","IBCNBCD",111,0)
 N ATTR,BRESTR,BRELEN,BRPSTR,BRPLEN,CMPSTR,CMPLEN,DFN,EBISTR,EBILEN,EX,HCSSTR,HCSLEN,I,I1,IBVEBCOL,LEN,RESPIEN
"RTN","IBCNBCD",112,0)
 N RDATA,IDATA,NODATA,NOIDATA,ENDSEC,NOHSTR,NOHLEN,NOCSTR,NOCLEN,NOBSTR,NOBLEN
"RTN","IBCNBCD",113,0)
 S EBISTR="Eligibility/Benefit Information",EBILEN=$L(EBISTR)
"RTN","IBCNBCD",114,0)
 S CMPSTR="Composite Medical Procedure Information",CMPLEN=$L(CMPSTR)
"RTN","IBCNBCD",115,0)
 S HCSSTR="Health Care Service Delivery",HCSLEN=$L(HCSSTR)
"RTN","IBCNBCD",116,0)
 S BRESTR="Benefit Related Entity",BRELEN=$L(BRESTR)
"RTN","IBCNBCD",117,0)
 S BRPSTR="Benefit Related Provider Information",BRPLEN=$L(BRPSTR)
"RTN","IBCNBCD",118,0)
 S NOHSTR="   No Health Care Service Delivery data on file for this EB record.",NOHLEN=$L(NOHSTR)
"RTN","IBCNBCD",119,0)
 S NOCSTR="   No Composite Medical Procedure Information data on file for this EB record.",NOCLEN=$L(NOCSTR)
"RTN","IBCNBCD",120,0)
 S NOBSTR="   No Benefit Related Entity data on file for this EB record.",NOBLEN=$L(NOBSTR)
"RTN","IBCNBCD",121,0)
 S NODATA=1,NOIDATA=0,EX=0
"RTN","IBCNBCD",122,0)
 ; get the last reponse and make sure it contains EB data
"RTN","IBCNBCD",123,0)
 I $G(IBBUFDA) S RESPIEN=$O(^IBCN(365,"AF",IBBUFDA,""),-1) I RESPIEN S:$O(^IBCN(365,RESPIEN,2,""))'="" NODATA=0
"RTN","IBCNBCD",124,0)
 W ! D WRTFLD("        *** Non-editable Patient Eligibility/Benefit data from payer ***        ",0,80,"B")
"RTN","IBCNBCD",125,0)
 I NODATA W ! D WRTFLD("          *** No Patient Eligibility/Benefit data from payer found***           ",0,80,"B") G ELIGX
"RTN","IBCNBCD",126,0)
 W ! D WRTFLD("                   Payer Response                  VISTA Pt.Insurance           ",0,80,"BU")
"RTN","IBCNBCD",127,0)
 K ^TMP("RESP. EB DATA",$J),^TMP("INS. EB DATA",$J)
"RTN","IBCNBCD",128,0)
 S DFN=+$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBCD",129,0)
 S IBVEBCOL=1,IDATA=""
"RTN","IBCNBCD",130,0)
 ; fetch data from both eIV response and pat. insurance
"RTN","IBCNBCD",131,0)
 D INIT^IBCNES(365.02,RESPIEN_",","A",1,"RESP. EB DATA")
"RTN","IBCNBCD",132,0)
 D INIT^IBCNES(2.322,IBPOLDA_","_DFN_",","A",1,"INS. EB DATA")
"RTN","IBCNBCD",133,0)
 ; check if there is any existing pat. insurance data
"RTN","IBCNBCD",134,0)
 I $E(^TMP("INS. EB DATA",$J,"DISP",2,0),1,41)="    No eIV Eligibility/Benefit Data Found" S NOIDATA=1
"RTN","IBCNBCD",135,0)
 ; loop through response data and display it
"RTN","IBCNBCD",136,0)
 S (I,I1)="" F  S I=$O(^TMP("RESP. EB DATA",$J,"DISP",I)) Q:I=""!EX  D
"RTN","IBCNBCD",137,0)
 .I $Y+3>IOSL D PAUSE^VALM1 W @IOF I 'Y S EX=1 Q
"RTN","IBCNBCD",138,0)
 .S RDATA=^TMP("RESP. EB DATA",$J,"DISP",I,0)
"RTN","IBCNBCD",139,0)
 .; skip empty lines
"RTN","IBCNBCD",140,0)
 .I $TR(RDATA," ")="" Q
"RTN","IBCNBCD",141,0)
 .; if group title, display it and quit
"RTN","IBCNBCD",142,0)
 .I RDATA["                    eIV Eligibility/Benefit Data Group#" W ! D WRTFLD(RDATA,0,80,"B") S IDATA="" Q
"RTN","IBCNBCD",143,0)
 .; if section title, display it and quit
"RTN","IBCNBCD",144,0)
 .I $E(RDATA,1,EBILEN)=EBISTR W !! D WRTFLD(RDATA,0,80,"U") S I1=$$FNDNXT(I1,EBISTR,EBILEN),SECEND=0 Q
"RTN","IBCNBCD",145,0)
 .I $E(RDATA,1,CMPLEN)=CMPSTR W !! D WRTFLD(RDATA,0,80,"U") S I1=$$FNDNXT(I1,CMPSTR,CMPLEN),SECEND=0 Q
"RTN","IBCNBCD",146,0)
 .I $E(RDATA,1,HCSLEN)=HCSSTR W !! D WRTFLD(RDATA,0,80,"U") S I1=$$FNDNXT(I1,HCSSTR,HCSLEN),SECEND=0 Q
"RTN","IBCNBCD",147,0)
 .I $E(RDATA,1,BRELEN)=BRESTR W !! D WRTFLD(RDATA,0,80,"U") S I1=$$FNDNXT(I1,BRESTR,BRELEN),SECEND=0 Q
"RTN","IBCNBCD",148,0)
 .I $E(RDATA,1,BRPLEN)=BRPSTR W !! D WRTFLD(RDATA,0,80,"U") S I1=$$FNDNXT(I1,BRPSTR,BRPLEN),SECEND=0 Q
"RTN","IBCNBCD",149,0)
 .I $E(RDATA,1,NOHLEN)=NOHSTR W ! D WRTFLD(RDATA,0,80,"") Q
"RTN","IBCNBCD",150,0)
 .I $E(RDATA,1,NOCLEN)=NOCSTR W ! D WRTFLD(RDATA,0,80,"") Q
"RTN","IBCNBCD",151,0)
 .I $E(RDATA,1,NOBLEN)=NOBSTR W ! D WRTFLD(RDATA,0,80,"") Q
"RTN","IBCNBCD",152,0)
 .; build line with both eIV and pat. insurance values to compare
"RTN","IBCNBCD",153,0)
 .I 'NOIDATA,I1'="",'SECEND S IDATA=$G(^TMP("INS. EB DATA",$J,"DISP",I1,0)) D
"RTN","IBCNBCD",154,0)
 ..; if we run out of data for this section in pat. insurance
"RTN","IBCNBCD",155,0)
 ..I $E(IDATA,1,EBILEN)=EBISTR!($E(IDATA,1,CMPLEN)=CMPSTR)!($E(IDATA,1,HCSLEN)=HCSSTR) S SECEND=1,IDATA="" Q
"RTN","IBCNBCD",156,0)
 ..I $E(IDATA,1,BRELEN)=BRESTR!($E(IDATA,1,BRPLEN)=BRPSTR)!($E(IDATA,1,NOHLEN)=NOHSTR) S SECEND=1,IDATA="" Q
"RTN","IBCNBCD",157,0)
 ..S I1=I1+1 I '$D(^TMP("INS. EB DATA",$J,"DISP",I1)) S NOIDATA=1
"RTN","IBCNBCD",158,0)
 ..Q
"RTN","IBCNBCD",159,0)
 .W ! D WRTFLD(RDATA,0,47,""),WRTFLD(" | ",48,3,""),WRTFLD(IDATA,51,29,"")
"RTN","IBCNBCD",160,0)
 .Q
"RTN","IBCNBCD",161,0)
ELIGX ;
"RTN","IBCNBCD",162,0)
 I 'EX D PAUSE^VALM1
"RTN","IBCNBCD",163,0)
 K ^TMP("RESP. EB DATA",$J),^TMP("INS. EB DATA",$J)
"RTN","IBCNBCD",164,0)
 Q
"RTN","IBCNBCD",165,0)
 ;
"RTN","IBCNBCD",166,0)
FNDNXT(IDX,STR,LEN) ; find next node in INS. EB DATA after one that starts with string STR (section title)
"RTN","IBCNBCD",167,0)
 ; IDX - current index
"RTN","IBCNBCD",168,0)
 ; STR - string to find
"RTN","IBCNBCD",169,0)
 ; LEN - length of STR
"RTN","IBCNBCD",170,0)
 ; returns index of the node found or "" if nothing is found
"RTN","IBCNBCD",171,0)
 ;
"RTN","IBCNBCD",172,0)
 N I
"RTN","IBCNBCD",173,0)
 S I=IDX F  S I=$O(^TMP("INS. EB DATA",$J,"DISP",I)) Q:I=""  Q:($E(^TMP("INS. EB DATA",$J,"DISP",I,0),1,LEN)=STR)
"RTN","IBCNBCD",174,0)
 I +I S I=I+1 ; if found a match for section title, return the next index
"RTN","IBCNBCD",175,0)
 Q I
"RTN","IBCNBCD",176,0)
 ;
"RTN","IBCNBCD",177,0)
DISPLAY(BFLD,IFILE,IFLD,LABEL) ; extract, compare, write the two corresponding fields; one from buffer, one from ins files
"RTN","IBCNBCD",178,0)
 N BUFDATA,EXTDATA,IBOVER,IBMERG S EXTDATA=""
"RTN","IBCNBCD",179,0)
 S BUFDATA=$$GET1^DIQ(355.33,IBBUFDA,BFLD)
"RTN","IBCNBCD",180,0)
 I +IBEXTDA S EXTDATA=$$GET1^DIQ(IFILE,IBEXTDA,IFLD)
"RTN","IBCNBCD",181,0)
 ;
"RTN","IBCNBCD",182,0)
 S IBOVER=$S(BUFDATA'=""&(BUFDATA'=EXTDATA):"B",1:""),IBMERG=$S(EXTDATA="":"B",1:"")
"RTN","IBCNBCD",183,0)
 ;
"RTN","IBCNBCD",184,0)
 D WRTLN(LABEL,BUFDATA,EXTDATA,IBOVER,IBMERG)
"RTN","IBCNBCD",185,0)
 Q
"RTN","IBCNBCD",186,0)
 ;
"RTN","IBCNBCD",187,0)
WRTLN(LABEL,FLD1,FLD2,OVER,MERG,ATTR) ; write a line of formatted data with label and two fields
"RTN","IBCNBCD",188,0)
 S ATTR=$G(ATTR),OVER=ATTR_$G(OVER),MERG=ATTR_$G(MERG)
"RTN","IBCNBCD",189,0)
 S LABEL=$J(LABEL,17)_"  ",FLD1=FLD1_$J("",29-$L(FLD1)),FLD2=FLD2_$J("",29-$L(FLD2))
"RTN","IBCNBCD",190,0)
 W !
"RTN","IBCNBCD",191,0)
 D WRTFLD(LABEL,0,19,ATTR),WRTFLD(FLD1,19,29,MERG)
"RTN","IBCNBCD",192,0)
 D WRTFLD(" | ",48,3,ATTR),WRTFLD(FLD2,51,29,OVER)
"RTN","IBCNBCD",193,0)
 Q
"RTN","IBCNBCD",194,0)
 ;
"RTN","IBCNBCD",195,0)
WRTFLD(STRING,COL,WD,ATTR) ; write an individual field with display attributes
"RTN","IBCNBCD",196,0)
 N ATTRB,ATTRE,DX,DY,X,Y
"RTN","IBCNBCD",197,0)
 S ATTRB="",ATTRB=$S(ATTR["B":$G(IOINHI),1:"")_$S(ATTR["U":$G(IOUON),1:"")
"RTN","IBCNBCD",198,0)
 S ATTRE="",ATTRE=$S(ATTR["B":$G(IOINORM),1:"")_$S(ATTR["U":$G(IOUOFF),1:"")
"RTN","IBCNBCD",199,0)
 ;
"RTN","IBCNBCD",200,0)
 S DX=COL,DY=$Y X IOXY
"RTN","IBCNBCD",201,0)
 W ATTRB,$E(STRING,1,WD),ATTRE
"RTN","IBCNBCD",202,0)
 S DX=(COL+WD),DY=$Y X IOXY
"RTN","IBCNBCD",203,0)
 Q
"RTN","IBCNBEE")
0^67^B45989984^B44866934
"RTN","IBCNBEE",1,0)
IBCNBEE ;ALB/ARH-Ins Buffer: add/edit existing entries in buffer ;1 Jun 97
"RTN","IBCNBEE",2,0)
 ;;2.0;INTEGRATED BILLING;**82,184,252,251,356,361,371,377,416**;21-MAR-94;Build 58
"RTN","IBCNBEE",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBEE",4,0)
 ;
"RTN","IBCNBEE",5,0)
ADD(IBSOURCE) ; add a new buffer file entry (#355.33), sets only status (0) node data
"RTN","IBCNBEE",6,0)
 N IBARR,IBERR,IBIFN,IBX I '$G(IBSOURCE) S IBSOURCE=1
"RTN","IBCNBEE",7,0)
 ;
"RTN","IBCNBEE",8,0)
 S IBARR(355.33,"+1,",.01)="NOW",IBARR(355.33,"+1,",.03)=IBSOURCE
"RTN","IBCNBEE",9,0)
 D UPDATE^DIE("E","IBARR","IBIFN","IBERR")
"RTN","IBCNBEE",10,0)
 S IBX=+$G(IBIFN(1)) I $D(IBERR) S $P(IBX,U,2)=$G(IBERR("DIERR",1,"TEXT",1))
"RTN","IBCNBEE",11,0)
 Q IBX
"RTN","IBCNBEE",12,0)
 ;
"RTN","IBCNBEE",13,0)
STATUS(IBBUFDA,STATUS,NC,NG,NP) ; edit the status node
"RTN","IBCNBEE",14,0)
 ;
"RTN","IBCNBEE",15,0)
 N IBX,IBARR,IBIFN Q:'$G(IBBUFDA)  S IBIFN=IBBUFDA_","
"RTN","IBCNBEE",16,0)
 D CHK^DIE(355.33,.04,"",$G(STATUS),.IBX) Q:IBX="^"
"RTN","IBCNBEE",17,0)
 ;
"RTN","IBCNBEE",18,0)
 S IBARR(355.33,IBIFN,.04)=STATUS I STATUS="R" S (NC,NG,NP)=0
"RTN","IBCNBEE",19,0)
 S IBARR(355.33,IBIFN,.07)=+$G(NC),IBARR(355.33,IBIFN,.08)=+$G(NG),IBARR(355.33,IBIFN,.09)=+$G(NP)
"RTN","IBCNBEE",20,0)
 D FILE^DIE("E","IBARR")
"RTN","IBCNBEE",21,0)
 Q
"RTN","IBCNBEE",22,0)
 ;
"RTN","IBCNBEE",23,0)
INS(IBBUFDA,FLDS) ; edit the insurance company portion of a buffer file entry
"RTN","IBCNBEE",24,0)
 ;
"RTN","IBCNBEE",25,0)
 N DIC,DIE,DA,DR,X,Y,IBCNEXT1
"RTN","IBCNBEE",26,0)
 I $P($G(^IBA(355.33,+$G(IBBUFDA),0)),U,4)'="E" Q
"RTN","IBCNBEE",27,0)
 I $G(FLDS)="" S FLDS="MR"
"RTN","IBCNBEE",28,0)
 ;
"RTN","IBCNBEE",29,0)
 ; ESG - 6/18/02 - SDD 5.1.4 - Usage of Auto Match when editing
"RTN","IBCNBEE",30,0)
 ;     - the insurance company name in the buffer.  Also added an
"RTN","IBCNBEE",31,0)
 ;     - input transform (see below) to clean up the data coming in.
"RTN","IBCNBEE",32,0)
 ;     - fetch the current buffer ins co name
"RTN","IBCNBEE",33,0)
 ;
"RTN","IBCNBEE",34,0)
 I FLDS="MR" S IBCNEXT1=$P($G(^IBA(355.33,IBBUFDA,20)),U,1)
"RTN","IBCNBEE",35,0)
 ;
"RTN","IBCNBEE",36,0)
 S DR=$P($T(@(FLDS_"INS")+1),";;",2,9999) Q:DR=""
"RTN","IBCNBEE",37,0)
 ;
"RTN","IBCNBEE",38,0)
 I FLDS="MR" Q:$$INSNAME(IBBUFDA)<0  S DR=$P($T(@(FLDS_"INS")+1),";;",2,9999),DR=$P(DR,";",2,99999)
"RTN","IBCNBEE",39,0)
 ;
"RTN","IBCNBEE",40,0)
 S DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR
"RTN","IBCNBEE",41,0)
 Q
"RTN","IBCNBEE",42,0)
 ;
"RTN","IBCNBEE",43,0)
GRP(IBBUFDA,FLDS) ; edit the group/plan portion of the buffer file entry
"RTN","IBCNBEE",44,0)
 ;
"RTN","IBCNBEE",45,0)
 N DIC,DIE,DA,DR,X,Y I $P($G(^IBA(355.33,+$G(IBBUFDA),0)),U,4)'="E" Q
"RTN","IBCNBEE",46,0)
 I $G(FLDS)="" S FLDS="MR"
"RTN","IBCNBEE",47,0)
 ;
"RTN","IBCNBEE",48,0)
 S DR=$P($T(@(FLDS_"GRP")+1),";;",2,9999) Q:DR=""
"RTN","IBCNBEE",49,0)
 S DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR
"RTN","IBCNBEE",50,0)
 Q
"RTN","IBCNBEE",51,0)
 ;
"RTN","IBCNBEE",52,0)
POLICY(IBBUFDA,FLDS) ; edit the patient policy portion of the buffer file entry
"RTN","IBCNBEE",53,0)
 ;
"RTN","IBCNBEE",54,0)
 N DIC,DIE,DA,DR,X,Y,IBZZ I $P($G(^IBA(355.33,+$G(IBBUFDA),0)),U,4)'="E" Q
"RTN","IBCNBEE",55,0)
 I $G(FLDS)="" S FLDS="MR"
"RTN","IBCNBEE",56,0)
 ;
"RTN","IBCNBEE",57,0)
 S DR=$P($T(@(FLDS_"POL")+1),";;",2,9999) Q:DR=""
"RTN","IBCNBEE",58,0)
 S DIE="^IBA(355.33,",DA=IBBUFDA
"RTN","IBCNBEE",59,0)
 S DIE("NO^")="BACKOUTOK" D ^DIE K DIE,DA,DR Q:$D(Y)
"RTN","IBCNBEE",60,0)
 ;
"RTN","IBCNBEE",61,0)
 I FLDS="MR" D ESGHP(IBBUFDA)
"RTN","IBCNBEE",62,0)
 Q
"RTN","IBCNBEE",63,0)
 ;
"RTN","IBCNBEE",64,0)
ESGHP(IBBUFDA) ; sponsoring employer information
"RTN","IBCNBEE",65,0)
 N DIR,DIRUT,DUOUT,DTOUT,VAOA,VAERR,VA,DFN,IB60,IBE,IBEMPST,IBREL
"RTN","IBCNBEE",66,0)
 ;
"RTN","IBCNBEE",67,0)
 ; if insured is patient or spouse, ask if insured's current employer is the plan's sponsoring employer, if yes auto stuff it
"RTN","IBCNBEE",68,0)
 I +$G(^IBA(355.33,IBBUFDA,61)) W ! S IB60=$G(^IBA(355.33,IBBUFDA,60)) D  Q:$D(DIRUT)
"RTN","IBCNBEE",69,0)
 . ; sponsoring employer is current employer?
"RTN","IBCNBEE",70,0)
 . S DFN=+IB60,IBREL=$P(IB60,U,6),VAOA("A")=$S(IBREL="01":5,IBREL="02":6,1:"") I 'DFN!(VAOA("A")="") Q
"RTN","IBCNBEE",71,0)
 . D OAD^VADPT I $G(VAOA(9))="" Q
"RTN","IBCNBEE",72,0)
 . S DIR("?")="Enter Yes if this plan is sponsored by the "_$S(IBREL="01":"patient's",1:"spouse's")_" current employer."
"RTN","IBCNBEE",73,0)
 . S DIR("?",1)="Entering Yes will result in the "_$S(IBREL="01":"patient's",1:"spouse's")_" current employer data being",DIR("?",2)="added to the policy as the Sponsoring Employer data.",DIR("?",3)=""
"RTN","IBCNBEE",74,0)
 . S DIR("A")="Current Employer "_VAOA(9)_" Sponsors this Plan",DIR("B")="No",DIR(0)="Y" D ^DIR W ! I Y'=1 Q
"RTN","IBCNBEE",75,0)
 . ;
"RTN","IBCNBEE",76,0)
 . D DELEMP(IBBUFDA) ; delete any data already contained in these fields
"RTN","IBCNBEE",77,0)
 . ;
"RTN","IBCNBEE",78,0)
 . ; if the insured's current employer sponsors the plan then stuff that employer's address into the buffer
"RTN","IBCNBEE",79,0)
 . S IBE=$S(IBREL="01":.311,1:.25),IBEMPST=$P($G(^DPT(DFN,IBE)),U,15)
"RTN","IBCNBEE",80,0)
 . S DR="61.02///"_VAOA(9)_";61.03///"_IBEMPST_";61.06///"_$E(VAOA(1),1,30)_";61.07///"_$E(VAOA(2),1,30)
"RTN","IBCNBEE",81,0)
 . S DR=DR_";61.08///"_$E(VAOA(3),1,30)_";61.09///"_$E(VAOA(4),1,20)_";61.1////"_$P(VAOA(5),U,1)
"RTN","IBCNBEE",82,0)
 . S DR=DR_";61.11////"_$P(VAOA(11),U,1)_";61.12///"_$E(VAOA(8),1,15)
"RTN","IBCNBEE",83,0)
 . S DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR
"RTN","IBCNBEE",84,0)
 ;
"RTN","IBCNBEE",85,0)
 ; if employer sponsored plan, edit buffer entry's sponsoring employer info
"RTN","IBCNBEE",86,0)
 I +$G(^IBA(355.33,IBBUFDA,61)) S DR="61.02:61.12",DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR
"RTN","IBCNBEE",87,0)
 ;
"RTN","IBCNBEE",88,0)
 ; if not employer sponsored plan, delete any existing sponsoring employer data
"RTN","IBCNBEE",89,0)
 I $D(^IBA(355.33,IBBUFDA,61)),'$G(^IBA(355.33,IBBUFDA,61)) D DELEMP(IBBUFDA)
"RTN","IBCNBEE",90,0)
 Q
"RTN","IBCNBEE",91,0)
 ;
"RTN","IBCNBEE",92,0)
DELEMP(IBBUFDA) ; delete sponsoring employer data
"RTN","IBCNBEE",93,0)
 N DIC,DIE,DA,DR,X,Y Q:'$D(^IBA(355.33,+$G(IBBUFDA),61))
"RTN","IBCNBEE",94,0)
 S DR="61.02///@;61.03///@;61.04///@;61.05///@;61.06///@;61.07///@;61.08///@;61.09///@;61.10///@;61.11///@;61.12///@"
"RTN","IBCNBEE",95,0)
 S DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR
"RTN","IBCNBEE",96,0)
 Q
"RTN","IBCNBEE",97,0)
 ;
"RTN","IBCNBEE",98,0)
INSHELP ;
"RTN","IBCNBEE",99,0)
 W !!,"------------------------ INSURANCE COMPANY INFORMATION -------------------------",!
"RTN","IBCNBEE",100,0)
 Q
"RTN","IBCNBEE",101,0)
GRPHELP ;
"RTN","IBCNBEE",102,0)
 W !!,"---------------------------- GROUP/PLAN INFORMATION ----------------------------"
"RTN","IBCNBEE",103,0)
 W !," The following data defines a specific Group or Plan provided by an Insurance "
"RTN","IBCNBEE",104,0)
 W !," Company.  This may be either a group plan with many potential members or an "
"RTN","IBCNBEE",105,0)
 W !," individual plan with a single member.",!
"RTN","IBCNBEE",106,0)
 Q
"RTN","IBCNBEE",107,0)
POLHELP ;
"RTN","IBCNBEE",108,0)
 W !!,"---------------------- POLICY AND SUBSCRIBER INFORMATION -----------------------"
"RTN","IBCNBEE",109,0)
 W !," The following data defines the subscriber specific policy information for a "
"RTN","IBCNBEE",110,0)
 W !," particular Insurance Plan.  The subscriber, the insured, and the policy holder "
"RTN","IBCNBEE",111,0)
 W !," all refer to the person who is a member of the plan and therefore holds the "
"RTN","IBCNBEE",112,0)
 W !," policy.  The patient must be covered under the plan but may not be the policy"
"RTN","IBCNBEE",113,0)
 W !," holder.",!
"RTN","IBCNBEE",114,0)
 Q
"RTN","IBCNBEE",115,0)
 ;
"RTN","IBCNBEE",116,0)
INSNAME(IBBUFDA) ;  Reset insurance company name
"RTN","IBCNBEE",117,0)
 N DR,DIE,DA,Y,X,IBX,IBNEW,IBNAME
"RTN","IBCNBEE",118,0)
 S IBX=-1
"RTN","IBCNBEE",119,0)
 S DR=20.01,DIE="^IBA(355.33,",DA=IBBUFDA
"RTN","IBCNBEE",120,0)
 D ^DIE
"RTN","IBCNBEE",121,0)
 I '$D(Y) S IBNEW=$$CHECK(IBBUFDA)
"RTN","IBCNBEE",122,0)
 I +$G(IBNEW)'<0,$G(IBNEW)'=0,$D(IBNEW) S DR=$P(DR,";",1)_"////"_IBNEW S DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR I '$D(Y) S IBX=0
"RTN","IBCNBEE",123,0)
 ; BHS - 10/15/03 - If user entered a caret during $$CHECK still set
"RTN","IBCNBEE",124,0)
 ;                  return value to 0 so the user can edit the other
"RTN","IBCNBEE",125,0)
 ;                  INS fields
"RTN","IBCNBEE",126,0)
 I $G(IBNEW)=0!($G(IBNEW)=-1) S IBX=0
"RTN","IBCNBEE",127,0)
 Q IBX
"RTN","IBCNBEE",128,0)
 ;
"RTN","IBCNBEE",129,0)
CHECK(IBBUFDA) ; Select Insurance Company Name and Automatch
"RTN","IBCNBEE",130,0)
 ; Buffer file (#355.33), field# 20.01.
"RTN","IBCNBEE",131,0)
 ; ESG - 6/18/02 - SDD 5.1.4 - Usage of Auto Match when editing the
"RTN","IBCNBEE",132,0)
 ;       insurance company name.  Also, display the insurance company
"RTN","IBCNBEE",133,0)
 ;       name lookup/lister and the Auto Match lookup/lister.
"RTN","IBCNBEE",134,0)
 ;
"RTN","IBCNBEE",135,0)
 NEW IBNEW,IBNAME,AMLIST
"RTN","IBCNBEE",136,0)
 ;
"RTN","IBCNBEE",137,0)
 S IBNEW=0,IBNAME=$P($G(^IBA(355.33,$G(IBBUFDA),20)),U,1)
"RTN","IBCNBEE",138,0)
 I IBNAME="" G CHECKQ
"RTN","IBCNBEE",139,0)
 ;
"RTN","IBCNBEE",140,0)
 ; Perform an insurance company lookup/lister
"RTN","IBCNBEE",141,0)
 ; BHS - 10/15/03 - Removed quits when user enters a caret to quit the
"RTN","IBCNBEE",142,0)
 ;                  the ins lister or Auto Match lister
"RTN","IBCNBEE",143,0)
 S IBNEW=$$DICINS^IBCNBU1(IBNAME,1,10)
"RTN","IBCNBEE",144,0)
 I IBNEW=0!(IBNEW<0) D
"RTN","IBCNBEE",145,0)
 . I '$$AMLOOK^IBCNEUT1(IBNAME,1,.AMLIST) Q
"RTN","IBCNBEE",146,0)
 . S IBNEW=$$AMSEL^IBCNEUT1(.AMLIST)
"RTN","IBCNBEE",147,0)
 ;
"RTN","IBCNBEE",148,0)
 ; user chose a valid insurance company - possible Auto Match add
"RTN","IBCNBEE",149,0)
 I IBNEW'<0,IBNEW'=0 D AMADD^IBCNEUT6(X,IBCNEXT1)
"RTN","IBCNBEE",150,0)
 ;
"RTN","IBCNBEE",151,0)
CHECKQ Q IBNEW
"RTN","IBCNBEE",152,0)
 ;
"RTN","IBCNBEE",153,0)
MRINS ; Insurance Company fields asked of MCCR users in the Buffer Process options (all buffer ins fields 20.01-21.06)
"RTN","IBCNBEE",154,0)
 ;;20.01;20.05;20.02:20.04;21.01;I X="" S Y="@111";21.02;I X="" S Y="@111";21.03;@111;21.04:21.06
"RTN","IBCNBEE",155,0)
 ;
"RTN","IBCNBEE",156,0)
MRGRP ; Group/Plan fields asked of MCCR users in the Buffer Process options (all buffer grp fields 40.01-40.09) ;;Daou/EEN adding BIN and PCN (40.1,40.11)
"RTN","IBCNBEE",157,0)
 ;;40.01:40.03;40.1;40.11;40.09;40.04:40.08
"RTN","IBCNBEE",158,0)
 ;
"RTN","IBCNBEE",159,0)
MRPOL ; Patient Policy fields asked of MCCR users in the Buffer Process options (all buffer policy fields except ESGHP,60.05,60.06 60.02-61.01
"RTN","IBCNBEE",160,0)
 ;;60.02;60.03;60.14PT. RELATIONSHIP TO INSURED;S IBZZ=X;60.04T;I IBZZ'="18" S Y="@111";60.07///1;60.08///@;60.09///@;62.01///@;S Y="@112";@111;60.07;60.08;60.13;62.01T;@112;60.1:60.12;.03;61.01;62.02;62.03;62.04;62.05;62.06
"RTN","IBCNBEE",161,0)
 ;
"RTN","IBCNBEE",162,0)
OTINS ; Insurance Company fields asked of non-MCCR users entering buffer data from options outside IB (20.01-20.04,21.01-21.06)
"RTN","IBCNBEE",163,0)
 ;;20.01:20.04;21.01;I X="" S Y="@111";21.02;I X="" S Y="@111";21.03;@111;21.04:21.06
"RTN","IBCNBEE",164,0)
 ;
"RTN","IBCNBEE",165,0)
OTGRP ; Group/Plan fields asked of non-MCCR users entering buffer data from options outside IB (40.02,40.03,40.09) ;;Daou/EEN-adding BIN & PCN (40.1,40.11)
"RTN","IBCNBEE",166,0)
 ;;40.02;40.03;40.1;40.11;40.09
"RTN","IBCNBEE",167,0)
 ;
"RTN","IBCNBEE",168,0)
OTPOL ; Patient Policy fields asked of non-MCCR users entering buffer data from options outside IB (60.02-60.08)
"RTN","IBCNBEE",169,0)
 ;;60.02;60.03;60.14PT. RELATIONSHIP TO INSURED;S IBZZ=X;60.04T;I IBZZ'="18" S Y="@111";60.07///1;60.08///@;60.09///@;62.01///@;S Y="@112";@111;60.07;60.08;60.13;62.01T;@112;62.02;62.03;62.04;62.05;62.06
"RTN","IBCNBLA")
0^58^B65832730^B65200465
"RTN","IBCNBLA",1,0)
IBCNBLA ;ALB/ARH - Ins Buffer: LM action calls ;1 Jun 97
"RTN","IBCNBLA",2,0)
 ;;2.0;INTEGRATED BILLING;**82,149,153,184,271,416**;21-MAR-94;Build 58
"RTN","IBCNBLA",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBLA",4,0)
 ;
"RTN","IBCNBLA",5,0)
NEWSCRN(TEMPLAT,TMPARR,IBBUFDA) ; open a new screen for a specific buffer entry, pass in LM template and the array to select from
"RTN","IBCNBLA",6,0)
 ; if temp array is defined then user selects the buffer entry, otherwise use entry passed in
"RTN","IBCNBLA",7,0)
 ;
"RTN","IBCNBLA",8,0)
 I $G(TMPARR)'="" N IBBUFDA S IBBUFDA=$$SEL(TMPARR)
"RTN","IBCNBLA",9,0)
 I +$G(IBBUFDA),$G(TEMPLAT)'="",+$$LOCK^IBCNBU1(IBBUFDA,1) D EN^VALM(TEMPLAT) D UNLOCK^IBCNBU1(IBBUFDA)
"RTN","IBCNBLA",10,0)
 S VALMBCK="R"
"RTN","IBCNBLA",11,0)
 Q
"RTN","IBCNBLA",12,0)
 ;
"RTN","IBCNBLA",13,0)
SEL(TMPARR) ; user selects one of the items from the list on the screen
"RTN","IBCNBLA",14,0)
 ;
"RTN","IBCNBLA",15,0)
 N VALMY,IBX,IBY,IBSELN S IBX=""
"RTN","IBCNBLA",16,0)
 I $G(TMPARR)'="",'$O(^TMP(TMPARR,$J,0)) D  G SELQ
"RTN","IBCNBLA",17,0)
 . W !!,"There are no '",$S($G(VALM("ENTITY"))'="":VALM("ENTITY"),1:"record"),"s' to select.",! S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNBLA",18,0)
 ;
"RTN","IBCNBLA",19,0)
 D EN^VALM2($G(XQORNOD(0)),"OS")
"RTN","IBCNBLA",20,0)
 I $D(VALMY),$G(TMPARR)'="" S IBSELN=0 F  S IBSELN=$O(VALMY(IBSELN)) Q:'IBSELN  D
"RTN","IBCNBLA",21,0)
 . S IBX=$P($G(^TMP(TMPARR,$J,IBSELN)),U,2,99)
"RTN","IBCNBLA",22,0)
 . ;
"RTN","IBCNBLA",23,0)
 . I TMPARR="IBCNBLLX" S IBY=$P($G(^IBA(355.33,+IBX,0)),U,4) I IBY'="E" D  S IBX=""
"RTN","IBCNBLA",24,0)
 .. W !!," >>> Selected entry has been ",$S(IBY="A":"ACCEPTED",IBY="R":"REJECTED",1:"UNKNOWN STATUS")
"RTN","IBCNBLA",25,0)
 .. W " and may no longer be edited or modified.",! S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNBLA",26,0)
 ;
"RTN","IBCNBLA",27,0)
SELQ Q IBX
"RTN","IBCNBLA",28,0)
 ;
"RTN","IBCNBLA",29,0)
PNXTSCRN(TEMPLAT,IBBUFDA) ; open a new screen for a buffer entry, rebuild the process screen on return since it may have changed
"RTN","IBCNBLA",30,0)
 D NEWSCRN^IBCNBLA(TEMPLAT,"",IBBUFDA)
"RTN","IBCNBLA",31,0)
 D CLEAN^VALM10,INIT^IBCNBLP,HDR^IBCNBLP S VALMBCK="R"
"RTN","IBCNBLA",32,0)
 Q
"RTN","IBCNBLA",33,0)
 ;
"RTN","IBCNBLA",34,0)
LNXTSCRN(TEMPLAT,TMPARR,AVIEW) ; select entries from list to process/expand
"RTN","IBCNBLA",35,0)
 ;
"RTN","IBCNBLA",36,0)
 ; This procedure is called from the ListMan action protocols for
"RTN","IBCNBLA",37,0)
 ; processing and expanding buffer entries.
"RTN","IBCNBLA",38,0)
 ;    TEMPLAT - list template name for associated action
"RTN","IBCNBLA",39,0)
 ;    TMPARR  - subscript in scratch global
"RTN","IBCNBLA",40,0)
 ;
"RTN","IBCNBLA",41,0)
 NEW IBCNEZAR,IBCNEZEN,IBCNEZCT,IBCNEZGD,IBCNEZBF,IBCNEZQ,IBBUFDA
"RTN","IBCNBLA",42,0)
 NEW ACT,REMAIN,DIR,X,Y,DIRUT,DTOUT,DUOUT,DIROUT
"RTN","IBCNBLA",43,0)
 D FULL^VALM1
"RTN","IBCNBLA",44,0)
 D MULSEL^IBCNBLA2(TMPARR,.IBCNEZAR,.IBCNEZGD)
"RTN","IBCNBLA",45,0)
 I '$D(IBCNEZAR) G LNXTX
"RTN","IBCNBLA",46,0)
 ;
"RTN","IBCNBLA",47,0)
 ; loop through the list of selected buffer entries
"RTN","IBCNBLA",48,0)
 S IBCNEZEN=0,IBCNEZCT=0
"RTN","IBCNBLA",49,0)
 F  S IBCNEZEN=$O(IBCNEZAR(IBCNEZEN)) Q:'IBCNEZEN  D
"RTN","IBCNBLA",50,0)
 . I 'IBCNEZAR(IBCNEZEN) Q      ; user could not get this one
"RTN","IBCNBLA",51,0)
 . S IBCNEZBF=$P(IBCNEZAR(IBCNEZEN),U,3)    ; buffer ien
"RTN","IBCNBLA",52,0)
 . S IBBUFDA=IBCNEZBF           ; just in case IB rtns need this
"RTN","IBCNBLA",53,0)
 . S IBCNEZCT=IBCNEZCT+1
"RTN","IBCNBLA",54,0)
 . I '$D(IBCNEZQ) D
"RTN","IBCNBLA",55,0)
 .. D EN^VALM(TEMPLAT)                      ; invoke list template
"RTN","IBCNBLA",56,0)
 .. I $G(IBFASTXT) S IBCNEZQ=1 Q            ; Fast Exit processing
"RTN","IBCNBLA",57,0)
 .. S ACT="expand"
"RTN","IBCNBLA",58,0)
 .. I TEMPLAT["PROCESS" S ACT="process"
"RTN","IBCNBLA",59,0)
 .. S REMAIN=IBCNEZGD-IBCNEZCT
"RTN","IBCNBLA",60,0)
 .. I 'REMAIN Q
"RTN","IBCNBLA",61,0)
 .. W @IOF
"RTN","IBCNBLA",62,0)
 .. W !!!,"You are ",ACT,"ing multiple insurance buffer entries."
"RTN","IBCNBLA",63,0)
 .. W !,"You just completed entry number ",IBCNEZEN,"  (",IBCNEZCT," of ",IBCNEZGD,")."
"RTN","IBCNBLA",64,0)
 .. S DIR(0)="Y"
"RTN","IBCNBLA",65,0)
 .. S DIR("A")="Do you want to "_ACT_" the remaining entry"
"RTN","IBCNBLA",66,0)
 .. I REMAIN>1 S DIR("A")="Do you want to "_ACT_" the remaining "_REMAIN_" entries"
"RTN","IBCNBLA",67,0)
 .. S DIR("B")="YES"
"RTN","IBCNBLA",68,0)
 .. W ! D ^DIR K DIR
"RTN","IBCNBLA",69,0)
 .. I 'Y S IBCNEZQ=1       ; User said NO so set the Quitting variable
"RTN","IBCNBLA",70,0)
 .. Q
"RTN","IBCNBLA",71,0)
 . ;
"RTN","IBCNBLA",72,0)
 . ; Make sure to unlock the buffer entry in all cases when finished,
"RTN","IBCNBLA",73,0)
 . ; even if the user wants to quit out of this loop
"RTN","IBCNBLA",74,0)
 . D UNLOCK^IBCNBU1(IBCNEZBF)
"RTN","IBCNBLA",75,0)
 . Q
"RTN","IBCNBLA",76,0)
LNXTX ;
"RTN","IBCNBLA",77,0)
 S VALMBCK="R"
"RTN","IBCNBLA",78,0)
 Q
"RTN","IBCNBLA",79,0)
 ;
"RTN","IBCNBLA",80,0)
LREJECT(TMPARR) ; user select entries from list then reject/delete them
"RTN","IBCNBLA",81,0)
 ;
"RTN","IBCNBLA",82,0)
 ; This procedure is called from the ListMan action protocol for
"RTN","IBCNBLA",83,0)
 ; rejecting buffer entries.
"RTN","IBCNBLA",84,0)
 ;    TMPARR  - subscript in scratch global
"RTN","IBCNBLA",85,0)
 ;
"RTN","IBCNBLA",86,0)
 NEW IBCNEZAR,IBCNEZEN,IBCNEZCT,IBCNEZGD,IBCNEZBF,IBCNEZQ,IBBUFDA
"RTN","IBCNBLA",87,0)
 D FULL^VALM1
"RTN","IBCNBLA",88,0)
 D MULSEL^IBCNBLA2(TMPARR,.IBCNEZAR,.IBCNEZGD)
"RTN","IBCNBLA",89,0)
 I '$D(IBCNEZAR) G LREJX
"RTN","IBCNBLA",90,0)
 ;
"RTN","IBCNBLA",91,0)
 ; loop through the list of selected buffer entries
"RTN","IBCNBLA",92,0)
 S IBCNEZEN=0,IBCNEZCT=0
"RTN","IBCNBLA",93,0)
 F  S IBCNEZEN=$O(IBCNEZAR(IBCNEZEN)) Q:'IBCNEZEN  D
"RTN","IBCNBLA",94,0)
 . I 'IBCNEZAR(IBCNEZEN) Q      ; user could not get this one
"RTN","IBCNBLA",95,0)
 . S IBCNEZBF=$P(IBCNEZAR(IBCNEZEN),U,3)
"RTN","IBCNBLA",96,0)
 . S IBBUFDA=IBCNEZBF           ; just in case IB rtns need this
"RTN","IBCNBLA",97,0)
 . S IBCNEZCT=IBCNEZCT+1
"RTN","IBCNBLA",98,0)
 . I '$D(IBCNEZQ) D
"RTN","IBCNBLA",99,0)
 .. W @IOF,!?2,$G(IORVON)
"RTN","IBCNBLA",100,0)
 .. W " Entry ",IBCNEZEN,"  (",IBCNEZCT," of ",IBCNEZGD,") "
"RTN","IBCNBLA",101,0)
 .. W $G(IORVOFF)
"RTN","IBCNBLA",102,0)
 .. D REJECT^IBCNBLA1(IBCNEZBF,.IBCNEZQ)
"RTN","IBCNBLA",103,0)
 .. ;
"RTN","IBCNBLA",104,0)
 .. ; If the user wants to stop and we're not processing the last one,
"RTN","IBCNBLA",105,0)
 .. ; then determine if we should process the remaining entries
"RTN","IBCNBLA",106,0)
 .. ;
"RTN","IBCNBLA",107,0)
 .. I $D(IBCNEZQ),IBCNEZCT<IBCNEZGD D
"RTN","IBCNBLA",108,0)
 ... NEW REMAIN,DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNBLA",109,0)
 ... S REMAIN=IBCNEZGD-IBCNEZCT
"RTN","IBCNBLA",110,0)
 ... S DIR(0)="Y"
"RTN","IBCNBLA",111,0)
 ... S DIR("A")="Do you want to process the remaining entry"
"RTN","IBCNBLA",112,0)
 ... I REMAIN>1 S DIR("A")="Do you want to process the remaining "_REMAIN_" entries"
"RTN","IBCNBLA",113,0)
 ... S DIR("B")="NO"
"RTN","IBCNBLA",114,0)
 ... W ! D ^DIR K DIR
"RTN","IBCNBLA",115,0)
 ... ; if user wants to continue, then kill the quitting variable
"RTN","IBCNBLA",116,0)
 ... I Y KILL IBCNEZQ
"RTN","IBCNBLA",117,0)
 ... Q
"RTN","IBCNBLA",118,0)
 .. Q
"RTN","IBCNBLA",119,0)
 . ;
"RTN","IBCNBLA",120,0)
 . ; Make sure to unlock the buffer entry in all cases when finished,
"RTN","IBCNBLA",121,0)
 . ; even if the user wants to quit out of this loop
"RTN","IBCNBLA",122,0)
 . D UNLOCK^IBCNBU1(IBCNEZBF)
"RTN","IBCNBLA",123,0)
 . Q
"RTN","IBCNBLA",124,0)
LREJX ;
"RTN","IBCNBLA",125,0)
 S VALMBCK="R"
"RTN","IBCNBLA",126,0)
 Q
"RTN","IBCNBLA",127,0)
 ;
"RTN","IBCNBLA",128,0)
 ;
"RTN","IBCNBLA",129,0)
FASTEXIT ; sets flag signaling system should be exited
"RTN","IBCNBLA",130,0)
 N DIR,DIRUT,X,Y
"RTN","IBCNBLA",131,0)
 S VALMBCK="Q"
"RTN","IBCNBLA",132,0)
 D FULL^VALM1
"RTN","IBCNBLA",133,0)
 S DIR(0)="Y",DIR("A")="Exit option entirely",DIR("B")="NO" D ^DIR
"RTN","IBCNBLA",134,0)
 I +Y S IBFASTXT=1
"RTN","IBCNBLA",135,0)
 Q
"RTN","IBCNBLA",136,0)
 ;
"RTN","IBCNBLA",137,0)
SELSORT ;  select the way to sort the list screen
"RTN","IBCNBLA",138,0)
 N DIR,DIRUT,X,Y,DTOUT,DUOUT,DIROUT,ST,STDES
"RTN","IBCNBLA",139,0)
 ;
"RTN","IBCNBLA",140,0)
 D FULL^VALM1 W !
"RTN","IBCNBLA",141,0)
 W !,"Select the item to sort the buffer records on the buffer list screen."
"RTN","IBCNBLA",142,0)
 S DIR(0)="SO^1:Patient Name;2:Insurance Company;3:Source of Information;4:Date Entered;5:Inpatients;6:Means Test;7:On Hold;8:Verified;9:eIV Status;10:Positive Response"
"RTN","IBCNBLA",143,0)
 S DIR("A")="Sort the list by",DIR("B")=$P($G(IBCNSORT),"^",2)
"RTN","IBCNBLA",144,0)
 D ^DIR K DIR
"RTN","IBCNBLA",145,0)
 I 'Y G SELSORTX
"RTN","IBCNBLA",146,0)
 S IBCNSORT=Y_"^"_Y(0)
"RTN","IBCNBLA",147,0)
 ;
"RTN","IBCNBLA",148,0)
 ; ESG - 6/7/02 - SDD 5.1.1
"RTN","IBCNBLA",149,0)
 ; If the user wants to sort by symbol, then ask them which
"RTN","IBCNBLA",150,0)
 ; symbol should appear first and process accordingly.
"RTN","IBCNBLA",151,0)
 ;
"RTN","IBCNBLA",152,0)
 KILL IBCNSORT(1)       ; initialize the symbol sort array
"RTN","IBCNBLA",153,0)
 I +IBCNSORT=9 D  I $D(DIRUT)!('Y) G SELSORTX
"RTN","IBCNBLA",154,0)
 . ;
"RTN","IBCNBLA",155,0)
 . ; build the array of default sort order
"RTN","IBCNBLA",156,0)
 . S IBCNSORT(1,"+")=10
"RTN","IBCNBLA",157,0)
 . S IBCNSORT(1,"-")=20
"RTN","IBCNBLA",158,0)
 . S IBCNSORT(1,"#")=25 ; Added pound to sort criteria
"RTN","IBCNBLA",159,0)
 . S IBCNSORT(1,"!")=30
"RTN","IBCNBLA",160,0)
 . S IBCNSORT(1," ")=40
"RTN","IBCNBLA",161,0)
 . S IBCNSORT(1,"?")=50
"RTN","IBCNBLA",162,0)
 . S IBCNSORT(1,"*")=60
"RTN","IBCNBLA",163,0)
 . ;
"RTN","IBCNBLA",164,0)
 . ; build the DIR array to ask the question
"RTN","IBCNBLA",165,0)
 . S DIR(0)="SO^"
"RTN","IBCNBLA",166,0)
 . F ST="1:+'A1","2:-'D1","3:#'U1","4:!'B1","5: '","6:?'Q1" D  ; removed blanks ; replaced tilde w/apostrophe and added pound as option 3
"RTN","IBCNBLA",167,0)
 .. I ST="5: '" S STDES="No Problems Identified, Awaiting Electronic Processing" ; removed blanks
"RTN","IBCNBLA",168,0)
 .. E  S STDES=$$GET1^DIQ(365.15,$$FIND1^DIC(365.15,"","X",$P(ST,"'",2)),.01,"E")
"RTN","IBCNBLA",169,0)
 .. S DIR(0)=DIR(0)_$P(ST,"'")_"  "_STDES_$S(ST="6:?'Q1":"",1:";")
"RTN","IBCNBLA",170,0)
 . S DIR("A")="Which eIV Status do you want to appear first?"
"RTN","IBCNBLA",171,0)
 . S DIR("B")=1
"RTN","IBCNBLA",172,0)
 . S DIR("?",1)=" Please identify the eIV status that you want to appear first in the Insurance"
"RTN","IBCNBLA",173,0)
 . S DIR("?",2)=" Buffer listing.  The symbol appears immediately to the left of the patient"
"RTN","IBCNBLA",174,0)
 . S DIR("?",3)=" name in the list.  The default sort order for statuses is the same as"
"RTN","IBCNBLA",175,0)
 . S DIR("?",4)=" they are presented in this list below.  You may choose which status will appear"
"RTN","IBCNBLA",176,0)
 . S DIR("?",5)=" first in the list.  The remaining statuses will be sorted according to this"
"RTN","IBCNBLA",177,0)
 . S DIR("?",6)=" default sort order.  When sorting by eIV status, the secondary sort"
"RTN","IBCNBLA",178,0)
 . S DIR("?",7)=" is the entered date and the final sort is by patient name."
"RTN","IBCNBLA",179,0)
 . S DIR("?")=" "
"RTN","IBCNBLA",180,0)
 . D ^DIR K DIR
"RTN","IBCNBLA",181,0)
 . I $D(DIRUT) Q
"RTN","IBCNBLA",182,0)
 . I 'Y Q
"RTN","IBCNBLA",183,0)
 . ;
"RTN","IBCNBLA",184,0)
 . ; update the sort order array with the chosen symbol
"RTN","IBCNBLA",185,0)
 . S IBCNSORT(1,$E(Y(0)))=1
"RTN","IBCNBLA",186,0)
 . S $P(IBCNSORT,U,3)=$E(Y(0))
"RTN","IBCNBLA",187,0)
 . Q
"RTN","IBCNBLA",188,0)
 ;
"RTN","IBCNBLA",189,0)
 ; rebuild and resort the list and update the list header
"RTN","IBCNBLA",190,0)
 D INIT^IBCNBLL,HDR^IBCNBLL
"RTN","IBCNBLA",191,0)
 ;
"RTN","IBCNBLA",192,0)
SELSORTX ;
"RTN","IBCNBLA",193,0)
 S VALMBCK="R",VALMBG=1
"RTN","IBCNBLA",194,0)
 Q
"RTN","IBCNBLA",195,0)
 ;
"RTN","IBCNBLA",196,0)
TGLSCRN(IBBUFDA) ; toggle process screen from policy to insurance info, glbal variable IBCNSCRN contains ins co chosen
"RTN","IBCNBLA",197,0)
 Q:'$G(IBBUFDA)
"RTN","IBCNBLA",198,0)
 D FULL^VALM1
"RTN","IBCNBLA",199,0)
 W !!,"Enter an Insurance Company to display the Groups/Plans for that company or ",!,"enter Return to display a patient's policies.",!!
"RTN","IBCNBLA",200,0)
 S IBCNSCRN=+$$SELINS^IBCNBU1
"RTN","IBCNBLA",201,0)
 ;
"RTN","IBCNBLA",202,0)
 D CLEAN^VALM10,INIT^IBCNBLP,HDR^IBCNBLP S VALMBCK="R",VALMBG=1
"RTN","IBCNBLA",203,0)
 Q
"RTN","IBCNBLA",204,0)
 ;
"RTN","IBCNBLA",205,0)
AMCHK ; This procedure is called from the main buffer screen as an action
"RTN","IBCNBLA",206,0)
 ; to check the insurance company names in the buffer file.  This will
"RTN","IBCNBLA",207,0)
 ; invoke another ListMan screen that shows a list of all insurance 
"RTN","IBCNBLA",208,0)
 ; company names that do not exist in File 36 either as names or as
"RTN","IBCNBLA",209,0)
 ; synonyms and also they do not exist in the Auto Match file.  These
"RTN","IBCNBLA",210,0)
 ; are bad insurance company names that need to be corrected before
"RTN","IBCNBLA",211,0)
 ; electronic insurance verification attempts can be made.
"RTN","IBCNBLA",212,0)
 ; esg - 6/20/02 - SDD 5.1.11 - Add an action on the main buffer
"RTN","IBCNBLA",213,0)
 ;       screen to call the buffer names check option
"RTN","IBCNBLA",214,0)
 ;
"RTN","IBCNBLA",215,0)
 D EN^IBCNEAMC
"RTN","IBCNBLA",216,0)
 S VALMBCK="R"
"RTN","IBCNBLA",217,0)
AMCHKX ;
"RTN","IBCNBLA",218,0)
 Q
"RTN","IBCNBLA",219,0)
 ;
"RTN","IBCNBLA1")
0^68^B77705604^B76644494
"RTN","IBCNBLA1",1,0)
IBCNBLA1 ;ALB/ARH - Ins Buffer: LM action calls (cont) ;1 Jun 97
"RTN","IBCNBLA1",2,0)
 ;;2.0;INTEGRATED BILLING;**82,133,149,184,252,271,416**;21-MAR-94;Build 58
"RTN","IBCNBLA1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBLA1",4,0)
 ;
"RTN","IBCNBLA1",5,0)
ADDBUF ; add a new buffer entry protocol
"RTN","IBCNBLA1",6,0)
 N DIC,DIR,DIRUT,DUOUT,X,Y,IBIN,DFN,IBBUFDA,IBDATA,AMLIST,IBHELP
"RTN","IBCNBLA1",7,0)
 D FULL^VALM1 S VALMBCK="R"
"RTN","IBCNBLA1",8,0)
 ;
"RTN","IBCNBLA1",9,0)
 ; Patient lookup
"RTN","IBCNBLA1",10,0)
 S DIC(0)="AEQM",DIC="^DPT(" D ^DIC Q:Y'>0  S DFN=+Y W !
"RTN","IBCNBLA1",11,0)
 ;
"RTN","IBCNBLA1",12,0)
INS ; Insurance company lookup
"RTN","IBCNBLA1",13,0)
 S DIR("A")="Insurance Company",DIR(0)="FO^1:30"
"RTN","IBCNBLA1",14,0)
 S DIR("?",1)="Please enter the name of the insurance company that provides coverage for this"
"RTN","IBCNBLA1",15,0)
 S DIR("?",2)="patient.  This response is a free text response, however, a partial insurance"
"RTN","IBCNBLA1",16,0)
 S DIR("?")="company name look-up is available here."
"RTN","IBCNBLA1",17,0)
 ; BHS - 10/15/03 - Removed quit condition when user enters a caret
"RTN","IBCNBLA1",18,0)
 ;                  during the insurance lister and only sets IBIN
"RTN","IBCNBLA1",19,0)
 ;                  when a valid selection is made
"RTN","IBCNBLA1",20,0)
 D ^DIR K DIR Q:$D(DIRUT)  S IBIN=Y,Y=$$DICINS^IBCNBU1(Y,1,10) I Y'<0,Y'=0 S IBIN=Y
"RTN","IBCNBLA1",21,0)
 ;
"RTN","IBCNBLA1",22,0)
 ; ESG - 6/17/02 - Usage of Auto Match file when adding a buffer entry
"RTN","IBCNBLA1",23,0)
 ;     - SDD 5.1.3
"RTN","IBCNBLA1",24,0)
 ;
"RTN","IBCNBLA1",25,0)
 ; BHS - 10/15/03 - Added condition to allow Auto Match lookup when user
"RTN","IBCNBLA1",26,0)
 ;                  entered a caret during the insurance lister
"RTN","IBCNBLA1",27,0)
 I Y=0!(Y<0),$$AMLOOK^IBCNEUT1(IBIN,1,.AMLIST) S Y=$$AMSEL^IBCNEUT1(.AMLIST) I Y'<0,Y'=0 S IBIN=Y
"RTN","IBCNBLA1",28,0)
 I '$$INPTTR(355.33,20.01,$$UP^XLFSTR(IBIN)) D  G INS
"RTN","IBCNBLA1",29,0)
 . D FIELD^DID(355.33,20.01,"","HELP-PROMPT","IBHELP")
"RTN","IBCNBLA1",30,0)
 . W !?5,IBHELP("HELP-PROMPT") Q
"RTN","IBCNBLA1",31,0)
 ;
"RTN","IBCNBLA1",32,0)
 S DIR(0)="Y",DIR("A")="Add a new Insurance Buffer entry for this patient and company",DIR("B")="YES" W ! D ^DIR K DIR Q:Y'=1
"RTN","IBCNBLA1",33,0)
 ;
"RTN","IBCNBLA1",34,0)
 S IBDATA(20.01)=$$UP^XLFSTR(IBIN),IBDATA(60.01)=DFN
"RTN","IBCNBLA1",35,0)
 S IBBUFDA=+$$ADDSTF^IBCNBES(1,DFN,.IBDATA) K IBDATA Q:'IBBUFDA
"RTN","IBCNBLA1",36,0)
 ;
"RTN","IBCNBLA1",37,0)
 I '$$LOCK^IBCNBU1(IBBUFDA,1) Q
"RTN","IBCNBLA1",38,0)
 D INSHELP^IBCNBEE,INS^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",39,0)
 D GRPHELP^IBCNBEE,GRP^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",40,0)
 D POLHELP^IBCNBEE,POLICY^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",41,0)
 D BUFF^IBCNEUT2(IBBUFDA,+$$INSERROR^IBCNEUT3("B",IBBUFDA))   ; symbol
"RTN","IBCNBLA1",42,0)
 D UNLOCK^IBCNBU1(IBBUFDA)
"RTN","IBCNBLA1",43,0)
 ;
"RTN","IBCNBLA1",44,0)
 D INIT^IBCNBLL,HDR^IBCNBLL S VALMBCK="R"
"RTN","IBCNBLA1",45,0)
 Q
"RTN","IBCNBLA1",46,0)
 ;
"RTN","IBCNBLA1",47,0)
INSEDIT(IBBUFDA) ; edit the Insurance data of a buffer entry
"RTN","IBCNBLA1",48,0)
 ;
"RTN","IBCNBLA1",49,0)
 Q:'$G(IBBUFDA)  D FULL^VALM1
"RTN","IBCNBLA1",50,0)
 D INSHELP^IBCNBEE,INS^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",51,0)
 ;
"RTN","IBCNBLA1",52,0)
 D CLEAN^VALM10,INIT^IBCNBLE,HDR^IBCNBLE S VALMBCK="R" D UPDLN^IBCNBLL(IBBUFDA,"EDITED")
"RTN","IBCNBLA1",53,0)
 Q
"RTN","IBCNBLA1",54,0)
 ;
"RTN","IBCNBLA1",55,0)
GRPEDIT(IBBUFDA) ; edit the Group/Plan data of a buffer entry
"RTN","IBCNBLA1",56,0)
 ;
"RTN","IBCNBLA1",57,0)
 Q:'$G(IBBUFDA)  D FULL^VALM1
"RTN","IBCNBLA1",58,0)
 D GRPHELP^IBCNBEE,GRP^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",59,0)
 ;
"RTN","IBCNBLA1",60,0)
 D CLEAN^VALM10,INIT^IBCNBLE,HDR^IBCNBLE S VALMBCK="R"
"RTN","IBCNBLA1",61,0)
 Q
"RTN","IBCNBLA1",62,0)
 ;
"RTN","IBCNBLA1",63,0)
POLEDIT(IBBUFDA) ; edit the Subscriber Policy data of a buffer entry
"RTN","IBCNBLA1",64,0)
 ;
"RTN","IBCNBLA1",65,0)
 Q:'$G(IBBUFDA)  D FULL^VALM1
"RTN","IBCNBLA1",66,0)
 D POLHELP^IBCNBEE,POLICY^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",67,0)
 ;
"RTN","IBCNBLA1",68,0)
 D CLEAN^VALM10,INIT^IBCNBLE,HDR^IBCNBLE S VALMBCK="R" D UPDLN^IBCNBLL(IBBUFDA,"EDITED")
"RTN","IBCNBLA1",69,0)
 Q
"RTN","IBCNBLA1",70,0)
 ;
"RTN","IBCNBLA1",71,0)
ALLEDIT(IBBUFDA) ; edit All data of a buffer entry
"RTN","IBCNBLA1",72,0)
 ;
"RTN","IBCNBLA1",73,0)
 Q:'$G(IBBUFDA)  D FULL^VALM1
"RTN","IBCNBLA1",74,0)
 D INSHELP^IBCNBEE,INS^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",75,0)
 D GRPHELP^IBCNBEE,GRP^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",76,0)
 D POLHELP^IBCNBEE,POLICY^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",77,0)
 ;
"RTN","IBCNBLA1",78,0)
 D CLEAN^VALM10,INIT^IBCNBLE,HDR^IBCNBLE S VALMBCK="R" D UPDLN^IBCNBLL(IBBUFDA,"EDITED")
"RTN","IBCNBLA1",79,0)
 Q
"RTN","IBCNBLA1",80,0)
 ;
"RTN","IBCNBLA1",81,0)
CMPEDIT(IBBUFDA) ; display a buffer entry and an existing ins entry for comparison, allow edit of buffer data
"RTN","IBCNBLA1",82,0)
 Q:'$G(IBBUFDA)
"RTN","IBCNBLA1",83,0)
 N IBDA,IBPOLDA,IBGRPDA,IBINSDA,DIR,DIRUT,X,Y
"RTN","IBCNBLA1",84,0)
 ;
"RTN","IBCNBLA1",85,0)
 D FULL^VALM1
"RTN","IBCNBLA1",86,0)
 ;
"RTN","IBCNBLA1",87,0)
 S IBDA=$$SEL^IBCNBLA("IBCNBLPX") I 'IBDA G CMPQ
"RTN","IBCNBLA1",88,0)
 I $P(IBDA,U,4)'="",+$G(^IBA(355.33,+IBBUFDA,60))'=$P(IBDA,U,4) W !,"Buffer Patient doesn't match Policy Patient, can't continue." G CMPQ
"RTN","IBCNBLA1",89,0)
 S IBINSDA=+IBDA,IBGRPDA=+$P(IBDA,U,2),IBPOLDA=+$P(IBDA,U,3)
"RTN","IBCNBLA1",90,0)
 ;
"RTN","IBCNBLA1",91,0)
CEINS W @IOF
"RTN","IBCNBLA1",92,0)
 I 'IBINSDA W !,"No Insurance Company Selected for Comparison."
"RTN","IBCNBLA1",93,0)
 W ! D INS^IBCNBCD(IBBUFDA,IBINSDA)
"RTN","IBCNBLA1",94,0)
 S DIR("?")="The Buffer entry's Insurance Company data may be edited or Return advances the display to the Group/Plan data.",DIR("??")="^D HELP^IBCNBUH,WAIT^IBCNBUH,INS^IBCNBCD("_IBBUFDA_","_IBINSDA_")"
"RTN","IBCNBLA1",95,0)
 W ! S DIR(0)="FO",DIR("A")="Enter 'E' to edit buffer data or Return to continue"
"RTN","IBCNBLA1",96,0)
 D ^DIR K DIR I Y'="",$D(DIRUT) G CMPQ
"RTN","IBCNBLA1",97,0)
 I Y'="","EEee"[Y D INSHELP^IBCNBEE,INS^IBCNBEE(IBBUFDA) G CEINS
"RTN","IBCNBLA1",98,0)
 ;
"RTN","IBCNBLA1",99,0)
CEGRP W @IOF
"RTN","IBCNBLA1",100,0)
 I 'IBGRPDA W !,"No Insurance Group/Plan Selected for Comparison."
"RTN","IBCNBLA1",101,0)
 I +IBGRPDA W !,?14,"Patient is "_$S(+IBPOLDA:"",1:"NOT ")_"a member of this Insurance Group/Plan",!
"RTN","IBCNBLA1",102,0)
 W ! D GRP^IBCNBCD(IBBUFDA,IBGRPDA)
"RTN","IBCNBLA1",103,0)
 S DIR("?")="The Buffer entry's Group/Plan data may be edited or Return advances the display to the Patient Policy data.",DIR("??")="^D HELP^IBCNBUH,WAIT^IBCNBUH,GRP^IBCNBCD("_IBBUFDA_","_IBGRPDA_")"
"RTN","IBCNBLA1",104,0)
 W ! S DIR(0)="FO",DIR("A")="Enter 'E' to edit buffer data or Return to continue"
"RTN","IBCNBLA1",105,0)
 D ^DIR K DIR I Y'="",$D(DIRUT) G CMPQ
"RTN","IBCNBLA1",106,0)
 I Y'="","EEee"[Y D GRPHELP^IBCNBEE,GRP^IBCNBEE(IBBUFDA) G CEGRP
"RTN","IBCNBLA1",107,0)
 ;
"RTN","IBCNBLA1",108,0)
CEPOL W @IOF
"RTN","IBCNBLA1",109,0)
 I 'IBPOLDA W !,"No Patient Policy Selected for Comparison."
"RTN","IBCNBLA1",110,0)
 W ! D POLICY^IBCNBCD(IBBUFDA,IBPOLDA)
"RTN","IBCNBLA1",111,0)
 S DIR("?")="The Buffer entry's Patient Policy data may be edited or return to the screen display.",DIR("??")="^D HELP^IBCNBUH,WAIT^IBCNBUH,POLICY^IBCNBCD("_IBBUFDA_","_IBPOLDA_")"
"RTN","IBCNBLA1",112,0)
 W ! S DIR(0)="FO",DIR("A")="Enter 'E' to edit buffer data or Return to continue"
"RTN","IBCNBLA1",113,0)
 D ^DIR K DIR I Y'="",$D(DIRUT) G CMPQ
"RTN","IBCNBLA1",114,0)
 I Y'="","EEee"[Y D POLHELP^IBCNBEE,POLICY^IBCNBEE(IBBUFDA) G CEPOL
"RTN","IBCNBLA1",115,0)
 ;
"RTN","IBCNBLA1",116,0)
CELIG W @IOF
"RTN","IBCNBLA1",117,0)
 W ! D ELIG^IBCNBCD(IBBUFDA,IBPOLDA)
"RTN","IBCNBLA1",118,0)
 ;
"RTN","IBCNBLA1",119,0)
CMPQ D CLEAN^VALM10,INIT^IBCNBLP,HDR^IBCNBLP S VALMBCK="R" D UPDLN^IBCNBLL(IBBUFDA,"EDITED")
"RTN","IBCNBLA1",120,0)
 Q
"RTN","IBCNBLA1",121,0)
 ;
"RTN","IBCNBLA1",122,0)
VERIFY(IBBUFDA) ; verify a buffer entry
"RTN","IBCNBLA1",123,0)
 ;
"RTN","IBCNBLA1",124,0)
 N DIR,DIRUT,X,Y,IBX,IBY Q:'$G(IBBUFDA)
"RTN","IBCNBLA1",125,0)
 D FULL^VALM1 S VALMBCK="R"
"RTN","IBCNBLA1",126,0)
 W ! D DISPBUF^IBCNBU1(IBBUFDA)
"RTN","IBCNBLA1",127,0)
 ;
"RTN","IBCNBLA1",128,0)
 S IBX=$G(^IBA(355.33,IBBUFDA,0)),IBY="" I +$P(IBX,U,10) S IBY="Re-" W !!,"This entry already verified by ",$$EXPAND^IBTRE(355.33,.11,$P(IBX,U,11))," on ",$$FMTE^XLFDT($P(IBX,U,10)),"."
"RTN","IBCNBLA1",129,0)
 ;
"RTN","IBCNBLA1",130,0)
 S DIR("?")="Enter Yes if the coverage and information in this Buffer entry has been verified to be accurate." W !!
"RTN","IBCNBLA1",131,0)
 S DIR(0)="YO",DIR("B")="N",DIR("A")=IBY_"Verify the coverage in this buffer entry"
"RTN","IBCNBLA1",132,0)
 D ^DIR
"RTN","IBCNBLA1",133,0)
 I Y=1 D
"RTN","IBCNBLA1",134,0)
 . ; WCW - 04/11/2003 Clear out IIV Status when manually verified
"RTN","IBCNBLA1",135,0)
 . D CLEAR^IBCNEUT4(IBBUFDA,.IIVERR,1) K IIVERR
"RTN","IBCNBLA1",136,0)
 . K IBX S IBX(.1)="NOW",IBX(.11)=DUZ D EDITSTF^IBCNBES(IBBUFDA,.IBX)
"RTN","IBCNBLA1",137,0)
 . D INIT^IBCNBLE,HDR^IBCNBLE S VALMBCK="R" D UPDLN^IBCNBLL(IBBUFDA,"EDITED") W "  Coverage Verified ..." H 2
"RTN","IBCNBLA1",138,0)
 ;
"RTN","IBCNBLA1",139,0)
 Q
"RTN","IBCNBLA1",140,0)
 ;
"RTN","IBCNBLA1",141,0)
REJECT(IBBUFDA,DIRUT) ; process a reject and then delete a buffer entry
"RTN","IBCNBLA1",142,0)
 ; Output parameter DIRUT is optional and passed in by reference.  This
"RTN","IBCNBLA1",143,0)
 ; variable will be defined if the user enters a leading up-arrow,
"RTN","IBCNBLA1",144,0)
 ; times out, or enters a null response.  This is so the calling routine
"RTN","IBCNBLA1",145,0)
 ; can detect if the user did something other than say Yes or No to
"RTN","IBCNBLA1",146,0)
 ; this question.
"RTN","IBCNBLA1",147,0)
 ;
"RTN","IBCNBLA1",148,0)
 N DIR,X,Y,IBX Q:'$G(IBBUFDA)
"RTN","IBCNBLA1",149,0)
 D FULL^VALM1 S VALMBCK="R"
"RTN","IBCNBLA1",150,0)
 W ! D DISPBUF^IBCNBU1(IBBUFDA)
"RTN","IBCNBLA1",151,0)
 W !!,"This action will delete all insurance and patient specific data from a buffer ",!,"entry without first saving that data to the insurance files, leaving a stub ",!,"entry for reporting purposes.",!
"RTN","IBCNBLA1",152,0)
 ;
"RTN","IBCNBLA1",153,0)
 S IBX=$G(^IBA(355.33,IBBUFDA,0)) I +$P(IBX,U,10) W !!,"This entry has been verified by ",$$EXPAND^IBTRE(355.33,.11,$P(IBX,U,11))," on ",$$FMTE^XLFDT($P(IBX,U,10)),".",!!
"RTN","IBCNBLA1",154,0)
 ;
"RTN","IBCNBLA1",155,0)
 S DIR("?")="Enter Yes to delete this buffer entry without saving any of it's data to the Insurance files."
"RTN","IBCNBLA1",156,0)
 S DIR(0)="YO",DIR("B")="N",DIR("A")="Reject this buffer entry (delete without saving to Insurance files)"
"RTN","IBCNBLA1",157,0)
 D ^DIR
"RTN","IBCNBLA1",158,0)
 I $D(DIRUT) G REJX
"RTN","IBCNBLA1",159,0)
 I Y=1 D REJECT^IBCNBAR(IBBUFDA) S VALMBCK="Q" D UPDLN^IBCNBLL(IBBUFDA,"REJECTED")
"RTN","IBCNBLA1",160,0)
REJX ;
"RTN","IBCNBLA1",161,0)
 Q
"RTN","IBCNBLA1",162,0)
 ;
"RTN","IBCNBLA1",163,0)
ACCEPT(IBBUFDA) ; process a buffer entry for acceptance
"RTN","IBCNBLA1",164,0)
 ;
"RTN","IBCNBLA1",165,0)
 Q:'$G(IBBUFDA)
"RTN","IBCNBLA1",166,0)
 N IBDA,IBINSDA,IBGRPDA,IBPOLDA,IBACCEPT S IBACCEPT=0
"RTN","IBCNBLA1",167,0)
 ;
"RTN","IBCNBLA1",168,0)
 D FULL^VALM1
"RTN","IBCNBLA1",169,0)
 ;
"RTN","IBCNBLA1",170,0)
 S IBDA=$$SEL^IBCNBLA("IBCNBLPX")
"RTN","IBCNBLA1",171,0)
 I $P(IBDA,U,4)'="",+$G(^IBA(355.33,+IBBUFDA,60))'=$P(IBDA,U,4) W !,"Buffer Patient doesn't match Policy Patient, can't continue." G ACCPTQ
"RTN","IBCNBLA1",172,0)
 I +$P(IBDA,U,3),'$P(IBDA,U,2) W !!,"Error: the selected policy has no associated plan.  Can not continue." D WAIT^IBCNBUH G ACCPTQ
"RTN","IBCNBLA1",173,0)
 ;
"RTN","IBCNBLA1",174,0)
 S IBINSDA=+IBDA,IBGRPDA=+$P(IBDA,U,2),IBPOLDA=+$P(IBDA,U,3)
"RTN","IBCNBLA1",175,0)
 S:'IBINSDA (IBGRPDA,IBPOLDA)=0 S:'IBGRPDA IBPOLDA=0
"RTN","IBCNBLA1",176,0)
 ;
"RTN","IBCNBLA1",177,0)
 I 'IBINSDA,'$D(^XUSEC("IB INSURANCE COMPANY ADD",DUZ)) D  G ACCPTQ
"RTN","IBCNBLA1",178,0)
 . W !!,"Sorry, but you do not have the required privileges to add",!,"new Insurance Companies."
"RTN","IBCNBLA1",179,0)
 . D WAIT^IBCNBUH
"RTN","IBCNBLA1",180,0)
 ;
"RTN","IBCNBLA1",181,0)
 S IBACCEPT=$$ACCEPT^IBCNBAA(IBBUFDA,IBINSDA,IBGRPDA,IBPOLDA)
"RTN","IBCNBLA1",182,0)
 ;
"RTN","IBCNBLA1",183,0)
ACCPTQ S VALMBCK="R" I +IBACCEPT S VALMBCK="Q" D UPDLN^IBCNBLL(IBBUFDA,"ACCEPTED")
"RTN","IBCNBLA1",184,0)
 Q
"RTN","IBCNBLA1",185,0)
 ;
"RTN","IBCNBLA1",186,0)
RESP(BUFF) ; List Response Report for Trace # associated with this entry
"RTN","IBCNBLA1",187,0)
 ; BUFF = buffer IEN
"RTN","IBCNBLA1",188,0)
 N NG,IBRSP,IBSTR,IBTRC,STOP,IBCNERTN,POP,IBCNESPC
"RTN","IBCNBLA1",189,0)
 ; Reset to Full Screen Mode
"RTN","IBCNBLA1",190,0)
 D FULL^VALM1
"RTN","IBCNBLA1",191,0)
 S NG=0
"RTN","IBCNBLA1",192,0)
 I $G(BUFF)="" S NG=1
"RTN","IBCNBLA1",193,0)
 I 'NG S IBRSP=$O(^IBCN(365,"AF",BUFF,"")) I IBRSP="" S NG=1
"RTN","IBCNBLA1",194,0)
 I 'NG S IBSTR=$G(^IBCN(365,IBRSP,0)),IBTRC=$P(IBSTR,U,9) I IBTRC="" S NG=1
"RTN","IBCNBLA1",195,0)
 I NG W !!,"This entry does not have an associated eIV response." D PAUSE^VALM1 G RESPX
"RTN","IBCNBLA1",196,0)
 S STOP=0,IBCNERTN="IBCNERP1",IBCNESPC("TRCN")=IBTRC_U_IBRSP
"RTN","IBCNBLA1",197,0)
 D R100^IBCNERP1
"RTN","IBCNBLA1",198,0)
RESPX S VALMBCK="R"
"RTN","IBCNBLA1",199,0)
 Q
"RTN","IBCNBLA1",200,0)
INPTTR(FILE,FLD,X) ; Does value X pass input transform for file, field?
"RTN","IBCNBLA1",201,0)
 N XCUTE
"RTN","IBCNBLA1",202,0)
 S XCUTE=$$GET1^DID(FILE,FLD,,"INPUT TRANSFORM")
"RTN","IBCNBLA1",203,0)
 X XCUTE
"RTN","IBCNBLA1",204,0)
 Q $D(X)
"RTN","IBCNBLB")
0^63^B1130107^n/a
"RTN","IBCNBLB",1,0)
IBCNBLB ;BP/YMG - Ins Buffer: Eligibility/Benefit screen;14 Oct 09
"RTN","IBCNBLB",2,0)
 ;;2.0;INTEGRATED BILLING;**416**;21-MAR-94;Build 58
"RTN","IBCNBLB",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBLB",4,0)
 ;
"RTN","IBCNBLB",5,0)
EN ; entry point - IBCNB EXPAND BENEFITS action protocol
"RTN","IBCNBLB",6,0)
 N IEN365
"RTN","IBCNBLB",7,0)
 I '$G(IBBUFDA) G ENX
"RTN","IBCNBLB",8,0)
 S IEN365=$O(^IBCN(365,"AF",IBBUFDA,""),-1) I 'IEN365 W !!,"This entry does not have an associated eIV response." D PAUSE^VALM1 G ENX
"RTN","IBCNBLB",9,0)
 D EB^IBCNES(365.02,IEN365_",","A",1,"EIV EB DATA")
"RTN","IBCNBLB",10,0)
ENX ;
"RTN","IBCNBLB",11,0)
 S VALMBCK="R"
"RTN","IBCNBLB",12,0)
 Q
"RTN","IBCNBLE")
0^64^B77550797^B69021746
"RTN","IBCNBLE",1,0)
IBCNBLE ;ALB/ARH-Ins Buffer: LM buffer entry screen ;1 Jun 97
"RTN","IBCNBLE",2,0)
 ;;2.0;INTEGRATED BILLING;**82,231,184,251,371,416**;21-MAR-94;Build 58
"RTN","IBCNBLE",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBLE",4,0)
 ;
"RTN","IBCNBLE",5,0)
EN ; - main entry point for list manager display
"RTN","IBCNBLE",6,0)
 N DFN
"RTN","IBCNBLE",7,0)
 D EN^VALM("IBCNB INSURANCE BUFFER ENTRY")
"RTN","IBCNBLE",8,0)
 Q
"RTN","IBCNBLE",9,0)
 ;
"RTN","IBCNBLE",10,0)
HDR ; - header code for list manager display
"RTN","IBCNBLE",11,0)
 N IBX,IB0,VADM,VA,VAERR S IBX=""
"RTN","IBCNBLE",12,0)
 I +$G(DFN) D DEM^VADPT S IBX=$E(VADM(1),1,28),IBX=IBX_$J("",35-$L(IBX))_$P(VADM(2),U,2)_"    DOB: "_$P(VADM(3),U,2)_"    AGE: "_VADM(4)
"RTN","IBCNBLE",13,0)
 S VALMHDR(1)=IBX
"RTN","IBCNBLE",14,0)
 S IB0=$G(^IBA(355.33,+$G(IBBUFDA),0))
"RTN","IBCNBLE",15,0)
 S IBX=$E($P($G(^VA(200,+$P(IB0,U,2),0)),U,1),1,27)_" ("_$E($$EXPAND^IBTRE(355.33,.03,$P(IB0,U,3)),1,11)_")"
"RTN","IBCNBLE",16,0)
 S IBX="Buffer entry created on "_$$DATE(+IB0)_" by "_IBX,IBX=$J("",40-($L(IBX)\2))_IBX
"RTN","IBCNBLE",17,0)
 S VALMHDR(2)=IBX
"RTN","IBCNBLE",18,0)
 S IBX="" I +$P(IB0,U,10) S IBX="Buffer entry verified on "_$$DATE(+$P(IB0,U,10))_" by "_$E($P($G(^VA(200,+$P(IB0,U,11),0)),U,1),1,27),IBX=$J("",40-($L(IBX)\2))_IBX
"RTN","IBCNBLE",19,0)
 S VALMHDR(3)=IBX
"RTN","IBCNBLE",20,0)
 Q
"RTN","IBCNBLE",21,0)
 ;
"RTN","IBCNBLE",22,0)
INIT ; - initialization of list manager screen, ifn of record to display required IBBUFDA
"RTN","IBCNBLE",23,0)
 K ^TMP("IBCNBLE",$J)
"RTN","IBCNBLE",24,0)
 I '$G(IBBUFDA) S VALMQUIT="" Q
"RTN","IBCNBLE",25,0)
 S DFN=+$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBLE",26,0)
 D BLD
"RTN","IBCNBLE",27,0)
 Q
"RTN","IBCNBLE",28,0)
 ;
"RTN","IBCNBLE",29,0)
HELP ; - help text for list manager screen
"RTN","IBCNBLE",30,0)
 D FULL^VALM1
"RTN","IBCNBLE",31,0)
 W !!,"This screen displays all data in a Buffer File entry."
"RTN","IBCNBLE",32,0)
 W !!,"The actions allow editing of all data and verification of coverage."
"RTN","IBCNBLE",33,0)
 W !!,"It is not necessary to use the Verify Entry action, this action is optional.",!,"If the Verify Entry action is not used, the policy will be automatically flagged",!,"as verified when it is Accepted and stored in the main Insurance files."
"RTN","IBCNBLE",34,0)
 D PAUSE^VALM1 S VALMBCK="R"
"RTN","IBCNBLE",35,0)
 Q
"RTN","IBCNBLE",36,0)
 ;
"RTN","IBCNBLE",37,0)
EXIT ; - exit list manager screen
"RTN","IBCNBLE",38,0)
 K ^TMP("IBCNBLE",$J)
"RTN","IBCNBLE",39,0)
 D CLEAR^VALM1
"RTN","IBCNBLE",40,0)
 Q
"RTN","IBCNBLE",41,0)
 ;
"RTN","IBCNBLE",42,0)
BLD ; display buffer entry
"RTN","IBCNBLE",43,0)
 N DFN,CLIEN,CLDT,IB0,IB20,IB40,IB60,IB61,IB62,IBL,IBLINE,ADDR,IBI,IBY
"RTN","IBCNBLE",44,0)
 S VALMCNT=0
"RTN","IBCNBLE",45,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0)),IB20=$G(^IBA(355.33,IBBUFDA,20)),IB40=$G(^IBA(355.33,IBBUFDA,40))
"RTN","IBCNBLE",46,0)
 S IB60=$G(^IBA(355.33,IBBUFDA,60)),IB61=$G(^IBA(355.33,IBBUFDA,61)),IB62=$G(^IBA(355.33,IBBUFDA,62))
"RTN","IBCNBLE",47,0)
 ; check if we are coming from appointments view
"RTN","IBCNBLE",48,0)
 I $G(AVIEW) D
"RTN","IBCNBLE",49,0)
 .D SET(" ") S IBY=$J("",26)_"Appointment Information" D SET(IBY,"B") S IBLINE=""
"RTN","IBCNBLE",50,0)
 .S DFN=+IB60
"RTN","IBCNBLE",51,0)
 .S CLIEN="" F  S CLIEN=$O(^TMP($J,"IBCNAPPTS",DFN,CLIEN)) Q:CLIEN=""  D
"RTN","IBCNBLE",52,0)
 ..S CLDT="" F  S CLDT=$O(^TMP($J,"IBCNAPPTS",DFN,CLIEN,CLDT)) Q:CLDT=""  D
"RTN","IBCNBLE",53,0)
 ...S IBL="Clinic: ",IBY=$P($P(^TMP($J,"IBCNAPPTS",DFN,CLIEN,CLDT),U,2),";",2)
"RTN","IBCNBLE",54,0)
 ...S IBLINE=$$SETL(IBLINE,IBY,IBL,10,30)
"RTN","IBCNBLE",55,0)
 ...S IBL="Appt. D/T: ",IBY=$$FMTE^XLFDT(CLDT)
"RTN","IBCNBLE",56,0)
 ...S IBLINE=$$SETL(IBLINE,IBY,IBL,50,22)
"RTN","IBCNBLE",57,0)
 ...D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",58,0)
 ...Q
"RTN","IBCNBLE",59,0)
 ..Q
"RTN","IBCNBLE",60,0)
 .Q
"RTN","IBCNBLE",61,0)
 ;
"RTN","IBCNBLE",62,0)
 D SET(" ") S IBY=$J("",26)_"Insurance Company Information" D SET(IBY,"B") S IBLINE=""
"RTN","IBCNBLE",63,0)
 S IBL="Name: ",IBY=$P(IB20,U,1) S IBLINE=$$SETL("",IBY,IBL,10,30)
"RTN","IBCNBLE",64,0)
 S IBL="Reimburse?: ",IBY=$$EXPAND^IBTRE(355.33,20.05,$P(IB20,U,5)) S IBLINE=$$SETL(IBLINE,IBY,IBL,57,20)
"RTN","IBCNBLE",65,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",66,0)
 S IBL="Phone: ",IBY=$P(IB20,U,2) S IBLINE=$$SETL(IBLINE,IBY,IBL,10,20)
"RTN","IBCNBLE",67,0)
 S IBL="Billing Phone: ",IBY=$P(IB20,U,3) S IBLINE=$$SETL(IBLINE,IBY,IBL,57,20)
"RTN","IBCNBLE",68,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",69,0)
 S IBL="Precert Phone: ",IBY=$P(IB20,U,4) S IBLINE=$$SETL(IBLINE,IBY,IBL,57,20)
"RTN","IBCNBLE",70,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",71,0)
 S IBL="Remote Query From: ",IBY=$$EXTERNAL^DILFD(355.33,.14,"",$P(IB0,"^",14)) S IBLINE=$$SETL(IBLINE,IBY,IBL,57,20)
"RTN","IBCNBLE",72,0)
 D SET(IBLINE) S IBLINE="" D ADDR(21,1)
"RTN","IBCNBLE",73,0)
 S IBL="Address: ",IBY=ADDR(1) S IBLINE=$$SETL(IBLINE,IBY,IBL,10,69)
"RTN","IBCNBLE",74,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",75,0)
 F IBI=2:1:9 S IBL="",IBY=$G(ADDR(IBI)) Q:IBY=""  S IBLINE=$$SETL(IBLINE,IBY,IBL,10,69) D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",76,0)
 ;
"RTN","IBCNBLE",77,0)
 D SET(" ") S IBY=$J("",29)_"Group/Plan Information" D SET(IBY,"B") S IBLINE=""
"RTN","IBCNBLE",78,0)
 S IBL="Group Plan?: ",IBY=$$YN($P(IB40,U,1)) S IBLINE=$$SETL("",IBY,IBL,16,3)
"RTN","IBCNBLE",79,0)
 S IBL="Require UR: ",IBY=$$YN($P(IB40,U,4)) S IBLINE=$$SETL(IBLINE,IBY,IBL,63,3)
"RTN","IBCNBLE",80,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",81,0)
 S IBL="Group Name: ",IBY=$P(IB40,U,2) S IBLINE=$$SETL("",IBY,IBL,16,20)
"RTN","IBCNBLE",82,0)
 S IBL="Require Amb Cert: ",IBY=$$YN($P(IB40,U,6)) S IBLINE=$$SETL(IBLINE,IBY,IBL,63,3)
"RTN","IBCNBLE",83,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",84,0)
 S IBL="Group Number: ",IBY=$P(IB40,U,3) S IBLINE=$$SETL("",IBY,IBL,16,17)
"RTN","IBCNBLE",85,0)
 S IBL="Require Pre-Cert: ",IBY=$$YN($P(IB40,U,5)) S IBLINE=$$SETL(IBLINE,IBY,IBL,63,3)
"RTN","IBCNBLE",86,0)
 ;;Daou/EEN - Adding BIN and PCN
"RTN","IBCNBLE",87,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",88,0)
 S IBL="BIN: ",IBY=$P(IB40,U,10) S IBLINE=$$SETL("",IBY,IBL,16,10)
"RTN","IBCNBLE",89,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",90,0)
 S IBL="PCN: ",IBY=$P(IB40,U,11) S IBLINE=$$SETL("",IBY,IBL,16,20)
"RTN","IBCNBLE",91,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",92,0)
 S IBL="Type of Plan: ",IBY=$P($G(^IBE(355.1,+$P(IB40,U,9),0)),U,1) S IBLINE=$$SETL("",IBY,IBL,16,25)
"RTN","IBCNBLE",93,0)
 S IBL="Exclude Pre-Cond: ",IBY=$$YN($P(IB40,U,7)) S IBLINE=$$SETL(IBLINE,IBY,IBL,63,3)
"RTN","IBCNBLE",94,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",95,0)
 S IBL="Benefits Assignable: ",IBY=$$YN($P(IB40,U,8)) S IBLINE=$$SETL(IBLINE,IBY,IBL,63,3)
"RTN","IBCNBLE",96,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",97,0)
 ;
"RTN","IBCNBLE",98,0)
 D SET(" ") S IBY=$J("",26)_"Policy/Subscriber Information" D SET(IBY,"B") S IBLINE=""
"RTN","IBCNBLE",99,0)
 S IBL="Whose Insurance: ",IBY=$$EXPAND^IBTRE(355.33,60.05,$P(IB60,U,5)) S IBLINE=$$SETL("",IBY,IBL,18,7)
"RTN","IBCNBLE",100,0)
 S IBL="Effective: ",IBY=$$DATE($P(IB60,U,2)) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,8)
"RTN","IBCNBLE",101,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",102,0)
 S IBL="Insured's Name: ",IBY=$P(IB60,U,7) S IBLINE=$$SETL("",IBY,IBL,18,30)
"RTN","IBCNBLE",103,0)
 S IBL="Expiration: ",IBY=$$DATE($P(IB60,U,3)) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,13)
"RTN","IBCNBLE",104,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",105,0)
 S IBL="Subscriber Id: ",IBY=$P(IB60,U,4) S IBLINE=$$SETL("",IBY,IBL,18,20)
"RTN","IBCNBLE",106,0)
 S IBL="Primary Provider: ",IBY=$P(IB60,U,10) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,17)
"RTN","IBCNBLE",107,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",108,0)
 S IBL="Relationship: ",IBY=$$EXPAND^IBTRE(355.33,60.06,$P(IB60,U,6)) S IBLINE=$$SETL("",IBY,IBL,18,16)
"RTN","IBCNBLE",109,0)
 S IBL="Provider Phone: ",IBY=$P(IB60,U,11) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,16)
"RTN","IBCNBLE",110,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",111,0)
 I $P(IB60,U,6)'="01"!($P(IB60,U,8)'="") S IBL="Insured's DOB: ",IBY=$$DATE($P(IB60,U,8)) S IBLINE=$$SETL("",IBY,IBL,18,8)
"RTN","IBCNBLE",112,0)
 S IBL="Coord of Benefits: ",IBY=$$EXPAND^IBTRE(355.33,60.12,$P(IB60,U,12)) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,16)
"RTN","IBCNBLE",113,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",114,0)
 I $P(IB62,U)'="" S IBL="Patient Id: ",IBY=$P(IB62,U) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,13)
"RTN","IBCNBLE",115,0)
 I IBLINE'="" D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",116,0)
 ;
"RTN","IBCNBLE",117,0)
 I '$P(IB61,U,1) D SET(" ") S IBL="Employer Sponsored Group Health Plan?: ",IBY=$$YN($P(IB61,U,1)) S IBLINE=$$SETL("",IBY,IBL,40,3) D SET(IBLINE) S IBLINE="" G NXT
"RTN","IBCNBLE",118,0)
 ;
"RTN","IBCNBLE",119,0)
 D ADDR(61,6)
"RTN","IBCNBLE",120,0)
 D SET(" ") S IBY=$J("",24)_"Subscriber's Employer Information" D SET(IBY,"B") S IBLINE=""
"RTN","IBCNBLE",121,0)
 S IBL="Employer Sponsored?: ",IBY=$$YN($P(IB61,U,1)) S IBLINE=$$SETL("",IBY,IBL,22,3)
"RTN","IBCNBLE",122,0)
 S IBL="Employment Status: ",IBY=$$EXPAND^IBTRE(355.33,61.03,$P(IB61,U,3)) S IBLINE=$$SETL(IBLINE,IBY,IBL,64,15)
"RTN","IBCNBLE",123,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",124,0)
 S IBL="Claim to Employer: ",IBY=$$YN($P(IB61,U,5)) S IBLINE=$$SETL("",IBY,IBL,22,3)
"RTN","IBCNBLE",125,0)
 S IBL="Retirement Date: ",IBY=$$DATE($P(IB61,U,4)) S IBLINE=$$SETL(IBLINE,IBY,IBL,64,8)
"RTN","IBCNBLE",126,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",127,0)
 S IBL="Employer Name: ",IBY=$P(IB61,U,2) S IBLINE=$$SETL("",IBY,IBL,16,30)
"RTN","IBCNBLE",128,0)
 S IBL="Employer Phone: ",IBY=$P(IB61,U,12) S IBLINE=$$SETL(IBLINE,IBY,IBL,64,15)
"RTN","IBCNBLE",129,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",130,0)
 S IBL="Address: ",IBY=ADDR(1) S IBLINE=$$SETL(IBLINE,IBY,IBL,16,64)
"RTN","IBCNBLE",131,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",132,0)
 F IBI=2:1:9 S IBL="",IBY=$G(ADDR(IBI)) Q:IBY=""  S IBLINE=$$SETL(IBLINE,IBY,IBL,16,64) D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",133,0)
 ;
"RTN","IBCNBLE",134,0)
NXT ;
"RTN","IBCNBLE",135,0)
 D SET(" ") S IBY=$J("",26)_"Buffer Entry Information" D SET(IBY,"B") S IBLINE=""
"RTN","IBCNBLE",136,0)
 S IBL="Date Entered: ",IBY=$$FMTE^XLFDT($P(IB0,U,1),2) S IBLINE=$$SETL("",IBY,IBL,18,17)
"RTN","IBCNBLE",137,0)
 S IBL="Date Verified: ",IBY=$$FMTE^XLFDT($P(IB0,U,10),2) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,17)
"RTN","IBCNBLE",138,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",139,0)
 S IBL="Entered By: ",IBY=$$EXPAND^IBTRE(355.33,.02,$P(IB0,U,2)) S IBLINE=$$SETL("",IBY,IBL,18,40)
"RTN","IBCNBLE",140,0)
 S IBL="Verified By: ",IBY=$$EXPAND^IBTRE(355.33,.11,$P(IB0,U,11)) S IBLINE=$$SETL(IBLINE,IBY,IBL,62,17)
"RTN","IBCNBLE",141,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",142,0)
 ;
"RTN","IBCNBLE",143,0)
 ; esg - 6/25/02   SDD 5.1.2 - modifications to Expand Entry for IIV
"RTN","IBCNBLE",144,0)
 ; move source down one line, eIIV trace # to the left column and add
"RTN","IBCNBLE",145,0)
 ; eIIV processed date to the right column
"RTN","IBCNBLE",146,0)
 ;
"RTN","IBCNBLE",147,0)
 S IBLINE=$$TRACE(IBLINE,IBBUFDA)       ; eIIV trace #
"RTN","IBCNBLE",148,0)
 S IBL="eIV Processed Date: ",IBY=$S($P(IB0,U,15)="":"",1:$$FMTE^XLFDT($P(IB0,U,15),"2M"))
"RTN","IBCNBLE",149,0)
 S IBLINE=$$SETL(IBLINE,IBY,IBL,62,17)
"RTN","IBCNBLE",150,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",151,0)
 S IBL="Source: ",IBY=$$EXPAND^IBTRE(355.33,.03,$P(IB0,U,3))
"RTN","IBCNBLE",152,0)
 S IBLINE=$$SETL("",IBY,IBL,18,17)
"RTN","IBCNBLE",153,0)
 D SET(IBLINE) S IBLINE=""
"RTN","IBCNBLE",154,0)
 ;
"RTN","IBCNBLE",155,0)
 ; Call another routine for continuation of list build
"RTN","IBCNBLE",156,0)
 D BLD^IBCNBLE1
"RTN","IBCNBLE",157,0)
 ;
"RTN","IBCNBLE",158,0)
BLDQ Q
"RTN","IBCNBLE",159,0)
 ;
"RTN","IBCNBLE",160,0)
 ;
"RTN","IBCNBLE",161,0)
SETL(LINE,DATA,LABEL,COL,LNG) ;
"RTN","IBCNBLE",162,0)
 S LINE=LINE_$J("",(COL-$L(LABEL)-$L(LINE)))_LABEL_$E(DATA,1,LNG)
"RTN","IBCNBLE",163,0)
 Q LINE
"RTN","IBCNBLE",164,0)
 ;
"RTN","IBCNBLE",165,0)
SET(LINE,SPEC) ;
"RTN","IBCNBLE",166,0)
 S VALMCNT=VALMCNT+1
"RTN","IBCNBLE",167,0)
 S ^TMP("IBCNBLE",$J,VALMCNT,0)=LINE
"RTN","IBCNBLE",168,0)
 I $G(SPEC)="B" D CNTRL^VALM10(VALMCNT,1,80,IOINHI,IOINORM)
"RTN","IBCNBLE",169,0)
 Q
"RTN","IBCNBLE",170,0)
 ;
"RTN","IBCNBLE",171,0)
DATE(X) ;
"RTN","IBCNBLE",172,0)
 N Y S Y="" I X?7N.E S Y=$E(X,4,5)_"/"_$E(X,6,7)_"/"_$E(X,2,3)
"RTN","IBCNBLE",173,0)
 Q Y
"RTN","IBCNBLE",174,0)
 ;
"RTN","IBCNBLE",175,0)
YN(X) ;
"RTN","IBCNBLE",176,0)
 N Y S X=$G(X),Y=$S(X=1:"Yes",X=0:"No",1:"")
"RTN","IBCNBLE",177,0)
 Q Y
"RTN","IBCNBLE",178,0)
 ;
"RTN","IBCNBLE",179,0)
ADDR(NODE,FLD) ; format address for output
"RTN","IBCNBLE",180,0)
 N IBY,IB0,IBCS,IBST,IBZIP,IBJ,IBZ,IBX K ADDR S ADDR(1)=""
"RTN","IBCNBLE",181,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,NODE))
"RTN","IBCNBLE",182,0)
 S IBCS=$P(IB0,U,FLD+3),IBST=$P($G(^DIC(5,+$P(IB0,U,FLD+4),0)),U,2),IBZIP=$P(IB0,U,FLD+5)
"RTN","IBCNBLE",183,0)
 S IBZIP=$E(IBZIP,1,5)_$S($E(IBZIP,6,9)'="":"-"_$E(IBZIP,6,9),1:"")
"RTN","IBCNBLE",184,0)
 S IBST=IBST_$S(IBST=""!(IBZIP=""):"",1:"  ")_IBZIP
"RTN","IBCNBLE",185,0)
 S IBCS=IBCS_$S(IBCS=""!(IBST=""):"",1:", ")_IBST
"RTN","IBCNBLE",186,0)
 ;
"RTN","IBCNBLE",187,0)
 S IBJ=1 F IBY=$P(IB0,U,FLD),$P(IB0,U,(FLD+1)),$P(IB0,U,(FLD+2)),IBCS I IBY'="" S IBX=$G(ADDR(IBJ)),IBZ=", " D
"RTN","IBCNBLE",188,0)
 . S:IBX="" IBZ="" S:($L(IBX)+2+$L(IBY))>64 IBZ="",IBJ=IBJ+1
"RTN","IBCNBLE",189,0)
 . S ADDR(IBJ)=$G(ADDR(IBJ))_IBZ_IBY
"RTN","IBCNBLE",190,0)
 Q
"RTN","IBCNBLE",191,0)
 ;
"RTN","IBCNBLE",192,0)
TRACE(IBLINE,IBBUFDA) ; Add the eIIV Trace Number to the display
"RTN","IBCNBLE",193,0)
 NEW RESP,TRACENUM,IBL,IBY
"RTN","IBCNBLE",194,0)
 I '$G(IBBUFDA) G TRACEX
"RTN","IBCNBLE",195,0)
 S RESP=$O(^IBCN(365,"AF",IBBUFDA,""),-1)          ; response ien
"RTN","IBCNBLE",196,0)
 S TRACENUM=""
"RTN","IBCNBLE",197,0)
 I RESP S TRACENUM=$P($G(^IBCN(365,RESP,0)),U,9)   ; trace# field
"RTN","IBCNBLE",198,0)
 S IBL="eIV Trace #: ",IBY=TRACENUM               ; field label/data
"RTN","IBCNBLE",199,0)
 S IBLINE=$$SETL("",IBY,IBL,18,17)             ; add it
"RTN","IBCNBLE",200,0)
TRACEX ;
"RTN","IBCNBLE",201,0)
 Q IBLINE
"RTN","IBCNBLE",202,0)
 ;
"RTN","IBCNBLE1")
0^70^B27906815^B27903709
"RTN","IBCNBLE1",1,0)
IBCNBLE1 ;DAOU/ESG - Ins Buffer, Expand Entry, con't ;25-JUN-2002
"RTN","IBCNBLE1",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416**;21-MAR-94;Build 58
"RTN","IBCNBLE1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBLE1",4,0)
 ;
"RTN","IBCNBLE1",5,0)
 ; Can't be called from the top
"RTN","IBCNBLE1",6,0)
 Q
"RTN","IBCNBLE1",7,0)
 ;
"RTN","IBCNBLE1",8,0)
BLD ; Continuation of Expand Entry list build procedure
"RTN","IBCNBLE1",9,0)
 ; --- Called by IBCNBLE
"RTN","IBCNBLE1",10,0)
 ;
"RTN","IBCNBLE1",11,0)
 NEW ERR,MSG,IBL,IBY,IBLINE,IBER,IBLN,EDITED,ORIGSYME,ORIGSYMI,EEUPDATE
"RTN","IBCNBLE1",12,0)
 NEW ORIGSYMS
"RTN","IBCNBLE1",13,0)
 ;
"RTN","IBCNBLE1",14,0)
 ; save the external and internal IIV status values
"RTN","IBCNBLE1",15,0)
 S ORIGSYMS=$$SYMBOL^IBCNBLL(IBBUFDA)
"RTN","IBCNBLE1",16,0)
 S ORIGSYME=$$GET1^DIQ(355.33,IBBUFDA,.12,"E")
"RTN","IBCNBLE1",17,0)
 S ORIGSYMI=$P(IB0,U,12)
"RTN","IBCNBLE1",18,0)
 ;
"RTN","IBCNBLE1",19,0)
 ; Determine if Expand Entry is allowed to update the IIV Status
"RTN","IBCNBLE1",20,0)
 S EEUPDATE=1    ; default Expand Entry update flag to true
"RTN","IBCNBLE1",21,0)
 I ORIGSYMI,'$P($G(^IBE(365.15,ORIGSYMI,0)),U,3) S EEUPDATE=0
"RTN","IBCNBLE1",22,0)
 ;
"RTN","IBCNBLE1",23,0)
 ; Do not update the IIV status if manually verified
"RTN","IBCNBLE1",24,0)
 I ORIGSYMS="*" S EEUPDATE=0
"RTN","IBCNBLE1",25,0)
 ;
"RTN","IBCNBLE1",26,0)
 ; If the current IIV Status allows updates by Expand Entry, then
"RTN","IBCNBLE1",27,0)
 ; invoke the function that trys to find a valid payer
"RTN","IBCNBLE1",28,0)
 I EEUPDATE D
"RTN","IBCNBLE1",29,0)
 . S ERR=$$INSERROR^IBCNEUT3("B",IBBUFDA,1,.MSG)
"RTN","IBCNBLE1",30,0)
 . ; If no errors, then remove the IIV Status
"RTN","IBCNBLE1",31,0)
 . I 'ERR S ERR=$$SIDERR(IBBUFDA,$P(ERR,U,2))
"RTN","IBCNBLE1",32,0)
 . I 'ERR D CLEAR^IBCNEUT4(IBBUFDA,.EDITED)
"RTN","IBCNBLE1",33,0)
 . ; If errors found, then update with the new IIV Status
"RTN","IBCNBLE1",34,0)
 . I ERR D BUFF^IBCNEUT2(IBBUFDA,$P(ERR,U,1)) S EDITED=1
"RTN","IBCNBLE1",35,0)
 . ; refresh the IB0 variable for the possible symbol change
"RTN","IBCNBLE1",36,0)
 . S $P(IB0,U,12)=$P($G(^IBA(355.33,IBBUFDA,0)),U,12)
"RTN","IBCNBLE1",37,0)
 . Q
"RTN","IBCNBLE1",38,0)
 ;
"RTN","IBCNBLE1",39,0)
 ; Possibly display information if the OVERRIDE FRESHNESS FLAG is on
"RTN","IBCNBLE1",40,0)
 I $P(IB0,U,13) D
"RTN","IBCNBLE1",41,0)
 . S IBL="User Requested Inquiry?: ",IBY="YES"
"RTN","IBCNBLE1",42,0)
 . S IBLINE=$$SETL^IBCNBLE("",IBY,IBL,18,3)
"RTN","IBCNBLE1",43,0)
 . D SET^IBCNBLE(IBLINE) S IBLINE=""
"RTN","IBCNBLE1",44,0)
 . Q
"RTN","IBCNBLE1",45,0)
 ;
"RTN","IBCNBLE1",46,0)
 ; Display the Current Status line
"RTN","IBCNBLE1",47,0)
 S IBL="Current eIV Status: "
"RTN","IBCNBLE1",48,0)
 S IBY=$$GET1^DIQ(355.33,IBBUFDA,.12,"E")
"RTN","IBCNBLE1",49,0)
 I IBY="",$$SYMBOL^IBCNBLL(IBBUFDA)'="*" S IBY="No problems identified, Awaiting electronic processing"
"RTN","IBCNBLE1",50,0)
 I $$SYMBOL^IBCNBLL(IBBUFDA)="*" S IBY="Manually verified, No eIV activity at this time"
"RTN","IBCNBLE1",51,0)
 S IBLINE=$$SETL^IBCNBLE("",IBY,IBL,18,80)
"RTN","IBCNBLE1",52,0)
 D SET^IBCNBLE(IBLINE) S IBLINE=""
"RTN","IBCNBLE1",53,0)
 ;
"RTN","IBCNBLE1",54,0)
 ; Display any text returned by the payer function
"RTN","IBCNBLE1",55,0)
 F IBER=1:1:$G(MSG) D SET^IBCNBLE(" ") F IBLN=1:1:$P($G(MSG(IBER)),U,2) D SET^IBCNBLE("  "_$G(MSG(IBER,IBLN)))
"RTN","IBCNBLE1",56,0)
 ;
"RTN","IBCNBLE1",57,0)
 ; Display the current IIV Status generic description
"RTN","IBCNBLE1",58,0)
 D SYMTXT($P(IB0,U,12),1)
"RTN","IBCNBLE1",59,0)
 D SYMTXT($P(IB0,U,12),2)
"RTN","IBCNBLE1",60,0)
 ;
"RTN","IBCNBLE1",61,0)
 ; If the IIV Status ien changed from what it once was, then display the
"RTN","IBCNBLE1",62,0)
 ; Prior Status line
"RTN","IBCNBLE1",63,0)
 I ORIGSYMI'=$P(IB0,U,12) D
"RTN","IBCNBLE1",64,0)
 . I $P(IB0,U,12) D SET^IBCNBLE(" ")
"RTN","IBCNBLE1",65,0)
 . S IBL="Prior Status: "
"RTN","IBCNBLE1",66,0)
 . S IBY=ORIGSYME
"RTN","IBCNBLE1",67,0)
 . I IBY="",ORIGSYMS'="*" S IBY="No problems identified, Awaiting electronic processing"
"RTN","IBCNBLE1",68,0)
 . I ORIGSYMS="*" S IBY="Manually verified, No eIV activity at this time"
"RTN","IBCNBLE1",69,0)
 . S IBLINE=$$SETL^IBCNBLE("",IBY,IBL,18,80)
"RTN","IBCNBLE1",70,0)
 . D SET^IBCNBLE(IBLINE) S IBLINE=""
"RTN","IBCNBLE1",71,0)
 . D SYMTXT(ORIGSYMI,1)
"RTN","IBCNBLE1",72,0)
 . Q
"RTN","IBCNBLE1",73,0)
 ;
"RTN","IBCNBLE1",74,0)
 ; Display any existing EC errors
"RTN","IBCNBLE1",75,0)
 D ECERR
"RTN","IBCNBLE1",76,0)
 ;D SET^IBCNBLE(" ")
"RTN","IBCNBLE1",77,0)
 ;
"RTN","IBCNBLE1",78,0)
 ; If the IIV Status was modified then refresh the visual display
"RTN","IBCNBLE1",79,0)
 I $G(EDITED) D UPDLN^IBCNBLL(IBBUFDA,"EDITED")
"RTN","IBCNBLE1",80,0)
BLDX ;
"RTN","IBCNBLE1",81,0)
 Q
"RTN","IBCNBLE1",82,0)
 ;
"RTN","IBCNBLE1",83,0)
SYMTXT(IEN,TYPE) ; Display the text from the IIV symbol file for this entry
"RTN","IBCNBLE1",84,0)
 ; TYPE=1 - Display Description from IIV Status Table file
"RTN","IBCNBLE1",85,0)
 ; TYPE=2 - Display Corrective Action from IIV Status Table file
"RTN","IBCNBLE1",86,0)
 NEW IBJ
"RTN","IBCNBLE1",87,0)
 I '$G(IEN) G SYMX
"RTN","IBCNBLE1",88,0)
 I '$P($G(^IBE(365.15,IEN,TYPE,0)),U,4) G SYMX
"RTN","IBCNBLE1",89,0)
 D SET^IBCNBLE(" ")
"RTN","IBCNBLE1",90,0)
 S IBJ=0
"RTN","IBCNBLE1",91,0)
 F  S IBJ=$O(^IBE(365.15,IEN,TYPE,IBJ)) Q:'IBJ  D SET^IBCNBLE("  "_$G(^IBE(365.15,IEN,TYPE,IBJ,0)))
"RTN","IBCNBLE1",92,0)
SYMX ;
"RTN","IBCNBLE1",93,0)
 Q
"RTN","IBCNBLE1",94,0)
 ;
"RTN","IBCNBLE1",95,0)
ECERR ; Display the Eligibility Communicator Error data from the
"RTN","IBCNBLE1",96,0)
 ; response file if it exists
"RTN","IBCNBLE1",97,0)
 ;
"RTN","IBCNBLE1",98,0)
 NEW RESP,RESPDATA,ERRTXT,IBY,IBLINE,ERRDATA,FUTDT,TQIEN,IBERR,IBCT
"RTN","IBCNBLE1",99,0)
 S RESP=$O(^IBCN(365,"AF",IBBUFDA,""),-1)
"RTN","IBCNBLE1",100,0)
 I 'RESP G ECERRX
"RTN","IBCNBLE1",101,0)
 S RESPDATA=$G(^IBCN(365,RESP,1))
"RTN","IBCNBLE1",102,0)
 S ERRTXT=$P($G(^IBCN(365,RESP,4)),U,1)
"RTN","IBCNBLE1",103,0)
 S TQIEN=+$P($G(^IBCN(365,RESP,0)),U,5)    ; Trans Queue file ien
"RTN","IBCNBLE1",104,0)
 S FUTDT=$P($G(^IBCN(365.1,TQIEN,0)),U,9)  ; Future date to transmit
"RTN","IBCNBLE1",105,0)
 I '$P(RESPDATA,U,14),'$P(RESPDATA,U,15),ERRTXT="",'FUTDT G ECERRX
"RTN","IBCNBLE1",106,0)
 ;
"RTN","IBCNBLE1",107,0)
 ; At this point, we know there's something to get displayed
"RTN","IBCNBLE1",108,0)
 ;
"RTN","IBCNBLE1",109,0)
 ; Display section header
"RTN","IBCNBLE1",110,0)
 D SET^IBCNBLE(" ")
"RTN","IBCNBLE1",111,0)
 S IBY=$J("",19)_"Eligibility Communicator Error Information"
"RTN","IBCNBLE1",112,0)
 D SET^IBCNBLE(IBY,"B") S IBLINE=""
"RTN","IBCNBLE1",113,0)
 ;
"RTN","IBCNBLE1",114,0)
 ; Display Error Condition data - field# 1.14
"RTN","IBCNBLE1",115,0)
 I $P(RESPDATA,U,14) D
"RTN","IBCNBLE1",116,0)
 . S ERRDATA=$G(^IBE(365.017,$P(RESPDATA,U,14),0))
"RTN","IBCNBLE1",117,0)
 . K IBERR
"RTN","IBCNBLE1",118,0)
 . S IBERR(1)=$P(ERRDATA,U,2)_" (Error Condition '"_$P(ERRDATA,U,1)_"')"
"RTN","IBCNBLE1",119,0)
 . D TXT^IBCNEUT7("IBERR")
"RTN","IBCNBLE1",120,0)
 . F IBCT=1:1:$O(IBERR(""),-1) D SET^IBCNBLE(IBERR(IBCT))
"RTN","IBCNBLE1",121,0)
 . Q
"RTN","IBCNBLE1",122,0)
 ;
"RTN","IBCNBLE1",123,0)
 ; Display Error Action data - field# 1.15
"RTN","IBCNBLE1",124,0)
 I $P(RESPDATA,U,15) D
"RTN","IBCNBLE1",125,0)
 . S ERRDATA=$G(^IBE(365.018,$P(RESPDATA,U,15),0))
"RTN","IBCNBLE1",126,0)
 . K IBERR
"RTN","IBCNBLE1",127,0)
 . S IBERR(1)=$P(ERRDATA,U,2)_" (Error Action '"_$P(ERRDATA,U,1)_"')"
"RTN","IBCNBLE1",128,0)
 . D TXT^IBCNEUT7("IBERR")
"RTN","IBCNBLE1",129,0)
 . F IBCT=1:1:$O(IBERR(""),-1) D SET^IBCNBLE(IBERR(IBCT))
"RTN","IBCNBLE1",130,0)
 . Q
"RTN","IBCNBLE1",131,0)
 ;
"RTN","IBCNBLE1",132,0)
 ; Display Error Text data - field# 4.01
"RTN","IBCNBLE1",133,0)
 I ERRTXT'="" D SET^IBCNBLE(ERRTXT)
"RTN","IBCNBLE1",134,0)
 ;
"RTN","IBCNBLE1",135,0)
 ; Display Date of Future Transmission - field# .09 in file 365.1
"RTN","IBCNBLE1",136,0)
 I FUTDT D
"RTN","IBCNBLE1",137,0)
 . S FUTDT=$$FMTE^XLFDT(FUTDT,"5Z")
"RTN","IBCNBLE1",138,0)
 . D SET^IBCNBLE(" ")
"RTN","IBCNBLE1",139,0)
 . S IBLINE="     Date of Future Transmission:  "_FUTDT
"RTN","IBCNBLE1",140,0)
 . D SET^IBCNBLE(IBLINE) S IBLINE=""
"RTN","IBCNBLE1",141,0)
 . Q
"RTN","IBCNBLE1",142,0)
ECERRX ;
"RTN","IBCNBLE1",143,0)
 Q
"RTN","IBCNBLE1",144,0)
 ;
"RTN","IBCNBLE1",145,0)
SIDERR(BUF,PIEN) ;
"RTN","IBCNBLE1",146,0)
 ; If Subscriber ID is required and SSN cannot be substituted
"RTN","IBCNBLE1",147,0)
 ; and buffer does not have a sub id -> return error
"RTN","IBCNBLE1",148,0)
 ; BUF = buffer IEN
"RTN","IBCNBLE1",149,0)
 ; PIEN = payer IEN
"RTN","IBCNBLE1",150,0)
 ;
"RTN","IBCNBLE1",151,0)
 N ERR,SID,APPIEN,SIDSTR,SIDREQ,SIDSSN
"RTN","IBCNBLE1",152,0)
 S ERR=""
"RTN","IBCNBLE1",153,0)
 S SID=$P($G(^IBA(355.33,BUF,60)),U,4)
"RTN","IBCNBLE1",154,0)
 I SID]"" G SIDX ; Subscriber id is populated, further checking is moot
"RTN","IBCNBLE1",155,0)
 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNBLE1",156,0)
 S SIDSTR=$G(^IBE(365.12,PIEN,1,APPIEN,0))
"RTN","IBCNBLE1",157,0)
 S SIDREQ=$P(SIDSTR,U,8) I 'SIDREQ G SIDX ; if sub id is not req'd - ok
"RTN","IBCNBLE1",158,0)
 S SIDSSN=$P(SIDSTR,U,9)
"RTN","IBCNBLE1",159,0)
 I 'SIDSSN S ERR=18 ; if ssn cannot be used -> B15 status (IEN = 18)
"RTN","IBCNBLE1",160,0)
SIDX Q ERR
"RTN","IBCNBLE1",161,0)
 ;
"RTN","IBCNBLL")
0^57^B90593913^B58797432
"RTN","IBCNBLL",1,0)
IBCNBLL ;ALB/ARH - Ins Buffer: LM main screen, list buffer entries ;1 Jun 97
"RTN","IBCNBLL",2,0)
 ;;2.0;INTEGRATED BILLING;**82,149,153,183,184,271,345,416**;21-MAR-94;Build 58
"RTN","IBCNBLL",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBLL",4,0)
 ;
"RTN","IBCNBLL",5,0)
EN ; - main entry point for screen
"RTN","IBCNBLL",6,0)
 N VIEW,AVIEW,DFLG
"RTN","IBCNBLL",7,0)
 S VIEW=1,AVIEW=0 ; default to positive view
"RTN","IBCNBLL",8,0)
 D EN^VALM("IBCNB INSURANCE BUFFER LIST")
"RTN","IBCNBLL",9,0)
 Q
"RTN","IBCNBLL",10,0)
 ;
"RTN","IBCNBLL",11,0)
EN1(V) ; entry point from view changing actions
"RTN","IBCNBLL",12,0)
 S VIEW=V S AVIEW=$S(VIEW=4:1,1:0)
"RTN","IBCNBLL",13,0)
 D INIT,HDR
"RTN","IBCNBLL",14,0)
 S VALMBCK="R",VALMBG=1
"RTN","IBCNBLL",15,0)
 Q
"RTN","IBCNBLL",16,0)
 ;
"RTN","IBCNBLL",17,0)
HDR ;  header code for list manager display
"RTN","IBCNBLL",18,0)
 S VALMHDR(1)="Sorted by: "_$P(IBCNSORT,U,2)
"RTN","IBCNBLL",19,0)
 I $P(IBCNSORT,U,3)'="" S VALMHDR(1)=VALMHDR(1)_", """_$P(IBCNSORT,U,3)_""" first"
"RTN","IBCNBLL",20,0)
 I VIEW=1 S VALM("TITLE")="Positive Insurance Buffer",VALMSG="*Verified    +Active  ?Await/Reply"
"RTN","IBCNBLL",21,0)
 I VIEW=2 S VALM("TITLE")="Negative Insurance Buffer",VALMSG="*Verified    -N/Active  #Unclear  !Unable/Send"
"RTN","IBCNBLL",22,0)
 I VIEW=3 S VALM("TITLE")="Medicare(WNR) Insurance Buffer",VALMSG="*Verified +Act -N/Act ?Await/R #Unclr !Unable/Send"
"RTN","IBCNBLL",23,0)
 I VIEW=4 S VALM("TITLE")="Future Appointments Buffer",VALMSG="!Unable/Send"
"RTN","IBCNBLL",24,0)
 Q
"RTN","IBCNBLL",25,0)
 ;
"RTN","IBCNBLL",26,0)
INIT ;  initialization for list manager list
"RTN","IBCNBLL",27,0)
 K ^TMP("IBCNBLL",$J),^TMP("IBCNBLLX",$J),^TMP("IBCNBLLY",$J),^TMP($J,"IBCNBLLS"),^TMP($J,"IBCNAPPTS")
"RTN","IBCNBLL",28,0)
 S:$G(IBCNSORT)="" IBCNSORT=$S(VIEW=1:"10^Positive Response",1:"1^Patient Name")
"RTN","IBCNBLL",29,0)
 D BLD
"RTN","IBCNBLL",30,0)
 Q
"RTN","IBCNBLL",31,0)
 ;
"RTN","IBCNBLL",32,0)
HELP ;  list manager help
"RTN","IBCNBLL",33,0)
 D FULL^VALM1
"RTN","IBCNBLL",34,0)
 S VALMBCK="R"
"RTN","IBCNBLL",35,0)
 W @IOF
"RTN","IBCNBLL",36,0)
 W !,"Flags displayed on screen if they apply to the Buffer entry:"
"RTN","IBCNBLL",37,0)
 W !,"   i - Patient has other currently effective Insurance"
"RTN","IBCNBLL",38,0)
 W !,"   I - Patient is currently admitted as an Inpatient"
"RTN","IBCNBLL",39,0)
 W !,"   E - Patient has Expired"
"RTN","IBCNBLL",40,0)
 W !,"   Y - Means Test Copay Patient"
"RTN","IBCNBLL",41,0)
 W !,"   H - Patient has Bills On Hold"
"RTN","IBCNBLL",42,0)
 W !,"   * - Buffer entry Verified by User"
"RTN","IBCNBLL",43,0)
 D PAUSE^VALM1 I 'Y Q
"RTN","IBCNBLL",44,0)
 W !,"Sources displayed on the screen if they apply to the Buffer entry:"
"RTN","IBCNBLL",45,0)
 W !,"   I - Interview"
"RTN","IBCNBLL",46,0)
 W !,"   P - Pre-registration"
"RTN","IBCNBLL",47,0)
 W !,"   M - Medicare"
"RTN","IBCNBLL",48,0)
 W !,"   D - Data Match"
"RTN","IBCNBLL",49,0)
 W !,"   E - eIV"
"RTN","IBCNBLL",50,0)
 W !,"   R - ICB"
"RTN","IBCNBLL",51,0)
 W !,"   V - IVM"
"RTN","IBCNBLL",52,0)
 W !,"   H - HMS"
"RTN","IBCNBLL",53,0)
 W !,"   C - Contract Services"
"RTN","IBCNBLL",54,0)
 D PAUSE^VALM1 I 'Y Q
"RTN","IBCNBLL",55,0)
 W !,"eIV Electronic Insurance Verification Status"
"RTN","IBCNBLL",56,0)
 W !!,"The following eIV Status indicators may appear to the left of the patient name:",!
"RTN","IBCNBLL",57,0)
 I VIEW=1 D
"RTN","IBCNBLL",58,0)
 .W !,"      + - eIV payer response indicates this is an active policy."
"RTN","IBCNBLL",59,0)
 .W !,"      ? - Awaiting electronic reply from eIV Payer."
"RTN","IBCNBLL",60,0)
 .W !,"<Blank> - Entry added through manual process."
"RTN","IBCNBLL",61,0)
 .Q
"RTN","IBCNBLL",62,0)
 I VIEW=2 D
"RTN","IBCNBLL",63,0)
 .W !,"- - eIV payer response indicates this is NOT an active policy."
"RTN","IBCNBLL",64,0)
 .W !,"# - Can not determine from eIV response if coverage is Active."
"RTN","IBCNBLL",65,0)
 .W !,"    Review Response Report. Manual verification required."
"RTN","IBCNBLL",66,0)
 .W !,"! - eIV was unable to send an inquiry for this entry."
"RTN","IBCNBLL",67,0)
 .W !,"    Corrections  required before eIV can send inquiry."
"RTN","IBCNBLL",68,0)
 .Q
"RTN","IBCNBLL",69,0)
 I VIEW=3 D
"RTN","IBCNBLL",70,0)
 .W !,"      + - eIV payer response indicates this is an active policy."
"RTN","IBCNBLL",71,0)
 .W !,"      ? - Awaiting electronic reply from eIV Payer."
"RTN","IBCNBLL",72,0)
 .W !,"      # - Can not determine from eIV response if coverage is Active."
"RTN","IBCNBLL",73,0)
 .W !,"          Review Response Report. Manual verification required."
"RTN","IBCNBLL",74,0)
 .W !,"      ! - eIV was unable to send an inquiry for this entry."
"RTN","IBCNBLL",75,0)
 .W !,"          Corrections required or payer not Active."
"RTN","IBCNBLL",76,0)
 .W !,"      - - eIV payer response indicates this is NOT an active policy."
"RTN","IBCNBLL",77,0)
 .W !,"<Blank> - Entry added through manual process."
"RTN","IBCNBLL",78,0)
 .Q
"RTN","IBCNBLL",79,0)
 I VIEW=4 D
"RTN","IBCNBLL",80,0)
 .W !,"! - eIV was unable to send an inquiry for this entry."
"RTN","IBCNBLL",81,0)
 .W !,"    Corrections required or payer not Active."
"RTN","IBCNBLL",82,0)
 .Q
"RTN","IBCNBLL",83,0)
 D PAUSE^VALM1 I 'Y Q
"RTN","IBCNBLL",84,0)
 W !,"When an entry is Processed it is either:"
"RTN","IBCNBLL",85,0)
 W !,"   Accepted - the Buffer entry's data is stored in the main Insurance files."
"RTN","IBCNBLL",86,0)
 W !,"            - the modified Insurance entry is flagged as Verified."
"RTN","IBCNBLL",87,0)
 W !
"RTN","IBCNBLL",88,0)
 W !,"   Rejected - the Buffer entry's data is not stored in the main Insurance files."
"RTN","IBCNBLL",89,0)
 W !!
"RTN","IBCNBLL",90,0)
 W !,"Once an entry is processed (either accepted or rejected) most of the data in"
"RTN","IBCNBLL",91,0)
 W !,"the Buffer File entry is deleted leaving only a stub entry for tracking"
"RTN","IBCNBLL",92,0)
 W !,"and reporting purposes."
"RTN","IBCNBLL",93,0)
 W !!
"RTN","IBCNBLL",94,0)
 W !,"The IB INSURANCE SUPERVISOR key is required to either Accept or Reject an entry."
"RTN","IBCNBLL",95,0)
 D PAUSE^VALM1
"RTN","IBCNBLL",96,0)
 Q
"RTN","IBCNBLL",97,0)
 ;
"RTN","IBCNBLL",98,0)
EXIT ;  exit list manager option and clean up
"RTN","IBCNBLL",99,0)
 K ^TMP("IBCNBLL",$J),^TMP("IBCNBLLX",$J),^TMP("IBCNBLLY",$J),^TMP($J,"IBCNBLLS"),^TMP($J,"SDAMA301"),^TMP($J,"IBCNAPPTS")
"RTN","IBCNBLL",100,0)
 K IBCNSORT,IBCNSCRN,DFN,IBINSDA,IBFASTXT,IBBUFDA
"RTN","IBCNBLL",101,0)
 D CLEAR^VALM1
"RTN","IBCNBLL",102,0)
 Q
"RTN","IBCNBLL",103,0)
 ;
"RTN","IBCNBLL",104,0)
BLD ;  build screen display
"RTN","IBCNBLL",105,0)
 N IBCNT,IBCNS1,IBCNS2,IBBUFDA,IBLINE
"RTN","IBCNBLL",106,0)
 ;
"RTN","IBCNBLL",107,0)
 D SORT S IBCNT=0,VALMCNT=0,IBBUFDA=0
"RTN","IBCNBLL",108,0)
 ;
"RTN","IBCNBLL",109,0)
 S IBCNS1="" F  S IBCNS1=$O(^TMP($J,"IBCNBLLS",IBCNS1)) Q:IBCNS1=""  D
"RTN","IBCNBLL",110,0)
 .S IBCNS2="" F  S IBCNS2=$O(^TMP($J,"IBCNBLLS",IBCNS1,IBCNS2)) Q:IBCNS2=""  D
"RTN","IBCNBLL",111,0)
 ..S IBBUFDA=0 F  S IBBUFDA=$O(^TMP($J,"IBCNBLLS",IBCNS1,IBCNS2,IBBUFDA)) Q:'IBBUFDA  D
"RTN","IBCNBLL",112,0)
 ...S DFLG=^TMP($J,"IBCNBLLS",IBCNS1,IBCNS2,IBBUFDA)
"RTN","IBCNBLL",113,0)
 ...S IBCNT=IBCNT+1 I '$D(ZTQUEUED),'(IBCNT#15) W "."
"RTN","IBCNBLL",114,0)
 ...S IBLINE=$$BLDLN(IBBUFDA,IBCNT,DFLG)
"RTN","IBCNBLL",115,0)
 ...D SET(IBLINE,IBCNT)
"RTN","IBCNBLL",116,0)
 ;
"RTN","IBCNBLL",117,0)
 I VALMCNT=0 D SET("",0),SET("There are no Buffer entries that have not been processed.",0)
"RTN","IBCNBLL",118,0)
 Q
"RTN","IBCNBLL",119,0)
 ;
"RTN","IBCNBLL",120,0)
BLDLN(IBBUFDA,IBCNT,DFLG) ; build line to display on List screen for one Buffer entry
"RTN","IBCNBLL",121,0)
 N DFN,IB0,IB20,IB60,IBLINE,IBY,VAIN,VADM,VA,VAERR,X,Y,IBMTS S IBLINE="",IBBUFDA=+$G(IBBUFDA)
"RTN","IBCNBLL",122,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0)),IB20=$G(^IBA(355.33,IBBUFDA,20)),IB60=$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBLL",123,0)
 S DFN=+IB60 I +DFN D DEM^VADPT,INP^VADPT
"RTN","IBCNBLL",124,0)
 ;
"RTN","IBCNBLL",125,0)
 S IBY=$G(IBCNT),IBLINE=$$SETSTR^VALM1(IBY,"",1,4)
"RTN","IBCNBLL",126,0)
 ;
"RTN","IBCNBLL",127,0)
 ; ESG - 6/6/02 - SDD 5.1.8
"RTN","IBCNBLL",128,0)
 ; pull the symbol from the symbol function
"RTN","IBCNBLL",129,0)
 ;
"RTN","IBCNBLL",130,0)
 S IBY=$$SYMBOL(IBBUFDA)
"RTN","IBCNBLL",131,0)
 S IBY=IBY_$P($G(^DPT(+DFN,0)),U,1),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,5,20)
"RTN","IBCNBLL",132,0)
 S IBLINE=$$SETSTR^VALM1(DFLG,IBLINE,25,1)
"RTN","IBCNBLL",133,0)
 S IBY=$G(VA("BID")),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,27,4)
"RTN","IBCNBLL",134,0)
 S IBY=$P(IB20,U,1),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,32,17)
"RTN","IBCNBLL",135,0)
 S IBY=$P(IB60,U,4),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,50,13)
"RTN","IBCNBLL",136,0)
 S IBY=$$GET1^DIQ(355.12,$P(IB0,U,3),.03),IBLINE=$$SETSTR^VALM1($$SRCCNV(IBY),IBLINE,64,1)
"RTN","IBCNBLL",137,0)
 S IBY=$$DATE(+IB0),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,66,8)
"RTN","IBCNBLL",138,0)
 S IBY="" D  S IBLINE=$$SETSTR^VALM1(IBY,IBLINE,76,5)
"RTN","IBCNBLL",139,0)
 . S IBY=IBY_$S(+$$INSURED^IBCNS1(DFN,DT):"i",1:" ")
"RTN","IBCNBLL",140,0)
 . S IBY=IBY_$S(+$G(VAIN(1)):"I",1:" ")
"RTN","IBCNBLL",141,0)
 . S IBY=IBY_$S(+$G(VADM(6)):"E",1:" ")
"RTN","IBCNBLL",142,0)
 . S IBMTS=$P($$LST^DGMTU(DFN),U,4)
"RTN","IBCNBLL",143,0)
 . S IBY=IBY_$S(IBMTS="C":"Y",IBMTS="G":"Y",1:" ")
"RTN","IBCNBLL",144,0)
 . S IBY=IBY_$S(+$$HOLD(DFN):"H",1:" ")
"RTN","IBCNBLL",145,0)
 Q IBLINE
"RTN","IBCNBLL",146,0)
 ;
"RTN","IBCNBLL",147,0)
SET(LINE,CNT) ;  set up list manager screen display array
"RTN","IBCNBLL",148,0)
 S VALMCNT=VALMCNT+1
"RTN","IBCNBLL",149,0)
 S ^TMP("IBCNBLL",$J,VALMCNT,0)=LINE Q:'CNT
"RTN","IBCNBLL",150,0)
 S ^TMP("IBCNBLL",$J,"IDX",VALMCNT,+CNT)=""
"RTN","IBCNBLL",151,0)
 S ^TMP("IBCNBLLX",$J,CNT)=VALMCNT_U_IBBUFDA
"RTN","IBCNBLL",152,0)
 S ^TMP("IBCNBLLY",$J,IBBUFDA)=VALMCNT_U_+CNT
"RTN","IBCNBLL",153,0)
 Q
"RTN","IBCNBLL",154,0)
 ;
"RTN","IBCNBLL",155,0)
SORT ;  set up sort for list screen
"RTN","IBCNBLL",156,0)
 ;  1^Patient Name, 2^Ins Name, 3^Source Of Info, 4^Date Entered, 5^Inpatient (Y/N), 6^Means Test (Y/N), 7^On Hold, 8^Verified, 9^eIV Status, 10^Positive Response
"RTN","IBCNBLL",157,0)
 N APPTNUM,IB0,IB20,IB60,IBCNDT,IBBUFDA,IBCNDFN,IBCNPAT,IBCSORT1,IBCSORT2,IBSDA,DFN,VAIN,VA,VAERR,IBX,IBCNT,INAME,SYM,MWNRFLG,MWNRIEN,X,Y
"RTN","IBCNBLL",158,0)
 S IBCNT=0
"RTN","IBCNBLL",159,0)
 ;
"RTN","IBCNBLL",160,0)
 K ^TMP($J,"IBCNBLLS") I '$G(IBCNSORT) S IBCNSORT="1^Patient Name"
"RTN","IBCNBLL",161,0)
 ; get payer ien for Medicare WNR
"RTN","IBCNBLL",162,0)
 S MWNRIEN=$P($G(^IBE(350.9,1,51)),U,25)
"RTN","IBCNBLL",163,0)
 ;
"RTN","IBCNBLL",164,0)
 S IBCNDT=0 F  S IBCNDT=$O(^IBA(355.33,"AEST","E",IBCNDT)) Q:'IBCNDT  D
"RTN","IBCNBLL",165,0)
 .S IBBUFDA=0 F  S IBBUFDA=$O(^IBA(355.33,"AEST","E",IBCNDT,IBBUFDA)) Q:'IBBUFDA  D
"RTN","IBCNBLL",166,0)
 ..S IBCNT=IBCNT+1 I '$D(ZTQUEUED),'(IBCNT#15) W "."
"RTN","IBCNBLL",167,0)
 ..S IB0=$G(^IBA(355.33,IBBUFDA,0)),IB20=$G(^IBA(355.33,IBBUFDA,20)),IB60=$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBLL",168,0)
 ..S IBCNDFN=+IB60,IBCNPAT="" I +IBCNDFN S IBCNPAT=$P($G(^DPT(IBCNDFN,0)),U,1)
"RTN","IBCNBLL",169,0)
 ..S INAME=$P(IB20,U)
"RTN","IBCNBLL",170,0)
 ..;
"RTN","IBCNBLL",171,0)
 ..I +IBCNSORT=1 S IBCSORT1=IBCNPAT
"RTN","IBCNBLL",172,0)
 ..I +IBCNSORT=2 S IBCSORT1=INAME
"RTN","IBCNBLL",173,0)
 ..I +IBCNSORT=3 S IBCSORT1=$P(IB0,U,3)
"RTN","IBCNBLL",174,0)
 ..I +IBCNSORT=4 S IBCSORT1=$P(+IB0,".",1)
"RTN","IBCNBLL",175,0)
 ..I +IBCNSORT=5 I +IBCNDFN S DFN=+IBCNDFN D INP^VADPT S IBCSORT1=$S($G(VAIN(1)):1,1:2)
"RTN","IBCNBLL",176,0)
 ..I +IBCNSORT=6 I +IBCNDFN S IBX=$P($$LST^DGMTU(IBCNDFN),U,4) S IBCSORT1=$S(IBX="C":1,IBX="G":1,1:2)
"RTN","IBCNBLL",177,0)
 ..I +IBCNSORT=7 I +IBCNDFN S IBX=$$HOLD(IBCNDFN) S IBCSORT1=$S(+IBX:1,1:2)
"RTN","IBCNBLL",178,0)
 ..I +IBCNSORT=8 S IBCSORT1=$S(+$P(IB0,U,10):1,1:2)
"RTN","IBCNBLL",179,0)
 ..; Sort by symbol and then within the symbol, sort by date entered
"RTN","IBCNBLL",180,0)
 ..; Build a numerical subscript with format ##.FM date
"RTN","IBCNBLL",181,0)
 ..S SYM=$$SYMBOL(IBBUFDA)
"RTN","IBCNBLL",182,0)
 ..I +IBCNSORT=9 S IBCSORT1=$G(IBCNSORT(1,SYM))_"."_$P(+IB0,".",1),IBCSORT1=+IBCSORT1
"RTN","IBCNBLL",183,0)
 ..;
"RTN","IBCNBLL",184,0)
 ..I +IBCNSORT=10 S IBCSORT1=$S(SYM="+":0,1:1),IBCSORT2=IBCNPAT
"RTN","IBCNBLL",185,0)
 ..;
"RTN","IBCNBLL",186,0)
 ..S IBCSORT1=$S($G(IBCSORT1)="":"~UNKNOWN",1:IBCSORT1),IBCSORT2=$S(IBCNPAT="":"~UNKNOWN",1:IBCNPAT)
"RTN","IBCNBLL",187,0)
 ..; get future appointments
"RTN","IBCNBLL",188,0)
 ..S IBSDA(1)=DT,IBSDA(3)="R;I;NT",IBSDA(4)=IBCNDFN,IBSDA("FLDS")="1;2"
"RTN","IBCNBLL",189,0)
 ..S DFLG="",APPTNUM=$$SDAPI^SDAMA301(.IBSDA) I APPTNUM>0,SYM="!" S DFLG="d" ; duplicate flag
"RTN","IBCNBLL",190,0)
 ..S MWNRFLG=0 I MWNRIEN'="",$P($$INSERROR^IBCNEUT3("B",IBBUFDA),U,2)=MWNRIEN S MWNRFLG=1
"RTN","IBCNBLL",191,0)
 ..I VIEW=1 Q:MWNRFLG=1  Q:SYM'="*"&(SYM'="+")&(SYM'="?")&(SYM'=" ")
"RTN","IBCNBLL",192,0)
 ..I VIEW=2 Q:MWNRFLG=1  Q:SYM'="*"&(SYM'="-")&(SYM'="#")&(SYM'="!")
"RTN","IBCNBLL",193,0)
 ..I VIEW=3 Q:MWNRFLG=0
"RTN","IBCNBLL",194,0)
 ..I VIEW=4 Q:SYM'="!"  Q:APPTNUM<1  M ^TMP($J,"IBCNAPPTS")=^TMP($J,"SDAMA301")
"RTN","IBCNBLL",195,0)
 ..S ^TMP($J,"IBCNBLLS",IBCSORT1,IBCSORT2,IBBUFDA)=DFLG
"RTN","IBCNBLL",196,0)
 ..K VAIN,IBCSORT1,IBCSORT2
"RTN","IBCNBLL",197,0)
 ..Q
"RTN","IBCNBLL",198,0)
 .Q
"RTN","IBCNBLL",199,0)
 I IBCNT,'$D(ZTQUEUED) W "|"
"RTN","IBCNBLL",200,0)
 Q
"RTN","IBCNBLL",201,0)
 ;
"RTN","IBCNBLL",202,0)
DATE(X) ;
"RTN","IBCNBLL",203,0)
 Q $E(X,4,5)_"/"_$E(X,6,7)_"/"_$E(X,2,3)
"RTN","IBCNBLL",204,0)
HOLD(DFN) ; returns true if patient has bills On Hold
"RTN","IBCNBLL",205,0)
 Q $D(^IB("AH",+$G(DFN)))
"RTN","IBCNBLL",206,0)
 ;
"RTN","IBCNBLL",207,0)
SYMBOL(IBBUFDA) ; Returns the symbol for this buffer entry
"RTN","IBCNBLL",208,0)
 NEW IB0,SYM
"RTN","IBCNBLL",209,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0)),SYM=""
"RTN","IBCNBLL",210,0)
 I +$P(IB0,U,12) S SYM=$C($P($G(^IBE(365.15,+$P(IB0,U,12),0)),U,2))
"RTN","IBCNBLL",211,0)
 ; If the entry has been manually verified, override the symbol displayed
"RTN","IBCNBLL",212,0)
 I $P(IB0,U,10)'="",'+$P(IB0,U,12) S SYM="*"
"RTN","IBCNBLL",213,0)
 I SYM="" S SYM=" "
"RTN","IBCNBLL",214,0)
 Q SYM
"RTN","IBCNBLL",215,0)
 ;
"RTN","IBCNBLL",216,0)
 ;
"RTN","IBCNBLL",217,0)
UPDLN(IBBUFDA,ACTION) ; *** called by any action that modifies a buffer entry, so list screen can be updated if screen not recompiled
"RTN","IBCNBLL",218,0)
 ; modifies a single line in the display array for a buffer entry that has been modified in some way
"RTN","IBCNBLL",219,0)
 ; ACTION = REJECTED, ACCEPTED, EDITED
"RTN","IBCNBLL",220,0)
 N IBARRN,IBOLD,IBNEW,IBO,IBN S IBO="0123456789",IBN="----------"
"RTN","IBCNBLL",221,0)
 ;
"RTN","IBCNBLL",222,0)
 S IBARRN=$G(^TMP("IBCNBLLY",$J,+$G(IBBUFDA))) Q:'IBARRN
"RTN","IBCNBLL",223,0)
 S IBOLD=$G(^TMP("IBCNBLL",$J,+IBARRN,0)) Q:IBOLD=""
"RTN","IBCNBLL",224,0)
 ;
"RTN","IBCNBLL",225,0)
 ; if action is REJECTED or ACCEPTED then the patient name is replaced by the Action in the display array
"RTN","IBCNBLL",226,0)
 ; and the buffer entry is removed from the list of entries that can be selected
"RTN","IBCNBLL",227,0)
 I (ACTION="REJECTED")!(ACTION="ACCEPTED") D
"RTN","IBCNBLL",228,0)
 . S IBNEW=$TR($E(IBOLD,1,5),IBO,IBN)_ACTION_$J("",7)_$E(IBOLD,21,999)
"RTN","IBCNBLL",229,0)
 . S ^TMP("IBCNBLL",$J,+IBARRN,0)=IBNEW
"RTN","IBCNBLL",230,0)
 ;
"RTN","IBCNBLL",231,0)
 ; if the action is EDITED then the line for the buffer entry is recomplied and the updated line is set into 
"RTN","IBCNBLL",232,0)
 ; the display array
"RTN","IBCNBLL",233,0)
 I ACTION="EDITED" D
"RTN","IBCNBLL",234,0)
 . S IBNEW=$$BLDLN(IBBUFDA,+$P(IBARRN,U,2),$E(IBOLD,25))
"RTN","IBCNBLL",235,0)
 . S ^TMP("IBCNBLL",$J,+IBARRN,0)=IBNEW
"RTN","IBCNBLL",236,0)
 Q
"RTN","IBCNBLL",237,0)
 ;
"RTN","IBCNBLL",238,0)
SRCCNV(SRC) ; convert Source of Info acronym from field 355.12/.03 into 1 char code
"RTN","IBCNBLL",239,0)
 N CODSTR,I,SRCSTR
"RTN","IBCNBLL",240,0)
 S SRCSTR="INTVW^DMTCH^IVM^PreRg^eIV^HMS^MCR^ICB^CS"
"RTN","IBCNBLL",241,0)
 S CODSTR="I^D^V^P^E^H^M^R^C"
"RTN","IBCNBLL",242,0)
 S CODE=""
"RTN","IBCNBLL",243,0)
 I $G(SRC)'="" F I=1:1:9 S:SRC=$P(SRCSTR,U,I) CODE=$P(CODSTR,U,I) Q:CODE'=""
"RTN","IBCNBLL",244,0)
 Q CODE
"RTN","IBCNBMI")
0^66^B85358524^B80184806
"RTN","IBCNBMI",1,0)
IBCNBMI ;ALB/ARH-Ins Buffer: move buffer data to insurance files ;09 Mar 2005  11:42 AM
"RTN","IBCNBMI",2,0)
 ;;2.0;INTEGRATED BILLING;**82,184,246,251,299,345,361,371,413,416**;21-MAR-94;Build 58
"RTN","IBCNBMI",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBMI",4,0)
 ;
"RTN","IBCNBMI",5,0)
INS(IBBUFDA,IBINSDA,TYPE,RESULT) ;  move buffer insurance company data (file 355.33) to existing Insurance Company (file 36)
"RTN","IBCNBMI",6,0)
 ;
"RTN","IBCNBMI",7,0)
 S IBBUFDA=IBBUFDA_",",IBINSDA=$G(IBINSDA)_","
"RTN","IBCNBMI",8,0)
 D SET("INS",IBBUFDA,IBINSDA,TYPE,.RESULT)
"RTN","IBCNBMI",9,0)
 Q
"RTN","IBCNBMI",10,0)
 ;
"RTN","IBCNBMI",11,0)
GRP(IBBUFDA,IBGRPDA,TYPE,RESULT) ;  move buffer insurance group/plan data (file 355.33) to existing Group/Plan (file 355.33)
"RTN","IBCNBMI",12,0)
 ;
"RTN","IBCNBMI",13,0)
 S IBBUFDA=IBBUFDA_",",IBGRPDA=$G(IBGRPDA)_","
"RTN","IBCNBMI",14,0)
 D SET("GRP",IBBUFDA,IBGRPDA,TYPE,.RESULT)
"RTN","IBCNBMI",15,0)
 D STUFF("GRP",IBGRPDA,.RESULT)
"RTN","IBCNBMI",16,0)
 Q
"RTN","IBCNBMI",17,0)
 ;
"RTN","IBCNBMI",18,0)
POLICY(IBBUFDA,IBPOLDA,TYPE,RESULT) ;  move buffer insurance policy data (file 355.33) to existing Patient Policy (file 2.312)
"RTN","IBCNBMI",19,0)
 ;
"RTN","IBCNBMI",20,0)
 N DFN S DFN=+$G(^IBA(355.33,+$G(IBBUFDA),60)) Q:'DFN
"RTN","IBCNBMI",21,0)
 ;
"RTN","IBCNBMI",22,0)
 S IBBUFDA=IBBUFDA_",",IBPOLDA=$G(IBPOLDA)_","_DFN_","
"RTN","IBCNBMI",23,0)
 D SET("POL",IBBUFDA,IBPOLDA,TYPE,.RESULT)
"RTN","IBCNBMI",24,0)
 D STUFF("POL",IBPOLDA,.RESULT)
"RTN","IBCNBMI",25,0)
 D POLOTH(IBBUFDA,IBPOLDA,.RESULT)
"RTN","IBCNBMI",26,0)
 Q
"RTN","IBCNBMI",27,0)
 ;
"RTN","IBCNBMI",28,0)
SET(SET,IBBUFDA,IBEXTDA,TYPE,RESULT) ; move buffer data to insurance files
"RTN","IBCNBMI",29,0)
 ; Input:  IBBUFDA - ifn of Buffer File entry to move (#355.33)
"RTN","IBCNBMI",30,0)
 ;         IBEXTDA - ifn of insurance entry to update (#36,355.3,2)
"RTN","IBCNBMI",31,0)
 ;         TYPE    - 1 = Merge     (only buffer data moved to blank fields in ins file, no replace)
"RTN","IBCNBMI",32,0)
 ;                   2 = Overwrite (all buffer data moved to ins file, replace existing data)
"RTN","IBCNBMI",33,0)
 ;                   3 = Replace (all buffer data including null move to ins file)
"RTN","IBCNBMI",34,0)
 ;                   4 = Individually Accept (Skip Blanks) (user accepts
"RTN","IBCNBMI",35,0)
 ;  individual diffs b/w buffer data and existing file data (excl blanks)
"RTN","IBCNBMI",36,0)
 ;  to overwrite flds (or addr grp) in existing file)
"RTN","IBCNBMI",37,0)
 ; Output: RESULT - Passed array to return FM errror message if there are
"RTN","IBCNBMI",38,0)
 ;                  errors when filing the buffer data
"RTN","IBCNBMI",39,0)
 ;
"RTN","IBCNBMI",40,0)
 N IBX,IBFLDS,EXTFILE,DRBUF,DREXT,BUFARR,EXTARR,IBBUFFLD,IBEXTFLD,IBBUFVAL,IBEXTVAL,IBCHNG,IBCHNGN,IBERR
"RTN","IBCNBMI",41,0)
 ;
"RTN","IBCNBMI",42,0)
 D FIELDS(SET_"FLD")
"RTN","IBCNBMI",43,0)
 S IBX=$P($T(@(SET_"DR")+1),";;",2),EXTFILE=+$P(IBX,U,1),DRBUF=$P(IBX,U,2),DREXT=$P(IBX,U,3)
"RTN","IBCNBMI",44,0)
 ;
"RTN","IBCNBMI",45,0)
 D GETS^DIQ(355.33,IBBUFDA,DRBUF,"E","BUFARR")
"RTN","IBCNBMI",46,0)
 D GETS^DIQ(EXTFILE,IBEXTDA,DREXT,"E","EXTARR")
"RTN","IBCNBMI",47,0)
 ;
"RTN","IBCNBMI",48,0)
 I +$G(TYPE) S IBBUFFLD=0 F  S IBBUFFLD=$O(BUFARR(355.33,IBBUFDA,IBBUFFLD)) Q:'IBBUFFLD  D
"RTN","IBCNBMI",49,0)
 . ;If not called by ACCEPAPI^IBCNICB API, don't update from these 
"RTN","IBCNBMI",50,0)
 . ;fields:
"RTN","IBCNBMI",51,0)
 . ;   Insurance Company Name - #20.01, Reimburse? - 20.05
"RTN","IBCNBMI",52,0)
 . ;   Is this a Group Policy - #40.01
"RTN","IBCNBMI",53,0)
 . I $G(IBSUPRES)'>0,"^20.01^20.05^40.01^"[("^"_IBBUFFLD_"^") Q
"RTN","IBCNBMI",54,0)
 . ;
"RTN","IBCNBMI",55,0)
 . S IBEXTFLD=$G(IBFLDS(IBBUFFLD)) Q:'IBEXTFLD
"RTN","IBCNBMI",56,0)
 . S IBBUFVAL=BUFARR(355.33,IBBUFDA,IBBUFFLD,"E")
"RTN","IBCNBMI",57,0)
 . S IBEXTVAL=$G(EXTARR(EXTFILE,IBEXTDA,IBEXTFLD,"E"))
"RTN","IBCNBMI",58,0)
 . ;
"RTN","IBCNBMI",59,0)
 . I IBBUFVAL=IBEXTVAL Q
"RTN","IBCNBMI",60,0)
 . I TYPE=1,IBEXTVAL'="" Q
"RTN","IBCNBMI",61,0)
 . I TYPE=2,IBBUFVAL="" Q
"RTN","IBCNBMI",62,0)
 . I TYPE=4,'$D(^TMP($J,"IB BUFFER SELECTED",IBBUFFLD)) Q
"RTN","IBCNBMI",63,0)
 . ;
"RTN","IBCNBMI",64,0)
 . S IBCHNG(EXTFILE,IBEXTDA,IBEXTFLD)=IBBUFVAL
"RTN","IBCNBMI",65,0)
 . ;For ACCEPAPI^IBCNICB do not delete the .01 field. This prevents a
"RTN","IBCNBMI",66,0)
 . ;Data Dictionary Deletion Write message
"RTN","IBCNBMI",67,0)
 . Q:IBEXTFLD=".01"
"RTN","IBCNBMI",68,0)
 . S IBCHNGN(EXTFILE,IBEXTDA,IBEXTFLD)=""
"RTN","IBCNBMI",69,0)
 ;
"RTN","IBCNBMI",70,0)
 I $D(IBCHNGN)>9 D FILE^DIE("E","IBCHNGN","IBERR")
"RTN","IBCNBMI",71,0)
 ;Removed delete errors and move FM errors to RESULT
"RTN","IBCNBMI",72,0)
 D:$D(IBERR)>0 REMOVDEL(.IBERR),EHANDLE(SET,.IBERR,.RESULT)
"RTN","IBCNBMI",73,0)
 K IBERR
"RTN","IBCNBMI",74,0)
 I $D(IBCHNG)>9 D FILE^DIE("E","IBCHNG","IBERR")
"RTN","IBCNBMI",75,0)
 ;Move FM errors to RESULT
"RTN","IBCNBMI",76,0)
 D:$D(IBERR)>0 EHANDLE(SET,.IBERR,.RESULT)
"RTN","IBCNBMI",77,0)
 Q
"RTN","IBCNBMI",78,0)
 ;
"RTN","IBCNBMI",79,0)
STUFF(SET,IBEXTDA,RESULT) ; update fields in insurance files that 
"RTN","IBCNBMI",80,0)
 ;should be automatically set when an entry is edited
"RTN","IBCNBMI",81,0)
 ; Input:  IBEXTDA - ifn of insurance entry to update (#36,356,2)
"RTN","IBCNBMI",82,0)
 ; Output: RESULT - Passed array to return FM errror message if there are
"RTN","IBCNBMI",83,0)
 ;                  errors when filing the data buffer data
"RTN","IBCNBMI",84,0)
 ;
"RTN","IBCNBMI",85,0)
 N IBX,IBFLDS,EXTFILE,IBEXTFLD,IBEXTVAL,IBCHNG,IBCHNGN,IBERR
"RTN","IBCNBMI",86,0)
 ;
"RTN","IBCNBMI",87,0)
 D FIELDS(SET_"A")
"RTN","IBCNBMI",88,0)
 S IBX=$P($T(@(SET_"DR")+1),";;",2),EXTFILE=+$P(IBX,U,1)
"RTN","IBCNBMI",89,0)
 ;
"RTN","IBCNBMI",90,0)
 S IBEXTFLD=0 F  S IBEXTFLD=$O(IBFLDS(IBEXTFLD)) Q:'IBEXTFLD  D
"RTN","IBCNBMI",91,0)
 . S IBEXTVAL=IBFLDS(IBEXTFLD) I IBEXTVAL="DUZ" S IBEXTVAL="`"_DUZ
"RTN","IBCNBMI",92,0)
 . S IBCHNG(EXTFILE,IBEXTDA,IBEXTFLD)=IBEXTVAL
"RTN","IBCNBMI",93,0)
 . S IBCHNGN(EXTFILE,IBEXTDA,IBEXTFLD)=""
"RTN","IBCNBMI",94,0)
 ;
"RTN","IBCNBMI",95,0)
 D FILE^DIE("E","IBCHNGN","IBERR")
"RTN","IBCNBMI",96,0)
 ;Move FM errors to RESULT
"RTN","IBCNBMI",97,0)
 D:$D(IBERR)>0 EHANDLE(SET,.IBERR,.RESULT)
"RTN","IBCNBMI",98,0)
 K IBERR
"RTN","IBCNBMI",99,0)
 D FILE^DIE("E","IBCHNG","IBERR")
"RTN","IBCNBMI",100,0)
 ;Move FM errors to RESULT
"RTN","IBCNBMI",101,0)
 D:$D(IBERR)>0 EHANDLE(SET,.IBERR,.RESULT)
"RTN","IBCNBMI",102,0)
 Q
"RTN","IBCNBMI",103,0)
 ;
"RTN","IBCNBMI",104,0)
FIELDS(SET) ; return array of corresponding fields: IBFLDS(Buffer #)=Ins #
"RTN","IBCNBMI",105,0)
 N IBI,IBLN,IBB,IBE,IBG K IBFLDS,IBADDS,IBLBLS
"RTN","IBCNBMI",106,0)
 F IBI=1:1 S IBLN=$P($T(@(SET)+IBI),";;",2) Q:IBLN=""  I $E(IBLN,1)'=" " D
"RTN","IBCNBMI",107,0)
 . S IBB=$P(IBLN,U,1),IBE=$P(IBLN,U,2),IBG=$P(IBLN,U,4)
"RTN","IBCNBMI",108,0)
 . I IBB'="",IBE'="" D
"RTN","IBCNBMI",109,0)
 .. S IBFLDS(IBB)=IBE
"RTN","IBCNBMI",110,0)
 .. I SET["FLD" S IBLBLS(IBB)=$P(IBLN,U,3) I +IBG S IBADDS(IBB)=IBE
"RTN","IBCNBMI",111,0)
 Q
"RTN","IBCNBMI",112,0)
 ;
"RTN","IBCNBMI",113,0)
INSDR ;
"RTN","IBCNBMI",114,0)
 ;;36^20.01:20.05;21.01:21.06^.01;.131;.132;.133;.111:.116;1
"RTN","IBCNBMI",115,0)
INSFLD ; corresponding fields: Buffer File (355.33) & Insurance Company file (36)
"RTN","IBCNBMI",116,0)
 ;;20.01^.01^Insurance Company Name^  ; Name
"RTN","IBCNBMI",117,0)
 ;;20.02^.131^Phone Number^           ; MM Phone Number
"RTN","IBCNBMI",118,0)
 ;;20.03^.132^Billing Phone^          ; Billing Phone Number
"RTN","IBCNBMI",119,0)
 ;;20.04^.133^Pre-Cert Phone^         ; Pre-Certification Phone Number
"RTN","IBCNBMI",120,0)
 ;;20.05^1^Reimburse?^                ; Will Reimburse?
"RTN","IBCNBMI",121,0)
 ;;21.01^.111^Street [Line 1]^1       ; MM Street Address [Line 1]
"RTN","IBCNBMI",122,0)
 ;;21.02^.112^Street [Line 2]^1       ; MM Street Address [Line 2]
"RTN","IBCNBMI",123,0)
 ;;21.03^.113^Street [Line 3]^1       ; MM Street Address [Line 3]
"RTN","IBCNBMI",124,0)
 ;;21.04^.114^City^1                  ; MM City
"RTN","IBCNBMI",125,0)
 ;;21.05^.115^State^1                 ; MM State
"RTN","IBCNBMI",126,0)
 ;;21.06^.116^Zip^1                   ; MM Zip Code
"RTN","IBCNBMI",127,0)
 ;
"RTN","IBCNBMI",128,0)
GRPDR ;
"RTN","IBCNBMI",129,0)
 ;;355.3^40.01:40.09;40.1;40.11;^.02:.09;6.02;6.03;.12
"RTN","IBCNBMI",130,0)
GRPFLD ;corresponding fields:  Buffer File (355.33) and Insurance Group Plan file (355.3)
"RTN","IBCNBMI",131,0)
 ;;40.01^.02^Is This a Group Policy?^ ; Is this a Group Policy?
"RTN","IBCNBMI",132,0)
 ;;40.02^.03^Group Name^              ; Group Name
"RTN","IBCNBMI",133,0)
 ;;40.03^.04^Group Number^            ; Group Number
"RTN","IBCNBMI",134,0)
 ;;40.1^6.02^BIN^                     ; BIN ;;Daou/EEN
"RTN","IBCNBMI",135,0)
 ;;40.11^6.03^PCN^                    ; PCN ;;Daou/EEN
"RTN","IBCNBMI",136,0)
 ;;40.04^.05^Require UR^              ; Utilization Review Required
"RTN","IBCNBMI",137,0)
 ;;40.05^.06^Require Pre-Cert^        ; Pre-Certification Required
"RTN","IBCNBMI",138,0)
 ;;40.06^.12^Require Amb Cert^        ; Ambulatory Care Certification
"RTN","IBCNBMI",139,0)
 ;;40.07^.07^Exclude Pre-Cond^        ; Exclude Pre-Existing Conditions
"RTN","IBCNBMI",140,0)
 ;;40.08^.08^Benefits Assign^         ; Benefits Assignable
"RTN","IBCNBMI",141,0)
 ;;40.09^.09^Type of Plan^            ; Type of Plan
"RTN","IBCNBMI",142,0)
 ;
"RTN","IBCNBMI",143,0)
GRPA ; auto set fields
"RTN","IBCNBMI",144,0)
 ;;1.05^NOW^                          ; Date Last Edited
"RTN","IBCNBMI",145,0)
 ;;1.06^DUZ^                          ; Last edited By
"RTN","IBCNBMI",146,0)
 ;
"RTN","IBCNBMI",147,0)
POLDR ;
"RTN","IBCNBMI",148,0)
 ;;2.312^60.02:62.06^8;3;1;6;16;17;3.01;3.05:3.1;4.01;4.02;.2;3.12;2.1;2.015;2.11;2.12;2.01:2.08;5.01
"RTN","IBCNBMI",149,0)
POLFLD ; corresponding fields:  Buffer File (355.33) and Insurance Patient Policy file (2.312)
"RTN","IBCNBMI",150,0)
 ;;60.02^8^Effective Date^            ; Effective Date
"RTN","IBCNBMI",151,0)
 ;;60.03^3^Expiration Date^           ; Expiration Date
"RTN","IBCNBMI",152,0)
 ;;60.04^1^Subscriber Id^             ; Subscriber Id
"RTN","IBCNBMI",153,0)
 ;;60.05^6^Whose Insurance^           ; Whose Insurance
"RTN","IBCNBMI",154,0)
 ;;60.06^16^Relationship^             ; Pt. Relationship to Insured
"RTN","IBCNBMI",155,0)
 ;;60.07^17^Name of Insured^          ; Name of Insured
"RTN","IBCNBMI",156,0)
 ;;60.08^3.01^Insured's DOB^          ; Insured's DOB
"RTN","IBCNBMI",157,0)
 ;;60.09^3.05^Insured's SSN^          ; Insured's SSN
"RTN","IBCNBMI",158,0)
 ;;60.1^4.01^Primary Provider^        ; Primary Care Provider
"RTN","IBCNBMI",159,0)
 ;;60.11^4.02^Provider Phone^         ; Primary Care Provider Phone
"RTN","IBCNBMI",160,0)
 ;;60.12^.2^Coor of Benefits^         ; Coordination of Benefits
"RTN","IBCNBMI",161,0)
 ;;60.13^3.12^Insured's Sex^          ; Insured's Sex
"RTN","IBCNBMI",162,0)
 ;;  
"RTN","IBCNBMI",163,0)
 ;;61.01^2.1^Emp Sponsored^           ; ESGHP?
"RTN","IBCNBMI",164,0)
 ;;61.02^2.015^Employer Name^         ; Subscriber's Employer Name
"RTN","IBCNBMI",165,0)
 ;;61.03^2.11^Emp Status^             ; Employment Status
"RTN","IBCNBMI",166,0)
 ;;61.04^2.12^Retirement Date^        ; Retirement Date
"RTN","IBCNBMI",167,0)
 ;;61.05^2.01^Send to Employer^       ; Send Bill to Employer?
"RTN","IBCNBMI",168,0)
 ;;61.06^2.02^Emp Street Ln 1^1       ; Employer Claims Street Line 1
"RTN","IBCNBMI",169,0)
 ;;61.07^2.03^Emp Street Ln 2^1       ; Employer Claims Street Line 2
"RTN","IBCNBMI",170,0)
 ;;61.08^2.04^Emp Street Ln 3^1       ; Employer Claims Street Line 3
"RTN","IBCNBMI",171,0)
 ;;61.09^2.05^Emp City^1              ; Employer Claims City
"RTN","IBCNBMI",172,0)
 ;;61.1^2.06^Emp State^1              ; Employer Claims State
"RTN","IBCNBMI",173,0)
 ;;61.11^2.07^Emp Zip Code^1          ; Employer Claims Zip Code
"RTN","IBCNBMI",174,0)
 ;;61.12^2.08^Emp Phone^              ; Employer Claims Phone
"RTN","IBCNBMI",175,0)
 ;;62.01^5.01^Patient Id^             ; Patient Id
"RTN","IBCNBMI",176,0)
 ;;62.02^3.06^Subscr Addr Ln 1^       ; Subscriber Address Line 1
"RTN","IBCNBMI",177,0)
 ;;62.03^3.07^Subscr Addr Ln 2^       ; Subscriber Address Line 2
"RTN","IBCNBMI",178,0)
 ;;62.04^3.08^Subscr City^            ; Subscriber City
"RTN","IBCNBMI",179,0)
 ;;62.05^3.09^Subscr State^           ; Subscriber State
"RTN","IBCNBMI",180,0)
 ;;62.06^3.1^Subscr Zip^              ; Subscriber Zip Code
"RTN","IBCNBMI",181,0)
 ;
"RTN","IBCNBMI",182,0)
POLA ; auto set fields
"RTN","IBCNBMI",183,0)
 ;;1.03^NOW^                          ; Date Last Verified (default is person that accepts entry)
"RTN","IBCNBMI",184,0)
 ;;1.04^DUZ^                          ; Verified By        (default is person that accepts entry)
"RTN","IBCNBMI",185,0)
 ;;1.05^NOW^                          ; Date Last Edited
"RTN","IBCNBMI",186,0)
 ;;1.06^DUZ^                          ; Last Edited By
"RTN","IBCNBMI",187,0)
 ;
"RTN","IBCNBMI",188,0)
 ;
"RTN","IBCNBMI",189,0)
POLOTH(IBBUFDA,IBPOLDA,RESULT) ; other special cases that can not be transferred using the generic code above, usually because of dependencies
"RTN","IBCNBMI",190,0)
 N IBERR,IB0 S IB0=$G(^IBA(355.33,+IBBUFDA,0))
"RTN","IBCNBMI",191,0)
 ;
"RTN","IBCNBMI",192,0)
 ;  --- if buffer entry was verified before the accept step, then add the correct verifier info to the policy
"RTN","IBCNBMI",193,0)
 I +$P(IB0,U,10) D
"RTN","IBCNBMI",194,0)
 . S IBCHNG(2.312,IBPOLDA,1.03)=$E($P(IB0,U,10),1,12),IBCHNGN(2.312,IBPOLDA,1.03)=""
"RTN","IBCNBMI",195,0)
 . S IBCHNG(2.312,IBPOLDA,1.04)=$P(IB0,U,11),IBCHNGN(2.312,IBPOLDA,1.04)=""
"RTN","IBCNBMI",196,0)
 ;
"RTN","IBCNBMI",197,0)
 I $D(IBCHNGN)>9 D FILE^DIE("I","IBCHNGN","IBERR")
"RTN","IBCNBMI",198,0)
 ;Move FM errors to RESULT
"RTN","IBCNBMI",199,0)
 D:$D(IBERR)>0 EHANDLE("POL",.IBERR,.RESULT)
"RTN","IBCNBMI",200,0)
 K IBERR
"RTN","IBCNBMI",201,0)
 I $D(IBCHNG)>9 D FILE^DIE("I","IBCHNG","IBERR")
"RTN","IBCNBMI",202,0)
 ;Move FM errors to RESULT
"RTN","IBCNBMI",203,0)
 D:$D(IBERR)>0 EHANDLE("POL",.IBERR,.RESULT)
"RTN","IBCNBMI",204,0)
 Q
"RTN","IBCNBMI",205,0)
 ;
"RTN","IBCNBMI",206,0)
PAT(DFN,IBPOLDA) ; Force DOB, SSN & SEX from Patient file (#2) in to Insurance Patient Policy file (2.312)
"RTN","IBCNBMI",207,0)
 N DA,DR,DIE,DOB,SSN,SEX,IENS,WI
"RTN","IBCNBMI",208,0)
 S IENS=IBPOLDA_","_DFN_","
"RTN","IBCNBMI",209,0)
 S WI=$$GET1^DIQ(2.312,IENS,6,"I")
"RTN","IBCNBMI",210,0)
 I WI'="v" Q  ; Only use when Whose Insurance is 'v'
"RTN","IBCNBMI",211,0)
 S DOB=$$GET1^DIQ(2,DFN,.03,"I")
"RTN","IBCNBMI",212,0)
 S SSN=$$GET1^DIQ(2,DFN,.09,"I")
"RTN","IBCNBMI",213,0)
 S SEX=$$GET1^DIQ(2,DFN,.02,"I")
"RTN","IBCNBMI",214,0)
 S DIE="^DPT("_DFN_",.312,",DA(1)=DFN,DA=IBPOLDA
"RTN","IBCNBMI",215,0)
 S DR="3.01///^S X=DOB;3.05///^S X=SSN;3.12///^S X=SEX"
"RTN","IBCNBMI",216,0)
 D ^DIE
"RTN","IBCNBMI",217,0)
 Q
"RTN","IBCNBMI",218,0)
 ;
"RTN","IBCNBMI",219,0)
EHANDLE(SET,FMERR,RESULT) ;
"RTN","IBCNBMI",220,0)
 ;Fileman Error Processing tracking added for ACCEPAPI^IBCNICB API.
"RTN","IBCNBMI",221,0)
 ; INPUT: 
"RTN","IBCNBMI",222,0)
 ;   SET    - File where fileman error occurred
"RTN","IBCNBMI",223,0)
 ;       Value = "INS" --> File 36    --> RESULT(1)
"RTN","IBCNBMI",224,0)
 ;       Value = "GRP" --> File 355.3 --> RESULT(2)
"RTN","IBCNBMI",225,0)
 ;       Value = "POL" --> File 2.312 --> RESULT(3)
"RTN","IBCNBMI",226,0)
 ;   FMERR  - Array that is returned by FM with error messages
"RTN","IBCNBMI",227,0)
 ; OUTPUT:
"RTN","IBCNBMI",228,0)
 ;   RESULT - Passed array to return FM errror message if there are
"RTN","IBCNBMI",229,0)
 ;            errors when filing the data buffer data
"RTN","IBCNBMI",230,0)
 ;
"RTN","IBCNBMI",231,0)
 Q:$G(SET)']""!($D(FMERR)'>0)
"RTN","IBCNBMI",232,0)
 N SUB1,RNUM,ERRNUM,LINENUM
"RTN","IBCNBMI",233,0)
 ;Numeric 1st subscript of RESULT array based on file being updated
"RTN","IBCNBMI",234,0)
 ;File 36 = 1, 355.3 = 2, 2.312 = 3 
"RTN","IBCNBMI",235,0)
 S SUB1=$S(SET="INS":1,SET="GRP":2,SET="POL":3,1:"")
"RTN","IBCNBMI",236,0)
 ;Quit if SUB1 doesn't have a value.
"RTN","IBCNBMI",237,0)
 Q:SUB1']""
"RTN","IBCNBMI",238,0)
 S RNUM=$O(RESULT(SUB1,"ERR",9999999999),-1),ERRNUM=0
"RTN","IBCNBMI",239,0)
 F  S ERRNUM=$O(FMERR("DIERR",ERRNUM)) Q:+ERRNUM'>0  D
"RTN","IBCNBMI",240,0)
 . S LINENUM=0
"RTN","IBCNBMI",241,0)
 . F  S LINENUM=$O(FMERR("DIERR",ERRNUM,"TEXT",LINENUM)) Q:+LINENUM'>0  D
"RTN","IBCNBMI",242,0)
 . . S RNUM=RNUM+1
"RTN","IBCNBMI",243,0)
 . . S RESULT(SUB1,"ERR",RNUM)=FMERR("DIERR",ERRNUM,"TEXT",LINENUM)
"RTN","IBCNBMI",244,0)
 Q
"RTN","IBCNBMI",245,0)
 ;
"RTN","IBCNBMI",246,0)
REMOVDEL(FMERR) ;
"RTN","IBCNBMI",247,0)
 ;Removed field delete errors. SET and STUFF API delete data first and
"RTN","IBCNBMI",248,0)
 ;then update with new data from Insurance Buffer file. Error Code 712
"RTN","IBCNBMI",249,0)
 ;"Deletion was attempted but not allowed" errors will be removed from
"RTN","IBCNBMI",250,0)
 ;the returned FM error array 
"RTN","IBCNBMI",251,0)
 ; INPUT/OUTPUT:
"RTN","IBCNBMI",252,0)
 ;   FMERR  - Array that is returned by FM with error messages
"RTN","IBCNBMI",253,0)
 ;
"RTN","IBCNBMI",254,0)
 Q:$D(FMERR)'>0
"RTN","IBCNBMI",255,0)
 N ERRNUM
"RTN","IBCNBMI",256,0)
 S ERRNUM=0
"RTN","IBCNBMI",257,0)
 F  S ERRNUM=$O(FMERR("DIERR",ERRNUM)) Q:+ERRNUM'>0  D
"RTN","IBCNBMI",258,0)
 . I FMERR("DIERR",ERRNUM)=712 K FMERR("DIERR",ERRNUM)
"RTN","IBCNBMI",259,0)
 Q
"RTN","IBCNEBF")
0^44^B36248866^B29002877
"RTN","IBCNEBF",1,0)
IBCNEBF ;DAOU/ALA - Create an Entry in the Buffer File ;20-JUN-2002
"RTN","IBCNEBF",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,361,371,416**;21-MAR-94;Build 58
"RTN","IBCNEBF",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEBF",4,0)
 ;
"RTN","IBCNEBF",5,0)
 ;**Program Description**
"RTN","IBCNEBF",6,0)
 ;  This program will create a Buffer entry based upon input values
"RTN","IBCNEBF",7,0)
 ;
"RTN","IBCNEBF",8,0)
 Q
"RTN","IBCNEBF",9,0)
 ;
"RTN","IBCNEBF",10,0)
PT(DFN,IRIEN,SYMBOL,OVRRIDE,ADD,IBERROR) ;  Get data
"RTN","IBCNEBF",11,0)
 ;   from a specific patient and insurance record entry
"RTN","IBCNEBF",12,0)
 ;
"RTN","IBCNEBF",13,0)
 ;  Input Parameters
"RTN","IBCNEBF",14,0)
 ;    DFN = Patient IEN
"RTN","IBCNEBF",15,0)
 ;    IRIEN = Patient Insurance Record IEN
"RTN","IBCNEBF",16,0)
 ;    SYMBOL = eIV Symbol IEN
"RTN","IBCNEBF",17,0)
 ;    OVRRIDE = Override flag for ins. buffer record  (0 or 1)
"RTN","IBCNEBF",18,0)
 ;    ADD = If defined, then it will add a new Buffer entry
"RTN","IBCNEBF",19,0)
 ;    IBERROR = If defined, then it will be updated with error info.
"RTN","IBCNEBF",20,0)
 ;              OPTIONALLY PASSED BY REFERENCE
"RTN","IBCNEBF",21,0)
 ;
"RTN","IBCNEBF",22,0)
 I DFN=""!(IRIEN="") Q   ; * do not require SYMBOL or OVRRIDE
"RTN","IBCNEBF",23,0)
 ;
"RTN","IBCNEBF",24,0)
 ;
"RTN","IBCNEBF",25,0)
 N VBUF,IDATA0,IDATA3,IEN,INAME,PNAME,IIEN,GNUMB,GNAME,SUBID,PPHONE,PATID
"RTN","IBCNEBF",26,0)
 N BPHONE,EFFDT,EXPDT,WHO,REL,IDOB,ISSN,COB,TQIEN,RDATA,ISEX,NAME
"RTN","IBCNEBF",27,0)
 N MSG,XMSUB,MSGP,INSDATA,PCE,BFD,BFN,INSPCE,ESGHPARR
"RTN","IBCNEBF",28,0)
 N SUBADDR1,SUBADDR2,SUBCITY,SUBSTATE,SUBZIP
"RTN","IBCNEBF",29,0)
 ;
"RTN","IBCNEBF",30,0)
 S IDATA0=$G(^DPT(DFN,.312,IRIEN,0)),IDATA3=$G(^DPT(DFN,.312,IRIEN,3))
"RTN","IBCNEBF",31,0)
 S IIEN=$P(IDATA0,U,1),INAME=$$GET1^DIQ(36,IIEN,.01,"E")
"RTN","IBCNEBF",32,0)
 S PPHONE=$P($G(^DIC(36,IIEN,.13)),U,3),BPHONE=$P($G(^DIC(36,IIEN,.13)),U,2)
"RTN","IBCNEBF",33,0)
 S NAME=$P(IDATA0,U,17),SUBID=$P(IDATA0,U,2)
"RTN","IBCNEBF",34,0)
 S PATID=$P($G(^DPT(DFN,.312,IRIEN,5)),U,1)
"RTN","IBCNEBF",35,0)
 S WHO=$P(IDATA0,U,6),COB=$P(IDATA0,U,20)
"RTN","IBCNEBF",36,0)
 S IDOB=$P(IDATA3,U,1),ISSN=$P(IDATA3,U,5),ISEX=$P(IDATA3,U,12)
"RTN","IBCNEBF",37,0)
 S EFFDT=$P(IDATA0,U,8),EXPDT=$P(IDATA0,U,4)
"RTN","IBCNEBF",38,0)
 S REL=$P($G(^DPT(DFN,.312,IRIEN,4)),U,3)
"RTN","IBCNEBF",39,0)
 S SUBADDR1=$P(IDATA3,U,6),SUBADDR2=$P(IDATA3,U,7)
"RTN","IBCNEBF",40,0)
 S SUBCITY=$P(IDATA3,U,8),SUBSTATE=$P(IDATA3,U,9),SUBZIP=$P(IDATA3,U,10)
"RTN","IBCNEBF",41,0)
 ;
"RTN","IBCNEBF",42,0)
 S IENS=IRIEN_","_DFN_","
"RTN","IBCNEBF",43,0)
 S GNUMB=$$GET1^DIQ(2.312,IENS,21,"E")
"RTN","IBCNEBF",44,0)
 S GNAME=$$GET1^DIQ(2.312,IENS,20,"E")
"RTN","IBCNEBF",45,0)
 ;
"RTN","IBCNEBF",46,0)
 ; Capture the employer sponsored insurance fields into array
"RTN","IBCNEBF",47,0)
 ;   ESGHPARR(buffer field number) = data
"RTN","IBCNEBF",48,0)
 ;
"RTN","IBCNEBF",49,0)
 S INSDATA=$G(^DPT(DFN,.312,IRIEN,2)),PCE=0
"RTN","IBCNEBF",50,0)
 F BFD=5:1:12,2,1,3,4 S PCE=PCE+1,BFN=BFD/100+61,INSPCE=$P(INSDATA,U,PCE) I INSPCE'="" S ESGHPARR(BFN)=INSPCE
"RTN","IBCNEBF",51,0)
 ;
"RTN","IBCNEBF",52,0)
 D FIL
"RTN","IBCNEBF",53,0)
 K ADD
"RTN","IBCNEBF",54,0)
 Q
"RTN","IBCNEBF",55,0)
 ;
"RTN","IBCNEBF",56,0)
RP(IEN,ADD,BUFF) ;  Get data from a specific response record
"RTN","IBCNEBF",57,0)
 ;
"RTN","IBCNEBF",58,0)
 ;  Input Parameter
"RTN","IBCNEBF",59,0)
 ;    IEN  = Internal entry number of the Response
"RTN","IBCNEBF",60,0)
 ;    ADD  = If defined, then it will add a new Buffer entry
"RTN","IBCNEBF",61,0)
 ;    BUFF = IEN of the Buffer Entry to be updated (optional)
"RTN","IBCNEBF",62,0)
 ;
"RTN","IBCNEBF",63,0)
 S BUFF=$G(BUFF) ; Initialize optional parameter
"RTN","IBCNEBF",64,0)
 ;
"RTN","IBCNEBF",65,0)
 N BPHONE,COB,DFN,EFFDT,EXPDT,GNAME,GNUMB,IDOB,IIEN,INAME,IRIEN,ISEX,ISSN,NAME
"RTN","IBCNEBF",66,0)
 N PATID,PIEN,PNAME,PPHONE,RDATA,RDATA5,REL,RSTYPE,SUBID,TQIEN,WHO
"RTN","IBCNEBF",67,0)
 N SUBADDR1,SUBADDR2,SUBCITY,SUBSTATE,SUBZIP
"RTN","IBCNEBF",68,0)
 ;
"RTN","IBCNEBF",69,0)
 S DFN=$P(^IBCN(365,IEN,0),U,2),TQIEN=$P(^IBCN(365,IEN,0),U,5)
"RTN","IBCNEBF",70,0)
 S PIEN=$P(^IBCN(365,IEN,0),U,3),RSTYPE=$P(^(0),U,10)
"RTN","IBCNEBF",71,0)
 I PIEN'="" S PNAME=$P(^IBE(365.12,PIEN,0),U,1)
"RTN","IBCNEBF",72,0)
 I TQIEN'="" S IRIEN=$P($G(^IBCN(365.1,TQIEN,0)),U,13)
"RTN","IBCNEBF",73,0)
 I $G(IRIEN)'="" S INAME="" D
"RTN","IBCNEBF",74,0)
 . S IIEN=$P($G(^DPT(DFN,.312,IRIEN,0)),U,1)
"RTN","IBCNEBF",75,0)
 . I IIEN="" Q
"RTN","IBCNEBF",76,0)
 . S INAME=$P(^DIC(36,IIEN,0),U,1)
"RTN","IBCNEBF",77,0)
 S RDATA=$G(^IBCN(365,IEN,1)),RDATA5=$G(^IBCN(365,IEN,5))
"RTN","IBCNEBF",78,0)
 S NAME=$P(RDATA,U,1)
"RTN","IBCNEBF",79,0)
 S INAME=$S($G(INAME)'=""&(RSTYPE="O"):INAME,1:$G(PNAME))
"RTN","IBCNEBF",80,0)
 S IDOB=$P(RDATA,U,2)
"RTN","IBCNEBF",81,0)
 S ISSN=$P(RDATA,U,3)
"RTN","IBCNEBF",82,0)
 S ISEX=$P(RDATA,U,4)
"RTN","IBCNEBF",83,0)
 S COB=$P(RDATA,U,13)
"RTN","IBCNEBF",84,0)
 S SUBID=$P(RDATA,U,5)
"RTN","IBCNEBF",85,0)
 S PATID=$P(RDATA,U,18)
"RTN","IBCNEBF",86,0)
 S GNAME=$P(RDATA,U,6)
"RTN","IBCNEBF",87,0)
 S GNUMB=$P(RDATA,U,7)
"RTN","IBCNEBF",88,0)
 S WHO=$P(RDATA,U,8)
"RTN","IBCNEBF",89,0)
 S REL=$P(RDATA,U,9)
"RTN","IBCNEBF",90,0)
 S REL=$$PREL^IBCNEHL1($P(RDATA,U,9),$$GET1^DIQ(355.33,BUFF,60.14,"I"))
"RTN","IBCNEBF",91,0)
 S EFFDT=$P(RDATA,U,11)
"RTN","IBCNEBF",92,0)
 S EXPDT=$P(RDATA,U,12)
"RTN","IBCNEBF",93,0)
 S SUBADDR1=$P(RDATA5,U),SUBADDR2=$P(RDATA5,U,2),SUBCITY=$P(RDATA5,U,3)
"RTN","IBCNEBF",94,0)
 S SUBSTATE=$P(RDATA5,U,4),SUBZIP=$P(RDATA5,U,5)
"RTN","IBCNEBF",95,0)
 S PPHONE="",BPHONE=""
"RTN","IBCNEBF",96,0)
 ;
"RTN","IBCNEBF",97,0)
 D FIL
"RTN","IBCNEBF",98,0)
 K DFN,VBUF,IEN,IRIEN,INAME,PNAME,IIEN,GNUMB,GNAME,SUBID,PPHONE,PATID
"RTN","IBCNEBF",99,0)
 K BPHONE,EFFDT,EXPDT,WHO,REL,IDOB,ISSN,COB,TQIEN,RDATA,ISEX,NAME
"RTN","IBCNEBF",100,0)
 K ADD,%DT,D0,DG,DIC,DISYS,DIW,IENS
"RTN","IBCNEBF",101,0)
 Q
"RTN","IBCNEBF",102,0)
 ;
"RTN","IBCNEBF",103,0)
FIL ;  File Buffer Data
"RTN","IBCNEBF",104,0)
 ;
"RTN","IBCNEBF",105,0)
 S MSGP=$$MGRP^IBCNEUT5()
"RTN","IBCNEBF",106,0)
 ;
"RTN","IBCNEBF",107,0)
 ; Variable IDUZ is optionally set by the calling routine.  If it is
"RTN","IBCNEBF",108,0)
 ; not defined, it will be set to the specific, non-human user.
"RTN","IBCNEBF",109,0)
 ;
"RTN","IBCNEBF",110,0)
 I $G(IDUZ)="" S IDUZ=$$FIND1^DIC(200,"","X","INTERFACE,IB EIV")
"RTN","IBCNEBF",111,0)
 ;
"RTN","IBCNEBF",112,0)
 I $G(ADD) S VBUF(.02)=IDUZ  ; Entered By
"RTN","IBCNEBF",113,0)
 S VBUF(.12)=$G(SYMBOL)   ; Buffer Symbol
"RTN","IBCNEBF",114,0)
 S VBUF(.13)=$G(OVRRIDE) ; Override freshness flag
"RTN","IBCNEBF",115,0)
 I '$G(ERACT) D  ; Only file if not an error
"RTN","IBCNEBF",116,0)
 . S VBUF(20.01)=INAME  ; Insurance Company/Payer Name
"RTN","IBCNEBF",117,0)
 . S VBUF(60.01)=DFN  ; Patient IEN
"RTN","IBCNEBF",118,0)
 . S VBUF(40.03)=GNUMB  ; Group Number
"RTN","IBCNEBF",119,0)
 . S VBUF(40.02)=GNAME  ; Group Name
"RTN","IBCNEBF",120,0)
 . S VBUF(60.07)=NAME  ; Name of Insured
"RTN","IBCNEBF",121,0)
 . S VBUF(60.04)=SUBID  ; Subscriber ID
"RTN","IBCNEBF",122,0)
 . S VBUF(62.01)=PATID  ; Patient/Member ID
"RTN","IBCNEBF",123,0)
 . S VBUF(20.04)=PPHONE  ; Precertification Phone
"RTN","IBCNEBF",124,0)
 . S VBUF(20.03)=BPHONE  ; Billing Phone
"RTN","IBCNEBF",125,0)
 . S VBUF(60.02)=EFFDT  ; Effective Date
"RTN","IBCNEBF",126,0)
 . S VBUF(60.03)=EXPDT  ; Expiration Date
"RTN","IBCNEBF",127,0)
 . S VBUF(60.05)=WHO  ; Whose Insurance
"RTN","IBCNEBF",128,0)
 . S VBUF(60.14)=REL  ;  Patient Relationship
"RTN","IBCNEBF",129,0)
 . S VBUF(60.08)=IDOB  ;  Insured's DOB
"RTN","IBCNEBF",130,0)
 . S VBUF(60.09)=ISSN  ;  Insured's SSN
"RTN","IBCNEBF",131,0)
 . S VBUF(60.12)=COB  ;  Coordination of Benefits
"RTN","IBCNEBF",132,0)
 . S VBUF(60.13)=ISEX  ;  Insured's Sex
"RTN","IBCNEBF",133,0)
 . S VBUF(62.02)=SUBADDR1 ; Subscriber address line 1
"RTN","IBCNEBF",134,0)
 . S VBUF(62.03)=SUBADDR2 ; Subscriber address line 2
"RTN","IBCNEBF",135,0)
 . S VBUF(62.04)=SUBCITY ; Subscriber address city
"RTN","IBCNEBF",136,0)
 . S VBUF(62.05)=SUBSTATE ; Subscriber address state
"RTN","IBCNEBF",137,0)
 . S VBUF(62.06)=SUBZIP ; Subscriber address zip code
"RTN","IBCNEBF",138,0)
 . ;
"RTN","IBCNEBF",139,0)
 . ; If the employer sponsored insurance array exists, then merge it in
"RTN","IBCNEBF",140,0)
 . I $D(ESGHPARR) M VBUF=ESGHPARR
"RTN","IBCNEBF",141,0)
 ;
"RTN","IBCNEBF",142,0)
 ; Do not overwrite the existing insurance co. name if it already exists
"RTN","IBCNEBF",143,0)
 I $G(ADD)="",$G(BUFF)'="" K VBUF(20.01)
"RTN","IBCNEBF",144,0)
 ;
"RTN","IBCNEBF",145,0)
 ; ** initialize IBERROR
"RTN","IBCNEBF",146,0)
 S IBERROR=""
"RTN","IBCNEBF",147,0)
 ;
"RTN","IBCNEBF",148,0)
 ;  If need to add a new Buffer entry ...
"RTN","IBCNEBF",149,0)
 ;
"RTN","IBCNEBF",150,0)
 ;  Variable IBFDA is returned to the calling routine as the IEN of
"RTN","IBCNEBF",151,0)
 ;  the buffer entry that was just added.
"RTN","IBCNEBF",152,0)
 ;
"RTN","IBCNEBF",153,0)
 I $G(ADD) D
"RTN","IBCNEBF",154,0)
 . S IBFDA=$$ADDSTF^IBCNBES(5,DFN,.VBUF)
"RTN","IBCNEBF",155,0)
 . ; Error Message is 2nd piece of result
"RTN","IBCNEBF",156,0)
 . S IBERROR=$P(IBFDA,U,2)
"RTN","IBCNEBF",157,0)
 . S IBFDA=$P(IBFDA,U,1)
"RTN","IBCNEBF",158,0)
 ;
"RTN","IBCNEBF",159,0)
 ;  If an error, send an email message
"RTN","IBCNEBF",160,0)
 I IBERROR'="" D  Q
"RTN","IBCNEBF",161,0)
 . S MSG(1)="Error returned by $$ADDSTF^IBCNBES:"
"RTN","IBCNEBF",162,0)
 . S MSG(2)=IBERROR
"RTN","IBCNEBF",163,0)
 . S MSG(3)="Values:"
"RTN","IBCNEBF",164,0)
 . S MSG(4)=" Patient DFN = "_$G(DFN)
"RTN","IBCNEBF",165,0)
 . S MSG(5)=" Pt Ins Record IEN = "_$G(IRIEN)
"RTN","IBCNEBF",166,0)
 . S MSG(6)="Please log a Remedy Ticket for this problem."
"RTN","IBCNEBF",167,0)
 . S XMSUB="Error creating Buffer Entry."
"RTN","IBCNEBF",168,0)
 . D MSG^IBCNEUT5(MSGP,XMSUB,"MSG(")
"RTN","IBCNEBF",169,0)
 . K MSGP,MSG,XMSUB,IBERR
"RTN","IBCNEBF",170,0)
 ;
"RTN","IBCNEBF",171,0)
 ;  If need to update a new Buffer Entry ...
"RTN","IBCNEBF",172,0)
 ;
"RTN","IBCNEBF",173,0)
 ;  Variable BUFF is passed into this routine whenever the buffer
"RTN","IBCNEBF",174,0)
 ;  entry is known and the ADD flag is off.  The existing buffer entry
"RTN","IBCNEBF",175,0)
 ;  is edited in this case.
"RTN","IBCNEBF",176,0)
 ;
"RTN","IBCNEBF",177,0)
 I $G(ADD)="" D EDITSTF^IBCNBES(BUFF,.VBUF)
"RTN","IBCNEBF",178,0)
 ;
"RTN","IBCNEBF",179,0)
 ;  If an error occurred in EDITSTF, the error array is not returned
"RTN","IBCNEBF",180,0)
 ;
"RTN","IBCNEBF",181,0)
 Q
"RTN","IBCNEDE")
0^8^B20320433^B21001833
"RTN","IBCNEDE",1,0)
IBCNEDE ;DAOU/DAC - eIV DATA EXTRACTS ;04-JUN-2002
"RTN","IBCNEDE",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,300,416**;21-MAR-94;Build 58
"RTN","IBCNEDE",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDE",4,0)
 ;
"RTN","IBCNEDE",5,0)
 ;**Program Description**
"RTN","IBCNEDE",6,0)
 ;  This program is the main driver for all data extracts associated
"RTN","IBCNEDE",7,0)
 ;  with the electronic Insurance Verification interface.
"RTN","IBCNEDE",8,0)
 ;  This program will run each extract in the specified order, which 
"RTN","IBCNEDE",9,0)
 ;  populates the eIV Transmission File (sometimes it creates/updates 
"RTN","IBCNEDE",10,0)
 ;  an entry in the insurance buffer as well).  It then begins to 
"RTN","IBCNEDE",11,0)
 ;  process the inquiries in the eIV Transmission File.
"RTN","IBCNEDE",12,0)
 ;  08-08-2002
"RTN","IBCNEDE",13,0)
 ;  As this program will run in the background the variable ZTSTOP
"RTN","IBCNEDE",14,0)
 ;  can be returned from any of the extracts should a TaskMan stop
"RTN","IBCNEDE",15,0)
 ;  request occur.  Also, clear out the task record before exiting.
"RTN","IBCNEDE",16,0)
 ; 08-09-2002
"RTN","IBCNEDE",17,0)
 ;  Added check for "~NO PAYER", if it does not exist, build it
"RTN","IBCNEDE",18,0)
 ;
"RTN","IBCNEDE",19,0)
 Q
"RTN","IBCNEDE",20,0)
 ;
"RTN","IBCNEDE",21,0)
EN ; Entry Point
"RTN","IBCNEDE",22,0)
 ; Prevent simultaneous runs
"RTN","IBCNEDE",23,0)
 ; Set error trap to ensure that lock is released
"RTN","IBCNEDE",24,0)
 N $ES,$ET
"RTN","IBCNEDE",25,0)
 S $ET="D ER^IBCNEDE"
"RTN","IBCNEDE",26,0)
 ; Check lock
"RTN","IBCNEDE",27,0)
 L +^TMP("IBCNEDE"):1 I '$T D  G ENX
"RTN","IBCNEDE",28,0)
 . I '$D(ZTSK) W !!,"The eIV Nightly Task is already running, please retry later." D PAUSE^VALM1
"RTN","IBCNEDE",29,0)
 ; Reset reg ack flag
"RTN","IBCNEDE",30,0)
 S $P(^IBE(350.9,1,51),U,22)=""
"RTN","IBCNEDE",31,0)
 ; If "~NO PAYER" is not a valid Payer File entry, rebuild it from
"RTN","IBCNEDE",32,0)
 ;  the existing utility
"RTN","IBCNEDE",33,0)
 I '$$FIND1^DIC(365.12,,"X","~NO PAYER") D PAYR^IBCNEUT2
"RTN","IBCNEDE",34,0)
 ;
"RTN","IBCNEDE",35,0)
 ; Confirm that all necessary tables have been loaded
"RTN","IBCNEDE",36,0)
 ; before the extract is run
"RTN","IBCNEDE",37,0)
 I '$$TBLCHK() G EN1
"RTN","IBCNEDE",38,0)
 ;
"RTN","IBCNEDE",39,0)
 D AMCHECK^IBCNEUT6     ; ensure Auto Match entries are valid
"RTN","IBCNEDE",40,0)
 ;
"RTN","IBCNEDE",41,0)
 ; Run All 3 extracts and launch IBCNEDEP(Inquiries)
"RTN","IBCNEDE",42,0)
 D EN^IBCNEDE1 ; Insurance Buffer Extract
"RTN","IBCNEDE",43,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",44,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",45,0)
 D EN^IBCNEDE2 ; Pre Reg Extract
"RTN","IBCNEDE",46,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",47,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",48,0)
 D EN^IBCNEDE3 ; Non Verified Extract
"RTN","IBCNEDE",49,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",50,0)
EN1 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",51,0)
 ; Send enrollment message
"RTN","IBCNEDE",52,0)
 D ^IBCNEHLM
"RTN","IBCNEDE",53,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",54,0)
 I '$G(QFL) D
"RTN","IBCNEDE",55,0)
 . ; Wait for 'AA' acknowledgement
"RTN","IBCNEDE",56,0)
 . D WAIT  Q:'+QFL
"RTN","IBCNEDE",57,0)
 . KILL QFL
"RTN","IBCNEDE",58,0)
 . ;
"RTN","IBCNEDE",59,0)
 . D ^IBCNEDEP  ; Inquiries Processing
"RTN","IBCNEDE",60,0)
 ;
"RTN","IBCNEDE",61,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",62,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",63,0)
 D MMQ         ; Queue the Daily MailMan message
"RTN","IBCNEDE",64,0)
 ; Send MailMan message if first of month to report on records 
"RTN","IBCNEDE",65,0)
 ;  eligible to be purged
"RTN","IBCNEDE",66,0)
 I +$E($P($$NOW^XLFDT(),"."),6,7)=1 D MMPURGE^IBCNEKI2
"RTN","IBCNEDE",67,0)
 ;
"RTN","IBCNEDE",68,0)
ENX ; Purge task record - if queued
"RTN","IBCNEDE",69,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCNEDE",70,0)
 L -^TMP("IBCNEDE")
"RTN","IBCNEDE",71,0)
 Q
"RTN","IBCNEDE",72,0)
 ;
"RTN","IBCNEDE",73,0)
TBLCHK() ;
"RTN","IBCNEDE",74,0)
 ; Confirm that at least one eIV payer and that all X12 tables
"RTN","IBCNEDE",75,0)
 ; have been loaded
"RTN","IBCNEDE",76,0)
 N PAY,PAYIEN,PAYOK,TBLOK,II
"RTN","IBCNEDE",77,0)
 S (PAY,PAYIEN,PAYOK)="",TBLOK=1
"RTN","IBCNEDE",78,0)
 F  S PAY=$O(^IBE(365.12,"B",PAY)) Q:PAY=""!PAYOK  I PAY'="~NO PAYER" D
"RTN","IBCNEDE",79,0)
 .  F  S PAYIEN=$O(^IBE(365.12,"B",PAY,PAYIEN)) Q:PAYIEN=""!PAYOK  D
"RTN","IBCNEDE",80,0)
 ..    I $$PYRAPP^IBCNEUT5("IIV",PAYIEN) S PAYOK=1 Q
"RTN","IBCNEDE",81,0)
 I PAYOK D
"RTN","IBCNEDE",82,0)
 . F II=11:1:18,21 I $O(^IBE(II*.001+365,"B",""))="" S TBLOK="" Q
"RTN","IBCNEDE",83,0)
 Q PAYOK&TBLOK
"RTN","IBCNEDE",84,0)
 ;
"RTN","IBCNEDE",85,0)
WAIT ;  Wait for acknowledgement comes back from EC
"RTN","IBCNEDE",86,0)
 ;  Hang for 60 seconds and check status again
"RTN","IBCNEDE",87,0)
 ;  Try 360 times for a total of 21600 seconds (6 hours)
"RTN","IBCNEDE",88,0)
 S QFL=0,CT=0
"RTN","IBCNEDE",89,0)
 F  D  Q:QFL'=""!(CT>360)
"RTN","IBCNEDE",90,0)
 . S QFL=$$GET1^DIQ(350.9,"1,",51.22,"I")
"RTN","IBCNEDE",91,0)
 . Q:QFL'=""
"RTN","IBCNEDE",92,0)
 . HANG 60 S CT=CT+1
"RTN","IBCNEDE",93,0)
 KILL CT
"RTN","IBCNEDE",94,0)
 Q
"RTN","IBCNEDE",95,0)
 ;
"RTN","IBCNEDE",96,0)
FRESHDT(EXT,STALEDYS) ;  Calculate Freshness
"RTN","IBCNEDE",97,0)
 ;  Ext - ien of extract for future purposes
"RTN","IBCNEDE",98,0)
 ;  Staledys - # of days in the past in which an insurance verification
"RTN","IBCNEDE",99,0)
 ;  is considered still valid/current
"RTN","IBCNEDE",100,0)
 N STALEDT
"RTN","IBCNEDE",101,0)
 S STALEDT=$$FMADD^XLFDT(DT,-STALEDYS)
"RTN","IBCNEDE",102,0)
 Q STALEDT
"RTN","IBCNEDE",103,0)
 ;
"RTN","IBCNEDE",104,0)
 ; ---------------------------------------------------
"RTN","IBCNEDE",105,0)
MMQ ; This procedure is responsible for scheduling the creation and 
"RTN","IBCNEDE",106,0)
 ; sending of the daily MailMan statistical message if the site has
"RTN","IBCNEDE",107,0)
 ; defined this appropriately in the eIV site parameters.
"RTN","IBCNEDE",108,0)
 ;
"RTN","IBCNEDE",109,0)
 NEW IIV,CURRTIME,MTIME,MSG,Y,MGRP
"RTN","IBCNEDE",110,0)
 NEW ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTSAVE,ZTKIL,ZTSYNC,ZTSK
"RTN","IBCNEDE",111,0)
 ;
"RTN","IBCNEDE",112,0)
 S IIV=$G(^IBE(350.9,1,51))
"RTN","IBCNEDE",113,0)
 I '$P(IIV,U,2) G MMQX          ; site does not want daily messages
"RTN","IBCNEDE",114,0)
 I '$P(IIV,U,3) G MMQX          ; MM message time is not defined
"RTN","IBCNEDE",115,0)
 I '$P(IIV,U,4) G MMQX          ; Mail Group is not defined
"RTN","IBCNEDE",116,0)
 ;
"RTN","IBCNEDE",117,0)
 S CURRTIME=$P($H,",",2)        ; current $H time
"RTN","IBCNEDE",118,0)
 S MTIME=DT_"."_$P(IIV,U,3)     ; build a FileMan date/time
"RTN","IBCNEDE",119,0)
 S MTIME=$$FMTH^XLFDT(MTIME)    ; convert to $H format
"RTN","IBCNEDE",120,0)
 S MTIME=$P(MTIME,",",2)        ; $H time of MM message
"RTN","IBCNEDE",121,0)
 ;
"RTN","IBCNEDE",122,0)
 ; If the current time is after the MailMan message time, then 
"RTN","IBCNEDE",123,0)
 ; schedule the MM message for tomorrow at that time.
"RTN","IBCNEDE",124,0)
 I CURRTIME>MTIME S ZTDTH=($H+1)_","_MTIME
"RTN","IBCNEDE",125,0)
 ;
"RTN","IBCNEDE",126,0)
 ; Otherwise, schedule it for later today
"RTN","IBCNEDE",127,0)
 E  S ZTDTH=+$H_","_MTIME
"RTN","IBCNEDE",128,0)
 ;
"RTN","IBCNEDE",129,0)
 ; Set up the other TaskManager variables
"RTN","IBCNEDE",130,0)
 S ZTRTN="MAILMSG^IBCNERP7"
"RTN","IBCNEDE",131,0)
 S ZTDESC="eIV Daily Statistics E-Mail"
"RTN","IBCNEDE",132,0)
 S ZTIO=""
"RTN","IBCNEDE",133,0)
 D ^%ZTLOAD            ; Call TaskManager
"RTN","IBCNEDE",134,0)
 I $G(ZTSK) G MMQX     ; Task# is OK so get out
"RTN","IBCNEDE",135,0)
 ;
"RTN","IBCNEDE",136,0)
 ; Send a MailMan message if this Task could not get scheduled
"RTN","IBCNEDE",137,0)
 S MSG(1)="TaskManager could not schedule the daily eIV MailMan message"
"RTN","IBCNEDE",138,0)
 S MSG(2)="at the specified time of "_$E($P(IIV,U,3),1,2)_":"_$E($P(IIV,U,3),3,4)_"."
"RTN","IBCNEDE",139,0)
 S MSG(3)="This is defined in the eIV Site Parameters option."
"RTN","IBCNEDE",140,0)
 ; Set to IB site parameter MAILGROUP
"RTN","IBCNEDE",141,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDE",142,0)
 D MSG^IBCNEUT5(MGRP,"eIV Statistical Message Not Sent","MSG(")
"RTN","IBCNEDE",143,0)
 ;
"RTN","IBCNEDE",144,0)
MMQX ;
"RTN","IBCNEDE",145,0)
 Q
"RTN","IBCNEDE",146,0)
 ;
"RTN","IBCNEDE",147,0)
ER ; Unlock the eIV Nightly Task and return to log error
"RTN","IBCNEDE",148,0)
 L -^TMP("IBCNEDE")
"RTN","IBCNEDE",149,0)
 D ^%ZTER
"RTN","IBCNEDE",150,0)
 D UNWIND^%ZTER
"RTN","IBCNEDE",151,0)
 Q
"RTN","IBCNEDE",152,0)
 ;
"RTN","IBCNEDE1")
0^46^B37016330^B33576444
"RTN","IBCNEDE1",1,0)
IBCNEDE1 ;DAOU/DAC - eIV INSURANCE BUFFER EXTRACT ;04-JUN-2002
"RTN","IBCNEDE1",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416**;21-MAR-94;Build 58
"RTN","IBCNEDE1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDE1",4,0)
 ;
"RTN","IBCNEDE1",5,0)
 ;**Program Description**
"RTN","IBCNEDE1",6,0)
 ; This routine loops through the insurance buffer and 
"RTN","IBCNEDE1",7,0)
 ; creates eIV transaction queue entries when approriate.
"RTN","IBCNEDE1",8,0)
 ; Periodically check for stop request for background task
"RTN","IBCNEDE1",9,0)
 ;
"RTN","IBCNEDE1",10,0)
 Q   ; no direct calls allowed
"RTN","IBCNEDE1",11,0)
 ;
"RTN","IBCNEDE1",12,0)
EN ; Loop through designated cross-references for updates
"RTN","IBCNEDE1",13,0)
 ; Insurance Buffer Extract
"RTN","IBCNEDE1",14,0)
 ;
"RTN","IBCNEDE1",15,0)
 N TODAYSDT,FRESHDAY,LOOPDT,IEN,OVRFRESH,FRESHDT
"RTN","IBCNEDE1",16,0)
 N DFN,PDOD,SRVICEDT,VERIFDDT,PAYERSTR,PAYERID,SYMBOL,PAYRNAME
"RTN","IBCNEDE1",17,0)
 N PIEN,PNIEN,TQIEN,TRIEN,TRSRVCDT,TQCRTDT,TRANSNO,DISYS
"RTN","IBCNEDE1",18,0)
 N ORIGINSR,ORGRPSTR,ORGRPNUM,ORGRPNAM,ORGSUBCR
"RTN","IBCNEDE1",19,0)
 N MAXCNT,CNT,ISYMBOLM,DATA1,DATA2,ORIG,SETSTR,ISYMBOL,IBCNETOT
"RTN","IBCNEDE1",20,0)
 N SIDDATA,SID,SIDACT,BSID,FDA,PASSBUF,SIDCNT,SIDARRAY
"RTN","IBCNEDE1",21,0)
 N TQDT,TQIENS,TQOK,STATIEN,PATID,MCAREFLG,INSNAME
"RTN","IBCNEDE1",22,0)
 ;
"RTN","IBCNEDE1",23,0)
 S SETSTR=$$SETTINGS^IBCNEDE7(1) ; Returns buffer extract settings
"RTN","IBCNEDE1",24,0)
 I 'SETSTR Q                    ; Quit if extract is not active
"RTN","IBCNEDE1",25,0)
 S MAXCNT=$P(SETSTR,U,4)        ; Max # TQ entries that may be created
"RTN","IBCNEDE1",26,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNEDE1",27,0)
 ;
"RTN","IBCNEDE1",28,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U,1) ; System freshness days
"RTN","IBCNEDE1",29,0)
 ;
"RTN","IBCNEDE1",30,0)
 S CNT=0       ; Initialize count of TQ entries created
"RTN","IBCNEDE1",31,0)
 S IBCNETOT=0  ; Initialize count for periodic TaskMan check
"RTN","IBCNEDE1",32,0)
 ;
"RTN","IBCNEDE1",33,0)
 S LOOPDT="" ; Date used to loop throught the IB global
"RTN","IBCNEDE1",34,0)
 F  S LOOPDT=$O(^IBA(355.33,"AEST","E",LOOPDT)) Q:LOOPDT=""!(CNT=MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE1",35,0)
 . S IEN=""
"RTN","IBCNEDE1",36,0)
 . F  S IEN=$O(^IBA(355.33,"AEST","E",LOOPDT,IEN)) Q:IEN=""!(CNT=MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE1",37,0)
 .. ; Update count for periodic check
"RTN","IBCNEDE1",38,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE1",39,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDE1",40,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE1",41,0)
 .. ;
"RTN","IBCNEDE1",42,0)
 .. ; Get symbol, if symbol'=" " OR "!" then quit
"RTN","IBCNEDE1",43,0)
 .. S ISYMBOL=$$SYMBOL^IBCNBLL(IEN) ; Insurance buffer symbol
"RTN","IBCNEDE1",44,0)
 .. I (ISYMBOL'=" ")&(ISYMBOL'="!") Q
"RTN","IBCNEDE1",45,0)
 .. ;
"RTN","IBCNEDE1",46,0)
 .. ; Get the eIV STATUS IEN and quit for response related errors
"RTN","IBCNEDE1",47,0)
 .. S STATIEN=+$P($G(^IBA(355.33,IEN,0)),U,12)
"RTN","IBCNEDE1",48,0)
 .. I ",11,12,15,"[(","_STATIEN_",") Q  ; Prevent update for response errors
"RTN","IBCNEDE1",49,0)
 .. ;
"RTN","IBCNEDE1",50,0)
 .. S OVRFRESH=$P($G(^IBA(355.33,IEN,0)),U,13) ; Freshness OvrRd flag
"RTN","IBCNEDE1",51,0)
 .. S DFN=$P($G(^IBA(355.33,IEN,60)),U,1) ; Patient DFN
"RTN","IBCNEDE1",52,0)
 .. Q:DFN=""
"RTN","IBCNEDE1",53,0)
 .. I $P($G(^DPT(DFN,0)),U,21) Q           ; Exclude if test patient
"RTN","IBCNEDE1",54,0)
 .. ;
"RTN","IBCNEDE1",55,0)
 .. S PDOD=$P($G(^DPT(DFN,.35)),U,1)\1     ; Patient's date of death
"RTN","IBCNEDE1",56,0)
 .. S SRVICEDT=DT I PDOD S SRVICEDT=PDOD             ; Service Date
"RTN","IBCNEDE1",57,0)
 .. S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNEDE1",58,0)
 .. S PAYERSTR=$$INSERROR^IBCNEUT3("B",IEN)          ; Payer String
"RTN","IBCNEDE1",59,0)
 .. S PAYERID=$P(PAYERSTR,U,3),PIEN=$P(PAYERSTR,U,2) ; Payer ID
"RTN","IBCNEDE1",60,0)
 .. S SYMBOL=+PAYERSTR                               ; Payer Symbol
"RTN","IBCNEDE1",61,0)
 .. I '$$PYRACTV^IBCNEDE7(PIEN) Q          ; Payer is not nationally active
"RTN","IBCNEDE1",62,0)
 .. ;
"RTN","IBCNEDE1",63,0)
 .. ; If payer symbol is returned set symbol in Ins. Buffer and quit
"RTN","IBCNEDE1",64,0)
 .. I SYMBOL D BUFF^IBCNEUT2(IEN,SYMBOL) Q
"RTN","IBCNEDE1",65,0)
 .. ;
"RTN","IBCNEDE1",66,0)
 .. D CLEAR^IBCNEUT4(IEN)                ; remove any existing symbol
"RTN","IBCNEDE1",67,0)
 .. ;
"RTN","IBCNEDE1",68,0)
 .. ; If no payer ID or no payer IEN is returned quit
"RTN","IBCNEDE1",69,0)
 .. I (PAYERID="")!('PIEN) Q
"RTN","IBCNEDE1",70,0)
 .. ;
"RTN","IBCNEDE1",71,0)
 .. ; Update service date and freshness date based on payer's allowed
"RTN","IBCNEDE1",72,0)
 .. ;  date range
"RTN","IBCNEDE1",73,0)
 .. D UPDDTS^IBCNEDE6(PIEN,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE1",74,0)
 .. ;
"RTN","IBCNEDE1",75,0)
 .. ; Update service dates for inquiries to be transmitted
"RTN","IBCNEDE1",76,0)
 .. D TQUPDSV^IBCNEUT5(DFN,PIEN,SRVICEDT)
"RTN","IBCNEDE1",77,0)
 .. ;
"RTN","IBCNEDE1",78,0)
 .. ; allow only one MEDICARE transmission per patient
"RTN","IBCNEDE1",79,0)
 .. S INSNAME=$P($G(^IBA(355.33,IEN,20)),U)
"RTN","IBCNEDE1",80,0)
 .. I INSNAME["MEDICARE",$G(MCAREFLG(DFN)) Q
"RTN","IBCNEDE1",81,0)
 .. ;
"RTN","IBCNEDE1",82,0)
 .. ; If freshness overide flag is set, file to TQ and quit
"RTN","IBCNEDE1",83,0)
 .. I OVRFRESH=1 D  Q
"RTN","IBCNEDE1",84,0)
 ... NEW DIE,X,Y,DISYS
"RTN","IBCNEDE1",85,0)
 ... S FDA(355.33,IEN_",",.13)="" D FILE^DIE("","FDA") K FDA
"RTN","IBCNEDE1",86,0)
 ... S:INSNAME["MEDICARE" MCAREFLG(DFN)=1 D TQ
"RTN","IBCNEDE1",87,0)
 .. ;
"RTN","IBCNEDE1",88,0)
 .. ; If ADDTQ^IBCNEUT5 is 1 set TQ, otherwise stop processing that entry
"RTN","IBCNEDE1",89,0)
 .. I '$$ADDTQ^IBCNEUT5(DFN,PIEN,SRVICEDT,FRESHDAY) Q
"RTN","IBCNEDE1",90,0)
 .. ; Check the existing TQ entries to confirm that this buffer IEN is
"RTN","IBCNEDE1",91,0)
 .. ; not included
"RTN","IBCNEDE1",92,0)
 .. S (TQDT,TQIENS)="",TQOK=1
"RTN","IBCNEDE1",93,0)
 .. F  S TQDT=$O(^IBCN(365.1,"AD",DFN,PIEN,TQDT)) Q:'TQDT!'TQOK  D
"RTN","IBCNEDE1",94,0)
 ... F  S TQIENS=$O(^IBCN(365.1,"AD",DFN,PIEN,TQDT,TQIENS)) Q:'TQIENS!'TQOK  D
"RTN","IBCNEDE1",95,0)
 ....    I $P($G(^IBCN(365.1,TQIENS,0)),U,5)=IEN S TQOK=0 Q
"RTN","IBCNEDE1",96,0)
 .. I TQOK S:INSNAME["MEDICARE" MCAREFLG(DFN)=1 D TQ
"RTN","IBCNEDE1",97,0)
 Q
"RTN","IBCNEDE1",98,0)
TQ ; Determine how many entries to create in the TQ file and set entries
"RTN","IBCNEDE1",99,0)
 ;
"RTN","IBCNEDE1",100,0)
 S BSID=$P($G(^IBA(355.33,IEN,60)),U,4)     ; Subscriber ID from buffer
"RTN","IBCNEDE1",101,0)
 S PATID=$P($G(^IBA(355.33,IEN,62)),U,1)    ; Patient ID from buffer  IB*2*416
"RTN","IBCNEDE1",102,0)
 K SIDARRAY
"RTN","IBCNEDE1",103,0)
 S SIDDATA=$$SIDCHK^IBCNEDE5(PIEN,DFN,BSID,.SIDARRAY,FRESHDT) ;determine rules to follow
"RTN","IBCNEDE1",104,0)
 S SIDACT=$P(SIDDATA,U,1)
"RTN","IBCNEDE1",105,0)
 S SIDCNT=$P(SIDDATA,U,2)                   ;Pull cnt of SIDs - shd be 1
"RTN","IBCNEDE1",106,0)
 ;
"RTN","IBCNEDE1",107,0)
 I SIDACT=3 D BUFF^IBCNEUT2(IEN,18) Q    ; update buffer w/ bang & quit
"RTN","IBCNEDE1",108,0)
 I CNT+SIDCNT>MAXCNT Q
"RTN","IBCNEDE1",109,0)
 S SID=""
"RTN","IBCNEDE1",110,0)
 F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D:$P(SID,"_")'="" SET(IEN,OVRFRESH,1,$P(SID,"_"))    ; set TQ w/ 'Pass Buffer' flag
"RTN","IBCNEDE1",111,0)
 I SIDACT=4 D SET(IEN,OVRFRESH,1,"")       ; set TQ w/ 'Pass Buffer' flag w/ blank subscriber ID
"RTN","IBCNEDE1",112,0)
 Q
"RTN","IBCNEDE1",113,0)
 ;
"RTN","IBCNEDE1",114,0)
RET ; Record Retrieval - Insurance Buffer
"RTN","IBCNEDE1",115,0)
 ;
"RTN","IBCNEDE1",116,0)
 S ORIGINSR=$P($G(^IBA(355.33,IEN,20)),U,1) ;Original ins. co.
"RTN","IBCNEDE1",117,0)
 S ORGRPSTR=$G(^IBA(355.33,IEN,40)) ; Original group string
"RTN","IBCNEDE1",118,0)
 S ORGRPNUM=$P(ORGRPSTR,U,3) ;Original group number
"RTN","IBCNEDE1",119,0)
 S ORGRPNAM=$P(ORGRPSTR,U,2) ;Original group name
"RTN","IBCNEDE1",120,0)
 S ORGSUBCR=$P($G(^IBA(355.33,IEN,60)),U,4) ; Original subscriber
"RTN","IBCNEDE1",121,0)
 ;
"RTN","IBCNEDE1",122,0)
 Q
"RTN","IBCNEDE1",123,0)
 ;
"RTN","IBCNEDE1",124,0)
SET(BUFFIEN,OVRFRESH,PASSBUF,SID1) ; Set data and check if set already
"RTN","IBCNEDE1",125,0)
 D RET
"RTN","IBCNEDE1",126,0)
 ;
"RTN","IBCNEDE1",127,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE1",128,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE1",129,0)
 S DATA1=DFN_U_PIEN_U_1_U_$G(BUFFIEN)_U_SID1_U_FRESHDT_U_PASSBUF ; SETTQ parameter 1
"RTN","IBCNEDE1",130,0)
 S $P(DATA1,U,8)=PATID     ; IB*2*416
"RTN","IBCNEDE1",131,0)
 ;
"RTN","IBCNEDE1",132,0)
 ;The hardcoded '1' in the 1st piece of DATA2 is the value to tell
"RTN","IBCNEDE1",133,0)
 ; the file 365.1 that it is the buffer extract.
"RTN","IBCNEDE1",134,0)
 S DATA2=1_U_"V"_U_SRVICEDT_U_"" ; SETTQ parameter 2
"RTN","IBCNEDE1",135,0)
 ;
"RTN","IBCNEDE1",136,0)
 S ORIG=ORIGINSR_U_ORGRPNUM_U_ORGRPNAM_U_ORGSUBCR ; SETTQ parameter 3
"RTN","IBCNEDE1",137,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2,ORIG,$G(OVRFRESH)) ; File TQ entry
"RTN","IBCNEDE1",138,0)
 I TQIEN'="" S CNT=CNT+1 ; If filed increment count
"RTN","IBCNEDE1",139,0)
 ;
"RTN","IBCNEDE1",140,0)
 Q
"RTN","IBCNEDE2")
0^17^B58601408^B63218575
"RTN","IBCNEDE2",1,0)
IBCNEDE2 ;DAOU/DAC - eIV PRE REG EXTRACT (APPTS) ;18-JUN-2002
"RTN","IBCNEDE2",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,249,345,416**;21-MAR-94;Build 58
"RTN","IBCNEDE2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDE2",4,0)
 ;
"RTN","IBCNEDE2",5,0)
 ;**Program Description**
"RTN","IBCNEDE2",6,0)
 ;  This program finds veterans who are scheduled to be seen within a
"RTN","IBCNEDE2",7,0)
 ;  specified date range.
"RTN","IBCNEDE2",8,0)
 ;  Periodically check for stop request for background task
"RTN","IBCNEDE2",9,0)
 ;
"RTN","IBCNEDE2",10,0)
 Q   ; can't be called directly
"RTN","IBCNEDE2",11,0)
 ;
"RTN","IBCNEDE2",12,0)
EN ; Loop through designated cross-references for updates
"RTN","IBCNEDE2",13,0)
 ; Pre reg extract (Appointment extract)
"RTN","IBCNEDE2",14,0)
 ;
"RTN","IBCNEDE2",15,0)
 N TODAYSDT,FRESHDAY,SLCCRIT1,MAXCNT,CNT,ENDDT,CLNC,FRESHDT,GIEN
"RTN","IBCNEDE2",16,0)
 N APTDT,INREC,INSIEN,PAYER,PIEN,PAYERSTR,SYMBOL,SUPPBUFF,PATID
"RTN","IBCNEDE2",17,0)
 N DFN,OK,VAIN,INS,DATA1,DATA2,ELG,PAYERID,SETSTR,SRVICEDT,ACTINS
"RTN","IBCNEDE2",18,0)
 N TQIEN,IBINDT,IBOUTP,QURYFLAG,INSNAME,FOUND1,FOUND2,IBCNETOT
"RTN","IBCNEDE2",19,0)
 N SID,SIDACT,SIDDATA,SIDARRAY,SIDCNT,IBDDI,IBINS,DISYS,NUM,MCAREFLG
"RTN","IBCNEDE2",20,0)
 ;
"RTN","IBCNEDE2",21,0)
 S SETSTR=$$SETTINGS^IBCNEDE7(2)     ;  Get setting for pre reg. extract 
"RTN","IBCNEDE2",22,0)
 I 'SETSTR Q                         ; Quit if extract is not active
"RTN","IBCNEDE2",23,0)
 S SLCCRIT1=$P(SETSTR,U,2)           ; Selection Criteria #1
"RTN","IBCNEDE2",24,0)
 S MAXCNT=$P(SETSTR,U,4)             ; Max # of TQ entries to create
"RTN","IBCNEDE2",25,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNEDE2",26,0)
 S SUPPBUFF=$P(SETSTR,U,5)                   ; Suppress Buffer Flag
"RTN","IBCNEDE2",27,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U,1)     ; Freshness days span
"RTN","IBCNEDE2",28,0)
 S CNT=0                                     ; Init. TQ entry counter
"RTN","IBCNEDE2",29,0)
 S ENDDT=$$FMADD^XLFDT(DT,SLCCRIT1)   ; End of appt. date selection range
"RTN","IBCNEDE2",30,0)
 S IBCNETOT=0               ; Initialize count for periodic TaskMan check
"RTN","IBCNEDE2",31,0)
 K ^TMP($J,"SDAMA301"),^TMP("IBCNEDE2",$J)   ; Clean TMP globals
"RTN","IBCNEDE2",32,0)
 ;
"RTN","IBCNEDE2",33,0)
 S CLNC=0 ; Init. clinic
"RTN","IBCNEDE2",34,0)
 ; Loop through clinics 
"RTN","IBCNEDE2",35,0)
 F  S CLNC=$O(^SC(CLNC)) Q:'CLNC!(CNT'<MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE2",36,0)
 . ;
"RTN","IBCNEDE2",37,0)
 . D CLINICEX Q:'OK     ; Check for clinic exclusion
"RTN","IBCNEDE2",38,0)
 . ;
"RTN","IBCNEDE2",39,0)
 . S ^TMP("IBCNEDE2",$J,CLNC)=""
"RTN","IBCNEDE2",40,0)
 ;
"RTN","IBCNEDE2",41,0)
 ; Set up variables for scheduling call and call
"RTN","IBCNEDE2",42,0)
 S IBSDA("FLDS")=8
"RTN","IBCNEDE2",43,0)
 S IBSDA(1)=DT_";"_ENDDT
"RTN","IBCNEDE2",44,0)
 S IBSDA(2)="^TMP(""IBCNEDE2"",$J,"
"RTN","IBCNEDE2",45,0)
 S IBSDA(3)="R"
"RTN","IBCNEDE2",46,0)
 S NUM=$$SDAPI^SDAMA301(.IBSDA) I NUM<1 D:NUM<0 ERRMSG G ENQ
"RTN","IBCNEDE2",47,0)
 ;
"RTN","IBCNEDE2",48,0)
 ;
"RTN","IBCNEDE2",49,0)
 S CLNC=0 ; Init. clinic
"RTN","IBCNEDE2",50,0)
 ; Loop through clinics returned
"RTN","IBCNEDE2",51,0)
 F  S CLNC=$O(^TMP($J,"SDAMA301",CLNC)) Q:'CLNC  D  Q:$G(ZTSTOP)!(CNT'<MAXCNT)
"RTN","IBCNEDE2",52,0)
 . ;
"RTN","IBCNEDE2",53,0)
 . ; Loop through patients returned
"RTN","IBCNEDE2",54,0)
 . S DFN=0 F  S DFN=$O(^TMP($J,"SDAMA301",CLNC,DFN)) Q:'DFN!(CNT'<MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE2",55,0)
 .. ;
"RTN","IBCNEDE2",56,0)
 .. S APTDT=DT           ; Check for appointment date
"RTN","IBCNEDE2",57,0)
 .. S MCAREFLG=0
"RTN","IBCNEDE2",58,0)
 .. ;
"RTN","IBCNEDE2",59,0)
 .. ; Loop through dates in range at clinic
"RTN","IBCNEDE2",60,0)
 .. F  S APTDT=$O(^TMP($J,"SDAMA301",CLNC,DFN,APTDT)) Q:('APTDT)!((APTDT\1)>ENDDT)!(CNT'<MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE2",61,0)
 ... ;
"RTN","IBCNEDE2",62,0)
 ... S SRVICEDT=APTDT\1 ;Set service date equal to appointment date
"RTN","IBCNEDE2",63,0)
 ... S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNEDE2",64,0)
 ... ;
"RTN","IBCNEDE2",65,0)
 ... ; Update count for periodic check
"RTN","IBCNEDE2",66,0)
 ... S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE2",67,0)
 ... ; Check for request to stop background job, periodically
"RTN","IBCNEDE2",68,0)
 ... I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE2",69,0)
 ... ;
"RTN","IBCNEDE2",70,0)
 ... S IBSDATA=$G(^TMP($J,"SDAMA301",CLNC,DFN,APTDT))
"RTN","IBCNEDE2",71,0)
 ... S ELG=$P(IBSDATA,U,8)
"RTN","IBCNEDE2",72,0)
 ... S ELG=$S(ELG'="":ELG,1:$P($G(^DPT(DFN,.36)),U,1))
"RTN","IBCNEDE2",73,0)
 ... I $P($G(^DPT(DFN,0)),U,21) Q         ; Exclude if test patient
"RTN","IBCNEDE2",74,0)
 ... I $P($G(^DPT(DFN,.35)),"^",1)'="" Q  ; Exclude if patient is deceased
"RTN","IBCNEDE2",75,0)
 ... ;
"RTN","IBCNEDE2",76,0)
 ... D ELG Q:'OK     ; Check for eligibility exclusion
"RTN","IBCNEDE2",77,0)
 ... ;
"RTN","IBCNEDE2",78,0)
 ... K ACTINS
"RTN","IBCNEDE2",79,0)
 ... D ALL^IBCNS1(DFN,"ACTINS",2)
"RTN","IBCNEDE2",80,0)
 ... ;
"RTN","IBCNEDE2",81,0)
 ... I '$D(ACTINS(0)) Q  ; Patient has no active ins
"RTN","IBCNEDE2",82,0)
 ... ;
"RTN","IBCNEDE2",83,0)
 ... S INREC=0 ; Record ien
"RTN","IBCNEDE2",84,0)
 ... F  S INREC=$O(ACTINS(INREC)) Q:('INREC)!(CNT'<MAXCNT)  D
"RTN","IBCNEDE2",85,0)
 ... . S INSIEN=$P($G(ACTINS(INREC,0)),U,1) ; Insurance ien
"RTN","IBCNEDE2",86,0)
 ... . S INSNAME=$P($G(^DIC(36,INSIEN,0)),U)
"RTN","IBCNEDE2",87,0)
 ... . ; allow only one MEDICARE transmission per patient
"RTN","IBCNEDE2",88,0)
 ... . I INSNAME["MEDICARE",MCAREFLG Q
"RTN","IBCNEDE2",89,0)
 ... . ; exclude pharmacy policies
"RTN","IBCNEDE2",90,0)
 ... . I $$GET1^DIQ(36,INSIEN_",",.13)="PRESCRIPTION ONLY" Q
"RTN","IBCNEDE2",91,0)
 ... . S GIEN=+$P($G(ACTINS(INREC,0)),U,18)
"RTN","IBCNEDE2",92,0)
 ... . I GIEN,$$GET1^DIQ(355.3,GIEN_",",.09)="PRESCRIPTION" Q
"RTN","IBCNEDE2",93,0)
 ... . ; check for ins. to exclude (i.e. Medicaid)
"RTN","IBCNEDE2",94,0)
 ... . I $$EXCLUDE^IBCNEUT4(INSNAME) Q
"RTN","IBCNEDE2",95,0)
 ... . ; check insurance policy expiration date
"RTN","IBCNEDE2",96,0)
 ... . I $$EXPIRED($P($G(ACTINS(INREC,0)),U,4)) Q
"RTN","IBCNEDE2",97,0)
 ... . ;
"RTN","IBCNEDE2",98,0)
 ... . ; set patient id field   IB*2*416
"RTN","IBCNEDE2",99,0)
 ... . S PATID=$P($G(ACTINS(INREC,5)),U,1)    ; 5.01 field
"RTN","IBCNEDE2",100,0)
 ... . ;
"RTN","IBCNEDE2",101,0)
 ... . S PAYERSTR=$$INSERROR^IBCNEUT3("I",INSIEN) ; Get payer info
"RTN","IBCNEDE2",102,0)
 ... . ;
"RTN","IBCNEDE2",103,0)
 ... . S SYMBOL=+PAYERSTR ; error symbol
"RTN","IBCNEDE2",104,0)
 ... . S PAYERID=$P(PAYERSTR,U,3)               ; (National ID) payer id
"RTN","IBCNEDE2",105,0)
 ... . S PIEN=$P(PAYERSTR,U,2)                  ; Payer ien
"RTN","IBCNEDE2",106,0)
 ... . I '$$PYRACTV^IBCNEDE7(PIEN) Q            ; Payer is not nationally active
"RTN","IBCNEDE2",107,0)
 ... . ;
"RTN","IBCNEDE2",108,0)
 ... . ; If error symbol exists, set record in insurance buffer & quit
"RTN","IBCNEDE2",109,0)
 ... . I SYMBOL D  Q
"RTN","IBCNEDE2",110,0)
 ... . . I 'SUPPBUFF,'$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,INREC,SYMBOL,"",1)
"RTN","IBCNEDE2",111,0)
 ... . ;
"RTN","IBCNEDE2",112,0)
 ... . ; Update service date and freshness date based on payers allowed
"RTN","IBCNEDE2",113,0)
 ... . ;  date range
"RTN","IBCNEDE2",114,0)
 ... . D UPDDTS^IBCNEDE6(PIEN,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE2",115,0)
 ... . ;
"RTN","IBCNEDE2",116,0)
 ... . ; Update service dates for inquiry to be transmitted
"RTN","IBCNEDE2",117,0)
 ... . D TQUPDSV^IBCNEUT5(DFN,PIEN,SRVICEDT)
"RTN","IBCNEDE2",118,0)
 ... . ;
"RTN","IBCNEDE2",119,0)
 ... . ; Quit before filing if outstanding entries in TQ
"RTN","IBCNEDE2",120,0)
 ... . I '$$ADDTQ^IBCNEUT5(DFN,PIEN,SRVICEDT,FRESHDAY) Q
"RTN","IBCNEDE2",121,0)
 ... . ;
"RTN","IBCNEDE2",122,0)
 ... . S QURYFLAG="V"
"RTN","IBCNEDE2",123,0)
 ... . K SIDARRAY
"RTN","IBCNEDE2",124,0)
 ... . S SIDDATA=$$SIDCHK^IBCNEDE5(PIEN,DFN,,.SIDARRAY,FRESHDT)
"RTN","IBCNEDE2",125,0)
 ... . S SIDACT=$P(SIDDATA,U),SIDCNT=$P(SIDDATA,U,2)
"RTN","IBCNEDE2",126,0)
 ... . I SIDACT=3,'SUPPBUFF,'$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,INREC,18,"",1) Q
"RTN","IBCNEDE2",127,0)
 ... . I CNT+SIDCNT>MAXCNT S CNT=MAXCNT Q  ;exceeds MAXCNT
"RTN","IBCNEDE2",128,0)
 ... . ;
"RTN","IBCNEDE2",129,0)
 ... . S SID=""
"RTN","IBCNEDE2",130,0)
 ... . F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D:$P(SID,"_")'="" SET($P(SID,"_"),$P(SID,"_",2),PATID) S:INSNAME["MEDICARE" MCAREFLG=1
"RTN","IBCNEDE2",131,0)
 ... . I SIDACT=4 D SET("","",PATID) S:INSNAME["MEDICARE" MCAREFLG=1
"RTN","IBCNEDE2",132,0)
 ... . Q
"RTN","IBCNEDE2",133,0)
 ... Q
"RTN","IBCNEDE2",134,0)
ENQ K ^TMP($J,"SDAMA301"),^TMP("IBCNEDE2",$J)
"RTN","IBCNEDE2",135,0)
 Q
"RTN","IBCNEDE2",136,0)
 ;
"RTN","IBCNEDE2",137,0)
CLINICEX ; Clinic exclusion
"RTN","IBCNEDE2",138,0)
 S OK=1
"RTN","IBCNEDE2",139,0)
 I $D(^DG(43,1,"DGPREC","B",CLNC)) S OK=0
"RTN","IBCNEDE2",140,0)
 Q
"RTN","IBCNEDE2",141,0)
 ;
"RTN","IBCNEDE2",142,0)
ELG ;  Eligibility exclusion
"RTN","IBCNEDE2",143,0)
 I ELG="" S OK=0 Q
"RTN","IBCNEDE2",144,0)
 I $D(^DG(43,1,"DGPREE","B",ELG)) S OK=0 Q
"RTN","IBCNEDE2",145,0)
 S OK=1
"RTN","IBCNEDE2",146,0)
 Q
"RTN","IBCNEDE2",147,0)
 ;
"RTN","IBCNEDE2",148,0)
INP ;  Inpatient status
"RTN","IBCNEDE2",149,0)
 D INP^VADPT
"RTN","IBCNEDE2",150,0)
 I $G(VAIN(1))'="" K VAIN S OK=0 Q
"RTN","IBCNEDE2",151,0)
 K VAIN
"RTN","IBCNEDE2",152,0)
 S OK=1
"RTN","IBCNEDE2",153,0)
 Q
"RTN","IBCNEDE2",154,0)
 ;
"RTN","IBCNEDE2",155,0)
SET(SID,INR,PATID) ; Set data in TQ
"RTN","IBCNEDE2",156,0)
 ;
"RTN","IBCNEDE2",157,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE2",158,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE2",159,0)
 S DATA1=DFN_U_PIEN_U_1_U_""_U_SID_U_FRESHDT ; SETTQ 1st parameter
"RTN","IBCNEDE2",160,0)
 S $P(DATA1,U,8)=PATID     ; IB*2*416
"RTN","IBCNEDE2",161,0)
 ;
"RTN","IBCNEDE2",162,0)
 ; The hardcoded '2' in the 1st piece of DATA2 is the value to tell
"RTN","IBCNEDE2",163,0)
 ; the file 365.1 that it is the appointment extract.
"RTN","IBCNEDE2",164,0)
 S DATA2=2_U_QURYFLAG_U_SRVICEDT_U_INR    ; SETTQ 2nd parameter
"RTN","IBCNEDE2",165,0)
 ;
"RTN","IBCNEDE2",166,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2)       ; Sets in TQ
"RTN","IBCNEDE2",167,0)
 I TQIEN'="" S CNT=CNT+1                    ; If filed increment count
"RTN","IBCNEDE2",168,0)
 ;
"RTN","IBCNEDE2",169,0)
 Q
"RTN","IBCNEDE2",170,0)
 ;
"RTN","IBCNEDE2",171,0)
ERRMSG ; Send a message indicating an extract error has occured
"RTN","IBCNEDE2",172,0)
 N MGRP,XMSUB,MSG,IBX,IBM
"RTN","IBCNEDE2",173,0)
 ;
"RTN","IBCNEDE2",174,0)
 ; Set to IB site parameter MAILGROUP
"RTN","IBCNEDE2",175,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDE2",176,0)
 ;
"RTN","IBCNEDE2",177,0)
 S XMSUB="eIV Problem: Appointment Extract"
"RTN","IBCNEDE2",178,0)
 S MSG(1)="On "_$$FMTE^XLFDT(DT)_" the Appointment Extract for eIV encountered one or more"
"RTN","IBCNEDE2",179,0)
 S MSG(2)="errors while attempting to get Appointment data from the scheduling"
"RTN","IBCNEDE2",180,0)
 S MSG(3)="package."
"RTN","IBCNEDE2",181,0)
 S MSG(4)=""
"RTN","IBCNEDE2",182,0)
 S MSG(5)="Error(s) encountered: "
"RTN","IBCNEDE2",183,0)
 S MSG(6)=""
"RTN","IBCNEDE2",184,0)
 S MSG(7)="  Error Code   Error Message"
"RTN","IBCNEDE2",185,0)
 S MSG(8)="  ----------   -------------"
"RTN","IBCNEDE2",186,0)
 S IBM=8,IBX=0 F  S IBX=$O(^TMP($J,"SDAMA301",IBX)) Q:IBX=""  S IBM=IBM+1,MSG(IBM)="  "_$$LJ^XLFSTR(IBX,13)_$G(^TMP($J,"SDAMA301",IBX))
"RTN","IBCNEDE2",187,0)
 S IBM=IBM+1,MSG(IBM)=""
"RTN","IBCNEDE2",188,0)
 S IBM=IBM+1,MSG(IBM)="As a result of this error the extract was not done.  The extract"
"RTN","IBCNEDE2",189,0)
 S IBM=IBM+1,MSG(IBM)="will be attempted again the next night automatically.  If you"
"RTN","IBCNEDE2",190,0)
 S IBM=IBM+1,MSG(IBM)="continue to receive error messages you should contact your IRM"
"RTN","IBCNEDE2",191,0)
 S IBM=IBM+1,MSG(IBM)="and possibly call the Help Desk for assistance."
"RTN","IBCNEDE2",192,0)
 ;
"RTN","IBCNEDE2",193,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDE2",194,0)
 ;
"RTN","IBCNEDE2",195,0)
 Q
"RTN","IBCNEDE2",196,0)
 ;
"RTN","IBCNEDE2",197,0)
EXPIRED(EXPDT) ; check if insurance policy has already expired
"RTN","IBCNEDE2",198,0)
 ; EXPDT - expiration date (2.312/3)
"RTN","IBCNEDE2",199,0)
 ; returns 1 if expiration date is in the past, 0 otherwise
"RTN","IBCNEDE2",200,0)
 N X1,X2
"RTN","IBCNEDE2",201,0)
 S X1=+$G(DT),X2=+$G(EXPDT)
"RTN","IBCNEDE2",202,0)
 I X1,X2 Q $S($$FMDIFF^XLFDT(DT,EXPDT,1)>0:1,1:0)
"RTN","IBCNEDE2",203,0)
 Q 0
"RTN","IBCNEDE3")
0^47^B57677467^B51661172
"RTN","IBCNEDE3",1,0)
IBCNEDE3 ;DAOU/DJW - NONVERINS DATA EXTRACT ;18-JUN-2002
"RTN","IBCNEDE3",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416**;21-MAR-94;Build 58
"RTN","IBCNEDE3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDE3",4,0)
 ;
"RTN","IBCNEDE3",5,0)
 ;**Program Description**
"RTN","IBCNEDE3",6,0)
 ;  This program finds veterans who have been seen within a
"RTN","IBCNEDE3",7,0)
 ;  specified date range that have active insurance records which has
"RTN","IBCNEDE3",8,0)
 ;  not been verified recently.
"RTN","IBCNEDE3",9,0)
 ;  Periodically check for stop request for background task
"RTN","IBCNEDE3",10,0)
 ;
"RTN","IBCNEDE3",11,0)
 Q   ; program can not be called directly
"RTN","IBCNEDE3",12,0)
 ;
"RTN","IBCNEDE3",13,0)
EN ; Loop through designated cross-references for updates 
"RTN","IBCNEDE3",14,0)
 ; (Non verified insurance)
"RTN","IBCNEDE3",15,0)
 ;
"RTN","IBCNEDE3",16,0)
 ; Initialize 
"RTN","IBCNEDE3",17,0)
 NEW DIC,DA,X,Y,DLAYGO,DINUM,DTOUT,DFN,FRESHDT,IBD,IBPM,IBPMD
"RTN","IBCNEDE3",18,0)
 NEW IEN,MAXCNT,IBCNECNT,EACTIVE,XDAYS,YDAYS,TDT,VI,IBBDT,IBEDT
"RTN","IBCNEDE3",19,0)
 NEW VINCON,VNOK,SRVICEDT,RESULT,PAYER,PAYERID,ARRAY,ERROR,SUPPBUFF
"RTN","IBCNEDE3",20,0)
 NEW TRANSNO,IBQUERY,PTN,INSNAME,IBCNETOT,SID,SIDACT,SIDDATA
"RTN","IBCNEDE3",21,0)
 NEW SIDARRAY,SIDCNT,DISYS,DGPMDT,AUPNDT,II,PATID
"RTN","IBCNEDE3",22,0)
 ;
"RTN","IBCNEDE3",23,0)
 S IEN="",IBCNECNT=0
"RTN","IBCNEDE3",24,0)
 ; Initialize count for periodic TaskMan check
"RTN","IBCNEDE3",25,0)
 S IBCNETOT=0
"RTN","IBCNEDE3",26,0)
 ;
"RTN","IBCNEDE3",27,0)
 ; Get site parameter settings for non-verified ins. extract
"RTN","IBCNEDE3",28,0)
 S EACTIVE=$$SETTINGS^IBCNEDE7(3)
"RTN","IBCNEDE3",29,0)
 I 'EACTIVE G EXIT                   ; Quit if extract not active
"RTN","IBCNEDE3",30,0)
 S XDAYS=$P(EACTIVE,U,2)
"RTN","IBCNEDE3",31,0)
 S YDAYS=$P(EACTIVE,U,3)
"RTN","IBCNEDE3",32,0)
 S MAXCNT=$P(EACTIVE,U,4)
"RTN","IBCNEDE3",33,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNEDE3",34,0)
 S SUPPBUFF=$P(EACTIVE,U,5)
"RTN","IBCNEDE3",35,0)
 ;
"RTN","IBCNEDE3",36,0)
 ;  Check for Date Last Treated and get DFN's
"RTN","IBCNEDE3",37,0)
 S IBBDT=$$FMADD^XLFDT(DT,-XDAYS),IBEDT=DT
"RTN","IBCNEDE3",38,0)
 ;
"RTN","IBCNEDE3",39,0)
 ;  * main control
"RTN","IBCNEDE3",40,0)
 ;
"RTN","IBCNEDE3",41,0)
 S IBD=IBBDT-.0001
"RTN","IBCNEDE3",42,0)
 K ^TMP("IBCNEDE3",$J,"PTS")
"RTN","IBCNEDE3",43,0)
 F II=1:1 D  Q:(IBD="")!(IBD\1>IBEDT)!(IBCNECNT'<MAXCNT)!($G(ZTSTOP))
"RTN","IBCNEDE3",44,0)
 . S DGPMDT=$O(^DGPM("ATT3",IBD)),AUPNDT=$O(^AUPNVSIT("B",IBD))
"RTN","IBCNEDE3",45,0)
 . I (AUPNDT="")!((DGPMDT\1)<(AUPNDT\1)) S IBD=DGPMDT
"RTN","IBCNEDE3",46,0)
 . I (DGPMDT="")!((DGPMDT\1)>(AUPNDT\1)) S IBD=AUPNDT
"RTN","IBCNEDE3",47,0)
 . I (IBD\1>IBEDT)!(IBD="") Q
"RTN","IBCNEDE3",48,0)
 . ;
"RTN","IBCNEDE3",49,0)
 . K ^TMP("IBJDI51",$J)
"RTN","IBCNEDE3",50,0)
 . D INP(IBD)    ; sets up ^TMP("IBJDI51",$J)
"RTN","IBCNEDE3",51,0)
 . I $G(ZTSTOP) Q
"RTN","IBCNEDE3",52,0)
 . D OUTP(IBD)    ; sets up ^TMP("IBJDI51",$J)
"RTN","IBCNEDE3",53,0)
 . I $G(ZTSTOP) Q
"RTN","IBCNEDE3",54,0)
 . ;D REST(IBBDT-.0001,IBEDT)    ; sets up ^TMP("IBJDI51",$J)
"RTN","IBCNEDE3",55,0)
 . D PROCESS
"RTN","IBCNEDE3",56,0)
 . I $G(ZTSTOP) Q
"RTN","IBCNEDE3",57,0)
 . S IBD=($$FMADD^XLFDT(IBD,+1))-.0001
"RTN","IBCNEDE3",58,0)
 ;
"RTN","IBCNEDE3",59,0)
EXIT ;
"RTN","IBCNEDE3",60,0)
 K VINS,^TMP("IBJDI51",$J),^TMP("IBCNEDE3",$J,"PTS")   ; clean up
"RTN","IBCNEDE3",61,0)
 ;
"RTN","IBCNEDE3",62,0)
 Q
"RTN","IBCNEDE3",63,0)
 ; * end of routine processing
"RTN","IBCNEDE3",64,0)
 ;===========================================
"RTN","IBCNEDE3",65,0)
INP(DATE) ;  Find inpatients for that date (we want most recent encounter)
"RTN","IBCNEDE3",66,0)
 NEW IBD,IBPM,IBPMD,DFN
"RTN","IBCNEDE3",67,0)
 S IBD=DATE-.0001
"RTN","IBCNEDE3",68,0)
 F  S IBD=$O(^DGPM("ATT3",IBD)) Q:(IBD="")!(IBD\1>DATE)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE3",69,0)
 . S IBPM=0 F  S IBPM=$O(^DGPM("ATT3",IBD,IBPM)) Q:IBPM=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE3",70,0)
 .. ; Update count for periodic check
"RTN","IBCNEDE3",71,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE3",72,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDE3",73,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE3",74,0)
 .. ;
"RTN","IBCNEDE3",75,0)
 .. S IBPMD=$G(^DGPM(IBPM,0)) Q:'IBPMD
"RTN","IBCNEDE3",76,0)
 .. S DFN=+$P(IBPMD,U,3) Q:'DFN
"RTN","IBCNEDE3",77,0)
 .. I $P($G(^DPT(DFN,0)),U,21) Q         ; Exclude if test patient
"RTN","IBCNEDE3",78,0)
 .. Q:$D(^TMP("IBCNEDE3",$J,"PTS",DFN,"INP"))      ; already processed 
"RTN","IBCNEDE3",79,0)
 .. S ^TMP("IBCNEDE3",$J,"PTS",DFN,"INP",IBD)=""
"RTN","IBCNEDE3",80,0)
 .. D PROC^IBJDI5(DFN,"*",IBD)
"RTN","IBCNEDE3",81,0)
 Q
"RTN","IBCNEDE3",82,0)
 ;
"RTN","IBCNEDE3",83,0)
OUTP(DATE) ; Find outpatients treated for this date (most recent encounter)
"RTN","IBCNEDE3",84,0)
 NEW IBD,IEN,DFN
"RTN","IBCNEDE3",85,0)
 S IBD=DATE-.0001
"RTN","IBCNEDE3",86,0)
 F  S IBD=$O(^AUPNVSIT("B",IBD)) Q:(IBD="")!(IBD\1>DATE)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE3",87,0)
 . S IEN=""
"RTN","IBCNEDE3",88,0)
 . F  S IEN=$O(^AUPNVSIT("B",IBD,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE3",89,0)
 .. ; Update count for periodic check
"RTN","IBCNEDE3",90,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE3",91,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDE3",92,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE3",93,0)
 .. ;
"RTN","IBCNEDE3",94,0)
 .. S DFN=$P($G(^AUPNVSIT(IEN,0)),U,5)
"RTN","IBCNEDE3",95,0)
 .. Q:DFN=""
"RTN","IBCNEDE3",96,0)
 .. I $P($G(^DPT(DFN,0)),U,21) Q         ; Exclude if test patient
"RTN","IBCNEDE3",97,0)
 .. Q:$D(^TMP("IBCNEDE3",$J,"PTS",DFN,"OUTP"))    ; already processed
"RTN","IBCNEDE3",98,0)
 .. S ^TMP("IBCNEDE3",$J,"PTS",DFN,"OUTP",IBD)=""
"RTN","IBCNEDE3",99,0)
 .. ; Capture the most recent (last) encounter date
"RTN","IBCNEDE3",100,0)
 .. I $G(^TMP("IBJDI51",$J,DFN))<(IBD\1) D PROC^IBJDI5(DFN,"",IBD)
"RTN","IBCNEDE3",101,0)
 Q
"RTN","IBCNEDE3",102,0)
 ;
"RTN","IBCNEDE3",103,0)
REST(STARTDT,ENDDT) ; Check to see if there was a more recent inpatient
"RTN","IBCNEDE3",104,0)
 ; or outpatient encounter for this patient.
"RTN","IBCNEDE3",105,0)
 ;
"RTN","IBCNEDE3",106,0)
 NEW IBPM,IBPMD,IBD,DFN
"RTN","IBCNEDE3",107,0)
 S DFN=0
"RTN","IBCNEDE3",108,0)
 F  S DFN=$O(^TMP("IBJDI51",$J,DFN)) Q:DFN=""  D
"RTN","IBCNEDE3",109,0)
 . ;
"RTN","IBCNEDE3",110,0)
 . ; inpatients
"RTN","IBCNEDE3",111,0)
 . S IBPM=0 F  S IBPM=$O(^DGPM("C",DFN,IBPM)) Q:IBPM=""  D
"RTN","IBCNEDE3",112,0)
 .. S IBPMD=$G(^DGPM(IBPM,0)) Q:'IBPMD
"RTN","IBCNEDE3",113,0)
 .. S IBD=$P(IBPMD,U,1) I ((IBD\1)<STARTDT)!((IBD\1)>ENDDT) Q
"RTN","IBCNEDE3",114,0)
 .. Q:$D(^TMP("IBJDI51",$J,"PTS",DFN,"INP",IBD))  ;already checked
"RTN","IBCNEDE3",115,0)
 .. S ^TMP("IBJDI51",$J,"PTS",DFN,"INP",IBD)=""
"RTN","IBCNEDE3",116,0)
 .. ; Capture the most recent (last) encounter date
"RTN","IBCNEDE3",117,0)
 .. I $G(^TMP("IBJDI51",$J,DFN))<(IBD\1) D PROC^IBJDI5(DFN,"*",IBD)
"RTN","IBCNEDE3",118,0)
 . ;
"RTN","IBCNEDE3",119,0)
 . ; outpatients
"RTN","IBCNEDE3",120,0)
 . S IBD="" F  S IBD=$O(^AUPNVSIT("AA",DFN,IBD)) Q:IBD=""  D
"RTN","IBCNEDE3",121,0)
 .. I ((IBD\1)<STARTDT)!((IBD\1)>ENDDT) Q
"RTN","IBCNEDE3",122,0)
 .. Q:$D(^TMP("IBJDI51",$J,"PTS",DFN,"OUTP",IBD))  ;already checked
"RTN","IBCNEDE3",123,0)
 .. S ^TMP("IBJDI51",$J,"PTS",DFN,"OUTP",IBD)=""
"RTN","IBCNEDE3",124,0)
 .. ; Capture the most recent (last) encounter date
"RTN","IBCNEDE3",125,0)
 .. I $G(^TMP("IBJDI51",$J,DFN))<(IBD\1) D PROC^IBJDI5(DFN,"",IBD)
"RTN","IBCNEDE3",126,0)
 ;
"RTN","IBCNEDE3",127,0)
 K ^TMP("IBCNEDE3",$J,"PTS")  ; clean up - no longer needed
"RTN","IBCNEDE3",128,0)
 Q
"RTN","IBCNEDE3",129,0)
 ;
"RTN","IBCNEDE3",130,0)
PROCESS ;  Get insurance for each patient
"RTN","IBCNEDE3",131,0)
 N MCAREFLG
"RTN","IBCNEDE3",132,0)
 S DFN=0 F  S DFN=$O(^TMP("IBJDI51",$J,DFN)) Q:'DFN  D  Q:IBCNECNT'<MAXCNT!$G(ZTSTOP)
"RTN","IBCNEDE3",133,0)
 . S MCAREFLG=0
"RTN","IBCNEDE3",134,0)
 . ; Update count for periodic check
"RTN","IBCNEDE3",135,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE3",136,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDE3",137,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE3",138,0)
 . ;
"RTN","IBCNEDE3",139,0)
 . S SRVICEDT=$P(^TMP("IBJDI51",$J,DFN),U)
"RTN","IBCNEDE3",140,0)
 . S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-YDAYS)
"RTN","IBCNEDE3",141,0)
 . K VINS
"RTN","IBCNEDE3",142,0)
 . D ALL^IBCNS1(DFN,"VINS",3)
"RTN","IBCNEDE3",143,0)
 . ;
"RTN","IBCNEDE3",144,0)
 . I $G(VINS(0))="" Q  ; no active insurance
"RTN","IBCNEDE3",145,0)
 . ;
"RTN","IBCNEDE3",146,0)
 . S VI=0 F  S VI=$O(VINS(VI)) Q:VI=""!(IBCNECNT'<MAXCNT)  D
"RTN","IBCNEDE3",147,0)
 .. S VINCON=$P(VINS(VI,0),U)
"RTN","IBCNEDE3",148,0)
 .. ;
"RTN","IBCNEDE3",149,0)
 .. S INSNAME=$P($G(^DIC(36,VINCON,0)),U)
"RTN","IBCNEDE3",150,0)
 .. ; allow only one MEDICARE transmission per patient
"RTN","IBCNEDE3",151,0)
 .. I INSNAME["MEDICARE",MCAREFLG Q
"RTN","IBCNEDE3",152,0)
 .. ;Check for ins. companies to exclude (i.e. Medicaid)
"RTN","IBCNEDE3",153,0)
 .. I $$EXCLUDE^IBCNEUT4(INSNAME) Q
"RTN","IBCNEDE3",154,0)
 .. ;
"RTN","IBCNEDE3",155,0)
 .. ;Check for Ins. Company/Payer problems
"RTN","IBCNEDE3",156,0)
 .. S RESULT=$$INSERROR^IBCNEUT3("I",VINCON)
"RTN","IBCNEDE3",157,0)
 .. ;
"RTN","IBCNEDE3",158,0)
 .. I $P(RESULT,U)'="" D BUFF Q    ; error encountered
"RTN","IBCNEDE3",159,0)
 .. ;
"RTN","IBCNEDE3",160,0)
 .. S PAYER=$P(RESULT,U,2),PAYERID=$P(RESULT,U,3) ; Payer IEN & Payer ID
"RTN","IBCNEDE3",161,0)
 .. I 'PAYER!(PAYERID="") Q
"RTN","IBCNEDE3",162,0)
 .. I '$$PYRACTV^IBCNEDE7(PAYER) Q        ; Payer is not nationally active
"RTN","IBCNEDE3",163,0)
 .. ;
"RTN","IBCNEDE3",164,0)
 .. ; set patient id field   IB*2*416
"RTN","IBCNEDE3",165,0)
 .. S PATID=$P($G(VINS(VI,5)),U,1)    ; 5.01 field in pt. ins.
"RTN","IBCNEDE3",166,0)
 .. ;
"RTN","IBCNEDE3",167,0)
 .. ; Update service date and freshness date based on payer allowed
"RTN","IBCNEDE3",168,0)
 .. ;  date range
"RTN","IBCNEDE3",169,0)
 .. D UPDDTS^IBCNEDE6(PAYER,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE3",170,0)
 .. ;
"RTN","IBCNEDE3",171,0)
 .. ; Update service dates for inquiries to be transmitted
"RTN","IBCNEDE3",172,0)
 .. D TQUPDSV^IBCNEUT5(DFN,PAYER,SRVICEDT)
"RTN","IBCNEDE3",173,0)
 .. ;
"RTN","IBCNEDE3",174,0)
 .. ; Check for outstanding/current entries in File 365.1
"RTN","IBCNEDE3",175,0)
 .. I '$$ADDTQ^IBCNEUT5(DFN,PAYER,SRVICEDT,YDAYS) Q
"RTN","IBCNEDE3",176,0)
 .. K SIDARRAY
"RTN","IBCNEDE3",177,0)
 .. S SIDDATA=$$SIDCHK^IBCNEDE5(PAYER,DFN,,.SIDARRAY,FRESHDT)
"RTN","IBCNEDE3",178,0)
 .. S SIDACT=$P(SIDDATA,U),SIDCNT=$P(SIDDATA,U,2)
"RTN","IBCNEDE3",179,0)
 .. ;
"RTN","IBCNEDE3",180,0)
 .. I SIDACT=3 D  Q
"RTN","IBCNEDE3",181,0)
 ... I 'SUPPBUFF,'$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,VI,18,"",1)
"RTN","IBCNEDE3",182,0)
 .. ;
"RTN","IBCNEDE3",183,0)
 .. I IBCNECNT+SIDCNT>MAXCNT S IBCNECNT=MAXCNT Q  ;quit if TQ entries>MAXCNT
"RTN","IBCNEDE3",184,0)
 .. S SID=""
"RTN","IBCNEDE3",185,0)
 .. F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D:$P(SID,"_")'="" SET($P(SID,"_"),$P(SID,"_",2),PATID) S:INSNAME["MEDICARE" MCAREFLG=1
"RTN","IBCNEDE3",186,0)
 .. I SIDACT=4 D SET("","",PATID) S:INSNAME["MEDICARE" MCAREFLG=1
"RTN","IBCNEDE3",187,0)
 Q
"RTN","IBCNEDE3",188,0)
 ;
"RTN","IBCNEDE3",189,0)
SET(SID,INR,PATID) ; Call function to set IIV TRANSMISSION QUEUE file #365.1
"RTN","IBCNEDE3",190,0)
 NEW DATA1,DATA2,TQIEN
"RTN","IBCNEDE3",191,0)
 ;
"RTN","IBCNEDE3",192,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE3",193,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE3",194,0)
 S DATA1=DFN_U_PAYER_U_1_U_""_U_SID_U_FRESHDT
"RTN","IBCNEDE3",195,0)
 S $P(DATA1,U,8)=PATID     ; IB*2*416
"RTN","IBCNEDE3",196,0)
 ;
"RTN","IBCNEDE3",197,0)
 ; The hardcoded '3' in the 1st piece of DATA2 is the value to tell
"RTN","IBCNEDE3",198,0)
 ; the file 365.1 that it is the non-verified extract.
"RTN","IBCNEDE3",199,0)
 S DATA2=3_U_"V"_U_SRVICEDT_U_INR
"RTN","IBCNEDE3",200,0)
 ;
"RTN","IBCNEDE3",201,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2)
"RTN","IBCNEDE3",202,0)
 I TQIEN'="" S IBCNECNT=IBCNECNT+1
"RTN","IBCNEDE3",203,0)
 ;
"RTN","IBCNEDE3",204,0)
 Q
"RTN","IBCNEDE3",205,0)
BUFF ; Create new buffer entry, if one doesn't already exist, with a 
"RTN","IBCNEDE3",206,0)
 ; bang symbol
"RTN","IBCNEDE3",207,0)
 I SUPPBUFF Q   ; determine if we suppress buffer entries
"RTN","IBCNEDE3",208,0)
 I '$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,VI,$P(RESULT,U),"",1)
"RTN","IBCNEDE3",209,0)
 Q
"RTN","IBCNEDE3",210,0)
 ;
"RTN","IBCNEDE4")
0^48^B81971988^B79553596
"RTN","IBCNEDE4",1,0)
IBCNEDE4 ;DAOU/ALA - NO INSURANCE DATA EXTRACT ;24-JUN-2002
"RTN","IBCNEDE4",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416**;21-MAR-94;Build 58
"RTN","IBCNEDE4",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDE4",4,0)
 ;
"RTN","IBCNEDE4",5,0)
 ; ***** Note *****
"RTN","IBCNEDE4",6,0)
 ; IB*2*416 removed the ability to perform Identification inquiries.
"RTN","IBCNEDE4",7,0)
 ; However, this code is being left as is for future changes.
"RTN","IBCNEDE4",8,0)
 ; But this routine is no longer called from IBCNEDE.
"RTN","IBCNEDE4",9,0)
 ;
"RTN","IBCNEDE4",10,0)
 ;**Program Description**
"RTN","IBCNEDE4",11,0)
 ;  This program finds veterans who have been seen within a
"RTN","IBCNEDE4",12,0)
 ;  specified date range but who have no active or no
"RTN","IBCNEDE4",13,0)
 ;  insurance records
"RTN","IBCNEDE4",14,0)
 ;  Periodically check for stop request for background task
"RTN","IBCNEDE4",15,0)
 ;
"RTN","IBCNEDE4",16,0)
 Q   ;can't call directly
"RTN","IBCNEDE4",17,0)
 ;
"RTN","IBCNEDE4",18,0)
EN ;
"RTN","IBCNEDE4",19,0)
 NEW TMPCNT,IEN,TQIEN,DATA1,DATA2,EACTIVE,XDAYS,YDAYS,MAXCNT,IBBDT,IBEDT
"RTN","IBCNEDE4",20,0)
 NEW IBD,IBPM,IBPMD,IBQUERY,IBCNCNT,SRVICEDT,IBINS,IBDD,IBDDI,DFN
"RTN","IBCNEDE4",21,0)
 NEW IBOUTP,PTN,PAYER,FOUND1,FOUND2,DFN,DISYS,TDT,IBCNETOT,FRESH,FRESHDT
"RTN","IBCNEDE4",22,0)
 NEW DGPMDT,AUPNDT
"RTN","IBCNEDE4",23,0)
 ;
"RTN","IBCNEDE4",24,0)
 S IBCNCNT=0
"RTN","IBCNEDE4",25,0)
 ; Initialize count for periodic TaskMan check
"RTN","IBCNEDE4",26,0)
 S IBCNETOT=0
"RTN","IBCNEDE4",27,0)
 ;
"RTN","IBCNEDE4",28,0)
 ;  Get Extract parameters
"RTN","IBCNEDE4",29,0)
 S EACTIVE=$$SETTINGS^IBCNEDE7(4)
"RTN","IBCNEDE4",30,0)
 I 'EACTIVE Q                   ; quit if not active
"RTN","IBCNEDE4",31,0)
 S XDAYS=$P(EACTIVE,U,2)
"RTN","IBCNEDE4",32,0)
 S YDAYS=$P(EACTIVE,U,3)
"RTN","IBCNEDE4",33,0)
 S MAXCNT=$P(EACTIVE,U,4)
"RTN","IBCNEDE4",34,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNEDE4",35,0)
 ;
"RTN","IBCNEDE4",36,0)
 ;  Check for Date Last Treated and get DFN's
"RTN","IBCNEDE4",37,0)
 S IBBDT=$$FMADD^XLFDT(DT,-XDAYS),IBEDT=DT
"RTN","IBCNEDE4",38,0)
 ;
"RTN","IBCNEDE4",39,0)
 ; * Main Control
"RTN","IBCNEDE4",40,0)
 ;
"RTN","IBCNEDE4",41,0)
 S IBD=IBBDT-.0001
"RTN","IBCNEDE4",42,0)
 K ^TMP("IBCNEDE4",$J,"PTS")
"RTN","IBCNEDE4",43,0)
 F II=1:1 D  Q:(IBD="")!(IBD\1>IBEDT)!(IBCNCNT'<MAXCNT)!($G(ZTSTOP))
"RTN","IBCNEDE4",44,0)
 . S DGPMDT=$O(^DGPM("ATT3",IBD)),AUPNDT=$O(^AUPNVSIT("B",IBD))
"RTN","IBCNEDE4",45,0)
 . I (AUPNDT="")!((DGPMDT\1)<(AUPNDT\1)) S IBD=DGPMDT
"RTN","IBCNEDE4",46,0)
 . I (DGPMDT="")!((DGPMDT\1)>(AUPNDT\1)) S IBD=AUPNDT
"RTN","IBCNEDE4",47,0)
 . I (IBD\1>IBEDT)!(IBD="") Q
"RTN","IBCNEDE4",48,0)
 . ;
"RTN","IBCNEDE4",49,0)
 . K ^TMP("IBJDI51",$J)
"RTN","IBCNEDE4",50,0)
 . D INP(IBD)    ; sets up ^TMP("IBJDI51",$J)
"RTN","IBCNEDE4",51,0)
 . I $G(ZTSTOP) Q
"RTN","IBCNEDE4",52,0)
 . D OUTP(IBD)
"RTN","IBCNEDE4",53,0)
 . I $G(ZTSTOP) Q
"RTN","IBCNEDE4",54,0)
 . D REST(IBBDT-.0001,IBEDT)
"RTN","IBCNEDE4",55,0)
 . D PROCESS
"RTN","IBCNEDE4",56,0)
 . I $G(ZTSTOP) Q
"RTN","IBCNEDE4",57,0)
 . S IBD=($$FMADD^XLFDT(IBD,+1))-.0001
"RTN","IBCNEDE4",58,0)
 ;
"RTN","IBCNEDE4",59,0)
EXIT ;
"RTN","IBCNEDE4",60,0)
 K VINS,^TMP("IBJDI51",$J),^TMP("IBCNEDE4",$J,"PTS")   ; clean up
"RTN","IBCNEDE4",61,0)
 ;
"RTN","IBCNEDE4",62,0)
 Q
"RTN","IBCNEDE4",63,0)
 ; * end of routine processing
"RTN","IBCNEDE4",64,0)
 ;============================
"RTN","IBCNEDE4",65,0)
 ;
"RTN","IBCNEDE4",66,0)
INP(DATE) ;  Find inpatients for that date (we want most recent encounter)
"RTN","IBCNEDE4",67,0)
 NEW IBD,IBPM,IBPMD,DFN
"RTN","IBCNEDE4",68,0)
 S IBD=DATE-.0001
"RTN","IBCNEDE4",69,0)
 F  S IBD=$O(^DGPM("ATT3",IBD)) Q:(IBD="")!(IBD\1>DATE)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE4",70,0)
 . S IBPM=0 F  S IBPM=$O(^DGPM("ATT3",IBD,IBPM)) Q:IBPM=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE4",71,0)
 .. ; Update count for periodic check
"RTN","IBCNEDE4",72,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE4",73,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDE4",74,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE4",75,0)
 .. ;
"RTN","IBCNEDE4",76,0)
 .. S IBPMD=$G(^DGPM(IBPM,0)) Q:'IBPMD
"RTN","IBCNEDE4",77,0)
 .. S DFN=+$P(IBPMD,U,3) Q:'DFN
"RTN","IBCNEDE4",78,0)
 .. I $P($G(^DPT(DFN,0)),U,21) Q         ; Exclude if test patient
"RTN","IBCNEDE4",79,0)
 .. Q:$D(^TMP("IBCNEDE4",$J,"PTS",DFN,"INP"))      ; already processed
"RTN","IBCNEDE4",80,0)
 .. S ^TMP("IBCNEDE4",$J,"PTS",DFN,"INP",IBD)=""
"RTN","IBCNEDE4",81,0)
 .. D PROC^IBJDI5(DFN,"*",IBD)
"RTN","IBCNEDE4",82,0)
 Q
"RTN","IBCNEDE4",83,0)
 ;
"RTN","IBCNEDE4",84,0)
OUTP(DATE) ; Find outpatients treated for this date (most recent encounter)
"RTN","IBCNEDE4",85,0)
 NEW IBD,IEN,DFN
"RTN","IBCNEDE4",86,0)
 S IBD=DATE-.000001
"RTN","IBCNEDE4",87,0)
 F  S IBD=$O(^AUPNVSIT("B",IBD)) Q:(IBD="")!(IBD\1>DATE)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE4",88,0)
 . S IEN=""
"RTN","IBCNEDE4",89,0)
 . F  S IEN=$O(^AUPNVSIT("B",IBD,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE4",90,0)
 .. ; Update count for periodic check
"RTN","IBCNEDE4",91,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE4",92,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDE4",93,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE4",94,0)
 .. ;
"RTN","IBCNEDE4",95,0)
 .. S DFN=$P($G(^AUPNVSIT(IEN,0)),U,5)
"RTN","IBCNEDE4",96,0)
 .. Q:DFN=""
"RTN","IBCNEDE4",97,0)
 .. I $P($G(^DPT(DFN,0)),U,21) Q         ; Exclude if test patient
"RTN","IBCNEDE4",98,0)
 .. Q:$D(^TMP("IBCNEDE4",$J,"PTS",DFN,"OUTP"))    ; already processed
"RTN","IBCNEDE4",99,0)
 .. S ^TMP("IBCNEDE4",$J,"PTS",DFN,"OUTP",IBD)=""
"RTN","IBCNEDE4",100,0)
 .. ; Capture the most recent (last) encounter date
"RTN","IBCNEDE4",101,0)
 .. I $G(^TMP("IBJDI51",$J,DFN))<(IBD\1) D PROC^IBJDI5(DFN,"",IBD)
"RTN","IBCNEDE4",102,0)
 Q
"RTN","IBCNEDE4",103,0)
 ;
"RTN","IBCNEDE4",104,0)
REST(STARTDT,ENDDT) ; Check for a more recent encounter (inpat. or outpat.)
"RTN","IBCNEDE4",105,0)
 ;
"RTN","IBCNEDE4",106,0)
 NEW IBPM,IBPMD,IBD,DFN
"RTN","IBCNEDE4",107,0)
 S DFN=0
"RTN","IBCNEDE4",108,0)
 F  S DFN=$O(^TMP("IBJDI51",$J,DFN)) Q:DFN=""  D
"RTN","IBCNEDE4",109,0)
 . ;
"RTN","IBCNEDE4",110,0)
 . ; inpatients
"RTN","IBCNEDE4",111,0)
 . S IBPM=0 F  S IBPM=$O(^DGPM("C",DFN,IBPM)) Q:IBPM=""  D
"RTN","IBCNEDE4",112,0)
 .. S IBPMD=$G(^DGPM(IBPM,0)) Q:'IBPMD
"RTN","IBCNEDE4",113,0)
 .. S IBD=$P(IBPMD,U,1) I ((IBD\1)<STARTDT)!((IBD\1)>ENDDT) Q
"RTN","IBCNEDE4",114,0)
 .. Q:$D(^TMP("IBJDI51",$J,"PTS",DFN,"INP",IBD))  ;already checked
"RTN","IBCNEDE4",115,0)
 .. S ^TMP("IBJDI51",$J,"PTS",DFN,"INP",IBD)=""
"RTN","IBCNEDE4",116,0)
 .. ; Capture the most recent (last) encounter date
"RTN","IBCNEDE4",117,0)
 .. I $G(^TMP("IBJDI51",$J,DFN))<(IBD\1) D PROC^IBJDI5(DFN,"*",IBD)
"RTN","IBCNEDE4",118,0)
 . ;
"RTN","IBCNEDE4",119,0)
 . ; outpatients
"RTN","IBCNEDE4",120,0)
 . S IBD="" F  S IBD=$O(^AUPNVSIT("AA",DFN,IBD)) Q:IBD=""  D
"RTN","IBCNEDE4",121,0)
 .. I ((IBD\1)<STARTDT)!((IBD\1)>ENDDT) Q
"RTN","IBCNEDE4",122,0)
 .. Q:$D(^TMP("IBJDI51",$J,"PTS",DFN,"OUTP",IBD))  ;already checked
"RTN","IBCNEDE4",123,0)
 .. S ^TMP("IBJDI51",$J,"PTS",DFN,"OUTP",IBD)=""
"RTN","IBCNEDE4",124,0)
 .. ; Capture the most recent (last) encounter date
"RTN","IBCNEDE4",125,0)
 .. I $G(^TMP("IBJDI51",$J,DFN))<(IBD\1) D PROC^IBJDI5(DFN,"",IBD)
"RTN","IBCNEDE4",126,0)
 ;
"RTN","IBCNEDE4",127,0)
 Q
"RTN","IBCNEDE4",128,0)
 ;
"RTN","IBCNEDE4",129,0)
PROCESS ;  Check selection criteria for each person with
"RTN","IBCNEDE4",130,0)
 ;  a visit in the last defined time frame (e.g. 6 months)
"RTN","IBCNEDE4",131,0)
 N SVIBDDI
"RTN","IBCNEDE4",132,0)
 S DFN=0 F  S DFN=$O(^TMP("IBJDI51",$J,DFN)) Q:'DFN  D  Q:IBCNCNT'<MAXCNT!$G(ZTSTOP)
"RTN","IBCNEDE4",133,0)
 . ;
"RTN","IBCNEDE4",134,0)
 . ; Update count for periodic check
"RTN","IBCNEDE4",135,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE4",136,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDE4",137,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE4",138,0)
 . ;
"RTN","IBCNEDE4",139,0)
 . S SRVICEDT=$P(^TMP("IBJDI51",$J,DFN),U)
"RTN","IBCNEDE4",140,0)
 . S FRESHDT=$$FMADD^XLFDT(SRVICEDT,YDAYS)
"RTN","IBCNEDE4",141,0)
 . ;
"RTN","IBCNEDE4",142,0)
 . ; Call IB utility to search for patient's inactive insurance
"RTN","IBCNEDE4",143,0)
 . ; IBCNS passes back IBINS = 1 if active insurance was found
"RTN","IBCNEDE4",144,0)
 . ; IBCNS sets the array IBDD to the patient's valid insurance
"RTN","IBCNEDE4",145,0)
 . ; IBCNS sets the array IBDDI to the patient's invalid insurance
"RTN","IBCNEDE4",146,0)
 . ;
"RTN","IBCNEDE4",147,0)
 . K IBINS,IBDD,IBDDI,SVIBDDI
"RTN","IBCNEDE4",148,0)
 . S IBOUTP=2
"RTN","IBCNEDE4",149,0)
 . D ^IBCNS
"RTN","IBCNEDE4",150,0)
 . K IBDD           ; don't need this array
"RTN","IBCNEDE4",151,0)
 . I $G(IBINS)=1 Q  ; if active insurance was found quit
"RTN","IBCNEDE4",152,0)
 . M SVIBDDI=IBDDI
"RTN","IBCNEDE4",153,0)
 . ;
"RTN","IBCNEDE4",154,0)
 . S (FOUND1,FOUND2)=0
"RTN","IBCNEDE4",155,0)
 . ;
"RTN","IBCNEDE4",156,0)
 . ; Returned all inactive insurances in IBDDI array
"RTN","IBCNEDE4",157,0)
 . I $D(IBDDI)>0,(IBCNCNT<MAXCNT) S FOUND2=$$INAC^IBCNEDE6(.IBCNCNT,MAXCNT,.IBDDI,SRVICEDT,YDAYS)
"RTN","IBCNEDE4",158,0)
 . M IBDDI=SVIBDDI
"RTN","IBCNEDE4",159,0)
 . ;
"RTN","IBCNEDE4",160,0)
 . ;  If no inactive insurances, work the popular insurances
"RTN","IBCNEDE4",161,0)
 . I IBCNCNT<MAXCNT S FOUND1=$$POP(.IBCNCNT,MAXCNT,SRVICEDT,YDAYS,,.IBDDI)
"RTN","IBCNEDE4",162,0)
 . ;
"RTN","IBCNEDE4",163,0)
 . I 'FOUND1,'FOUND2,(IBCNCNT<MAXCNT) D BLANKTQ^IBCNEDE6(SRVICEDT,FRESHDT,YDAYS,.IBCNCNT)
"RTN","IBCNEDE4",164,0)
 K ^TMP("IBJDI51",$J),IBDD,IBDDI,IBINS
"RTN","IBCNEDE4",165,0)
 Q
"RTN","IBCNEDE4",166,0)
 ;
"RTN","IBCNEDE4",167,0)
POP(IBCNCNT,MAXCNT,SRVICEDT,FDAYS,APPTFLG,IBDDI) ; Get Popular Insurances
"RTN","IBCNEDE4",168,0)
 ; FDAYS (Fresh Days value)
"RTN","IBCNEDE4",169,0)
 ; APPTFLG - Appt extract flag ONLY set from IBCNEDE2 - optional 0/1
"RTN","IBCNEDE4",170,0)
 ;
"RTN","IBCNEDE4",171,0)
 NEW PDATA,POPFL,PNUM,PCNT,II,RESULT,PAYER,PAYERID
"RTN","IBCNEDE4",172,0)
 NEW DATA1,DATA2,TQIEN,FOUND,SIDARRAY,SID,SIDACT,SIDCNT
"RTN","IBCNEDE4",173,0)
 NEW FRESHDT,INACT,SKIPPAY
"RTN","IBCNEDE4",174,0)
 ;
"RTN","IBCNEDE4",175,0)
 ; Need FOUND to avoid the creation of a no payer inquiry the day after
"RTN","IBCNEDE4",176,0)
 ; the original inquiry for pre-reg (appt) extract and no insurance
"RTN","IBCNEDE4",177,0)
 ; extract was created.
"RTN","IBCNEDE4",178,0)
 S FOUND=0 ; set flag to 1 if potential inquiry was found
"RTN","IBCNEDE4",179,0)
 ;
"RTN","IBCNEDE4",180,0)
 S APPTFLG=$G(APPTFLG)
"RTN","IBCNEDE4",181,0)
 S PDATA=$G(^IBE(350.9,1,51))
"RTN","IBCNEDE4",182,0)
 S POPFL=$P(PDATA,U,9),PNUM=$P(PDATA,U,10)
"RTN","IBCNEDE4",183,0)
 S INACT=$P(PDATA,U,8)   ; get inactive flag from site parameters
"RTN","IBCNEDE4",184,0)
 ;
"RTN","IBCNEDE4",185,0)
 ;  If the search for popular insurances is 'No', quit
"RTN","IBCNEDE4",186,0)
 I 'POPFL G POPX
"RTN","IBCNEDE4",187,0)
 ;
"RTN","IBCNEDE4",188,0)
 ; If the site does not check inactive insurances and the patient
"RTN","IBCNEDE4",189,0)
 ; has inactive insurances, set up the array of payers to skip.
"RTN","IBCNEDE4",190,0)
 ; This will be used to screen the patient's inactive payers from being
"RTN","IBCNEDE4",191,0)
 ; included with the most popular payers. 
"RTN","IBCNEDE4",192,0)
 I 'INACT,$D(IBDDI) D
"RTN","IBCNEDE4",193,0)
 . N INCP,INSPAYID
"RTN","IBCNEDE4",194,0)
 . S INCP="" F  S INCP=$O(IBDDI(INCP)) Q:'INCP  D
"RTN","IBCNEDE4",195,0)
 .. S RESULT=$$INSERROR^IBCNEUT3("I",INCP)
"RTN","IBCNEDE4",196,0)
 .. Q:$P(RESULT,U)'=""
"RTN","IBCNEDE4",197,0)
 .. S INSPAYID=$P(RESULT,U,3)
"RTN","IBCNEDE4",198,0)
 .. I INSPAYID="" Q
"RTN","IBCNEDE4",199,0)
 .. S SKIPPAY(INSPAYID)=""
"RTN","IBCNEDE4",200,0)
 ;
"RTN","IBCNEDE4",201,0)
 S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FDAYS)
"RTN","IBCNEDE4",202,0)
 ;
"RTN","IBCNEDE4",203,0)
 ;  If no list of popular insurances, quit
"RTN","IBCNEDE4",204,0)
 I $O(^IBE(350.9,1,51.18,0))="" G POPX
"RTN","IBCNEDE4",205,0)
 S II=0 F PCNT=1:1:PNUM S II=$O(^IBE(350.9,1,51.18,II)) Q:'II  D  Q:IBCNCNT'<MAXCNT
"RTN","IBCNEDE4",206,0)
 . S PAYER=$P(^IBE(350.9,1,51.18,II,0),U,1)
"RTN","IBCNEDE4",207,0)
 . ;
"RTN","IBCNEDE4",208,0)
 . S RESULT=$$PAYER^IBCNEUT4(PAYER)
"RTN","IBCNEDE4",209,0)
 . I $P(RESULT,U)'="" Q   ; quit if error, don't record in ins. buffer
"RTN","IBCNEDE4",210,0)
 . ; PAYERID = National ID
"RTN","IBCNEDE4",211,0)
 . S PAYERID=$P(RESULT,U,2)
"RTN","IBCNEDE4",212,0)
 . I PAYERID="" Q
"RTN","IBCNEDE4",213,0)
 . ;
"RTN","IBCNEDE4",214,0)
 . I $D(SKIPPAY(PAYERID)) Q  ; quit if it was determined that this payer be skipped
"RTN","IBCNEDE4",215,0)
 . ;
"RTN","IBCNEDE4",216,0)
 . S FOUND=1  ; potential inquiry
"RTN","IBCNEDE4",217,0)
 . ;
"RTN","IBCNEDE4",218,0)
 . ; Update service date and freshness date based on payer allowed
"RTN","IBCNEDE4",219,0)
 . ;  date range
"RTN","IBCNEDE4",220,0)
 . D UPDDTS^IBCNEDE6(PAYER,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE4",221,0)
 . ;
"RTN","IBCNEDE4",222,0)
 . ; DAOU/BHS - Update service dates for inquiries to be transmitted
"RTN","IBCNEDE4",223,0)
 . D TQUPDSV^IBCNEUT5(DFN,PAYER,SRVICEDT)
"RTN","IBCNEDE4",224,0)
 . ;
"RTN","IBCNEDE4",225,0)
 . ;check for outstanding/current entries in File 356.1
"RTN","IBCNEDE4",226,0)
 . ; Freshness check - are we allowed to add this entry to the TQ file
"RTN","IBCNEDE4",227,0)
 . I '$$ADDTQ^IBCNEUT5(DFN,PAYER,SRVICEDT,FDAYS) Q
"RTN","IBCNEDE4",228,0)
 . ;
"RTN","IBCNEDE4",229,0)
 . ; Call function to set IIV TRANSMISSION QUEUE file #365.1
"RTN","IBCNEDE4",230,0)
 . ;
"RTN","IBCNEDE4",231,0)
 . K SIDARRAY
"RTN","IBCNEDE4",232,0)
 . S SIDACT=$$SIDCHK2^IBCNEDE5(DFN,PAYER,.SIDARRAY,FRESHDT)
"RTN","IBCNEDE4",233,0)
 . S SIDCNT=$P(SIDACT,U,2),SIDACT=$P(SIDACT,U)
"RTN","IBCNEDE4",234,0)
 . ;  Add to TQ to compensate for TQ w/ blank Sub ID
"RTN","IBCNEDE4",235,0)
 . I SIDACT'<5,(SIDACT'>8) S SIDCNT=SIDCNT+1
"RTN","IBCNEDE4",236,0)
 . I IBCNCNT+SIDCNT>MAXCNT S IBCNCNT=MAXCNT Q     ; see if TQ entries will exceed MAXCNT
"RTN","IBCNEDE4",237,0)
 . S SID=""
"RTN","IBCNEDE4",238,0)
 . F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D POPSET($P(SID,"_"),$P(SID,"_",2))
"RTN","IBCNEDE4",239,0)
 . ;
"RTN","IBCNEDE4",240,0)
 . ; Create TQ entry w/ blank Sub ID
"RTN","IBCNEDE4",241,0)
 . I SIDACT=5!(SIDACT=6)!(SIDACT=7)!(SIDACT=8) S SID="" D POPSET("","") ;D POPSET()
"RTN","IBCNEDE4",242,0)
POPX ; POP exit point
"RTN","IBCNEDE4",243,0)
 Q FOUND
"RTN","IBCNEDE4",244,0)
 ;
"RTN","IBCNEDE4",245,0)
POPSET(SID,INREC) ;
"RTN","IBCNEDE4",246,0)
 N FRESH
"RTN","IBCNEDE4",247,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE4",248,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE4",249,0)
 S FRESH=$$FMADD^XLFDT(SRVICEDT,-FDAYS)
"RTN","IBCNEDE4",250,0)
 S DATA1=DFN_U_PAYER_U_1_U_""_U_SID_U_FRESH
"RTN","IBCNEDE4",251,0)
 ;
"RTN","IBCNEDE4",252,0)
 ; The hardcoded 1st piece of DATA2 tells file 365.1 which extract
"RTN","IBCNEDE4",253,0)
 ; it is.
"RTN","IBCNEDE4",254,0)
 I APPTFLG S DATA2=2  ; appt extract IBCNEDE2
"RTN","IBCNEDE4",255,0)
 I 'APPTFLG S DATA2=4 ; no ins extract IBCNEDE4
"RTN","IBCNEDE4",256,0)
 S DATA2=DATA2_U_"I"_U_SRVICEDT_U_$G(INREC)
"RTN","IBCNEDE4",257,0)
 ;
"RTN","IBCNEDE4",258,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2)
"RTN","IBCNEDE4",259,0)
 I TQIEN'="" S IBCNCNT=IBCNCNT+1
"RTN","IBCNEDE4",260,0)
 ;
"RTN","IBCNEDE4",261,0)
 Q
"RTN","IBCNEDE4",262,0)
 ;
"RTN","IBCNEDE5")
0^45^B26929333^B30882453
"RTN","IBCNEDE5",1,0)
IBCNEDE5 ;DAOU/DAC - eIV DATA EXTRACTS ;15-OCT-2002
"RTN","IBCNEDE5",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416**;21-MAR-94;Build 58
"RTN","IBCNEDE5",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDE5",4,0)
 ;
"RTN","IBCNEDE5",5,0)
 Q    ; no direct calls allowed
"RTN","IBCNEDE5",6,0)
 ;
"RTN","IBCNEDE5",7,0)
SIDCHK(PIEN,DFN,BSID,SIDARRAY,FRESHDT) ; Checks the flag setting of
"RTN","IBCNEDE5",8,0)
 ; 'Identification Requires Subscriber ID'. The function returns a "^"
"RTN","IBCNEDE5",9,0)
 ; delimited string.  The first value is between 1 and 5 telling the
"RTN","IBCNEDE5",10,0)
 ; calling program what action(s) it should perform. The 2nd piece
"RTN","IBCNEDE5",11,0)
 ; indicates the Subcriber ID that the calling program should use for
"RTN","IBCNEDE5",12,0)
 ; setting the Subscriber IDs in the eIV Transmission Queue file (365.1).
"RTN","IBCNEDE5",13,0)
 ; The calling program is to address the blank Sub IDs.
"RTN","IBCNEDE5",14,0)
 ;
"RTN","IBCNEDE5",15,0)
 ; PIEN - Payer's IEN (file 365.12)
"RTN","IBCNEDE5",16,0)
 ; DFN - Patient's IEN (file 2)
"RTN","IBCNEDE5",17,0)
 ; INREC - Insurance IEN of Patients record (subfile 2.312)
"RTN","IBCNEDE5",18,0)
 ; BSID - Subscriber ID from buffer file (file 355.33 field 60.04)
"RTN","IBCNEDE5",19,0)
 ; SIDARRAY - Array of active subscribers
"RTN","IBCNEDE5",20,0)
 ; FRESHDT - Freshness Date - used for checking verified date
"RTN","IBCNEDE5",21,0)
 ;
"RTN","IBCNEDE5",22,0)
 ; Logic to follow:
"RTN","IBCNEDE5",23,0)
 ;
"RTN","IBCNEDE5",24,0)
 ; Id. Req.| Sub ID|Action|
"RTN","IBCNEDE5",25,0)
 ;  Sub ID | found |  #   | Create
"RTN","IBCNEDE5",26,0)
 ; ________|_______|______|________
"RTN","IBCNEDE5",27,0)
 ; YES        YES     1     1 Verification TQ entry w/ Sub ID
"RTN","IBCNEDE5",28,0)
 ; YES        NO      3     new buffer entry or modify existing saying manual verification required
"RTN","IBCNEDE5",29,0)
 ; NO         NO      4     1 Ver. TQ entry w/ blank Sub ID
"RTN","IBCNEDE5",30,0)
 ;
"RTN","IBCNEDE5",31,0)
 N SIDACT,SID,APPIEN,SIDSTR,SIDREQ
"RTN","IBCNEDE5",32,0)
 N INSSTR,INSSTR1,SYMBOL,EXP,SUBID,SUBIDS,SIDCNT,INREC,MVER,VFLG,MCRTQ
"RTN","IBCNEDE5",33,0)
 ;
"RTN","IBCNEDE5",34,0)
 S FRESHDT=$G(FRESHDT),VFLG=0
"RTN","IBCNEDE5",35,0)
 ;
"RTN","IBCNEDE5",36,0)
 ; if the subscriber ID from the buffer extract exists, this is the only entry
"RTN","IBCNEDE5",37,0)
 I $G(BSID)'="" D  G SIDCHKX
"RTN","IBCNEDE5",38,0)
 . S SID=BSID,(SIDACT,SIDCNT)=1
"RTN","IBCNEDE5",39,0)
 . S SIDARRAY($$STRIP(SID,,DFN)_"_")=""
"RTN","IBCNEDE5",40,0)
 . Q
"RTN","IBCNEDE5",41,0)
 ;
"RTN","IBCNEDE5",42,0)
 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNEDE5",43,0)
 S SIDSTR=$G(^IBE(365.12,PIEN,1,APPIEN,0))
"RTN","IBCNEDE5",44,0)
 S SIDREQ=$P(SIDSTR,U,8)
"RTN","IBCNEDE5",45,0)
 ;
"RTN","IBCNEDE5",46,0)
 S INSSTR="",SIDCNT=0,INREC=$O(^DPT(DFN,.312,0)),MCRTQ=0 S:'INREC INREC=1
"RTN","IBCNEDE5",47,0)
 ;
"RTN","IBCNEDE5",48,0)
 I $D(BSID),BSID="" G SIDC1
"RTN","IBCNEDE5",49,0)
 ;
"RTN","IBCNEDE5",50,0)
 I $G(^DPT(DFN,.312,INREC,0)) F  D  Q:'INREC
"RTN","IBCNEDE5",51,0)
 . S INSSTR=$G(^DPT(DFN,.312,INREC,0))
"RTN","IBCNEDE5",52,0)
 . S INSSTR1=$G(^DPT(DFN,.312,INREC,1))
"RTN","IBCNEDE5",53,0)
 . S SYMBOL=$$INSERROR^IBCNEUT3("I",+INSSTR)
"RTN","IBCNEDE5",54,0)
 . I $P(SYMBOL,U)="" D            ; no eIV related error w/ ins. company
"RTN","IBCNEDE5",55,0)
 .. N MCRPYR
"RTN","IBCNEDE5",56,0)
 .. I PIEN'=$P(SYMBOL,U,2) Q      ; wrong payer ien
"RTN","IBCNEDE5",57,0)
 .. ;
"RTN","IBCNEDE5",58,0)
 .. S MCRPYR=0                                           ; Medicare payer flag
"RTN","IBCNEDE5",59,0)
 .. I PIEN=+$P($G(^IBE(350.9,1,51)),U,25) S MCRPYR=1     ; this is the Medicare payer
"RTN","IBCNEDE5",60,0)
 .. I MCRPYR,MCRTQ Q      ; the Medicare payer is already in the array
"RTN","IBCNEDE5",61,0)
 .. ;
"RTN","IBCNEDE5",62,0)
 .. S SUBID=$P(INSSTR,U,2)
"RTN","IBCNEDE5",63,0)
 .. I SUBID="" Q                           ; missing Subscriber ID
"RTN","IBCNEDE5",64,0)
 .. I $P(INSSTR,U,8)>DT Q                  ; future effective date
"RTN","IBCNEDE5",65,0)
 .. S EXP=$P(INSSTR,U,4) I EXP,EXP<DT Q    ; expired
"RTN","IBCNEDE5",66,0)
 .. S MVER=$P(INSSTR1,U,3)                 ; last verified date
"RTN","IBCNEDE5",67,0)
 .. I MVER'="",FRESHDT'="",MVER>FRESHDT S VFLG=1 Q     ; verified recently
"RTN","IBCNEDE5",68,0)
 .. S SUBIDS=$$STRIP(SUBID,,DFN)
"RTN","IBCNEDE5",69,0)
 .. I $D(SIDARRAY(SUBIDS_"_"_INREC)) Q            ; already in the array
"RTN","IBCNEDE5",70,0)
 .. S SIDARRAY(SUBIDS_"_"_INREC)="",SIDCNT=SIDCNT+1
"RTN","IBCNEDE5",71,0)
 .. I MCRPYR S MCRTQ=1     ; flag indicating Medicare payer is in the array
"RTN","IBCNEDE5",72,0)
 .. Q
"RTN","IBCNEDE5",73,0)
 . ;
"RTN","IBCNEDE5",74,0)
 . S INREC=$O(^DPT(DFN,.312,INREC))
"RTN","IBCNEDE5",75,0)
 . Q
"RTN","IBCNEDE5",76,0)
 ;
"RTN","IBCNEDE5",77,0)
 I SIDCNT S SIDACT=1 G SIDCHKX
"RTN","IBCNEDE5",78,0)
 I 'SIDCNT,VFLG S SIDACT=1 G SIDCHKX
"RTN","IBCNEDE5",79,0)
SIDC1 ;
"RTN","IBCNEDE5",80,0)
 S SIDACT=$S(SIDREQ:3,1:4)
"RTN","IBCNEDE5",81,0)
 ;
"RTN","IBCNEDE5",82,0)
SIDCHKX ; EXIT POINT
"RTN","IBCNEDE5",83,0)
 ;
"RTN","IBCNEDE5",84,0)
 Q SIDACT_U_SIDCNT
"RTN","IBCNEDE5",85,0)
 ;
"RTN","IBCNEDE5",86,0)
SSN(DFN) ; Get Patient SSN and update SIDARRAY, if needed
"RTN","IBCNEDE5",87,0)
 S SSN=$$GETSSN(DFN)
"RTN","IBCNEDE5",88,0)
 N SSNS
"RTN","IBCNEDE5",89,0)
 S SSNS=$$STRIP(SSN,1,DFN)
"RTN","IBCNEDE5",90,0)
 I $P($O(SIDARRAY(SSNS_"_")),"_")=SSNS Q
"RTN","IBCNEDE5",91,0)
 I SSNS'="",'$D(SIDARRAY(SSNS_"_")) S SIDARRAY(SSNS_"_")="",SIDCNT=SIDCNT+1
"RTN","IBCNEDE5",92,0)
 Q
"RTN","IBCNEDE5",93,0)
 ;
"RTN","IBCNEDE5",94,0)
GETSSN(DFN) ; Get Patient SSN
"RTN","IBCNEDE5",95,0)
 Q:'$G(DFN) ""
"RTN","IBCNEDE5",96,0)
 Q $P($G(^DPT(DFN,0)),U,9)
"RTN","IBCNEDE5",97,0)
 ;
"RTN","IBCNEDE5",98,0)
STRIP(ID,SS,DFN) ; Strip dashes and spaces if ssn
"RTN","IBCNEDE5",99,0)
 ;         ID can be ssn or subid
"RTN","IBCNEDE5",100,0)
 ;         if SS, ssn is being passed
"RTN","IBCNEDE5",101,0)
 N SSN,IDS,IDB
"RTN","IBCNEDE5",102,0)
 S SS=$G(SS)
"RTN","IBCNEDE5",103,0)
 ; If a ssn is passed, strip dashes and spaces
"RTN","IBCNEDE5",104,0)
 I SS Q $TR(ID,"- ")
"RTN","IBCNEDE5",105,0)
 ; If not ssn format, do not strip
"RTN","IBCNEDE5",106,0)
 S IDB=$TR(ID," ")
"RTN","IBCNEDE5",107,0)
 I IDB'?3N1"-"2N1"-"4N,IDB'?9N Q ID
"RTN","IBCNEDE5",108,0)
 ; Compare w/SSN - if it matches, strip dashes and spaces
"RTN","IBCNEDE5",109,0)
 S IDS=$TR(ID,"- ")
"RTN","IBCNEDE5",110,0)
 S SSN=$TR($$GETSSN(DFN),"- ")
"RTN","IBCNEDE5",111,0)
 I SSN=IDS Q IDS
"RTN","IBCNEDE5",112,0)
 Q ID
"RTN","IBCNEDE5",113,0)
 ;
"RTN","IBCNEDE5",114,0)
SIDCHK2(DFN,PIEN,SIDARRAY,FRESHDT) ;Checks the flag setting of 
"RTN","IBCNEDE5",115,0)
 ; 'Identification Requires Subscriber ID'. The function returns a "^"
"RTN","IBCNEDE5",116,0)
 ; delimited string.  The first value is between 1 and 8 telling the
"RTN","IBCNEDE5",117,0)
 ; calling program what action(s) it should perform.  The 2nd piece
"RTN","IBCNEDE5",118,0)
 ; indicates the number of unique Subscriber IDs found for the patient/payer
"RTN","IBCNEDE5",119,0)
 ; combo.  In addition, a local array of Subcriber IDs are passed back by
"RTN","IBCNEDE5",120,0)
 ; reference that the calling program should use for setting the Subscriber
"RTN","IBCNEDE5",121,0)
 ; IDs in eIV Transmission Queue file (#365.1).  The calling program is to
"RTN","IBCNEDE5",122,0)
 ; address the blank Sub IDs.
"RTN","IBCNEDE5",123,0)
 ;
"RTN","IBCNEDE5",124,0)
 ; PIEN - Payer's IEN (file 365.12)
"RTN","IBCNEDE5",125,0)
 ; DFN - Patient's IEN (file 2)
"RTN","IBCNEDE5",126,0)
 ; SIDARRAY - Local array passed by reference.  This function returns
"RTN","IBCNEDE5",127,0)
 ;            the array populated with the possible Subscriber IDs for
"RTN","IBCNEDE5",128,0)
 ;            that patient/payer combination.
"RTN","IBCNEDE5",129,0)
 ; FRESHDT - Freshness date used for checking last verified condition
"RTN","IBCNEDE5",130,0)
 ;
"RTN","IBCNEDE5",131,0)
 ; Logic to follow:
"RTN","IBCNEDE5",132,0)
 ;
"RTN","IBCNEDE5",133,0)
 ; Id. Req.| Sub ID|Action|
"RTN","IBCNEDE5",134,0)
 ;  Sub ID | found |  #   | Create
"RTN","IBCNEDE5",135,0)
 ; ________|_______|______|________
"RTN","IBCNEDE5",136,0)
 ; YES       YES     3     1 Iden. TQ entry for each unique old Sub ID
"RTN","IBCNEDE5",137,0)
 ; YES       NO      4     No TQ entries (may flag as error)
"RTN","IBCNEDE5",138,0)
 ; NO        YES     5     1 Iden. TQ entry w/ blank Sub ID, & 1 Iden. TQ entry for each unique old Sub ID
"RTN","IBCNEDE5",139,0)
 ; NO        NO      6     1 Iden. TQ entry w/ blank Sub ID
"RTN","IBCNEDE5",140,0)
 ;
"RTN","IBCNEDE5",141,0)
 N SIDACT,SID,APPIEN,SIDSTR,SIDREQ,INSSTR,INSSTR1,INREC
"RTN","IBCNEDE5",142,0)
 N SYMBOL,SUBID,SUBIDS,SIDCNT,MVER,VFLG
"RTN","IBCNEDE5",143,0)
 ;
"RTN","IBCNEDE5",144,0)
 S FRESHDT=$G(FRESHDT),VFLG=0
"RTN","IBCNEDE5",145,0)
 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNEDE5",146,0)
 S SIDSTR=$G(^IBE(365.12,PIEN,1,APPIEN,0))
"RTN","IBCNEDE5",147,0)
 S SIDREQ=$P(SIDSTR,U,8)
"RTN","IBCNEDE5",148,0)
 S INSSTR="",(SID,SIDCNT)=0,INREC=$O(^DPT(DFN,.312,0)) S:'INREC INREC=1
"RTN","IBCNEDE5",149,0)
 ;
"RTN","IBCNEDE5",150,0)
 I $G(^DPT(DFN,.312,INREC,0)) F  D  Q:'INREC!VFLG
"RTN","IBCNEDE5",151,0)
 . S INSSTR=$G(^DPT(DFN,.312,INREC,0))
"RTN","IBCNEDE5",152,0)
 . S INSSTR1=$G(^DPT(DFN,.312,INREC,1))
"RTN","IBCNEDE5",153,0)
 . S SYMBOL=$$INSERROR^IBCNEUT3("I",+INSSTR)
"RTN","IBCNEDE5",154,0)
 . I $P(SYMBOL,U)="" D            ; no eIV related error w/ ins. company
"RTN","IBCNEDE5",155,0)
 .. I PIEN'=$P(SYMBOL,U,2) Q      ; wrong payer ien
"RTN","IBCNEDE5",156,0)
 .. S SUBID=$P(INSSTR,U,2)
"RTN","IBCNEDE5",157,0)
 .. I SUBID="" Q                           ; missing Subscriber ID
"RTN","IBCNEDE5",158,0)
 .. S MVER=$P(INSSTR1,U,3)                 ; last verified date
"RTN","IBCNEDE5",159,0)
 .. I MVER'="",FRESHDT'="",MVER>FRESHDT S VFLG=1 Q    ; verified recently
"RTN","IBCNEDE5",160,0)
 .. S SUBIDS=$$STRIP(SUBID,,DFN)
"RTN","IBCNEDE5",161,0)
 .. I $D(SIDARRAY(SUBIDS_"_")) Q            ; already in the array
"RTN","IBCNEDE5",162,0)
 .. S SIDARRAY(SUBIDS_"_"_INREC)="",SID=1,SIDCNT=SIDCNT+1
"RTN","IBCNEDE5",163,0)
 . S INREC=$O(^DPT(DFN,.312,INREC))
"RTN","IBCNEDE5",164,0)
 ;
"RTN","IBCNEDE5",165,0)
 I VFLG K SIDARRAY S SIDCNT=0,SIDACT=4 G SIDCK2X
"RTN","IBCNEDE5",166,0)
 I SIDREQ S SIDACT=$S(SID:3,1:4)
"RTN","IBCNEDE5",167,0)
 I 'SIDREQ S SIDACT=$S(SID:5,1:6)
"RTN","IBCNEDE5",168,0)
 ;
"RTN","IBCNEDE5",169,0)
SIDCK2X ; EXIT POINT
"RTN","IBCNEDE5",170,0)
 ;
"RTN","IBCNEDE5",171,0)
 Q SIDACT_U_SIDCNT
"RTN","IBCNEDE5",172,0)
 ;
"RTN","IBCNEDE6")
0^49^B32927570^B30305878
"RTN","IBCNEDE6",1,0)
IBCNEDE6 ;DAOU/DAC - eIV DATA EXTRACTS ;15-OCT-2002
"RTN","IBCNEDE6",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,345,416**;21-MAR-94;Build 58
"RTN","IBCNEDE6",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDE6",4,0)
 ;
"RTN","IBCNEDE6",5,0)
 Q    ; no direct calls allowed
"RTN","IBCNEDE6",6,0)
 ;
"RTN","IBCNEDE6",7,0)
 ; IB*2*416 removed the ability to perform Identification inquiries.
"RTN","IBCNEDE6",8,0)
 ; However, this code is being left as is for future changes.
"RTN","IBCNEDE6",9,0)
 ;
"RTN","IBCNEDE6",10,0)
INAC(IBCNCNT,MAXNUM,IBDDI,SRVICEDT,FDAYS,APPTFLG) ;Get Inactive Insurances
"RTN","IBCNEDE6",11,0)
 ; DAOU/BHS - 10/15/2002 - Replaced VRFDT w/ FDAYS (fresh days value)
"RTN","IBCNEDE6",12,0)
 ; APPTFLG - Appt extract flag ONLY set from IBCNEDE2 - optional 0/1
"RTN","IBCNEDE6",13,0)
 ;
"RTN","IBCNEDE6",14,0)
 ; IB patch 416 discontinued the practice of using eIV for fishing for insurance
"RTN","IBCNEDE6",15,0)
 ; using the "No Insurance" extract or by doing Identification inquiries.
"RTN","IBCNEDE6",16,0)
 Q 0
"RTN","IBCNEDE6",17,0)
 ;
"RTN","IBCNEDE6",18,0)
 NEW IDATA,INCP,IEN,TQIEN,INS,INACT,DATA1,DATA2,FRESHDT
"RTN","IBCNEDE6",19,0)
 NEW PAYER,PAYERID,RESULT,FOUND,SIDARRAY,SIDACT,SIDCNT,SID,INREC
"RTN","IBCNEDE6",20,0)
 ;
"RTN","IBCNEDE6",21,0)
 ; Need FOUND to avoid the creation of a no payer inquiry the day after
"RTN","IBCNEDE6",22,0)
 ; the original inquiry for pre-reg (appt) extract and no insurance
"RTN","IBCNEDE6",23,0)
 ; extract was created.
"RTN","IBCNEDE6",24,0)
 S FOUND=0 ; set flag to 1 if potential inquiry was found
"RTN","IBCNEDE6",25,0)
 ;
"RTN","IBCNEDE6",26,0)
 S APPTFLG=$G(APPTFLG)
"RTN","IBCNEDE6",27,0)
 S IDATA=$G(^IBE(350.9,1,51))
"RTN","IBCNEDE6",28,0)
 S INACT=$P(IDATA,U,8)
"RTN","IBCNEDE6",29,0)
 S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FDAYS)
"RTN","IBCNEDE6",30,0)
 ;
"RTN","IBCNEDE6",31,0)
 ;  If the search for inactive insurances is 'No', quit
"RTN","IBCNEDE6",32,0)
 I 'INACT G INACX
"RTN","IBCNEDE6",33,0)
 ;
"RTN","IBCNEDE6",34,0)
 S INCP="" F  S INCP=$O(IBDDI(INCP)) Q:INCP=""  D  Q:IBCNCNT'<MAXNUM
"RTN","IBCNEDE6",35,0)
 . S IEN="" F  S IEN=$O(^DPT(DFN,.312,"B",INCP,IEN)) Q:IEN=""  D
"RTN","IBCNEDE6",36,0)
 .. S INS=$P(^DPT(DFN,.312,IEN,0),U)
"RTN","IBCNEDE6",37,0)
 .. ;
"RTN","IBCNEDE6",38,0)
 .. ;Check for Medicaid
"RTN","IBCNEDE6",39,0)
 .. I $$EXCLUDE^IBCNEUT4($P($G(^DIC(36,INS,0)),U)) Q
"RTN","IBCNEDE6",40,0)
 .. ;
"RTN","IBCNEDE6",41,0)
 .. ;  Check for insurance company payer, etc.
"RTN","IBCNEDE6",42,0)
 .. S RESULT=$$INSERROR^IBCNEUT3("I",INS)
"RTN","IBCNEDE6",43,0)
 .. I $P(RESULT,U)'="" Q
"RTN","IBCNEDE6",44,0)
 .. ;
"RTN","IBCNEDE6",45,0)
 .. S PAYER=$P(RESULT,U,2),PAYERID=$P(RESULT,U,3)
"RTN","IBCNEDE6",46,0)
 .. I ('PAYER)!(PAYERID="") Q
"RTN","IBCNEDE6",47,0)
 .. ;
"RTN","IBCNEDE6",48,0)
 .. S FOUND=1  ; potential inquiry
"RTN","IBCNEDE6",49,0)
 .. ;
"RTN","IBCNEDE6",50,0)
 .. ; Update service date based on payer's allowed range
"RTN","IBCNEDE6",51,0)
 .. D UPDDTS(PAYER,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE6",52,0)
 .. ;  update service dates for inquiries to be transmitted
"RTN","IBCNEDE6",53,0)
 .. D TQUPDSV^IBCNEUT5(DFN,PAYER,SRVICEDT)
"RTN","IBCNEDE6",54,0)
 .. ;  check for outstanding/current entries in File 356.1
"RTN","IBCNEDE6",55,0)
 .. I '$$ADDTQ^IBCNEUT5(DFN,PAYER,SRVICEDT,FDAYS) Q
"RTN","IBCNEDE6",56,0)
 .. ;
"RTN","IBCNEDE6",57,0)
 .. ; Call function to set IIV TRANSMISSION QUEUE file #365.1
"RTN","IBCNEDE6",58,0)
 .. ;
"RTN","IBCNEDE6",59,0)
 .. K SIDARRAY
"RTN","IBCNEDE6",60,0)
 .. S SIDACT=$$SIDCHK2^IBCNEDE5(DFN,PAYER,.SIDARRAY,FRESHDT)
"RTN","IBCNEDE6",61,0)
 .. S SIDCNT=$P(SIDACT,U,2),SIDACT=$P(SIDACT,U)
"RTN","IBCNEDE6",62,0)
 .. ;  Add to SIDCNT to compensate for a TQ entry w/ blank Sub ID
"RTN","IBCNEDE6",63,0)
 .. I SIDACT=5!(SIDACT=6)!(SIDACT=7)!(SIDACT=8) S SIDCNT=SIDCNT+1
"RTN","IBCNEDE6",64,0)
 .. I IBCNCNT+SIDCNT>MAXNUM S IBCNCNT=MAXNUM Q  ; see if TQ entries will exceed MAXNUM
"RTN","IBCNEDE6",65,0)
 .. S SID="" F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D
"RTN","IBCNEDE6",66,0)
 ... S INREC=$P(SID,"_",2)   ; which patient ins rec ID is from
"RTN","IBCNEDE6",67,0)
 ... D INACSET($P(SID,"_"),INREC)
"RTN","IBCNEDE6",68,0)
 ... ; 
"RTN","IBCNEDE6",69,0)
 .. ;  Create TQ entry w/ blank Sub ID
"RTN","IBCNEDE6",70,0)
 .. I (SIDACT=5)!(SIDACT=6)!(SIDACT=7)!(SIDACT=8) S SID="" D INACSET("","")
"RTN","IBCNEDE6",71,0)
 K SIDARRAY
"RTN","IBCNEDE6",72,0)
INACX ;
"RTN","IBCNEDE6",73,0)
 Q FOUND
"RTN","IBCNEDE6",74,0)
 ;
"RTN","IBCNEDE6",75,0)
INACSET(SID,INREC) ; INAC. SET
"RTN","IBCNEDE6",76,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE6",77,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE6",78,0)
 ;
"RTN","IBCNEDE6",79,0)
 ; IB*2*416 removed the ability to perform identification inquiries
"RTN","IBCNEDE6",80,0)
 Q
"RTN","IBCNEDE6",81,0)
 ;
"RTN","IBCNEDE6",82,0)
 N FRESH
"RTN","IBCNEDE6",83,0)
 S FRESH=$$FMADD^XLFDT(SRVICEDT,-FDAYS)
"RTN","IBCNEDE6",84,0)
 S DATA1=DFN_U_PAYER_U_1_U_""_U_SID_U_FRESH
"RTN","IBCNEDE6",85,0)
 ;
"RTN","IBCNEDE6",86,0)
 ; The hardcoded 1st piece of DATA2 tells file 365.1 which extract
"RTN","IBCNEDE6",87,0)
 ; it is.
"RTN","IBCNEDE6",88,0)
 I APPTFLG S DATA2=2    ; appt extract IBCNEDE2
"RTN","IBCNEDE6",89,0)
 I 'APPTFLG S DATA2=4   ; no ins extract IBCNEDE4
"RTN","IBCNEDE6",90,0)
 S DATA2=DATA2_U_"I"_U_SRVICEDT_U_$G(INREC)
"RTN","IBCNEDE6",91,0)
 ;
"RTN","IBCNEDE6",92,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2)
"RTN","IBCNEDE6",93,0)
 I TQIEN'="" S IBCNCNT=IBCNCNT+1
"RTN","IBCNEDE6",94,0)
 ;
"RTN","IBCNEDE6",95,0)
 Q
"RTN","IBCNEDE6",96,0)
 ;
"RTN","IBCNEDE6",97,0)
UPDDTS(PIEN,SVDT,FRDT) ;  Update service date and freshness date per payer
"RTN","IBCNEDE6",98,0)
 ; date parameters FUTURE SERVICE DAYS (365.121,.14) and PAST SERVICE
"RTN","IBCNEDE6",99,0)
 ; DAYS (365.121,.15)
"RTN","IBCNEDE6",100,0)
 ; Output:
"RTN","IBCNEDE6",101,0)
 ;  SVDT - passed by reference - updates service date
"RTN","IBCNEDE6",102,0)
 ;  FRDT - passed by reference - updates freshness date - except for 
"RTN","IBCNEDE6",103,0)
 ;         INAC where it is optional
"RTN","IBCNEDE6",104,0)
 N FDAYS,PDAYS,DIFF,AIEN,DATA,OSVDT,EDTFLG
"RTN","IBCNEDE6",105,0)
 ;
"RTN","IBCNEDE6",106,0)
 ; Init vars - save original service date to calc diff
"RTN","IBCNEDE6",107,0)
 S (FDAYS,PDAYS,EDTFLG)=0,OSVDT=SVDT
"RTN","IBCNEDE6",108,0)
 ; Determine Payer App IEN
"RTN","IBCNEDE6",109,0)
 S AIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNEDE6",110,0)
 I AIEN="" Q  ; Quit without changing if app is not defined
"RTN","IBCNEDE6",111,0)
 S DATA=$G(^IBE(365.12,PIEN,1,AIEN,0))
"RTN","IBCNEDE6",112,0)
 I DATA="" Q  ; Quit without changing if node is not defined
"RTN","IBCNEDE6",113,0)
 S FDAYS=$P(DATA,U,14),PDAYS=$P(DATA,U,15)
"RTN","IBCNEDE6",114,0)
 ; DAOU/WCW - Overriding this to allow service date of only today
"RTN","IBCNEDE6",115,0)
 ;            for the time being - setting params to 0
"RTN","IBCNEDE6",116,0)
 S FDAYS=0,PDAYS=0
"RTN","IBCNEDE6",117,0)
 ; Process past service days if not null
"RTN","IBCNEDE6",118,0)
 I PDAYS'="" D
"RTN","IBCNEDE6",119,0)
 . ; If zero, reset to today
"RTN","IBCNEDE6",120,0)
 . I PDAYS=0 S SVDT=$$DT^XLFDT,EDTFLG=1
"RTN","IBCNEDE6",121,0)
 . ; If non-zero and service date is earlier than the allowed
"RTN","IBCNEDE6",122,0)
 . ;  payer service date range, reset service date to earliest allowed
"RTN","IBCNEDE6",123,0)
 . ;  date for the payer
"RTN","IBCNEDE6",124,0)
 . I PDAYS,SVDT<$$FMADD^XLFDT($$DT^XLFDT,-PDAYS+1) D
"RTN","IBCNEDE6",125,0)
 . . S SVDT=$$FMADD^XLFDT($$DT^XLFDT,-PDAYS+1),EDTFLG=1
"RTN","IBCNEDE6",126,0)
 ; Process future service days if not edited and if not null
"RTN","IBCNEDE6",127,0)
 I EDTFLG=0,FDAYS'="" D
"RTN","IBCNEDE6",128,0)
 . ; If zero, reset to today
"RTN","IBCNEDE6",129,0)
 . I FDAYS=0 S SVDT=$$DT^XLFDT,EDTFLG=1
"RTN","IBCNEDE6",130,0)
 . ; If non-zero and service date is later than the allowed
"RTN","IBCNEDE6",131,0)
 . ;  payer service date range, reset service date to latest allowed
"RTN","IBCNEDE6",132,0)
 . ;  date for the payer
"RTN","IBCNEDE6",133,0)
 . I FDAYS,SVDT>$$FMADD^XLFDT($$DT^XLFDT,FDAYS-1) D
"RTN","IBCNEDE6",134,0)
 . . S SVDT=$$FMADD^XLFDT($$DT^XLFDT,FDAYS-1),EDTFLG=1
"RTN","IBCNEDE6",135,0)
 ;
"RTN","IBCNEDE6",136,0)
 ; Determine if difference exists
"RTN","IBCNEDE6",137,0)
 I EDTFLG,$G(FRDT)'="" S FRDT=$$FMADD^XLFDT(FRDT,$$FMDIFF^XLFDT(SVDT,OSVDT))
"RTN","IBCNEDE6",138,0)
 ;
"RTN","IBCNEDE6",139,0)
 Q
"RTN","IBCNEDE6",140,0)
 ;
"RTN","IBCNEDE6",141,0)
BLANKTQ(SRVICEDT,FRESHDT,YDAYS,IBCNCNT) ; 
"RTN","IBCNEDE6",142,0)
 ; This tag is only called from PROCESS^IBCNEDE4 
"RTN","IBCNEDE6",143,0)
 ; No new records were created in file 365.1 for this DFN.
"RTN","IBCNEDE6",144,0)
 ; Need to check if an inquiry for any payer exists for this DFN within
"RTN","IBCNEDE6",145,0)
 ; the freshness period.  If it doesn't exist create a new blank inquiry
"RTN","IBCNEDE6",146,0)
 ;
"RTN","IBCNEDE6",147,0)
 ; Input
"RTN","IBCNEDE6",148,0)
 ;    SRVICEDT - Service Date
"RTN","IBCNEDE6",149,0)
 ;    FRESHDT - Freshness Date
"RTN","IBCNEDE6",150,0)
 ;    YDAYS - 
"RTN","IBCNEDE6",151,0)
 ;    IBCNCNT - updated - Counter for the extract
"RTN","IBCNEDE6",152,0)
 ;
"RTN","IBCNEDE6",153,0)
 ; IB*2*416 removed the ability to perform identification inquiries
"RTN","IBCNEDE6",154,0)
 ;          - blank or otherwise
"RTN","IBCNEDE6",155,0)
 Q
"RTN","IBCNEDE6",156,0)
 ;
"RTN","IBCNEDE6",157,0)
 I $$TFL^IBCNEDE6(DFN)=0 Q
"RTN","IBCNEDE6",158,0)
 ;
"RTN","IBCNEDE6",159,0)
 N PAYER,DATA1,DATA2,TQIEN
"RTN","IBCNEDE6",160,0)
 ;
"RTN","IBCNEDE6",161,0)
 S PAYER=$$FIND1^DIC(365.12,,"X","~NO PAYER")
"RTN","IBCNEDE6",162,0)
 ;
"RTN","IBCNEDE6",163,0)
 ; Update service date and freshness date based on payer allowed
"RTN","IBCNEDE6",164,0)
 ;  date range
"RTN","IBCNEDE6",165,0)
 D UPDDTS^IBCNEDE6(PAYER,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE6",166,0)
 ;
"RTN","IBCNEDE6",167,0)
 ; Update service dates for inquiries to be transmitted
"RTN","IBCNEDE6",168,0)
 D TQUPDSV^IBCNEUT5(DFN,PAYER,SRVICEDT)
"RTN","IBCNEDE6",169,0)
 ;
"RTN","IBCNEDE6",170,0)
 ; Are we allowed to add it to the TQ file
"RTN","IBCNEDE6",171,0)
 I '$$ADDTQ^IBCNEUT5(DFN,PAYER,SRVICEDT,YDAYS,1) G BLANKXT
"RTN","IBCNEDE6",172,0)
 ;
"RTN","IBCNEDE6",173,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE6",174,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE6",175,0)
 S DATA1=DFN_U_PAYER_U_1_U_""_U_""_U_FRESHDT
"RTN","IBCNEDE6",176,0)
 ;
"RTN","IBCNEDE6",177,0)
 ; The hardcoded '4' in the 1st piece of DATA2 is the value to tell
"RTN","IBCNEDE6",178,0)
 ; the file 365.1 that it is the no active insurance extract.
"RTN","IBCNEDE6",179,0)
 S DATA2=4_U_"I"_U_SRVICEDT
"RTN","IBCNEDE6",180,0)
 ;
"RTN","IBCNEDE6",181,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2),PAYER=""
"RTN","IBCNEDE6",182,0)
 I TQIEN'="" S IBCNCNT=IBCNCNT+1
"RTN","IBCNEDE6",183,0)
 ;
"RTN","IBCNEDE6",184,0)
BLANKXT ;
"RTN","IBCNEDE6",185,0)
 Q
"RTN","IBCNEDE6",186,0)
 ;
"RTN","IBCNEDE6",187,0)
TFL(DFN) ; Examines treating facility list,
"RTN","IBCNEDE6",188,0)
 ; value returned is 1 if patient has visited at least one other site
"RTN","IBCNEDE6",189,0)
 N IBC,IBZ,IBS
"RTN","IBCNEDE6",190,0)
 D TFL^VAFCTFU1(.IBZ,DFN) Q:-$G(IBZ(1))=1 0
"RTN","IBCNEDE6",191,0)
 S IBS=+$P($$SITE^VASITE,"^",3),(IBZ,IBC)=0
"RTN","IBCNEDE6",192,0)
 ; Look for remote facilities of type VAMC:
"RTN","IBCNEDE6",193,0)
 F  S IBZ=$O(IBZ(IBZ)) Q:IBZ<1  I +IBZ(IBZ)>0,+IBZ(IBZ)'=IBS,$P(IBZ(IBZ),U,5)="VAMC" S IBC=1 Q
"RTN","IBCNEDE6",194,0)
 Q IBC
"RTN","IBCNEDE7")
0^50^B24335491^B21406402
"RTN","IBCNEDE7",1,0)
IBCNEDE7 ;DAOU/DAC - eIV DATA EXTRACTS ;04-JUN-2002
"RTN","IBCNEDE7",2,0)
 ;;2.0;INTEGRATED BILLING;**271,416**;21-MAR-94;Build 58
"RTN","IBCNEDE7",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDE7",4,0)
 ;
"RTN","IBCNEDE7",5,0)
 Q    ; no direct calls allowed
"RTN","IBCNEDE7",6,0)
 ; 
"RTN","IBCNEDE7",7,0)
SETTINGS(EXTNUM) ; Check site parameter settings for the extracts
"RTN","IBCNEDE7",8,0)
 ; Input Parameter:
"RTN","IBCNEDE7",9,0)
 ;
"RTN","IBCNEDE7",10,0)
 ; EXTNUM is either 1, 2, 3 to represent the different extracts
"RTN","IBCNEDE7",11,0)
 ; 1 - Insurance Buffer extract
"RTN","IBCNEDE7",12,0)
 ; 2 - Pre-Reg (appointments)
"RTN","IBCNEDE7",13,0)
 ; 3 - Non Verified
"RTN","IBCNEDE7",14,0)
 ;        IB*2*416 removed extract#4 for No Insurance
"RTN","IBCNEDE7",15,0)
 ;
"RTN","IBCNEDE7",16,0)
 ; Output:
"RTN","IBCNEDE7",17,0)
 ; Returns a "^" delimited string passing back:
"RTN","IBCNEDE7",18,0)
 ;    A flag of whether to consider the extract active
"RTN","IBCNEDE7",19,0)
 ;    Number of days to look back in the past when extracting data
"RTN","IBCNEDE7",20,0)
 ;    STALEDYS - "stale days": number of days from today to determine the
"RTN","IBCNEDE7",21,0)
 ;          freshness this is only used for the non-verified and no 
"RTN","IBCNEDE7",22,0)
 ;          insurance extract.  The other two extracts pull their days
"RTN","IBCNEDE7",23,0)
 ;          from the IB SITE PARAMETER file within their specific 
"RTN","IBCNEDE7",24,0)
 ;          extract routine.
"RTN","IBCNEDE7",25,0)
 ;    Max Number of entries you are allowed to set into the eIV 
"RTN","IBCNEDE7",26,0)
 ;          Transmission Queue file.  If null, # of entries allowed is
"RTN","IBCNEDE7",27,0)
 ;          unlimited.
"RTN","IBCNEDE7",28,0)
 ;    Suppress Buffer Flag - Either '0' (No) or '1' (Yes)
"RTN","IBCNEDE7",29,0)
 ;          1 will suppress the creation of buffer entries
"RTN","IBCNEDE7",30,0)
 ;          0 will not
"RTN","IBCNEDE7",31,0)
 ;          Applies to extracts 2 (Pre Reg) and 3 (Non verified)
"RTN","IBCNEDE7",32,0)
 ;
"RTN","IBCNEDE7",33,0)
 N DIC,DISYS,DA,X,Y,EACTIVE,XDAYS,STALEDYS,MAXCNT,OK,SUPPBUFF
"RTN","IBCNEDE7",34,0)
 S EACTIVE=0,(XDAYS,STALEDYS,MAXCNT)=""
"RTN","IBCNEDE7",35,0)
 S OK=$S(EXTNUM=1:1,EXTNUM=2:1,EXTNUM=3:1,1:0)
"RTN","IBCNEDE7",36,0)
 I 'OK G EXIT
"RTN","IBCNEDE7",37,0)
 S DA=1,DIC="^IBE(350.9,"_DA_",51.17,",DIC(0)="X",X=EXTNUM D ^DIC
"RTN","IBCNEDE7",38,0)
 ;
"RTN","IBCNEDE7",39,0)
 I Y<1 G EXIT  ; extract not defined in the IB Site Parameter
"RTN","IBCNEDE7",40,0)
 ;
"RTN","IBCNEDE7",41,0)
 S EACTIVE=$G(^IBE(350.9,1,51.17,+Y,0))
"RTN","IBCNEDE7",42,0)
 S XDAYS=$P(EACTIVE,U,3)
"RTN","IBCNEDE7",43,0)
 S STALEDYS=$P(EACTIVE,U,4)
"RTN","IBCNEDE7",44,0)
 S MAXCNT=$P(EACTIVE,U,5)
"RTN","IBCNEDE7",45,0)
 S SUPPBUFF=$P(EACTIVE,U,6)
"RTN","IBCNEDE7",46,0)
 I SUPPBUFF="" S SUPPBUFF=0
"RTN","IBCNEDE7",47,0)
 S EACTIVE=$P(EACTIVE,U,2)
"RTN","IBCNEDE7",48,0)
EXIT ;
"RTN","IBCNEDE7",49,0)
 I EXTNUM=2,(XDAYS="") S EACTIVE=0  ; missing required data
"RTN","IBCNEDE7",50,0)
 I EXTNUM=3 D
"RTN","IBCNEDE7",51,0)
 . I XDAYS=""!(STALEDYS="") S EACTIVE=0   ; missing required data
"RTN","IBCNEDE7",52,0)
 Q EACTIVE_U_XDAYS_U_STALEDYS_U_MAXCNT_U_SUPPBUFF
"RTN","IBCNEDE7",53,0)
 ;
"RTN","IBCNEDE7",54,0)
SETTQ(DATA1,DATA2,ORIG,OVERRIDE) ;Set extract data in TQ file 365.1
"RTN","IBCNEDE7",55,0)
 ;
"RTN","IBCNEDE7",56,0)
 ; DATA1, DATA2, & ORIG are "^" delimited variables containing the data
"RTN","IBCNEDE7",57,0)
 ; listed below
"RTN","IBCNEDE7",58,0)
 ;
"RTN","IBCNEDE7",59,0)
 ; OVERRIDE - flag indicates that this entry is a result of the 
"RTN","IBCNEDE7",60,0)
 ;         'Request Re-Verification' menu option.
"RTN","IBCNEDE7",61,0)
 ;
"RTN","IBCNEDE7",62,0)
 N FDA,IENARRAY,ERROR,TRANSNO,DFN
"RTN","IBCNEDE7",63,0)
 ; do not allow "NO PAYER" entries
"RTN","IBCNEDE7",64,0)
 I $P(DATA1,U,2)=$$FIND1^DIC(365.12,"","X","~NO PAYER") Q
"RTN","IBCNEDE7",65,0)
 ;
"RTN","IBCNEDE7",66,0)
 S TRANSNO=$P($G(^IBCN(365.1,0)),U,3)+1
"RTN","IBCNEDE7",67,0)
 S FDA(365.1,"+1,",.01)=TRANSNO             ; Transaction #
"RTN","IBCNEDE7",68,0)
 ;
"RTN","IBCNEDE7",69,0)
 S DFN=$P(DATA1,U)
"RTN","IBCNEDE7",70,0)
 S FDA(365.1,"+1,",.02)=DFN                 ; patient DFN
"RTN","IBCNEDE7",71,0)
 S FDA(365.1,"+1,",.03)=$P(DATA1,U,2)       ; ien of payer
"RTN","IBCNEDE7",72,0)
 S FDA(365.1,"+1,",.04)=$P(DATA1,U,3)       ; ien of transmission status
"RTN","IBCNEDE7",73,0)
 S FDA(365.1,"+1,",.15)=DT                  ; trans status date
"RTN","IBCNEDE7",74,0)
 S FDA(365.1,"+1,",.05)=$P(DATA1,U,4)       ; ien of buffer
"RTN","IBCNEDE7",75,0)
 ;
"RTN","IBCNEDE7",76,0)
 S FDA(365.1,"+1,",.06)=$$NOW^XLFDT         ; creation date/time
"RTN","IBCNEDE7",77,0)
 S FDA(365.1,"+1,",.07)=0                   ; transmission retries
"RTN","IBCNEDE7",78,0)
 S FDA(365.1,"+1,",.08)=0                   ; number of retries
"RTN","IBCNEDE7",79,0)
 I $D(OVERRIDE) S FDA(365.1,"+1,",.14)=OVERRIDE  ; override flag
"RTN","IBCNEDE7",80,0)
 S FDA(365.1,"+1,",.16)=$P(DATA1,U,5)        ; Sub. ID
"RTN","IBCNEDE7",81,0)
 S FDA(365.1,"+1,",.17)=$P(DATA1,U,6)        ; Freshness Date
"RTN","IBCNEDE7",82,0)
 S FDA(365.1,"+1,",.18)=$P(DATA1,U,7)        ; Pass Buffer ien?
"RTN","IBCNEDE7",83,0)
 S FDA(365.1,"+1,",.19)=$P(DATA1,U,8)        ; Patient ID
"RTN","IBCNEDE7",84,0)
 ;
"RTN","IBCNEDE7",85,0)
 I $D(DATA2) D
"RTN","IBCNEDE7",86,0)
 . S FDA(365.1,"+1,",.1)=$P(DATA2,U)          ; which extract (ien)
"RTN","IBCNEDE7",87,0)
 . S FDA(365.1,"+1,",.11)=$P(DATA2,U,2)       ; query flag
"RTN","IBCNEDE7",88,0)
 . S FDA(365.1,"+1,",.12)=$P(DATA2,U,3)       ; service date
"RTN","IBCNEDE7",89,0)
 . S FDA(365.1,"+1,",.13)=$P(DATA2,U,4)       ; patient insur. ien
"RTN","IBCNEDE7",90,0)
 ;
"RTN","IBCNEDE7",91,0)
 I $D(ORIG) D
"RTN","IBCNEDE7",92,0)
 . S FDA(365.1,"+1,",1.02)=$P(ORIG,U)   ; original ins co (in buffer)
"RTN","IBCNEDE7",93,0)
 . S FDA(365.1,"+1,",1.03)=$P(ORIG,U,2)   ; original grp # (in buffer)
"RTN","IBCNEDE7",94,0)
 . S FDA(365.1,"+1,",1.04)=$P(ORIG,U,3)   ; original grp name (in buffer)
"RTN","IBCNEDE7",95,0)
 . S FDA(365.1,"+1,",1.05)=$P(ORIG,U,4)   ; original subscriber ID
"RTN","IBCNEDE7",96,0)
 ;
"RTN","IBCNEDE7",97,0)
 D UPDATE^DIE("","FDA","IENARRAY","ERROR")
"RTN","IBCNEDE7",98,0)
 ;
"RTN","IBCNEDE7",99,0)
 I $D(ERROR) D  ; MailMan msg
"RTN","IBCNEDE7",100,0)
 . NEW MGRP,XMSUB,MSG
"RTN","IBCNEDE7",101,0)
 . KILL MSG
"RTN","IBCNEDE7",102,0)
 . ;
"RTN","IBCNEDE7",103,0)
 . ; Set to IB site parameter MAILGROUP
"RTN","IBCNEDE7",104,0)
 . S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDE7",105,0)
 . ;
"RTN","IBCNEDE7",106,0)
 . S XMSUB="eIV Problem: Trouble setting entry in File 365.1"
"RTN","IBCNEDE7",107,0)
 . S MSG(1)="Tried to create an entry in the eIV Transmission Queue File #365.1 without"
"RTN","IBCNEDE7",108,0)
 . S MSG(2)="success."
"RTN","IBCNEDE7",109,0)
 . S MSG(3)=""
"RTN","IBCNEDE7",110,0)
 . S MSG(4)="Error encountered: "_$G(ERROR("DIERR",1,"TEXT",1))
"RTN","IBCNEDE7",111,0)
 . S MSG(5)=""
"RTN","IBCNEDE7",112,0)
 . S MSG(6)="The data that was to be stored is as follows:"
"RTN","IBCNEDE7",113,0)
 . S MSG(7)=""
"RTN","IBCNEDE7",114,0)
 . S MSG(8)="Transaction #: "_TRANSNO
"RTN","IBCNEDE7",115,0)
 . S MSG(9)="Patient: "_$P($G(^DPT(DFN,0)),U)_$$SSN^IBCNEDEQ(DFN)
"RTN","IBCNEDE7",116,0)
 . S MSG(10)="Extract: "_$G(FDA(365.1,"+1,",.1))
"RTN","IBCNEDE7",117,0)
 . S MSG(11)="Payer: "_$P($G(^IBE(365.12,FDA(365.1,"+1,",.03),0)),U,1)
"RTN","IBCNEDE7",118,0)
 . S MSG(12)="Please call the Help Desk about this problem."
"RTN","IBCNEDE7",119,0)
 . D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDE7",120,0)
 ;
"RTN","IBCNEDE7",121,0)
 Q $G(IENARRAY(1))
"RTN","IBCNEDE7",122,0)
 ;
"RTN","IBCNEDE7",123,0)
PYRACTV(PIEN) ; check if given payer is nationally active for eIV
"RTN","IBCNEDE7",124,0)
 ; returns 1 if payer is nationally active, 0 otherwise
"RTN","IBCNEDE7",125,0)
 N APPIEN,RES
"RTN","IBCNEDE7",126,0)
 S RES=0
"RTN","IBCNEDE7",127,0)
 I +$G(PIEN)'>0 G PYRACTVX
"RTN","IBCNEDE7",128,0)
 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNEDE7",129,0)
 I +$G(APPIEN)'>0 G PYRACTVX
"RTN","IBCNEDE7",130,0)
 I $P($G(^IBE(365.12,PIEN,1,APPIEN,0)),U,2)=1 S RES=1
"RTN","IBCNEDE7",131,0)
PYRACTVX ;
"RTN","IBCNEDE7",132,0)
 Q RES
"RTN","IBCNEDEP")
0^15^B83667847^B95024002
"RTN","IBCNEDEP",1,0)
IBCNEDEP ;DAOU/ALA - Process Transaction Records ;17-JUN-2002
"RTN","IBCNEDEP",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,300,416**;21-MAR-94;Build 58
"RTN","IBCNEDEP",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDEP",4,0)
 ;
"RTN","IBCNEDEP",5,0)
 ;  This program finds records needing HL7 msg creation
"RTN","IBCNEDEP",6,0)
 ;  Periodically check for stop request for background task
"RTN","IBCNEDEP",7,0)
 ;
"RTN","IBCNEDEP",8,0)
 ;  Variables
"RTN","IBCNEDEP",9,0)
 ;    RETR = # retries allowed
"RTN","IBCNEDEP",10,0)
 ;    MGRP = Msg Mailgroup
"RTN","IBCNEDEP",11,0)
 ;    FAIL = # of days before failure
"RTN","IBCNEDEP",12,0)
 ;    FMSG = Failure Mailman flag
"RTN","IBCNEDEP",13,0)
 ;    TMSG = Timeout Mailman flag
"RTN","IBCNEDEP",14,0)
 ;    FLDT = Failure date
"RTN","IBCNEDEP",15,0)
 ;    FUTDT = Future transmission date
"RTN","IBCNEDEP",16,0)
 ;    DFN = Patient IEN
"RTN","IBCNEDEP",17,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEDEP",18,0)
 ;    DTCRT = Date Created
"RTN","IBCNEDEP",19,0)
 ;    BUFF = Buffer File IEN
"RTN","IBCNEDEP",20,0)
 ;    NRETR = # of retries accomplished
"RTN","IBCNEDEP",21,0)
 ;    IHCNT = Count of successful HL7 msgs
"RTN","IBCNEDEP",22,0)
 ;    QUERY = Type of msg
"RTN","IBCNEDEP",23,0)
 ;    EXT =  Which extract produced record
"RTN","IBCNEDEP",24,0)
 ;    SRVDT = Service Date
"RTN","IBCNEDEP",25,0)
 ;    IRIEN = Insurance Record IEN
"RTN","IBCNEDEP",26,0)
 ;    NTRAN = # of transmissions accomplished
"RTN","IBCNEDEP",27,0)
 ;    OVRIDE = Override Flag
"RTN","IBCNEDEP",28,0)
 ;    BNDL = Bundle Verification Flag
"RTN","IBCNEDEP",29,0)
 ;
"RTN","IBCNEDEP",30,0)
EN ;  Entry point
"RTN","IBCNEDEP",31,0)
 ;
"RTN","IBCNEDEP",32,0)
 ;  Start processing of data
"RTN","IBCNEDEP",33,0)
 K ^TMP("HLS",$J),^TMP("IBQUERY",$J)
"RTN","IBCNEDEP",34,0)
 ; Initialize count for periodic TaskMan check
"RTN","IBCNEDEP",35,0)
 S IBCNETOT=0
"RTN","IBCNEDEP",36,0)
 ;
"RTN","IBCNEDEP",37,0)
 ;  Get IB Site Parameters
"RTN","IBCNEDEP",38,0)
 S IBCNEP=$G(^IBE(350.9,1,51))
"RTN","IBCNEDEP",39,0)
 S RETR=+$P(IBCNEP,U,6),BNDL=$P(IBCNEP,U,23)
"RTN","IBCNEDEP",40,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDEP",41,0)
 S FAIL=$P(IBCNEP,U,5),TMSG=$P(IBCNEP,U,7),FMSG=$P(IBCNEP,U,20)
"RTN","IBCNEDEP",42,0)
 S FLDT=$$FMADD^XLFDT(DT,-FAIL)
"RTN","IBCNEDEP",43,0)
 ; Statuses
"RTN","IBCNEDEP",44,0)
 ;   1 = Ready To Transmit
"RTN","IBCNEDEP",45,0)
 ;   2 = Transmitted
"RTN","IBCNEDEP",46,0)
 ;   4 = Hold
"RTN","IBCNEDEP",47,0)
 ;   6 = Retry
"RTN","IBCNEDEP",48,0)
 ;
"RTN","IBCNEDEP",49,0)
HLD ;  Go through the 'Hold' statuses, see if ready to be 'retried'
"RTN","IBCNEDEP",50,0)
 S IEN=""
"RTN","IBCNEDEP",51,0)
 F  S IEN=$O(^IBCN(365.1,"AC",4,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",52,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",53,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",54,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",55,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",56,0)
 . ;
"RTN","IBCNEDEP",57,0)
 . S FUTDT=$P($G(^IBCN(365.1,IEN,0)),U,9)
"RTN","IBCNEDEP",58,0)
 . ;
"RTN","IBCNEDEP",59,0)
 . ;  If the future date is today, set status to 'Retry',
"RTN","IBCNEDEP",60,0)
 . ;  DON'T clear future transmission date. (Need date to see if this is the first
"RTN","IBCNEDEP",61,0)
 . ;  time that the payer asked us to resubmit this inquiry.)
"RTN","IBCNEDEP",62,0)
 . I FUTDT'>DT D SST^IBCNEUT2(IEN,6) ;D
"RTN","IBCNEDEP",63,0)
 . ;. NEW DA,DIE,DR
"RTN","IBCNEDEP",64,0)
 . ;. S DA=IEN,DIE="^IBCN(365.1,",DR=".09///@" D ^DIE
"RTN","IBCNEDEP",65,0)
 ;
"RTN","IBCNEDEP",66,0)
 ; Exit based on stop request
"RTN","IBCNEDEP",67,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNEDEP",68,0)
 ;
"RTN","IBCNEDEP",69,0)
TMT ;  If the status is 'Transmitted' - is this a 'Retry' or
"RTN","IBCNEDEP",70,0)
 ;  'Comm Failure'
"RTN","IBCNEDEP",71,0)
 S IEN=""
"RTN","IBCNEDEP",72,0)
 F  S IEN=$O(^IBCN(365.1,"AC",2,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",73,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",74,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",75,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",76,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",77,0)
 . ;
"RTN","IBCNEDEP",78,0)
 . NEW TDATA,DTCRT,BUFF,DFN,PAYR,XMSUB,VERID
"RTN","IBCNEDEP",79,0)
 . S TDATA=$G(^IBCN(365.1,IEN,0))
"RTN","IBCNEDEP",80,0)
 . S DFN=$P(TDATA,U,2),PAYR=$P(TDATA,U,3)
"RTN","IBCNEDEP",81,0)
 . S DTCRT=$P(TDATA,U,6)\1,BUFF=$P(TDATA,U,5)
"RTN","IBCNEDEP",82,0)
 . S VERID=$P(TDATA,U,11)
"RTN","IBCNEDEP",83,0)
 . ;
"RTN","IBCNEDEP",84,0)
 . ;  Check against the Failure Date
"RTN","IBCNEDEP",85,0)
 . I DTCRT>FLDT Q
"RTN","IBCNEDEP",86,0)
 . ;
"RTN","IBCNEDEP",87,0)
 . ;  If retries are defined
"RTN","IBCNEDEP",88,0)
 . I RETR>0 D  Q
"RTN","IBCNEDEP",89,0)
 .. ;
"RTN","IBCNEDEP",90,0)
 .. ;  Send timeout mail msg
"RTN","IBCNEDEP",91,0)
 .. I PAYR'=$$FIND1^DIC(365.12,"","X","~NO PAYER") D TMRR^IBCNEDEQ
"RTN","IBCNEDEP",92,0)
 .. D SST^IBCNEUT2(IEN,6)
"RTN","IBCNEDEP",93,0)
 . ;
"RTN","IBCNEDEP",94,0)
 . ; If no retries defined, set to fail
"RTN","IBCNEDEP",95,0)
 . D SST^IBCNEUT2(IEN,5)
"RTN","IBCNEDEP",96,0)
 . ;
"RTN","IBCNEDEP",97,0)
 . ;  For msg in the Response file set the status to
"RTN","IBCNEDEP",98,0)
 . ; 'Comm Failure'
"RTN","IBCNEDEP",99,0)
 . D RSTA^IBCNEUT7(IEN)
"RTN","IBCNEDEP",100,0)
 . ;
"RTN","IBCNEDEP",101,0)
 . ;  Set Buffer symbol to 'B12' (Comm Failure)
"RTN","IBCNEDEP",102,0)
 . I BUFF'="" D BUFF^IBCNEUT2(BUFF,15)
"RTN","IBCNEDEP",103,0)
 . ;
"RTN","IBCNEDEP",104,0)
 . I PAYR=$$FIND1^DIC(365.12,"","X","~NO PAYER") Q
"RTN","IBCNEDEP",105,0)
 . ;
"RTN","IBCNEDEP",106,0)
 . ; Issue comm fail MailMan msg only for ver'ns
"RTN","IBCNEDEP",107,0)
 . I VERID="V" D CERR^IBCNEDEQ
"RTN","IBCNEDEP",108,0)
 ;
"RTN","IBCNEDEP",109,0)
 ; Exit for stop request
"RTN","IBCNEDEP",110,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNEDEP",111,0)
 ;
"RTN","IBCNEDEP",112,0)
RET ;  If status is 'Retry'
"RTN","IBCNEDEP",113,0)
 S IEN=""
"RTN","IBCNEDEP",114,0)
 F  S IEN=$O(^IBCN(365.1,"AC",6,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",115,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",116,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",117,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",118,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",119,0)
 . ;
"RTN","IBCNEDEP",120,0)
 . NEW TDATA,NRETR,PAYR,BUFF,DFN,MSG,RIEN,HIEN,XMSUB,VERID
"RTN","IBCNEDEP",121,0)
 . S TDATA=$G(^IBCN(365.1,IEN,0))
"RTN","IBCNEDEP",122,0)
 . S NRETR=$P(TDATA,U,8),PAYR=$P(TDATA,U,3)
"RTN","IBCNEDEP",123,0)
 . S BUFF=$P(TDATA,U,5),DFN=$P(TDATA,U,2)
"RTN","IBCNEDEP",124,0)
 . S VERID=$P(TDATA,U,11)
"RTN","IBCNEDEP",125,0)
 . S NRETR=NRETR+1
"RTN","IBCNEDEP",126,0)
 . ;
"RTN","IBCNEDEP",127,0)
 . ;  If retries are finished, set to fail
"RTN","IBCNEDEP",128,0)
 . I NRETR>RETR D  Q
"RTN","IBCNEDEP",129,0)
 .. D SST^IBCNEUT2(IEN,5)
"RTN","IBCNEDEP",130,0)
 .. ;
"RTN","IBCNEDEP",131,0)
 .. ;  Set Buffer symbol to 'B12' (Comm Failure)
"RTN","IBCNEDEP",132,0)
 .. I BUFF'="" D BUFF^IBCNEUT2(BUFF,15)
"RTN","IBCNEDEP",133,0)
 .. ;
"RTN","IBCNEDEP",134,0)
 .. ;  For msg in the Response file set the status to
"RTN","IBCNEDEP",135,0)
 .. ; 'Comm Failure'
"RTN","IBCNEDEP",136,0)
 .. D RSTA^IBCNEUT7(IEN)
"RTN","IBCNEDEP",137,0)
 .. I PAYR=$$FIND1^DIC(365.12,"","X","~NO PAYER") Q
"RTN","IBCNEDEP",138,0)
 .. ;
"RTN","IBCNEDEP",139,0)
 .. I VERID="V" D CERE^IBCNEDEQ
"RTN","IBCNEDEP",140,0)
 . ; If generating retry, set eIV status to comm failure (5) for
"RTN","IBCNEDEP",141,0)
 . ; remaining related responses
"RTN","IBCNEDEP",142,0)
 . D RSTA^IBCNEUT7(IEN)
"RTN","IBCNEDEP",143,0)
 ;
"RTN","IBCNEDEP",144,0)
 ; Exit for stop request
"RTN","IBCNEDEP",145,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNEDEP",146,0)
 ;
"RTN","IBCNEDEP",147,0)
FIN ; Prioritize requests for statuses 'Retry' and 'Ready to Transmit'
"RTN","IBCNEDEP",148,0)
 ;
"RTN","IBCNEDEP",149,0)
 ;  Separate inquiries into verifications, identifications,
"RTN","IBCNEDEP",150,0)
 ;  and "fishes" - VNUM = Priority of output
"RTN","IBCNEDEP",151,0)
 F STA=1,6 S IEN="" D
"RTN","IBCNEDEP",152,0)
 . F  S IEN=$O(^IBCN(365.1,"AC",STA,IEN)) Q:IEN=""  D
"RTN","IBCNEDEP",153,0)
 .. S IBDATA=$G(^IBCN(365.1,IEN,0)) Q:IBDATA=""
"RTN","IBCNEDEP",154,0)
 .. S QUERY=$P(IBDATA,U,11),DFN=$P(IBDATA,U,2),OVRIDE=$P(IBDATA,U,14)
"RTN","IBCNEDEP",155,0)
 .. S PAYR=$P(IBDATA,U,3)
"RTN","IBCNEDEP",156,0)
 .. I QUERY="V" S VNUM=3
"RTN","IBCNEDEP",157,0)
 .. I QUERY'="V" D
"RTN","IBCNEDEP",158,0)
 ... I PAYR=$$FIND1^DIC(365.12,,"X","~NO PAYER") S VNUM=5 Q
"RTN","IBCNEDEP",159,0)
 ... S VNUM=4
"RTN","IBCNEDEP",160,0)
 .. I OVRIDE'="" D
"RTN","IBCNEDEP",161,0)
 ... I PAYR=$$FIND1^DIC(365.12,,"X","~NO PAYER") S VNUM=2 Q
"RTN","IBCNEDEP",162,0)
 ... S VNUM=1
"RTN","IBCNEDEP",163,0)
 .. S ^TMP("IBQUERY",$J,VNUM,DFN,IEN)=""
"RTN","IBCNEDEP",164,0)
 ;
"RTN","IBCNEDEP",165,0)
LP ;  Loop through priorities, process as either verifications
"RTN","IBCNEDEP",166,0)
 ;  or identifications
"RTN","IBCNEDEP",167,0)
 S VNUM="",IHCNT=0
"RTN","IBCNEDEP",168,0)
 F  S VNUM=$O(^TMP("IBQUERY",$J,VNUM)) Q:VNUM=""  D  Q:$G(ZTSTOP)!$G(QFL)=1
"RTN","IBCNEDEP",169,0)
 . I VNUM=1!(VNUM=3) D VER Q
"RTN","IBCNEDEP",170,0)
 . ;D ID
"RTN","IBCNEDEP",171,0)
 ;
"RTN","IBCNEDEP",172,0)
EXIT ;  Finish
"RTN","IBCNEDEP",173,0)
 K BUFF,CNT,D,D0,DA,DFN,DI,DIC,DIE,DISYS,DQ,DR,DTCRT,EXT,FAIL,FLDT,FUTDT
"RTN","IBCNEDEP",174,0)
 K FRDT,FMSG,GT1,HCT,HIEN,HL,HLCDOM,HLCINS,HLCS,HLCSTCP,HLDOM,HLECH,%I,%H
"RTN","IBCNEDEP",175,0)
 K HLEID,HLFS,HLHDR,HLINST,HLIP,HLN,HLPARAM,HLPROD,HLQ,HLRESLT,XMSUB
"RTN","IBCNEDEP",176,0)
 K HLSAN,HLTYPE,HLX,IBCNEP,IBCNHLP,IEN,IN1,IRIEN,MDTM,MGRP,MSGID,TOT
"RTN","IBCNEDEP",177,0)
 K NRETR,NTRAN,OVRIDE,PAYR,PID,QFL,QUERY,RETR,RSIEN,SRVDT,STA,TRANSR,X
"RTN","IBCNEDEP",178,0)
 K ZMID,^TMP("IBQUERY",$J),Y,DOD,DGREL,TMSG,RSTYPE,OMSGID,QFL
"RTN","IBCNEDEP",179,0)
 K IBCNETOT,HLP,SUBID,VNUM,BNDL,IBDATA,PATID
"RTN","IBCNEDEP",180,0)
 Q
"RTN","IBCNEDEP",181,0)
 ;
"RTN","IBCNEDEP",182,0)
VER ;  Initialize HL7 variables protocol for Verifications
"RTN","IBCNEDEP",183,0)
 S IBCNHLP="IBCNE IIV RQV OUT"
"RTN","IBCNEDEP",184,0)
 D INIT^IBCNEHLO
"RTN","IBCNEDEP",185,0)
 ;
"RTN","IBCNEDEP",186,0)
 S DFN=""
"RTN","IBCNEDEP",187,0)
 F  S DFN=$O(^TMP("IBQUERY",$J,VNUM,DFN)) Q:DFN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",188,0)
 . ;
"RTN","IBCNEDEP",189,0)
 . ;  If the INQUIRE SECONDARY INSURANCES flag is 'yes',
"RTN","IBCNEDEP",190,0)
 . ;  bundle verifications together, send a continuation pointer
"RTN","IBCNEDEP",191,0)
 . I VNUM=3,BNDL D  Q:QFL
"RTN","IBCNEDEP",192,0)
 .. S TOT=0,IEN="",QFL=0
"RTN","IBCNEDEP",193,0)
 .. F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  S TOT=TOT+1
"RTN","IBCNEDEP",194,0)
 . ;
"RTN","IBCNEDEP",195,0)
 . S IEN="",OMSGID="",QFL=0,CNT=0
"RTN","IBCNEDEP",196,0)
 . F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",197,0)
 .. ; Update count for periodic check
"RTN","IBCNEDEP",198,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",199,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",200,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",201,0)
 .. ;
"RTN","IBCNEDEP",202,0)
 .. D PROC I PID="" Q
"RTN","IBCNEDEP",203,0)
 .. ;
"RTN","IBCNEDEP",204,0)
 .. I BNDL S HLP("CONTPTR")=$G(OMSGID)
"RTN","IBCNEDEP",205,0)
 .. ; D GENERATE^HLMA(HLEID,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNEDEP",206,0)
 .. D GENERATE^HLMA(IBCNHLP,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNEDEP",207,0)
 .. K ^TMP("HLS",$J),HLP
"RTN","IBCNEDEP",208,0)
 .. ;
"RTN","IBCNEDEP",209,0)
 .. ;  If not successful
"RTN","IBCNEDEP",210,0)
 .. I $P(HLRESLT,U,2)]"" D HLER^IBCNEDEQ Q
"RTN","IBCNEDEP",211,0)
 .. ;  If successful
"RTN","IBCNEDEP",212,0)
 .. D SCC^IBCNEDEQ
"RTN","IBCNEDEP",213,0)
 .. I BNDL D
"RTN","IBCNEDEP",214,0)
 ... I CNT=1 S OMSGID=MSGID
"RTN","IBCNEDEP",215,0)
 ;
"RTN","IBCNEDEP",216,0)
 K HL,IN1,GT1,PID,DFN,^TMP($J,"HLS")
"RTN","IBCNEDEP",217,0)
 Q
"RTN","IBCNEDEP",218,0)
 ;
"RTN","IBCNEDEP",219,0)
ID ;  Send Identification Msgs
"RTN","IBCNEDEP",220,0)
 ;
"RTN","IBCNEDEP",221,0)
 ;  Initialize the HL7 variables based on the HL7 protocol
"RTN","IBCNEDEP",222,0)
 S IBCNHLP="IBCNE IIV RQI OUT"
"RTN","IBCNEDEP",223,0)
 D INIT^IBCNEHLO
"RTN","IBCNEDEP",224,0)
 ;
"RTN","IBCNEDEP",225,0)
 S DFN=""
"RTN","IBCNEDEP",226,0)
 F  S DFN=$O(^TMP("IBQUERY",$J,VNUM,DFN)) Q:DFN=""  D  Q:$G(ZTSTOP)!QFL
"RTN","IBCNEDEP",227,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",228,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",229,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",230,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",231,0)
 . ;
"RTN","IBCNEDEP",232,0)
 . S TOT=0,IEN="",CNT=0,OMSGID="",QFL=0
"RTN","IBCNEDEP",233,0)
 . ;
"RTN","IBCNEDEP",234,0)
 . ;  Get the total # of identification msgs for a patient
"RTN","IBCNEDEP",235,0)
 . F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  S TOT=TOT+1
"RTN","IBCNEDEP",236,0)
 . ;
"RTN","IBCNEDEP",237,0)
 . ;  For each identification transaction generate an HL7 msg
"RTN","IBCNEDEP",238,0)
 . F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  D
"RTN","IBCNEDEP",239,0)
 .. D PROC
"RTN","IBCNEDEP",240,0)
 .. ;
"RTN","IBCNEDEP",241,0)
 .. I VNUM=4 S HLP("CONTPTR")=$G(OMSGID)
"RTN","IBCNEDEP",242,0)
 .. ; D GENERATE^HLMA(HLEID,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNEDEP",243,0)
 .. D GENERATE^HLMA(IBCNHLP,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNEDEP",244,0)
 .. K ^TMP("HLS",$J),HLP
"RTN","IBCNEDEP",245,0)
 .. ;
"RTN","IBCNEDEP",246,0)
 .. ;  If not successful
"RTN","IBCNEDEP",247,0)
 .. I $P(HLRESLT,U,2)]"" D HLER^IBCNEDEQ Q
"RTN","IBCNEDEP",248,0)
 .. ;
"RTN","IBCNEDEP",249,0)
 .. ;  If successful
"RTN","IBCNEDEP",250,0)
 .. D SCC^IBCNEDEQ
"RTN","IBCNEDEP",251,0)
 .. I VNUM=4 D
"RTN","IBCNEDEP",252,0)
 ... I CNT=1 S OMSGID=MSGID
"RTN","IBCNEDEP",253,0)
 ;
"RTN","IBCNEDEP",254,0)
 Q
"RTN","IBCNEDEP",255,0)
 ;
"RTN","IBCNEDEP",256,0)
PROC ;  Process TQ record
"RTN","IBCNEDEP",257,0)
 S TRANSR=$G(^IBCN(365.1,IEN,0))
"RTN","IBCNEDEP",258,0)
 S DFN=$P(TRANSR,U,2),PAYR=$P(TRANSR,U,3),BUFF=$P(TRANSR,U,5)
"RTN","IBCNEDEP",259,0)
 S QUERY=$P(TRANSR,U,11),EXT=$P(TRANSR,U,10),SRVDT=$P(TRANSR,U,12)
"RTN","IBCNEDEP",260,0)
 S IRIEN=$P(TRANSR,U,13),HCT=0,NTRAN=$P(TRANSR,U,7),NRETR=$P(TRANSR,U,8)
"RTN","IBCNEDEP",261,0)
 S SUBID=$P(TRANSR,U,16),OVRIDE=$P(TRANSR,U,14),STA=$P(TRANSR,U,4)
"RTN","IBCNEDEP",262,0)
 S FRDT=$P(TRANSR,U,17),PATID=$P(TRANSR,U,19)
"RTN","IBCNEDEP",263,0)
 ;
"RTN","IBCNEDEP",264,0)
 ;  Build the HL7 msg
"RTN","IBCNEDEP",265,0)
 S HCT=HCT+1,^TMP("HLS",$J,HCT)="PRD|NA"
"RTN","IBCNEDEP",266,0)
 D PID^IBCNEHLQ I PID=""!(PID?."*") Q
"RTN","IBCNEDEP",267,0)
 S HCT=HCT+1,^TMP("HLS",$J,HCT)=$TR(PID,"*","")
"RTN","IBCNEDEP",268,0)
 D GT1^IBCNEHLQ I GT1'="",GT1'?."*" S HCT=HCT+1,^TMP("HLS",$J,HCT)=$TR(GT1,"*","")
"RTN","IBCNEDEP",269,0)
 D IN1^IBCNEHLQ I IN1'="",IN1'?."*" D
"RTN","IBCNEDEP",270,0)
 . S HCT=HCT+1
"RTN","IBCNEDEP",271,0)
 . I VNUM=1 S ^TMP("HLS",$J,HCT)=$TR(IN1,"*","") Q
"RTN","IBCNEDEP",272,0)
 . I VNUM=2,'BNDL S ^TMP("HLS",$J,HCT)=$TR(IN1,"*","") Q
"RTN","IBCNEDEP",273,0)
 . S CNT=CNT+1
"RTN","IBCNEDEP",274,0)
 . S $P(IN1,HLFS,22)=TOT,$P(IN1,HLFS,21)=CNT
"RTN","IBCNEDEP",275,0)
 . S ^TMP("HLS",$J,HCT)=$TR(IN1,"*","")
"RTN","IBCNEDEP",276,0)
 Q
"RTN","IBCNEDEQ")
0^59^B27902088^B27345351
"RTN","IBCNEDEQ",1,0)
IBCNEDEQ ;DAOU/ALA - Process eIV Transactions continued ;21-AUG-2002
"RTN","IBCNEDEQ",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,300,416**;21-MAR-94;Build 58
"RTN","IBCNEDEQ",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDEQ",4,0)
 ;
"RTN","IBCNEDEQ",5,0)
 ;**Program Description**
"RTN","IBCNEDEQ",6,0)
 ;  This program contains some subroutines for processing a transmission
"RTN","IBCNEDEQ",7,0)
 ;
"RTN","IBCNEDEQ",8,0)
HLER ;  HL7 Creation error message
"RTN","IBCNEDEQ",9,0)
 ;
"RTN","IBCNEDEQ",10,0)
 ;  Called from IBCNEDEP
"RTN","IBCNEDEQ",11,0)
 ;
"RTN","IBCNEDEQ",12,0)
 ;  Parameters
"RTN","IBCNEDEQ",13,0)
 ;    HLRESLT = Error from GENERATE^HLMA call
"RTN","IBCNEDEQ",14,0)
 ;    DFN = Patient IEN
"RTN","IBCNEDEQ",15,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEDEQ",16,0)
 ;    MGRP = Mail group
"RTN","IBCNEDEQ",17,0)
 ;    XMSUB = Subject line
"RTN","IBCNEDEQ",18,0)
 ;    MSG = Message array
"RTN","IBCNEDEQ",19,0)
 ;
"RTN","IBCNEDEQ",20,0)
 S HLRESLT="Error - "_$P(HLRESLT,U,2,99)
"RTN","IBCNEDEQ",21,0)
 S MSG(1)=HLRESLT
"RTN","IBCNEDEQ",22,0)
 S MSG(2)="occurred when trying to create the outgoing HL7 message for"
"RTN","IBCNEDEQ",23,0)
 S MSG(3)="Patient: "_$P($G(^DPT(DFN,0)),U,1)_$$SSN(DFN)_" and Payer: "_$P($G(^IBE(365.12,PAYR,0)),U,1)_"."
"RTN","IBCNEDEQ",24,0)
 S MSG(4)="Please contact the Help Desk and report this problem."
"RTN","IBCNEDEQ",25,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEDEQ",26,0)
 S XMSUB="eIV HL7 Creation Error"
"RTN","IBCNEDEQ",27,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",28,0)
 K XMSUB,MSG,HLRESLT
"RTN","IBCNEDEQ",29,0)
 Q
"RTN","IBCNEDEQ",30,0)
 ;
"RTN","IBCNEDEQ",31,0)
CERR ;  Communication Error Mail Message - No Retries defined
"RTN","IBCNEDEQ",32,0)
 ;
"RTN","IBCNEDEQ",33,0)
 ;  Called from IBCNEDEP
"RTN","IBCNEDEQ",34,0)
 ;
"RTN","IBCNEDEQ",35,0)
 ;  Parameters
"RTN","IBCNEDEQ",36,0)
 ;    DFN = Patient IEN
"RTN","IBCNEDEQ",37,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEDEQ",38,0)
 ;    FMSG = Failure message flag
"RTN","IBCNEDEQ",39,0)
 ;    MGRP = Mail group
"RTN","IBCNEDEQ",40,0)
 ;    XMSUB = Subject line
"RTN","IBCNEDEQ",41,0)
 ;    MSG = Message array
"RTN","IBCNEDEQ",42,0)
 ;
"RTN","IBCNEDEQ",43,0)
 I 'FMSG G CERRQ
"RTN","IBCNEDEQ",44,0)
 S XMSUB="eIV Communication Error"
"RTN","IBCNEDEQ",45,0)
 S MSG(1)="VistA was unable to electronically confirm insurance for"
"RTN","IBCNEDEQ",46,0)
 S MSG(2)="Patient: "_$P($G(^DPT(DFN,0)),U)_$$SSN(DFN)_" and Payer: "_$P($G(^IBE(365.12,PAYR,0)),U)_"."
"RTN","IBCNEDEQ",47,0)
 S MSG(3)="A single attempt was made to electronically confirm the insurance"
"RTN","IBCNEDEQ",48,0)
 S MSG(4)="with this payer."
"RTN","IBCNEDEQ",49,0)
 ;
"RTN","IBCNEDEQ",50,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEDEQ",51,0)
 ;
"RTN","IBCNEDEQ",52,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",53,0)
 K MSG,XMSUB
"RTN","IBCNEDEQ",54,0)
CERRQ Q
"RTN","IBCNEDEQ",55,0)
 ;
"RTN","IBCNEDEQ",56,0)
CERE ;  Communication Error Mail Message - Exceeds Retries
"RTN","IBCNEDEQ",57,0)
 ;
"RTN","IBCNEDEQ",58,0)
 ;  Called from IBCNEDEP
"RTN","IBCNEDEQ",59,0)
 ;
"RTN","IBCNEDEQ",60,0)
 ;  Parameters
"RTN","IBCNEDEQ",61,0)
 ;    DFN = Patient IEN
"RTN","IBCNEDEQ",62,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEDEQ",63,0)
 ;    FMSG = Failure message flag
"RTN","IBCNEDEQ",64,0)
 ;    MGRP = Mail group
"RTN","IBCNEDEQ",65,0)
 ;    XMSUB = Subject line
"RTN","IBCNEDEQ",66,0)
 ;    MSG = Message array
"RTN","IBCNEDEQ",67,0)
 ;
"RTN","IBCNEDEQ",68,0)
 I 'FMSG G CEREQ
"RTN","IBCNEDEQ",69,0)
 S XMSUB="eIV Communication Error"
"RTN","IBCNEDEQ",70,0)
 S MSG(1)="VistA was unable to electronically confirm insurance for"
"RTN","IBCNEDEQ",71,0)
 S MSG(2)="Patient: "_$P($G(^DPT(DFN,0)),U)_$$SSN(DFN)_" and Payer: "_$P($G(^IBE(365.12,PAYR,0)),U)_"."
"RTN","IBCNEDEQ",72,0)
 ;
"RTN","IBCNEDEQ",73,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEDEQ",74,0)
 ;
"RTN","IBCNEDEQ",75,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",76,0)
 K MSG,XMSUB
"RTN","IBCNEDEQ",77,0)
CEREQ Q
"RTN","IBCNEDEQ",78,0)
 ;
"RTN","IBCNEDEQ",79,0)
SUB ;  Create HL7 subrecord in TQ file
"RTN","IBCNEDEQ",80,0)
 ;
"RTN","IBCNEDEQ",81,0)
 ;  Called from tag SCC within this routine
"RTN","IBCNEDEQ",82,0)
 ;
"RTN","IBCNEDEQ",83,0)
 ;  Input Parameters
"RTN","IBCNEDEQ",84,0)
 ;    IEN = the transmission IEN
"RTN","IBCNEDEQ",85,0)
 ;    RSIEN = the response IEN
"RTN","IBCNEDEQ",86,0)
 ;    MDTM = the date/time message was created
"RTN","IBCNEDEQ",87,0)
 ;    MSGID = the HL7 message ID
"RTN","IBCNEDEQ",88,0)
 ;
"RTN","IBCNEDEQ",89,0)
 NEW DIC,DIE,X,DA,DLAYGO,Y
"RTN","IBCNEDEQ",90,0)
 S DIC="^IBCN(365.1,"_IEN_",2,",DIE=DIC,X=MDTM,DA(1)=IEN
"RTN","IBCNEDEQ",91,0)
 S DLAYGO=365.16,DIC(0)="L",DIC("P")=DLAYGO
"RTN","IBCNEDEQ",92,0)
 I '$D(^IBCN(365.1,IEN,2,0)) S ^IBCN(365.1,IEN,2,0)="^365.16D^^"
"RTN","IBCNEDEQ",93,0)
 K DD,DO
"RTN","IBCNEDEQ",94,0)
 D FILE^DICN
"RTN","IBCNEDEQ",95,0)
 K DO
"RTN","IBCNEDEQ",96,0)
 S HIEN=+Y
"RTN","IBCNEDEQ",97,0)
 S DR=".02////^S X=MSGID;.03////^S X=RSIEN" D ^DIE
"RTN","IBCNEDEQ",98,0)
 S DA=HIEN D ^DIE
"RTN","IBCNEDEQ",99,0)
 ;
"RTN","IBCNEDEQ",100,0)
 K HIEN,RSIEN,DR,MDTM
"RTN","IBCNEDEQ",101,0)
 Q
"RTN","IBCNEDEQ",102,0)
 ;
"RTN","IBCNEDEQ",103,0)
RESP ;  Create Response Record
"RTN","IBCNEDEQ",104,0)
 ;
"RTN","IBCNEDEQ",105,0)
 ;  Called from IBCNEHL3 tag SCC within this routine
"RTN","IBCNEDEQ",106,0)
 ;
"RTN","IBCNEDEQ",107,0)
 ;  Input Parameters
"RTN","IBCNEDEQ",108,0)
 ;    MSGID = Message Control ID (required)
"RTN","IBCNEDEQ",109,0)
 ;    MDTM = Message date/time created (optional)
"RTN","IBCNEDEQ",110,0)
 ;    DFN = Patient IEN (optional)
"RTN","IBCNEDEQ",111,0)
 ;    PAYR = Payer IEN (optional)
"RTN","IBCNEDEQ",112,0)
 ;    BUFF = Buffer IEN (optional)
"RTN","IBCNEDEQ",113,0)
 ;    IEN = Transmission IEN (optional)
"RTN","IBCNEDEQ",114,0)
 ;    RSTYPE = Response Type (O=Original, U=Unsolicited)
"RTN","IBCNEDEQ",115,0)
 ;
"RTN","IBCNEDEQ",116,0)
 NEW DIC,DIE,X,DA,DLAYGO,Y,RARRAY
"RTN","IBCNEDEQ",117,0)
 S DIC="^IBCN(365,",X=MSGID,DLAYGO=365,DIC(0)="L",DIC("P")=DLAYGO
"RTN","IBCNEDEQ",118,0)
 K DD,DO
"RTN","IBCNEDEQ",119,0)
 D FILE^DICN
"RTN","IBCNEDEQ",120,0)
 K DO
"RTN","IBCNEDEQ",121,0)
 S RSIEN=+Y
"RTN","IBCNEDEQ",122,0)
 S RARRAY(365,RSIEN_",",.02)=$G(DFN),RARRAY(365,RSIEN_",",.03)=$G(PAYR)
"RTN","IBCNEDEQ",123,0)
 I $G(IEN)'="" D
"RTN","IBCNEDEQ",124,0)
 . I $P(^IBCN(365.1,IEN,0),U,18)=1 S RARRAY(365,RSIEN_",",.04)=$G(BUFF)
"RTN","IBCNEDEQ",125,0)
 S RARRAY(365,RSIEN_",",.05)=$G(IEN)
"RTN","IBCNEDEQ",126,0)
 S RARRAY(365,RSIEN_",",.06)=2,RARRAY(365,RSIEN_",",.08)=$G(MDTM)
"RTN","IBCNEDEQ",127,0)
 ;
"RTN","IBCNEDEQ",128,0)
 I $G(RSTYPE)="" S RSTYPE="U"
"RTN","IBCNEDEQ",129,0)
 S RARRAY(365,RSIEN_",",.1)=RSTYPE
"RTN","IBCNEDEQ",130,0)
 ;
"RTN","IBCNEDEQ",131,0)
 D FILE^DIE("I","RARRAY","ERR")
"RTN","IBCNEDEQ",132,0)
 I $D(ERR) D
"RTN","IBCNEDEQ",133,0)
 . S ERFLG=1,MCT=0,VEN=0
"RTN","IBCNEDEQ",134,0)
 . F  S VEN=$O(ERR("DIERR",VEN)) Q:'VEN  D
"RTN","IBCNEDEQ",135,0)
 .. S MCT=MCT+1,MSG(MCT)=$G(ERR("DIERR",VEN,"TEXT",1))
"RTN","IBCNEDEQ",136,0)
 . ;
"RTN","IBCNEDEQ",137,0)
 . S MCT=MCT+1,MSG(MCT)="Please contact the Help Desk and report this problem."
"RTN","IBCNEDEQ",138,0)
 . S XMSUB="Error creating Response"
"RTN","IBCNEDEQ",139,0)
 . D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",140,0)
 . K ERR,VEN,MCT
"RTN","IBCNEDEQ",141,0)
 Q
"RTN","IBCNEDEQ",142,0)
 ;
"RTN","IBCNEDEQ",143,0)
TMRR ;  Communication Timeout message
"RTN","IBCNEDEQ",144,0)
 I 'TMSG Q
"RTN","IBCNEDEQ",145,0)
 S XMSUB="eIV Communication Timeout"
"RTN","IBCNEDEQ",146,0)
 S MSG(1)="No Response has been received within the defined failure days of "_FAIL_" for "
"RTN","IBCNEDEQ",147,0)
 S MSG(3)="Patient: "_$P($G(^DPT(DFN,0)),U,1)_$$SSN(DFN)_" and Payer: "_$P($G(^IBE(365.12,PAYR,0)),U,1)
"RTN","IBCNEDEQ",148,0)
 ;
"RTN","IBCNEDEQ",149,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEDEQ",150,0)
 ;
"RTN","IBCNEDEQ",151,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",152,0)
 K MSG,XMSUB
"RTN","IBCNEDEQ",153,0)
 Q
"RTN","IBCNEDEQ",154,0)
 ;
"RTN","IBCNEDEQ",155,0)
SSN(DFN) ; Retrieve patient's ssn and return last 4 digits
"RTN","IBCNEDEQ",156,0)
 ; Subsequently added Date of Birth to display as well
"RTN","IBCNEDEQ",157,0)
 Q:'$G(DFN) ""
"RTN","IBCNEDEQ",158,0)
 N SSN,DOB
"RTN","IBCNEDEQ",159,0)
 S SSN=$$GETSSN^IBCNEDE5(DFN)
"RTN","IBCNEDEQ",160,0)
 S DOB=$$GETDOB(DFN)
"RTN","IBCNEDEQ",161,0)
 I SSN="",DOB="" Q ""
"RTN","IBCNEDEQ",162,0)
 I SSN="" Q " (DOB: "_DOB_")"
"RTN","IBCNEDEQ",163,0)
 S SSN=" (SSN: xxx-xx-"_$E(SSN,6,9)
"RTN","IBCNEDEQ",164,0)
 I DOB'="" S DOB="  DOB: "_DOB
"RTN","IBCNEDEQ",165,0)
 Q SSN_DOB_")"
"RTN","IBCNEDEQ",166,0)
 ;
"RTN","IBCNEDEQ",167,0)
GETDOB(DFN) ;
"RTN","IBCNEDEQ",168,0)
 Q:'$G(DFN) "Unknown"
"RTN","IBCNEDEQ",169,0)
 N DOB
"RTN","IBCNEDEQ",170,0)
 S DOB=$P($G(^DPT(DFN,0)),U,3)
"RTN","IBCNEDEQ",171,0)
 S DOB=$S('DOB:"Unknown",1:$$FMTE^XLFDT(DOB,"5Z"))
"RTN","IBCNEDEQ",172,0)
 Q DOB
"RTN","IBCNEDEQ",173,0)
 ;
"RTN","IBCNEDEQ",174,0)
SCC ;  If successfully creates an HL7 msg
"RTN","IBCNEDEQ",175,0)
 S MSGID=$P(HLRESLT,U,1),NTRAN=NTRAN+1,MDTM=$$NOW^XLFDT(),IHCNT=IHCNT+1
"RTN","IBCNEDEQ",176,0)
 I NTRAN>1 S NRETR=NRETR+1
"RTN","IBCNEDEQ",177,0)
 D SST^IBCNEUT2(IEN,2)
"RTN","IBCNEDEQ",178,0)
 S DA=IEN,DIE="^IBCN(365.1,",DR=".07////^S X=NTRAN;.08////^S X=NRETR"
"RTN","IBCNEDEQ",179,0)
 D ^DIE
"RTN","IBCNEDEQ",180,0)
 ;
"RTN","IBCNEDEQ",181,0)
 ;  Create Response Record
"RTN","IBCNEDEQ",182,0)
 S RSTYPE="O" D RESP
"RTN","IBCNEDEQ",183,0)
 ;
"RTN","IBCNEDEQ",184,0)
 ;  Create HL7 subrecord
"RTN","IBCNEDEQ",185,0)
 D SUB
"RTN","IBCNEDEQ",186,0)
 ;
"RTN","IBCNEDEQ",187,0)
 ; If a buffer entry exists, set the buffer symbol to a '?'
"RTN","IBCNEDEQ",188,0)
 I BUFF'="" D BUFF^IBCNEUT2(BUFF,10)
"RTN","IBCNEDEQ",189,0)
 Q
"RTN","IBCNEHL1")
0^11^B225142720^B32996551
"RTN","IBCNEHL1",1,0)
IBCNEHL1 ;DAOU/ALA - HL7 Process Incoming RPI Messages ;26-JUN-2002  ; Compiled December 16, 2004 15:29:01
"RTN","IBCNEHL1",2,0)
 ;;2.0;INTEGRATED BILLING;**300,345,416**;21-MAR-94;Build 58
"RTN","IBCNEHL1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHL1",4,0)
 ;
"RTN","IBCNEHL1",5,0)
 ;**Program Description**
"RTN","IBCNEHL1",6,0)
 ;  This program will process incoming IIV response messages.
"RTN","IBCNEHL1",7,0)
 ;  This includes updating the record in the IIV Response File,
"RTN","IBCNEHL1",8,0)
 ;  updating the Buffer record (if there is one and creating a new
"RTN","IBCNEHL1",9,0)
 ;  one if there isn't) with the appropriate Buffer Symbol and data
"RTN","IBCNEHL1",10,0)
 ;  
"RTN","IBCNEHL1",11,0)
 ;  This routine is based on IBCNEHLR which was introduced with patch 184, and subsequently
"RTN","IBCNEHL1",12,0)
 ;  patched with patches 252 and 271.  IBCNEHLR is obsolete and deleted with patch 300.
"RTN","IBCNEHL1",13,0)
 ;
"RTN","IBCNEHL1",14,0)
 ;**Modified by  Date        Reason
"RTN","IBCNEHL1",15,0)
 ;  DAOU/BHS     10/04/2002  Added logic to update the service date in
"RTN","IBCNEHL1",16,0)
 ;                           the TQ entry so long as the Error Action is
"RTN","IBCNEHL1",17,0)
 ;                           not Please submit original transaction.
"RTN","IBCNEHL1",18,0)
 ;  DAOU/DB      03/11/2004  Added logic to utilize new status flag
"RTN","IBCNEHL1",19,0)
 ;                           transmitted to VistA from EC (IIVSTAT)
"RTN","IBCNEHL1",20,0)
 ;               03/15/2004  Update other retries to comm failure (if
"RTN","IBCNEHL1",21,0)
 ;                           not response rcvd)
"RTN","IBCNEHL1",22,0)
 ;  DAOU/BEE     07/14/2004  Cleaned up routine - Made more readable
"RTN","IBCNEHL1",23,0)
 ;                           Cleaned up variables                          
"RTN","IBCNEHL1",24,0)
 ;  PROXICOM/RTO 08/23/2006  Fixed logic issue when determining whether
"RTN","IBCNEHL1",25,0)
 ;                           to update a buffer entry
"RTN","IBCNEHL1",26,0)
 ;
"RTN","IBCNEHL1",27,0)
 ;  Variables
"RTN","IBCNEHL1",28,0)
 ;    SEG = HL7 Segment Name
"RTN","IBCNEHL1",29,0)
 ;    MSGID = Original Message Control ID
"RTN","IBCNEHL1",30,0)
 ;    ACK =  Acknowledgment (AA=Accepted, AE=Error)
"RTN","IBCNEHL1",31,0)
 ;    ERTXT = Error Message Text
"RTN","IBCNEHL1",32,0)
 ;    ERFLG = Error quit flag
"RTN","IBCNEHL1",33,0)
 ;    ERACT = Error Action
"RTN","IBCNEHL1",34,0)
 ;    ERCON = Error Condition
"RTN","IBCNEHL1",35,0)
 ;    RIEN = Response Record IEN
"RTN","IBCNEHL1",36,0)
 ;    IIVSTAT = EC generated flag interpreting status of response
"RTN","IBCNEHL1",37,0)
 ;              1 = +
"RTN","IBCNEHL1",38,0)
 ;              6 = -
"RTN","IBCNEHL1",39,0)
 ;              V = #
"RTN","IBCNEHL1",40,0)
 ;    MAP = Array that maps EC's IIV status flag to IIV STATUS TABLE (#365.15)   IEN
"RTN","IBCNEHL1",41,0)
 ;
"RTN","IBCNEHL1",42,0)
EN ; Entry Point
"RTN","IBCNEHL1",43,0)
 N AUTO,EBDA,ERFLG,ERROR,G2OFLG,HCT,HLCMP,HLREP,HLSCMP,IIVSTAT,IRIEN,MAP,MGRP,RIEN,RSUPDT,SEG,SUBID,TRACE,UP,ACK
"RTN","IBCNEHL1",44,0)
 S (ERFLG,G2OFLG)=0,MGRP=$$MGRP^IBCNEUT5(),HCT=1,SUBID="",IIVSTAT=""
"RTN","IBCNEHL1",45,0)
 ;
"RTN","IBCNEHL1",46,0)
 S HLCMP=$E(HL("ECH")) ; HL7 component separator
"RTN","IBCNEHL1",47,0)
 S HLSCMP=$E(HL("ECH"),4) ; HL7 subcomponent separator
"RTN","IBCNEHL1",48,0)
 S HLREP=$E(HL("ECH"),2) ; HL7 repetition separator
"RTN","IBCNEHL1",49,0)
 ; Create map from EC to VistA
"RTN","IBCNEHL1",50,0)
 S MAP(1)=8,MAP(6)=9,MAP("V")=21
"RTN","IBCNEHL1",51,0)
 ;
"RTN","IBCNEHL1",52,0)
 ;  Loop through the message and find each segment for processing
"RTN","IBCNEHL1",53,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:ERFLG
"RTN","IBCNEHL1",54,0)
 . D SPAR^IBCNEHLU
"RTN","IBCNEHL1",55,0)
 . S SEG=$G(IBSEG(1))
"RTN","IBCNEHL1",56,0)
 . ; check if we are inside G2O group of segments
"RTN","IBCNEHL1",57,0)
 . I SEG="ZTY" S G2OFLG=1
"RTN","IBCNEHL1",58,0)
 . I G2OFLG,SEG'="ZTY",SEG'="CTD" S G2OFLG=0
"RTN","IBCNEHL1",59,0)
 . ; If we are outside of Z_Benefit_group, kill EB multiple ien
"RTN","IBCNEHL1",60,0)
 . I +$G(EBDA),".MSH.MSA.PRD.PID.GT1.IN1.IN3."[("."_SEG_".")!('G2OFLG&(SEG="CTD")) K EBDA
"RTN","IBCNEHL1",61,0)
 . ;
"RTN","IBCNEHL1",62,0)
 . I SEG="MSA" D MSA^IBCNEHL2(.ERACT,.ERCON,.ERROR,.ERTXT,.IBSEG,MGRP,.RIEN,.TRACE) Q:ERFLG
"RTN","IBCNEHL1",63,0)
 . ;
"RTN","IBCNEHL1",64,0)
 . ;  Contact Segment
"RTN","IBCNEHL1",65,0)
 . I SEG="CTD",'G2OFLG D CTD^IBCNEHL2(.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",66,0)
 . ;
"RTN","IBCNEHL1",67,0)
 . ;  Patient Segment
"RTN","IBCNEHL1",68,0)
 . I SEG="PID" D PID^IBCNEHL2(.ERFLG,.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",69,0)
 . ;
"RTN","IBCNEHL1",70,0)
 . ;  Guarantor Segment
"RTN","IBCNEHL1",71,0)
 . I SEG="GT1" D GT1^IBCNEHL2(.ERROR,.IBSEG,RIEN,.SUBID)
"RTN","IBCNEHL1",72,0)
 . ;
"RTN","IBCNEHL1",73,0)
 . ;  Insurance Segment
"RTN","IBCNEHL1",74,0)
 . I SEG="IN1" D IN1^IBCNEHL2(.ERROR,.IBSEG,RIEN,SUBID)
"RTN","IBCNEHL1",75,0)
 . ;
"RTN","IBCNEHL1",76,0)
 . ;  Addt'l Insurance Segment
"RTN","IBCNEHL1",77,0)
 . ;I SEG="IN2" ; for future expansion, add IN2 tag to IBCNEHL2
"RTN","IBCNEHL1",78,0)
 . ;
"RTN","IBCNEHL1",79,0)
 . ;  Addt'l Insurance - Cert Segment
"RTN","IBCNEHL1",80,0)
 . I SEG="IN3" D IN3^IBCNEHL2(.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",81,0)
 . ;
"RTN","IBCNEHL1",82,0)
 . ;  Eligibility/Benefit Segment
"RTN","IBCNEHL1",83,0)
 . I SEG="ZEB" D ZEB^IBCNEHL2(.EBDA,.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",84,0)
 . ;
"RTN","IBCNEHL1",85,0)
 . ; Healthcare Delivery Segment
"RTN","IBCNEHL1",86,0)
 . I SEG="ZHS" D ZHS^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",87,0)
 . ;
"RTN","IBCNEHL1",88,0)
 . ; Reference ID Segment
"RTN","IBCNEHL1",89,0)
 . I SEG="ZRF" D ZRF^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",90,0)
 . ;
"RTN","IBCNEHL1",91,0)
 . ; Subscriber Date Segment
"RTN","IBCNEHL1",92,0)
 . I SEG="ZSD" D ZSD^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",93,0)
 . ;
"RTN","IBCNEHL1",94,0)
 . ; Subscriber Additional Info Segment
"RTN","IBCNEHL1",95,0)
 . I SEG="ZII" D ZII^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",96,0)
 . ;
"RTN","IBCNEHL1",97,0)
 . ; Benefit Related Entity Segment
"RTN","IBCNEHL1",98,0)
 . I SEG="ZTY" D ZTY^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",99,0)
 . ;
"RTN","IBCNEHL1",100,0)
 . ; Benefit Related Entity Contact Segment
"RTN","IBCNEHL1",101,0)
 . I SEG="CTD",G2OFLG D G2OCTD^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",102,0)
 . ;
"RTN","IBCNEHL1",103,0)
 . ;  Notes Segment
"RTN","IBCNEHL1",104,0)
 . I SEG="NTE" D NTE^IBCNEHL2(EBDA,.IBSEG,RIEN)
"RTN","IBCNEHL1",105,0)
 ;
"RTN","IBCNEHL1",106,0)
 S AUTO=$$AUTOUPD(RIEN)
"RTN","IBCNEHL1",107,0)
 I $G(ERACT)="",$G(ERTXT)="",'$D(ERROR),+AUTO D  Q
"RTN","IBCNEHL1",108,0)
 .D:$P(AUTO,U,3)'="" AUTOFIL($P(AUTO,U,2),$P(AUTO,U,3),$P(AUTO,U,6))
"RTN","IBCNEHL1",109,0)
 .D:$P(AUTO,U,4)'="" AUTOFIL($P(AUTO,U,2),$P(AUTO,U,4),$P(AUTO,U,6))
"RTN","IBCNEHL1",110,0)
 .Q
"RTN","IBCNEHL1",111,0)
 D FIL
"RTN","IBCNEHL1",112,0)
 Q
"RTN","IBCNEHL1",113,0)
 ;
"RTN","IBCNEHL1",114,0)
 ; =================================================================
"RTN","IBCNEHL1",115,0)
AUTOFIL(DFN,IEN312,ISSUB) ; Finish processing the response message - file directly into patient insurance
"RTN","IBCNEHL1",116,0)
 ;
"RTN","IBCNEHL1",117,0)
 N BUFF,DATA,ERROR,IENS,PREL,RDATA0,RDATA1,RDATA5,RSTYPE,TQN,TSTAMP
"RTN","IBCNEHL1",118,0)
 ;
"RTN","IBCNEHL1",119,0)
 Q:$G(RIEN)=""
"RTN","IBCNEHL1",120,0)
 S TSTAMP=$$NOW^XLFDT(),IENS=IEN312_","_DFN_","
"RTN","IBCNEHL1",121,0)
 S RDATA0=$G(^IBCN(365,RIEN,0)),RDATA1=$G(^IBCN(365,RIEN,1)),RDATA5=$G(^IBCN(365,RIEN,5))
"RTN","IBCNEHL1",122,0)
 S TQN=$P(RDATA0,U,5),RSTYPE=$P(RDATA0,U,10)
"RTN","IBCNEHL1",123,0)
 I ISSUB S DATA(2.312,IENS,17)=$P(RDATA1,U) ; name
"RTN","IBCNEHL1",124,0)
 S DATA(2.312,IENS,3.01)=$P(RDATA1,U,2) ; dob
"RTN","IBCNEHL1",125,0)
 S DATA(2.312,IENS,3.05)=$P(RDATA1,U,3) ; ssn
"RTN","IBCNEHL1",126,0)
 I ISSUB,$P(RDATA1,U,8)'="" S DATA(2.312,IENS,6)=$P(RDATA1,U,8) ; whose insurance
"RTN","IBCNEHL1",127,0)
 S PREL=$$PREL($P(RDATA1,U,9),$$GET1^DIQ(2.312,IENS,4.03,"I"))
"RTN","IBCNEHL1",128,0)
 I ISSUB,PREL'="" S DATA(2.312,IENS,4.03)=PREL ; pt. relationship
"RTN","IBCNEHL1",129,0)
 ;
"RTN","IBCNEHL1",130,0)
 S DATA(2.312,IENS,1.03)=TSTAMP ; date last verified
"RTN","IBCNEHL1",131,0)
 S DATA(2.312,IENS,1.04)="" ; last verified by
"RTN","IBCNEHL1",132,0)
 S DATA(2.312,IENS,1.05)=TSTAMP ; date last edited
"RTN","IBCNEHL1",133,0)
 S DATA(2.312,IENS,1.06)="" ; last edited by
"RTN","IBCNEHL1",134,0)
 S DATA(2.312,IENS,1.09)=5 ; source of info = eIV
"RTN","IBCNEHL1",135,0)
 ;subscriber address
"RTN","IBCNEHL1",136,0)
 S DATA(2.312,IENS,3.06)=$P(RDATA5,U) ; street line 1
"RTN","IBCNEHL1",137,0)
 S DATA(2.312,IENS,3.07)=$P(RDATA5,U,2) ; street line 2
"RTN","IBCNEHL1",138,0)
 S DATA(2.312,IENS,3.08)=$P(RDATA5,U,3) ; city
"RTN","IBCNEHL1",139,0)
 S DATA(2.312,IENS,3.09)=$P(RDATA5,U,4) ; state
"RTN","IBCNEHL1",140,0)
 S DATA(2.312,IENS,3.1)=$P(RDATA5,U,5) ; zip
"RTN","IBCNEHL1",141,0)
 ;
"RTN","IBCNEHL1",142,0)
 D FILE^DIE("ET","DATA","ERROR") I $D(ERROR) D WARN K ERROR D FIL Q
"RTN","IBCNEHL1",143,0)
 ; set eIV auto-update field separately because of the trigger on field 1.05
"RTN","IBCNEHL1",144,0)
 K DATA S DATA(2.312,IENS,4.04)="YES" D FILE^DIE("ET","DATA","ERROR") I $D(ERROR) D WARN Q
"RTN","IBCNEHL1",145,0)
 ; file new EB data
"RTN","IBCNEHL1",146,0)
 S ERFLG=$$EBFILE(DFN,IEN312,RIEN,1)
"RTN","IBCNEHL1",147,0)
 ; bail out if something went wrong during filing of EB data
"RTN","IBCNEHL1",148,0)
 I $G(ERFLG) Q
"RTN","IBCNEHL1",149,0)
 ; update insurance record ien in transmission queue
"RTN","IBCNEHL1",150,0)
 D UPDIREC(RIEN,IEN312)
"RTN","IBCNEHL1",151,0)
 ;  For an original response, set the Transmission Queue Status to 'Response Received' &
"RTN","IBCNEHL1",152,0)
 ;  update remaining retries to comm failure (5)
"RTN","IBCNEHL1",153,0)
 I $G(RSTYPE)="O" D SST^IBCNEUT2(TQN,3),RSTA^IBCNEUT7(TQN)
"RTN","IBCNEHL1",154,0)
 ; update buffer file entry so only stub remains and status is changed
"RTN","IBCNEHL1",155,0)
 S BUFF=+$P($G(^IBCN(365,RIEN,0)),U,4)
"RTN","IBCNEHL1",156,0)
 I BUFF D
"RTN","IBCNEHL1",157,0)
 .D STATUS^IBCNBEE(BUFF,"A",0,0,0) ; update buffer entry's status to accepted
"RTN","IBCNEHL1",158,0)
 .D DELDATA^IBCNBED(BUFF) ; delete buffer's insurance/patient data
"RTN","IBCNEHL1",159,0)
 .Q
"RTN","IBCNEHL1",160,0)
 Q
"RTN","IBCNEHL1",161,0)
 ;
"RTN","IBCNEHL1",162,0)
FIL ; Finish processing the response message - file into insurance buffer
"RTN","IBCNEHL1",163,0)
 ;
"RTN","IBCNEHL1",164,0)
 ; Input Variables
"RTN","IBCNEHL1",165,0)
 ; ERACT, ERFLG, ERROR, IIVSTAT, MAP, RIEN, TRACE
"RTN","IBCNEHL1",166,0)
 ;
"RTN","IBCNEHL1",167,0)
 ; If no record IEN, quit
"RTN","IBCNEHL1",168,0)
 I $G(RIEN)="" Q
"RTN","IBCNEHL1",169,0)
 ;
"RTN","IBCNEHL1",170,0)
 N BUFF,DFN,FILEIT,IBFDA,IBIEN,IBQFL,RDAT0,RSRVDT,RSTYPE,SYMBOL,TQDATA,TQN,TQSRVDT
"RTN","IBCNEHL1",171,0)
 ; Initialize variables from the Response File
"RTN","IBCNEHL1",172,0)
 S RDAT0=$G(^IBCN(365,RIEN,0)),TQN=$P(RDAT0,U,5)
"RTN","IBCNEHL1",173,0)
 S TQDATA=$G(^IBCN(365.1,TQN,0))
"RTN","IBCNEHL1",174,0)
 S IBQFL=$P(TQDATA,U,11)
"RTN","IBCNEHL1",175,0)
 S DFN=$P(RDAT0,U,2),BUFF=$P(RDAT0,U,4)
"RTN","IBCNEHL1",176,0)
 S IBIEN=$P(TQDATA,U,5),RSTYPE=$P(RDAT0,U,10)
"RTN","IBCNEHL1",177,0)
 S RSRVDT=$P($G(^IBCN(365,RIEN,1)),U,10)
"RTN","IBCNEHL1",178,0)
 ;
"RTN","IBCNEHL1",179,0)
 ; If an unknown error action or an error filing the response message,
"RTN","IBCNEHL1",180,0)
 ; send a warning email message
"RTN","IBCNEHL1",181,0)
 ; Note - A call to UEACT will always set ERFLAG=1
"RTN","IBCNEHL1",182,0)
 I ",W,X,R,P,C,N,Y,S,"'[(","_$G(ERACT)_",")&($G(ERACT)'="")!$D(ERROR) D UEACT
"RTN","IBCNEHL1",183,0)
 ;
"RTN","IBCNEHL1",184,0)
 ; If an error occurred, processing complete
"RTN","IBCNEHL1",185,0)
 I $G(ERFLG)=1 Q
"RTN","IBCNEHL1",186,0)
 ;
"RTN","IBCNEHL1",187,0)
 ;  For an original response, set the Transmission Queue Status to 'Response Received' &
"RTN","IBCNEHL1",188,0)
 ;  update remaining retries to comm failure (5)
"RTN","IBCNEHL1",189,0)
 I $G(RSTYPE)="O" D SST^IBCNEUT2(TQN,3),RSTA^IBCNEUT7(TQN)
"RTN","IBCNEHL1",190,0)
 ;
"RTN","IBCNEHL1",191,0)
 ; Update the TQ service date to the date in the response file
"RTN","IBCNEHL1",192,0)
 ; if they are different AND the Error Action <>
"RTN","IBCNEHL1",193,0)
 ; 'P' for 'Please submit original transaction'
"RTN","IBCNEHL1",194,0)
 ;
"RTN","IBCNEHL1",195,0)
 ; *** Temporary change to suppress update of service & freshness dates.
"RTN","IBCNEHL1",196,0)
 ; *** To reinstate, remove comment (;) from next line.
"RTN","IBCNEHL1",197,0)
 ;I TQN'="",$G(RSTYPE)="O" D
"RTN","IBCNEHL1",198,0)
 ;. S TQSRVDT=$P($G(^IBCN(365.1,TQN,0)),U,12)
"RTN","IBCNEHL1",199,0)
 ;. I RSRVDT'="",TQSRVDT'=RSRVDT,$G(ERACT)'="P" D SAVETQ^IBCNEUT2(TQN,RSRVDT)
"RTN","IBCNEHL1",200,0)
 ;. ; update freshness date by same delta
"RTN","IBCNEHL1",201,0)
 ;. D SAVFRSH^IBCNEUT5(TQN,+$$FMDIFF^XLFDT(RSRVDT,TQSRVDT,1))
"RTN","IBCNEHL1",202,0)
 ;
"RTN","IBCNEHL1",203,0)
 ;  Check for error action
"RTN","IBCNEHL1",204,0)
 I $G(ERACT)'=""!($G(ERTXT)'="") D ERROR^IBCNEHL3(TQN,ERACT,ERCON,TRACE) G FILX
"RTN","IBCNEHL1",205,0)
 ;
"RTN","IBCNEHL1",206,0)
 ; Stop processing if identification response and not an active policy
"RTN","IBCNEHL1",207,0)
 S FILEIT=1
"RTN","IBCNEHL1",208,0)
 I $G(IIVSTAT)=6,TQN]"" D
"RTN","IBCNEHL1",209,0)
 . I TQDATA="" Q
"RTN","IBCNEHL1",210,0)
 . I IBQFL'="I" Q
"RTN","IBCNEHL1",211,0)
 . S FILEIT=0
"RTN","IBCNEHL1",212,0)
 I 'FILEIT G FILX
"RTN","IBCNEHL1",213,0)
 ;
"RTN","IBCNEHL1",214,0)
 ;  If there is an associated buffer entry & one or both of the following
"RTN","IBCNEHL1",215,0)
 ;  is true, stop filing (don't update buffer entry)
"RTN","IBCNEHL1",216,0)
 ;  1) buffer status is not 'Entered'
"RTN","IBCNEHL1",217,0)
 ;  2) the buffer entry is verified (* symbol)
"RTN","IBCNEHL1",218,0)
 I BUFF'="",($P($G(^IBA(355.33,BUFF,0)),U,4)'="E")!($$SYMBOL^IBCNBLL(BUFF)="*") G FILX
"RTN","IBCNEHL1",219,0)
 ;
"RTN","IBCNEHL1",220,0)
 ;  Set buffer symbol based on value returned from EC
"RTN","IBCNEHL1",221,0)
 S SYMBOL=MAP(IIVSTAT)
"RTN","IBCNEHL1",222,0)
 ;
"RTN","IBCNEHL1",223,0)
 ;  If there is an associated buffer entry, update the buffer entry w/
"RTN","IBCNEHL1",224,0)
 ;  response data
"RTN","IBCNEHL1",225,0)
 I BUFF'="" D RP^IBCNEBF(RIEN,"",BUFF)
"RTN","IBCNEHL1",226,0)
 ;
"RTN","IBCNEHL1",227,0)
 ;  If no associated buffer entry, create one & populate w/ response
"RTN","IBCNEHL1",228,0)
 ;  data (routine call sets IBFDA)
"RTN","IBCNEHL1",229,0)
 I BUFF="" D RP^IBCNEBF(RIEN,1) S BUFF=+IBFDA,UP(365,RIEN_",",.04)=BUFF
"RTN","IBCNEHL1",230,0)
 ;
"RTN","IBCNEHL1",231,0)
 ;  Set eIV Processed Date to now
"RTN","IBCNEHL1",232,0)
 S UP(355.33,BUFF_",",.15)=$$NOW^XLFDT()
"RTN","IBCNEHL1",233,0)
 D FILE^DIE("I","UP","ERROR")
"RTN","IBCNEHL1",234,0)
FILX ;
"RTN","IBCNEHL1",235,0)
 Q
"RTN","IBCNEHL1",236,0)
 ;
"RTN","IBCNEHL1",237,0)
 ; =================================================================
"RTN","IBCNEHL1",238,0)
WARN ;  Create and send a response processing error warning message
"RTN","IBCNEHL1",239,0)
 ;
"RTN","IBCNEHL1",240,0)
 ; Input Variables
"RTN","IBCNEHL1",241,0)
 ; ERROR, TRACE
"RTN","IBCNEHL1",242,0)
 ;
"RTN","IBCNEHL1",243,0)
 ; Output Variables
"RTN","IBCNEHL1",244,0)
 ; ERFLG=1
"RTN","IBCNEHL1",245,0)
 ;
"RTN","IBCNEHL1",246,0)
 N MCT,MSG,SUBCNT,VEN,XMY
"RTN","IBCNEHL1",247,0)
 S VEN=0,MCT=8,ERFLG=1,SUBCNT=""
"RTN","IBCNEHL1",248,0)
 S MSG(1)="IMPORTANT: Error While Processing Response Message from the EC"
"RTN","IBCNEHL1",249,0)
 S MSG(2)="-------------------------------------------------------------"
"RTN","IBCNEHL1",250,0)
 S MSG(3)="*** IRM *** Please contact Help Desk because the"
"RTN","IBCNEHL1",251,0)
 S MSG(4)="response message received from the Eligibility Communicator"
"RTN","IBCNEHL1",252,0)
 S MSG(5)="could not be processed.  Programming changes may be necessary"
"RTN","IBCNEHL1",253,0)
 S MSG(6)="to properly handle the response."
"RTN","IBCNEHL1",254,0)
 S MSG(7)="The associated Trace # is "_$S($G(TRACE)="":"Unknown",1:TRACE)_". If applicable,"
"RTN","IBCNEHL1",255,0)
 S MSG(8)="please review the response with the eIV Response Report by Trace#."
"RTN","IBCNEHL1",256,0)
 F  S VEN=$O(ERROR("DIERR",VEN)) Q:'VEN  D
"RTN","IBCNEHL1",257,0)
 . F  S SUBCNT=$O(ERROR("DIERR",VEN,"TEXT",SUBCNT)) Q:'SUBCNT  D
"RTN","IBCNEHL1",258,0)
 . . S MCT=MCT+1,MSG(MCT)=ERROR("DIERR",VEN,"TEXT",SUBCNT)
"RTN","IBCNEHL1",259,0)
 . S MCT=MCT+1,MSG(MCT)=" "
"RTN","IBCNEHL1",260,0)
 D MSG^IBCNEUT5(MGRP,MSG(1),"MSG(",,.XMY)
"RTN","IBCNEHL1",261,0)
 Q
"RTN","IBCNEHL1",262,0)
 ;
"RTN","IBCNEHL1",263,0)
 ; =================================================================
"RTN","IBCNEHL1",264,0)
UEACT ; Send warning msg if Unknown Error Action Code was received or
"RTN","IBCNEHL1",265,0)
 ; encountered problem filing date
"RTN","IBCNEHL1",266,0)
 ;
"RTN","IBCNEHL1",267,0)
 ; Input Variables
"RTN","IBCNEHL1",268,0)
 ; ERROR, IBIEN, IBQFL, RIEN, RSTYPE, TQDATA, TRACE
"RTN","IBCNEHL1",269,0)
 ;
"RTN","IBCNEHL1",270,0)
 ; Output Variables
"RTN","IBCNEHL1",271,0)
 ; ERFLG=1 (SET IN WARN TAG)
"RTN","IBCNEHL1",272,0)
 ;
"RTN","IBCNEHL1",273,0)
 N DFN,SYMBOL
"RTN","IBCNEHL1",274,0)
 D WARN  ; send warning msg
"RTN","IBCNEHL1",275,0)
 ;
"RTN","IBCNEHL1",276,0)
 ; If the response could not be created or there is no associated TQ entry, stop processing
"RTN","IBCNEHL1",277,0)
 I '$G(RIEN)!(TQDATA="") Q
"RTN","IBCNEHL1",278,0)
 ;
"RTN","IBCNEHL1",279,0)
 ;  For an original response, set the Transmission Queue Status to 'Response Received' &
"RTN","IBCNEHL1",280,0)
 ;  update remaining retries to comm failure (5)
"RTN","IBCNEHL1",281,0)
 I $G(RSTYPE)="O" D SST^IBCNEUT2(TQN,3),RSTA^IBCNEUT7(TQN)
"RTN","IBCNEHL1",282,0)
 ;
"RTN","IBCNEHL1",283,0)
 ; If it is an identification and policy is not active don't
"RTN","IBCNEHL1",284,0)
 ; create buffer entry
"RTN","IBCNEHL1",285,0)
 I IBQFL="I",IIVSTAT'=1 Q
"RTN","IBCNEHL1",286,0)
 ;
"RTN","IBCNEHL1",287,0)
 ; If unsolicited message or no buffer in TQ, create new buffer entry
"RTN","IBCNEHL1",288,0)
 I RSTYPE="U" S IBIEN=""
"RTN","IBCNEHL1",289,0)
 I IBIEN="" D  Q
"RTN","IBCNEHL1",290,0)
 .  S DFN=$P(TQDATA,U,2)        ; Determine Patient DFN
"RTN","IBCNEHL1",291,0)
 .  S SYMBOL=22 D BUF^IBCNEHL3  ; Create a new buffer entry
"RTN","IBCNEHL1",292,0)
 ;
"RTN","IBCNEHL1",293,0)
 ;Update buffer symbol
"RTN","IBCNEHL1",294,0)
 D BUFF^IBCNEUT2(IBIEN,22)
"RTN","IBCNEHL1",295,0)
 ;
"RTN","IBCNEHL1",296,0)
 Q
"RTN","IBCNEHL1",297,0)
AUTOUPD(RIEN) ;
"RTN","IBCNEHL1",298,0)
 ; Returns "1^file 2 ien^file 2.312 ien^2nd file 2.312 ien^Medicare flag^subsriber flag", if entry
"RTN","IBCNEHL1",299,0)
 ; in file 365 is eligible for auto-update, returns 0 otherwise.
"RTN","IBCNEHL1",300,0)
 ;
"RTN","IBCNEHL1",301,0)
 ; Medicare flag: 1 for Medicare, 0 otherwise
"RTN","IBCNEHL1",302,0)
 ; Subscriber flag: 1 if patient is the subscriber, 0 otherwise
"RTN","IBCNEHL1",303,0)
 ;
"RTN","IBCNEHL1",304,0)
 ; For non-Medicare response: 1st file 2.312 ien is set, 2nd file 2.312 ien is empty, pieces 5-7 are empty
"RTN","IBCNEHL1",305,0)
 ; For Medicare response: 1st file 2.312 ien contains ien for Medicare Part A, 2nd file 2.312 ien contains ien for Medicare Part B,
"RTN","IBCNEHL1",306,0)
 ;                        either one may be empty, but at least one of them is set if entry is eligible.
"RTN","IBCNEHL1",307,0)
 ;
"RTN","IBCNEHL1",308,0)
 ; RIEN - ien in file 365
"RTN","IBCNEHL1",309,0)
 ;
"RTN","IBCNEHL1",310,0)
 N APPIEN,GDATA,GIEN,GNAME,GNUM,GOK,IEN2,IEN312,IEN36,IDATA0,IDATA3,ISSUB,MWNRA,MWNRB,MWNRIEN,MWNRTYP
"RTN","IBCNEHL1",311,0)
 N ONEPOL,PIEN,RDATA0,RDATA1,RES,TQIEN
"RTN","IBCNEHL1",312,0)
 S RES=0
"RTN","IBCNEHL1",313,0)
 I +$G(RIEN)'>0 Q RES  ; invalid ien for file 365
"RTN","IBCNEHL1",314,0)
 S RDATA0=$G(^IBCN(365,RIEN,0)),RDATA1=$G(^IBCN(365,RIEN,1))
"RTN","IBCNEHL1",315,0)
 S PIEN=$P(RDATA0,U,3) I +PIEN>0 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNEHL1",316,0)
 I +$G(APPIEN)'>0 Q RES  ; couldn't find eIV application entry
"RTN","IBCNEHL1",317,0)
 I $P(^IBE(365.12,PIEN,1,APPIEN,0),U,7)=0 Q RES  ; auto-accept is OFF
"RTN","IBCNEHL1",318,0)
 S IEN2=$P(RDATA0,U,2) I +IEN2'>0 Q RES  ; couldn't find patient
"RTN","IBCNEHL1",319,0)
 S MWNRIEN=$P($G(^IBE(350.9,1,51)),U,25),MWNRTYP=0,(MWNRA,MWNRB)=""
"RTN","IBCNEHL1",320,0)
 I PIEN=MWNRIEN S MWNRTYP=$$ISMCR^IBCNEHLU(RIEN)
"RTN","IBCNEHL1",321,0)
 S ONEPOL=$$ONEPOL^IBCNEHLU(PIEN,IEN2)
"RTN","IBCNEHL1",322,0)
 ; try to find a matching pat. insurance
"RTN","IBCNEHL1",323,0)
 S IEN36="" F  S IEN36=$O(^DIC(36,"AC",PIEN,IEN36)) Q:IEN36=""!(RES>0)  D
"RTN","IBCNEHL1",324,0)
 .S IEN312="" F  S IEN312=$O(^DPT(IEN2,.312,"B",IEN36,IEN312)) Q:IEN312=""!(RES>0&('+MWNRTYP))  D
"RTN","IBCNEHL1",325,0)
 ..S IDATA0=$G(^DPT(IEN2,.312,IEN312,0)),IDATA3=$G(^DPT(IEN2,.312,IEN312,3))
"RTN","IBCNEHL1",326,0)
 ..I $$EXPIRED^IBCNEDE2($P(IDATA0,U,4)) Q  ; Insurance policy has expired
"RTN","IBCNEHL1",327,0)
 ..S ISSUB=$$PATISSUB^IBCNEHLU(IDATA0)
"RTN","IBCNEHL1",328,0)
 ..; Patient is the subscriber
"RTN","IBCNEHL1",329,0)
 ..I ISSUB,'$$CHK1 Q
"RTN","IBCNEHL1",330,0)
 ..; Patient is the dependent
"RTN","IBCNEHL1",331,0)
 ..I 'ISSUB,'$$CHK2(MWNRTYP) Q
"RTN","IBCNEHL1",332,0)
 ..; check group number
"RTN","IBCNEHL1",333,0)
 ..S GNUM=$P(RDATA1,U,7),GIEN=+$P(IDATA0,U,18),GOK=1
"RTN","IBCNEHL1",334,0)
 ..; check non-Medicare group number
"RTN","IBCNEHL1",335,0)
 ..I '+MWNRTYP D  Q:'GOK  ; Group number doesn't match
"RTN","IBCNEHL1",336,0)
 ...I 'ONEPOL D
"RTN","IBCNEHL1",337,0)
 ....I GIEN'>0 S GOK=0 Q
"RTN","IBCNEHL1",338,0)
 ....S GNUM1=$P($G(^IBA(355.3,GIEN,0)),U,4)
"RTN","IBCNEHL1",339,0)
 ....I GNUM=""!(GNUM1="")!(GNUM'=GNUM1) S GOK=0
"RTN","IBCNEHL1",340,0)
 ....Q
"RTN","IBCNEHL1",341,0)
 ...I ONEPOL D
"RTN","IBCNEHL1",342,0)
 ....I GNUM'="",GIEN'="" S GNUM1=$P($G(^IBA(355.3,GIEN,0)),U,4) I GNUM1'="",GNUM'=GNUM1 S GOK=0
"RTN","IBCNEHL1",343,0)
 ....Q
"RTN","IBCNEHL1",344,0)
 ...Q
"RTN","IBCNEHL1",345,0)
 ..; check for Medicare part A/B
"RTN","IBCNEHL1",346,0)
 ..I +MWNRTYP D  Q:'GOK  ; Group number doesn't match
"RTN","IBCNEHL1",347,0)
 ...I GIEN'>0 S GOK=0 Q
"RTN","IBCNEHL1",348,0)
 ...S GDATA=$G(^IBA(355.3,GIEN,0))
"RTN","IBCNEHL1",349,0)
 ...I $P(GDATA,U,14)="A" D
"RTN","IBCNEHL1",350,0)
 ....I $P(MWNRTYP,U,2)="MA"!($P(MWNRTYP,U,2)="B") S MWNRA=IEN312 Q
"RTN","IBCNEHL1",351,0)
 ....S GOK=0
"RTN","IBCNEHL1",352,0)
 ....Q
"RTN","IBCNEHL1",353,0)
 ...I $P(GDATA,U,14)="B" D
"RTN","IBCNEHL1",354,0)
 ....I $P(MWNRTYP,U,2)="MB"!($P(MWNRTYP,U,2)="B") S MWNRB=IEN312 Q
"RTN","IBCNEHL1",355,0)
 ....S GOK=0
"RTN","IBCNEHL1",356,0)
 ....Q
"RTN","IBCNEHL1",357,0)
 ...Q
"RTN","IBCNEHL1",358,0)
 ..S RES=1_U_IEN2_U_$S(+MWNRTYP:MWNRA_U_MWNRB_U_1,1:IEN312_U_U_0)
"RTN","IBCNEHL1",359,0)
 ..S $P(RES,U,6)=ISSUB
"RTN","IBCNEHL1",360,0)
 ..Q
"RTN","IBCNEHL1",361,0)
 .Q
"RTN","IBCNEHL1",362,0)
 Q RES
"RTN","IBCNEHL1",363,0)
 ;
"RTN","IBCNEHL1",364,0)
CHK1() ; check auto-update criteria for patient who is the subscriber
"RTN","IBCNEHL1",365,0)
 ; called from tag AUTOUPD, uses variables defined there
"RTN","IBCNEHL1",366,0)
 ;
"RTN","IBCNEHL1",367,0)
 ; returns 1 if givent policy satisfies auto-update criteria, returns 0 otherwise
"RTN","IBCNEHL1",368,0)
 N RES
"RTN","IBCNEHL1",369,0)
 S RES=0
"RTN","IBCNEHL1",370,0)
 I $P(RDATA1,U,5)'=$P(IDATA0,U,2) G CHK1X  ; Subscriber ID doesn't match
"RTN","IBCNEHL1",371,0)
 I $P(RDATA1,U,2)'=$P(IDATA3,U) G CHK1X  ; DOB doesn't match
"RTN","IBCNEHL1",372,0)
 I '$$NAMECMP($P(RDATA1,U),$P(IDATA0,U,17)) G CHK1X  ; Insured's name doesn't match
"RTN","IBCNEHL1",373,0)
 S RES=1
"RTN","IBCNEHL1",374,0)
CHK1X ;
"RTN","IBCNEHL1",375,0)
 Q RES
"RTN","IBCNEHL1",376,0)
 ;
"RTN","IBCNEHL1",377,0)
CHK2(MWNRTYP) ; check auto-update criteria for patient who is not the subscriber
"RTN","IBCNEHL1",378,0)
 ; called from tag AUTOUPD, uses variables defined there
"RTN","IBCNEHL1",379,0)
 ;
"RTN","IBCNEHL1",380,0)
 ; returns 1 if policy satisfies auto-update criteria, returns 0 otherwise
"RTN","IBCNEHL1",381,0)
 N DOB,ID,IDATA5,IENS,NAME,PDOB,PNAME,RES
"RTN","IBCNEHL1",382,0)
 S RES=0
"RTN","IBCNEHL1",383,0)
 S IDATA5=$G(^DPT(IEN2,.312,IEN312,5))
"RTN","IBCNEHL1",384,0)
 S IENS=IEN2_","
"RTN","IBCNEHL1",385,0)
 S ID=$P(RDATA1,U,5)
"RTN","IBCNEHL1",386,0)
 I ID'=$P(IDATA0,U,2),ID'=$P(IDATA5,U) G CHK2X  ; both Subscriber ID and Patient ID don't match
"RTN","IBCNEHL1",387,0)
 S DOB=$P(RDATA1,U,2),PDOB=$$GET1^DIQ(2,IENS,.03,"I")
"RTN","IBCNEHL1",388,0)
 I DOB'=$P(IDATA3,U),DOB'=PDOB G CHK2X  ; both Subscriber and Patient DOB don't match
"RTN","IBCNEHL1",389,0)
 S NAME=$P(RDATA1,U),PNAME=$$GET1^DIQ(2,IENS,.01)
"RTN","IBCNEHL1",390,0)
 I '+MWNRTYP,'$$NAMECMP(NAME,$P(IDATA0,U,17)),'$$NAMECMP(NAME,PNAME) G CHK2X  ; non-Medicare, both Subscriber and Patient name don't match
"RTN","IBCNEHL1",391,0)
 I +MWNRTYP,'$$NAMECMP(NAME,PNAME) G CHK2X  ; Medicare, Ptient name doesn't match
"RTN","IBCNEHL1",392,0)
 S RES=1
"RTN","IBCNEHL1",393,0)
CHK2X ;
"RTN","IBCNEHL1",394,0)
 Q RES
"RTN","IBCNEHL1",395,0)
 ;
"RTN","IBCNEHL1",396,0)
PREL(CODE,EXCODE) ; convert pat. relationship to insured code to HIPAA
"RTN","IBCNEHL1",397,0)
 ; CODE - code to convert
"RTN","IBCNEHL1",398,0)
 ; EXCODE - existing VistA code either from 2.312/4.03 or 355.33/60.14
"RTN","IBCNEHL1",399,0)
 N CSTR,RES
"RTN","IBCNEHL1",400,0)
 S CSTR=".01.18.19." ; codes for self, spouse, and child
"RTN","IBCNEHL1",401,0)
 S RES="" I $G(CODE)="" Q RES  ; nothing to convert
"RTN","IBCNEHL1",402,0)
 I CODE="09" Q RES  ; code for "unknown" = no change
"RTN","IBCNEHL1",403,0)
 I CODE="34" S:CSTR[("."_$G(EXCODE)_".") RES="G8" Q RES  ; G8 if existing code is self/spouse/child, no change otherwise
"RTN","IBCNEHL1",404,0)
 S RES=$$PRELCNV^IBCNSP1(CODE,1)
"RTN","IBCNEHL1",405,0)
 Q RES
"RTN","IBCNEHL1",406,0)
 ;
"RTN","IBCNEHL1",407,0)
UPDIREC(RIEN,IEN312) ; update insurance record field in transmission queue (365.1/.13)
"RTN","IBCNEHL1",408,0)
 ; RIEN - ien in eIV Response file (365)
"RTN","IBCNEHL1",409,0)
 ; IEN312 - ien in pat. insurance multiple (2.312)
"RTN","IBCNEHL1",410,0)
 ;
"RTN","IBCNEHL1",411,0)
 N DATA,ERROR,IENS
"RTN","IBCNEHL1",412,0)
 I RIEN'>0!(IEN312'>0) Q
"RTN","IBCNEHL1",413,0)
 S IENS=$P($G(^IBCN(365,RIEN,0)),U,5)_"," I IENS="," Q
"RTN","IBCNEHL1",414,0)
 S DATA(365.1,IENS,.13)=IEN312
"RTN","IBCNEHL1",415,0)
 D FILE^DIE("ET","DATA","ERROR")
"RTN","IBCNEHL1",416,0)
 Q
"RTN","IBCNEHL1",417,0)
 ;
"RTN","IBCNEHL1",418,0)
EBFILE(DFN,IEN312,RIEN,AFLG) ; file eligibility/benefit data from file 365 into file 2.312
"RTN","IBCNEHL1",419,0)
 ; DFN - file 2 ien
"RTN","IBCNEHL1",420,0)
 ; IEN312 - file 2.312 ien
"RTN","IBCNEHL1",421,0)
 ; RIEN - file 365 ien
"RTN","IBCNEHL1",422,0)
 ; AFLG - 1 if called from autoupdate, 0 if called from ins. buffer process entry
"RTN","IBCNEHL1",423,0)
 ; Returns "" on success, ERFLG on failure. Also called from ACCEPT^IBCNBAR for manual processing of ins. buffer entry.
"RTN","IBCNEHL1",424,0)
 ;
"RTN","IBCNEHL1",425,0)
 ;
"RTN","IBCNEHL1",426,0)
 N DA,DIK,DATA,DATA1,EBIENS,ERFLG,ERROR,GIEN,GSKIP,IENROOT,IENS,IENSTR,TYPE,TYPE1,Z,Z1,Z2
"RTN","IBCNEHL1",427,0)
 ; delete existing EB data
"RTN","IBCNEHL1",428,0)
 S DIK="^DPT("_DFN_",.312,"_IEN312_",6,",DA(2)=DFN,DA(1)=IEN312
"RTN","IBCNEHL1",429,0)
 S Z="" F  S Z=$O(^DPT(DFN,.312,IEN312,6,"B",Z)) Q:Z=""  S DA=$O(^DPT(DFN,.312,IEN312,6,"B",Z,"")) D ^DIK
"RTN","IBCNEHL1",430,0)
 ; file new EB data
"RTN","IBCNEHL1",431,0)
 S IENSTR=IEN312_","_DFN_","
"RTN","IBCNEHL1",432,0)
 S GIEN=+$P($G(^DPT(DFN,.312,IEN312,0)),U,18)
"RTN","IBCNEHL1",433,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,2,"B",Z)) Q:Z=""!$G(ERFLG)  D
"RTN","IBCNEHL1",434,0)
 .S EBIENS=$O(^IBCN(365,RIEN,2,"B",Z,""))_","_RIEN_","
"RTN","IBCNEHL1",435,0)
 .; if filing Medicare Part A/B data, make sure we only file the correct EB group
"RTN","IBCNEHL1",436,0)
 .S GSKIP=0 I GIEN>0 D
"RTN","IBCNEHL1",437,0)
 ..S TYPE=$$GET1^DIQ(365.02,EBIENS,.05)
"RTN","IBCNEHL1",438,0)
 ..S TYPE1=$P($G(^IBA(355.3,GIEN,0)),U,14)
"RTN","IBCNEHL1",439,0)
 ..I TYPE="MA",TYPE1="B" S GSKIP=1
"RTN","IBCNEHL1",440,0)
 ..I TYPE="MB",TYPE1="A" S GSKIP=1
"RTN","IBCNEHL1",441,0)
 ..Q
"RTN","IBCNEHL1",442,0)
 .I GSKIP Q  ; wrong Medicare Part A/B EB group - skip it
"RTN","IBCNEHL1",443,0)
 .D GETS^DIQ(365.02,EBIENS,"**",,"DATA","ERROR") I $D(ERROR) D:AFLG WARN Q
"RTN","IBCNEHL1",444,0)
 .; make sure we have data to file
"RTN","IBCNEHL1",445,0)
 .I '$D(DATA(365.02)) Q
"RTN","IBCNEHL1",446,0)
 .S IENS="+1,"_IENSTR,Z1=$O(DATA(365.02,"")) M DATA1(2.322,IENS)=DATA(365.02,Z1)
"RTN","IBCNEHL1",447,0)
 .D UPDATE^DIE("E","DATA1","IENROOT","ERROR") I $D(ERROR) D:AFLG WARN Q
"RTN","IBCNEHL1",448,0)
 .S IENS="+1,"_IENROOT(1)_","_IENSTR K DATA1,IENROOT
"RTN","IBCNEHL1",449,0)
 .S Z2="" F  S Z2=$O(DATA(365.26,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL1",450,0)
 ..M DATA1(2.3226,IENS)=DATA(365.26,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN
"RTN","IBCNEHL1",451,0)
 ..Q
"RTN","IBCNEHL1",452,0)
 .S Z2="" F  S Z2=$O(DATA(365.27,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL1",453,0)
 ..M DATA1(2.3227,IENS)=DATA(365.27,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN
"RTN","IBCNEHL1",454,0)
 ..Q
"RTN","IBCNEHL1",455,0)
 .S Z2="" F  S Z2=$O(DATA(365.28,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL1",456,0)
 ..M DATA1(2.3228,IENS)=DATA(365.28,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN
"RTN","IBCNEHL1",457,0)
 ..Q
"RTN","IBCNEHL1",458,0)
 .S Z2="" F  S Z2=$O(DATA(365.29,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL1",459,0)
 ..M DATA1(2.3229,IENS)=DATA(365.29,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN
"RTN","IBCNEHL1",460,0)
 ..Q
"RTN","IBCNEHL1",461,0)
 .S Z2="" F  S Z2=$O(DATA(365.291,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL1",462,0)
 ..M DATA1(2.32291,IENS)=DATA(365.291,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN
"RTN","IBCNEHL1",463,0)
 ..Q
"RTN","IBCNEHL1",464,0)
 .K DATA
"RTN","IBCNEHL1",465,0)
 .Q
"RTN","IBCNEHL1",466,0)
 Q $G(ERFLG)
"RTN","IBCNEHL1",467,0)
 ;
"RTN","IBCNEHL1",468,0)
NAMECMP(NAME1,NAME2) ; check if 2 names have the same first name and last name components
"RTN","IBCNEHL1",469,0)
 ; NAME1, NAME2 - names to compare, should be in "last,first [middle]" format
"RTN","IBCNEHL1",470,0)
 ;
"RTN","IBCNEHL1",471,0)
 ; returns 1 if both first name and last name are the same between two names, returns 0 otherwise
"RTN","IBCNEHL1",472,0)
 N NM1,NM2,RES
"RTN","IBCNEHL1",473,0)
 S RES=0
"RTN","IBCNEHL1",474,0)
 S NM1=$$HLNAME^HLFNC(NAME1),NM2=$$HLNAME^HLFNC(NAME2)
"RTN","IBCNEHL1",475,0)
 I $P(NM1,U)=$P(NM2,U),$P(NM1,U,2)=$P(NM2,U,2) S RES=1
"RTN","IBCNEHL1",476,0)
 Q RES
"RTN","IBCNEHL2")
0^12^B53025337^B48625538
"RTN","IBCNEHL2",1,0)
IBCNEHL2 ;DAOU/ALA - HL7 Process Incoming RPI Msgs (cont.) ;26-JUN-2002  ; Compiled December 16, 2004 15:29:37
"RTN","IBCNEHL2",2,0)
 ;;2.0;INTEGRATED BILLING;**300,345,416**;21-MAR-94;Build 58
"RTN","IBCNEHL2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHL2",4,0)
 ;
"RTN","IBCNEHL2",5,0)
 ;**Program Description**
"RTN","IBCNEHL2",6,0)
 ;  This pgm will process the indiv segments of the
"RTN","IBCNEHL2",7,0)
 ;  incoming eIV response msgs.
"RTN","IBCNEHL2",8,0)
 ;
"RTN","IBCNEHL2",9,0)
 ; * Each of these tags are called by IBCNEHL1.
"RTN","IBCNEHL2",10,0)
 ; 
"RTN","IBCNEHL2",11,0)
 ;  This routine is based on IBCNEHLP which was introduced with patch 184, and subsequently
"RTN","IBCNEHL2",12,0)
 ;  patched with patches 252 and 271.  IBCNEHLP is obsolete and deleted with patch 300.
"RTN","IBCNEHL2",13,0)
 ;
"RTN","IBCNEHL2",14,0)
 ;  Variables
"RTN","IBCNEHL2",15,0)
 ;    SEG = HL7 Seg Name
"RTN","IBCNEHL2",16,0)
 ;    MSGID = Original Msg Control ID
"RTN","IBCNEHL2",17,0)
 ;    ACK =  Acknowledgment (AA=Accepted, AE=Error)
"RTN","IBCNEHL2",18,0)
 ;    ERTXT = Error Msg Text
"RTN","IBCNEHL2",19,0)
 ;    ERFLG = Error quit flag
"RTN","IBCNEHL2",20,0)
 ;    ERACT = Error Action
"RTN","IBCNEHL2",21,0)
 ;    ERCON = Error Condition
"RTN","IBCNEHL2",22,0)
 ;    RIEN = Response Record IEN
"RTN","IBCNEHL2",23,0)
 ;    IBSEG = Array of the segment
"RTN","IBCNEHL2",24,0)
 ;
"RTN","IBCNEHL2",25,0)
 Q  ; No direct calls
"RTN","IBCNEHL2",26,0)
 ;
"RTN","IBCNEHL2",27,0)
MSA(ERACT,ERCON,ERROR,ERTXT,IBSEG,MGRP,RIEN,TRACE) ;  Process the MSA seg
"RTN","IBCNEHL2",28,0)
 ;
"RTN","IBCNEHL2",29,0)
 ;  Input:
"RTN","IBCNEHL2",30,0)
 ;  IBSEG,MGRP
"RTN","IBCNEHL2",31,0)
 ;
"RTN","IBCNEHL2",32,0)
 ;  Output:
"RTN","IBCNEHL2",33,0)
 ;  ERACT,ERCON,ERROR,ERTXT,RIEN,TRACE,ACK
"RTN","IBCNEHL2",34,0)
 ;
"RTN","IBCNEHL2",35,0)
 D MSA^IBCNEHL4
"RTN","IBCNEHL2",36,0)
 Q
"RTN","IBCNEHL2",37,0)
 ;
"RTN","IBCNEHL2",38,0)
CTD(ERROR,IBSEG,RIEN) ; Process the CTD seg
"RTN","IBCNEHL2",39,0)
 ;
"RTN","IBCNEHL2",40,0)
 ; Input:
"RTN","IBCNEHL2",41,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL2",42,0)
 ;
"RTN","IBCNEHL2",43,0)
 ; Output:
"RTN","IBCNEHL2",44,0)
 ; ERROR
"RTN","IBCNEHL2",45,0)
 ;
"RTN","IBCNEHL2",46,0)
 N CTNAME,CTQUAL,CTNUM,CTQIEN,D1,DA,DATA,DIC,DILN,DISYS,DLAYGO,FFL,FLD,IENS,II,RSUPDT,X,Y
"RTN","IBCNEHL2",47,0)
 ;
"RTN","IBCNEHL2",48,0)
 ;  Parse out data from seg
"RTN","IBCNEHL2",49,0)
 S CTNAME=$G(IBSEG(3)),CTQUAL=$P($G(IBSEG(6)),$E(HLECH),9),CTNUM=$P($G(IBSEG(6)),$E(HLECH))
"RTN","IBCNEHL2",50,0)
 I $TR(CTNAME," ")="" S CTNAME="NOT SPECIFIED"
"RTN","IBCNEHL2",51,0)
 S CTQIEN=$$FIND1^DIC(365.021,"","X",CTQUAL)
"RTN","IBCNEHL2",52,0)
 I CTNAME[$E(HLECH) S CTNAME=$$DECHL7($$FMNAME^HLFNC(CTNAME,HLECH))
"RTN","IBCNEHL2",53,0)
 S CTNAME=$E(CTNAME,1,32)
"RTN","IBCNEHL2",54,0)
 ;
"RTN","IBCNEHL2",55,0)
 ;  Look up contact person
"RTN","IBCNEHL2",56,0)
 S DA(1)=RIEN,DIC="^IBCN(365,"_DA(1)_",3,",DIC(0)="LZ",DLAYGO=365.03
"RTN","IBCNEHL2",57,0)
 I '$D(^IBCN(365,DA(1),3,0)) S ^IBCN(365,DA(1),3,0)="^365.03^^"
"RTN","IBCNEHL2",58,0)
 S X=CTNAME D ^DIC
"RTN","IBCNEHL2",59,0)
 S DA=+Y,DATA=^IBCN(365,DA(1),3,DA,0),FLD=2,FFL=0
"RTN","IBCNEHL2",60,0)
 ;
"RTN","IBCNEHL2",61,0)
 ;  Check if contact already has this communication qualifier on file
"RTN","IBCNEHL2",62,0)
 F II=2,4,6 I $P(DATA,U,II)=CTQIEN S FLD=II,FFL=1 Q
"RTN","IBCNEHL2",63,0)
 I 'FFL F II=2,4,6 I $P(DATA,U,II)="" S FLD=II Q
"RTN","IBCNEHL2",64,0)
 ;
"RTN","IBCNEHL2",65,0)
 S IENS=$$IENS^DILF(.DA)
"RTN","IBCNEHL2",66,0)
 S RSUPDT(365.03,IENS,".0"_(FLD+1))=CTNUM
"RTN","IBCNEHL2",67,0)
 S RSUPDT(365.03,IENS,".0"_FLD)=CTQIEN
"RTN","IBCNEHL2",68,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHL2",69,0)
CTDX ;
"RTN","IBCNEHL2",70,0)
 Q
"RTN","IBCNEHL2",71,0)
 ;
"RTN","IBCNEHL2",72,0)
PID(ERFLG,ERROR,IBSEG,RIEN) ;  Process the PID seg
"RTN","IBCNEHL2",73,0)
 ;
"RTN","IBCNEHL2",74,0)
 ; Input:
"RTN","IBCNEHL2",75,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL2",76,0)
 ;
"RTN","IBCNEHL2",77,0)
 ; Output:
"RTN","IBCNEHL2",78,0)
 ; ERFLG,ERROR
"RTN","IBCNEHL2",79,0)
 ;
"RTN","IBCNEHL2",80,0)
 D PID^IBCNEHL4
"RTN","IBCNEHL2",81,0)
 Q
"RTN","IBCNEHL2",82,0)
 ;
"RTN","IBCNEHL2",83,0)
GT1(ERROR,IBSEG,RIEN,SUBID) ;  Process the GT1 Guarantor seg
"RTN","IBCNEHL2",84,0)
 ;
"RTN","IBCNEHL2",85,0)
 ; Input:
"RTN","IBCNEHL2",86,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL2",87,0)
 ;
"RTN","IBCNEHL2",88,0)
 ; Output:
"RTN","IBCNEHL2",89,0)
 ; ERROR,SUBID
"RTN","IBCNEHL2",90,0)
 ;
"RTN","IBCNEHL2",91,0)
 D GT1^IBCNEHL4
"RTN","IBCNEHL2",92,0)
 Q
"RTN","IBCNEHL2",93,0)
 ;
"RTN","IBCNEHL2",94,0)
IN1(ERROR,IBSEG,RIEN,SUBID) ;  Process the IN1 Insurance seg
"RTN","IBCNEHL2",95,0)
 ;
"RTN","IBCNEHL2",96,0)
 ; Input:
"RTN","IBCNEHL2",97,0)
 ; IBSEG,RIEN,SUBID,ACK
"RTN","IBCNEHL2",98,0)
 ;
"RTN","IBCNEHL2",99,0)
 ; Output:
"RTN","IBCNEHL2",100,0)
 ; ERROR
"RTN","IBCNEHL2",101,0)
 ;
"RTN","IBCNEHL2",102,0)
 N COB,EFFDT,EXPDT,GNAME,GNUMB,MBRID,PAYRID,PYRNM,RSUPDT,SRVDT
"RTN","IBCNEHL2",103,0)
 N PYLEDT,CERDT,RELTN
"RTN","IBCNEHL2",104,0)
 ;
"RTN","IBCNEHL2",105,0)
 ; Austin sending responses with an error indicator will populate IBSEG(3) w/ 
"RTN","IBCNEHL2",106,0)
 ;9 zeros in order to send the HL7 required field when the payer does not 
"RTN","IBCNEHL2",107,0)
 ;send a value for this field
"RTN","IBCNEHL2",108,0)
 S MBRID=$$DECHL7($G(IBSEG(3))) I ACK="AE",($TR(MBRID,0)="") S MBRID=""
"RTN","IBCNEHL2",109,0)
 S PAYRID=$G(IBSEG(4)),PYRNM=$G(IBSEG(5))
"RTN","IBCNEHL2",110,0)
 S GNAME=$$DECHL7($G(IBSEG(10))),GNUMB=$$DECHL7($G(IBSEG(9)))
"RTN","IBCNEHL2",111,0)
 S EFFDT=$G(IBSEG(13)),EXPDT=$G(IBSEG(14))
"RTN","IBCNEHL2",112,0)
 S COB=$G(IBSEG(23)),SRVDT=$G(IBSEG(27))
"RTN","IBCNEHL2",113,0)
 S PYLEDT=$G(IBSEG(30)),RELTN=$G(IBSEG(18))
"RTN","IBCNEHL2",114,0)
 ;
"RTN","IBCNEHL2",115,0)
 ; Relationship codes sent through the HL7 msg are X12 codes
"RTN","IBCNEHL2",116,0)
 ; X12 codes from the interface "01"=spouse, "18"=self, "19"=child, "21"=unknown, "34"=other adult
"RTN","IBCNEHL2",117,0)
 I RELTN'="34" S RELTN=$S(RELTN="01":"02",RELTN="18":"01",RELTN="19":"03",RELTN="21":"09",1:"")
"RTN","IBCNEHL2",118,0)
 S EFFDT=$$FMDATE^HLFNC(EFFDT),EXPDT=$$FMDATE^HLFNC(EXPDT)
"RTN","IBCNEHL2",119,0)
 S SRVDT=$$FMDATE^HLFNC(SRVDT),PYLEDT=$$FMDATE^HLFNC(PYLEDT)
"RTN","IBCNEHL2",120,0)
 ;
"RTN","IBCNEHL2",121,0)
 S RSUPDT(365,RIEN_",",1.05)=$S($G(SUBID)'="":SUBID,1:MBRID)
"RTN","IBCNEHL2",122,0)
 S RSUPDT(365,RIEN_",",1.07)=GNUMB
"RTN","IBCNEHL2",123,0)
 S RSUPDT(365,RIEN_",",1.06)=GNAME,RSUPDT(365,RIEN_",",1.11)=EFFDT
"RTN","IBCNEHL2",124,0)
 S RSUPDT(365,RIEN_",",1.12)=EXPDT,RSUPDT(365,RIEN_",",1.1)=SRVDT
"RTN","IBCNEHL2",125,0)
 S RSUPDT(365,RIEN_",",1.19)=PYLEDT
"RTN","IBCNEHL2",126,0)
 S RSUPDT(365,RIEN_",",1.13)=COB,RSUPDT(365,RIEN_",",1.18)=MBRID
"RTN","IBCNEHL2",127,0)
 S RSUPDT(365,RIEN_",",1.09)=RELTN
"RTN","IBCNEHL2",128,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHL2",129,0)
IN1X ;
"RTN","IBCNEHL2",130,0)
 Q
"RTN","IBCNEHL2",131,0)
 ;
"RTN","IBCNEHL2",132,0)
IN3(ERROR,IBSEG,RIEN) ;  Process IN3 Addt'l Insurance - Cert Seg
"RTN","IBCNEHL2",133,0)
 ;
"RTN","IBCNEHL2",134,0)
 ; Input:
"RTN","IBCNEHL2",135,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL2",136,0)
 ;
"RTN","IBCNEHL2",137,0)
 ; Output:
"RTN","IBCNEHL2",138,0)
 ; ERROR
"RTN","IBCNEHL2",139,0)
 ;
"RTN","IBCNEHL2",140,0)
 N CRDT,RSUPDT
"RTN","IBCNEHL2",141,0)
 ;
"RTN","IBCNEHL2",142,0)
 S CRDT=$G(IBSEG(7))
"RTN","IBCNEHL2",143,0)
 S CRDT=$$FMDATE^HLFNC(CRDT)
"RTN","IBCNEHL2",144,0)
 S RSUPDT(365,RIEN_",",1.17)=CRDT
"RTN","IBCNEHL2",145,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHL2",146,0)
IN3X ;
"RTN","IBCNEHL2",147,0)
 Q
"RTN","IBCNEHL2",148,0)
 ;
"RTN","IBCNEHL2",149,0)
ZEB(EBDA,ERROR,IBSEG,RIEN) ;  Process the ZEB Elig/Benefit seg
"RTN","IBCNEHL2",150,0)
 ;
"RTN","IBCNEHL2",151,0)
 ; Input:
"RTN","IBCNEHL2",152,0)
 ; IBSEG,IIVSTAT,RIEN
"RTN","IBCNEHL2",153,0)
 ;
"RTN","IBCNEHL2",154,0)
 ; Output:
"RTN","IBCNEHL2",155,0)
 ; EBDA,ERROR
"RTN","IBCNEHL2",156,0)
 ;
"RTN","IBCNEHL2",157,0)
 N D1,DA,DIC,DILN,DISYS,DLAYGO,EBN,IENS,II,MSG,PRMODS,RSUPDT,SUBJECT,X,XMY,Y,MA
"RTN","IBCNEHL2",158,0)
 ;
"RTN","IBCNEHL2",159,0)
 ; Set a default eIV Status value of # ("V")
"RTN","IBCNEHL2",160,0)
 I IIVSTAT="" D
"RTN","IBCNEHL2",161,0)
 .   I IBSEG(7)'="eIV Eligibility Determination" S IIVSTAT="V" Q
"RTN","IBCNEHL2",162,0)
 .   I $F("_1_6_V_","_"_IBSEG(3)_"_") S IIVSTAT=IBSEG(3) Q
"RTN","IBCNEHL2",163,0)
 .   ; Unknown code received from the EC
"RTN","IBCNEHL2",164,0)
 .   S SUBJECT="eIV: Invalid Eligibility Status flag"
"RTN","IBCNEHL2",165,0)
 .   S MSG(1)="An invalid Eligibility Status flag '"_$G(IBSEG(3))_"' was received for site "_$P($$SITE^VASITE,"^",3)_","
"RTN","IBCNEHL2",166,0)
 .   S MSG(2)="trace number "_$G(TRACE,"unknown")_" and message control id "_$G(MSGID,"unknown")_"."
"RTN","IBCNEHL2",167,0)
 .   S MSG(3)="It has been interpreted as an ambiguous response in VistA."
"RTN","IBCNEHL2",168,0)
 .   S XMY("FSCECADMIN@mail.va.gov")=""
"RTN","IBCNEHL2",169,0)
 .   D MSG^IBCNEUT5("",SUBJECT,"MSG(",,.XMY)
"RTN","IBCNEHL2",170,0)
 .   S IIVSTAT="V"
"RTN","IBCNEHL2",171,0)
 ;
"RTN","IBCNEHL2",172,0)
 ; Process the ZEB
"RTN","IBCNEHL2",173,0)
 S EBN=$G(IBSEG(2))
"RTN","IBCNEHL2",174,0)
 S DA(1)=RIEN,DIC="^IBCN(365,"_DA(1)_",2,",DIC(0)="L",DLAYGO=365.02
"RTN","IBCNEHL2",175,0)
 I '$D(^IBCN(365,DA(1),2,0)) S ^IBCN(365,DA(1),2,0)="^365.02^^"
"RTN","IBCNEHL2",176,0)
 S X=EBN D ^DIC
"RTN","IBCNEHL2",177,0)
 S DA=+Y,EBDA=DA
"RTN","IBCNEHL2",178,0)
 ;
"RTN","IBCNEHL2",179,0)
 S IENS=$$IENS^DILF(.DA)
"RTN","IBCNEHL2",180,0)
 ;
"RTN","IBCNEHL2",181,0)
 ; decode plan description ZEB segment
"RTN","IBCNEHL2",182,0)
 S IBSEG(7)=$$DECHL7($G(IBSEG(7)))
"RTN","IBCNEHL2",183,0)
 F II=2:1:7 S RSUPDT(365.02,IENS,".0"_II)=$G(IBSEG(II+1))
"RTN","IBCNEHL2",184,0)
 S MA=$G(IBSEG(9)) I $TR(MA," ","")'="" S MA=$J(MA,0,2)
"RTN","IBCNEHL2",185,0)
 S RSUPDT(365.02,IENS,".08")=MA                     ; Monetary amt
"RTN","IBCNEHL2",186,0)
 S RSUPDT(365.02,IENS,".09")=$G(IBSEG(10))          ; Percent
"RTN","IBCNEHL2",187,0)
 S RSUPDT(365.02,IENS,".1")=$G(IBSEG(11))           ; Quantity Qual.
"RTN","IBCNEHL2",188,0)
 F II=11:1:13 S RSUPDT(365.02,IENS,"."_II)=$G(IBSEG(II+1))
"RTN","IBCNEHL2",189,0)
 S RSUPDT(365.02,IENS,"1.01")=$P($G(IBSEG(15)),HLCMP) ; Procedure coding method
"RTN","IBCNEHL2",190,0)
 S RSUPDT(365.02,IENS,"1.02")=$G(IBSEG(16)) ; Procedure code
"RTN","IBCNEHL2",191,0)
 ; Procedure modifiers
"RTN","IBCNEHL2",192,0)
 S PRMODS=$G(IBSEG(17)) F II=1:1:4 S RSUPDT(365.02,IENS,"1.0"_(II+2))=$TR($P(PRMODS,HLREP,II),HL("ECH"))
"RTN","IBCNEHL2",193,0)
 D FILE^DIE("ET","RSUPDT","ERROR")
"RTN","IBCNEHL2",194,0)
ZEBX ;
"RTN","IBCNEHL2",195,0)
 Q
"RTN","IBCNEHL2",196,0)
 ;
"RTN","IBCNEHL2",197,0)
NTE(EBDA,IBSEG,RIEN) ; Process NTE Notes seg
"RTN","IBCNEHL2",198,0)
 ;
"RTN","IBCNEHL2",199,0)
 ; Input:
"RTN","IBCNEHL2",200,0)
 ; EBDA,IBSEG,RIEN
"RTN","IBCNEHL2",201,0)
 ;
"RTN","IBCNEHL2",202,0)
 ; Output:
"RTN","IBCNEHL2",203,0)
 ; ERROR
"RTN","IBCNEHL2",204,0)
 ;
"RTN","IBCNEHL2",205,0)
 N DA,IENS,NOTES
"RTN","IBCNEHL2",206,0)
 I $G(EBDA)="" Q
"RTN","IBCNEHL2",207,0)
 S NOTES(1)=$$DECHL7($G(IBSEG(4)))
"RTN","IBCNEHL2",208,0)
 S DA(1)=RIEN,DA=EBDA
"RTN","IBCNEHL2",209,0)
 S IENS=$$IENS^DILF(.DA)
"RTN","IBCNEHL2",210,0)
 D WP^DIE(365.02,IENS,2,"A","NOTES","ERROR")
"RTN","IBCNEHL2",211,0)
NTEX ;
"RTN","IBCNEHL2",212,0)
 Q
"RTN","IBCNEHL2",213,0)
 ;
"RTN","IBCNEHL2",214,0)
DECHL7(STR,HLSEP,ECHARS) ; Decode HL7 escape seqs in data fields
"RTN","IBCNEHL2",215,0)
 ;
"RTN","IBCNEHL2",216,0)
 ; Input:
"RTN","IBCNEHL2",217,0)
 ; STR = Field data possible containing HL7 escape seqs for encoding chars
"RTN","IBCNEHL2",218,0)
 ; HLSEP (opt) = HL7 Field sep. char - assumes HLFS if not passed
"RTN","IBCNEHL2",219,0)
 ; ECHARS (opt) = HL7 encoding chars being used, assumes HL("ECH") if not passed
"RTN","IBCNEHL2",220,0)
 ;
"RTN","IBCNEHL2",221,0)
 ; Output Values
"RTN","IBCNEHL2",222,0)
 ; Fn returns string w/converted escape seqs
"RTN","IBCNEHL2",223,0)
 ;
"RTN","IBCNEHL2",224,0)
 N ESC,PAT,REPL,ECODE,PCE
"RTN","IBCNEHL2",225,0)
 ; Initialize opt. params.
"RTN","IBCNEHL2",226,0)
 I $G(HLSEP)="" S HLSEP=HLFS
"RTN","IBCNEHL2",227,0)
 I $G(ECHARS)="" S ECHARS=HL("ECH")
"RTN","IBCNEHL2",228,0)
 ;
"RTN","IBCNEHL2",229,0)
 S ESC=$E(ECHARS,3) ; Escape char.
"RTN","IBCNEHL2",230,0)
 ; Check for escape seqs, quit if not
"RTN","IBCNEHL2",231,0)
 I STR'[ESC G DECHL7X
"RTN","IBCNEHL2",232,0)
 ; Replace ^ w/{sp} (if any) to prevent filing problems
"RTN","IBCNEHL2",233,0)
 S ECHARS=$TR(ECHARS,"^"," ")
"RTN","IBCNEHL2",234,0)
 ;
"RTN","IBCNEHL2",235,0)
 ; Array of rep. chars
"RTN","IBCNEHL2",236,0)
 S REPL("F")=$TR(HLSEP,"^"," ") ;Field Sep
"RTN","IBCNEHL2",237,0)
 S REPL("S")=$E(ECHARS)     ;Comp Sep
"RTN","IBCNEHL2",238,0)
 S REPL("R")=$E(ECHARS,2)   ;Rep. sep
"RTN","IBCNEHL2",239,0)
 ; Temp. replace w/ASC 26, until after other ESC are stripped
"RTN","IBCNEHL2",240,0)
 S REPL("E")=$C(26)  ;Esc. sep
"RTN","IBCNEHL2",241,0)
 S REPL("T")=$E(ECHARS,4)   ;Subcomp. sep
"RTN","IBCNEHL2",242,0)
 ;
"RTN","IBCNEHL2",243,0)
 ; Translate out escape seqs left->right
"RTN","IBCNEHL2",244,0)
 F PCE=1:1:($L(STR,ESC)-1)\2 D
"RTN","IBCNEHL2",245,0)
 . ; Ignore empty esc. or unrec. esc. seq.
"RTN","IBCNEHL2",246,0)
 . S ECODE=$P(STR,ESC,2) I ECODE="" S ECODE="XXXX"
"RTN","IBCNEHL2",247,0)
 . I $D(REPL(ECODE))'>0 S STR=$P(STR,ESC)_$C(26)_$P(STR,ESC,2)_$C(26)_$P(STR,ESC,3,99999) Q
"RTN","IBCNEHL2",248,0)
 . ; Else, replace esc. seq. w/ char.
"RTN","IBCNEHL2",249,0)
 . S STR=$P(STR,ESC)_$G(REPL(ECODE))_$P(STR,ESC,3,99999)
"RTN","IBCNEHL2",250,0)
 ;
"RTN","IBCNEHL2",251,0)
 ;Replace the decoded ESC chars that were actually sent
"RTN","IBCNEHL2",252,0)
 S STR=$TR(STR,$C(26),ESC)
"RTN","IBCNEHL2",253,0)
 ;
"RTN","IBCNEHL2",254,0)
DECHL7X ; Exit w/return values
"RTN","IBCNEHL2",255,0)
 Q STR
"RTN","IBCNEHL3")
0^60^B72667613^B72666983
"RTN","IBCNEHL3",1,0)
IBCNEHL3 ;DAOU/ALA - HL7 Process Incoming RPI Continued ;03-JUL-2002  ; Compiled June 2, 2005 14:20:19
"RTN","IBCNEHL3",2,0)
 ;;2.0;INTEGRATED BILLING;**300,416**;21-MAR-94;Build 58
"RTN","IBCNEHL3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHL3",4,0)
 ;
"RTN","IBCNEHL3",5,0)
 ;**Program Description**
"RTN","IBCNEHL3",6,0)
 ;  This is a continuation of IBCNEHL1 which processes an incoming
"RTN","IBCNEHL3",7,0)
 ;  RPI IIV message.
"RTN","IBCNEHL3",8,0)
 ;  
"RTN","IBCNEHL3",9,0)
 ;  This routine is based on IBCNEHLS which was introduced with patch 184, and subsequently
"RTN","IBCNEHL3",10,0)
 ;  patched with patch 271.  IBCNEHLS is obsolete and deleted with patch 300.
"RTN","IBCNEHL3",11,0)
 ;
"RTN","IBCNEHL3",12,0)
 Q   ; no direct calls allow
"RTN","IBCNEHL3",13,0)
 ;
"RTN","IBCNEHL3",14,0)
ERROR(TQN,ERACT,ERCON,TRCN) ; Entry point
"RTN","IBCNEHL3",15,0)
 ; Input:  TQN - IEN for eIV Transmission Queue (#365.1), required
"RTN","IBCNEHL3",16,0)
 ;         ERACT - Error Action Code (#365.14), required
"RTN","IBCNEHL3",17,0)
 ;         ERCON - Error Condition Code (#365.17), required
"RTN","IBCNEHL3",18,0)
 ;         TRCN - Trace # from eIV Response (#365)
"RTN","IBCNEHL3",19,0)
 ;
"RTN","IBCNEHL3",20,0)
 ;         IIVSTAT - IIV status transmitted by EC
"RTN","IBCNEHL3",21,0)
 ;                   Note: MAP(IIVSTAT) = IIV STATUS IEN
"RTN","IBCNEHL3",22,0)
 N MSG,ERDESC,ERIEN,XMY,DA,DIE,DR
"RTN","IBCNEHL3",23,0)
 ;
"RTN","IBCNEHL3",24,0)
 I $G(TQN)="" G ERRORX
"RTN","IBCNEHL3",25,0)
 ;
"RTN","IBCNEHL3",26,0)
 ; Scenarios:
"RTN","IBCNEHL3",27,0)
 ; #1 - If error message = "Resubmission Allowed" OR "Please Resubmit
"RTN","IBCNEHL3",28,0)
 ;  Original Transaction" - set TQ
"RTN","IBCNEHL3",29,0)
 ;  Fut Trans Dt to T + Comm Failure Days and Status to "Hold"
"RTN","IBCNEHL3",30,0)
 I ERACT="R"!(ERACT="P") D  G ERRORX
"RTN","IBCNEHL3",31,0)
 . I $P($G(^IBCN(365.1,TQN,0)),U,9)="" D  Q    ; first time payer asked us to resubmit
"RTN","IBCNEHL3",32,0)
 . . ; Update IIV TQ fields: "Hold" (4), IIV Site Param Comm Failure Days
"RTN","IBCNEHL3",33,0)
 . . D UPDATE(TQN,4,+$P($G(^IBE(350.9,1,51)),U,5),ERACT)
"RTN","IBCNEHL3",34,0)
 . . ;
"RTN","IBCNEHL3",35,0)
 . ; payer asked us to resubmit for the 2nd time for this inquiry
"RTN","IBCNEHL3",36,0)
 . ; Update IIV TQ fields: "Response Received" (3), n/a ("")
"RTN","IBCNEHL3",37,0)
 . D UPDATE(TQN,3,"",ERACT,ERCON)
"RTN","IBCNEHL3",38,0)
 . ; clear future transmission date so it won't display in the buffer
"RTN","IBCNEHL3",39,0)
 . S DA=TQN,DIE="^IBCN(365.1,",DR=".09///@" D ^DIE
"RTN","IBCNEHL3",40,0)
 ;
"RTN","IBCNEHL3",41,0)
 ; #2 - If error message = "Please Wait 30 Days and Resubmit" - set TQ
"RTN","IBCNEHL3",42,0)
 ;  Fut Trans Dt to T + 30 and Status to "Hold"
"RTN","IBCNEHL3",43,0)
 I ERACT="W" D  G ERRORX
"RTN","IBCNEHL3",44,0)
 . ; Update IIV TQ fields: "Hold" (4), 30
"RTN","IBCNEHL3",45,0)
 . D UPDATE(TQN,4,30,ERACT)
"RTN","IBCNEHL3",46,0)
 ;
"RTN","IBCNEHL3",47,0)
 ; #3 - If error message = "Please Wait 10 Days and Resubmit" - set TQ
"RTN","IBCNEHL3",48,0)
 ;  Fut Trans Dt to T + 10 and Status to "Hold"
"RTN","IBCNEHL3",49,0)
 I ERACT="X" D  G ERRORX
"RTN","IBCNEHL3",50,0)
 . ; Update IIV TQ fields: "Hold" (4), 10
"RTN","IBCNEHL3",51,0)
 . D UPDATE(TQN,4,10,ERACT)
"RTN","IBCNEHL3",52,0)
 ;
"RTN","IBCNEHL3",53,0)
 ; #4 - If error message = "Resubmission Not Allowed" or
"RTN","IBCNEHL3",54,0)
 ;  "Do not resubmit ...." OR "Please correct and resubmit"
"RTN","IBCNEHL3",55,0)
 ;  - set TQ Status to "Response Received"
"RTN","IBCNEHL3",56,0)
 ; If we receive error txt, treat as an "N"
"RTN","IBCNEHL3",57,0)
 I ERACT="" S ERACT="N"
"RTN","IBCNEHL3",58,0)
 I ERACT="N"!(ERACT="Y")!(ERACT="S")!(ERACT="C") D  G ERRORX
"RTN","IBCNEHL3",59,0)
 . ; Update IIV TQ fields: "Response Received" (3), n/a ("")
"RTN","IBCNEHL3",60,0)
 . D UPDATE(TQN,3,"",ERACT,ERCON)
"RTN","IBCNEHL3",61,0)
 ;
"RTN","IBCNEHL3",62,0)
 ; #5 - Error message is unfamiliar - new Error Action Code
"RTN","IBCNEHL3",63,0)
 ; *** Currently processed in IBCNEHL1 ***
"RTN","IBCNEHL3",64,0)
 ;
"RTN","IBCNEHL3",65,0)
ERRORX ; ERROR exit pt
"RTN","IBCNEHL3",66,0)
 Q
"RTN","IBCNEHL3",67,0)
 ;
"RTN","IBCNEHL3",68,0)
UPDATE(TQN,TSTS,TDAYS,ERACT,ERCON) ;  Update Transmission Queue (#365.1)
"RTN","IBCNEHL3",69,0)
 ; Update/Create Buffer information as necessary
"RTN","IBCNEHL3",70,0)
 ; * If unsolicited error or negative Verification response do not
"RTN","IBCNEHL3",71,0)
 ; update TQ entry.  However, create a new Buffer entry.
"RTN","IBCNEHL3",72,0)
 ; Input Variables
"RTN","IBCNEHL3",73,0)
 ; ERACT,ERCON,IIVSTAT,TDAYS,TQN,TSTS
"RTN","IBCNEHL3",74,0)
 ;
"RTN","IBCNEHL3",75,0)
 ; Output Variables
"RTN","IBCNEHL3",76,0)
 ; IIVSTAT (updated)
"RTN","IBCNEHL3",77,0)
 ;
"RTN","IBCNEHL3",78,0)
 ; Init optional param
"RTN","IBCNEHL3",79,0)
 S ERCON=$G(ERCON)
"RTN","IBCNEHL3",80,0)
 ;
"RTN","IBCNEHL3",81,0)
 ; Init vars
"RTN","IBCNEHL3",82,0)
 N D,D0,DA,DFN,DI,DIC,DIE,DQ,DR,FTDT,IBDATA,IBIEN,IBQFL,IBSTS,IBSYM
"RTN","IBCNEHL3",83,0)
 N INSIEN,RSTYPE,SYMBOL,TQDATA,X
"RTN","IBCNEHL3",84,0)
 ;
"RTN","IBCNEHL3",85,0)
 ; If no ZEB segment received, set IIVSTAT to "V"
"RTN","IBCNEHL3",86,0)
 I $TR(IIVSTAT," ")="" S IIVSTAT="V"
"RTN","IBCNEHL3",87,0)
 ;
"RTN","IBCNEHL3",88,0)
 S TQDATA=$G(^IBCN(365.1,TQN,0))
"RTN","IBCNEHL3",89,0)
 I TQDATA="" G UPDATX
"RTN","IBCNEHL3",90,0)
 ;
"RTN","IBCNEHL3",91,0)
 ; Ins Buffer IEN
"RTN","IBCNEHL3",92,0)
 S IBIEN=$P(TQDATA,U,5)
"RTN","IBCNEHL3",93,0)
 S IBQFL=$P(TQDATA,U,11)
"RTN","IBCNEHL3",94,0)
 S RSTYPE=$P($G(^IBCN(365,RIEN,0)),U,10)
"RTN","IBCNEHL3",95,0)
 ;
"RTN","IBCNEHL3",96,0)
 ; If unsolicited error or negative Identification response DON'T
"RTN","IBCNEHL3",97,0)
 ; update TQ entry or Buffer (includes not creating a new buffer)
"RTN","IBCNEHL3",98,0)
 I RSTYPE="U",(IBQFL="I") G UPDATX
"RTN","IBCNEHL3",99,0)
 ;
"RTN","IBCNEHL3",100,0)
 I RSTYPE="U" S IBIEN=""  ; makes sure a new buffer is created
"RTN","IBCNEHL3",101,0)
 ;
"RTN","IBCNEHL3",102,0)
 ; Ins Buffer processing
"RTN","IBCNEHL3",103,0)
 I IBIEN'="" D
"RTN","IBCNEHL3",104,0)
 . ; Ins Buf data
"RTN","IBCNEHL3",105,0)
 . S IBDATA=$G(^IBA(355.33,+IBIEN,0))
"RTN","IBCNEHL3",106,0)
 . S IBSTS=$P(IBDATA,U,4)   ; Status
"RTN","IBCNEHL3",107,0)
 . S IBSYM=$P(IBDATA,U,12)  ; Symbol
"RTN","IBCNEHL3",108,0)
 . ; If IB status is (A)ccepted or (R)ejected or IB symbol is "*"
"RTN","IBCNEHL3",109,0)
 . ;  (verified) or IB symbol is "-" (denied), update TQ status to
"RTN","IBCNEHL3",110,0)
 . ;  Resp Rec'd (3) and DON'T update the Ins Buffer symbol
"RTN","IBCNEHL3",111,0)
 . I IBSTS="A"!(IBSTS="R")!(IBSYM=8)!(IBSYM=9) S TSTS=3 Q
"RTN","IBCNEHL3",112,0)
 . ; If TQ status is "Hold", update buffer symbol to "?" (10)
"RTN","IBCNEHL3",113,0)
 . I TSTS=4 D BUFF^IBCNEUT2(IBIEN,10) Q  ; Set buffer symbol to "?"
"RTN","IBCNEHL3",114,0)
 . ; If TQ status is "Response Received", update buffer symbol to "-" (9) for Error
"RTN","IBCNEHL3",115,0)
 . ; Action Codes ('N','Y','S') & Action Codes ('P','R', if 2nd time payer sent that code)
"RTN","IBCNEHL3",116,0)
 . I TSTS=3,(ERACT="N"!(ERACT="Y")!(ERACT="S")!(ERACT="C")!(ERACT="P")!(ERACT="R")) D  Q
"RTN","IBCNEHL3",117,0)
 .. S SYMBOL=MAP(IIVSTAT)
"RTN","IBCNEHL3",118,0)
 .. D BUFF^IBCNEUT2(IBIEN,SYMBOL) ; Set buffer symbol to EC value
"RTN","IBCNEHL3",119,0)
 .. D IIVPROC(IBIEN)   ; Set IIV process date & IIV status
"RTN","IBCNEHL3",120,0)
 . ; If TQ status is "Response Received", update buffer symbol to "!" (12 = B9) for new Error Action Code
"RTN","IBCNEHL3",121,0)
 . I TSTS=3,",W,X,R,P,C,N,Y,S,"'[(","_ERACT_",") D BUFF^IBCNEUT2(IBIEN,22) Q
"RTN","IBCNEHL3",122,0)
 ;
"RTN","IBCNEHL3",123,0)
 ; Non-Ins Buffer processing, create entry only for Verification queries
"RTN","IBCNEHL3",124,0)
 I IBIEN="",IBQFL="V" D
"RTN","IBCNEHL3",125,0)
 . ; Determine Patient DFN
"RTN","IBCNEHL3",126,0)
 . S DFN=$P(TQDATA,U,2)
"RTN","IBCNEHL3",127,0)
 . ; Determine Patient Ins record IEN
"RTN","IBCNEHL3",128,0)
 . S INSIEN=$P(TQDATA,U,13)  ; If INSIEN="" avoids TQ update
"RTN","IBCNEHL3",129,0)
 . ; If ERACT="C" symbol is passed by EC
"RTN","IBCNEHL3",130,0)
 . I ERACT="C" S SYMBOL=MAP(IIVSTAT) D BUF Q
"RTN","IBCNEHL3",131,0)
 . ;  Resubmission Not Allowed or Do Not Resubmit ...
"RTN","IBCNEHL3",132,0)
 . I ERACT="N"!(ERACT="Y")!(ERACT="S") S SYMBOL=MAP(IIVSTAT) D BUF Q
"RTN","IBCNEHL3",133,0)
 . ; An unknown error action - generate a '#'
"RTN","IBCNEHL3",134,0)
 . I ",W,X,R,P,C,N,Y,S,"'[(","_ERACT_",") S SYMBOL=22 D BUF Q
"RTN","IBCNEHL3",135,0)
 ;
"RTN","IBCNEHL3",136,0)
 I RSTYPE="U" G UPDATX  ; finished creating new buffer
"RTN","IBCNEHL3",137,0)
 ;
"RTN","IBCNEHL3",138,0)
 ; Update TQ record - Status
"RTN","IBCNEHL3",139,0)
 D SST^IBCNEUT2(TQN,TSTS)
"RTN","IBCNEHL3",140,0)
 ;
"RTN","IBCNEHL3",141,0)
 ; If TQ Status = "Hold", update TQ record - Future Transmission Date
"RTN","IBCNEHL3",142,0)
 I TSTS=4,+$G(TDAYS) D
"RTN","IBCNEHL3",143,0)
 . S FTDT=$$FMADD^XLFDT($$DT^XLFDT,TDAYS)
"RTN","IBCNEHL3",144,0)
 . S DIE="^IBCN(365.1,",DA=TQN,DR=".09///^S X=FTDT"
"RTN","IBCNEHL3",145,0)
 . D ^DIE
"RTN","IBCNEHL3",146,0)
 I TSTS=4,$P(TQDATA,U,8) D
"RTN","IBCNEHL3",147,0)
 . S DIE="^IBCN(365.1,",DA=TQN,DR=".08///0"
"RTN","IBCNEHL3",148,0)
 . D ^DIE
"RTN","IBCNEHL3",149,0)
 ;
"RTN","IBCNEHL3",150,0)
UPDATX ; UPDATE exit point
"RTN","IBCNEHL3",151,0)
 Q
"RTN","IBCNEHL3",152,0)
 ;
"RTN","IBCNEHL3",153,0)
PCK ; Payer Check
"RTN","IBCNEHL3",154,0)
 ;  Find the associated Response IEN
"RTN","IBCNEHL3",155,0)
 ;
"RTN","IBCNEHL3",156,0)
 ; Input Variables
"RTN","IBCNEHL3",157,0)
 ; MSGID
"RTN","IBCNEHL3",158,0)
 ;
"RTN","IBCNEHL3",159,0)
 ; Output Variables
"RTN","IBCNEHL3",160,0)
 ; RIEN,ERFLG
"RTN","IBCNEHL3",161,0)
 ;
"RTN","IBCNEHL3",162,0)
 N BUFF,DA,DFN,DIE,DR,IEN,IERN,IN1DATA,MDTM,QFL,PAYR,PIEN,PP
"RTN","IBCNEHL3",163,0)
 N PRDATA,PRIEN,RSIEN,X
"RTN","IBCNEHL3",164,0)
 N NOPAYER,TQIEN
"RTN","IBCNEHL3",165,0)
 ;
"RTN","IBCNEHL3",166,0)
 K ^TMP("IBCNEMID",$J)
"RTN","IBCNEHL3",167,0)
 D FIND^DIC(365,"","","P",MSGID,"","B","","","^TMP(""IBCNEMID"",$J)")
"RTN","IBCNEHL3",168,0)
 ;
"RTN","IBCNEHL3",169,0)
 S PP=0,QFL=0,(RIEN,PIEN)=""
"RTN","IBCNEHL3",170,0)
 S NOPAYER=$$FIND1^DIC(365.12,,"X","~NO PAYER"),TQIEN=$O(^IBCN(365.1,"C",MSGID,""))
"RTN","IBCNEHL3",171,0)
 F  S PP=$O(^TMP("IBCNEMID",$J,"DILIST",PP)) Q:'PP  D  Q:QFL
"RTN","IBCNEHL3",172,0)
 . S PRIEN=$P(^TMP("IBCNEMID",$J,"DILIST",PP,0),U,1)
"RTN","IBCNEHL3",173,0)
 . ;
"RTN","IBCNEHL3",174,0)
 . ;  If this is a response w/o an IN1 segment
"RTN","IBCNEHL3",175,0)
 . ;  Get payer IEN from TQ as original response shell will change for
"RTN","IBCNEHL3",176,0)
 . ;  ~NO PAYER if a payer response is received
"RTN","IBCNEHL3",177,0)
 . S IN1DATA=$$GIN1()
"RTN","IBCNEHL3",178,0)
 . I IN1DATA="",PRIEN'="",TQIEN'="" D
"RTN","IBCNEHL3",179,0)
 ..  S QFL=1,PIEN=$P(^IBCN(365.1,TQIEN,0),U,3)
"RTN","IBCNEHL3",180,0)
 . ;
"RTN","IBCNEHL3",181,0)
 . I 'PIEN D PFN(IN1DATA) I 'PIEN S QFL=1 Q
"RTN","IBCNEHL3",182,0)
 . ;
"RTN","IBCNEHL3",183,0)
 . ; If message id/payer found & Response (#365) status is NOT
"RTN","IBCNEHL3",184,0)
 . ; 'Response Received' update the existing response entry (set RIEN)
"RTN","IBCNEHL3",185,0)
 . I $P(^IBCN(365,PRIEN,0),U,3)=PIEN,($P(^IBCN(365,PRIEN,0),U,6)'=3) D  Q
"RTN","IBCNEHL3",186,0)
 .. S RIEN=PRIEN,QFL=1
"RTN","IBCNEHL3",187,0)
 ..;
"RTN","IBCNEHL3",188,0)
 ..; If message id/payer found & Response (#365) status equals
"RTN","IBCNEHL3",189,0)
 . ; 'Response Received', RIEN is still null so that this tag knows
"RTN","IBCNEHL3",190,0)
 . ; to create a new unsolicited response entry
"RTN","IBCNEHL3",191,0)
 . ; 
"RTN","IBCNEHL3",192,0)
 . ; If payer response received to ~NO PAYER, update eIV Response file
"RTN","IBCNEHL3",193,0)
 . ; w/ responding payer
"RTN","IBCNEHL3",194,0)
 . I RIEN="" S PRDATA=$G(^IBCN(365,PRIEN,0)) I $P(PRDATA,U,3)=NOPAYER,$P(PRDATA,U,6)'=3,$P(PRDATA,U,10)="O" D  Q
"RTN","IBCNEHL3",195,0)
 .. S RIEN=PRIEN,QFL=1
"RTN","IBCNEHL3",196,0)
 .. S DIE="^IBCN(365,",DA=RIEN,DR=".03///^S X=PIEN" D ^DIE
"RTN","IBCNEHL3",197,0)
 ;
"RTN","IBCNEHL3",198,0)
 ;  If message id/payer not found or unsolicited response, create new response entry
"RTN","IBCNEHL3",199,0)
 I RIEN="" D  Q:ERFLG
"RTN","IBCNEHL3",200,0)
 . I $G(PRIEN)'="" D
"RTN","IBCNEHL3",201,0)
 .. S PRDATA=$G(^IBCN(365,PRIEN,0))
"RTN","IBCNEHL3",202,0)
 .. S DFN=$P(PRDATA,U,2),IEN=$P(PRDATA,U,5),MDTM=$P(PRDATA,U,8)
"RTN","IBCNEHL3",203,0)
 . ;
"RTN","IBCNEHL3",204,0)
 . I PIEN="" D  Q:ERFLG
"RTN","IBCNEHL3",205,0)
 ..  S IN1DATA=$$GIN1()
"RTN","IBCNEHL3",206,0)
 ..  I IN1DATA]"" D PFN(IN1DATA) I 'PIEN S PIEN="",QFL=1
"RTN","IBCNEHL3",207,0)
 . S PAYR=PIEN,(RSTYPE,BUFF)=""
"RTN","IBCNEHL3",208,0)
 . D RESP^IBCNEDEQ
"RTN","IBCNEHL3",209,0)
 . S RIEN=RSIEN
"RTN","IBCNEHL3",210,0)
 ;
"RTN","IBCNEHL3",211,0)
 ; If no payer in response file, set it
"RTN","IBCNEHL3",212,0)
 I $G(PIEN)'="",$G(RIEN)'="",$P($G(^IBCN(365,PIEN,0)),U,3)="" D
"RTN","IBCNEHL3",213,0)
 . S DIE="^IBCN(365,",DA=RIEN,DR=".03///^S X=PIEN" D ^DIE
"RTN","IBCNEHL3",214,0)
 Q
"RTN","IBCNEHL3",215,0)
 ;
"RTN","IBCNEHL3",216,0)
BUF ; Create Buffer Record if Doesn't Exist
"RTN","IBCNEHL3",217,0)
 ;
"RTN","IBCNEHL3",218,0)
 ; Input Variables
"RTN","IBCNEHL3",219,0)
 ; RIEN,RSTYPE,TQN
"RTN","IBCNEHL3",220,0)
 ;
"RTN","IBCNEHL3",221,0)
 ; Output Variables
"RTN","IBCNEHL3",222,0)
 ; ERROR,SYMBOL is killed,TQIEN and IRIEN may be reset
"RTN","IBCNEHL3",223,0)
 ;
"RTN","IBCNEHL3",224,0)
 N BUFF,IBFDA,UP
"RTN","IBCNEHL3",225,0)
 I $G(RSTYPE)="U" S (TQIEN,IRIEN)=""
"RTN","IBCNEHL3",226,0)
 D RP^IBCNEBF(RIEN,1)
"RTN","IBCNEHL3",227,0)
 S BUFF=+IBFDA
"RTN","IBCNEHL3",228,0)
 S UP(365,RIEN_",",.04)=+IBFDA
"RTN","IBCNEHL3",229,0)
 I RSTYPE="O" S UP(365.1,TQN_",",.05)=+IBFDA
"RTN","IBCNEHL3",230,0)
 D FILE^DIE("I","UP","ERROR")
"RTN","IBCNEHL3",231,0)
 K SYMBOL
"RTN","IBCNEHL3",232,0)
 Q
"RTN","IBCNEHL3",233,0)
 ;
"RTN","IBCNEHL3",234,0)
IIVPROC(BUFF) ; Set IIV Processed Date to current dt/tm & IIV stat (aka SYMBOL)
"RTN","IBCNEHL3",235,0)
 ; Input Variables
"RTN","IBCNEHL3",236,0)
 ; BUFF
"RTN","IBCNEHL3",237,0)
 ;
"RTN","IBCNEHL3",238,0)
 ; Output Variables
"RTN","IBCNEHL3",239,0)
 ; SYMBOL
"RTN","IBCNEHL3",240,0)
 ;
"RTN","IBCNEHL3",241,0)
 N IDUZ,UP
"RTN","IBCNEHL3",242,0)
 S UP(355.33,BUFF_",",.15)=$$NOW^XLFDT()
"RTN","IBCNEHL3",243,0)
 ;  Set IDUZ to the specific, non-human user.
"RTN","IBCNEHL3",244,0)
 S IDUZ=$$FIND1^DIC(200,"","X","INTERFACE,IB EIV")
"RTN","IBCNEHL3",245,0)
 D FILE^DIE("I","UP","ERROR")
"RTN","IBCNEHL3",246,0)
 ; set the symbol of the buffer entry
"RTN","IBCNEHL3",247,0)
 D BUFF^IBCNEUT2(BUFF,SYMBOL)  ; reset symbol to appropriate value
"RTN","IBCNEHL3",248,0)
 Q
"RTN","IBCNEHL3",249,0)
 ;
"RTN","IBCNEHL3",250,0)
PFN(IN1DATA) ;  Find Payer from HL7 msg
"RTN","IBCNEHL3",251,0)
 ;
"RTN","IBCNEHL3",252,0)
 ; Input Variables
"RTN","IBCNEHL3",253,0)
 ; IN1DATA, TRACE
"RTN","IBCNEHL3",254,0)
 ;
"RTN","IBCNEHL3",255,0)
 ; Output Variables
"RTN","IBCNEHL3",256,0)
 ; ERFLG,ERROR,PIEN
"RTN","IBCNEHL3",257,0)
 ;
"RTN","IBCNEHL3",258,0)
 N IERN,PAYRID
"RTN","IBCNEHL3",259,0)
 S PAYRID=$$CLNSTR^IBCNEHLU($P($P(IN1DATA,HLFS,4),$E(HL("ECH"))),HL("ECH"),$E(HL("ECH")))
"RTN","IBCNEHL3",260,0)
 S PIEN=+$$FIND1^DIC(365.12,"","MX",PAYRID)
"RTN","IBCNEHL3",261,0)
 I PIEN=0 D  Q
"RTN","IBCNEHL3",262,0)
 . S ERFLG=1,IERN=$$ERRN^IBCNEUT7("ERROR(""DIERR"")")
"RTN","IBCNEHL3",263,0)
 . S ERROR("DIERR",IERN,"TEXT",1)="National Id: "_PAYRID_" not found in Payer Table"
"RTN","IBCNEHL3",264,0)
 . S ERROR("DIERR",IERN,"TEXT",2)="for Trace Number: "_TRACE
"RTN","IBCNEHL3",265,0)
 Q
"RTN","IBCNEHL3",266,0)
 ;
"RTN","IBCNEHL3",267,0)
GIN1() ;Get IN1 segment
"RTN","IBCNEHL3",268,0)
 ;
"RTN","IBCNEHL3",269,0)
 ; Input Variables
"RTN","IBCNEHL3",270,0)
 ; HCT
"RTN","IBCNEHL3",271,0)
 ;
"RTN","IBCNEHL3",272,0)
 ; Returns value of SEGMT
"RTN","IBCNEHL3",273,0)
 ;
"RTN","IBCNEHL3",274,0)
 N IPCT,SEGMT
"RTN","IBCNEHL3",275,0)
 S IPCT=HCT,SEGMT=""
"RTN","IBCNEHL3",276,0)
 F  S IPCT=$O(^TMP($J,"IBCNEHLI",IPCT)) Q:IPCT=""  D
"RTN","IBCNEHL3",277,0)
 . I $E(^TMP($J,"IBCNEHLI",IPCT,0),1,3)="IN1" S SEGMT=^TMP($J,"IBCNEHLI",IPCT,0)
"RTN","IBCNEHL3",278,0)
 Q SEGMT
"RTN","IBCNEHL4")
0^13^B96805218^B25894966
"RTN","IBCNEHL4",1,0)
IBCNEHL4 ;DAOU/ALA - HL7 Process Incoming RPI Msgs (cont.) ;26-JUN-2002  ; Compiled December 16, 2004 15:35:46
"RTN","IBCNEHL4",2,0)
 ;;2.0;INTEGRATED BILLING;**300,416**;21-MAR-94;Build 58
"RTN","IBCNEHL4",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHL4",4,0)
 ;
"RTN","IBCNEHL4",5,0)
 ;**Program Description**
"RTN","IBCNEHL4",6,0)
 ;  This pgm will process the non-repeating segments of the
"RTN","IBCNEHL4",7,0)
 ;  incoming eIV response msgs.
"RTN","IBCNEHL4",8,0)
 ;  It was separated out from IBCNEHL2 to conserve space.
"RTN","IBCNEHL4",9,0)
 ;  
"RTN","IBCNEHL4",10,0)
 ;  This routine is based on IBCNEHLP which was introduced with patch 184, and subsequently
"RTN","IBCNEHL4",11,0)
 ;  patched with patches 252 and 271.  IBCNEHLP is obsolete and deleted with patch 300.
"RTN","IBCNEHL4",12,0)
 ;
"RTN","IBCNEHL4",13,0)
 ; * Each of these tags are called by IBCNEHL2.
"RTN","IBCNEHL4",14,0)
 ;
"RTN","IBCNEHL4",15,0)
 ;  Variables
"RTN","IBCNEHL4",16,0)
 ;    SEG = HL7 Seg Name
"RTN","IBCNEHL4",17,0)
 ;    MSGID = Original Msg Control ID
"RTN","IBCNEHL4",18,0)
 ;    ACK =  Acknowledgment (AA=Accepted, AE=Error)
"RTN","IBCNEHL4",19,0)
 ;    ERTXT = Error Msg Text
"RTN","IBCNEHL4",20,0)
 ;    ERFLG = Error quit flag
"RTN","IBCNEHL4",21,0)
 ;    ERACT = Error Action
"RTN","IBCNEHL4",22,0)
 ;    ERCON = Error Condition
"RTN","IBCNEHL4",23,0)
 ;    RIEN = Response Record IEN
"RTN","IBCNEHL4",24,0)
 ;    IBSEG = Array of the segment
"RTN","IBCNEHL4",25,0)
 ;
"RTN","IBCNEHL4",26,0)
 Q  ; No direct calls
"RTN","IBCNEHL4",27,0)
 ;
"RTN","IBCNEHL4",28,0)
MSA ;  Process the MSA seg
"RTN","IBCNEHL4",29,0)
 ;
"RTN","IBCNEHL4",30,0)
 ;  Input:
"RTN","IBCNEHL4",31,0)
 ;  IBSEG,MGRP
"RTN","IBCNEHL4",32,0)
 ;
"RTN","IBCNEHL4",33,0)
 ;  Output:
"RTN","IBCNEHL4",34,0)
 ;  ERACT,ERCON,ERROR,ERTXT,RIEN,TRACE,ACK
"RTN","IBCNEHL4",35,0)
 ;
"RTN","IBCNEHL4",36,0)
 N MSGID,RSUPDT,VRFDT
"RTN","IBCNEHL4",37,0)
 S ACK=$G(IBSEG(2)),MSGID=$G(IBSEG(3)),TRACE=$G(IBSEG(4))
"RTN","IBCNEHL4",38,0)
 S ERTXT=$$DECHL7^IBCNEHL2($P($G(IBSEG(7)),$E(HLECH),2)),ERACT=$G(IBSEG(6)),ERCON=$P($G(IBSEG(7)),$E(HLECH),1)
"RTN","IBCNEHL4",39,0)
 ;
"RTN","IBCNEHL4",40,0)
 ; If no Control Id, send Mailman error msg
"RTN","IBCNEHL4",41,0)
 I MSGID="" D ERRMSA(TRACE,MGRP) S ERFLG=1 G MSAX
"RTN","IBCNEHL4",42,0)
 ;
"RTN","IBCNEHL4",43,0)
 ; Check for msg id/payer combination and get response IEN
"RTN","IBCNEHL4",44,0)
 D PCK^IBCNEHL3
"RTN","IBCNEHL4",45,0)
 ;
"RTN","IBCNEHL4",46,0)
 ; If no record IEN, quit
"RTN","IBCNEHL4",47,0)
 I $G(RIEN)="" G MSAX
"RTN","IBCNEHL4",48,0)
 ;
"RTN","IBCNEHL4",49,0)
 ; Update record w/info
"RTN","IBCNEHL4",50,0)
 S RSUPDT(365,RIEN_",",.09)=TRACE,RSUPDT(365,RIEN_",",.06)=3
"RTN","IBCNEHL4",51,0)
 S RSUPDT(365,RIEN_",",4.01)=ERTXT
"RTN","IBCNEHL4",52,0)
 S VRFDT=$$NOW^XLFDT(),RSUPDT(365,RIEN_",",.07)=VRFDT
"RTN","IBCNEHL4",53,0)
 ;
"RTN","IBCNEHL4",54,0)
 ; Update w/internal values
"RTN","IBCNEHL4",55,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHL4",56,0)
 ;
"RTN","IBCNEHL4",57,0)
 S RSUPDT(365,RIEN_",",1.14)=ERCON,RSUPDT(365,RIEN_",",1.15)=ERACT
"RTN","IBCNEHL4",58,0)
 ;
"RTN","IBCNEHL4",59,0)
 ; Update w/external values
"RTN","IBCNEHL4",60,0)
 D FILE^DIE("ET","RSUPDT","ERROR")
"RTN","IBCNEHL4",61,0)
MSAX ;
"RTN","IBCNEHL4",62,0)
 Q
"RTN","IBCNEHL4",63,0)
 ;
"RTN","IBCNEHL4",64,0)
ERRMSA(TRACE,MGRP) ; Msg Control Id is blank -  Send Mailman error msg
"RTN","IBCNEHL4",65,0)
 ;
"RTN","IBCNEHL4",66,0)
 N HCT,ICN,MSG,MSGCT,NAME,XMSUB
"RTN","IBCNEHL4",67,0)
 ;
"RTN","IBCNEHL4",68,0)
 ;1st find the PID seg to extract ICN and patient name
"RTN","IBCNEHL4",69,0)
 D GTICNM^IBCNEHLU(.ICN,.NAME)
"RTN","IBCNEHL4",70,0)
 ;
"RTN","IBCNEHL4",71,0)
 ;Send the Mailman error msg
"RTN","IBCNEHL4",72,0)
 S XMSUB="Message Control Id Field is Blank",MSGCT=$S(TRACE="":4,1:3)
"RTN","IBCNEHL4",73,0)
 S MSG(1)="A response was received w/a blank Message Control Id"
"RTN","IBCNEHL4",74,0)
 I TRACE="" S MSG(1)=MSG(1)_" and Trace #"
"RTN","IBCNEHL4",75,0)
 S MSG(2)="for "_$S(TRACE'="":"Trace #: "_TRACE_", ",1:"")_"ICN #: "_ICN_", Patient: "_NAME_"."
"RTN","IBCNEHL4",76,0)
 I TRACE="" D
"RTN","IBCNEHL4",77,0)
 . S MSG(3)="It is likely that there are communication issues with the EC."
"RTN","IBCNEHL4",78,0)
 S MSG(MSGCT)="This response cannot be processed.  Please contact the Help Desk."
"RTN","IBCNEHL4",79,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHL4",80,0)
 Q
"RTN","IBCNEHL4",81,0)
 ;
"RTN","IBCNEHL4",82,0)
PID ;  Process the PID seg
"RTN","IBCNEHL4",83,0)
 N DFN,DOB,DOD,FLD,ICN,IENSTR,LFAC,LUPDT,NAME,RSUPDT,SEX,SSN,STATE,XDFN,IDLIST
"RTN","IBCNEHL4",84,0)
 N SUBCNT,SUBC,SUBCID,SUBCDATA,IERN
"RTN","IBCNEHL4",85,0)
 ;
"RTN","IBCNEHL4",86,0)
 S ERFLG=0
"RTN","IBCNEHL4",87,0)
 S DOB=$G(IBSEG(8)),SEX=$G(IBSEG(9))
"RTN","IBCNEHL4",88,0)
 S NAME=$G(IBSEG(6))
"RTN","IBCNEHL4",89,0)
 S DOD=$G(IBSEG(30)),LUPDT=$G(IBSEG(34)),LFAC=$G(IBSEG(35))
"RTN","IBCNEHL4",90,0)
 ;
"RTN","IBCNEHL4",91,0)
 ; Parse Repeating ID field to fill in other identifiers
"RTN","IBCNEHL4",92,0)
 S (ICN,SSN,DFN)=""
"RTN","IBCNEHL4",93,0)
 S IDLIST=$G(IBSEG(4))
"RTN","IBCNEHL4",94,0)
 F SUBCNT=1:1:$L(IDLIST,$E(HLECH,2,2)) D
"RTN","IBCNEHL4",95,0)
 . S SUBC=$P(IDLIST,$E(HLECH,2,2),SUBCNT)
"RTN","IBCNEHL4",96,0)
 . S SUBCID=$P(SUBC,$E(HLECH),5)    ; Identifier Type Code
"RTN","IBCNEHL4",97,0)
 . S SUBCDATA=$P(SUBC,$E(HLECH),1) ; Data Value
"RTN","IBCNEHL4",98,0)
 . I SUBCID="PI" S DFN=SUBCDATA
"RTN","IBCNEHL4",99,0)
 . I SUBCID="SS" S SSN=SUBCDATA
"RTN","IBCNEHL4",100,0)
 . I SUBCID="NI" S ICN=SUBCDATA
"RTN","IBCNEHL4",101,0)
 ;
"RTN","IBCNEHL4",102,0)
 ;  Convert data from HL7 format to VistA format
"RTN","IBCNEHL4",103,0)
 S NAME=$$DECHL7^IBCNEHL2($$FMNAME^HLFNC(NAME,HLECH))
"RTN","IBCNEHL4",104,0)
 S DOD=$$FMDATE^HLFNC(DOD),DOB=$$FMDATE^HLFNC(DOB),LUPDT=$$FMDATE^HLFNC(LUPDT)
"RTN","IBCNEHL4",105,0)
 ;
"RTN","IBCNEHL4",106,0)
 ; Use ICN to find the patients DFN at this site
"RTN","IBCNEHL4",107,0)
 I ICN'="" S XDFN=$$GETDFN^MPIF001(ICN)
"RTN","IBCNEHL4",108,0)
 I +$G(XDFN)'>0,+$G(ICN)>0 D  Q
"RTN","IBCNEHL4",109,0)
 . S ERFLG=1,IERN=$$ERRN^IBCNEUT7("ERROR(""DIERR"")")
"RTN","IBCNEHL4",110,0)
 . S ERROR("DIERR",IERN,"TEXT",1)="Unable to determine the patient's DFN value for this site."
"RTN","IBCNEHL4",111,0)
 . S ERROR("DIERR",IERN,"TEXT",2)=" The ICN for the patient in this response is ICN: "_ICN
"RTN","IBCNEHL4",112,0)
 . S ERROR("DIERR",IERN,"TEXT",3)=" eIV was unable to file the response information."
"RTN","IBCNEHL4",113,0)
 ;
"RTN","IBCNEHL4",114,0)
 I +ICN>0 S DFN=XDFN
"RTN","IBCNEHL4",115,0)
 ;
"RTN","IBCNEHL4",116,0)
 ;  Perform date of death check
"RTN","IBCNEHL4",117,0)
 I DOD'="" D DODCK^IBCNEHLU(DFN,DOD,MGRP,NAME,RIEN,SSN)
"RTN","IBCNEHL4",118,0)
 ;
"RTN","IBCNEHL4",119,0)
 S IENSTR=RIEN_","
"RTN","IBCNEHL4",120,0)
 I $P(^IBCN(365,RIEN,0),U,2)="" S RSUPDT(365,IENSTR,.02)=DFN
"RTN","IBCNEHL4",121,0)
 S RSUPDT(365,IENSTR,1.02)=DOB,RSUPDT(365,IENSTR,1.04)=SEX
"RTN","IBCNEHL4",122,0)
 S RSUPDT(365,IENSTR,1.03)=SSN,RSUPDT(365,IENSTR,1.16)=DOD
"RTN","IBCNEHL4",123,0)
 S RSUPDT(365,IENSTR,1.01)=NAME,RSUPDT(365,IENSTR,1.08)="v"
"RTN","IBCNEHL4",124,0)
 S RSUPDT(365,IENSTR,1.09)="01"
"RTN","IBCNEHL4",125,0)
 ; Subscriber address
"RTN","IBCNEHL4",126,0)
 S FLD=$G(IBSEG(11))
"RTN","IBCNEHL4",127,0)
 S RSUPDT(365,IENSTR,5.01)=$P($P(FLD,HLCMP),HLSCMP) ; line 1
"RTN","IBCNEHL4",128,0)
 S RSUPDT(365,IENSTR,5.02)=$P(FLD,HLCMP,2) ; line 2
"RTN","IBCNEHL4",129,0)
 S RSUPDT(365,IENSTR,5.03)=$P(FLD,HLCMP,3) ; city
"RTN","IBCNEHL4",130,0)
 S STATE=+$$FIND1^DIC(5,,"X",$P(FLD,HLCMP,4),"C") I STATE>0 S RSUPDT(365,IENSTR,5.04)=STATE ; state
"RTN","IBCNEHL4",131,0)
 S RSUPDT(365,IENSTR,5.05)=$P(FLD,HLCMP,5) ; zip
"RTN","IBCNEHL4",132,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHL4",133,0)
PIDX ;
"RTN","IBCNEHL4",134,0)
 Q
"RTN","IBCNEHL4",135,0)
 ;
"RTN","IBCNEHL4",136,0)
GT1 ;  Process the GT1 Guarantor seg
"RTN","IBCNEHL4",137,0)
 ;
"RTN","IBCNEHL4",138,0)
 ; Input:
"RTN","IBCNEHL4",139,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL4",140,0)
 ;
"RTN","IBCNEHL4",141,0)
 ; Output:
"RTN","IBCNEHL4",142,0)
 ; ERROR,SUBID
"RTN","IBCNEHL4",143,0)
 ;
"RTN","IBCNEHL4",144,0)
 N DOB,NAME,RSUPDT,SEX,SSN,SUBIDC
"RTN","IBCNEHL4",145,0)
 S NAME=$G(IBSEG(4)),DOB=$G(IBSEG(9)),SEX=$G(IBSEG(10))
"RTN","IBCNEHL4",146,0)
 S SSN=$G(IBSEG(13))
"RTN","IBCNEHL4",147,0)
 ; 
"RTN","IBCNEHL4",148,0)
 S SUBIDC=$G(IBSEG(3))  ; Raw field with sub-comp.
"RTN","IBCNEHL4",149,0)
 S SUBID=$P(SUBIDC,$E(HLECH),1)
"RTN","IBCNEHL4",150,0)
 S SUBID=$$DECHL7^IBCNEHL2(SUBID)
"RTN","IBCNEHL4",151,0)
 ;
"RTN","IBCNEHL4",152,0)
 S DOB=$$FMDATE^HLFNC(DOB),NAME=$$DECHL7^IBCNEHL2($$FMNAME^HLFNC(NAME,HLECH))
"RTN","IBCNEHL4",153,0)
 ;
"RTN","IBCNEHL4",154,0)
 S RSUPDT(365,RIEN_",",1.01)=NAME,RSUPDT(365,RIEN_",",1.08)=""
"RTN","IBCNEHL4",155,0)
 S RSUPDT(365,RIEN_",",1.02)=DOB,RSUPDT(365,RIEN_",",1.04)=SEX
"RTN","IBCNEHL4",156,0)
 S RSUPDT(365,RIEN_",",1.03)=SSN
"RTN","IBCNEHL4",157,0)
 S RSUPDT(365,RIEN_",",1.18)=SUBID
"RTN","IBCNEHL4",158,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHL4",159,0)
GT1X ;
"RTN","IBCNEHL4",160,0)
 Q
"RTN","IBCNEHL4",161,0)
 ;
"RTN","IBCNEHL4",162,0)
ZHS(EBDA,ERROR,IBSEG,RIEN) ; Process ZHS Healthcare services delivery segment
"RTN","IBCNEHL4",163,0)
 N IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",164,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",165,0)
 S IENSTR="+1,"_EBDA_","_RIEN_","
"RTN","IBCNEHL4",166,0)
 S RSUPDT(365.27,IENSTR,.01)=+$O(^IBCN(365,RIEN,2,EBDA,7,"B",""),-1)+1 ; ZHS sequence
"RTN","IBCNEHL4",167,0)
 ; Benefit quantity & qualifier
"RTN","IBCNEHL4",168,0)
 S QUAL=$P($G(IBSEG(3)),HLCMP),VALUE=$G(IBSEG(4))
"RTN","IBCNEHL4",169,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.27,IENSTR,.02)=VALUE,RSUPDT(365.27,IENSTR,.03)=QUAL
"RTN","IBCNEHL4",170,0)
 ; Sampling frequency & qualifier
"RTN","IBCNEHL4",171,0)
 S QUAL=$P($G(IBSEG(5)),HLCMP),VALUE=$G(IBSEG(6))
"RTN","IBCNEHL4",172,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.27,IENSTR,.04)=VALUE,RSUPDT(365.27,IENSTR,.05)=QUAL
"RTN","IBCNEHL4",173,0)
 ; Time period & qualifier
"RTN","IBCNEHL4",174,0)
 S QUAL=$P($G(IBSEG(7)),HLCMP),VALUE=$G(IBSEG(8))
"RTN","IBCNEHL4",175,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.27,IENSTR,.06)=VALUE,RSUPDT(365.27,IENSTR,.07)=QUAL
"RTN","IBCNEHL4",176,0)
 S RSUPDT(365.27,IENSTR,.08)=$P($G(IBSEG(9)),HLCMP) ; Delivery frequency
"RTN","IBCNEHL4",177,0)
 S RSUPDT(365.27,IENSTR,.09)=$P($G(IBSEG(10)),HLCMP) ; Delivery pattern
"RTN","IBCNEHL4",178,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",179,0)
 Q
"RTN","IBCNEHL4",180,0)
 ;
"RTN","IBCNEHL4",181,0)
ZRF(EBDA,ERROR,IBSEG,RIEN) ; Process ZRF Reference identification segment
"RTN","IBCNEHL4",182,0)
 N IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",183,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",184,0)
 S IENSTR="+1,"_EBDA_","_RIEN_","
"RTN","IBCNEHL4",185,0)
 S RSUPDT(365.291,IENSTR,.01)=+$O(^IBCN(365,RIEN,2,EBDA,10,"B",""),-1)+1 ; ZRF sequence
"RTN","IBCNEHL4",186,0)
 ; Reference id & qualifier
"RTN","IBCNEHL4",187,0)
 S QUAL=$P($G(IBSEG(3)),HLCMP),VALUE=$G(IBSEG(4))
"RTN","IBCNEHL4",188,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.291,IENSTR,.02)=VALUE,RSUPDT(365.291,IENSTR,.03)=QUAL
"RTN","IBCNEHL4",189,0)
 S RSUPDT(365.291,IENSTR,.04)=$G(IBSEG(5)) ; Description
"RTN","IBCNEHL4",190,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",191,0)
 Q
"RTN","IBCNEHL4",192,0)
 ;
"RTN","IBCNEHL4",193,0)
ZSD(EBDA,ERROR,IBSEG,RIEN) ; Process ZSD Subscriber date segment
"RTN","IBCNEHL4",194,0)
 N IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",195,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",196,0)
 S IENSTR="+1,"_EBDA_","_RIEN_","
"RTN","IBCNEHL4",197,0)
 S RSUPDT(365.28,IENSTR,.01)=+$O(^IBCN(365,RIEN,2,EBDA,8,"B",""),-1)+1 ; ZSD sequence
"RTN","IBCNEHL4",198,0)
 ; Date & qualifier
"RTN","IBCNEHL4",199,0)
 S QUAL=$P($G(IBSEG(3)),HLCMP),VALUE=$P($G(IBSEG(5)),HLCMP)
"RTN","IBCNEHL4",200,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.28,IENSTR,.02)=VALUE,RSUPDT(365.28,IENSTR,.03)=QUAL
"RTN","IBCNEHL4",201,0)
 S RSUPDT(365.28,IENSTR,.04)=$P($G(IBSEG(4)),HLCMP) ; Date format
"RTN","IBCNEHL4",202,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",203,0)
 Q
"RTN","IBCNEHL4",204,0)
 ;
"RTN","IBCNEHL4",205,0)
ZII(EBDA,ERROR,IBSEG,RIEN) ; Process ZII Subscriber additional info segment
"RTN","IBCNEHL4",206,0)
 N IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",207,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",208,0)
 S IENSTR="+1,"_EBDA_","_RIEN_","
"RTN","IBCNEHL4",209,0)
 S RSUPDT(365.29,IENSTR,.01)=+$O(^IBCN(365,RIEN,2,EBDA,9,"B",""),-1)+1 ; ZII sequence
"RTN","IBCNEHL4",210,0)
 ; place of service or diagnosis (if qualifier is "BF" or "BK") & qualifier
"RTN","IBCNEHL4",211,0)
 S QUAL=$P($G(IBSEG(3)),HLCMP) Q:QUAL=""
"RTN","IBCNEHL4",212,0)
 S RSUPDT(365.29,IENSTR,$S(".BF.BK."[("."_QUAL_"."):.03,1:.02))=$P($G(IBSEG(4)),HLCMP)
"RTN","IBCNEHL4",213,0)
 S RSUPDT(365.29,IENSTR,.04)=QUAL
"RTN","IBCNEHL4",214,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",215,0)
 Q
"RTN","IBCNEHL4",216,0)
 ;
"RTN","IBCNEHL4",217,0)
ZTY(EBDA,ERROR,IBSEG,RIEN) ; Process ZTY Benefit related entity segment
"RTN","IBCNEHL4",218,0)
 N FLD,IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",219,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",220,0)
 S IENSTR=EBDA_","_RIEN_","
"RTN","IBCNEHL4",221,0)
 ; Entity id code & qualifier
"RTN","IBCNEHL4",222,0)
 S QUAL=$P($G(IBSEG(4)),HLCMP),VALUE=$P($G(IBSEG(3)),HLCMP)
"RTN","IBCNEHL4",223,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.02,IENSTR,3.01)=VALUE,RSUPDT(365.02,IENSTR,3.02)=QUAL
"RTN","IBCNEHL4",224,0)
 ; Entity name
"RTN","IBCNEHL4",225,0)
 S FLD=$G(IBSEG(5))
"RTN","IBCNEHL4",226,0)
 S RSUPDT(365.02,IENSTR,3.03)=$P($P(FLD,HLCMP),HLSCMP)_","_$P(FLD,HLCMP,2)_" "_$P(FLD,HLCMP,3)_" "_$P(FLD,HLCMP,4)
"RTN","IBCNEHL4",227,0)
 ; make sure that name is not empty
"RTN","IBCNEHL4",228,0)
 I $TR(RSUPDT(365.02,IENSTR,3.03),", ")="" K RSUPDT(365.02,IENSTR,3.03)
"RTN","IBCNEHL4",229,0)
 ; Entity id & qualifier
"RTN","IBCNEHL4",230,0)
 S QUAL=$P($G(IBSEG(6)),HLCMP),VALUE=$G(IBSEG(7))
"RTN","IBCNEHL4",231,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.02,IENSTR,3.04)=VALUE,RSUPDT(365.02,IENSTR,3.05)=QUAL
"RTN","IBCNEHL4",232,0)
 ; Entity address
"RTN","IBCNEHL4",233,0)
 S FLD=$G(IBSEG(8))
"RTN","IBCNEHL4",234,0)
 S RSUPDT(365.02,IENSTR,4.01)=$P($P(FLD,HLCMP),HLSCMP) ; line 1
"RTN","IBCNEHL4",235,0)
 S RSUPDT(365.02,IENSTR,4.02)=$P(FLD,HLCMP,2) ; line 2
"RTN","IBCNEHL4",236,0)
 S RSUPDT(365.02,IENSTR,4.03)=$P(FLD,HLCMP,3) ; city
"RTN","IBCNEHL4",237,0)
 S VALUE=+$$FIND1^DIC(5,,"X",$P(FLD,HLCMP,4),"C") I VALUE>0 S RSUPDT(365.02,IENSTR,4.04)=VALUE ; state
"RTN","IBCNEHL4",238,0)
 S RSUPDT(365.02,IENSTR,4.05)=$P(FLD,HLCMP,5) ; zip / postal code
"RTN","IBCNEHL4",239,0)
 S RSUPDT(365.02,IENSTR,4.06)=$P(FLD,HLCMP,6) ; country code
"RTN","IBCNEHL4",240,0)
 ; Entity location & qualifier
"RTN","IBCNEHL4",241,0)
 S QUAL=$G(IBSEG(9)),VALUE=$G(IBSEG(10))
"RTN","IBCNEHL4",242,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.02,IENSTR,4.07)=VALUE,RSUPDT(365.02,IENSTR,4.08)=QUAL
"RTN","IBCNEHL4",243,0)
 ; Provider code
"RTN","IBCNEHL4",244,0)
 S RSUPDT(365.02,IENSTR,5.01)=$P($G(IBSEG(11)),HLCMP)
"RTN","IBCNEHL4",245,0)
 ; Reference id & qualifier
"RTN","IBCNEHL4",246,0)
 S QUAL=$P($G(IBSEG(12)),HLCMP),VALUE=$G(IBSEG(13))
"RTN","IBCNEHL4",247,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.02,IENSTR,5.02)=VALUE,RSUPDT(365.02,IENSTR,5.03)=QUAL
"RTN","IBCNEHL4",248,0)
 D FILE^DIE("ET","RSUPDT","ERROR")
"RTN","IBCNEHL4",249,0)
 Q
"RTN","IBCNEHL4",250,0)
 ;
"RTN","IBCNEHL4",251,0)
G2OCTD(EBDA,ERROR,IBSEG,RIEN) ; Process G2O.CTD Benefit related entity contact data segment
"RTN","IBCNEHL4",252,0)
 N FLD,IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",253,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",254,0)
 S IENSTR="+1,"_EBDA_","_RIEN_","
"RTN","IBCNEHL4",255,0)
 S RSUPDT(365.26,IENSTR,.01)=+$O(^IBCN(365,RIEN,2,EBDA,6,"B",""),-1)+1 ; G2O.CTD sequence
"RTN","IBCNEHL4",256,0)
 ; Contact name
"RTN","IBCNEHL4",257,0)
 S FLD=$G(IBSEG(3))
"RTN","IBCNEHL4",258,0)
 S RSUPDT(365.26,IENSTR,.02)=$P(FLD,HLCMP,5)_" "_$P($P(FLD,HLCMP),HLSCMP)_","_$P(FLD,HLCMP,2)_" "_$P(FLD,HLCMP,3)_" "_$P(FLD,HLCMP,4)_" "_$P(FLD,HLCMP,6)
"RTN","IBCNEHL4",259,0)
 ; make sure that name is not empty
"RTN","IBCNEHL4",260,0)
 I $TR(RSUPDT(365.26,IENSTR,.02),", ")="" K RSUPDT(365.26,IENSTR,.02)
"RTN","IBCNEHL4",261,0)
 ; Contact number & qualifier
"RTN","IBCNEHL4",262,0)
 S FLD=$G(IBSEG(6)),QUAL=$P(FLD,HLCMP,9),VALUE=$P(FLD,HLCMP)
"RTN","IBCNEHL4",263,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.26,IENSTR,.03)=VALUE,RSUPDT(365.26,IENSTR,.04)=QUAL
"RTN","IBCNEHL4",264,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",265,0)
 Q
"RTN","IBCNEHLI")
0^61^B8196060^B8071384
"RTN","IBCNEHLI",1,0)
IBCNEHLI ;DAOU/ALA - Incoming HL7 messages ;16-JUN-2002
"RTN","IBCNEHLI",2,0)
 ;;2.0;INTEGRATED BILLING;**184,252,251,271,300,416**;21-MAR-94;Build 58
"RTN","IBCNEHLI",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHLI",4,0)
 ;
"RTN","IBCNEHLI",5,0)
 ;**Program Description**
"RTN","IBCNEHLI",6,0)
 ;  This program parses each incoming HL7 message.
"RTN","IBCNEHLI",7,0)
 ;
"RTN","IBCNEHLI",8,0)
EN ;  Starting point - put message into a TMP global
"RTN","IBCNEHLI",9,0)
 ;
"RTN","IBCNEHLI",10,0)
 N ACK,BUFF,DFN,ERACT,ERCON,ERFLG,ERTXT,EVENT,HCT,HLECH,HLEID
"RTN","IBCNEHLI",11,0)
 N HLEIDS,HLFS,HLQ,IBPRTCL,IDUZ,MGRP,MSGID,RDAT0,RIEN,SBDEP,SEG
"RTN","IBCNEHLI",12,0)
 N SEGMT,SEGMT2,TAG,TQN,TRACE,VRFDT,DISYS,IPCT,PAYRID,PIEN,CNT
"RTN","IBCNEHLI",13,0)
 N ERROR,IRIEN,RSTYPE,SUBID,TQIEN
"RTN","IBCNEHLI",14,0)
 N DA,EBDA,IBFDA,II,MSGP,SYMBOL,IBSEG,PP,PRIEN,QFL,IBIEN,TQDATA,IBQFL
"RTN","IBCNEHLI",15,0)
 N DATAMFK,EPHARM
"RTN","IBCNEHLI",16,0)
 ;
"RTN","IBCNEHLI",17,0)
 K ^TMP($J,"IBCNEHLI")
"RTN","IBCNEHLI",18,0)
 F SEGCNT=1:1 X HLNEXT Q:HLQUIT'>0  D
"RTN","IBCNEHLI",19,0)
 . S CNT=0
"RTN","IBCNEHLI",20,0)
 . S ^TMP($J,"IBCNEHLI",SEGCNT,CNT)=HLNODE
"RTN","IBCNEHLI",21,0)
 . F  S CNT=$O(HLNODE(CNT)) Q:'CNT  D
"RTN","IBCNEHLI",22,0)
 .. S ^TMP($J,"IBCNEHLI",SEGCNT,CNT)=HLNODE(CNT)
"RTN","IBCNEHLI",23,0)
 ;
"RTN","IBCNEHLI",24,0)
 ;  Get the eIV user
"RTN","IBCNEHLI",25,0)
 S IDUZ=$$FIND1^DIC(200,"","X","INTERFACE,IB EIV")
"RTN","IBCNEHLI",26,0)
 ;   Determine which protocol to use
"RTN","IBCNEHLI",27,0)
 S SEGMT=$G(^TMP($J,"IBCNEHLI",1,0))
"RTN","IBCNEHLI",28,0)
 I $E(SEGMT,1,3)'="MSH" D  D ERR Q
"RTN","IBCNEHLI",29,0)
 . S MSG(1)="MSH Segment is not the first segment found"
"RTN","IBCNEHLI",30,0)
 . S MSG(2)="Please call the Help Desk and report this problem."
"RTN","IBCNEHLI",31,0)
 S HLFS=$E(SEGMT,4)
"RTN","IBCNEHLI",32,0)
 S EVENT=$P(SEGMT,HLFS,9),IBPRTCL=""
"RTN","IBCNEHLI",33,0)
 ;
"RTN","IBCNEHLI",34,0)
 ;  The event type determines protocol
"RTN","IBCNEHLI",35,0)
 I EVENT="MFN^M01" S TAG="TBL",IBPRTCL="IBCNE IIV MFN IN"
"RTN","IBCNEHLI",36,0)
 I EVENT="RPI^I01" S TAG="RSP",IBPRTCL="IBCNE IIV IN" I '$$HL7VAL G XIT
"RTN","IBCNEHLI",37,0)
 I EVENT="MFK^M01" S TAG="ACK",IBPRTCL="IBCNE IIV REGISTER"
"RTN","IBCNEHLI",38,0)
 I IBPRTCL="" S MSG(1)="Unable to find a protocol for Event = "_EVENT D ERR G XIT
"RTN","IBCNEHLI",39,0)
 ; S HLEID=$$HLP^IBCNEHLU(IBPRTCL)
"RTN","IBCNEHLI",40,0)
 ;
"RTN","IBCNEHLI",41,0)
 ;  Initialize the HL7 variables
"RTN","IBCNEHLI",42,0)
 D INIT^HLFNC2(IBPRTCL,.HL)
"RTN","IBCNEHLI",43,0)
 ; S HLEIDS=$O(^ORD(101,HLEID,775,"B",0))
"RTN","IBCNEHLI",44,0)
 ;
"RTN","IBCNEHLI",45,0)
 ;  Call the event tag
"RTN","IBCNEHLI",46,0)
 D @TAG
"RTN","IBCNEHLI",47,0)
 ;
"RTN","IBCNEHLI",48,0)
XIT K ^TMP($J,"IBCNEHLI"),HL,HLNEXT,HLNODE,HLQUIT,SEGCNT
"RTN","IBCNEHLI",49,0)
 Q
"RTN","IBCNEHLI",50,0)
 ;
"RTN","IBCNEHLI",51,0)
TBL ;  Table Update Processing
"RTN","IBCNEHLI",52,0)
 D ^IBCNEHLT
"RTN","IBCNEHLI",53,0)
 ;
"RTN","IBCNEHLI",54,0)
 I ERFLG D ERR
"RTN","IBCNEHLI",55,0)
 K ERFLG
"RTN","IBCNEHLI",56,0)
 ;
"RTN","IBCNEHLI",57,0)
 ; Send MFK Message (Application Acknowledgement)?
"RTN","IBCNEHLI",58,0)
 I HL("APAT")="AL",$G(EPHARM) D ^IBCNRMFK
"RTN","IBCNEHLI",59,0)
 Q
"RTN","IBCNEHLI",60,0)
 ;
"RTN","IBCNEHLI",61,0)
RSP ;  Response Processing
"RTN","IBCNEHLI",62,0)
 D ^IBCNEHL1
"RTN","IBCNEHLI",63,0)
 ;
"RTN","IBCNEHLI",64,0)
 K ACK,BUFF,DFN,ERACT,ERCON,ERFLG,ERTXT,EVENT,HCT,HL,HLECH,HLEID
"RTN","IBCNEHLI",65,0)
 K HLEIDS,HLFS,HLQ,IBPRTCL,IDUZ,MGRP,MSGID,RDAT0,RIEN,SBDEP,SEG
"RTN","IBCNEHLI",66,0)
 K SEGMT,SEGMT2,TAG,TQN,TRACE,VRFDT,DISYS,IPCT,PAYRID,PIEN
"RTN","IBCNEHLI",67,0)
 K ERROR,IRIEN,RSTYPE,SUBID,TQIEN
"RTN","IBCNEHLI",68,0)
 K DA,EBDA,IBFDA,II,MSGP,SYMBOL,IBSEG,PP,PRIEN,QFL
"RTN","IBCNEHLI",69,0)
 Q
"RTN","IBCNEHLI",70,0)
 ;
"RTN","IBCNEHLI",71,0)
ACK ;  Acknowledgement Processing
"RTN","IBCNEHLI",72,0)
 D ^IBCNEHLK
"RTN","IBCNEHLI",73,0)
 ;
"RTN","IBCNEHLI",74,0)
 Q
"RTN","IBCNEHLI",75,0)
 ;
"RTN","IBCNEHLI",76,0)
ERR ; Process an error
"RTN","IBCNEHLI",77,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEHLI",78,0)
 D MSG^IBCNEUT5(MGRP,"INCOMING eIV HL7 PROBLEM","MSG(")
"RTN","IBCNEHLI",79,0)
 K MSG,MGRP
"RTN","IBCNEHLI",80,0)
 Q
"RTN","IBCNEHLI",81,0)
 ; 
"RTN","IBCNEHLI",82,0)
HL7VAL() ; Check for valid post 300 response
"RTN","IBCNEHLI",83,0)
 N X,HCT
"RTN","IBCNEHLI",84,0)
 S X=0,HCT=0
"RTN","IBCNEHLI",85,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D SPAR^IBCNEHLU I $G(IBSEG(1))="PRD" S X=1 Q
"RTN","IBCNEHLI",86,0)
 Q X
"RTN","IBCNEHLM")
0^72^B21127175^B21111301
"RTN","IBCNEHLM",1,0)
IBCNEHLM ;DAOU/ALA - HL7 Registration MFN Message ;10-JUN-2002
"RTN","IBCNEHLM",2,0)
 ;;2.0;INTEGRATED BILLING;**184,251,300,416**;21-MAR-94;Build 58
"RTN","IBCNEHLM",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHLM",4,0)
 ;
"RTN","IBCNEHLM",5,0)
 ;**Program Description**
"RTN","IBCNEHLM",6,0)
 ;  This program will process the outgoing registration MFN message
"RTN","IBCNEHLM",7,0)
 ;
"RTN","IBCNEHLM",8,0)
 ;  Variables
"RTN","IBCNEHLM",9,0)
 ;    MCT = Lines of MailMan message counter
"RTN","IBCNEHLM",10,0)
 ;    QFL = Quit flag
"RTN","IBCNEHLM",11,0)
 ;    HL* = HL7 package specific variables
"RTN","IBCNEHLM",12,0)
 ;    TAXID = Tax ID
"RTN","IBCNEHLM",13,0)
 ;    CNTCPH = Contact Phone
"RTN","IBCNEHLM",14,0)
 ;    CNTCEM = Contact Email
"RTN","IBCNEHLM",15,0)
 ;    FRSH = Freshness Days
"RTN","IBCNEHLM",16,0)
 ;    MGRP = Mailgroup to email messages to
"RTN","IBCNEHLM",17,0)
 ;    INACT = Inactive Insurance Flag
"RTN","IBCNEHLM",18,0)
 ;    CNTC = Contact IEN
"RTN","IBCNEHLM",19,0)
 ;    APP = Application
"RTN","IBCNEHLM",20,0)
 ;    EVENT = HL7 Event
"RTN","IBCNEHLM",21,0)
 ;    CODE = Values sent in the MFN message
"RTN","IBCNEHLM",22,0)
 ;    IPP = IP Port
"RTN","IBCNEHLM",23,0)
 ;    IPA = IP Address
"RTN","IBCNEHLM",24,0)
 ;    RESP = Response Code
"RTN","IBCNEHLM",25,0)
 ;    IHLP = Interface HL7 Processing Type
"RTN","IBCNEHLM",26,0)
 ;    IHLT = Interface HL7 Batch Start Time
"RTN","IBCNEHLM",27,0)
 ;    IHLS = Interface HL7 Batch Stop Time
"RTN","IBCNEHLM",28,0)
 ;    IVER = Interface Version
"RTN","IBCNEHLM",29,0)
 ;
"RTN","IBCNEHLM",30,0)
REG ;  Registration message for when a site installs
"RTN","IBCNEHLM",31,0)
 NEW TAXID,CNTCPH,CNTCEM,CNTCNM,IBCNE,FRSH,MGRP,INACT,IHLP,MFE,HLSAN
"RTN","IBCNEHLM",32,0)
 NEW IHLT,CNTC,APP,EVENT,CODE,EDT,MFN,HL,HLFS,HLECH,MCT,HLPROD,HLX,ID
"RTN","IBCNEHLM",33,0)
 NEW HLEID,IPP,IPA,IBCNEDAT,HLCS,HLINST,HLN,RESP,HLHDR
"RTN","IBCNEHLM",34,0)
 NEW HLTYPE,HLQ,HLRESLT,IHLS,HLCDOM,HLCINS,HLCSTCP,HLIP,%I,ZMID
"RTN","IBCNEHLM",35,0)
 NEW VMFE,IVER
"RTN","IBCNEHLM",36,0)
 K ^TMP("HLS",$J) S MCT=0,QFL=0
"RTN","IBCNEHLM",37,0)
 ;
"RTN","IBCNEHLM",38,0)
 ;  Get data from IB Parameters File
"RTN","IBCNEHLM",39,0)
 S TAXID=$TR($P($G(^IBE(350.9,1,1)),U,5),"-",""),CNTCPH="",CNTCEM="",CNTCNM=""
"RTN","IBCNEHLM",40,0)
 S IBCNE=$G(^IBE(350.9,1,51))
"RTN","IBCNEHLM",41,0)
 S FRSH=$P(IBCNE,U,1)
"RTN","IBCNEHLM",42,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEHLM",43,0)
 S INACT=$E($$GET1^DIQ(350.9,"1,",51.08,"E"))
"RTN","IBCNEHLM",44,0)
 S IHLP=$P(IBCNE,U,13),IHLT=$P(IBCNE,U,14),CNTC=$P(IBCNE,U,16)
"RTN","IBCNEHLM",45,0)
 S IHLS=$P(IBCNE,U,19)
"RTN","IBCNEHLM",46,0)
 S IVER="4"
"RTN","IBCNEHLM",47,0)
 ;
"RTN","IBCNEHLM",48,0)
 I IHLP="I" S (IHLT,IHLS)=""
"RTN","IBCNEHLM",49,0)
 ;
"RTN","IBCNEHLM",50,0)
 ;  Get contact specific information
"RTN","IBCNEHLM",51,0)
 I CNTC'="" D
"RTN","IBCNEHLM",52,0)
 . S CNTCNM=$P($G(^VA(200,CNTC,0)),U,1)
"RTN","IBCNEHLM",53,0)
 . S CNTCPH=$P($G(^VA(200,CNTC,.13)),U,2)
"RTN","IBCNEHLM",54,0)
 . S CNTCEM=$P($G(^VA(200,CNTC,.15)),U,1)
"RTN","IBCNEHLM",55,0)
 ;
"RTN","IBCNEHLM",56,0)
 ;  Email if any missing data
"RTN","IBCNEHLM",57,0)
 I CNTC="" S MCT=MCT+1,MSG(MCT)="The Contact Person is not defined in the eIV Site Parameters.  ",QFL=1
"RTN","IBCNEHLM",58,0)
 I CNTC'="",CNTCPH="" S MCT=MCT+1,MSG(MCT)="The office phone number of the eIV Contact Person is not defined  (File 200, Field .132).  ",QFL=1
"RTN","IBCNEHLM",59,0)
 I CNTC'="",CNTCEM="" S MCT=MCT+1,MSG(MCT)="The email address of the eIV Contact Person is not defined  (File 200, Field .151).  ",QFL=1
"RTN","IBCNEHLM",60,0)
 ;
"RTN","IBCNEHLM",61,0)
 I IHLP="B",IHLT=""!(IHLS="") D  S QFL=1
"RTN","IBCNEHLM",62,0)
 . S MCT=MCT+1,MSG(MCT)="The ""HL7 Response Processing Method"" selected is Batch but the HL7 Batch "
"RTN","IBCNEHLM",63,0)
 . I IHLT="",IHLS="" S MSG(MCT)=MSG(MCT)_"Start and End Times are blank.  " Q
"RTN","IBCNEHLM",64,0)
 . S MSG(MCT)=MSG(MCT)_$S(IHLT="":"Start",1:"End")_" Time is blank.  "
"RTN","IBCNEHLM",65,0)
 ;
"RTN","IBCNEHLM",66,0)
 I FRSH=""!(INACT="")!(IHLP="") D
"RTN","IBCNEHLM",67,0)
 . S MCT=MCT+1,MSG(MCT)="The following eIV Site Parameters are not defined:  "
"RTN","IBCNEHLM",68,0)
 . I FRSH="" S MCT=MCT+1,MSG(MCT)="""Days between electronic reverification checks"" is blank.  "
"RTN","IBCNEHLM",69,0)
 . I INACT="" S MCT=MCT+1,MSG(MCT)="""Look at a patient's inactive insurance?"" is blank.  "
"RTN","IBCNEHLM",70,0)
 . I IHLP="" S MCT=MCT+1,MSG(MCT)="""HL7 Response Processing Method"" is blank.  "
"RTN","IBCNEHLM",71,0)
 . Q
"RTN","IBCNEHLM",72,0)
 ;
"RTN","IBCNEHLM",73,0)
 I $O(MSG(""))'="" D MLMN
"RTN","IBCNEHLM",74,0)
 I QFL=1 Q
"RTN","IBCNEHLM",75,0)
 ;
"RTN","IBCNEHLM",76,0)
HL ;  When a site installs, the enrollment should be an
"RTN","IBCNEHLM",77,0)
 ;  "MUP" (update) record.
"RTN","IBCNEHLM",78,0)
 N VZRR
"RTN","IBCNEHLM",79,0)
 S MFE(1)="MUP"
"RTN","IBCNEHLM",80,0)
 ;
"RTN","IBCNEHLM",81,0)
 ;  Initialize the HL7
"RTN","IBCNEHLM",82,0)
 D INIT^HLFNC2("IBCNE IIV REGISTER",.HL)
"RTN","IBCNEHLM",83,0)
 S HLFS=HL("FS"),HLECH=HL("ECH"),HL("SAF")=$P($$SITE^VASITE,U,2,3)
"RTN","IBCNEHLM",84,0)
 ; S HLEID=$$HLP^IBCNEHLU("IBCNE IIV REGISTER")
"RTN","IBCNEHLM",85,0)
 ;
"RTN","IBCNEHLM",86,0)
 ;   Set the MFI segment
"RTN","IBCNEHLM",87,0)
 S ID="Facility Table",APP="",EVENT="UPD",RESP="NE"
"RTN","IBCNEHLM",88,0)
 S ^TMP("HLS",$J,1)=$$MFI^VAFHLMFI(ID,APP,EVENT,,,RESP)
"RTN","IBCNEHLM",89,0)
 ;
"RTN","IBCNEHLM",90,0)
 ;  Set the MFE segment
"RTN","IBCNEHLM",91,0)
 S EVENT=MFE(1),MFN="",EDT=$$DT^XLFDT()
"RTN","IBCNEHLM",92,0)
 S CODE=$P($$SITE^VASITE,U,3)_$E(HLECH)
"RTN","IBCNEHLM",93,0)
 S VMFE=$$MFE^VAFHLMFE(EVENT,MFN,EDT,CODE)
"RTN","IBCNEHLM",94,0)
 S $P(VMFE,U,11)=$S($P(VMFE,U,11)="YES":"Y",1:"N")
"RTN","IBCNEHLM",95,0)
 S ^TMP("HLS",$J,2)=VMFE_HLFS_"CE"
"RTN","IBCNEHLM",96,0)
 ;
"RTN","IBCNEHLM",97,0)
 ;  Set the ZRR segment
"RTN","IBCNEHLM",98,0)
 S VZRR="ZRR"_HLFS_"1"_HLFS_TAXID_HLFS_HLFS_$$HLNAME^HLFNC(CNTCNM,$E(HLECH))_"^C"_HLFS
"RTN","IBCNEHLM",99,0)
 S VZRR=VZRR_CNTCPH_$E(HLECH)_$E(HLECH)_$E(HLECH)_CNTCEM_HLFS_FRSH_HLFS_IHLP_HLFS_IHLT_$E(HLECH)_IHLS_HLFS_INACT_HLFS_IVER
"RTN","IBCNEHLM",100,0)
 S ^TMP("HLS",$J,3)=VZRR
"RTN","IBCNEHLM",101,0)
 ;
"RTN","IBCNEHLM",102,0)
 D GENERATE^HLMA("IBCNE IIV REGISTER","GM",1,.HLRESLT,"")
"RTN","IBCNEHLM",103,0)
 I $P(HLRESLT,U,2)]"" S HLRESLT="Error - "_$P(HLRESLT,U,2,99) D  Q
"RTN","IBCNEHLM",104,0)
 . S MSG(1)="HL7 eIV Registration Message not created."
"RTN","IBCNEHLM",105,0)
 . S MSG(2)=HLRESLT
"RTN","IBCNEHLM",106,0)
 . D MLMN
"RTN","IBCNEHLM",107,0)
 K ^TMP("HLS",$J)
"RTN","IBCNEHLM",108,0)
 Q
"RTN","IBCNEHLM",109,0)
 ;
"RTN","IBCNEHLM",110,0)
MLMN ;  MailMan Message
"RTN","IBCNEHLM",111,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEHLM",112,0)
 S XMSUB="eIV Registration Failure"
"RTN","IBCNEHLM",113,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHLM",114,0)
 K XMSUB,XMY,MSG,XMZ,XMDUZ
"RTN","IBCNEHLM",115,0)
 Q
"RTN","IBCNEHLQ")
0^6^B38577924^B42736526
"RTN","IBCNEHLQ",1,0)
IBCNEHLQ ;DAOU/ALA - HL7 RQI Message ;17-JUN-2002
"RTN","IBCNEHLQ",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,300,361,416**;21-MAR-94;Build 58
"RTN","IBCNEHLQ",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHLQ",4,0)
 ;
"RTN","IBCNEHLQ",5,0)
 ;**Program Description**
"RTN","IBCNEHLQ",6,0)
 ;  This routine builds an eIV Verification (RQI^I01) or
"RTN","IBCNEHLQ",7,0)
 ;  Identification (RQI^I03) request
"RTN","IBCNEHLQ",8,0)
 ;
"RTN","IBCNEHLQ",9,0)
 ;**Modified by  Date        Reason
"RTN","IBCNEHLQ",10,0)
 ;  DAOU/BHS     10/04/2002  Implementing Transmit SSN logic
"RTN","IBCNEHLQ",11,0)
 ;  DAOU/DB      03/19/2004  Stripped dashes from SSN (PID, GT1)
"RTN","IBCNEHLQ",12,0)
 ;
"RTN","IBCNEHLQ",13,0)
EN ;  Entry Point
"RTN","IBCNEHLQ",14,0)
 ;  Variables
"RTN","IBCNEHLQ",15,0)
 ;    HLFS = Field Separator
"RTN","IBCNEHLQ",16,0)
 ;    DFN = Patient IEN
"RTN","IBCNEHLQ",17,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEHLQ",18,0)
 ;    BUFF = Buffer IEN
"RTN","IBCNEHLQ",19,0)
 ;    FRDT = Freshness Date
"RTN","IBCNEHLQ",20,0)
 ;
"RTN","IBCNEHLQ",21,0)
PID ; Patient Identification Segment
"RTN","IBCNEHLQ",22,0)
 N VAFSTR,ICN,NM,I
"RTN","IBCNEHLQ",23,0)
 S VAFSTR=",1,7,8,11,",DFN=+$G(DFN)
"RTN","IBCNEHLQ",24,0)
 S PID=$$EN^VAFHLPID(DFN,VAFSTR,1)
"RTN","IBCNEHLQ",25,0)
 ; Encode special characters into Name and address pieces
"RTN","IBCNEHLQ",26,0)
 ; **NOTE: If $$EN^VAFHLPID should, in the future, return more than 11 pieces than the lines below may
"RTN","IBCNEHLQ",27,0)
 ;         need to be modified as they currently expect 11 pieces to be returned.
"RTN","IBCNEHLQ",28,0)
 I DFN D
"RTN","IBCNEHLQ",29,0)
 . S NM("FILE")=2,NM("IENS")=DFN,NM("FIELD")=.01
"RTN","IBCNEHLQ",30,0)
 . S NM=$$HLNAME^XLFNAME(.NM,"",$E(HLECH)),NM=$S(NM]"":NM,1:HLQ)
"RTN","IBCNEHLQ",31,0)
 . S I=$L(NM,HLFS),NM=$$ENCHL7(NM),$P(PID,HLFS,6,5+I)=NM
"RTN","IBCNEHLQ",32,0)
 . S $P(PID,HLFS,12,99)=$$ENCHL7($P(PID,HLFS,12,99))
"RTN","IBCNEHLQ",33,0)
 . S ICN=$P($G(^DPT(DFN,"MPI")),U,1)
"RTN","IBCNEHLQ",34,0)
 . S $P(PID,HLFS,4)=ICN_HLECH_HLECH_HLECH_"USVHA"_HLECH_"NI"_HLECH_"~"_DFN_HLECH_HLECH_HLECH_"USVHA"_HLECH_"PI"_HLECH_$P($$SITE^VASITE,U,3)_HLECH
"RTN","IBCNEHLQ",35,0)
 . Q
"RTN","IBCNEHLQ",36,0)
 S FRDT=$$HLDATE^HLFNC($G(FRDT))
"RTN","IBCNEHLQ",37,0)
 S $P(PID,HLFS,34)=FRDT
"RTN","IBCNEHLQ",38,0)
 Q
"RTN","IBCNEHLQ",39,0)
 ;
"RTN","IBCNEHLQ",40,0)
GT1 ;  Guarantor Segment
"RTN","IBCNEHLQ",41,0)
 N WHO,NM,IDOB,ISEX,SEX,RLIEN,PER,PLIEN,RDATA,IBSDATA,IBADDR
"RTN","IBCNEHLQ",42,0)
 ;
"RTN","IBCNEHLQ",43,0)
 S GT1=""
"RTN","IBCNEHLQ",44,0)
 I $G(QUERY)="I" Q
"RTN","IBCNEHLQ",45,0)
 ;
"RTN","IBCNEHLQ",46,0)
 ;  If the data was extracted from Buffer get specifics from Buffer file
"RTN","IBCNEHLQ",47,0)
 I EXT=1 D
"RTN","IBCNEHLQ",48,0)
 . S WHO=$P($G(^IBA(355.33,BUFF,60)),U,5)
"RTN","IBCNEHLQ",49,0)
 . I WHO="v"!(WHO="") Q
"RTN","IBCNEHLQ",50,0)
 . S NM=$P($G(^IBA(355.33,BUFF,60)),U,7),NM=$$NAME^IBCNEHLU(NM)
"RTN","IBCNEHLQ",51,0)
 . S NM=$$HLNAME^HLFNC(NM,HLECH)
"RTN","IBCNEHLQ",52,0)
 . S NM=$$ENCHL7(NM)
"RTN","IBCNEHLQ",53,0)
 . S $P(GT1,HLFS,3)=NM_HLECH_HLECH_HLECH
"RTN","IBCNEHLQ",54,0)
 . S IDOB=$P($G(^IBA(355.33,BUFF,60)),U,8),IDOB=$$HLDATE^HLFNC(IDOB)
"RTN","IBCNEHLQ",55,0)
 . S $P(GT1,HLFS,8)=IDOB
"RTN","IBCNEHLQ",56,0)
 . S $P(GT1,HLFS,2)=$$SCRUB($G(SUBID))_HLECH_HLECH_HLECH_HLECH_"HC"
"RTN","IBCNEHLQ",57,0)
 . Q
"RTN","IBCNEHLQ",58,0)
 ;
"RTN","IBCNEHLQ",59,0)
 ;  If the data was extracted from non-Buffer, check Patient file
"RTN","IBCNEHLQ",60,0)
 I EXT'=1 D
"RTN","IBCNEHLQ",61,0)
 . I IRIEN="" Q
"RTN","IBCNEHLQ",62,0)
 . S WHO=$P($G(^DPT(DFN,.312,IRIEN,0)),U,6)
"RTN","IBCNEHLQ",63,0)
 . I WHO="v"!(WHO="") Q
"RTN","IBCNEHLQ",64,0)
 . S NM=$P($G(^DPT(DFN,.312,IRIEN,0)),U,17)
"RTN","IBCNEHLQ",65,0)
 . S NM=$$HLNAME^HLFNC(NM,HLECH)
"RTN","IBCNEHLQ",66,0)
 . S NM=$$ENCHL7(NM)
"RTN","IBCNEHLQ",67,0)
 . S $P(GT1,HLFS,3)=NM_HLECH_HLECH_HLECH
"RTN","IBCNEHLQ",68,0)
 . S IDOB=$P($G(^DPT(DFN,.312,IRIEN,3)),U,1),IDOB=$$HLDATE^HLFNC(IDOB)
"RTN","IBCNEHLQ",69,0)
 . S $P(GT1,HLFS,8)=IDOB
"RTN","IBCNEHLQ",70,0)
 . S $P(GT1,HLFS,2)=$$SCRUB($G(SUBID))_HLECH_HLECH_HLECH_HLECH_"HC"
"RTN","IBCNEHLQ",71,0)
 . ;
"RTN","IBCNEHLQ",72,0)
 . S IBSDATA=$G(^DPT(DFN,.312,IRIEN,3))
"RTN","IBCNEHLQ",73,0)
 . S IBADDR=$$HLADDR^HLFNC($P(IBSDATA,U,6,7),$P(IBSDATA,U,8,10))
"RTN","IBCNEHLQ",74,0)
 . S $P(GT1,HLFS,5)=$$ENCHL7(IBADDR)
"RTN","IBCNEHLQ",75,0)
 . ;
"RTN","IBCNEHLQ",76,0)
 . D CHK
"RTN","IBCNEHLQ",77,0)
 . I $P(GT1,HLFS,8)=""&(IDOB'="") S $P(GT1,HLFS,8)=$$HLDATE^HLFNC(IDOB)
"RTN","IBCNEHLQ",78,0)
 . I $P(GT1,HLFS,9)=""&(ISEX'="") S $P(GT1,HLFS,9)=ISEX
"RTN","IBCNEHLQ",79,0)
 . I $P(GT1,HLFS,9)="",WHO="s" D
"RTN","IBCNEHLQ",80,0)
 .. S SEX=$P($G(^DPT(DFN,.312,IRIEN,3)),U,12) ; get policy holder sex
"RTN","IBCNEHLQ",81,0)
 .. I SEX="" S SEX=$P(^DPT(DFN,0),U,2),SEX=$S(SEX="M":"F",1:"M") ; if null, use alternative method
"RTN","IBCNEHLQ",82,0)
 .. S $P(GT1,HLFS,9)=SEX
"RTN","IBCNEHLQ",83,0)
 ;
"RTN","IBCNEHLQ",84,0)
 I GT1="" Q
"RTN","IBCNEHLQ",85,0)
 S $P(GT1,HLFS,1)=1
"RTN","IBCNEHLQ",86,0)
 S GT1="GT1"_HLFS_GT1
"RTN","IBCNEHLQ",87,0)
 Q
"RTN","IBCNEHLQ",88,0)
 ;
"RTN","IBCNEHLQ",89,0)
IN1 ;  Insurance Segment
"RTN","IBCNEHLQ",90,0)
 NEW EFFDT,EXPDT,PREL,ADMN,ADMDT,IENS
"RTN","IBCNEHLQ",91,0)
 S IN1="",SRVDT=$$HLDATE^HLFNC(SRVDT)
"RTN","IBCNEHLQ",92,0)
 ;
"RTN","IBCNEHLQ",93,0)
 ;  If the data was extracted from Buffer get specifics from Buffer file
"RTN","IBCNEHLQ",94,0)
 I EXT=1 D
"RTN","IBCNEHLQ",95,0)
 . S PREL=$P($G(^IBA(355.33,BUFF,60)),U,14)
"RTN","IBCNEHLQ",96,0)
 . S $P(IN1,HLFS,2)=$S(PREL=18:$$SCRUB($G(SUBID)),1:$$SCRUB($G(PATID)))
"RTN","IBCNEHLQ",97,0)
 . I PAYR'=$$FIND1^DIC(365.12,"","X","~NO PAYER") D
"RTN","IBCNEHLQ",98,0)
 .. S $P(IN1,HLFS,3)=$$ENCHL7($P(^IBE(365.12,PAYR,0),U,2))_HLECH_HLECH_HLECH_"USVHA"_HLECH_"VP"_HLECH
"RTN","IBCNEHLQ",99,0)
 .. S $P(IN1,HLFS,4)=$$ENCHL7($P(^IBE(365.12,PAYR,0),U,1))
"RTN","IBCNEHLQ",100,0)
 . S $P(IN1,HLFS,8)=$$ENCHL7($P($G(^IBA(355.33,BUFF,40)),U,3))
"RTN","IBCNEHLQ",101,0)
 . S $P(IN1,HLFS,9)=$$ENCHL7($P($G(^IBA(355.33,BUFF,40)),U,2))
"RTN","IBCNEHLQ",102,0)
 . S EFFDT=$P($G(^IBA(355.33,BUFF,60)),U,2),EFFDT=$$HLDATE^HLFNC(EFFDT)
"RTN","IBCNEHLQ",103,0)
 . S EXPDT=$P($G(^IBA(355.33,BUFF,60)),U,3),EXPDT=$$HLDATE^HLFNC(EXPDT)
"RTN","IBCNEHLQ",104,0)
 . S $P(IN1,HLFS,12)=EFFDT
"RTN","IBCNEHLQ",105,0)
 . S $P(IN1,HLFS,13)=EXPDT
"RTN","IBCNEHLQ",106,0)
 . S $P(IN1,HLFS,17)=$$PATREL(PREL)
"RTN","IBCNEHLQ",107,0)
 ;
"RTN","IBCNEHLQ",108,0)
 ;  If the data was extracted from non-Buffer, check Patient file
"RTN","IBCNEHLQ",109,0)
 I EXT'=1 D
"RTN","IBCNEHLQ",110,0)
 . I IRIEN="" Q
"RTN","IBCNEHLQ",111,0)
 . I $$SCRUB($G(SUBID))'=$$SCRUB($P($G(^DPT(DFN,.312,IRIEN,0)),U,2)) Q
"RTN","IBCNEHLQ",112,0)
 . S EFFDT=$P($G(^DPT(DFN,.312,IRIEN,0)),U,8),EFFDT=$$HLDATE^HLFNC(EFFDT)
"RTN","IBCNEHLQ",113,0)
 . S EXPDT=$P($G(^DPT(DFN,.312,IRIEN,0)),U,4),EXPDT=$$HLDATE^HLFNC(EXPDT)
"RTN","IBCNEHLQ",114,0)
 . S $P(IN1,HLFS,12)=EFFDT
"RTN","IBCNEHLQ",115,0)
 . S $P(IN1,HLFS,13)=EXPDT
"RTN","IBCNEHLQ",116,0)
 . S PREL=$P($G(^DPT(DFN,.312,IRIEN,4)),U,3)
"RTN","IBCNEHLQ",117,0)
 . S $P(IN1,HLFS,2)=$S(PREL=18:$$SCRUB($G(SUBID)),1:$$SCRUB($G(PATID)))
"RTN","IBCNEHLQ",118,0)
 . I PAYR'=$$FIND1^DIC(365.12,"","X","~NO PAYER") D
"RTN","IBCNEHLQ",119,0)
 .. S $P(IN1,HLFS,3)=$$ENCHL7($P(^IBE(365.12,PAYR,0),U,2))_HLECH_HLECH_HLECH_"USVHA"_HLECH_"VP"_HLECH
"RTN","IBCNEHLQ",120,0)
 .. S $P(IN1,HLFS,4)=$$ENCHL7($P(^IBE(365.12,PAYR,0),U,1))
"RTN","IBCNEHLQ",121,0)
 . S $P(IN1,HLFS,17)=$$PATREL(PREL)
"RTN","IBCNEHLQ",122,0)
 . S IENS=IRIEN_","_DFN_","
"RTN","IBCNEHLQ",123,0)
 . S $P(IN1,HLFS,8)=$$ENCHL7($$GET1^DIQ(2.312,IENS,21,"E"))
"RTN","IBCNEHLQ",124,0)
 . S $P(IN1,HLFS,9)=$$ENCHL7($$GET1^DIQ(2.312,IENS,20,"E"))
"RTN","IBCNEHLQ",125,0)
 ;
"RTN","IBCNEHLQ",126,0)
 I IN1="" Q
"RTN","IBCNEHLQ",127,0)
 ;
"RTN","IBCNEHLQ",128,0)
 I $G(QUERY)="I",$P(IN1,HLFS,17)'=18 S $P(IN1,HLFS,17)=18
"RTN","IBCNEHLQ",129,0)
 I $P(IN1,HLFS,17)="" S $P(IN1,HLFS,17)=18
"RTN","IBCNEHLQ",130,0)
 ;
"RTN","IBCNEHLQ",131,0)
 ;  Set the admission date if patient currently admitted
"RTN","IBCNEHLQ",132,0)
 S ADMN=$P($G(^DPT(DFN,.105)),U,1) I ADMN'="" D
"RTN","IBCNEHLQ",133,0)
 . S ADMDT=$P(^DGPM(ADMN,0),U,1),ADMDT=$$HLDATE^HLFNC(ADMDT)
"RTN","IBCNEHLQ",134,0)
 . S $P(IN1,HLFS,24)=ADMDT
"RTN","IBCNEHLQ",135,0)
 ;
"RTN","IBCNEHLQ",136,0)
 ;  Set the service date
"RTN","IBCNEHLQ",137,0)
 S $P(IN1,HLFS,26)=SRVDT
"RTN","IBCNEHLQ",138,0)
 S $P(IN1,HLFS,1)=1
"RTN","IBCNEHLQ",139,0)
 S IN1="IN1"_HLFS_IN1
"RTN","IBCNEHLQ",140,0)
 Q
"RTN","IBCNEHLQ",141,0)
 ;
"RTN","IBCNEHLQ",142,0)
CHK ;  Check for spouse or other information in the Patient Relation File
"RTN","IBCNEHLQ",143,0)
 ;  DGREL = Relationship (1=Self, 2=Spouse, 3-34,99=Other)
"RTN","IBCNEHLQ",144,0)
 NEW IEN,QFL
"RTN","IBCNEHLQ",145,0)
 S IEN="",RLIEN="",ISEX="",QFL=0
"RTN","IBCNEHLQ",146,0)
 F  S IEN=$O(^DGPR(408.12,"B",DFN,IEN)) Q:IEN=""  D  Q:QFL
"RTN","IBCNEHLQ",147,0)
 . S DGREL=$P($G(^DGPR(408.12,IEN,0)),U,2)
"RTN","IBCNEHLQ",148,0)
 . ;
"RTN","IBCNEHLQ",149,0)
 . ;  If person is veteran, quit
"RTN","IBCNEHLQ",150,0)
 . I DGREL=1 Q
"RTN","IBCNEHLQ",151,0)
 . ;
"RTN","IBCNEHLQ",152,0)
 . ;  If person is spouse, pick that record and quit
"RTN","IBCNEHLQ",153,0)
 . I WHO="s",DGREL=2 S RLIEN=IEN,QFL=1 Q
"RTN","IBCNEHLQ",154,0)
 . ;
"RTN","IBCNEHLQ",155,0)
 . ;  Otherwise it should be an 'other' dependent
"RTN","IBCNEHLQ",156,0)
 . S RLIEN=IEN
"RTN","IBCNEHLQ",157,0)
 ;
"RTN","IBCNEHLQ",158,0)
 I RLIEN="" Q
"RTN","IBCNEHLQ",159,0)
 ;
"RTN","IBCNEHLQ",160,0)
 ;  Check for Sex, SSN, DOB in INCOME PERSON File
"RTN","IBCNEHLQ",161,0)
 S PER=$P(^DGPR(408.12,RLIEN,0),U,3)
"RTN","IBCNEHLQ",162,0)
 I PER'["DGPR(408.13" Q
"RTN","IBCNEHLQ",163,0)
 S PLIEN=$P(PER,";",1)
"RTN","IBCNEHLQ",164,0)
 I PLIEN="" Q
"RTN","IBCNEHLQ",165,0)
 S RDATA=$G(^DGPR(408.13,PLIEN,0)),ISEX=$P(RDATA,U,2),IDOB=$P(RDATA,U,3)
"RTN","IBCNEHLQ",166,0)
 I $P(RDATA,U,4)'="" N DFN S DFN=$P(RDATA,U,4),ISEX=$P(^DPT(DFN,0),U,2),IDOB=$P(^DPT(DFN,0),U,3)
"RTN","IBCNEHLQ",167,0)
 Q
"RTN","IBCNEHLQ",168,0)
 ;
"RTN","IBCNEHLQ",169,0)
ENCHL7(STR) ; Encode HL7 escape seqs in data fields
"RTN","IBCNEHLQ",170,0)
 ;
"RTN","IBCNEHLQ",171,0)
 ; Input:
"RTN","IBCNEHLQ",172,0)
 ; STR = Field data possible containing HL7 encoding chars
"RTN","IBCNEHLQ",173,0)
 ;
"RTN","IBCNEHLQ",174,0)
 ; Output Values
"RTN","IBCNEHLQ",175,0)
 ; Fn returns string w/converted escape seqs
"RTN","IBCNEHLQ",176,0)
 ;
"RTN","IBCNEHLQ",177,0)
 N CHR,NEW,RPLC,CNT,LOOP
"RTN","IBCNEHLQ",178,0)
 ;
"RTN","IBCNEHLQ",179,0)
 ; Replace "\" "&" "~" "|" with \F\ \R\ \E\ \T\ respectively
"RTN","IBCNEHLQ",180,0)
 F CHR="\","&","~","|" S CNT=$L(STR,CHR) I CNT>1 D
"RTN","IBCNEHLQ",181,0)
 . S NEW=$P(STR,CHR)
"RTN","IBCNEHLQ",182,0)
 . S RPLC="\"_$TR(CHR,"|~\&","FRET")_"\"
"RTN","IBCNEHLQ",183,0)
 . F LOOP=2:1:CNT S NEW=NEW_RPLC_$P(STR,CHR,LOOP)
"RTN","IBCNEHLQ",184,0)
 . S STR=NEW
"RTN","IBCNEHLQ",185,0)
 ;
"RTN","IBCNEHLQ",186,0)
 Q STR
"RTN","IBCNEHLQ",187,0)
 ;
"RTN","IBCNEHLQ",188,0)
SCRUB(Z) ; remove all punctuation from the string and convert lowercase to uppercase
"RTN","IBCNEHLQ",189,0)
 ; IB*2*416 - used for subscriber and patient ID fields
"RTN","IBCNEHLQ",190,0)
 S Z=$$NOPUNCT^IBCEF(Z,1)
"RTN","IBCNEHLQ",191,0)
 S Z=$$UP^XLFSTR(Z)
"RTN","IBCNEHLQ",192,0)
SCRUBX ;
"RTN","IBCNEHLQ",193,0)
 Q Z
"RTN","IBCNEHLQ",194,0)
 ;
"RTN","IBCNEHLQ",195,0)
PATREL(REL) ; convert pat.relationship to insured from VistA to X12 and return X12 value
"RTN","IBCNEHLQ",196,0)
 ; REL - VistA value
"RTN","IBCNEHLQ",197,0)
 ; 
"RTN","IBCNEHLQ",198,0)
 ; VistA values of Self (18), Spouse (01), and Child (19) remain unchanged,
"RTN","IBCNEHLQ",199,0)
 ; anything else is converted to X12 value of Other Adult (34)
"RTN","IBCNEHLQ",200,0)
 ;
"RTN","IBCNEHLQ",201,0)
 Q $S($G(REL)="":"",".01.18.19."[("."_REL_"."):REL,1:34)
"RTN","IBCNEHLT")
0^30^B77352947^B69606344
"RTN","IBCNEHLT",1,0)
IBCNEHLT ;DAOU/ALA - HL7 Process Incoming MFN Messages ; 09 Dec 2005  3:30 PM
"RTN","IBCNEHLT",2,0)
 ;;2.0;INTEGRATED BILLING;**184,251,271,300,416**;21-MAR-94;Build 58
"RTN","IBCNEHLT",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHLT",4,0)
 ;
"RTN","IBCNEHLT",5,0)
 ;**Program Description**
"RTN","IBCNEHLT",6,0)
 ;  This program will process incoming MFN messages and
"RTN","IBCNEHLT",7,0)
 ;  update the appropriate tables
"RTN","IBCNEHLT",8,0)
 ;
"RTN","IBCNEHLT",9,0)
EN ;  Entry Point
"RTN","IBCNEHLT",10,0)
 NEW AIEN,APIEN,APP,D0,D,DESC,DQ,DR,FILE,FLN,HEDI,ID,IEN
"RTN","IBCNEHLT",11,0)
 NEW PEDI,SEG,STAT,HCT,NEWID,TSSN,REQSUB,NAFLG,NPFLG,TRUSTED
"RTN","IBCNEHLT",12,0)
 NEW IBCNACT,IBCNADT,FSVDY,PSVDY
"RTN","IBCNEHLT",13,0)
 NEW BPSIEN,CMIEN,DATA,DATAAP,DATABPS,DATACM,DATE,ERROR,FIELDNO,FILENO
"RTN","IBCNEHLT",14,0)
 NEW IBSEG,MSG,BUFF
"RTN","IBCNEHLT",15,0)
 NEW X12TABLE,BADFMT
"RTN","IBCNEHLT",16,0)
 ;
"RTN","IBCNEHLT",17,0)
 ; BADFMT is true if a site with patch 300 receives an eIV message in the previous HL7 interface structure (pre-300)
"RTN","IBCNEHLT",18,0)
 ;
"RTN","IBCNEHLT",19,0)
 ; Build local table of file numbers to determine if response is eIV or ePHARM
"RTN","IBCNEHLT",20,0)
 F D=11:1:18,21 S X12TABLE("365.0"_D)=""
"RTN","IBCNEHLT",21,0)
 ;
"RTN","IBCNEHLT",22,0)
 ; Decide if message belongs to "E-Pharm" or "eIV"
"RTN","IBCNEHLT",23,0)
 S APP=""
"RTN","IBCNEHLT",24,0)
 S HCT=0,ERFLG=0
"RTN","IBCNEHLT",25,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D SPAR^IBCNEHLU I $G(IBSEG(1))="MFI" S FILE=$G(IBSEG(2)),FLN=$P(FILE,$E(HLECH,1),1) Q
"RTN","IBCNEHLT",26,0)
 I ",366.01,366.02,366.03,365.12,355.3,"[(","_FLN_",") S APP="E-PHARM"
"RTN","IBCNEHLT",27,0)
 I FLN=365.12 D
"RTN","IBCNEHLT",28,0)
 . S HCT=0,BADFMT=0
"RTN","IBCNEHLT",29,0)
 . F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:(APP="IIV")!BADFMT
"RTN","IBCNEHLT",30,0)
 .. D SPAR^IBCNEHLU
"RTN","IBCNEHLT",31,0)
 .. I $G(IBSEG(1))="MFE",$P($G(IBSEG(5)),$E(HLECH,1),3)'="" D  Q
"RTN","IBCNEHLT",32,0)
 ... S BADFMT=1,APP=""
"RTN","IBCNEHLT",33,0)
 ... S MSG(1)="Log a Remedy Ticket for this issue."
"RTN","IBCNEHLT",34,0)
 ... S MSG(2)="Please include in the Remedy Ticket that the eIV payer tables may be out"
"RTN","IBCNEHLT",35,0)
 ... S MSG(3)="of sync with the master list and will need a new copy of the payer table"
"RTN","IBCNEHLT",36,0)
 ... S MSG(4)="from Austin."
"RTN","IBCNEHLT",37,0)
 ... D MSG^IBCNEUT5($$MGRP^IBCNEUT5(),"eIV payer tables may be out of synch with master list","MSG(")
"RTN","IBCNEHLT",38,0)
 .. I $G(IBSEG(1))="ZPA" S APP="IIV"
"RTN","IBCNEHLT",39,0)
 I $D(X12TABLE(FLN)) S APP="IIV"
"RTN","IBCNEHLT",40,0)
 ; If neither eIV or ePHARM then quit
"RTN","IBCNEHLT",41,0)
 I APP="" Q
"RTN","IBCNEHLT",42,0)
 ;
"RTN","IBCNEHLT",43,0)
 S HCT=1,NAFLG=0,NPFLG=0,D=""
"RTN","IBCNEHLT",44,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:ERFLG
"RTN","IBCNEHLT",45,0)
 . D SPAR^IBCNEHLU
"RTN","IBCNEHLT",46,0)
 . S SEG=$G(IBSEG(1))
"RTN","IBCNEHLT",47,0)
 . ;
"RTN","IBCNEHLT",48,0)
 . I APP="E-PHARM" D
"RTN","IBCNEHLT",49,0)
 .. I SEG="MFI" D
"RTN","IBCNEHLT",50,0)
 ... S FILE=$G(IBSEG(2))
"RTN","IBCNEHLT",51,0)
 ... S FLN=$P(FILE,$E(HLECH,1),1)
"RTN","IBCNEHLT",52,0)
 ... ;
"RTN","IBCNEHLT",53,0)
 ... ; Initialize MFK Message (Application Acknowledgement) variables
"RTN","IBCNEHLT",54,0)
 ... ; Master File Identifier
"RTN","IBCNEHLT",55,0)
 ... S DATAMFK("MFI-1")=$G(IBSEG(2))
"RTN","IBCNEHLT",56,0)
 ... ;
"RTN","IBCNEHLT",57,0)
 ... ; File-Level Event Code
"RTN","IBCNEHLT",58,0)
 ... S DATAMFK("MFI-3")=$G(IBSEG(4))
"RTN","IBCNEHLT",59,0)
 .. ;
"RTN","IBCNEHLT",60,0)
 .. I SEG="MFE" D
"RTN","IBCNEHLT",61,0)
 ... I $G(FLN)="" S ERFLG=1,MSG(1)="File Number not found in MFN message" Q
"RTN","IBCNEHLT",62,0)
 ... I '$$VFILE^DILFD(FLN) S ERFLG=1,MSG(1)="File "_FLN_" not found in the Data Dictionary" Q
"RTN","IBCNEHLT",63,0)
 ... ;
"RTN","IBCNEHLT",64,0)
 ... ; Initialize MFK Message (Application Acknowledgement) variables
"RTN","IBCNEHLT",65,0)
 ... ; Record-Level Event Code
"RTN","IBCNEHLT",66,0)
 ... S DATAMFK("MFE-1")=$G(IBSEG(2))
"RTN","IBCNEHLT",67,0)
 ... ;
"RTN","IBCNEHLT",68,0)
 ... ; Primary Key Value
"RTN","IBCNEHLT",69,0)
 ... S DATAMFK("MFE-4")=$G(IBSEG(5))
"RTN","IBCNEHLT",70,0)
 ... ;
"RTN","IBCNEHLT",71,0)
 ... ; Primary Key Value Type
"RTN","IBCNEHLT",72,0)
 ... S DATAMFK("MFE-5")=$G(IBSEG(6))
"RTN","IBCNEHLT",73,0)
 ... ;
"RTN","IBCNEHLT",74,0)
 ... ; Transfer control to e-Pharmacy
"RTN","IBCNEHLT",75,0)
 ... D ^IBCNRHLT Q
"RTN","IBCNEHLT",76,0)
 .. ;
"RTN","IBCNEHLT",77,0)
 .. ; Transfer control on other segments
"RTN","IBCNEHLT",78,0)
 .. I ",ZCM,ZP0,ZPB,ZPL,ZPT,ZRX,"[(","_SEG_",") D ^IBCNRHLT
"RTN","IBCNEHLT",79,0)
 . ;
"RTN","IBCNEHLT",80,0)
 . ;
"RTN","IBCNEHLT",81,0)
 . I APP="IIV" D
"RTN","IBCNEHLT",82,0)
 .. I SEG="MFI" D
"RTN","IBCNEHLT",83,0)
 ... S FILE=$G(IBSEG(2))
"RTN","IBCNEHLT",84,0)
 ... S FLN=$P(FILE,$E(HLECH,1),1)
"RTN","IBCNEHLT",85,0)
 .. ;
"RTN","IBCNEHLT",86,0)
 .. I SEG="MFE" D
"RTN","IBCNEHLT",87,0)
 ... I $G(FLN)="" S ERFLG=1,MSG(1)="File Number not found in MFN message" Q
"RTN","IBCNEHLT",88,0)
 ... I '$$VFILE^DILFD(FLN) S ERFLG=1,MSG(1)="File "_FLN_" not found in the Data Dictionary" Q
"RTN","IBCNEHLT",89,0)
 ... ;
"RTN","IBCNEHLT",90,0)
 ... I FLN'=365.12 D  Q
"RTN","IBCNEHLT",91,0)
 .... S DATA=$G(IBSEG(5))
"RTN","IBCNEHLT",92,0)
 .... S ID=$$DECHL7^IBCNEHL2($P(DATA,$E(HLECH,1),1)),DESC=$$DECHL7^IBCNEHL2($P(DATA,$E(HLECH,1),2))
"RTN","IBCNEHLT",93,0)
 .... D TFIL
"RTN","IBCNEHLT",94,0)
 ... ;
"RTN","IBCNEHLT",95,0)
 ... ; Pull the action code
"RTN","IBCNEHLT",96,0)
 ... S IBCNACT=$G(IBSEG(2))
"RTN","IBCNEHLT",97,0)
 ... ; Effective Date
"RTN","IBCNEHLT",98,0)
 ... S IBCNADT=$G(IBSEG(4))
"RTN","IBCNEHLT",99,0)
 .. ;
"RTN","IBCNEHLT",100,0)
 .. I SEG="ZP0" D
"RTN","IBCNEHLT",101,0)
 ... S ID=$$DECHL7^IBCNEHL2(IBSEG(3)),NEWID=$$DECHL7^IBCNEHL2(IBSEG(4))
"RTN","IBCNEHLT",102,0)
 ... S DESC=$$DECHL7^IBCNEHL2(IBSEG(5)),HEDI=$$DECHL7^IBCNEHL2(IBSEG(6)),PEDI=$$DECHL7^IBCNEHL2(IBSEG(7))
"RTN","IBCNEHLT",103,0)
 .. ;
"RTN","IBCNEHLT",104,0)
 .. I SEG="ZPA" D
"RTN","IBCNEHLT",105,0)
 ... S STAT=$S(IBSEG(4)="Y":1,1:0)
"RTN","IBCNEHLT",106,0)
 ... S TSSN=IBSEG(5),REQSUB=IBSEG(7)
"RTN","IBCNEHLT",107,0)
 ... S FSVDY=IBSEG(8),PSVDY=IBSEG(9)
"RTN","IBCNEHLT",108,0)
 ... S TRUSTED=$S(IBSEG(10)="N":0,1:1)
"RTN","IBCNEHLT",109,0)
 ... D PFIL
"RTN","IBCNEHLT",110,0)
 Q
"RTN","IBCNEHLT",111,0)
 ;
"RTN","IBCNEHLT",112,0)
PFIL ;  Payer Table Filer
"RTN","IBCNEHLT",113,0)
 ;  Set the action:
"RTN","IBCNEHLT",114,0)
 ;     MAD=Add, MUP=Update, MDC=Deactivate, MAC=Reactivate
"RTN","IBCNEHLT",115,0)
 N OLDAF,OLDTF
"RTN","IBCNEHLT",116,0)
 S IBCNADT=$$FMDATE^HLFNC(IBCNADT)
"RTN","IBCNEHLT",117,0)
 I IBCNADT="" S IBCNADT=$$NOW^XLFDT()
"RTN","IBCNEHLT",118,0)
 ;  If the action is MAD - Add the payer as new
"RTN","IBCNEHLT",119,0)
 N IBNOK,IBAPP,IBID,IBDESC,IBSTR
"RTN","IBCNEHLT",120,0)
 S IBNOK=0,IBAPP=($TR(APP," ")="")
"RTN","IBCNEHLT",121,0)
 I IBCNACT="MAD" D  I IBNOK G PFILX
"RTN","IBCNEHLT",122,0)
 . ; Check certain required fields: Application, VA National & Payer Name
"RTN","IBCNEHLT",123,0)
 . ; If not populated, send MailMan message.
"RTN","IBCNEHLT",124,0)
 . S IBID=($TR(ID," ")=""),IBDESC=($TR(DESC," ")="")
"RTN","IBCNEHLT",125,0)
 . S IBNOK=IBAPP!IBID!IBDESC
"RTN","IBCNEHLT",126,0)
 . I 'IBNOK D MAD(DESC) Q
"RTN","IBCNEHLT",127,0)
 . S IBSTR="" I IBAPP S IBSTR="Application"
"RTN","IBCNEHLT",128,0)
 . I IBID S:IBSTR]"" IBSTR=IBSTR_", " S IBSTR=IBSTR_"VA National"
"RTN","IBCNEHLT",129,0)
 . I IBDESC S:IBSTR]"" IBSTR=IBSTR_", " S IBSTR=IBSTR_"Payer Name"
"RTN","IBCNEHLT",130,0)
 . S MSG(1)="MAD action received.  "_IBSTR_" unknown."
"RTN","IBCNEHLT",131,0)
 I IBCNACT'="MAD" D FND
"RTN","IBCNEHLT",132,0)
 N IBCNTYPE
"RTN","IBCNEHLT",133,0)
 I IEN<1!IBAPP D  G PFILX
"RTN","IBCNEHLT",134,0)
 . S IBCNTYPE=$S(IBCNACT="MAD":"Add",IBCNACT="MUP":"Update",IBCNACT="MDC":"Deactivate",IBCNACT="MAC":"Reactivate",1:"Unknown")
"RTN","IBCNEHLT",135,0)
 . S MSG(1)=IBCNTYPE_" ("_IBCNACT_") action received. Payer and/or Application may be unknown."
"RTN","IBCNEHLT",136,0)
 . S MSG(2)=""
"RTN","IBCNEHLT",137,0)
 . S MSG(3)="VA National : "_ID
"RTN","IBCNEHLT",138,0)
 . S MSG(4)="Payer Name  : "_DESC
"RTN","IBCNEHLT",139,0)
 . S MSG(5)="Application : "_APP
"RTN","IBCNEHLT",140,0)
 . S MSG(6)=""
"RTN","IBCNEHLT",141,0)
 . S MSG(7)="Log a Remedy Ticket for this issue."
"RTN","IBCNEHLT",142,0)
 . S MSG(8)=""
"RTN","IBCNEHLT",143,0)
 . S MSG(9)="Please include in the Remedy Ticket that VISTA did not receive the required"
"RTN","IBCNEHLT",144,0)
 . S MSG(10)="information or the accurate information to add/update this Payer."
"RTN","IBCNEHLT",145,0)
 . D MSG^IBCNEUT5($$MGRP^IBCNEUT5(),"eIV payer tables may be out of synch with master list","MSG(")
"RTN","IBCNEHLT",146,0)
 ;
"RTN","IBCNEHLT",147,0)
 S DESC=$E(DESC,1,80)    ;restriction of the field in the DD
"RTN","IBCNEHLT",148,0)
 S DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",149,0)
 S DR=".01///^S X=DESC;.02////^S X=NEWID;.05////^S X=PEDI;.06////^S X=HEDI"
"RTN","IBCNEHLT",150,0)
 ;
"RTN","IBCNEHLT",151,0)
 ;  If new payer, add the Date/Time created
"RTN","IBCNEHLT",152,0)
 I NPFLG S DR=DR_";.04///^S X=$$NOW^XLFDT()"
"RTN","IBCNEHLT",153,0)
 S DIE=DIC,DA=IEN D ^DIE
"RTN","IBCNEHLT",154,0)
 ;
"RTN","IBCNEHLT",155,0)
 ;  Check for application
"RTN","IBCNEHLT",156,0)
 S DIC="^IBE(365.13,",DIC(0)="X",X=APP D ^DIC
"RTN","IBCNEHLT",157,0)
 S AIEN=+Y I AIEN<1 D
"RTN","IBCNEHLT",158,0)
 . S DLAYGO=365.13,DIC(0)="L",DIC("P")=DLAYGO
"RTN","IBCNEHLT",159,0)
 . S DIE=DIC,X=APP
"RTN","IBCNEHLT",160,0)
 . K DD,DO
"RTN","IBCNEHLT",161,0)
 . D FILE^DICN
"RTN","IBCNEHLT",162,0)
 . K DO
"RTN","IBCNEHLT",163,0)
 . S AIEN=+Y
"RTN","IBCNEHLT",164,0)
 ;
"RTN","IBCNEHLT",165,0)
 S APIEN=$O(^IBE(365.12,IEN,1,"B",AIEN,""))
"RTN","IBCNEHLT",166,0)
 I APIEN="" D
"RTN","IBCNEHLT",167,0)
 . S DLAYGO=365.121,DIC(0)="L",DIC("P")=DLAYGO,DA(1)=IEN,X=AIEN
"RTN","IBCNEHLT",168,0)
 . S DIC="^IBE(365.12,"_DA(1)_",1,",DIE=DIC
"RTN","IBCNEHLT",169,0)
 . I '$D(^IBE(365.12,IEN,1,0)) S ^IBE(365.12,IEN,1,0)="^365.121P^^"
"RTN","IBCNEHLT",170,0)
 . K DD,DO
"RTN","IBCNEHLT",171,0)
 . D FILE^DICN
"RTN","IBCNEHLT",172,0)
 . K DO
"RTN","IBCNEHLT",173,0)
 . S APIEN=+Y,NAFLG=1
"RTN","IBCNEHLT",174,0)
 ; get current values for Active and Trusted flags
"RTN","IBCNEHLT",175,0)
 S OLDAF=$P(^IBE(365.12,IEN,1,APIEN,0),U,2),OLDTF=$P(^IBE(365.12,IEN,1,APIEN,0),U,7)
"RTN","IBCNEHLT",176,0)
 S DA(1)=IEN,DA=APIEN,DIC="^IBE(365.12,"_DA(1)_",1,",DR=""
"RTN","IBCNEHLT",177,0)
 ;
"RTN","IBCNEHLT",178,0)
 I IBCNACT="MDC" S DR=DR_".11///^S X=1;.12////^S X=IBCNADT;",STAT=0
"RTN","IBCNEHLT",179,0)
 I IBCNACT="MAC" S DR=DR_".11///^S X=0;.12///@;"
"RTN","IBCNEHLT",180,0)
 S DR=DR_".02///^S X=STAT;.06///^S X=$$NOW^XLFDT();.07///^S X=TRUSTED"
"RTN","IBCNEHLT",181,0)
 I IBCNACT'="MDC" S DR=DR_";.08///^S X=REQSUB;.1///^S X=TSSN;.14///^S X=FSVDY;.15///^S X=PSVDY"
"RTN","IBCNEHLT",182,0)
 ;
"RTN","IBCNEHLT",183,0)
 ;  If new application, add the Date/Time created
"RTN","IBCNEHLT",184,0)
 I NAFLG S DR=DR_";.13///^S X=$$NOW^XLFDT()"
"RTN","IBCNEHLT",185,0)
 ;
"RTN","IBCNEHLT",186,0)
 S DIE=DIC D ^DIE
"RTN","IBCNEHLT",187,0)
 ; Update flag logs
"RTN","IBCNEHLT",188,0)
 I STAT'=OLDAF D UPDLOG("A",STAT,IEN,APIEN)
"RTN","IBCNEHLT",189,0)
 I TRUSTED'=OLDTF D UPDLOG("T",TRUSTED,IEN,APIEN)
"RTN","IBCNEHLT",190,0)
 I IBCNACT="MDC" D MDC Q
"RTN","IBCNEHLT",191,0)
PFILX ;
"RTN","IBCNEHLT",192,0)
 Q
"RTN","IBCNEHLT",193,0)
 ;
"RTN","IBCNEHLT",194,0)
TFIL ;  Non Payer Tables Filer
"RTN","IBCNEHLT",195,0)
 NEW DIC,X,DLAYGO,Y,IEN,MAX
"RTN","IBCNEHLT",196,0)
 S DIC(0)="X",X=ID,DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",197,0)
 D ^DIC S IEN=+Y
"RTN","IBCNEHLT",198,0)
 ; don't update existing entries
"RTN","IBCNEHLT",199,0)
 I IEN>0 Q
"RTN","IBCNEHLT",200,0)
 D FIELD^DID(FLN,.02,,"FIELD LENGTH","MAX")
"RTN","IBCNEHLT",201,0)
 I MAX("FIELD LENGTH")>0 S DESC=$E(DESC,1,MAX("FIELD LENGTH")) ; restriction of the field in the DD
"RTN","IBCNEHLT",202,0)
 ; add new entry to the table
"RTN","IBCNEHLT",203,0)
 ;S DLAYGO=FLN,DIC(0)="L",DIC("DR")=".02///"_DESC
"RTN","IBCNEHLT",204,0)
 S DLAYGO=FLN,DIC(0)="L",DIC("DR")=".02///^S X=DESC"
"RTN","IBCNEHLT",205,0)
 K DD,DO D FILE^DICN K DO
"RTN","IBCNEHLT",206,0)
 Q
"RTN","IBCNEHLT",207,0)
 ;
"RTN","IBCNEHLT",208,0)
MAD(X) ;  Add an entry
"RTN","IBCNEHLT",209,0)
 D FND
"RTN","IBCNEHLT",210,0)
 I IEN>0 G MADX
"RTN","IBCNEHLT",211,0)
 NEW DIC,DIE,DA,DLAYGO,Y,DR
"RTN","IBCNEHLT",212,0)
 S DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",213,0)
 S DLAYGO=FLN,DIC(0)="L",DIC("P")=DLAYGO,DIE=DIC
"RTN","IBCNEHLT",214,0)
 K DD,DO
"RTN","IBCNEHLT",215,0)
 D FILE^DICN
"RTN","IBCNEHLT",216,0)
 K DO
"RTN","IBCNEHLT",217,0)
 S IEN=+Y,NPFLG=1
"RTN","IBCNEHLT",218,0)
MADX ;
"RTN","IBCNEHLT",219,0)
 Q
"RTN","IBCNEHLT",220,0)
 ;
"RTN","IBCNEHLT",221,0)
FND ;  Find an existing Payer entry
"RTN","IBCNEHLT",222,0)
 NEW DIC,DIE,X,DA,DLAYGO,Y,DR
"RTN","IBCNEHLT",223,0)
 S X=ID,DIC(0)="X",D="C",DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",224,0)
 ;
"RTN","IBCNEHLT",225,0)
 ;  Do a lookup with the "C" cross-reference
"RTN","IBCNEHLT",226,0)
 D IX^DIC
"RTN","IBCNEHLT",227,0)
 S IEN=+Y
"RTN","IBCNEHLT",228,0)
 Q
"RTN","IBCNEHLT",229,0)
 ;
"RTN","IBCNEHLT",230,0)
MDC ;  Check for active transmissions and cancel
"RTN","IBCNEHLT",231,0)
 NEW STA,HIEN,RIEN,TQIEN
"RTN","IBCNEHLT",232,0)
 F STA=1,2,4,6 S TQIEN="" D
"RTN","IBCNEHLT",233,0)
 . F  S TQIEN=$O(^IBCN(365.1,"AC",STA,TQIEN)) Q:TQIEN=""  D
"RTN","IBCNEHLT",234,0)
 .. ;
"RTN","IBCNEHLT",235,0)
 .. ;  If the record doesn't match the payer, quit
"RTN","IBCNEHLT",236,0)
 .. I $P(^IBCN(365.1,TQIEN,0),U,3)'=IEN Q
"RTN","IBCNEHLT",237,0)
 .. ;
"RTN","IBCNEHLT",238,0)
 .. ;  Set the status to 'Cancelled'
"RTN","IBCNEHLT",239,0)
 .. D SST^IBCNEUT2(TQIEN,7)
"RTN","IBCNEHLT",240,0)
 .. ;
"RTN","IBCNEHLT",241,0)
 .. ;  If a buffer entry, set to ! (bang)
"RTN","IBCNEHLT",242,0)
 .. S BUFF=$P(^IBCN(365.1,TQIEN,0),U,5)
"RTN","IBCNEHLT",243,0)
 .. I BUFF'="" D BUFF^IBCNEUT2(BUFF,17)
"RTN","IBCNEHLT",244,0)
 .. ;
"RTN","IBCNEHLT",245,0)
 .. ;  Change any responses status also
"RTN","IBCNEHLT",246,0)
 .. S HIEN=0 F  S HIEN=$O(^IBCN(365.1,TQIEN,2,HIEN)) Q:'HIEN  D
"RTN","IBCNEHLT",247,0)
 ... S RIEN=$P(^IBCN(365.1,TQIEN,2,HIEN,0),U,3)
"RTN","IBCNEHLT",248,0)
 ... ;  If the Response status is 'Response Received', don't change it
"RTN","IBCNEHLT",249,0)
 ... I $P(^IBCN(365,RIEN,0),U,6)=3 Q
"RTN","IBCNEHLT",250,0)
 ... D RSP^IBCNEUT2(RIEN,7)
"RTN","IBCNEHLT",251,0)
 Q
"RTN","IBCNEHLT",252,0)
 ;
"RTN","IBCNEHLT",253,0)
UPDLOG(FLAG,VALUE,PIEN,APIEN) ; Update active/trusted flag logs
"RTN","IBCNEHLT",254,0)
 ; FLAG - "A" for Active flag, "T" for Trusted flag
"RTN","IBCNEHLT",255,0)
 ; VALUE - new flag value (0 or 1)
"RTN","IBCNEHLT",256,0)
 ; PIEN - ien in PAYER file (365.12)
"RTN","IBCNEHLT",257,0)
 ; APIEN - ien in APPLICATION sub-file (365.121)
"RTN","IBCNEHLT",258,0)
 ;
"RTN","IBCNEHLT",259,0)
 N FILE,IENSTR,UPDT
"RTN","IBCNEHLT",260,0)
 I $G(FLAG)=""!($G(VALUE)="") Q
"RTN","IBCNEHLT",261,0)
 I +$G(PIEN)=0!(+$G(APIEN)=0) Q
"RTN","IBCNEHLT",262,0)
 S FILE=$S(FLAG="A":"365.1212",FLAG="T":"365.1213",1:"") I FILE="" Q
"RTN","IBCNEHLT",263,0)
 S IENSTR="+1,"_APIEN_","_PIEN_","
"RTN","IBCNEHLT",264,0)
 S UPDT(FILE,IENSTR,.01)=$$NOW^XLFDT()
"RTN","IBCNEHLT",265,0)
 S UPDT(FILE,IENSTR,.02)=VALUE
"RTN","IBCNEHLT",266,0)
 D UPDATE^DIE("E","UPDT")
"RTN","IBCNEHLT",267,0)
 Q
"RTN","IBCNEHLU")
0^74^B30725766^B16427486
"RTN","IBCNEHLU",1,0)
IBCNEHLU ;DAOU/ALA - HL7 Utilities ;10-JUN-2002  ; Compiled December 16, 2004 15:36:12
"RTN","IBCNEHLU",2,0)
 ;;2.0;INTEGRATED BILLING;**184,300,416**;21-MAR-94;Build 58
"RTN","IBCNEHLU",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHLU",4,0)
 ;
"RTN","IBCNEHLU",5,0)
HLP(PROTOCOL) ;  Find the Protocol IEN
"RTN","IBCNEHLU",6,0)
 Q +$O(^ORD(101,"B",PROTOCOL,0))
"RTN","IBCNEHLU",7,0)
 ;
"RTN","IBCNEHLU",8,0)
NAME(NM) ;  Convert a name that isn't in standard VISTA format -
"RTN","IBCNEHLU",9,0)
 NEW LNM,FNM,MI
"RTN","IBCNEHLU",10,0)
 ;
"RTN","IBCNEHLU",11,0)
 I NM?." " Q NM
"RTN","IBCNEHLU",12,0)
 ;  LastName,FirstName MI
"RTN","IBCNEHLU",13,0)
 I NM["," Q NM
"RTN","IBCNEHLU",14,0)
 ;
"RTN","IBCNEHLU",15,0)
 ; Remove double-spaces from name
"RTN","IBCNEHLU",16,0)
 F  Q:$L(NM,"  ")<2  S NM=$P(NM,"  ",1)_" "_$P(NM,"  ",2,9999)
"RTN","IBCNEHLU",17,0)
 ;
"RTN","IBCNEHLU",18,0)
 ; Trim leading/trailing spaces
"RTN","IBCNEHLU",19,0)
 S NM=$$TRIM^XLFSTR(NM)
"RTN","IBCNEHLU",20,0)
 ;
"RTN","IBCNEHLU",21,0)
 ; Find number of spaces in name
"RTN","IBCNEHLU",22,0)
 S II=$L(NM," ")
"RTN","IBCNEHLU",23,0)
 ;
"RTN","IBCNEHLU",24,0)
 I II>3 Q NM
"RTN","IBCNEHLU",25,0)
 I II=3 S FNM=$P(NM," ",1),MI=" "_$P(NM," ",2),LNM=$P(NM," ",3)
"RTN","IBCNEHLU",26,0)
 I II=2 S FNM=$P(NM," ",1),LNM=$P(NM," ",2),MI=""
"RTN","IBCNEHLU",27,0)
 I II<2 Q NM
"RTN","IBCNEHLU",28,0)
 Q LNM_","_FNM_MI
"RTN","IBCNEHLU",29,0)
 ;
"RTN","IBCNEHLU",30,0)
DODCK(DFN,DOD,MGRP,NAME,RIEN,SSN) ;  Date of death check
"RTN","IBCNEHLU",31,0)
 ;
"RTN","IBCNEHLU",32,0)
 ; Input Variables
"RTN","IBCNEHLU",33,0)
 ; DFN, DOD, MGRP, NAME, RIEN, SSN
"RTN","IBCNEHLU",34,0)
 ;
"RTN","IBCNEHLU",35,0)
 N CDOD,CIDDSP,IDDSP,IDSSN,MSG,XMSUB
"RTN","IBCNEHLU",36,0)
 S CDOD=$P($G(^DPT(DFN,.35)),U,1),CIDDSP=$$FMTE^XLFDT(CDOD,"5Z")
"RTN","IBCNEHLU",37,0)
 S IDDSP=$$FMTE^XLFDT(DOD,"5Z")
"RTN","IBCNEHLU",38,0)
 S IDSSN=$E(SSN,$L(SSN)-3,$L(SSN))
"RTN","IBCNEHLU",39,0)
 ;
"RTN","IBCNEHLU",40,0)
 ; If the two dates of death are the same, quit
"RTN","IBCNEHLU",41,0)
 I CDOD=DOD G DODCKX
"RTN","IBCNEHLU",42,0)
 ;
"RTN","IBCNEHLU",43,0)
 ;  If no current date of death but payer sent one
"RTN","IBCNEHLU",44,0)
 I CDOD="" D  G DODCKX
"RTN","IBCNEHLU",45,0)
 . ;  Send an email message
"RTN","IBCNEHLU",46,0)
 . S XMSUB="Date of Death Received"
"RTN","IBCNEHLU",47,0)
 . S MSG(1)="A Date of Death ("_IDDSP_") was received for patient: "_NAME_"/"_IDSSN_" "_$$GETDOB^IBCNEDEQ(DFN)_" from"
"RTN","IBCNEHLU",48,0)
 . S MSG(2)="payer "_$$GET1^DIQ(365,RIEN,.03,"E")_".  There is no current Date of Death on file for "
"RTN","IBCNEHLU",49,0)
 . S MSG(3)="this patient."
"RTN","IBCNEHLU",50,0)
 . D TXT^IBCNEUT7("MSG")
"RTN","IBCNEHLU",51,0)
 . D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHLU",52,0)
 ;
"RTN","IBCNEHLU",53,0)
 S XMSUB="Variant Date of Death"
"RTN","IBCNEHLU",54,0)
 S MSG(1)="A Date of Death ("_IDDSP_") was received for patient: "_NAME_"/"_IDSSN_" "_$$GETDOB^IBCNEDEQ(DFN)_" from payer "_$$GET1^DIQ(365,RIEN,.03,"E")_"."
"RTN","IBCNEHLU",55,0)
 S MSG(2)="This Date of Death does not currently match the Date of Death ("_CIDDSP_") on file for this patient. "
"RTN","IBCNEHLU",56,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEHLU",57,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHLU",58,0)
DODCKX   ;
"RTN","IBCNEHLU",59,0)
 Q
"RTN","IBCNEHLU",60,0)
 ;
"RTN","IBCNEHLU",61,0)
SPAR     ;  Segment Parsing
"RTN","IBCNEHLU",62,0)
 ;
"RTN","IBCNEHLU",63,0)
 ; This tag will parse the current segment referenced by the HCT index
"RTN","IBCNEHLU",64,0)
 ; and place the results in the IBSEG array.
"RTN","IBCNEHLU",65,0)
 ;
"RTN","IBCNEHLU",66,0)
 ; Input Variables
"RTN","IBCNEHLU",67,0)
 ; HCT
"RTN","IBCNEHLU",68,0)
 ;
"RTN","IBCNEHLU",69,0)
 ; Output Variables
"RTN","IBCNEHLU",70,0)
 ; IBSEG (ARRAY of fields in segment)
"RTN","IBCNEHLU",71,0)
 ;
"RTN","IBCNEHLU",72,0)
 N II,IJ,IK,IM,IS,ISBEG,ISCT,ISDATA,ISEND,ISPEC,LSDATA,NPC
"RTN","IBCNEHLU",73,0)
 ;
"RTN","IBCNEHLU",74,0)
 ;Reset IBSEG
"RTN","IBCNEHLU",75,0)
 K IBSEG
"RTN","IBCNEHLU",76,0)
 ;
"RTN","IBCNEHLU",77,0)
 S ISCT="",II=0,IS=0
"RTN","IBCNEHLU",78,0)
 F  S ISCT=$O(^TMP($J,"IBCNEHLI",HCT,ISCT)) Q:ISCT=""  D
"RTN","IBCNEHLU",79,0)
 . S IS=IS+1
"RTN","IBCNEHLU",80,0)
 . S ISDATA(IS)=$G(^TMP($J,"IBCNEHLI",HCT,ISCT))
"RTN","IBCNEHLU",81,0)
 . I $O(^TMP($J,"IBCNEHLI",HCT,ISCT))="" S ISDATA(IS)=ISDATA(IS)_HLFS
"RTN","IBCNEHLU",82,0)
 . S ISPEC(IS)=$L(ISDATA(IS),HLFS)
"RTN","IBCNEHLU",83,0)
 ;
"RTN","IBCNEHLU",84,0)
 S IM=0,LSDATA=""
"RTN","IBCNEHLU",85,0)
LP S IM=IM+1 Q:IM>IS
"RTN","IBCNEHLU",86,0)
 S LSDATA=LSDATA_ISDATA(IM),NPC=ISPEC(IM)
"RTN","IBCNEHLU",87,0)
 F IJ=1:1:NPC-1 D
"RTN","IBCNEHLU",88,0)
 . S II=II+1,IBSEG(II)=$$CLNSTR($P(LSDATA,HLFS,IJ),$E(HL("ECH"),1,2)_$E(HL("ECH"),4),$E(HL("ECH")))
"RTN","IBCNEHLU",89,0)
 S LSDATA=$P(LSDATA,HLFS,NPC)
"RTN","IBCNEHLU",90,0)
 G LP
"RTN","IBCNEHLU",91,0)
CLNSTR(STRING,CHARS,SUBSEP)      ; Remove extra trailing components and subcomponents in the HL7 seg
"RTN","IBCNEHLU",92,0)
 ;
"RTN","IBCNEHLU",93,0)
 N NUMPEC,PEC,RTSTRING
"RTN","IBCNEHLU",94,0)
 ;
"RTN","IBCNEHLU",95,0)
 S RTSTRING=$$RTRIMCH(STRING,CHARS)
"RTN","IBCNEHLU",96,0)
 ; Now we have string w/o trailing chars, remove from subs
"RTN","IBCNEHLU",97,0)
 S NUMPEC=$L(RTSTRING,SUBSEP)
"RTN","IBCNEHLU",98,0)
 F PEC=1:1:NUMPEC S $P(RTSTRING,SUBSEP,PEC)=$$RTRIMCH($P(RTSTRING,SUBSEP,PEC),CHARS)
"RTN","IBCNEHLU",99,0)
 Q RTSTRING
"RTN","IBCNEHLU",100,0)
 ;
"RTN","IBCNEHLU",101,0)
RTRIMCH(STR,CHRS) ; Remove the trailing chars from string
"RTN","IBCNEHLU",102,0)
 ;
"RTN","IBCNEHLU",103,0)
 N R,L
"RTN","IBCNEHLU",104,0)
 ;
"RTN","IBCNEHLU",105,0)
 S L=1,CHRS=$G(CHRS," ")
"RTN","IBCNEHLU",106,0)
 F R=$L(STR):-1:1 Q:CHRS'[$E(STR,R)
"RTN","IBCNEHLU",107,0)
 I L=R,(CHRS[$E(STR)) S STR=""
"RTN","IBCNEHLU",108,0)
 Q $E(STR,L,R)
"RTN","IBCNEHLU",109,0)
 ;
"RTN","IBCNEHLU",110,0)
 ;
"RTN","IBCNEHLU",111,0)
GTICNM(ICN,NAME) ; Retrieve PID segment and set ICN and patient name
"RTN","IBCNEHLU",112,0)
 ;
"RTN","IBCNEHLU",113,0)
 N HCT,ERFLG,SEG,IBSEG
"RTN","IBCNEHLU",114,0)
 S (HCT,ICN,NAME)="",ERFLG=0
"RTN","IBCNEHLU",115,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:ERFLG
"RTN","IBCNEHLU",116,0)
 .  D SPAR
"RTN","IBCNEHLU",117,0)
 .  S SEG=$G(IBSEG(1)) Q:SEG'="PID"
"RTN","IBCNEHLU",118,0)
 .  S ICN=$G(IBSEG(4)),NAME=$G(IBSEG(6)),ERFLG=1
"RTN","IBCNEHLU",119,0)
 Q
"RTN","IBCNEHLU",120,0)
 ;
"RTN","IBCNEHLU",121,0)
PATISSUB(IDATA0) ; check if patient is the subscriber
"RTN","IBCNEHLU",122,0)
 ; IDATA0 - 0 node of file 2.312
"RTN","IBCNEHLU",123,0)
 ;
"RTN","IBCNEHLU",124,0)
 ; returns 1 if patient is the subscriber, 0 otherwise
"RTN","IBCNEHLU",125,0)
 ;
"RTN","IBCNEHLU",126,0)
 N PREL,RES
"RTN","IBCNEHLU",127,0)
 S RES=0
"RTN","IBCNEHLU",128,0)
 ; check field 2.312/16 first
"RTN","IBCNEHLU",129,0)
 S PREL=$P(IDATA0,U,16) I PREL'="" S:PREL="01" RES=1 Q RES
"RTN","IBCNEHLU",130,0)
 ; if 2.312/16 is empty, try field 2.312/6
"RTN","IBCNEHLU",131,0)
 I $P(IDATA0,U,6)="v" S RES=1
"RTN","IBCNEHLU",132,0)
 Q RES
"RTN","IBCNEHLU",133,0)
 ;
"RTN","IBCNEHLU",134,0)
ONEPOL(PIEN,IEN2) ; check if patient has only one policy on file for a given payer
"RTN","IBCNEHLU",135,0)
 ; PIEN - payer ien
"RTN","IBCNEHLU",136,0)
 ; IEN2 - patient ien (file 2)
"RTN","IBCNEHLU",137,0)
 ;
"RTN","IBCNEHLU",138,0)
 ; returns 1 if only one policy is found, 0 otherwise
"RTN","IBCNEHLU",139,0)
 N CNT,IEN36,IEN312,RES
"RTN","IBCNEHLU",140,0)
 S (CNT,RES)=0
"RTN","IBCNEHLU",141,0)
 I +$G(PIEN)'>0!(+$G(IEN2)'>0) Q RES
"RTN","IBCNEHLU",142,0)
 S IEN36="" F  S IEN36=$O(^DIC(36,"AC",PIEN,IEN36)) Q:IEN36=""  D
"RTN","IBCNEHLU",143,0)
 .S IEN312="" F  S IEN312=$O(^DPT(IEN2,.312,"B",IEN36,IEN312)) Q:IEN312=""  S CNT=CNT+1
"RTN","IBCNEHLU",144,0)
 .Q
"RTN","IBCNEHLU",145,0)
 I CNT=1 S RES=1
"RTN","IBCNEHLU",146,0)
 Q RES
"RTN","IBCNEHLU",147,0)
 ;
"RTN","IBCNEHLU",148,0)
MCRDT(RIEN,EBIEN) ; find effective date for Medicare response
"RTN","IBCNEHLU",149,0)
 ; RIEN - file 365 ien
"RTN","IBCNEHLU",150,0)
 ; EBIEN - subfile 365.02 ien
"RTN","IBCNEHLU",151,0)
 ;
"RTN","IBCNEHLU",152,0)
 ; returns date in FM format or "" if effective date was not found
"RTN","IBCNEHLU",153,0)
 ;
"RTN","IBCNEHLU",154,0)
 N DONE,DTIEN,IENS,RES,Z
"RTN","IBCNEHLU",155,0)
 S RES="",DONE=0
"RTN","IBCNEHLU",156,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,2,EBIEN,8,"B",Z)) Q:Z=""!DONE  D
"RTN","IBCNEHLU",157,0)
 .S DTIEN=$O(^IBCN(365,RIEN,2,EBIEN,8,"B",Z,"")) I 'DTIEN Q
"RTN","IBCNEHLU",158,0)
 .S IENS=DTIEN_","_EBIEN_","_RIEN_","
"RTN","IBCNEHLU",159,0)
 .; effective date has "eligibility" qualifier
"RTN","IBCNEHLU",160,0)
 .I $$GET1^DIQ(365.28,IENS,.03)=307 S RES=$$FMDATE^HLFNC($$GET1^DIQ(365.28,IENS,.02)),DONE=1
"RTN","IBCNEHLU",161,0)
 .Q
"RTN","IBCNEHLU",162,0)
 Q RES
"RTN","IBCNEHLU",163,0)
 ;
"RTN","IBCNEHLU",164,0)
ISMCR(RIEN) ; check if response is for Medicare part A/B
"RTN","IBCNEHLU",165,0)
 ; RIEN - file 365 ien
"RTN","IBCNEHLU",166,0)
 ;
"RTN","IBCNEHLU",167,0)
 ; returns a four piece string:
"RTN","IBCNEHLU",168,0)
 ;   piece 1 = 1 if response if for Medicare, 0 otherwise
"RTN","IBCNEHLU",169,0)
 ;   piece 2 = "MA" if response is for Medicare Part A
"RTN","IBCNEHLU",170,0)
 ;           = "MB" if response is for Medicare Part B
"RTN","IBCNEHLU",171,0)
 ;           = "B" if response is for both Part A and Part B
"RTN","IBCNEHLU",172,0)
 ;           = "" if respnse if not for Medicare
"RTN","IBCNEHLU",173,0)
 ;   piece 3 = effective date for Medicare Part A if response if for Part A or both parts, "" otherwise
"RTN","IBCNEHLU",174,0)
 ;   piece 4 = effective date for Medicare Part B if response if for Part B or both parts, "" otherwise
"RTN","IBCNEHLU",175,0)
 ;
"RTN","IBCNEHLU",176,0)
 N DONE,EBIEN,RES,TYPE,Z
"RTN","IBCNEHLU",177,0)
 S RES="0^",DONE=0
"RTN","IBCNEHLU",178,0)
 I +RIEN'>0 Q RES
"RTN","IBCNEHLU",179,0)
 I '$D(^IBCN(365,RIEN)) Q RES
"RTN","IBCNEHLU",180,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,2,"B",Z)) Q:Z=""!DONE  D
"RTN","IBCNEHLU",181,0)
 .S EBIEN=$O(^IBCN(365,RIEN,2,"B",Z,"")),TYPE=$$GET1^DIQ(365.02,EBIEN_","_RIEN_",",.05)
"RTN","IBCNEHLU",182,0)
 .I TYPE="MA" S $P(RES,U)=1,$P(RES,U,2)=$S($P(RES,U,2)="":"MA",1:"B"),$P(RES,U,3)=$$MCRDT(RIEN,EBIEN)
"RTN","IBCNEHLU",183,0)
 .I TYPE="MB" S $P(RES,U)=1,$P(RES,U,2)=$S($P(RES,U,2)="":"MB",1:"B"),$P(RES,U,4)=$$MCRDT(RIEN,EBIEN)
"RTN","IBCNEHLU",184,0)
 .I $P(RES,U,2)="B" S DONE=1
"RTN","IBCNEHLU",185,0)
 .Q
"RTN","IBCNEHLU",186,0)
 Q RES
"RTN","IBCNEKI2")
0^51^B9273638^B9265324
"RTN","IBCNEKI2",1,0)
IBCNEKI2 ;DAOU/BHS - PURGE eIV DATA FILES CONT'D ;11-JUL-2002
"RTN","IBCNEKI2",2,0)
 ;;2.0;INTEGRATED BILLING;**271,316,416**;21-MAR-94;Build 58
"RTN","IBCNEKI2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEKI2",4,0)
 ;
"RTN","IBCNEKI2",5,0)
 ; This routine holds additional procedures for purging the eIV data
"RTN","IBCNEKI2",6,0)
 ; from the Trans Queue file (365.1) and the Response file (365).
"RTN","IBCNEKI2",7,0)
 ;
"RTN","IBCNEKI2",8,0)
 ; ---------------------------------------------------
"RTN","IBCNEKI2",9,0)
MMPURGE ; This procedure is responsible for the creation and
"RTN","IBCNEKI2",10,0)
 ; sending of the MailMan message on the first day of the month
"RTN","IBCNEKI2",11,0)
 ; if the site has data eligible to be purged and if the mail group is
"RTN","IBCNEKI2",12,0)
 ; defined appropriately in the eIV site parameters.
"RTN","IBCNEKI2",13,0)
 ;
"RTN","IBCNEKI2",14,0)
 ; Identify records eligible to be purged
"RTN","IBCNEKI2",15,0)
 NEW ENDDT,STATLIST,DATE,TQIEN,TOTTQ,PURTQ,TQS
"RTN","IBCNEKI2",16,0)
 NEW HLIEN,RPIEN,RPS,TOTRP,PURRP,MSG,MGRP
"RTN","IBCNEKI2",17,0)
 ;
"RTN","IBCNEKI2",18,0)
 ; default end date, Today minus 182 days (approx 6 months)
"RTN","IBCNEKI2",19,0)
 S ENDDT=$$FMADD^XLFDT(DT,-182)
"RTN","IBCNEKI2",20,0)
 S (TOTTQ,PURTQ,TOTRP,PURRP)=0
"RTN","IBCNEKI2",21,0)
 ;
"RTN","IBCNEKI2",22,0)
 ; This is the list of statuses that are OK to purge
"RTN","IBCNEKI2",23,0)
 ;   3=Response Received
"RTN","IBCNEKI2",24,0)
 ;   5=Communication Failure
"RTN","IBCNEKI2",25,0)
 ;   7=Cancelled
"RTN","IBCNEKI2",26,0)
 S STATLIST=",3,5,7,"
"RTN","IBCNEKI2",27,0)
 ;
"RTN","IBCNEKI2",28,0)
 S DATE=""
"RTN","IBCNEKI2",29,0)
 F  S DATE=$O(^IBCN(365.1,"AE",DATE)) Q:'DATE  S TQIEN=0 F  S TQIEN=$O(^IBCN(365.1,"AE",DATE,TQIEN)) Q:'TQIEN  S TOTTQ=TOTTQ+1 I $P(DATE,".")'>ENDDT D
"RTN","IBCNEKI2",30,0)
 . S TQS=$P($G(^IBCN(365.1,TQIEN,0)),U,4)    ; status
"RTN","IBCNEKI2",31,0)
 . I '$F(STATLIST,","_TQS_",") Q
"RTN","IBCNEKI2",32,0)
 . S PURTQ=PURTQ+1
"RTN","IBCNEKI2",33,0)
 . ; Loop thru responses to count them, too
"RTN","IBCNEKI2",34,0)
 . S HLIEN=0
"RTN","IBCNEKI2",35,0)
 . F  S HLIEN=$O(^IBCN(365.1,TQIEN,2,HLIEN)) Q:'HLIEN  D
"RTN","IBCNEKI2",36,0)
 . .  I $P($G(^IBCN(365.1,TQIEN,2,HLIEN,0)),U,3) S PURRP=PURRP+1
"RTN","IBCNEKI2",37,0)
 ;
"RTN","IBCNEKI2",38,0)
 S DATE=""
"RTN","IBCNEKI2",39,0)
 F  S DATE=$O(^IBCN(365,"AE",DATE)) Q:'DATE  S RPIEN=0 F  S RPIEN=$O(^IBCN(365,"AE",DATE,RPIEN)) Q:'RPIEN  S TOTRP=TOTRP+1 I $P(DATE,".")'>ENDDT D
"RTN","IBCNEKI2",40,0)
 . I $P($G(^IBCN(365,RPIEN,0)),U,5) Q    ; include only unsolicited
"RTN","IBCNEKI2",41,0)
 . S PURRP=PURRP+1
"RTN","IBCNEKI2",42,0)
 ;
"RTN","IBCNEKI2",43,0)
 ; Do not send message if no records are eligible
"RTN","IBCNEKI2",44,0)
 I 'PURTQ,'PURRP G MMPURGX
"RTN","IBCNEKI2",45,0)
 ;
"RTN","IBCNEKI2",46,0)
 ; Send a MailMan message with Eligible Purge counts
"RTN","IBCNEKI2",47,0)
 S MSG(1)="ATTENTION IRM:  There are eIV TRANSMISSION QUEUE and"
"RTN","IBCNEKI2",48,0)
 S MSG(2)="eIV RESPONSE records eligible to be purged."
"RTN","IBCNEKI2",49,0)
 S MSG(3)=""
"RTN","IBCNEKI2",50,0)
 S MSG(4)="File                                  Eligible   Total  "
"RTN","IBCNEKI2",51,0)
 S MSG(5)="                                       Count     Count  "
"RTN","IBCNEKI2",52,0)
 S MSG(6)="------------------------------------  --------  --------"
"RTN","IBCNEKI2",53,0)
 S MSG(7)="eIV RESPONSE FILE (#365)              "_$J(PURRP,8)_"  "_$J(TOTRP,8)
"RTN","IBCNEKI2",54,0)
 S MSG(8)="eIV TRANSMISSION QUEUE FILE (#365.1)  "_$J(PURTQ,8)_"  "_$J(TOTTQ,8)
"RTN","IBCNEKI2",55,0)
 S MSG(9)="====================================  ========  ========"
"RTN","IBCNEKI2",56,0)
 S MSG(10)="Total                                 "_$J(PURTQ+PURRP,8)_"  "_$J(TOTTQ+TOTRP,8)
"RTN","IBCNEKI2",57,0)
 S MSG(11)=""
"RTN","IBCNEKI2",58,0)
 S MSG(12)="Please run option IBCNE PURGE IIV DATA - Purge eIV Transactions,"
"RTN","IBCNEKI2",59,0)
 S MSG(13)="if you would like to purge the eligible records."
"RTN","IBCNEKI2",60,0)
 ; Set to IB site parameter MAILGROUP
"RTN","IBCNEKI2",61,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEKI2",62,0)
 D MSG^IBCNEUT5(MGRP,"eIV Data Eligible for Purge","MSG(")
"RTN","IBCNEKI2",63,0)
 ;
"RTN","IBCNEKI2",64,0)
MMPURGX ;
"RTN","IBCNEKI2",65,0)
 Q
"RTN","IBCNEKI2",66,0)
 ;
"RTN","IBCNEKIT")
0^71^B54158297^B77702012
"RTN","IBCNEKIT",1,0)
IBCNEKIT ;DAOU/ESG - PURGE eIV DATA FILES ;11-JUL-2002
"RTN","IBCNEKIT",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,316,416**;21-MAR-94;Build 58
"RTN","IBCNEKIT",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEKIT",4,0)
 ;
"RTN","IBCNEKIT",5,0)
 ; This routine handles the purging of the eIV data stored in the
"RTN","IBCNEKIT",6,0)
 ; eIV Transmission Queue file (#365.1) and in the eIV Response file (#365).
"RTN","IBCNEKIT",7,0)
 ; User can pick a date range for the purge.  Data created within 6 months
"RTN","IBCNEKIT",8,0)
 ; cannot be purged.  The actual global kills are done by a background
"RTN","IBCNEKIT",9,0)
 ; task after hours (8:00pm).
"RTN","IBCNEKIT",10,0)
 ;
"RTN","IBCNEKIT",11,0)
EN ;
"RTN","IBCNEKIT",12,0)
 NEW STOP,BEGDT,ENDDT,STATLIST
"RTN","IBCNEKIT",13,0)
 D INIT I STOP G EXIT       ; initialize/calculate default dates
"RTN","IBCNEKIT",14,0)
 D BEGDT I STOP G EXIT      ; user interface for beginning date
"RTN","IBCNEKIT",15,0)
 D ENDDT I STOP G EXIT      ; user interface for ending date
"RTN","IBCNEKIT",16,0)
 D CONFIRM I STOP G EXIT    ; confirmation message/final check
"RTN","IBCNEKIT",17,0)
 D QUEUE                    ; queuing process
"RTN","IBCNEKIT",18,0)
EXIT ;
"RTN","IBCNEKIT",19,0)
 Q
"RTN","IBCNEKIT",20,0)
 ;
"RTN","IBCNEKIT",21,0)
PURGE ; This procedure is queued to run in the background and does the
"RTN","IBCNEKIT",22,0)
 ; actual purging.  Variables available from the TaskMan call are:
"RTN","IBCNEKIT",23,0)
 ;
"RTN","IBCNEKIT",24,0)
 ; STATLIST = list of statuses that are OK to purge
"RTN","IBCNEKIT",25,0)
 ;    BEGDT = beginning date for purging
"RTN","IBCNEKIT",26,0)
 ;    ENDDT = ending date for purging
"RTN","IBCNEKIT",27,0)
 ;
"RTN","IBCNEKIT",28,0)
 ; First loop through the eIV Transmission Queue file and delete all
"RTN","IBCNEKIT",29,0)
 ; records in the date range whose status is in the list
"RTN","IBCNEKIT",30,0)
 ;
"RTN","IBCNEKIT",31,0)
 NEW DATE,TQIEN,TQS,HLIEN,DIK,DA,CNT
"RTN","IBCNEKIT",32,0)
 S DATE=$O(^IBCN(365.1,"AE",BEGDT),-1),CNT=0
"RTN","IBCNEKIT",33,0)
 F  S DATE=$O(^IBCN(365.1,"AE",DATE)) Q:'DATE!($P(DATE,".",1)>ENDDT)!$G(ZTSTOP)  S TQIEN=0 F  S TQIEN=$O(^IBCN(365.1,"AE",DATE,TQIEN)) Q:'TQIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNEKIT",34,0)
 . S CNT=CNT+1
"RTN","IBCNEKIT",35,0)
 . I $D(ZTQUEUED),CNT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEKIT",36,0)
 . S TQS=$P($G(^IBCN(365.1,TQIEN,0)),U,4)    ; trans queue status
"RTN","IBCNEKIT",37,0)
 . I '$F(STATLIST,","_TQS_",") Q             ; must be in the list
"RTN","IBCNEKIT",38,0)
 . ;
"RTN","IBCNEKIT",39,0)
 . ; loop through the HL7 messages multiple and kill any response
"RTN","IBCNEKIT",40,0)
 . ; records that are found for this transmission queue entry
"RTN","IBCNEKIT",41,0)
 . S HLIEN=0,DIK="^IBCN(365,"
"RTN","IBCNEKIT",42,0)
 . F  S HLIEN=$O(^IBCN(365.1,TQIEN,2,HLIEN)) Q:'HLIEN  D
"RTN","IBCNEKIT",43,0)
 .. S DA=$P($G(^IBCN(365.1,TQIEN,2,HLIEN,0)),U,3) I DA D ^DIK
"RTN","IBCNEKIT",44,0)
 .. Q
"RTN","IBCNEKIT",45,0)
 . ;
"RTN","IBCNEKIT",46,0)
 . ; now we can kill the transmission queue entry itself
"RTN","IBCNEKIT",47,0)
 . S DA=TQIEN,DIK="^IBCN(365.1," D ^DIK
"RTN","IBCNEKIT",48,0)
 . Q
"RTN","IBCNEKIT",49,0)
 ;
"RTN","IBCNEKIT",50,0)
 ; Check for a stop request
"RTN","IBCNEKIT",51,0)
 I $G(ZTSTOP) G PURGEX
"RTN","IBCNEKIT",52,0)
 ;
"RTN","IBCNEKIT",53,0)
 ; Now we must loop through the eIV Response file itself to purge any
"RTN","IBCNEKIT",54,0)
 ; response records that do not have a corresponding transmission
"RTN","IBCNEKIT",55,0)
 ; queue entry.  These are the unsolicited responses.  The status of
"RTN","IBCNEKIT",56,0)
 ; these responses is always 'response received' so we don't need to
"RTN","IBCNEKIT",57,0)
 ; check the status. For this loop, start from the very beginning of
"RTN","IBCNEKIT",58,0)
 ; the file.
"RTN","IBCNEKIT",59,0)
 ;
"RTN","IBCNEKIT",60,0)
 S DATE="",DIK="^IBCN(365,",CNT=0
"RTN","IBCNEKIT",61,0)
 F  S DATE=$O(^IBCN(365,"AE",DATE)) Q:'DATE!($P(DATE,".",1)>ENDDT)!$G(ZTSTOP)  S DA=0 F  S DA=$O(^IBCN(365,"AE",DATE,DA)) Q:'DA  D  Q:$G(ZTSTOP)
"RTN","IBCNEKIT",62,0)
 . S CNT=CNT+1
"RTN","IBCNEKIT",63,0)
 . I $D(ZTQUEUED),CNT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEKIT",64,0)
 . ;
"RTN","IBCNEKIT",65,0)
 . ; If there is a pointer to the transmission queue file, then we
"RTN","IBCNEKIT",66,0)
 . ; should get out of this loop because the purpose of this section
"RTN","IBCNEKIT",67,0)
 . ; is to purge those responses with no link to the transmission
"RTN","IBCNEKIT",68,0)
 . ; queue file.
"RTN","IBCNEKIT",69,0)
 . ;
"RTN","IBCNEKIT",70,0)
 . I $P($G(^IBCN(365,DA,0)),U,5) Q
"RTN","IBCNEKIT",71,0)
 . D ^DIK
"RTN","IBCNEKIT",72,0)
 . Q
"RTN","IBCNEKIT",73,0)
 ;
"RTN","IBCNEKIT",74,0)
PURGEX ;
"RTN","IBCNEKIT",75,0)
 ; Tell TaskManager to delete the task's record
"RTN","IBCNEKIT",76,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCNEKIT",77,0)
 Q
"RTN","IBCNEKIT",78,0)
 ;
"RTN","IBCNEKIT",79,0)
INIT ; This procedure calculates the default beginning and ending dates
"RTN","IBCNEKIT",80,0)
 ; and displays screen messages about this option to the user.
"RTN","IBCNEKIT",81,0)
 ;
"RTN","IBCNEKIT",82,0)
 NEW DATE,FOUND,TQIEN,TQS,RPIEN,RPS
"RTN","IBCNEKIT",83,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",84,0)
 ;
"RTN","IBCNEKIT",85,0)
 S STOP=0
"RTN","IBCNEKIT",86,0)
 ;
"RTN","IBCNEKIT",87,0)
 ; This is the list of statuses that are OK to purge
"RTN","IBCNEKIT",88,0)
 ;   3=Response Received
"RTN","IBCNEKIT",89,0)
 ;   5=Communication Failure
"RTN","IBCNEKIT",90,0)
 ;   7=Cancelled
"RTN","IBCNEKIT",91,0)
 S STATLIST=",3,5,7,"
"RTN","IBCNEKIT",92,0)
 ;
"RTN","IBCNEKIT",93,0)
 ; Try to find a beginning date in the eIV Transmission Queue file
"RTN","IBCNEKIT",94,0)
 S DATE="",FOUND=0,BEGDT=DT
"RTN","IBCNEKIT",95,0)
 F  S DATE=$O(^IBCN(365.1,"AE",DATE)) Q:'DATE!FOUND  S TQIEN=0 F  S TQIEN=$O(^IBCN(365.1,"AE",DATE,TQIEN)) Q:'TQIEN  D  Q:FOUND
"RTN","IBCNEKIT",96,0)
 . S TQS=$P($G(^IBCN(365.1,TQIEN,0)),U,4)    ; status
"RTN","IBCNEKIT",97,0)
 . I '$F(STATLIST,","_TQS_",") Q
"RTN","IBCNEKIT",98,0)
 . S FOUND=1
"RTN","IBCNEKIT",99,0)
 . S BEGDT=$P(DATE,".",1)
"RTN","IBCNEKIT",100,0)
 . Q
"RTN","IBCNEKIT",101,0)
 ;
"RTN","IBCNEKIT",102,0)
 ; If not successful, try to find a beginning date in the eIV Response file.
"RTN","IBCNEKIT",103,0)
 I 'FOUND D
"RTN","IBCNEKIT",104,0)
 . S DATE=""
"RTN","IBCNEKIT",105,0)
 . F  S DATE=$O(^IBCN(365,"AE",DATE)) Q:'DATE!FOUND  S RPIEN=0 F  S RPIEN=$O(^IBCN(365,"AE",DATE,RPIEN)) Q:'RPIEN  D  Q:FOUND
"RTN","IBCNEKIT",106,0)
 .. S RPS=$P($G(^IBCN(365,RPIEN,0)),U,6)    ; status
"RTN","IBCNEKIT",107,0)
 .. I '$F(STATLIST,","_RPS_",") Q
"RTN","IBCNEKIT",108,0)
 .. S FOUND=1
"RTN","IBCNEKIT",109,0)
 .. S BEGDT=$P(DATE,".",1)
"RTN","IBCNEKIT",110,0)
 .. Q
"RTN","IBCNEKIT",111,0)
 . Q
"RTN","IBCNEKIT",112,0)
 ;
"RTN","IBCNEKIT",113,0)
 ; default end date, Today minus 182 days (approx 6 months)
"RTN","IBCNEKIT",114,0)
 S ENDDT=$$FMADD^XLFDT(DT,-182)
"RTN","IBCNEKIT",115,0)
 ;
"RTN","IBCNEKIT",116,0)
 I 'FOUND!(BEGDT>ENDDT) D  S STOP=1 G INITX
"RTN","IBCNEKIT",117,0)
 . W !!?5,"Purging of eIV data is not possible at this time."
"RTN","IBCNEKIT",118,0)
 . I 'FOUND W !?5,"There are no entries in the file that are eligible to be",!?5,"purged or there is no data in the file."
"RTN","IBCNEKIT",119,0)
 . E  W !?5,"The oldest date in the file is ",$$FMTE^XLFDT(BEGDT,"5Z"),".",!?5,"Data cannot be purged unless it is at least 6 months old."
"RTN","IBCNEKIT",120,0)
 . W ! S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEKIT",121,0)
 . Q
"RTN","IBCNEKIT",122,0)
 ;
"RTN","IBCNEKIT",123,0)
 ; At this point, we know that there are some entries eligible for
"RTN","IBCNEKIT",124,0)
 ; purging.  Display a message to the user about this option.
"RTN","IBCNEKIT",125,0)
 W @IOF
"RTN","IBCNEKIT",126,0)
 W !?8,"Purge Electronic Insurance Verification (eIV) Data Files"
"RTN","IBCNEKIT",127,0)
 W !!!," This option will allow you to purge data from the eIV Response File (#365)"
"RTN","IBCNEKIT",128,0)
 W !," and the eIV Transmission Queue File (#365.1).  The data must be at least six"
"RTN","IBCNEKIT",129,0)
 W !," months old before it can be purged.  Only insurance transactions that have a"
"RTN","IBCNEKIT",130,0)
 W !," transmission status of ""Response Received"", ""Communication Failure"", or"
"RTN","IBCNEKIT",131,0)
 W !," ""Cancelled"" may be purged.  You will be allowed to select a date range for"
"RTN","IBCNEKIT",132,0)
 W !," this purging.  The default beginning date will be the date of the oldest"
"RTN","IBCNEKIT",133,0)
 W !," eligible record in the system.  The default ending date will be six months"
"RTN","IBCNEKIT",134,0)
 W !," ago from today's date.  You may modify this default date range.  However, you"
"RTN","IBCNEKIT",135,0)
 W !," may not select an ending date that is more recent than six months ago."
"RTN","IBCNEKIT",136,0)
 W !!
"RTN","IBCNEKIT",137,0)
INITX ;
"RTN","IBCNEKIT",138,0)
 Q
"RTN","IBCNEKIT",139,0)
 ;
"RTN","IBCNEKIT",140,0)
BEGDT ; This procedure captures the beginning date from the user.
"RTN","IBCNEKIT",141,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",142,0)
 S DIR(0)="DOA^"_BEGDT_":"_ENDDT_":AEX"
"RTN","IBCNEKIT",143,0)
 S DIR("A")="Enter the purge begin date: "
"RTN","IBCNEKIT",144,0)
 S DIR("B")=$$FMTE^XLFDT(BEGDT,"5Z")
"RTN","IBCNEKIT",145,0)
 S DIR("?")="This response must be a date between "_$$FMTE^XLFDT(BEGDT,"5Z")_" and "_$$FMTE^XLFDT(ENDDT,"5Z")_"."
"RTN","IBCNEKIT",146,0)
 D ^DIR K DIR
"RTN","IBCNEKIT",147,0)
 I $D(DIRUT)!'Y S STOP=1 G BEGDTX
"RTN","IBCNEKIT",148,0)
 S BEGDT=Y
"RTN","IBCNEKIT",149,0)
BEGDTX ;
"RTN","IBCNEKIT",150,0)
 Q
"RTN","IBCNEKIT",151,0)
 ;
"RTN","IBCNEKIT",152,0)
ENDDT ; This procedure captures the ending date from the user.
"RTN","IBCNEKIT",153,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",154,0)
 W !
"RTN","IBCNEKIT",155,0)
 S DIR(0)="DOA^"_BEGDT_":"_ENDDT_":AEX"
"RTN","IBCNEKIT",156,0)
 S DIR("A")="  Enter the purge end date: "
"RTN","IBCNEKIT",157,0)
 S DIR("B")=$$FMTE^XLFDT(ENDDT,"5Z")
"RTN","IBCNEKIT",158,0)
 S DIR("?")="This response must be a date between "_$$FMTE^XLFDT(BEGDT,"5Z")_" and "_$$FMTE^XLFDT(ENDDT,"5Z")_"."
"RTN","IBCNEKIT",159,0)
 D ^DIR K DIR
"RTN","IBCNEKIT",160,0)
 I $D(DIRUT)!'Y S STOP=1 G ENDDTX
"RTN","IBCNEKIT",161,0)
 S ENDDT=Y
"RTN","IBCNEKIT",162,0)
ENDDTX ;
"RTN","IBCNEKIT",163,0)
 Q
"RTN","IBCNEKIT",164,0)
 ;
"RTN","IBCNEKIT",165,0)
CONFIRM ; This procedure displays a confirmation message to the user and
"RTN","IBCNEKIT",166,0)
 ; asks if it is OK to proceed with the purge.
"RTN","IBCNEKIT",167,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",168,0)
 W !!!," You want to purge all eIV data created between "
"RTN","IBCNEKIT",169,0)
 W $$FMTE^XLFDT(BEGDT,"5Z")," and ",$$FMTE^XLFDT(ENDDT,"5Z"),"."
"RTN","IBCNEKIT",170,0)
 W !
"RTN","IBCNEKIT",171,0)
 S DIR(0)="YO",DIR("A")=" OK to continue"
"RTN","IBCNEKIT",172,0)
 S DIR("B")="NO"
"RTN","IBCNEKIT",173,0)
 D ^DIR K DIR
"RTN","IBCNEKIT",174,0)
 I 'Y S STOP=1
"RTN","IBCNEKIT",175,0)
CONFX ;
"RTN","IBCNEKIT",176,0)
 Q
"RTN","IBCNEKIT",177,0)
 ;
"RTN","IBCNEKIT",178,0)
QUEUE ; This procedure queues the purge process for later at night.
"RTN","IBCNEKIT",179,0)
 ; The concept for queuing the purge came from the insurance buffer
"RTN","IBCNEKIT",180,0)
 ; purge routine, IBCNBPG.  That purge process is also hard-coded to
"RTN","IBCNEKIT",181,0)
 ; be run at 8:00 PM just like this one is.
"RTN","IBCNEKIT",182,0)
 ;
"RTN","IBCNEKIT",183,0)
 NEW ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTSAVE,ZTKIL,ZTSYNC,ZTSK
"RTN","IBCNEKIT",184,0)
 NEW DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT
"RTN","IBCNEKIT",185,0)
 S ZTRTN="PURGE^IBCNEKIT"     ; TaskMan task entry point
"RTN","IBCNEKIT",186,0)
 S ZTDESC="Purge eIV Data"    ; Task description
"RTN","IBCNEKIT",187,0)
 S ZTDTH=DT_".20"             ; start it at 8:00 PM tonight
"RTN","IBCNEKIT",188,0)
 S ZTIO=""
"RTN","IBCNEKIT",189,0)
 S ZTSAVE("BEGDT")=""
"RTN","IBCNEKIT",190,0)
 S ZTSAVE("ENDDT")=""
"RTN","IBCNEKIT",191,0)
 S ZTSAVE("STATLIST")=""
"RTN","IBCNEKIT",192,0)
 D ^%ZTLOAD
"RTN","IBCNEKIT",193,0)
 I $G(ZTSK) W !!," Task# ",ZTSK," has been scheduled to purge the eIV data tonight at 8:00 PM."
"RTN","IBCNEKIT",194,0)
 E  W !!," TaskManager could not schedule this task.",!," Contact IRM for technical assistance."
"RTN","IBCNEKIT",195,0)
 W ! S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEKIT",196,0)
QUEUEX ;
"RTN","IBCNEKIT",197,0)
 Q
"RTN","IBCNEPM1")
0^9^B31433472^B17662698
"RTN","IBCNEPM1",1,0)
IBCNEPM1 ;DAOU/ESG - PAYER MAINT/INS COMPANY LIST FOR PAYER ;22-JAN-2003
"RTN","IBCNEPM1",2,0)
 ;;2.0;INTEGRATED BILLING;**184,416**;21-MAR-94;Build 58
"RTN","IBCNEPM1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEPM1",4,0)
 ;
"RTN","IBCNEPM1",5,0)
EN(IEN,PAYER,PROFID,INSTID) ; -- main entry point for IBCNE PAYER EXPAND LIST
"RTN","IBCNEPM1",6,0)
 ; IEN is the IEN of the Payer(#365.12).  PAYER is the payer's name.
"RTN","IBCNEPM1",7,0)
 ; PROFID and INSTID are the EDI ID numbers for the selected payer
"RTN","IBCNEPM1",8,0)
 ; These are passed into this routine from EXPND^IBCNEPM2.
"RTN","IBCNEPM1",9,0)
 ;
"RTN","IBCNEPM1",10,0)
 N IBCNEPRB
"RTN","IBCNEPM1",11,0)
 D EN^VALM("IBCNE PAYER EXPAND LIST")    ; call the 2nd list
"RTN","IBCNEPM1",12,0)
 I $G(IBCNEPRB) D INIT^IBCNEPM G ENX     ; special variable to rebuild the whole scratch global
"RTN","IBCNEPM1",13,0)
 D BUILD^IBCNEPM                         ; just rebuild the list#1 display
"RTN","IBCNEPM1",14,0)
ENX ;
"RTN","IBCNEPM1",15,0)
 S VALMBCK="R"
"RTN","IBCNEPM1",16,0)
 Q
"RTN","IBCNEPM1",17,0)
 ;
"RTN","IBCNEPM1",18,0)
HDR ; -- header code
"RTN","IBCNEPM1",19,0)
 S VALMHDR(1)="PAYER: "_$E(PAYER,1,30)_"     Prof. EDI#: "_$E($G(PROFID),1,15)_"  Inst. EDI#: "_$E($G(INSTID),1,15)
"RTN","IBCNEPM1",20,0)
 S VALMHDR(2)="Insurance Company Name - Active Only"
"RTN","IBCNEPM1",21,0)
 Q
"RTN","IBCNEPM1",22,0)
 ;
"RTN","IBCNEPM1",23,0)
INIT ; -- init variables and list array
"RTN","IBCNEPM1",24,0)
 ; Variable PAYER (payer name) is returned by this procedure and used 
"RTN","IBCNEPM1",25,0)
 ; by the list header.  Variable LINE is also set before coming into 
"RTN","IBCNEPM1",26,0)
 ; this procedure.
"RTN","IBCNEPM1",27,0)
 ;
"RTN","IBCNEPM1",28,0)
 KILL ^TMP("IBCNEPM",$J,2),^TMP("IBCNEPM",$J,"LINK")
"RTN","IBCNEPM1",29,0)
 NEW INS,ROW,STRING2,NAME,DATA,ADDRESS,DATA2,PROFID,INSTID
"RTN","IBCNEPM1",30,0)
 ;
"RTN","IBCNEPM1",31,0)
 ;IEN is the payer ien (#365.12)
"RTN","IBCNEPM1",32,0)
 ;PAYER is the payer name
"RTN","IBCNEPM1",33,0)
 I IEN=""!(PAYER="") Q
"RTN","IBCNEPM1",34,0)
 ;
"RTN","IBCNEPM1",35,0)
 ; INS is the insurance company ien
"RTN","IBCNEPM1",36,0)
 S INS="",ROW=0
"RTN","IBCNEPM1",37,0)
 F  S INS=$O(^TMP("IBCNEPM",$J,"PYR",PAYER,IEN,INS)) Q:INS=""  D
"RTN","IBCNEPM1",38,0)
 . S STRING2="",ROW=ROW+1
"RTN","IBCNEPM1",39,0)
 . S NAME=$P($G(^DIC(36,INS,0)),U,1)   ; insurance company name
"RTN","IBCNEPM1",40,0)
 . S DATA=$G(^DIC(36,INS,.11))
"RTN","IBCNEPM1",41,0)
 . S ADDRESS=$P(DATA,U,1)
"RTN","IBCNEPM1",42,0)
 . I $P(DATA,U,4)'="" S ADDRESS=ADDRESS_"  "_$P(DATA,U,4)
"RTN","IBCNEPM1",43,0)
 . I $P(DATA,U,5) S ADDRESS=ADDRESS_","_$P($G(^DIC(5,+$P(DATA,U,5),0)),U,2)
"RTN","IBCNEPM1",44,0)
 . S DATA2=$G(^DIC(36,INS,3))
"RTN","IBCNEPM1",45,0)
 . S PROFID=$P(DATA2,U,2),INSTID=$P(DATA2,U,4)
"RTN","IBCNEPM1",46,0)
 . S STRING2=$$SETFLD^VALM1(NAME,STRING2,"INSURANCE CO")
"RTN","IBCNEPM1",47,0)
 . S STRING2=$$SETFLD^VALM1(ADDRESS,STRING2,"ADDRESS")
"RTN","IBCNEPM1",48,0)
 . S STRING2=$$SETFLD^VALM1(ROW,STRING2,"LINE")
"RTN","IBCNEPM1",49,0)
 . S STRING2=$$SETFLD^VALM1(PROFID,STRING2,"PROFEDI")
"RTN","IBCNEPM1",50,0)
 . S STRING2=$$SETFLD^VALM1(INSTID,STRING2,"INSTEDI")
"RTN","IBCNEPM1",51,0)
 . D SET^VALM10(ROW,STRING2)
"RTN","IBCNEPM1",52,0)
 . ;
"RTN","IBCNEPM1",53,0)
 . ; "LINK" scratch global structure = payer ien^ins co ien^payer name
"RTN","IBCNEPM1",54,0)
 . S ^TMP("IBCNEPM",$J,"LINK",ROW)=IEN_U_INS_U_PAYER
"RTN","IBCNEPM1",55,0)
 . Q
"RTN","IBCNEPM1",56,0)
 ;
"RTN","IBCNEPM1",57,0)
 S VALMCNT=ROW
"RTN","IBCNEPM1",58,0)
 I VALMCNT=0 S VALMSG=" No Matching Insurance Companies "
"RTN","IBCNEPM1",59,0)
 Q
"RTN","IBCNEPM1",60,0)
 ;
"RTN","IBCNEPM1",61,0)
HELP ; -- help code
"RTN","IBCNEPM1",62,0)
 N X S X="?" D DISP^XQORM1 W !!
"RTN","IBCNEPM1",63,0)
 Q
"RTN","IBCNEPM1",64,0)
 ;
"RTN","IBCNEPM1",65,0)
EXIT ; -- exit code
"RTN","IBCNEPM1",66,0)
 Q
"RTN","IBCNEPM1",67,0)
 ;
"RTN","IBCNEPM1",68,0)
LINK ; -- code to facilitate the linking between the ins company and payer
"RTN","IBCNEPM1",69,0)
 NEW DIR,X,Y,DIRUT,DIROUT,DTOUT,DUOUT,LINKDATA,PIEN,INS,TPAYER
"RTN","IBCNEPM1",70,0)
 NEW DA,DIE,DR,D,D0,DI,DIC,DISYS,DQ,%,PMCNT,PMLST,PMPCE,PMSEL,PMSUB
"RTN","IBCNEPM1",71,0)
 ;
"RTN","IBCNEPM1",72,0)
 ;PIEN - temp variable for payer IEN (#365.12)
"RTN","IBCNEPM1",73,0)
 ;TPAYER - temp variable for payer name
"RTN","IBCNEPM1",74,0)
 ;
"RTN","IBCNEPM1",75,0)
 D FULL^VALM1
"RTN","IBCNEPM1",76,0)
 I 'VALMCNT D  G LINKX
"RTN","IBCNEPM1",77,0)
 . W !!?5,"There are no insurance companies to select."
"RTN","IBCNEPM1",78,0)
 . D PAUSE^VALM1
"RTN","IBCNEPM1",79,0)
 . Q
"RTN","IBCNEPM1",80,0)
 ;
"RTN","IBCNEPM1",81,0)
 ; If there is only one ins. company, then assume it's selection and skip the reader
"RTN","IBCNEPM1",82,0)
 I VALMCNT=1 S (Y,Y(0))="1," G L1
"RTN","IBCNEPM1",83,0)
 ;
"RTN","IBCNEPM1",84,0)
 S DIR(0)="LO^1:"_VALMCNT_":0"
"RTN","IBCNEPM1",85,0)
 S DIR("A")="Select 1 or more Insurance Company Entries"
"RTN","IBCNEPM1",86,0)
 W ! D ^DIR K DIR
"RTN","IBCNEPM1",87,0)
 I $D(DIRUT) G LINKX
"RTN","IBCNEPM1",88,0)
L1 ;
"RTN","IBCNEPM1",89,0)
 M PMLST=Y S PMCNT=0,TPAYER=""
"RTN","IBCNEPM1",90,0)
 F PMSUB=0:1 Q:'$D(PMLST(PMSUB))  F PMPCE=1:1 S PMSEL=$P(PMLST(PMSUB),",",PMPCE) Q:PMSEL=""  D
"RTN","IBCNEPM1",91,0)
 . ; this is the loop that counts up the numbers selected for display purposes
"RTN","IBCNEPM1",92,0)
 . S PMCNT=PMCNT+1
"RTN","IBCNEPM1",93,0)
 . I TPAYER'="" Q
"RTN","IBCNEPM1",94,0)
 . S LINKDATA=$G(^TMP("IBCNEPM",$J,"LINK",+PMSEL)) I LINKDATA="" Q
"RTN","IBCNEPM1",95,0)
 . S PIEN=+$P(LINKDATA,U,1)                   ; payer ien
"RTN","IBCNEPM1",96,0)
 . S TPAYER=$P($G(^IBE(365.12,PIEN,0)),U,1)   ; payer name
"RTN","IBCNEPM1",97,0)
 . Q
"RTN","IBCNEPM1",98,0)
 ;
"RTN","IBCNEPM1",99,0)
 I 'PMCNT D  G LINKX
"RTN","IBCNEPM1",100,0)
 . W !!?5,"No insurance companies selected."
"RTN","IBCNEPM1",101,0)
 . D PAUSE^VALM1
"RTN","IBCNEPM1",102,0)
 . Q
"RTN","IBCNEPM1",103,0)
 ;
"RTN","IBCNEPM1",104,0)
 ; get confirmation
"RTN","IBCNEPM1",105,0)
 S DIR(0)="YO"
"RTN","IBCNEPM1",106,0)
 S DIR("A")="OK to proceed"
"RTN","IBCNEPM1",107,0)
 S DIR("A",1)="You have selected "_PMCNT_" insurance compan"_$S(PMCNT=1:"y",1:"ies")
"RTN","IBCNEPM1",108,0)
 S DIR("A",2)="to be linked to payer "_TPAYER_"."
"RTN","IBCNEPM1",109,0)
 S DIR("B")="YES"
"RTN","IBCNEPM1",110,0)
 W ! D ^DIR K DIR
"RTN","IBCNEPM1",111,0)
 I 'Y!$D(DIRUT) G LINKX
"RTN","IBCNEPM1",112,0)
 ;
"RTN","IBCNEPM1",113,0)
 ; At this point, confirmation has been received.   Go ahead and do all the links!
"RTN","IBCNEPM1",114,0)
 ;
"RTN","IBCNEPM1",115,0)
 F PMSUB=0:1 Q:'$D(PMLST(PMSUB))  F PMPCE=1:1 S PMSEL=$P(PMLST(PMSUB),",",PMPCE) Q:PMSEL=""  D
"RTN","IBCNEPM1",116,0)
 . ; this is the loop that makes all the links
"RTN","IBCNEPM1",117,0)
 . ; with all of the selected insurance companies
"RTN","IBCNEPM1",118,0)
 . S LINKDATA=$G(^TMP("IBCNEPM",$J,"LINK",+PMSEL))
"RTN","IBCNEPM1",119,0)
 . I LINKDATA="" Q
"RTN","IBCNEPM1",120,0)
 . S PIEN=+$P(LINKDATA,U,1)
"RTN","IBCNEPM1",121,0)
 . S TPAYER=$P($G(^IBE(365.12,PIEN,0)),U,1)
"RTN","IBCNEPM1",122,0)
 . S INS=+$P(LINKDATA,U,2)
"RTN","IBCNEPM1",123,0)
 . ;
"RTN","IBCNEPM1",124,0)
 . ; Make the linkage
"RTN","IBCNEPM1",125,0)
 . S DA=INS,DIE=36,DR="3.1////"_PIEN D ^DIE
"RTN","IBCNEPM1",126,0)
 . ;
"RTN","IBCNEPM1",127,0)
 . ; update the scratch global by removing this insurance company
"RTN","IBCNEPM1",128,0)
 . KILL ^TMP("IBCNEPM",$J,"PYR",$P(LINKDATA,U,3),PIEN,INS)
"RTN","IBCNEPM1",129,0)
 . S ^TMP("IBCNEPM",$J,"PYR",$P(LINKDATA,U,3),PIEN)=$G(^TMP("IBCNEPM",$J,"PYR",$P(LINKDATA,U,3),PIEN))-1
"RTN","IBCNEPM1",130,0)
 . KILL ^TMP("IBCNEPM",$J,"INS",INS,PIEN)
"RTN","IBCNEPM1",131,0)
 . ;
"RTN","IBCNEPM1",132,0)
 . ; search scratch global for remaining pointers to this ins. company
"RTN","IBCNEPM1",133,0)
 . S PIEN="" F  S PIEN=$O(^TMP("IBCNEPM",$J,"INS",INS,PIEN)) Q:'PIEN  D
"RTN","IBCNEPM1",134,0)
 .. S TPAYER=$G(^TMP("IBCNEPM",$J,"INS",INS,PIEN))
"RTN","IBCNEPM1",135,0)
 .. Q:TPAYER=""
"RTN","IBCNEPM1",136,0)
 .. KILL ^TMP("IBCNEPM",$J,"PYR",TPAYER,PIEN,INS)
"RTN","IBCNEPM1",137,0)
 .. S ^TMP("IBCNEPM",$J,"PYR",TPAYER,PIEN)=$G(^TMP("IBCNEPM",$J,"PYR",TPAYER,PIEN))-1
"RTN","IBCNEPM1",138,0)
 .. KILL ^TMP("IBCNEPM",$J,"INS",INS,PIEN)
"RTN","IBCNEPM1",139,0)
 .. Q
"RTN","IBCNEPM1",140,0)
 . Q
"RTN","IBCNEPM1",141,0)
 ;
"RTN","IBCNEPM1",142,0)
 ; rebuild the LINK area and the ListMan display global
"RTN","IBCNEPM1",143,0)
 D INIT
"RTN","IBCNEPM1",144,0)
 ;
"RTN","IBCNEPM1",145,0)
 ; user message
"RTN","IBCNEPM1",146,0)
 W !!?5,"Link process is complete."
"RTN","IBCNEPM1",147,0)
 W !?5,"You may view/edit this relationship by using the"
"RTN","IBCNEPM1",148,0)
 W !?5,"Insurance Company Entry/Edit option."
"RTN","IBCNEPM1",149,0)
 D PAUSE^VALM1
"RTN","IBCNEPM1",150,0)
LINKX ;
"RTN","IBCNEPM1",151,0)
 S VALMBCK="R"
"RTN","IBCNEPM1",152,0)
 ;
"RTN","IBCNEPM1",153,0)
 ; if there are no more insurance companies for this payer, then quit this 2nd list
"RTN","IBCNEPM1",154,0)
 ; and set a special variable that will rebuild the main, first list
"RTN","IBCNEPM1",155,0)
 I '$D(^TMP("IBCNEPM",$J,"LINK")) K VALMSG S VALMBCK="Q",IBCNEPRB=1
"RTN","IBCNEPM1",156,0)
 Q
"RTN","IBCNEPM1",157,0)
 ;
"RTN","IBCNEPY")
0^10^B17186468^B21965484
"RTN","IBCNEPY",1,0)
IBCNEPY ;DAOU/BHS - eIV PAYER EDIT OPTION ;28-JUN-2002
"RTN","IBCNEPY",2,0)
 ;;2.0;INTEGRATED BILLING;**184,416**;21-MAR-94;Build 58
"RTN","IBCNEPY",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEPY",4,0)
 ;
"RTN","IBCNEPY",5,0)
 ; Call only from a tag
"RTN","IBCNEPY",6,0)
 Q
"RTN","IBCNEPY",7,0)
 ;
"RTN","IBCNEPY",8,0)
EN ; Main entry point
"RTN","IBCNEPY",9,0)
 ; Input:  n/a
"RTN","IBCNEPY",10,0)
 ; Output: Modifies entries in the Payer File (#365.12)
"RTN","IBCNEPY",11,0)
 ;
"RTN","IBCNEPY",12,0)
 ; Initialize variables
"RTN","IBCNEPY",13,0)
 NEW PYRIEN
"RTN","IBCNEPY",14,0)
 ;
"RTN","IBCNEPY",15,0)
 D CLRSCRN
"RTN","IBCNEPY",16,0)
 F  S PYRIEN=$$PAYER() Q:'PYRIEN  D EDIT(PYRIEN)
"RTN","IBCNEPY",17,0)
 ;
"RTN","IBCNEPY",18,0)
ENX ; EN exit point
"RTN","IBCNEPY",19,0)
 Q
"RTN","IBCNEPY",20,0)
 ;
"RTN","IBCNEPY",21,0)
 ;
"RTN","IBCNEPY",22,0)
CLRSCRN ;
"RTN","IBCNEPY",23,0)
 W @IOF
"RTN","IBCNEPY",24,0)
 W !?35,"Payer Edit"
"RTN","IBCNEPY",25,0)
 W !!?1,"This option allows you to view the data in the Payer file for a particular"
"RTN","IBCNEPY",26,0)
 W !?1,"Payer.  You may only edit local flags.  Most of the fields in the Payer file"
"RTN","IBCNEPY",27,0)
 W !?1,"are not editable.  This data comes into VistA electronically.  If an"
"RTN","IBCNEPY",28,0)
 W !?1,"application has been deactivated, the local flag cannot be edited."
"RTN","IBCNEPY",29,0)
 Q
"RTN","IBCNEPY",30,0)
 ;
"RTN","IBCNEPY",31,0)
 ;
"RTN","IBCNEPY",32,0)
EDIT(IEN) ; Modify Payer application settings
"RTN","IBCNEPY",33,0)
 ; Input:  IEN - key to Payer File (#365.12)
"RTN","IBCNEPY",34,0)
 ; Output: Modifies entries in the Payer File
"RTN","IBCNEPY",35,0)
 ;
"RTN","IBCNEPY",36,0)
 ; Initialize variables
"RTN","IBCNEPY",37,0)
 NEW IBDATA,LN,APPIEN
"RTN","IBCNEPY",38,0)
 ;
"RTN","IBCNEPY",39,0)
 S LN=26
"RTN","IBCNEPY",40,0)
 ; Display non-editable fields:
"RTN","IBCNEPY",41,0)
 ;  Payer Name, VA National ID, CMS National ID, Date/Time Created,
"RTN","IBCNEPY",42,0)
 ;  EDI ID Number - Prof., EDI ID Number - Inst.
"RTN","IBCNEPY",43,0)
 S IBDATA=$G(^IBE(365.12,+IEN,0))
"RTN","IBCNEPY",44,0)
 ;
"RTN","IBCNEPY",45,0)
 D CLRSCRN
"RTN","IBCNEPY",46,0)
 W !!,$$FO^IBCNEUT1("Payer Name: ",LN,"R"),$P(IBDATA,U,1)
"RTN","IBCNEPY",47,0)
 W !,$$FO^IBCNEUT1("VA National ID: ",LN,"R"),$P(IBDATA,U,2)
"RTN","IBCNEPY",48,0)
 W !,$$FO^IBCNEUT1("CMS National ID: ",LN,"R"),$P(IBDATA,U,3)
"RTN","IBCNEPY",49,0)
 W !,$$FO^IBCNEUT1("Inst Electronic Bill ID: ",LN,"R"),$P(IBDATA,U,6)
"RTN","IBCNEPY",50,0)
 W !,$$FO^IBCNEUT1("Prof Electronic Bill ID: ",LN,"R"),$P(IBDATA,U,5)
"RTN","IBCNEPY",51,0)
 W !,$$FO^IBCNEUT1("Date/Time Created: ",LN,"R"),$$FMTE^XLFDT($P(IBDATA,U,4),"5Z")
"RTN","IBCNEPY",52,0)
 ;
"RTN","IBCNEPY",53,0)
 ; Edit only the eIV payer application - IB*2*416
"RTN","IBCNEPY",54,0)
 S APPIEN=+$$PYRAPP^IBCNEUT5("IIV",+IEN)        ; eIV payer app is still called "IIV"
"RTN","IBCNEPY",55,0)
 I 'APPIEN D  Q
"RTN","IBCNEPY",56,0)
 . W !!,"There is no eIV payer application defined for this Payer."
"RTN","IBCNEPY",57,0)
 . W ! S DIR(0)="E" D ^DIR K DIR W !
"RTN","IBCNEPY",58,0)
 . Q
"RTN","IBCNEPY",59,0)
 ;
"RTN","IBCNEPY",60,0)
 D APPEDIT(+IEN,+APPIEN)       ; +APPIEN is always the eIV payer application
"RTN","IBCNEPY",61,0)
 Q
"RTN","IBCNEPY",62,0)
 ;
"RTN","IBCNEPY",63,0)
APPEDIT(PIEN,AIEN) ; Modify eIV Payer application settings
"RTN","IBCNEPY",64,0)
 ; Input:  PIEN - key to Payer File (#365.12),
"RTN","IBCNEPY",65,0)
 ;         AIEN - key to Payer Application File (#365.13) - eIV payer application
"RTN","IBCNEPY",66,0)
 ; Output: Modifies entries in the Payer File
"RTN","IBCNEPY",67,0)
 ;
"RTN","IBCNEPY",68,0)
 ; Initialize variables
"RTN","IBCNEPY",69,0)
 NEW IBNODE,LN,FDA,DR,DA,DTOUT,DIE,DIRUT,DIR,X,Y
"RTN","IBCNEPY",70,0)
 ;
"RTN","IBCNEPY",71,0)
 ; Determine if the application is already defined for the Payer
"RTN","IBCNEPY",72,0)
 S LN=35
"RTN","IBCNEPY",73,0)
 S IBNODE=$G(^IBE(365.12,+PIEN,1,+AIEN,0))
"RTN","IBCNEPY",74,0)
 W !
"RTN","IBCNEPY",75,0)
 ;
"RTN","IBCNEPY",76,0)
 I IBNODE="" W !,"eIV Payer Application not found - ERROR!" S DIR(0)="E" D ^DIR K DIR G APPEDX
"RTN","IBCNEPY",77,0)
 ;
"RTN","IBCNEPY",78,0)
 ; Display non-editable fields:
"RTN","IBCNEPY",79,0)
 W !,$$FO^IBCNEUT1("Payer Application: ",LN,"R"),"eIV"
"RTN","IBCNEPY",80,0)
 W !,$$FO^IBCNEUT1("National Active: ",LN,"R"),$S(+$P(IBNODE,U,2):"Active",1:"Not Active")
"RTN","IBCNEPY",81,0)
 W !,$$FO^IBCNEUT1("Future Service Days: ",LN,"R"),$P(IBNODE,U,14)
"RTN","IBCNEPY",82,0)
 W !,$$FO^IBCNEUT1("Past Service Days: ",LN,"R"),$P(IBNODE,U,15)
"RTN","IBCNEPY",83,0)
 W !,$$FO^IBCNEUT1("Auto-update Pt. Insurance: ",LN,"R"),$S(+$P(IBNODE,U,7):"YES",1:"NO")
"RTN","IBCNEPY",84,0)
 ; Display deactivation info only when it exists
"RTN","IBCNEPY",85,0)
 I +$P(IBNODE,U,11) D  G APPEDX
"RTN","IBCNEPY",86,0)
 . W !,$$FO^IBCNEUT1("Deactivated: ",LN,"R"),$S(+$P(IBNODE,U,11):"YES",1:"NO")
"RTN","IBCNEPY",87,0)
 . W !,$$FO^IBCNEUT1("Deactivation Date/Time: ",LN,"R"),$S(+$P(IBNODE,U,12):$$FMTE^XLFDT($P(IBNODE,U,12),"5Z"),1:"")
"RTN","IBCNEPY",88,0)
 . ; Local Active is non-editable if application is deactivated
"RTN","IBCNEPY",89,0)
 . W !,$$FO^IBCNEUT1("Local Active: ",LN,"R"),$S(+$P(IBNODE,U,3):"Active",1:"Not Active")
"RTN","IBCNEPY",90,0)
 ;
"RTN","IBCNEPY",91,0)
 ; Allow user to edit Local Active flag
"RTN","IBCNEPY",92,0)
 ; Also file the user who edited this local flag and the date/time
"RTN","IBCNEPY",93,0)
 S DR=".03                     Local Active;.04////"_$G(DUZ)_";.05////"_$$NOW^XLFDT
"RTN","IBCNEPY",94,0)
 S DIE="^IBE(365.12,"_+PIEN_",1,"
"RTN","IBCNEPY",95,0)
 S DA=+AIEN,DA(1)=+PIEN
"RTN","IBCNEPY",96,0)
 D ^DIE
"RTN","IBCNEPY",97,0)
 ;
"RTN","IBCNEPY",98,0)
APPEDX Q
"RTN","IBCNEPY",99,0)
 ;
"RTN","IBCNEPY",100,0)
PAYER() ; Select Payer - File #365.12
"RTN","IBCNEPY",101,0)
 ; Init vars
"RTN","IBCNEPY",102,0)
 NEW DIC,DTOUT,DUOUT,X,Y
"RTN","IBCNEPY",103,0)
 ;
"RTN","IBCNEPY",104,0)
 W !!!
"RTN","IBCNEPY",105,0)
 S DIC(0)="ABEQ"
"RTN","IBCNEPY",106,0)
 S DIC("A")=$$FO^IBCNEUT1("Payer Name: ",15,"R")
"RTN","IBCNEPY",107,0)
 ; Do not allow editing of '~NO PAYER' entry
"RTN","IBCNEPY",108,0)
 S DIC("S")="I $P(^(0),U,1)'=""~NO PAYER"""
"RTN","IBCNEPY",109,0)
 S DIC="^IBE(365.12,"
"RTN","IBCNEPY",110,0)
 D ^DIC
"RTN","IBCNEPY",111,0)
 I $D(DUOUT)!$D(DTOUT)!(Y<1) S Y=""
"RTN","IBCNEPY",112,0)
 ;
"RTN","IBCNEPY",113,0)
 Q $P(Y,U,1)
"RTN","IBCNEPY",114,0)
 ;
"RTN","IBCNEQU")
0^4^B82573317^B85417611
"RTN","IBCNEQU",1,0)
IBCNEQU ;DAOU/BHS - eIV REQUEST ELECTRONIC INSURANCE INQUIRY ;24-JUN-2002
"RTN","IBCNEQU",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416**;21-MAR-94;Build 58
"RTN","IBCNEQU",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEQU",4,0)
 ;
"RTN","IBCNEQU",5,0)
 ; eIV - Insurance Verification Interface
"RTN","IBCNEQU",6,0)
 ;
"RTN","IBCNEQU",7,0)
 ; Must call from EN
"RTN","IBCNEQU",8,0)
 Q
"RTN","IBCNEQU",9,0)
 ;
"RTN","IBCNEQU",10,0)
EN ; Entry pt
"RTN","IBCNEQU",11,0)
 ; Init vars
"RTN","IBCNEQU",12,0)
 N DFN,X,POP,IBFASTXT,VALMCNT,VALMBG,VALMHDR,VALMBCK,IDUZ
"RTN","IBCNEQU",13,0)
 ;
"RTN","IBCNEQU",14,0)
EN1 I $G(IBFASTXT) G ENX
"RTN","IBCNEQU",15,0)
 S DFN=$$PAT I 'DFN G ENX
"RTN","IBCNEQU",16,0)
 D EN^VALM("IBCNE REQUEST INS INQUIRY LIST")
"RTN","IBCNEQU",17,0)
 G EN1
"RTN","IBCNEQU",18,0)
 ;
"RTN","IBCNEQU",19,0)
ENX ; EN exit pt
"RTN","IBCNEQU",20,0)
 Q
"RTN","IBCNEQU",21,0)
 ;
"RTN","IBCNEQU",22,0)
INIT ; -- set up initial variables
"RTN","IBCNEQU",23,0)
 S VALMCNT=0,VALMBG=1,IDUZ=DUZ
"RTN","IBCNEQU",24,0)
 K ^TMP("IBCNEQU",$J),^TMP("IBCNEQUX",$J)
"RTN","IBCNEQU",25,0)
 D HDR
"RTN","IBCNEQU",26,0)
 D BLD(DFN)
"RTN","IBCNEQU",27,0)
 ;
"RTN","IBCNEQU",28,0)
INITX ; INIT exit pt
"RTN","IBCNEQU",29,0)
 Q
"RTN","IBCNEQU",30,0)
 ;
"RTN","IBCNEQU",31,0)
HDR ; -- screen header for initial screen
"RTN","IBCNEQU",32,0)
 N VA,VAERR,%DT,II
"RTN","IBCNEQU",33,0)
 D PID^VADPT
"RTN","IBCNEQU",34,0)
 S VALMHDR(1)="Request Electronic Insurance Inquiry for Patient: "_$E($P($G(^DPT(DFN,0)),U),1,20)_" "_$E($G(^(0)),1)_VA("BID")
"RTN","IBCNEQU",35,0)
 S VALMHDR(2)=" "
"RTN","IBCNEQU",36,0)
 S VALMHDR(3)=" "
"RTN","IBCNEQU",37,0)
 S II=1
"RTN","IBCNEQU",38,0)
 I +$$BUFFER^IBCNBU1(DFN) S II=II+1,VALMHDR(II)="*** Patient has Insurance Buffer Records"
"RTN","IBCNEQU",39,0)
 I $P($G(^DPT(DFN,.35)),U)'="" S II=II+1,VALMHDR(II)="*** Date of Death: "_$$FMTE^XLFDT($P($G(^DPT(DFN,.35)),U)\1,"5Z")
"RTN","IBCNEQU",40,0)
 Q
"RTN","IBCNEQU",41,0)
 ;
"RTN","IBCNEQU",42,0)
HELP ; -- help code
"RTN","IBCNEQU",43,0)
 D FULL^VALM1
"RTN","IBCNEQU",44,0)
 W @IOF
"RTN","IBCNEQU",45,0)
 W !,"This screen lists all eligible (non-Medicaid) Insurance policies"
"RTN","IBCNEQU",46,0)
 W !,"for the patient.  Selecting an entry in this list creates an Insurance Buffer"
"RTN","IBCNEQU",47,0)
 W !,"entry with Source 'eIV' and Override Freshness Flag 'Yes'.  Setting this flag"
"RTN","IBCNEQU",48,0)
 W !,"is designed to force the eIV extract to attempt to create an insurance"
"RTN","IBCNEQU",49,0)
 W !,"inquiry based on this entry."
"RTN","IBCNEQU",50,0)
 W !!,"Entries with an asterisk (*) preceding the Insurance Co name already exist in"
"RTN","IBCNEQU",51,0)
 W !,"the Insurance Buffer with the exact same name, the exact same Group Number,"
"RTN","IBCNEQU",52,0)
 W !,"and the Override Freshness Flag set to 'Yes'.  Selecting an entry with an"
"RTN","IBCNEQU",53,0)
 W !,"asterisk (*) will create a duplicate entry in the Insurance Buffer file for"
"RTN","IBCNEQU",54,0)
 W !,"the patient."
"RTN","IBCNEQU",55,0)
 D PAUSE^VALM1
"RTN","IBCNEQU",56,0)
 S VALMBCK="R"
"RTN","IBCNEQU",57,0)
 Q
"RTN","IBCNEQU",58,0)
 ;
"RTN","IBCNEQU",59,0)
EXIT ; -- exit code
"RTN","IBCNEQU",60,0)
 K ^TMP("IBCNEQU",$J),^TMP("IBCNEQUX",$J)
"RTN","IBCNEQU",61,0)
 Q
"RTN","IBCNEQU",62,0)
 ;
"RTN","IBCNEQU",63,0)
PAT() ; Prompt user to select a patient
"RTN","IBCNEQU",64,0)
 ; Init vars
"RTN","IBCNEQU",65,0)
 N DIC,X,Y,DISYS,%H,%I,DUOUT,DTOUT
"RTN","IBCNEQU",66,0)
 ;
"RTN","IBCNEQU",67,0)
 W !
"RTN","IBCNEQU",68,0)
 ; Exclude non-Veterans
"RTN","IBCNEQU",69,0)
 S DIC(0)="AEQMN"
"RTN","IBCNEQU",70,0)
 S DIC("S")="I $G(^(""VET""))=""Y"",('$P($G(^(0)),U,21))",DIC="^DPT("
"RTN","IBCNEQU",71,0)
 D ^DIC
"RTN","IBCNEQU",72,0)
 I $D(DUOUT)!$D(DTOUT)!(Y<1) Q ""
"RTN","IBCNEQU",73,0)
 ;
"RTN","IBCNEQU",74,0)
 Q +Y
"RTN","IBCNEQU",75,0)
 ;
"RTN","IBCNEQU",76,0)
BLD(DFN) ; Build list of all insurance for patient
"RTN","IBCNEQU",77,0)
 N IBCT,IBINS,IBDATA0,IBDATA1,IBDATA2,II,STR,IBINSIEN,IBINAME,IBHOLD
"RTN","IBCNEQU",78,0)
 N VNODT,X,POP,IBBUF,IBBUFNM,IBIEN,IBBUFDT,TMPNM,GRPNUM,SFANAME
"RTN","IBCNEQU",79,0)
 ;
"RTN","IBCNEQU",80,0)
 K ^TMP("IBCNEQU",$J),^TMP("IBCNEQUX",$J)
"RTN","IBCNEQU",81,0)
 ;
"RTN","IBCNEQU",82,0)
 S (IBCT,VALMCNT)=0
"RTN","IBCNEQU",83,0)
 ;
"RTN","IBCNEQU",84,0)
 ; Determine if buffer entries exist for this DFN and build array by name
"RTN","IBCNEQU",85,0)
 S IBIEN=0
"RTN","IBCNEQU",86,0)
 F  S IBIEN=$O(^IBA(355.33,"C",DFN,IBIEN)) Q:'IBIEN  D
"RTN","IBCNEQU",87,0)
 . S IBBUFDT=$G(^IBA(355.33,IBIEN,0))
"RTN","IBCNEQU",88,0)
 . ; Include E status and those with Override Freshness Flags = 1
"RTN","IBCNEQU",89,0)
 . I $P(IBBUFDT,U,4)'="E"!('$P(IBBUFDT,U,13)) Q
"RTN","IBCNEQU",90,0)
 . S IBBUFNM=$$TRIM^XLFSTR($P($G(^IBA(355.33,IBIEN,20)),U))
"RTN","IBCNEQU",91,0)
 . I IBBUFNM="" Q
"RTN","IBCNEQU",92,0)
 . S GRPNUM=$$TRIM^XLFSTR($P($G(^IBA(355.33,IBIEN,40)),U,3))
"RTN","IBCNEQU",93,0)
 . S IBBUF(IBBUFNM," "_GRPNUM)=""
"RTN","IBCNEQU",94,0)
 . Q
"RTN","IBCNEQU",95,0)
 ;
"RTN","IBCNEQU",96,0)
 ; Populate IBINS array with Patient Insurance records
"RTN","IBCNEQU",97,0)
 D ALL^IBCNS1(DFN,"IBINS")
"RTN","IBCNEQU",98,0)
 I $G(IBINS(0)) S II=0 F  S II=$O(IBINS(II)) Q:'II  D
"RTN","IBCNEQU",99,0)
 . S IBDATA0=$G(IBINS(II,0))
"RTN","IBCNEQU",100,0)
 . S IBDATA1=$G(IBINS(II,1))
"RTN","IBCNEQU",101,0)
 . S IBDATA2=$G(^IBA(355.3,+$P(IBDATA0,U,18),0))
"RTN","IBCNEQU",102,0)
 . S GRPNUM=$$TRIM^XLFSTR($P(IBDATA2,U,4))
"RTN","IBCNEQU",103,0)
 . S IBINSIEN=+$P(IBDATA0,U)
"RTN","IBCNEQU",104,0)
 . Q:'IBINSIEN!'$D(^DIC(36,IBINSIEN,0))
"RTN","IBCNEQU",105,0)
 . S IBINAME=$P($G(^DIC(36,IBINSIEN,0)),U)
"RTN","IBCNEQU",106,0)
 . S TMPNM=$$TRIM^XLFSTR(IBINAME)
"RTN","IBCNEQU",107,0)
 . ; Filter Ins Co's by name - currently filter Medicaid
"RTN","IBCNEQU",108,0)
 . I $$EXCLUDE^IBCNEUT4(TMPNM) Q
"RTN","IBCNEQU",109,0)
 . S IBCT=IBCT+1
"RTN","IBCNEQU",110,0)
 . S STR=""
"RTN","IBCNEQU",111,0)
 . S STR=$$SETFLD^VALM1(IBCT,STR,"NUMBER")
"RTN","IBCNEQU",112,0)
 . ; Update IBINAME if found in buffer already
"RTN","IBCNEQU",113,0)
 . S IBINAME=$S($D(IBBUF(TMPNM," "_GRPNUM)):"*",1:"")_IBINAME
"RTN","IBCNEQU",114,0)
 . S STR=$$SETFLD^VALM1(IBINAME,STR,"NAME")
"RTN","IBCNEQU",115,0)
 . S STR=$$SETFLD^VALM1($E($P(IBDATA0,U,2),1,14),STR,"POLICY")
"RTN","IBCNEQU",116,0)
 . S IBHOLD=$P(IBDATA0,U,6),STR=$$SETFLD^VALM1($S(IBHOLD="v":"SELF",IBHOLD="s":"SPOUSE",IBHOLD="o":"OTHER",1:"UNKNOWN"),STR,"HOLDER")
"RTN","IBCNEQU",117,0)
 . S STR=$$SETFLD^VALM1($E($$GRP^IBCNS($P(IBDATA0,U,18)),1,10),STR,"GROUP")
"RTN","IBCNEQU",118,0)
 . S STR=$$SETFLD^VALM1($$FMTE^XLFDT($P(IBDATA0,U,8),"5Z"),STR,"EFFDT")
"RTN","IBCNEQU",119,0)
 . S STR=$$SETFLD^VALM1($$FMTE^XLFDT($P(IBDATA0,U,4),"5Z"),STR,"EXPIRE")
"RTN","IBCNEQU",120,0)
 . S STR=$$SETFLD^VALM1($E($P($G(^IBE(355.1,+$P(IBDATA2,U,9),0)),U),1,8),STR,"TYPE")
"RTN","IBCNEQU",121,0)
 . S STR=$$SETFLD^VALM1($P($G(^IBE(355.1,+$P(IBDATA2,U,9),0)),U),STR,"TYPEPOL")
"RTN","IBCNEQU",122,0)
 . S STR=$$SETFLD^VALM1($E($P($G(^VA(200,+$P(IBDATA1,U,4),0)),U),1,15),STR,"VERIFIED BY")
"RTN","IBCNEQU",123,0)
 . S STR=$$SETFLD^VALM1($$FMTE^XLFDT($P(IBDATA1,U,3),"5Z"),STR,"VERIFIED ON")
"RTN","IBCNEQU",124,0)
 . S STR=$$SETFLD^VALM1($$YN($P(IBDATA2,U,6)),STR,"PRECERT")
"RTN","IBCNEQU",125,0)
 . S STR=$$SETFLD^VALM1($$YN($P(IBDATA2,U,5)),STR,"UR")
"RTN","IBCNEQU",126,0)
 . S STR=$$SETFLD^VALM1($$YN($P(IBDATA0,U,20)),STR,"COB")
"RTN","IBCNEQU",127,0)
 . D SET(STR)
"RTN","IBCNEQU",128,0)
 . Q
"RTN","IBCNEQU",129,0)
 ;
"RTN","IBCNEQU",130,0)
 I 'IBCT D
"RTN","IBCNEQU",131,0)
 . S VALMCNT=VALMCNT+1
"RTN","IBCNEQU",132,0)
 . S ^TMP("IBCNEQU",$J,VALMCNT,0)=" "
"RTN","IBCNEQU",133,0)
 . S VALMCNT=VALMCNT+1
"RTN","IBCNEQU",134,0)
 . S ^TMP("IBCNEQU",$J,VALMCNT,0)="      No eligible insurance policies found."
"RTN","IBCNEQU",135,0)
 . Q
"RTN","IBCNEQU",136,0)
 ;
"RTN","IBCNEQU",137,0)
 S VNODT=$P($G(^IBA(354,DFN,60)),U,1) I VNODT D
"RTN","IBCNEQU",138,0)
 . S VALMCNT=VALMCNT+1
"RTN","IBCNEQU",139,0)
 . S ^TMP("IBCNEQU",$J,VALMCNT,0)=" "
"RTN","IBCNEQU",140,0)
 . S VALMCNT=VALMCNT+1
"RTN","IBCNEQU",141,0)
 . S ^TMP("IBCNEQU",$J,VALMCNT,0)="      Verification of No Coverage "_$$FMTE^XLFDT(VNODT,"5Z")_"."
"RTN","IBCNEQU",142,0)
 . Q
"RTN","IBCNEQU",143,0)
 ;
"RTN","IBCNEQU",144,0)
BLDX ; BLD exit pt
"RTN","IBCNEQU",145,0)
 Q
"RTN","IBCNEQU",146,0)
 ;
"RTN","IBCNEQU",147,0)
SET(LINE) ; -- set arrays
"RTN","IBCNEQU",148,0)
 ; LINE - line of text to display
"RTN","IBCNEQU",149,0)
 S VALMCNT=VALMCNT+1
"RTN","IBCNEQU",150,0)
 S ^TMP("IBCNEQU",$J,VALMCNT,0)=LINE
"RTN","IBCNEQU",151,0)
 S ^TMP("IBCNEQU",$J,"IDX",VALMCNT,IBCT)=""
"RTN","IBCNEQU",152,0)
 S ^TMP("IBCNEQUX",$J,IBCT)=VALMCNT_U_DFN_U_II_U_IBINAME_U_IBDATA0
"RTN","IBCNEQU",153,0)
 S ^TMP("IBCNEQUX",$J)=$G(^TMP("IBCNEQUX",$J))+1
"RTN","IBCNEQU",154,0)
 Q
"RTN","IBCNEQU",155,0)
 ;
"RTN","IBCNEQU",156,0)
YN(X) ; -- convert 1 or 0 to yes/no/unknown
"RTN","IBCNEQU",157,0)
 Q $S(X=0:"NO",X=1:"YES",1:"UNK")
"RTN","IBCNEQU",158,0)
 ;
"RTN","IBCNEQU",159,0)
SELECT ; User selects insurance from list to be reconfirmed
"RTN","IBCNEQU",160,0)
 N IBDATA,IBDPT,IBDA,DIR,X,Y,D0,DG,DIC,DISYS,DIW,IENS,IBERROR,IBIEN,IBSYM
"RTN","IBCNEQU",161,0)
 ;
"RTN","IBCNEQU",162,0)
 D FULL^VALM1
"RTN","IBCNEQU",163,0)
 S VALMBCK="R"
"RTN","IBCNEQU",164,0)
 ;
"RTN","IBCNEQU",165,0)
 I '$O(^TMP("IBCNEQUX",$J,0)) D  G SELECTX
"RTN","IBCNEQU",166,0)
 . W !!,"No Insurance policies to select."
"RTN","IBCNEQU",167,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEQU",168,0)
 . Q
"RTN","IBCNEQU",169,0)
 ;
"RTN","IBCNEQU",170,0)
 S (IBDPT,IBDA,IBERROR)=""
"RTN","IBCNEQU",171,0)
 S IBDATA=$$SEL
"RTN","IBCNEQU",172,0)
 S IBDPT=+$P(IBDATA,U)       ; Patient DFN
"RTN","IBCNEQU",173,0)
 S IBDA=+$P(IBDATA,U,2)      ; 2.312 ptr
"RTN","IBCNEQU",174,0)
 I +IBDPT,+IBDA D
"RTN","IBCNEQU",175,0)
 . S IBIEN=+$P(IBDATA,U,4)     ; Ins Co IEN (#36)
"RTN","IBCNEQU",176,0)
 . S IBSYM=+$$INSERROR^IBCNEUT3("I",IBIEN)
"RTN","IBCNEQU",177,0)
 . D PT^IBCNEBF(IBDPT,IBDA,IBSYM,1,1,.IBERROR)
"RTN","IBCNEQU",178,0)
 . ; Check for errors
"RTN","IBCNEQU",179,0)
 . I $G(IBERROR)'="" W !!,"Insurance Buffer entry could not be created due to error!  Please try again.",!
"RTN","IBCNEQU",180,0)
 . I $G(IBERROR)="" W !!,"Insurance Buffer entry created!",!
"RTN","IBCNEQU",181,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEQU",182,0)
 ;
"RTN","IBCNEQU",183,0)
 I $P(IBDATA,U,3)="~NO PAYER" D
"RTN","IBCNEQU",184,0)
 . W !!,"Payer missing. Identification inquiries not allowed."    ; IB*2*416
"RTN","IBCNEQU",185,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEQU",186,0)
 . Q
"RTN","IBCNEQU",187,0)
 ;
"RTN","IBCNEQU",188,0)
SELECTX ;
"RTN","IBCNEQU",189,0)
 S VALMBCK="R"
"RTN","IBCNEQU",190,0)
 Q
"RTN","IBCNEQU",191,0)
 ;
"RTN","IBCNEQU",192,0)
SEL() ; User selects insurance from list
"RTN","IBCNEQU",193,0)
 N IBSELN,DIR,X,Y,DIRUT,DUOUT
"RTN","IBCNEQU",194,0)
 ;
"RTN","IBCNEQU",195,0)
 S IBSELN=""
"RTN","IBCNEQU",196,0)
 ; Select entry to reconfirm
"RTN","IBCNEQU",197,0)
 S DIR(0)="NO^1:"_$G(^TMP("IBCNEQUX",$J))_":0"
"RTN","IBCNEQU",198,0)
 S DIR("A")="Select entry to request electronic inquiry"
"RTN","IBCNEQU",199,0)
 S DIR("?",1)="  Select an entry to initiate an insurance inquiry."
"RTN","IBCNEQU",200,0)
 S DIR("?",2)="  If entry contains an Insurance Co name, an Insurance"
"RTN","IBCNEQU",201,0)
 S DIR("?",3)="  Buffer entry will be created for nightly batch extract."
"RTN","IBCNEQU",202,0)
 S DIR("?")="  "
"RTN","IBCNEQU",203,0)
 D ^DIR K DIR
"RTN","IBCNEQU",204,0)
 I $D(DIRUT)!$D(DUOUT)!(Y<1) G SELX
"RTN","IBCNEQU",205,0)
 S IBSELN=$O(^TMP("IBCNEQU",$J,"IDX",Y,0))
"RTN","IBCNEQU",206,0)
 I IBSELN S IBSELN=$P($G(^TMP("IBCNEQUX",$J,IBSELN)),U,2,99)
"RTN","IBCNEQU",207,0)
 I $E($P(IBSELN,U,3))="*" W !!,"Selecting this entry will create a duplicate entry in the Insurance Buffer."
"RTN","IBCNEQU",208,0)
 ;
"RTN","IBCNEQU",209,0)
 W !
"RTN","IBCNEQU",210,0)
 S DIR(0)="Y"
"RTN","IBCNEQU",211,0)
 S DIR("A")="Are you sure you want to request an insurance inquiry"
"RTN","IBCNEQU",212,0)
 S DIR("B")="NO"
"RTN","IBCNEQU",213,0)
 S DIR("?",1)="  If yes, a request will be created for the nightly batch."
"RTN","IBCNEQU",214,0)
 D ^DIR K DIR
"RTN","IBCNEQU",215,0)
 I $D(DIRUT)!$D(DUOUT)!('Y) S IBSELN=""
"RTN","IBCNEQU",216,0)
 ;
"RTN","IBCNEQU",217,0)
SELX Q IBSELN
"RTN","IBCNEQU",218,0)
 ;
"RTN","IBCNEQU",219,0)
FASTEXIT ; Sets flag to indicate a quick exit from the option
"RTN","IBCNEQU",220,0)
 N DIR,DIRUT,X,Y
"RTN","IBCNEQU",221,0)
 S VALMBCK="Q"
"RTN","IBCNEQU",222,0)
 D FULL^VALM1
"RTN","IBCNEQU",223,0)
 S DIR(0)="Y",DIR("A")="Exit option entirely",DIR("B")="NO"
"RTN","IBCNEQU",224,0)
 D ^DIR
"RTN","IBCNEQU",225,0)
 I +Y S IBFASTXT=1
"RTN","IBCNEQU",226,0)
 Q
"RTN","IBCNEQU",227,0)
 ;
"RTN","IBCNEQU",228,0)
ADD() ;
"RTN","IBCNEQU",229,0)
 NEW PAYER,TQIEN,OK,STR,SRVICEDT,FRESHDT,DATA1,DATA2,TQIEN,FRESHDAY
"RTN","IBCNEQU",230,0)
 I '$D(^IBCN(365.1,"E",DFN)) Q 0  ; Does this pt have a TQ entry?
"RTN","IBCNEQU",231,0)
 S (TQIEN,OK)=""
"RTN","IBCNEQU",232,0)
 S PAYER=$$FIND1^DIC(365.12,,"X","~NO PAYER") ; Get payer IEN
"RTN","IBCNEQU",233,0)
 F  S TQIEN=$O(^IBCN(365.1,"E",DFN,TQIEN)) Q:'TQIEN!OK  D
"RTN","IBCNEQU",234,0)
 . S STR=$G(^IBCN(365.1,TQIEN,0))
"RTN","IBCNEQU",235,0)
 . ; If "~NO PAYER" & Transmitted
"RTN","IBCNEQU",236,0)
 . I $P(STR,U,3)=PAYER,$P(STR,U,4)=2 S OK=1 Q
"RTN","IBCNEQU",237,0)
 . ; If "~NO PAYER" & Ready to Transmit & override flag
"RTN","IBCNEQU",238,0)
 . I $P(STR,U,3)=PAYER,($P(STR,U,4)=1),($P(STR,U,14)=1) S OK=1 Q
"RTN","IBCNEQU",239,0)
 I 'OK Q 0
"RTN","IBCNEQU",240,0)
 Q 1
"RTN","IBCNEQU",241,0)
 ;
"RTN","IBCNEQU",242,0)
BLKTQ ;  Create a ~NO PAYER request for 'Search for All'
"RTN","IBCNEQU",243,0)
 Q    ; no longer allowed  IB*2*416
"RTN","IBCNEQU",244,0)
 NEW PAYER,SRVICEDT,FRESHDT,DATA1,DATA2,TQIEN,FRESHDAY
"RTN","IBCNEQU",245,0)
 S PAYER=$$FIND1^DIC(365.12,,"X","~NO PAYER")
"RTN","IBCNEQU",246,0)
 D NPINIT ; Update service date and freshness
"RTN","IBCNEQU",247,0)
 ; Update service dates for inquiries to be transmitted
"RTN","IBCNEQU",248,0)
 S DATA1=DFN_U_PAYER_U_1_U_""_U_""_U_FRESHDT
"RTN","IBCNEQU",249,0)
 S DATA2=4_U_"I"_U_SRVICEDT
"RTN","IBCNEQU",250,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2,"",1)
"RTN","IBCNEQU",251,0)
 Q
"RTN","IBCNEQU",252,0)
 ;
"RTN","IBCNEQU",253,0)
BLKX Q
"RTN","IBCNEQU",254,0)
 ;
"RTN","IBCNEQU",255,0)
NPINIT ; Initialize variables for ~NO PAYER
"RTN","IBCNEQU",256,0)
 S SRVICEDT=DT
"RTN","IBCNEQU",257,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U)
"RTN","IBCNEQU",258,0)
 S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNEQU",259,0)
 ;
"RTN","IBCNEQU",260,0)
 ; Update service date and freshness date based on payer allowed
"RTN","IBCNEQU",261,0)
 Q
"RTN","IBCNERP0")
0^21^B5707694^B5712540
"RTN","IBCNERP0",1,0)
IBCNERP0 ;DAOU/BHS - IBCNE eIV STATISTICAL REPORT (cont'd) ;11-JUN-2002
"RTN","IBCNERP0",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416**;21-MAR-94;Build 58
"RTN","IBCNERP0",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERP0",4,0)
 ;
"RTN","IBCNERP0",5,0)
 ; eIV - Insurance Verification Interface
"RTN","IBCNERP0",6,0)
 ;
"RTN","IBCNERP0",7,0)
 ; PYR tag called by IBCNERP8
"RTN","IBCNERP0",8,0)
 ;
"RTN","IBCNERP0",9,0)
 ; Cannot be called from top of routine
"RTN","IBCNERP0",10,0)
 Q
"RTN","IBCNERP0",11,0)
 ;
"RTN","IBCNERP0",12,0)
PYR(RTN,BDT,EDT,TOT) ; Determine Incoming Data
"RTN","IBCNERP0",13,0)
 ; Input params: RTN-routine name for ^TMP($J), BDT-start dt/time,
"RTN","IBCNERP0",14,0)
 ;  EDT-end dt/time, **TOT-total records searched - used only for status
"RTN","IBCNERP0",15,0)
 ;  checks when the process is queued (passed by reference)
"RTN","IBCNERP0",16,0)
 ; Output vars: Set ^TMP($J,RTN,"PYR",PAYER NAME,IEN of file 365.12)=""
"RTN","IBCNERP0",17,0)
 N PIEN,PYR,CREATEDT,APPIEN,APPDATA
"RTN","IBCNERP0",18,0)
 ;S BDT=$P(BDT,"."),EDT=$P(EDT,".")
"RTN","IBCNERP0",19,0)
 S PIEN=0 F  S PIEN=$O(^IBE(365.12,PIEN)) Q:'PIEN  D
"RTN","IBCNERP0",20,0)
 . S TOT=TOT+1
"RTN","IBCNERP0",21,0)
 . S CREATEDT=$P($G(^IBE(365.12,PIEN,0)),U,4)
"RTN","IBCNERP0",22,0)
 . I CREATEDT=""!(CREATEDT<BDT)!(CREATEDT>EDT) Q
"RTN","IBCNERP0",23,0)
 . S PYR=$P($G(^IBE(365.12,PIEN,0)),U)
"RTN","IBCNERP0",24,0)
 . Q:PYR="~NO PAYER"       ; used internally only - not a real eIV payer
"RTN","IBCNERP0",25,0)
 . ;
"RTN","IBCNERP0",26,0)
 . ; Get Payer app multiple IEN
"RTN","IBCNERP0",27,0)
 . S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNERP0",28,0)
 . ; Must have eIV application
"RTN","IBCNERP0",29,0)
 . I 'APPIEN Q
"RTN","IBCNERP0",30,0)
 . S APPDATA=$G(^IBE(365.12,PIEN,1,APPIEN,0))
"RTN","IBCNERP0",31,0)
 . ; Must be Nationally Active
"RTN","IBCNERP0",32,0)
 . I '$P(APPDATA,U,2) Q
"RTN","IBCNERP0",33,0)
 . ;
"RTN","IBCNERP0",34,0)
 . S ^TMP($J,RTN,"PYR",PYR,PIEN)=""
"RTN","IBCNERP0",35,0)
 Q
"RTN","IBCNERP0",36,0)
 ;
"RTN","IBCNERP0",37,0)
HEADER(HDRDATA,PGC,PXT,MAX,CRT,SITE,DTMRNG,MM) ; Print header info for each pg
"RTN","IBCNERP0",38,0)
 ; Init vars
"RTN","IBCNERP0",39,0)
 N CT,HDRCT,LIN,HDR
"RTN","IBCNERP0",40,0)
 ;
"RTN","IBCNERP0",41,0)
 ; Prompt to print next page for reports to the screen
"RTN","IBCNERP0",42,0)
 I CRT,PGC>0,'$D(ZTQUEUED) D  I PXT G HEADERX
"RTN","IBCNERP0",43,0)
 . I MAX<51 F LIN=1:1:(MAX-$Y) W !
"RTN","IBCNERP0",44,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERP0",45,0)
 . I $D(DTOUT)!$D(DUOUT) S PXT=1 Q
"RTN","IBCNERP0",46,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD() S ZTSTOP=1 G HEADERX
"RTN","IBCNERP0",47,0)
 ;
"RTN","IBCNERP0",48,0)
 ; Update page ct
"RTN","IBCNERP0",49,0)
 S PGC=PGC+1
"RTN","IBCNERP0",50,0)
 ;
"RTN","IBCNERP0",51,0)
 ; Update header based on MailMan message flag
"RTN","IBCNERP0",52,0)
 S HDRCT=0
"RTN","IBCNERP0",53,0)
 S HDRCT=HDRCT+1,HDRDATA(HDRCT)="eIV Statistical Report"_$$FO^IBCNEUT1($$FMTE^XLFDT($$NOW^XLFDT,1)_"  Page: "_PGC,56,"R")
"RTN","IBCNERP0",54,0)
 ;S HDRDATA(HDRCT)=$$FO^IBCNEUT1(SITE,(80-$L(SITE)\2)+$L(SITE),"R"),HDRCT=HDRCT+1
"RTN","IBCNERP0",55,0)
 S HDR="Report Timeframe:"
"RTN","IBCNERP0",56,0)
 S HDRCT=HDRCT+1,HDRDATA(HDRCT)=$$FO^IBCNEUT1(HDR,80-$L(HDR)\2+$L(HDR),"R")
"RTN","IBCNERP0",57,0)
 S HDRCT=HDRCT+1,HDRDATA(HDRCT)=$$FO^IBCNEUT1(DTMRNG,(80-$L(DTMRNG)\2)+$L(DTMRNG),"R")
"RTN","IBCNERP0",58,0)
 ;
"RTN","IBCNERP0",59,0)
 I MM S HDRCT=HDRCT+1,HDRDATA(HDRCT)=""
"RTN","IBCNERP0",60,0)
 ; Only write out Header for non-MailMan message output
"RTN","IBCNERP0",61,0)
 I MM="" W @IOF F CT=1:1:HDRCT W !,?1,HDRDATA(CT)
"RTN","IBCNERP0",62,0)
 ;
"RTN","IBCNERP0",63,0)
HEADERX ; HEADER exit pt
"RTN","IBCNERP0",64,0)
 Q
"RTN","IBCNERP0",65,0)
 ;
"RTN","IBCNERP1")
0^22^B79692188^B76118662
"RTN","IBCNERP1",1,0)
IBCNERP1 ;DAOU/BHS - IBCNE USER IF eIV RESPONSE REPORT ;03-JUN-2002
"RTN","IBCNERP1",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416**;21-MAR-94;Build 58
"RTN","IBCNERP1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERP1",4,0)
 ;
"RTN","IBCNERP1",5,0)
 ; eIV - Insurance Verification Interface
"RTN","IBCNERP1",6,0)
 ;
"RTN","IBCNERP1",7,0)
 ; Input parameters: N/A
"RTN","IBCNERP1",8,0)
 ; Other relevant variables ZTSAVED for queueing:
"RTN","IBCNERP1",9,0)
 ;  IBCNERTN = "IBCNERP1" (current routine name for queueing the 
"RTN","IBCNERP1",10,0)
 ;   COMPILE process)
"RTN","IBCNERP1",11,0)
 ;  IBCNESPC("BEGDT")=start dt for rpt
"RTN","IBCNERP1",12,0)
 ;  IBCNESPC("ENDDT")=end dt for rpt
"RTN","IBCNERP1",13,0)
 ;  IBCNESPC("PYR")=payer ien (365.12) or "" for all payers
"RTN","IBCNERP1",14,0)
 ;  IBCNESPC("SORT")=1 (Payer name) OR 2 (Patient name)
"RTN","IBCNERP1",15,0)
 ;  IBCNESPC("PAT")=patient ien (2) or "" for all patients
"RTN","IBCNERP1",16,0)
 ;  IBCNESPC("TYPE")=A (All Responses) for date range OR M (Most Recent
"RTN","IBCNERP1",17,0)
 ;   Responses) for date range (by unique Payer/Pat pair)
"RTN","IBCNERP1",18,0)
 ;  IBCNESPC("TRCN")=Trace #^IEN, if non-null all other params are null
"RTN","IBCNERP1",19,0)
 ;  IBCNESPC("RFLAG")=Report Flag used to indicate which report is being
"RTN","IBCNERP1",20,0)
 ;   run.  Response Report (0), Inactive Report (1), or Ambiguous 
"RTN","IBCNERP1",21,0)
 ;   Report (2).
"RTN","IBCNERP1",22,0)
 ;  IBCNESPC("DTEXP")=Expiration date used in the inactive policy report
"RTN","IBCNERP1",23,0)
 ;
"RTN","IBCNERP1",24,0)
 ; Only call this routine at a tag
"RTN","IBCNERP1",25,0)
 Q
"RTN","IBCNERP1",26,0)
EN(IPRF) ; Main entry pt
"RTN","IBCNERP1",27,0)
 ; Init vars
"RTN","IBCNERP1",28,0)
 N STOP,IBCNERTN,POP,IBCNESPC
"RTN","IBCNERP1",29,0)
 S IBCNESPC("RFLAG")=$G(IPRF)
"RTN","IBCNERP1",30,0)
 ;
"RTN","IBCNERP1",31,0)
 S STOP=0
"RTN","IBCNERP1",32,0)
 S IBCNERTN="IBCNERP1"
"RTN","IBCNERP1",33,0)
 W @IOF
"RTN","IBCNERP1",34,0)
 W !,"eIV ",$S(IPRF=1:"Inactive Policy",IPRF=2:"Ambiguous Policy",1:"Response")," Report",!
"RTN","IBCNERP1",35,0)
 I $G(IPRF) D
"RTN","IBCNERP1",36,0)
 . W !,"Please select a date range to view ",$S(IPRF=1:"inactive",1:"ambiguous")," policy information that the eIV"
"RTN","IBCNERP1",37,0)
 . W !,"process turned up while attempting to discover previously unknown"
"RTN","IBCNERP1",38,0)
 . W !,"insurance policies. (Date range selection is based on the date that"
"RTN","IBCNERP1",39,0)
 . W !,"eIV receives the response from the payer.)"
"RTN","IBCNERP1",40,0)
 ;
"RTN","IBCNERP1",41,0)
 I '$G(IPRF) D
"RTN","IBCNERP1",42,0)
 . W !,"Insurance verification responses are received daily."
"RTN","IBCNERP1",43,0)
 . W !,"Please select a date range in which responses were received to view the"
"RTN","IBCNERP1",44,0)
 . W !,"associated response detail.  Otherwise, select a Trace # to view specific"
"RTN","IBCNERP1",45,0)
 . W !,"response detail."
"RTN","IBCNERP1",46,0)
 ;
"RTN","IBCNERP1",47,0)
 ; Rpt by Date Range or Trace #
"RTN","IBCNERP1",48,0)
R05 I '$G(IPRF) D RTYPE I STOP G:$$STOP EXIT G R05
"RTN","IBCNERP1",49,0)
 ; If rpt by Trace # - no other criteria is necessary
"RTN","IBCNERP1",50,0)
 I $G(IBCNESPC("TRCN")) G R100
"RTN","IBCNERP1",51,0)
 ; Date Range params
"RTN","IBCNERP1",52,0)
R10 D DTRANGE I STOP G:$$STOP EXIT G R05
"RTN","IBCNERP1",53,0)
 ; Payer Selection param
"RTN","IBCNERP1",54,0)
R20 D PYRSEL I STOP G:$$STOP EXIT G R10
"RTN","IBCNERP1",55,0)
 ; Patient Selection param
"RTN","IBCNERP1",56,0)
R30 D PTSEL I STOP G:$$STOP EXIT G R20
"RTN","IBCNERP1",57,0)
 ; Type of data to return param
"RTN","IBCNERP1",58,0)
R40 D TYPE I STOP G:$$STOP EXIT G R30
"RTN","IBCNERP1",59,0)
 ; How far back do you want the expiration date
"RTN","IBCNERP1",60,0)
R45 I $G(IPRF)=1 D DTEXP I STOP G:$$STOP EXIT G R40
"RTN","IBCNERP1",61,0)
 ; Sort by param - Payer or Patient
"RTN","IBCNERP1",62,0)
R50 D SORT I STOP G:$$STOP EXIT G R45
"RTN","IBCNERP1",63,0)
 ; Select output device
"RTN","IBCNERP1",64,0)
R100 D DEVICE(IBCNERTN,.IBCNESPC) I STOP G:$$STOP EXIT G:$G(IBCNESPC("TRCN"))'="" R05 G R50
"RTN","IBCNERP1",65,0)
 G EXIT
"RTN","IBCNERP1",66,0)
 ;
"RTN","IBCNERP1",67,0)
EXIT ; Exit pt
"RTN","IBCNERP1",68,0)
 Q
"RTN","IBCNERP1",69,0)
 ;
"RTN","IBCNERP1",70,0)
 ;
"RTN","IBCNERP1",71,0)
COMPILE(IBCNERTN,IBCNESPC) ; 
"RTN","IBCNERP1",72,0)
 ; Entry point called from EN^XUTMDEVQ in either direct or queued mode.
"RTN","IBCNERP1",73,0)
 ; Input params:
"RTN","IBCNERP1",74,0)
 ;  IBCNERTN = Routine name for ^TMP($J,...
"RTN","IBCNERP1",75,0)
 ;  IBCNESPC = Array passed by ref of the report params
"RTN","IBCNERP1",76,0)
 ;
"RTN","IBCNERP1",77,0)
 ; Init scratch globals
"RTN","IBCNERP1",78,0)
 K ^TMP($J,IBCNERTN),^TMP($J,IBCNERTN_"X")
"RTN","IBCNERP1",79,0)
 ; Compile
"RTN","IBCNERP1",80,0)
 I IBCNERTN="IBCNERP1" D EN^IBCNERP2(IBCNERTN,.IBCNESPC)
"RTN","IBCNERP1",81,0)
 I IBCNERTN="IBCNERP4" D EN^IBCNERP5(IBCNERTN,.IBCNESPC)
"RTN","IBCNERP1",82,0)
 I IBCNERTN="IBCNERP7" D EN^IBCNERP8(IBCNERTN,.IBCNESPC)
"RTN","IBCNERP1",83,0)
 I IBCNERTN="IBCNERPF" D EN^IBCNERPG(IBCNERTN,.IBCNESPC)
"RTN","IBCNERP1",84,0)
 ; Print
"RTN","IBCNERP1",85,0)
 I '$G(ZTSTOP) D
"RTN","IBCNERP1",86,0)
 . I IBCNERTN="IBCNERP1" D EN3^IBCNERPA(IBCNERTN,.IBCNESPC)
"RTN","IBCNERP1",87,0)
 . I IBCNERTN="IBCNERP4" D EN6^IBCNERPA(IBCNERTN,.IBCNESPC)
"RTN","IBCNERP1",88,0)
 . I IBCNERTN="IBCNERP7" D EN^IBCNERP9(IBCNERTN,.IBCNESPC)
"RTN","IBCNERP1",89,0)
 . I IBCNERTN="IBCNERPF" D EN^IBCNERPH(IBCNERTN,.IBCNESPC)
"RTN","IBCNERP1",90,0)
 ; Close device
"RTN","IBCNERP1",91,0)
 D ^%ZISC
"RTN","IBCNERP1",92,0)
 ; Kill scratch globals
"RTN","IBCNERP1",93,0)
 K ^TMP($J,IBCNERTN),^TMP($J,IBCNERTN_"X")
"RTN","IBCNERP1",94,0)
 ; Purge task record
"RTN","IBCNERP1",95,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCNERP1",96,0)
 ;
"RTN","IBCNERP1",97,0)
COMPILX ; COMPILE exit pt
"RTN","IBCNERP1",98,0)
 Q
"RTN","IBCNERP1",99,0)
 ;
"RTN","IBCNERP1",100,0)
STOP() ; Determine if user wants to exit out of the whole option
"RTN","IBCNERP1",101,0)
 ; Init vars
"RTN","IBCNERP1",102,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERP1",103,0)
 ;
"RTN","IBCNERP1",104,0)
 W !
"RTN","IBCNERP1",105,0)
 S DIR(0)="Y"
"RTN","IBCNERP1",106,0)
 S DIR("A")="Do you want to exit out of this option entirely"
"RTN","IBCNERP1",107,0)
 S DIR("B")="YES"
"RTN","IBCNERP1",108,0)
 S DIR("?",1)="  Enter YES to immediately exit out of this option."
"RTN","IBCNERP1",109,0)
 S DIR("?")="  Enter NO to return to the previous question."
"RTN","IBCNERP1",110,0)
 D ^DIR K DIR
"RTN","IBCNERP1",111,0)
 I $D(DIRUT) S (STOP,Y)=1 G STOPX
"RTN","IBCNERP1",112,0)
 I 'Y S STOP=0
"RTN","IBCNERP1",113,0)
 ;
"RTN","IBCNERP1",114,0)
STOPX ; STOP exit pt
"RTN","IBCNERP1",115,0)
 Q Y
"RTN","IBCNERP1",116,0)
 ;
"RTN","IBCNERP1",117,0)
DTRANGE ; Determine start and end dates for date range param
"RTN","IBCNERP1",118,0)
 ; Init vars
"RTN","IBCNERP1",119,0)
 N X,Y,DIRUT
"RTN","IBCNERP1",120,0)
 ;
"RTN","IBCNERP1",121,0)
 W !
"RTN","IBCNERP1",122,0)
 ;
"RTN","IBCNERP1",123,0)
 S DIR(0)="D^:-NOW:EX"
"RTN","IBCNERP1",124,0)
 S DIR("A")="Start DATE"
"RTN","IBCNERP1",125,0)
 S DIR("?",1)="   Please enter a valid date for which an eIV Response"
"RTN","IBCNERP1",126,0)
 S DIR("?")="   would have been received. Future dates are not allowed."
"RTN","IBCNERP1",127,0)
 D ^DIR K DIR
"RTN","IBCNERP1",128,0)
 I $D(DIRUT) S STOP=1 G DTRANGX
"RTN","IBCNERP1",129,0)
 S IBCNESPC("BEGDT")=Y
"RTN","IBCNERP1",130,0)
 ; End date
"RTN","IBCNERP1",131,0)
DTRANG1 S DIR(0)="DA^"_Y_":-NOW:EX"
"RTN","IBCNERP1",132,0)
 S DIR("A")="  End DATE:  "
"RTN","IBCNERP1",133,0)
 S DIR("?",1)="   Please enter a valid date for which an eIV Response"
"RTN","IBCNERP1",134,0)
 S DIR("?",2)="   would have been received.  This date must not precede"
"RTN","IBCNERP1",135,0)
 S DIR("?")="   the Start Date.  Future dates are not allowed."
"RTN","IBCNERP1",136,0)
 D ^DIR K DIR
"RTN","IBCNERP1",137,0)
 I $D(DIRUT) S STOP=1 G DTRANGX
"RTN","IBCNERP1",138,0)
 S IBCNESPC("ENDDT")=Y
"RTN","IBCNERP1",139,0)
 ;
"RTN","IBCNERP1",140,0)
DTRANGX ; DTRANGE exit pt
"RTN","IBCNERP1",141,0)
 Q
"RTN","IBCNERP1",142,0)
 ;
"RTN","IBCNERP1",143,0)
PYRSEL ; Select one payer or ALL - File #365.12
"RTN","IBCNERP1",144,0)
 ; Init vars
"RTN","IBCNERP1",145,0)
 NEW DIC,DTOUT,DUOUT,X,Y
"RTN","IBCNERP1",146,0)
 ;
"RTN","IBCNERP1",147,0)
 W !
"RTN","IBCNERP1",148,0)
 S DIC(0)="ABEQ"
"RTN","IBCNERP1",149,0)
 S DIC("A")=$$FO^IBCNEUT1("Payer or <Return> for All Payers: ",40,"R")
"RTN","IBCNERP1",150,0)
 ; Do not allow selection of '~NO PAYER' and non-eIV payers
"RTN","IBCNERP1",151,0)
 S DIC("S")="I ($P(^(0),U,1)'=""~NO PAYER""),$$PYRAPP^IBCNEUT5(""IIV"",$G(Y))'="""""
"RTN","IBCNERP1",152,0)
 S DIC="^IBE(365.12,"
"RTN","IBCNERP1",153,0)
 D ^DIC
"RTN","IBCNERP1",154,0)
 I $D(DUOUT)!$D(DTOUT) S STOP=1 G PYRSELX
"RTN","IBCNERP1",155,0)
 ; If nothing was selected (Y=-1), select ALL payers
"RTN","IBCNERP1",156,0)
 S IBCNESPC("PYR")=$S(Y=-1:"",1:$P(Y,U,1))
"RTN","IBCNERP1",157,0)
 ;
"RTN","IBCNERP1",158,0)
PYRSELX ; PYRSEL exit pt
"RTN","IBCNERP1",159,0)
 Q
"RTN","IBCNERP1",160,0)
 ;
"RTN","IBCNERP1",161,0)
PTSEL ; Select one patient or ALL - File #2
"RTN","IBCNERP1",162,0)
 ; Init vars
"RTN","IBCNERP1",163,0)
 NEW DIC,DTOUT,DUOUT,X,Y
"RTN","IBCNERP1",164,0)
 ; Patient lookup
"RTN","IBCNERP1",165,0)
 W !
"RTN","IBCNERP1",166,0)
 S DIC(0)="AEQM"
"RTN","IBCNERP1",167,0)
 S DIC("A")=$$FO^IBCNEUT1("Patient or <Return> for All Patients: ",40,"R")
"RTN","IBCNERP1",168,0)
 S DIC="^DPT("
"RTN","IBCNERP1",169,0)
 D ^DIC
"RTN","IBCNERP1",170,0)
 I $D(DUOUT)!$D(DTOUT) S STOP=1 G PTSELX
"RTN","IBCNERP1",171,0)
 ; If nothing was selected (Y=-1), select ALL patients
"RTN","IBCNERP1",172,0)
 S IBCNESPC("PAT")=$S(Y=-1:"",1:$P(Y,U,1))
"RTN","IBCNERP1",173,0)
 ;
"RTN","IBCNERP1",174,0)
PTSELX ; PTSEL exit pt
"RTN","IBCNERP1",175,0)
 Q
"RTN","IBCNERP1",176,0)
 ;
"RTN","IBCNERP1",177,0)
TYPE ; Prompt to select to display All or Most Recent Responses for
"RTN","IBCNERP1",178,0)
 ; Patient/Payer combos
"RTN","IBCNERP1",179,0)
 ; Init vars
"RTN","IBCNERP1",180,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERP1",181,0)
 ;
"RTN","IBCNERP1",182,0)
 S DIR(0)="S^A:All Responses;M:Most Recent Responses"
"RTN","IBCNERP1",183,0)
 S DIR("A")="Select the type of responses to display"
"RTN","IBCNERP1",184,0)
 S DIR("B")="A"
"RTN","IBCNERP1",185,0)
 S DIR("?",1)="  A - All responses from the payer during the date range will be"
"RTN","IBCNERP1",186,0)
 S DIR("?",2)="      displayed for each unique payer/patient combination."
"RTN","IBCNERP1",187,0)
 S DIR("?",3)="      (Default)"
"RTN","IBCNERP1",188,0)
 S DIR("?",4)="  M - Only the most recently received response from the payer"
"RTN","IBCNERP1",189,0)
 S DIR("?",5)="      during the date range will be displayed for each unique"
"RTN","IBCNERP1",190,0)
 S DIR("?")="      payer/patient combination."
"RTN","IBCNERP1",191,0)
 D ^DIR K DIR
"RTN","IBCNERP1",192,0)
 I $D(DIRUT) S STOP=1 G TYPEX
"RTN","IBCNERP1",193,0)
 S IBCNESPC("TYPE")=Y
"RTN","IBCNERP1",194,0)
 ;
"RTN","IBCNERP1",195,0)
TYPEX ; TYPE exit pt
"RTN","IBCNERP1",196,0)
 Q
"RTN","IBCNERP1",197,0)
 ;
"RTN","IBCNERP1",198,0)
DTEXP ; Prompt for oldest expiration date to pull for.
"RTN","IBCNERP1",199,0)
 ; Init Vars
"RTN","IBCNERP1",200,0)
 N Y,DIRUT,TODAY
"RTN","IBCNERP1",201,0)
 ;
"RTN","IBCNERP1",202,0)
 W !
"RTN","IBCNERP1",203,0)
 ;
"RTN","IBCNERP1",204,0)
 S DIR(0)="D^:-NOW:EX"
"RTN","IBCNERP1",205,0)
 S DIR("A")="Earliest Policy Expiration Date to Select From"
"RTN","IBCNERP1",206,0)
 S DIR("B")="T-365"
"RTN","IBCNERP1",207,0)
 S DIR("?",1)=" Please enter a valid date in the past. Any policy with a reported"
"RTN","IBCNERP1",208,0)
 S DIR("?")=" expiration date prior to this date will not be selected."
"RTN","IBCNERP1",209,0)
 D ^DIR K DIR
"RTN","IBCNERP1",210,0)
 I $D(DIRUT) S STOP=1 G DTEXPX
"RTN","IBCNERP1",211,0)
 S IBCNESPC("DTEXP")=Y
"RTN","IBCNERP1",212,0)
 ;
"RTN","IBCNERP1",213,0)
DTEXPX ; DTEXP Exit
"RTN","IBCNERP1",214,0)
 Q
"RTN","IBCNERP1",215,0)
 ;
"RTN","IBCNERP1",216,0)
SORT ; Prompt to allow users to sort the report by Payer(default) or 
"RTN","IBCNERP1",217,0)
 ;  Patient
"RTN","IBCNERP1",218,0)
 ; Init vars
"RTN","IBCNERP1",219,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERP1",220,0)
 ;
"RTN","IBCNERP1",221,0)
 S DIR(0)="S^1:Payer Name;2:Patient Name"
"RTN","IBCNERP1",222,0)
 S DIR("A")="Select the primary sort field"
"RTN","IBCNERP1",223,0)
 S DIR("B")=1
"RTN","IBCNERP1",224,0)
 S DIR("?",1)="  1 - Payer Name is the primary sort, Patient Name is secondary."
"RTN","IBCNERP1",225,0)
 S DIR("?",2)="      (Default)"
"RTN","IBCNERP1",226,0)
 S DIR("?")="  2 - Patient Name is the primary sort, Payer Name is secondary."
"RTN","IBCNERP1",227,0)
 D ^DIR K DIR
"RTN","IBCNERP1",228,0)
 I $D(DIRUT) S STOP=1 G SORTX
"RTN","IBCNERP1",229,0)
 S IBCNESPC("SORT")=Y
"RTN","IBCNERP1",230,0)
 ;
"RTN","IBCNERP1",231,0)
SORTX ; SORT exit pt
"RTN","IBCNERP1",232,0)
 Q
"RTN","IBCNERP1",233,0)
 ;
"RTN","IBCNERP1",234,0)
RTYPE ; Prompt to allow users to report by date range or Trace #
"RTN","IBCNERP1",235,0)
 ; Init vars
"RTN","IBCNERP1",236,0)
 N D,DIC,DIR,X,Y,DIRUT,DTOUT,DUOUT
"RTN","IBCNERP1",237,0)
 ;
"RTN","IBCNERP1",238,0)
 S DIR(0)="S^1:Report by Date Range;2:Report by Trace #"
"RTN","IBCNERP1",239,0)
 S DIR("A")="Select the type of report to generate"
"RTN","IBCNERP1",240,0)
 S DIR("B")=1
"RTN","IBCNERP1",241,0)
 S DIR("?",1)="  1 - Generate report by date range, payer range, patient range"
"RTN","IBCNERP1",242,0)
 S DIR("?",2)="      and All or Most Recent responses for payer/patient."
"RTN","IBCNERP1",243,0)
 S DIR("?",3)="      (Default)"
"RTN","IBCNERP1",244,0)
 S DIR("?",4)="  2 - Generate report for a specific Trace # which corresponds"
"RTN","IBCNERP1",245,0)
 S DIR("?")="      to an unique response."
"RTN","IBCNERP1",246,0)
 D ^DIR K DIR
"RTN","IBCNERP1",247,0)
 I $D(DIRUT) S STOP=1 G RTYPEX
"RTN","IBCNERP1",248,0)
 I Y=1 S IBCNESPC("TRCN")="" G RTYPEX
"RTN","IBCNERP1",249,0)
 ;
"RTN","IBCNERP1",250,0)
 ; Allow user to select Trace # from x-ref "C"
"RTN","IBCNERP1",251,0)
 W !
"RTN","IBCNERP1",252,0)
 S DIC(0)="AEVZSQ"
"RTN","IBCNERP1",253,0)
 S DIC="^IBCN(365,",D="C",DIC("A")="Enter Trace # for report: "
"RTN","IBCNERP1",254,0)
 S DIC("W")="N IBX S IBX=$P($G(^(0)),U,2,3) W:$P(IBX,U,1) $P($G(^DPT($P(IBX,U,1),0)),U,1) W:$P(IBX,U,2) ""  ""_$P($G(^IBE(365.12,$P(IBX,U,2),0)),U,1)"
"RTN","IBCNERP1",255,0)
 D IX^DIC K DIC
"RTN","IBCNERP1",256,0)
 I $D(DTOUT)!$D(DUOUT) S STOP=1 G RTYPEX
"RTN","IBCNERP1",257,0)
 I 'Y!(Y<0) S STOP=1 G RTYPEX
"RTN","IBCNERP1",258,0)
 S IBCNESPC("TRCN")=$P(Y(0),U,9)_"^"_$P(Y,U,1)
"RTN","IBCNERP1",259,0)
 ;
"RTN","IBCNERP1",260,0)
RTYPEX ; RTYPE exit pt
"RTN","IBCNERP1",261,0)
 Q
"RTN","IBCNERP1",262,0)
 ;
"RTN","IBCNERP1",263,0)
DEVICE(IBCNERTN,IBCNESPC) ; Device Handler and possible TaskManager calls
"RTN","IBCNERP1",264,0)
 ;
"RTN","IBCNERP1",265,0)
 ; Input params:
"RTN","IBCNERP1",266,0)
 ;  IBCNERTN = Routine name for ^TMP($J,...
"RTN","IBCNERP1",267,0)
 ;  IBCNESPC = Array passed by ref of the report params
"RTN","IBCNERP1",268,0)
 ;
"RTN","IBCNERP1",269,0)
 ; Init vars
"RTN","IBCNERP1",270,0)
 N ZTRTN,ZTDESC,ZTSAVE,POP
"RTN","IBCNERP1",271,0)
 ;
"RTN","IBCNERP1",272,0)
 I IBCNERTN="IBCNERP4"!(IBCNERTN="IBCNERPF"&($G(IBCNESPC("TYPE"))="D")) W !!!,"*** This report is 132 characters wide ***",!
"RTN","IBCNERP1",273,0)
 S ZTRTN="COMPILE^IBCNERP1("""_IBCNERTN_""",.IBCNESPC)"
"RTN","IBCNERP1",274,0)
 S ZTDESC="IBCNE eIV "_$S(IBCNERTN="IBCNERP1":"Response",IBCNERTN="IBCNERPF":"Insurance Update",1:"Payer")_" Report"
"RTN","IBCNERP1",275,0)
 S ZTSAVE("IBCNESPC(")=""
"RTN","IBCNERP1",276,0)
 S ZTSAVE("IBCNERTN")=""
"RTN","IBCNERP1",277,0)
 D EN^XUTMDEVQ(ZTRTN,ZTDESC,.ZTSAVE)
"RTN","IBCNERP1",278,0)
 I POP S STOP=1
"RTN","IBCNERP1",279,0)
 ;
"RTN","IBCNERP1",280,0)
DEVICEX ; DEVICE exit pt
"RTN","IBCNERP1",281,0)
 Q
"RTN","IBCNERP1",282,0)
 ;
"RTN","IBCNERP2")
0^52^B30801647^B33851537
"RTN","IBCNERP2",1,0)
IBCNERP2 ;DAOU/BHS - IBCNE eIV RESPONSE REPORT COMPILE ;03-JUN-2002
"RTN","IBCNERP2",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416**;21-MAR-94;Build 58
"RTN","IBCNERP2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERP2",4,0)
 ;
"RTN","IBCNERP2",5,0)
 ; Input vars from IBCNERP1:
"RTN","IBCNERP2",6,0)
 ;  IBCNERTN="IBCNERP1"
"RTN","IBCNERP2",7,0)
 ;  IBCNESPC("BEGDT")=Start Dt for rpt
"RTN","IBCNERP2",8,0)
 ;  IBCNESPC("ENDDT")=End Dt for rpt
"RTN","IBCNERP2",9,0)
 ;  IBCNESPC("PYR")=Pyr IEN for rpt. If "", then show all.
"RTN","IBCNERP2",10,0)
 ;  IBCNESPC("PAT")=Pt IEN for rpt. If "", then show all.
"RTN","IBCNERP2",11,0)
 ;  IBCNESPC("TYPE")=A (All Responses) for date range OR M (Most Recent
"RTN","IBCNERP2",12,0)
 ;   Responses) for date range (by unique Pyr/Pt pair)
"RTN","IBCNERP2",13,0)
 ;  IBCNESPC("SORT")=1 (Pyr nm) OR 2 (Pt nm)
"RTN","IBCNERP2",14,0)
 ;  IBCNESPC("TRCN")=Trace #^IEN, if non-null, all other params are null
"RTN","IBCNERP2",15,0)
 ;  IBCNESPC("RFLAG")=Report Flag used to indicate which report is being
"RTN","IBCNERP2",16,0)
 ;   run.  Response Report (0), Inactive Report (1), or Ambiguous
"RTN","IBCNERP2",17,0)
 ;   Report (2).
"RTN","IBCNERP2",18,0)
 ;  IBCNESPC("DTEXP")=Expiration date used in the inactive policy report
"RTN","IBCNERP2",19,0)
 ;
"RTN","IBCNERP2",20,0)
 ; Output vars used by IBCNERP3:
"RTN","IBCNERP2",21,0)
 ;  Structure of ^TMP based on eIV Response File (#365)
"RTN","IBCNERP2",22,0)
 ;   IBCNERTN="IBCNERP1"
"RTN","IBCNERP2",23,0)
 ;   SORT1=PyrNm (SORT=1) or PtNm(SORT=2)
"RTN","IBCNERP2",24,0)
 ;   SORT2=PtNm (SORT=1) or PyrNm (SORT=2)
"RTN","IBCNERP2",25,0)
 ;  ^TMP($J,IBCNERTN,SORT1,SORT2,CNT,0/1) based on ^IBCN(365,DA,0/1)
"RTN","IBCNERP2",26,0)
 ;   CNT=Seq ct
"RTN","IBCNERP2",27,0)
 ;  ^TMP($J,IBCNERTN,SORT1,SORT2,2,EBCT) based on ^IBCN(365,DA,2,EBCT,0)
"RTN","IBCNERP2",28,0)
 ;   EBCT = Elig/Benefit multiple field IEN (ptr to 365.02)
"RTN","IBCNERP2",29,0)
 ;  ^TMP($J,IBCNERTN,SORT1,SORT2,2,EBCT,NTCT) based on
"RTN","IBCNERP2",30,0)
 ;   ^IBCN(365,DA,2,EB,0,NT,0) Notes for EB seg
"RTN","IBCNERP2",31,0)
 ;   NTCT = Notes Ct may not equal Notes IEN (365.22) if ln must wrap
"RTN","IBCNERP2",32,0)
 ;  ^TMP($J,IBCNERTN,SORT1,SORT2,3,CNCT) based on ^IBCN(365,DA,3,CNCT,0)
"RTN","IBCNERP2",33,0)
 ;   CNCT = Contact Person multiple field IEN (ptr to 365.03)
"RTN","IBCNERP2",34,0)
 ;  ^TMP($J,IBCNERTN,SORT1,SORT2,4,CT) based on ^IBCN(365,DA,4)
"RTN","IBCNERP2",35,0)
 ;    CT=1 if len of text <=70, else ln is split
"RTN","IBCNERP2",36,0)
 ;  ^TMP($J,IBCNERTN,SORT1,SORT2,5,CT) based on # lns of comments reqd
"RTN","IBCNERP2",37,0)
 ;    CT=1 to display future retransmission date
"RTN","IBCNERP2",38,0)
 ;
"RTN","IBCNERP2",39,0)
 ; Must call at EN
"RTN","IBCNERP2",40,0)
 Q
"RTN","IBCNERP2",41,0)
 ;
"RTN","IBCNERP2",42,0)
 ;
"RTN","IBCNERP2",43,0)
EN(IBCNERTN,IBCNESPC) ; Entry
"RTN","IBCNERP2",44,0)
 ; Init
"RTN","IBCNERP2",45,0)
 N IBDT,IBBDT,IBPY,IBPYR,IBPT
"RTN","IBCNERP2",46,0)
 N IBPAT,IBPTR,SORT1,SORT2,RPTDATA,IBTOT
"RTN","IBCNERP2",47,0)
 N PYRIEN,PATIEN,IBTRC,IBTYP,IBCT,IBSRT,IBEXP,FRST,TQN,DONTINC,IPRF
"RTN","IBCNERP2",48,0)
 ;
"RTN","IBCNERP2",49,0)
 I '$D(ZTQUEUED),$G(IOST)["C-" W !!,"Compiling report data ..."
"RTN","IBCNERP2",50,0)
 ;
"RTN","IBCNERP2",51,0)
 ; Temp ct
"RTN","IBCNERP2",52,0)
 S (IBTOT,IBCT)=0
"RTN","IBCNERP2",53,0)
 ;
"RTN","IBCNERP2",54,0)
 ; Kill scratch globals
"RTN","IBCNERP2",55,0)
 K ^TMP($J,IBCNERTN),^TMP($J,IBCNERTN_"X")
"RTN","IBCNERP2",56,0)
 ;
"RTN","IBCNERP2",57,0)
 S IBTRC=$G(IBCNESPC("TRCN"))
"RTN","IBCNERP2",58,0)
 ; Skip for TRACE#
"RTN","IBCNERP2",59,0)
 I IBTRC'="" G TRCN
"RTN","IBCNERP2",60,0)
 ;
"RTN","IBCNERP2",61,0)
 S IBBDT=IBCNESPC("BEGDT")
"RTN","IBCNERP2",62,0)
 S IBPY=$G(IBCNESPC("PYR"))
"RTN","IBCNERP2",63,0)
 S IBPT=$G(IBCNESPC("PAT"))
"RTN","IBCNERP2",64,0)
 S IBTYP=$G(IBCNESPC("TYPE"))
"RTN","IBCNERP2",65,0)
 S IBSRT=$G(IBCNESPC("SORT"))
"RTN","IBCNERP2",66,0)
 S IBEXP=$G(IBCNESPC("DTEXP"))
"RTN","IBCNERP2",67,0)
 S IPRF=$G(IBCNESPC("RFLAG"))
"RTN","IBCNERP2",68,0)
 ;
"RTN","IBCNERP2",69,0)
 ; Loop thru the eIV Response File (#365) by Date/Time Response Rec X-Ref
"RTN","IBCNERP2",70,0)
 ; S IBDT=$O(^IBCN(365,"AD",IBCNESPC("ENDDT")))
"RTN","IBCNERP2",71,0)
 ; Initialize IBDT to end date 
"RTN","IBCNERP2",72,0)
 S IBDT=IBCNESPC("ENDDT")_".999999"
"RTN","IBCNERP2",73,0)
 F  S IBDT=$O(^IBCN(365,"AD",IBDT),-1) Q:IBDT=""!($P(IBDT,".",1)<IBBDT)  D  Q:$G(ZTSTOP)
"RTN","IBCNERP2",74,0)
 . S PYRIEN=$S(IBPY="":0,1:$O(^IBCN(365,"AD",IBDT,IBPY),-1))
"RTN","IBCNERP2",75,0)
 . F  S PYRIEN=$O(^IBCN(365,"AD",IBDT,PYRIEN)) Q:'PYRIEN!((IBPY'="")&(PYRIEN'=IBPY))  D  Q:$G(ZTSTOP)
"RTN","IBCNERP2",76,0)
 .. I $D(ZTQUEUED),$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP2",77,0)
 .. ; Pyr nm from Pyr File (#365.12)
"RTN","IBCNERP2",78,0)
 .. S IBPYR=$P($G(^IBE(365.12,PYRIEN,0)),U)
"RTN","IBCNERP2",79,0)
 .. I IBPYR="" Q
"RTN","IBCNERP2",80,0)
 .. S PATIEN=$S(IBPT="":0,1:$O(^IBCN(365,"AD",IBDT,PYRIEN,IBPT),-1))
"RTN","IBCNERP2",81,0)
 .. F  S PATIEN=$O(^IBCN(365,"AD",IBDT,PYRIEN,PATIEN)) Q:'PATIEN!((IBPT'="")&(PATIEN'=IBPT))  D  Q:$G(ZTSTOP)
"RTN","IBCNERP2",82,0)
 ... ; Pt nm from Pt File (#2)
"RTN","IBCNERP2",83,0)
 ... S IBPAT=$P($G(^DPT(PATIEN,0)),U)
"RTN","IBCNERP2",84,0)
 ... I IBPAT="" Q
"RTN","IBCNERP2",85,0)
 ... S IBPTR=0
"RTN","IBCNERP2",86,0)
 ... F  S IBPTR=$O(^IBCN(365,"AD",IBDT,PYRIEN,PATIEN,IBPTR)) Q:'IBPTR  D  Q:$G(ZTSTOP)
"RTN","IBCNERP2",87,0)
 .... S IBTOT=IBTOT+1
"RTN","IBCNERP2",88,0)
 .... ; Since non-positive identifications are no longer placed in the 
"RTN","IBCNERP2",89,0)
 .... ; insurance buffer, two new reports were added to allow users to
"RTN","IBCNERP2",90,0)
 .... ; view the responses.  One report (IPFR=1) shows only responses
"RTN","IBCNERP2",91,0)
 .... ; of inactive policies.  The other (IPFR=2) shows ambiguous responses.
"RTN","IBCNERP2",92,0)
 .... ; Any response that is not active nor inactive is considered 
"RTN","IBCNERP2",93,0)
 .... ; ambiguous for the purposes of this report.
"RTN","IBCNERP2",94,0)
 .... I IPRF D  Q:DONTINC
"RTN","IBCNERP2",95,0)
 ..... N EBIC,NODE1,PCD
"RTN","IBCNERP2",96,0)
 ..... S DONTINC=1
"RTN","IBCNERP2",97,0)
 ..... S TQN=$P($G(^IBCN(365,IBPTR,0)),U,5) Q:TQN=""  ; TQ ien (#365.1)
"RTN","IBCNERP2",98,0)
 ..... S NODE1=$G(^IBCN(365,IBPTR,1))
"RTN","IBCNERP2",99,0)
 ..... I $P($G(^IBCN(365.1,TQN,0)),U,11)="V" Q     ; If verification quit
"RTN","IBCNERP2",100,0)
 ..... I IPRF=1,($P(NODE1,U,12)="")!($P(NODE1,U,12)<$G(IBEXP)) Q
"RTN","IBCNERP2",101,0)
 ..... S FRST=$O(^IBCN(365,IBPTR,2,0))
"RTN","IBCNERP2",102,0)
 ..... I FRST="" Q
"RTN","IBCNERP2",103,0)
 ..... S PCD=$P($G(^IBCN(365,IBPTR,2,FRST,0)),U,6)
"RTN","IBCNERP2",104,0)
 ..... I PCD]"",PCD'="eIV Eligibility Determination" Q
"RTN","IBCNERP2",105,0)
 ..... S EBIC=$$GET1^DIQ(365.02,FRST_","_IBPTR_",","ELIGIBILITY/BENEFIT INFO:CODE")
"RTN","IBCNERP2",106,0)
 ..... I PCD]"",IPRF=1,EBIC'=6 Q
"RTN","IBCNERP2",107,0)
 ..... I PCD]"",IPRF=2,EBIC=6!(EBIC=1) Q
"RTN","IBCNERP2",108,0)
 ..... I $P(NODE1,U,14)]"" Q  ; Error Condition
"RTN","IBCNERP2",109,0)
 ..... I $P(NODE1,U,15)]"" Q  ; Error Action
"RTN","IBCNERP2",110,0)
 ..... I $P($G(^IBCN(365,IBPTR,4)),U)]"" Q  ; Error Text
"RTN","IBCNERP2",111,0)
 ..... S DONTINC=0
"RTN","IBCNERP2",112,0)
 ....;
"RTN","IBCNERP2",113,0)
 .... I $D(ZTQUEUED),IBTOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP2",114,0)
 .... ; Sort fields
"RTN","IBCNERP2",115,0)
 .... S SORT1=$S(IBSRT=1:IBPYR,1:IBPAT)
"RTN","IBCNERP2",116,0)
 .... S SORT2=$S(IBSRT=1:IBPAT,1:IBPYR)
"RTN","IBCNERP2",117,0)
 .... ; Only check for Most Recent - Pyr/Pt pair
"RTN","IBCNERP2",118,0)
 .... I IBTYP="M",$D(^TMP($J,IBCNERTN_"X",PYRIEN,PATIEN)) Q
"RTN","IBCNERP2",119,0)
 .... ; Set temp ind.
"RTN","IBCNERP2",120,0)
 .... I IBTYP="M" S ^TMP($J,IBCNERTN_"X",PYRIEN,PATIEN)=""
"RTN","IBCNERP2",121,0)
 .... ; Update ct
"RTN","IBCNERP2",122,0)
 .... S IBCT=IBCT+1
"RTN","IBCNERP2",123,0)
 .... ; Sort data - build RPTDATA array
"RTN","IBCNERP2",124,0)
 .... K RPTDATA
"RTN","IBCNERP2",125,0)
 .... D GETDATA^IBCNERPE(IBPTR,.RPTDATA)
"RTN","IBCNERP2",126,0)
 .... ; Merge data from RPTDATA to ^TMP
"RTN","IBCNERP2",127,0)
 .... M ^TMP($J,IBCNERTN,SORT1,SORT2,IBCT)=RPTDATA
"RTN","IBCNERP2",128,0)
 ;
"RTN","IBCNERP2",129,0)
 ; Purge index of duplicate Pyr/Pt combos
"RTN","IBCNERP2",130,0)
 K ^TMP($J,IBCNERTN_"X")
"RTN","IBCNERP2",131,0)
 ;
"RTN","IBCNERP2",132,0)
 G EXIT
"RTN","IBCNERP2",133,0)
 ;
"RTN","IBCNERP2",134,0)
TRCN ; Trace # proc.
"RTN","IBCNERP2",135,0)
 S IBPTR=$P(IBTRC,U,2)
"RTN","IBCNERP2",136,0)
 I IBPTR="" G EXIT
"RTN","IBCNERP2",137,0)
 ; Sort the data - build RPTDATA array
"RTN","IBCNERP2",138,0)
 KILL RPTDATA
"RTN","IBCNERP2",139,0)
 D GETDATA^IBCNERPE(IBPTR,.RPTDATA)
"RTN","IBCNERP2",140,0)
 ; Default sort - one record
"RTN","IBCNERP2",141,0)
 ; Pyr nm from Pyr File (#365.12)
"RTN","IBCNERP2",142,0)
 S PYRIEN=$P(RPTDATA(0),U,3)
"RTN","IBCNERP2",143,0)
 I PYRIEN="" G EXIT
"RTN","IBCNERP2",144,0)
 S SORT1=$P($G(^IBE(365.12,PYRIEN,0)),U,1)
"RTN","IBCNERP2",145,0)
 I SORT1="" G EXIT
"RTN","IBCNERP2",146,0)
 ; Pt nm from Pt File (#2)
"RTN","IBCNERP2",147,0)
 S PATIEN=$P(RPTDATA(0),U,2)
"RTN","IBCNERP2",148,0)
 I PATIEN="" G EXIT
"RTN","IBCNERP2",149,0)
 S SORT2=$P($G(^DPT(PATIEN,0)),U,1)
"RTN","IBCNERP2",150,0)
 I SORT2="" G EXIT
"RTN","IBCNERP2",151,0)
 ; Merge data- RPTDATA to ^TMP
"RTN","IBCNERP2",152,0)
 M ^TMP($J,IBCNERTN,SORT1,SORT2,1)=RPTDATA
"RTN","IBCNERP2",153,0)
 ;
"RTN","IBCNERP2",154,0)
EXIT ;
"RTN","IBCNERP2",155,0)
 Q
"RTN","IBCNERP2",156,0)
 ;
"RTN","IBCNERP2",157,0)
X12(FILE,CODE,FLD) ; Output based on File # and X12 code
"RTN","IBCNERP2",158,0)
 I $G(FILE)=""!($G(CODE)="") Q ""
"RTN","IBCNERP2",159,0)
 ; Quit w/o label if not defined in File Def.
"RTN","IBCNERP2",160,0)
 Q $$LBL(365.02,$G(FLD))_$P($G(^IBE(FILE,CODE,0)),U,2)
"RTN","IBCNERP2",161,0)
 ;
"RTN","IBCNERP2",162,0)
LBL(FILE,FLD) ; Determine label from File Def.
"RTN","IBCNERP2",163,0)
 N IBLBL
"RTN","IBCNERP2",164,0)
 ;
"RTN","IBCNERP2",165,0)
 I $G(FILE)=""!($G(FLD)="") Q ""
"RTN","IBCNERP2",166,0)
 S IBLBL=$$GET1^DID(FILE,FLD,"","TITLE")
"RTN","IBCNERP2",167,0)
 Q $S(IBLBL'="":IBLBL_": ",1:"")
"RTN","IBCNERP2",168,0)
 ;
"RTN","IBCNERP3")
0^19^B28161597^B33550221
"RTN","IBCNERP3",1,0)
IBCNERP3 ;DAOU/BHS - IBCNE eIV RESPONSE REPORT PRINT ;03-JUN-2002
"RTN","IBCNERP3",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416**;21-MAR-94;Build 58
"RTN","IBCNERP3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERP3",4,0)
 ;
"RTN","IBCNERP3",5,0)
 ; eIV - Insurance Verification
"RTN","IBCNERP3",6,0)
 ;
"RTN","IBCNERP3",7,0)
 ; Called by IBCNERPA
"RTN","IBCNERP3",8,0)
 ; Input from IBCNERP1/2:
"RTN","IBCNERP3",9,0)
 ;  IBCNERTN="IBCNERP1" - Driver rtn
"RTN","IBCNERP3",10,0)
 ;  IBCNESPC("BEGDT")=Start Dt,  IBCNESPC("ENDDT")=End Dt
"RTN","IBCNERP3",11,0)
 ;  IBCNESPC("PYR")=Pyr IEN OR "" for all
"RTN","IBCNERP3",12,0)
 ;  IBCNESPC("PAT")=Pat IEN OR "" for all
"RTN","IBCNERP3",13,0)
 ;  IBCNESPC("TYPE")=A (All Responses) OR M (Most Recent Responses) for
"RTN","IBCNERP3",14,0)
 ;   unique Pyr/Pt pair
"RTN","IBCNERP3",15,0)
 ;  IBCNESPC("SORT")=1 (PyrNm) OR 2 (PatNm)
"RTN","IBCNERP3",16,0)
 ;  IBCNESPC("TRCN")=Trace #^IEN, if non-null, all params null
"RTN","IBCNERP3",17,0)
 ;  IBCNESPC("RFLAG")=Report Flag used to indicate which report is being
"RTN","IBCNERP3",18,0)
 ;   run.  Response Report (0), Inactive Report (1), or Ambiguous
"RTN","IBCNERP3",19,0)
 ;   Report (2).
"RTN","IBCNERP3",20,0)
 ;  IBCNESPC("DTEXP")=Expiration date used in the inactive policy report
"RTN","IBCNERP3",21,0)
 ;
"RTN","IBCNERP3",22,0)
 ;  Based on structure of eIV Response File (#365)
"RTN","IBCNERP3",23,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,CT,0) based on ^IBCN(365,DA,0)
"RTN","IBCNERP3",24,0)
 ;    IBCNERTN="IBCNERP1", S1=PyrName(SORT=1) or PatNm(SORT=2),
"RTN","IBCNERP3",25,0)
 ;    S2=PatName(SORT=1) or PyrName(SORT=2), CT=Seq ct
"RTN","IBCNERP3",26,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,CT,1) based on ^IBCN(365,DA,1)
"RTN","IBCNERP3",27,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,2,EBCT) based on ^IBCN(365,DA,2)
"RTN","IBCNERP3",28,0)
 ;    EBCT=E/B IEN (365.02)
"RTN","IBCNERP3",29,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,2,EBCT,NTCT)=based on ^IBCN(365,DA,2,EB,NT)
"RTN","IBCNERP3",30,0)
 ;   NTCT=Notes Ct, may not be Notes IEN, if line wrapped (365.021)
"RTN","IBCNERP3",31,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,2,CNCT) based on ^IBCN(365,DA,3)
"RTN","IBCNERP3",32,0)
 ;   CNCT=Cont Pers IEN (365.03)
"RTN","IBCNERP3",33,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,4,CT)= err txt based on ^IBCN(365,DA,4)
"RTN","IBCNERP3",34,0)
 ;   CT=1/2 if >60 ch long
"RTN","IBCNERP3",35,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,5,CT)= based on # lines of comments reqd
"RTN","IBCNERP3",36,0)
 ;   CT=1 to display future retransmission date
"RTN","IBCNERP3",37,0)
 ; Must call at appropriate tag
"RTN","IBCNERP3",38,0)
 Q
"RTN","IBCNERP3",39,0)
 ;
"RTN","IBCNERP3",40,0)
PRINT(RTN,BDT,EDT,PYR,PAT,TYP,SRT,PGC,PXT,MAX,CRT,TRC,EXP,IPRF) ; Print data
"RTN","IBCNERP3",41,0)
 ; Input: RTN="IBCENRP1", BDT=start dt, EDT=end dt, PYR=pyr ien,
"RTN","IBCNERP3",42,0)
 ;  PAT= pat ien, TYP=A/M, SRT=1/2, PGC=page ct, PXT=exit flg,
"RTN","IBCNERP3",43,0)
 ; MAX=max line ct/pg, CRT=1/0, TRC=trc#, EXP=earliest expiration date
"RTN","IBCNERP3",44,0)
 N EORMSG,NONEMSG,SORT1,SORT2,CNT,CNFLG,ERFLG,PRT1,PRT2  ;,DISPDATA
"RTN","IBCNERP3",45,0)
 N OPRT1,OPRT2 ; Original values for PRT1 and PRT2, respectively
"RTN","IBCNERP3",46,0)
 S EORMSG="*** END OF REPORT ***"
"RTN","IBCNERP3",47,0)
 S NONEMSG="* * * N O  D A T A  F O U N D * * *"
"RTN","IBCNERP3",48,0)
 S (SORT1,SORT2)=""
"RTN","IBCNERP3",49,0)
 I '$D(^TMP($J,RTN)) D HEADER W !,?(80-$L(NONEMSG)\2),NONEMSG,!!
"RTN","IBCNERP3",50,0)
 F  S SORT1=$O(^TMP($J,RTN,SORT1)) Q:SORT1=""  D  Q:PXT!$G(ZTSTOP)
"RTN","IBCNERP3",51,0)
 . S (OPRT1,PRT1)=$S(SORT1="~NO PAYER":"* No Payer Identified",1:SORT1)
"RTN","IBCNERP3",52,0)
 . S SORT2="" F  S SORT2=$O(^TMP($J,RTN,SORT1,SORT2)) Q:SORT2=""  D  Q:PXT!$G(ZTSTOP)
"RTN","IBCNERP3",53,0)
 . . S (OPRT2,PRT2)=$S(SORT2="~NO PAYER":"* No Payer Identified",1:SORT2)
"RTN","IBCNERP3",54,0)
 . . S CNT="" F  S CNT=$O(^TMP($J,RTN,SORT1,SORT2,CNT)) Q:CNT=""  D  Q:PXT!$G(ZTSTOP)
"RTN","IBCNERP3",55,0)
 . . . D SSDB ; add SSN (from ^DPT) and DOB to patient header info
"RTN","IBCNERP3",56,0)
 . . . D HEADER
"RTN","IBCNERP3",57,0)
 . . . I $G(ZTSTOP)!PXT Q
"RTN","IBCNERP3",58,0)
 . . . K DISPDATA  ; Init disp
"RTN","IBCNERP3",59,0)
 . . . D DATA^IBCNERPE(.DISPDATA),LINE(.DISPDATA)  ; build/display data
"RTN","IBCNERP3",60,0)
 ;
"RTN","IBCNERP3",61,0)
 I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERP3",62,0)
 S (CNFLG,ERFLG)=0
"RTN","IBCNERP3",63,0)
 I $Y+1>MAX!('PGC) D HEADER I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERP3",64,0)
 W !,?(80-$L(EORMSG)\2),EORMSG
"RTN","IBCNERP3",65,0)
PRINTX ;
"RTN","IBCNERP3",66,0)
 Q
"RTN","IBCNERP3",67,0)
 ;
"RTN","IBCNERP3",68,0)
HEADER ; Print hdr info
"RTN","IBCNERP3",69,0)
 N X,Y,DIR,DTOUT,DUOUT,OFFSET,HDR,LIN,HDR
"RTN","IBCNERP3",70,0)
 I CRT,PGC>0,'$D(ZTQUEUED) D  I PXT G HEADERX
"RTN","IBCNERP3",71,0)
 . I MAX<51 F LIN=1:1:(MAX-$Y) W !
"RTN","IBCNERP3",72,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERP3",73,0)
 . I $D(DTOUT)!($D(DUOUT)) S PXT=1 Q
"RTN","IBCNERP3",74,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD() S ZTSTOP=1 G HEADERX
"RTN","IBCNERP3",75,0)
 S PGC=PGC+1
"RTN","IBCNERP3",76,0)
 W @IOF,!,?1,$S($G(IPRF)=1:"eIV Inactive Policy Report",$G(IPRF)=2:"eIV Ambiguous Policy Report",1:"eIV Response Report") I TRC'="" W " by Trace #"
"RTN","IBCNERP3",77,0)
 S HDR=$$FMTE^XLFDT($$NOW^XLFDT,1)_"  Page: "_PGC,OFFSET=79-$L(HDR)
"RTN","IBCNERP3",78,0)
 W ?OFFSET,HDR
"RTN","IBCNERP3",79,0)
 I TRC'="" S HDR="Trace #: "_TRC,OFFSET=80-$L(HDR)\2 W !,?OFFSET,HDR
"RTN","IBCNERP3",80,0)
 I TRC="" D
"RTN","IBCNERP3",81,0)
 . W !,?1,"Sorted by: "_$S(SRT=1:"Payer",1:"Patient")_" Name"
"RTN","IBCNERP3",82,0)
 . S HDR="Responses Displayed: "_$S(TYP="M":"Most Recent",1:"All")
"RTN","IBCNERP3",83,0)
 . S OFFSET=79-$L(HDR)
"RTN","IBCNERP3",84,0)
 . W ?OFFSET,HDR
"RTN","IBCNERP3",85,0)
 . I $G(IPRF)=1 W !,?1,"Earliest Policy Expiration Date: ",$$FMTE^XLFDT(EXP,"5Z"),!
"RTN","IBCNERP3",86,0)
 . S HDR=$$FMTE^XLFDT(BDT,"5Z")_" - "_$$FMTE^XLFDT(EDT,"5Z")
"RTN","IBCNERP3",87,0)
 . S OFFSET=80-$L(HDR)\2
"RTN","IBCNERP3",88,0)
 . W !,?OFFSET,HDR
"RTN","IBCNERP3",89,0)
 . ; Disp SORT1 rng
"RTN","IBCNERP3",90,0)
 . S HDR=""
"RTN","IBCNERP3",91,0)
 . I SRT=1,PYR="" S HDR="All Payers"
"RTN","IBCNERP3",92,0)
 . I SRT=2,PAT="" S HDR="All Patients"
"RTN","IBCNERP3",93,0)
 . I HDR="" D
"RTN","IBCNERP3",94,0)
 ..  I SRT=1 S HDR=$P($G(^IBE(365.12,PYR,0)),U,1) Q
"RTN","IBCNERP3",95,0)
 ..  S HDR=$P($G(^DPT(PAT,0)),U,1)
"RTN","IBCNERP3",96,0)
 . S OFFSET=80-$L(HDR)\2
"RTN","IBCNERP3",97,0)
 . W !,?OFFSET,HDR
"RTN","IBCNERP3",98,0)
 . ; Disp SORT2 rng
"RTN","IBCNERP3",99,0)
 . S HDR=""
"RTN","IBCNERP3",100,0)
 . I SRT=1,PAT="" S HDR="All Patients"
"RTN","IBCNERP3",101,0)
 . I SRT=2,PYR="" S HDR="All Payers"
"RTN","IBCNERP3",102,0)
 . I HDR="" D
"RTN","IBCNERP3",103,0)
 .. I SRT=1 S HDR=$P($G(^DPT(PAT,0)),U,1) Q
"RTN","IBCNERP3",104,0)
 .. S HDR=$P($G(^IBE(365.12,PYR,0)),U,1)
"RTN","IBCNERP3",105,0)
 . S OFFSET=80-$L(HDR)\2
"RTN","IBCNERP3",106,0)
 . W !,?OFFSET,HDR
"RTN","IBCNERP3",107,0)
 W !
"RTN","IBCNERP3",108,0)
 ; Build disp
"RTN","IBCNERP3",109,0)
 I SORT1'="",SORT2'="" D
"RTN","IBCNERP3",110,0)
 . W !,?1,$$FO^IBCNEUT1($S(TRC'=""!(SRT=1):"  Payer: ",1:"Patient: "),9)_$E(PRT1,1,69)
"RTN","IBCNERP3",111,0)
 . W !,?1,$$FO^IBCNEUT1($S(TRC'=""!(SRT=1):"Patient: ",1:"  Payer: "),9)_$E(PRT2,1,69)
"RTN","IBCNERP3",112,0)
 . W !
"RTN","IBCNERP3",113,0)
HEADERX ;
"RTN","IBCNERP3",114,0)
 Q
"RTN","IBCNERP3",115,0)
 ;
"RTN","IBCNERP3",116,0)
LINE(DISPDATA) ;  Print data
"RTN","IBCNERP3",117,0)
 N LNCT,LNTOT,NWPG
"RTN","IBCNERP3",118,0)
 S LNTOT=+$O(DISPDATA(""),-1)
"RTN","IBCNERP3",119,0)
 S (CNFLG,ERFLG,NWPG)=0
"RTN","IBCNERP3",120,0)
 F LNCT=1:1:LNTOT D  Q:$G(ZTSTOP)!PXT
"RTN","IBCNERP3",121,0)
 . I $Y+1>MAX!('PGC) D HEADER S NWPG=1 I $G(ZTSTOP)!PXT Q
"RTN","IBCNERP3",122,0)
 . I DISPDATA(LNCT)="Contact Information:"!(DISPDATA(LNCT)="Error Information:"),$Y+3>MAX S (CNFLG,ERFLG)=0 D HEADER S NWPG=1 I $G(ZTSTOP)!PXT Q
"RTN","IBCNERP3",123,0)
 . I CNFLG,DISPDATA(LNCT)="",$G(DISPDATA(LNCT+1))="Error Information:" S CNFLG=0
"RTN","IBCNERP3",124,0)
 . I NWPG,CNFLG W !,?1,"Contact Information: (cont'd)",!
"RTN","IBCNERP3",125,0)
 . I NWPG,ERFLG W !,?1,"Error Information: (cont'd)",!
"RTN","IBCNERP3",126,0)
 . I 'NWPG!(NWPG&(DISPDATA(LNCT)'="")) W !,?1,DISPDATA(LNCT)
"RTN","IBCNERP3",127,0)
 . I NWPG S NWPG=0
"RTN","IBCNERP3",128,0)
 . I DISPDATA(LNCT)["Contact Information:" S ERFLG=0,CNFLG=1
"RTN","IBCNERP3",129,0)
 . I DISPDATA(LNCT)["Error Information:" S CNFLG=0,ERFLG=1
"RTN","IBCNERP3",130,0)
 . Q
"RTN","IBCNERP3",131,0)
 S (CNFLG,ERFLG)=0
"RTN","IBCNERP3",132,0)
LINEX ; 
"RTN","IBCNERP3",133,0)
 Q
"RTN","IBCNERP3",134,0)
 ;
"RTN","IBCNERP3",135,0)
SSDB ; Display last 4 digits of SSN and DOB to facilitate pt. identification
"RTN","IBCNERP3",136,0)
 ; $$SSN^IBCNEDEQ(DFN) returns SSN followed by DOB
"RTN","IBCNERP3",137,0)
 ;
"RTN","IBCNERP3",138,0)
 N DFN
"RTN","IBCNERP3",139,0)
 S DFN=$P($G(^TMP($J,RTN,SORT1,SORT2,CNT,0)),U,2)
"RTN","IBCNERP3",140,0)
 I DFN D
"RTN","IBCNERP3",141,0)
 . I SRT=1!TRC S PRT2=OPRT2_$$SSN^IBCNEDEQ(DFN) Q
"RTN","IBCNERP3",142,0)
 . S PRT1=OPRT1_$$SSN^IBCNEDEQ(DFN)
"RTN","IBCNERP3",143,0)
 Q
"RTN","IBCNERP4")
0^23^B61656289^B61874953
"RTN","IBCNERP4",1,0)
IBCNERP4 ;DAOU/BHS - IBCNE USER INTERFACE eIV PAYER REPORT ;03-JUN-2002
"RTN","IBCNERP4",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,300,416**;21-MAR-94;Build 58
"RTN","IBCNERP4",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERP4",4,0)
 ;
"RTN","IBCNERP4",5,0)
 ; eIV - Insurance Verification Interface
"RTN","IBCNERP4",6,0)
 ;
"RTN","IBCNERP4",7,0)
 ; Input parameter: N/A
"RTN","IBCNERP4",8,0)
 ; Other relevant variables:
"RTN","IBCNERP4",9,0)
 ;   IBCNERTN = "IBCNERP4" (current routine name for queueing the 
"RTN","IBCNERP4",10,0)
 ;                          COMPILE process)
"RTN","IBCNERP4",11,0)
 ;   IBCNESPC("BEGDT") = start date for date range
"RTN","IBCNERP4",12,0)
 ;   IBCNESPC("ENDDT") = end date for date range
"RTN","IBCNERP4",13,0)
 ;   IBCNESPC("PYR") = payer ien for report, if = "", then include all
"RTN","IBCNERP4",14,0)
 ;   IBCNESPC("SORT") = 1 - Payer name OR 2 - Total Inqs (PAYER)
"RTN","IBCNERP4",15,0)
 ;   IBCNESPC("DTL") = 1 - YES OR 0 - NO  Include Rejection Detail in
"RTN","IBCNERP4",16,0)
 ;                     report output - rejections broken down by code
"RTN","IBCNERP4",17,0)
 ;
"RTN","IBCNERP4",18,0)
 ; Enter only from EN tag
"RTN","IBCNERP4",19,0)
 ; 
"RTN","IBCNERP4",20,0)
 ; Added tag DATA as split out from program IBCNERP5 for size restrictions
"RTN","IBCNERP4",21,0)
 QUIT
"RTN","IBCNERP4",22,0)
 ;
"RTN","IBCNERP4",23,0)
 ; Entry point
"RTN","IBCNERP4",24,0)
EN ;
"RTN","IBCNERP4",25,0)
 ; Initialize variables
"RTN","IBCNERP4",26,0)
 NEW STOP,IBCNERTN,POP,IBCNESPC
"RTN","IBCNERP4",27,0)
 ;
"RTN","IBCNERP4",28,0)
 S STOP=0
"RTN","IBCNERP4",29,0)
 S IBCNERTN="IBCNERP4"
"RTN","IBCNERP4",30,0)
 W @IOF
"RTN","IBCNERP4",31,0)
 W !,"eIV Payer Report",!
"RTN","IBCNERP4",32,0)
 W !,"Insurance verification inquiries are created daily."
"RTN","IBCNERP4",33,0)
 W !,"Select a date range in which inquiries were created by the eIV extracts."
"RTN","IBCNERP4",34,0)
 ;
"RTN","IBCNERP4",35,0)
 ; Prompts for Payer Report
"RTN","IBCNERP4",36,0)
 ; Date Range parameters
"RTN","IBCNERP4",37,0)
P10 D DTRANGE I STOP G EXIT
"RTN","IBCNERP4",38,0)
 ; Payer Selection parameter
"RTN","IBCNERP4",39,0)
P20 D PYRSEL^IBCNERP1 I STOP G:$$STOP^IBCNERP1 EXIT G P10
"RTN","IBCNERP4",40,0)
 ; Include Rejection Detail in Payer report
"RTN","IBCNERP4",41,0)
P30 D REJDTL I STOP G:$$STOP^IBCNERP1 EXIT G P20
"RTN","IBCNERP4",42,0)
 ; Sort by parameter - Payer or Total Inquiries
"RTN","IBCNERP4",43,0)
P40 D SORT I STOP G:$$STOP^IBCNERP1 EXIT G P30
"RTN","IBCNERP4",44,0)
 ; Select the output device
"RTN","IBCNERP4",45,0)
P100 D DEVICE^IBCNERP1(IBCNERTN,.IBCNESPC) I STOP G:$$STOP^IBCNERP1 EXIT G P40
"RTN","IBCNERP4",46,0)
 ;
"RTN","IBCNERP4",47,0)
EXIT ; Quit this routine
"RTN","IBCNERP4",48,0)
 QUIT
"RTN","IBCNERP4",49,0)
 ;
"RTN","IBCNERP4",50,0)
 ;
"RTN","IBCNERP4",51,0)
SORT ; Prompt to allow users to sort the report
"RTN","IBCNERP4",52,0)
 ;  by Payer(default) OR Total Inquiries, then Payer
"RTN","IBCNERP4",53,0)
 ; Initialize variables
"RTN","IBCNERP4",54,0)
 NEW DIR,X,Y,DIRUT
"RTN","IBCNERP4",55,0)
 ;
"RTN","IBCNERP4",56,0)
 S DIR(0)="S^1:Payer Name;2:Total Inquiries"
"RTN","IBCNERP4",57,0)
 S DIR("A")=" Select the primary sort field"
"RTN","IBCNERP4",58,0)
 S DIR("B")=1
"RTN","IBCNERP4",59,0)
 S DIR("?",1)="  1 - Payer Name is the only sort. (Default)"
"RTN","IBCNERP4",60,0)
 S DIR("?",2)="  2 - Total Inquiries is the primary sort, Payer Name is"
"RTN","IBCNERP4",61,0)
 S DIR("?")="      the secondary sort."
"RTN","IBCNERP4",62,0)
 D ^DIR K DIR
"RTN","IBCNERP4",63,0)
 I $D(DIRUT) S STOP=1 G SORTX
"RTN","IBCNERP4",64,0)
 S IBCNESPC("SORT")=Y
"RTN","IBCNERP4",65,0)
 ;
"RTN","IBCNERP4",66,0)
SORTX ; SORT exit point
"RTN","IBCNERP4",67,0)
 QUIT
"RTN","IBCNERP4",68,0)
 ;
"RTN","IBCNERP4",69,0)
 ;
"RTN","IBCNERP4",70,0)
REJDTL ; Prompt to allow users to include the Rejection Detail in the report
"RTN","IBCNERP4",71,0)
 ; Initialize variables
"RTN","IBCNERP4",72,0)
 NEW DIR,X,Y,DIRUT
"RTN","IBCNERP4",73,0)
 ;
"RTN","IBCNERP4",74,0)
 S DIR(0)="Y"
"RTN","IBCNERP4",75,0)
 S DIR("A")="      Include Rejection Detail"
"RTN","IBCNERP4",76,0)
 S DIR("B")="NO"
"RTN","IBCNERP4",77,0)
 S DIR("?",1)="  N - No, exclude Rejection Detail totals from report. (Default)"
"RTN","IBCNERP4",78,0)
 S DIR("?")="  Y - Yes, include Rejection Detail totals in report."
"RTN","IBCNERP4",79,0)
 D ^DIR K DIR
"RTN","IBCNERP4",80,0)
 I $D(DIRUT) S STOP=1 G REJDTLX
"RTN","IBCNERP4",81,0)
 S IBCNESPC("DTL")=Y
"RTN","IBCNERP4",82,0)
 ;
"RTN","IBCNERP4",83,0)
REJDTLX ; REJDTL exit point
"RTN","IBCNERP4",84,0)
 QUIT
"RTN","IBCNERP4",85,0)
 ;
"RTN","IBCNERP4",86,0)
 ;
"RTN","IBCNERP4",87,0)
DTRANGE ; Determine the start and end dates for the date range parameter
"RTN","IBCNERP4",88,0)
 ; Initialize variables
"RTN","IBCNERP4",89,0)
 NEW X,Y,DIRUT
"RTN","IBCNERP4",90,0)
 ;
"RTN","IBCNERP4",91,0)
 W !
"RTN","IBCNERP4",92,0)
 ;
"RTN","IBCNERP4",93,0)
 S DIR(0)="D^::EX"
"RTN","IBCNERP4",94,0)
 S DIR("A")="Start DATE"
"RTN","IBCNERP4",95,0)
 S DIR("?",1)="   Please enter a valid date for which an eIV Inquiry"
"RTN","IBCNERP4",96,0)
 S DIR("?")="   would have been created."
"RTN","IBCNERP4",97,0)
 D ^DIR K DIR
"RTN","IBCNERP4",98,0)
 I $D(DIRUT) S STOP=1 G DTRANGX
"RTN","IBCNERP4",99,0)
 S IBCNESPC("BEGDT")=Y
"RTN","IBCNERP4",100,0)
 ; End date
"RTN","IBCNERP4",101,0)
DTRANG1 S DIR(0)="D^::EX"
"RTN","IBCNERP4",102,0)
 S DIR("A")="  End DATE"
"RTN","IBCNERP4",103,0)
 S DIR("?",1)="   Please enter a valid date for which an eIV Inquiry"
"RTN","IBCNERP4",104,0)
 S DIR("?",2)="   would have been created.  This date must not precede"
"RTN","IBCNERP4",105,0)
 S DIR("?")="   the Start Date."
"RTN","IBCNERP4",106,0)
 D ^DIR K DIR
"RTN","IBCNERP4",107,0)
 I $D(DIRUT) S STOP=1 G DTRANGX
"RTN","IBCNERP4",108,0)
 I Y<IBCNESPC("BEGDT") D  G DTRANG1
"RTN","IBCNERP4",109,0)
 . W !,"     End Date must not precede the Start Date."
"RTN","IBCNERP4",110,0)
 . W !,"     Please reenter."
"RTN","IBCNERP4",111,0)
 S IBCNESPC("ENDDT")=Y
"RTN","IBCNERP4",112,0)
 ;
"RTN","IBCNERP4",113,0)
DTRANGX ; DTRANGE exit point
"RTN","IBCNERP4",114,0)
 QUIT
"RTN","IBCNERP4",115,0)
 ;
"RTN","IBCNERP4",116,0)
 ;
"RTN","IBCNERP4",117,0)
 ; called from IBCNERP5
"RTN","IBCNERP4",118,0)
 ; Loop through the eIV Response File (#365) 
"RTN","IBCNERP4",119,0)
 ;  By DATE/TIME RECEIVED & PAYER & PATIENT Cross-Reference ("AE")
"RTN","IBCNERP4",120,0)
 ;  
"RTN","IBCNERP4",121,0)
DATA N RDATA,RDATA1,TQDATA,IBCNEDT,IBCNEPTR,IBCNEPAT,RPYRIEN,RPYNM,PYRIEN,IBPNM,ERRCON
"RTN","IBCNERP4",122,0)
 N IBPIEN,PC,ERR,ERRTXT,PYRNM,APIEN,IBCNEPTD,TQIEN
"RTN","IBCNERP4",123,0)
 S IBCNEDT=$O(^IBCN(365,"AD",IBCNEDT1),-1)
"RTN","IBCNERP4",124,0)
 F  S IBCNEDT=$O(^IBCN(365,"AD",IBCNEDT)) Q:IBCNEDT=""!($P(IBCNEDT,".",1)>IBCNEDT2)  D  Q:$G(ZTSTOP)
"RTN","IBCNERP4",125,0)
 . I $D(ZTQUEUED),$$S^%ZTLOAD() S ZTSTOP=1 QUIT
"RTN","IBCNERP4",126,0)
 . S IBCNEPAT=0
"RTN","IBCNERP4",127,0)
 . F  S IBCNEPAT=$O(^IBCN(365,"AD",IBCNEDT,IBCNEPAT)) Q:'IBCNEPAT  D  Q:$G(ZTSTOP)
"RTN","IBCNERP4",128,0)
 .. S IBCNEPTD=0
"RTN","IBCNERP4",129,0)
 .. F  S IBCNEPTD=$O(^IBCN(365,"AD",IBCNEDT,IBCNEPAT,IBCNEPTD)) Q:'IBCNEPTD  D  Q:$G(ZTSTOP)
"RTN","IBCNERP4",130,0)
 ... S IBCNEPTR=0
"RTN","IBCNERP4",131,0)
 ... F  S IBCNEPTR=$O(^IBCN(365,"AD",IBCNEDT,IBCNEPAT,IBCNEPTD,IBCNEPTR)) Q:'IBCNEPTR  D  Q:$G(ZTSTOP)
"RTN","IBCNERP4",132,0)
 .... ; Get data from Resp File
"RTN","IBCNERP4",133,0)
 .... S RDATA=$G(^IBCN(365,IBCNEPTR,0))
"RTN","IBCNERP4",134,0)
 .... I RDATA="" Q
"RTN","IBCNERP4",135,0)
 .... ; ONLY select Transmission status 3
"RTN","IBCNERP4",136,0)
 .... I $P($G(RDATA),U,6)'=3 Q
"RTN","IBCNERP4",137,0)
 .... ; Determine Payer name from Payer File (#365.12)
"RTN","IBCNERP4",138,0)
 .... S RPYRIEN=$P($G(RDATA),U,3)
"RTN","IBCNERP4",139,0)
 .... I 'RPYRIEN Q
"RTN","IBCNERP4",140,0)
 .... ; Check payer filter
"RTN","IBCNERP4",141,0)
 .... I IBCNEPY'="",RPYRIEN'=IBCNEPY Q
"RTN","IBCNERP4",142,0)
 .... S RPYNM=$P($G(^IBE(365.12,RPYRIEN,0)),U)
"RTN","IBCNERP4",143,0)
 .... I RPYNM="" Q
"RTN","IBCNERP4",144,0)
 .... ; link to TQ file
"RTN","IBCNERP4",145,0)
 .... S TQIEN=$P($G(RDATA),U,5)
"RTN","IBCNERP4",146,0)
 .... I TQIEN="" Q
"RTN","IBCNERP4",147,0)
 .... ; Get data from TQ file (365.1)
"RTN","IBCNERP4",148,0)
 .... S TQDATA=$G(^IBCN(365.1,TQIEN,0))
"RTN","IBCNERP4",149,0)
 .... I TQDATA="" Q
"RTN","IBCNERP4",150,0)
 .... ; Get TQ Payer from (365.1) File
"RTN","IBCNERP4",151,0)
 .... S PYRIEN=$P($G(TQDATA),U,3)
"RTN","IBCNERP4",152,0)
 .... S PYRNM=$P($G(^IBE(365.12,PYRIEN,0)),U)
"RTN","IBCNERP4",153,0)
 .... ;  Cancelled (7) - Payer deactivated
"RTN","IBCNERP4",154,0)
 .... I $P($G(TQDATA),U,4)=7 Q
"RTN","IBCNERP4",155,0)
 .... ; Determine Deactivation DTM for eIV application
"RTN","IBCNERP4",156,0)
 .... I RPYNM'="~NO PAYER" D
"RTN","IBCNERP4",157,0)
 ..... S APIEN=$$PYRAPP^IBCNEUT5("IIV",RPYRIEN)
"RTN","IBCNERP4",158,0)
 ..... I APIEN,$P($G(^IBE(365.12,RPYRIEN,1,APIEN,0)),U,11) S $P(^TMP($J,IBCNERTN,RPYNM,RPYRIEN,"*"),U,11)=$P($G(^IBE(365.12,RPYRIEN,1,APIEN,0)),U,12)
"RTN","IBCNERP4",159,0)
 .... ; Determine Deactivation DTM for eIV application
"RTN","IBCNERP4",160,0)
 .... I PYRNM'="~NO PAYER",PYRIEN'=RPYRIEN D
"RTN","IBCNERP4",161,0)
 ..... S APIEN=$$PYRAPP^IBCNEUT5("IIV",PYRIEN)
"RTN","IBCNERP4",162,0)
 ..... I APIEN,$P($G(^IBE(365.12,PYRIEN,1,APIEN,0)),U,11) S $P(^TMP($J,IBCNERTN,PYRNM,PYRIEN,"*"),U,11)=$P($G(^IBE(365.12,PYRIEN,1,APIEN,0)),U,12)
"RTN","IBCNERP4",163,0)
 .... ; Get error text
"RTN","IBCNERP4",164,0)
 .... S ERRTXT=$G(^IBCN(365,IBCNEPTR,4))
"RTN","IBCNERP4",165,0)
 .... ; Now get the data from Response file for the report
"RTN","IBCNERP4",166,0)
 .... S RDATA1=$G(^IBCN(365,IBCNEPTR,1)),ERRCON=$P($G(RDATA1),U,14)
"RTN","IBCNERP4",167,0)
 .... ; Increment for non-error (GOOD) response and quit
"RTN","IBCNERP4",168,0)
 .... I ERRCON="",ERRTXT="" D  Q
"RTN","IBCNERP4",169,0)
 ..... S $P(^TMP($J,IBCNERTN,RPYNM,RPYRIEN,"*"),U,6)=$P($G(^TMP($J,IBCNERTN,RPYNM,RPYRIEN,"*")),U,6)+1
"RTN","IBCNERP4",170,0)
 ..... ; if TQ payer was ~NO PAYER then also increment ~NO PAYER good count
"RTN","IBCNERP4",171,0)
 ..... I IBCNEPY="",(RPYRIEN'=PYRIEN),(PYRNM="~NO PAYER") S $P(^TMP($J,IBCNERTN,PYRNM,PYRIEN,"*"),U,6)=$P($G(^TMP($J,IBCNERTN,PYRNM,PYRIEN,"*")),U,6)+1
"RTN","IBCNERP4",172,0)
 .... ; Rejection is defined as having a value in the Error Condition field or Error Text field
"RTN","IBCNERP4",173,0)
 .... ; Increment for error response
"RTN","IBCNERP4",174,0)
 .... S $P(^TMP($J,IBCNERTN,RPYNM,RPYRIEN,"*"),U,7)=$P($G(^TMP($J,IBCNERTN,RPYNM,RPYRIEN,"*")),U,7)+1
"RTN","IBCNERP4",175,0)
 .... ; if TQ payer was ~NO PAYER then also increment ~NO PAYER error count
"RTN","IBCNERP4",176,0)
 .... I IBCNEPY="",(RPYRIEN'=PYRIEN),(PYRNM="~NO PAYER") S $P(^TMP($J,IBCNERTN,PYRNM,PYRIEN,"*"),U,7)=$P($G(^TMP($J,IBCNERTN,PYRNM,PYRIEN,"*")),U,7)+1
"RTN","IBCNERP4",177,0)
 .... ; Store rejection detail only if user requested it
"RTN","IBCNERP4",178,0)
 .... I 'IBCNEDTL Q
"RTN","IBCNERP4",179,0)
 .... I ERRCON S ^TMP($J,IBCNERTN,RPYNM,RPYRIEN,"*",ERRCON)=$G(^TMP($J,IBCNERTN,RPYNM,RPYRIEN,"*",ERRCON))+1
"RTN","IBCNERP4",180,0)
 .... I 'ERRCON,ERRTXT'="" S ^TMP($J,IBCNERTN,RPYNM,RPYRIEN,"*",0_U_ERRTXT)=$G(^TMP($J,IBCNERTN,RPYNM,RPYRIEN,"*",0_U_ERRTXT))+1
"RTN","IBCNERP4",181,0)
 .... I IBCNEPY="",(RPYRIEN'=PYRIEN),(PYRNM="~NO PAYER") D
"RTN","IBCNERP4",182,0)
 .... . I ERRCON S ^TMP($J,IBCNERTN,PYRNM,PYRIEN,"*",ERRCON)=$G(^TMP($J,IBCNERTN,PYRNM,PYRIEN,"*",ERRCON))+1
"RTN","IBCNERP4",183,0)
 .... . I 'ERRCON,ERRTXT'="" S ^TMP($J,IBCNERTN,PYRNM,PYRIEN,"*",0_U_ERRTXT)=$G(^TMP($J,IBCNERTN,PYRNM,PYRIEN,"*",0_U_ERRTXT))+1
"RTN","IBCNERP4",184,0)
 Q
"RTN","IBCNERP5")
0^53^B43579817^B48772624
"RTN","IBCNERP5",1,0)
IBCNERP5 ;DAOU/BHS - IBCNE eIV PAYER REPORT COMPILE ;03-JUN-2002
"RTN","IBCNERP5",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,300,416**;21-MAR-94;Build 58
"RTN","IBCNERP5",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERP5",4,0)
 ;
"RTN","IBCNERP5",5,0)
 ; eIV - Insurance Verification Interface
"RTN","IBCNERP5",6,0)
 ;
"RTN","IBCNERP5",7,0)
 ; Input variables from IBCNERP4:
"RTN","IBCNERP5",8,0)
 ;   IBCNERTN = "IBCNERP4"
"RTN","IBCNERP5",9,0)
 ;   IBCNESPC("BEGDT") = Start Date for date range
"RTN","IBCNERP5",10,0)
 ;   IBCNESPC("ENDDT") = End Date for date range
"RTN","IBCNERP5",11,0)
 ;   IBCNESPC("PYR") = Payer IEN for report, if = "", then include all
"RTN","IBCNERP5",12,0)
 ;   IBCNESPC("SORT") = 1 - Payer OR 2 - Total Inquiries
"RTN","IBCNERP5",13,0)
 ;   IBCNESPC("DTL") = 1 - YES OR 0 - NO - include Rejection Detail?
"RTN","IBCNERP5",14,0)
 ; Output variables passed to IBCNERP6:
"RTN","IBCNERP5",15,0)
 ;   ^TMP($J,IBCNERTN,SORT1,SORT2,SORT3)=InqCreatedCount^InqCancelledCt^
"RTN","IBCNERP5",16,0)
 ;                                       InqQueuedCt^1stTransCount^
"RTN","IBCNERP5",17,0)
 ;                                       RetryTransCt^Non-ErrorRespCt^
"RTN","IBCNERP5",18,0)
 ;                                       ErrorRespCount^TotRespTime-days^
"RTN","IBCNERP5",19,0)
 ;                                       CommFailRespCount^PendRespCount^
"RTN","IBCNERP5",20,0)
 ;                                       eIVDeactivatedDt
"RTN","IBCNERP5",21,0)
 ;        IBCNERTN = "IBCNERP4"
"RTN","IBCNERP5",22,0)
 ;        SORT1 = PayerName (SORT=1) or -InquiryCount(SORT=2)
"RTN","IBCNERP5",23,0)
 ;        SORT2 = PayerIEN (SORT=1) or PayerName (SORT=2)
"RTN","IBCNERP5",24,0)
 ;        SORT3 = "*" (SORT=1) or PayerIEN (SORT=2)
"RTN","IBCNERP5",25,0)
 ;   ^TMP($J,IBCNERTN,SORT1,SORT2,SORT3,ERRCD)=RespCount
"RTN","IBCNERP5",26,0)
 ;        (see above)
"RTN","IBCNERP5",27,0)
 ;        ERRCD = Error Condition code (ptr to 365.018) or Error Text
"RTN","IBCNERP5",28,0)
 ;                from the Eligibility Communicator (4.01)
"RTN","IBCNERP5",29,0)
 ;
"RTN","IBCNERP5",30,0)
 ; Must call at EN tag
"RTN","IBCNERP5",31,0)
 Q
"RTN","IBCNERP5",32,0)
 ;
"RTN","IBCNERP5",33,0)
EN(IBCNERTN,IBCNESPC) ; Entry point
"RTN","IBCNERP5",34,0)
 ;
"RTN","IBCNERP5",35,0)
 ; Initialize variables
"RTN","IBCNERP5",36,0)
 NEW IBCNEDT,IBCNEDT1,IBCNEDT2,IBCNEPY,IBCNEPYR,IBCNEPTR
"RTN","IBCNERP5",37,0)
 NEW IBCNETOT,IBCNESRT,IBCNEDTL,RPTDATA,PYRIEN,INQS,IEN
"RTN","IBCNERP5",38,0)
 NEW IBPNM,IBPIEN,ERR,PC,PYR
"RTN","IBCNERP5",39,0)
 ;
"RTN","IBCNERP5",40,0)
 I '$D(ZTQUEUED),$G(IOST)["C-" W !!,"Compiling report data ..."
"RTN","IBCNERP5",41,0)
 ;
"RTN","IBCNERP5",42,0)
 ; Total responses selected
"RTN","IBCNERP5",43,0)
 S IBCNETOT=0
"RTN","IBCNERP5",44,0)
 ;
"RTN","IBCNERP5",45,0)
 ; Kill scratch globals
"RTN","IBCNERP5",46,0)
 KILL ^TMP($J,IBCNERTN),^TMP($J,IBCNERTN_"X")
"RTN","IBCNERP5",47,0)
 ;
"RTN","IBCNERP5",48,0)
 ; Initialize looping variables
"RTN","IBCNERP5",49,0)
 S IBCNEDT2=$G(IBCNESPC("ENDDT"))
"RTN","IBCNERP5",50,0)
 S IBCNEDT1=$G(IBCNESPC("BEGDT"))
"RTN","IBCNERP5",51,0)
 S IBCNEPY=$G(IBCNESPC("PYR"))
"RTN","IBCNERP5",52,0)
 S IBCNESRT=$G(IBCNESPC("SORT"))
"RTN","IBCNERP5",53,0)
 S IBCNEDTL=$G(IBCNESPC("DTL"))
"RTN","IBCNERP5",54,0)
 ;
"RTN","IBCNERP5",55,0)
 ; Loop through the eIV Transmission Queue File (#365.1) 
"RTN","IBCNERP5",56,0)
 ;  by Date/Time Created Cross-Reference
"RTN","IBCNERP5",57,0)
 S IBCNEDT=$O(^IBCN(365.1,"AE",IBCNEDT1),-1)
"RTN","IBCNERP5",58,0)
 F  S IBCNEDT=$O(^IBCN(365.1,"AE",IBCNEDT)) Q:IBCNEDT=""!($P(IBCNEDT,".",1)>IBCNEDT2)  D  Q:$G(ZTSTOP)
"RTN","IBCNERP5",59,0)
 . S IBCNEPTR=0
"RTN","IBCNERP5",60,0)
 . F  S IBCNEPTR=$O(^IBCN(365.1,"AE",IBCNEDT,IBCNEPTR)) Q:'IBCNEPTR  D  Q:$G(ZTSTOP)
"RTN","IBCNERP5",61,0)
 . . ; Update selected count
"RTN","IBCNERP5",62,0)
 . . S IBCNETOT=IBCNETOT+1
"RTN","IBCNERP5",63,0)
 . . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 QUIT
"RTN","IBCNERP5",64,0)
 . . ; Determine Payer name from Payer File (#365.12)
"RTN","IBCNERP5",65,0)
 . . S PYRIEN=$P($G(^IBCN(365.1,IBCNEPTR,0)),U,3)
"RTN","IBCNERP5",66,0)
 . . I 'PYRIEN Q
"RTN","IBCNERP5",67,0)
 . . ; Check payer filter
"RTN","IBCNERP5",68,0)
 . . I IBCNEPY'="",PYRIEN'=IBCNEPY Q
"RTN","IBCNERP5",69,0)
 . . S IBCNEPYR=$P($G(^IBE(365.12,PYRIEN,0)),U)
"RTN","IBCNERP5",70,0)
 . . I IBCNEPYR="" Q
"RTN","IBCNERP5",71,0)
 . . ; Now get the data for the report - build RPTDATA
"RTN","IBCNERP5",72,0)
 . . KILL RPTDATA
"RTN","IBCNERP5",73,0)
 . . D GETDATA(IBCNEPTR,.RPTDATA,IBCNEDTL,IBCNEPYR,PYRIEN,IBCNEPY)
"RTN","IBCNERP5",74,0)
 . . ; Loop through results by Payer Name, Payer IEN
"RTN","IBCNERP5",75,0)
 . . S IBPNM=""
"RTN","IBCNERP5",76,0)
 . . F  S IBPNM=$O(RPTDATA(IBPNM)) Q:IBPNM=""  D
"RTN","IBCNERP5",77,0)
 . . . S IBPIEN=0
"RTN","IBCNERP5",78,0)
 . . . F  S IBPIEN=$O(RPTDATA(IBPNM,IBPIEN)) Q:'IBPIEN  D
"RTN","IBCNERP5",79,0)
 . . . . ; Store totals in global
"RTN","IBCNERP5",80,0)
 . . . . F PC=1:1:10 S $P(^TMP($J,IBCNERTN,IBPNM,IBPIEN,"*"),U,PC)=$P($G(^TMP($J,IBCNERTN,IBPNM,IBPIEN,"*")),U,PC)+$P(RPTDATA(IBPNM,IBPIEN),U,PC)
"RTN","IBCNERP5",81,0)
 . . . . ; Store deactivation date/time
"RTN","IBCNERP5",82,0)
 . . . . S $P(^TMP($J,IBCNERTN,IBPNM,IBPIEN,"*"),U,11)=$P(RPTDATA(IBPNM,IBPIEN),U,11)
"RTN","IBCNERP5",83,0)
 . . . . I 'IBCNEDTL Q
"RTN","IBCNERP5",84,0)
 . . . . ; Store rejection detail
"RTN","IBCNERP5",85,0)
 . . . . S ERR=""
"RTN","IBCNERP5",86,0)
 . . . . F  S ERR=$O(RPTDATA(IBPNM,IBPIEN,ERR)) Q:ERR=""  D
"RTN","IBCNERP5",87,0)
 . . . . .  S ^TMP($J,IBCNERTN,IBPNM,IBPIEN,"*",ERR)=$G(^TMP($J,IBCNERTN,IBPNM,IBPIEN,"*",ERR))+$G(RPTDATA(IBPNM,IBPIEN,ERR))
"RTN","IBCNERP5",88,0)
 . . Q
"RTN","IBCNERP5",89,0)
 . Q
"RTN","IBCNERP5",90,0)
 ;
"RTN","IBCNERP5",91,0)
 ; Call tag to find good/bad/rejection detail data from response file
"RTN","IBCNERP5",92,0)
 D DATA^IBCNERP4
"RTN","IBCNERP5",93,0)
 ;
"RTN","IBCNERP5",94,0)
 I $G(ZTSTOP)!(IBCNESRT=1) G EXIT
"RTN","IBCNERP5",95,0)
 ;
"RTN","IBCNERP5",96,0)
 ; Resort if sorted by Total Inquiries
"RTN","IBCNERP5",97,0)
 M ^TMP($J,IBCNERTN_"X")=^TMP($J,IBCNERTN)
"RTN","IBCNERP5",98,0)
 KILL ^TMP($J,IBCNERTN)
"RTN","IBCNERP5",99,0)
 S PYR=""
"RTN","IBCNERP5",100,0)
 F  S PYR=$O(^TMP($J,IBCNERTN_"X",PYR)) Q:PYR=""  D
"RTN","IBCNERP5",101,0)
 .  S IEN=0
"RTN","IBCNERP5",102,0)
 .  F  S IEN=$O(^TMP($J,IBCNERTN_"X",PYR,IEN)) Q:'IEN  D
"RTN","IBCNERP5",103,0)
 .  .  S INQS=-$G(^TMP($J,IBCNERTN_"X",PYR,IEN,"*"))
"RTN","IBCNERP5",104,0)
 .  .  M ^TMP($J,IBCNERTN,INQS,PYR,IEN)=^TMP($J,IBCNERTN_"X",PYR,IEN,"*")
"RTN","IBCNERP5",105,0)
 .  .  QUIT
"RTN","IBCNERP5",106,0)
 .  QUIT
"RTN","IBCNERP5",107,0)
 ; KILL temporary report global - used to resort
"RTN","IBCNERP5",108,0)
 KILL ^TMP($J,IBCNERTN_"X")
"RTN","IBCNERP5",109,0)
 ;
"RTN","IBCNERP5",110,0)
EXIT ; EN Exit point
"RTN","IBCNERP5",111,0)
 Q
"RTN","IBCNERP5",112,0)
 ;
"RTN","IBCNERP5",113,0)
 ;
"RTN","IBCNERP5",114,0)
GETDATA(IEN,RPTDATA,DTL,PYNM,PYIEN,PYR) ; Retrieve data for this inquiry and response(s)
"RTN","IBCNERP5",115,0)
 ; Output: 
"RTN","IBCNERP5",116,0)
 ;  RPTDATA(PayerName,PayerIEN) = Created(1)^Cancelled(0/1)^Queued(0/1)^
"RTN","IBCNERP5",117,0)
 ;   #1stTrans^#Retries^#Non-ErrorResponses^#ErrorResponses^
"RTN","IBCNERP5",118,0)
 ;   #ofDaysforResponses^#Timeouts^#Pending^DeactivationDTM
"RTN","IBCNERP5",119,0)
 ;  RPTDATA(PayerName,PayerIEN,ErrCond OR ErrText) = #ErrorResps subtotal
"RTN","IBCNERP5",120,0)
 ; Initialize variables
"RTN","IBCNERP5",121,0)
 NEW HLIEN,HLID,RIEN,RDATA0,RPYIEN,RPYNM,RDATA1,ERRTXT,X1,X2,FIRST,APIEN
"RTN","IBCNERP5",122,0)
 ;
"RTN","IBCNERP5",123,0)
 S RPTDATA(PYNM,PYIEN)=1
"RTN","IBCNERP5",124,0)
 ; Determine Deactivation DTM for eIV application
"RTN","IBCNERP5",125,0)
 S APIEN=$$PYRAPP^IBCNEUT5("IIV",PYIEN)
"RTN","IBCNERP5",126,0)
 I APIEN,$P($G(^IBE(365.12,PYIEN,1,APIEN,0)),U,11) S $P(RPTDATA(PYNM,PYIEN),U,11)=$P($G(^IBE(365.12,PYIEN,1,APIEN,0)),U,12)
"RTN","IBCNERP5",127,0)
 ; Logic by Transmission Status
"RTN","IBCNERP5",128,0)
 ;  Cancelled (7) - Payer deactivated
"RTN","IBCNERP5",129,0)
 I $P($G(^IBCN(365.1,IEN,0)),U,4)=7 S $P(RPTDATA(PYNM,PYIEN),U,2)=1 Q
"RTN","IBCNERP5",130,0)
 ;  Queued - no HL7 messages (# Transmissions = 0) - no multiples exist
"RTN","IBCNERP5",131,0)
 I '$P($G(^IBCN(365.1,IEN,2,0)),U,3) S $P(RPTDATA(PYNM,PYIEN),U,3)=1 Q
"RTN","IBCNERP5",132,0)
 ;  Sent processing - HL7 messages associated (# Transmissions > 0)
"RTN","IBCNERP5",133,0)
 S HLIEN=0,FIRST=1
"RTN","IBCNERP5",134,0)
 F  S HLIEN=$O(^IBCN(365.1,IEN,2,HLIEN)) Q:'HLIEN  D
"RTN","IBCNERP5",135,0)
 .  I 'FIRST S $P(RPTDATA(PYNM,PYIEN),U,5)=$P(RPTDATA(PYNM,PYIEN),U,5)+1
"RTN","IBCNERP5",136,0)
 .  I FIRST S $P(RPTDATA(PYNM,PYIEN),U,4)=$P(RPTDATA(PYNM,PYIEN),U,4)+1,FIRST=0
"RTN","IBCNERP5",137,0)
 .  ; Process response based on HL7 Message ID
"RTN","IBCNERP5",138,0)
 .  S HLID=$P($G(^IBCN(365.1,IEN,2,HLIEN,0)),U,2) I HLID="" Q
"RTN","IBCNERP5",139,0)
 .  ; Lookup responses by HL7 Message ID
"RTN","IBCNERP5",140,0)
 .  S RIEN=0
"RTN","IBCNERP5",141,0)
 .  F  S RIEN=$O(^IBCN(365,"B",HLID,RIEN)) Q:'RIEN  D
"RTN","IBCNERP5",142,0)
 .  .  S RDATA0=$G(^IBCN(365,RIEN,0))
"RTN","IBCNERP5",143,0)
 .  .  S RPYIEN=$P(RDATA0,U,3) I RPYIEN="" Q
"RTN","IBCNERP5",144,0)
 .  .  S RPYNM=$P($G(^IBE(365.12,RPYIEN,0)),U,1) I RPYNM="" Q
"RTN","IBCNERP5",145,0)
 .  .  ; Apply payer filter here, too!
"RTN","IBCNERP5",146,0)
 .  .  ; If there is a Payer filter, check against the IEN
"RTN","IBCNERP5",147,0)
 .  .  I PYR'="",RPYIEN'=PYR Q
"RTN","IBCNERP5",148,0)
 .  .  ; Determine Deactivation DTM for eIV application
"RTN","IBCNERP5",149,0)
 .  .  S APIEN=$$PYRAPP^IBCNEUT5("IIV",RPYIEN)
"RTN","IBCNERP5",150,0)
 .  .  I APIEN,$P($G(^IBE(365.12,RPYIEN,1,APIEN,0)),U,11) S $P(RPTDATA(RPYNM,RPYIEN),U,11)=$P($G(^IBE(365.12,RPYIEN,1,APIEN,0)),U,12)
"RTN","IBCNERP5",151,0)
 .  .  S RDATA1=$G(^IBCN(365,RIEN,1))
"RTN","IBCNERP5",152,0)
 .  .  S ERRTXT=$G(^IBCN(365,RIEN,4))
"RTN","IBCNERP5",153,0)
 .  .  ; Transmitted (Pending)
"RTN","IBCNERP5",154,0)
 .  .  I $P(RDATA0,U,6)=2 D  Q
"RTN","IBCNERP5",155,0)
 .  .  . ; Increment for response pending 
"RTN","IBCNERP5",156,0)
 .  .  . S $P(RPTDATA(RPYNM,RPYIEN),U,10)=$P($G(RPTDATA(RPYNM,RPYIEN)),U,10)+1
"RTN","IBCNERP5",157,0)
 .  .  ; Timeout (Communication Failure)
"RTN","IBCNERP5",158,0)
 .  .  I $P(RDATA0,U,6)=5 D  Q
"RTN","IBCNERP5",159,0)
 .  .  . ; Increment for response timeout 
"RTN","IBCNERP5",160,0)
 .  .  . S $P(RPTDATA(RPYNM,RPYIEN),U,9)=$P($G(RPTDATA(RPYNM,RPYIEN)),U,9)+1
"RTN","IBCNERP5",161,0)
 .  .  ; Response Received - gather additional information
"RTN","IBCNERP5",162,0)
 .  .  I $P(RDATA0,U,6)=3 D  Q
"RTN","IBCNERP5",163,0)
 .  .  . ; Determine response time (in days) as difference between 
"RTN","IBCNERP5",164,0)
 .  .  . ;  eIV Response File - Date/Time Response Received and
"RTN","IBCNERP5",165,0)
 .  .  . ;                      Date/Time Response Created (based on HL7)
"RTN","IBCNERP5",166,0)
 .  .  . S X1=$P(RDATA0,U,8)
"RTN","IBCNERP5",167,0)
 .  .  . S X2=$P(RDATA0,U,7)
"RTN","IBCNERP5",168,0)
 .  .  . ; Determine date difference in days
"RTN","IBCNERP5",169,0)
 .  .  . S $P(RPTDATA(RPYNM,RPYIEN),U,8)=$P($G(RPTDATA(RPYNM,RPYIEN)),U,8)+$$FMDIFF^XLFDT(X2,X1,1)
"RTN","IBCNERP5",170,0)
 ;
"RTN","IBCNERP5",171,0)
GETDATX ; GETDATA exit point
"RTN","IBCNERP5",172,0)
 Q
"RTN","IBCNERP5",173,0)
 ;
"RTN","IBCNERP5",174,0)
 ;
"RTN","IBCNERP6")
0^24^B74223457^B76775707
"RTN","IBCNERP6",1,0)
IBCNERP6 ;DAOU/BHS - eIV PAYER REPORT PRINT ;05-JUN-2002
"RTN","IBCNERP6",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416**;21-MAR-94;Build 58
"RTN","IBCNERP6",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERP6",4,0)
 ;
"RTN","IBCNERP6",5,0)
 ; eIV - Insurance Verification Interface
"RTN","IBCNERP6",6,0)
 ;
"RTN","IBCNERP6",7,0)
 ; Called by IBCNERPA
"RTN","IBCNERP6",8,0)
 ;
"RTN","IBCNERP6",9,0)
 ; Input variables from IBCNERP4 and IBCNERP5:
"RTN","IBCNERP6",10,0)
 ;   IBCNERTN = "IBCNERP4"
"RTN","IBCNERP6",11,0)
 ;   IBCNESPC("BEGDT") = Start Date for dt range
"RTN","IBCNERP6",12,0)
 ;   IBCNESPC("ENDDT") = End Date for dt range
"RTN","IBCNERP6",13,0)
 ;   IBCNESPC("PYR") = Payer IEN for report, if = "", then include all
"RTN","IBCNERP6",14,0)
 ;   IBCNESPC("SORT") = 1 - Payer name OR 2 - Total Inquiries
"RTN","IBCNERP6",15,0)
 ;   IBCNESPC("DTL")= 1 - YES OR 0 - NO - display Rejection detail
"RTN","IBCNERP6",16,0)
 ;   ^TMP($J,IBCNERTN,SORT1,SORT2,SORT3)=InqCreatedCount^InqCancelledCt^
"RTN","IBCNERP6",17,0)
 ;                                       InqQueuedCt^1stTransCount^
"RTN","IBCNERP6",18,0)
 ;                                       RetryCount^Non-ErrorRespCount^
"RTN","IBCNERP6",19,0)
 ;                                       ErrorRespCount^TotRespTime-days^
"RTN","IBCNERP6",20,0)
 ;                                       CommFailRespCount^PendRespCount^
"RTN","IBCNERP6",21,0)
 ;                                       DeactivationDTM
"RTN","IBCNERP6",22,0)
 ;        IBCNERTN = "IBCNERP4"
"RTN","IBCNERP6",23,0)
 ;        SORT1 = PayerName (SORT=1) or -InquiryCount(SORT=2)
"RTN","IBCNERP6",24,0)
 ;        SORT2 = PayerIEN (SORT=1) or PayerName (SORT=2)
"RTN","IBCNERP6",25,0)
 ;        SORT3 = "*" (SORT=1) or PayerIEN (SORT=2)
"RTN","IBCNERP6",26,0)
 ;                                       
"RTN","IBCNERP6",27,0)
 ;   ^TMP($J,IBCNERTN,SORT1,SORT2,SORT3,ERRCD)=InquiryCount
"RTN","IBCNERP6",28,0)
 ;        (see above)
"RTN","IBCNERP6",29,0)
 ;        ERRCD = Error Condition code (ptr to 365.018)
"RTN","IBCNERP6",30,0)
 ;
"RTN","IBCNERP6",31,0)
 ; Must call at appropriate tag
"RTN","IBCNERP6",32,0)
 Q
"RTN","IBCNERP6",33,0)
 ;
"RTN","IBCNERP6",34,0)
 ;
"RTN","IBCNERP6",35,0)
PRINT(RTN,BDT,EDT,PYR,RDTL,SRT,PGC,PXT,MAX,CRT) ; Print data
"RTN","IBCNERP6",36,0)
 ; Input params: RNT = "IBCNERP4" - routine, BDT = starting dt,
"RTN","IBCNERP6",37,0)
 ;  EDT = ending dt, PYR = payer ien,
"RTN","IBCNERP6",38,0)
 ;  RDTL = 0/1, SRT = 0/1, PGC = page ct, PXT = exit flg, MAX = max line
"RTN","IBCNERP6",39,0)
 ;  ct/page, CRT = 0/1
"RTN","IBCNERP6",40,0)
 ;
"RTN","IBCNERP6",41,0)
 ; Init vars
"RTN","IBCNERP6",42,0)
 N EORMSG,NONEMSG,COUNT,TOTDASHS,DISPDATA,SORT1,SORT2,SORT3,CT,PRT1,PRT2
"RTN","IBCNERP6",43,0)
 ;
"RTN","IBCNERP6",44,0)
 S EORMSG="*** END OF REPORT ***"
"RTN","IBCNERP6",45,0)
 S NONEMSG="* * * N O  D A T A  F O U N D * * *"
"RTN","IBCNERP6",46,0)
 S $P(TOTDASHS,"=",89)=""
"RTN","IBCNERP6",47,0)
 S CT=0
"RTN","IBCNERP6",48,0)
 ;
"RTN","IBCNERP6",49,0)
 I '$D(^TMP($J,RTN)) D HEADER W !,?(132-$L(NONEMSG)\2),NONEMSG,!! G PRINT2
"RTN","IBCNERP6",50,0)
 S SORT1=""
"RTN","IBCNERP6",51,0)
 F  S SORT1=$O(^TMP($J,RTN,SORT1)) Q:SORT1=""  D  Q:$G(ZTSTOP)!PXT
"RTN","IBCNERP6",52,0)
 .  S PRT1=$S(SORT1="~NO PAYER":"* No Payer Identified",1:SORT1)
"RTN","IBCNERP6",53,0)
 .  S SORT2=""
"RTN","IBCNERP6",54,0)
 .  F  S SORT2=$O(^TMP($J,RTN,SORT1,SORT2)) Q:SORT2=""  D  Q:$G(ZTSTOP)!PXT
"RTN","IBCNERP6",55,0)
 .  .  S PRT2=$S(SORT2="~NO PAYER":"* No Payer Identified",1:SORT2)
"RTN","IBCNERP6",56,0)
 .  .  S SORT3=""
"RTN","IBCNERP6",57,0)
 .  .  F  S SORT3=$O(^TMP($J,RTN,SORT1,SORT2,SORT3)) Q:SORT3=""  D  Q:$G(ZTSTOP)!PXT
"RTN","IBCNERP6",58,0)
 .  .  .  S CT=CT+1
"RTN","IBCNERP6",59,0)
 .  .  .  ; Build lines of data to display
"RTN","IBCNERP6",60,0)
 .  .  .  KILL DISPDATA
"RTN","IBCNERP6",61,0)
 .  .  .  D DATA(.DISPDATA)
"RTN","IBCNERP6",62,0)
 .  .  .  ; Display lines of response
"RTN","IBCNERP6",63,0)
 .  .  .  D LINE(.DISPDATA)
"RTN","IBCNERP6",64,0)
 .  .  .  Q
"RTN","IBCNERP6",65,0)
 .  .  Q
"RTN","IBCNERP6",66,0)
 .  Q
"RTN","IBCNERP6",67,0)
 ;
"RTN","IBCNERP6",68,0)
 ; Display totals line if space is available
"RTN","IBCNERP6",69,0)
 I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERP6",70,0)
 I $Y+1>MAX!('PGC) D HEADER I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERP6",71,0)
 W !,?43,TOTDASHS
"RTN","IBCNERP6",72,0)
 ; Print totals for report
"RTN","IBCNERP6",73,0)
 KILL DISPDATA
"RTN","IBCNERP6",74,0)
 D TOTALS(.DISPDATA)
"RTN","IBCNERP6",75,0)
 ; Display lines of totals
"RTN","IBCNERP6",76,0)
 D LINE(.DISPDATA)
"RTN","IBCNERP6",77,0)
 ;
"RTN","IBCNERP6",78,0)
PRINT2 I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERP6",79,0)
 I $Y+1>MAX!('PGC) D HEADER I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERP6",80,0)
 W !,?(132-$L(EORMSG)\2),EORMSG
"RTN","IBCNERP6",81,0)
 ;
"RTN","IBCNERP6",82,0)
PRINTX ; PRINT exit point
"RTN","IBCNERP6",83,0)
 Q
"RTN","IBCNERP6",84,0)
 ;
"RTN","IBCNERP6",85,0)
HEADER ; Print header info for each page
"RTN","IBCNERP6",86,0)
 ; Assumes vars from PRINT: CRT,PGC,PXT,MAX,SRT,BDT,EDT,PYR,RDTL,MAR
"RTN","IBCNERP6",87,0)
 ; Init vars
"RTN","IBCNERP6",88,0)
 N DIR,X,Y,DTOUT,DUOUT,OFFSET,HDR,DASHES,LIN
"RTN","IBCNERP6",89,0)
 ;
"RTN","IBCNERP6",90,0)
 I CRT,PGC>0,'$D(ZTQUEUED) D  I PXT G HEADERX
"RTN","IBCNERP6",91,0)
 . I MAX<51 F LIN=1:1:(MAX-$Y) W !
"RTN","IBCNERP6",92,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERP6",93,0)
 . I $D(DTOUT)!$D(DUOUT) S PXT=1 Q
"RTN","IBCNERP6",94,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD() S (ZTSTOP,PXT)=1 G HEADERX
"RTN","IBCNERP6",95,0)
 S PGC=PGC+1
"RTN","IBCNERP6",96,0)
 W @IOF,!,?1,"eIV Payer Report"
"RTN","IBCNERP6",97,0)
 S HDR=$$FMTE^XLFDT($$NOW^XLFDT,1)_"  Page: "_PGC
"RTN","IBCNERP6",98,0)
 S OFFSET=131-$L(HDR)
"RTN","IBCNERP6",99,0)
 W ?OFFSET,HDR
"RTN","IBCNERP6",100,0)
 W !,?1,"Sorted by: "_$S(SRT=1:"Payer",1:"Total Inquiries")
"RTN","IBCNERP6",101,0)
 S HDR="Rejection Detail: "_$S('RDTL:"Not",1:"")_" Included"
"RTN","IBCNERP6",102,0)
 S OFFSET=131-$L(HDR)
"RTN","IBCNERP6",103,0)
 W ?OFFSET,HDR
"RTN","IBCNERP6",104,0)
 S HDR=$$FMTE^XLFDT(BDT,"5Z")_" - "_$$FMTE^XLFDT(EDT,"5Z")
"RTN","IBCNERP6",105,0)
 S OFFSET=132-$L(HDR)\2
"RTN","IBCNERP6",106,0)
 W !,?OFFSET,HDR
"RTN","IBCNERP6",107,0)
 ; Display Payer Range
"RTN","IBCNERP6",108,0)
 S HDR=""
"RTN","IBCNERP6",109,0)
 I PYR="" S HDR="All Payers"
"RTN","IBCNERP6",110,0)
 I HDR="" S HDR=$P($G(^IBE(365.12,PYR,0)),U,1)
"RTN","IBCNERP6",111,0)
 S OFFSET=132-$L(HDR)\2
"RTN","IBCNERP6",112,0)
 W !,?OFFSET,HDR
"RTN","IBCNERP6",113,0)
 W !  ; Skip line
"RTN","IBCNERP6",114,0)
 ; Display column headings
"RTN","IBCNERP6",115,0)
 W !,?70,"***** SENT *****",?88,"*** RECEIVED ***",?106,"AvgResp"
"RTN","IBCNERP6",116,0)
 W !,?1,"Payer [Inactive Date]",?43,"Created",?52," Cancel",?61," Queued",?70,"1st Att",?79,"  Retry",?88,"   Good",?97,"  Error",?106," (Days)",?115,"Timeout",?124,"Pending"
"RTN","IBCNERP6",117,0)
 S $P(DASHES,"=",131)=""
"RTN","IBCNERP6",118,0)
 W !,?1,DASHES
"RTN","IBCNERP6",119,0)
 ;
"RTN","IBCNERP6",120,0)
HEADERX ; HEADER exit pt
"RTN","IBCNERP6",121,0)
 Q
"RTN","IBCNERP6",122,0)
 ;
"RTN","IBCNERP6",123,0)
LINE(DISPDATA) ; Print line of data
"RTN","IBCNERP6",124,0)
 ; Assumes vars from PRINT: PGC,PXT,MAX
"RTN","IBCNERP6",125,0)
 ; Init vars
"RTN","IBCNERP6",126,0)
 N CT,II
"RTN","IBCNERP6",127,0)
 ;
"RTN","IBCNERP6",128,0)
 S CT=+$O(DISPDATA(""),-1)
"RTN","IBCNERP6",129,0)
 I $Y+1+CT>MAX D HEADER I $G(ZTSTOP)!PXT G LINEX
"RTN","IBCNERP6",130,0)
 F II=1:1:CT D  Q:$G(ZTSTOP)!PXT
"RTN","IBCNERP6",131,0)
 . I $Y+1>MAX!('PGC) D HEADER I $G(ZTSTOP)!PXT Q
"RTN","IBCNERP6",132,0)
 . W !,?1,DISPDATA(II)
"RTN","IBCNERP6",133,0)
 . Q
"RTN","IBCNERP6",134,0)
 ;
"RTN","IBCNERP6",135,0)
LINEX ; LINE exit pt
"RTN","IBCNERP6",136,0)
 Q
"RTN","IBCNERP6",137,0)
 ;
"RTN","IBCNERP6",138,0)
DATA(DISPDATA) ; Gather and format lines of data to be printed
"RTN","IBCNERP6",139,0)
 ; Assumes vars from PRINT: RTN,SRT,SORT1,SORT2,SORT3,RDTL,CT,PRT1,PRT2
"RTN","IBCNERP6",140,0)
 ; Init vars
"RTN","IBCNERP6",141,0)
 N LINECT,INQS,TIME,AVG,APPS,REJS,DASHES2,ERRCD,ERROR,DEACMSG
"RTN","IBCNERP6",142,0)
 N REJDASHS,RPTDATA,FAIL,PEND,RETS,CT2,FIRST,QUED,CANC,PAYER,DEACDT
"RTN","IBCNERP6",143,0)
 ;
"RTN","IBCNERP6",144,0)
 S $P(DASHES2,"-",89)=""
"RTN","IBCNERP6",145,0)
 S $P(REJDASHS,"-",8)=""
"RTN","IBCNERP6",146,0)
 S LINECT=1
"RTN","IBCNERP6",147,0)
 M RPTDATA=^TMP($J,RTN,SORT1,SORT2,SORT3)
"RTN","IBCNERP6",148,0)
 S INQS=+$P(RPTDATA,U,1)
"RTN","IBCNERP6",149,0)
 S CANC=+$P(RPTDATA,U,2)
"RTN","IBCNERP6",150,0)
 S QUED=+$P(RPTDATA,U,3)
"RTN","IBCNERP6",151,0)
 S FIRST=+$P(RPTDATA,U,4)
"RTN","IBCNERP6",152,0)
 S RETS=+$P(RPTDATA,U,5)
"RTN","IBCNERP6",153,0)
 S APPS=+$P(RPTDATA,U,6)
"RTN","IBCNERP6",154,0)
 S REJS=+$P(RPTDATA,U,7)
"RTN","IBCNERP6",155,0)
 S TIME=+$P(RPTDATA,U,8)
"RTN","IBCNERP6",156,0)
 S FAIL=+$P(RPTDATA,U,9)
"RTN","IBCNERP6",157,0)
 S PEND=+$P(RPTDATA,U,10)
"RTN","IBCNERP6",158,0)
 S AVG=$FN($S((APPS+REJS)>0:TIME/(APPS+REJS),1:0),"",2)
"RTN","IBCNERP6",159,0)
 S PAYER=$S(SRT=1:PRT1,1:PRT2)
"RTN","IBCNERP6",160,0)
 I $P(RPTDATA,U,11) D
"RTN","IBCNERP6",161,0)
 . S DEACMSG=" [Inactive"
"RTN","IBCNERP6",162,0)
 . S DEACDT=" "_$$FMTE^XLFDT($P(RPTDATA,U,11)\1,"5Z")
"RTN","IBCNERP6",163,0)
 . I $L(PAYER)+$L(DEACMSG)+$L(DEACDT)<40 S PAYER=PAYER_DEACMSG_DEACDT_"]" Q
"RTN","IBCNERP6",164,0)
 . I $L(PAYER)+$L(DEACMSG)<40 S PAYER=PAYER_DEACMSG_"]" Q
"RTN","IBCNERP6",165,0)
 . S PAYER=$E(PAYER,1,39-$L(DEACMSG))_DEACMSG_"]"
"RTN","IBCNERP6",166,0)
 ; Update Report Totals
"RTN","IBCNERP6",167,0)
 F CT2=1:1:10 S $P(TOTALS,U,CT2)=$P($G(TOTALS),U,CT2)+$P(RPTDATA,U,CT2)
"RTN","IBCNERP6",168,0)
 S DISPDATA(LINECT)=$$FO^IBCNEUT1(PAYER,40)_$$FO^IBCNEUT1(INQS,9,"R")_$$FO^IBCNEUT1(CANC,9,"R")_$$FO^IBCNEUT1(QUED,9,"R")_$$FO^IBCNEUT1(FIRST,9,"R")_$$FO^IBCNEUT1(RETS,9,"R")
"RTN","IBCNERP6",169,0)
 S DISPDATA(LINECT)=DISPDATA(LINECT)_$$FO^IBCNEUT1(APPS,9,"R")_$$FO^IBCNEUT1(REJS,9,"R")_$$FO^IBCNEUT1(AVG,9,"R")_$$FO^IBCNEUT1(FAIL,9,"R")_$$FO^IBCNEUT1(PEND,9,"R")
"RTN","IBCNERP6",170,0)
 S LINECT=LINECT+1
"RTN","IBCNERP6",171,0)
 I 'RDTL!(REJS=0) G DATAX
"RTN","IBCNERP6",172,0)
 ; Include Rejection Detail - if necessary
"RTN","IBCNERP6",173,0)
 S DISPDATA(LINECT)=$$FO^IBCNEUT1("",41)_$$FO^IBCNEUT1("Rejection Detail",56)_REJDASHS
"RTN","IBCNERP6",174,0)
 S LINECT=LINECT+1
"RTN","IBCNERP6",175,0)
 S ERRCD=""
"RTN","IBCNERP6",176,0)
 F  S ERRCD=$O(RPTDATA(ERRCD)) Q:ERRCD=""  D
"RTN","IBCNERP6",177,0)
 .  ; Determine Error Condition Description based on ERRCD
"RTN","IBCNERP6",178,0)
 .  ; If just Error Text 4.01 field, then keep it as is
"RTN","IBCNERP6",179,0)
 .  I 'ERRCD D
"RTN","IBCNERP6",180,0)
 ..   S ERROR=$P(ERRCD,U,2,99)
"RTN","IBCNERP6",181,0)
 ..   S DISPDATA(LINECT)=$$FO^IBCNEUT1("",41)_" "_$$FO^IBCNEUT1(ERROR,53)_$$FO^IBCNEUT1(+RPTDATA(ERRCD),9,"R")
"RTN","IBCNERP6",182,0)
 .  ; If IEN, get the code and description
"RTN","IBCNERP6",183,0)
 .  I ERRCD D
"RTN","IBCNERP6",184,0)
 ..   S ERROR=$G(^IBE(365.017,ERRCD,0))
"RTN","IBCNERP6",185,0)
 ..   S DISPDATA(LINECT)=$$FO^IBCNEUT1("",41)_" "_$$FO^IBCNEUT1($P(ERROR,U)_$S($P(ERROR,U,2)'="":"-"_$P(ERROR,U,2),1:""),53)_$$FO^IBCNEUT1(+RPTDATA(ERRCD),9,"R")
"RTN","IBCNERP6",186,0)
 .  S LINECT=LINECT+1
"RTN","IBCNERP6",187,0)
 .  ; Update Report Totals
"RTN","IBCNERP6",188,0)
 .  S TOTALS(ERRCD)=+$G(TOTALS(ERRCD))+RPTDATA(ERRCD)
"RTN","IBCNERP6",189,0)
 .  Q
"RTN","IBCNERP6",190,0)
 ;
"RTN","IBCNERP6",191,0)
DATAX ; DATA exit pt
"RTN","IBCNERP6",192,0)
 ; Display end of record dashes only if other records follow
"RTN","IBCNERP6",193,0)
 I $O(^TMP($J,RTN,SORT1,SORT2,SORT3))'=""!($O(^TMP($J,RTN,SORT1,SORT2))'="")!($O(^TMP($J,RTN,SORT1))'="") S DISPDATA(LINECT)=$$FO^IBCNEUT1("",42)_DASHES2,LINECT=LINECT+1
"RTN","IBCNERP6",194,0)
 Q
"RTN","IBCNERP6",195,0)
 ;
"RTN","IBCNERP6",196,0)
TOTALS(DISPDATA) ; Gather and format lines of totals to be printed
"RTN","IBCNERP6",197,0)
 ; Assumes vars from PRINT: RDTL,MAR
"RTN","IBCNERP6",198,0)
 ; Init vars
"RTN","IBCNERP6",199,0)
 N LINECT,INQS,TIME,AVG,APPS,REJS,ERRCD,DASHES,REJDASHS,FAIL,PEND,RETS
"RTN","IBCNERP6",200,0)
 N FIRST,QUED,ERROR,CANC
"RTN","IBCNERP6",201,0)
 ;
"RTN","IBCNERP6",202,0)
 S $P(DASHES,"=",131)=""
"RTN","IBCNERP6",203,0)
 S $P(REJDASHS,"-",8)=""
"RTN","IBCNERP6",204,0)
 S LINECT=1
"RTN","IBCNERP6",205,0)
 S INQS=+$P(TOTALS,U,1)
"RTN","IBCNERP6",206,0)
 S CANC=+$P(TOTALS,U,2)
"RTN","IBCNERP6",207,0)
 S QUED=+$P(TOTALS,U,3)
"RTN","IBCNERP6",208,0)
 S FIRST=+$P(TOTALS,U,4)
"RTN","IBCNERP6",209,0)
 S RETS=+$P(TOTALS,U,5)
"RTN","IBCNERP6",210,0)
 S APPS=+$P(TOTALS,U,6)
"RTN","IBCNERP6",211,0)
 S REJS=+$P(TOTALS,U,7)
"RTN","IBCNERP6",212,0)
 S TIME=+$P(TOTALS,U,8)
"RTN","IBCNERP6",213,0)
 S FAIL=+$P(TOTALS,U,9)
"RTN","IBCNERP6",214,0)
 S PEND=+$P(TOTALS,U,10)
"RTN","IBCNERP6",215,0)
 S AVG=$FN($S((APPS+REJS)>0:TIME/(APPS+REJS),1:0),"",2)
"RTN","IBCNERP6",216,0)
 S DISPDATA(LINECT)=$$FO^IBCNEUT1("Grand Totals",40)_$$FO^IBCNEUT1(INQS,9,"R")_$$FO^IBCNEUT1(CANC,9,"R")_$$FO^IBCNEUT1(QUED,9,"R")_$$FO^IBCNEUT1(FIRST,9,"R")_$$FO^IBCNEUT1(RETS,9,"R")
"RTN","IBCNERP6",217,0)
 S DISPDATA(LINECT)=DISPDATA(LINECT)_$$FO^IBCNEUT1(APPS,9,"R")_$$FO^IBCNEUT1(REJS,9,"R")_$$FO^IBCNEUT1(AVG,9,"R")_$$FO^IBCNEUT1(FAIL,9,"R")_$$FO^IBCNEUT1(PEND,9,"R")
"RTN","IBCNERP6",218,0)
 S LINECT=LINECT+1
"RTN","IBCNERP6",219,0)
 I 'RDTL!(REJS=0) G TOTALSX
"RTN","IBCNERP6",220,0)
 ; Include Rejection Detail - if necessary
"RTN","IBCNERP6",221,0)
 S DISPDATA(LINECT)=$$FO^IBCNEUT1("",41)_$$FO^IBCNEUT1("Rejection Detail",56)_REJDASHS
"RTN","IBCNERP6",222,0)
 S LINECT=LINECT+1
"RTN","IBCNERP6",223,0)
 S ERRCD=""
"RTN","IBCNERP6",224,0)
 F  S ERRCD=$O(TOTALS(ERRCD)) Q:ERRCD=""  D
"RTN","IBCNERP6",225,0)
 .  ; If IEN, get the code and description
"RTN","IBCNERP6",226,0)
 .  I ERRCD D
"RTN","IBCNERP6",227,0)
 ..   S ERROR=$G(^IBE(365.017,ERRCD,0))
"RTN","IBCNERP6",228,0)
 ..   S DISPDATA(LINECT)=$$FO^IBCNEUT1("",41)_" "_$$FO^IBCNEUT1($P(ERROR,U)_$S($P(ERROR,U,2)'="":"-"_$P(ERROR,U,2),1:""),53)_$$FO^IBCNEUT1(+TOTALS(ERRCD),9,"R")
"RTN","IBCNERP6",229,0)
 .  ; If error text display as is
"RTN","IBCNERP6",230,0)
 .  I 'ERRCD D
"RTN","IBCNERP6",231,0)
 ..    S ERROR=$P(ERRCD,U,2,99)
"RTN","IBCNERP6",232,0)
 ..    S DISPDATA(LINECT)=$$FO^IBCNEUT1("",41)_" "_$$FO^IBCNEUT1(ERROR,53)_$$FO^IBCNEUT1(+TOTALS(ERRCD),9,"R")
"RTN","IBCNERP6",233,0)
 .  S LINECT=LINECT+1
"RTN","IBCNERP6",234,0)
 .  Q
"RTN","IBCNERP6",235,0)
 ;
"RTN","IBCNERP6",236,0)
TOTALSX ; DATA exit pt
"RTN","IBCNERP6",237,0)
 S DISPDATA(LINECT)=DASHES
"RTN","IBCNERP6",238,0)
 Q
"RTN","IBCNERP6",239,0)
 ;
"RTN","IBCNERP6",240,0)
 ;
"RTN","IBCNERP7")
0^25^B26715367^B26918279
"RTN","IBCNERP7",1,0)
IBCNERP7 ;DAOU/BHS - eIV STATISTICAL REPORT ;10-JUN-2002
"RTN","IBCNERP7",2,0)
 ;;2.0;INTEGRATED BILLING;**184,416**;21-MAR-94;Build 58
"RTN","IBCNERP7",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERP7",4,0)
 ;
"RTN","IBCNERP7",5,0)
 ; eIV - Insurance Verification Interface
"RTN","IBCNERP7",6,0)
 ;
"RTN","IBCNERP7",7,0)
 ; Input parameter: N/A
"RTN","IBCNERP7",8,0)
 ; Other relevant variables:
"RTN","IBCNERP7",9,0)
 ;   IBCNERTN = "IBCNERP7" (current routine name for queueing the 
"RTN","IBCNERP7",10,0)
 ;                          COMPILE process)
"RTN","IBCNERP7",11,0)
 ;   IBCNESPC("BEGDTM") = start date/time for date/time range
"RTN","IBCNERP7",12,0)
 ;   IBCNESPC("ENDDTM") = end date/time for date/time range
"RTN","IBCNERP7",13,0)
 ;   IBCNESPC("SECTS") = list of sections to display on the report
"RTN","IBCNERP7",14,0)
 ;                       1 = All (Outgoing, Incoming and General),
"RTN","IBCNERP7",15,0)
 ;                       2 = Outgoing - Inquiry Response data,
"RTN","IBCNERP7",16,0)
 ;                       3 = Incoming - Inquiry Transmission data,
"RTN","IBCNERP7",17,0)
 ;                       4 = General - Ins Buffer data, Outstanding 
"RTN","IBCNERP7",18,0)
 ;                           Inquiries, Communication Failures, Retries
"RTN","IBCNERP7",19,0)
 ;                       may equal a list of values if '1' is not the
"RTN","IBCNERP7",20,0)
 ;                       the only value
"RTN","IBCNERP7",21,0)
 ;   IBCNESPC("MM") = "", not for MailMan message OR
"RTN","IBCNERP7",22,0)
 ;                    MAILGROUP, generate as MailMan message for this
"RTN","IBCNERP7",23,0)
 ;                               MAILGROUP as defined in IB site 
"RTN","IBCNERP7",24,0)
 ;                               parameters
"RTN","IBCNERP7",25,0)
 ;
"RTN","IBCNERP7",26,0)
 ; Only enter routine from EN or MAILMSG tags
"RTN","IBCNERP7",27,0)
 Q
"RTN","IBCNERP7",28,0)
 ;
"RTN","IBCNERP7",29,0)
 ; Entry pt
"RTN","IBCNERP7",30,0)
EN ;
"RTN","IBCNERP7",31,0)
 ; Init vars 
"RTN","IBCNERP7",32,0)
 N STOP,IBCNERTN,POP,IBCNESPC
"RTN","IBCNERP7",33,0)
 ;
"RTN","IBCNERP7",34,0)
 S STOP=0
"RTN","IBCNERP7",35,0)
 S IBCNERTN="IBCNERP7"
"RTN","IBCNERP7",36,0)
 W @IOF
"RTN","IBCNERP7",37,0)
 W !,"eIV Statistical Report",!
"RTN","IBCNERP7",38,0)
 W !,"Please select the timeframe for which to view the Insurance"
"RTN","IBCNERP7",39,0)
 W !,"Verification statistics and current status."
"RTN","IBCNERP7",40,0)
 ;
"RTN","IBCNERP7",41,0)
 ; Default to MailMan flag to No from the EN tag
"RTN","IBCNERP7",42,0)
 S IBCNESPC("MM")=""
"RTN","IBCNERP7",43,0)
 ;
"RTN","IBCNERP7",44,0)
 ; Prompts for Payer Report
"RTN","IBCNERP7",45,0)
 ; Date Range parameters
"RTN","IBCNERP7",46,0)
S10 D DTMRNG I STOP G EXIT
"RTN","IBCNERP7",47,0)
 ; Sort by parameter - Payer or Total Inquiries (Payer Report)
"RTN","IBCNERP7",48,0)
S20 D SECTS I STOP G:$$STOP^IBCNERP1 EXIT G S10
"RTN","IBCNERP7",49,0)
 ; Select the output device
"RTN","IBCNERP7",50,0)
S50 D DEVICE^IBCNERP1(IBCNERTN,.IBCNESPC) I STOP G:$$STOP^IBCNERP1 EXIT G S20
"RTN","IBCNERP7",51,0)
 ;
"RTN","IBCNERP7",52,0)
EXIT ; Quit this routine
"RTN","IBCNERP7",53,0)
 Q
"RTN","IBCNERP7",54,0)
 ;
"RTN","IBCNERP7",55,0)
 ;
"RTN","IBCNERP7",56,0)
DTMRNG ; Determine the start and end date/times for the report
"RTN","IBCNERP7",57,0)
 ; Init vars
"RTN","IBCNERP7",58,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERP7",59,0)
 ;
"RTN","IBCNERP7",60,0)
 W !
"RTN","IBCNERP7",61,0)
 ;
"RTN","IBCNERP7",62,0)
 S DIR(0)="DO^::ERX"
"RTN","IBCNERP7",63,0)
 S DIR("A")="Start DATE/TIME"
"RTN","IBCNERP7",64,0)
 S DIR("?",1)="    Enter Start DATE/TIME for report range."
"RTN","IBCNERP7",65,0)
 S DIR("?")="    The time element is required."
"RTN","IBCNERP7",66,0)
 D ^DIR K DIR
"RTN","IBCNERP7",67,0)
 I $D(DIRUT) S STOP=1 G DTMRNGX
"RTN","IBCNERP7",68,0)
 S IBCNESPC("BEGDTM")=Y
"RTN","IBCNERP7",69,0)
 ;
"RTN","IBCNERP7",70,0)
DTMRNG1 S DIR(0)="D^::ERX"
"RTN","IBCNERP7",71,0)
 S DIR("A")="  End DATE/TIME"
"RTN","IBCNERP7",72,0)
 S DIR("?",1)="    Enter End DATE/TIME for report range."
"RTN","IBCNERP7",73,0)
 S DIR("?")="    The time element is required."
"RTN","IBCNERP7",74,0)
 D ^DIR K DIR
"RTN","IBCNERP7",75,0)
 I $D(DIRUT) S STOP=1 G DTMRNGX
"RTN","IBCNERP7",76,0)
 I Y<IBCNESPC("BEGDTM") D  G DTMRNG1
"RTN","IBCNERP7",77,0)
 . W !,"    The End Date/Time must not precede the Start Date/Time."
"RTN","IBCNERP7",78,0)
 . W !,"    Please reenter."
"RTN","IBCNERP7",79,0)
 S IBCNESPC("ENDDTM")=Y
"RTN","IBCNERP7",80,0)
 ;
"RTN","IBCNERP7",81,0)
DTMRNGX ; DTMRNG exit pt
"RTN","IBCNERP7",82,0)
 Q
"RTN","IBCNERP7",83,0)
 ;
"RTN","IBCNERP7",84,0)
 ;
"RTN","IBCNERP7",85,0)
SECTS ; Prompt to allow users to include the available sections in the report
"RTN","IBCNERP7",86,0)
 ; Init vars
"RTN","IBCNERP7",87,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERP7",88,0)
 ;
"RTN","IBCNERP7",89,0)
 W !
"RTN","IBCNERP7",90,0)
 S DIR(0)="L^1:4"
"RTN","IBCNERP7",91,0)
 S DIR("A",1)="Choose all sections to be reviewed"
"RTN","IBCNERP7",92,0)
 S DIR("A",2)="1  -  All            = All three report sections (Default)"
"RTN","IBCNERP7",93,0)
 S DIR("A",3)="2  -  Outgoing Data  = Inquiry Transmission statistics"
"RTN","IBCNERP7",94,0)
 S DIR("A",4)="3  -  Incoming Data  = Inquiry Response statistics"
"RTN","IBCNERP7",95,0)
 S DIR("A",5)="4  -  Current Status = Pending Responses, Queued Inquiries, etc."
"RTN","IBCNERP7",96,0)
 S DIR("A")="Select one or more sections: "
"RTN","IBCNERP7",97,0)
 S DIR("B")=1
"RTN","IBCNERP7",98,0)
 S DIR("?",1)="  Please select one or more sections of the report to view."
"RTN","IBCNERP7",99,0)
 S DIR("?",2)="  To select multiple sections enter a comma separated list"
"RTN","IBCNERP7",100,0)
 S DIR("?",3)="  (ex. 2,4)."
"RTN","IBCNERP7",101,0)
 S DIR("?",4)="  1  -  Include all three sections in the report.  (Default)"
"RTN","IBCNERP7",102,0)
 S DIR("?",5)="  2  -  Include statistics on inquiries transmitted during the"
"RTN","IBCNERP7",103,0)
 S DIR("?",6)="        timeframe by extract type."
"RTN","IBCNERP7",104,0)
 S DIR("?",7)="  3  -  Include statistics on responses received during the"
"RTN","IBCNERP7",105,0)
 S DIR("?",8)="        timeframe by extract type."
"RTN","IBCNERP7",106,0)
 S DIR("?",9)="  4  -  Include statistics on the current state of the system."
"RTN","IBCNERP7",107,0)
 S DIR("?",10)="        This section is independent of the timeframe for the"
"RTN","IBCNERP7",108,0)
 S DIR("?",11)="        report and includes responses pending, queued inquiries,"
"RTN","IBCNERP7",109,0)
 S DIR("?",12)="        deferred inquiries, payer statistics and insurance"
"RTN","IBCNERP7",110,0)
 S DIR("?")="        buffer statistics."
"RTN","IBCNERP7",111,0)
 D ^DIR K DIR
"RTN","IBCNERP7",112,0)
 I $D(DIRUT) S STOP=1 G SECTSX
"RTN","IBCNERP7",113,0)
 ; Default to all if 1 is included OR if 2,3 and 4 are included in any
"RTN","IBCNERP7",114,0)
 ; order
"RTN","IBCNERP7",115,0)
 S Y=","_Y
"RTN","IBCNERP7",116,0)
 I Y[(",1,") S IBCNESPC("SECTS")=1 G SECTSX
"RTN","IBCNERP7",117,0)
 I Y[(",2,"),Y[(",3,"),Y[(",4,") S IBCNESPC("SECTS")=1 G SECTSX
"RTN","IBCNERP7",118,0)
 S IBCNESPC("SECTS")=Y
"RTN","IBCNERP7",119,0)
 ;
"RTN","IBCNERP7",120,0)
SECTSX ; SECTS exit pt
"RTN","IBCNERP7",121,0)
 Q
"RTN","IBCNERP7",122,0)
 ;
"RTN","IBCNERP7",123,0)
 ;
"RTN","IBCNERP7",124,0)
MAILMSG ; Tag to be called by TaskMan to generate report with default values
"RTN","IBCNERP7",125,0)
 ; and send as MailMan message
"RTN","IBCNERP7",126,0)
 ; Init vars
"RTN","IBCNERP7",127,0)
 N IBCNERTN,IBCNESPC,EDT,BDT,TM
"RTN","IBCNERP7",128,0)
 ;
"RTN","IBCNERP7",129,0)
 ; Default report parameters
"RTN","IBCNERP7",130,0)
 ; Start Date/Time - End Date/Time range
"RTN","IBCNERP7",131,0)
 ;  Determine start time based on IB site parameter
"RTN","IBCNERP7",132,0)
 S TM=$$GET1^DIQ(350.9,"1,",51.03,"E")
"RTN","IBCNERP7",133,0)
 I TM=""!(+TM=0) S TM="2400"
"RTN","IBCNERP7",134,0)
 S EDT=$$DT^XLFDT
"RTN","IBCNERP7",135,0)
 S BDT=$$FMADD^XLFDT(EDT,-1)
"RTN","IBCNERP7",136,0)
 S IBCNESPC("BEGDTM")=+(BDT_"."_TM)
"RTN","IBCNERP7",137,0)
 S IBCNESPC("ENDDTM")=+(EDT_"."_TM)
"RTN","IBCNERP7",138,0)
 ; Display all sections
"RTN","IBCNERP7",139,0)
 S IBCNESPC("SECTS")=1
"RTN","IBCNERP7",140,0)
 ; Set MailMan flag to IB site parameter MAILGROUP
"RTN","IBCNERP7",141,0)
 S IBCNESPC("MM")=$$MGRP^IBCNEUT5
"RTN","IBCNERP7",142,0)
 ; If there is no MailGroup to send message - do not continue
"RTN","IBCNERP7",143,0)
 I IBCNESPC("MM")="" QUIT
"RTN","IBCNERP7",144,0)
 ; If the send MailMan message parameter is turned off, stop the process
"RTN","IBCNERP7",145,0)
 I '$P($G(^IBE(350.9,1,51)),U,2) QUIT
"RTN","IBCNERP7",146,0)
 ;
"RTN","IBCNERP7",147,0)
 ; Set routine parameter
"RTN","IBCNERP7",148,0)
 S IBCNERTN="IBCNERP7"
"RTN","IBCNERP7",149,0)
 ;
"RTN","IBCNERP7",150,0)
 ; Initialize scratch global
"RTN","IBCNERP7",151,0)
 KILL ^TMP($J,IBCNERTN)
"RTN","IBCNERP7",152,0)
 ; Compile the report data
"RTN","IBCNERP7",153,0)
 D EN^IBCNERP8(IBCNERTN,.IBCNESPC)
"RTN","IBCNERP7",154,0)
 ; Print the report - to MailMan
"RTN","IBCNERP7",155,0)
 I '$G(ZTSTOP) D EN^IBCNERP9(IBCNERTN,.IBCNESPC)
"RTN","IBCNERP7",156,0)
 ;
"RTN","IBCNERP7",157,0)
 ; Kill scratch global
"RTN","IBCNERP7",158,0)
 KILL ^TMP($J,IBCNERTN)
"RTN","IBCNERP7",159,0)
 ;
"RTN","IBCNERP7",160,0)
 ; Purge the task record
"RTN","IBCNERP7",161,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCNERP7",162,0)
 ;
"RTN","IBCNERP7",163,0)
 ; MAILMSG exit pt
"RTN","IBCNERP7",164,0)
 Q
"RTN","IBCNERP7",165,0)
 ;
"RTN","IBCNERP7",166,0)
 ;
"RTN","IBCNERP8")
0^29^B66453982^B55076349
"RTN","IBCNERP8",1,0)
IBCNERP8 ;DAOU/BHS - IBCNE eIV STATISTICAL REPORT COMPILE ;11-JUN-2002
"RTN","IBCNERP8",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,345,416**;21-MAR-94;Build 58
"RTN","IBCNERP8",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERP8",4,0)
 ;
"RTN","IBCNERP8",5,0)
 ; eIV - Insurance Verification Interface
"RTN","IBCNERP8",6,0)
 ;
"RTN","IBCNERP8",7,0)
 ;Input vars from IBCNERP7:
"RTN","IBCNERP8",8,0)
 ; IBCNERTN = "IBCNERP7"
"RTN","IBCNERP8",9,0)
 ; **IBCNESPC array ONLY passed by reference **
"RTN","IBCNERP8",10,0)
 ; IBCNESPC("BEGDTM") = Start Dt/Tm for rpt range
"RTN","IBCNERP8",11,0)
 ; IBCNESPC("ENDDTM") = End Dt/Tm for rpt range
"RTN","IBCNERP8",12,0)
 ; IBCNESPC("SECTS")  = 1 - All sections OR ',' sep'd list of 1 or more
"RTN","IBCNERP8",13,0)
 ;  of the following (not all)
"RTN","IBCNERP8",14,0)
 ;  2 - Outgoing data, inq trans stats
"RTN","IBCNERP8",15,0)
 ;  3 - Incoming data, resps rec'd stats
"RTN","IBCNERP8",16,0)
 ;  4 - Current status, pending resps, queued inqs, deferred inqs, payer
"RTN","IBCNERP8",17,0)
 ;      stats, ins buf stats
"RTN","IBCNERP8",18,0)
 ; IBCNESPC("MM") = "" - do not generate MailMan message OR MAILGROUP to
"RTN","IBCNERP8",19,0)
 ;  send report to Mail Group as defined in the IB site parameters
"RTN","IBCNERP8",20,0)
 ;Output vars:
"RTN","IBCNERP8",21,0)
 ; Based on IBCNESPC("SECTS") parameter the following scratch globals
"RTN","IBCNERP8",22,0)
 ; may be built
"RTN","IBCNERP8",23,0)
 ; 1 OR contains 2 --> 
"RTN","IBCNERP8",24,0)
 ; ^TMP($J,RTN,"OUT")=TotInq^InsBufExtSubtotal^PreRegExtSubtotal^...
"RTN","IBCNERP8",25,0)
 ;  NonVerifInsExtSubtotal^NoActInsExtSubtotal
"RTN","IBCNERP8",26,0)
 ; 1 OR contains 3 --> 
"RTN","IBCNERP8",27,0)
 ; ^TMP($J,RTN,"IN")=TotResp^InsBufExtSubtotal^PreRegExtSubtotal^...
"RTN","IBCNERP8",28,0)
 ;  NonVerifInsExtSubtotal^NoActInsExtSubtotal
"RTN","IBCNERP8",29,0)
 ; 1 OR contains 4 --> 
"RTN","IBCNERP8",30,0)
 ; ^TMP($J,RTN,"CUR")=TotPendingResponses^TotQueuedInquiries^...
"RTN","IBCNERP8",31,0)
 ;  TotDeferredInquiries(Hold)^TotInsCosw/oNationalID^...
"RTN","IBCNERP8",32,0)
 ;  ToteIVPyrsDisabldLocally^TotInsBufVerified^TotalManVerified...
"RTN","IBCNERP8",33,0)
 ;  TotaleIVVerified^TotInsBufUnverified^! InsBufSubtotal^...
"RTN","IBCNERP8",34,0)
 ;  ? InsBufSubtotal^- InsBufSubtotal^Other InsBufSubtotal
"RTN","IBCNERP8",35,0)
 ; 1 OR contains 4 -->
"RTN","IBCNERP8",36,0)
 ; ^TMP($J,RTN,"PYR",PAYER,IEN)=""  (list of new payers)
"RTN","IBCNERP8",37,0)
 ;
"RTN","IBCNERP8",38,0)
 ; Must call at EN
"RTN","IBCNERP8",39,0)
 Q
"RTN","IBCNERP8",40,0)
 ;
"RTN","IBCNERP8",41,0)
EN(IBCNERTN,IBCNESPC) ; Entry pt
"RTN","IBCNERP8",42,0)
 ; Init vars
"RTN","IBCNERP8",43,0)
 N IBBDT,IBEDT,IBSCT,IBTOT,PIECES,VALUE,CT
"RTN","IBCNERP8",44,0)
 ;
"RTN","IBCNERP8",45,0)
 I '$D(ZTQUEUED),$G(IOST)["C-" W !!,"Compiling report data ..."
"RTN","IBCNERP8",46,0)
 ;
"RTN","IBCNERP8",47,0)
 S IBTOT=0
"RTN","IBCNERP8",48,0)
 ;
"RTN","IBCNERP8",49,0)
 ; Kill scratch global
"RTN","IBCNERP8",50,0)
 K ^TMP($J,IBCNERTN)
"RTN","IBCNERP8",51,0)
 ;
"RTN","IBCNERP8",52,0)
 ; Init looping vars
"RTN","IBCNERP8",53,0)
 S IBBDT=$G(IBCNESPC("BEGDTM")),IBEDT=$G(IBCNESPC("ENDDTM"))
"RTN","IBCNERP8",54,0)
 S IBSCT=$G(IBCNESPC("SECTS"))
"RTN","IBCNERP8",55,0)
 ;
"RTN","IBCNERP8",56,0)
 I IBSCT=1!$F(IBSCT,",2,") D OUT(IBCNERTN,IBBDT,IBEDT,.IBTOT)
"RTN","IBCNERP8",57,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNERP8",58,0)
 I IBSCT=1!$F(IBSCT,",3,") D IN(IBCNERTN,IBBDT,IBEDT,.IBTOT)
"RTN","IBCNERP8",59,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNERP8",60,0)
 I IBSCT=1!$F(IBSCT,",4,") D CUR(IBCNERTN,IBBDT,IBEDT,.IBTOT),PYR^IBCNERP0(IBCNERTN,IBBDT,IBEDT,.IBTOT)
"RTN","IBCNERP8",61,0)
 ;
"RTN","IBCNERP8",62,0)
EXIT ; EN Exit pt
"RTN","IBCNERP8",63,0)
 Q
"RTN","IBCNERP8",64,0)
 ;
"RTN","IBCNERP8",65,0)
IN(RTN,BDT,EDT,TOT) ; Determine Incoming Data
"RTN","IBCNERP8",66,0)
 ; Input params: RTN-routine name for ^TMP($J), BDT-start dt/time,
"RTN","IBCNERP8",67,0)
 ;  EDT-end dt/time, **TOT-total records searched - used only for status
"RTN","IBCNERP8",68,0)
 ;  checks when the process is queued (passed by reference)
"RTN","IBCNERP8",69,0)
 ; Output vars: Set pcs of ^TMP($J,RTN,"IN") as follows:
"RTN","IBCNERP8",70,0)
 ;  1=total Resps rec'd for date/time range
"RTN","IBCNERP8",71,0)
 ;  2=Ins Buf extract subtotal
"RTN","IBCNERP8",72,0)
 ;  3=Pre-Reg extract subtotal
"RTN","IBCNERP8",73,0)
 ;  4=Non-ver extract subtotal
"RTN","IBCNERP8",74,0)
 ;  5=No Act Ins subtotal
"RTN","IBCNERP8",75,0)
 ;
"RTN","IBCNERP8",76,0)
 ; Init vars
"RTN","IBCNERP8",77,0)
 N IBDT,PYRIEN,PATIEN,IBPTR,IBTYP,RPTDATA,TRANSIEN
"RTN","IBCNERP8",78,0)
 ;
"RTN","IBCNERP8",79,0)
 ; Loop thru the eIV Resp File (#365) x-ref on Date/Time Resp Rec'd
"RTN","IBCNERP8",80,0)
 S IBDT=$O(^IBCN(365,"AD",BDT),-1)
"RTN","IBCNERP8",81,0)
 F  S IBDT=$O(^IBCN(365,"AD",IBDT)) Q:IBDT=""!(IBDT>EDT)  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",82,0)
 . S PYRIEN=0
"RTN","IBCNERP8",83,0)
 . F  S PYRIEN=$O(^IBCN(365,"AD",IBDT,PYRIEN)) Q:'PYRIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",84,0)
 . . S PATIEN=0
"RTN","IBCNERP8",85,0)
 . . F  S PATIEN=$O(^IBCN(365,"AD",IBDT,PYRIEN,PATIEN)) Q:'PATIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",86,0)
 . . . S IBPTR=0
"RTN","IBCNERP8",87,0)
 . . . F  S IBPTR=$O(^IBCN(365,"AD",IBDT,PYRIEN,PATIEN,IBPTR)) Q:'IBPTR  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",88,0)
 . . . . S TOT=TOT+1
"RTN","IBCNERP8",89,0)
 . . . . I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP8",90,0)
 . . . . ; Update total
"RTN","IBCNERP8",91,0)
 . . . . S $P(RPTDATA,U,1)=$P($G(RPTDATA),U,1)+1
"RTN","IBCNERP8",92,0)
 . . . . ; Update extract type total
"RTN","IBCNERP8",93,0)
 . . . . ; Get the data for the report - build RPTDATA
"RTN","IBCNERP8",94,0)
 . . . . S IBTYP=5,TRANSIEN=$P($G(^IBCN(365,IBPTR,0)),U,5)
"RTN","IBCNERP8",95,0)
 . . . . I TRANSIEN'="" S IBTYP=$P($G(^IBCN(365.1,TRANSIEN,0)),U,10) I IBTYP'="" S:+IBTYP<4 $P(RPTDATA,U,IBTYP+1)=$P($G(RPTDATA),U,IBTYP+1)+1
"RTN","IBCNERP8",96,0)
 ;
"RTN","IBCNERP8",97,0)
 I $G(ZTSTOP) G INX
"RTN","IBCNERP8",98,0)
 ;
"RTN","IBCNERP8",99,0)
 ; Save data to global
"RTN","IBCNERP8",100,0)
 S ^TMP($J,RTN,"IN")=$G(RPTDATA)
"RTN","IBCNERP8",101,0)
 ;
"RTN","IBCNERP8",102,0)
INX ; IN exit pt
"RTN","IBCNERP8",103,0)
 Q
"RTN","IBCNERP8",104,0)
 ;
"RTN","IBCNERP8",105,0)
OUT(RTN,BDT,EDT,TOT) ; Outgoing Data
"RTN","IBCNERP8",106,0)
 ;Input params:  RTN-routine name used as subscript in ^TMP($J),
"RTN","IBCNERP8",107,0)
 ; BDT-start date/time, EDT-end date/time, **TOT-total recs searched-used
"RTN","IBCNERP8",108,0)
 ; only for status checks when process is queued (passed by reference)
"RTN","IBCNERP8",109,0)
 ;Output vars: Set pcs of ^TMP($J,RTN,"OUT") as follows:
"RTN","IBCNERP8",110,0)
 ; 1=total Inqs transmitted for timeframe
"RTN","IBCNERP8",111,0)
 ; 2=Ins Buffer extract subtotal
"RTN","IBCNERP8",112,0)
 ; 3=Pre-Reg extract subtotal
"RTN","IBCNERP8",113,0)
 ; 4=Non-Ver extract subtotal
"RTN","IBCNERP8",114,0)
 ; 5=No Act Ins subtotal
"RTN","IBCNERP8",115,0)
 ;
"RTN","IBCNERP8",116,0)
 ; Init vars
"RTN","IBCNERP8",117,0)
 N IBDT,IBPTR,IBTYP,RPTDATA,TQIEN
"RTN","IBCNERP8",118,0)
 ;
"RTN","IBCNERP8",119,0)
 ; Loop thru the eIV Resp File (#365) by x-ref on Date/Time Resp Created
"RTN","IBCNERP8",120,0)
 ;  Only count responses for unique HL7 message IDs - filter out
"RTN","IBCNERP8",121,0)
 ;  unsolicited responses as they artificially inflate the Outgoing Count
"RTN","IBCNERP8",122,0)
 S IBDT=$O(^IBCN(365,"AE",BDT),-1)
"RTN","IBCNERP8",123,0)
 F  S IBDT=$O(^IBCN(365,"AE",IBDT)) Q:IBDT=""!(IBDT>EDT)  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",124,0)
 . S IBPTR=0
"RTN","IBCNERP8",125,0)
 . F  S IBPTR=$O(^IBCN(365,"AE",IBDT,IBPTR)) Q:'IBPTR  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",126,0)
 . . S TOT=TOT+1
"RTN","IBCNERP8",127,0)
 . . I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP8",128,0)
 . . ; Quit, if response was not O - original
"RTN","IBCNERP8",129,0)
 . . I $P($G(^IBCN(365,IBPTR,0)),U,10)'="O" Q
"RTN","IBCNERP8",130,0)
 . . ; Update total
"RTN","IBCNERP8",131,0)
 . . S $P(RPTDATA,U,1)=$P($G(RPTDATA),U,1)+1
"RTN","IBCNERP8",132,0)
 . . ; Update extract type total (1,2,3,4)
"RTN","IBCNERP8",133,0)
 . . S TQIEN=$P($G(^IBCN(365,IBPTR,0)),U,5)
"RTN","IBCNERP8",134,0)
 . . I TQIEN="" Q
"RTN","IBCNERP8",135,0)
 . . S IBTYP=$P($G(^IBCN(365.1,TQIEN,0)),U,10)
"RTN","IBCNERP8",136,0)
 . . I IBTYP'="" S:IBTYP<4 $P(RPTDATA,U,IBTYP+1)=$P($G(RPTDATA),U,IBTYP+1)+1
"RTN","IBCNERP8",137,0)
 ;
"RTN","IBCNERP8",138,0)
 I $G(ZTSTOP) G OUTX
"RTN","IBCNERP8",139,0)
 ;
"RTN","IBCNERP8",140,0)
 ; Save data to global array
"RTN","IBCNERP8",141,0)
 S ^TMP($J,RTN,"OUT")=$G(RPTDATA)
"RTN","IBCNERP8",142,0)
 ;
"RTN","IBCNERP8",143,0)
OUTX ; OUT exit pt
"RTN","IBCNERP8",144,0)
 Q
"RTN","IBCNERP8",145,0)
 ;
"RTN","IBCNERP8",146,0)
CUR(RTN,BDT,EDT,TOT) ; Current Status - stats - timeframe independent
"RTN","IBCNERP8",147,0)
 ; Input params: RTN-routine name as subs in ^TMP($J), **TOT-total recs
"RTN","IBCNERP8",148,0)
 ;  searched - used only for status checks when the process is queued
"RTN","IBCNERP8",149,0)
 ;  passed by reference
"RTN","IBCNERP8",150,0)
 ; Output vars: Set pcs of ^TMP($J,RTN,"CUR") as follows:
"RTN","IBCNERP8",151,0)
 ;  1=total Pending Resps (Transmitted-2)
"RTN","IBCNERP8",152,0)
 ;  2=total Queued Inqs (Ready to Transmit-1/Retry-6)
"RTN","IBCNERP8",153,0)
 ;  3=total Deferred Inqs (Hold-4)
"RTN","IBCNERP8",154,0)
 ;  4=Ins Cos w/o National ID
"RTN","IBCNERP8",155,0)
 ;  5=Payers w/eIV disabled locally
"RTN","IBCNERP8",156,0)
 ;  6=total user action required (symbol'='*' or '#' or '!' or '?' or '-')
"RTN","IBCNERP8",157,0)
 ;  7=total Man. Ver'd Ins Buf entries (symbol='*')
"RTN","IBCNERP8",158,0)
 ;  8=total eIV Processed Ver. (symbol='+')
"RTN","IBCNERP8",159,0)
 ;  9=total awaiting processing (symbol='?' or BLANK)
"RTN","IBCNERP8",160,0)
 ;  10=total Ins Buf entries w/symbol='#'
"RTN","IBCNERP8",161,0)
 ;  11=total Ins Buf entries w/symbol='!'
"RTN","IBCNERP8",162,0)
 ;  12=total Ins Buf entries w/symbol='?'
"RTN","IBCNERP8",163,0)
 ;  13=total Ins Buf entries w/symbol='-'
"RTN","IBCNERP8",164,0)
 ;  14=total Ins Buffer entries w/symbol not in ('*','#','!','?','-')
"RTN","IBCNERP8",165,0)
 ;  
"RTN","IBCNERP8",166,0)
 ;  ^TMP($J,RTN,"CUR","FLAGS","A",Payer name,N) = active flag timestamp ^ active flag setting
"RTN","IBCNERP8",167,0)
 ;  ^TMP($J,RTN,"CUR","FLAGS","T",Payer name,N) = trusted flag timestamp ^ trusted flag setting
"RTN","IBCNERP8",168,0)
 ;
"RTN","IBCNERP8",169,0)
 ; Init vars
"RTN","IBCNERP8",170,0)
 N RIEN,TQIEN,ICIEN,IBIEN,RPTDATA,IEN,IBSYMBOL,PIECE,IBSTS,APPIEN
"RTN","IBCNERP8",171,0)
 N PIEN,TMP,APPDATA,XDT,PDATA
"RTN","IBCNERP8",172,0)
 ;
"RTN","IBCNERP8",173,0)
 S RPTDATA=""
"RTN","IBCNERP8",174,0)
 ;
"RTN","IBCNERP8",175,0)
 ; Responses pending (Transmitted - 2)
"RTN","IBCNERP8",176,0)
 S RIEN=0
"RTN","IBCNERP8",177,0)
 F  S RIEN=$O(^IBCN(365,"AC",2,RIEN)) Q:'RIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",178,0)
 .  S TOT=TOT+1
"RTN","IBCNERP8",179,0)
 .  I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP8",180,0)
 .  S $P(RPTDATA,U,1)=$P(RPTDATA,U,1)+1
"RTN","IBCNERP8",181,0)
 ;
"RTN","IBCNERP8",182,0)
 I $G(ZTSTOP) G CURX
"RTN","IBCNERP8",183,0)
 ;
"RTN","IBCNERP8",184,0)
 ; Queued inquiries (Ready to Transmit - 1/Retry - 6) and 
"RTN","IBCNERP8",185,0)
 ; Deferred inquiries (Hold - 4)
"RTN","IBCNERP8",186,0)
 F IBSTS=1,6,4 D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",187,0)
 . S TQIEN=0
"RTN","IBCNERP8",188,0)
 . F  S TQIEN=$O(^IBCN(365.1,"AC",IBSTS,TQIEN)) Q:'TQIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",189,0)
 . .  S TOT=TOT+1
"RTN","IBCNERP8",190,0)
 . .  I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 QUIT
"RTN","IBCNERP8",191,0)
 . .  I IBSTS'=4 S $P(RPTDATA,U,2)=$P(RPTDATA,U,2)+1 Q
"RTN","IBCNERP8",192,0)
 . .  S $P(RPTDATA,U,3)=$P(RPTDATA,U,3)+1
"RTN","IBCNERP8",193,0)
 ;
"RTN","IBCNERP8",194,0)
 I $G(ZTSTOP) G CURX
"RTN","IBCNERP8",195,0)
 ;
"RTN","IBCNERP8",196,0)
 ; Payer stats
"RTN","IBCNERP8",197,0)
 ; Ins cos w/o National ID
"RTN","IBCNERP8",198,0)
 S ICIEN=0
"RTN","IBCNERP8",199,0)
 F  S ICIEN=$O(^DIC(36,ICIEN)) Q:'ICIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",200,0)
 .  S TOT=TOT+1
"RTN","IBCNERP8",201,0)
 .  I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 QUIT
"RTN","IBCNERP8",202,0)
 .  ; Exclude inactive
"RTN","IBCNERP8",203,0)
 .  S TMP=$$ACTIVE^IBCNEUT4(ICIEN) I 'TMP Q
"RTN","IBCNERP8",204,0)
 .  ; Exclude Medicaid, etc.
"RTN","IBCNERP8",205,0)
 .  I $$EXCLUDE^IBCNEUT4($P(TMP,U,2)) Q
"RTN","IBCNERP8",206,0)
 .  ; Determine assoc Payer
"RTN","IBCNERP8",207,0)
 .  S PIEN=$P($G(^DIC(36,ICIEN,3)),U,10)
"RTN","IBCNERP8",208,0)
 .  ; Missing payer link
"RTN","IBCNERP8",209,0)
 .  I 'PIEN S $P(RPTDATA,U,4)=$P(RPTDATA,U,4)+1 Q
"RTN","IBCNERP8",210,0)
 .  ; Does a VA NATIONAL ID exist?
"RTN","IBCNERP8",211,0)
 .  I $P($G(^IBE(365.12,PIEN,0)),U,2)'="" Q
"RTN","IBCNERP8",212,0)
 .  S $P(RPTDATA,U,4)=$P(RPTDATA,U,4)+1
"RTN","IBCNERP8",213,0)
 ;
"RTN","IBCNERP8",214,0)
 I $G(ZTSTOP) G CURX
"RTN","IBCNERP8",215,0)
 ;
"RTN","IBCNERP8",216,0)
 ; eIV Payers disabled locally
"RTN","IBCNERP8",217,0)
 S PIEN=0
"RTN","IBCNERP8",218,0)
 F  S PIEN=$O(^IBE(365.12,PIEN)) Q:'PIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",219,0)
 .  S TOT=TOT+1
"RTN","IBCNERP8",220,0)
 .  I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP8",221,0)
 .  S PDATA=$G(^IBE(365.12,PIEN,0))
"RTN","IBCNERP8",222,0)
 .  ; Must have National ID
"RTN","IBCNERP8",223,0)
 .  I $P(PDATA,U,2)="" Q
"RTN","IBCNERP8",224,0)
 .  ; Get Payer app multiple IEN
"RTN","IBCNERP8",225,0)
 .  S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNERP8",226,0)
 .  ; Must have eIV application
"RTN","IBCNERP8",227,0)
 .  I 'APPIEN Q
"RTN","IBCNERP8",228,0)
 .  ; Get Active/Trusted flag logs
"RTN","IBCNERP8",229,0)
 .  D GETFLAGS(PIEN,APPIEN,PDATA,BDT,EDT,.RPTDATA)
"RTN","IBCNERP8",230,0)
 .  ;
"RTN","IBCNERP8",231,0)
 .  S APPDATA=$G(^IBE(365.12,PIEN,1,APPIEN,0))
"RTN","IBCNERP8",232,0)
 .  ; Must be Nationally Active
"RTN","IBCNERP8",233,0)
 .  I '$P(APPDATA,U,2) Q
"RTN","IBCNERP8",234,0)
 .  ; Must not be Locally Active
"RTN","IBCNERP8",235,0)
 .  I $P(APPDATA,U,3) Q
"RTN","IBCNERP8",236,0)
 .  S $P(RPTDATA,U,5)=$P(RPTDATA,U,5)+1
"RTN","IBCNERP8",237,0)
 ;
"RTN","IBCNERP8",238,0)
 I $G(ZTSTOP) G CURX
"RTN","IBCNERP8",239,0)
 ;
"RTN","IBCNERP8",240,0)
 ; Buffer stats
"RTN","IBCNERP8",241,0)
 ; Loop thru the Ins Buffer File (#355.33)
"RTN","IBCNERP8",242,0)
 S IBIEN=0,XDT=0
"RTN","IBCNERP8",243,0)
 F  S XDT=$O(^IBA(355.33,"AEST","E",XDT)) Q:XDT=""  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",244,0)
 . F  S IBIEN=$O(^IBA(355.33,"AEST","E",XDT,IBIEN)) Q:IBIEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNERP8",245,0)
 . . S TOT=TOT+1
"RTN","IBCNERP8",246,0)
 . . I $D(ZTQUEUED),TOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERP8",247,0)
 . . S IBSYMBOL=$$SYMBOL^IBCNBLL(IBIEN)
"RTN","IBCNERP8",248,0)
 . . ; Determine piece to update based on symbol
"RTN","IBCNERP8",249,0)
 . . ; ('*') = Man. Verified,  ('#','!','-','?',blank/null) = eIV Processing
"RTN","IBCNERP8",250,0)
 . . ; ('+') = eIV Processed
"RTN","IBCNERP8",251,0)
 . . S PIECE=$S(IBSYMBOL="*":7,IBSYMBOL="+":8,IBSYMBOL="#":10,IBSYMBOL="!":11,IBSYMBOL="-":13,IBSYMBOL="?":12,1:14)
"RTN","IBCNERP8",252,0)
 . . I PIECE=12!(PIECE=14) S $P(RPTDATA,U,9)=$P($G(RPTDATA),U,9)+1
"RTN","IBCNERP8",253,0)
 . . E  S $P(RPTDATA,U,6)=$P($G(RPTDATA),U,6)+1
"RTN","IBCNERP8",254,0)
 . . S $P(RPTDATA,U,PIECE)=$P($G(RPTDATA),U,PIECE)+1
"RTN","IBCNERP8",255,0)
 ;
"RTN","IBCNERP8",256,0)
 I $G(ZTSTOP) G CURX
"RTN","IBCNERP8",257,0)
 ;
"RTN","IBCNERP8",258,0)
 ; Save data to global
"RTN","IBCNERP8",259,0)
 M ^TMP($J,RTN,"CUR")=RPTDATA
"RTN","IBCNERP8",260,0)
 ;
"RTN","IBCNERP8",261,0)
CURX ; CUR exit point
"RTN","IBCNERP8",262,0)
 Q
"RTN","IBCNERP8",263,0)
 ;
"RTN","IBCNERP8",264,0)
GETFLAGS(PIEN,APPIEN,PDATA,BDT,EDT,RPTDATA) ; get Active/Trusted flag logs
"RTN","IBCNERP8",265,0)
 ; PIEN - Payer ien in file 365.12
"RTN","IBCNERP8",266,0)
 ; APPIEN - Application ien in subfile 365.121
"RTN","IBCNERP8",267,0)
 ; PDATA - 0 node of Payer file entry
"RTN","IBCNERP8",268,0)
 ; BDT - Start date/time
"RTN","IBCNERP8",269,0)
 ; EDT - End date/time
"RTN","IBCNERP8",270,0)
 ; RPTDATA - output array, passed by reference
"RTN","IBCNERP8",271,0)
 ; 
"RTN","IBCNERP8",272,0)
 N FLAGS,IEN,PNAME,TYP,TM,VAL,Z
"RTN","IBCNERP8",273,0)
 S PNAME=$P(PDATA,U)
"RTN","IBCNERP8",274,0)
 F TYP=2,3 S TM=EDT,Z=0 F  S TM=$O(^IBE(365.12,PIEN,1,APPIEN,TYP,"B",TM),-1) Q:TM=""!($$FMDIFF^XLFDT(TM,BDT,2)'>0)  D
"RTN","IBCNERP8",275,0)
 .S IEN=$O(^IBE(365.12,PIEN,1,APPIEN,TYP,"B",TM,""))
"RTN","IBCNERP8",276,0)
 .S VAL=$$EXTERNAL^DILFD("365.121"_TYP,.02,,$P(^IBE(365.12,PIEN,1,APPIEN,TYP,IEN,0),U,2))
"RTN","IBCNERP8",277,0)
 .S Z=Z+1,RPTDATA("FLAGS",$S(TYP=2:"A",1:"T"),PNAME,Z)=$$FMTE^XLFDT(TM,"5ZS")_"^"_VAL
"RTN","IBCNERP8",278,0)
 .Q
"RTN","IBCNERP8",279,0)
 Q
"RTN","IBCNERP9")
0^26^B102330381^B85343498
"RTN","IBCNERP9",1,0)
IBCNERP9 ;DAOU/BHS - eIV STATISTICAL REPORT PRINT ;12-JUN-2002
"RTN","IBCNERP9",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416**;21-MAR-94;Build 58
"RTN","IBCNERP9",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERP9",4,0)
 ;
"RTN","IBCNERP9",5,0)
 ; eIV - Insurance Verification Interface
"RTN","IBCNERP9",6,0)
 ;
"RTN","IBCNERP9",7,0)
 ; Input variables from IBCNERP7:
"RTN","IBCNERP9",8,0)
 ;  IBCNERTN = "IBCNERP7"
"RTN","IBCNERP9",9,0)
 ; **IBCNESPC array ONLY passed by reference
"RTN","IBCNERP9",10,0)
 ;  IBCNESPC("BEGDTM") = Start Date/Time for date/time report range
"RTN","IBCNERP9",11,0)
 ;  IBCNESPC("ENDDTM") = End Date/Time for date/time report range
"RTN","IBCNERP9",12,0)
 ;  IBCNESPC("SECTS") = 1 - All, includes all sections OR
"RTN","IBCNERP9",13,0)
 ;   list of one or more of the following:
"RTN","IBCNERP9",14,0)
 ;   2 - Outgoing Data, Inquiry Transmission data,
"RTN","IBCNERP9",15,0)
 ;   3 - Incoming Data, Inquiry Response data,
"RTN","IBCNERP9",16,0)
 ;   4 - General Data, Insurance Buffer data,
"RTN","IBCNERP9",17,0)
 ;   Communication Failures, Outstanding Inquiries
"RTN","IBCNERP9",18,0)
 ;   IBCNESPC("MM") = "", do not generate MailMan message OR
"RTN","IBCNERP9",19,0)
 ;                    MAILGROUP, mailgroup to send MailMan message to
"RTN","IBCNERP9",20,0)
 ;                               based on IB site parameter
"RTN","IBCNERP9",21,0)
 ;   Assumes report data exists in ^TMP($J,IBCNERTN,...)
"RTN","IBCNERP9",22,0)
 ;   Based on IBCNESPC("SECTS") parameter the following scratch globals
"RTN","IBCNERP9",23,0)
 ;   will be built
"RTN","IBCNERP9",24,0)
 ;   1 OR contains 2 --> 
"RTN","IBCNERP9",25,0)
 ;    ^TMP($J,RTN,"OUT")=TotInq^InsBufExtSubtotal^PreRegExtSubtotal^...
"RTN","IBCNERP9",26,0)
 ;                       NonVerifInsExtSubtotal^NoActInsExtSubtotal
"RTN","IBCNERP9",27,0)
 ;   1 OR contains 3 --> 
"RTN","IBCNERP9",28,0)
 ;    ^TMP($J,RTN,"IN")=TotResp^InsBufExtSubtotal^PreRegExtSubtotal^...
"RTN","IBCNERP9",29,0)
 ;                       NonVerifInsExtSubtotal^NoActInsExtSubtotal
"RTN","IBCNERP9",30,0)
 ;   1 OR contains 4 --> 
"RTN","IBCNERP9",31,0)
 ;    ^TMP($J,RTN,"CUR")=TotOutstandingInq^TotInqRetries^...
"RTN","IBCNERP9",32,0)
 ;                       TotInqCommFailure^TotInsBufVerified^...
"RTN","IBCNERP9",33,0)
 ;                       ManVerifedSubtotal^eIVProcessedSubtotal...
"RTN","IBCNERP9",34,0)
 ;                       TotInsBufUnverified^! InsBufSubtotal^...
"RTN","IBCNERP9",35,0)
 ;                       ? InsBufSubtotal^- InsBufSubtotal^...
"RTN","IBCNERP9",36,0)
 ;                       Other InsBufSubtotal^TQReadyToTransmit^...
"RTN","IBCNERP9",37,0)
 ;                       TQHold^TQRetry
"RTN","IBCNERP9",38,0)
 ;    and ^TMP($J,RTN","PYR",PAYER NAME,IEN of file 365.12)=""
"RTN","IBCNERP9",39,0)
 ;
"RTN","IBCNERP9",40,0)
 ; Must call at EN
"RTN","IBCNERP9",41,0)
 Q
"RTN","IBCNERP9",42,0)
 ;
"RTN","IBCNERP9",43,0)
EN(IBCNERTN,IBCNESPC) ; Entry pt
"RTN","IBCNERP9",44,0)
 ;
"RTN","IBCNERP9",45,0)
 ; Init vars
"RTN","IBCNERP9",46,0)
 N CRT,MAXCNT,IBPXT,IBPGC,IBBDT,IBEDT,IBSCT,IBMM,RETRY,OUTINQ,ATTEMPT
"RTN","IBCNERP9",47,0)
 N X,Y,DIR,DTOUT,DUOUT,LIN
"RTN","IBCNERP9",48,0)
 ;
"RTN","IBCNERP9",49,0)
 S IBBDT=$G(IBCNESPC("BEGDTM")),IBEDT=$G(IBCNESPC("ENDDTM"))
"RTN","IBCNERP9",50,0)
 S IBSCT=$G(IBCNESPC("SECTS")),IBMM=$G(IBCNESPC("MM"))
"RTN","IBCNERP9",51,0)
 ;
"RTN","IBCNERP9",52,0)
 S (IBPXT,IBPGC,CRT,MAXCNT)=0
"RTN","IBCNERP9",53,0)
 ;
"RTN","IBCNERP9",54,0)
 ; Determine IO parameters if output device is NOT MailMan message
"RTN","IBCNERP9",55,0)
 I IBMM="" D
"RTN","IBCNERP9",56,0)
 . I IOST["C-" S MAXCNT=IOSL-3,CRT=1 Q
"RTN","IBCNERP9",57,0)
 . S MAXCNT=IOSL-6,CRT=0
"RTN","IBCNERP9",58,0)
 ;
"RTN","IBCNERP9",59,0)
 D PRINT(IBCNERTN,IBBDT,IBEDT,IBSCT,IBMM,.IBPGC,.IBPXT,MAXCNT,CRT)
"RTN","IBCNERP9",60,0)
 I $G(ZTSTOP)!IBPXT G EXIT
"RTN","IBCNERP9",61,0)
 I CRT,IBPGC>0,'$D(ZTQUEUED) D  G EXIT
"RTN","IBCNERP9",62,0)
 . I MAXCNT<51 F LIN=1:1:(MAXCNT-$Y) W !
"RTN","IBCNERP9",63,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERP9",64,0)
 ;
"RTN","IBCNERP9",65,0)
EXIT ; Exit pt
"RTN","IBCNERP9",66,0)
 Q
"RTN","IBCNERP9",67,0)
 ;
"RTN","IBCNERP9",68,0)
 ;
"RTN","IBCNERP9",69,0)
PRINT(RTN,BDT,EDT,SCT,MM,PGC,PXT,MAX,CRT) ; Print data
"RTN","IBCNERP9",70,0)
 ; Init vars
"RTN","IBCNERP9",71,0)
 N EORMSG,NONEMSG,LINECT,DISPDATA,HDRDATA,OFFSET,TMP,DTMRNG,SITE
"RTN","IBCNERP9",72,0)
 ;
"RTN","IBCNERP9",73,0)
 S LINECT=0
"RTN","IBCNERP9",74,0)
 ;
"RTN","IBCNERP9",75,0)
 ; Build End-Of-Report Message for display
"RTN","IBCNERP9",76,0)
 S EORMSG="*** END OF REPORT ***"
"RTN","IBCNERP9",77,0)
 S OFFSET=80-$L(EORMSG)\2
"RTN","IBCNERP9",78,0)
 S EORMSG=$$FO^IBCNEUT1(EORMSG,OFFSET+$L(EORMSG),"R")
"RTN","IBCNERP9",79,0)
 ; Build No-Data-Found Message for display
"RTN","IBCNERP9",80,0)
 S NONEMSG="* * * N O  D A T A  F O U N D * * *"
"RTN","IBCNERP9",81,0)
 S OFFSET=80-$L(NONEMSG)\2
"RTN","IBCNERP9",82,0)
 S NONEMSG=$$FO^IBCNEUT1(NONEMSG,OFFSET+$L(NONEMSG),"R")
"RTN","IBCNERP9",83,0)
 ; Build Site for display
"RTN","IBCNERP9",84,0)
 S SITE=$P($$SITE^VASITE,U,2)
"RTN","IBCNERP9",85,0)
 ; Build Date/Time Range for display
"RTN","IBCNERP9",86,0)
 ;  Build Date/Time display for Starting date/time
"RTN","IBCNERP9",87,0)
 S TMP=$$FMTE^XLFDT(BDT,"5Z")
"RTN","IBCNERP9",88,0)
 S DTMRNG=$P(TMP,"@")_" "_$P(TMP,"@",2)
"RTN","IBCNERP9",89,0)
 ;  Calculate Date/Time display for Ending date/time
"RTN","IBCNERP9",90,0)
 S TMP=$$FMTE^XLFDT(EDT,"5Z")
"RTN","IBCNERP9",91,0)
 S DTMRNG=DTMRNG_" - "_$P(TMP,"@")_" "_$P(TMP,"@",2)
"RTN","IBCNERP9",92,0)
 ;
"RTN","IBCNERP9",93,0)
 ; Print header to DISPDATA for MailMan message ONLY
"RTN","IBCNERP9",94,0)
 D HEADER^IBCNERP0(.HDRDATA,.PGC,.PXT,MAX,CRT,SITE,DTMRNG,MM)
"RTN","IBCNERP9",95,0)
 I MM'="" M DISPDATA=HDRDATA S LINECT=+$O(DISPDATA(""),-1)
"RTN","IBCNERP9",96,0)
 I MM="" KILL HDRDATA
"RTN","IBCNERP9",97,0)
 ;
"RTN","IBCNERP9",98,0)
 ; If global does not exist - display No Data message
"RTN","IBCNERP9",99,0)
 I '$D(^TMP($J,RTN)) S LINECT=LINECT+1,DISPDATA(LINECT)=NONEMSG G PRINT2
"RTN","IBCNERP9",100,0)
 ;
"RTN","IBCNERP9",101,0)
 ; Display Outgoing Data - if selected
"RTN","IBCNERP9",102,0)
 I SCT=1!(SCT[2) D  I PXT!$G(ZTSTOP) G PRINTX
"RTN","IBCNERP9",103,0)
 . ; Build lines of data to display
"RTN","IBCNERP9",104,0)
 . D DATA(.DISPDATA,.LINECT,RTN,"OUT",MM)
"RTN","IBCNERP9",105,0)
 ;
"RTN","IBCNERP9",106,0)
 ; Display Incoming Data - if selected
"RTN","IBCNERP9",107,0)
 I SCT=1!(SCT[3) D  I PXT!$G(ZTSTOP) G PRINTX
"RTN","IBCNERP9",108,0)
 . ; Build lines of data to display
"RTN","IBCNERP9",109,0)
 . D DATA(.DISPDATA,.LINECT,RTN,"IN",MM)
"RTN","IBCNERP9",110,0)
 ;
"RTN","IBCNERP9",111,0)
 ; Display General Data - if selected
"RTN","IBCNERP9",112,0)
 I SCT=1!(SCT[4) D  I PXT!$G(ZTSTOP) G PRINTX
"RTN","IBCNERP9",113,0)
 . ; Build lines of data to display
"RTN","IBCNERP9",114,0)
 . D DATA(.DISPDATA,.LINECT,RTN,"CUR",MM)
"RTN","IBCNERP9",115,0)
 . D DATA(.DISPDATA,.LINECT,RTN,"PYR",MM)
"RTN","IBCNERP9",116,0)
 . D DATA(.DISPDATA,.LINECT,RTN,"FLG",MM)
"RTN","IBCNERP9",117,0)
 ;
"RTN","IBCNERP9",118,0)
PRINT2 S LINECT=LINECT+1
"RTN","IBCNERP9",119,0)
 S DISPDATA(LINECT)=EORMSG
"RTN","IBCNERP9",120,0)
 ;
"RTN","IBCNERP9",121,0)
 I MM="" D LINE(.DISPDATA,.PGC,.PXT,MAX,CRT,SITE,DTMRNG,MM)
"RTN","IBCNERP9",122,0)
 ; Generate MailMan message, if flag is set
"RTN","IBCNERP9",123,0)
 I MM'="" D MSG^IBCNEUT5(MM,"** eIV Statistical Rpt **","DISPDATA(")
"RTN","IBCNERP9",124,0)
 ;
"RTN","IBCNERP9",125,0)
PRINTX ; PRINT exit pt
"RTN","IBCNERP9",126,0)
 Q
"RTN","IBCNERP9",127,0)
 ;
"RTN","IBCNERP9",128,0)
LINE(DISPDATA,PGC,PXT,MAX,CRT,SITE,DTMRNG,MM) ; Print line of data
"RTN","IBCNERP9",129,0)
 ; Init vars
"RTN","IBCNERP9",130,0)
 N CT,II,ARRAY,NWPG
"RTN","IBCNERP9",131,0)
 ;
"RTN","IBCNERP9",132,0)
 S NWPG=0
"RTN","IBCNERP9",133,0)
 S CT=+$O(DISPDATA(""),-1)
"RTN","IBCNERP9",134,0)
 I $Y+1+CT>MAX,PGC>1 D HEADER^IBCNERP0(.ARRAY,.PGC,.PXT,MAX,CRT,SITE,DTMRNG,MM) S NWPG=1 I PXT!$G(ZTSTOP) G LINEX
"RTN","IBCNERP9",135,0)
 F II=1:1:CT D  Q:PXT!$G(ZTSTOP)
"RTN","IBCNERP9",136,0)
 . I $Y+1>MAX!('PGC) D HEADER^IBCNERP0(.ARRAY,.PGC,.PXT,MAX,CRT,SITE,DTMRNG,MM) S NWPG=1 I PXT!$G(ZTSTOP) Q
"RTN","IBCNERP9",137,0)
 . I 'NWPG!(NWPG&(DISPDATA(II)'="")) W !,?1,DISPDATA(II)
"RTN","IBCNERP9",138,0)
 . I NWPG S NWPG=0
"RTN","IBCNERP9",139,0)
 ;
"RTN","IBCNERP9",140,0)
LINEX ; LINE exit pt
"RTN","IBCNERP9",141,0)
 Q
"RTN","IBCNERP9",142,0)
 ;
"RTN","IBCNERP9",143,0)
DATA(DISPDATA,LINECT,RTN,TYPE,MM) ; Format lines of data to be printed
"RTN","IBCNERP9",144,0)
 ; Init vars
"RTN","IBCNERP9",145,0)
 N DASHES,PEND,RPTDATA,CT,DEFINQ,INSCOS,PAYERS,QUEINQ,TXT
"RTN","IBCNERP9",146,0)
 ;
"RTN","IBCNERP9",147,0)
 S $P(DASHES,"=",15)=""
"RTN","IBCNERP9",148,0)
 I LINECT>0,MM="" S LINECT=LINECT+1,DISPDATA(LINECT)=""
"RTN","IBCNERP9",149,0)
 S LINECT=LINECT+1
"RTN","IBCNERP9",150,0)
 S DISPDATA(LINECT)=$S(TYPE="OUT":"Outgoing Data",TYPE="IN":"Incoming Data",1:"Current Status")
"RTN","IBCNERP9",151,0)
 S LINECT=LINECT+1
"RTN","IBCNERP9",152,0)
 S DISPDATA(LINECT)=DASHES
"RTN","IBCNERP9",153,0)
 ; Copy report data to local variable
"RTN","IBCNERP9",154,0)
 S RPTDATA=$G(^TMP($J,RTN,TYPE))      ; does not work for "PYR"
"RTN","IBCNERP9",155,0)
 ; Outgoing and Incoming Totals
"RTN","IBCNERP9",156,0)
 I TYPE="OUT"!(TYPE="IN") D  G DATAX
"RTN","IBCNERP9",157,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",158,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1($S(TYPE="OUT":"Inquiries Sent:",1:"Responses Received:"),36)_$$FO^IBCNEUT1(+$P(RPTDATA,U,1),9,"R")
"RTN","IBCNERP9",159,0)
 . F CT=1:1:3 D
"RTN","IBCNERP9",160,0)
 . . S TYPE="  "_$S(CT=1:"Insurance Buffer",CT=2:"Appointment",1:"Non-verified Insurance")
"RTN","IBCNERP9",161,0)
 . . S LINECT=LINECT+1
"RTN","IBCNERP9",162,0)
 . . S DISPDATA(LINECT)=$$FO^IBCNEUT1(TYPE,46)_$$FO^IBCNEUT1(+$P(RPTDATA,U,CT+1),9,"R")
"RTN","IBCNERP9",163,0)
 ;
"RTN","IBCNERP9",164,0)
 ; General Data
"RTN","IBCNERP9",165,0)
 I TYPE="CUR" D  G DATAX
"RTN","IBCNERP9",166,0)
 . ; Responses Pending
"RTN","IBCNERP9",167,0)
 . S PEND=+$P(RPTDATA,U,1)
"RTN","IBCNERP9",168,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",169,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("Responses Pending:",36)_$$FO^IBCNEUT1(PEND,9,"R")
"RTN","IBCNERP9",170,0)
 . ; Queued Inqs
"RTN","IBCNERP9",171,0)
 . S QUEINQ=+$P(RPTDATA,U,2)
"RTN","IBCNERP9",172,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",173,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("Queued Inquiries:",36)_$$FO^IBCNEUT1(QUEINQ,9,"R")
"RTN","IBCNERP9",174,0)
 . ; Deferred Inqs
"RTN","IBCNERP9",175,0)
 . S DEFINQ=+$P(RPTDATA,U,3)
"RTN","IBCNERP9",176,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",177,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("Deferred Inquiries:",36)_$$FO^IBCNEUT1(DEFINQ,9,"R")
"RTN","IBCNERP9",178,0)
 . ; Ins Cos w/o Nat ID
"RTN","IBCNERP9",179,0)
 . S INSCOS=+$P(RPTDATA,U,4)
"RTN","IBCNERP9",180,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",181,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("Insurance Companies w/o National ID:",36)_$$FO^IBCNEUT1(INSCOS,9,"R")
"RTN","IBCNERP9",182,0)
 . ; Payers disabled locally
"RTN","IBCNERP9",183,0)
 . S PAYERS=+$P(RPTDATA,U,5)
"RTN","IBCNERP9",184,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",185,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("eIV Payers Disabled Locally:",36)_$$FO^IBCNEUT1(PAYERS,9,"R")
"RTN","IBCNERP9",186,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",187,0)
 . S DISPDATA(LINECT)=""
"RTN","IBCNERP9",188,0)
 . ; Insurance Buffer statistics
"RTN","IBCNERP9",189,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",190,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("Insurance Buffer Entries: ",36)_$$FO^IBCNEUT1(($P(RPTDATA,U,6)+$P(RPTDATA,U,9)),9,"R")
"RTN","IBCNERP9",191,0)
 . ; *,+,#,! or -  symbol entries - User action required
"RTN","IBCNERP9",192,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",193,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("  User Action Required: ",46)_$$FO^IBCNEUT1(+$P(RPTDATA,U,6),9,"R")
"RTN","IBCNERP9",194,0)
 . F CT=7,8,13,10,11 D
"RTN","IBCNERP9",195,0)
 . . S LINECT=LINECT+1
"RTN","IBCNERP9",196,0)
 . . ; Added # to report
"RTN","IBCNERP9",197,0)
 . . S TYPE="    # of "
"RTN","IBCNERP9",198,0)
 . . I CT=7 S TXT="* entries (User Verified policy)"
"RTN","IBCNERP9",199,0)
 . . I CT=8 S TXT="+ entries (Payer indicated Active policy)"
"RTN","IBCNERP9",200,0)
 . . I CT=10 S TXT="# entries (Policy status undetermined)"
"RTN","IBCNERP9",201,0)
 . . I CT=11 S TXT="! entries (eIV needs user assistance for entry)"
"RTN","IBCNERP9",202,0)
 . . I CT=13 S TXT="- entries (Payer indicated Inactive policy)"
"RTN","IBCNERP9",203,0)
 . . S TYPE=TYPE_TXT
"RTN","IBCNERP9",204,0)
 . . S DISPDATA(LINECT)=$$FO^IBCNEUT1(TYPE,56)_$$FO^IBCNEUT1(+$P(RPTDATA,U,CT),9,"R")
"RTN","IBCNERP9",205,0)
 . ;
"RTN","IBCNERP9",206,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",207,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("  Entries Awaiting Processing: ",46)_$$FO^IBCNEUT1(+$P(RPTDATA,U,9),9,"R")
"RTN","IBCNERP9",208,0)
 . ; Subtotal of ? entries (eIV is waiting for a response)
"RTN","IBCNERP9",209,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",210,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("    # of ? entries (eIV is waiting for a response)",56)_$$FO^IBCNEUT1(+$P(RPTDATA,U,12),9,"R")
"RTN","IBCNERP9",211,0)
 . ; Subtotal of blank entries (yet to be processed or accepted)
"RTN","IBCNERP9",212,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",213,0)
 . S DISPDATA(LINECT)=$$FO^IBCNEUT1("    # of blank entries (yet to be processed or accepted)",56)_$$FO^IBCNEUT1(+$P(RPTDATA,U,14),9,"R")
"RTN","IBCNERP9",214,0)
 ;
"RTN","IBCNERP9",215,0)
 ; New Payers added to File 365.12
"RTN","IBCNERP9",216,0)
 I TYPE="PYR" D  G DATAX
"RTN","IBCNERP9",217,0)
 . ; Payers added to file 365.12
"RTN","IBCNERP9",218,0)
 . D DATAX
"RTN","IBCNERP9",219,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",220,0)
 . S DISPDATA(LINECT)="New eIV Payers received during report date range:"
"RTN","IBCNERP9",221,0)
 . S LINECT=LINECT+1
"RTN","IBCNERP9",222,0)
 . I '$D(^TMP($J,RTN,TYPE)) S DISPDATA(LINECT)="    No new Payers added" Q
"RTN","IBCNERP9",223,0)
 . S DISPDATA(LINECT)="  Please link the associated active insurance companies to these payers at your"
"RTN","IBCNERP9",224,0)
 . S LINECT=LINECT+1,DISPDATA(LINECT)="  earliest convenience.  Locally activate the payers after you link insurance"
"RTN","IBCNERP9",225,0)
 . S LINECT=LINECT+1,DISPDATA(LINECT)="  companies to them.  For further details regarding this process, please refer"
"RTN","IBCNERP9",226,0)
 . S LINECT=LINECT+1,DISPDATA(LINECT)="  to the Integrated Billing eIV Interface User Guide."
"RTN","IBCNERP9",227,0)
 . N PYR,PIEN
"RTN","IBCNERP9",228,0)
 . S PYR="",PIEN="" F  S PYR=$O(^TMP($J,RTN,TYPE,PYR)) Q:PYR=""  D
"RTN","IBCNERP9",229,0)
 . . F  S PIEN=$O(^TMP($J,RTN,TYPE,PYR,PIEN)) Q:'PIEN  S LINECT=LINECT+1,DISPDATA(LINECT)="    "_PYR
"RTN","IBCNERP9",230,0)
 ;
"RTN","IBCNERP9",231,0)
 ; Active/Trusted flag logs
"RTN","IBCNERP9",232,0)
 I TYPE="FLG" D  G DATAX
"RTN","IBCNERP9",233,0)
 .N DATA,PNAME,Z,FLG
"RTN","IBCNERP9",234,0)
 .F FLG="A","T" D
"RTN","IBCNERP9",235,0)
 ..S LINECT=LINECT+1,DISPDATA(LINECT)="",LINECT=LINECT+1
"RTN","IBCNERP9",236,0)
 ..I FLG="A" D
"RTN","IBCNERP9",237,0)
 ...S DISPDATA(LINECT)="National Payers - ACTIVE flag changes at FSC"
"RTN","IBCNERP9",238,0)
 ...S LINECT=LINECT+1
"RTN","IBCNERP9",239,0)
 ...S DISPDATA(LINECT)="============================================"
"RTN","IBCNERP9",240,0)
 ...Q
"RTN","IBCNERP9",241,0)
 ..I FLG="T" D
"RTN","IBCNERP9",242,0)
 ...S DISPDATA(LINECT)="Nationally Active Payers - TRUSTED flag changes at FSC"
"RTN","IBCNERP9",243,0)
 ...S LINECT=LINECT+1
"RTN","IBCNERP9",244,0)
 ...S DISPDATA(LINECT)="======================================================"
"RTN","IBCNERP9",245,0)
 ...Q
"RTN","IBCNERP9",246,0)
 ..I '$D(^TMP($J,RTN,"CUR","FLAGS",FLG)) S LINECT=LINECT+1,DISPDATA(LINECT)=" No information available" Q
"RTN","IBCNERP9",247,0)
 ..S PNAME="" F  S PNAME=$O(^TMP($J,RTN,"CUR","FLAGS",FLG,PNAME)) Q:PNAME=""  D
"RTN","IBCNERP9",248,0)
 ...S Z="" F  S Z=$O(^TMP($J,RTN,"CUR","FLAGS",FLG,PNAME,Z)) Q:Z=""  D
"RTN","IBCNERP9",249,0)
 ....S DATA=$G(^TMP($J,RTN,"CUR","FLAGS",FLG,PNAME,Z))
"RTN","IBCNERP9",250,0)
 ....S LINECT=LINECT+1
"RTN","IBCNERP9",251,0)
 ....S DISPDATA(LINECT)=$$FO^IBCNEUT1(" "_PNAME,47)_$$FO^IBCNEUT1($P(DATA,U),19)_" Set: "_$P(DATA,U,2)
"RTN","IBCNERP9",252,0)
 ....Q
"RTN","IBCNERP9",253,0)
 ...Q
"RTN","IBCNERP9",254,0)
 ..Q
"RTN","IBCNERP9",255,0)
 .Q
"RTN","IBCNERP9",256,0)
DATAX ; DATA exit pt
"RTN","IBCNERP9",257,0)
 S LINECT=LINECT+1
"RTN","IBCNERP9",258,0)
 S DISPDATA(LINECT)=""
"RTN","IBCNERP9",259,0)
 Q
"RTN","IBCNERP9",260,0)
 ;
"RTN","IBCNERP9",261,0)
 ;
"RTN","IBCNERPA")
0^20^B6564371^B29790461
"RTN","IBCNERPA",1,0)
IBCNERPA ;DAOU/BHS - IBCNE eIV RESPONSE REPORT (cont'd) ;03-JUN-2002
"RTN","IBCNERPA",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,345,416**;21-MAR-94;Build 58
"RTN","IBCNERPA",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERPA",4,0)
 ;
"RTN","IBCNERPA",5,0)
 ; eIV - Insurance Verification Interface
"RTN","IBCNERPA",6,0)
 ;
"RTN","IBCNERPA",7,0)
 ; Input from IBCNERP1/2:
"RTN","IBCNERPA",8,0)
 ;  IBCNERTN="IBCNERP1" - Driver rtn
"RTN","IBCNERPA",9,0)
 ;  IBCNESPC("BEGDT")=Start Dt,  IBCNESPC("ENDDT")=End Dt
"RTN","IBCNERPA",10,0)
 ;  IBCNESPC("PYR")=Pyr IEN OR "" for all
"RTN","IBCNERPA",11,0)
 ;  IBCNESPC("PAT")=Pat IEN OR "" for all
"RTN","IBCNERPA",12,0)
 ;  IBCNESPC("TYPE")=A (All Responses) OR M (Most Recent Responses) for
"RTN","IBCNERPA",13,0)
 ;   unique Pyr/Pt pair
"RTN","IBCNERPA",14,0)
 ;  IBCNESPC("SORT")=1 (PyrNm) OR 2 (PatNm)
"RTN","IBCNERPA",15,0)
 ;  IBCNESPC("TRCN")=Trace #^IEN, if non-null, all params null
"RTN","IBCNERPA",16,0)
 ;  IBCNESPC("RFLAG")=Report Flag used to indicate which report is being
"RTN","IBCNERPA",17,0)
 ;   run.  Response Report (O), Inactive Report (1), or Ambiguous
"RTN","IBCNERPA",18,0)
 ;   Report (2).
"RTN","IBCNERPA",19,0)
 ;  IBCNESPC("DTEXP")=Expiration date used in the inactive policy report
"RTN","IBCNERPA",20,0)
 ;
"RTN","IBCNERPA",21,0)
 ;  Based on structure of eIV Response File (#365)
"RTN","IBCNERPA",22,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,CT,0) based on ^IBCN(365,DA,0)
"RTN","IBCNERPA",23,0)
 ;    IBCNERTN="IBCNERP1", S1=PyrName(SORT=1) or PatNm(SORT=2),
"RTN","IBCNERPA",24,0)
 ;    S2=PatName(SORT=1) or PyrName(SORT=2), CT=Seq ct
"RTN","IBCNERPA",25,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,CT,1) based on ^IBCN(365,DA,1)
"RTN","IBCNERPA",26,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,2,EBCT) based on ^IBCN(365,DA,2)
"RTN","IBCNERPA",27,0)
 ;    EBCT=E/B IEN (365.02)
"RTN","IBCNERPA",28,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,2,EBCT,NTCT)=based on ^IBCN(365,DA,2,EB,NT)
"RTN","IBCNERPA",29,0)
 ;   NTCT=Notes Ct, may not be Notes IEN, if line wrapped (365.021)
"RTN","IBCNERPA",30,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,2,CNCT) based on ^IBCN(365,DA,3)
"RTN","IBCNERPA",31,0)
 ;   CNCT=Cont Pers IEN (365.03)
"RTN","IBCNERPA",32,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,4,CT)= err txt based on ^IBCN(365,DA,4)
"RTN","IBCNERPA",33,0)
 ;   CT=1/2 if >60 ch long
"RTN","IBCNERPA",34,0)
 ; Must call at one of the entry points, EN3 or EN6
"RTN","IBCNERPA",35,0)
 Q
"RTN","IBCNERPA",36,0)
 ;
"RTN","IBCNERPA",37,0)
EN3(IBCNERTN,IBCNESPC) ; Entry pt.  Calls IBCNERP3
"RTN","IBCNERPA",38,0)
 N IBBDT,IBEDT,IBPY,IBPT,IBTYP,IBSRT,CRT,MAXCNT,IBPXT
"RTN","IBCNERPA",39,0)
 N IBPGC,X,Y,DIR,DTOUT,DUOUT,LIN,IBTRC,IPRF
"RTN","IBCNERPA",40,0)
 S IBBDT=$G(IBCNESPC("BEGDT")),IBEDT=$G(IBCNESPC("ENDDT"))
"RTN","IBCNERPA",41,0)
 S IBPY=$G(IBCNESPC("PYR")),IBPT=$G(IBCNESPC("PAT"))
"RTN","IBCNERPA",42,0)
 S IBTYP=$G(IBCNESPC("TYPE")),IBSRT=$G(IBCNESPC("SORT"))
"RTN","IBCNERPA",43,0)
 S IBTRC=$P($G(IBCNESPC("TRCN")),U,1),(IBPXT,IBPGC)=0
"RTN","IBCNERPA",44,0)
 S IBEXP=$G(IBCNESPC("DTEXP"))
"RTN","IBCNERPA",45,0)
 S IPRF=$G(IBCNESPC("RFLAG"))
"RTN","IBCNERPA",46,0)
 ; Determine IO params
"RTN","IBCNERPA",47,0)
 I IOST["C-" S MAXCNT=IOSL-3,CRT=1
"RTN","IBCNERPA",48,0)
 E  S MAXCNT=IOSL-6,CRT=0
"RTN","IBCNERPA",49,0)
 D PRINT^IBCNERP3(IBCNERTN,IBBDT,IBEDT,IBPY,IBPT,IBTYP,IBSRT,.IBPGC,.IBPXT,MAXCNT,CRT,IBTRC,IBEXP,IPRF)
"RTN","IBCNERPA",50,0)
 I $G(ZTSTOP)!IBPXT G EXIT3
"RTN","IBCNERPA",51,0)
 I CRT,IBPGC>0,'$D(ZTQUEUED) D
"RTN","IBCNERPA",52,0)
 . I MAXCNT<51 F LIN=1:1:(MAXCNT-$Y) W !
"RTN","IBCNERPA",53,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERPA",54,0)
EXIT3 ; Exit pt
"RTN","IBCNERPA",55,0)
 Q
"RTN","IBCNERPA",56,0)
 ;
"RTN","IBCNERPA",57,0)
 ;
"RTN","IBCNERPA",58,0)
EN6(IBCNERTN,IBCNESPC) ; Entry pt.  Calls IBCNERP6
"RTN","IBCNERPA",59,0)
 ;
"RTN","IBCNERPA",60,0)
 ; Init vars
"RTN","IBCNERPA",61,0)
 N CRT,MAXCNT,IBPXT,IBPGC,IBBDT,IBEDT,IBPY,IBSRT,IBDTL
"RTN","IBCNERPA",62,0)
 N X,Y,DIR,DTOUT,DUOUT,LIN,TOTALS
"RTN","IBCNERPA",63,0)
 ;
"RTN","IBCNERPA",64,0)
 S IBBDT=$G(IBCNESPC("BEGDT"))
"RTN","IBCNERPA",65,0)
 S IBEDT=$G(IBCNESPC("ENDDT"))
"RTN","IBCNERPA",66,0)
 S IBPY=$G(IBCNESPC("PYR"))
"RTN","IBCNERPA",67,0)
 S IBDTL=$G(IBCNESPC("DTL"))
"RTN","IBCNERPA",68,0)
 S IBSRT=$G(IBCNESPC("SORT"))
"RTN","IBCNERPA",69,0)
 S (IBPXT,IBPGC)=0
"RTN","IBCNERPA",70,0)
 ;
"RTN","IBCNERPA",71,0)
 ; Determine IO parameters
"RTN","IBCNERPA",72,0)
 I IOST["C-" S MAXCNT=IOSL-3,CRT=1
"RTN","IBCNERPA",73,0)
 E  S MAXCNT=IOSL-6,CRT=0
"RTN","IBCNERPA",74,0)
 ;
"RTN","IBCNERPA",75,0)
 D PRINT^IBCNERP6(IBCNERTN,IBBDT,IBEDT,IBPY,IBDTL,IBSRT,.IBPGC,.IBPXT,MAXCNT,CRT)
"RTN","IBCNERPA",76,0)
 I $G(ZTSTOP)!IBPXT G EXIT6
"RTN","IBCNERPA",77,0)
 I CRT,IBPGC>0,'$D(ZTQUEUED) D
"RTN","IBCNERPA",78,0)
 . I MAXCNT<51 F LIN=1:1:(MAXCNT-$Y) W !
"RTN","IBCNERPA",79,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERPA",80,0)
 ;
"RTN","IBCNERPA",81,0)
EXIT6 ; Exit pt
"RTN","IBCNERPA",82,0)
 Q
"RTN","IBCNERPA",83,0)
 ;
"RTN","IBCNERPB")
0^27^B47288196^B47281674
"RTN","IBCNERPB",1,0)
IBCNERPB ;DAOU/RO -  eIV PAYER LINK REPORT ;AUG-2003
"RTN","IBCNERPB",2,0)
 ;;2.0;INTEGRATED BILLING;**184,252,271,416**;21-MAR-94;Build 58
"RTN","IBCNERPB",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERPB",4,0)
 ;
"RTN","IBCNERPB",5,0)
 ; eIV - Insurance Verification Interface
"RTN","IBCNERPB",6,0)
 ;
"RTN","IBCNERPB",7,0)
 ; Input parameters: N/A
"RTN","IBCNERPB",8,0)
 ; Other relevant variables ZTSAVED for queueing:
"RTN","IBCNERPB",9,0)
 ;  IBCNERTN = "IBCNERPB" (current routine name for queueing the
"RTN","IBCNERPB",10,0)
 ;   COMPILE process)
"RTN","IBCNERPB",11,0)
 ; ********
"RTN","IBCNERPB",12,0)
 ;  IBCNESPC("REP")=1 for Payer List report, 2 for Company List
"RTN","IBCNERPB",13,0)
 ;  IBCNESPC("PTYPE")=Payer type (1-no active ins linked, 2-at least 1 ins linked, 3-All Payers)
"RTN","IBCNERPB",14,0)
 ;  IBCNESPC("PSORT")=Primary Sort for Payer report
"RTN","IBCNERPB",15,0)
 ;  IBCNESPC("PPYR")=single Payer name or '' for all
"RTN","IBCNERPB",16,0)
 ;  IBCNESPC("PDET")=Ins detail on payer report (1-include list of ins,2-do not list)
"RTN","IBCNERPB",17,0)
 ;
"RTN","IBCNERPB",18,0)
 ;  IBCNESPC("ITYPE")=Ins Company type (1-no payer link, 2-linked to payer, 3-All ins companies)
"RTN","IBCNERPB",19,0)
 ;  IBCNESPC("ISORT")=Primary Sort for Payer Insurance report
"RTN","IBCNERPB",20,0)
 ;  IBCNESPC("IMAT")=Partial matching Ins carriers
"RTN","IBCNERPB",21,0)
 ; Only call this routine at a tag
"RTN","IBCNERPB",22,0)
 Q
"RTN","IBCNERPB",23,0)
 ;
"RTN","IBCNERPB",24,0)
EN ; Main entry pt
"RTN","IBCNERPB",25,0)
 ; Init vars
"RTN","IBCNERPB",26,0)
 N STOP,IBCNERTN,POP,IBCNESPC
"RTN","IBCNERPB",27,0)
 ;
"RTN","IBCNERPB",28,0)
 S STOP=0
"RTN","IBCNERPB",29,0)
 S IBCNERTN="IBCNERPB"
"RTN","IBCNERPB",30,0)
 W @IOF
"RTN","IBCNERPB",31,0)
 W !,"eIV Payer Link Report",!
"RTN","IBCNERPB",32,0)
 W !,"In order for an Insurance Company to be eligible for electronic insurance"
"RTN","IBCNERPB",33,0)
 W !,"eligibility communications via the eIV software, the Insurance Company"
"RTN","IBCNERPB",34,0)
 W !,"needs to be linked to an appropriate payer from the National EDI Payer list."
"RTN","IBCNERPB",35,0)
 W !,"The National EDI Payer list contains the names of the payers that are"
"RTN","IBCNERPB",36,0)
 W !,"currently participating with the eIV process."
"RTN","IBCNERPB",37,0)
 W !!,"This report option provides information to assist with finding unlinked"
"RTN","IBCNERPB",38,0)
 W !,"insurance companies or payers, which can subsequently be linked through the"
"RTN","IBCNERPB",39,0)
 W !,"INSURANCE COMPANY EDIT option."
"RTN","IBCNERPB",40,0)
 ;
"RTN","IBCNERPB",41,0)
 ; Report type
"RTN","IBCNERPB",42,0)
R05 D RTYPE I STOP G:$$STOP EXIT G R05
"RTN","IBCNERPB",43,0)
 S IBCNESPC("PPYR")=""
"RTN","IBCNERPB",44,0)
 ; If rpt by ins company, go to questions
"RTN","IBCNERPB",45,0)
 I $G(IBCNESPC("REP"))=2 G R120
"RTN","IBCNERPB",46,0)
 ; Payer type params
"RTN","IBCNERPB",47,0)
R20 D PAYER I STOP G:$$STOP EXIT G R05
"RTN","IBCNERPB",48,0)
 I IBCNESPC("PPYR")'="" S IBCNESPC("PTYPE")=3 G R30
"RTN","IBCNERPB",49,0)
 ; Payer details
"RTN","IBCNERPB",50,0)
R25 D PTYPE I STOP G:$$STOP EXIT G R20
"RTN","IBCNERPB",51,0)
 S IBCNESPC("PDET")=2 I IBCNESPC("PTYPE")=1 G R40
"RTN","IBCNERPB",52,0)
 ; insurance company details
"RTN","IBCNERPB",53,0)
R30 D PDET I STOP G:$$STOP EXIT G R25
"RTN","IBCNERPB",54,0)
 I IBCNESPC("PPYR")'="" S IBCNESPC("ISORT")=1 G R100
"RTN","IBCNERPB",55,0)
 ; Type of data to return param
"RTN","IBCNERPB",56,0)
R40 D PSORT I STOP G:$$STOP EXIT G R20
"RTN","IBCNERPB",57,0)
 G R100
"RTN","IBCNERPB",58,0)
 ; Payer type params
"RTN","IBCNERPB",59,0)
R120 D ITYPE^IBCNERPC I STOP G:$$STOP EXIT G R05
"RTN","IBCNERPB",60,0)
 ; Partial Ins Name to include
"RTN","IBCNERPB",61,0)
R130 D IMAT^IBCNERPC I STOP G:$$STOP EXIT G R120
"RTN","IBCNERPB",62,0)
 I IBCNESPC("ITYPE")=1 S IBCNESPC("ISORT")=1 G R100
"RTN","IBCNERPB",63,0)
 ; Type of data to return param
"RTN","IBCNERPB",64,0)
R140 D ISORT^IBCNERPC I STOP G:$$STOP EXIT G R130
"RTN","IBCNERPB",65,0)
 ; Select output device
"RTN","IBCNERPB",66,0)
R100 ; Issue output width warning if not queued
"RTN","IBCNERPB",67,0)
 I IBCNERTN="IBCNERPB",'$D(ZTQUEUED) W !!!,"*** This report is 132 characters wide ***",!
"RTN","IBCNERPB",68,0)
 D DEVICE(IBCNERTN,.IBCNESPC) I STOP G:$$STOP EXIT G R05
"RTN","IBCNERPB",69,0)
 G EXIT
"RTN","IBCNERPB",70,0)
 ;
"RTN","IBCNERPB",71,0)
EXIT ; Exit pt
"RTN","IBCNERPB",72,0)
 Q
"RTN","IBCNERPB",73,0)
 ;
"RTN","IBCNERPB",74,0)
 ;
"RTN","IBCNERPB",75,0)
COMPILE(IBCNERTN,IBCNESPC) ;
"RTN","IBCNERPB",76,0)
 ; Entry point called from EN^XUTMDEVQ in either direct or queued mode.
"RTN","IBCNERPB",77,0)
 ; Input params:
"RTN","IBCNERPB",78,0)
 ;  IBCNERTN = Routine name for ^TMP($J,...
"RTN","IBCNERPB",79,0)
 ;  IBCNESPC = Array passed by ref of the report params
"RTN","IBCNERPB",80,0)
 ;
"RTN","IBCNERPB",81,0)
 ; Init scratch globals
"RTN","IBCNERPB",82,0)
 K ^TMP($J,IBCNERTN)
"RTN","IBCNERPB",83,0)
 ; Compile
"RTN","IBCNERPB",84,0)
 I IBCNERTN="IBCNERPB" D EN^IBCNERPC(IBCNERTN,.IBCNESPC)
"RTN","IBCNERPB",85,0)
 ; Print
"RTN","IBCNERPB",86,0)
 I '$G(ZTSTOP) D
"RTN","IBCNERPB",87,0)
 . I IBCNERTN="IBCNERPB" D EN3^IBCNERPD(IBCNERTN,.IBCNESPC)
"RTN","IBCNERPB",88,0)
 ; Close device
"RTN","IBCNERPB",89,0)
 D ^%ZISC
"RTN","IBCNERPB",90,0)
 ; Kill scratch globals
"RTN","IBCNERPB",91,0)
 K ^TMP($J,IBCNERTN)
"RTN","IBCNERPB",92,0)
 ; Purge task record
"RTN","IBCNERPB",93,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCNERPB",94,0)
 ;
"RTN","IBCNERPB",95,0)
COMPILX ; COMPILE exit pt
"RTN","IBCNERPB",96,0)
 Q
"RTN","IBCNERPB",97,0)
 ;
"RTN","IBCNERPB",98,0)
STOP() ; Determine if user wants to exit out of the whole option
"RTN","IBCNERPB",99,0)
 ; Init vars
"RTN","IBCNERPB",100,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERPB",101,0)
 ;
"RTN","IBCNERPB",102,0)
 W !
"RTN","IBCNERPB",103,0)
 S DIR(0)="Y"
"RTN","IBCNERPB",104,0)
 S DIR("A")="Do you want to exit out of this option entirely"
"RTN","IBCNERPB",105,0)
 S DIR("B")="YES"
"RTN","IBCNERPB",106,0)
 S DIR("?",1)="  Enter YES to immediately exit out of this option."
"RTN","IBCNERPB",107,0)
 S DIR("?")="  Enter NO to return to the previous question."
"RTN","IBCNERPB",108,0)
 D ^DIR K DIR
"RTN","IBCNERPB",109,0)
 I $D(DIRUT) S (STOP,Y)=1 G STOPX
"RTN","IBCNERPB",110,0)
 I 'Y S STOP=0
"RTN","IBCNERPB",111,0)
 ;
"RTN","IBCNERPB",112,0)
STOPX ; STOP exit pt
"RTN","IBCNERPB",113,0)
 Q Y
"RTN","IBCNERPB",114,0)
 ;
"RTN","IBCNERPB",115,0)
RTYPE ; Prompt to allow users to select main report option
"RTN","IBCNERPB",116,0)
 ; Init vars
"RTN","IBCNERPB",117,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERPB",118,0)
 ;
"RTN","IBCNERPB",119,0)
 S DIR(0)="S^1:Payer List;2:Insurance Company List"
"RTN","IBCNERPB",120,0)
 S DIR("A")="Select a report option"
"RTN","IBCNERPB",121,0)
 S DIR("B")=1
"RTN","IBCNERPB",122,0)
 S DIR("?",1)="  1 - Payer List:   This option lists the payers in the National"
"RTN","IBCNERPB",123,0)
 S DIR("?",2)="                    Payer list, and optionally provides information about"
"RTN","IBCNERPB",124,0)
 S DIR("?",3)="                    the insurance companies that are linked to that payer"
"RTN","IBCNERPB",125,0)
 S DIR("?",4)="  2 - Insurance"
"RTN","IBCNERPB",126,0)
 S DIR("?",5)="      Company List: This option lists insurance companies and"
"RTN","IBCNERPB",127,0)
 S DIR("?")="                    optionally displays linked payer information"
"RTN","IBCNERPB",128,0)
 D ^DIR K DIR
"RTN","IBCNERPB",129,0)
 I $D(DIRUT) S STOP=1 G RTYPEX
"RTN","IBCNERPB",130,0)
 S IBCNESPC("REP")=Y
"RTN","IBCNERPB",131,0)
 ;
"RTN","IBCNERPB",132,0)
RTYPEX ; RTYPE exit pt
"RTN","IBCNERPB",133,0)
 Q
"RTN","IBCNERPB",134,0)
 ;
"RTN","IBCNERPB",135,0)
PTYPE ; Prompt to select Payer Type to include
"RTN","IBCNERPB",136,0)
 ; Init vars
"RTN","IBCNERPB",137,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERPB",138,0)
 ;
"RTN","IBCNERPB",139,0)
 S DIR(0)="S^1:Unlinked Payers;2:Linked Payers;3:ALL Payers"
"RTN","IBCNERPB",140,0)
 S DIR("A")="Select the type of payers to display"
"RTN","IBCNERPB",141,0)
 S DIR("B")="3"
"RTN","IBCNERPB",142,0)
 S DIR("?",1)="  1 - Only payers with no active insurance companies linked"
"RTN","IBCNERPB",143,0)
 S DIR("?",2)="  2 - Only payers with at least one insurance company linked"
"RTN","IBCNERPB",144,0)
 S DIR("?")="  3 - ALL Payers"
"RTN","IBCNERPB",145,0)
 D ^DIR K DIR
"RTN","IBCNERPB",146,0)
 I $D(DIRUT) S STOP=1 G PTYPEX
"RTN","IBCNERPB",147,0)
 S IBCNESPC("PTYPE")=Y
"RTN","IBCNERPB",148,0)
 ;
"RTN","IBCNERPB",149,0)
PTYPEX ; TYPE exit pt
"RTN","IBCNERPB",150,0)
 Q
"RTN","IBCNERPB",151,0)
PAYER ; Select Payer - File #365.12
"RTN","IBCNERPB",152,0)
 ; Init vars
"RTN","IBCNERPB",153,0)
 NEW DIC,DTOUT,DUOUT,X,Y
"RTN","IBCNERPB",154,0)
 ;
"RTN","IBCNERPB",155,0)
 W !!!
"RTN","IBCNERPB",156,0)
 S DIC(0)="ABEQ"
"RTN","IBCNERPB",157,0)
 S DIC("A")=$$FO^IBCNEUT1("Select a Payer (RETURN for ALL Payers): ",39,"L")
"RTN","IBCNERPB",158,0)
 ; Do not allow '~NO PAYER' or non-eIV payers
"RTN","IBCNERPB",159,0)
 S DIC("S")="I ($P(^(0),U,1)'=""~NO PAYER""),$$PYRAPP^IBCNEUT5(""IIV"",$G(Y))'="""""
"RTN","IBCNERPB",160,0)
 S DIC="^IBE(365.12,"
"RTN","IBCNERPB",161,0)
 D ^DIC
"RTN","IBCNERPB",162,0)
 I $D(DUOUT)!$D(DTOUT) S Y="" S STOP=1 G PAYERX
"RTN","IBCNERPB",163,0)
 I Y=-1 S Y=""
"RTN","IBCNERPB",164,0)
 S IBCNESPC("PPYR")=Y
"RTN","IBCNERPB",165,0)
PAYERX ; Prompt for ending Payer value
"RTN","IBCNERPB",166,0)
 Q
"RTN","IBCNERPB",167,0)
PDET ; Prompt to select to display Insurance Company details to include
"RTN","IBCNERPB",168,0)
 ; Init vars
"RTN","IBCNERPB",169,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERPB",170,0)
 ;
"RTN","IBCNERPB",171,0)
 S DIR(0)="S^1:List linked insurance company detail;2:Do not list linked insurance company detail"
"RTN","IBCNERPB",172,0)
 S DIR("A")="Select insurance company detail option"
"RTN","IBCNERPB",173,0)
 S DIR("B")="1"
"RTN","IBCNERPB",174,0)
 S DIR("?",1)="  1 - Include a list of insurance companies linked to the payers"
"RTN","IBCNERPB",175,0)
 S DIR("?")="  2 - Do not list linked insurance companies, total number only"
"RTN","IBCNERPB",176,0)
 D ^DIR K DIR
"RTN","IBCNERPB",177,0)
 I $D(DIRUT) S STOP=1 G PDETEX
"RTN","IBCNERPB",178,0)
 S IBCNESPC("PDET")=Y
"RTN","IBCNERPB",179,0)
 ;
"RTN","IBCNERPB",180,0)
PDETEX ; TYPE exit pt
"RTN","IBCNERPB",181,0)
 Q
"RTN","IBCNERPB",182,0)
 ;
"RTN","IBCNERPB",183,0)
PSORT ; Prompt to allow users to select primary sort
"RTN","IBCNERPB",184,0)
 ; Init vars
"RTN","IBCNERPB",185,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERPB",186,0)
 ;
"RTN","IBCNERPB",187,0)
 S DIR(0)="S^1:Payer Name;2:VA National Payer ID;3:Nationally Enabled Status;4:Locally Enabled Status;5:# of Linked Insurance Companies"
"RTN","IBCNERPB",188,0)
 S DIR("A")="Select the primary sort field"
"RTN","IBCNERPB",189,0)
 S DIR("B")=1
"RTN","IBCNERPB",190,0)
 S DIR("?")="  Select a data field by which this report should be primarily sorted."
"RTN","IBCNERPB",191,0)
 D ^DIR K DIR
"RTN","IBCNERPB",192,0)
 I $D(DIRUT) S STOP=1 G PSORTX
"RTN","IBCNERPB",193,0)
 S IBCNESPC("PSORT")=Y
"RTN","IBCNERPB",194,0)
 ;
"RTN","IBCNERPB",195,0)
PSORTX ; SORT exit pt
"RTN","IBCNERPB",196,0)
 Q
"RTN","IBCNERPB",197,0)
 ;
"RTN","IBCNERPB",198,0)
DEVICE(IBCNERTN,IBCNESPC) ; Device Handler and possible TaskManager calls
"RTN","IBCNERPB",199,0)
 ;
"RTN","IBCNERPB",200,0)
 ; Input params:
"RTN","IBCNERPB",201,0)
 ;  IBCNERTN = Routine name for ^TMP($J,...
"RTN","IBCNERPB",202,0)
 ;  IBCNESPC = Array passed by ref of the report params
"RTN","IBCNERPB",203,0)
 ;
"RTN","IBCNERPB",204,0)
 ; Init vars
"RTN","IBCNERPB",205,0)
 N ZTRTN,ZTDESC,ZTSAVE,POP
"RTN","IBCNERPB",206,0)
 ;
"RTN","IBCNERPB",207,0)
 S ZTRTN="COMPILE^IBCNERPB("""_IBCNERTN_""",.IBCNESPC)"
"RTN","IBCNERPB",208,0)
 S ZTDESC="IBCNE eIV Payer Link Report"
"RTN","IBCNERPB",209,0)
 S ZTSAVE("IBCNESPC(")=""
"RTN","IBCNERPB",210,0)
 S ZTSAVE("IBCNERTN")=""
"RTN","IBCNERPB",211,0)
 D EN^XUTMDEVQ(ZTRTN,ZTDESC,.ZTSAVE)
"RTN","IBCNERPB",212,0)
 I POP S STOP=1
"RTN","IBCNERPB",213,0)
 ;
"RTN","IBCNERPB",214,0)
DEVICEX ; DEVICE exit pt
"RTN","IBCNERPB",215,0)
 Q
"RTN","IBCNERPC")
0^54^B46095484^B46100582
"RTN","IBCNERPC",1,0)
IBCNERPC ;DAOU/RO - eIV PAYER LINK REPORT COMPILE ;AUG-2003
"RTN","IBCNERPC",2,0)
 ;;2.0;INTEGRATED BILLING;**184,252,271,416**;21-MAR-94;Build 58
"RTN","IBCNERPC",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERPC",4,0)
 ;
"RTN","IBCNERPC",5,0)
 ; eIV - Insurance Verification
"RTN","IBCNERPC",6,0)
 ;
"RTN","IBCNERPC",7,0)
 ; Input vars from IBCNERPB:
"RTN","IBCNERPC",8,0)
 ;  IBCNESPC("REP")=1 for Payer List report, 2 for Company List
"RTN","IBCNERPC",9,0)
 ;  IBCNESPC("PTYPE")=Payer type (1-no active ins linked, 2-at least 1 ins linked, 3-All Payers)
"RTN","IBCNERPC",10,0)
 ;  IBCNESPC("PSORT")=Primary Sort for Payer report
"RTN","IBCNERPC",11,0)
 ;  IBCNESPC("PDET")=Ins detail on payer report (1-include list of ins,2-do not list)
"RTN","IBCNERPC",12,0)
 ;
"RTN","IBCNERPC",13,0)
 ;  IBCNESPC("ITYPE")=Ins Company type (1-no payer link, 2-linked to payer, 3-All ins companies)
"RTN","IBCNERPC",14,0)
 ;  IBCNESPC("ISORT")=Primary Sort for Payer Insurance report
"RTN","IBCNERPC",15,0)
 ;  IBCNESPC("IMAT")=Partial matching Ins carriers
"RTN","IBCNERPC",16,0)
 ;
"RTN","IBCNERPC",17,0)
 ; Output vars used by IBCNERPC:
"RTN","IBCNERPC",18,0)
 ;  
"RTN","IBCNERPC",19,0)
 ;   IBCNERTN="IBCNERPB"
"RTN","IBCNERPC",20,0)
 ;   SORT1=depends on sorting option chosen
"RTN","IBCNERPC",21,0)
 ;   SORT2=Payer Name (Report by Payer) or Ins Company Name (if report is Insurance)
"RTN","IBCNERPC",22,0)
 ;  ^TMP($J,IBCNERTN,SORT1,SORT2,CNT) 
"RTN","IBCNERPC",23,0)
 ;   CNT=Seq ct
"RTN","IBCNERPC",24,0)
 ;  ^TMP($J,IBCNERTN,SORT1,SORT2,CNT,1) 
"RTN","IBCNERPC",25,0)
 ;
"RTN","IBCNERPC",26,0)
 ; Must call at EN
"RTN","IBCNERPC",27,0)
 Q
"RTN","IBCNERPC",28,0)
 ;
"RTN","IBCNERPC",29,0)
EN(IBCNERTN,IBCNESPC) ; Entry
"RTN","IBCNERPC",30,0)
 ; Init
"RTN","IBCNERPC",31,0)
 N IBTYP,IBCT,IBCTX
"RTN","IBCNERPC",32,0)
 ;
"RTN","IBCNERPC",33,0)
 N IBDET,IBSRT,IBPY,IBVAID,IBPROF,IBINST,IBNAACT,IBLOACT,IBINS,IBINST
"RTN","IBCNERPC",34,0)
 N IBINSN,IBAPP,IBPYR,SORT1,SORT2,IBSRT,IBMAT,IBPPYR,IBREP
"RTN","IBCNERPC",35,0)
 ;
"RTN","IBCNERPC",36,0)
 I '$D(ZTQUEUED),$G(IOST)["C-" W !!,"Compiling report data ..."
"RTN","IBCNERPC",37,0)
 ;
"RTN","IBCNERPC",38,0)
 ; Temp ct
"RTN","IBCNERPC",39,0)
 S IBCT=0
"RTN","IBCNERPC",40,0)
 ;
"RTN","IBCNERPC",41,0)
 ; Kill scratch globals
"RTN","IBCNERPC",42,0)
 K ^TMP($J,IBCNERTN)
"RTN","IBCNERPC",43,0)
 ;
"RTN","IBCNERPC",44,0)
 ;
"RTN","IBCNERPC",45,0)
 S IBREP=$G(IBCNESPC("REP"))
"RTN","IBCNERPC",46,0)
 S IBDET=$G(IBCNESPC("PDET"))
"RTN","IBCNERPC",47,0)
 S IBTYP=$G(IBCNESPC("PTYPE"))
"RTN","IBCNERPC",48,0)
 S IBSRT=$G(IBCNESPC("PSORT"))
"RTN","IBCNERPC",49,0)
 S IBPPYR=$G(IBCNESPC("PPYR"))
"RTN","IBCNERPC",50,0)
 ;
"RTN","IBCNERPC",51,0)
 ; Ins Report
"RTN","IBCNERPC",52,0)
 I IBREP=2 G INS
"RTN","IBCNERPC",53,0)
 ;
"RTN","IBCNERPC",54,0)
 ; Loop thru the eIV payer File (#365.12)
"RTN","IBCNERPC",55,0)
 S IBPY=0,SORT1=""
"RTN","IBCNERPC",56,0)
 F  S IBPY=$O(^IBE(365.12,IBPY)) Q:'IBPY  D  Q:$G(ZTSTOP)
"RTN","IBCNERPC",57,0)
 . I $D(ZTQUEUED),$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERPC",58,0)
 . ; Payer name from Payer File (#365.12)
"RTN","IBCNERPC",59,0)
 . S IBPYR=$P($G(^IBE(365.12,IBPY,0)),U) I IBSRT=1 S SORT1=IBPYR
"RTN","IBCNERPC",60,0)
 . S SORT2=IBPYR
"RTN","IBCNERPC",61,0)
 . I IBPYR=""!(IBPYR="~NO PAYER")!($$PYRAPP^IBCNEUT5("IIV",IBPY)="") Q
"RTN","IBCNERPC",62,0)
 . I IBPPYR'="",IBPY'=$P(IBPPYR,U) Q
"RTN","IBCNERPC",63,0)
 . ; get VA national ID
"RTN","IBCNERPC",64,0)
 . S IBVAID=$P($G(^IBE(365.12,IBPY,0)),U,2) I IBSRT=2 S SORT1=IBVAID
"RTN","IBCNERPC",65,0)
 . ; get the EDI numbers (professional and institutional)
"RTN","IBCNERPC",66,0)
 . S IBPROF=$P($G(^IBE(365.12,IBPY,0)),U,5)
"RTN","IBCNERPC",67,0)
 . S IBINST=$P($G(^IBE(365.12,IBPY,0)),U,6)
"RTN","IBCNERPC",68,0)
 . S IBAPP=$$PYRAPP^IBCNEUT5("IIV",IBPY),(IBNAACT,IBLOACT)=0
"RTN","IBCNERPC",69,0)
 . S:IBAPP'="" IBNAACT=$P($G(^IBE(365.12,IBPY,1,IBAPP,0)),U,2)
"RTN","IBCNERPC",70,0)
 . S:IBAPP'="" IBLOACT=$P($G(^IBE(365.12,IBPY,1,IBAPP,0)),U,3)
"RTN","IBCNERPC",71,0)
 . ; if no sort value, use 0
"RTN","IBCNERPC",72,0)
 . I IBSRT=3 S SORT1=IBNAACT I SORT1="" S SORT1=0
"RTN","IBCNERPC",73,0)
 . I IBSRT=4 S SORT1=IBLOACT I SORT1="" S SORT1=0
"RTN","IBCNERPC",74,0)
 . I SORT1="" S SORT1=" "
"RTN","IBCNERPC",75,0)
 . ; if sorting by count and detail, need to figure count first else sort will not work
"RTN","IBCNERPC",76,0)
 . I IBSRT=5,IBTYP>1,IBDET=1 D  S SORT1=-IBCTX
"RTN","IBCNERPC",77,0)
 . . S IBCTX=0,IBINS="" F  S IBINS=$O(^DIC(36,"AC",IBPY,IBINS)) Q:IBINS=""  D
"RTN","IBCNERPC",78,0)
 . . . S IBINSN=$G(^DIC(36,IBINS,0)),IBINSN=$P(IBINSN,U) Q:IBINSN=""  S IBCTX=IBCTX+1
"RTN","IBCNERPC",79,0)
 . ; search for insurance carriers for this payer
"RTN","IBCNERPC",80,0)
 . S IBCT=0,IBINS="" F  S IBINS=$O(^DIC(36,"AC",IBPY,IBINS)) Q:IBINS=""  D
"RTN","IBCNERPC",81,0)
 . . S IBINSN=$G(^DIC(36,IBINS,0)),IBINSN=$P(IBINSN,U) Q:IBINSN=""
"RTN","IBCNERPC",82,0)
 . . S IBCT=IBCT+1 I IBTYP=1 Q
"RTN","IBCNERPC",83,0)
 . . ; save off address and EDI#'s for Insurance carrier
"RTN","IBCNERPC",84,0)
 . . I IBDET=1 S ^TMP($J,IBCNERTN,SORT1,SORT2,IBPY,IBINSN,IBINS)=$P($G(^DIC(36,IBINS,.11)),U,1,6)_U_$P($G(^DIC(36,IBINS,3)),U,2)_U_$P($G(^DIC(36,IBINS,3)),U,4)
"RTN","IBCNERPC",85,0)
 . I IBTYP=1,IBCT>0 Q
"RTN","IBCNERPC",86,0)
 . I IBTYP=2,IBCT=0 Q
"RTN","IBCNERPC",87,0)
 . ; use reverse sort for count
"RTN","IBCNERPC",88,0)
 . I IBSRT=5 S SORT1=-IBCT
"RTN","IBCNERPC",89,0)
 . S ^TMP($J,IBCNERTN,SORT1,SORT2,IBPY)=IBVAID_U_IBPROF_U_IBINST_U_IBNAACT_U_IBLOACT_U_IBCT
"RTN","IBCNERPC",90,0)
 G EXIT
"RTN","IBCNERPC",91,0)
 ;
"RTN","IBCNERPC",92,0)
INS ;
"RTN","IBCNERPC",93,0)
 S IBTYP=$G(IBCNESPC("ITYPE"))
"RTN","IBCNERPC",94,0)
 S IBSRT=$G(IBCNESPC("ISORT"))
"RTN","IBCNERPC",95,0)
 S IBMAT=$G(IBCNESPC("IMAT"))
"RTN","IBCNERPC",96,0)
 ; Loop thru the Insurance company file
"RTN","IBCNERPC",97,0)
 S IBINS=0
"RTN","IBCNERPC",98,0)
 F  S IBINS=$O(^DIC(36,IBINS)) Q:'IBINS  D  Q:$G(ZTSTOP)
"RTN","IBCNERPC",99,0)
 . I $D(ZTQUEUED),$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERPC",100,0)
 . S (SORT1,IBPYR,IBNAACT,IBLOACT,IBPROF,IBINST,IBVAID)=""
"RTN","IBCNERPC",101,0)
 . S IBINSN=$P($G(^DIC(36,IBINS,0)),U) I IBSRT=1 S SORT1=IBINSN
"RTN","IBCNERPC",102,0)
 . S SORT2=IBINSN
"RTN","IBCNERPC",103,0)
 . I IBINSN="" Q
"RTN","IBCNERPC",104,0)
 . I IBMAT'="",'$F($$UP^XLFSTR(IBINSN),$$UP^XLFSTR(IBMAT)) Q
"RTN","IBCNERPC",105,0)
 . ; get payer
"RTN","IBCNERPC",106,0)
 . S IBPY=$P($G(^DIC(36,IBINS,3)),U,10)
"RTN","IBCNERPC",107,0)
 . I IBTYP=1,IBPY'="" Q
"RTN","IBCNERPC",108,0)
 . I IBTYP=2,IBPY="" Q
"RTN","IBCNERPC",109,0)
 . I IBPY'="" D
"RTN","IBCNERPC",110,0)
 . . ; Payer name from Payer File (#365.12)
"RTN","IBCNERPC",111,0)
 . . S IBPYR=$P($G(^IBE(365.12,IBPY,0)),U) I IBSRT=2 S SORT1=IBPYR
"RTN","IBCNERPC",112,0)
 . . ; get VA national ID
"RTN","IBCNERPC",113,0)
 . . S IBVAID=$P($G(^IBE(365.12,IBPY,0)),U,2) I IBSRT=3 S SORT1=IBVAID
"RTN","IBCNERPC",114,0)
 . . S IBPROF=$P($G(^IBE(365.12,IBPY,0)),U,5)
"RTN","IBCNERPC",115,0)
 . . S IBINST=$P($G(^IBE(365.12,IBPY,0)),U,6)
"RTN","IBCNERPC",116,0)
 . . S IBAPP=$$PYRAPP^IBCNEUT5("IIV",IBPY),(IBNAACT,IBLOACT)=0
"RTN","IBCNERPC",117,0)
 . . S:IBAPP'="" IBNAACT=$P($G(^IBE(365.12,IBPY,1,IBAPP,0)),U,2)
"RTN","IBCNERPC",118,0)
 . . S:IBAPP'="" IBLOACT=$P($G(^IBE(365.12,IBPY,1,IBAPP,0)),U,3)
"RTN","IBCNERPC",119,0)
 . . I IBSRT=4 S SORT1=IBNAACT I SORT1="" S SORT1=0
"RTN","IBCNERPC",120,0)
 . . I IBSRT=5 S SORT1=IBLOACT I SORT1="" S SORT1=0
"RTN","IBCNERPC",121,0)
 . I SORT1="" S SORT1=" "
"RTN","IBCNERPC",122,0)
 . S ^TMP($J,IBCNERTN,SORT1,SORT2,IBINS)=IBPYR_U_IBVAID_U_IBPROF_U_IBINST_U_IBNAACT_U_IBLOACT_U_IBCT_U_$G(^DIC(36,IBINS,.11))_U_"~"_$G(^DIC(36,IBINS,3))
"RTN","IBCNERPC",123,0)
 ;
"RTN","IBCNERPC",124,0)
EXIT ;
"RTN","IBCNERPC",125,0)
 Q
"RTN","IBCNERPC",126,0)
 ; Lines moved from IBCNERPB
"RTN","IBCNERPC",127,0)
ITYPE ; Prompt to select Insurance Company type to include
"RTN","IBCNERPC",128,0)
 ; Init vars
"RTN","IBCNERPC",129,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERPC",130,0)
 ;
"RTN","IBCNERPC",131,0)
 S DIR(0)="S^1:Unlinked insurance companies;2:Linked insurance companies;3:All insurance companies"
"RTN","IBCNERPC",132,0)
 S DIR("A")="Select type of insurance companies to display"
"RTN","IBCNERPC",133,0)
 S DIR("B")="3"
"RTN","IBCNERPC",134,0)
 S DIR("?",1)="  1 - Only insurance companies that are not currently linked to a payer"
"RTN","IBCNERPC",135,0)
 S DIR("?",2)="  2 - Only insurance companies that are currently linked to a payer"
"RTN","IBCNERPC",136,0)
 S DIR("?")="  3 - ALL insurance companies"
"RTN","IBCNERPC",137,0)
 D ^DIR K DIR
"RTN","IBCNERPC",138,0)
 I $D(DIRUT) S STOP=1 G ITYPEX
"RTN","IBCNERPC",139,0)
 S IBCNESPC("ITYPE")=Y
"RTN","IBCNERPC",140,0)
 ;
"RTN","IBCNERPC",141,0)
ITYPEX ; TYPE exit pt
"RTN","IBCNERPC",142,0)
 Q
"RTN","IBCNERPC",143,0)
ISORT ; Prompt to allow users to select primary sort
"RTN","IBCNERPC",144,0)
 ; Init vars
"RTN","IBCNERPC",145,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERPC",146,0)
 ;
"RTN","IBCNERPC",147,0)
 S DIR(0)="S^1:Insurance Company Name;2:Payer Name;3:VA National Payer ID;4:Nationally Enabled Status;5:Locally Enabled Status"
"RTN","IBCNERPC",148,0)
 S DIR("A")="Select the primary sort field"
"RTN","IBCNERPC",149,0)
 S DIR("B")=1
"RTN","IBCNERPC",150,0)
 S DIR("?")="  Select the data field by which this report should be primarily sorted."
"RTN","IBCNERPC",151,0)
 D ^DIR K DIR
"RTN","IBCNERPC",152,0)
 I $D(DIRUT) S STOP=1 G ISORTX
"RTN","IBCNERPC",153,0)
 S IBCNESPC("ISORT")=Y
"RTN","IBCNERPC",154,0)
 ;
"RTN","IBCNERPC",155,0)
ISORTX ; SORT exit pt
"RTN","IBCNERPC",156,0)
 Q
"RTN","IBCNERPC",157,0)
IMAT ; Prompt to allow users to select partial Ins carrier to include
"RTN","IBCNERPC",158,0)
 N DIR,X,Y,DIRUT
"RTN","IBCNERPC",159,0)
 ;
"RTN","IBCNERPC",160,0)
 W !
"RTN","IBCNERPC",161,0)
 S DIR(0)="FO"
"RTN","IBCNERPC",162,0)
 S DIR("A")="Enter an insurance company search keyword (RETURN for ALL)"
"RTN","IBCNERPC",163,0)
 S DIR("B")=""
"RTN","IBCNERPC",164,0)
 S DIR("?",1)="     Enter a value to match insurance company names with."
"RTN","IBCNERPC",165,0)
 S DIR("?",2)="     Simply hit RETURN to select ALL or enter a keyword"
"RTN","IBCNERPC",166,0)
 S DIR("?",3)="     (ex. 'CIGNA' would return CIGNA, CIGNA HICN, NATIONAL CIGNA,"
"RTN","IBCNERPC",167,0)
 S DIR("?")="     REGION 1 CIGNA and any others with the term 'CIGNA' in it)"
"RTN","IBCNERPC",168,0)
 D ^DIR K DIR
"RTN","IBCNERPC",169,0)
 I $D(DUOUT)!$D(DTOUT) S Y="" S STOP=1 G IMATX
"RTN","IBCNERPC",170,0)
 S IBCNESPC("IMAT")=Y
"RTN","IBCNERPC",171,0)
 ;                                                                       
"RTN","IBCNERPC",172,0)
IMATX Q
"RTN","IBCNERPD")
0^28^B44163811^B45776123
"RTN","IBCNERPD",1,0)
IBCNERPD ;DAOU/RO - eIV PAYER LINK REPORT PRINT;AUG-2003
"RTN","IBCNERPD",2,0)
 ;;2.0;INTEGRATED BILLING;**184,252,416**;21-MAR-94;Build 58
"RTN","IBCNERPD",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERPD",4,0)
 ;
"RTN","IBCNERPD",5,0)
 ; eIV - Insurance Verification
"RTN","IBCNERPD",6,0)
 ;
"RTN","IBCNERPD",7,0)
 ; Called by IBCNERPB
"RTN","IBCNERPD",8,0)
 ; Input from IBCNERPB/C:
"RTN","IBCNERPD",9,0)
 ;  
"RTN","IBCNERPD",10,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,CT,0)
"RTN","IBCNERPD",11,0)
 ;    IBCNERTN="IBCNERPB", 
"RTN","IBCNERPD",12,0)
 ;    CT=Seq ct
"RTN","IBCNERPD",13,0)
 ;  ^TMP($J,IBCNERTN,S1,S2,CT,1) 
"RTN","IBCNERPD",14,0)
 ;
"RTN","IBCNERPD",15,0)
EN3(IBCNERTN,IBCNESPC) ; Entry pt.  
"RTN","IBCNERPD",16,0)
 N IBTYP,IBSRT,CRT,MAXCNT,IBPXT
"RTN","IBCNERPD",17,0)
 N IBPGC,X,Y,DIR,DTOUT,DUOUT,LIN,IBTRC,IBMAT,IBREP,IBDET,IBPPYR,ZZ
"RTN","IBCNERPD",18,0)
 S IBREP=$G(IBCNESPC("REP"))
"RTN","IBCNERPD",19,0)
 S IBDET=$G(IBCNESPC("PDET"))
"RTN","IBCNERPD",20,0)
 S IBTYP=$G(IBCNESPC("PTYPE"))
"RTN","IBCNERPD",21,0)
 S IBSRT=$G(IBCNESPC("PSORT"))
"RTN","IBCNERPD",22,0)
 S IBPPYR=$G(IBCNESPC("PPYR"))
"RTN","IBCNERPD",23,0)
 ; Ins Report
"RTN","IBCNERPD",24,0)
 I IBREP=2 D
"RTN","IBCNERPD",25,0)
 . S IBTYP=$G(IBCNESPC("ITYPE"))
"RTN","IBCNERPD",26,0)
 . S IBSRT=$G(IBCNESPC("ISORT"))
"RTN","IBCNERPD",27,0)
 . S IBMAT=$G(IBCNESPC("IMAT"))
"RTN","IBCNERPD",28,0)
 S (IBPXT,IBPGC)=0
"RTN","IBCNERPD",29,0)
 ; Determine IO params
"RTN","IBCNERPD",30,0)
 I IOST["C-" S MAXCNT=IOSL-3,CRT=1
"RTN","IBCNERPD",31,0)
 E  S MAXCNT=IOSL-6,CRT=0
"RTN","IBCNERPD",32,0)
 D PRINT(IBCNERTN,IBREP,IBDET,IBTYP,IBSRT,.IBPGC,.IBPXT,MAXCNT,CRT)
"RTN","IBCNERPD",33,0)
 I $G(ZTSTOP)!IBPXT G EXIT3
"RTN","IBCNERPD",34,0)
 I CRT,IBPGC>0,'$D(ZTQUEUED) D
"RTN","IBCNERPD",35,0)
 . I MAXCNT<51 F LIN=1:1:(MAXCNT-$Y) W !
"RTN","IBCNERPD",36,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERPD",37,0)
EXIT3 ; Exit pt
"RTN","IBCNERPD",38,0)
 Q
"RTN","IBCNERPD",39,0)
 ;
"RTN","IBCNERPD",40,0)
PRINT(RTN,REP,DET,TYP,SRT,PGC,PXT,MAX,CRT) ; Print data
"RTN","IBCNERPD",41,0)
 ; Input: RTN="IBCENRPB"
"RTN","IBCNERPD",42,0)
 ;   PGC=page ct, PXT=exit flg,
"RTN","IBCNERPD",43,0)
 ;  MAX=max line ct/pg, CRT=1/0
"RTN","IBCNERPD",44,0)
 N EORMSG,NONEMSG,SORT1,SORT2,CNT,DASH
"RTN","IBCNERPD",45,0)
 S EORMSG="*** END OF REPORT ***"
"RTN","IBCNERPD",46,0)
 S NONEMSG="* * * N O  D A T A  F O U N D * * *"
"RTN","IBCNERPD",47,0)
 S (SORT1,SORT2)="",$P(DASH,"-",132)=""
"RTN","IBCNERPD",48,0)
 I '$D(^TMP($J,RTN)) D HEADER W !,?(80-$L(NONEMSG)\2),NONEMSG,!!
"RTN","IBCNERPD",49,0)
 F  S SORT1=$O(^TMP($J,RTN,SORT1)) Q:SORT1=""  D  Q:PXT!$G(ZTSTOP)
"RTN","IBCNERPD",50,0)
 . S SORT2="" F  S SORT2=$O(^TMP($J,RTN,SORT1,SORT2)) Q:SORT2=""  D  Q:PXT!$G(ZTSTOP)
"RTN","IBCNERPD",51,0)
 . . S CNT="" F  S CNT=$O(^TMP($J,RTN,SORT1,SORT2,CNT)) Q:CNT=""  D  Q:PXT!$G(ZTSTOP)
"RTN","IBCNERPD",52,0)
 . . . K DISPDATA  ; Init disp
"RTN","IBCNERPD",53,0)
 . . . D DATA(.DISPDATA),LINE(.DISPDATA)  ; build/display data
"RTN","IBCNERPD",54,0)
 ;
"RTN","IBCNERPD",55,0)
 I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERPD",56,0)
 I $Y+1>MAX!('PGC) D HEADER I $G(ZTSTOP)!PXT G PRINTX
"RTN","IBCNERPD",57,0)
 W !,?(80-$L(EORMSG)\2),EORMSG
"RTN","IBCNERPD",58,0)
PRINTX ;
"RTN","IBCNERPD",59,0)
 Q
"RTN","IBCNERPD",60,0)
 ;
"RTN","IBCNERPD",61,0)
HEADER ; Print hdr info
"RTN","IBCNERPD",62,0)
 N X,Y,DIR,DTOUT,DUOUT,OFFSET,HDR,LIN,HDR
"RTN","IBCNERPD",63,0)
 I CRT,PGC>0,'$D(ZTQUEUED) D  I PXT G HEADERX
"RTN","IBCNERPD",64,0)
 . I MAX<51 F LIN=1:1:(MAX-$Y) W !
"RTN","IBCNERPD",65,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERPD",66,0)
 . I $D(DTOUT)!($D(DUOUT)) S PXT=1 Q
"RTN","IBCNERPD",67,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD() S ZTSTOP=1 G HEADERX
"RTN","IBCNERPD",68,0)
 S PGC=PGC+1
"RTN","IBCNERPD",69,0)
 W @IOF,!,?1,"eIV Payer Link Report"
"RTN","IBCNERPD",70,0)
 S HDR=$$FMTE^XLFDT($$NOW^XLFDT,1)_"  Page: "_PGC,OFFSET=131-$L(HDR)
"RTN","IBCNERPD",71,0)
 W ?OFFSET,HDR
"RTN","IBCNERPD",72,0)
 W !,?1,"Report Option: "_$S(REP=1:"Payer List",1:"Insurance Company List")
"RTN","IBCNERPD",73,0)
 I REP=1 D
"RTN","IBCNERPD",74,0)
 . S HDR=$S(TYP=1:"Unlinked Payers Only",TYP=2:"Linked Payers Only",1:"All Payers")
"RTN","IBCNERPD",75,0)
 . I TYP=3 S HDR=HDR_", "_$S(DET=1:"With Ins. Co. Detail",1:"Without Ins. Co. Detail")
"RTN","IBCNERPD",76,0)
 I REP=2 D
"RTN","IBCNERPD",77,0)
 . S HDR=$S(TYP=1:"Unlinked Insurance Companies Only",TYP=2:"Linked Insurance Companies Only",1:"All Insurance Companies")
"RTN","IBCNERPD",78,0)
 S OFFSET=79-$L(HDR)
"RTN","IBCNERPD",79,0)
 W ?OFFSET,HDR
"RTN","IBCNERPD",80,0)
 W !
"RTN","IBCNERPD",81,0)
 I REP=1 D
"RTN","IBCNERPD",82,0)
 . I IBPPYR'="" W ?1,"For Single Payer: ",$P(IBPPYR,"^",2)
"RTN","IBCNERPD",83,0)
 . W !?39,"National",?54,"# Linked",?67,"Nationally",?82,"Locally",?94,"Prof.",?115,"Inst."
"RTN","IBCNERPD",84,0)
 . W !,"Payer Name:",?39,"Payer ID",?54,"Ins. Co.",?67,"Active?",?82,"Active?",?94,"EDI#",?115,"EDI#"
"RTN","IBCNERPD",85,0)
 I REP=2 D
"RTN","IBCNERPD",86,0)
 . I IBMAT'="" W ?1,"Only Insurance Companies that match: ",IBMAT
"RTN","IBCNERPD",87,0)
 . W !?56,"Nat.",?71,"Loc.",?83,"Prof.",?104,"Inst."
"RTN","IBCNERPD",88,0)
 . W !,"Insurance Company:",?56,"Act?",?71,"Act?",?83,"EDI#",?104,"EDI#"
"RTN","IBCNERPD",89,0)
 . I TYP'=1 W !,"   Payer:",?41,"VA ID"
"RTN","IBCNERPD",90,0)
 W !,DASH
"RTN","IBCNERPD",91,0)
HEADERX ;
"RTN","IBCNERPD",92,0)
 Q
"RTN","IBCNERPD",93,0)
 ;
"RTN","IBCNERPD",94,0)
LINE(DISPDATA) ;  Print data
"RTN","IBCNERPD",95,0)
 N LNCT,LNTOT,NWPG
"RTN","IBCNERPD",96,0)
 S LNTOT=+$O(DISPDATA(""),-1)
"RTN","IBCNERPD",97,0)
 S NWPG=0
"RTN","IBCNERPD",98,0)
 F LNCT=1:1:LNTOT D  Q:$G(ZTSTOP)!PXT
"RTN","IBCNERPD",99,0)
 . I $Y+1>MAX!('PGC) D HEADER S NWPG=1 I $G(ZTSTOP)!PXT Q
"RTN","IBCNERPD",100,0)
 . W !,?1,DISPDATA(LNCT) Q
"RTN","IBCNERPD",101,0)
 . I 'NWPG!(NWPG&(DISPDATA(LNCT)'="")) W !,?1,DISPDATA(LNCT)
"RTN","IBCNERPD",102,0)
 . I NWPG S NWPG=0
"RTN","IBCNERPD",103,0)
 . Q
"RTN","IBCNERPD",104,0)
LINEX Q
"RTN","IBCNERPD",105,0)
 ;
"RTN","IBCNERPD",106,0)
DATA(DISPDATA) ;  Build disp lines
"RTN","IBCNERPD",107,0)
 N LCT,CT,CT2,RPTDATA,XX,YY,ZZ
"RTN","IBCNERPD",108,0)
 ; Merge into local array
"RTN","IBCNERPD",109,0)
 M RPTDATA=^TMP($J,RTN,SORT1,SORT2,CNT)
"RTN","IBCNERPD",110,0)
 ; Build
"RTN","IBCNERPD",111,0)
 ;
"RTN","IBCNERPD",112,0)
 ; PAYER REPORT
"RTN","IBCNERPD",113,0)
 I REP=1 D
"RTN","IBCNERPD",114,0)
 . ; 1st line is payer
"RTN","IBCNERPD",115,0)
 . S LCT=1,DISPDATA(1)=$$FO^IBCNEUT1(SORT2,35,"L")_"   "_$$FO^IBCNEUT1($P(RPTDATA,U,1),10,"L")_"     "_$$FO^IBCNEUT1($P(RPTDATA,U,6),5,"R")_"        "_$$FO^IBCNEUT1($S($P(RPTDATA,U,4)=1:"YES",1:"NO"),15,"L")
"RTN","IBCNERPD",116,0)
 . S DISPDATA(1)=DISPDATA(1)_$$FO^IBCNEUT1($S($P(RPTDATA,U,5)=1:"YES",1:"NO"),12,"L")_$$FO^IBCNEUT1($P(RPTDATA,U,2),16,"L")_"     "_$$FO^IBCNEUT1($P(RPTDATA,U,3),16,"L")
"RTN","IBCNERPD",117,0)
 . ; See if detail is required
"RTN","IBCNERPD",118,0)
 . I DET=1 D
"RTN","IBCNERPD",119,0)
 . . I $O(RPTDATA(""))'="" S LCT=LCT+1,DISPDATA(LCT)="   Linked Insurance Companies:"
"RTN","IBCNERPD",120,0)
 . . S (XX,YY,ZZ)="" F  S XX=$O(RPTDATA(XX)) Q:XX=""  F  S YY=$O(RPTDATA(XX,YY)) Q:YY=""  D
"RTN","IBCNERPD",121,0)
 . . . S ZZ=RPTDATA(XX,YY)
"RTN","IBCNERPD",122,0)
 . . . S LCT=LCT+1,DISPDATA(LCT)="   "_$$FO^IBCNEUT1(XX,35,"L")_"  "_$$FO^IBCNEUT1($P(ZZ,U,1),20,"L")_" "_$E($P(ZZ,U,4),1,15)
"RTN","IBCNERPD",123,0)
 . . . ; don't display ','s if no address/state on file
"RTN","IBCNERPD",124,0)
 . . . I $P(ZZ,U,5)'="" S DISPDATA(LCT)=DISPDATA(LCT)_", "_$P($G(^DIC(5,$P(ZZ,U,5)+0,0)),U,2)
"RTN","IBCNERPD",125,0)
 . . . S DISPDATA(LCT)=DISPDATA(LCT)_$$FO^IBCNEUT1(" ",93-$L(DISPDATA(LCT)),"L")
"RTN","IBCNERPD",126,0)
 . . . ; display EDI#'s
"RTN","IBCNERPD",127,0)
 . . . S DISPDATA(LCT)=DISPDATA(LCT)_$$FO^IBCNEUT1($P(ZZ,U,7),16,"L")_"     "_$$FO^IBCNEUT1($P(ZZ,U,8),16,"L")
"RTN","IBCNERPD",128,0)
 ;
"RTN","IBCNERPD",129,0)
 ; Insurance Company Report
"RTN","IBCNERPD",130,0)
 I REP=2 D
"RTN","IBCNERPD",131,0)
 . ; Ins carrier
"RTN","IBCNERPD",132,0)
 . S DISPDATA(1)=$$FO^IBCNEUT1(SORT2,82,"L")
"RTN","IBCNERPD",133,0)
 . ; Ins address
"RTN","IBCNERPD",134,0)
 . S ZZ=$P(RPTDATA,"~",2),DISPDATA(1)=DISPDATA(1)_$$FO^IBCNEUT1($P(ZZ,U,2),16,"L")_"     "_$$FO^IBCNEUT1($P(ZZ,U,4),16,"L")
"RTN","IBCNERPD",135,0)
 . S DISPDATA(2)="        "_$P(RPTDATA,U,8)_"  "_$P(RPTDATA,U,11)
"RTN","IBCNERPD",136,0)
 . ; Add state/zip if defined
"RTN","IBCNERPD",137,0)
 . I $P(RPTDATA,U,12)'="" S DISPDATA(2)=DISPDATA(2)_", "_$P($G(^DIC(5,$P(RPTDATA,U,12)+0,0)),U,2)_" "_$$FO^IBCNEUT1($P(RPTDATA,U,13),5,"L")
"RTN","IBCNERPD",138,0)
 . ; if no payer is linked AND displaying payers
"RTN","IBCNERPD",139,0)
 . I $P(RPTDATA,U)="",TYP'=1 S DISPDATA(3)="   ** NOT CURRENTLY LINKED **",LCT=4,DISPDATA(4)="  " Q
"RTN","IBCNERPD",140,0)
 . ; if no payer and not displaying then quit
"RTN","IBCNERPD",141,0)
 . I $P(RPTDATA,U)="" S LCT=3,DISPDATA(3)="  " Q
"RTN","IBCNERPD",142,0)
 . ; Display Payer Info Line
"RTN","IBCNERPD",143,0)
 . S DISPDATA(3)="  "_$$FO^IBCNEUT1($P(RPTDATA,U,1),35,"L")_"   "_$$FO^IBCNEUT1($P(RPTDATA,U,2),15,"L")_$$FO^IBCNEUT1($S($P(RPTDATA,U,5)=1:"YES",1:"NO"),15,"L")
"RTN","IBCNERPD",144,0)
 . S DISPDATA(3)=DISPDATA(3)_$$FO^IBCNEUT1($S($P(RPTDATA,U,6)=1:"YES",1:"NO"),12,"L")_$$FO^IBCNEUT1($P(RPTDATA,U,4),16,"L")_"     "_$$FO^IBCNEUT1($P(RPTDATA,U,4),16,"L")
"RTN","IBCNERPD",145,0)
 . S LCT=4,DISPDATA(4)=" "
"RTN","IBCNERPD",146,0)
 S LCT=LCT+1
"RTN","IBCNERPD",147,0)
 Q
"RTN","IBCNERPE")
0^18^B36361133^B68650966
"RTN","IBCNERPE",1,0)
IBCNERPE ;DAOU/BHS - IBCNE eIV RESPONSE REPORT (cont'd);03-JUN-2002
"RTN","IBCNERPE",2,0)
 ;;2.0;INTEGRATED BILLING;**271,300,416**;21-MAR-94;Build 58
"RTN","IBCNERPE",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERPE",4,0)
 ;
"RTN","IBCNERPE",5,0)
 ; Must call at tag
"RTN","IBCNERPE",6,0)
 Q
"RTN","IBCNERPE",7,0)
 ;
"RTN","IBCNERPE",8,0)
 ; This tag is only called from IBCNERP2
"RTN","IBCNERPE",9,0)
 ;
"RTN","IBCNERPE",10,0)
GETDATA(IEN,RPTDATA) ; Retrieve response data
"RTN","IBCNERPE",11,0)
 ; Init
"RTN","IBCNERPE",12,0)
 N %,CNCT,CNPTR,DIW,DIWI,DIWT,DIWTC,DIWX,DN,ERRTEXT,FUTDT,IBERR,II,PC,TQIEN
"RTN","IBCNERPE",13,0)
 ;
"RTN","IBCNERPE",14,0)
 ; Insured Info from eIV Response #365
"RTN","IBCNERPE",15,0)
 S RPTDATA(0)=$G(^IBCN(365,IEN,0)),TQIEN=$P(RPTDATA(0),U,5)
"RTN","IBCNERPE",16,0)
 ; Trans dates to ext format
"RTN","IBCNERPE",17,0)
 S $P(RPTDATA(0),U,7)=$$FMTE^XLFDT($P(RPTDATA(0),U,7)\1,"5Z")
"RTN","IBCNERPE",18,0)
 S RPTDATA(1)=$G(^IBCN(365,IEN,1))
"RTN","IBCNERPE",19,0)
 ; Trans ext values for SET of CODES values
"RTN","IBCNERPE",20,0)
 S $P(RPTDATA(1),U,8)=$$GET1^DIQ(365,IEN_",",1.08,"E")   ; Whose Ins
"RTN","IBCNERPE",21,0)
 S $P(RPTDATA(1),U,9)=$$GET1^DIQ(365,IEN_",",1.09,"E")   ; Pt Rel to Sub
"RTN","IBCNERPE",22,0)
 S $P(RPTDATA(1),U,13)=$$GET1^DIQ(365,IEN_",",1.13,"E")  ; COB
"RTN","IBCNERPE",23,0)
 ; Trans err actions/codes to ext
"RTN","IBCNERPE",24,0)
 S $P(RPTDATA(1),U,14)=$$X12^IBCNERP2(365.017,$P(RPTDATA(1),U,14))
"RTN","IBCNERPE",25,0)
 S $P(RPTDATA(1),U,15)=$$X12^IBCNERP2(365.018,$P(RPTDATA(1),U,15))
"RTN","IBCNERPE",26,0)
 ; Trans dates to ext format - check format
"RTN","IBCNERPE",27,0)
 F PC=2,9:1:12,16,17,19 S $P(RPTDATA(1),U,PC)=$$FMTE^XLFDT($P(RPTDATA(1),U,PC),"5Z")
"RTN","IBCNERPE",28,0)
 ;
"RTN","IBCNERPE",29,0)
 ; Loop thru mult Contact segs
"RTN","IBCNERPE",30,0)
 S CNCT=0
"RTN","IBCNERPE",31,0)
 F  S CNCT=$O(^IBCN(365,IEN,3,CNCT)) Q:'CNCT  D
"RTN","IBCNERPE",32,0)
 .  S RPTDATA(3,CNCT)=$G(^IBCN(365,IEN,3,CNCT,0))
"RTN","IBCNERPE",33,0)
 .  ; Disp. blank if NOT SPECIFIED
"RTN","IBCNERPE",34,0)
 .  I $P(RPTDATA(3,CNCT),U)="NOT SPECIFIED" S $P(RPTDATA(3,CNCT),U)=""
"RTN","IBCNERPE",35,0)
 .  ; Comm Qual #1-3
"RTN","IBCNERPE",36,0)
 .  F II=1:1:3 D
"RTN","IBCNERPE",37,0)
 .  . S CNPTR=$$X12^IBCNERP2(365.021,$P(RPTDATA(3,CNCT),U,II*2))
"RTN","IBCNERPE",38,0)
 .  . I CNPTR'="" S $P(RPTDATA(3,CNCT),U,II*2)=CNPTR_": "_$P(RPTDATA(3,CNCT),U,II*2+1),$P(RPTDATA(3,CNCT),U,II*2+1)=""
"RTN","IBCNERPE",39,0)
 ;
"RTN","IBCNERPE",40,0)
 ; Error Txt
"RTN","IBCNERPE",41,0)
 S ERRTEXT=$G(^IBCN(365,IEN,4))
"RTN","IBCNERPE",42,0)
 I ERRTEXT="" G FUTDT
"RTN","IBCNERPE",43,0)
 D FSTRNG^IBJU1(ERRTEXT,60,.IBERR)
"RTN","IBCNERPE",44,0)
 ; Loop thru text (60 chars)
"RTN","IBCNERPE",45,0)
 S II=0
"RTN","IBCNERPE",46,0)
 F  S II=$O(IBERR(II)) Q:'II  I $G(IBERR(II))'="" D
"RTN","IBCNERPE",47,0)
 .  S RPTDATA(4,II)=$G(IBERR(II))
"RTN","IBCNERPE",48,0)
FUTDT I TQIEN D  ; If there is a future date, display it
"RTN","IBCNERPE",49,0)
 . S FUTDT=$P($G(^IBCN(365.1,TQIEN,0)),U,9) Q:FUTDT=""
"RTN","IBCNERPE",50,0)
 . S II=$O(RPTDATA(5,""),-1)+1
"RTN","IBCNERPE",51,0)
 . S RPTDATA(5,II)=" ",II=II+1
"RTN","IBCNERPE",52,0)
 . S RPTDATA(5,II)="Inquiry will be automatically resubmitted on "_$$FMTE^XLFDT(FUTDT,"5Z")_"."
"RTN","IBCNERPE",53,0)
 ; 
"RTN","IBCNERPE",54,0)
GETDATX ; GETDATA exit point
"RTN","IBCNERPE",55,0)
 Q
"RTN","IBCNERPE",56,0)
 ;
"RTN","IBCNERPE",57,0)
 ; This tag is only called from IBCNERP3
"RTN","IBCNERPE",58,0)
 ;
"RTN","IBCNERPE",59,0)
DATA(DISPDATA)  ;  Build disp lines
"RTN","IBCNERPE",60,0)
 N LCT,CT,SEGCT,ITEM,CT2,NTCT,CNCT,ERCT,RPTDATA
"RTN","IBCNERPE",61,0)
 ; Merge into local array
"RTN","IBCNERPE",62,0)
 M RPTDATA=^TMP($J,RTN,SORT1,SORT2,CNT)
"RTN","IBCNERPE",63,0)
 ; Build
"RTN","IBCNERPE",64,0)
 S LCT=1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.01),17,"R")_$P(RPTDATA(1),U,1)
"RTN","IBCNERPE",65,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.05),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,5),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.02),22,"R")_$P(RPTDATA(1),U,2)
"RTN","IBCNERPE",66,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.03),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,3),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.04),22,"R")_$P(RPTDATA(1),U,4)
"RTN","IBCNERPE",67,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.06),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,6),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.07),22,"R")_$P(RPTDATA(1),U,7)
"RTN","IBCNERPE",68,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.08),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,8),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.09),22,"R")_$P(RPTDATA(1),U,9)
"RTN","IBCNERPE",69,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.18),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,18),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.13),22,"R")_$P(RPTDATA(1),U,13)
"RTN","IBCNERPE",70,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.1),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,10),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.16),22,"R")_$P(RPTDATA(1),U,16)
"RTN","IBCNERPE",71,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.11),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,11),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.17),22,"R")_$P(RPTDATA(1),U,17)
"RTN","IBCNERPE",72,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.12),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,12),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.19),22,"R")_$P(RPTDATA(1),U,19)
"RTN","IBCNERPE",73,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,.07),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(0),U,7),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,.09),22,"R")_$P(RPTDATA(0),U,9)
"RTN","IBCNERPE",74,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.2),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,20),20)
"RTN","IBCNERPE",75,0)
 ;
"RTN","IBCNERPE",76,0)
 ; Contacts
"RTN","IBCNERPE",77,0)
CONT S CNCT=+$O(RPTDATA(3,""),-1) I 'CNCT G ERR
"RTN","IBCNERPE",78,0)
 S DISPDATA(LCT)="",LCT=LCT+1,DISPDATA(LCT)="Contact Information:",LCT=LCT+1
"RTN","IBCNERPE",79,0)
 ; Build
"RTN","IBCNERPE",80,0)
 F CT=1:1:CNCT D
"RTN","IBCNERPE",81,0)
 . S DISPDATA(LCT)="",LCT=LCT+1,DISPDATA(LCT)=" "
"RTN","IBCNERPE",82,0)
 . S SEGCT=$L(RPTDATA(3,CT),U)
"RTN","IBCNERPE",83,0)
 . F CT2=1:1:SEGCT S ITEM=$P(RPTDATA(3,CT),U,CT2) I $L(ITEM)>0 D
"RTN","IBCNERPE",84,0)
 . . I $L(ITEM)+$L(DISPDATA(LCT))>74 S LCT=LCT+1,DISPDATA(LCT)=" "_ITEM Q
"RTN","IBCNERPE",85,0)
 . . I DISPDATA(LCT)'=" " S DISPDATA(LCT)=DISPDATA(LCT)_",  "_ITEM Q
"RTN","IBCNERPE",86,0)
 . . S DISPDATA(LCT)=" "_ITEM
"RTN","IBCNERPE",87,0)
 . S LCT=LCT+1
"RTN","IBCNERPE",88,0)
 ; Err Info
"RTN","IBCNERPE",89,0)
ERR I $P(RPTDATA(1),U,14)="",$P(RPTDATA(1),U,15)="",'$O(RPTDATA(4,""),-1) G DATAX
"RTN","IBCNERPE",90,0)
 S DISPDATA(LCT)="",LCT=LCT+1
"RTN","IBCNERPE",91,0)
 S DISPDATA(LCT)="Error Information:",LCT=LCT+1
"RTN","IBCNERPE",92,0)
 S DISPDATA(LCT)="",LCT=LCT+1
"RTN","IBCNERPE",93,0)
 I $P(RPTDATA(1),U,14)'="" D
"RTN","IBCNERPE",94,0)
 . ; Split text, if necessary
"RTN","IBCNERPE",95,0)
 . N IBERR,IBTOT,IBCT
"RTN","IBCNERPE",96,0)
 . D FSTRNG^IBJU1($P(RPTDATA(1),U,14),60,.IBERR)
"RTN","IBCNERPE",97,0)
 . S IBTOT=$O(IBERR(""),-1)
"RTN","IBCNERPE",98,0)
 . F IBCT=1:1:IBTOT S DISPDATA(LCT)=" "_$$FO^IBCNEUT1($S(IBCT=1:$$LBL^IBCNERP2(365,1.14),1:" "),17,"R")_$G(IBERR(IBCT)),LCT=LCT+1
"RTN","IBCNERPE",99,0)
 I $P(RPTDATA(1),U,15)'="" D
"RTN","IBCNERPE",100,0)
 . ; Split text, if necessary
"RTN","IBCNERPE",101,0)
 . N IBERR,IBTOT,IBCT
"RTN","IBCNERPE",102,0)
 . D FSTRNG^IBJU1($P(RPTDATA(1),U,15),60,.IBERR)
"RTN","IBCNERPE",103,0)
 . S IBTOT=$O(IBERR(""),-1)
"RTN","IBCNERPE",104,0)
 . F IBCT=1:1:IBTOT S DISPDATA(LCT)=" "_$$FO^IBCNEUT1($S(IBCT=1:$$LBL^IBCNERP2(365,1.15),1:" "),17,"R")_$G(IBERR(IBCT)),LCT=LCT+1
"RTN","IBCNERPE",105,0)
 ; Disp Err Txt
"RTN","IBCNERPE",106,0)
 F CT=1:1:+$O(RPTDATA(4,""),-1) D
"RTN","IBCNERPE",107,0)
 . I CT=1 S DISPDATA(LCT)=" "_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,4.01),17,"R")_$G(RPTDATA(4,CT)),LCT=LCT+1 Q
"RTN","IBCNERPE",108,0)
 . S DISPDATA(LCT)=" "_$$FO^IBCNEUT1("",17,"R")_$G(RPTDATA(4,CT)),LCT=LCT+1
"RTN","IBCNERPE",109,0)
DATAX ;
"RTN","IBCNERPE",110,0)
 ; Disp Future Date and Misc. Comments
"RTN","IBCNERPE",111,0)
 I $O(RPTDATA(5,0))'="" D
"RTN","IBCNERPE",112,0)
 . F CT=1:1:+$O(RPTDATA(5,""),-1) D
"RTN","IBCNERPE",113,0)
 .. S DISPDATA(LCT)=" "_$$FO^IBCNEUT1("",7,"R")_$G(RPTDATA(5,CT)),LCT=LCT+1
"RTN","IBCNERPE",114,0)
 ;
"RTN","IBCNERPE",115,0)
 Q
"RTN","IBCNERPF")
0^31^B16361185^n/a
"RTN","IBCNERPF",1,0)
IBCNERPF ;BP/YMG - IBCNE USER INTERFACE EIV INSURANCE UPDATE REPORT ;16-SEP-2009
"RTN","IBCNERPF",2,0)
 ;;2.0;INTEGRATED BILLING;**416**;16-SEP-09;Build 58
"RTN","IBCNERPF",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERPF",4,0)
 ;
"RTN","IBCNERPF",5,0)
 ; Variables:
"RTN","IBCNERPF",6,0)
 ;   IBCNERTN = "IBCNERPF" (current routine name for queueing the 
"RTN","IBCNERPF",7,0)
 ;                          COMPILE process)
"RTN","IBCNERPF",8,0)
 ;   IBCNESPC("BEGDT") = start date for date range
"RTN","IBCNERPF",9,0)
 ;   IBCNESPC("ENDDT") = end date for date range
"RTN","IBCNERPF",10,0)
 ;   IBCNESPC("PYR",ien) = payer iens for report, if IBCNESPC("PYR")="A", then include all
"RTN","IBCNERPF",11,0)
 ;   IBCNESPC("PAT",ien) = patient iens for report, if IBCNESPC("PAT")="A", then include all
"RTN","IBCNERPF",12,0)
 ;   IBCNESPC("SORT") = sort by: 1 - Payer name, 2 - Patient Name, 3 - Clerk Name
"RTN","IBCNERPF",13,0)
 ;   IBCNESPC("TYPE") = report type: "S" - summary, "D" - detailed
"RTN","IBCNERPF",14,0)
 ;
"RTN","IBCNERPF",15,0)
 Q
"RTN","IBCNERPF",16,0)
EN ; entry point
"RTN","IBCNERPF",17,0)
 N STOP,IBCNERTN,IBCNESPC
"RTN","IBCNERPF",18,0)
 ;
"RTN","IBCNERPF",19,0)
 S STOP=0,IBCNERTN="IBCNERPF"
"RTN","IBCNERPF",20,0)
 W @IOF
"RTN","IBCNERPF",21,0)
 W !,"eIV Insurance Update Report",!
"RTN","IBCNERPF",22,0)
 ; Prompts for Insurance Update Report
"RTN","IBCNERPF",23,0)
 ; Report Type - Summary or Detailed
"RTN","IBCNERPF",24,0)
P10 D TYPE I STOP G EXIT
"RTN","IBCNERPF",25,0)
 ; Payer Selection parameter
"RTN","IBCNERPF",26,0)
P20 D PAYER I STOP G:$$STOP^IBCNERP1 EXIT G P10
"RTN","IBCNERPF",27,0)
 ; Date Range parameters
"RTN","IBCNERPF",28,0)
P30 D DTRANGE I STOP G:$$STOP^IBCNERP1 EXIT G P20
"RTN","IBCNERPF",29,0)
 ; Patient Selection parameter
"RTN","IBCNERPF",30,0)
P40 D PATIENT I STOP G:$$STOP^IBCNERP1 EXIT G P30
"RTN","IBCNERPF",31,0)
 ; Sort by parameter - Payer Name, Patient Name, or Clerk Name
"RTN","IBCNERPF",32,0)
P50 D SORT I STOP G:$$STOP^IBCNERP1 EXIT G P40
"RTN","IBCNERPF",33,0)
 ; Select the output device
"RTN","IBCNERPF",34,0)
P100 D DEVICE^IBCNERP1(IBCNERTN,.IBCNESPC) I STOP G:$$STOP^IBCNERP1 EXIT G P50
"RTN","IBCNERPF",35,0)
 ;
"RTN","IBCNERPF",36,0)
EXIT ;
"RTN","IBCNERPF",37,0)
 Q
"RTN","IBCNERPF",38,0)
 ;
"RTN","IBCNERPF",39,0)
PAYER ;
"RTN","IBCNERPF",40,0)
 N DIC,DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBCNERPF",41,0)
 W !
"RTN","IBCNERPF",42,0)
 S DIR("A")="Run for (A)ll Payers or (S)elected Payers: "
"RTN","IBCNERPF",43,0)
 S DIR("A",1)="PAYER SELECTION:"
"RTN","IBCNERPF",44,0)
 S DIR(0)="SA^A:All;S:Selected",DIR("B")="A"
"RTN","IBCNERPF",45,0)
 D ^DIR
"RTN","IBCNERPF",46,0)
 I $D(DIRUT) S STOP=1 Q
"RTN","IBCNERPF",47,0)
 I Y="A" S IBCNESPC("PYR")="A" Q  ; "All Payers" selected
"RTN","IBCNERPF",48,0)
 S DIC(0)="ABEQ"
"RTN","IBCNERPF",49,0)
 S DIC("A")="Select Insurance Company: "
"RTN","IBCNERPF",50,0)
 ; Do not allow selection of '~NO PAYER' and non-eIV payers
"RTN","IBCNERPF",51,0)
 S DIC("S")="I ($P(^(0),U,1)'=""~NO PAYER""),$$PYRAPP^IBCNEUT5(""IIV"",$G(Y))'="""""
"RTN","IBCNERPF",52,0)
 S DIC="^IBE(365.12,"
"RTN","IBCNERPF",53,0)
PAYER1 ;
"RTN","IBCNERPF",54,0)
 D ^DIC
"RTN","IBCNERPF",55,0)
 I $D(DUOUT)!$D(DTOUT)!(Y=-1) S STOP=1 K IBCNESPC("PYR") Q
"RTN","IBCNERPF",56,0)
 S IBCNESPC("PYR",$P(Y,U,1))=""
"RTN","IBCNERPF",57,0)
 I $$ANOTHER G PAYER1
"RTN","IBCNERPF",58,0)
 Q
"RTN","IBCNERPF",59,0)
 ;
"RTN","IBCNERPF",60,0)
DTRANGE ;
"RTN","IBCNERPF",61,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBCNERPF",62,0)
 W !
"RTN","IBCNERPF",63,0)
 S DIR(0)="D^::EX",DIR("B")="Today"
"RTN","IBCNERPF",64,0)
 S DIR("A")="Earliest Date Received"
"RTN","IBCNERPF",65,0)
 S DIR("A",1)="RESPONSE RECEIVED DATE RANGE SELECTION:"
"RTN","IBCNERPF",66,0)
 D ^DIR I $D(DIRUT) S STOP=1 Q
"RTN","IBCNERPF",67,0)
 S IBCNESPC("BEGDT")=Y
"RTN","IBCNERPF",68,0)
 ; End date
"RTN","IBCNERPF",69,0)
DTRANGE1 ;
"RTN","IBCNERPF",70,0)
 K DIR("A") S DIR("A")="  Latest Date Received"
"RTN","IBCNERPF",71,0)
 D ^DIR I $D(DIRUT) S STOP=1 Q
"RTN","IBCNERPF",72,0)
 I Y<IBCNESPC("BEGDT") W !,"     Latest Date must not precede the Earliest Date." G DTRANGE1
"RTN","IBCNERPF",73,0)
 S IBCNESPC("ENDDT")=Y
"RTN","IBCNERPF",74,0)
 Q
"RTN","IBCNERPF",75,0)
 ;
"RTN","IBCNERPF",76,0)
PATIENT ;
"RTN","IBCNERPF",77,0)
 N DIC,DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBCNERPF",78,0)
 ; summary report is always run for all patients
"RTN","IBCNERPF",79,0)
 I $G(IBCNESPC("TYPE"))="S" S IBCNESPC("PAT")="A" Q
"RTN","IBCNERPF",80,0)
 W !
"RTN","IBCNERPF",81,0)
 S DIR("A")="Run for (A)ll Patients or (S)elected Patients: "
"RTN","IBCNERPF",82,0)
 S DIR("A",1)="PATIENT SELECTION:"
"RTN","IBCNERPF",83,0)
 S DIR(0)="SA^A:All;S:Selected",DIR("B")="A"
"RTN","IBCNERPF",84,0)
 D ^DIR
"RTN","IBCNERPF",85,0)
 I $D(DIRUT) S STOP=1 Q
"RTN","IBCNERPF",86,0)
 I Y="A" S IBCNESPC("PAT")="A" Q  ; "All Patients" selected
"RTN","IBCNERPF",87,0)
 S DIC(0)="ABEQ"
"RTN","IBCNERPF",88,0)
 S DIC("A")="Select Patient: "
"RTN","IBCNERPF",89,0)
 S DIC="^DPT("
"RTN","IBCNERPF",90,0)
PATIENT1 ;
"RTN","IBCNERPF",91,0)
 D ^DIC
"RTN","IBCNERPF",92,0)
 I $D(DUOUT)!$D(DTOUT)!(Y=-1) S STOP=1 K IBCNESPC("PAT") Q
"RTN","IBCNERPF",93,0)
 S IBCNESPC("PAT",$P(Y,U,1))=""
"RTN","IBCNERPF",94,0)
 I $$ANOTHER G PATIENT1
"RTN","IBCNERPF",95,0)
 Q
"RTN","IBCNERPF",96,0)
 ;
"RTN","IBCNERPF",97,0)
ANOTHER() ; "Select Another" prompt
"RTN","IBCNERPF",98,0)
 ; returns 1, if response was "YES", returns 0 otherwise
"RTN","IBCNERPF",99,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBCNERPF",100,0)
 S DIR("A")="Select Another?" S DIR(0)="Y",DIR("B")="NO"
"RTN","IBCNERPF",101,0)
 D ^DIR I $D(DIRUT) S STOP=1
"RTN","IBCNERPF",102,0)
 Q Y
"RTN","IBCNERPF",103,0)
 ;
"RTN","IBCNERPF",104,0)
SORT ;
"RTN","IBCNERPF",105,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBCNERPF",106,0)
 ; summary report is sorted by Payer Name, if run for selected payers,
"RTN","IBCNERPF",107,0)
 ; or by Clerk Name, if run for all payers
"RTN","IBCNERPF",108,0)
 I $G(IBCNESPC("TYPE"))="S" S IBCNESPC("SORT")=$S($G(IBCNESPC("PYR"))="A":1,1:3) Q
"RTN","IBCNERPF",109,0)
 W !
"RTN","IBCNERPF",110,0)
 S DIR(0)="SA^1:Payer Name;2:Patient Name;3:Clerk Name"
"RTN","IBCNERPF",111,0)
 S DIR("A")="Sort By: "
"RTN","IBCNERPF",112,0)
 S DIR("A",1)="SORT CRITERIA:"
"RTN","IBCNERPF",113,0)
 S DIR("B")="Payer Name"
"RTN","IBCNERPF",114,0)
 D ^DIR I $D(DIRUT) S STOP=1 Q
"RTN","IBCNERPF",115,0)
 S IBCNESPC("SORT")=Y
"RTN","IBCNERPF",116,0)
 Q
"RTN","IBCNERPF",117,0)
 ;
"RTN","IBCNERPF",118,0)
TYPE ;
"RTN","IBCNERPF",119,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","IBCNERPF",120,0)
 W !
"RTN","IBCNERPF",121,0)
 S DIR(0)="SA^S:Summary;D:Detailed"
"RTN","IBCNERPF",122,0)
 S DIR("A")="Run a (S)ummary or (D)etailed Report: "
"RTN","IBCNERPF",123,0)
 S DIR("B")="Summary"
"RTN","IBCNERPF",124,0)
 D ^DIR I $D(DIRUT) S STOP=1 Q
"RTN","IBCNERPF",125,0)
 S IBCNESPC("TYPE")=Y
"RTN","IBCNERPF",126,0)
 Q
"RTN","IBCNERPG")
0^32^B15534927^n/a
"RTN","IBCNERPG",1,0)
IBCNERPG ;BP/YMG - IBCNE EIV INSURANCE UPDATE REPORT COMPILE;16-SEP-2009
"RTN","IBCNERPG",2,0)
 ;;2.0;INTEGRATED BILLING;**416**;16-SEP-09;Build 58
"RTN","IBCNERPG",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERPG",4,0)
 ;
"RTN","IBCNERPG",5,0)
 ; variables from IBCNERPF:
"RTN","IBCNERPG",6,0)
 ;   IBCNERTN = "IBCNERPF"
"RTN","IBCNERPG",7,0)
 ;   IBCNESPC("BEGDT") = start date for date range
"RTN","IBCNERPG",8,0)
 ;   IBCNESPC("ENDDT") = end date for date range
"RTN","IBCNERPG",9,0)
 ;   IBCNESPC("PYR",ien) = payer iens for report, if IBCNESPC("PYR")="A", then include all
"RTN","IBCNERPG",10,0)
 ;   IBCNESPC("PAT",ien) = patient iens for report, if IBCNESPC("PAT")="A", then include all
"RTN","IBCNERPG",11,0)
 ;   IBCNESPC("SORT") = sort by: 1 - Payer name, 2 - Patient Name, 3 - Clerk Name
"RTN","IBCNERPG",12,0)
 ;   IBCNESPC("TYPE") = report type: "S" - summary, "D" - detailed
"RTN","IBCNERPG",13,0)
 ;
"RTN","IBCNERPG",14,0)
 ; Output variables passed to IBCNERPH:
"RTN","IBCNERPG",15,0)
 ;   Summary report:
"RTN","IBCNERPG",16,0)
 ;     ^TMP($J,IBCNERTN,SORT1,SORT2)=Count
"RTN","IBCNERPG",17,0)
 ;     SORT1 - Payer Name or *, SORT2 - Clerk Name or 0 if not processed
"RTN","IBCNERPG",18,0)
 ;
"RTN","IBCNERPG",19,0)
 ;   Detailed report:
"RTN","IBCNERPG",20,0)
 ;     ^TMP($J,IBCNERTN,SORT1)=Count 
"RTN","IBCNERPG",21,0)
 ;     ^TMP($J,IBCNERTN,SORT1,SORT2)=Pat. Name ^ SSN ^ Date received ^ Payer Name ^ Ck AB ^ Clerk Name ^ Date Verified ^ Days old
"RTN","IBCNERPG",22,0)
 ;     SORT1 - Payer Name, Patient Name, or Clerk Name, SORT2 - Date received
"RTN","IBCNERPG",23,0)
 ;
"RTN","IBCNERPG",24,0)
 Q
"RTN","IBCNERPG",25,0)
 ;
"RTN","IBCNERPG",26,0)
EN(IBCNERTN,IBCNESPC) ; Entry point
"RTN","IBCNERPG",27,0)
 N ALLPYR,ALLPAT,DATE,BDATE,EDATE,RPDATA,RTYPE,SORT
"RTN","IBCNERPG",28,0)
 S ALLPYR=$S($G(IBCNESPC("PYR"))="A":1,1:0)
"RTN","IBCNERPG",29,0)
 S ALLPAT=$S($G(IBCNESPC("PAT"))="A":1,1:0)
"RTN","IBCNERPG",30,0)
 S BDATE=$G(IBCNESPC("BEGDT"))
"RTN","IBCNERPG",31,0)
 S EDATE=$G(IBCNESPC("ENDDT"))
"RTN","IBCNERPG",32,0)
 I EDATE'="",$P(EDATE,".",2)="" S EDATE=$$FMADD^XLFDT(EDATE,0,23,59,59)
"RTN","IBCNERPG",33,0)
 S RTYPE=$G(IBCNESPC("TYPE"))
"RTN","IBCNERPG",34,0)
 S SORT=$G(IBCNESPC("SORT"))
"RTN","IBCNERPG",35,0)
 I '$D(ZTQUEUED),$G(IOST)["C-" W !!,"Compiling report data ..."
"RTN","IBCNERPG",36,0)
 ; Kill scratch global
"RTN","IBCNERPG",37,0)
 K ^TMP($J,IBCNERTN)
"RTN","IBCNERPG",38,0)
 S DATE=$O(^IBCN(365,"AD",BDATE),-1)
"RTN","IBCNERPG",39,0)
 F  S DATE=$O(^IBCN(365,"AD",DATE)) Q:'DATE!(DATE>EDATE)  D PAYERS(DATE,ALLPYR,ALLPAT) Q:$G(ZTSTOP)
"RTN","IBCNERPG",40,0)
 M ^TMP($J,IBCNERTN)=RPDATA
"RTN","IBCNERPG",41,0)
 Q
"RTN","IBCNERPG",42,0)
 ;
"RTN","IBCNERPG",43,0)
PAYERS(DATE,ALLPYR,ALLPAT) ; loop through payers
"RTN","IBCNERPG",44,0)
 N PYR
"RTN","IBCNERPG",45,0)
 S PYR=""
"RTN","IBCNERPG",46,0)
 I 'ALLPYR F  S PYR=$O(IBCNESPC("PYR",PYR)) Q:'PYR  D:$O(^IBCN(365,"AD",DATE,PYR,"")) PATIENTS(DATE,PYR,ALLPAT) Q:$G(ZTSTOP)
"RTN","IBCNERPG",47,0)
 I ALLPYR F  S PYR=$O(^IBCN(365,"AD",DATE,PYR)) Q:'PYR  D PATIENTS(DATE,PYR,ALLPAT) Q:$G(ZTSTOP)
"RTN","IBCNERPG",48,0)
 Q
"RTN","IBCNERPG",49,0)
 ;
"RTN","IBCNERPG",50,0)
PATIENTS(DATE,PYR,ALLPAT) ; loop through patients
"RTN","IBCNERPG",51,0)
 N PAT
"RTN","IBCNERPG",52,0)
 S PAT=""
"RTN","IBCNERPG",53,0)
 I 'ALLPAT F  S PAT=$O(IBCNESPC("PAT",PAT)) Q:'PAT  D:$O(^IBCN(365,"AD",DATE,PYR,PAT,"")) GETDATA(DATE,PYR,PAT) Q:$G(ZTSTOP)
"RTN","IBCNERPG",54,0)
 I ALLPAT F  S PAT=$O(^IBCN(365,"AD",DATE,PYR,PAT)) Q:'PAT  D GETDATA(DATE,PYR,PAT) Q:$G(ZTSTOP)
"RTN","IBCNERPG",55,0)
 Q
"RTN","IBCNERPG",56,0)
 ;
"RTN","IBCNERPG",57,0)
GETDATA(DATE,PYR,PAT) ; loop through responses and compile report
"RTN","IBCNERPG",58,0)
 N ABDATE,ABIEN,AUTOUPD,CHKAB,CLNAME,GIEN,IENS2,IENS312,INS,NOW,PATNAME,PYRNAME,RIEN,SORT1,SORT2,SSN,TOTMES,TQ,VDATE
"RTN","IBCNERPG",59,0)
 ;
"RTN","IBCNERPG",60,0)
 S NOW=$$NOW^XLFDT
"RTN","IBCNERPG",61,0)
 S (TOTMES,INS)=0
"RTN","IBCNERPG",62,0)
 S RIEN="" F  S RIEN=$O(^IBCN(365,"AD",DATE,PYR,PAT,RIEN)) Q:'RIEN  D  Q:$G(ZTSTOP)
"RTN","IBCNERPG",63,0)
 .S TOTMES=TOTMES+1 I $D(ZTQUEUED),TOTMES#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNERPG",64,0)
 .S TQ=+$P(^IBCN(365,RIEN,0),U,5) I TQ S INS=+$P(^IBCN(365.1,TQ,0),U,13)
"RTN","IBCNERPG",65,0)
 .I 'INS Q
"RTN","IBCNERPG",66,0)
 .S IENS2=PAT_",",IENS312=INS_","_IENS2
"RTN","IBCNERPG",67,0)
 .S VDATE=$$GET1^DIQ(2.312,IENS312,1.03,"I") I VDATE=""!(VDATE<BDATE)!(VDATE>EDATE) Q
"RTN","IBCNERPG",68,0)
 .S PYRNAME=$P(^IBE(365.12,PYR,0),U),PATNAME=$$GET1^DIQ(2,IENS2,.01,"E")
"RTN","IBCNERPG",69,0)
 .S AUTOUPD=+$$GET1^DIQ(2.312,IENS312,4.04,"I")
"RTN","IBCNERPG",70,0)
 .I AUTOUPD S CLNAME="AUTOUPDATE,IB-eIV"
"RTN","IBCNERPG",71,0)
 .I 'AUTOUPD S CLNAME=$$GET1^DIQ(2.312,IENS312,1.04,"E") I CLNAME="" S CLNAME="UNKNOWN"
"RTN","IBCNERPG",72,0)
 .I RTYPE="S" S SORT1=$S(ALLPYR:"*",1:PYRNAME),SORT2=CLNAME,RPDATA(SORT1,SORT2)=$G(RPDATA(SORT1,SORT2))+1 Q
"RTN","IBCNERPG",73,0)
 .S SSN=$$GET1^DIQ(2,IENS2,.09,"E")
"RTN","IBCNERPG",74,0)
 .S CHKAB="Y"
"RTN","IBCNERPG",75,0)
 .S GIEN=$$GET1^DIQ(2.312,IENS312,.18,"I"),ABIEN="",ABDATE=""
"RTN","IBCNERPG",76,0)
 .I +GIEN,$D(^IBA(355.4,"APY",GIEN)) S ABIEN=$O(^IBA(355.4,"APY",GIEN,$O(^IBA(355.4,"APY",GIEN,"")),""))
"RTN","IBCNERPG",77,0)
 .S:+ABIEN ABDATE=$P($G(^IBA(355.4,ABIEN,1)),U,3)
"RTN","IBCNERPG",78,0)
 .S:+ABDATE CHKAB=$S($$FMDIFF^XLFDT(NOW,ABDATE)>365:"Y",1:"N")
"RTN","IBCNERPG",79,0)
 .S SORT1=$S(SORT=1:PYRNAME,SORT=2:PATNAME,1:CLNAME),SORT2=DATE
"RTN","IBCNERPG",80,0)
 .S RPDATA(SORT1)=$G(RPDATA(SORT1))+1
"RTN","IBCNERPG",81,0)
 .S RPDATA(SORT1,SORT2)=PATNAME_U_SSN_U_DATE_U_PYRNAME_U_CHKAB_U_CLNAME_U_VDATE_U_$$FMDIFF^XLFDT(NOW,DATE)
"RTN","IBCNERPG",82,0)
 .Q
"RTN","IBCNERPG",83,0)
 Q
"RTN","IBCNERPH")
0^33^B19008482^n/a
"RTN","IBCNERPH",1,0)
IBCNERPH ;BP/YMG - IBCNE EIV INSURANCE UPDATE REPORT PRINT;16-SEP-2009
"RTN","IBCNERPH",2,0)
 ;;2.0;INTEGRATED BILLING;**416**;16-SEP-09;Build 58
"RTN","IBCNERPH",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERPH",4,0)
 ;
"RTN","IBCNERPH",5,0)
 ; variables from IBCNERPF and IBCNERPG:
"RTN","IBCNERPH",6,0)
 ;   IBCNERTN = "IBCNERPF"
"RTN","IBCNERPH",7,0)
 ;   IBCNESPC("BEGDT") = start date for date range
"RTN","IBCNERPH",8,0)
 ;   IBCNESPC("ENDDT") = end date for date range
"RTN","IBCNERPH",9,0)
 ;   IBCNESPC("PYR",ien) = payer iens for report, if IBCNESPC("PYR")="A", then include all
"RTN","IBCNERPH",10,0)
 ;   IBCNESPC("PAT",ien) = patient iens for report, if IBCNESPC("PAT")="A", then include all
"RTN","IBCNERPH",11,0)
 ;   IBCNESPC("SORT") = sort by: 1 - Payer name, 2 - Patient Name, 3 - Clerk Name
"RTN","IBCNERPH",12,0)
 ;   IBCNESPC("TYPE") = report type: "S" - summary, "D" - detailed
"RTN","IBCNERPH",13,0)
 ;
"RTN","IBCNERPH",14,0)
 ;   Summary report:
"RTN","IBCNERPH",15,0)
 ;     ^TMP($J,IBCNERTN,SORT1,SORT2)=Count
"RTN","IBCNERPH",16,0)
 ;     SORT1 - Payer Name or *, SORT2 - Clerk Name or 0 if not processed
"RTN","IBCNERPH",17,0)
 ;
"RTN","IBCNERPH",18,0)
 ;   Detailed report:
"RTN","IBCNERPH",19,0)
 ;     ^TMP($J,IBCNERTN,SORT1)=Count 
"RTN","IBCNERPH",20,0)
 ;     ^TMP($J,IBCNERTN,SORT1,SORT2)=Pat. Name ^ SSN ^ Date received ^ Payer Name ^ Ck AB ^ Clerk Name ^ Date Verified ^ Days old
"RTN","IBCNERPH",21,0)
 ;     SORT1 - Payer Name, Patient Name, or Clerk Name, SORT2 - Date received
"RTN","IBCNERPH",22,0)
 ;
"RTN","IBCNERPH",23,0)
 Q
"RTN","IBCNERPH",24,0)
 ;
"RTN","IBCNERPH",25,0)
EN(IBCNERTN,IBCNESPC) ; Entry point
"RTN","IBCNERPH",26,0)
 N CLNAME,CRT,DDATA,DLINE,EORMSG,IBPGC,IBPXT,MAXCNT,NONEMSG,NPROC,SSN,SSNLEN,SRT1,SRT2,TSTAMP,TYPE,VDATE,WIDTH,X,Y
"RTN","IBCNERPH",27,0)
 S (IBPGC,IBPXT)=0
"RTN","IBCNERPH",28,0)
 S NONEMSG="* * * N O  D A T A  F O U N D * * *"
"RTN","IBCNERPH",29,0)
 S EORMSG="*** END OF REPORT ***"
"RTN","IBCNERPH",30,0)
 S NPROC="Not Processed"
"RTN","IBCNERPH",31,0)
 S TSTAMP=$$FMTE^XLFDT($$NOW^XLFDT,1) ; time of report
"RTN","IBCNERPH",32,0)
 S TYPE=$G(IBCNESPC("TYPE")) ; report type
"RTN","IBCNERPH",33,0)
 S WIDTH=$S(TYPE="S":79,1:131)
"RTN","IBCNERPH",34,0)
 ; Determine IO parameters
"RTN","IBCNERPH",35,0)
 S MAXCNT=IOSL-6,CRT=0
"RTN","IBCNERPH",36,0)
 S:IOST["C-" MAXCNT=IOSL-3,CRT=1
"RTN","IBCNERPH",37,0)
 ; print data
"RTN","IBCNERPH",38,0)
 S SRT1=""
"RTN","IBCNERPH",39,0)
 D HEADER I $G(ZTSTOP)!IBPXT Q
"RTN","IBCNERPH",40,0)
 ; If global does not exist - display No Data message
"RTN","IBCNERPH",41,0)
 I '$D(^TMP($J,IBCNERTN)) D LINE($$FO^IBCNEUT1(NONEMSG,$$CENTER(NONEMSG),"R")) G EXIT
"RTN","IBCNERPH",42,0)
 I TYPE="S" D  Q:$G(ZTSTOP)!IBPXT
"RTN","IBCNERPH",43,0)
 .; summary report
"RTN","IBCNERPH",44,0)
 .F  S SRT1=$O(^TMP($J,IBCNERTN,SRT1)) Q:SRT1=""!$G(ZTSTOP)!IBPXT  D
"RTN","IBCNERPH",45,0)
 ..I SRT1'="*" D LINE(SRT1)
"RTN","IBCNERPH",46,0)
 ..S SRT2="" F  S SRT2=$O(^TMP($J,IBCNERTN,SRT1,SRT2)) Q:SRT2=""!$G(ZTSTOP)!IBPXT  D
"RTN","IBCNERPH",47,0)
 ...D LINE($$FO^IBCNEUT1("  "_$S(SRT2=0:NPROC,1:SRT2),40)_"Count = "_^TMP($J,IBCNERTN,SRT1,SRT2))
"RTN","IBCNERPH",48,0)
 ...Q
"RTN","IBCNERPH",49,0)
 ..Q
"RTN","IBCNERPH",50,0)
 .Q
"RTN","IBCNERPH",51,0)
 I TYPE="D" D  Q:$G(ZTSTOP)!IBPXT
"RTN","IBCNERPH",52,0)
 .; detailed report
"RTN","IBCNERPH",53,0)
 .F  S SRT1=$O(^TMP($J,IBCNERTN,SRT1)) Q:SRT1=""!$G(ZTSTOP)!IBPXT  D
"RTN","IBCNERPH",54,0)
 ..D LINE($$FO^IBCNEUT1($S(SRT1=0:NPROC,1:SRT1),85)_"Count = "_^TMP($J,IBCNERTN,SRT1))
"RTN","IBCNERPH",55,0)
 ..S SRT2="" F  S SRT2=$O(^TMP($J,IBCNERTN,SRT1,SRT2)) Q:SRT2=""!$G(ZTSTOP)!IBPXT  D
"RTN","IBCNERPH",56,0)
 ...S DDATA=$G(^TMP($J,IBCNERTN,SRT1,SRT2)),DLINE=""
"RTN","IBCNERPH",57,0)
 ...S $E(DLINE,3,22)=$P(DDATA,U)
"RTN","IBCNERPH",58,0)
 ...S SSN=$P(DDATA,U,2),SSNLEN=$L(SSN),$E(DLINE,23,28)=$E(SSN,SSNLEN-3,SSNLEN)
"RTN","IBCNERPH",59,0)
 ...S $E(DLINE,29,41)=$$FMTE^XLFDT($P(DDATA,U,3)\1,"5Z")
"RTN","IBCNERPH",60,0)
 ...S $E(DLINE,42,69)=$P(DDATA,U,4),$E(DLINE,72,77)=$P(DDATA,U,5)
"RTN","IBCNERPH",61,0)
 ...S CLNAME=$P(DDATA,U,6) S:CLNAME=0 CLNAME=NPROC S $E(DLINE,78,94)=CLNAME
"RTN","IBCNERPH",62,0)
 ...S VDATE=$$FMTE^XLFDT($P(DDATA,U,7)\1,"5Z") S:'VDATE VDATE="  N/A" S $E(DLINE,115,127)=VDATE
"RTN","IBCNERPH",63,0)
 ...S $E(DLINE,127,131)=$P(DDATA,U,8)
"RTN","IBCNERPH",64,0)
 ...D LINE(DLINE)
"RTN","IBCNERPH",65,0)
 ...Q
"RTN","IBCNERPH",66,0)
 ..Q
"RTN","IBCNERPH",67,0)
 .Q
"RTN","IBCNERPH",68,0)
 ;
"RTN","IBCNERPH",69,0)
EXIT ;
"RTN","IBCNERPH",70,0)
 D LINE($$FO^IBCNEUT1(EORMSG,$$CENTER(EORMSG),"R"))
"RTN","IBCNERPH",71,0)
 I CRT,IBPGC>0,'$D(ZTQUEUED) D EOL
"RTN","IBCNERPH",72,0)
 Q
"RTN","IBCNERPH",73,0)
 ;
"RTN","IBCNERPH",74,0)
EOL ; display "end of page" message and set exit flag
"RTN","IBCNERPH",75,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,LIN
"RTN","IBCNERPH",76,0)
 I MAXCNT<51 F LIN=1:1:(MAXCNT-$Y) W !
"RTN","IBCNERPH",77,0)
 S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNERPH",78,0)
 I $D(DTOUT)!$D(DUOUT) S IBPXT=1
"RTN","IBCNERPH",79,0)
 Q
"RTN","IBCNERPH",80,0)
 ;
"RTN","IBCNERPH",81,0)
HEADER ; print header for each page
"RTN","IBCNERPH",82,0)
 N DASHES,HDR,OFFSET,SRT
"RTN","IBCNERPH",83,0)
 ;
"RTN","IBCNERPH",84,0)
 I CRT,IBPGC>0,'$D(ZTQUEUED) D EOL I IBPXT Q
"RTN","IBCNERPH",85,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD() S (ZTSTOP,IBPXT)=1 Q
"RTN","IBCNERPH",86,0)
 S IBPGC=IBPGC+1
"RTN","IBCNERPH",87,0)
 W @IOF,!,?1,"Pt. Insurance Update Report"
"RTN","IBCNERPH",88,0)
 S HDR=TSTAMP_"  Page: "_IBPGC,OFFSET=WIDTH-$L(HDR)
"RTN","IBCNERPH",89,0)
 W ?OFFSET,HDR
"RTN","IBCNERPH",90,0)
 S SRT=$G(IBCNESPC("SORT"))
"RTN","IBCNERPH",91,0)
 I TYPE="S" W !,?1,"Sorted by: Clerk Name"
"RTN","IBCNERPH",92,0)
 I TYPE="D" W !,?1,"Sorted by: "_$S(SRT=1:"Payer Name",SRT=2:"Patient Name",1:"Clerk Name")
"RTN","IBCNERPH",93,0)
 S HDR=$$FMTE^XLFDT($G(IBCNESPC("BEGDT")),"5Z")_" - "_$$FMTE^XLFDT($G(IBCNESPC("ENDDT")),"5Z")
"RTN","IBCNERPH",94,0)
 S OFFSET=WIDTH-$L(HDR)
"RTN","IBCNERPH",95,0)
 W ?OFFSET,HDR
"RTN","IBCNERPH",96,0)
 W !,?1,$S(TYPE="D":"Detailed",1:"Summary")_" Report: "
"RTN","IBCNERPH",97,0)
 W $S($G(IBCNESPC("PAT"))="A":"All",1:"Selected")_" Patients; "
"RTN","IBCNERPH",98,0)
 W $S($G(IBCNESPC("PYR"))="A":"All",1:"Selected")_" Payers"
"RTN","IBCNERPH",99,0)
 I TYPE="D" W !!,?3,"Patient Name",?23,"SSN",?29,"Dt Rec'd",?42,"Payer",?70,"Ck AB",?78,"Clerk/Auto",?115,"Verified",?127,"Days"
"RTN","IBCNERPH",100,0)
 S $P(DASHES,"-",WIDTH)="" W !,?1,DASHES
"RTN","IBCNERPH",101,0)
 Q
"RTN","IBCNERPH",102,0)
 ;
"RTN","IBCNERPH",103,0)
LINE(LINE) ; Print line of data
"RTN","IBCNERPH",104,0)
 I $Y+1>MAXCNT D HEADER I $G(ZTSTOP)!IBPXT Q
"RTN","IBCNERPH",105,0)
 W !,?1,LINE
"RTN","IBCNERPH",106,0)
 Q
"RTN","IBCNERPH",107,0)
 ;
"RTN","IBCNERPH",108,0)
CENTER(LINE) ; return length of a centered line
"RTN","IBCNERPH",109,0)
 ; LINE - line to center
"RTN","IBCNERPH",110,0)
 N LENGTH,OFFSET
"RTN","IBCNERPH",111,0)
 S LENGTH=$L(LINE),OFFSET=IOM-$L(LINE)\2
"RTN","IBCNERPH",112,0)
 Q OFFSET+LENGTH
"RTN","IBCNES")
0^35^B24997316^n/a
"RTN","IBCNES",1,0)
IBCNES ;ALB/ESG - eIV elig/Benefit screen ;14-Jul-2009
"RTN","IBCNES",2,0)
 ;;2.0;INTEGRATED BILLING;**416**;21-MAR-94;Build 58
"RTN","IBCNES",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNES",4,0)
 ;
"RTN","IBCNES",5,0)
 Q
"RTN","IBCNES",6,0)
 ;
"RTN","IBCNES",7,0)
EB(IBVF,IBVIENS,IBVEBFLG,IBVV,IBVSUB) ; entry point for main list display
"RTN","IBCNES",8,0)
 ; see below at tag INIT for a description of the parameters
"RTN","IBCNES",9,0)
 ; IBVSUB is required at this entry point because the ListMan array uses this variable
"RTN","IBCNES",10,0)
 ;
"RTN","IBCNES",11,0)
 D EN^VALM("IBCNE ELIGIBILITY/BENEFIT INFO")
"RTN","IBCNES",12,0)
EBX ;
"RTN","IBCNES",13,0)
 Q
"RTN","IBCNES",14,0)
 ;
"RTN","IBCNES",15,0)
HDR ; -- header code - called by ListManager
"RTN","IBCNES",16,0)
 ; build the header area based on the values of IBVF and IBVIENS
"RTN","IBCNES",17,0)
 ;
"RTN","IBCNES",18,0)
 ; pt. insurance
"RTN","IBCNES",19,0)
 I IBVF=2.322 D
"RTN","IBCNES",20,0)
 . N DFN,IBCDFN,PNB,PN,LPID,INS,INSNM
"RTN","IBCNES",21,0)
 . S DFN=+$P(IBVIENS,",",2)
"RTN","IBCNES",22,0)
 . S IBCDFN=+$P(IBVIENS,",",1)
"RTN","IBCNES",23,0)
 . S PNB=$$PT^IBEFUNC(DFN)
"RTN","IBCNES",24,0)
 . S PN=$P(PNB,U,1)    ; pt name
"RTN","IBCNES",25,0)
 . S LPID=$P(PNB,U,2)  ; pt id
"RTN","IBCNES",26,0)
 . S INS=+$P($G(^DPT(DFN,.312,IBCDFN,0)),U,1),INSNM=""
"RTN","IBCNES",27,0)
 . I INS S INSNM=$P($G(^DIC(36,INS,0)),U,1)
"RTN","IBCNES",28,0)
 . S VALMHDR(1)=$$FO^IBCNEUT1(PN,30)_"  "_$$FO^IBCNEUT1(LPID,15)_"  "_$$FO^IBCNEUT1(INSNM,30)
"RTN","IBCNES",29,0)
 . Q
"RTN","IBCNES",30,0)
 ;
"RTN","IBCNES",31,0)
 ; eIV response file
"RTN","IBCNES",32,0)
 I IBVF=365.02 D
"RTN","IBCNES",33,0)
 . N RSPIEN,IBX,DFN,INS,PNB,PN,LPID,INSNM
"RTN","IBCNES",34,0)
 . S RSPIEN=+IBVIENS
"RTN","IBCNES",35,0)
 . S IBX=$G(^IBCN(365,RSPIEN,0))
"RTN","IBCNES",36,0)
 . S DFN=+$P(IBX,U,2)   ; pt ien
"RTN","IBCNES",37,0)
 . S INS=+$P(IBX,U,3)   ; payer ien
"RTN","IBCNES",38,0)
 . S INSNM=""
"RTN","IBCNES",39,0)
 . S PNB=$$PT^IBEFUNC(DFN)
"RTN","IBCNES",40,0)
 . S PN=$P(PNB,U,1)     ; pt name
"RTN","IBCNES",41,0)
 . S LPID=$P(PNB,U,2)   ; pt id
"RTN","IBCNES",42,0)
 . I INS S INSNM=$P($G(^IBE(365.12,INS,0)),U,1)   ; payer name
"RTN","IBCNES",43,0)
 . S VALMHDR(1)=$$FO^IBCNEUT1(PN,30)_"  "_$$FO^IBCNEUT1(LPID,15)_"  "_$$FO^IBCNEUT1(INSNM,30)
"RTN","IBCNES",44,0)
 . Q
"RTN","IBCNES",45,0)
 ;
"RTN","IBCNES",46,0)
 Q
"RTN","IBCNES",47,0)
 ;
"RTN","IBCNES",48,0)
INIT(IBVF,IBVIENS,IBVEBFLG,IBVV,IBVSUB) ; List Entry
"RTN","IBCNES",49,0)
 ;
"RTN","IBCNES",50,0)
 ;     IBVF = file# 2.322 or 365.02 (required)
"RTN","IBCNES",51,0)
 ;  IBVIENS = std IENS list of internal entry numbers - NOT including any EB iens (required)
"RTN","IBCNES",52,0)
 ; IBVEBFLG = flag indicating which EB records to pull
"RTN","IBCNES",53,0)
 ;            "A" - all of them
"RTN","IBCNES",54,0)
 ;            "L" - only the last one (default)
"RTN","IBCNES",55,0)
 ;            "F" - only the first one
"RTN","IBCNES",56,0)
 ;            "M" - multiple, pass IBEBFLG by reference and include the IB iens in
"RTN","IBCNES",57,0)
 ;                  an array as follows:
"RTN","IBCNES",58,0)
 ;                  IBVEBFLG="M"
"RTN","IBCNES",59,0)
 ;                  IBVEBFLG(3)=""
"RTN","IBCNES",60,0)
 ;                  IBVEBFLG(5)=""
"RTN","IBCNES",61,0)
 ;     IBVV = Video attributes flag
"RTN","IBCNES",62,0)
 ;            1 = reverse video (default)
"RTN","IBCNES",63,0)
 ;            2 = bold
"RTN","IBCNES",64,0)
 ;            3 = underline
"RTN","IBCNES",65,0)
 ;   IBVSUB = literal subscript to use in the display scratch global
"RTN","IBCNES",66,0)
 ;
"RTN","IBCNES",67,0)
 NEW IBVDA,GLO,IBVLIST,IEN,IBVEBIEN,IBVEBTOT,IBVEBCNT
"RTN","IBCNES",68,0)
 ;
"RTN","IBCNES",69,0)
 S IBVSUB=$G(IBVSUB)
"RTN","IBCNES",70,0)
 I IBVSUB="" S IBVSUB="EB ELIG/BEN"
"RTN","IBCNES",71,0)
 K ^TMP(IBVSUB,$J)
"RTN","IBCNES",72,0)
 I $D(VALMEVL) D CLEAN^VALM10,KILL^VALM10()
"RTN","IBCNES",73,0)
 ;
"RTN","IBCNES",74,0)
 D DA^DILF(IBVIENS,.IBVDA)    ; build the IBVDA array for the iens
"RTN","IBCNES",75,0)
 I '$D(IBVDA) D NODATA G INITX
"RTN","IBCNES",76,0)
 ;
"RTN","IBCNES",77,0)
 I $D(VALMEVL),'$G(IBVV) S IBVV=1    ; default reverse video for ListMan
"RTN","IBCNES",78,0)
 I '$D(VALMEVL) S IBVV=""            ; no video attributes for non-ListMan
"RTN","IBCNES",79,0)
 ;
"RTN","IBCNES",80,0)
 I IBVF=2.322 S GLO=$NA(^DPT(+$G(IBVDA(1)),.312,+$G(IBVDA),6))   ; pt. insurance
"RTN","IBCNES",81,0)
 I IBVF=365.02 S GLO=$NA(^IBCN(365,+$G(IBVDA),2))                ; response file
"RTN","IBCNES",82,0)
 I $G(GLO)="" D NODATA G INITX
"RTN","IBCNES",83,0)
 ;
"RTN","IBCNES",84,0)
 S IBVEBFLG=$G(IBVEBFLG,"L")
"RTN","IBCNES",85,0)
 K IBVLIST
"RTN","IBCNES",86,0)
 I IBVEBFLG="L" S IEN=+$O(@GLO@(" "),-1) I IEN S IBVLIST(IEN)=""            ; last EB ien on file
"RTN","IBCNES",87,0)
 I IBVEBFLG="F" S IEN=+$O(@GLO@(0)) I IEN S IBVLIST(IEN)=""                 ; first EB ien on file
"RTN","IBCNES",88,0)
 I IBVEBFLG="A" S IEN=0 F  S IEN=$O(@GLO@(IEN)) Q:'IEN  S IBVLIST(IEN)=""   ; all EB iens on file
"RTN","IBCNES",89,0)
 I IBVEBFLG="M" S IEN=0 F  S IEN=$O(IBVEBFLG(IEN)) Q:'IEN  I $D(@GLO@(IEN)) S IBVLIST(IEN)=""   ; multiple
"RTN","IBCNES",90,0)
 ;
"RTN","IBCNES",91,0)
 I '$D(IBVLIST) D NODATA G INITX
"RTN","IBCNES",92,0)
 ;
"RTN","IBCNES",93,0)
 ; count them
"RTN","IBCNES",94,0)
 S IEN=0 F IBVEBTOT=0:1 S IEN=$O(IBVLIST(IEN)) Q:'IEN
"RTN","IBCNES",95,0)
 I 'IBVEBTOT D NODATA G INITX
"RTN","IBCNES",96,0)
 ;
"RTN","IBCNES",97,0)
 S (IBVEBIEN,IBVEBCNT)=0
"RTN","IBCNES",98,0)
 F  S IBVEBIEN=$O(IBVLIST(IBVEBIEN)) Q:'IBVEBIEN  D
"RTN","IBCNES",99,0)
 . S IBVEBCNT=IBVEBCNT+1
"RTN","IBCNES",100,0)
 . N TXVIENS
"RTN","IBCNES",101,0)
 . ;
"RTN","IBCNES",102,0)
 . ; if there is more than 1 EB group, then display a header line for separation
"RTN","IBCNES",103,0)
 . I IBVEBTOT>1 D
"RTN","IBCNES",104,0)
 .. N DSP,LN,IBZ
"RTN","IBCNES",105,0)
 .. S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))
"RTN","IBCNES",106,0)
 .. S LN=+$O(@DSP@(""),-1)
"RTN","IBCNES",107,0)
 .. S IBZ="eIV Eligibility/Benefit Data Group# "_IBVEBCNT_" of "_IBVEBTOT
"RTN","IBCNES",108,0)
 .. S IBZ=$$FO^IBCNEUT1($J("",20)_IBZ,80)
"RTN","IBCNES",109,0)
 .. S LN=LN+1 D SET^IBCNES1(LN,1,IBZ,,IBVV)
"RTN","IBCNES",110,0)
 .. S LN=LN+1 D SET^IBCNES1(LN)
"RTN","IBCNES",111,0)
 .. Q
"RTN","IBCNES",112,0)
 . ;
"RTN","IBCNES",113,0)
 . ; add this EB ien to the list of iens
"RTN","IBCNES",114,0)
 . S TXVIENS=IBVEBIEN_","_IBVIENS
"RTN","IBCNES",115,0)
 . ;
"RTN","IBCNES",116,0)
 . ; call the screen sections to build the display
"RTN","IBCNES",117,0)
 . D EB^IBCNES1(IBVF,TXVIENS,IBVV,IBVSUB)
"RTN","IBCNES",118,0)
 . D CMPI^IBCNES1(IBVF,TXVIENS,IBVV,IBVSUB)
"RTN","IBCNES",119,0)
 . D HCSD^IBCNES1(IBVF,TXVIENS,IBVV,IBVSUB)
"RTN","IBCNES",120,0)
 . D BRE^IBCNES1(IBVF,TXVIENS,IBVV,IBVSUB)
"RTN","IBCNES",121,0)
 . ;
"RTN","IBCNES",122,0)
 . Q
"RTN","IBCNES",123,0)
 ;
"RTN","IBCNES",124,0)
 S VALMCNT=$O(^TMP(IBVSUB,$J,"DISP"," "),-1)
"RTN","IBCNES",125,0)
 ;
"RTN","IBCNES",126,0)
INITX ;
"RTN","IBCNES",127,0)
 Q
"RTN","IBCNES",128,0)
 ;
"RTN","IBCNES",129,0)
NODATA ; display no data found
"RTN","IBCNES",130,0)
 N DSP,LN
"RTN","IBCNES",131,0)
 S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))       ; scratch global display array
"RTN","IBCNES",132,0)
 S LN=+$O(@DSP@(""),-1)                  ; last line# used in scratch global
"RTN","IBCNES",133,0)
 S LN=LN+1 D SET^IBCNES1(LN)
"RTN","IBCNES",134,0)
 S LN=LN+1 D SET^IBCNES1(LN,5,"No eIV Eligibility/Benefit Data Found")
"RTN","IBCNES",135,0)
 S VALMCNT=$O(^TMP(IBVSUB,$J,"DISP"," "),-1)
"RTN","IBCNES",136,0)
NODATAX ;
"RTN","IBCNES",137,0)
 Q
"RTN","IBCNES",138,0)
 ;
"RTN","IBCNES",139,0)
HELP ; -- help code
"RTN","IBCNES",140,0)
 S X="?",VALMANS="??" D DISP^XQORM1 W !!
"RTN","IBCNES",141,0)
 Q
"RTN","IBCNES",142,0)
 ;
"RTN","IBCNES",143,0)
EXIT ; -- exit code
"RTN","IBCNES",144,0)
 K ^TMP(IBVSUB,$J)
"RTN","IBCNES",145,0)
 I $D(VALMEVL) D CLEAN^VALM10,KILL^VALM10()
"RTN","IBCNES",146,0)
 Q
"RTN","IBCNES",147,0)
 ;
"RTN","IBCNES1")
0^36^B103884237^n/a
"RTN","IBCNES1",1,0)
IBCNES1 ;ALB/ESG - eIV elig/benefit utilities ;14-Sept-2009
"RTN","IBCNES1",2,0)
 ;;2.0;INTEGRATED BILLING;**416**;21-MAR-94;Build 58
"RTN","IBCNES1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNES1",4,0)
 ;
"RTN","IBCNES1",5,0)
 Q
"RTN","IBCNES1",6,0)
 ;
"RTN","IBCNES1",7,0)
EB(IBVF,IBVIENS,IBVV,IBVSUB) ; Main Eligibility/Benefit Information
"RTN","IBCNES1",8,0)
 ;
"RTN","IBCNES1",9,0)
 ;    IBVF = file# 2.322 or 365.02
"RTN","IBCNES1",10,0)
 ; IBVIENS = std IENS list of internal entry numbers
"RTN","IBCNES1",11,0)
 ;    IBVV = video attributes flag
"RTN","IBCNES1",12,0)
 ;  IBVSUB = display scratch global subscript
"RTN","IBCNES1",13,0)
 ;
"RTN","IBCNES1",14,0)
 N EB,EBERR,DSP,LN,COL1,COL2,ZF,ZIEN
"RTN","IBCNES1",15,0)
 D GETS^DIQ(IBVF,IBVIENS,".02:.13;8*","IEN","EB","EBERR")
"RTN","IBCNES1",16,0)
 S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))       ; scratch global display array
"RTN","IBCNES1",17,0)
 S LN=+$O(@DSP@(""),-1)                  ; last line# used in scratch global
"RTN","IBCNES1",18,0)
 ;
"RTN","IBCNES1",19,0)
 S COL1=2,COL2=40
"RTN","IBCNES1",20,0)
 ;
"RTN","IBCNES1",21,0)
 S LN=LN+1
"RTN","IBCNES1",22,0)
 D SET(LN,1,"Eligibility/Benefit Information",,IBVV)
"RTN","IBCNES1",23,0)
 ;
"RTN","IBCNES1",24,0)
 S LN=LN+1
"RTN","IBCNES1",25,0)
 D SET(LN,COL1,"Elig/Ben Info",$P($G(^IBE(365.011,+$G(EB(IBVF,IBVIENS,.02,"I")),0)),U,2))
"RTN","IBCNES1",26,0)
 D SET(.LN,COL2,"Coverage Level",$P($G(^IBE(365.012,+$G(EB(IBVF,IBVIENS,.03,"I")),0)),U,2))
"RTN","IBCNES1",27,0)
 ;
"RTN","IBCNES1",28,0)
 ; now loop through and display all of the dates and date qualifiers
"RTN","IBCNES1",29,0)
 S ZF=2.3228
"RTN","IBCNES1",30,0)
 I IBVF=365.02 S ZF=365.28     ; subscriber dates subfile#
"RTN","IBCNES1",31,0)
 I '$D(EB(ZF)) S EB(ZF,1)=""   ; so the fields display once
"RTN","IBCNES1",32,0)
 S ZIEN="" F  S ZIEN=$O(EB(ZF,ZIEN)) Q:ZIEN=""  D
"RTN","IBCNES1",33,0)
 . N HLDT,DTYP,EXDT
"RTN","IBCNES1",34,0)
 . S LN=LN+1
"RTN","IBCNES1",35,0)
 . D SET(LN,COL1,"Date/Time Qual",$P($G(^IBE(365.026,+$G(EB(ZF,ZIEN,.03,"I")),0)),U,2))
"RTN","IBCNES1",36,0)
 . S HLDT=$G(EB(ZF,ZIEN,.02,"E"))
"RTN","IBCNES1",37,0)
 . S DTYP=$G(EB(ZF,ZIEN,.04,"I"))
"RTN","IBCNES1",38,0)
 . S EXDT=$S(DTYP="D8":$$DATE(HLDT),DTYP="RD8":($$DATE($P(HLDT,"-",1))_"-"_$$DATE($P(HLDT,"-",2))),1:HLDT)
"RTN","IBCNES1",39,0)
 . D SET(.LN,COL2,"D/T Period",EXDT)
"RTN","IBCNES1",40,0)
 . Q
"RTN","IBCNES1",41,0)
 ;
"RTN","IBCNES1",42,0)
 S LN=LN+1
"RTN","IBCNES1",43,0)
 D SET(LN,COL1,"Service Type",$P($G(^IBE(365.013,+$G(EB(IBVF,IBVIENS,.04,"I")),0)),U,2))
"RTN","IBCNES1",44,0)
 D SET(.LN,COL2,"Time Period",$P($G(^IBE(365.015,+$G(EB(IBVF,IBVIENS,.07,"I")),0)),U,2))
"RTN","IBCNES1",45,0)
 ;
"RTN","IBCNES1",46,0)
 S LN=LN+1
"RTN","IBCNES1",47,0)
 D SET(LN,COL1,"Insurance Type",$P($G(^IBE(365.014,+$G(EB(IBVF,IBVIENS,.05,"I")),0)),U,2))
"RTN","IBCNES1",48,0)
 ;
"RTN","IBCNES1",49,0)
 S LN=LN+1
"RTN","IBCNES1",50,0)
 D SET(LN,COL1,"Plan Coverage Desc",$G(EB(IBVF,IBVIENS,.06,"E")))
"RTN","IBCNES1",51,0)
 ;
"RTN","IBCNES1",52,0)
 S LN=LN+1
"RTN","IBCNES1",53,0)
 D SET(LN,COL1,"Benefit Amount",$G(EB(IBVF,IBVIENS,.08,"E")))
"RTN","IBCNES1",54,0)
 D SET(.LN,COL2,"Benefit %",$G(EB(IBVF,IBVIENS,.09,"E")))
"RTN","IBCNES1",55,0)
 ;
"RTN","IBCNES1",56,0)
 S LN=LN+1
"RTN","IBCNES1",57,0)
 D SET(LN,COL1,"Quantity Qual",$P($G(^IBE(365.016,+$G(EB(IBVF,IBVIENS,.1,"I")),0)),U,2))
"RTN","IBCNES1",58,0)
 D SET(.LN,COL2,"Quantity Amount",$G(EB(IBVF,IBVIENS,.11,"E")))
"RTN","IBCNES1",59,0)
 ;
"RTN","IBCNES1",60,0)
 S LN=LN+1
"RTN","IBCNES1",61,0)
 D SET(LN,COL1,"Auth/Certification Required",$G(EB(IBVF,IBVIENS,.12,"E")))
"RTN","IBCNES1",62,0)
 D SET(.LN,COL2,"In-Plan-Network",$G(EB(IBVF,IBVIENS,.13,"E")))
"RTN","IBCNES1",63,0)
 ;
"RTN","IBCNES1",64,0)
 S LN=LN+1
"RTN","IBCNES1",65,0)
 D SET(LN)
"RTN","IBCNES1",66,0)
 ;
"RTN","IBCNES1",67,0)
EBX ;
"RTN","IBCNES1",68,0)
 Q
"RTN","IBCNES1",69,0)
 ;
"RTN","IBCNES1",70,0)
CMPI(IBVF,IBVIENS,IBVV,IBVSUB) ; Composite Medical Procedure Information
"RTN","IBCNES1",71,0)
 ;
"RTN","IBCNES1",72,0)
 ;    IBVF = file# 2.322 or 365.02
"RTN","IBCNES1",73,0)
 ; IBVIENS = std IENS list of internal entry numbers
"RTN","IBCNES1",74,0)
 ;    IBVV = video attributes flag
"RTN","IBCNES1",75,0)
 ;  IBVSUB = display scratch global subscript
"RTN","IBCNES1",76,0)
 ;
"RTN","IBCNES1",77,0)
 N CMPI,CMPIERR,DSP,LN,COL1,COL2,PCTYP,PCODE,PCIEN,PCDESC,MODLST,FCZ,PM,ZF,ZIEN,POS,POSD,DX,DXD
"RTN","IBCNES1",78,0)
 D GETS^DIQ(IBVF,IBVIENS,"1.01:1.06;9*","IEN","CMPI","CMPIERR")
"RTN","IBCNES1",79,0)
 S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))       ; scratch global display array
"RTN","IBCNES1",80,0)
 S LN=+$O(@DSP@(""),-1)                  ; last line# used in scratch global
"RTN","IBCNES1",81,0)
 ;
"RTN","IBCNES1",82,0)
 S COL1=2,COL2=40
"RTN","IBCNES1",83,0)
 ;
"RTN","IBCNES1",84,0)
 S LN=LN+1
"RTN","IBCNES1",85,0)
 I '$D(CMPI) G CMPIX
"RTN","IBCNES1",86,0)
 D SET(LN,1,"Composite Medical Procedure Information",,IBVV)
"RTN","IBCNES1",87,0)
 ;
"RTN","IBCNES1",88,0)
 ; get procedure code, desc, and type information
"RTN","IBCNES1",89,0)
 S PCTYP=$G(CMPI(IBVF,IBVIENS,1.01,"I"))
"RTN","IBCNES1",90,0)
 S PCODE=$G(CMPI(IBVF,IBVIENS,1.02,"E"))
"RTN","IBCNES1",91,0)
 S PCIEN=0,PCDESC=""
"RTN","IBCNES1",92,0)
 I PCTYP="CJ"!(PCTYP="HC") D     ; cpt or hcpcs procedure codes
"RTN","IBCNES1",93,0)
 . Q:PCODE=""
"RTN","IBCNES1",94,0)
 . S PCIEN=+$O(^ICPT("BA",PCODE_" ",0))
"RTN","IBCNES1",95,0)
 . Q:'PCIEN
"RTN","IBCNES1",96,0)
 . S PCDESC=$P($$CPT^IBACSV(PCIEN),U,2)
"RTN","IBCNES1",97,0)
 . S PCDESC=$$TITLE^XLFSTR(PCDESC)
"RTN","IBCNES1",98,0)
 . Q
"RTN","IBCNES1",99,0)
 ;
"RTN","IBCNES1",100,0)
 I PCTYP="ID" D         ; icd-9-cm procedure codes
"RTN","IBCNES1",101,0)
 . Q:PCODE=""
"RTN","IBCNES1",102,0)
 . S PCIEN=+$O(^ICD0("BA",PCODE_" ",0))
"RTN","IBCNES1",103,0)
 . Q:'PCIEN
"RTN","IBCNES1",104,0)
 . S PCDESC=$P($$ICD0^IBACSV(PCIEN),U,4)
"RTN","IBCNES1",105,0)
 . S PCDESC=$$TITLE^XLFSTR(PCDESC)
"RTN","IBCNES1",106,0)
 . Q
"RTN","IBCNES1",107,0)
 ;
"RTN","IBCNES1",108,0)
 S LN=LN+1
"RTN","IBCNES1",109,0)
 D SET(LN,COL1,"Prod/Serv ID Qual",$G(CMPI(IBVF,IBVIENS,1.01,"E")))
"RTN","IBCNES1",110,0)
 D SET(.LN,COL2,"Procedure Code",PCODE_" "_PCDESC)
"RTN","IBCNES1",111,0)
 ;
"RTN","IBCNES1",112,0)
 S LN=LN+1
"RTN","IBCNES1",113,0)
 S MODLST=""
"RTN","IBCNES1",114,0)
 F FCZ=1.03:.01:1.06 S PM=$G(CMPI(IBVF,IBVIENS,FCZ,"E")) I PM'="" S MODLST=$S(MODLST="":PM,1:(MODLST_", "_PM))
"RTN","IBCNES1",115,0)
 D SET(LN,COL1,"Procedure Modifier(s)",MODLST)
"RTN","IBCNES1",116,0)
 ;
"RTN","IBCNES1",117,0)
 ; now loop through and display all of the additional info (POS and DX)
"RTN","IBCNES1",118,0)
 S ZF=2.3229
"RTN","IBCNES1",119,0)
 I IBVF=365.02 S ZF=365.29   ; additional info subfile#
"RTN","IBCNES1",120,0)
 ;
"RTN","IBCNES1",121,0)
 ; if no additional info (POS and DX), then display the prompts here once
"RTN","IBCNES1",122,0)
 I '$D(CMPI(ZF)) D
"RTN","IBCNES1",123,0)
 . S LN=LN+1
"RTN","IBCNES1",124,0)
 . D SET(LN,COL1,"DX/Facility Qual","")
"RTN","IBCNES1",125,0)
 . D SET(.LN,COL2,"DX/Facility","")
"RTN","IBCNES1",126,0)
 . Q
"RTN","IBCNES1",127,0)
 ;
"RTN","IBCNES1",128,0)
 S ZIEN="" F  S ZIEN=$O(CMPI(ZF,ZIEN)) Q:ZIEN=""  D
"RTN","IBCNES1",129,0)
 . ;
"RTN","IBCNES1",130,0)
 . ; check to see if we have a valid POS pointer
"RTN","IBCNES1",131,0)
 . S POS=+$G(CMPI(ZF,ZIEN,.02,"I")),POSD=""
"RTN","IBCNES1",132,0)
 . I POS S POSD=$P($G(^IBE(353.1,POS,0)),U,2)
"RTN","IBCNES1",133,0)
 . I POSD'="" D
"RTN","IBCNES1",134,0)
 .. S POSD=$$TITLE^XLFSTR(POSD)
"RTN","IBCNES1",135,0)
 .. S LN=LN+1
"RTN","IBCNES1",136,0)
 .. D SET(LN,COL1,"DX/Facility Qual","POS")
"RTN","IBCNES1",137,0)
 .. D SET(.LN,COL2,"DX/Facility",$G(CMPI(ZF,ZIEN,.02,"E"))_" "_POSD)
"RTN","IBCNES1",138,0)
 .. Q
"RTN","IBCNES1",139,0)
 . ;
"RTN","IBCNES1",140,0)
 . ; now check for a DX
"RTN","IBCNES1",141,0)
 . S DX=+$G(CMPI(ZF,ZIEN,.03,"I")),DXD=""
"RTN","IBCNES1",142,0)
 . I DX S DXD=$P($$ICD9^IBACSV(DX),U,3)
"RTN","IBCNES1",143,0)
 . I DXD'="" D
"RTN","IBCNES1",144,0)
 .. S DXD=$$TITLE^XLFSTR(DXD)
"RTN","IBCNES1",145,0)
 .. S LN=LN+1
"RTN","IBCNES1",146,0)
 .. D SET(LN,COL1,"DX/Facility Qual","DX")
"RTN","IBCNES1",147,0)
 .. D SET(.LN,COL2,"DX/Facility",$G(CMPI(ZF,ZIEN,.03,"E"))_" "_DXD)
"RTN","IBCNES1",148,0)
 .. Q
"RTN","IBCNES1",149,0)
 . Q
"RTN","IBCNES1",150,0)
 ;
"RTN","IBCNES1",151,0)
 S LN=LN+1
"RTN","IBCNES1",152,0)
 D SET(LN)
"RTN","IBCNES1",153,0)
 ;
"RTN","IBCNES1",154,0)
CMPIX ;
"RTN","IBCNES1",155,0)
 Q
"RTN","IBCNES1",156,0)
 ;
"RTN","IBCNES1",157,0)
HCSD(IBVF,IBVIENS,IBVV,IBVSUB) ; Healthcare Services Delivery multiple display
"RTN","IBCNES1",158,0)
 ;
"RTN","IBCNES1",159,0)
 ;    IBVF = file# 2.322 or 365.02
"RTN","IBCNES1",160,0)
 ; IBVIENS = std IENS list of internal entry numbers
"RTN","IBCNES1",161,0)
 ;    IBVV = video attributes flag
"RTN","IBCNES1",162,0)
 ;  IBVSUB = display scratch global subscript
"RTN","IBCNES1",163,0)
 ;
"RTN","IBCNES1",164,0)
 N HCSD,HCSDERR,DSP,LN,ZF,HCNT,ZIEN,HCTOT,COL1,COL2
"RTN","IBCNES1",165,0)
 D GETS^DIQ(IBVF,IBVIENS,"7*","IEN","HCSD","HCSDERR")
"RTN","IBCNES1",166,0)
 S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))       ; scratch global display array
"RTN","IBCNES1",167,0)
 S LN=+$O(@DSP@(""),-1)                  ; last line# used in scratch global
"RTN","IBCNES1",168,0)
 ;
"RTN","IBCNES1",169,0)
 ; loop through and count the # of hcsd multiples
"RTN","IBCNES1",170,0)
 S ZF=2.3227,HCNT=0
"RTN","IBCNES1",171,0)
 I IBVF=365.02 S ZF=365.27   ; healthcare services delivery subfile#
"RTN","IBCNES1",172,0)
 S ZIEN="" F  S ZIEN=$O(HCSD(ZF,ZIEN)) Q:ZIEN=""  S HCNT=HCNT+1
"RTN","IBCNES1",173,0)
 S HCTOT=HCNT
"RTN","IBCNES1",174,0)
 ;
"RTN","IBCNES1",175,0)
 I 'HCTOT G HCSDX
"RTN","IBCNES1",176,0)
 ;
"RTN","IBCNES1",177,0)
 S COL1=2,COL2=40
"RTN","IBCNES1",178,0)
 ;
"RTN","IBCNES1",179,0)
 ; loop again to display
"RTN","IBCNES1",180,0)
 S HCNT=0
"RTN","IBCNES1",181,0)
 S ZIEN="" F  S ZIEN=$O(HCSD(ZF,ZIEN)) Q:ZIEN=""  D
"RTN","IBCNES1",182,0)
 . S HCNT=HCNT+1
"RTN","IBCNES1",183,0)
 . ;
"RTN","IBCNES1",184,0)
 . S LN=LN+1
"RTN","IBCNES1",185,0)
 . I HCTOT>1 D SET(LN,1,"Health Care Service Delivery ("_HCNT_" of "_HCTOT_")",,IBVV)
"RTN","IBCNES1",186,0)
 . I HCTOT'>1 D SET(LN,1,"Health Care Service Delivery",,IBVV)
"RTN","IBCNES1",187,0)
 . ;
"RTN","IBCNES1",188,0)
 . S LN=LN+1
"RTN","IBCNES1",189,0)
 . D SET(LN,COL1,"Quantity Qualifier",$P($G(^IBE(365.016,+$G(HCSD(ZF,ZIEN,.03,"I")),0)),U,2))
"RTN","IBCNES1",190,0)
 . D SET(.LN,COL2,"Benefit Quantity",$G(HCSD(ZF,ZIEN,.02,"E")))
"RTN","IBCNES1",191,0)
 . ;
"RTN","IBCNES1",192,0)
 . S LN=LN+1
"RTN","IBCNES1",193,0)
 . D SET(LN,COL1,"Unit/Basis for Measurement",$G(HCSD(ZF,ZIEN,.05,"E")))
"RTN","IBCNES1",194,0)
 . D SET(.LN,COL2,"Sampling Frequency",$G(HCSD(ZF,ZIEN,.04,"E")))
"RTN","IBCNES1",195,0)
 . ;
"RTN","IBCNES1",196,0)
 . S LN=LN+1
"RTN","IBCNES1",197,0)
 . D SET(LN,COL1,"Period Count Qual",$P($G(^IBE(365.015,+$G(HCSD(ZF,ZIEN,.07,"I")),0)),U,2))
"RTN","IBCNES1",198,0)
 . D SET(.LN,COL2,"Period Count",$G(HCSD(ZF,ZIEN,.06,"E")))
"RTN","IBCNES1",199,0)
 . ;
"RTN","IBCNES1",200,0)
 . S LN=LN+1
"RTN","IBCNES1",201,0)
 . D SET(LN,COL1,"Delivery Freq. Code",$P($G(^IBE(365.025,+$G(HCSD(ZF,ZIEN,.08,"I")),0)),U,2))
"RTN","IBCNES1",202,0)
 . ;
"RTN","IBCNES1",203,0)
 . S LN=LN+1
"RTN","IBCNES1",204,0)
 . D SET(LN,COL1,"Delivery Pattern Time Code",$G(HCSD(ZF,ZIEN,.09,"E")))
"RTN","IBCNES1",205,0)
 . ;
"RTN","IBCNES1",206,0)
 . S LN=LN+1
"RTN","IBCNES1",207,0)
 . D SET(LN)
"RTN","IBCNES1",208,0)
 . Q
"RTN","IBCNES1",209,0)
 ;
"RTN","IBCNES1",210,0)
HCSDX ;
"RTN","IBCNES1",211,0)
 Q
"RTN","IBCNES1",212,0)
 ;
"RTN","IBCNES1",213,0)
BRE(IBVF,IBVIENS,IBVV,IBVSUB) ; Benefit Related Entity data extract/display
"RTN","IBCNES1",214,0)
 ;
"RTN","IBCNES1",215,0)
 ;    IBVF = file# 2.322 or 365.02
"RTN","IBCNES1",216,0)
 ; IBVIENS = std IENS list of internal entry numbers
"RTN","IBCNES1",217,0)
 ;    IBVV = video attributes flag
"RTN","IBCNES1",218,0)
 ;  IBVSUB = display scratch global subscript
"RTN","IBCNES1",219,0)
 ;
"RTN","IBCNES1",220,0)
 N BRE,BREERR,DSP,LN,ADDR,ADDR1,ADDR2,CITY,ST,ZIP,ZF,ZIEN,COL1,COL2
"RTN","IBCNES1",221,0)
 D GETS^DIQ(IBVF,IBVIENS,"3.01:5.03;6*","IEN","BRE","BREERR")
"RTN","IBCNES1",222,0)
 S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))       ; scratch global display array
"RTN","IBCNES1",223,0)
 S LN=+$O(@DSP@(""),-1)                  ; last line# used in scratch global
"RTN","IBCNES1",224,0)
 ;
"RTN","IBCNES1",225,0)
 S COL1=2,COL2=40
"RTN","IBCNES1",226,0)
 ;
"RTN","IBCNES1",227,0)
 S LN=LN+1
"RTN","IBCNES1",228,0)
 I '$D(BRE) G BREX
"RTN","IBCNES1",229,0)
 D SET(LN,1,"Benefit Related Entity",,IBVV)
"RTN","IBCNES1",230,0)
 ;
"RTN","IBCNES1",231,0)
 S LN=LN+1
"RTN","IBCNES1",232,0)
 D SET(LN,COL1,"Entity ID Code",$P($G(^IBE(365.022,+$G(BRE(IBVF,IBVIENS,3.01,"I")),0)),U,2))
"RTN","IBCNES1",233,0)
 D SET(.LN,COL2,"Entity Type Qual",$G(BRE(IBVF,IBVIENS,3.02,"E")))
"RTN","IBCNES1",234,0)
 ;
"RTN","IBCNES1",235,0)
 S LN=LN+1
"RTN","IBCNES1",236,0)
 D SET(LN,COL1,"Entity ID Name",$G(BRE(IBVF,IBVIENS,3.03,"E")))
"RTN","IBCNES1",237,0)
 ;
"RTN","IBCNES1",238,0)
 S LN=LN+1
"RTN","IBCNES1",239,0)
 D SET(LN,COL1,"ID Qualifier",$P($G(^IBE(365.023,+$G(BRE(IBVF,IBVIENS,3.05,"I")),0)),U,2))
"RTN","IBCNES1",240,0)
 D SET(.LN,COL2,"Entity ID Number",$G(BRE(IBVF,IBVIENS,3.04,"E")))
"RTN","IBCNES1",241,0)
 ;
"RTN","IBCNES1",242,0)
 S ADDR1=$G(BRE(IBVF,IBVIENS,4.01,"E"))
"RTN","IBCNES1",243,0)
 S ADDR2=$G(BRE(IBVF,IBVIENS,4.02,"E"))
"RTN","IBCNES1",244,0)
 S CITY=$G(BRE(IBVF,IBVIENS,4.03,"E"))
"RTN","IBCNES1",245,0)
 S ST=+$G(BRE(IBVF,IBVIENS,4.04,"I"))
"RTN","IBCNES1",246,0)
 S ST=$S(ST:$P($G(^DIC(5,ST,0)),U,2),1:"")
"RTN","IBCNES1",247,0)
 S ZIP=$G(BRE(IBVF,IBVIENS,4.05,"E"))
"RTN","IBCNES1",248,0)
 S ADDR=ADDR1
"RTN","IBCNES1",249,0)
 I ADDR2'="" S ADDR=ADDR_" "_ADDR2
"RTN","IBCNES1",250,0)
 I CITY'="" S ADDR=ADDR_", "_CITY
"RTN","IBCNES1",251,0)
 I ST'="" S ADDR=ADDR_","_ST
"RTN","IBCNES1",252,0)
 I ZIP'="" S ADDR=ADDR_" "_ZIP
"RTN","IBCNES1",253,0)
 S LN=LN+1
"RTN","IBCNES1",254,0)
 D SET(LN,COL1,"Entity Address",ADDR)
"RTN","IBCNES1",255,0)
 ;
"RTN","IBCNES1",256,0)
 S LN=LN+1
"RTN","IBCNES1",257,0)
 D SET(LN,COL1,"Country Code",$G(BRE(IBVF,IBVIENS,4.06,"E")))
"RTN","IBCNES1",258,0)
 ;
"RTN","IBCNES1",259,0)
 S LN=LN+1
"RTN","IBCNES1",260,0)
 D SET(LN,COL1,"Location Qual",$G(BRE(IBVF,IBVIENS,4.08,"E")))
"RTN","IBCNES1",261,0)
 D SET(.LN,COL2,"DOD Health Service Region Code",$G(BRE(IBVF,IBVIENS,4.07,"E")))
"RTN","IBCNES1",262,0)
 ;
"RTN","IBCNES1",263,0)
 ; now loop through and display all of the benefit related entity contact information
"RTN","IBCNES1",264,0)
 S ZF=2.3226
"RTN","IBCNES1",265,0)
 I IBVF=365.02 S ZF=365.26       ; contact information subfile#
"RTN","IBCNES1",266,0)
 I '$D(BRE(ZF)) S BRE(ZF,1)=""   ; so the fields display once
"RTN","IBCNES1",267,0)
 S ZIEN="" F  S ZIEN=$O(BRE(ZF,ZIEN)) Q:ZIEN=""  D
"RTN","IBCNES1",268,0)
 . S LN=LN+1
"RTN","IBCNES1",269,0)
 . D SET(LN,COL1,"Comm. Number Qual",$P($G(^IBE(365.021,+$G(BRE(ZF,ZIEN,.04,"I")),0)),U,2))
"RTN","IBCNES1",270,0)
 . D SET(.LN,COL2,"Entity Comm. Number",$G(BRE(ZF,ZIEN,.03,"E")))
"RTN","IBCNES1",271,0)
 . Q
"RTN","IBCNES1",272,0)
 ;
"RTN","IBCNES1",273,0)
 S LN=LN+1
"RTN","IBCNES1",274,0)
 D SET(LN)
"RTN","IBCNES1",275,0)
 ;
"RTN","IBCNES1",276,0)
 S LN=LN+1
"RTN","IBCNES1",277,0)
 D SET(LN,1,"Benefit Related Provider Information",,IBVV)
"RTN","IBCNES1",278,0)
 ;
"RTN","IBCNES1",279,0)
 S LN=LN+1
"RTN","IBCNES1",280,0)
 D SET(LN,COL1,"Provider Code",$P($G(^IBE(365.024,+$G(BRE(IBVF,IBVIENS,5.01,"I")),0)),U,2))
"RTN","IBCNES1",281,0)
 D SET(.LN,COL2,"Provider ID Qual",$G(BRE(IBVF,IBVIENS,5.03,"E")))
"RTN","IBCNES1",282,0)
 ;
"RTN","IBCNES1",283,0)
 S LN=LN+1
"RTN","IBCNES1",284,0)
 D SET(LN,COL1,"Provider ID",$G(BRE(IBVF,IBVIENS,5.02,"E")))
"RTN","IBCNES1",285,0)
 ;
"RTN","IBCNES1",286,0)
 S LN=LN+1
"RTN","IBCNES1",287,0)
 D SET(LN)
"RTN","IBCNES1",288,0)
BREX ;
"RTN","IBCNES1",289,0)
 Q
"RTN","IBCNES1",290,0)
 ;
"RTN","IBCNES1",291,0)
SET(LN,COL,LABEL,DATA,IBVV) ; set data into display scratch global
"RTN","IBCNES1",292,0)
 ;
"RTN","IBCNES1",293,0)
 ; LN must be passed by reference when COL>20 because of the special variable IBVEBCOL flag to produce a single column
"RTN","IBCNES1",294,0)
 ;
"RTN","IBCNES1",295,0)
 ; IBVV - video attributes flag
"RTN","IBCNES1",296,0)
 ;        1 = reverse video
"RTN","IBCNES1",297,0)
 ;        2 = bold
"RTN","IBCNES1",298,0)
 ;        3 = underline
"RTN","IBCNES1",299,0)
 ;
"RTN","IBCNES1",300,0)
 N STR,D1
"RTN","IBCNES1",301,0)
 S COL=$G(COL,1)
"RTN","IBCNES1",302,0)
 I $G(IBVEBCOL),COL>20 S LN=LN+1,COL=2   ; single column flag
"RTN","IBCNES1",303,0)
 I $G(LABEL)'="",COL>1 S LABEL=" "_LABEL,COL=COL-1
"RTN","IBCNES1",304,0)
 S STR=$G(@DSP@(LN,0))    ; get the current string
"RTN","IBCNES1",305,0)
 S D1=""
"RTN","IBCNES1",306,0)
 I $G(LABEL)'="" S D1=LABEL
"RTN","IBCNES1",307,0)
 I $D(DATA) S D1=D1_": "_$G(DATA)   ; build the new display
"RTN","IBCNES1",308,0)
 ;
"RTN","IBCNES1",309,0)
 S STR=$$SETSTR^VALM1(D1,STR,+COL,(81-COL))   ; insert new data
"RTN","IBCNES1",310,0)
 ;
"RTN","IBCNES1",311,0)
 S @DSP@(LN,0)=STR    ; set the new data back into the scratch global
"RTN","IBCNES1",312,0)
 ;
"RTN","IBCNES1",313,0)
 ; Add the video attributes if requested
"RTN","IBCNES1",314,0)
 I $G(IBVV) D
"RTN","IBCNES1",315,0)
 . I IBVV=1 D CNTRL^VALM10(LN,COL,$L(LABEL),IORVON,IORVOFF)  ; reverse video
"RTN","IBCNES1",316,0)
 . I IBVV=2 D CNTRL^VALM10(LN,COL,$L(LABEL),IOINHI,IOINORM)  ; bold
"RTN","IBCNES1",317,0)
 . I IBVV=3 D CNTRL^VALM10(LN,COL,$L(LABEL),IOUON,IOUOFF)    ; underline
"RTN","IBCNES1",318,0)
 . Q
"RTN","IBCNES1",319,0)
 ;
"RTN","IBCNES1",320,0)
SETX ;
"RTN","IBCNES1",321,0)
 Q
"RTN","IBCNES1",322,0)
 ;
"RTN","IBCNES1",323,0)
DATE(Z) ; convert date in Z in format CCYYMMDD to MM/DD/CCYY format for display
"RTN","IBCNES1",324,0)
 I Z?8N S Z=$E(Z,5,6)_"/"_$E(Z,7,8)_"/"_$E(Z,1,4)
"RTN","IBCNES1",325,0)
 Q Z
"RTN","IBCNES1",326,0)
 ;
"RTN","IBCNES2")
0^37^B9476079^n/a
"RTN","IBCNES2",1,0)
IBCNES2 ;ALB/ESG - eIV elig/Benefit action protocols ;25-Sept-2009
"RTN","IBCNES2",2,0)
 ;;2.0;INTEGRATED BILLING;**416**;21-MAR-94;Build 58
"RTN","IBCNES2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNES2",4,0)
 ;
"RTN","IBCNES2",5,0)
 Q
"RTN","IBCNES2",6,0)
 ;
"RTN","IBCNES2",7,0)
EBSV ; Action protocol for eIV EB data screen called from view/edit Patient Insurance
"RTN","IBCNES2",8,0)
 ; Called from the EB-Expand Benefits action on the main list of pt. insurances
"RTN","IBCNES2",9,0)
 ; User may select multiple insurances from this list.
"RTN","IBCNES2",10,0)
 ;
"RTN","IBCNES2",11,0)
 N VALMY,IBXX,IBPPOL,DFN,IBCDFN
"RTN","IBCNES2",12,0)
 D FULL^VALM1
"RTN","IBCNES2",13,0)
 D EN^VALM2($G(XQORNOD(0)))
"RTN","IBCNES2",14,0)
 I '$D(VALMY) G EBSVX
"RTN","IBCNES2",15,0)
 S IBXX=0
"RTN","IBCNES2",16,0)
 F  S IBXX=$O(VALMY(IBXX)) Q:'IBXX  D
"RTN","IBCNES2",17,0)
 . S IBPPOL=$G(^TMP("IBNSMDX",$J,+$O(^TMP("IBNSM",$J,"IDX",IBXX,0))))
"RTN","IBCNES2",18,0)
 . I IBPPOL="" W !!,"Structure error (EBSV)" D PAUSE^VALM1 Q
"RTN","IBCNES2",19,0)
 . S DFN=+$P(IBPPOL,U,3)
"RTN","IBCNES2",20,0)
 . I 'DFN W !!,"System Error: Patient DFN undefined." D PAUSE^VALM1 Q
"RTN","IBCNES2",21,0)
 . S IBCDFN=+$P(IBPPOL,U,4)
"RTN","IBCNES2",22,0)
 . I 'IBCDFN W !!,"System Error: pt ins policy ien undefined." D PAUSE^VALM1 Q
"RTN","IBCNES2",23,0)
 . ;
"RTN","IBCNES2",24,0)
 . D EB^IBCNES(2.322,IBCDFN_","_DFN_",","A",1,"PT. INS EB DATA")
"RTN","IBCNES2",25,0)
 . ;
"RTN","IBCNES2",26,0)
 . Q
"RTN","IBCNES2",27,0)
EBSVX ;
"RTN","IBCNES2",28,0)
 S VALMBCK="R"
"RTN","IBCNES2",29,0)
 Q
"RTN","IBCNES2",30,0)
 ;
"RTN","IBCNES2",31,0)
EBAB ; Action protocol for eIV EB data screen called from view/edit Annual Benefits screens
"RTN","IBCNES2",32,0)
 ; Called from the EB-Expand Benefits action on either the view or edit of Annual
"RTN","IBCNES2",33,0)
 ; Benefits.
"RTN","IBCNES2",34,0)
 NEW DFN,IBCDFN
"RTN","IBCNES2",35,0)
 ;
"RTN","IBCNES2",36,0)
 D FULL^VALM1
"RTN","IBCNES2",37,0)
 I $G(IBPPOL)="" W !!,"Expand Benefits is not available here. Use Patient Insurance options." D PAUSE^VALM1 G EBABX
"RTN","IBCNES2",38,0)
 S DFN=+$P(IBPPOL,U,3)
"RTN","IBCNES2",39,0)
 I 'DFN W !!,"System Error: Patient DFN undefined." D PAUSE^VALM1 G EBABX
"RTN","IBCNES2",40,0)
 S IBCDFN=+$P(IBPPOL,U,4)
"RTN","IBCNES2",41,0)
 I 'IBCDFN W !!,"System Error: pt ins policy ien undefined." D PAUSE^VALM1 G EBABX
"RTN","IBCNES2",42,0)
 ;
"RTN","IBCNES2",43,0)
 D EB^IBCNES(2.322,IBCDFN_","_DFN_",","A",1,"PT. INS ANN BEN EB DATA")
"RTN","IBCNES2",44,0)
 ;
"RTN","IBCNES2",45,0)
EBABX ;
"RTN","IBCNES2",46,0)
 S VALMBCK="R"
"RTN","IBCNES2",47,0)
 Q
"RTN","IBCNES2",48,0)
 ;
"RTN","IBCNES2",49,0)
EBVP ; Action protocol for eIV EB data screen called from VP screen in pt. insurance - 
"RTN","IBCNES2",50,0)
 ; Expanded policy information
"RTN","IBCNES2",51,0)
 NEW DFN,IBCDFN
"RTN","IBCNES2",52,0)
 D FULL^VALM1
"RTN","IBCNES2",53,0)
 I $G(IBPPOL)="" W !!,"Structure error (EBVP)" D PAUSE^VALM1 G EBVPX
"RTN","IBCNES2",54,0)
 S DFN=+$P(IBPPOL,U,3)
"RTN","IBCNES2",55,0)
 I 'DFN W !!,"System Error: Patient DFN undefined." D PAUSE^VALM1 G EBVPX
"RTN","IBCNES2",56,0)
 S IBCDFN=+$P(IBPPOL,U,4)
"RTN","IBCNES2",57,0)
 I 'IBCDFN W !!,"System Error: pt ins policy ien undefined." D PAUSE^VALM1 G EBVPX
"RTN","IBCNES2",58,0)
 ;
"RTN","IBCNES2",59,0)
 D EB^IBCNES(2.322,IBCDFN_","_DFN_",","A",1,"PT. INS VIEW POLICY EB DATA")
"RTN","IBCNES2",60,0)
 ;
"RTN","IBCNES2",61,0)
EBVPX ;
"RTN","IBCNES2",62,0)
 S VALMBCK="R"
"RTN","IBCNES2",63,0)
 Q
"RTN","IBCNES2",64,0)
 ;
"RTN","IBCNES2",65,0)
EBJT ; Action protocol for eIV EB data screen called from Third Party Joint Inquiry,
"RTN","IBCNES2",66,0)
 ; TPJI, main Claim Information screen
"RTN","IBCNES2",67,0)
 NEW IBX,IBJPOL,X,Y,DIRUT,DTOUT,DUOUT,DIROUT
"RTN","IBCNES2",68,0)
 D FULL^VALM1
"RTN","IBCNES2",69,0)
 I '$G(IBIFN)!'$G(DFN) W !!,"Claim or Patient not defined." D PAUSE^VALM1 G EBJTX
"RTN","IBCNES2",70,0)
 S IBX=$$PST^IBJTU31(IBIFN)
"RTN","IBCNES2",71,0)
 I 'IBX,$D(DIRUT) G EBJTX
"RTN","IBCNES2",72,0)
 I 'IBX W !!,"Insurance data incomplete, cannot find policy." D PAUSE^VALM1 G EBJTX
"RTN","IBCNES2",73,0)
 S IBJPOL=+IBX
"RTN","IBCNES2",74,0)
 D EB^IBCNES(2.322,IBJPOL_","_DFN_",","A",1,"TPJI CLAIM INFO EB DATA")
"RTN","IBCNES2",75,0)
EBJTX ;
"RTN","IBCNES2",76,0)
 S VALMBCK="R"
"RTN","IBCNES2",77,0)
 Q
"RTN","IBCNES2",78,0)
 ;
"RTN","IBCNEUT2")
0^62^B2594683^B2641881
"RTN","IBCNEUT2",1,0)
IBCNEUT2 ;DAOU/DAC - eIV MISC. UTILITIES ;06-JUN-2002
"RTN","IBCNEUT2",2,0)
 ;;2.0;INTEGRATED BILLING;**184,416**;21-MAR-94;Build 58
"RTN","IBCNEUT2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEUT2",4,0)
 ;
"RTN","IBCNEUT2",5,0)
 ; Can't be called from the top
"RTN","IBCNEUT2",6,0)
 Q
"RTN","IBCNEUT2",7,0)
 ;
"RTN","IBCNEUT2",8,0)
SAVETQ(IEN,TDT) ;  Update service date in TQ record
"RTN","IBCNEUT2",9,0)
 ;
"RTN","IBCNEUT2",10,0)
 N DIE,DA,DR,D,D0,DI,DIC,DQ,X
"RTN","IBCNEUT2",11,0)
 S DIE="^IBCN(365.1,",DA=IEN,DR=".12////"_TDT
"RTN","IBCNEUT2",12,0)
 D ^DIE
"RTN","IBCNEUT2",13,0)
 Q
"RTN","IBCNEUT2",14,0)
 ;
"RTN","IBCNEUT2",15,0)
 ;
"RTN","IBCNEUT2",16,0)
SST(IEN,STAT) ;  Set the Transmission Queue Status
"RTN","IBCNEUT2",17,0)
 ;  Input parameters
"RTN","IBCNEUT2",18,0)
 ;    IEN = Internal entry number for the record
"RTN","IBCNEUT2",19,0)
 ;    STAT= Status IEN
"RTN","IBCNEUT2",20,0)
 ;
"RTN","IBCNEUT2",21,0)
 NEW DIE,DA,DR,D,D0,DI,DIC,DQ,X
"RTN","IBCNEUT2",22,0)
 ;
"RTN","IBCNEUT2",23,0)
 I IEN="" Q
"RTN","IBCNEUT2",24,0)
 ;
"RTN","IBCNEUT2",25,0)
 S DIE="^IBCN(365.1,",DA=IEN,DR=".04////^S X=STAT;.15////^S X=$$NOW^XLFDT()"
"RTN","IBCNEUT2",26,0)
 D ^DIE
"RTN","IBCNEUT2",27,0)
 Q
"RTN","IBCNEUT2",28,0)
 ;
"RTN","IBCNEUT2",29,0)
RSP(IEN,STAT) ;  Set the Response File Status
"RTN","IBCNEUT2",30,0)
 ;  Input parameters
"RTN","IBCNEUT2",31,0)
 ;    IEN = Internal entry number for the record
"RTN","IBCNEUT2",32,0)
 ;    STAT= Status IEN
"RTN","IBCNEUT2",33,0)
 ;
"RTN","IBCNEUT2",34,0)
 NEW DIE,DA,DR,D,D0,DI,DIC,DQ,X
"RTN","IBCNEUT2",35,0)
 S DIE="^IBCN(365,",DA=IEN,DR=".06////^S X=STAT"
"RTN","IBCNEUT2",36,0)
 D ^DIE
"RTN","IBCNEUT2",37,0)
 Q
"RTN","IBCNEUT2",38,0)
 ;
"RTN","IBCNEUT2",39,0)
BUFF(BUFF,BNG) ;  Set error symbol into Buffer File
"RTN","IBCNEUT2",40,0)
 ;  Input Parameter
"RTN","IBCNEUT2",41,0)
 ;    BUFF = Buffer internal entry number
"RTN","IBCNEUT2",42,0)
 ;    BNG = Buffer Symbol IEN
"RTN","IBCNEUT2",43,0)
 I 'BUFF!'BNG Q
"RTN","IBCNEUT2",44,0)
 NEW DIE,DA,DR,D,D0,DI,DIC,DQ,X,DISYS
"RTN","IBCNEUT2",45,0)
 S DIE="^IBA(355.33,",DA=BUFF,DR=".12////^S X=BNG"
"RTN","IBCNEUT2",46,0)
 D ^DIE
"RTN","IBCNEUT2",47,0)
 Q
"RTN","IBCNEUT2",48,0)
 ;
"RTN","IBCNEUT2",49,0)
PAYR ;  Set up the '~NO PAYER' payer.  This procedure is called by both
"RTN","IBCNEUT2",50,0)
 ;  the post-install routine and by the nightly batch extract routine.
"RTN","IBCNEUT2",51,0)
 S DLAYGO=365.12,DIC(0)="L",DIC("P")=DLAYGO,DIC="^IBE(365.12,"
"RTN","IBCNEUT2",52,0)
 S X="~NO PAYER" D ^DIC
"RTN","IBCNEUT2",53,0)
 S DA=+Y
"RTN","IBCNEUT2",54,0)
 S DR=".02////^S X=""00000""",DIE=DIC D ^DIE
"RTN","IBCNEUT2",55,0)
 ;
"RTN","IBCNEUT2",56,0)
 K DA,DIC,DLAYGO,X,Y,D1,DILN,DISYS,IDUZ,DIE,DR,D0,D,DI,DIERR,DQ
"RTN","IBCNEUT2",57,0)
 Q
"RTN","IBCNEUT2",58,0)
 ;
"RTN","IBCNEUT3")
0^55^B56842259^B58297927
"RTN","IBCNEUT3",1,0)
IBCNEUT3 ;DAOU/AM - eIV MISC. UTILITIES ;12-JUN-2002
"RTN","IBCNEUT3",2,0)
 ;;2.0;INTEGRATED BILLING;**184,252,271,416**;21-MAR-94;Build 58
"RTN","IBCNEUT3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEUT3",4,0)
 ;
"RTN","IBCNEUT3",5,0)
 ; The purpose of the INSERROR utility is to identify a legitimate
"RTN","IBCNEUT3",6,0)
 ; Insurance Company name, returning the associated Payer IEN and
"RTN","IBCNEUT3",7,0)
 ; National ID.  This extrinsic function can receive either Insurance or
"RTN","IBCNEUT3",8,0)
 ; Buffer data, identified as TYPE I or B, respectively.
"RTN","IBCNEUT3",9,0)
 ;
"RTN","IBCNEUT3",10,0)
 ; The former is the simpler case.  The IEN, in this case the Insurance
"RTN","IBCNEUT3",11,0)
 ; IEN, is validated using the following criteria (some of which is
"RTN","IBCNEUT3",12,0)
 ; validated in routine IBCNEUT4) :
"RTN","IBCNEUT3",13,0)
 ;
"RTN","IBCNEUT3",14,0)
 ; [1] Does it have a National ID?
"RTN","IBCNEUT3",15,0)
 ; [2] Does the National ID have eIV defined?
"RTN","IBCNEUT3",16,0)
 ; [3] Is the Payer active (i.e. the deactivated flag is turned off)
"RTN","IBCNEUT3",17,0)
 ; [4] Is the national connection enabled?
"RTN","IBCNEUT3",18,0)
 ; [5] Is the National ID blocked by VISTA?
"RTN","IBCNEUT3",19,0)
 ;
"RTN","IBCNEUT3",20,0)
 ; If all 5 criteria are met, the Payer IEN and National ID are
"RTN","IBCNEUT3",21,0)
 ; returned.  If not, an error is generated and returned in ARRAY with
"RTN","IBCNEUT3",22,0)
 ; information specific to the type of problem encountered.
"RTN","IBCNEUT3",23,0)
 ;
"RTN","IBCNEUT3",24,0)
 ; If the TYPE passed is B for Buffer, the IEN is the Buffer IEN.
"RTN","IBCNEUT3",25,0)
 ; The Insurance Company name is retrieved from the Buffer file and
"RTN","IBCNEUT3",26,0)
 ; leading and trailing spaces are stripped.  This value is compared to
"RTN","IBCNEUT3",27,0)
 ; the entries in the "B" cross reference of the Insurance Company file
"RTN","IBCNEUT3",28,0)
 ; (whose values have also been stripped of leading and trailing spaces).
"RTN","IBCNEUT3",29,0)
 ; If a match (or several matches) is found,and a unique National ID is
"RTN","IBCNEUT3",30,0)
 ; identified, confirm the 5 set of insurance validation criteria and
"RTN","IBCNEUT3",31,0)
 ; process as above.
"RTN","IBCNEUT3",32,0)
 ;
"RTN","IBCNEUT3",33,0)
 ; If no match in the Insurance Company could be made, check the Auto
"RTN","IBCNEUT3",34,0)
 ; Match file.  If a unique IEN is identified, confirm the 5 set of
"RTN","IBCNEUT3",35,0)
 ; criteria stated above and process in kind.
"RTN","IBCNEUT3",36,0)
 ;
"RTN","IBCNEUT3",37,0)
 ; If no match could be established in both the Insurance Company and the
"RTN","IBCNEUT3",38,0)
 ; Auto Match files, check the insurance company synonym file (stripping 
"RTN","IBCNEUT3",39,0)
 ; off leading and trailing spaces) while preserving case sensitivity.
"RTN","IBCNEUT3",40,0)
 ; If a unique Insurance Company could be identified, confirm the 5 set
"RTN","IBCNEUT3",41,0)
 ; of validation criteria and process as above. 
"RTN","IBCNEUT3",42,0)
 ;
"RTN","IBCNEUT3",43,0)
 ; 
"RTN","IBCNEUT3",44,0)
 ; Can't be called from the top
"RTN","IBCNEUT3",45,0)
 Q
"RTN","IBCNEUT3",46,0)
 ;
"RTN","IBCNEUT3",47,0)
 ;
"RTN","IBCNEUT3",48,0)
INSERROR(TYPE,IEN,ERRFLG,ARRAY) ;
"RTN","IBCNEUT3",49,0)
 ; Formal parameters:
"RTN","IBCNEUT3",50,0)
 ;  TYPE:   Type of IEN passed in the second parameter.
"RTN","IBCNEUT3",51,0)
 ;          Either "B" for "Buffer" or "I" for "Insurance".
"RTN","IBCNEUT3",52,0)
 ;          Mandatory, passed by value.
"RTN","IBCNEUT3",53,0)
 ;  IEN:    IEN to perform a lookup for. Mandatory, passed by value.
"RTN","IBCNEUT3",54,0)
 ;  ERRFLG: Error flag. "" or 0 if no extended error information is
"RTN","IBCNEUT3",55,0)
 ;          requested, 1 if extended error information is requested.
"RTN","IBCNEUT3",56,0)
 ;          Optional (the default is 0), passed by value.
"RTN","IBCNEUT3",57,0)
 ;  ARRAY:  Array of error messages returned by the function.
"RTN","IBCNEUT3",58,0)
 ;          Optional, passed by reference. Whatever is passed in will be
"RTN","IBCNEUT3",59,0)
 ;          KILLed by the function. The structure of the return array is
"RTN","IBCNEUT3",60,0)
 ;          as follows:
"RTN","IBCNEUT3",61,0)
 ;          ARRAY         # of error messages passed back
"RTN","IBCNEUT3",62,0)
 ;          ARRAY(error#) Data for this error number, including error
"RTN","IBCNEUT3",63,0)
 ;          number 1 present in the value returned by the function.
"RTN","IBCNEUT3",64,0)
 ;                [1]   IEN of the error code in the symbol file
"RTN","IBCNEUT3",65,0)
 ;                [2]   # of lines in the error message text
"RTN","IBCNEUT3",66,0)
 ;          ARRAY(error #,line #) - One line of error message text
"RTN","IBCNEUT3",67,0)
 ;                                  up to 70 characters long
"RTN","IBCNEUT3",68,0)
 ;
"RTN","IBCNEUT3",69,0)
 ;          Returned value consists of the following "^"-delimited pcs:
"RTN","IBCNEUT3",70,0)
 ;           [1]   The IEN of the IIV SYMBOL File (#365.15) entry for
"RTN","IBCNEUT3",71,0)
 ;                 the first error condition encountered by the function.
"RTN","IBCNEUT3",72,0)
 ;                 This is only present if a valid Payer was not found.
"RTN","IBCNEUT3",73,0)
 ;           [2]   Payer IEN if a Payer was found, "" otherwise
"RTN","IBCNEUT3",74,0)
 ;           [3]   National ID if a Payer was found
"RTN","IBCNEUT3",75,0)
 ;
"RTN","IBCNEUT3",76,0)
 ; Initialize all variables used in this program
"RTN","IBCNEUT3",77,0)
 N INSIEN,INSNAME,NAMEARR,PAYID,PAYIEN,SYMIEN
"RTN","IBCNEUT3",78,0)
 ; Initialize return variables
"RTN","IBCNEUT3",79,0)
 S (PAYID,PAYIEN,SYMIEN)=""
"RTN","IBCNEUT3",80,0)
 ; If the calling program didn't pass the Extended Error flag, init it
"RTN","IBCNEUT3",81,0)
 S ERRFLG=+$G(ERRFLG)
"RTN","IBCNEUT3",82,0)
 ; Initialize array of extended error info to be returned
"RTN","IBCNEUT3",83,0)
 K ARRAY
"RTN","IBCNEUT3",84,0)
 ; Validate input parameters
"RTN","IBCNEUT3",85,0)
 I $G(TYPE)'="B",$G(TYPE)'="I" S SYMIEN=$$ERROR^IBCNEUT8("B9","IEN type "_$G(TYPE)_" passed to the insurance match algorithm is neither 'B' nor 'I'.") G EXIT
"RTN","IBCNEUT3",86,0)
 I $G(IEN)="" S SYMIEN=$$ERROR^IBCNEUT8("B9","IEN is not passed to the insurance match algorithm.") G EXIT
"RTN","IBCNEUT3",87,0)
 I TYPE="B",'$D(^IBA(355.33,IEN)) S SYMIEN=$$ERROR^IBCNEUT8("B9","Invalid Buffer IEN "_IEN_" has been passed to the insurance match algorithm.") G EXIT
"RTN","IBCNEUT3",88,0)
 I TYPE="I",'$D(^DIC(36,IEN)) S SYMIEN=$$ERROR^IBCNEUT8("B9","Invalid Insurance Company IEN "_IEN_" has been passed to the insurance match algorithm.") G EXIT
"RTN","IBCNEUT3",89,0)
 ;
"RTN","IBCNEUT3",90,0)
 ; If the IEN is an Insurance Company IEN, validate it
"RTN","IBCNEUT3",91,0)
 I TYPE="I" D  G EXIT
"RTN","IBCNEUT3",92,0)
 . N TMP
"RTN","IBCNEUT3",93,0)
 . ; Check to see if ins co is ACTIVE
"RTN","IBCNEUT3",94,0)
 . S TMP=$$ACTIVE^IBCNEUT4(IEN)
"RTN","IBCNEUT3",95,0)
 . I 'TMP S SYMIEN=$$ERROR^IBCNEUT8("B10","Insurance Company "_$P(TMP,U,2)_" is not active.") Q
"RTN","IBCNEUT3",96,0)
 . D VALID^IBCNEUT4(IEN,.PAYIEN,.PAYID,.SYMIEN)
"RTN","IBCNEUT3",97,0)
 ;
"RTN","IBCNEUT3",98,0)
 ; Retrieve the ins co name from the Ins Buffer
"RTN","IBCNEUT3",99,0)
 S INSNAME=$$TRIM^XLFSTR($P($G(^IBA(355.33,IEN,20)),U,1))
"RTN","IBCNEUT3",100,0)
 I INSNAME="" S SYMIEN=$$ERROR^IBCNEUT8("B13") G EXIT
"RTN","IBCNEUT3",101,0)
 ; Retrieve all ins co IENs matching this ins co name
"RTN","IBCNEUT3",102,0)
 D INSIEN^IBCNEUT8(INSNAME,.INSIEN)
"RTN","IBCNEUT3",103,0)
 ; 
"RTN","IBCNEUT3",104,0)
 ; If one or more ins. co. name matches found, retrieve Payer info
"RTN","IBCNEUT3",105,0)
 I $D(INSIEN) D  G EXIT
"RTN","IBCNEUT3",106,0)
 . ; If there is one INSIEN - make sure it is ACTIVE
"RTN","IBCNEUT3",107,0)
 . I $O(INSIEN(""))=$O(INSIEN(""),-1),'$$ACTIVE^IBCNEUT4($O(INSIEN(""))) S SYMIEN=$$ERROR^IBCNEUT8("B10","Insurance company "_INSNAME_" is not active.") Q
"RTN","IBCNEUT3",108,0)
 . ; Find National IDs for these ins co IENs
"RTN","IBCNEUT3",109,0)
 . D FINDPAY^IBCNEUT8(.INSIEN,.PAYID)
"RTN","IBCNEUT3",110,0)
 . ; There were Multiple INSIENs - if none exist ALL were INACTIVE
"RTN","IBCNEUT3",111,0)
 . I '$D(INSIEN) S SYMIEN=$$ERROR^IBCNEUT8("B10","All insurance companies named "_INSNAME_" are not active.") Q
"RTN","IBCNEUT3",112,0)
 . ; Quit with an error if no Payer is found for these ins cos
"RTN","IBCNEUT3",113,0)
 . I $O(PAYID(""))="" S SYMIEN=$$ERROR^IBCNEUT8("B4","Insurance company "_INSNAME_" is not linked to a Payer.") Q
"RTN","IBCNEUT3",114,0)
 . ; Quit with an error if more than one Payer found
"RTN","IBCNEUT3",115,0)
 . I $O(PAYID(""))'=$O(PAYID(""),-1) S SYMIEN=$$ERROR^IBCNEUT8("B3","There are multiple Insurance companies named "_INSNAME_" in the Insurance Company file that are linked to more than one Payer",.PAYID),PAYID="" Q
"RTN","IBCNEUT3",116,0)
 . ; Validate the found unique Payer
"RTN","IBCNEUT3",117,0)
 . D VALID^IBCNEUT4(PAYID($O(PAYID(""))),.PAYIEN,.PAYID,.SYMIEN)
"RTN","IBCNEUT3",118,0)
 ;
"RTN","IBCNEUT3",119,0)
 ; If no exact ins co name match was found, check AutoMatch file
"RTN","IBCNEUT3",120,0)
 ; No need to filter out inactives as the AMLOOK will handle it
"RTN","IBCNEUT3",121,0)
 I $$AMLOOK^IBCNEUT1(INSNAME,1,.NAMEARR) D  I $D(INSIEN) G EXIT
"RTN","IBCNEUT3",122,0)
 . N NAME
"RTN","IBCNEUT3",123,0)
 . ; Based on the array of ins cos returned by the AutoMatch
"RTN","IBCNEUT3",124,0)
 . ; build an array of ins co IENs that they point to
"RTN","IBCNEUT3",125,0)
 . S NAME="" F  S NAME=$O(NAMEARR(NAME)) Q:NAME=""  D INSIEN^IBCNEUT8($$TRIM^XLFSTR(NAME),.INSIEN)
"RTN","IBCNEUT3",126,0)
 . ; If nothing found in the Insurance Co x-ref, quit w/o validation
"RTN","IBCNEUT3",127,0)
 . I '$D(INSIEN) Q
"RTN","IBCNEUT3",128,0)
 . ; Check if there is more than one ins co IEN that matches
"RTN","IBCNEUT3",129,0)
 . ; the entered name, in which case exit with an error
"RTN","IBCNEUT3",130,0)
 . I $O(INSIEN(""))'=$O(INSIEN(""),-1) S SYMIEN=$$ERROR^IBCNEUT8("B2","Insurance company name "_INSNAME_" in the Insurance Buffer matched more than one insurance company in the Auto Match file",.NAMEARR) Q
"RTN","IBCNEUT3",131,0)
 . ; Validate the found unique ins co IEN
"RTN","IBCNEUT3",132,0)
 . D VALID^IBCNEUT4($O(INSIEN("")),.PAYIEN,.PAYID,.SYMIEN)
"RTN","IBCNEUT3",133,0)
 ;
"RTN","IBCNEUT3",134,0)
 ;  If the first two lookups failed, check the Ins Co Synonym file:
"RTN","IBCNEUT3",135,0)
 ; Retrieve all ins co IENs that match in the Synonym file
"RTN","IBCNEUT3",136,0)
 M INSIEN=^DIC(36,"C",INSNAME)
"RTN","IBCNEUT3",137,0)
 ;
"RTN","IBCNEUT3",138,0)
 ; If nothing found in the Synonym file, error out
"RTN","IBCNEUT3",139,0)
 I '$D(INSIEN) S SYMIEN=$$ERROR^IBCNEUT8("B1","Insurance company "_INSNAME_" could not be matched to a valid entry in the Insurance Company file.") G EXIT
"RTN","IBCNEUT3",140,0)
 ; Loop thru the ins co IENs that matched in the Synonym file
"RTN","IBCNEUT3",141,0)
 S INSIEN=0 F  S INSIEN=$O(INSIEN(INSIEN)) Q:'INSIEN  D
"RTN","IBCNEUT3",142,0)
 . N NAME
"RTN","IBCNEUT3",143,0)
 . ; Retrieve the ins co name for this IEN
"RTN","IBCNEUT3",144,0)
 . S NAME=$$TRIM^XLFSTR($P($G(^DIC(36,INSIEN,0)),U,1))
"RTN","IBCNEUT3",145,0)
 . I NAME'="" S NAMEARR(NAME)=""
"RTN","IBCNEUT3",146,0)
 ;
"RTN","IBCNEUT3",147,0)
 ; If more than one ins co name was found, error out
"RTN","IBCNEUT3",148,0)
 I $O(NAMEARR(""))'=$O(NAMEARR(""),-1) D  G EXIT
"RTN","IBCNEUT3",149,0)
 . S SYMIEN=$$ERROR^IBCNEUT8("B2","Insurance company name "_INSNAME_" in the Insurance Buffer matched more than one insurance company name in the Synonym cross-reference of the Insurance Company file",.NAMEARR)
"RTN","IBCNEUT3",150,0)
 ;
"RTN","IBCNEUT3",151,0)
 ; If there is one INSIEN - make sure it is ACTIVE
"RTN","IBCNEUT3",152,0)
 I $O(INSIEN(""))=$O(INSIEN(""),-1),'$$ACTIVE^IBCNEUT4($O(INSIEN(""))) S SYMIEN=$$ERROR^IBCNEUT8("B10","Insurance company "_INSNAME_" is not active.") G EXIT
"RTN","IBCNEUT3",153,0)
 ; Find Payers for these ins co IENs
"RTN","IBCNEUT3",154,0)
 D FINDPAY^IBCNEUT8(.INSIEN,.PAYID)
"RTN","IBCNEUT3",155,0)
 ;
"RTN","IBCNEUT3",156,0)
 ; There were Multiple INSIENs - if none exist ALL were INACTIVE
"RTN","IBCNEUT3",157,0)
 I '$D(INSIEN) S SYMIEN=$$ERROR^IBCNEUT8("B10","All insurance companies named "_INSNAME_" are not active."),PAYID="" G EXIT
"RTN","IBCNEUT3",158,0)
 ; If no Payer was found, error out
"RTN","IBCNEUT3",159,0)
 I $O(PAYID(""))="" S SYMIEN=$$ERROR^IBCNEUT8("B4","Insurance company "_$O(NAMEARR(""))_" is not linked to a Payer.") G EXIT
"RTN","IBCNEUT3",160,0)
 ; If multiple Payers were found, error out
"RTN","IBCNEUT3",161,0)
 I $O(PAYID(""))'=$O(PAYID(""),-1) S SYMIEN=$$ERROR^IBCNEUT8("B3","Insurance company "_$O(NAMEARR(""))_" is linked to more than one Payer",.PAYID),PAYID="" G EXIT
"RTN","IBCNEUT3",162,0)
 ; Validate the found unique Payer
"RTN","IBCNEUT3",163,0)
 D VALID^IBCNEUT4(PAYID($O(PAYID(""))),.PAYIEN,.PAYID,.SYMIEN)
"RTN","IBCNEUT3",164,0)
 ;
"RTN","IBCNEUT3",165,0)
EXIT ; Main function exit point
"RTN","IBCNEUT3",166,0)
 Q SYMIEN_U_PAYIEN_U_PAYID
"RTN","IBCNEUT3",167,0)
 ;
"RTN","IBCNEUT4")
0^16^B50167663^B50608524
"RTN","IBCNEUT4",1,0)
IBCNEUT4 ;DAOU/ESG - eIV MISC. UTILITIES ;17-JUN-2002
"RTN","IBCNEUT4",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,345,416**;21-MAR-94;Build 58
"RTN","IBCNEUT4",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEUT4",4,0)
 ;
"RTN","IBCNEUT4",5,0)
 ; Can't be called from the top
"RTN","IBCNEUT4",6,0)
 Q
"RTN","IBCNEUT4",7,0)
 ;
"RTN","IBCNEUT4",8,0)
 ;
"RTN","IBCNEUT4",9,0)
ACTIVE(INSDA) ; Is this insurance company currently active?  1:yes or 0:no
"RTN","IBCNEUT4",10,0)
 ; Insurance company name returned in the second piece.
"RTN","IBCNEUT4",11,0)
 ; Input:  INSDA - insurance company ien
"RTN","IBCNEUT4",12,0)
 NEW ACTFLG,INSDATA
"RTN","IBCNEUT4",13,0)
 S ACTFLG=0                                  ; default inactive
"RTN","IBCNEUT4",14,0)
 I '$G(INSDA) G ACTIVEX                      ; bad data passed in
"RTN","IBCNEUT4",15,0)
 S INSDATA=$G(^DIC(36,INSDA,0))              ; zero node of File 36
"RTN","IBCNEUT4",16,0)
 I INSDATA="" G ACTIVEX                      ; bad record
"RTN","IBCNEUT4",17,0)
 I $P(INSDATA,U,5) G ACTIVEX                 ; INACTIVE flag is true
"RTN","IBCNEUT4",18,0)
 I $P($G(^DIC(36,INSDA,5)),U,1) G ACTIVEX    ; SCHEDULED FOR DELETION flag is true
"RTN","IBCNEUT4",19,0)
 S ACTFLG=1                                  ; Otherwise, its active
"RTN","IBCNEUT4",20,0)
ACTIVEX ;
"RTN","IBCNEUT4",21,0)
 Q ACTFLG_U_$P($G(^DIC(36,+$G(INSDA),0)),U,1)
"RTN","IBCNEUT4",22,0)
 ;
"RTN","IBCNEUT4",23,0)
 ;
"RTN","IBCNEUT4",24,0)
EXCLUDE(NAME) ; This function determines if we should exclude the insurance
"RTN","IBCNEUT4",25,0)
 ; company based on the name.
"RTN","IBCNEUT4",26,0)
 ; This function returns 1 if we should exclude the insurance company.
"RTN","IBCNEUT4",27,0)
 ; This function returns 0 if we should not exclude it (i.e. include it)
"RTN","IBCNEUT4",28,0)
 ;
"RTN","IBCNEUT4",29,0)
 ; Initialize flag; default to not exclude it
"RTN","IBCNEUT4",30,0)
 NEW EXCL
"RTN","IBCNEUT4",31,0)
 S EXCL=0
"RTN","IBCNEUT4",32,0)
 ;
"RTN","IBCNEUT4",33,0)
 ; Screen out bad data
"RTN","IBCNEUT4",34,0)
 I $G(NAME)="" S EXCL=1 G EXCLUDX
"RTN","IBCNEUT4",35,0)
 ;
"RTN","IBCNEUT4",36,0)
 ; Screen out MEDICAID ins co
"RTN","IBCNEUT4",37,0)
 I NAME["MEDICAID" S EXCL=1
"RTN","IBCNEUT4",38,0)
EXCLUDX ;
"RTN","IBCNEUT4",39,0)
 Q EXCL
"RTN","IBCNEUT4",40,0)
 ;
"RTN","IBCNEUT4",41,0)
 ;
"RTN","IBCNEUT4",42,0)
CLEAR(DA,EDITED,FORCE) ; This procedure will clear the eIV status field from an
"RTN","IBCNEUT4",43,0)
 ; Insurance Buffer entry (pass in the internal entry number of the
"RTN","IBCNEUT4",44,0)
 ; buffer entry).  If the FORCE variable is not passed then the eIV
"RTN","IBCNEUT4",45,0)
 ; status will only be cleared if the existing status is an error status
"RTN","IBCNEUT4",46,0)
 ;
"RTN","IBCNEUT4",47,0)
 ; Parameters
"RTN","IBCNEUT4",48,0)
 ;        DA - required input parameter; buffer ien
"RTN","IBCNEUT4",49,0)
 ;    EDITED - optional output parameter; this will tell you if the
"RTN","IBCNEUT4",50,0)
 ;             buffer symbol was cleared
"RTN","IBCNEUT4",51,0)
 ;     FORCE - optional input parameter; if this is set to 1 then the
"RTN","IBCNEUT4",52,0)
 ;             eIV status field will be cleared regardless of the
"RTN","IBCNEUT4",53,0)
 ;             current status 
"RTN","IBCNEUT4",54,0)
 NEW DIE,DR,D,D0,DI,DIC,DISYS,DQ,X,%
"RTN","IBCNEUT4",55,0)
 I '$G(DA) G CLEARX
"RTN","IBCNEUT4",56,0)
 I '$D(FORCE) S FORCE=0
"RTN","IBCNEUT4",57,0)
 I 'FORCE,$$SYMBOL^IBCNBLL(DA)'="!" G CLEARX
"RTN","IBCNEUT4",58,0)
 S DIE=355.33,DR=".12///@"
"RTN","IBCNEUT4",59,0)
 D ^DIE
"RTN","IBCNEUT4",60,0)
 S EDITED=1
"RTN","IBCNEUT4",61,0)
CLEARX ;
"RTN","IBCNEUT4",62,0)
 Q
"RTN","IBCNEUT4",63,0)
 ;
"RTN","IBCNEUT4",64,0)
 ;
"RTN","IBCNEUT4",65,0)
INFO(IBBUFDA) ; Return original and current buffer data
"RTN","IBCNEUT4",66,0)
 ; This procedure will retrieve the following data from the buffer and
"RTN","IBCNEUT4",67,0)
 ; from the transmission queue file.  The buffer holds the current data
"RTN","IBCNEUT4",68,0)
 ; and the TQ file holds the original buffer data.
"RTN","IBCNEUT4",69,0)
 ; Input
"RTN","IBCNEUT4",70,0)
 ;    IBBUFDA - buffer internal entry number
"RTN","IBCNEUT4",71,0)
 ; Output
"RTN","IBCNEUT4",72,0)
 ;    a pieced string as follows
"RTN","IBCNEUT4",73,0)
 ;    [1]  Has this buffer entry been transmitted? 1/0
"RTN","IBCNEUT4",74,0)
 ;    [2]  Current buffer source of information (external)
"RTN","IBCNEUT4",75,0)
 ;    [3]  Current buffer source of information (internal)
"RTN","IBCNEUT4",76,0)
 ;    [4]  Current buffer insurance company name
"RTN","IBCNEUT4",77,0)
 ;    [5]  Current buffer group number
"RTN","IBCNEUT4",78,0)
 ;    [6]  Current buffer group name
"RTN","IBCNEUT4",79,0)
 ;    [7]  Current buffer subscriber ID
"RTN","IBCNEUT4",80,0)
 ;    [8]  Original buffer insurance company name
"RTN","IBCNEUT4",81,0)
 ;    [9]  Original buffer group number
"RTN","IBCNEUT4",82,0)
 ;   [10]  Original buffer group name
"RTN","IBCNEUT4",83,0)
 ;   [11]  Original buffer subscriber ID
"RTN","IBCNEUT4",84,0)
 ;
"RTN","IBCNEUT4",85,0)
 NEW IB0,IB20,IB40,IB60,DATA,RESPIEN,FOUND,TQIEN,TQDATA,TQDATA1,DISYS
"RTN","IBCNEUT4",86,0)
 S DATA=""
"RTN","IBCNEUT4",87,0)
 I '$G(IBBUFDA) G INFOX
"RTN","IBCNEUT4",88,0)
 I '$D(^IBA(355.33,IBBUFDA)) G INFOX
"RTN","IBCNEUT4",89,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0))
"RTN","IBCNEUT4",90,0)
 S IB20=$G(^IBA(355.33,IBBUFDA,20))
"RTN","IBCNEUT4",91,0)
 S IB40=$G(^IBA(355.33,IBBUFDA,40))
"RTN","IBCNEUT4",92,0)
 S IB60=$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNEUT4",93,0)
 S $P(DATA,U,1)=0    ; default to not been transmitted
"RTN","IBCNEUT4",94,0)
 S $P(DATA,U,2)=$$EXTERNAL^DILFD(355.33,.03,"",$P(IB0,U,3))  ; source
"RTN","IBCNEUT4",95,0)
 S $P(DATA,U,3)=$P(IB0,U,3)     ; internal source
"RTN","IBCNEUT4",96,0)
 S $P(DATA,U,4)=$P(IB20,U,1)    ; insurance company name
"RTN","IBCNEUT4",97,0)
 S $P(DATA,U,5)=$P(IB40,U,3)    ; group number
"RTN","IBCNEUT4",98,0)
 S $P(DATA,U,6)=$P(IB40,U,2)    ; group name
"RTN","IBCNEUT4",99,0)
 S $P(DATA,U,7)=$P(IB60,U,4)    ; subscriber id
"RTN","IBCNEUT4",100,0)
 ;
"RTN","IBCNEUT4",101,0)
 ; Look at the response file and the transmission queue file.  Since
"RTN","IBCNEUT4",102,0)
 ; we're trying to get the original data look at the oldest data first.
"RTN","IBCNEUT4",103,0)
 S RESPIEN=0,FOUND=0
"RTN","IBCNEUT4",104,0)
 F  S RESPIEN=$O(^IBCN(365,"AF",IBBUFDA,RESPIEN)) Q:'RESPIEN  D  Q:FOUND
"RTN","IBCNEUT4",105,0)
 . S TQIEN=$P($G(^IBCN(365,RESPIEN,0)),U,5)
"RTN","IBCNEUT4",106,0)
 . I 'TQIEN Q
"RTN","IBCNEUT4",107,0)
 . S TQDATA=$G(^IBCN(365.1,TQIEN,0))
"RTN","IBCNEUT4",108,0)
 . S TQDATA1=$G(^IBCN(365.1,TQIEN,1))
"RTN","IBCNEUT4",109,0)
 . I TQDATA="" Q
"RTN","IBCNEUT4",110,0)
 . S $P(DATA,U,8)=$P(TQDATA1,U,2)    ; insurance company name
"RTN","IBCNEUT4",111,0)
 . S $P(DATA,U,9)=$P(TQDATA1,U,3)    ; group number
"RTN","IBCNEUT4",112,0)
 . S $P(DATA,U,10)=$P(TQDATA1,U,4)    ; group name
"RTN","IBCNEUT4",113,0)
 . S $P(DATA,U,11)=$P(TQDATA1,U,5)    ; subscriber id
"RTN","IBCNEUT4",114,0)
 . S FOUND=1                          ; Stop once we have some data
"RTN","IBCNEUT4",115,0)
 . Q
"RTN","IBCNEUT4",116,0)
 ;
"RTN","IBCNEUT4",117,0)
 I FOUND S $P(DATA,U,1)=1
"RTN","IBCNEUT4",118,0)
INFOX ;
"RTN","IBCNEUT4",119,0)
 Q DATA
"RTN","IBCNEUT4",120,0)
 ;
"RTN","IBCNEUT4",121,0)
 ;
"RTN","IBCNEUT4",122,0)
VALID(INSIEN,PAYIEN,PAYID,SYMIEN) ; Validate an Ins Co IEN
"RTN","IBCNEUT4",123,0)
 ; Input parameter: INSIEN - Ins co IEN, passed by value
"RTN","IBCNEUT4",124,0)
 ; Output parameters: PAYIEN, PAYID, SYMIEN, passed by reference
"RTN","IBCNEUT4",125,0)
 N APPDATA,APPIEN,INSNAME
"RTN","IBCNEUT4",126,0)
 ; Retrieve the Ins Co name
"RTN","IBCNEUT4",127,0)
 S INSNAME=$P($G(^DIC(36,INSIEN,0)),U,1)
"RTN","IBCNEUT4",128,0)
 I INSNAME="" S SYMIEN=$$ERROR^IBCNEUT8("B9","Insurance company IEN "_INSIEN_" doesn't have a name on file.") G VALIDX
"RTN","IBCNEUT4",129,0)
 ; Screen out MEDICAID ins co
"RTN","IBCNEUT4",130,0)
 I $$EXCLUDE(INSNAME) S SYMIEN=$$ERROR^IBCNEUT8("B11","Insurance company "_INSNAME_" contains MEDICAID in the name.  Electronic inquiries cannot be made to this insurance company.") G VALIDX
"RTN","IBCNEUT4",131,0)
 ; Retrieve the Payer IEN associated with this ins co
"RTN","IBCNEUT4",132,0)
 S PAYIEN=$P($G(^DIC(36,INSIEN,3)),U,10)
"RTN","IBCNEUT4",133,0)
 I PAYIEN="" S SYMIEN=$$ERROR^IBCNEUT8("B4","Insurance company "_INSNAME_" is not linked to a Payer.") G VALIDX
"RTN","IBCNEUT4",134,0)
 D VALPYR(INSNAME) ; Payer val'n
"RTN","IBCNEUT4",135,0)
VALIDX ;
"RTN","IBCNEUT4",136,0)
 Q
"RTN","IBCNEUT4",137,0)
 ;
"RTN","IBCNEUT4",138,0)
PAYER(PAYIEN) ;
"RTN","IBCNEUT4",139,0)
 ; Entry pt for Most Pop Payer (called by POP^IBCNEDE4)
"RTN","IBCNEUT4",140,0)
 N SYMIEN,PAYID
"RTN","IBCNEUT4",141,0)
 N APPDATA,APPIEN ; Set within tag VALPYR these variables are never
"RTN","IBCNEUT4",142,0)
 ;                  killed. Using tag VALID's method of NEWing variables
"RTN","IBCNEUT4",143,0)
 ;                  first will allow them to be killed appropriately.
"RTN","IBCNEUT4",144,0)
 N ARRAY ; This is an array that is set by ERROR^IBCNEUT8 but never
"RTN","IBCNEUT4",145,0)
 ;         killed.  When there is a most popular payer that is not
"RTN","IBCNEUT4",146,0)
 ;         eligible for inquiries, ARRAY would continue to grow.
"RTN","IBCNEUT4",147,0)
 S (SYMIEN,PAYID)=""
"RTN","IBCNEUT4",148,0)
 D VALPYR("")
"RTN","IBCNEUT4",149,0)
 Q SYMIEN_U_PAYID
"RTN","IBCNEUT4",150,0)
 ;
"RTN","IBCNEUT4",151,0)
VALPYR(INSNM) ;
"RTN","IBCNEUT4",152,0)
 ; Payer Val'n - note: PAYIEN (payer IEN) must be set
"RTN","IBCNEUT4",153,0)
 ; If INSNM="" val'n is for Most Pop Payer
"RTN","IBCNEUT4",154,0)
 N PAYNM
"RTN","IBCNEUT4",155,0)
 ;
"RTN","IBCNEUT4",156,0)
 S INSNM=$G(INSNM) ; Init variable if not passed
"RTN","IBCNEUT4",157,0)
 ; Retrieve the National ID(Payer ID) for this Payer IEN
"RTN","IBCNEUT4",158,0)
 S PAYID=$P($G(^IBE(365.12,PAYIEN,0)),U,2)
"RTN","IBCNEUT4",159,0)
 I PAYID="" S SYMIEN=$$ERROR^IBCNEUT8("B9","Payer IEN "_PAYIEN_" does not have a Payer.") Q
"RTN","IBCNEUT4",160,0)
 ; Retrieve payer name
"RTN","IBCNEUT4",161,0)
 S PAYNM=$P($G(^IBE(365.12,PAYIEN,0)),U,1)
"RTN","IBCNEUT4",162,0)
 ; Retrieve the IEN of the eIV Application
"RTN","IBCNEUT4",163,0)
 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PAYIEN)
"RTN","IBCNEUT4",164,0)
 I APPIEN="" S SYMIEN=$$ERROR^IBCNEUT8("B9","The eIV Payer Application has not been created for this site.") Q
"RTN","IBCNEUT4",165,0)
 ; Verify the existence of the application for this Payer
"RTN","IBCNEUT4",166,0)
 I '$D(^IBE(365.12,PAYIEN,1,APPIEN)) S SYMIEN=$$ERROR^IBCNEUT8("B7","Insurance company "_INSNM_" is linked to Payer "_PAYNM_" which is not set up to accept electronic insurance eligibility requests.") Q
"RTN","IBCNEUT4",167,0)
 ; Retrieve the eIV-specific application data for this Payer
"RTN","IBCNEUT4",168,0)
 S APPDATA=$G(^IBE(365.12,PAYIEN,1,APPIEN,0))
"RTN","IBCNEUT4",169,0)
 ; Check if the Payer doesn't have either an active national or an
"RTN","IBCNEUT4",170,0)
 ; active local connection and return one or, if applicable, BOTH errors
"RTN","IBCNEUT4",171,0)
 I '$P(APPDATA,U,3) S SYMIEN=$$ERROR^IBCNEUT8("B6","Insurance company "_INSNM_" is linked to Payer "_PAYNM_" which is not locally active for eIV.")
"RTN","IBCNEUT4",172,0)
 I '$P(APPDATA,U,2) S SYMIEN=$$ERROR^IBCNEUT8("B5","Insurance company "_INSNM_" is linked to Payer "_PAYNM_" which is not nationally active for eIV.")
"RTN","IBCNEUT4",173,0)
 ; Check if the Payer has been deactivated, if so report it
"RTN","IBCNEUT4",174,0)
 I $P(APPDATA,U,11) S SYMIEN=$$ERROR^IBCNEUT8("B14","Insurance company "_INSNM_" is linked to Payer "_PAYNM_" which has been deactivated as of "_$$FMTE^XLFDT($P(APPDATA,U,12),"5Z")_".")
"RTN","IBCNEUT4",175,0)
 Q
"RTN","IBCNEUT4",176,0)
 ;
"RTN","IBCNEUT4",177,0)
MULTNAME(TEXT,LIST) ; Function to return an error message with a list of multiple names
"RTN","IBCNEUT4",178,0)
 ; Input parameters:
"RTN","IBCNEUT4",179,0)
 ;  TEXT - Error text to display
"RTN","IBCNEUT4",180,0)
 ;  LIST - List of items, can be either a list of ins co
"RTN","IBCNEUT4",181,0)
 ;         names or National ID names
"RTN","IBCNEUT4",182,0)
 ; Output parameter: Function value - Formatted list of items in 1 string
"RTN","IBCNEUT4",183,0)
 N COLIST,I,NAME,TOOLONG
"RTN","IBCNEUT4",184,0)
 S NAME="",COLIST=TEXT,TOOLONG=0
"RTN","IBCNEUT4",185,0)
 F I=1:1 S NAME=$O(LIST(NAME)) Q:NAME=""  D  Q:TOOLONG
"RTN","IBCNEUT4",186,0)
 . ; Add this name to the list of found names
"RTN","IBCNEUT4",187,0)
 . I I=1 S COLIST=COLIST_": "_NAME
"RTN","IBCNEUT4",188,0)
 . E  S COLIST=COLIST_", "_NAME
"RTN","IBCNEUT4",189,0)
 . ; check if the list of items may cause a MAXSTRING error
"RTN","IBCNEUT4",190,0)
 . I $L(COLIST)<450 Q
"RTN","IBCNEUT4",191,0)
 . S COLIST=COLIST_" (Too many items to display)",TOOLONG=1
"RTN","IBCNEUT4",192,0)
 ;
"RTN","IBCNEUT4",193,0)
 Q COLIST_"."
"RTN","IBCNEUT4",194,0)
 ;
"RTN","IBCNEUT5")
0^7^B57334702^B60224642
"RTN","IBCNEUT5",1,0)
IBCNEUT5 ;DAOU/ALA - eIV MISC. UTILITIES ;20-JUN-2002
"RTN","IBCNEUT5",2,0)
 ;;2.0;INTEGRATED BILLING;**184,284,271,416**;21-MAR-94;Build 58
"RTN","IBCNEUT5",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEUT5",4,0)
 ;
"RTN","IBCNEUT5",5,0)
 ;**Program Description**
"RTN","IBCNEUT5",6,0)
 ;  This program contains some general utilities or functions
"RTN","IBCNEUT5",7,0)
 ;
"RTN","IBCNEUT5",8,0)
 Q
"RTN","IBCNEUT5",9,0)
 ;
"RTN","IBCNEUT5",10,0)
MSG(MGRP,XMSUB,XMTEXT,FROMFLAG,XMY) ;  Send a MailMan Message
"RTN","IBCNEUT5",11,0)
 ;
"RTN","IBCNEUT5",12,0)
 ;  Input Parameters
"RTN","IBCNEUT5",13,0)
 ;   MGRP = Mailgroup Name (optional)
"RTN","IBCNEUT5",14,0)
 ;   XMSUB = Subject Line (required)
"RTN","IBCNEUT5",15,0)
 ;   XMTEXT = Message Text Array Name in open format:  "MSG(" (required)
"RTN","IBCNEUT5",16,0)
 ;   FROMFLAG = Flag indicating from whom the message is sent (optional)
"RTN","IBCNEUT5",17,0)
 ;         false/undefined:  from the specific, non-human eIV user
"RTN","IBCNEUT5",18,0)
 ;                    true:  from the actual user (DUZ)
"RTN","IBCNEUT5",19,0)
 ;   XMY = recipients array; pass by reference (optional)
"RTN","IBCNEUT5",20,0)
 ;         The possible recipients are the sender, the Mail Group in the
"RTN","IBCNEUT5",21,0)
 ;         first parameter, and anybody else already defined in the XMY 
"RTN","IBCNEUT5",22,0)
 ;         array when this parameter is used.
"RTN","IBCNEUT5",23,0)
 ;
"RTN","IBCNEUT5",24,0)
 ; New MailMan variables and also some FileMan variables.  The FileMan
"RTN","IBCNEUT5",25,0)
 ; variables are used and not cleaned up when sending to external
"RTN","IBCNEUT5",26,0)
 ; internet addresses.
"RTN","IBCNEUT5",27,0)
 NEW DIFROM,XMDUZ,XMDUN,XMZ,XMMG,XMSTRIP,XMROU,XMYBLOB
"RTN","IBCNEUT5",28,0)
 NEW D0,D1,D2,DG,DIC,DICR,DISYS,DIW
"RTN","IBCNEUT5",29,0)
 NEW TMPSUB,TMPTEXT,TMPY,XX
"RTN","IBCNEUT5",30,0)
 ;
"RTN","IBCNEUT5",31,0)
 I $G(FROMFLAG),$G(DUZ) S XMDUZ=DUZ
"RTN","IBCNEUT5",32,0)
 E  S XMDUZ="eIV INTERFACE (IB)"
"RTN","IBCNEUT5",33,0)
 I $G(MGRP)'="" S XMY("G."_MGRP)=""
"RTN","IBCNEUT5",34,0)
 ; If no recipients are defined, send to postmaster
"RTN","IBCNEUT5",35,0)
 I '$D(XMY) S XMY(.5)=""
"RTN","IBCNEUT5",36,0)
 I $G(DUZ) S XMY(DUZ)=""
"RTN","IBCNEUT5",37,0)
 ; Store off subject, array reference and array of recipients
"RTN","IBCNEUT5",38,0)
 S TMPSUB=XMSUB,TMPTEXT=XMTEXT
"RTN","IBCNEUT5",39,0)
 M TMPY=XMY
"RTN","IBCNEUT5",40,0)
 D ^XMD
"RTN","IBCNEUT5",41,0)
 ;
"RTN","IBCNEUT5",42,0)
 ; Error logic
"RTN","IBCNEUT5",43,0)
 ; If there's an error message and the message was not originally sent
"RTN","IBCNEUT5",44,0)
 ; to the postmaster, then send a message to the postmaster with this
"RTN","IBCNEUT5",45,0)
 ; error message.
"RTN","IBCNEUT5",46,0)
 ;
"RTN","IBCNEUT5",47,0)
 I $D(XMMG),'$D(TMPY(.5)) D
"RTN","IBCNEUT5",48,0)
 . S XMY(.5)=""
"RTN","IBCNEUT5",49,0)
 . S XMTEXT=TMPTEXT,XMSUB="MailMan Error"
"RTN","IBCNEUT5",50,0)
 . ; Add XMMG error message as the first line of the message
"RTN","IBCNEUT5",51,0)
 . S XX=999999
"RTN","IBCNEUT5",52,0)
 . F  S XX=$O(@(XMTEXT_"XX)"),-1) Q:'XX  S @(XMTEXT_"XX+3)")=@(XMTEXT_"XX)")
"RTN","IBCNEUT5",53,0)
 . S @(XMTEXT_"1)")="   MailMan Error:  "_XMMG
"RTN","IBCNEUT5",54,0)
 . S @(XMTEXT_"2)")="Original Subject:  "_TMPSUB
"RTN","IBCNEUT5",55,0)
 . S @(XMTEXT_"3)")="------Original Message------"
"RTN","IBCNEUT5",56,0)
 . D ^XMD
"RTN","IBCNEUT5",57,0)
 . Q
"RTN","IBCNEUT5",58,0)
 Q
"RTN","IBCNEUT5",59,0)
 ;
"RTN","IBCNEUT5",60,0)
 ;
"RTN","IBCNEUT5",61,0)
BFEXIST(DFN,INSNAME) ; Function returns 1 if an Entered Ins Buffer File 
"RTN","IBCNEUT5",62,0)
 ; entry exists with the same DFN and INSNAME, otherwise it returns a 0
"RTN","IBCNEUT5",63,0)
 ;
"RTN","IBCNEUT5",64,0)
 ; DFN - Patient DFN
"RTN","IBCNEUT5",65,0)
 ; INSNAME - Insurance Company Name File 36 - Field .01
"RTN","IBCNEUT5",66,0)
 ;
"RTN","IBCNEUT5",67,0)
 NEW EXIST,IEN
"RTN","IBCNEUT5",68,0)
 S EXIST=0
"RTN","IBCNEUT5",69,0)
 S INSNAME=$$TRIM^XLFSTR(INSNAME)  ; trimmed
"RTN","IBCNEUT5",70,0)
 I ('DFN)!(INSNAME="") G BFEXIT
"RTN","IBCNEUT5",71,0)
 ;
"RTN","IBCNEUT5",72,0)
 S IEN=0
"RTN","IBCNEUT5",73,0)
 F  S IEN=$O(^IBA(355.33,"C",DFN,IEN)) Q:'IEN!EXIST  D
"RTN","IBCNEUT5",74,0)
 .  ; Quit if status is NOT 'Entered'
"RTN","IBCNEUT5",75,0)
 .  I $P($G(^IBA(355.33,IEN,0)),U,4)'="E" Q
"RTN","IBCNEUT5",76,0)
 .  ; Quit if Ins Buffer Ins Co Name (trimmed) is NOT EQUAL to 
"RTN","IBCNEUT5",77,0)
 .  ;  the Ins Co Name parameter (trimmed)
"RTN","IBCNEUT5",78,0)
 .  I $$TRIM^XLFSTR($P($G(^IBA(355.33,IEN,20)),U))'=INSNAME Q
"RTN","IBCNEUT5",79,0)
 .  ; Match found
"RTN","IBCNEUT5",80,0)
 .  S EXIST=1
"RTN","IBCNEUT5",81,0)
 .  Q
"RTN","IBCNEUT5",82,0)
BFEXIT ;
"RTN","IBCNEUT5",83,0)
 Q EXIST
"RTN","IBCNEUT5",84,0)
 ;
"RTN","IBCNEUT5",85,0)
 ;
"RTN","IBCNEUT5",86,0)
MGRP() ; Get the Mail Group for the eIV Interface - IB Site Parameters (51.04)
"RTN","IBCNEUT5",87,0)
 Q $$GET1^DIQ(350.9,"1,",51.04,"E")
"RTN","IBCNEUT5",88,0)
 ;
"RTN","IBCNEUT5",89,0)
 ;
"RTN","IBCNEUT5",90,0)
PYRAPP(APP,PAYERIEN) ; Get the Payer Application multiple IEN
"RTN","IBCNEUT5",91,0)
 ; based on the payer application name and payer ien.
"RTN","IBCNEUT5",92,0)
 ;
"RTN","IBCNEUT5",93,0)
 NEW MIEN,APPIEN,DISYS
"RTN","IBCNEUT5",94,0)
 S MIEN=""
"RTN","IBCNEUT5",95,0)
 S APPIEN=$$FIND1^DIC(365.13,,"X",APP,"B")
"RTN","IBCNEUT5",96,0)
 I 'APPIEN G PYRAPPX
"RTN","IBCNEUT5",97,0)
 I '$G(PAYERIEN) G PYRAPPX
"RTN","IBCNEUT5",98,0)
 S MIEN=$O(^IBE(365.12,PAYERIEN,1,"B",APPIEN,""))
"RTN","IBCNEUT5",99,0)
PYRAPPX ;
"RTN","IBCNEUT5",100,0)
 Q MIEN
"RTN","IBCNEUT5",101,0)
 ;
"RTN","IBCNEUT5",102,0)
 ;
"RTN","IBCNEUT5",103,0)
ACTAPP(IEN) ; Active payer applications
"RTN","IBCNEUT5",104,0)
 ; This function will return 1 if any of the payer applications for 
"RTN","IBCNEUT5",105,0)
 ; this payer (being passed in by the payer IEN) are NOT deactivated.
"RTN","IBCNEUT5",106,0)
 ; This should not be confused with the other payer application fields
"RTN","IBCNEUT5",107,0)
 ; such as national active or local active.  The deactivated field is
"RTN","IBCNEUT5",108,0)
 ; the .11 field in the payer application multiple.
"RTN","IBCNEUT5",109,0)
 ;
"RTN","IBCNEUT5",110,0)
 ; This function is invoked by the FileMan data dictionary as a screen
"RTN","IBCNEUT5",111,0)
 ; for the Payer field (#3.1) in the Insurance company file (#36).
"RTN","IBCNEUT5",112,0)
 ;
"RTN","IBCNEUT5",113,0)
 NEW APPIEN,ACTAPP,APPDATA
"RTN","IBCNEUT5",114,0)
 S APPIEN=0,ACTAPP="",IEN=+$G(IEN)
"RTN","IBCNEUT5",115,0)
 F  S APPIEN=$O(^IBE(365.12,IEN,1,APPIEN)) Q:'APPIEN  D  Q:ACTAPP
"RTN","IBCNEUT5",116,0)
 . S APPDATA=$G(^IBE(365.12,IEN,1,APPIEN,0))
"RTN","IBCNEUT5",117,0)
 . I $P(APPDATA,U,11) Q
"RTN","IBCNEUT5",118,0)
 . I $P(APPDATA,U,12) Q
"RTN","IBCNEUT5",119,0)
 . S ACTAPP=1
"RTN","IBCNEUT5",120,0)
 . Q
"RTN","IBCNEUT5",121,0)
 Q ACTAPP
"RTN","IBCNEUT5",122,0)
 ;
"RTN","IBCNEUT5",123,0)
ADDTQ(DFN,PAYER,SRVDT,FDAYS,ANYPAYER) ; Function  - Returns flag (0/1)
"RTN","IBCNEUT5",124,0)
 ; 1 - TQ File entry can be added as the service date for the patient 
"RTN","IBCNEUT5",125,0)
 ;     and payer >= MAX TQ service date + Freshness Days
"RTN","IBCNEUT5",126,0)
 ;     If ANYPAYER is set, check for recent entries for this patient and
"RTN","IBCNEUT5",127,0)
 ;     any payer
"RTN","IBCNEUT5",128,0)
 ; 0 - otherwise
"RTN","IBCNEUT5",129,0)
 ;
"RTN","IBCNEUT5",130,0)
 ; Input:
"RTN","IBCNEUT5",131,0)
 ;  DFN   - Patient DFN (File #2)
"RTN","IBCNEUT5",132,0)
 ;  PAYER - Payer IEN (File #365.12)
"RTN","IBCNEUT5",133,0)
 ;  SRVDT - Service dt for potential TQ entry
"RTN","IBCNEUT5",134,0)
 ;  FDAYS - Freshness Days param (by extract type)
"RTN","IBCNEUT5",135,0)
 ;  ANYPAYER - NUMERIC>0 if checking for any payer
"RTN","IBCNEUT5",136,0)
 ;
"RTN","IBCNEUT5",137,0)
 N ADDTQ,MAXDT
"RTN","IBCNEUT5",138,0)
 ; 
"RTN","IBCNEUT5",139,0)
 S ADDTQ=1
"RTN","IBCNEUT5",140,0)
 I ($G(DFN)="")!($G(SRVDT)="")!($G(FDAYS)="") S ADDTQ=0 G ADDTQX
"RTN","IBCNEUT5",141,0)
 I '$G(ANYPAYER),$G(PAYER)="" S ADDTQ=0 G ADDTQX
"RTN","IBCNEUT5",142,0)
 ; MAX TQ Service Date
"RTN","IBCNEUT5",143,0)
 S MAXDT=$$TQMAXSV(DFN,$G(PAYER),$G(ANYPAYER))
"RTN","IBCNEUT5",144,0)
 I MAXDT="" G ADDTQX
"RTN","IBCNEUT5",145,0)
 ; If Service Date < Max Service Date + Freshness Days, do not add
"RTN","IBCNEUT5",146,0)
 I SRVDT'>$$FMADD^XLFDT(MAXDT,FDAYS) S ADDTQ=0
"RTN","IBCNEUT5",147,0)
 ;
"RTN","IBCNEUT5",148,0)
ADDTQX ; ADDTQ exit pt
"RTN","IBCNEUT5",149,0)
 Q ADDTQ
"RTN","IBCNEUT5",150,0)
 ;
"RTN","IBCNEUT5",151,0)
TQUPDSV(DFN,PAYER,SRVDT) ; Update service dates & freshness dates for TQ
"RTN","IBCNEUT5",152,0)
 ; entries awaiting transmission
"RTN","IBCNEUT5",153,0)
 ;
"RTN","IBCNEUT5",154,0)
 N SVDT,STS,ERACT,CSRVDT,CSPAN,SPAN,DA,HL7IEN,RIEN
"RTN","IBCNEUT5",155,0)
 ;
"RTN","IBCNEUT5",156,0)
 I ($G(DFN)="")!($G(PAYER)="")!($G(SRVDT)="") G TQUPDSVX
"RTN","IBCNEUT5",157,0)
 ;
"RTN","IBCNEUT5",158,0)
 ; Loop thru all inquiries to be transmitted to update the service date
"RTN","IBCNEUT5",159,0)
 ; Statuses:  Ready to Transmit(1), Hold(4) and Retry(6)
"RTN","IBCNEUT5",160,0)
 S SVDT=""
"RTN","IBCNEUT5",161,0)
 F  S SVDT=$O(^IBCN(365.1,"AD",DFN,PAYER,SVDT)) Q:'SVDT  D
"RTN","IBCNEUT5",162,0)
 . S DA=0
"RTN","IBCNEUT5",163,0)
 . F  S DA=$O(^IBCN(365.1,"AD",DFN,PAYER,SVDT,DA)) Q:'DA  D
"RTN","IBCNEUT5",164,0)
 .. ; TQ Status
"RTN","IBCNEUT5",165,0)
 .. S STS=$P($G(^IBCN(365.1,DA,0)),U,4)
"RTN","IBCNEUT5",166,0)
 .. ; Check to see if record is still scheduled to be transmitted.
"RTN","IBCNEUT5",167,0)
 .. ; If so, update the service date if the new service date and current
"RTN","IBCNEUT5",168,0)
 .. ; service date are both in the past or future and the new service
"RTN","IBCNEUT5",169,0)
 .. ; date is closer to Today.  Also, if the current service date is in
"RTN","IBCNEUT5",170,0)
 .. ; the future and the new service date is in the past, update with the
"RTN","IBCNEUT5",171,0)
 .. ; new service date.
"RTN","IBCNEUT5",172,0)
 .. ; If not Ready to Transmit(1), Hold(4) and Retry(6), quit
"RTN","IBCNEUT5",173,0)
 .. I STS'=1,STS'=4,STS'=6 Q
"RTN","IBCNEUT5",174,0)
 .. ; If Hold and last Response returned Error Action - Please resubmit
"RTN","IBCNEUT5",175,0)
 .. ; Original Transaction (P) - do not update
"RTN","IBCNEUT5",176,0)
 .. I STS=4 S ERACT="" D  I ERACT="P" Q
"RTN","IBCNEUT5",177,0)
 .. . ; Last msg sent
"RTN","IBCNEUT5",178,0)
 .. . S HL7IEN=$O(^IBCN(365.1,DA,2," "),-1) Q:'HL7IEN
"RTN","IBCNEUT5",179,0)
 .. . ; Assoc eIV Response IEN
"RTN","IBCNEUT5",180,0)
 .. . S RIEN=$P($G(^IBCN(365.1,DA,2,HL7IEN,0)),U,3) Q:'RIEN
"RTN","IBCNEUT5",181,0)
 .. . ; Error Action IEN (365.018)
"RTN","IBCNEUT5",182,0)
 .. . S ERACT=$P($G(^IBCN(365,RIEN,1)),U,15) Q:'ERACT
"RTN","IBCNEUT5",183,0)
 .. . S ERACT=$P($G(^IBE(365.018,ERACT,0)),U,1)
"RTN","IBCNEUT5",184,0)
 .. ;
"RTN","IBCNEUT5",185,0)
 .. ; Current service date for TQ entry
"RTN","IBCNEUT5",186,0)
 .. S CSRVDT=$P($G(^IBCN(365.1,DA,0)),U,12)
"RTN","IBCNEUT5",187,0)
 .. ; If current service date is today (DT), do not update
"RTN","IBCNEUT5",188,0)
 .. I CSRVDT=DT Q
"RTN","IBCNEUT5",189,0)
 .. ; If new service date is in the future and current service date is in
"RTN","IBCNEUT5",190,0)
 .. ; the past, do not update
"RTN","IBCNEUT5",191,0)
 .. I SRVDT>DT,CSRVDT<DT Q
"RTN","IBCNEUT5",192,0)
 .. ; If new service date is today, update
"RTN","IBCNEUT5",193,0)
 .. I SRVDT=DT D SAVETQ^IBCNEUT2(DA,SRVDT),SAVFRSH(DA,+$$FMDIFF^XLFDT(SRVDT,CSRVDT,1)) Q
"RTN","IBCNEUT5",194,0)
 .. ; If both current and new service dates are in the past or future,
"RTN","IBCNEUT5",195,0)
 .. ; only update, when new service date is closer to today (DT).
"RTN","IBCNEUT5",196,0)
 .. I ((CSRVDT<DT)&(SRVDT<DT))!((CSRVDT>DT)&(SRVDT>DT)) D  Q
"RTN","IBCNEUT5",197,0)
 .. . S CSPAN=$$FMDIFF^XLFDT(CSRVDT,DT,1),SPAN=$$FMDIFF^XLFDT(SRVDT,DT,1)
"RTN","IBCNEUT5",198,0)
 .. . I CSPAN<0 S CSPAN=-CSPAN
"RTN","IBCNEUT5",199,0)
 .. . I SPAN<0 S SPAN=-SPAN
"RTN","IBCNEUT5",200,0)
 .. . I SPAN<CSPAN D SAVETQ^IBCNEUT2(DA,SRVDT),SAVFRSH(DA,+$$FMDIFF^XLFDT(SRVDT,CSRVDT,1))
"RTN","IBCNEUT5",201,0)
 .. ; If new service date is in the past and current service date is in
"RTN","IBCNEUT5",202,0)
 .. ; the future, update
"RTN","IBCNEUT5",203,0)
 .. I SRVDT<CSRVDT D SAVETQ^IBCNEUT2(DA,SRVDT),SAVFRSH(DA,+$$FMDIFF^XLFDT(SRVDT,CSRVDT,1)) Q
"RTN","IBCNEUT5",204,0)
 .. Q
"RTN","IBCNEUT5",205,0)
TQUPDSVX ; TQUPDSV exit pt
"RTN","IBCNEUT5",206,0)
 Q
"RTN","IBCNEUT5",207,0)
 ;
"RTN","IBCNEUT5",208,0)
TQMAXSV(DFN,PAYER,ANYPAYER) ; Returns MAX(TQ Service Date) for Patient & Payer
"RTN","IBCNEUT5",209,0)
 ; Input: 
"RTN","IBCNEUT5",210,0)
 ;  DFN     - Patient DFN (2)
"RTN","IBCNEUT5",211,0)
 ;  PAYER   - Payer IEN (365.12) (If no PAYER passed in, check them all)
"RTN","IBCNEUT5",212,0)
 ;  ANYPAYER - NUMERIC>0 if checking for any payer
"RTN","IBCNEUT5",213,0)
 ; Output:
"RTN","IBCNEUT5",214,0)
 ;  TQMAXSV - MAX (most recent) service date from TQ entry for Patient &
"RTN","IBCNEUT5",215,0)
 ;            Payer
"RTN","IBCNEUT5",216,0)
 ;
"RTN","IBCNEUT5",217,0)
 N TQMAXSV
"RTN","IBCNEUT5",218,0)
 S TQMAXSV=""
"RTN","IBCNEUT5",219,0)
 I $G(DFN)="" G TQMAXSVX
"RTN","IBCNEUT5",220,0)
 I '$G(ANYPAYER) S TQMAXSV=$O(^IBCN(365.1,"AD",DFN,PAYER,""),-1) G TQMAXSVX
"RTN","IBCNEUT5",221,0)
 ;
"RTN","IBCNEUT5",222,0)
 N PIEN,LASTBYP
"RTN","IBCNEUT5",223,0)
 S PIEN="" F  S PIEN=$O(^IBCN(365.1,"AD",DFN,PIEN)) Q:PIEN=""  D
"RTN","IBCNEUT5",224,0)
 .S LASTBYP=$O(^IBCN(365.1,"AD",DFN,PIEN,""),-1)
"RTN","IBCNEUT5",225,0)
 .Q:'LASTBYP   ; Just in case
"RTN","IBCNEUT5",226,0)
 .I LASTBYP>TQMAXSV S TQMAXSV=LASTBYP
"RTN","IBCNEUT5",227,0)
 ;
"RTN","IBCNEUT5",228,0)
TQMAXSVX ; TQMAXSV exit pt
"RTN","IBCNEUT5",229,0)
 Q TQMAXSV
"RTN","IBCNEUT5",230,0)
 ;
"RTN","IBCNEUT5",231,0)
SAVFRSH(TQIEN,DTDIFF) ; Update TQ freshness date based on service date diff
"RTN","IBCNEUT5",232,0)
 ;
"RTN","IBCNEUT5",233,0)
 N DIE,DA,FDT,DR,D,D0,DI,DIC,DQ,X
"RTN","IBCNEUT5",234,0)
 I $G(TQIEN)="" Q
"RTN","IBCNEUT5",235,0)
 S FDT=$P($G(^IBCN(365.1,TQIEN,0)),U,17)
"RTN","IBCNEUT5",236,0)
 ; Note - will only update if FDT > 0.
"RTN","IBCNEUT5",237,0)
 S FDT=$$FMADD^XLFDT(FDT,+DTDIFF)
"RTN","IBCNEUT5",238,0)
 S DIE="^IBCN(365.1,",DA=TQIEN,DR=".17////"_FDT
"RTN","IBCNEUT5",239,0)
 D ^DIE
"RTN","IBCNEUT5",240,0)
 Q
"RTN","IBCNEUT5",241,0)
 ;
"RTN","IBCNEUT8")
0^56^B5629329^B7469707
"RTN","IBCNEUT8",1,0)
IBCNEUT8 ;DAOU/AM - eIV MISC. UTILITIES ;12-JUN-2002
"RTN","IBCNEUT8",2,0)
 ;;2.0;INTEGRATED BILLING;**184,416**;21-MAR-94;Build 58
"RTN","IBCNEUT8",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEUT8",4,0)
 ;
"RTN","IBCNEUT8",5,0)
 ; This routine includes subroutines originally included in IBCNEUT3
"RTN","IBCNEUT8",6,0)
 ; and referenced by IBCNEUT3 and IBCNEUT4.
"RTN","IBCNEUT8",7,0)
 ;
"RTN","IBCNEUT8",8,0)
 ; INSIEN returns an array of matching insurance IENs based upon the
"RTN","IBCNEUT8",9,0)
 ; provided Insurance Name.
"RTN","IBCNEUT8",10,0)
 ;
"RTN","IBCNEUT8",11,0)
 ; FINDPAY returns the National IDs for all provided active insurance
"RTN","IBCNEUT8",12,0)
 ; companies.
"RTN","IBCNEUT8",13,0)
 ;
"RTN","IBCNEUT8",14,0)
 ; ERROR returns the IEN of the symbol mnemonice passed to it and updates
"RTN","IBCNEUT8",15,0)
 ; an array of items to display, if passed.
"RTN","IBCNEUT8",16,0)
 ; 
"RTN","IBCNEUT8",17,0)
 ; Can't be called from the top
"RTN","IBCNEUT8",18,0)
 Q
"RTN","IBCNEUT8",19,0)
 ;
"RTN","IBCNEUT8",20,0)
 ;
"RTN","IBCNEUT8",21,0)
INSIEN(INSNAME,INSIEN) ; Subroutine to find all ins co IENs
"RTN","IBCNEUT8",22,0)
 ; matching a given ins co name
"RTN","IBCNEUT8",23,0)
 ; Input parameter: INSNAME - Ins co name to find IENs for
"RTN","IBCNEUT8",24,0)
 ; Output parameter: INSIEN - array of ins co IENs that
"RTN","IBCNEUT8",25,0)
 ;   match the passed ins co name, passed by reference
"RTN","IBCNEUT8",26,0)
 ;   If the array is defined at the time this subroutine is called,
"RTN","IBCNEUT8",27,0)
 ;   then it will add to the data that pre-exists in the array
"RTN","IBCNEUT8",28,0)
 ;
"RTN","IBCNEUT8",29,0)
 N NAME
"RTN","IBCNEUT8",30,0)
 ; Loop through the ins co names starting with a space (" ")
"RTN","IBCNEUT8",31,0)
 ; looking for matching names
"RTN","IBCNEUT8",32,0)
 S NAME=" " F  S NAME=$O(^DIC(36,"B",NAME)) Q:$E(NAME,1)'=" "  D
"RTN","IBCNEUT8",33,0)
 . I $$TRIM^XLFSTR(NAME)=INSNAME M INSIEN=^DIC(36,"B",NAME)
"RTN","IBCNEUT8",34,0)
 . Q
"RTN","IBCNEUT8",35,0)
 ;
"RTN","IBCNEUT8",36,0)
 ; Retrieve the ins co names from the Ins Buffer
"RTN","IBCNEUT8",37,0)
 ; starting with the entry prior to the ins co name in
"RTN","IBCNEUT8",38,0)
 ; the Buffer and look for ins co name matches
"RTN","IBCNEUT8",39,0)
 S NAME=$O(^DIC(36,"B",INSNAME),-1)
"RTN","IBCNEUT8",40,0)
 F  S NAME=$O(^DIC(36,"B",NAME)) Q:$E(NAME,1,$L(INSNAME))'=INSNAME  D
"RTN","IBCNEUT8",41,0)
 . I $$TRIM^XLFSTR(NAME)=INSNAME M INSIEN=^DIC(36,"B",NAME)
"RTN","IBCNEUT8",42,0)
 . Q
"RTN","IBCNEUT8",43,0)
 ;
"RTN","IBCNEUT8",44,0)
 Q
"RTN","IBCNEUT8",45,0)
 ;
"RTN","IBCNEUT8",46,0)
FINDPAY(INSIEN,PAYID) ; Find National IDs for an array of ins co IENs
"RTN","IBCNEUT8",47,0)
 ; Input parameter: INSIEN - Array of ins co IENs
"RTN","IBCNEUT8",48,0)
 ; Output parameter: PAYID - Array of National IDs
"RTN","IBCNEUT8",49,0)
 N PAYIEN,IEN
"RTN","IBCNEUT8",50,0)
 S IEN=0 F  S IEN=$O(INSIEN(IEN)) Q:'IEN  D
"RTN","IBCNEUT8",51,0)
 . ; Discard INACTIVE ins companies from the array
"RTN","IBCNEUT8",52,0)
 . I '$$ACTIVE^IBCNEUT4(IEN) K INSIEN(IEN) Q
"RTN","IBCNEUT8",53,0)
 . ; Retrieve the Payer IEN for this ins co IEN
"RTN","IBCNEUT8",54,0)
 . S PAYIEN=$P($G(^DIC(36,IEN,3)),U,10)
"RTN","IBCNEUT8",55,0)
 . I 'PAYIEN Q
"RTN","IBCNEUT8",56,0)
 . ; Retrieve the National ID for this ins co IEN
"RTN","IBCNEUT8",57,0)
 . S PAYID=$P($G(^IBE(365.12,PAYIEN,0)),U,2)
"RTN","IBCNEUT8",58,0)
 . I PAYID'="" S PAYID(PAYID)=IEN
"RTN","IBCNEUT8",59,0)
 Q
"RTN","IBCNEUT8",60,0)
 ;
"RTN","IBCNEUT8",61,0)
ERROR(ERRCODE,ERRTEXT,MULTI) ; Function to return the IEN of the Symbol
"RTN","IBCNEUT8",62,0)
 ; file entry and error text - also adds error data to ARRAY
"RTN","IBCNEUT8",63,0)
 ; Input parameters: ERRCODE - Symbol mnemonic ("B1", "B2", etc)
"RTN","IBCNEUT8",64,0)
 ;                   ERRTEXT - Optional additional error text
"RTN","IBCNEUT8",65,0)
 ;                   MULTI   - Optional array of items to display
"RTN","IBCNEUT8",66,0)
 ; Output parameters: ARRAY - Updated by this function
"RTN","IBCNEUT8",67,0)
 ;     Function value - Symbol IEN
"RTN","IBCNEUT8",68,0)
 NEW %,DISYS,DIW,DIWI,DIWT,DIWTC,DIWX,DN,ERRARR,I,SYMIEN,Z
"RTN","IBCNEUT8",69,0)
 ; If an optional array of items to display was passed in, add it
"RTN","IBCNEUT8",70,0)
 I $G(ERRTEXT)'="",$D(MULTI) S ERRTEXT=$$MULTNAME^IBCNEUT4(ERRTEXT,.MULTI)
"RTN","IBCNEUT8",71,0)
 S SYMIEN=$$FIND1^DIC(365.15,,"X",$G(ERRCODE))
"RTN","IBCNEUT8",72,0)
 ; call an IB utility to parse ERRTEXT into lines of acceptable length
"RTN","IBCNEUT8",73,0)
 D FSTRNG^IBJU1($G(ERRTEXT),70,.ERRARR)
"RTN","IBCNEUT8",74,0)
 ; Update the line counter in the error array
"RTN","IBCNEUT8",75,0)
 S ARRAY=$G(ARRAY)+1
"RTN","IBCNEUT8",76,0)
 ; Merge the error text array returned by the IB utility in
"RTN","IBCNEUT8",77,0)
 M ARRAY(ARRAY)=ERRARR
"RTN","IBCNEUT8",78,0)
 ; Reset the error-specific node of the error array to follow the
"RTN","IBCNEUT8",79,0)
 ; published input/output parameter format
"RTN","IBCNEUT8",80,0)
 S ARRAY(ARRAY)=SYMIEN_U_ERRARR
"RTN","IBCNEUT8",81,0)
 Q SYMIEN
"RTN","IBCNEUT8",82,0)
 ;
"RTN","IBCNICB")
0^73^B106011881^B105382395
"RTN","IBCNICB",1,0)
IBCNICB ;ALB/SBW - Update utilities for the ICB interface ;1 SEP 2009
"RTN","IBCNICB",2,0)
 ;;2.0;INTEGRATED BILLING;**413,416**;21-MAR-94;Build 58
"RTN","IBCNICB",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNICB",4,0)
 ;
"RTN","IBCNICB",5,0)
ACCEPAPI(RESULT,IBBUFDA,DFN,IBINSDA,IBGRPDA,IBPOLDA,IBMVINS,IBMVGRP,IBMVPOL,IBNEWINS,IBNEWGRP,IBNEWPOL,IVMREPTR,IBELIG) ;
"RTN","IBCNICB",6,0)
 ;Provides API to be called by the Insurance Capture Buffer (ICB) 
"RTN","IBCNICB",7,0)
 ;application to move buffer data in Insurance Files then cleanup
"RTN","IBCNICB",8,0)
 ;
"RTN","IBCNICB",9,0)
 ;The call to PROCESS^IBCNBAR and embedded Sub calls are updated to 
"RTN","IBCNICB",10,0)
 ;provide data in the RESULT parameter and suppress user I/O when 
"RTN","IBCNICB",11,0)
 ;function is called by ICB.
"RTN","IBCNICB",12,0)
 ;Input
"RTN","IBCNICB",13,0)
 ;  IBBUFDA  - INSURANCE BUFFER (#355.33) file internal entry number
"RTN","IBCNICB",14,0)
 ;             (IEN) (Required)
"RTN","IBCNICB",15,0)
 ;  DFN      - PATIENT (#2) file IEN (Required)
"RTN","IBCNICB",16,0)
 ;  IBINSDA  - INSURANCE COMPANY (#36) File IEN if not adding new entry
"RTN","IBCNICB",17,0)
 ;             (Optional)
"RTN","IBCNICB",18,0)
 ;  IBGRPDA  - GROUP INSURANCE PLAN (#355.3) File IEN if not adding new
"RTN","IBCNICB",19,0)
 ;             entry (Optional)
"RTN","IBCNICB",20,0)
 ;  IBPOLDA  - INSURANCE TYPE (#2.312) sub-file of PATIENT (#2) IEN if
"RTN","IBCNICB",21,0)
 ;             not adding new entry (Optional)
"RTN","IBCNICB",22,0)
 ;  IBMVINS  - Type for INSURANCE (Required)
"RTN","IBCNICB",23,0)
 ;     1=Merge, 2=Overwrite, 3=Replace, 4=Unsupported
"RTN","IBCNICB",24,0)
 ;  IBMVGRP  - Type for GROUP (Optional)
"RTN","IBCNICB",25,0)
 ;     1=Merge, 2=Overwrite, 3=Replace, 4=Unsupported
"RTN","IBCNICB",26,0)
 ;  IBMVPOL  - Type for POLICY (Optional)
"RTN","IBCNICB",27,0)
 ;     1=Merge, 2=Overwrite, 3=Replace, 4=Unsupported
"RTN","IBCNICB",28,0)
 ;  IBNEWINS - Add new INSURANCE COMPANY flag (non-zero means add)
"RTN","IBCNICB",29,0)
 ;  IBNEWGRP - Add new GROUP INSURANCE PLAN flag (non-zero means add)
"RTN","IBCNICB",30,0)
 ;  IBNEWPOL - Add new patient insurance policy (non-zero means add)
"RTN","IBCNICB",31,0)
 ;  IVMREPTR - IVM REASONS FOR NOT UPLOADING (#301.91) IEN (Optional)
"RTN","IBCNICB",32,0)
 ;
"RTN","IBCNICB",33,0)
 ;OUTPUT
"RTN","IBCNICB",34,0)
 ;  RESULT   - Returned Parameter Array with IENS of new entries and/or 
"RTN","IBCNICB",35,0)
 ;             errors/warning.
"RTN","IBCNICB",36,0)
 ;     RESULT(0) = -1^error message
"RTN","IBCNICB",37,0)
 ;     RESULT(0) =   0           -Move worked
"RTN","IBCNICB",38,0)
 ;     RESULT(0) =   0 ^ warning message ^ warning message ^ 
"RTN","IBCNICB",39,0)
 ;                   warning message ^ warning message
"RTN","IBCNICB",40,0)
 ;             - Move worked but there may be zero to 4 warning messages
"RTN","IBCNICB",41,0)
 ;     RESULT(1) = "IBINSDA^" IEN of new Insurance Company (#36) File
"RTN","IBCNICB",42,0)
 ;     RESULT(1,"ERR",#) - Array with any FM errors when data updated
"RTN","IBCNICB",43,0)
 ;                         from file 355.33 to 36.
"RTN","IBCNICB",44,0)
 ;     RESULT(2) = "IBGRPDA^" IEN of new GROUP INSURANCE PLAN (#355.3)
"RTN","IBCNICB",45,0)
 ;                            File
"RTN","IBCNICB",46,0)
 ;     RESULT(2,"ERR",#) - Array with any FM errors when data updated
"RTN","IBCNICB",47,0)
 ;                         from file 355.33 to 355.3.
"RTN","IBCNICB",48,0)
 ;     RESULT(3) = "IBPOLDA^" IEN of new INSURANCE TYPE (#2.312) sub-file
"RTN","IBCNICB",49,0)
 ;                  of PATIENT (#2) IEN
"RTN","IBCNICB",50,0)
 ;     RESULT(3,"ERR",#) - Array with any FM errors when data updated
"RTN","IBCNICB",51,0)
 ;                         from file 355.33 to 2.312.
"RTN","IBCNICB",52,0)
 ;     RESULT(4) Contains the results of the call to UPDPOL^IBCNICB which
"RTN","IBCNICB",53,0)
 ;               is used to update a new group into an existing patient
"RTN","IBCNICB",54,0)
 ;               policy entry when applicable.
"RTN","IBCNICB",55,0)
 ;     RESULT(4) =-1^error message      
"RTN","IBCNICB",56,0)
 ;     RESULT(4) =0 ^ message that process was successful or not required
"RTN","IBCNICB",57,0)
 ;
"RTN","IBCNICB",58,0)
 N IBSUPRES,IBUFSTAT,IBX
"RTN","IBCNICB",59,0)
 I '$D(IBELIG) S IBELIG=0
"RTN","IBCNICB",60,0)
 ;Set IBSUPRES to suppress screen I/O within ACCEPT
"RTN","IBCNICB",61,0)
 S IBSUPRES=1,IBUFSTAT=$P($G(^IBA(355.33,$G(IBBUFDA),0)),U,4)
"RTN","IBCNICB",62,0)
 ;
"RTN","IBCNICB",63,0)
 S RESULT(0)="-1^INSURANCE BUFFER (#355.33) IEN required" Q:'$G(IBBUFDA)
"RTN","IBCNICB",64,0)
 S RESULT(0)="-1^INSURANCE BUFFER ENTRY PREVIOUSLY PROCESSED"
"RTN","IBCNICB",65,0)
 Q:"~A~R~"[("~"_IBUFSTAT_"~")
"RTN","IBCNICB",66,0)
 S RESULT(0)="-1^INSURANCE BUFFER ENTRY STATUS SHOULD BE ENTERED"
"RTN","IBCNICB",67,0)
 Q:IBUFSTAT'="E"
"RTN","IBCNICB",68,0)
 S RESULT(0)="-1^PATIENT (#2) IEN required" Q:'$G(DFN)
"RTN","IBCNICB",69,0)
 S IBINSDA=$G(IBINSDA),IBGRPDA=$G(IBGRPDA),IBPOLDA=$G(IBPOLDA)
"RTN","IBCNICB",70,0)
 S IBMVINS=$G(IBMVINS,2),IBMVGRP=$G(IBMVGRP,2),IBMVPOL=$G(IBMVPOL,2)
"RTN","IBCNICB",71,0)
 S IBNEWINS=$G(IBNEWINS),IBNEWGRP=$G(IBNEWGRP),IBNEWPOL=$G(IBNEWPOL)
"RTN","IBCNICB",72,0)
 ;
"RTN","IBCNICB",73,0)
 S RESULT(0)="-1^Passed INSURANCE COMPANY (#36) entry doesn't exist"
"RTN","IBCNICB",74,0)
 I +IBINSDA,$G(^DIC(36,IBINSDA,0))="" Q
"RTN","IBCNICB",75,0)
 S RESULT(0)="-1^Passed GROUP INSURANCE PLAN (#355.3) entry doesn't exist"
"RTN","IBCNICB",76,0)
 I +IBGRPDA,$G(^IBA(355.3,IBGRPDA,0))="" Q
"RTN","IBCNICB",77,0)
 S RESULT(0)="-1^Passed Patient INSURANCE TYPE (#2.312) entry doesn't exist"
"RTN","IBCNICB",78,0)
 I +IBPOLDA,$G(^DPT(DFN,.312,IBPOLDA,0))="" Q
"RTN","IBCNICB",79,0)
 S RESULT(0)="-1^Passed GROUP INSURANCE PLAN (#355.3) entry points to different INSURANCE COMPANY (#36) entry"
"RTN","IBCNICB",80,0)
 I +IBGRPDA,+IBINSDA,+$G(^IBA(355.3,IBGRPDA,0))'=IBINSDA Q
"RTN","IBCNICB",81,0)
 S RESULT(0)="-1^Individual Policy Patient required to be Patient DFN when Group Insurance Plan is not Group Policy"
"RTN","IBCNICB",82,0)
 I +IBGRPDA S IBX=$G(^IBA(355.3,IBGRPDA,0)) I $P(IBX,U,2)=0,+$P(IBX,U,10),$P(IBX,U,10)'=DFN Q
"RTN","IBCNICB",83,0)
 ;
"RTN","IBCNICB",84,0)
 ;If existing GROUP INSURANCE PLAN (#355.3) entry is being changed from 
"RTN","IBCNICB",85,0)
 ;a group plan to individual plan with other subscribers, send error 
"RTN","IBCNICB",86,0)
 ;message and abort update
"RTN","IBCNICB",87,0)
 S RESULT(0)="-1^Can't change GROUP INSURANCE PLAN from Group Plan to Individual Plan when there are subscribers"
"RTN","IBCNICB",88,0)
 I +IBGRPDA,$P(IBX,U,2)=1,$P($G(^IBA(355.33,+$G(IBBUFDA),40)),U,1)'=1,$$SUBS^IBCNSJ(IBINSDA,IBGRPDA)>1 Q
"RTN","IBCNICB",89,0)
 ;
"RTN","IBCNICB",90,0)
 D PROCESS^IBCNBAR
"RTN","IBCNICB",91,0)
 Q
"RTN","IBCNICB",92,0)
 ;
"RTN","IBCNICB",93,0)
REJECAPI(RESULT,IBBUFDA,IVMREPTR) ;
"RTN","IBCNICB",94,0)
 ;Provides API to be called by the Insurance Capture Buffer (ICB) 
"RTN","IBCNICB",95,0)
 ;application to reject buffer entry.
"RTN","IBCNICB",96,0)
 ;The REJPROC^IBCNBAR call and embedded Sub calls are updated to 
"RTN","IBCNICB",97,0)
 ;provide data in the RESULT parameter and suppress I/O when function 
"RTN","IBCNICB",98,0)
 ;is called by ICB.
"RTN","IBCNICB",99,0)
 ;Input:
"RTN","IBCNICB",100,0)
 ;   IBBUFDA  - INSURANCE BUFFER (#355.33) file internal entry number
"RTN","IBCNICB",101,0)
 ;              (required)
"RTN","IBCNICB",102,0)
 ;   IVMREPTR - IVM REASONS FOR NOT UPLOADING (#301.91) File internal
"RTN","IBCNICB",103,0)
 ;              internal entry number (Optional)
"RTN","IBCNICB",104,0)
 ;Output:
"RTN","IBCNICB",105,0)
 ;   RESULT   - Returned parameter variable with errors messages if
"RTN","IBCNICB",106,0)
 ;              problems with the reject processing. Format:
"RTN","IBCNICB",107,0)
 ;     REJECT = -1 ^ error message
"RTN","IBCNICB",108,0)
 ;     REJECT =  0                     - Reject worked
"RTN","IBCNICB",109,0)
 ;     REJECT =  0 ^ warning message   - Reject process worked but there
"RTN","IBCNICB",110,0)
 ;                                       is a warning message
"RTN","IBCNICB",111,0)
 ;
"RTN","IBCNICB",112,0)
 N IBSUPRES
"RTN","IBCNICB",113,0)
 ;Set IBSUPRES to suppress screen I/O within REJECT
"RTN","IBCNICB",114,0)
 S IBSUPRES=1
"RTN","IBCNICB",115,0)
 S RESULT="-1^INSURANCE BUFFER IEN required" Q:'$G(IBBUFDA)
"RTN","IBCNICB",116,0)
 S RESULT="-1^INSURANCE BUFFER ENTRY PREVIOUSLY PROCESSED"
"RTN","IBCNICB",117,0)
 Q:"~A~R~"[("~"_$$GET1^DIQ(355.33,IBBUFDA,.04,"I")_"~")
"RTN","IBCNICB",118,0)
 D REJPROC^IBCNBAR
"RTN","IBCNICB",119,0)
 Q
"RTN","IBCNICB",120,0)
 ;
"RTN","IBCNICB",121,0)
UPDTICB(RESULT,DFN,IBPOLDA,IBGRPDA,IBPOLCOM,IBPOLBIL,IBPLAN,IBELEC,IBGPCOM,IBFTF,IBFTFVAL) ;
"RTN","IBCNICB",122,0)
 ;Updates additional fields for ICB Interface
"RTN","IBCNICB",123,0)
 ;
"RTN","IBCNICB",124,0)
 ;Input:
"RTN","IBCNICB",125,0)
 ;  DFN      - PATIENT (#2) file IEN (Required)
"RTN","IBCNICB",126,0)
 ;  IBGRPDA  - GROUP INSURANCE PLAN (#355.3) File IEN (Optional)
"RTN","IBCNICB",127,0)
 ;  IBPOLDA  - INSURANCE TYPE (#2.312) sub-file of PATIENT (#2) IEN 
"RTN","IBCNICB",128,0)
 ;             (Optional)
"RTN","IBCNICB",129,0)
 ;  IBPOLCOM - Data to be filed into the COMMENT - PATIENT POLICY
"RTN","IBCNICB",130,0)
 ;             (#1.08) field of the 2.312 sub-file.  (Optional)
"RTN","IBCNICB",131,0)
 ;  IBPOLBIL - Data to be filed into the POLICY NOT BILLABLE  (#3.04)
"RTN","IBCNICB",132,0)
 ;             field of the 2.312 sub-file. (Optional)
"RTN","IBCNICB",133,0)
 ;             Corresponds to the Internal codes in 3.04 field of 
"RTN","IBCNICB",134,0)
 ;             2.312 sub-file: '0' FOR NO; '1' FOR YES;
"RTN","IBCNICB",135,0)
 ;  IBPLAN   - Data to be filed in PLAN FILING TIME FRAME (#.13) field 
"RTN","IBCNICB",136,0)
 ;             of 355.3 file (Optional)
"RTN","IBCNICB",137,0)
 ;  IBELEC   - Data to be file in ELECTRONIC PLAN TYPE  (#.15) field 
"RTN","IBCNICB",138,0)
 ;             of 355.3 file (Optional)
"RTN","IBCNICB",139,0)
 ;             Corresponds to the Internal Codes in .15 field of 355.3 
"RTN","IBCNICB",140,0)
 ;             file
"RTN","IBCNICB",141,0)
 ;  IBGPCOM  - Group Plan Comment array that contains the word
"RTN","IBCNICB",142,0)
 ;             processing data to be filed the COMMENTS (#11) word-
"RTN","IBCNICB",143,0)
 ;             processing field of  355.3 file. (Optional)
"RTN","IBCNICB",144,0)
 ;              Example:  IBGPCOM(1)="This is line 1"
"RTN","IBCNICB",145,0)
 ;                        IBGPCOM(2)="This is line 2"
"RTN","IBCNICB",146,0)
 ;  IBFTF    - Data to be filed in the PLAN STANDARD FTF (#.16) field of
"RTN","IBCNICB",147,0)
 ;             355.3 file (Optional)
"RTN","IBCNICB",148,0)
 ;             Corresponds to the Internal Entry Number of the entry in 
"RTN","IBCNICB",149,0)
 ;             the INSURANCE FILING TIME FRAME (#355.13) File.
"RTN","IBCNICB",150,0)
 ;  IBFTFVAL - Data to be filed in the PLAN STANDARD FTF VALUE (#.17)
"RTN","IBCNICB",151,0)
 ;             field of 355.3 file (Optional - Calling application 
"RTN","IBCNICB",152,0)
 ;             responsible to pass value if required for Plan Standard
"RTN","IBCNICB",153,0)
 ;             FTF) 
"RTN","IBCNICB",154,0)
 ;
"RTN","IBCNICB",155,0)
 ;Output:
"RTN","IBCNICB",156,0)
 ;  RESULT - Returned Parameter Array with results of call
"RTN","IBCNICB",157,0)
 ;   RESULT = 0 ^ No data to update
"RTN","IBCNICB",158,0)
 ;   RESULT(1) = -1^ error with Insurance Type (#2.312) file update
"RTN","IBCNICB",159,0)
 ;   RESULT(1) = 0                   - Insurance Type update worked
"RTN","IBCNICB",160,0)
 ;   RESULT(2) = -1^ error with GROUP INSURANCE PLAN (#355.3) file update
"RTN","IBCNICB",161,0)
 ;   RESULT(2) = 0                   - Group Insurance Plan update worked
"RTN","IBCNICB",162,0)
 ;
"RTN","IBCNICB",163,0)
 ;Update Patient Policy Comment (#1.08) and/or 
"RTN","IBCNICB",164,0)
 ;Policy Not Billable (#3.04) fields in 2.312 subfile
"RTN","IBCNICB",165,0)
 I $G(IBPOLCOM)]""!($G(IBPOLBIL)]"") D
"RTN","IBCNICB",166,0)
 . N IBIENS,IBFDA
"RTN","IBCNICB",167,0)
 . I $G(DFN)']"" S RESULT(1)="-1^PATIENT (#2) DFN not passed" Q
"RTN","IBCNICB",168,0)
 . I $G(IBPOLDA)'>0 S RESULT(1)="-1^INSURANCE TYPE (#2.312) sub-file IEN not defined" Q
"RTN","IBCNICB",169,0)
 . I +IBPOLDA,$G(^DPT(DFN,.312,IBPOLDA,0))="" S RESULT(0)="-1^Passed Patient INSURANCE TYPE (#2.312) entry doesn't exist" Q
"RTN","IBCNICB",170,0)
 . L +^DPT(DFN,.312,IBPOLDA):5 I '$T S RESULT(1)="-1^INSURANCE TYPE (#2.312) sub-file entry locked, data not updated" Q
"RTN","IBCNICB",171,0)
 . S IBIENS=+IBPOLDA_","_+DFN_","
"RTN","IBCNICB",172,0)
 . I $G(IBPOLBIL)]"",$$EXTERNAL^DILFD(2.312,3.04,"",IBPOLBIL)']"" S RESULT(1)="-1^POLICY NOT BILLABLE ("_IBPOLBIL_") not a valid value",IBPOLBIL=""
"RTN","IBCNICB",173,0)
 . S:$G(IBPOLCOM)]"" IBFDA(2.312,IBIENS,1.08)=IBPOLCOM
"RTN","IBCNICB",174,0)
 . S:$G(IBPOLBIL)]"" IBFDA(2.312,IBIENS,3.04)=IBPOLBIL
"RTN","IBCNICB",175,0)
 . I $D(IBFDA)>0 D FILE^DIE(,"IBFDA") S:$D(RESULT(1))'>0 RESULT(1)=0
"RTN","IBCNICB",176,0)
 . L -^DPT(DFN,.312,IBPOLDA)
"RTN","IBCNICB",177,0)
 ;
"RTN","IBCNICB",178,0)
 ;Update Plan Filing Time Frame (#.13), Electronic Plan Type (#.15)
"RTN","IBCNICB",179,0)
 ;Plan Standard FTF (#.16), Plan Standard FTF Value (#.17), and/or
"RTN","IBCNICB",180,0)
 ;Group Plan Comments (#11) fields in 355.3 file
"RTN","IBCNICB",181,0)
 I $G(IBPLAN)]""!($G(IBELEC)]"")!($D(IBGPCOM)>0)!($G(IBFTF)]"")!($G(IBFTFVAL)]"") D
"RTN","IBCNICB",182,0)
 . N IBIENS,IBFDA
"RTN","IBCNICB",183,0)
 . I $G(IBGRPDA)'>0 S RESULT(2)="-1^GROUP INSURANCE PLAN (#355.3) file IEN not defined" Q
"RTN","IBCNICB",184,0)
 . I +IBGRPDA,$G(^IBA(355.3,IBGRPDA,0))="" S RESULT(2)="-1^Passed GROUP INSURANCE PLAN (#355.3) entry doesn't exist" Q
"RTN","IBCNICB",185,0)
 . L +^IBA(355.3,IBGRPDA):5 I '$T S RESULT(2)="-1^GROUP INSURANCE PLAN (#355.3) file entry locked, data not updated" Q
"RTN","IBCNICB",186,0)
 . S IBIENS=+IBGRPDA_","
"RTN","IBCNICB",187,0)
 . ; Consistency Checks for Plan Standard FTF and FTF VALUE fields
"RTN","IBCNICB",188,0)
 . I $G(IBELEC)]"",$$EXTERNAL^DILFD(355.3,.15,"",IBELEC)']"" S RESULT(2)="-1^ELECTRONIC PLAN TYPE ("_IBELEC_") not a valid value",IBELEC=""
"RTN","IBCNICB",189,0)
 . I $G(IBFTFVAL)]"",$G(IBFTF)']"" S RESULT(2)="-1^PLAN STANDARD FTF should be passed with PLAN STANDARD FTF VALUE",IBFTFVAL=""
"RTN","IBCNICB",190,0)
 . I $G(IBFTF)]"",$$EXTERNAL^DILFD(355.3,.16,"",IBFTF)']"" S RESULT(2)="-1^PLAN STANDARD FTF ("_IBFTF_") not a valid value",IBFTF=""
"RTN","IBCNICB",191,0)
 . I $G(IBFTF)]"",$$GET1^DIQ(355.13,+IBFTF_",",.02,"I")=1,$G(IBFTFVAL)'>0 S RESULT(2)="-1^Valid PLAN STANDARD FTF VALUE not passed for "_$$GET1^DIQ(355.13,+IBFTF,.01,"E"),IBFTF="",IBFTFVAL=""
"RTN","IBCNICB",192,0)
 . ;
"RTN","IBCNICB",193,0)
 . S:$G(IBPLAN)]"" IBFDA(355.3,IBIENS,.13)=IBPLAN
"RTN","IBCNICB",194,0)
 . S:$G(IBELEC)]"" IBFDA(355.3,IBIENS,.15)=IBELEC
"RTN","IBCNICB",195,0)
 . S:$G(IBFTF)]"" IBFDA(355.3,IBIENS,.16)=IBFTF
"RTN","IBCNICB",196,0)
 . S:$G(IBFTFVAL)]"" IBFDA(355.3,IBIENS,.17)=IBFTFVAL
"RTN","IBCNICB",197,0)
 . I $D(IBFDA)>0 D FILE^DIE(,"IBFDA") S:$D(RESULT(2))'>0 RESULT(2)=0
"RTN","IBCNICB",198,0)
 . ;
"RTN","IBCNICB",199,0)
 . ;Update Group Plan Comments (#11) word processing field in 355.3 file
"RTN","IBCNICB",200,0)
 . I $O(IBGPCOM(""))>0 D WP^DIE(355.3,+IBGRPDA_",",11,,"IBGPCOM") S:$D(RESULT(2))'>0 RESULT(2)=0
"RTN","IBCNICB",201,0)
 . L -^IBA(355.3,IBGRPDA)
"RTN","IBCNICB",202,0)
 I $D(RESULT(1))'>0&($D(RESULT(2))'>0) S RESULT="0^No data to update"
"RTN","IBCNICB",203,0)
 Q
"RTN","IBCNICB",204,0)
 ;
"RTN","IBCNICB",205,0)
UPDPOL(RESULT,IBBUFDA,DFN,IBINSDA,IBGRPDA,IBPOLDA) ;update a new group into 
"RTN","IBCNICB",206,0)
 ;an existing patient policy entry for ICB interface
"RTN","IBCNICB",207,0)
 ;Input
"RTN","IBCNICB",208,0)
 ;  IBBUFDA  - INSURANCE BUFFER (#355.33) file internal entry number
"RTN","IBCNICB",209,0)
 ;             (IEN) (Required)
"RTN","IBCNICB",210,0)
 ;  DFN      - PATIENT (#2) file IEN (Required)
"RTN","IBCNICB",211,0)
 ;  IBINSDA  - INSURANCE COMPANY (#36) File IEN if not adding new entry
"RTN","IBCNICB",212,0)
 ;             (Optional)
"RTN","IBCNICB",213,0)
 ;  IBGRPDA  - GROUP INSURANCE PLAN (#355.3) File IEN if not adding new
"RTN","IBCNICB",214,0)
 ;             entry (Required)
"RTN","IBCNICB",215,0)
 ;  IBPOLDA  - INSURANCE TYPE (#2.312) sub-file of PATIENT (#2) IEN if
"RTN","IBCNICB",216,0)
 ;             not adding new entry (Required)
"RTN","IBCNICB",217,0)
 ;Output:
"RTN","IBCNICB",218,0)
 ;  RESULT(4) - Returned Parameter Array with results of call
"RTN","IBCNICB",219,0)
 ;     RESULT(4) =-1^error message
"RTN","IBCNICB",220,0)
 ;     RESULT(4) =0 ^ message that process was successful or not require
"RTN","IBCNICB",221,0)
 ;
"RTN","IBCNICB",222,0)
 N IBPAT
"RTN","IBCNICB",223,0)
 I $G(IBBUFDA)'>0 S RESULT(4)="-1^INSURANCE BUFFER (#355.33) IEN required" Q
"RTN","IBCNICB",224,0)
 I $G(DFN)'>0 S RESULT(4)="-1^PATIENT (#2) IEN required" Q
"RTN","IBCNICB",225,0)
 I $G(IBPOLDA)'>0 S RESULT(4)="-1^INSURANCE TYPE (#2.312) SUB-FILE IEN required" Q
"RTN","IBCNICB",226,0)
 I $G(^DPT(DFN,.312,IBPOLDA,0))'>0 S RESULT(4)="-1^PATIENT INSURANCE TYPE(#2.312) entry doesn't exist" Q
"RTN","IBCNICB",227,0)
 I $G(IBGRPDA)'>0 S RESULT(4)="-1^GROUP INSURANCE PLAN (#355.3) IEN required" Q
"RTN","IBCNICB",228,0)
 ;
"RTN","IBCNICB",229,0)
 ; NO changes required
"RTN","IBCNICB",230,0)
 S IBPAT=$G(^DPT(DFN,.312,IBPOLDA,0))
"RTN","IBCNICB",231,0)
 I $G(IBINSDA)>0,$P(IBPAT,U,1)=IBINSDA,$P(IBPAT,U,18)=IBGRPDA S RESULT(4)="0^NO CHANGE REQUIRE" Q
"RTN","IBCNICB",232,0)
 I $G(IBINSDA)'>0,$P(IBPAT,U,18)=IBGRPDA S RESULT(4)="0^NO CHANGE REQUIRE" Q
"RTN","IBCNICB",233,0)
 ;
"RTN","IBCNICB",234,0)
 ;Additional error checks
"RTN","IBCNICB",235,0)
 I $G(^IBA(355.3,IBGRPDA,0))="" S RESULT(4)="-1^GROUP INSURANCE PLAN (#355.3) entry doesn't exist" Q
"RTN","IBCNICB",236,0)
 I $G(IBINSDA)>0,$G(^DIC(36,IBINSDA,0))="" S RESULT(4)="-1^INSURANCE COMPANY (#36) entry doesn't exist" Q
"RTN","IBCNICB",237,0)
 I $G(IBINSDA)>0,$P($G(^IBA(355.3,IBGRPDA,0)),U,1)'=IBINSDA S RESULT(4)="-1^GROUP INSURANCE PLAN (#355.3) entry points to different INSURANCE COMPANY (#36) entry" Q
"RTN","IBCNICB",238,0)
 I $G(IBINSDA)'>0,$P($G(^IBA(355.3,IBGRPDA,0)),U,1)'=$P(IBPAT,U,1) S RESULT(4)="-1^GROUP INSURANCE PLAN (#355.3) entry points to different INSURANCE COMPANY (#36) entry" Q
"RTN","IBCNICB",239,0)
 ;
"RTN","IBCNICB",240,0)
 D CLEANUP
"RTN","IBCNICB",241,0)
 ;
"RTN","IBCNICB",242,0)
 L +^DPT(DFN,.312,IBPOLDA):5 I '$T S RESULT(4)="-1^INSURANCE TYPE (#2.312) SUB-FILE ENTRY LOCKED, DATA NOT UPDATED" Q
"RTN","IBCNICB",243,0)
 ;
"RTN","IBCNICB",244,0)
 N IBXIFN,IBFIELDS,IBERR
"RTN","IBCNICB",245,0)
 S IBXIFN=IBPOLDA_","_DFN_","
"RTN","IBCNICB",246,0)
 I $G(IBINSDA) S IBFIELDS(2.312,IBXIFN,.01)=IBINSDA
"RTN","IBCNICB",247,0)
 S IBFIELDS(2.312,IBXIFN,.18)=IBGRPDA ;policy's group/plan always update 
"RTN","IBCNICB",248,0)
 Q:'$D(IBFIELDS)
"RTN","IBCNICB",249,0)
 ;Source
"RTN","IBCNICB",250,0)
 S IBFIELDS(2.312,IBXIFN,1.09)=$P($G(^IBA(355.33,+$G(IBBUFDA),0)),U,3)
"RTN","IBCNICB",251,0)
 ;Source Date
"RTN","IBCNICB",252,0)
 S IBFIELDS(2.312,IBXIFN,1.1)=+$G(^IBA(355.33,+$G(IBBUFDA),0))
"RTN","IBCNICB",253,0)
 D FILE^DIE("","IBFIELDS","IBERR")
"RTN","IBCNICB",254,0)
 I $D(IBERR)>0 S RESULT(4)="-1^Fileman DIE error"
"RTN","IBCNICB",255,0)
 I $D(IBERR)'>0 S RESULT(4)="0^Data successfully updated"
"RTN","IBCNICB",256,0)
 L -^DPT(DFN,.312,IBPOLDA)
"RTN","IBCNICB",257,0)
 Q
"RTN","IBCNICB",258,0)
 ;
"RTN","IBCNICB",259,0)
CLEANUP ;This logic will delete obsolete Individual Plans, Repoint Insurance 
"RTN","IBCNICB",260,0)
 ;Reviews if Insurance Company changes, and Remove any Old Benefits Used.
"RTN","IBCNICB",261,0)
 N IBPAT,IBOLDINS,IBOLDGRP,IBIP,IBT,IBTNODE0,IBTNODE1,IBFIELDS,IBARR
"RTN","IBCNICB",262,0)
 S IBPAT=$G(^DPT(DFN,.312,IBPOLDA,0))
"RTN","IBCNICB",263,0)
 S IBOLDINS=$P(IBPAT,U,1),IBOLDGRP=$P(IBPAT,U,18)
"RTN","IBCNICB",264,0)
 S IBIP=$P($G(^IBA(355.3,+$P(IBPAT,U,18),0)),U,2)
"RTN","IBCNICB",265,0)
 ;If Old Group Insurance Plan is an Individual Plan with only one
"RTN","IBCNICB",266,0)
 ;subscriber for the same Patient Insurance Policy Entry, delete it
"RTN","IBCNICB",267,0)
 I IBIP=0,$$SUBS^IBCNSJ(IBOLDINS,IBOLDGRP,,"IBARR")'>1,($D(IBARR(DFN,IBPOLDA))>0) D DEL^IBCNSJ(IBOLDGRP)
"RTN","IBCNICB",268,0)
 ;If changing to a new Insurance Company
"RTN","IBCNICB",269,0)
 I $G(IBINSDA)>0,IBOLDINS'=IBINSDA D  Q
"RTN","IBCNICB",270,0)
 . ; - repoint all Insurance Reviews to new company
"RTN","IBCNICB",271,0)
 . I $$IR^IBCNSJ21(DFN,IBPOLDA) D
"RTN","IBCNICB",272,0)
 . S IBT=0
"RTN","IBCNICB",273,0)
 . F  S IBT=$O(^IBT(356.2,"D",DFN,IBT)) Q:'IBT  D
"RTN","IBCNICB",274,0)
 . . S IBTNODE0=$G(^IBT(356.2,IBT,0)),IBTNODE1=$G(^IBT(356.2,IBT,1))
"RTN","IBCNICB",275,0)
 . . I $P(IBTNODE1,U,5)=IBPOLDA,$P(IBTNODE0,U,8)'=IBINSDA D
"RTN","IBCNICB",276,0)
 . . . S IBFIELDS(356.2,IBT_",",.08)=IBINSDA
"RTN","IBCNICB",277,0)
 . . . D FILE^DIE("","IBFIELDS")
"RTN","IBCNICB",278,0)
 ;Delete Benefits Used (#355.5) corresponding to old Patient Group Plan
"RTN","IBCNICB",279,0)
 D DELBU
"RTN","IBCNICB",280,0)
 Q
"RTN","IBCNICB",281,0)
 ;
"RTN","IBCNICB",282,0)
DELBU ;Delete Benefits Used
"RTN","IBCNICB",283,0)
 N IBCDFN,IBPLAN,IBBU
"RTN","IBCNICB",284,0)
 S IBCDFN=IBPOLDA,IBPLAN=IBOLDGRP
"RTN","IBCNICB",285,0)
 ;Get Benefits Used
"RTN","IBCNICB",286,0)
 D BU^IBCNSJ21
"RTN","IBCNICB",287,0)
 ;If there are Benefits Used, then delete them
"RTN","IBCNICB",288,0)
 I $O(IBBU(0)) D
"RTN","IBCNICB",289,0)
 . N IBDAT
"RTN","IBCNICB",290,0)
 . S IBDAT=""
"RTN","IBCNICB",291,0)
 . F  S IBDAT=$O(IBBU(IBDAT)) Q:IBDAT=""  D DBU^IBCNSJ(IBBU(IBDAT))
"RTN","IBCNICB",292,0)
 Q
"RTN","IBCNS3")
0^41^B62573337^B55507373
"RTN","IBCNS3",1,0)
IBCNS3 ;ALB/ARH - DISPLAY EXTENDED INSURANCE ; 01-DEC-04
"RTN","IBCNS3",2,0)
 ;;2.0;INTEGRATED BILLING;**287,399,416**;21-MAR-94;Build 58
"RTN","IBCNS3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNS3",4,0)
 ;
"RTN","IBCNS3",5,0)
DISP(DFN,DATE,DISPLAY) ;  Display all insurance company information
"RTN","IBCNS3",6,0)
 ;    input: DFN     = pointer to patient
"RTN","IBCNS3",7,0)
 ;           DATE    = date to check for coverage and riders
"RTN","IBCNS3",8,0)
 ;           DISPLAY = contain indicators of data to display (1234)
"RTN","IBCNS3",9,0)
 ;                     1 : first line of display ins company and plan data
"RTN","IBCNS3",10,0)
 ;                     2 : extended data (Plan Filing Timeframe, Plan Coverage, Conditional Coverage Comments, and Riders)
"RTN","IBCNS3",11,0)
 ;                     3 : ins. policy comments and plan comments
"RTN","IBCNS3",12,0)
 ;                     4 : eIV eligibility/benefit information (IB*2*416)
"RTN","IBCNS3",13,0)
 ;
"RTN","IBCNS3",14,0)
 Q:'$G(DFN)  D:'$D(IOF) HOME^%ZIS
"RTN","IBCNS3",15,0)
 N IBINS,IBPOLFN,IBPOL0,IBPLNFN S DISPLAY=$G(DISPLAY) I '$G(DATE) S DATE=DT
"RTN","IBCNS3",16,0)
 K ^TMP($J,"IBCNS3")
"RTN","IBCNS3",17,0)
 ;
"RTN","IBCNS3",18,0)
 D ALL^IBCNS1(DFN,"IBINS",3,DATE)
"RTN","IBCNS3",19,0)
 ;
"RTN","IBCNS3",20,0)
 I '$D(IBINS) D SETLN(" "),SETLN("No Insurance Information")
"RTN","IBCNS3",21,0)
 ;
"RTN","IBCNS3",22,0)
 S IBPOLFN=0 F  S IBPOLFN=$O(IBINS(IBPOLFN)) Q:'IBPOLFN  D
"RTN","IBCNS3",23,0)
 . S IBPOL0=IBINS(IBPOLFN,0),IBPLNFN=$P(IBPOL0,U,18)
"RTN","IBCNS3",24,0)
 . S ^TMP($J,"IBCNS3")=IBPOLFN
"RTN","IBCNS3",25,0)
 . ;
"RTN","IBCNS3",26,0)
 . D GETLN(IBPOL0,DATE)
"RTN","IBCNS3",27,0)
 . I DISPLAY[2 D GETEXT(DFN,IBPOLFN,IBPOL0,DATE) ; display extended
"RTN","IBCNS3",28,0)
 . I DISPLAY[3 D GETCOM(IBPLNFN,$G(IBINS(IBPOLFN,1))) ; display extended 3, comments
"RTN","IBCNS3",29,0)
 . I DISPLAY[4 D EB(DFN,IBPOLFN)    ; display eIV elig/ben data
"RTN","IBCNS3",30,0)
 . Q
"RTN","IBCNS3",31,0)
 ;
"RTN","IBCNS3",32,0)
 S ^TMP($J,"IBCNS3")="" D GETNOTES(DFN)   ; display final notes/warning messages
"RTN","IBCNS3",33,0)
 ;
"RTN","IBCNS3",34,0)
 D PRINT
"RTN","IBCNS3",35,0)
 ;
"RTN","IBCNS3",36,0)
DISPQ K ^TMP($J,"IBCNS3")
"RTN","IBCNS3",37,0)
 Q
"RTN","IBCNS3",38,0)
 ;
"RTN","IBCNS3",39,0)
PRINT ; display compiled array of patient insurance information in ^TMP($J,"IBCNS3")
"RTN","IBCNS3",40,0)
 N IBSUB,IBCOUNT,IBQUIT,IBLEVEL,IBLNX,IBDASH,IBLINE,IBCNTLN S $P(IBDASH,"-",80)="-" S DISPLAY=+$G(DISPLAY)
"RTN","IBCNS3",41,0)
 ;
"RTN","IBCNS3",42,0)
 D HDR S IBSUB="IBCNS3",IBCOUNT=3,IBQUIT=0
"RTN","IBCNS3",43,0)
 ;
"RTN","IBCNS3",44,0)
 S IBLEVEL=0 F  S IBLEVEL=$O(^TMP($J,IBSUB,IBLEVEL)) Q:'IBLEVEL  D  Q:IBQUIT
"RTN","IBCNS3",45,0)
 . S IBCNTLN=+$G(^TMP($J,IBSUB,IBLEVEL))+1
"RTN","IBCNS3",46,0)
 . ;
"RTN","IBCNS3",47,0)
 . I IBCOUNT>10,(IBCNTLN+IBCOUNT)>(IOSL-3) S IBQUIT=$$EOP Q:IBQUIT  D HDR S IBCOUNT=3
"RTN","IBCNS3",48,0)
 . ;
"RTN","IBCNS3",49,0)
 . S IBLNX=0 F  S IBLNX=$O(^TMP($J,IBSUB,IBLEVEL,IBLNX)) Q:'IBLNX  D  Q:IBQUIT
"RTN","IBCNS3",50,0)
 .. ;
"RTN","IBCNS3",51,0)
 .. S IBLINE=$G(^TMP($J,IBSUB,IBLEVEL,IBLNX))
"RTN","IBCNS3",52,0)
 .. ;
"RTN","IBCNS3",53,0)
 .. W !,IBLINE S IBCOUNT=IBCOUNT+1 I IBCOUNT>(IOSL-3) S IBQUIT=$$EOP Q:IBQUIT  W @IOF S IBCOUNT=2
"RTN","IBCNS3",54,0)
 . ;
"RTN","IBCNS3",55,0)
 . I 'IBQUIT,DISPLAY>1 W !,IBDASH S IBCOUNT=IBCOUNT+1
"RTN","IBCNS3",56,0)
 ;
"RTN","IBCNS3",57,0)
 I 'IBQUIT,IBCOUNT>2 S IBQUIT=$$EOP
"RTN","IBCNS3",58,0)
 Q
"RTN","IBCNS3",59,0)
 ;
"RTN","IBCNS3",60,0)
SETLN(LINE) ; set line as next line for current policy
"RTN","IBCNS3",61,0)
 N CNT,POL S LINE=$G(LINE)
"RTN","IBCNS3",62,0)
 S POL=+$G(^TMP($J,"IBCNS3"))
"RTN","IBCNS3",63,0)
 I 'POL S POL=$O(^TMP($J,"IBCNS3","~"),-1)+1 S ^TMP($J,"IBCNS3")=POL
"RTN","IBCNS3",64,0)
 ;
"RTN","IBCNS3",65,0)
 S CNT=+$G(^TMP($J,"IBCNS3",POL))+1
"RTN","IBCNS3",66,0)
 S ^TMP($J,"IBCNS3",POL)=CNT
"RTN","IBCNS3",67,0)
 S ^TMP($J,"IBCNS3",POL,CNT)=LINE
"RTN","IBCNS3",68,0)
 Q
"RTN","IBCNS3",69,0)
 ;
"RTN","IBCNS3",70,0)
 ;
"RTN","IBCNS3",71,0)
 ;
"RTN","IBCNS3",72,0)
GETLN(IBPOL0,IBDATE) ; get single line of primary data on insurance policy
"RTN","IBCNS3",73,0)
 ;     input:   IBPOL0 = line from array, zero node of patient policy (2,.312)
"RTN","IBCNS3",74,0)
 ;              IBDATE = date to check coverage, default today
"RTN","IBCNS3",75,0)
 ;    output:   formatted line of data for insurance policy in TMP($J,"IBCNS")
"RTN","IBCNS3",76,0)
 ;
"RTN","IBCNS3",77,0)
 N IBX,IBLINE S IBLINE=" " S IBPOL0=$G(IBPOL0)
"RTN","IBCNS3",78,0)
 ;
"RTN","IBCNS3",79,0)
 S IBX=$G(^DIC(36,+IBPOL0,0)),IBX=$S($P(IBX,U,1)'="":$P(IBX,U,1),1:"UNKNOWN") S IBLINE=$$FRMLN(IBX,IBLINE,11,0)
"RTN","IBCNS3",80,0)
 S IBX=$P(IBPOL0,U,20),IBX=$S(IBX=1:"p",IBX=2:"s",IBX=3:"t",1:"") S IBLINE=$$FRMLN(IBX,IBLINE,1,14)
"RTN","IBCNS3",81,0)
 S IBX=$P(IBPOL0,U,2) S IBLINE=$$FRMLN(IBX,IBLINE,16,17)
"RTN","IBCNS3",82,0)
 S IBX=$$FNDGRP($P(IBPOL0,U,18)) S IBLINE=$$FRMLN(IBX,IBLINE,10,35)
"RTN","IBCNS3",83,0)
 S IBX=$P(IBPOL0,U,6),IBX=$S(IBX="v":"SELF",IBX="s":"SPOUSE",1:"OTHER") S IBLINE=$$FRMLN(IBX,IBLINE,7,47)
"RTN","IBCNS3",84,0)
 S IBX=$$DAT1^IBOUTL($P(IBPOL0,U,8)) S IBLINE=$$FRMLN(IBX,IBLINE,8,55)
"RTN","IBCNS3",85,0)
 S IBX=$$DAT1^IBOUTL($P(IBPOL0,U,4)) S IBLINE=$$FRMLN(IBX,IBLINE,8,65)
"RTN","IBCNS3",86,0)
 S IBX=$$FNDCOV(+IBPOL0,+$P(IBPOL0,U,18),$G(IBDATE)) S IBLINE=$$FRMLN(IBX,IBLINE,6,74)
"RTN","IBCNS3",87,0)
 ;
"RTN","IBCNS3",88,0)
 D SETLN(IBLINE)
"RTN","IBCNS3",89,0)
GETLNQ Q
"RTN","IBCNS3",90,0)
 ;
"RTN","IBCNS3",91,0)
 ;
"RTN","IBCNS3",92,0)
GETEXT(DFN,IBPOLFN,IBPOL0,DATE) ; display extended insurance information
"RTN","IBCNS3",93,0)
 ; Plan Filing Timeframe, Plan Coverage, Conditional Coverage Comments, and Riders
"RTN","IBCNS3",94,0)
 ;     input:   DFN     = pointer to patient (2)
"RTN","IBCNS3",95,0)
 ;              IBPOLFN = pointer to patient insurance policy in 2.312
"RTN","IBCNS3",96,0)
 ;              IBPOL0  = line from array, zero node of patient policy (2,.312)
"RTN","IBCNS3",97,0)
 ;              DATE    = date to check coverage, default today
"RTN","IBCNS3",98,0)
 ;              DISPARR = array to pass data back in, pass by reference
"RTN","IBCNS3",99,0)
 ;    output:   array of extended data in TMP($J,"IBCNS")
"RTN","IBCNS3",100,0)
 ;
"RTN","IBCNS3",101,0)
 N IBX,IBY,IBZ,IBC,IBINSFN,IBPLNFN,IBPLN0,IBLINE,IBCAT,IBCATFN,IBCOVRD,IBU,ARR,ARR1 S:'$G(DATE) DATE=DT
"RTN","IBCNS3",102,0)
 S IBINSFN=+$G(IBPOL0) Q:'IBINSFN  S IBPLNFN=+$P(IBPOL0,U,18),IBPLN0=$G(^IBA(355.3,IBPLNFN,0)) Q:IBPLN0=""
"RTN","IBCNS3",103,0)
 ;
"RTN","IBCNS3",104,0)
 S IBLINE="Last Verified:   ",(IBY,IBX)=""
"RTN","IBCNS3",105,0)
 S IBY=$P($G(^DPT(DFN,.312,IBPOLFN,1)),U,3) I IBY'="" S IBX=$$DAT1^IBOUTL(IBY) S IBLINE=IBLINE_IBX D SETLN(" "),SETLN(IBLINE)
"RTN","IBCNS3",106,0)
 ;
"RTN","IBCNS3",107,0)
 S IBLINE="Plan Filing Time Frame: "
"RTN","IBCNS3",108,0)
 S IBY=$P(IBPLN0,U,13) S:IBY'="" IBY=IBY_"  " I +$P(IBPLN0,U,16) S IBY=IBY_"("_$$FTFN^IBCNSU31(IBPLNFN)_")"
"RTN","IBCNS3",109,0)
 I IBY'="" S IBLINE=IBLINE_IBY D:IBX="" SETLN(" ") D SETLN(IBLINE)
"RTN","IBCNS3",110,0)
 ;
"RTN","IBCNS3",111,0)
 S IBLINE="Insurance Comp:  "
"RTN","IBCNS3",112,0)
 I $P($G(^DIC(36,IBINSFN,0)),U,2)="N" S IBLINE=IBLINE_"Will Not Reimburse" D SETLN(" "),SETLN(IBLINE)
"RTN","IBCNS3",113,0)
 ;
"RTN","IBCNS3",114,0)
 S IBLINE="Conditional: ",IBCOVRD="",IBU=""
"RTN","IBCNS3",115,0)
 K ARR F IBCAT="INPATIENT","OUTPATIENT","PHARMACY","MENTAL HEALTH","DENTAL","LONG TERM CARE" D
"RTN","IBCNS3",116,0)
 . S IBCATFN=+$O(^IBE(355.31,"B",IBCAT,"")) Q:'IBCATFN
"RTN","IBCNS3",117,0)
 . S IBY=$$PLCOV^IBCNSU3(+IBPLNFN,DATE,IBCATFN,.ARR) Q:IBY'>0
"RTN","IBCNS3",118,0)
 . I IBY=1 S IBCOVRD=$G(IBCOVRD)_IBU_$S(IBCAT["PATIENT":$P(IBCAT,"IENT",1),1:IBCAT),IBU=", " Q
"RTN","IBCNS3",119,0)
 . S IBX=IBCAT_": ",IBC=$G(IBC)+100 S IBLINE=$$FRMLN(IBX,IBLINE,15,17)
"RTN","IBCNS3",120,0)
 . S IBZ=0 F  S IBZ=$O(ARR(IBZ)) Q:'IBZ  S IBX=ARR(IBZ) D  S IBLINE=""
"RTN","IBCNS3",121,0)
 .. S IBLINE=$$FRMLN(IBX,IBLINE,46,33) S ARR1(IBC+IBZ)=IBLINE
"RTN","IBCNS3",122,0)
 I IBCOVRD'="" S IBLINE="Plan Coverage:   "_$G(IBCOVRD) D SETLN(" "),SETLN(IBLINE)
"RTN","IBCNS3",123,0)
 I $O(ARR1("")) D:IBCOVRD="" SETLN(" ") S IBZ=0 F  S IBZ=$O(ARR1(IBZ)) Q:'IBZ  S IBX=ARR1(IBZ) D SETLN(IBX)
"RTN","IBCNS3",124,0)
 ;
"RTN","IBCNS3",125,0)
 S IBLINE="Policy Riders: "
"RTN","IBCNS3",126,0)
 K ARR D RIDERS^IBCNSU3(+$G(DFN),+$G(IBPOLFN),.ARR) I $O(ARR("")) D SETLN(" ")
"RTN","IBCNS3",127,0)
 S IBZ=0 F  S IBZ=$O(ARR(IBZ)) Q:'IBZ  S IBX=ARR(IBZ) D  S IBLINE=""
"RTN","IBCNS3",128,0)
 . S IBLINE=$$FRMLN(IBX,IBLINE,62,17) D SETLN(IBLINE)
"RTN","IBCNS3",129,0)
 Q
"RTN","IBCNS3",130,0)
 ;
"RTN","IBCNS3",131,0)
 ;
"RTN","IBCNS3",132,0)
GETCOM(IBPLNFN,IBPOL1) ; get patient insurance and plan insurance comments in TMP($J,"IBCNS")
"RTN","IBCNS3",133,0)
 N IBX,IBY
"RTN","IBCNS3",134,0)
 ;
"RTN","IBCNS3",135,0)
 S IBX=$P($G(IBPOL1),U,8) I IBX'="" S IBY="Patient Policy Comments: " D SETLN(" "),SETLN(IBY),SETLN(IBX)
"RTN","IBCNS3",136,0)
 ;
"RTN","IBCNS3",137,0)
 I +$G(IBPLNFN),$O(^IBA(355.3,+IBPLNFN,11,0)) S IBX="Group/Plan Comments:" D SETLN(" "),SETLN(IBX) D
"RTN","IBCNS3",138,0)
 . S IBX=0 F  S IBX=$O(^IBA(355.3,+IBPLNFN,11,IBX)) Q:'IBX  S IBY=$G(^IBA(355.3,+IBPLNFN,11,IBX,0)) D SETLN(IBY)
"RTN","IBCNS3",139,0)
 Q
"RTN","IBCNS3",140,0)
 ;
"RTN","IBCNS3",141,0)
 ;
"RTN","IBCNS3",142,0)
GETNOTES(DFN) ; get final notes/warnings in TMP($J,"IBCNS")
"RTN","IBCNS3",143,0)
 N IBX,IBY,IBLINE1,IBLINE2,IBFND S (IBFND,IBLINE1,IBLINE2)=""  Q:'$G(DFN)
"RTN","IBCNS3",144,0)
 ;
"RTN","IBCNS3",145,0)
 S IBX=+$G(^IBA(354,DFN,60)) I +IBX S IBY="*** Verification of No Coverage "_$$FMTE^XLFDT(IBX)_" ***" S IBLINE1=$$FRMLN(IBY,"",60,16),IBFND=1
"RTN","IBCNS3",146,0)
 I $$BUFFER^IBCNBU1(DFN) S IBY="***  Patient has Insurance Buffer entries  ***" S IBLINE2=$$FRMLN(IBY,"",50,17),IBFND=1
"RTN","IBCNS3",147,0)
 ;
"RTN","IBCNS3",148,0)
 I +IBFND D SETLN(" ") D:IBLINE1'="" SETLN(IBLINE1) D:IBLINE2'="" SETLN(IBLINE2) D SETLN(" ")
"RTN","IBCNS3",149,0)
 ;
"RTN","IBCNS3",150,0)
 Q
"RTN","IBCNS3",151,0)
 ;
"RTN","IBCNS3",152,0)
 ;
"RTN","IBCNS3",153,0)
EB(DFN,IBCDFN) ; Build eIV elig/benefit display for ?INX screen display
"RTN","IBCNS3",154,0)
 NEW IBX,IBY
"RTN","IBCNS3",155,0)
 D INIT^IBCNES(2.322,IBCDFN_","_DFN_",","A",,"?INX")
"RTN","IBCNS3",156,0)
 D SETLN(" ")
"RTN","IBCNS3",157,0)
 D SETLN("eIV Eligibility/Benefit Information:")
"RTN","IBCNS3",158,0)
 S IBX=0
"RTN","IBCNS3",159,0)
 F  S IBX=$O(^TMP("?INX",$J,"DISP",IBX)) Q:'IBX  D
"RTN","IBCNS3",160,0)
 . S IBY=$G(^TMP("?INX",$J,"DISP",IBX,0))
"RTN","IBCNS3",161,0)
 . D SETLN(IBY)
"RTN","IBCNS3",162,0)
 . Q
"RTN","IBCNS3",163,0)
 ;
"RTN","IBCNS3",164,0)
 ; clean up scratch global
"RTN","IBCNS3",165,0)
 K ^TMP("?INX",$J)
"RTN","IBCNS3",166,0)
 ;
"RTN","IBCNS3",167,0)
EBX ;
"RTN","IBCNS3",168,0)
 Q
"RTN","IBCNS3",169,0)
 ;
"RTN","IBCNS3",170,0)
 ;
"RTN","IBCNS3",171,0)
FRMLN(FIELD,IBLINE,FLNG,COL) ; format line data fields, returns IBLINE with FIELD of length FLNG at column COL
"RTN","IBCNS3",172,0)
 N IBNEW,IBL S FIELD=$G(FIELD),IBLINE=$G(IBLINE),FLNG=$G(FLNG),COL=$G(COL)
"RTN","IBCNS3",173,0)
 ;
"RTN","IBCNS3",174,0)
 S IBNEW=$E(IBLINE,1,COL),IBL=$L(IBNEW),IBNEW=IBNEW_$J("",COL-IBL)
"RTN","IBCNS3",175,0)
 S IBNEW=IBNEW_$E(FIELD,1,FLNG),IBL=$L(FIELD),IBNEW=IBNEW_$J("",FLNG-IBL)
"RTN","IBCNS3",176,0)
 S IBNEW=IBNEW_$E(IBLINE,COL+FLNG+1,9999)
"RTN","IBCNS3",177,0)
 Q IBNEW
"RTN","IBCNS3",178,0)
 ;
"RTN","IBCNS3",179,0)
 ;
"RTN","IBCNS3",180,0)
 ;
"RTN","IBCNS3",181,0)
FNDCOV(IBINSFN,IBPLNFN,IBDATE) ; -- return group/plan coverage limitations indications
"RTN","IBCNS3",182,0)
 ;     input:   IBINSFN = pointer to insurance company entry in 36
"RTN","IBCNS3",183,0)
 ;              IBPLNFN = pointer to insurance plan entry in 355.3
"RTN","IBCNS3",184,0)
 ;              IBDATE  = date to check coverage, default today
"RTN","IBCNS3",185,0)
 ;    output:   if insurance company will not reimburse = WNR, if all covered then returns null
"RTN","IBCNS3",186,0)
 ;              otherwise list of first characters of types covered, if conditional then character in lower case
"RTN","IBCNS3",187,0)
 ;              
"RTN","IBCNS3",188,0)
 N IBOUT,IBX,IBY,IBCAT,IBCATFN S IBOUT="" S:'$G(IBDATE) IBDATE=DT I '$G(IBINSFN)!'$G(IBPLNFN) G FNDCOVQ
"RTN","IBCNS3",189,0)
 ;
"RTN","IBCNS3",190,0)
 I $P($G(^DIC(36,+IBINSFN,0)),U,2)="N" S IBOUT="*WNR*" G FNDCOVQ
"RTN","IBCNS3",191,0)
 F IBCAT="INPATIENT","OUTPATIENT","PHARMACY","MENTAL HEALTH","DENTAL","LONG TERM CARE" D
"RTN","IBCNS3",192,0)
 . S IBCATFN=+$O(^IBE(355.31,"B",IBCAT,"")) Q:'IBCATFN
"RTN","IBCNS3",193,0)
 . S IBY=$$PLCOV^IBCNSU3(+IBPLNFN,IBDATE,+IBCATFN) Q:'IBY
"RTN","IBCNS3",194,0)
 . S IBX=$S(IBCAT="PHARMACY":"R",1:$E(IBCAT)) S:IBY>1 IBX=$C($A(IBX)+32) S IBOUT=IBOUT_IBX
"RTN","IBCNS3",195,0)
 S:IBOUT="" IBOUT="no CV" I IBOUT?6U S IBOUT=""
"RTN","IBCNS3",196,0)
FNDCOVQ Q IBOUT
"RTN","IBCNS3",197,0)
 ;
"RTN","IBCNS3",198,0)
 ;
"RTN","IBCNS3",199,0)
FNDGRP(IBPLNFN) ; -- return group name/group policy
"RTN","IBCNS3",200,0)
 ;     input:   IBPLNFN = pointer to insurance plan entry in 355.3
"RTN","IBCNS3",201,0)
 ;    output:   group name or group number, if both group NUMBER, check for Individual plans
"RTN","IBCNS3",202,0)
 ;
"RTN","IBCNS3",203,0)
 N IBX,IBOUT S IBOUT=""
"RTN","IBCNS3",204,0)
 S IBX=$G(^IBA(355.3,+$G(IBPLNFN),0))
"RTN","IBCNS3",205,0)
 S IBOUT=$S($P(IBX,U,4)'="":$P(IBX,U,4),1:$P(IBX,U,3))
"RTN","IBCNS3",206,0)
 I $P(IBX,U,10) S IBOUT="Ind. Plan "_IBOUT
"RTN","IBCNS3",207,0)
FNDGRPQ Q IBOUT
"RTN","IBCNS3",208,0)
 ;
"RTN","IBCNS3",209,0)
 ;
"RTN","IBCNS3",210,0)
 ;
"RTN","IBCNS3",211,0)
 ;
"RTN","IBCNS3",212,0)
HDR ; -- print header
"RTN","IBCNS3",213,0)
 N IBX W @IOF
"RTN","IBCNS3",214,0)
 W !,"Insurance",?13,"COB",?17,"Subscriber ID",?35,"Group",?47,"Holder",?55,"Effectve",?65,"Expires",?75,"Only"
"RTN","IBCNS3",215,0)
 S IBX="",$P(IBX,"=",80)="=" W !,IBX
"RTN","IBCNS3",216,0)
 Q
"RTN","IBCNS3",217,0)
 ;
"RTN","IBCNS3",218,0)
EOP() ; ask user for return at end of page, return 1 if '^' entered
"RTN","IBCNS3",219,0)
 N IBQ,DIR,DIRUT,DUOUT,DTOUT,X,Y W ! S IBQ=0,DIR(0)="E" D ^DIR K DIR I $D(DUOUT)!($D(DIRUT)) S IBQ=1
"RTN","IBCNS3",220,0)
 Q IBQ
"RTN","IBCNSC01")
0^14^B53646224^B55064562
"RTN","IBCNSC01",1,0)
IBCNSC01 ;ALB/NLR - INSURANCE COMPANY EDIT ;6/1/05 10:06am
"RTN","IBCNSC01",2,0)
 ;;2.0;INTEGRATED BILLING;**52,137,191,184,232,320,349,371,399,416**;21-MAR-94;Build 58
"RTN","IBCNSC01",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSC01",4,0)
 ;
"RTN","IBCNSC01",5,0)
PARAM ; -- Insurance company parameters region
"RTN","IBCNSC01",6,0)
 N OFFSET,START,IBCNS0,IBCNS03,IBCNS06,IBCNS08,IBCNS13,IBCNS3
"RTN","IBCNSC01",7,0)
 S IBCNS0=$G(^DIC(36,+IBCNS,0)),IBCNS3=$G(^(3))
"RTN","IBCNSC01",8,0)
 S IBCNS03=$P(IBCNS0,"^",3),IBCNS06=$P(IBCNS0,"^",6),IBCNS08=$P(IBCNS0,"^",8)
"RTN","IBCNSC01",9,0)
 S IBCNS13=$G(^DIC(36,+IBCNS,.13))
"RTN","IBCNSC01",10,0)
 S START=1,OFFSET=2
"RTN","IBCNSC01",11,0)
 D SET^IBCNSP(START,OFFSET+25," Billing Parameters ",IORVON,IORVOFF)
"RTN","IBCNSC01",12,0)
 ;
"RTN","IBCNSC01",13,0)
 D SET^IBCNSP(START+1,OFFSET+1,"Signature Required?: "_$S(+IBCNS03:"YES",1:"NO"))
"RTN","IBCNSC01",14,0)
 D SET^IBCNSP(START+2,OFFSET+10,"Reimburse?: "_$E($$EXPAND^IBTRE(36,1,$P(IBCNS0,"^",2)),1,21))
"RTN","IBCNSC01",15,0)
 D SET^IBCNSP(START+3,OFFSET+3,"Mult. Bedsections: "_$S(+IBCNS06:"YES",IBCNS06=0:"NO",1:""))
"RTN","IBCNSC01",16,0)
 D SET^IBCNSP(START+4,OFFSET+6,"One Opt. Visit: "_$S(+IBCNS08:"YES",1:"NO"))
"RTN","IBCNSC01",17,0)
 D SET^IBCNSP(START+5,OFFSET+4,"Diff. Rev. Codes: "_$P(IBCNS0,"^",7))
"RTN","IBCNSC01",18,0)
 D SET^IBCNSP(START+6,OFFSET+1,"Amb. Sur. Rev. Code: "_$P(IBCNS0,"^",9))
"RTN","IBCNSC01",19,0)
 D SET^IBCNSP(START+7,OFFSET+1,"Rx Refill Rev. Code: "_$P(IBCNS0,"^",15))
"RTN","IBCNSC01",20,0)
 D SET^IBCNSP(START+8,OFFSET+3,"Filing Time Frame: "_$P(IBCNS0,"^",12)_$S(+$P(IBCNS0,"^",18):" ("_$$FTFN^IBCNSU31(,+IBCNS)_")",1:""))
"RTN","IBCNSC01",21,0)
 ;
"RTN","IBCNSC01",22,0)
 S OFFSET=45
"RTN","IBCNSC01",23,0)
 D SET^IBCNSP(START+1,OFFSET+4,"Type Of Coverage: "_$$EXPAND^IBTRE(36,.13,+$P(IBCNS0,U,13)))
"RTN","IBCNSC01",24,0)
 D SET^IBCNSP(START+2,OFFSET+7,"Billing Phone: "_$P(IBCNS13,"^",2))
"RTN","IBCNSC01",25,0)
 D SET^IBCNSP(START+3,OFFSET+2,"Verification Phone: "_$P(IBCNS13,"^",4))
"RTN","IBCNSC01",26,0)
 D SET^IBCNSP(START+4,OFFSET+2,"Precert Comp. Name: "_$P($G(^DIC(36,+$P(IBCNS13,"^",9),0)),"^",1))
"RTN","IBCNSC01",27,0)
 D SET^IBCNSP(START+5,OFFSET+7,"Precert Phone: "_$$PHONE(IBCNS13))
"RTN","IBCNSC01",28,0)
 I +IBCNS3=2 D SET^IBCNSP(START+6,OFFSET,"Max # Test Bills/Day: "_$P(IBCNS3,U,6))
"RTN","IBCNSC01",29,0)
 ;
"RTN","IBCNSC01",30,0)
 S START=11,OFFSET=2
"RTN","IBCNSC01",31,0)
 D SET^IBCNSP(START,OFFSET+28," EDI Parameters ",IORVON,IORVOFF)
"RTN","IBCNSC01",32,0)
 D SET^IBCNSP(START+1,OFFSET+13,"Transmit?: "_$S(+IBCNS3=1:"YES-LIVE",+IBCNS3=2:"TEST ONLY",1:"NO"))
"RTN","IBCNSC01",33,0)
 D SET^IBCNSP(START+2,OFFSET+1,"Inst Payer Primary ID: "_$P(IBCNS3,U,4))
"RTN","IBCNSC01",34,0)
 D SET^IBCNSP(START+3,OFFSET,"Inst Payer Sec ID Qual: "_$$GET1^DIQ(36,+IBCNS,6.01))
"RTN","IBCNSC01",35,0)
 D SET^IBCNSP(START+4,OFFSET+5,"Inst Payer Sec ID: "_$$GET1^DIQ(36,+IBCNS,6.02))
"RTN","IBCNSC01",36,0)
 D SET^IBCNSP(START+5,OFFSET,"Inst Payer Sec ID Qual: "_$$GET1^DIQ(36,+IBCNS,6.03))
"RTN","IBCNSC01",37,0)
 D SET^IBCNSP(START+6,OFFSET+5,"Inst Payer Sec ID: "_$$GET1^DIQ(36,+IBCNS,6.04))
"RTN","IBCNSC01",38,0)
 D SET^IBCNSP(START+7,OFFSET+12,"Bin Number: "_$P($G(^DIC(36,+IBCNS,3)),"^",3)) ;
"RTN","IBCNSC01",39,0)
 ;
"RTN","IBCNSC01",40,0)
 S OFFSET=41
"RTN","IBCNSC01",41,0)
 D SET^IBCNSP(START+1,OFFSET+8," Insurance Type: "_$$EXPAND^IBTRE(36,3.09,+$P(IBCNS3,U,9)))
"RTN","IBCNSC01",42,0)
 D SET^IBCNSP(START+2,OFFSET+1," Prof Payer Primary ID: "_$P(IBCNS3,U,2))
"RTN","IBCNSC01",43,0)
 D SET^IBCNSP(START+3,OFFSET," Prof Payer Sec ID Qual: "_$$GET1^DIQ(36,+IBCNS,6.05))
"RTN","IBCNSC01",44,0)
 D SET^IBCNSP(START+4,OFFSET+5," Prof Payer Sec ID: "_$$GET1^DIQ(36,+IBCNS,6.06))
"RTN","IBCNSC01",45,0)
 D SET^IBCNSP(START+5,OFFSET," Prof Payer Sec ID Qual: "_$$GET1^DIQ(36,+IBCNS,6.07))
"RTN","IBCNSC01",46,0)
 D SET^IBCNSP(START+6,OFFSET+5," Prof Payer Sec ID: "_$$GET1^DIQ(36,+IBCNS,6.08))
"RTN","IBCNSC01",47,0)
 Q
"RTN","IBCNSC01",48,0)
 ;
"RTN","IBCNSC01",49,0)
PHONE(IBCNS13) ; -- Compute precert company phone
"RTN","IBCNSC01",50,0)
 N IBX,IBSAVE,IBCNT S IBX=""
"RTN","IBCNSC01",51,0)
 I '$P(IBCNS13,"^",9) S IBX=$P(IBCNS13,"^",3) G PHONEQ
"RTN","IBCNSC01",52,0)
REDOX S IBSAVE=+$P(IBCNS13,"^",9)
"RTN","IBCNSC01",53,0)
 S IBCNT=$G(IBCNT)+1
"RTN","IBCNSC01",54,0)
 ; -- if you process the same co. more than once you are in an infinite loop
"RTN","IBCNSC01",55,0)
 I $D(IBCNT(IBCNS)) G PHONEQ
"RTN","IBCNSC01",56,0)
 S IBCNT(IBCNS)=""
"RTN","IBCNSC01",57,0)
 S IBCNS13=$G(^DIC(36,+$P(IBCNS13,"^",9),.13))
"RTN","IBCNSC01",58,0)
 S IBX=$P(IBCNS13,"^") S:$L($P(IBCNS13,"^",3)) IBX=$P(IBCNS13,"^",3)
"RTN","IBCNSC01",59,0)
 ; -- if process the same co. more than once you are in an infinite loop
"RTN","IBCNSC01",60,0)
 I $P(IBCNS13,"^",9),$P(IBCNS13,"^",9)'=IBSAVE G REDOX
"RTN","IBCNSC01",61,0)
PHONEQ Q IBX
"RTN","IBCNSC01",62,0)
 ;
"RTN","IBCNSC01",63,0)
MAIN ; -- Insurance company main address
"RTN","IBCNSC01",64,0)
 N OFFSET,START,IBCNS11,IBCNS13,IBADD
"RTN","IBCNSC01",65,0)
 S IBCNS11=$G(^DIC(36,+IBCNS,.11))
"RTN","IBCNSC01",66,0)
 S IBCNS13=$G(^DIC(36,+IBCNS,.13))
"RTN","IBCNSC01",67,0)
 S START=21,OFFSET=25
"RTN","IBCNSC01",68,0)
 D SET^IBCNSP(START,OFFSET," Main Mailing Address ",IORVON,IORVOFF)
"RTN","IBCNSC01",69,0)
 N OFFSET S OFFSET=2
"RTN","IBCNSC01",70,0)
 D SET^IBCNSP(START+1,OFFSET,"       Street: "_$P(IBCNS11,"^",1)) S IBADD=1
"RTN","IBCNSC01",71,0)
 D SET^IBCNSP(START+2,OFFSET,"     Street 2: "_$P(IBCNS11,"^",2)) S IBADD=2
"RTN","IBCNSC01",72,0)
 D SET^IBCNSP(START+3,OFFSET,"     Street 3: "_$P(IBCNS11,"^",3)) S IBADD=3
"RTN","IBCNSC01",73,0)
 ; D SET^IBCNSP(START+4,OFFSET,"Claim Off. ID: "_$P(IBCNS11,U,11))
"RTN","IBCNSC01",74,0)
 N OFFSET S OFFSET=45
"RTN","IBCNSC01",75,0)
 D SET^IBCNSP(START+1,OFFSET,"   City/State: "_$E($P(IBCNS11,"^",4),1,15)_$S($P(IBCNS11,"^",4)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCNS11,"^",5),0)),"^",2)_" "_$E($P(IBCNS11,"^",6),1,5))
"RTN","IBCNSC01",76,0)
 D SET^IBCNSP(START+2,OFFSET,"        Phone: "_$P(IBCNS13,"^",1))
"RTN","IBCNSC01",77,0)
 D SET^IBCNSP(START+3,OFFSET,"          Fax: "_$P(IBCNS11,"^",9))
"RTN","IBCNSC01",78,0)
 Q
"RTN","IBCNSC01",79,0)
 ;
"RTN","IBCNSC01",80,0)
 ;
"RTN","IBCNSC01",81,0)
PAYER ; This procedure builds the display for the payer associated with
"RTN","IBCNSC01",82,0)
 ; this insurance company.
"RTN","IBCNSC01",83,0)
 ; ESG - 7/29/02 - IIV project
"RTN","IBCNSC01",84,0)
 ;     -  9/9/09 - eIV updated
"RTN","IBCNSC01",85,0)
 ;
"RTN","IBCNSC01",86,0)
 NEW PAYERIEN,PAYR,APPDATA,APP,DATA,APPNAME,A1,A2,A3,A4,A5,A6,A7,A8
"RTN","IBCNSC01",87,0)
 NEW START,TITLE,OFFSET,IBLINE
"RTN","IBCNSC01",88,0)
 S PAYERIEN=$P($G(^DIC(36,+IBCNS,3)),U,10),PAYR="",APPDATA=0
"RTN","IBCNSC01",89,0)
 I PAYERIEN D
"RTN","IBCNSC01",90,0)
 . S PAYR=$G(^IBE(365.12,PAYERIEN,0))
"RTN","IBCNSC01",91,0)
 . S APP=0
"RTN","IBCNSC01",92,0)
 . F  S APP=$O(^IBE(365.12,PAYERIEN,1,APP)) Q:'APP  D
"RTN","IBCNSC01",93,0)
 .. S DATA=$G(^IBE(365.12,PAYERIEN,1,APP,0))
"RTN","IBCNSC01",94,0)
 .. S APPNAME=$$EXTERNAL^DILFD(365.121,.01,"",$P(DATA,U,1))
"RTN","IBCNSC01",95,0)
 .. I APPNAME="" Q
"RTN","IBCNSC01",96,0)
 .. I APPNAME="IIV" S APPNAME="eIV"   ; IB*2*416 - change external display to be eIV
"RTN","IBCNSC01",97,0)
 .. I $D(APPDATA(APPNAME)) Q
"RTN","IBCNSC01",98,0)
 .. S (A1,A2,A3,A4,A5,A6,A7)="NO",A8=""
"RTN","IBCNSC01",99,0)
 .. I $P(DATA,U,2) S A1="YES"      ; national active
"RTN","IBCNSC01",100,0)
 .. I $P(DATA,U,3) S A2="YES"      ; local active
"RTN","IBCNSC01",101,0)
 .. I $P(DATA,U,7) S A3="YES"      ; auto-accept
"RTN","IBCNSC01",102,0)
 .. I $P(DATA,U,8) S A4="YES"      ; ident inquiries require subscr ID (*416 field not used)
"RTN","IBCNSC01",103,0)
 .. I $P(DATA,U,9) S A5="YES"      ; use SSN for subscriber ID (*416 field not used)
"RTN","IBCNSC01",104,0)
 .. I $P(DATA,U,10) S A6="YES"     ; transmit SSN (*416 field not used)
"RTN","IBCNSC01",105,0)
 .. I $P(DATA,U,11) S A7="YES"     ; deactivated?
"RTN","IBCNSC01",106,0)
 .. ; A8 = deactivation date
"RTN","IBCNSC01",107,0)
 .. I $P(DATA,U,12) S A8=$P($$FMTE^XLFDT($P(DATA,U,12),"5Z"),"@",1)
"RTN","IBCNSC01",108,0)
 .. S APPDATA(APPNAME)=A1_U_A2_U_A3_U_A4_U_A5_U_A6_U_A7_U_A8
"RTN","IBCNSC01",109,0)
 .. S APPDATA=APPDATA+1
"RTN","IBCNSC01",110,0)
 .. Q
"RTN","IBCNSC01",111,0)
 . Q
"RTN","IBCNSC01",112,0)
 ;
"RTN","IBCNSC01",113,0)
 S START=$O(^TMP("IBCNSC",$J,""),-1)+1
"RTN","IBCNSC01",114,0)
 S IB1ST("PAYER")=START
"RTN","IBCNSC01",115,0)
 S TITLE=" Payer Information:  e-IV, e-Pharmacy "
"RTN","IBCNSC01",116,0)
 S OFFSET=(40-($L(TITLE)/2))\1+1
"RTN","IBCNSC01",117,0)
 D SET^IBCNSP(START,OFFSET,TITLE,IORVON,IORVOFF)
"RTN","IBCNSC01",118,0)
 D SET^IBCNSP(START+1,9,"Payer Name: "_$P(PAYR,U,1))
"RTN","IBCNSC01",119,0)
 D SET^IBCNSP(START+2,5,"VA National ID: "_$P(PAYR,U,2))
"RTN","IBCNSC01",120,0)
 D SET^IBCNSP(START+2,51,"CMS National ID: "_$P(PAYR,U,3))
"RTN","IBCNSC01",121,0)
 S IBLINE=START+2
"RTN","IBCNSC01",122,0)
 ;
"RTN","IBCNSC01",123,0)
 ; Handle the case where no application data is defined
"RTN","IBCNSC01",124,0)
 I 'APPDATA D  G PAYERX
"RTN","IBCNSC01",125,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",126,0)
 . D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC01",127,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",128,0)
 . D SET^IBCNSP(IBLINE,16,"Payer Application data is not defined!")
"RTN","IBCNSC01",129,0)
 . Q
"RTN","IBCNSC01",130,0)
 ;
"RTN","IBCNSC01",131,0)
 ; Display all the applications
"RTN","IBCNSC01",132,0)
 S APPNAME=""
"RTN","IBCNSC01",133,0)
 F  S APPNAME=$O(APPDATA(APPNAME)) Q:APPNAME=""  D
"RTN","IBCNSC01",134,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",135,0)
 . D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC01",136,0)
 . ;
"RTN","IBCNSC01",137,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",138,0)
 . D SET^IBCNSP(IBLINE,2,"Payer Application: "_APPNAME)
"RTN","IBCNSC01",139,0)
 . D SET^IBCNSP(IBLINE,51,"FSC Auto-Update: "_$P(APPDATA(APPNAME),U,3))
"RTN","IBCNSC01",140,0)
 . ;
"RTN","IBCNSC01",141,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",142,0)
 . D SET^IBCNSP(IBLINE,4,"National Active: "_$P(APPDATA(APPNAME),U,1))
"RTN","IBCNSC01",143,0)
 . D SET^IBCNSP(IBLINE,55,"Deactivated: "_$P(APPDATA(APPNAME),U,7))
"RTN","IBCNSC01",144,0)
 . ;
"RTN","IBCNSC01",145,0)
 . S IBLINE=IBLINE+1
"RTN","IBCNSC01",146,0)
 . D SET^IBCNSP(IBLINE,7,"Local Active: "_$P(APPDATA(APPNAME),U,2))
"RTN","IBCNSC01",147,0)
 . ;
"RTN","IBCNSC01",148,0)
 . ; If no deactivated date, then exit
"RTN","IBCNSC01",149,0)
 . I $P(APPDATA(APPNAME),U,8)="" Q
"RTN","IBCNSC01",150,0)
 . ;
"RTN","IBCNSC01",151,0)
 . D SET^IBCNSP(IBLINE,50,"Date Deactivated: "_$P(APPDATA(APPNAME),U,8))
"RTN","IBCNSC01",152,0)
 . ;
"RTN","IBCNSC01",153,0)
 . Q
"RTN","IBCNSC01",154,0)
PAYERX ;
"RTN","IBCNSC01",155,0)
 ; Two trailing blank lines after payer information display
"RTN","IBCNSC01",156,0)
 S IBLINE=IBLINE+1
"RTN","IBCNSC01",157,0)
 D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC01",158,0)
 S IBLINE=IBLINE+1
"RTN","IBCNSC01",159,0)
 D SET^IBCNSP(IBLINE,2," ")    ; blank line
"RTN","IBCNSC01",160,0)
 Q
"RTN","IBCNSC01",161,0)
 ;
"RTN","IBCNSC01",162,0)
 ;
"RTN","IBCNSC01",163,0)
REMARKS ;
"RTN","IBCNSC01",164,0)
 ;
"RTN","IBCNSC01",165,0)
 N OFFSET,START,IBLCNT,IBI
"RTN","IBCNSC01",166,0)
 S START=$O(^TMP("IBCNSC",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSC01",167,0)
 S IB1ST("REM")=START
"RTN","IBCNSC01",168,0)
 ;
"RTN","IBCNSC01",169,0)
 D SET^IBCNSP(START,OFFSET," Remarks ",IORVON,IORVOFF)
"RTN","IBCNSC01",170,0)
 S (IBLCNT,IBI)=0 F  S IBI=$O(^DIC(36,+IBCNS,11,IBI)) Q:IBI<1  D
"RTN","IBCNSC01",171,0)
 . S IBLCNT=IBLCNT+1
"RTN","IBCNSC01",172,0)
 . D SET^IBCNSP(START+IBLCNT,OFFSET,"  "_$E($G(^DIC(36,+IBCNS,11,IBI,0)),1,80))
"RTN","IBCNSC01",173,0)
 . Q
"RTN","IBCNSC01",174,0)
 D SET^IBCNSP(START+IBLCNT+1,OFFSET," ")   ; blank line after remarks
"RTN","IBCNSC01",175,0)
 Q
"RTN","IBCNSC01",176,0)
 ;
"RTN","IBCNSC01",177,0)
SYN ;
"RTN","IBCNSC01",178,0)
 N OFFSET,START,SYN,SYNOI
"RTN","IBCNSC01",179,0)
 S START=$O(^TMP("IBCNSC",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSC01",180,0)
 S IB1ST("SYN")=START
"RTN","IBCNSC01",181,0)
 D SET^IBCNSP(START,OFFSET," Synonyms ",IORVON,IORVOFF)
"RTN","IBCNSC01",182,0)
 S SYN="" F SYNOI=1:1:8 S SYN=$O(^DIC(36,+IBCNS,10,"B",SYN)) Q:SYN=""  D SET^IBCNSP(START+SYNOI,OFFSET,$S(SYNOI>7:"  ...edit to see more...",1:"  "_SYN))
"RTN","IBCNSC01",183,0)
 Q
"RTN","IBCNSC01",184,0)
 ;
"RTN","IBCNSC4")
0^38^B17661433^B17390042
"RTN","IBCNSC4",1,0)
IBCNSC4 ;ALB/TMP - INSURANCE PLAN DETAIL SCREEN UTILITIES ; 09-AUG-94
"RTN","IBCNSC4",2,0)
 ;;2.0;INTEGRATED BILLING;**43,85,103,251,416**;21-MAR-94;Build 58
"RTN","IBCNSC4",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSC4",4,0)
 ;
"RTN","IBCNSC4",5,0)
INIT ; -- Load the plan detail segments
"RTN","IBCNSC4",6,0)
 N IBLCNT
"RTN","IBCNSC4",7,0)
 K ^TMP("IBCNSCP",$J)
"RTN","IBCNSC4",8,0)
 K VALMQUIT
"RTN","IBCNSC4",9,0)
 S VALMBG=1,(IBLCNT,VALMCNT)=0
"RTN","IBCNSC4",10,0)
 D KILL^VALM10()
"RTN","IBCNSC4",11,0)
 ;
"RTN","IBCNSC4",12,0)
 Q:'$G(IBCPOL)
"RTN","IBCNSC4",13,0)
 ;
"RTN","IBCNSC4",14,0)
 S IBCPOLD=$G(^IBA(355.3,IBCPOL,0)),IBCND1=$G(^(1)),$P(IBCDFND,U,18)=IBCPOL
"RTN","IBCNSC4",15,0)
 S IBCPOLD2=$G(^IBA(355.3,IBCPOL,6)) ;; Daou/EEN adding BIN and PCN
"RTN","IBCNSC4",16,0)
 D POLICY^IBCNSP0,UR,LIM,AB,VER,COMMENT
"RTN","IBCNSC4",17,0)
 Q
"RTN","IBCNSC4",18,0)
 ;
"RTN","IBCNSC4",19,0)
UR ; -- UR region
"RTN","IBCNSC4",20,0)
 N START,OFFSET
"RTN","IBCNSC4",21,0)
 S START=1,OFFSET=43,VALMCNT=+$O(@VALMAR@(""),-1)
"RTN","IBCNSC4",22,0)
 D SET(START,OFFSET," Utilization Review Info ",IORVON,IORVOFF)
"RTN","IBCNSC4",23,0)
 D SET(START+1,OFFSET,"         Require UR: "_$$EXPAND^IBTRE(355.3,.05,$P(IBCPOLD,"^",5)))
"RTN","IBCNSC4",24,0)
 D SET(START+2,OFFSET,"   Require Amb Cert: "_$$EXPAND^IBTRE(355.3,.12,$P(IBCPOLD,"^",12)))
"RTN","IBCNSC4",25,0)
 D SET(START+3,OFFSET,"   Require Pre-Cert: "_$$EXPAND^IBTRE(355.3,.06,$P(IBCPOLD,"^",6)))
"RTN","IBCNSC4",26,0)
 D SET(START+4,OFFSET,"   Exclude Pre-Cond: "_$$EXPAND^IBTRE(355.3,.07,$P(IBCPOLD,"^",7)))
"RTN","IBCNSC4",27,0)
 D SET(START+5,OFFSET,"Benefits Assignable: "_$$EXPAND^IBTRE(355.3,.08,$P(IBCPOLD,"^",8)))
"RTN","IBCNSC4",28,0)
 Q
"RTN","IBCNSC4",29,0)
 ;
"RTN","IBCNSC4",30,0)
LIM ; Plan coverage limitations region
"RTN","IBCNSC4",31,0)
 N START,OFFSET
"RTN","IBCNSC4",32,0)
 S START=+$O(@VALMAR@(""),-1)+$S($P($G(IBCPOLD),U,14)]"":3,1:2),OFFSET=2
"RTN","IBCNSC4",33,0)
 D BLANK(START-1) S VALMCNT=VALMCNT+1
"RTN","IBCNSC4",34,0)
 D LIMBLD^IBCNSC41(START,OFFSET,.IBLCNT)
"RTN","IBCNSC4",35,0)
 Q
"RTN","IBCNSC4",36,0)
 ;
"RTN","IBCNSC4",37,0)
AB ; -- Annual benefit years region
"RTN","IBCNSC4",38,0)
 N OFFSET,START,ADT,Z
"RTN","IBCNSC4",39,0)
 S START=+$O(@VALMAR@(""),-1)+2,OFFSET=2
"RTN","IBCNSC4",40,0)
 D BLANK(START-1) S VALMCNT=VALMCNT+1
"RTN","IBCNSC4",41,0)
 D SET(START,OFFSET," Annual Benefit Dates ",IORVON,IORVOFF)
"RTN","IBCNSC4",42,0)
 I $O(^IBA(355.4,"APY",IBCPOL,""))="" D SET(START+1,OFFSET+2,"No Annual Benefits Information") G ABQ
"RTN","IBCNSC4",43,0)
 S ADT="" F Z=0:1:6 S ADT=$O(^IBA(355.4,"APY",IBCPOL,ADT)) Q:'ADT  D SET(START+1,OFFSET+3+(10*Z),$$DAT1^IBOUTL(-ADT))
"RTN","IBCNSC4",44,0)
 I ADT'="",$O(^IBA(355.4,"APY",IBCPOL,ADT))'="" D SET(START+1,OFFSET+3+(10*(Z+1)),"*More dates on file - use AB to see them")
"RTN","IBCNSC4",45,0)
ABQ Q
"RTN","IBCNSC4",46,0)
 ;
"RTN","IBCNSC4",47,0)
VER ; -- Plan detail User Information Region
"RTN","IBCNSC4",48,0)
 N OFFSET,START
"RTN","IBCNSC4",49,0)
 S START=+$O(@VALMAR@(""),-1)+2,OFFSET=2
"RTN","IBCNSC4",50,0)
 D BLANK(START-1) S VALMCNT=VALMCNT+1
"RTN","IBCNSC4",51,0)
 D SET(START,OFFSET," User Information ",IORVON,IORVOFF)
"RTN","IBCNSC4",52,0)
 I IBCND1="" D SET(START+1,OFFSET,"No User Information") G VERQ
"RTN","IBCNSC4",53,0)
 D SET(START+1,OFFSET,"      Entered By: "_$E($P($G(^VA(200,+$P(IBCND1,"^",2),0)),"^",1),1,20))
"RTN","IBCNSC4",54,0)
 D SET(START+2,OFFSET,"      Entered On: "_$$DAT1^IBOUTL(+IBCND1))
"RTN","IBCNSC4",55,0)
 D SET(START+3,OFFSET," Last Updated By: "_$E($P($G(^VA(200,+$P(IBCND1,"^",6),0)),"^",1),1,20))
"RTN","IBCNSC4",56,0)
 D SET(START+4,OFFSET," Last Updated On: "_$$DAT1^IBOUTL(+$P(IBCND1,"^",5)))
"RTN","IBCNSC4",57,0)
VERQ Q
"RTN","IBCNSC4",58,0)
 ;
"RTN","IBCNSC4",59,0)
COMMENT ; -- Plan detail comment region
"RTN","IBCNSC4",60,0)
 N START,OFFSET,LINE
"RTN","IBCNSC4",61,0)
 S START=+$O(@VALMAR@(""),-1)+2,OFFSET=2,LINE=1
"RTN","IBCNSC4",62,0)
 D BLANK(START-1) S VALMCNT=VALMCNT+1
"RTN","IBCNSC4",63,0)
 D SET(START,OFFSET," Plan Comments ",IORVON,IORVOFF)
"RTN","IBCNSC4",64,0)
 S IBI=0
"RTN","IBCNSC4",65,0)
 F LINE=LINE:1 S IBI=$O(^IBA(355.3,+IBCPOL,11,IBI)) Q:'IBI  D SET(START+LINE,OFFSET,"  "_$E($G(^IBA(355.3,+IBCPOL,11,IBI,0)),1,80))
"RTN","IBCNSC4",66,0)
 D SET(START+LINE,OFFSET,"  ")
"RTN","IBCNSC4",67,0)
 S IBLCNT=$G(IBLCNT)+LINE
"RTN","IBCNSC4",68,0)
 Q
"RTN","IBCNSC4",69,0)
 ;
"RTN","IBCNSC4",70,0)
BLANK(LINE) ; -- Build blank line
"RTN","IBCNSC4",71,0)
 D SET^VALM10(.LINE,$J("",90))
"RTN","IBCNSC4",72,0)
 Q
"RTN","IBCNSC4",73,0)
 ;
"RTN","IBCNSC4",74,0)
SET(LINE,COL,TEXT,ON,OFF) ; -- set display info in array
"RTN","IBCNSC4",75,0)
 I '$D(@VALMAR@(LINE,0)) D BLANK(.LINE) S VALMCNT=$G(VALMCNT)+1
"RTN","IBCNSC4",76,0)
 D SET^VALM10(.LINE,$$SETSTR^VALM1(.TEXT,@VALMAR@(LINE,0),.COL,$L(TEXT)))
"RTN","IBCNSC4",77,0)
 D:$G(ON)]""!($G(OFF)]"") CNTRL^VALM10(.LINE,.COL,$L(TEXT),$G(ON),$G(OFF))
"RTN","IBCNSC4",78,0)
 W:'(LINE#5) "."
"RTN","IBCNSC4",79,0)
 Q
"RTN","IBCNSC4",80,0)
 ;
"RTN","IBCNSC4",81,0)
HDR ; Active plan list header
"RTN","IBCNSC4",82,0)
 N IBCNS0,IBLEAD,X,X2
"RTN","IBCNSC4",83,0)
 S IBCNS0=$G(^DIC(36,+IBCNS,0))
"RTN","IBCNSC4",84,0)
 S IBLEAD=$S($G(IBIND):"All ",1:"")_$S($G(IBW):"",1:"Active ")_"Plans for: "_$P(IBCNS0,U)_" Insurance Company"
"RTN","IBCNSC4",85,0)
 S VALMHDR(1)=$$SETSTR^VALM1(IBLEAD,"",1,80)
"RTN","IBCNSC4",86,0)
 S X=$TR($J("",$L(IBLEAD)),""," ")
"RTN","IBCNSC4",87,0)
 S VALMHDR(2)=$$SETSTR^VALM1(X,"",$L(IBLEAD)+1,80)
"RTN","IBCNSC4",88,0)
 S X="#" I $G(IBIND) S X="#  + => Indiv. Plan"
"RTN","IBCNSC4",89,0)
 I $G(IBW) S X=$E(X_$J("",23),1,23)_"* => Inactive Plan"
"RTN","IBCNSC4",90,0)
 S VALMHDR(3)=$$SETSTR^VALM1("Pre-  Pre-  Ben",X,64,17)
"RTN","IBCNSC4",91,0)
 Q
"RTN","IBCNSC4",92,0)
 ;
"RTN","IBCNSC41")
0^39^B9252371^B8406316
"RTN","IBCNSC41",1,0)
IBCNSC41 ;ALB/TMP - INSURANCE PLAN SCREEN UTILITIES (CONT) ; 15-AUG-95
"RTN","IBCNSC41",2,0)
 ;;2.0;INTEGRATED BILLING;**43,416**;21-MAR-94;Build 58
"RTN","IBCNSC41",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSC41",4,0)
 ;
"RTN","IBCNSC41",5,0)
HDR ; -- Plan detail screen header
"RTN","IBCNSC41",6,0)
 S VALMHDR(1)="Plan Information for: "_$E($P($G(^DIC(36,+$G(IBCPOLD),0)),"^"),1,20)_" Insurance Company",VALMHDR(2)=$J("",40)_"** Plan Currently "_$S($P(IBCPOLD,U,11):"Ina",1:"A")_"ctive **"
"RTN","IBCNSC41",7,0)
 Q
"RTN","IBCNSC41",8,0)
 ;
"RTN","IBCNSC41",9,0)
HELP ; -- help code
"RTN","IBCNSC41",10,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBCNSC41",11,0)
 Q
"RTN","IBCNSC41",12,0)
 ;
"RTN","IBCNSC41",13,0)
EXIT ; -- exit code
"RTN","IBCNSC41",14,0)
 K VALMBCK,^TMP("IBCNSCP",$J),IBVPCLBG,IBVPCLEN
"RTN","IBCNSC41",15,0)
 D CLEAN^VALM10,CLEAR^VALM1
"RTN","IBCNSC41",16,0)
 Q
"RTN","IBCNSC41",17,0)
 ;
"RTN","IBCNSC41",18,0)
LIMBLD(START,OFFSET,IBLCNT) ; Build actual limit display
"RTN","IBCNSC41",19,0)
 ;
"RTN","IBCNSC41",20,0)
 N COV,COVD,COVFN,IBCNT,LEDT,LIM,LINE,X1,Z0
"RTN","IBCNSC41",21,0)
 S LINE=3
"RTN","IBCNSC41",22,0)
 D SET^IBCNSC4(START,OFFSET," Plan Coverage Limitations ",IORVON,IORVOFF)
"RTN","IBCNSC41",23,0)
 D SET^IBCNSC4(START+1,OFFSET,"  Coverage            Effective Date   Covered?       Limit Comments")
"RTN","IBCNSC41",24,0)
 D SET^IBCNSC4(START+2,OFFSET,"  --------            --------------   --------       --------------")
"RTN","IBCNSC41",25,0)
 ;
"RTN","IBCNSC41",26,0)
 S LIM=0
"RTN","IBCNSC41",27,0)
 F  S LIM=$O(^IBE(355.31,LIM)) Q:'LIM  D
"RTN","IBCNSC41",28,0)
 . S COV=$P($G(^IBE(355.31,LIM,0)),U,1)     ; coverage category name
"RTN","IBCNSC41",29,0)
 . ;
"RTN","IBCNSC41",30,0)
 . ; check if no entry on file for this coverage category
"RTN","IBCNSC41",31,0)
 . I '$D(^IBA(355.32,"APCD",IBCPOL,LIM)) D  Q
"RTN","IBCNSC41",32,0)
 .. D SET^IBCNSC4(START+LINE,OFFSET,"  "_$E(COV_$J("",18),1,18)_$J("",19)_"BY DEFAULT")
"RTN","IBCNSC41",33,0)
 .. S LINE=LINE+1
"RTN","IBCNSC41",34,0)
 .. Q
"RTN","IBCNSC41",35,0)
 . ;
"RTN","IBCNSC41",36,0)
 . S IBCNT=0     ; count of the number of entries displayed for each coverage category
"RTN","IBCNSC41",37,0)
 . S LEDT=""
"RTN","IBCNSC41",38,0)
 . F  S LEDT=$O(^IBA(355.32,"APCD",IBCPOL,LIM,LEDT)) Q:LEDT=""  D
"RTN","IBCNSC41",39,0)
 .. S COVFN=+$O(^IBA(355.32,"APCD",IBCPOL,LIM,+LEDT,""))
"RTN","IBCNSC41",40,0)
 .. S COVD=$G(^IBA(355.32,+COVFN,0))
"RTN","IBCNSC41",41,0)
 .. ;
"RTN","IBCNSC41",42,0)
 .. S IBCNT=IBCNT+1
"RTN","IBCNSC41",43,0)
 .. S X1="  "_$E($S(IBCNT=1:COV,1:"")_$J("",18),1,18) ; Don't dup category name display
"RTN","IBCNSC41",44,0)
 .. S X1=X1_"  "_$$FO^IBCNEUT1($$FMTE^XLFDT(-LEDT,"5Z"),10)_$J("",7)_$S($P(COVD,U,4):$S($P(COVD,U,4)<2:"YES"_$J("",8),$P(COVD,U,4)=2:"CONDITIONAL",1:"UNKNOWN    "),1:"NO"_$J("",9))_$J("",5)
"RTN","IBCNSC41",45,0)
 .. D SET^IBCNSC4(START+LINE,OFFSET,X1)
"RTN","IBCNSC41",46,0)
 .. I '$O(^IBA(355.32,COVFN,2,0)) S LINE=LINE+1
"RTN","IBCNSC41",47,0)
 .. S Z0=0 F  S Z0=$O(^IBA(355.32,COVFN,2,Z0)) Q:'Z0  D SET^IBCNSC4(START+LINE,OFFSET+54,$G(^IBA(355.32,COVFN,2,Z0,0))) S LINE=LINE+1
"RTN","IBCNSC41",48,0)
 .. Q
"RTN","IBCNSC41",49,0)
 . Q
"RTN","IBCNSC41",50,0)
 ;
"RTN","IBCNSC41",51,0)
 S IBLCNT=LINE-3
"RTN","IBCNSC41",52,0)
 Q
"RTN","IBCNSP")
0^40^B42954824^B42668156
"RTN","IBCNSP",1,0)
IBCNSP ;ALB/AAS - INSURANCE MANAGEMENT - EXPANDED POLICY ;05-MAR-1993
"RTN","IBCNSP",2,0)
 ;;2.0;INTEGRATED BILLING;**6,28,43,52,85,251,363,371,416**;21-MAR-94;Build 58
"RTN","IBCNSP",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSP",4,0)
% ;
"RTN","IBCNSP",5,0)
EN ; -- main entry point for IBCNS EXPANDED POLICY
"RTN","IBCNSP",6,0)
 N IB1ST
"RTN","IBCNSP",7,0)
 K VALMQUIT,IBPPOL
"RTN","IBCNSP",8,0)
 S IBTOP="IBCNSP"
"RTN","IBCNSP",9,0)
 D EN^VALM("IBCNS EXPANDED POLICY")
"RTN","IBCNSP",10,0)
 Q
"RTN","IBCNSP",11,0)
 ;
"RTN","IBCNSP",12,0)
HDR ; -- header code
"RTN","IBCNSP",13,0)
 N W,X,Y,Z
"RTN","IBCNSP",14,0)
 S VALMHDR(1)="Expanded Policy Information for: "_$E($P(^DPT(DFN,0),U),1,20)_"  "_$P($$PT^IBEFUNC(DFN),U,2)
"RTN","IBCNSP",15,0)
 S Z=$G(^DPT(DFN,.312,+$P(IBPPOL,U,4),0))
"RTN","IBCNSP",16,0)
 S W=$P($G(^IBA(355.3,+$P(Z,U,18),0)),U,11)
"RTN","IBCNSP",17,0)
 S Y=$E($P($G(^DIC(36,+Z,0)),U),1,20)_" Insurance Company"
"RTN","IBCNSP",18,0)
 S X="** Plan Currently "_$S(W:"Ina",1:"A")_"ctive **"
"RTN","IBCNSP",19,0)
 S VALMHDR(2)=$$SETSTR^VALM1(X,Y,48,29)
"RTN","IBCNSP",20,0)
 Q
"RTN","IBCNSP",21,0)
 ;
"RTN","IBCNSP",22,0)
INIT ; -- init variables and list array
"RTN","IBCNSP",23,0)
 K VALMQUIT
"RTN","IBCNSP",24,0)
 S VALMCNT=0,VALMBG=1
"RTN","IBCNSP",25,0)
 I '$D(IBPPOL) D PPOL Q:$D(VALMQUIT)
"RTN","IBCNSP",26,0)
 K ^TMP("IBCNSVP",$J)
"RTN","IBCNSP",27,0)
 D BLD,HDR
"RTN","IBCNSP",28,0)
 Q
"RTN","IBCNSP",29,0)
 ;
"RTN","IBCNSP",30,0)
BLD ; -- list builder
"RTN","IBCNSP",31,0)
 K ^TMP("IBCNSVP",$J),^TMP("IBCNSVPDX",$J)
"RTN","IBCNSP",32,0)
 D KILL^VALM10()
"RTN","IBCNSP",33,0)
 F I=1:1:24 D BLANK(.I)    ; start with 24 blank lines
"RTN","IBCNSP",34,0)
 N IBCDFND,IBCDFND1,IBCDFND2,IBCDFND4,IBCDFND5
"RTN","IBCNSP",35,0)
 S IBCDFND=$G(^DPT(DFN,.312,$P(IBPPOL,U,4),0)),IBCDFND1=$G(^(1)),IBCDFND2=$G(^(2)),IBCDFND4=$G(^(4)),IBCDFND5=$G(^(5))
"RTN","IBCNSP",36,0)
 S IBCPOL=+$P(IBCDFND,U,18),IBCNS=+IBCDFND,IBCDFN=$P(IBPPOL,U,4)
"RTN","IBCNSP",37,0)
 S IBCPOLD=$G(^IBA(355.3,+$P(IBCDFND,U,18),0)),IBCPOLD1=$G(^(1))
"RTN","IBCNSP",38,0)
 S IBCPOLD2=$G(^IBA(355.3,+$G(IBCPOL),6)) ;; Daou/EEN adding BIN and PCN
"RTN","IBCNSP",39,0)
 ;
"RTN","IBCNSP",40,0)
 D POLICY^IBCNSP0                   ; plan information
"RTN","IBCNSP",41,0)
 D INS^IBCNSP0                      ; insurance company
"RTN","IBCNSP",42,0)
 D UR                               ; utilization review info
"RTN","IBCNSP",43,0)
 D EFFECT                           ; effective dates & source of info
"RTN","IBCNSP",44,0)
 D SUBSC^IBCNSP01                   ; subscriber info
"RTN","IBCNSP",45,0)
 D EMP                              ; subscriber's employer info
"RTN","IBCNSP",46,0)
 D SPON^IBCNSP0                     ; insured person's info
"RTN","IBCNSP",47,0)
 D ID^IBCNSP01                      ; ins co ID numbers (IB*2*371)
"RTN","IBCNSP",48,0)
 D PLIM                             ; plan coverage limitations
"RTN","IBCNSP",49,0)
 D VER^IBCNSP01                     ; user/verifier/editor info
"RTN","IBCNSP",50,0)
 D CONTACT^IBCNSP0                  ; last insurance contact
"RTN","IBCNSP",51,0)
 D COMMENT                          ; comments - policy & plan
"RTN","IBCNSP",52,0)
 D RIDER^IBCNSP01                   ; policy rider info
"RTN","IBCNSP",53,0)
 ;
"RTN","IBCNSP",54,0)
 S VALMCNT=+$O(^TMP("IBCNSVP",$J,""),-1)
"RTN","IBCNSP",55,0)
 Q
"RTN","IBCNSP",56,0)
 ;
"RTN","IBCNSP",57,0)
COMMENT ; -- Comment region
"RTN","IBCNSP",58,0)
 N START,OFFSET,IBL,IBI
"RTN","IBCNSP",59,0)
 S (START,IBL)=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSP",60,0)
 S IB1ST("COMMENT")=START
"RTN","IBCNSP",61,0)
 D SET(START,OFFSET," Comment -- Patient Policy ",IORVON,IORVOFF)
"RTN","IBCNSP",62,0)
 S IBL=IBL+1
"RTN","IBCNSP",63,0)
 D SET(IBL,OFFSET,$S($P(IBCDFND1,U,8)="":"None",1:$P(IBCDFND1,U,8)))
"RTN","IBCNSP",64,0)
 S IBL=IBL+1
"RTN","IBCNSP",65,0)
 D SET(IBL,OFFSET," ")
"RTN","IBCNSP",66,0)
 S IBL=IBL+1
"RTN","IBCNSP",67,0)
 D SET(IBL,OFFSET," Comment -- Group Plan ",IORVON,IORVOFF)
"RTN","IBCNSP",68,0)
 S IBI=0 F  S IBI=$O(^IBA(355.3,+IBCPOL,11,IBI)) Q:IBI<1  D
"RTN","IBCNSP",69,0)
 . S IBL=IBL+1
"RTN","IBCNSP",70,0)
 . D SET(IBL,OFFSET,"  "_$E($G(^IBA(355.3,+IBCPOL,11,IBI,0)),1,80))
"RTN","IBCNSP",71,0)
 . Q
"RTN","IBCNSP",72,0)
 S IBL=IBL+1 D SET(IBL,OFFSET," ")
"RTN","IBCNSP",73,0)
 S IBL=IBL+1 D SET(IBL,OFFSET," ")
"RTN","IBCNSP",74,0)
 Q
"RTN","IBCNSP",75,0)
 ;
"RTN","IBCNSP",76,0)
EFFECT ; -- Effective date region
"RTN","IBCNSP",77,0)
 N START,OFFSET
"RTN","IBCNSP",78,0)
 S START=16,OFFSET=45
"RTN","IBCNSP",79,0)
 D SET(START,OFFSET-4," Effective Dates & Source ",IORVON,IORVOFF)
"RTN","IBCNSP",80,0)
 D SET(START+1,OFFSET," Effective Date: "_$$DAT1^IBOUTL($P(IBCDFND,U,8)))
"RTN","IBCNSP",81,0)
 D SET(START+2,OFFSET,"Expiration Date: "_$$DAT1^IBOUTL($P(IBCDFND,U,4)))
"RTN","IBCNSP",82,0)
 D SET(START+3,OFFSET," Source of Info: "_$$EXPAND^IBTRE(2.312,1.09,$P($G(IBCDFND1),U,9)))
"RTN","IBCNSP",83,0)
 D SET(START+4,OFFSET-4,"Policy Not Billable: "_$S($P($G(^DPT(DFN,.312,IBCDFN,3)),"^",4):"YES",1:"NO"))
"RTN","IBCNSP",84,0)
 Q
"RTN","IBCNSP",85,0)
 ;
"RTN","IBCNSP",86,0)
UR ; -- UR of insurance region
"RTN","IBCNSP",87,0)
 N START,OFFSET
"RTN","IBCNSP",88,0)
 S START=16,OFFSET=2
"RTN","IBCNSP",89,0)
 D SET(START,OFFSET," Utilization Review Info ",IORVON,IORVOFF)
"RTN","IBCNSP",90,0)
 D SET(START+1,OFFSET,"         Require UR: "_$$EXPAND^IBTRE(355.3,.05,$P(IBCPOLD,U,5)))
"RTN","IBCNSP",91,0)
 D SET(START+2,OFFSET,"   Require Amb Cert: "_$$EXPAND^IBTRE(355.3,.12,$P(IBCPOLD,U,12)))
"RTN","IBCNSP",92,0)
 D SET(START+3,OFFSET,"   Require Pre-Cert: "_$$EXPAND^IBTRE(355.3,.06,$P(IBCPOLD,U,6)))
"RTN","IBCNSP",93,0)
 D SET(START+4,OFFSET,"   Exclude Pre-Cond: "_$$EXPAND^IBTRE(355.3,.07,$P(IBCPOLD,U,7)))
"RTN","IBCNSP",94,0)
 D SET(START+5,OFFSET,"Benefits Assignable: "_$$EXPAND^IBTRE(355.3,.08,$P(IBCPOLD,U,8)))
"RTN","IBCNSP",95,0)
 Q
"RTN","IBCNSP",96,0)
EMP ; -- Insurance Employer Region
"RTN","IBCNSP",97,0)
 N OFFSET,START,IBADD
"RTN","IBCNSP",98,0)
 S START=24,OFFSET=40
"RTN","IBCNSP",99,0)
 D SET(START,OFFSET," Subscriber's Employer Information ",IORVON,IORVOFF)
"RTN","IBCNSP",100,0)
 D SET(START+1,OFFSET,"Emp Sponsored Plan: "_$S(+$P(IBCDFND2,U,10):"Yes",1:"No"))
"RTN","IBCNSP",101,0)
 D SET(START+2,OFFSET,"          Employer: "_$P(IBCDFND2,U,9))
"RTN","IBCNSP",102,0)
 D SET(START+3,OFFSET," Employment Status: "_$$EXPAND^IBTRE(2.312,2.11,$P(IBCDFND2,U,11)))
"RTN","IBCNSP",103,0)
 D SET(START+4,OFFSET,"   Retirement Date: "_$$DAT1^IBOUTL($P(IBCDFND2,U,12)))
"RTN","IBCNSP",104,0)
 D SET(START+5,OFFSET,"Claims to Employer: "_$S(+IBCDFND2:"Yes, Send to Employer",1:"No, Send to Insurance Company"))
"RTN","IBCNSP",105,0)
 ;
"RTN","IBCNSP",106,0)
 D SET(START+6,OFFSET,"            Street: "_$P(IBCDFND2,U,2)) S IBADD=1
"RTN","IBCNSP",107,0)
 I $P(IBCDFND2,U,3)'="" D SET(START+7,OFFSET,"          Street 2: "_$P(IBCDFND2,U,3)) S IBADD=2
"RTN","IBCNSP",108,0)
 I $P(IBCDFND2,U,4)'="" D SET(START+8,OFFSET,"          Street 3: "_$P(IBCDFND2,U,4)) S IBADD=3
"RTN","IBCNSP",109,0)
 D SET(START+6+IBADD,OFFSET,"        City/State: "_$E($P(IBCDFND2,U,5),1,15)_$S($P(IBCDFND2,U,5)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCDFND2,U,6),0)),U,2)_" "_$E($P(IBCDFND2,U,7),1,5))
"RTN","IBCNSP",110,0)
 D SET(START+7+IBADD,OFFSET,"             Phone: "_$P(IBCDFND2,U,8))
"RTN","IBCNSP",111,0)
 ;
"RTN","IBCNSP",112,0)
 ; couple of blank lines to end this section
"RTN","IBCNSP",113,0)
 D SET(START+8+IBADD,2," ")
"RTN","IBCNSP",114,0)
 D SET(START+9+IBADD,2," ")
"RTN","IBCNSP",115,0)
 ;
"RTN","IBCNSP",116,0)
EMPQ Q
"RTN","IBCNSP",117,0)
 ;
"RTN","IBCNSP",118,0)
PLIM ; plan coverage limitations/plan limitation category display
"RTN","IBCNSP",119,0)
 N START,END S START=$O(^TMP("IBCNSVP",$J,""),-1)+1
"RTN","IBCNSP",120,0)
 S IB1ST("PLIM")=START
"RTN","IBCNSP",121,0)
 D LIMBLD^IBCNSC41(START,2)
"RTN","IBCNSP",122,0)
 S END=$O(^TMP("IBCNSVP",$J,""),-1)  ; last line constructed
"RTN","IBCNSP",123,0)
 D SET(END+1,2," ")    ; 2 blank lines to end this section
"RTN","IBCNSP",124,0)
 D SET(END+2,2," ")
"RTN","IBCNSP",125,0)
PLIMX ;
"RTN","IBCNSP",126,0)
 Q
"RTN","IBCNSP",127,0)
 ; 
"RTN","IBCNSP",128,0)
HELP ; -- help code
"RTN","IBCNSP",129,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBCNSP",130,0)
 Q
"RTN","IBCNSP",131,0)
 ;
"RTN","IBCNSP",132,0)
EXIT ; -- exit code
"RTN","IBCNSP",133,0)
 K IBPPOL,VALMQUIT,IBCNS,IBCPOL,IBCPOLD,IBCPOLD1,IBCPOLD2,IBCDFND,IBCDFND1,IBCDFND2,IBVPCLBG,IBVPCLEN
"RTN","IBCNSP",134,0)
 D CLEAN^VALM10,CLEAR^VALM1
"RTN","IBCNSP",135,0)
 Q
"RTN","IBCNSP",136,0)
 ;
"RTN","IBCNSP",137,0)
EXPND ; -- expand code
"RTN","IBCNSP",138,0)
 Q
"RTN","IBCNSP",139,0)
 ;
"RTN","IBCNSP",140,0)
PPOL ; -- select patient, select policy
"RTN","IBCNSP",141,0)
 I '$D(DFN) D  G:$D(VALMQUIT) PPOLQ
"RTN","IBCNSP",142,0)
 .S DIC="^DPT(",DIC(0)="AEQMN" D ^DIC
"RTN","IBCNSP",143,0)
 .S DFN=+Y
"RTN","IBCNSP",144,0)
 I $G(DFN)<1 S VALMQUIT="" G PPOLQ
"RTN","IBCNSP",145,0)
 ;
"RTN","IBCNSP",146,0)
 I '$O(^DPT(DFN,.312,0)) W !!,"Patient doesn't have Insurance" K DFN G PPOL
"RTN","IBCNSP",147,0)
 ;
"RTN","IBCNSP",148,0)
 S DIC="^DPT("_DFN_",.312,",DIC(0)="AEQMN",DIC("A")="Select Patient Policy: "
"RTN","IBCNSP",149,0)
 D ^DIC I +Y<1 S VALMQUIT=""
"RTN","IBCNSP",150,0)
 G:$D(VALMQUIT) PPOLQ
"RTN","IBCNSP",151,0)
 S IBPPOL="^2^"_DFN_U_+Y_U_$G(^DPT(DFN,.312,+Y,0))
"RTN","IBCNSP",152,0)
PPOLQ K DIC Q
"RTN","IBCNSP",153,0)
 ;
"RTN","IBCNSP",154,0)
BLANK(LINE) ; -- Build blank line
"RTN","IBCNSP",155,0)
 D SET^VALM10(.LINE,$J("",80))
"RTN","IBCNSP",156,0)
 Q
"RTN","IBCNSP",157,0)
 ;
"RTN","IBCNSP",158,0)
SET(LINE,COL,TEXT,ON,OFF) ; -- set display info in array
"RTN","IBCNSP",159,0)
 I '$D(@VALMAR@(LINE,0)) D BLANK(.LINE) S VALMCNT=$G(VALMCNT)+1
"RTN","IBCNSP",160,0)
 D SET^VALM10(.LINE,$$SETSTR^VALM1(.TEXT,@VALMAR@(LINE,0),.COL,$L(TEXT)))
"RTN","IBCNSP",161,0)
 D:$G(ON)]""!($G(OFF)]"") CNTRL^VALM10(.LINE,.COL,$L(TEXT),$G(ON),$G(OFF))
"RTN","IBCNSP",162,0)
 W:'(LINE#5) "."
"RTN","IBCNSP",163,0)
 Q
"RTN","IBCNSP01")
0^43^B33683555^B32701738
"RTN","IBCNSP01",1,0)
IBCNSP01 ;ALB/AAS - INSURANCE MANAGEMENT - EXPANDED POLICY  ;05-MAR-1993
"RTN","IBCNSP01",2,0)
 ;;2.0;INTEGRATED BILLING;**43,52,85,251,371,377,416**;21-MAR-94;Build 58
"RTN","IBCNSP01",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSP01",4,0)
 ;
"RTN","IBCNSP01",5,0)
 ;
"RTN","IBCNSP01",6,0)
% D SUBSC,RIDER
"RTN","IBCNSP01",7,0)
 Q
"RTN","IBCNSP01",8,0)
 ;
"RTN","IBCNSP01",9,0)
SUBSC ; -- subscriber region
"RTN","IBCNSP01",10,0)
 N OFFSET,START
"RTN","IBCNSP01",11,0)
 S START=24,OFFSET=2
"RTN","IBCNSP01",12,0)
 D SET^IBCNSP(START,OFFSET," Subscriber Information ",IORVON,IORVOFF)
"RTN","IBCNSP01",13,0)
 S Y=$P(IBCDFND,"^",6),C=$P(^DD(2.312,6,0),"^",2) D Y^DIQ
"RTN","IBCNSP01",14,0)
 D SET^IBCNSP(START+1,OFFSET," Whose Insurance: "_Y)
"RTN","IBCNSP01",15,0)
 D SET^IBCNSP(START+2,OFFSET," Subscriber Name: "_$P(IBCDFND,"^",17))
"RTN","IBCNSP01",16,0)
 S Y=$P(IBCDFND4,"^",3),C=$P(^DD(2.312,4.03,0),"^",2) D Y^DIQ
"RTN","IBCNSP01",17,0)
 D SET^IBCNSP(START+3,OFFSET,"    Relationship: "_Y)
"RTN","IBCNSP01",18,0)
 D SET^IBCNSP(START+4,OFFSET,"      Primary ID: "_$P(IBCDFND,"^",2))
"RTN","IBCNSP01",19,0)
 S Y=$P(IBCDFND,"^",20),C=$P(^DD(2.312,.2,0),"^",2) D Y^DIQ
"RTN","IBCNSP01",20,0)
 D SET^IBCNSP(START+5,OFFSET,"Coord.  Benefits: "_Y)
"RTN","IBCNSP01",21,0)
 D SET^IBCNSP(START+6,OFFSET,"Primary Provider: "_$P(IBCDFND4,"^",1))
"RTN","IBCNSP01",22,0)
 D SET^IBCNSP(START+7,OFFSET," Prim Prov Phone: "_$P(IBCDFND4,"^",2))
"RTN","IBCNSP01",23,0)
 Q
"RTN","IBCNSP01",24,0)
 ;
"RTN","IBCNSP01",25,0)
VER ; -- Entered/Verfied Region
"RTN","IBCNSP01",26,0)
 N OFFSET,START,EIVFLG
"RTN","IBCNSP01",27,0)
 S EIVFLG=+$P(IBCDFND4,"^",4)
"RTN","IBCNSP01",28,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSP01",29,0)
 S IB1ST("VERIFY")=START
"RTN","IBCNSP01",30,0)
 D SET^IBCNSP(START,OFFSET," User Information ",IORVON,IORVOFF)
"RTN","IBCNSP01",31,0)
 D SET^IBCNSP(START+1,OFFSET,"      Entered By: "_$E($P($G(^VA(200,+$P(IBCDFND1,"^",2),0)),"^",1),1,20))
"RTN","IBCNSP01",32,0)
 D SET^IBCNSP(START+2,OFFSET,"      Entered On: "_$$DAT1^IBOUTL(+IBCDFND1))
"RTN","IBCNSP01",33,0)
 D SET^IBCNSP(START+3,OFFSET,"Last Verified By: "_$S(EIVFLG:"AUTOUPDATE,IB-eIV",1:$E($P($G(^VA(200,+$P(IBCDFND1,"^",4),0)),"^",1),1,20)))
"RTN","IBCNSP01",34,0)
 D SET^IBCNSP(START+4,OFFSET,"Last Verified On: "_$$DAT1^IBOUTL(+$P(IBCDFND1,"^",3)))
"RTN","IBCNSP01",35,0)
 D SET^IBCNSP(START+5,OFFSET," Last Updated By: "_$S(EIVFLG:"AUTOUPDATE,IB-eIV",1:$E($P($G(^VA(200,+$P(IBCDFND1,"^",6),0)),"^",1),1,20)))
"RTN","IBCNSP01",36,0)
 D SET^IBCNSP(START+6,OFFSET," Last Updated On: "_$$DAT1^IBOUTL(+$P(IBCDFND1,"^",5)))
"RTN","IBCNSP01",37,0)
 D SET^IBCNSP(START+7,2," ")   ; 2 blank lines to end section
"RTN","IBCNSP01",38,0)
 D SET^IBCNSP(START+8,2," ")
"RTN","IBCNSP01",39,0)
VERQ Q
"RTN","IBCNSP01",40,0)
 ;
"RTN","IBCNSP01",41,0)
ID ; Subscriber and patient primary and secondary ID's and qualifiers
"RTN","IBCNSP01",42,0)
 NEW START,OFFSET,IBL,G,PCE,QUAL,QUAL1
"RTN","IBCNSP01",43,0)
 S G=IBCDFND5
"RTN","IBCNSP01",44,0)
 S (START,IBL)=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2
"RTN","IBCNSP01",45,0)
 S IB1ST("ID")=START
"RTN","IBCNSP01",46,0)
 D SET^IBCNSP(START,OFFSET," Insurance Company ID Numbers (use Subscriber Update Action) ",IORVON,IORVOFF)
"RTN","IBCNSP01",47,0)
 S IBL=IBL+1
"RTN","IBCNSP01",48,0)
 D SET^IBCNSP(IBL,OFFSET,"  Subscriber Primary ID: "_$P(IBCDFND,U,2))
"RTN","IBCNSP01",49,0)
 ;
"RTN","IBCNSP01",50,0)
 F PCE=3,5,7 D            ; subscriber secondary IDs
"RTN","IBCNSP01",51,0)
 . I $P(G,U,PCE)="" Q     ; no secondary ID#
"RTN","IBCNSP01",52,0)
 . S QUAL=$P(G,U,PCE-1)   ; internal qualifier code
"RTN","IBCNSP01",53,0)
 . S QUAL1=$S(QUAL="23":"Client#",QUAL="IG":"Ins. Policy#",QUAL="SY":"SSN",1:"Unknown")
"RTN","IBCNSP01",54,0)
 . S IBL=IBL+1
"RTN","IBCNSP01",55,0)
 . D SET^IBCNSP(IBL,OFFSET,"Subscriber Secondary ID: "_$P(G,U,PCE))
"RTN","IBCNSP01",56,0)
 . D SET^IBCNSP(IBL,52,"ID Qual: "_QUAL_" ("_QUAL1_")")
"RTN","IBCNSP01",57,0)
 . Q
"RTN","IBCNSP01",58,0)
 ;
"RTN","IBCNSP01",59,0)
 ; patient=subscriber so skip over patient ID# display
"RTN","IBCNSP01",60,0)
 I +$P(IBCDFND,U,16)=1 G ID1
"RTN","IBCNSP01",61,0)
 ;
"RTN","IBCNSP01",62,0)
 S IBL=IBL+1 D SET^IBCNSP(IBL,2," ")   ; blank line
"RTN","IBCNSP01",63,0)
 S IBL=IBL+1
"RTN","IBCNSP01",64,0)
 D SET^IBCNSP(IBL,OFFSET,"     Patient Primary ID: "_$P(G,U,1))
"RTN","IBCNSP01",65,0)
 ;
"RTN","IBCNSP01",66,0)
 F PCE=9,11,13 D          ; patient secondary IDs
"RTN","IBCNSP01",67,0)
 . I $P(G,U,PCE)="" Q     ; no secondary ID#
"RTN","IBCNSP01",68,0)
 . S QUAL=$P(G,U,PCE-1)   ; internal qualifier code
"RTN","IBCNSP01",69,0)
 . S QUAL1=$S(QUAL="23":"Client#",QUAL="IG":"Ins. Policy#",QUAL="SY":"SSN",1:"Unknown")
"RTN","IBCNSP01",70,0)
 . S IBL=IBL+1
"RTN","IBCNSP01",71,0)
 . D SET^IBCNSP(IBL,OFFSET,"   Patient Secondary ID: "_$P(G,U,PCE))
"RTN","IBCNSP01",72,0)
 . D SET^IBCNSP(IBL,52,"ID Qual: "_QUAL_" ("_QUAL1_")")
"RTN","IBCNSP01",73,0)
 . Q
"RTN","IBCNSP01",74,0)
 ;
"RTN","IBCNSP01",75,0)
ID1 ; end of section - 2 blank lines
"RTN","IBCNSP01",76,0)
 S IBL=IBL+1 D SET^IBCNSP(IBL,2," ")
"RTN","IBCNSP01",77,0)
 S IBL=IBL+1 D SET^IBCNSP(IBL,2," ")
"RTN","IBCNSP01",78,0)
IDQ ;
"RTN","IBCNSP01",79,0)
 Q
"RTN","IBCNSP01",80,0)
 ;
"RTN","IBCNSP01",81,0)
RIDER ; -- Personal policy riders
"RTN","IBCNSP01",82,0)
 N OFFSET,START,IBI,IBL,IBPR,IBPRD
"RTN","IBCNSP01",83,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=2,IBL=0
"RTN","IBCNSP01",84,0)
 D SET^IBCNSP(START,OFFSET," Personal Riders ",IORVON,IORVOFF)
"RTN","IBCNSP01",85,0)
 S IBI="" F  S IBI=$O(^IBA(355.7,"APP",DFN,IBCDFN,IBI)) Q:'IBI  S IBPR=$O(^(IBI,0)),IBPRD=+$G(^IBA(355.7,IBPR,0)),IBL=IBL+1 D
"RTN","IBCNSP01",86,0)
 . D SET^IBCNSP(START+IBL,OFFSET,"   Rider #"_IBL_": "_$$EXPAND^IBTRE(355.7,.01,IBPRD))
"RTN","IBCNSP01",87,0)
 . Q
"RTN","IBCNSP01",88,0)
 S IBL=IBL+1 D SET^IBCNSP(START+IBL,OFFSET," ")
"RTN","IBCNSP01",89,0)
 S IBL=IBL+1 D SET^IBCNSP(START+IBL,OFFSET," ")
"RTN","IBCNSP01",90,0)
 Q
"RTN","IBCNSP01",91,0)
 ;
"RTN","IBCNSP01",92,0)
AI ; -- Add ins. verification entry
"RTN","IBCNSP01",93,0)
 ;    called from ai^ibcnsp1
"RTN","IBCNSP01",94,0)
 ;
"RTN","IBCNSP01",95,0)
 ; -- see if current inpatient
"RTN","IBCNSP01",96,0)
 D INP^VADPT I +VAIN(1) D
"RTN","IBCNSP01",97,0)
 .S IBTRN=$O(^IBT(356,"AD",+VAIN(1),0))
"RTN","IBCNSP01",98,0)
 ;
"RTN","IBCNSP01",99,0)
 S IBXIFN=$O(^IBE(356.11,"ACODE",85,0))
"RTN","IBCNSP01",100,0)
 ;
"RTN","IBCNSP01",101,0)
 ; -- if not tracking id allow selecting
"RTN","IBCNSP01",102,0)
 I '$G(IBTRN) D  G:IBQUIT AIQ
"RTN","IBCNSP01",103,0)
 .W !,"You can now enter a contact and relate it to a Claims Tracking Admission entry."
"RTN","IBCNSP01",104,0)
 .S DIC("A")="Select RELATED ADMISSION DATE: "
"RTN","IBCNSP01",105,0)
 .S DIC="^IBT(356,",DIC(0)="AEQ",D="ADFN"_DFN,DIC("S")="I $P(^(0),U,5)"
"RTN","IBCNSP01",106,0)
 .D IX^DIC K DA,DR,DIC,DIE I $D(DUOUT)!($D(DTOUT)) S IBQUIT=1 Q
"RTN","IBCNSP01",107,0)
 .I +Y>1 S IBTRN=+Y
"RTN","IBCNSP01",108,0)
 ;
"RTN","IBCNSP01",109,0)
 I '$G(IBTRN) W !!,"Warning: This contact is not associated with any care in Claims Tracking.",!,"You may only edit or view this contact using this action.",!
"RTN","IBCNSP01",110,0)
 ;
"RTN","IBCNSP01",111,0)
 ; -- select date
"RTN","IBCNSP01",112,0)
 S IBOK=0,IBI=0 F  S IBI=$O(^IBT(356.2,"D",DFN,IBI)) Q:'IBI  I $P($G(^IBT(356.2,+IBI,0)),"^",4)=IBXIFN,$P($G(^(1)),"^",5)=IBCDFN S IBOK=1
"RTN","IBCNSP01",113,0)
 I IBOK D  G:IBQUIT AIQ
"RTN","IBCNSP01",114,0)
 .S DIC="^IBT(356.2,",DIC("A")="Select Contact Date: "
"RTN","IBCNSP01",115,0)
 .S X="??",DIC(0)="EQ",DIC("S")="I $P($G(^(1)),U,5)=IBCDFN,$P(^(0),U,4)=IBXIFN" ;,DLAYGO=356.2
"RTN","IBCNSP01",116,0)
 .S D="ADFN"_DFN
"RTN","IBCNSP01",117,0)
 .D IX^DIC K DIC,DR,DA,DIE,D I $D(DUOUT)!($D(DTOUT)) S IBQUIT=1
"RTN","IBCNSP01",118,0)
 ;
"RTN","IBCNSP01",119,0)
 S DIC="^IBT(356.2,",DIC("A")="Select Contact Date: ",DIC("B")="TODAY"
"RTN","IBCNSP01",120,0)
 S DIC("DR")=".02////"_$G(IBTRN)_";.04////"_IBXIFN_";.05////"_DFN_";.19////1;1.01///NOW;1.02////"_DUZ_";1.05////"_IBCDFN
"RTN","IBCNSP01",121,0)
 S DIC(0)="AEQL",DIC("S")="I $P(^(0),U,5)=DFN,$P($G(^(1)),U,5)=IBCDFN,$P(^(0),U,4)=IBXIFN",DLAYGO=356.2
"RTN","IBCNSP01",122,0)
 D ^DIC K DIC
"RTN","IBCNSP01",123,0)
 I $D(DTOUT)!($D(DUOUT))!(+Y<1) G AIQ
"RTN","IBCNSP01",124,0)
 S IBTRC=+Y
"RTN","IBCNSP01",125,0)
 I $G(IBTRC),$G(IBTRN),'$P(^IBT(356.2,+IBTRC,0),"^",2) S DA=IBTRC,DIE="^IBT(356.2,",DR=".02////"_$G(IBTRN) D ^DIE
"RTN","IBCNSP01",126,0)
 ;
"RTN","IBCNSP01",127,0)
 ; -- edit ins ver type
"RTN","IBCNSP01",128,0)
 D EDIT^IBTRCD1("[IBT INS VERIFICATION]",1)
"RTN","IBCNSP01",129,0)
AIQ Q
"RTN","IBCNSU1")
0^3^B18872542^B18337578
"RTN","IBCNSU1",1,0)
IBCNSU1 ;ALB/AAS - INSURANCE UTILITY ROUTINE ;19-MAY-93
"RTN","IBCNSU1",2,0)
 ;;2.0;INTEGRATED BILLING;**103,133,244,371,416**;21-MAR-94;Build 58
"RTN","IBCNSU1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSU1",4,0)
 ;
"RTN","IBCNSU1",5,0)
RCHK(X) ; -- Input transform for different revenue codes in file 36
"RTN","IBCNSU1",6,0)
 ;    Returns 1 if passes, 0 if not pass input transform
"RTN","IBCNSU1",7,0)
 ;
"RTN","IBCNSU1",8,0)
 N I,Y,RC,NO S Y=0
"RTN","IBCNSU1",9,0)
 I $G(X)="" G RCHKQ
"RTN","IBCNSU1",10,0)
 F I=1:1 S RC=$P(X,",",I) Q:RC=""  I $S(RC?3N:0,RC?5N:0,1:1) S NO=1 Q
"RTN","IBCNSU1",11,0)
 I '$G(NO) S Y=1
"RTN","IBCNSU1",12,0)
RCHKQ Q Y
"RTN","IBCNSU1",13,0)
 ;
"RTN","IBCNSU1",14,0)
BU(DFN,IBCPOL,IBYR,IBCDFN,IBASK) ; -- Return entry in Benefits Used file
"RTN","IBCNSU1",15,0)
 ;     Input:  IBCDFN  = pointer to patient file policy (2.312)
"RTN","IBCNSU1",16,0)
 ;             DFN     = patient pointer        
"RTN","IBCNSU1",17,0)
 ;             IBCPOL  = pointer to health insurance policy file
"RTN","IBCNSU1",18,0)
 ;             IBYR    = fileman internal date, year will be calendar
"RTN","IBCNSU1",19,0)
 ;                       year of the internal date, Default = dt
"RTN","IBCNSU1",20,0)
 ;             IBASK   = 1 if want to ask okay to add new entry
"RTN","IBCNSU1",21,0)
 ;
"RTN","IBCNSU1",22,0)
 ;    Output:  IBCBU   = pointer to Benefits Used file if added,
"RTN","IBCNSU1",23,0)
 ;                       else null
"RTN","IBCNSU1",24,0)
 ;
"RTN","IBCNSU1",25,0)
 N DIR,IBCBU
"RTN","IBCNSU1",26,0)
 S IBCBU=""
"RTN","IBCNSU1",27,0)
 I $G(IBCPOL)="" G BUQ
"RTN","IBCNSU1",28,0)
 I $G(IBYR)="" S IBYR=DT
"RTN","IBCNSU1",29,0)
 ;
"RTN","IBCNSU1",30,0)
 ;if no match display message
"RTN","IBCNSU1",31,0)
 I '$O(^IBA(355.4,"APY",IBCPOL,-IBYR,0)) W !!,"You cannot add a new Benefits Used BENEFIT YEAR",!! G BUQ
"RTN","IBCNSU1",32,0)
 ;
"RTN","IBCNSU1",33,0)
 ; -- try to find entry for policy for year
"RTN","IBCNSU1",34,0)
 S IBCBU=$O(^IBA(355.5,"APPY",DFN,IBCPOL,-IBYR,IBCDFN,0))
"RTN","IBCNSU1",35,0)
 ;
"RTN","IBCNSU1",36,0)
 ; -- if no match add new entry
"RTN","IBCNSU1",37,0)
 I 'IBCBU D
"RTN","IBCNSU1",38,0)
 .I $G(IBASK) S DIR(0)="Y",DIR("A")="Are you adding a new Benefits Used YEAR",DIR("B")="YES" D ^DIR I $D(DIRUT)!(Y<1) S VALMQUIT="" Q
"RTN","IBCNSU1",39,0)
 .S IBCBU=$$ADDBU(DFN,IBCPOL,IBYR,IBCDFN)
"RTN","IBCNSU1",40,0)
 .Q
"RTN","IBCNSU1",41,0)
 ;
"RTN","IBCNSU1",42,0)
BUQ Q IBCBU
"RTN","IBCNSU1",43,0)
 ;
"RTN","IBCNSU1",44,0)
ADDBU(DFN,IBCPOL,IBYR,IBCDFN) ; -- add entries to Benefits Used file
"RTN","IBCNSU1",45,0)
 ;     Input:  DFN     = pointer to patient file
"RTN","IBCNSU1",46,0)
 ;             IBCDFN  = point to patient policy (2.312)
"RTN","IBCNSU1",47,0)
 ;             IBCPOL  = pointer to health insurance policy file
"RTN","IBCNSU1",48,0)
 ;             IBYR    = fileman internal date, year will be calendar
"RTN","IBCNSU1",49,0)
 ;                       year of the internal date, Default = dt
"RTN","IBCNSU1",50,0)
 ;
"RTN","IBCNSU1",51,0)
 ;    Output:  IBCBU   = pointer to Benefits Used file if added,
"RTN","IBCNSU1",52,0)
 ;                       else null
"RTN","IBCNSU1",53,0)
 ;
"RTN","IBCNSU1",54,0)
 N %DT,IBN1,IBCBU,DIC,DIE,DR,DA,DLAYGO,DO,DD
"RTN","IBCNSU1",55,0)
 S IBCBU=""
"RTN","IBCNSU1",56,0)
 I $G(IBCDFN)="" G ADDBUQ
"RTN","IBCNSU1",57,0)
 I $G(IBCPOL)="" G ADDBUQ
"RTN","IBCNSU1",58,0)
 I $G(IBYR)="" S IBYR=DT
"RTN","IBCNSU1",59,0)
 K DD,DO,DIC,DR S DIC="^IBA(355.5,",DIC(0)="L",DLAYGO=355.5
"RTN","IBCNSU1",60,0)
 ;
"RTN","IBCNSU1",61,0)
 ;S IBYR=$E(IBYR,1,3)_"0000"
"RTN","IBCNSU1",62,0)
 S X=IBCPOL D FILE^DICN I +Y<0 G ADDBUQ
"RTN","IBCNSU1",63,0)
 S (IBCBU,DA)=+Y,DIE="^IBA(355.5,",DR=".02////"_DFN_";.03////"_IBYR_";.17////"_IBCDFN_";1.01///NOW;1.02////"_DUZ
"RTN","IBCNSU1",64,0)
 D ^DIE K DIC,DIE,DA,DR
"RTN","IBCNSU1",65,0)
ADDBUQ Q IBCBU
"RTN","IBCNSU1",66,0)
 ;
"RTN","IBCNSU1",67,0)
VET() ; -- Input Transform for sub-file 2.312, Name of Insured (#17)
"RTN","IBCNSU1",68,0)
 ;    Quit 1 to stuff Patient Name
"RTN","IBCNSU1",69,0)
 ;    Quit 0 to not stuff and allow editing
"RTN","IBCNSU1",70,0)
 ;
"RTN","IBCNSU1",71,0)
 N IBY,IB0 S IBY=0
"RTN","IBCNSU1",72,0)
 G VETQ    ; IB*2*371 - Allow edits to the patient name in all cases
"RTN","IBCNSU1",73,0)
 S IB0=$G(^DPT(+$G(DA(1)),.312,+$G(DA),0))
"RTN","IBCNSU1",74,0)
 I $P(IB0,"^",6)'="v" G VETQ
"RTN","IBCNSU1",75,0)
 I +IB0'=+$$GETWNR^IBCNSMM1 S IBY=1 G VETQ
"RTN","IBCNSU1",76,0)
 I '$D(X),$P(IB0,"^",17)="" S IBY=1
"RTN","IBCNSU1",77,0)
VETQ Q IBY
"RTN","IBCNSU1",78,0)
 ;
"RTN","IBCNSU1",79,0)
 ;
"RTN","IBCNSU1",80,0)
SUBID ; -- Input Transform for sub-file #2.312, Subscriber ID (#1)
"RTN","IBCNSU1",81,0)
 N NODE,L,X1
"RTN","IBCNSU1",82,0)
 S NODE=$G(^DPT(DA(1),.312,DA,0))
"RTN","IBCNSU1",83,0)
 ;
"RTN","IBCNSU1",84,0)
 ; - if the policy is a Medicare policy, make sure the subscriber ID
"RTN","IBCNSU1",85,0)
 ;   is a valid HICN number
"RTN","IBCNSU1",86,0)
 I $P(NODE,U,1)=+$$GETWNR^IBCNSMM1 S X=$TR(X,"-","") I '$$VALHIC^IBCNSMM(X) D HLP^IBCNSM32 K X Q
"RTN","IBCNSU1",87,0)
 ;
"RTN","IBCNSU1",88,0)
 ; If subscriber ID is the SSN of patient, remove all extraneous characters
"RTN","IBCNSU1",89,0)
 S L=$$NOPUNCT^IBCEF($P($G(^DPT(DA(1),0)),U,9),1)    ; patient SSN
"RTN","IBCNSU1",90,0)
 S X1=$$NOPUNCT^IBCEF(X,1)  ; X1 is user's response w/o punctuation
"RTN","IBCNSU1",91,0)
 I X1?9N,X1=L S X=X1
"RTN","IBCNSU1",92,0)
 ;
"RTN","IBCNSU1",93,0)
 K:$L(X)>20!($L(X)<3) X     ; Answer must be 3-20 characters in length
"RTN","IBCNSU1",94,0)
 Q
"RTN","IBCNSU1",95,0)
 ;
"RTN","IBCNSU1",96,0)
 ;
"RTN","IBCNSU1",97,0)
HICN(DFN) ; -- return Patient's Medicare HIC number
"RTN","IBCNSU1",98,0)
 ;    Return HICN of Medicare WNR Part A or Part B
"RTN","IBCNSU1",99,0)
 ;    Return -1 if none exits
"RTN","IBCNSU1",100,0)
 ;
"RTN","IBCNSU1",101,0)
 N IBWNR,IBX,IBY,IB0
"RTN","IBCNSU1",102,0)
 S IBWNR=$$GETWNR^IBCNSMM1,IBY=""
"RTN","IBCNSU1",103,0)
 I '$O(^DPT(DFN,.312,"B",+IBWNR,0)) S IBY=-1 G HICNQ
"RTN","IBCNSU1",104,0)
 S IBX=0 F  S IBX=$O(^DPT(DFN,.312,"B",+IBWNR,IBX)) Q:('IBX)!(IBY]"")  D
"RTN","IBCNSU1",105,0)
 .S IB0=$G(^DPT(DFN,.312,IBX,0))
"RTN","IBCNSU1",106,0)
 .I $P(IB0,U,18)'=$P(IBWNR,U,3),$P(IB0,U,18)'=$P(IBWNR,U,5) Q
"RTN","IBCNSU1",107,0)
 .; 8/18/2003 - Added translation code to remove hyphens if they exist.
"RTN","IBCNSU1",108,0)
 .I $P(IB0,U,2)]"" S IBY=$TR($P(IB0,U,2),"- ","")
"RTN","IBCNSU1",109,0)
 S:IBY="" IBY=-1
"RTN","IBCNSU1",110,0)
HICNQ Q IBY
"RTN","IBCNSU1",111,0)
 ;
"RTN","IBCNSU1",112,0)
CHKQUAL(DFN,IEN,QUAL,PC1,PC2) ; check for duplicate qualifiers for patient
"RTN","IBCNSU1",113,0)
 ; and subscriber secondary ID's.  All parameters required.
"RTN","IBCNSU1",114,0)
 ;
"RTN","IBCNSU1",115,0)
 ;   DFN - internal patient#
"RTN","IBCNSU1",116,0)
 ;   IEN - ien of 2.312 subfile
"RTN","IBCNSU1",117,0)
 ;  QUAL - passed in response of the user (this is what is being 
"RTN","IBCNSU1",118,0)
 ;         checked to see if it is valid)
"RTN","IBCNSU1",119,0)
 ;   PC1 - this is the piece# for one of the other qualifiers
"RTN","IBCNSU1",120,0)
 ;   PC2 - this is the piece# for one of the other qualifiers
"RTN","IBCNSU1",121,0)
 ;
"RTN","IBCNSU1",122,0)
 ; Function returns 1 if the entered qualifier is OK.
"RTN","IBCNSU1",123,0)
 ; Function returns 0 if the entered qualifier is not OK.  It is either
"RTN","IBCNSU1",124,0)
 ;                    a duplicate or is otherwise invalid.
"RTN","IBCNSU1",125,0)
 ;
"RTN","IBCNSU1",126,0)
 NEW OK,DATA,INS
"RTN","IBCNSU1",127,0)
 S OK=1
"RTN","IBCNSU1",128,0)
 I $G(QUAL)="" G CHKQUALX
"RTN","IBCNSU1",129,0)
 S DATA=$G(^DPT(+$G(DFN),.312,+$G(IEN),5))
"RTN","IBCNSU1",130,0)
 I $G(QUAL)=$P(DATA,U,+$G(PC1)) D CQ1 G CHKQUALX   ; duplicate
"RTN","IBCNSU1",131,0)
 I $G(QUAL)=$P(DATA,U,+$G(PC2)) D CQ1 G CHKQUALX   ; duplicate
"RTN","IBCNSU1",132,0)
 ;
"RTN","IBCNSU1",133,0)
 ; prevent the SSN qualifier when Medicare is the payer
"RTN","IBCNSU1",134,0)
 S INS=+$G(^DPT(+$G(DFN),.312,+$G(IEN),0))
"RTN","IBCNSU1",135,0)
 I $G(QUAL)="SY",$$MCRWNR^IBEFUNC(INS) D CQ2 G CHKQUALX
"RTN","IBCNSU1",136,0)
 ;
"RTN","IBCNSU1",137,0)
CHKQUALX ;
"RTN","IBCNSU1",138,0)
 Q OK
"RTN","IBCNSU1",139,0)
 ;
"RTN","IBCNSU1",140,0)
CQ1 ; specific error message#1
"RTN","IBCNSU1",141,0)
 S OK=0
"RTN","IBCNSU1",142,0)
 D EN^DDIOL("You cannot use the same qualifier more than once.",,"!!")
"RTN","IBCNSU1",143,0)
 D EN^DDIOL("",,"!!?5")
"RTN","IBCNSU1",144,0)
 Q
"RTN","IBCNSU1",145,0)
 ;
"RTN","IBCNSU1",146,0)
CQ2 ; specific error message#2
"RTN","IBCNSU1",147,0)
 S OK=0
"RTN","IBCNSU1",148,0)
 D EN^DDIOL("You cannot use qualifier 'SY' for Medicare.",,"!!")
"RTN","IBCNSU1",149,0)
 D EN^DDIOL("",,"!!?5")
"RTN","IBCNSU1",150,0)
 Q
"RTN","IBCNSU1",151,0)
 ;
"RTN","IBJPI")
0^1^B20701382^B59509234
"RTN","IBJPI",1,0)
IBJPI ;DAOU/BHS - IBJP eIV SITE PARAMETERS SCREEN ;14-JUN-2002
"RTN","IBJPI",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,316,416**;21-MAR-94;Build 58
"RTN","IBJPI",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBJPI",4,0)
 ;
"RTN","IBJPI",5,0)
 ; eIV - Electronic Insurance Verification Interface parameters
"RTN","IBJPI",6,0)
 ;
"RTN","IBJPI",7,0)
EN ; main entry pt for IBJP IIV SITE PARAMS
"RTN","IBJPI",8,0)
 N POP,X,CTRLCOL,VALMHDR,VALMCNT,%DT
"RTN","IBJPI",9,0)
 D EN^VALM("IBJP IIV SITE PARAMETERS")
"RTN","IBJPI",10,0)
 Q
"RTN","IBJPI",11,0)
 ;
"RTN","IBJPI",12,0)
HDR ; header 
"RTN","IBJPI",13,0)
 S VALMHDR(1)="Only authorized persons may edit this data."
"RTN","IBJPI",14,0)
 Q
"RTN","IBJPI",15,0)
 ;
"RTN","IBJPI",16,0)
INIT ; init vars & list array
"RTN","IBJPI",17,0)
 K ^TMP($J,"IBJPI")
"RTN","IBJPI",18,0)
 ; Kills data and video control arrays with active list
"RTN","IBJPI",19,0)
 D CLEAN^VALM10
"RTN","IBJPI",20,0)
 D BLD
"RTN","IBJPI",21,0)
 Q
"RTN","IBJPI",22,0)
 ;
"RTN","IBJPI",23,0)
HELP ; help
"RTN","IBJPI",24,0)
 D FULL^VALM1
"RTN","IBJPI",25,0)
 W @IOF
"RTN","IBJPI",26,0)
 W !,"This screen displays all of the eIV Site Parameters used to manage the"
"RTN","IBJPI",27,0)
 W !,"eIV application used for electronic Insurance Verification."
"RTN","IBJPI",28,0)
 W !!,"The General Parameters section concerns overall parameters for"
"RTN","IBJPI",29,0)
 W !,"monitoring the interface and controlling eIV communication between"
"RTN","IBJPI",30,0)
 W !,"VistA and the EC located in Austin."
"RTN","IBJPI",31,0)
 W !!,"The Batch Extracts section concerns extract-specific parameters"
"RTN","IBJPI",32,0)
 W !,"including active/inactive status and selection criteria."
"RTN","IBJPI",33,0)
 D PAUSE^VALM1
"RTN","IBJPI",34,0)
 W @IOF
"RTN","IBJPI",35,0)
 S VALMBCK="R"
"RTN","IBJPI",36,0)
 Q
"RTN","IBJPI",37,0)
 ;
"RTN","IBJPI",38,0)
EXIT ; exit
"RTN","IBJPI",39,0)
 K ^TMP($J,"IBJPI")
"RTN","IBJPI",40,0)
 D CLEAN^VALM10
"RTN","IBJPI",41,0)
 Q
"RTN","IBJPI",42,0)
 ;
"RTN","IBJPI",43,0)
BLD ; build screen array
"RTN","IBJPI",44,0)
 N IBLN,IBCOL,IBWID,IBIIV,IBIIVB,IBIEN,CT,IBEX1,IBEX2,IBEX,IEN
"RTN","IBJPI",45,0)
 N IBST,IBDATA,DISYS,X,STATUS,AIEN,ADATA
"RTN","IBJPI",46,0)
 ;
"RTN","IBJPI",47,0)
 S (IBLN,VALMCNT)=0,IBCOL=3,IBIIV=$G(^IBE(350.9,1,51))
"RTN","IBJPI",48,0)
 ; -- Gen Params
"RTN","IBJPI",49,0)
 S IBWID=49
"RTN","IBJPI",50,0)
 S IBLN=$$SETN("General Parameters",IBLN,IBCOL,1,)
"RTN","IBJPI",51,0)
 S IBLN=$$SET("Days between electronic re-verification checks:  ",$P(IBIIV,U,1),IBLN,IBWID)
"RTN","IBJPI",52,0)
 S IBLN=$$SET("Send daily statistical report via MailMan:  ",$S($P(IBIIV,U,2):"YES",$P(IBIIV,U,2)=0:"NO",1:""),IBLN,IBWID)
"RTN","IBJPI",53,0)
 I $P(IBIIV,U,2) S IBLN=$$SET("Time of day for daily statistical report:  ",$P(IBIIV,U,3),IBLN,IBWID)
"RTN","IBJPI",54,0)
 S IBLN=$$SET("Mail Group for eIV messages:  ",$$MGRP^IBCNEUT5,IBLN,IBWID)
"RTN","IBJPI",55,0)
 S IBLN=$$SET("HL7 Response Processing Method:  ",$S($P(IBIIV,U,13)="B":"BATCH",$P(IBIIV,U,13)="I":"IMMEDIATE",1:""),IBLN,IBWID)
"RTN","IBJPI",56,0)
 I $P(IBIIV,U,13)="B" D
"RTN","IBJPI",57,0)
 . S IBLN=$$SET("HL7 Batch Start Time:  ",$P(IBIIV,U,14),IBLN,IBWID)
"RTN","IBJPI",58,0)
 . S IBLN=$$SET("HL7 Batch Stop Time:  ",$P(IBIIV,U,19),IBLN,IBWID)
"RTN","IBJPI",59,0)
 . Q
"RTN","IBJPI",60,0)
 ;
"RTN","IBJPI",61,0)
 S IBLN=$$SET("Contact Person:  ",$S($P(IBIIV,U,16)'="":$$GET1^DIQ(200,$P(IBIIV,U,16)_",",.01,"E"),1:""),IBLN,IBWID)
"RTN","IBJPI",62,0)
 S IBLN=$$SET("Send MailMan message if communication problem:  ",$S($P(IBIIV,U,20):"YES",$P(IBIIV,U,20)=0:"NO",1:""),IBLN,IBWID)
"RTN","IBJPI",63,0)
 ;
"RTN","IBJPI",64,0)
 ; Skip lines in between sections
"RTN","IBJPI",65,0)
 S IBLN=$$SET("","",IBLN,0)
"RTN","IBJPI",66,0)
 ;
"RTN","IBJPI",67,0)
 ; -- Batch Extracts
"RTN","IBJPI",68,0)
 S IBWID=43
"RTN","IBJPI",69,0)
 S IBLN=$$SETN("Batch Extracts",IBLN,IBCOL,1,)
"RTN","IBJPI",70,0)
 S IBLN=$$SET("Extract               Selection  Maximum # to","",IBLN,IBWID)
"RTN","IBJPI",71,0)
 S IBLN=$$SETN(" Name          On/Off  Criteria   Extract/Day",IBLN,IBCOL+1,,1)
"RTN","IBJPI",72,0)
 ;S IBLN=$$SETN(" Extract Name      On/Off      Selection Criteria",IBLN,IBCOL+1,,1)
"RTN","IBJPI",73,0)
 ; Loop thru extracts
"RTN","IBJPI",74,0)
 S IEN=0 F  S IEN=$O(^IBE(350.9,1,51.17,IEN)) Q:'IEN  D
"RTN","IBJPI",75,0)
 . S IBIIVB=$G(^IBE(350.9,1,51.17,IEN,0))
"RTN","IBJPI",76,0)
 . S IBEX=+$P(IBIIVB,U,1)  ; Type
"RTN","IBJPI",77,0)
 . I '$F(".1.2.3.","."_IBEX_".") Q
"RTN","IBJPI",78,0)
 . S IBST=$$FO^IBCNEUT1($S($P(IBIIVB,U,1)'="":$$GET1^DIQ(350.9002,$P(IBIIVB,U,1)_",1,",.01,"E"),1:""),14)
"RTN","IBJPI",79,0)
 . S IBST=IBST_$$FO^IBCNEUT1($S(+$P(IBIIVB,U,2):"ON",1:"OFF"),8)
"RTN","IBJPI",80,0)
 . S IBEX1=$S(+$P(IBIIVB,U,3)'=0:+$P(IBIIVB,U,3),1:$P(IBIIVB,U,3))
"RTN","IBJPI",81,0)
 . S IBEX2=$S(+$P(IBIIVB,U,4)'=0:+$P(IBIIVB,U,4),1:$P(IBIIVB,U,4))
"RTN","IBJPI",82,0)
 . S IBST=IBST_$$FO^IBCNEUT1($S(IBEX=1:"n/a",IBEX=2:IBEX1,IBEX=3:IBEX1_"/"_IBEX2,1:"ERROR"),11)
"RTN","IBJPI",83,0)
 . S IBST=IBST_$$FO^IBCNEUT1($S(+$P(IBIIVB,U,5):+$P(IBIIVB,U,5),1:$P(IBIIVB,U,5)),14)
"RTN","IBJPI",84,0)
 . S IBLN=$$SET(IBST,"",IBLN,IBWID)
"RTN","IBJPI",85,0)
 . Q
"RTN","IBJPI",86,0)
 ;S IBLN=$$SET("","",IBLN,0)
"RTN","IBJPI",87,0)
 S VALMCNT=IBLN
"RTN","IBJPI",88,0)
 Q
"RTN","IBJPI",89,0)
 ;
"RTN","IBJPI",90,0)
SET(TTL,DATA,LN,WID) ;
"RTN","IBJPI",91,0)
 ; TTL = caption for field
"RTN","IBJPI",92,0)
 ; DATA = field value
"RTN","IBJPI",93,0)
 ; LN = current line #
"RTN","IBJPI",94,0)
 ; WID = right justify width
"RTN","IBJPI",95,0)
 N IBY
"RTN","IBJPI",96,0)
 ; update line ct
"RTN","IBJPI",97,0)
 S LN=LN+1
"RTN","IBJPI",98,0)
 ; offset line by 3 spaces
"RTN","IBJPI",99,0)
 S IBY="   "_$J(TTL,WID)_DATA D SET1(IBY,LN,0,$L(IBY))
"RTN","IBJPI",100,0)
 Q LN
"RTN","IBJPI",101,0)
 ;
"RTN","IBJPI",102,0)
SETN(TTL,LN,COL,RV,UN) ;
"RTN","IBJPI",103,0)
 ; TTL = caption for field
"RTN","IBJPI",104,0)
 ; LN = current line #
"RTN","IBJPI",105,0)
 ; COL = column at which to start video attribute
"RTN","IBJPI",106,0)
 ; RV = 0/1 flag for reverse video
"RTN","IBJPI",107,0)
 ; UN = 0/1 flag for underline
"RTN","IBJPI",108,0)
 N IBY
"RTN","IBJPI",109,0)
 ; update line ct
"RTN","IBJPI",110,0)
 S LN=LN+1
"RTN","IBJPI",111,0)
 ; offset line by 2 spaces
"RTN","IBJPI",112,0)
 S IBY="  "_TTL D SET1(IBY,LN,COL,$L(TTL),$G(RV),$G(UN))
"RTN","IBJPI",113,0)
 Q LN
"RTN","IBJPI",114,0)
 ;
"RTN","IBJPI",115,0)
SET1(STR,LN,COL,WD,RV,UN) ; Set up ^TMP array with screen data
"RTN","IBJPI",116,0)
 ; STR = line text
"RTN","IBJPI",117,0)
 ; LN = current line #
"RTN","IBJPI",118,0)
 ; COL = column at which to start video attribute
"RTN","IBJPI",119,0)
 ; WD = width of video attribute
"RTN","IBJPI",120,0)
 ; RV = 0/1 flag for reverse video
"RTN","IBJPI",121,0)
 ; UN = 0/1 flag for underline
"RTN","IBJPI",122,0)
 D SET^VALM10(LN,STR)
"RTN","IBJPI",123,0)
 I $G(RV)'="" D CNTRL^VALM10(LN,COL,WD,IORVON,IORVOFF)
"RTN","IBJPI",124,0)
 I $G(UN)'="" D CNTRL^VALM10(LN,COL,WD-1,IOUON,IOUOFF)
"RTN","IBJPI",125,0)
 Q
"RTN","IBJPI",126,0)
 ;
"RTN","IBJPI2")
0^2^B5452535^B18769415
"RTN","IBJPI2",1,0)
IBJPI2 ;DAOU/BHS - eIV SITE PARAMETERS SCREEN ACTIONS ;26-JUN-2002
"RTN","IBJPI2",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,316,416**;21-MAR-94;Build 58
"RTN","IBJPI2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBJPI2",4,0)
 ;
"RTN","IBJPI2",5,0)
 ; eIV - electronic Insurance Verification Interface
"RTN","IBJPI2",6,0)
 ;
"RTN","IBJPI2",7,0)
 ; Only call from tag
"RTN","IBJPI2",8,0)
 Q
"RTN","IBJPI2",9,0)
 ;
"RTN","IBJPI2",10,0)
MP ; Most Popular Payer processing
"RTN","IBJPI2",11,0)
 Q
"RTN","IBJPI2",12,0)
 ; Set error trap to ensure that lock is released
"RTN","IBJPI2",13,0)
 N $ES,$ET
"RTN","IBJPI2",14,0)
 S $ET="D ER^IBJPI2"
"RTN","IBJPI2",15,0)
 ; Check lock
"RTN","IBJPI2",16,0)
 L +^IBCNE("MP"):1 I '$T W !!,"The Most Popular Payers List is being edited by another user, please retry later." D PAUSE^VALM1 G MPX
"RTN","IBJPI2",17,0)
 ; Call ListMan screen
"RTN","IBJPI2",18,0)
 D EN^IBJPI3
"RTN","IBJPI2",19,0)
 L -^IBCNE("MP")  ; Unlock
"RTN","IBJPI2",20,0)
 ;
"RTN","IBJPI2",21,0)
MPX ; MP exit pt
"RTN","IBJPI2",22,0)
 D INIT^IBJPI S VALMBCK="R"
"RTN","IBJPI2",23,0)
 Q
"RTN","IBJPI2",24,0)
 ;
"RTN","IBJPI2",25,0)
BE ; Batch Extract processing
"RTN","IBJPI2",26,0)
 ; Init vars
"RTN","IBJPI2",27,0)
 N DIR,X,Y,DIRUT,TYPE,IEN,DR,DA,DIE,DIC
"RTN","IBJPI2",28,0)
 ;
"RTN","IBJPI2",29,0)
 D FULL^VALM1
"RTN","IBJPI2",30,0)
 W @IOF,!,"Batch Extract Parameters"
"RTN","IBJPI2",31,0)
 W !!,"The Buffer and Appointment Parameters can not be changed."
"RTN","IBJPI2",32,0)
 S DIR(0)="Y"
"RTN","IBJPI2",33,0)
 S DIR("A")="Edit Non-verified Parameters"
"RTN","IBJPI2",34,0)
 S DIR("B")="YES"
"RTN","IBJPI2",35,0)
 W ! D ^DIR K DIR I $D(DIRUT) G BEX
"RTN","IBJPI2",36,0)
 I 'Y G BEX
"RTN","IBJPI2",37,0)
 ;
"RTN","IBJPI2",38,0)
 S TYPE=3
"RTN","IBJPI2",39,0)
 ;
"RTN","IBJPI2",40,0)
 S IEN=0 F  S IEN=$O(^IBE(350.9,1,51.17,IEN)) Q:'IEN  I $P($G(^IBE(350.9,1,51.17,IEN,0)),U,1)=TYPE Q
"RTN","IBJPI2",41,0)
 ;
"RTN","IBJPI2",42,0)
 I IEN=""!(IEN=0) W !,"Extract Not Defined - ERROR!" G BEX
"RTN","IBJPI2",43,0)
 ;
"RTN","IBJPI2",44,0)
 ; Display Active, Sel Crit #1, Sel Crit #2 for Non-verified
"RTN","IBJPI2",45,0)
 I TYPE=3 S DR=".02;.03;.04;.05"
"RTN","IBJPI2",46,0)
 S DIE="^IBE(350.9,1,51.17,",DA=IEN,DA(1)=1 D ^DIE K DA,DR,DIE,DIC,X,Y
"RTN","IBJPI2",47,0)
 ;
"RTN","IBJPI2",48,0)
BEX ;
"RTN","IBJPI2",49,0)
 D INIT^IBJPI S VALMBCK="R"
"RTN","IBJPI2",50,0)
 Q
"RTN","IBJPI2",51,0)
 ;
"RTN","IBJPI2",52,0)
IIVEDIT(IBJDR) ; -- IBJP IIV EDIT ACTIONS (GP,PW):  Edit eIV Site Parameters
"RTN","IBJPI2",53,0)
 ; IBJDR - 0 (General Parameters section)
"RTN","IBJPI2",54,0)
 ;         1 (Patients Without Insurance section) - NO LONGER A VALID PARAMETER AFTER IB*2*416
"RTN","IBJPI2",55,0)
 N DA,DR,DIE,DIC,X,Y
"RTN","IBJPI2",56,0)
 ;
"RTN","IBJPI2",57,0)
 D FULL^VALM1
"RTN","IBJPI2",58,0)
 W @IOF,!,$S(IBJDR=0:"General",1:"Unknown")_" Parameters",!
"RTN","IBJPI2",59,0)
 ; Build string of fields to edit or input template based on IBJDR
"RTN","IBJPI2",60,0)
 I IBJDR'="" S DR=$P($T(@IBJDR),";;",2,999)
"RTN","IBJPI2",61,0)
 I DR'="" S DIE="^IBE(350.9,",DA=1 D ^DIE K DA,DR,DIE,DIC,X,Y
"RTN","IBJPI2",62,0)
 ;
"RTN","IBJPI2",63,0)
 D INIT^IBJPI S VALMBCK="R"
"RTN","IBJPI2",64,0)
 Q
"RTN","IBJPI2",65,0)
 ;
"RTN","IBJPI2",66,0)
0 ;;[IBCNE GENERAL PARAMETER EDIT]
"RTN","IBJPI2",67,0)
 ;
"RTN","IBJPI2",68,0)
 ;
"RTN","IBJPI2",69,0)
ER ; Unlock most popular payer and return to log error
"RTN","IBJPI2",70,0)
 L -^IBCNE("MP")
"RTN","IBJPI2",71,0)
 D ^%ZTER
"RTN","IBJPI2",72,0)
 D UNWIND^%ZTER
"RTN","IBJPI2",73,0)
 Q
"RTN","IBJPI2",74,0)
 ;
"RTN","IBJPM")
0^5^B10531686^B11055331
"RTN","IBJPM",1,0)
IBJPM ;ALB/MAF,ARH - IBSP MCCR PARAMETERS SCREEN ;14-DEC-1995
"RTN","IBJPM",2,0)
 ;;2.0;INTEGRATED BILLING;**39,137,184,271,316,416**;21-MAR-94;Build 58
"RTN","IBJPM",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBJPM",4,0)
 ;
"RTN","IBJPM",5,0)
EN ; -- main entry point for JOINT INQUIRY PARAMETERS option
"RTN","IBJPM",6,0)
 D EN^VALM("IBJP MCCR PARAMETERS")
"RTN","IBJPM",7,0)
 Q
"RTN","IBJPM",8,0)
 ;
"RTN","IBJPM",9,0)
HDR ; -- header code
"RTN","IBJPM",10,0)
 S VALMHDR(1)="Display/Edit MCCR Site Parameters."
"RTN","IBJPM",11,0)
 S VALMHDR(2)="Only authorized persons may edit this data."
"RTN","IBJPM",12,0)
 Q
"RTN","IBJPM",13,0)
 ;
"RTN","IBJPM",14,0)
INIT ; -- init variables and list array
"RTN","IBJPM",15,0)
 K ^TMP("IBJPM",$J)
"RTN","IBJPM",16,0)
 D BLD
"RTN","IBJPM",17,0)
 Q
"RTN","IBJPM",18,0)
 ;
"RTN","IBJPM",19,0)
HELP ; -- help code
"RTN","IBJPM",20,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBJPM",21,0)
 Q
"RTN","IBJPM",22,0)
 ;
"RTN","IBJPM",23,0)
EXIT ; -- exit code
"RTN","IBJPM",24,0)
 K ^TMP("IBJPM",$J),IBFASTXT,VALMBCK
"RTN","IBJPM",25,0)
 D CLEAR^VALM1
"RTN","IBJPM",26,0)
 Q
"RTN","IBJPM",27,0)
 ;
"RTN","IBJPM",28,0)
BLD ; -- build screen array, no variables required for input
"RTN","IBJPM",29,0)
 N IBNC,IBTC,IBTW,IBSW,IBLN,IBGRPB,IBGRPE,IBLR
"RTN","IBJPM",30,0)
 S IBNC(1)=1,IBTW(1)=0,IBTC(1)=5,IBSW(1)=30,IBNC(2)=43,IBTW(2)=0,IBTC(2)=47,IBSW(2)=30
"RTN","IBJPM",31,0)
 ;
"RTN","IBJPM",32,0)
 S (VALMCNT,IBLN)=1,IBLR=1,IBLN=$$SET("","",IBLN,IBLR),IBGRPB=IBLN
"RTN","IBJPM",33,0)
 ;
"RTN","IBJPM",34,0)
 ; - IB Site Parameters
"RTN","IBJPM",35,0)
 S IBLN=$$SETN("IB Site Parameters",IBLN,IBLR,1)
"RTN","IBJPM",36,0)
 S IBLN=$$SET("","Facility Definition",IBLN,IBLR)
"RTN","IBJPM",37,0)
 S IBLN=$$SET("","Mail Groups",IBLN,IBLR)
"RTN","IBJPM",38,0)
 S IBLN=$$SET("","Patient Billing",IBLN,IBLR)
"RTN","IBJPM",39,0)
 S IBLN=$$SET("","Third Party Billing",IBLN,IBLR)
"RTN","IBJPM",40,0)
 S IBLN=$$SET("","Provider Id",IBLN,IBLR)
"RTN","IBJPM",41,0)
 S IBLN=$$SET("","EDI Transmission",IBLN,IBLR)
"RTN","IBJPM",42,0)
 ;
"RTN","IBJPM",43,0)
 S IBLR=2,IBGRPE=IBLN,IBLN=IBGRPB
"RTN","IBJPM",44,0)
 ;
"RTN","IBJPM",45,0)
 ; - Claim Tracking Parameters
"RTN","IBJPM",46,0)
 S IBLN=$$SETN("Claims Tracking Parameters",IBLN,IBLR,1)
"RTN","IBJPM",47,0)
 S IBLN=$$SET("","General Parameters",IBLN,IBLR)
"RTN","IBJPM",48,0)
 S IBLN=$$SET("","Tracking Parameters",IBLN,IBLR)
"RTN","IBJPM",49,0)
 S IBLN=$$SET("","Random Sampling",IBLN,IBLR)
"RTN","IBJPM",50,0)
 ;
"RTN","IBJPM",51,0)
 S IBLN=$S(IBLN>IBGRPE:IBLN,1:IBGRPE),IBLR=1,IBLN=$$SET("","",IBLN,IBLR),IBGRPB=IBLN
"RTN","IBJPM",52,0)
 ;
"RTN","IBJPM",53,0)
 ; - Automated Billing Parameters
"RTN","IBJPM",54,0)
 S IBLN=$$SETN("Third Party Auto Billing Parameters",IBLN,IBLR,1)
"RTN","IBJPM",55,0)
 S IBLN=$$SET("","General Parameters",IBLN,IBLR)
"RTN","IBJPM",56,0)
 S IBLN=$$SET("","Inpatient Admission",IBLN,IBLR)
"RTN","IBJPM",57,0)
 S IBLN=$$SET("","Outpatient Visit",IBLN,IBLR)
"RTN","IBJPM",58,0)
 S IBLN=$$SET("","Prescription Refill",IBLN,IBLR)
"RTN","IBJPM",59,0)
 ;
"RTN","IBJPM",60,0)
 ; DAOU/BHS - Added 13-JUN-2002
"RTN","IBJPM",61,0)
 S IBLR=2,IBLN=IBGRPB
"RTN","IBJPM",62,0)
 ;
"RTN","IBJPM",63,0)
 ; DAOU/BHS - Added 13-JUN-2002
"RTN","IBJPM",64,0)
 ; - eIV Parameters
"RTN","IBJPM",65,0)
 S IBLN=$$SETN("Insurance Verification",IBLN,IBLR,1)
"RTN","IBJPM",66,0)
 S IBLN=$$SET("","General Parameters",IBLN,IBLR)
"RTN","IBJPM",67,0)
 S IBLN=$$SET("","Batch Extracts Parameters",IBLN,IBLR)
"RTN","IBJPM",68,0)
 ;
"RTN","IBJPM",69,0)
 S (IBLN,VALMCNT)=$S(IBLN>IBGRPE:IBLN,1:IBGRPE)-1
"RTN","IBJPM",70,0)
 Q
"RTN","IBJPM",71,0)
 ;
"RTN","IBJPM",72,0)
SET(TTL,DATA,LN,LR) ;
"RTN","IBJPM",73,0)
 N IBY
"RTN","IBJPM",74,0)
 S IBY=$J(TTL,IBTW(LR))_DATA D SET1(IBY,LN,IBTC(LR),(IBTW(LR)+IBSW(LR)))
"RTN","IBJPM",75,0)
 S LN=LN+1
"RTN","IBJPM",76,0)
 Q LN
"RTN","IBJPM",77,0)
 ;
"RTN","IBJPM",78,0)
SETN(TTL,LN,LR,RV) ;
"RTN","IBJPM",79,0)
 N IBY
"RTN","IBJPM",80,0)
 S IBY=" "_TTL_" " D SET1(IBY,LN,IBNC(LR),$L(IBY),$G(RV))
"RTN","IBJPM",81,0)
 S LN=LN+1
"RTN","IBJPM",82,0)
 Q LN
"RTN","IBJPM",83,0)
 ;
"RTN","IBJPM",84,0)
SET1(STR,LN,COL,WD,RV) ; set up TMP array with screen data
"RTN","IBJPM",85,0)
 N IBX S IBX=$G(^TMP("IBJPM",$J,LN,0))
"RTN","IBJPM",86,0)
 S IBX=$$SETSTR^VALM1(STR,IBX,COL,WD)
"RTN","IBJPM",87,0)
 D SET^VALM10(LN,IBX) I $G(RV)'="" D CNTRL^VALM10(LN,COL,WD,IOINHI,IOINORM)
"RTN","IBJPM",88,0)
 Q
"RTN","IBY416PO")
0^^B137314065^n/a
"RTN","IBY416PO",1,0)
IBY416PO ;ALB/ESG - Post Install for IB patch 416 ;17-Aug-2009
"RTN","IBY416PO",2,0)
 ;;2.0;INTEGRATED BILLING;**416**;21-MAR-94;Build 58
"RTN","IBY416PO",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBY416PO",4,0)
 ;
"RTN","IBY416PO",5,0)
 ; eIV Phase 3 Iteration 1 post-install
"RTN","IBY416PO",6,0)
 ;
"RTN","IBY416PO",7,0)
EN ; entry point
"RTN","IBY416PO",8,0)
 N XPDIDTOT
"RTN","IBY416PO",9,0)
 S XPDIDTOT=8
"RTN","IBY416PO",10,0)
 D PARM(1)         ; 1. Set eIV parameters appropriately
"RTN","IBY416PO",11,0)
 D PYRAPP(2)       ; 2. Modify fields in eIV payer application subfile 365.121
"RTN","IBY416PO",12,0)
 D USR(3)          ; 3. Modify the IIV non-human user to be EIV
"RTN","IBY416PO",13,0)
 D MENU(4)         ; 4. Change IIV menu mnemonics to be EIV
"RTN","IBY416PO",14,0)
 D MGRP(5)         ; 5. Change the name of the IIV mail group to be EIV
"RTN","IBY416PO",15,0)
 D MCR(6)          ; 6. Medicare payer stuff
"RTN","IBY416PO",16,0)
 D CLEARDUP(7)     ; 7. Clear duplicate entries in dictionary files
"RTN","IBY416PO",17,0)
 D RMSG(8)         ; 8. Send site registration message to FSC
"RTN","IBY416PO",18,0)
 ;
"RTN","IBY416PO",19,0)
EX ; exit point
"RTN","IBY416PO",20,0)
 Q
"RTN","IBY416PO",21,0)
 ;
"RTN","IBY416PO",22,0)
PARM(IBXPD) ; set eIV parameters for all extracts
"RTN","IBY416PO",23,0)
 NEW IEN,DATA,TYB,DR,DA,DIE,DIK
"RTN","IBY416PO",24,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY416PO",25,0)
 D MES^XPDUTL("-------------")
"RTN","IBY416PO",26,0)
 D MES^XPDUTL("Set eIV Site Parameters ... ")
"RTN","IBY416PO",27,0)
 ;
"RTN","IBY416PO",28,0)
 S IEN=0
"RTN","IBY416PO",29,0)
 F  S IEN=$O(^IBE(350.9,1,51.17,IEN)) Q:'IEN  D
"RTN","IBY416PO",30,0)
 . S DATA=$G(^IBE(350.9,1,51.17,IEN,0))
"RTN","IBY416PO",31,0)
 . S TYB=+$P(DATA,U,1)
"RTN","IBY416PO",32,0)
 . I TYB=1 S DR=".02////1;.03////@;.04////@;.05////99999;.06////@",DA=IEN,DA(1)=1,DIE="^IBE(350.9,1,51.17," D ^DIE Q
"RTN","IBY416PO",33,0)
 . I TYB=2 S DR=".02////1;.03////10;.04////@;.05////99999;.06////@",DA=IEN,DA(1)=1,DIE="^IBE(350.9,1,51.17," D ^DIE Q
"RTN","IBY416PO",34,0)
 . I TYB=3 S DR=".02////0;.05////99999;.06////@",DA=IEN,DA(1)=1,DIE="^IBE(350.9,1,51.17," D ^DIE Q
"RTN","IBY416PO",35,0)
 . I TYB=4 S DA=IEN,DA(1)=1,DIK="^IBE(350.9,1,51.17," D ^DIK Q
"RTN","IBY416PO",36,0)
 . Q
"RTN","IBY416PO",37,0)
 ;
"RTN","IBY416PO",38,0)
PARMX ;
"RTN","IBY416PO",39,0)
 D MES^XPDUTL(" Done.")
"RTN","IBY416PO",40,0)
 D UPDATE^XPDID(IBXPD)
"RTN","IBY416PO",41,0)
 Q
"RTN","IBY416PO",42,0)
 ;
"RTN","IBY416PO",43,0)
PYRAPP(IBXPD) ; set eIV payer application values
"RTN","IBY416PO",44,0)
 NEW PIEN,APPIEN,IDATA,IOK,Z
"RTN","IBY416PO",45,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY416PO",46,0)
 D MES^XPDUTL("-------------")
"RTN","IBY416PO",47,0)
 D MES^XPDUTL("Update eIV Payer Application values ... ")
"RTN","IBY416PO",48,0)
 ; check if this patch has already been installed once. If so, don't change payer application values.
"RTN","IBY416PO",49,0)
 D FIND^DIC(9.7,,"@;.02","PX","IB*2.0*416",,"B",,,"IDATA")
"RTN","IBY416PO",50,0)
 S (IOK,Z)=0 F  S Z=$O(IDATA("DILIST",Z)) Q:'Z!IOK  I $P(IDATA("DILIST",Z,0),U,2)="Install Completed" S IOK=1
"RTN","IBY416PO",51,0)
 I IOK G PYRAPPX
"RTN","IBY416PO",52,0)
 ;
"RTN","IBY416PO",53,0)
 S PIEN=0
"RTN","IBY416PO",54,0)
 F  S PIEN=$O(^IBE(365.12,PIEN)) Q:'PIEN  D
"RTN","IBY416PO",55,0)
 . S APPIEN=+$$PYRAPP^IBCNEUT5("IIV",PIEN) Q:'APPIEN
"RTN","IBY416PO",56,0)
 . S $P(^IBE(365.12,PIEN,1,APPIEN,0),U,7)=0     ; initial default to auto-accept NO
"RTN","IBY416PO",57,0)
 . S $P(^IBE(365.12,PIEN,1,APPIEN,0),U,9)=0     ; use SSN for subscriber ID always NO from now on
"RTN","IBY416PO",58,0)
 . Q
"RTN","IBY416PO",59,0)
 ;
"RTN","IBY416PO",60,0)
PYRAPPX ;
"RTN","IBY416PO",61,0)
 D MES^XPDUTL(" Done.")
"RTN","IBY416PO",62,0)
 D UPDATE^XPDID(IBXPD)
"RTN","IBY416PO",63,0)
 Q
"RTN","IBY416PO",64,0)
 ;
"RTN","IBY416PO",65,0)
USR(IBXPD) ; change the name of the eIV non-human user
"RTN","IBY416PO",66,0)
 NEW IDUZ,DIE,DA,DR,X,Y
"RTN","IBY416PO",67,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY416PO",68,0)
 D MES^XPDUTL("-------------")
"RTN","IBY416PO",69,0)
 D MES^XPDUTL("Change the name of the eIV user ... ")
"RTN","IBY416PO",70,0)
 ;
"RTN","IBY416PO",71,0)
 S IDUZ=$$FIND1^DIC(200,"","X","INTERFACE,IB IIV")    ; old name to be changed
"RTN","IBY416PO",72,0)
 I 'IDUZ G USRX   ; it has already been changed or doesn't exist
"RTN","IBY416PO",73,0)
 S DIE=200,DA=IDUZ
"RTN","IBY416PO",74,0)
 S DR=".01////^S X=""INTERFACE,IB EIV"";1////^S X=""EIV"""
"RTN","IBY416PO",75,0)
 D ^DIE
"RTN","IBY416PO",76,0)
USRX ;
"RTN","IBY416PO",77,0)
 D MES^XPDUTL(" Done.")
"RTN","IBY416PO",78,0)
 D UPDATE^XPDID(IBXPD)
"RTN","IBY416PO",79,0)
 Q
"RTN","IBY416PO",80,0)
 ;
"RTN","IBY416PO",81,0)
MENU(IBXPD) ; change a menu mnemonic to EIV
"RTN","IBY416PO",82,0)
 NEW MENUIEN,ITEMIEN,DIE,DA,DR,X,Y
"RTN","IBY416PO",83,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY416PO",84,0)
 D MES^XPDUTL("-------------")
"RTN","IBY416PO",85,0)
 D MES^XPDUTL("Updating Patient Insurance Menu mnemonic ... ")
"RTN","IBY416PO",86,0)
 S MENUIEN=$O(^DIC(19,"B","IBCN INSURANCE MGMT MENU",0)) I 'MENUIEN D MES^XPDUTL("Parent menu not found.") G M2
"RTN","IBY416PO",87,0)
 S ITEMIEN=$O(^DIC(19,"B","IBCNE IIV MENU",0)) I 'ITEMIEN D MES^XPDUTL("eIV Menu item not found.") G M2
"RTN","IBY416PO",88,0)
 S DA=+$O(^DIC(19,MENUIEN,10,"B",ITEMIEN,0)) I 'DA D MES^XPDUTL("eIV Menu item not found on Pt. Ins. Menu.") G M2
"RTN","IBY416PO",89,0)
 I $P($G(^DIC(19,MENUIEN,10,DA,0)),U,2)="EIV" D MES^XPDUTL("eIV Menu mnemonic has already been updated.") G M2
"RTN","IBY416PO",90,0)
 S DIE="^DIC(19,"_MENUIEN_",10,"
"RTN","IBY416PO",91,0)
 S DA(1)=MENUIEN
"RTN","IBY416PO",92,0)
 S DR="2////EIV"
"RTN","IBY416PO",93,0)
 D ^DIE,MES^XPDUTL("eIV Menu mnemonic updated.")
"RTN","IBY416PO",94,0)
M2 ;
"RTN","IBY416PO",95,0)
 D MES^XPDUTL("Updating IB Purge Menu mnemonic ... ")
"RTN","IBY416PO",96,0)
 S MENUIEN=$O(^DIC(19,"B","IB PURGE MENU",0)) I 'MENUIEN D MES^XPDUTL("Parent menu not found.") G MENUX
"RTN","IBY416PO",97,0)
 S ITEMIEN=$O(^DIC(19,"B","IBCNE PURGE IIV DATA",0)) I 'ITEMIEN D MES^XPDUTL("eIV purge item not found.") G MENUX
"RTN","IBY416PO",98,0)
 S DA=+$O(^DIC(19,MENUIEN,10,"B",ITEMIEN,0)) I 'DA D MES^XPDUTL("Purge eIV Transactions item not found on IB Purge Menu.") G MENUX
"RTN","IBY416PO",99,0)
 I $P($G(^DIC(19,MENUIEN,10,DA,0)),U,2)="EIV" D MES^XPDUTL("eIV Purge option mnemonic has already been updated.") G MENUX
"RTN","IBY416PO",100,0)
 S DIE="^DIC(19,"_MENUIEN_",10,"
"RTN","IBY416PO",101,0)
 S DA(1)=MENUIEN
"RTN","IBY416PO",102,0)
 S DR="2////EIV"
"RTN","IBY416PO",103,0)
 D ^DIE,MES^XPDUTL("eIV Purge option mnemonic updated.")
"RTN","IBY416PO",104,0)
 ;
"RTN","IBY416PO",105,0)
MENUX ;
"RTN","IBY416PO",106,0)
 D MES^XPDUTL(" Done.")
"RTN","IBY416PO",107,0)
 D UPDATE^XPDID(IBXPD)
"RTN","IBY416PO",108,0)
 Q
"RTN","IBY416PO",109,0)
 ;
"RTN","IBY416PO",110,0)
MGRP(IBXPD) ; change the eIV mail group name/desc
"RTN","IBY416PO",111,0)
 NEW MGIEN,MGDY,IENS,IBMGD
"RTN","IBY416PO",112,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY416PO",113,0)
 D MES^XPDUTL("-------------")
"RTN","IBY416PO",114,0)
 D MES^XPDUTL("Updating eIV Mail Group name ... ")
"RTN","IBY416PO",115,0)
 ;
"RTN","IBY416PO",116,0)
 S MGIEN=$$FIND1^DIC(3.8,,"BX","IBCNE EIV MESSAGE","B")
"RTN","IBY416PO",117,0)
 I MGIEN D MES^XPDUTL("eIV Mail Group name already changed.") G MGRPX
"RTN","IBY416PO",118,0)
 ;
"RTN","IBY416PO",119,0)
 S MGIEN=$$FIND1^DIC(3.8,,"BX","IBCNE IIV MESSAGE","B")
"RTN","IBY416PO",120,0)
 I 'MGIEN D MES^XPDUTL("Can't find the old IIV mail group.") G MGRPX
"RTN","IBY416PO",121,0)
 ;
"RTN","IBY416PO",122,0)
 S MGDY=2
"RTN","IBY416PO",123,0)
 S MGDY(1)="This mail group will be used to deliver notifications for"
"RTN","IBY416PO",124,0)
 S MGDY(2)="the Insurance Verification process."
"RTN","IBY416PO",125,0)
 ;
"RTN","IBY416PO",126,0)
 S IENS=MGIEN_","
"RTN","IBY416PO",127,0)
 S IBMGD(3.8,IENS,.01)="IBCNE EIV MESSAGE"
"RTN","IBY416PO",128,0)
 S IBMGD(3.8,IENS,3)="MGDY"
"RTN","IBY416PO",129,0)
 D FILE^DIE(,"IBMGD")
"RTN","IBY416PO",130,0)
 D MES^XPDUTL("eIV Mail Group name updated.")
"RTN","IBY416PO",131,0)
 ;
"RTN","IBY416PO",132,0)
MGRPX ;
"RTN","IBY416PO",133,0)
 D MES^XPDUTL(" Done.")
"RTN","IBY416PO",134,0)
 D UPDATE^XPDID(IBXPD)
"RTN","IBY416PO",135,0)
 Q
"RTN","IBY416PO",136,0)
 ;
"RTN","IBY416PO",137,0)
MCR(IBXPD) ; perform actions related to the Medicare payer
"RTN","IBY416PO",138,0)
 NEW PAYR,LN,MSG,DIE,DA,DR,DIC,DO,ERR,APPIEN,APD,IDUZ,STOP,CNT,IBZ
"RTN","IBY416PO",139,0)
 NEW INSLSTA,INSLSTB,INSLST,MRD,IBIFN,INS,X,Y,Z,OK,INSNM,NMUP,AMV
"RTN","IBY416PO",140,0)
 NEW SITE,SUBJ,XMTO,XMINSTR
"RTN","IBY416PO",141,0)
 ;
"RTN","IBY416PO",142,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY416PO",143,0)
 D MES^XPDUTL("-------------")
"RTN","IBY416PO",144,0)
 D MES^XPDUTL("Activating Medicare for eIV ... ")
"RTN","IBY416PO",145,0)
 ;
"RTN","IBY416PO",146,0)
 S LN=0,ERR=0
"RTN","IBY416PO",147,0)
 S PAYR=+$$FIND1^DIC(365.12,"","X","MEDICARE WNR")
"RTN","IBY416PO",148,0)
 I 'PAYR S LN=LN+1,ERR=1,MSG(LN)="Can't find the MEDICARE WNR Payer in file 365.12." G MCR1
"RTN","IBY416PO",149,0)
 ;
"RTN","IBY416PO",150,0)
 S DIE=350.9,DA=1,DR="51.25///"_PAYR D ^DIE K DIR,DA,DR
"RTN","IBY416PO",151,0)
 S IBZ=+$P($G(^IBE(350.9,1,51)),U,25)
"RTN","IBY416PO",152,0)
 S LN=LN+1,MSG(LN)="Medicare payer stored in IB site params; ien="_IBZ_"; "_$P($G(^IBE(365.12,IBZ,0)),U,1)_"."
"RTN","IBY416PO",153,0)
 ;
"RTN","IBY416PO",154,0)
 S APPIEN=+$$PYRAPP^IBCNEUT5("IIV",PAYR)
"RTN","IBY416PO",155,0)
 I 'APPIEN S LN=LN+1,ERR=1,MSG(LN)="No eIV application data defined for MEDICARE WNR Payer." G MCR1
"RTN","IBY416PO",156,0)
 ;
"RTN","IBY416PO",157,0)
 S APD=$G(^IBE(365.12,PAYR,1,APPIEN,0))
"RTN","IBY416PO",158,0)
 I $P(APD,U,2) S LN=LN+1,MSG(LN)="MEDICARE WNR is already nationally active."
"RTN","IBY416PO",159,0)
 I $P(APD,U,3) S LN=LN+1,MSG(LN)="MEDICARE WNR is already locally active."
"RTN","IBY416PO",160,0)
 S IDUZ=+$$FIND1^DIC(200,"","X","INTERFACE,IB EIV") I 'IDUZ S IDUZ=DUZ
"RTN","IBY416PO",161,0)
 S DIE="^IBE(365.12,"_PAYR_",1,"
"RTN","IBY416PO",162,0)
 S DA=APPIEN,DA(1)=PAYR
"RTN","IBY416PO",163,0)
 S DR=".02///1;.03///1;.04///"_IDUZ_";.05///NOW;.06///NOW"
"RTN","IBY416PO",164,0)
 D ^DIE K DIE,DA,DR
"RTN","IBY416PO",165,0)
 S LN=LN+1,MSG(LN)="Payer MEDICARE WNR has been activated."
"RTN","IBY416PO",166,0)
 ;
"RTN","IBY416PO",167,0)
MCR1 ; now find and process the Medicare (WNR) insurance company
"RTN","IBY416PO",168,0)
 ;
"RTN","IBY416PO",169,0)
 ; loop to examine recent MRA request claims at the site
"RTN","IBY416PO",170,0)
 S STOP=0,CNT=0 K INSLSTA
"RTN","IBY416PO",171,0)
 S MRD="" F  S MRD=$O(^DGCR(399,"APM",MRD),-1) Q:MRD=""!STOP  S IBIFN=0 F  S IBIFN=$O(^DGCR(399,"APM",MRD,IBIFN)) Q:'IBIFN!STOP  D  Q:STOP
"RTN","IBY416PO",172,0)
 . S CNT=CNT+1 I CNT>1000 S STOP=1 Q
"RTN","IBY416PO",173,0)
 . S INS=+$P($G(^DGCR(399,IBIFN,"I1")),U,1) Q:'INS     ; ins. co. ien
"RTN","IBY416PO",174,0)
 . I '$$MCRWNR^IBEFUNC(INS) Q    ; must be defined as medicare wnr
"RTN","IBY416PO",175,0)
 . S INSLSTA(INS)=""
"RTN","IBY416PO",176,0)
 . Q
"RTN","IBY416PO",177,0)
 I 'STOP,CNT S LN=LN+1,ERR=1,MSG(LN)="Very few MRA request claims on file.  Count="_CNT_"."
"RTN","IBY416PO",178,0)
 I 'CNT S LN=LN+1,ERR=1,MSG(LN)="No MRA request claims found."
"RTN","IBY416PO",179,0)
 S INS=0 F Z=0:1 S INS=$O(INSLSTA(INS)) Q:'INS
"RTN","IBY416PO",180,0)
 I 'Z S LN=LN+1,ERR=1,MSG(LN)="No Medicare (WNR) ins co found in MRA request claims."
"RTN","IBY416PO",181,0)
 I 'CNT!'Z S LN=LN+1,ERR=1,MSG(LN)="Value of the EDI/MRA ACTIVATED parameter: "_$$EXTERNAL^DILFD(350.9,8.1,"",$P($G(^IBE(350.9,1,8)),U,10))
"RTN","IBY416PO",182,0)
 I Z>1 D
"RTN","IBY416PO",183,0)
 . S LN=LN+1,ERR=1,MSG(LN)="More than 1 Medicare (WNR) ins co found in MRA request claims.  "_Z_" found as follows."
"RTN","IBY416PO",184,0)
 . S INS=0 F  S INS=$O(INSLSTA(INS)) Q:'INS  D
"RTN","IBY416PO",185,0)
 .. S LN=LN+1,ERR=1,MSG(LN)="     "_$P($G(^DIC(36,INS,0)),U,1)_"  ien="_INS
"RTN","IBY416PO",186,0)
 .. Q
"RTN","IBY416PO",187,0)
 . Q
"RTN","IBY416PO",188,0)
 ;
"RTN","IBY416PO",189,0)
 ; now loop through insurance company file
"RTN","IBY416PO",190,0)
 K INSLSTB
"RTN","IBY416PO",191,0)
 S INS=0 F  S INS=$O(^DIC(36,INS)) Q:'INS  D
"RTN","IBY416PO",192,0)
 . I '$$MCRWNR^IBEFUNC(INS) Q     ; check for medicare wnr
"RTN","IBY416PO",193,0)
 . I '$$ACTIVE^IBCNEUT4(INS) Q    ; check for active
"RTN","IBY416PO",194,0)
 . S INSLSTB(INS)=""
"RTN","IBY416PO",195,0)
 . Q
"RTN","IBY416PO",196,0)
 S INS=0 F Z=0:1 S INS=$O(INSLSTB(INS)) Q:'INS
"RTN","IBY416PO",197,0)
 I 'Z S LN=LN+1,ERR=1,MSG(LN)="No Medicare (WNR) ins co found in the insurance company file."
"RTN","IBY416PO",198,0)
 I Z>1 D
"RTN","IBY416PO",199,0)
 . S LN=LN+1,ERR=1,MSG(LN)="More than 1 Medicare (WNR) ins co found in the insurance company file.  "_Z_" found as follows."
"RTN","IBY416PO",200,0)
 . S INS=0 F  S INS=$O(INSLSTB(INS)) Q:'INS  D
"RTN","IBY416PO",201,0)
 .. S LN=LN+1,ERR=1,MSG(LN)="     "_$P($G(^DIC(36,INS,0)),U,1)_"  ien="_INS
"RTN","IBY416PO",202,0)
 .. Q
"RTN","IBY416PO",203,0)
 . Q
"RTN","IBY416PO",204,0)
 ;
"RTN","IBY416PO",205,0)
 ; combine the lists together and loop thru them all
"RTN","IBY416PO",206,0)
 K INSLST
"RTN","IBY416PO",207,0)
 M INSLST=INSLSTA,INSLST=INSLSTB
"RTN","IBY416PO",208,0)
 S INS=0 F  S INS=$O(INSLST(INS)) Q:'INS  D
"RTN","IBY416PO",209,0)
 . S INSNM=$P($G(^DIC(36,INS,0)),U,1)
"RTN","IBY416PO",210,0)
 . S NMUP=$$UP^XLFSTR(INSNM)   ; uppercase name
"RTN","IBY416PO",211,0)
 . S OK=0
"RTN","IBY416PO",212,0)
 . I NMUP["MEDICARE",NMUP["WNR" S OK=1
"RTN","IBY416PO",213,0)
 . ;
"RTN","IBY416PO",214,0)
 . ; name disqualifies this ins co from being changed
"RTN","IBY416PO",215,0)
 . I 'OK S LN=LN+1,ERR=1,MSG(LN)="Insurance company "_INSNM_" will NOT be linked to the MEDICARE WNR payer." Q
"RTN","IBY416PO",216,0)
 . ;
"RTN","IBY416PO",217,0)
 . ; name is good for payer linking
"RTN","IBY416PO",218,0)
 . I PAYR D
"RTN","IBY416PO",219,0)
 .. S DIE=36,DA=INS,DR="3.1////"_PAYR D ^DIE K DIE,DA,DR
"RTN","IBY416PO",220,0)
 .. S LN=LN+1,MSG(LN)="Insurance company "_INSNM_" linked to MEDICARE WNR payer."
"RTN","IBY416PO",221,0)
 .. I INSNM'="MEDICARE (WNR)" S ERR=1     ; to be notified of these strange ones
"RTN","IBY416PO",222,0)
 .. Q
"RTN","IBY416PO",223,0)
 . ;
"RTN","IBY416PO",224,0)
 . ; name is good for possibly creating these 2 Auto-Match entries
"RTN","IBY416PO",225,0)
 . F AMV="MEDICARE","MEDICARE WNR" D
"RTN","IBY416PO",226,0)
 .. S LN=LN+1,MSG(LN)="Attempt to add Auto-Match entry for """_AMV_"""."
"RTN","IBY416PO",227,0)
 .. I AMV=NMUP S LN=LN+1,MSG(LN)="No Auto-Match for """_AMV_""" - same value as ins co name." Q
"RTN","IBY416PO",228,0)
 .. I $D(^IBCN(365.11,"B",AMV)) S LN=LN+1,MSG(LN)=""""_AMV_""" already in Auto-Match file." Q
"RTN","IBY416PO",229,0)
 .. I $D(^DIC(36,"B",AMV)) S LN=LN+1,MSG(LN)=""""_AMV_""" already an Ins Co Name." Q
"RTN","IBY416PO",230,0)
 .. I $D(^DIC(36,"C",AMV)) S LN=LN+1,MSG(LN)=""""_AMV_""" already an Ins Co Synonym." Q
"RTN","IBY416PO",231,0)
 .. ;
"RTN","IBY416PO",232,0)
 .. ; OK to file this new Auto-Match entry
"RTN","IBY416PO",233,0)
 .. K DO
"RTN","IBY416PO",234,0)
 .. S IDUZ=+$$FIND1^DIC(200,"","X","INTERFACE,IB EIV") I 'IDUZ S IDUZ=DUZ
"RTN","IBY416PO",235,0)
 .. S DIC="^IBCN(365.11,",DIC(0)="",X=AMV
"RTN","IBY416PO",236,0)
 .. S DIC("DR")=".02////"_NMUP_";.03///NOW;.04///"_IDUZ_";.05///NOW;.06///"_IDUZ_";.07////"_AMV_";.08////"_NMUP
"RTN","IBY416PO",237,0)
 .. D FILE^DICN
"RTN","IBY416PO",238,0)
 .. I +Y>0,$P(Y,U,3) S LN=LN+1,MSG(LN)="Auto-Match entry linking """_AMV_""" with "_NMUP_" added." Q
"RTN","IBY416PO",239,0)
 .. S LN=LN+1,ERR=1,MSG(LN)="Failure when trying to add Auto-Match entry linking """_AMV_""" with "_NMUP_"." Q
"RTN","IBY416PO",240,0)
 .. Q
"RTN","IBY416PO",241,0)
 . Q
"RTN","IBY416PO",242,0)
 ;
"RTN","IBY416PO",243,0)
 ; display the MSG array to the screen and save in the install file
"RTN","IBY416PO",244,0)
 D MES^XPDUTL(.MSG)
"RTN","IBY416PO",245,0)
 ;
"RTN","IBY416PO",246,0)
 ; send email
"RTN","IBY416PO",247,0)
 I ERR=0 G MCRX                 ; nothing email-worthy found
"RTN","IBY416PO",248,0)
 I '$$PROD^XUPROD(1) G MCRX     ; only email from production accounts
"RTN","IBY416PO",249,0)
 ;
"RTN","IBY416PO",250,0)
 S SITE=$$SITE^VASITE
"RTN","IBY416PO",251,0)
 S SUBJ="IB*2*416 eIV Medicare Activation - #"_$P(SITE,U,3)_" - "_$P(SITE,U,2)
"RTN","IBY416PO",252,0)
 S SUBJ=$E(SUBJ,1,65)
"RTN","IBY416PO",253,0)
 ;
"RTN","IBY416PO",254,0)
 S XMTO("Yan.Gurtovoy@va.gov")=""
"RTN","IBY416PO",255,0)
 ;
"RTN","IBY416PO",256,0)
 S XMINSTR("FROM")="IB*2*416.Medicare.Activation"
"RTN","IBY416PO",257,0)
 D SENDMSG^XMXAPI(DUZ,SUBJ,"MSG",.XMTO,.XMINSTR)
"RTN","IBY416PO",258,0)
 ;
"RTN","IBY416PO",259,0)
MCRX ;
"RTN","IBY416PO",260,0)
 D MES^XPDUTL(" Done.")
"RTN","IBY416PO",261,0)
 D UPDATE^XPDID(IBXPD)
"RTN","IBY416PO",262,0)
 Q
"RTN","IBY416PO",263,0)
 ;
"RTN","IBY416PO",264,0)
CLEARDUP(IBXPD) ; clear duplicate entries in dictionary files
"RTN","IBY416PO",265,0)
 N CODE,FILE,NESDESC,NEWIEN,OLDIEN
"RTN","IBY416PO",266,0)
 N DA,DIE,DIK,DR,X,Y
"RTN","IBY416PO",267,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY416PO",268,0)
 D MES^XPDUTL("-------------")
"RTN","IBY416PO",269,0)
 D MES^XPDUTL("Cleaning dictionary files ... ")
"RTN","IBY416PO",270,0)
 F FILE=365.011:.001:365.028 D
"RTN","IBY416PO",271,0)
 .I '$D(^DIC(FILE)) Q
"RTN","IBY416PO",272,0)
 .S CODE="" F  S CODE=$O(^IBE(FILE,"B",CODE)) Q:CODE=""  D
"RTN","IBY416PO",273,0)
 ..S OLDIEN=$O(^IBE(FILE,"B",CODE,"")),NEWIEN=$O(^IBE(FILE,"B",CODE,""),-1)
"RTN","IBY416PO",274,0)
 ..I OLDIEN=NEWIEN Q  ; only one entry, no duplicates
"RTN","IBY416PO",275,0)
 ..; replace description in the old entry
"RTN","IBY416PO",276,0)
 ..S NEWDESC=$P($G(^IBE(FILE,NEWIEN,0)),U,2) I NEWDESC="" Q
"RTN","IBY416PO",277,0)
 ..S DIE=FILE,DA=OLDIEN,DR=".02///"_NEWDESC D ^DIE
"RTN","IBY416PO",278,0)
 ..; delete duplicate entry
"RTN","IBY416PO",279,0)
 ..S DA=NEWIEN,DIK="^IBE("_FILE_"," D ^DIK
"RTN","IBY416PO",280,0)
 ..Q
"RTN","IBY416PO",281,0)
 .Q
"RTN","IBY416PO",282,0)
 D MES^XPDUTL(" Done.")
"RTN","IBY416PO",283,0)
 D UPDATE^XPDID(IBXPD)
"RTN","IBY416PO",284,0)
 Q
"RTN","IBY416PO",285,0)
 ;
"RTN","IBY416PO",286,0)
RMSG(IBXPD) ; send site registration message to FSC
"RTN","IBY416PO",287,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY416PO",288,0)
 D MES^XPDUTL("-------------")
"RTN","IBY416PO",289,0)
 D MES^XPDUTL("Sending site registration message to FSC ... ")
"RTN","IBY416PO",290,0)
 I '$$PROD^XUPROD(1) D MES^XPDUTL(" N/A - not a production account") G RMSGX  ; only sent reg. message from production account
"RTN","IBY416PO",291,0)
 D ^IBCNEHLM
"RTN","IBY416PO",292,0)
 D MES^XPDUTL(" Done.")
"RTN","IBY416PO",293,0)
RMSGX ;
"RTN","IBY416PO",294,0)
 D UPDATE^XPDID(IBXPD)
"RTN","IBY416PO",295,0)
 Q
"SEC","^DIC",365.011,365.011,0,"AUDIT")

"SEC","^DIC",365.011,365.011,0,"DD")
@
"SEC","^DIC",365.011,365.011,0,"DEL")
@
"SEC","^DIC",365.011,365.011,0,"LAYGO")
@
"SEC","^DIC",365.011,365.011,0,"RD")

"SEC","^DIC",365.011,365.011,0,"WR")

"SEC","^DIC",365.013,365.013,0,"AUDIT")

"SEC","^DIC",365.013,365.013,0,"DD")
@
"SEC","^DIC",365.013,365.013,0,"DEL")
@
"SEC","^DIC",365.013,365.013,0,"LAYGO")
@
"SEC","^DIC",365.013,365.013,0,"RD")

"SEC","^DIC",365.013,365.013,0,"WR")

"SEC","^DIC",365.014,365.014,0,"AUDIT")

"SEC","^DIC",365.014,365.014,0,"DD")
@
"SEC","^DIC",365.014,365.014,0,"DEL")
@
"SEC","^DIC",365.014,365.014,0,"LAYGO")
@
"SEC","^DIC",365.014,365.014,0,"RD")

"SEC","^DIC",365.014,365.014,0,"WR")

"SEC","^DIC",365.016,365.016,0,"AUDIT")

"SEC","^DIC",365.016,365.016,0,"DD")
@
"SEC","^DIC",365.016,365.016,0,"DEL")
@
"SEC","^DIC",365.016,365.016,0,"LAYGO")
@
"SEC","^DIC",365.016,365.016,0,"RD")

"SEC","^DIC",365.016,365.016,0,"WR")

"SEC","^DIC",365.022,365.022,0,"AUDIT")

"SEC","^DIC",365.022,365.022,0,"DD")
@
"SEC","^DIC",365.022,365.022,0,"DEL")
@
"SEC","^DIC",365.022,365.022,0,"LAYGO")
@
"SEC","^DIC",365.022,365.022,0,"RD")

"SEC","^DIC",365.022,365.022,0,"WR")

"SEC","^DIC",365.023,365.023,0,"AUDIT")

"SEC","^DIC",365.023,365.023,0,"DD")
@
"SEC","^DIC",365.023,365.023,0,"DEL")
@
"SEC","^DIC",365.023,365.023,0,"LAYGO")
@
"SEC","^DIC",365.023,365.023,0,"RD")

"SEC","^DIC",365.023,365.023,0,"WR")

"SEC","^DIC",365.024,365.024,0,"AUDIT")

"SEC","^DIC",365.024,365.024,0,"DD")
@
"SEC","^DIC",365.024,365.024,0,"DEL")
@
"SEC","^DIC",365.024,365.024,0,"LAYGO")
@
"SEC","^DIC",365.024,365.024,0,"RD")

"SEC","^DIC",365.024,365.024,0,"WR")

"SEC","^DIC",365.025,365.025,0,"AUDIT")

"SEC","^DIC",365.025,365.025,0,"DD")
@
"SEC","^DIC",365.025,365.025,0,"DEL")
@
"SEC","^DIC",365.025,365.025,0,"LAYGO")
@
"SEC","^DIC",365.025,365.025,0,"RD")

"SEC","^DIC",365.025,365.025,0,"WR")

"SEC","^DIC",365.026,365.026,0,"AUDIT")

"SEC","^DIC",365.026,365.026,0,"DD")
@
"SEC","^DIC",365.026,365.026,0,"DEL")
@
"SEC","^DIC",365.026,365.026,0,"LAYGO")
@
"SEC","^DIC",365.026,365.026,0,"RD")

"SEC","^DIC",365.026,365.026,0,"WR")

"SEC","^DIC",365.028,365.028,0,"AUDIT")

"SEC","^DIC",365.028,365.028,0,"DD")
@
"SEC","^DIC",365.028,365.028,0,"DEL")
@
"SEC","^DIC",365.028,365.028,0,"LAYGO")
@
"SEC","^DIC",365.028,365.028,0,"RD")

"SEC","^DIC",365.028,365.028,0,"WR")

"SEC","^DIC",365.15,365.15,0,"AUDIT")

"SEC","^DIC",365.15,365.15,0,"DD")
@
"SEC","^DIC",365.15,365.15,0,"DEL")
@
"SEC","^DIC",365.15,365.15,0,"LAYGO")
@
"SEC","^DIC",365.15,365.15,0,"RD")

"SEC","^DIC",365.15,365.15,0,"WR")

"UP",2,2.312,-1)
2^.312
"UP",2,2.312,0)
2.312
"UP",2,2.322,-2)
2^.312
"UP",2,2.322,-1)
2.312^6
"UP",2,2.322,0)
2.322
"UP",2,2.3222,-3)
2^.312
"UP",2,2.3222,-2)
2.312^6
"UP",2,2.3222,-1)
2.322^2
"UP",2,2.3222,0)
2.3222
"UP",2,2.3226,-3)
2^.312
"UP",2,2.3226,-2)
2.312^6
"UP",2,2.3226,-1)
2.322^6
"UP",2,2.3226,0)
2.3226
"UP",2,2.3227,-3)
2^.312
"UP",2,2.3227,-2)
2.312^6
"UP",2,2.3227,-1)
2.322^7
"UP",2,2.3227,0)
2.3227
"UP",2,2.3228,-3)
2^.312
"UP",2,2.3228,-2)
2.312^6
"UP",2,2.3228,-1)
2.322^8
"UP",2,2.3228,0)
2.3228
"UP",2,2.3229,-3)
2^.312
"UP",2,2.3229,-2)
2.312^6
"UP",2,2.3229,-1)
2.322^9
"UP",2,2.3229,0)
2.3229
"UP",2,2.32291,-3)
2^.312
"UP",2,2.32291,-2)
2.312^6
"UP",2,2.32291,-1)
2.322^10
"UP",2,2.32291,0)
2.32291
"UP",350.9,350.9002,-1)
350.9^51.17
"UP",350.9,350.9002,0)
350.9002
"UP",365,365.02,-1)
365^2
"UP",365,365.02,0)
365.02
"UP",365,365.22,-2)
365^2
"UP",365,365.22,-1)
365.02^2
"UP",365,365.22,0)
365.22
"UP",365,365.26,-2)
365^2
"UP",365,365.26,-1)
365.02^6
"UP",365,365.26,0)
365.26
"UP",365,365.27,-2)
365^2
"UP",365,365.27,-1)
365.02^7
"UP",365,365.27,0)
365.27
"UP",365,365.28,-2)
365^2
"UP",365,365.28,-1)
365.02^8
"UP",365,365.28,0)
365.28
"UP",365,365.29,-2)
365^2
"UP",365,365.29,-1)
365.02^9
"UP",365,365.29,0)
365.29
"UP",365,365.291,-2)
365^2
"UP",365,365.291,-1)
365.02^10
"UP",365,365.291,0)
365.291
"UP",365.12,365.1212,-2)
365.12^1
"UP",365.12,365.1212,-1)
365.121^2
"UP",365.12,365.1212,0)
365.1212
"UP",365.12,365.1213,-2)
365.12^1
"UP",365.12,365.1213,-1)
365.121^3
"UP",365.12,365.1213,0)
365.1213
"VER")
8.0^22.0
"^DD",2,2.312,1.05,0)
DATE LAST EDITED^D^^1;5^S %DT="ETXR" D ^%DT S X=Y K:Y<1 X
"^DD",2,2.312,1.05,1,0)
^.1
"^DD",2,2.312,1.05,1,1,0)
^^TRIGGER^2.312^4.04
"^DD",2,2.312,1.05,1,1,1)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(1)=$S($D(^DPT(D0,.312,D1,4)):^(4),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X=DIV S X="0" X ^DD(2.312,1.05,1,1,1.4)
"^DD",2,2.312,1.05,1,1,1.4)
S DIH=$G(^DPT(DIV(0),.312,DIV(1),4)),DIV=X S $P(^(4),U,4)=DIV,DIH=2.312,DIG=4.04 D ^DICR
"^DD",2,2.312,1.05,1,1,2)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(1)=$S($D(^DPT(D0,.312,D1,4)):^(4),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X=DIV S X="0" X ^DD(2.312,1.05,1,1,2.4)
"^DD",2,2.312,1.05,1,1,2.4)
S DIH=$G(^DPT(DIV(0),.312,DIV(1),4)),DIV=X S $P(^(4),U,4)=DIV,DIH=2.312,DIG=4.04 D ^DICR
"^DD",2,2.312,1.05,1,1,"%D",0)
^^1^1^3091006^
"^DD",2,2.312,1.05,1,1,"%D",1,0)
Any change to this field will set EIV AUTO-UPDATE field (4.04) to "NO".
"^DD",2,2.312,1.05,1,1,"CREATE VALUE")
"0"
"^DD",2,2.312,1.05,1,1,"DELETE VALUE")
"0"
"^DD",2,2.312,1.05,1,1,"DT")
3091006
"^DD",2,2.312,1.05,1,1,"FIELD")
EIV AUTO-UPDATE
"^DD",2,2.312,1.05,3)
Enter the date the policy was last edited.
"^DD",2,2.312,1.05,21,0)
^^2^2^3100428^
"^DD",2,2.312,1.05,21,1,0)
This is the date this policy was last edited.  This field is updated by
"^DD",2,2.312,1.05,21,2,0)
the computer whenever anyone edits this patient's policy information.
"^DD",2,2.312,1.05,"DT")
3100428
"^DD",2,2.312,4.04,0)
EIV AUTO-UPDATE^S^0:NO;1:YES;^4;4^Q
"^DD",2,2.312,4.04,3)
Set this to YES if last update to INSURANCE TYPE sub-file was done via eIV auto-update.
"^DD",2,2.312,4.04,5,1,0)
2.312^1.05^1
"^DD",2,2.312,4.04,21,0)
^.001^4^4^3090802^^
"^DD",2,2.312,4.04,21,1,0)
Flag that determines how the last update to INSURANCE TYPE sub-file was 
"^DD",2,2.312,4.04,21,2,0)
done. Value of "YES" means that data was last updated via eIV 
"^DD",2,2.312,4.04,21,3,0)
auto-update, value of "NO" means that data was last updated via other 
"^DD",2,2.312,4.04,21,4,0)
means.
"^DD",2,2.312,4.04,23,0)
^^2^2^3090802^
"^DD",2,2.312,4.04,23,1,0)
This flag is set by eIV processing code (IBCNEHL* series) and cleared by 
"^DD",2,2.312,4.04,23,2,0)
a trigger on field 2.312/1.05 (DATE LAST EDITED).
"^DD",2,2.312,4.04,"DT")
3090802
"^DD",2,2.312,60,0)
ELIGIBILITY/BENEFIT^2.322A^^6;0
"^DD",2,2.312,60,21,0)
^^2^2^3090722^
"^DD",2,2.312,60,21,1,0)
This multiple contains all of the eligibility and benefit data
"^DD",2,2.312,60,21,2,0)
for a specific insured person returned from the Payer.
"^DD",2,2.312,60,"DT")
3090722
"^DD",2,2.322,0)
ELIGIBILITY/BENEFIT SUB-FIELD^^10^41
"^DD",2,2.322,0,"DT")
3091013
"^DD",2,2.322,0,"IX","B",2.322,.01)

"^DD",2,2.322,0,"NM","ELIGIBILITY/BENEFIT")

"^DD",2,2.322,0,"UP")
2.312
"^DD",2,2.322,.01,0)
EB NUMBER^NJ3,0^^0;1^K:+X'=X!(X>999)!(X<1)!(X?.E1"."1.N) X
"^DD",2,2.322,.01,1,0)
^.1
"^DD",2,2.322,.01,1,1,0)
2.322^B
"^DD",2,2.322,.01,1,1,1)
S ^DPT(DA(2),.312,DA(1),6,"B",$E(X,1,30),DA)=""
"^DD",2,2.322,.01,1,1,2)
K ^DPT(DA(2),.312,DA(1),6,"B",$E(X,1,30),DA)
"^DD",2,2.322,.01,1,1,"DT")
3090722
"^DD",2,2.322,.01,3)
Type a number between 1 and 999, 0 Decimal Digits.
"^DD",2,2.322,.01,21,0)
^^3^3^3090722^
"^DD",2,2.322,.01,21,1,0)
This is a sequential number corresponding to the Set-ID for all
"^DD",2,2.322,.01,21,2,0)
of the eligibility/benefit (X.12 EB segments) segments coming
"^DD",2,2.322,.01,21,3,0)
into VISTA.
"^DD",2,2.322,.01,"DT")
3090911
"^DD",2,2.322,.02,0)
ELIGIBILITY/BENEFIT INFO^P365.011'^IBE(365.011,^0;2^Q
"^DD",2,2.322,.02,.1)
Elig/Ben Info
"^DD",2,2.322,.02,3)
Enter an eligibility/benefit code from the list.
"^DD",2,2.322,.02,21,0)
^^2^2^3091013^
"^DD",2,2.322,.02,21,1,0)
This field contains a code identifying the eligibility status
"^DD",2,2.322,.02,21,2,0)
of the individual or the benefit returned by the Payer.
"^DD",2,2.322,.02,23,0)
^^1^1^3091013^
"^DD",2,2.322,.02,23,1,0)
It corresponds to X.12 271 EB01 data element.
"^DD",2,2.322,.02,"DT")
3091013
"^DD",2,2.322,.03,0)
COVERAGE LEVEL^P365.012'^IBE(365.012,^0;3^Q
"^DD",2,2.322,.03,.1)
Coverage Level
"^DD",2,2.322,.03,3)
Enter a coverage level code from the list.
"^DD",2,2.322,.03,21,0)
^^1^1^3091013^
"^DD",2,2.322,.03,21,1,0)
This field identifies the level of coverage of benefits.
"^DD",2,2.322,.03,23,0)
^^1^1^3091013^
"^DD",2,2.322,.03,23,1,0)
It corresponds to X.12 271 EB02 data element.
"^DD",2,2.322,.03,"DT")
3091013
"^DD",2,2.322,.04,0)
SERVICE TYPE^P365.013'^IBE(365.013,^0;4^Q
"^DD",2,2.322,.04,.1)
Service Type
"^DD",2,2.322,.04,3)
Enter the service type code from the list.
"^DD",2,2.322,.04,21,0)
^^1^1^3091013^
"^DD",2,2.322,.04,21,1,0)
This field is a code identifying the classification of service.
"^DD",2,2.322,.04,23,0)
^^1^1^3091013^
"^DD",2,2.322,.04,23,1,0)
It corresponds to X.12 271 EB03 data element.
"^DD",2,2.322,.04,"DT")
3091013
"^DD",2,2.322,.05,0)
INSURANCE TYPE^P365.014'^IBE(365.014,^0;5^Q
"^DD",2,2.322,.05,.1)
Insurance Type
"^DD",2,2.322,.05,3)
Enter the insurance type code from the list.
"^DD",2,2.322,.05,21,0)
^^2^2^3100428^
"^DD",2,2.322,.05,21,1,0)
This is a code identifying the type of insurance policy within
"^DD",2,2.322,.05,21,2,0)
a specific insurance program.
"^DD",2,2.322,.05,23,0)
^^1^1^3091013^
"^DD",2,2.322,.05,23,1,0)
It corresponds to X.12 271 EB04 data element.
"^DD",2,2.322,.05,"DT")
3100428
"^DD",2,2.322,.06,0)
PLAN COVERAGE DESCRIPTION^F^^0;6^K:$L(X)>50!($L(X)<1) X
"^DD",2,2.322,.06,.1)
Plan Coverage Description
"^DD",2,2.322,.06,3)
Answer must be 1-50 characters in length.
"^DD",2,2.322,.06,21,0)
^^2^2^3091013^
"^DD",2,2.322,.06,21,1,0)
This code is a description or number that identifies the plan
"^DD",2,2.322,.06,21,2,0)
or coverage.
"^DD",2,2.322,.06,23,0)
^^1^1^3091013^
"^DD",2,2.322,.06,23,1,0)
It corresponds to X.12 271 EB05 data element.
"^DD",2,2.322,.06,"DT")
3091013
"^DD",2,2.322,.07,0)
TIME PERIOD QUALIFIER^P365.015'^IBE(365.015,^0;7^Q
"^DD",2,2.322,.07,.1)
Time Period
"^DD",2,2.322,.07,3)
Enter the type of time period code from the list.
"^DD",2,2.322,.07,21,0)
^^2^2^3100428^
"^DD",2,2.322,.07,21,1,0)
This is a code for the time period category that determines
"^DD",2,2.322,.07,21,2,0)
for how long the benefits are available.
"^DD",2,2.322,.07,23,0)
^^1^1^3091013^
"^DD",2,2.322,.07,23,1,0)
It corresponds to X.12 271 EB06 data element.
"^DD",2,2.322,.07,"DT")
3100428
"^DD",2,2.322,.08,0)
MONETARY AMOUNT^NJ12,2^^0;8^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>999999999)!(X<0)!(X?.E1"."3.N) X
"^DD",2,2.322,.08,3)
Type a Dollar amount between 0 and 999999999, 2 Decimal Digits.
"^DD",2,2.322,.08,21,0)
^^2^2^3091013^
"^DD",2,2.322,.08,21,1,0)
This field is populated if eligibility or benefit must be
"^DD",2,2.322,.08,21,2,0)
qualified by a monetary amount.
"^DD",2,2.322,.08,23,0)
^^1^1^3091013^
"^DD",2,2.322,.08,23,1,0)
It corresponds to X.12 271 EB07 data element.
"^DD",2,2.322,.08,"DT")
3091013
"^DD",2,2.322,.09,0)
PERCENT^NJ9,5^^0;9^K:+X'=X!(X>100)!(X<0)!(X?.E1"."6.N) X
"^DD",2,2.322,.09,.1)
Percentage
"^DD",2,2.322,.09,3)
Type a number between 0 and 100, 5 Decimal Digits.
"^DD",2,2.322,.09,21,0)
^^2^2^3091013^
"^DD",2,2.322,.09,21,1,0)
This field is used if eligibility or benefit must be qualified
"^DD",2,2.322,.09,21,2,0)
by a percentage.
"^DD",2,2.322,.09,23,0)
^^1^1^3091013^
"^DD",2,2.322,.09,23,1,0)
It corresponds to X.12 271 EB08 data element.
"^DD",2,2.322,.09,"DT")
3091013
"^DD",2,2.322,.1,0)
QUANTITY QUALIFIER^P365.016'^IBE(365.016,^0;10^Q
"^DD",2,2.322,.1,.1)
Quantity
"^DD",2,2.322,.1,3)
Enter the type of quantity code from the list.
"^DD",2,2.322,.1,21,0)
^^2^2^3091013^
"^DD",2,2.322,.1,21,1,0)
This field is used to identify the type of units that are being
"^DD",2,2.322,.1,21,2,0)
conveyed in the QUANTITY field (#.11).
"^DD",2,2.322,.1,23,0)
^^1^1^3091013^
"^DD",2,2.322,.1,23,1,0)
It corresponds to X.12 271 EB09 data element.
"^DD",2,2.322,.1,"DT")
3091013
"^DD",2,2.322,.11,0)
QUANTITY^F^^0;11^K:$L(X)>15!($L(X)<1) X
"^DD",2,2.322,.11,3)
Answer must be 1-15 characters in length.
"^DD",2,2.322,.11,21,0)
^^2^2^3100428^^
"^DD",2,2.322,.11,21,1,0)
This field number is used for the quantity value as qualified by
"^DD",2,2.322,.11,21,2,0)
the QUANTITY QUALIFIER field.
"^DD",2,2.322,.11,23,0)
^^1^1^3091013^
"^DD",2,2.322,.11,23,1,0)
It corresponds to X.12 271 EB10 data element.
"^DD",2,2.322,.11,"DT")
3100428
"^DD",2,2.322,.12,0)
AUTHORIZATION/CERTIFICATION^S^Y:YES;N:NO;U:UNKNOWN;^0;12^Q
"^DD",2,2.322,.12,.1)
Authorization/Certification
"^DD",2,2.322,.12,3)
Enter YES if authorization or certification is required.
"^DD",2,2.322,.12,21,0)
^^2^2^3091013^
"^DD",2,2.322,.12,21,1,0)
This field indicates that an authorization or certification
"^DD",2,2.322,.12,21,2,0)
is required per plan provisions.
"^DD",2,2.322,.12,23,0)
^^1^1^3091013^
"^DD",2,2.322,.12,23,1,0)
It corresponds to X.12 271 EB11 data element.
"^DD",2,2.322,.12,"DT")
3091013
"^DD",2,2.322,.13,0)
IN PLAN^S^Y:YES;N:NO;U:UNKNOWN;^0;13^Q
"^DD",2,2.322,.13,.1)
In-Plan-Network
"^DD",2,2.322,.13,3)
Enter YES if the benefits identified are In-Plan-Network.
"^DD",2,2.322,.13,21,0)
^^5^5^3091013^
"^DD",2,2.322,.13,21,1,0)
This field indicates the plan network indicator.  A YES value indicates
"^DD",2,2.322,.13,21,2,0)
the benefits identified are considered In-Plan-Network.  A NO value
"^DD",2,2.322,.13,21,3,0)
indicates that the benefits identified are considered 
"^DD",2,2.322,.13,21,4,0)
Out-Of-Plan-Network.  A "U" value indicates it is unknown whether the
"^DD",2,2.322,.13,21,5,0)
benefits identified are part of the Plan Network.
"^DD",2,2.322,.13,23,0)
^^1^1^3091013^
"^DD",2,2.322,.13,23,1,0)
It corresponds to X.12 271 EB12 data element.
"^DD",2,2.322,.13,"DT")
3091013
"^DD",2,2.322,1.01,0)
PROCEDURE CODING METHOD^S^AD:American Dental Association;CJ:CPT;HC:HCPCS;ID:ICD-9-CM;N4:National Drug Code;ZZ:Mutually Defined;^1;1^Q
"^DD",2,2.322,1.01,3)
Enter the code describing procedure coding method.
"^DD",2,2.322,1.01,21,0)
^^1^1^3090922^
"^DD",2,2.322,1.01,21,1,0)
Two character code describing procedure coding method.
"^DD",2,2.322,1.01,23,0)
^^1^1^3090922^
"^DD",2,2.322,1.01,23,1,0)
Source: 271 HL7 message, ZEB.14.1
"^DD",2,2.322,1.01,"DT")
3090922
"^DD",2,2.322,1.02,0)
PROCEDURE CODE^F^^1;2^K:$L(X)>48!($L(X)<1) X
"^DD",2,2.322,1.02,3)
Answer must be 1-48 characters in length.
"^DD",2,2.322,1.02,21,0)
^^1^1^3090723^
"^DD",2,2.322,1.02,21,1,0)
Identification code for the procedure.
"^DD",2,2.322,1.02,23,0)
^^1^1^3090723^
"^DD",2,2.322,1.02,23,1,0)
Source: 271 HL7 message, ZEB.15
"^DD",2,2.322,1.02,"DT")
3090723
"^DD",2,2.322,1.03,0)
PROCEDURE MODIFIER 1^F^^1;3^K:$L(X)>2!($L(X)<1) X
"^DD",2,2.322,1.03,3)
Answer must be 1-2 characters in length.
"^DD",2,2.322,1.03,21,0)
^^1^1^3090723^
"^DD",2,2.322,1.03,21,1,0)
Identifies special circumstances related to the procedure; first modifier.
"^DD",2,2.322,1.03,23,0)
^^1^1^3090723^
"^DD",2,2.322,1.03,23,1,0)
Source: 271 HL7 message, ZEB.16 (repetition 1)
"^DD",2,2.322,1.03,"DT")
3090723
"^DD",2,2.322,1.04,0)
PROCEDURE MODIFIER 2^F^^1;4^K:$L(X)>2!($L(X)<1) X
"^DD",2,2.322,1.04,3)
Answer must be 1-2 characters in length.
"^DD",2,2.322,1.04,21,0)
^^2^2^3090723^
"^DD",2,2.322,1.04,21,1,0)
Identifies special circumstances related to the procedure; second
"^DD",2,2.322,1.04,21,2,0)
modifier.
"^DD",2,2.322,1.04,23,0)
^^1^1^3090723^
"^DD",2,2.322,1.04,23,1,0)
Source: 271 HL7 message, ZEB.16 (repetition 2)
"^DD",2,2.322,1.04,"DT")
3090723
"^DD",2,2.322,1.05,0)
PROCEDURE MODIFIER 3^F^^1;5^K:$L(X)>2!($L(X)<1) X
"^DD",2,2.322,1.05,3)
Answer must be 1-2 characters in length.
"^DD",2,2.322,1.05,21,0)
^^1^1^3090723^
"^DD",2,2.322,1.05,21,1,0)
Identifies special circumstances related to the procedure; third modifier.
"^DD",2,2.322,1.05,23,0)
^^1^1^3090723^
"^DD",2,2.322,1.05,23,1,0)
Source: 271 HL7 message, ZEB.16 (repetition 3)
"^DD",2,2.322,1.05,"DT")
3090723
"^DD",2,2.322,1.06,0)
PROCEDURE MODIFIER 4^F^^1;6^K:$L(X)>2!($L(X)<1) X
"^DD",2,2.322,1.06,3)
Answer must be 1-2 characters in length.
"^DD",2,2.322,1.06,21,0)
^^2^2^3090723^
"^DD",2,2.322,1.06,21,1,0)
Identifies special circumstances related to the procedure; fourth
"^DD",2,2.322,1.06,21,2,0)
modifier.
"^DD",2,2.322,1.06,23,0)
^^1^1^3090723^
"^DD",2,2.322,1.06,23,1,0)
Source: 271 HL7 message, ZEB.16 (repetition 4)
"^DD",2,2.322,1.06,"DT")
3090723
"^DD",2,2.322,2,0)
NOTES^2.3222^^2;0
"^DD",2,2.322,2,21,0)
^^2^2^3090910^
"^DD",2,2.322,2,21,1,0)
This field contains any additional text about the eligibility
"^DD",2,2.322,2,21,2,0)
benefit information.  It is transcribed from X.12 271 MSG segments.
"^DD",2,2.322,3.01,0)
ENTITY ID CODE^P365.022'^IBE(365.022,^3;1^Q
"^DD",2,2.322,3.01,3)
Select X12 code for entity identifier.
"^DD",2,2.322,3.01,21,0)
^^1^1^3090723^
"^DD",2,2.322,3.01,21,1,0)
X12 Entity Identifier Code.
"^DD",2,2.322,3.01,23,0)
^^1^1^3090723^
"^DD",2,2.322,3.01,23,1,0)
Source: 271 HL7 message, ZTY.2.1
"^DD",2,2.322,3.01,"DT")
3090723
"^DD",2,2.322,3.02,0)
ENTITY TYPE^S^1:Person;2:Non-Person Entity;^3;2^Q
"^DD",2,2.322,3.02,3)
Select type of the entity.
"^DD",2,2.322,3.02,21,0)
^^1^1^3090723^
"^DD",2,2.322,3.02,21,1,0)
Entity Type Qualifier.
"^DD",2,2.322,3.02,23,0)
^^1^1^3090723^
"^DD",2,2.322,3.02,23,1,0)
Source: 271 HL7 message, ZTY.3.1
"^DD",2,2.322,3.02,"DT")
3090723
"^DD",2,2.322,3.03,0)
NAME^F^^3;3^K:$L(X)>98!($L(X)<1) X
"^DD",2,2.322,3.03,3)
Answer must be 1-98 characters in length.
"^DD",2,2.322,3.03,21,0)
^^1^1^3090723^
"^DD",2,2.322,3.03,21,1,0)
Name of person or organization.
"^DD",2,2.322,3.03,23,0)
^^3^3^3090723^
"^DD",2,2.322,3.03,23,1,0)
Source: 271 HL7 message, combined elements ZTY.4.1.1 (last name or
"^DD",2,2.322,3.03,23,2,0)
organization name), ZTY.4.2 (first name) , ZTY.4.3 (middle name), and
"^DD",2,2.322,3.03,23,3,0)
ZTY.4.4 (suffix).
"^DD",2,2.322,3.03,"DT")
3090723
"^DD",2,2.322,3.04,0)
ENTITY ID^F^^3;4^K:$L(X)>80!($L(X)<1) X
"^DD",2,2.322,3.04,3)
Answer must be 1-80 characters in length.
"^DD",2,2.322,3.04,21,0)
^^1^1^3090723^
"^DD",2,2.322,3.04,21,1,0)
Entity identifier.
"^DD",2,2.322,3.04,23,0)
^^1^1^3090723^
"^DD",2,2.322,3.04,23,1,0)
Source: 271 HL7 message, ZTY.6
"^DD",2,2.322,3.04,"DT")
3090723
"^DD",2,2.322,3.05,0)
ENTITY ID QUALIFIER^P365.023'^IBE(365.023,^3;5^Q
"^DD",2,2.322,3.05,3)
Select X12 code for ID qualifier.
"^DD",2,2.322,3.05,21,0)
^^1^1^3090723^
"^DD",2,2.322,3.05,21,1,0)
Code designating the system/method used for Identification.
"^DD",2,2.322,3.05,23,0)
^^1^1^3090723^
"^DD",2,2.322,3.05,23,1,0)
Source: 271 HL7 message, ZTY.5.1
"^DD",2,2.322,3.05,"DT")
3090723
"^DD",2,2.322,4.01,0)
ADDRESS LINE 1^F^^4;1^K:$L(X)>55!($L(X)<1) X
"^DD",2,2.322,4.01,3)
Answer must be 1-55 characters in length.
"^DD",2,2.322,4.01,21,0)
^^1^1^3090723^
"^DD",2,2.322,4.01,21,1,0)
Entity address, line 1.
"^DD",2,2.322,4.01,23,0)
^^1^1^3090723^
"^DD",2,2.322,4.01,23,1,0)
Source: 271 HL message, ZTY.7.1.1
"^DD",2,2.322,4.01,"DT")
3090723
"^DD",2,2.322,4.02,0)
ADDRESS LINE 2^F^^4;2^K:$L(X)>55!($L(X)<1) X
"^DD",2,2.322,4.02,3)
Answer must be 1-55 characters in length.
"^DD",2,2.322,4.02,21,0)
^^1^1^3090723^
"^DD",2,2.322,4.02,21,1,0)
Entity address, line 2.
"^DD",2,2.322,4.02,23,0)
^^1^1^3090723^
"^DD",2,2.322,4.02,23,1,0)
Source: 271 HL7 message, ZTY.7.2
"^DD",2,2.322,4.02,"DT")
3090723
"^DD",2,2.322,4.03,0)
CITY^F^^4;3^K:$L(X)>30!($L(X)<1) X
"^DD",2,2.322,4.03,3)
Answer must be 1-30 characters in length.
"^DD",2,2.322,4.03,21,0)
^^1^1^3090723^
"^DD",2,2.322,4.03,21,1,0)
Entity address, city.
"^DD",2,2.322,4.03,23,0)
^^1^1^3090723^
"^DD",2,2.322,4.03,23,1,0)
Source: 271 HL7 message, ZTY.7.3
"^DD",2,2.322,4.03,"DT")
3090723
"^DD",2,2.322,4.04,0)
STATE^P5'^DIC(5,^4;4^Q
"^DD",2,2.322,4.04,3)
Select state/province code.
"^DD",2,2.322,4.04,21,0)
^^1^1^3090723^
"^DD",2,2.322,4.04,21,1,0)
Entity address, state or province code.
"^DD",2,2.322,4.04,23,0)
^^1^1^3090723^
"^DD",2,2.322,4.04,23,1,0)
Source: 271 HL7 message, ZTY.7.4
"^DD",2,2.322,4.04,"DT")
3090723
"^DD",2,2.322,4.05,0)
ZIP^F^^4;5^K:$L(X)>15!($L(X)<1) X
"^DD",2,2.322,4.05,3)
Answer must be 1-15 characters in length.
"^DD",2,2.322,4.05,21,0)
^^1^1^3090723^
"^DD",2,2.322,4.05,21,1,0)
Entity address, zip or postal code.
"^DD",2,2.322,4.05,23,0)
^^1^1^3090723^
"^DD",2,2.322,4.05,23,1,0)
Source: 271 HL7 message, ZTY.7.5
"^DD",2,2.322,4.05,"DT")
3090723
"^DD",2,2.322,4.06,0)
COUNTRY CODE^F^^4;6^K:$L(X)>3!($L(X)<2) X
"^DD",2,2.322,4.06,3)
Answer must be 2-3 characters in length.
"^DD",2,2.322,4.06,21,0)
^^1^1^3090723^
"^DD",2,2.322,4.06,21,1,0)
Entity address, country code.
"^DD",2,2.322,4.06,23,0)
^^1^1^3090723^
"^DD",2,2.322,4.06,23,1,0)
Source: 271 HL7 message, ZTY.7.6
"^DD",2,2.322,4.06,"DT")
3090723
"^DD",2,2.322,4.07,0)
LOCATION^F^^4;7^K:$L(X)>30!($L(X)<1) X
"^DD",2,2.322,4.07,3)
Answer must be 1-30 characters in length.
"^DD",2,2.322,4.07,21,0)
^^1^1^3090723^
"^DD",2,2.322,4.07,21,1,0)
Entity address, location identifier.
"^DD",2,2.322,4.07,23,0)
^^1^1^3090723^
"^DD",2,2.322,4.07,23,1,0)
Source: 271 HL7 message, ZTY.9
"^DD",2,2.322,4.07,"DT")
3090723
"^DD",2,2.322,4.08,0)
LOCATION QUALIFIER^S^RJ:Region;^4;8^Q
"^DD",2,2.322,4.08,3)
Select location qualifier.
"^DD",2,2.322,4.08,21,0)
^^1^1^3090723^
"^DD",2,2.322,4.08,21,1,0)
Entity address, location qualifier.
"^DD",2,2.322,4.08,23,0)
^^1^1^3090723^
"^DD",2,2.322,4.08,23,1,0)
Source: 271 HL7 message, ZTY.8
"^DD",2,2.322,4.08,"DT")
3090723
"^DD",2,2.322,5.01,0)
PROVIDER CODE^P365.024'^IBE(365.024,^5;1^Q
"^DD",2,2.322,5.01,3)
Select provider code.
"^DD",2,2.322,5.01,21,0)
^^1^1^3090724^
"^DD",2,2.322,5.01,21,1,0)
Code identifying the type of provider.
"^DD",2,2.322,5.01,23,0)
^^1^1^3090724^
"^DD",2,2.322,5.01,23,1,0)
Source: 271 HL7 message, ZTY.10.1
"^DD",2,2.322,5.01,"DT")
3090724
"^DD",2,2.322,5.02,0)
REFERENCE ID^F^^5;2^K:$L(X)>30!($L(X)<1) X
"^DD",2,2.322,5.02,3)
Answer must be 1-30 characters in length.
"^DD",2,2.322,5.02,21,0)
^^1^1^3090724^
"^DD",2,2.322,5.02,21,1,0)
Reference identifier.
"^DD",2,2.322,5.02,23,0)
^^1^1^3090724^
"^DD",2,2.322,5.02,23,1,0)
Source: 271 HL7 message, ZTY.12
"^DD",2,2.322,5.02,"DT")
3090724
"^DD",2,2.322,5.03,0)
REFERENCE ID QUALIFIER^S^9K:Servicer;EI:EIN;HPI:Healthcare Financing Administration;SY:SSN;TJ:Federal Tax ID;D3:National Association of Boards of Pharmacy Number;ZZ:Taxonomy Code;^5;3^Q
"^DD",2,2.322,5.03,3)
Select reference id qualifier.
"^DD",2,2.322,5.03,21,0)
^^1^1^3090724^
"^DD",2,2.322,5.03,21,1,0)
Reference identifier type.
"^DD",2,2.322,5.03,23,0)
^^1^1^3090724^
"^DD",2,2.322,5.03,23,1,0)
Source: 271 HL7 message, ZTY.11.1
"^DD",2,2.322,5.03,"DT")
3090922
"^DD",2,2.322,6,0)
CONTACT INFORMATION^2.3226A^^6;0
"^DD",2,2.322,6,21,0)
^^2^2^3090724^
"^DD",2,2.322,6,21,1,0)
This multiple contains contact information for an eligibility/benefit
"^DD",2,2.322,6,21,2,0)
entity.
"^DD",2,2.322,6,23,0)
^^1^1^3090724^
"^DD",2,2.322,6,23,1,0)
Source: 271 HL7 message, CTD segment within G2O group.
"^DD",2,2.322,7,0)
HEALTHCARE SERVICES DELIVERY^2.3227A^^7;0
"^DD",2,2.322,7,21,0)
^^1^1^3090727^
"^DD",2,2.322,7,21,1,0)
Healthcare services delivery multiple.
"^DD",2,2.322,7,23,0)
^^1^1^3090727^
"^DD",2,2.322,7,23,1,0)
Source: 271 HL7 ZHS segment.
"^DD",2,2.322,8,0)
SUBSCRIBER DATES^2.3228A^^8;0
"^DD",2,2.322,8,21,0)
^^1^1^3090727^
"^DD",2,2.322,8,21,1,0)
Subscriber dates multiple.
"^DD",2,2.322,8,23,0)
^^1^1^3090727^
"^DD",2,2.322,8,23,1,0)
Source: 271 HL7 message, ZSD segment.
"^DD",2,2.322,9,0)
SUBSCRIBER ADDITIONAL INFO^2.3229A^^9;0
"^DD",2,2.322,9,21,0)
^^1^1^3090727^
"^DD",2,2.322,9,21,1,0)
Additional subscriber information multiple.
"^DD",2,2.322,9,23,0)
^^1^1^3090727^
"^DD",2,2.322,9,23,1,0)
Source: 271 HL7 message, ZII segment.
"^DD",2,2.322,10,0)
SUBSCRIBER REFERENCE ID^2.32291^^10;0
"^DD",2,2.322,10,21,0)
^^1^1^3090910^
"^DD",2,2.322,10,21,1,0)
Subscriber reference id multiple.
"^DD",2,2.322,10,23,0)
^^1^1^3090910^
"^DD",2,2.322,10,23,1,0)
Source: 271 HL7 message, ZRF segment.
"^DD",2,2.3222,0)
NOTES SUB-FIELD^^.01^1
"^DD",2,2.3222,0,"DT")
3090910
"^DD",2,2.3222,0,"NM","NOTES")

"^DD",2,2.3222,0,"UP")
2.322
"^DD",2,2.3222,.01,0)
NOTES^W^^0;1
"^DD",2,2.3222,.01,21,0)
^^2^2^3090910^
"^DD",2,2.3222,.01,21,1,0)
This field contains any additional text about the eligibility
"^DD",2,2.3222,.01,21,2,0)
benefit information.  It is transcribed from X.12 271 MSG segments.
"^DD",2,2.3222,.01,"DT")
3090910
"^DD",2,2.3226,0)
CONTACT INFORMATION SUB-FIELD^^.04^4
"^DD",2,2.3226,0,"DT")
3090910
"^DD",2,2.3226,0,"IX","B",2.3226,.01)

"^DD",2,2.3226,0,"NM","CONTACT INFORMATION")

"^DD",2,2.3226,0,"UP")
2.322
"^DD",2,2.3226,.01,0)
SEQUENCE^RNJ5,0^^0;1^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."1.N) X
"^DD",2,2.3226,.01,1,0)
^.1
"^DD",2,2.3226,.01,1,1,0)
2.3226^B
"^DD",2,2.3226,.01,1,1,1)
S ^DPT(DA(3),.312,DA(2),6,DA(1),6,"B",$E(X,1,30),DA)=""
"^DD",2,2.3226,.01,1,1,2)
K ^DPT(DA(3),.312,DA(2),6,DA(1),6,"B",$E(X,1,30),DA)
"^DD",2,2.3226,.01,3)
Type a number between 1 and 99999, 0 Decimal Digits.
"^DD",2,2.3226,.01,21,0)
^^1^1^3090724^
"^DD",2,2.3226,.01,21,1,0)
Sequential entry number.
"^DD",2,2.3226,.01,23,0)
^^1^1^3090724^
"^DD",2,2.3226,.01,23,1,0)
Sequential number of G2O.CTD segment.
"^DD",2,2.3226,.01,"DT")
3090910
"^DD",2,2.3226,.02,0)
NAME^F^^0;2^K:$L(X)>98!($L(X)<1) X
"^DD",2,2.3226,.02,3)
Answer must be 1-98 characters in length.
"^DD",2,2.3226,.02,21,0)
^^1^1^3090724^
"^DD",2,2.3226,.02,21,1,0)
Name of the contact.
"^DD",2,2.3226,.02,23,0)
^^3^3^3090724^
"^DD",2,2.3226,.02,23,1,0)
Source: 271 HL7 message, G2O.CTD.2 - combined data from CTD.2.5 (prefix),
"^DD",2,2.3226,.02,23,2,0)
CTD.2.1.1 (last name), CTD.2.2 (first name), CTD.2.3 (middle name),
"^DD",2,2.3226,.02,23,3,0)
CTD.2.4 (suffix), and CTD.2.6 (degree).
"^DD",2,2.3226,.02,"DT")
3090724
"^DD",2,2.3226,.03,0)
COMMUNICATION NUMBER^F^^0;3^K:$L(X)>30!($L(X)<1) X
"^DD",2,2.3226,.03,3)
Answer must be 1-30 characters in length.
"^DD",2,2.3226,.03,21,0)
^^1^1^3090724^
"^DD",2,2.3226,.03,21,1,0)
Phone, fax, email, etc.
"^DD",2,2.3226,.03,23,0)
^^1^1^3090724^
"^DD",2,2.3226,.03,23,1,0)
Source: 271 HL7 message, G2O.CTD.5.1
"^DD",2,2.3226,.03,"DT")
3090724
"^DD",2,2.3226,.04,0)
COMMUNICATION QUALIFIER^P365.021'^IBE(365.021,^0;4^Q
"^DD",2,2.3226,.04,3)
Select type of communication number.
"^DD",2,2.3226,.04,21,0)
^^1^1^3090724^
"^DD",2,2.3226,.04,21,1,0)
Code describing type of communication number.
"^DD",2,2.3226,.04,23,0)
^^1^1^3090724^
"^DD",2,2.3226,.04,23,1,0)
Source: 271 HL7 message, G2O.CTD.5.9
"^DD",2,2.3226,.04,"DT")
3090724
"^DD",2,2.3227,0)
HEALTHCARE SERVICES DELIVERY SUB-FIELD^^.09^9
"^DD",2,2.3227,0,"DT")
3090727
"^DD",2,2.3227,0,"IX","B",2.3227,.01)

"^DD",2,2.3227,0,"NM","HEALTHCARE SERVICES DELIVERY")

"^DD",2,2.3227,0,"UP")
2.322
"^DD",2,2.3227,.01,0)
SEQUENCE^NJ5,0^^0;1^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."1.N) X
"^DD",2,2.3227,.01,1,0)
^.1
"^DD",2,2.3227,.01,1,1,0)
2.3227^B
"^DD",2,2.3227,.01,1,1,1)
S ^DPT(DA(3),.312,DA(2),6,DA(1),7,"B",$E(X,1,30),DA)=""
"^DD",2,2.3227,.01,1,1,2)
K ^DPT(DA(3),.312,DA(2),6,DA(1),7,"B",$E(X,1,30),DA)
"^DD",2,2.3227,.01,3)
Type a number between 1 and 99999, 0 Decimal Digits.
"^DD",2,2.3227,.01,21,0)
^^1^1^3090727^
"^DD",2,2.3227,.01,21,1,0)
Sequential entry number.
"^DD",2,2.3227,.01,23,0)
^^1^1^3090727^
"^DD",2,2.3227,.01,23,1,0)
Sequential number of ZHS segment.
"^DD",2,2.3227,.01,"DT")
3090727
"^DD",2,2.3227,.02,0)
BENEFIT QUANTITY^NJ9,3^^0;2^K:+X'=X!(X>99999)!(X<0)!(X?.E1"."4.N) X
"^DD",2,2.3227,.02,3)
Type a number between 0 and 99999, 3 Decimal Digits.
"^DD",2,2.3227,.02,21,0)
^^2^2^3100428^
"^DD",2,2.3227,.02,21,1,0)
Numeric value of benefit quantity as qualified by QUANTITY QUALIFIER
"^DD",2,2.3227,.02,21,2,0)
field.
"^DD",2,2.3227,.02,23,0)
^^1^1^3090727^
"^DD",2,2.3227,.02,23,1,0)
Source: 271 HL7 message, ZHS.3
"^DD",2,2.3227,.02,"DT")
3100428
"^DD",2,2.3227,.03,0)
QUANTITY QUALIFIER^P365.016'^IBE(365.016,^0;3^Q
"^DD",2,2.3227,.03,3)
Select benefit quantity qualifier.
"^DD",2,2.3227,.03,21,0)
^^1^1^3090727^
"^DD",2,2.3227,.03,21,1,0)
Benefit quantity qualifier.
"^DD",2,2.3227,.03,23,0)
^^1^1^3090727^
"^DD",2,2.3227,.03,23,1,0)
Source: 271 HL7 message, ZHS.2.1
"^DD",2,2.3227,.03,"DT")
3090727
"^DD",2,2.3227,.04,0)
SAMPLE SELECTION MODULUS^F^^0;4^K:$L(X)>6!($L(X)<1) X
"^DD",2,2.3227,.04,3)
Answer must be 1-6 characters in length.
"^DD",2,2.3227,.04,21,0)
^^2^2^3100428^
"^DD",2,2.3227,.04,21,1,0)
Sampling frequency in terms of a modulus of the Unit of Measure. Qualified
"^DD",2,2.3227,.04,21,2,0)
by UNITS OF MEASUREMENT field.
"^DD",2,2.3227,.04,23,0)
^^1^1^3090727^
"^DD",2,2.3227,.04,23,1,0)
Source: 271 HL7 message, ZHS.5
"^DD",2,2.3227,.04,"DT")
3100428
"^DD",2,2.3227,.05,0)
UNITS OF MEASUREMENT^S^DA:Days;MO:Months;VS:Visits;WK:Weeks;YR:Years;^0;5^Q
"^DD",2,2.3227,.05,3)
Select units of measurement.
"^DD",2,2.3227,.05,21,0)
^^1^1^3090727^
"^DD",2,2.3227,.05,21,1,0)
Units of measurement for frequency of the benefits.
"^DD",2,2.3227,.05,23,0)
^^1^1^3090727^
"^DD",2,2.3227,.05,23,1,0)
Source: 271 HL7 message, ZHS.4.1
"^DD",2,2.3227,.05,"DT")
3090727
"^DD",2,2.3227,.06,0)
TIME PERIODS^NJ8,2^^0;6^K:+X'=X!(X>99999)!(X<0)!(X?.E1"."3.N) X
"^DD",2,2.3227,.06,3)
Type a number between 0 and 99999, 2 Decimal Digits.
"^DD",2,2.3227,.06,21,0)
^^1^1^3100428^
"^DD",2,2.3227,.06,21,1,0)
Number of time periods as qualified by TIME PERIOD QUALIFIER field.
"^DD",2,2.3227,.06,23,0)
^^1^1^3090727^
"^DD",2,2.3227,.06,23,1,0)
Source: 271 HL7 message, ZHS.7
"^DD",2,2.3227,.06,"DT")
3100428
"^DD",2,2.3227,.07,0)
TIME PERIOD QUALIFIER^P365.015'^IBE(365.015,^0;7^Q
"^DD",2,2.3227,.07,3)
Select qualifier for the time period.
"^DD",2,2.3227,.07,21,0)
^^1^1^3090727^
"^DD",2,2.3227,.07,21,1,0)
Code that defines a time period.
"^DD",2,2.3227,.07,23,0)
^^1^1^3090727^
"^DD",2,2.3227,.07,23,1,0)
Source: 271 HL7 message, ZHS.6.1
"^DD",2,2.3227,.07,"DT")
3090727
"^DD",2,2.3227,.08,0)
DELIVERY FREQUENCY^P365.025'^IBE(365.025,^0;8^Q
"^DD",2,2.3227,.08,3)
Select code for delivery frequency.
"^DD",2,2.3227,.08,21,0)
^^1^1^3090727^
"^DD",2,2.3227,.08,21,1,0)
Code that defines frequency of deliveries.
"^DD",2,2.3227,.08,23,0)
^^1^1^3090727^
"^DD",2,2.3227,.08,23,1,0)
Source: 271 HL7 message, ZHS.8.1
"^DD",2,2.3227,.08,"DT")
3090727
"^DD",2,2.3227,.09,0)
DELIVERY PATTERN^S^A:1st Shift;B:2nd Shift;C:3rd Shift;D:A.M.;E:P.M.;F:As Directed;G:Any Shift;Y:None;^0;9^Q
"^DD",2,2.3227,.09,3)
Select delivery pattern.
"^DD",2,2.3227,.09,21,0)
^^1^1^3090727^
"^DD",2,2.3227,.09,21,1,0)
Code that defines pattern of deliveries.
"^DD",2,2.3227,.09,23,0)
^^1^1^3090727^
"^DD",2,2.3227,.09,23,1,0)
Source: 271 HL7 message, ZHS.9.1
"^DD",2,2.3227,.09,"DT")
3090727
"^DD",2,2.3228,0)
SUBSCRIBER DATES SUB-FIELD^^.04^4
"^DD",2,2.3228,0,"DT")
3090727
"^DD",2,2.3228,0,"IX","B",2.3228,.01)

"^DD",2,2.3228,0,"NM","SUBSCRIBER DATES")

"^DD",2,2.3228,0,"UP")
2.322
"^DD",2,2.3228,.01,0)
SEQUENCE^NJ5,0^^0;1^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."1.N) X
"^DD",2,2.3228,.01,1,0)
^.1
"^DD",2,2.3228,.01,1,1,0)
2.3228^B
"^DD",2,2.3228,.01,1,1,1)
S ^DPT(DA(3),.312,DA(2),6,DA(1),8,"B",$E(X,1,30),DA)=""
"^DD",2,2.3228,.01,1,1,2)
K ^DPT(DA(3),.312,DA(2),6,DA(1),8,"B",$E(X,1,30),DA)
"^DD",2,2.3228,.01,3)
Type a number between 1 and 99999, 0 Decimal Digits.
"^DD",2,2.3228,.01,21,0)
^^1^1^3090727^
"^DD",2,2.3228,.01,21,1,0)
Sequential number of ZSD segment.
"^DD",2,2.3228,.01,23,0)
^^1^1^3090727^
"^DD",2,2.3228,.01,23,1,0)
Sequential number 1..N, assigned automatically.
"^DD",2,2.3228,.01,"DT")
3090727
"^DD",2,2.3228,.02,0)
DATE^F^^0;2^K:$L(X)>50!($L(X)<8) X
"^DD",2,2.3228,.02,3)
Answer must be 8-50 characters in length.
"^DD",2,2.3228,.02,21,0)
^^1^1^3090727^
"^DD",2,2.3228,.02,21,1,0)
Date or range of dates.
"^DD",2,2.3228,.02,23,0)
^^1^1^3090727^
"^DD",2,2.3228,.02,23,1,0)
Source: 271 HL7 message, ZSD.4.1
"^DD",2,2.3228,.02,"DT")
3090727
"^DD",2,2.3228,.03,0)
DATE QUALIFIER^P365.026'^IBE(365.026,^0;3^Q
"^DD",2,2.3228,.03,3)
Select date qualifier.
"^DD",2,2.3228,.03,21,0)
^^1^1^3090727^
"^DD",2,2.3228,.03,21,1,0)
Code describing the type of date.
"^DD",2,2.3228,.03,23,0)
^^1^1^3090727^
"^DD",2,2.3228,.03,23,1,0)
Source: 271 HL7 message, ZSD.2.1
"^DD",2,2.3228,.03,"DT")
3090727
"^DD",2,2.3228,.04,0)
DATE FORMAT^S^D8:SINGLE DATE (CCYYMMDD);RD8:DATE RANGE (CCYYMMDD-CCYYMMDD);^0;4^Q
"^DD",2,2.3228,.04,3)
Select date format.
"^DD",2,2.3228,.04,21,0)
^^1^1^3090727^
"^DD",2,2.3228,.04,21,1,0)
Format of the date representation.
"^DD",2,2.3228,.04,23,0)
^^1^1^3090727^
"^DD",2,2.3228,.04,23,1,0)
Source: 271 HL7 message, ZSD.3.1
"^DD",2,2.3228,.04,"DT")
3090727
"^DD",2,2.3229,0)
SUBSCRIBER ADDITIONAL INFO SUB-FIELD^^.04^4
"^DD",2,2.3229,0,"DT")
3090922
"^DD",2,2.3229,0,"IX","B",2.3229,.01)

"^DD",2,2.3229,0,"NM","SUBSCRIBER ADDITIONAL INFO")

"^DD",2,2.3229,0,"UP")
2.322
"^DD",2,2.3229,.01,0)
SEQUENCE^NJ5,0^^0;1^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."1.N) X
"^DD",2,2.3229,.01,1,0)
^.1
"^DD",2,2.3229,.01,1,1,0)
2.3229^B
"^DD",2,2.3229,.01,1,1,1)
S ^DPT(DA(3),.312,DA(2),6,DA(1),9,"B",$E(X,1,30),DA)=""
"^DD",2,2.3229,.01,1,1,2)
K ^DPT(DA(3),.312,DA(2),6,DA(1),9,"B",$E(X,1,30),DA)
"^DD",2,2.3229,.01,3)
Type a number between 1 and 99999, 0 Decimal Digits.
"^DD",2,2.3229,.01,21,0)
^^1^1^3090727^
"^DD",2,2.3229,.01,21,1,0)
Sequential number of ZII segment.
"^DD",2,2.3229,.01,23,0)
^^1^1^3090727^
"^DD",2,2.3229,.01,23,1,0)
Sequential number 1..N, assigned automatically.
"^DD",2,2.3229,.01,"DT")
3090727
"^DD",2,2.3229,.02,0)
PLACE OF SERVICE^P353.1'^IBE(353.1,^0;2^Q
"^DD",2,2.3229,.02,3)
Select code for place of service.
"^DD",2,2.3229,.02,21,0)
^^1^1^3090922^
"^DD",2,2.3229,.02,21,1,0)
Place of service code.
"^DD",2,2.3229,.02,23,0)
^^1^1^3090922^
"^DD",2,2.3229,.02,23,1,0)
Source: 271 HL7 message, ZII.3.1 when ZII.2.1 has value of "ZZ"
"^DD",2,2.3229,.02,"DT")
3090922
"^DD",2,2.3229,.03,0)
DIAGNOSIS^P80'^ICD9(^0;3^Q
"^DD",2,2.3229,.03,3)
Select diagnosis code.
"^DD",2,2.3229,.03,21,0)
^^1^1^3090727^
"^DD",2,2.3229,.03,21,1,0)
Diagnosis code.
"^DD",2,2.3229,.03,23,0)
^^1^1^3090727^
"^DD",2,2.3229,.03,23,1,0)
Source: 271 HL7 message, ZII.3.1 when ZII.2.1 has value of "BF" or "BK"
"^DD",2,2.3229,.03,"DT")
3090727
"^DD",2,2.3229,.04,0)
QUALIFIER^S^BF:Diagnosis;BK:Principal Diagnosis;ZZ:Place of Service;^0;4^Q
"^DD",2,2.3229,.04,3)
Select additional information qualifier.
"^DD",2,2.3229,.04,21,0)
^^1^1^3090727^
"^DD",2,2.3229,.04,21,1,0)
Additional information qualifier.
"^DD",2,2.3229,.04,23,0)
^^1^1^3090727^
"^DD",2,2.3229,.04,23,1,0)
Source: 271 HL7 message, ZII.2.1
"^DD",2,2.3229,.04,"DT")
3090922
"^DD",2,2.32291,0)
SUBSCRIBER REFERENCE ID SUB-FIELD^^.04^4
"^DD",2,2.32291,0,"DT")
3090911
"^DD",2,2.32291,0,"IX","B",2.32291,.01)

"^DD",2,2.32291,0,"NM","SUBSCRIBER REFERENCE ID")

"^DD",2,2.32291,0,"UP")
2.322
"^DD",2,2.32291,.01,0)
SEQUENCE^NJ5,0^^0;1^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."1.N) X
"^DD",2,2.32291,.01,1,0)
^.1
"^DD",2,2.32291,.01,1,1,0)
2.32291^B
"^DD",2,2.32291,.01,1,1,1)
S ^DPT(DA(3),.312,DA(2),6,DA(1),10,"B",$E(X,1,30),DA)=""
"^DD",2,2.32291,.01,1,1,2)
K ^DPT(DA(3),.312,DA(2),6,DA(1),10,"B",$E(X,1,30),DA)
"^DD",2,2.32291,.01,3)
Type a number between 1 and 99999, 0 Decimal Digits.
"^DD",2,2.32291,.01,21,0)
^^1^1^3090910^
"^DD",2,2.32291,.01,21,1,0)
Sequential number of ZRF segment.
"^DD",2,2.32291,.01,23,0)
^^1^1^3090910^
"^DD",2,2.32291,.01,23,1,0)
Sequential number 1..N, assigned automatically.
"^DD",2,2.32291,.01,"DT")
3090911
"^DD",2,2.32291,.02,0)
REFERENCE ID^F^^0;2^K:$L(X)>30!($L(X)<1) X
"^DD",2,2.32291,.02,3)
Answer must be 1-30 characters in length.
"^DD",2,2.32291,.02,21,0)
^^1^1^3090910^
"^DD",2,2.32291,.02,21,1,0)
Reference id value.
"^DD",2,2.32291,.02,23,0)
^^1^1^3090910^
"^DD",2,2.32291,.02,23,1,0)
Source: 271 HL7 message, ZRF.3.
"^DD",2,2.32291,.02,"DT")
3090910
"^DD",2,2.32291,.03,0)
REFERENCE ID QUALIFIER^P365.028'^IBE(365.028,^0;3^Q
"^DD",2,2.32291,.03,3)
Select reference id qualifier.
"^DD",2,2.32291,.03,21,0)
^^1^1^3090910^
"^DD",2,2.32291,.03,21,1,0)
Code describing the type of reference id.
"^DD",2,2.32291,.03,23,0)
^^1^1^3090910^
"^DD",2,2.32291,.03,23,1,0)
Source: 271 HL7 message, ZRF.2.1.
"^DD",2,2.32291,.03,"DT")
3090910
"^DD",2,2.32291,.04,0)
DESCRIPTION^F^^0;4^K:$L(X)>80!($L(X)<1) X
"^DD",2,2.32291,.04,3)
Answer must be 1-80 characters in length.
"^DD",2,2.32291,.04,21,0)
^^1^1^3090910^
"^DD",2,2.32291,.04,21,1,0)
Short description of reference id.
"^DD",2,2.32291,.04,23,0)
^^1^1^3090910^
"^DD",2,2.32291,.04,23,1,0)
Source: 271 HL7 message, ZRF.4.
"^DD",2,2.32291,.04,"DT")
3090910
"^DD",350.9,350.9,51.02,0)
DAILY MAILMAN MSG^S^1:YES;0:NO;^51;2^Q
"^DD",350.9,350.9,51.02,3)
Answer 'Yes' if the daily eIV Statistical Report should be sent via MailMan.
"^DD",350.9,350.9,51.02,21,0)
^^4^4^3090818^
"^DD",350.9,350.9,51.02,21,1,0)
This field determines whether the daily eIV Statistical Report 
"^DD",350.9,350.9,51.02,21,2,0)
should be sent via MailMan.  This report contains information 
"^DD",350.9,350.9,51.02,21,3,0)
about the electronic insurance verification process - both
"^DD",350.9,350.9,51.02,21,4,0)
inquiries and responses.
"^DD",350.9,350.9,51.02,"DT")
3090818
"^DD",350.9,350.9,51.03,0)
DAILY MSG TIME^FX^^51;3^K:(X'?4N)!('X)!(X>2400)!($E(X,3,4)'<60) X
"^DD",350.9,350.9,51.03,3)
This is the time of day to generate the daily eIV Statistical Report sent via MailMan.  The time must be in four digit military format.
"^DD",350.9,350.9,51.03,21,0)
^^3^3^3090818^
"^DD",350.9,350.9,51.03,21,1,0)
Enter the time in four digit military format.
"^DD",350.9,350.9,51.03,21,2,0)
 
"^DD",350.9,350.9,51.03,21,3,0)
Examples:  0100 = 1 AM  1300 = 1 PM
"^DD",350.9,350.9,51.03,"DT")
3090818
"^DD",350.9,350.9,51.04,0)
MESSAGES MAILGROUP^RP3.8'^XMB(3.8,^51;4^Q
"^DD",350.9,350.9,51.04,3)
Select the mail group to whom eIV messages are sent.
"^DD",350.9,350.9,51.04,21,0)
^^2^2^3090818^
"^DD",350.9,350.9,51.04,21,1,0)
This field identifies the mail group to whom the daily eIV 
"^DD",350.9,350.9,51.04,21,2,0)
Statistical Report and eIV error messages will be sent via MailMan.
"^DD",350.9,350.9,51.04,"DT")
3090818
"^DD",350.9,350.9,51.06,0)
NUMBER RETRIES^NJ1,0^^51;6^K:+X'=X!(X>5)!(X<0)!(X?.E1"."1.N) X
"^DD",350.9,350.9,51.06,3)
Enter the number of times to retry an eIV transmission.  Enter a number between 0 and 5.
"^DD",350.9,350.9,51.06,21,0)
^^6^6^3090818^
"^DD",350.9,350.9,51.06,21,1,0)
This field specifies how many retries to attempt when a communication
"^DD",350.9,350.9,51.06,21,2,0)
timeout occurs before it is considered a communication failure.  
"^DD",350.9,350.9,51.06,21,3,0)
 
"^DD",350.9,350.9,51.06,21,4,0)
An entry of zero indicates that when a communication timeout occurs,
"^DD",350.9,350.9,51.06,21,5,0)
no retries shall be attempted and the inquiry will be considered a
"^DD",350.9,350.9,51.06,21,6,0)
communication failure.
"^DD",350.9,350.9,51.06,"DT")
3090818
"^DD",350.9,350.9,51.13,0)
HL7 RESPONSE PROCESSING^RS^B:Batch;I:Immediate;^51;13^Q
"^DD",350.9,350.9,51.13,3)
Enter 'I'mmediate for eIV responses to be forwarded to VistA immediately or 'B'atch to hold and batch the responses.
"^DD",350.9,350.9,51.13,21,0)
^^5^5^3090818^
"^DD",350.9,350.9,51.13,21,1,0)
This field allows the site to tell the Eligibility Communicator how
"^DD",350.9,350.9,51.13,21,2,0)
eIV responses should be returned to the site.  Batch means
"^DD",350.9,350.9,51.13,21,3,0)
that EC will hold all messages and return them between the HL7 Start
"^DD",350.9,350.9,51.13,21,4,0)
Time and HL7 Stop Time.  Immediate means that EC will return a
"^DD",350.9,350.9,51.13,21,5,0)
response as soon as it is received from the payer.
"^DD",350.9,350.9,51.13,"DT")
3090818
"^DD",350.9,350.9,51.14,0)
HL7 START TIME^RFX^^51;14^K:(X'?4N)!('X)!(X>2400)!($E(X,3,4)'<60) X
"^DD",350.9,350.9,51.14,3)
Enter the time when EC will start relaying eIV responses back to the site.  The time must be in four digit military format.
"^DD",350.9,350.9,51.14,21,0)
^^7^7^3090818^
"^DD",350.9,350.9,51.14,21,1,0)
Enter the time in military format.  This time represents when the
"^DD",350.9,350.9,51.14,21,2,0)
site has told the Eligibility Communicator to begin sending
"^DD",350.9,350.9,51.14,21,3,0)
eIV responses to the site.  This field only applies when the HL7
"^DD",350.9,350.9,51.14,21,4,0)
Response Processing is set to 'B'atch processing.  It is recommended
"^DD",350.9,350.9,51.14,21,5,0)
that this be a time during low CPU processing.
"^DD",350.9,350.9,51.14,21,6,0)
 
"^DD",350.9,350.9,51.14,21,7,0)
Examples:  0100 = 1 AM  1300 = 1 PM
"^DD",350.9,350.9,51.14,"DT")
3090818
"^DD",350.9,350.9,51.15,0)
HL7 MAXIMUM NUMBER^RNJ5,0^^51;15^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."1.N) X
"^DD",350.9,350.9,51.15,3)
Type a number between 1 and 99999, 0 Decimal Digits
"^DD",350.9,350.9,51.15,21,0)
^^4^4^3090818^
"^DD",350.9,350.9,51.15,21,1,0)
This field allows a site to restrict the daily number of HL7 
"^DD",350.9,350.9,51.15,21,2,0)
messages created and sent during the HL7 process for eIV. This
"^DD",350.9,350.9,51.15,21,3,0)
feature can be used to manage the amount of eIV HL7 traffic flowing
"^DD",350.9,350.9,51.15,21,4,0)
through the HL7 package.
"^DD",350.9,350.9,51.15,23,0)
^^3^3^3090818^
"^DD",350.9,350.9,51.15,23,1,0)
Patch IB*2*416 removed the ability for sites to limit the HL7 traffic and 
"^DD",350.9,350.9,51.15,23,2,0)
the maximum number of messages was set at 99999.  This field is not being 
"^DD",350.9,350.9,51.15,23,3,0)
removed in case this functionality is needed in the future.
"^DD",350.9,350.9,51.15,"DT")
3090818
"^DD",350.9,350.9,51.17,0)
BATCH EXTRACTS^350.9002S^^51.17;0
"^DD",350.9,350.9,51.17,21,0)
^^5^5^3090818^
"^DD",350.9,350.9,51.17,21,1,0)
This field identifies each of the three data extracts that eIV uses
"^DD",350.9,350.9,51.17,21,2,0)
to find insurance data via verification inquiries.
"^DD",350.9,350.9,51.17,21,3,0)
 
"^DD",350.9,350.9,51.17,21,4,0)
Extracts are defined for Insurance Buffer, Appointments, and
"^DD",350.9,350.9,51.17,21,5,0)
Non-Verified Insurance.
"^DD",350.9,350.9,51.19,0)
HL7 STOP TIME^RFX^^51;19^K:(X'?4N)!('X)!(X>2400)!($E(X,3,4)'<60) X
"^DD",350.9,350.9,51.19,3)
Enter the time when EC will stop relaying eIV responses back to the site.  The time must be in four digit military format.
"^DD",350.9,350.9,51.19,21,0)
^^6^6^3090818^
"^DD",350.9,350.9,51.19,21,1,0)
Enter the time in military format.  This time represents when the
"^DD",350.9,350.9,51.19,21,2,0)
site has told the Eligibility Communicator to stop sending
"^DD",350.9,350.9,51.19,21,3,0)
eIV responses to the site.  This field only applies when the HL7
"^DD",350.9,350.9,51.19,21,4,0)
Response Processing is set to 'Batch' processing.
"^DD",350.9,350.9,51.19,21,5,0)
 
"^DD",350.9,350.9,51.19,21,6,0)
Examples:  0100 = 1 AM  1300 = 1 PM
"^DD",350.9,350.9,51.19,"DT")
3090818
"^DD",350.9,350.9,51.2,0)
FAILURE MAILMAN MSG^S^1:YES;0:NO;^51;20^Q
"^DD",350.9,350.9,51.2,3)
Enter 'Yes' if a MailMan message should be generated when eIV is unable to electronically confirm the patient's insurance information due to a communications problem.
"^DD",350.9,350.9,51.2,21,0)
^^3^3^3090818^
"^DD",350.9,350.9,51.2,21,1,0)
This field allows the site to send a MailMan message for each 
"^DD",350.9,350.9,51.2,21,2,0)
communication failure.  A communication failure is defined as
"^DD",350.9,350.9,51.2,21,3,0)
having exhausted all retries.
"^DD",350.9,350.9,51.2,"DT")
3090818
"^DD",350.9,350.9,51.22,0)
REGISTRATION COMPLETE^S^1:YES;0:NO;^51;22^Q
"^DD",350.9,350.9,51.22,3)
Enter Yes or No.
"^DD",350.9,350.9,51.22,21,0)
^^4^4^3100428^^
"^DD",350.9,350.9,51.22,21,1,0)
This field indicates whether application acknowledgement has been received
"^DD",350.9,350.9,51.22,21,2,0)
and processed from the Eligibility Communicator. If the registration
"^DD",350.9,350.9,51.22,21,3,0)
message failed at the EC, no further processing of eIV messages will
"^DD",350.9,350.9,51.22,21,4,0)
occur.
"^DD",350.9,350.9,51.22,"DT")
3100428
"^DD",350.9,350.9,51.25,0)
MEDICARE PAYER^P365.12'^IBE(365.12,^51;25^Q
"^DD",350.9,350.9,51.25,3)
Select the Medicare entry from the Payer file.
"^DD",350.9,350.9,51.25,21,0)
^^3^3^3091022^
"^DD",350.9,350.9,51.25,21,1,0)
This field holds the Medicare WNR payer entry.  It is used to identify 
"^DD",350.9,350.9,51.25,21,2,0)
the Medicare payer for the insurance buffer lists and any other 
"^DD",350.9,350.9,51.25,21,3,0)
applications that need to know which payer is the Medicare WNR payer.
"^DD",350.9,350.9,51.25,23,0)
^^4^4^3091022^
"^DD",350.9,350.9,51.25,23,1,0)
This field is set during the post-install for IB*2*416.  It should not 
"^DD",350.9,350.9,51.25,23,2,0)
have to be changed unless the Medicare WNR payer entry itself gets 
"^DD",350.9,350.9,51.25,23,3,0)
changed.  This field is only available for editing via FileMan.  Edit 
"^DD",350.9,350.9,51.25,23,4,0)
with extreme care.
"^DD",350.9,350.9,51.25,"DT")
3091022
"^DD",350.9,350.9002,0)
BATCH EXTRACTS SUB-FIELD^^.06^6
"^DD",350.9,350.9002,0,"DT")
3090818
"^DD",350.9,350.9002,0,"IX","B",350.9002,.01)

"^DD",350.9,350.9002,0,"NM","BATCH EXTRACTS")

"^DD",350.9,350.9002,0,"UP")
350.9
"^DD",350.9,350.9002,.01,0)
BATCH EXTRACTS^MRS^1:Buffer;2:Appt;3:Non-verified;^0;1^Q
"^DD",350.9,350.9002,.01,1,0)
^.1
"^DD",350.9,350.9002,.01,1,1,0)
350.9002^B
"^DD",350.9,350.9002,.01,1,1,1)
S ^IBE(350.9,DA(1),51.17,"B",$E(X,1,30),DA)=""
"^DD",350.9,350.9002,.01,1,1,2)
K ^IBE(350.9,DA(1),51.17,"B",$E(X,1,30),DA)
"^DD",350.9,350.9002,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",350.9,350.9002,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",350.9,350.9002,.01,3)
Enter a code from the list.
"^DD",350.9,350.9002,.01,21,0)
^^4^4^3090818^
"^DD",350.9,350.9002,.01,21,1,0)
This field identifies each of the three data extracts that eIV uses
"^DD",350.9,350.9002,.01,21,2,0)
to find data to request insurance verification.
"^DD",350.9,350.9002,.01,21,3,0)
 
"^DD",350.9,350.9002,.01,21,4,0)
Buffer, appointment, and non-verified insurance.
"^DD",350.9,350.9002,.01,"DT")
3090818
"^DD",350.9,350.9002,.02,0)
ACTIVE?^RS^0:Not Active;1:Active;^0;2^Q
"^DD",350.9,350.9002,.02,3)
Enter 'Active' if the extract is active and should run daily.
"^DD",350.9,350.9002,.02,21,0)
^^2^2^3090818^
"^DD",350.9,350.9002,.02,21,1,0)
This parameter indicates whether or not this extract should be
"^DD",350.9,350.9002,.02,21,2,0)
performed during the daily eIV extract process.
"^DD",350.9,350.9002,.02,"DT")
3090818
"^DD",350.9,350.9002,.03,0)
SELECTION CRITERIA #1^NJ3,0^^0;3^K:+X'=X!(X>180)!(X<7)!(X?.E1"."1.N) X
"^DD",350.9,350.9002,.03,3)
Type a number between 7 and 180, 0 Decimal Digits
"^DD",350.9,350.9002,.03,21,0)
^^15^15^3090818^
"^DD",350.9,350.9002,.03,21,1,0)
This field is a parameter that is used by two of the data
"^DD",350.9,350.9002,.03,21,2,0)
extracts to determine whether a record should be extracted
"^DD",350.9,350.9002,.03,21,3,0)
or not. 
"^DD",350.9,350.9002,.03,21,4,0)
 
"^DD",350.9,350.9002,.03,21,5,0)
For the Appointments extract (#2), this indicates how far 
"^DD",350.9,350.9002,.03,21,6,0)
in the future a patient can be scheduled for an appointment
"^DD",350.9,350.9002,.03,21,7,0)
and be eligible for extract.  If the value is 10, then a
"^DD",350.9,350.9002,.03,21,8,0)
patient will be eligible for extract if their appointment
"^DD",350.9,350.9002,.03,21,9,0)
is within 10 days of the extract date.
"^DD",350.9,350.9002,.03,21,10,0)
 
"^DD",350.9,350.9002,.03,21,11,0)
For the Non-Verified Insurance extract (#3), this indicates
"^DD",350.9,350.9002,.03,21,12,0)
how far in the past a patient must have been seen to be
"^DD",350.9,350.9002,.03,21,13,0)
eligible for extract.  If the value is 10, then a patient
"^DD",350.9,350.9002,.03,21,14,0)
will be eligible for extract if they were seen in the last
"^DD",350.9,350.9002,.03,21,15,0)
10 days.  
"^DD",350.9,350.9002,.03,"DT")
3090818
"^DD",350.9,350.9002,.04,0)
SELECTION CRITERIA #2^NJ3,0^^0;4^K:+X'=X!(X>180)!(X<7)!(X?.E1"."1.N) X
"^DD",350.9,350.9002,.04,3)
Type a number between 7 and 180, 0 Decimal Digits
"^DD",350.9,350.9002,.04,21,0)
^^13^13^3090818^
"^DD",350.9,350.9002,.04,21,1,0)
This field is a parameter that is used by the Non-Verified 
"^DD",350.9,350.9002,.04,21,2,0)
Insurance extract to determine whether a record should be extracted
"^DD",350.9,350.9002,.04,21,3,0)
or not. 
"^DD",350.9,350.9002,.04,21,4,0)
 
"^DD",350.9,350.9002,.04,21,5,0)
For the Non-Verified Insurance extract, this is similar to the
"^DD",350.9,350.9002,.04,21,6,0)
FRESHNESS DAYS parameter in that this represents how long to wait
"^DD",350.9,350.9002,.04,21,7,0)
before eIV can attempt to re-verify the same insurance for that
"^DD",350.9,350.9002,.04,21,8,0)
patient. 
"^DD",350.9,350.9002,.04,21,9,0)
 
"^DD",350.9,350.9002,.04,21,10,0)
If the value is 10, this means that eIV can attempt to re-verify
"^DD",350.9,350.9002,.04,21,11,0)
insurance for a patient 11 days after the most recently inquired
"^DD",350.9,350.9002,.04,21,12,0)
date.  A specific date is always asked of the payer when trying to
"^DD",350.9,350.9002,.04,21,13,0)
determine patient's eligibility.
"^DD",350.9,350.9002,.04,"DT")
3090818
"^DD",350.9,350.9002,.05,0)
MAXIMUM EXTRACT NUMBER^RNJ5,0^^0;5^K:+X'=X!(X>99999)!(X<10)!(X?.E1"."1.N) X
"^DD",350.9,350.9002,.05,3)
Type a number between 10 and 99999, 0 Decimal Digits
"^DD",350.9,350.9002,.05,21,0)
^^2^2^3090818^
"^DD",350.9,350.9002,.05,21,1,0)
This field allows a site to restrict the daily number of records
"^DD",350.9,350.9002,.05,21,2,0)
extracted and placed in the eIV Transmission Queue.
"^DD",350.9,350.9002,.05,23,0)
^^3^3^3090818^
"^DD",350.9,350.9002,.05,23,1,0)
Patch IB*2*416 removed the ability for sites to limit the HL7 traffic and
"^DD",350.9,350.9002,.05,23,2,0)
the maximum number of messages was set at 99999.  This field is not being
"^DD",350.9,350.9002,.05,23,3,0)
removed in case this functionality is needed in the future.
"^DD",350.9,350.9002,.05,"DT")
3090818
"^DD",350.9,350.9002,.06,0)
SUPPRESS BUFFER CREATION^S^0:No;1:Yes;^0;6^Q
"^DD",350.9,350.9002,.06,3)
Enter 'Yes' if Insurance Buffer entries should not be created when the insurance inquiry could not be transmitted.  Enter 'No', otherwise.
"^DD",350.9,350.9002,.06,21,0)
^^12^12^3090818^
"^DD",350.9,350.9002,.06,21,1,0)
This flag will suppress the creation of Insurance Buffer entries 
"^DD",350.9,350.9002,.06,21,2,0)
when attempting to create insurance inquiries during the eIV
"^DD",350.9,350.9002,.06,21,3,0)
process.  If the insurance inquiry cannot be transmitted because
"^DD",350.9,350.9002,.06,21,4,0)
the insurance company does not resolve to a valid and eligible
"^DD",350.9,350.9002,.06,21,5,0)
payer, this flag will not allow an Insurance Buffer entry to be
"^DD",350.9,350.9002,.06,21,6,0)
created and flagged to be corrected manually before being sent
"^DD",350.9,350.9002,.06,21,7,0)
out.  This is intended to reduce the number of Insurance Buffer
"^DD",350.9,350.9002,.06,21,8,0)
entries to be resolved manually which did not originate in the
"^DD",350.9,350.9002,.06,21,9,0)
Buffer originally. 
"^DD",350.9,350.9002,.06,21,10,0)
 
"^DD",350.9,350.9002,.06,21,11,0)
Please note that this flag only applies to the Appointment
"^DD",350.9,350.9002,.06,21,12,0)
(Pre-Reg) extract and the Non-verified extract.
"^DD",350.9,350.9002,.06,"DT")
3090818
"^DD",355.33,355.33,62.02,0)
SUBSCRIBER ADDRESS LINE 1^F^^62;2^K:$L(X)>55!($L(X)<1) X
"^DD",355.33,355.33,62.02,3)
Answer must be 1-55 characters in length.
"^DD",355.33,355.33,62.02,21,0)
^^1^1^3091008^
"^DD",355.33,355.33,62.02,21,1,0)
Subscriber address, line 1.
"^DD",355.33,355.33,62.02,"DT")
3091008
"^DD",355.33,355.33,62.03,0)
SUBSCRIBER ADDRESS LINE 2^F^^62;3^K:$L(X)>55!($L(X)<1) X
"^DD",355.33,355.33,62.03,3)
Answer must be 1-55 characters in length.
"^DD",355.33,355.33,62.03,21,0)
^^1^1^3091008^
"^DD",355.33,355.33,62.03,21,1,0)
Subscriber address, line 2.
"^DD",355.33,355.33,62.03,"DT")
3091008
"^DD",355.33,355.33,62.04,0)
SUBSCRIBER ADDRESS CITY^F^^62;4^K:$L(X)>30!($L(X)<1) X
"^DD",355.33,355.33,62.04,3)
Answer must be 1-30 characters in length.
"^DD",355.33,355.33,62.04,21,0)
^^1^1^3091008^
"^DD",355.33,355.33,62.04,21,1,0)
Subscriber address, city.
"^DD",355.33,355.33,62.04,"DT")
3091008
"^DD",355.33,355.33,62.05,0)
SUBSCRIBER ADDRESS STATE^P5'^DIC(5,^62;5^Q
"^DD",355.33,355.33,62.05,3)
Please select state.
"^DD",355.33,355.33,62.05,21,0)
^^1^1^3091008^
"^DD",355.33,355.33,62.05,21,1,0)
Subscriber address, state.
"^DD",355.33,355.33,62.05,"DT")
3091008
"^DD",355.33,355.33,62.06,0)
SUBSCRIBER ADDRESS ZIP^F^^62;6^K:$L(X)>15!($L(X)<1) X
"^DD",355.33,355.33,62.06,3)
Answer must be 1-15 characters in length.
"^DD",355.33,355.33,62.06,21,0)
^^1^1^3091008^
"^DD",355.33,355.33,62.06,21,1,0)
Subscriber address, zip code.
"^DD",355.33,355.33,62.06,"DT")
3091008
"^DD",365,365,1.09,0)
PT RELATIONSHIP TO INSURED^S^01:PATIENT;02:SPOUSE;03:NATURAL CHILD;08:EMPLOYEE;09:UNKNOWN;11:ORGAN DONOR;15:INJURED PLAINTIFF;18:PARENT;34:OTHER ADULT;^1;9^Q
"^DD",365,365,1.09,.1)
Pt Rel to Insured
"^DD",365,365,1.09,3)
What is patient's relationship to insured?
"^DD",365,365,1.09,21,0)
^.001^2^2^3030507^^
"^DD",365,365,1.09,21,1,0)
This is a definition of the patient's relationship to the
"^DD",365,365,1.09,21,2,0)
insured person.
"^DD",365,365,1.09,"DT")
3100429
"^DD",365,365,2,0)
ELIGIBILITY/BENEFIT^365.02^^2;0
"^DD",365,365,2,21,0)
^^2^2^3090910^
"^DD",365,365,2,21,1,0)
This multiple contains all of the eligibility and benefit data
"^DD",365,365,2,21,2,0)
for a specific insured person returned from the Payer.
"^DD",365,365,5.01,0)
SUBSCRIBER ADDRESS LINE 1^F^^5;1^K:$L(X)>55!($L(X)<1) X
"^DD",365,365,5.01,3)
Answer must be 1-55 characters in length.
"^DD",365,365,5.01,21,0)
^.001^1^1^3090924^^
"^DD",365,365,5.01,21,1,0)
Subscriber address, line 1.
"^DD",365,365,5.01,23,0)
^^1^1^3090924^
"^DD",365,365,5.01,23,1,0)
Source: 271 HL7 message, PID.11.1.1.
"^DD",365,365,5.01,"DT")
3090924
"^DD",365,365,5.02,0)
SUBSCRIBER ADDRESS LINE 2^F^^5;2^K:$L(X)>55!($L(X)<1) X
"^DD",365,365,5.02,3)
Answer must be 1-55 characters in length.
"^DD",365,365,5.02,21,0)
^.001^1^1^3090924^^
"^DD",365,365,5.02,21,1,0)
Subscriber address, line 2.
"^DD",365,365,5.02,23,0)
^^1^1^3090924^
"^DD",365,365,5.02,23,1,0)
Source: 271 HL7 message, PID.11.2.
"^DD",365,365,5.02,"DT")
3090924
"^DD",365,365,5.03,0)
SUBSCRIBER ADDRESS CITY^F^^5;3^K:$L(X)>30!($L(X)<1) X
"^DD",365,365,5.03,3)
Answer must be 1-30 characters in length.
"^DD",365,365,5.03,21,0)
^.001^1^1^3090924^^
"^DD",365,365,5.03,21,1,0)
Subscriber address, city.
"^DD",365,365,5.03,23,0)
^^1^1^3090924^
"^DD",365,365,5.03,23,1,0)
Source: 271 HL7 message, PID.11.3.
"^DD",365,365,5.03,"DT")
3090924
"^DD",365,365,5.04,0)
SUBSCRIBER ADDRESS STATE^P5'^DIC(5,^5;4^Q
"^DD",365,365,5.04,3)
Please select state.
"^DD",365,365,5.04,21,0)
^.001^1^1^3090924^^
"^DD",365,365,5.04,21,1,0)
Subscriber address, state.
"^DD",365,365,5.04,23,0)
^^1^1^3090924^
"^DD",365,365,5.04,23,1,0)
Source: 271 HL7 message, PID.11.4.
"^DD",365,365,5.04,"DT")
3090924
"^DD",365,365,5.05,0)
SUBSCRIBER ADDRESS ZIP^F^^5;5^K:$L(X)>15!($L(X)<1) X
"^DD",365,365,5.05,3)
Answer must be 1-15 characters in length.
"^DD",365,365,5.05,21,0)
^.001^1^1^3090924^^
"^DD",365,365,5.05,21,1,0)
Subscriber address, zip code.
"^DD",365,365,5.05,23,0)
^^1^1^3090924^
"^DD",365,365,5.05,23,1,0)
Source: 271 HL7 message, PID.11.5.
"^DD",365,365,5.05,"DT")
3090924
"^DD",365,365.02,0)
ELIGIBILITY/BENEFIT SUB-FIELD^^10^41
"^DD",365,365.02,0,"DT")
3091106
"^DD",365,365.02,0,"IX","B",365.02,.01)

"^DD",365,365.02,0,"NM","ELIGIBILITY/BENEFIT")

"^DD",365,365.02,0,"UP")
365
"^DD",365,365.02,.01,0)
EB NUMBER^NJ3,0^^0;1^K:+X'=X!(X>999)!(X<1)!(X?.E1"."1.N) X
"^DD",365,365.02,.01,1,0)
^.1
"^DD",365,365.02,.01,1,1,0)
365.02^B
"^DD",365,365.02,.01,1,1,1)
S ^IBCN(365,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",365,365.02,.01,1,1,2)
K ^IBCN(365,DA(1),2,"B",$E(X,1,30),DA)
"^DD",365,365.02,.01,1,1,"DT")
3020715
"^DD",365,365.02,.01,3)
Type a number between 1 and 999, 0 Decimal Digits.
"^DD",365,365.02,.01,21,0)
^^3^3^3090910^
"^DD",365,365.02,.01,21,1,0)
This is a sequential number corresponding to the Set-ID for all
"^DD",365,365.02,.01,21,2,0)
of the eligibility/benefit (X.12 EB segments) segments coming
"^DD",365,365.02,.01,21,3,0)
into VISTA.
"^DD",365,365.02,.01,"DT")
3090911
"^DD",365,365.02,.02,0)
ELIGIBILITY/BENEFIT INFO^P365.011'^IBE(365.011,^0;2^Q
"^DD",365,365.02,.02,.1)
Elig/Ben Info
"^DD",365,365.02,.02,3)
Enter an eligibility/benefit code from the list.
"^DD",365,365.02,.02,21,0)
^^2^2^3091013^
"^DD",365,365.02,.02,21,1,0)
This field contains a code identifying the eligibility status
"^DD",365,365.02,.02,21,2,0)
of the individual or the benefit returned by the Payer.
"^DD",365,365.02,.02,23,0)
^^1^1^3091013^
"^DD",365,365.02,.02,23,1,0)
It corresponds to X.12 271 EB01 data element.
"^DD",365,365.02,.02,"DT")
3091013
"^DD",365,365.02,.03,0)
COVERAGE LEVEL^P365.012'^IBE(365.012,^0;3^Q
"^DD",365,365.02,.03,.1)
Coverage Level
"^DD",365,365.02,.03,3)
Enter a coverage level code from the list.
"^DD",365,365.02,.03,21,0)
^^1^1^3091013^
"^DD",365,365.02,.03,21,1,0)
This field identifies the level of coverage of benefits.
"^DD",365,365.02,.03,23,0)
^^1^1^3091013^
"^DD",365,365.02,.03,23,1,0)
It corresponds to X.12 271 EB02 data element.
"^DD",365,365.02,.03,"DT")
3091013
"^DD",365,365.02,.04,0)
SERVICE TYPE^P365.013'^IBE(365.013,^0;4^Q
"^DD",365,365.02,.04,.1)
Service Type
"^DD",365,365.02,.04,3)
Enter the service type code from the list.
"^DD",365,365.02,.04,21,0)
^^1^1^3091013^
"^DD",365,365.02,.04,21,1,0)
This field is a code identifying the classification of service.
"^DD",365,365.02,.04,23,0)
^^1^1^3091013^
"^DD",365,365.02,.04,23,1,0)
It corresponds to X.12 271 EB03 data element.
"^DD",365,365.02,.04,"DT")
3091013
"^DD",365,365.02,.05,0)
INSURANCE TYPE^P365.014'^IBE(365.014,^0;5^Q
"^DD",365,365.02,.05,.1)
Insurance Type
"^DD",365,365.02,.05,3)
Enter the insurance type code from the list.
"^DD",365,365.02,.05,21,0)
^^2^2^3100428^
"^DD",365,365.02,.05,21,1,0)
This is a code identifying the type of insurance policy within
"^DD",365,365.02,.05,21,2,0)
a specific insurance program.
"^DD",365,365.02,.05,23,0)
^^1^1^3091013^
"^DD",365,365.02,.05,23,1,0)
It corresponds to X.12 271 EB04 data element.
"^DD",365,365.02,.05,"DT")
3100428
"^DD",365,365.02,.06,0)
PLAN COVERAGE DESCRIPTION^F^^0;6^K:$L(X)>50!($L(X)<1) X
"^DD",365,365.02,.06,.1)
Plan Coverage Description
"^DD",365,365.02,.06,3)
Answer must be 1-50 characters in length.
"^DD",365,365.02,.06,21,0)
^^2^2^3091013^
"^DD",365,365.02,.06,21,1,0)
This code is a description or number that identifies the plan
"^DD",365,365.02,.06,21,2,0)
or coverage.
"^DD",365,365.02,.06,23,0)
^^1^1^3091013^
"^DD",365,365.02,.06,23,1,0)
It corresponds to X.12 271 EB05 data element.
"^DD",365,365.02,.06,"DT")
3091013
"^DD",365,365.02,.07,0)
TIME PERIOD QUALIFIER^P365.015'^IBE(365.015,^0;7^Q
"^DD",365,365.02,.07,.1)
Time Period
"^DD",365,365.02,.07,3)
Enter the type of time period code from the list.
"^DD",365,365.02,.07,21,0)
^^2^2^3100428^
"^DD",365,365.02,.07,21,1,0)
This is a code for the time period category that determines for how long 
"^DD",365,365.02,.07,21,2,0)
the benefits are available.
"^DD",365,365.02,.07,23,0)
^^1^1^3091013^
"^DD",365,365.02,.07,23,1,0)
It corresponds to X.12 271 EB06 data element.
"^DD",365,365.02,.07,"DT")
3100428
"^DD",365,365.02,.08,0)
MONETARY AMOUNT^NJ12,2^^0;8^S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>999999999)!(X<0)!(X?.E1"."3.N) X
"^DD",365,365.02,.08,3)
Type a Dollar amount between 0 and 999999999, 2 Decimal Digits.
"^DD",365,365.02,.08,21,0)
^^2^2^3091013^
"^DD",365,365.02,.08,21,1,0)
This field is populated if eligibility or benefit must be
"^DD",365,365.02,.08,21,2,0)
qualified by a monetary amount.
"^DD",365,365.02,.08,23,0)
^^1^1^3091013^
"^DD",365,365.02,.08,23,1,0)
It corresponds to X.12 271 EB07 data element.
"^DD",365,365.02,.08,"DT")
3091013
"^DD",365,365.02,.09,0)
PERCENT^NJ9,5^^0;9^K:+X'=X!(X>100)!(X<0)!(X?.E1"."6.N) X
"^DD",365,365.02,.09,.1)
Percentage
"^DD",365,365.02,.09,3)
Type a number between 0 and 100, 5 Decimal Digits.
"^DD",365,365.02,.09,21,0)
^^2^2^3091013^
"^DD",365,365.02,.09,21,1,0)
This field is used if eligibility or benefit must be qualified
"^DD",365,365.02,.09,21,2,0)
by a percentage.
"^DD",365,365.02,.09,23,0)
^^1^1^3091013^
"^DD",365,365.02,.09,23,1,0)
It corresponds to X.12 271 EB08 data element.
"^DD",365,365.02,.09,"DT")
3091013
"^DD",365,365.02,.1,0)
QUANTITY QUALIFIER^P365.016'^IBE(365.016,^0;10^Q
"^DD",365,365.02,.1,.1)
Quantity
"^DD",365,365.02,.1,3)
Enter the type of quantity code from the list.
"^DD",365,365.02,.1,21,0)
^^2^2^3091013^
"^DD",365,365.02,.1,21,1,0)
This field is used to identify the type of units that are being
"^DD",365,365.02,.1,21,2,0)
conveyed in the QUANTITY field (#.11).
"^DD",365,365.02,.1,23,0)
^^1^1^3091013^
"^DD",365,365.02,.1,23,1,0)
It corresponds to X.12 271 EB09 data element.
"^DD",365,365.02,.1,"DT")
3091013
"^DD",365,365.02,.11,0)
QUANTITY^F^^0;11^K:$L(X)>15!($L(X)<1) X
"^DD",365,365.02,.11,3)
Answer must be 1-15 characters in length.
"^DD",365,365.02,.11,21,0)
^^2^2^3091013^
"^DD",365,365.02,.11,21,1,0)
This field number is used for the quantity value as qualified by
"^DD",365,365.02,.11,21,2,0)
the QUANTITY QUALIFIER field.
"^DD",365,365.02,.11,23,0)
^^1^1^3091013^
"^DD",365,365.02,.11,23,1,0)
It corresponds to X.12 271 EB10 data element.
"^DD",365,365.02,.11,"DT")
3091013
"^DD",365,365.02,.12,0)
AUTHORIZATION/CERTIFICATION^S^Y:YES;N:NO;U:UNKNOWN;^0;12^Q
"^DD",365,365.02,.12,.1)
Authorization/Certification
"^DD",365,365.02,.12,3)
Enter YES if authorization or certification is required.
"^DD",365,365.02,.12,21,0)
^^2^2^3091013^
"^DD",365,365.02,.12,21,1,0)
This field indicates that an authorization or certification
"^DD",365,365.02,.12,21,2,0)
is required per plan provisions.
"^DD",365,365.02,.12,23,0)
^^1^1^3091013^
"^DD",365,365.02,.12,23,1,0)
It corresponds to X.12 271 EB11 data element.
"^DD",365,365.02,.12,"DT")
3091013
"^DD",365,365.02,.13,0)
IN PLAN^S^Y:YES;N:NO;U:UNKNOWN;^0;13^Q
"^DD",365,365.02,.13,.1)
In-Plan-Network
"^DD",365,365.02,.13,3)
Enter YES if the benefits identified are In-Plan-Network.
"^DD",365,365.02,.13,21,0)
^^5^5^3091013^
"^DD",365,365.02,.13,21,1,0)
This field indicates the plan network indicator.  A YES value indicates
"^DD",365,365.02,.13,21,2,0)
the benefits identified are considered In-Plan-Network.  A NO value
"^DD",365,365.02,.13,21,3,0)
indicates that the benefits identified are considered 
"^DD",365,365.02,.13,21,4,0)
Out-Of-Plan-Network.  A "U" value indicates it is unknown whether the
"^DD",365,365.02,.13,21,5,0)
benefits identified are part of the Plan Network.
"^DD",365,365.02,.13,23,0)
^^1^1^3091013^
"^DD",365,365.02,.13,23,1,0)
It corresponds to X.12 271 EB12 data element.
"^DD",365,365.02,.13,"DT")
3091013
"^DD",365,365.02,1.01,0)
PROCEDURE CODING METHOD^S^AD:American Dental Association;CJ:CPT;HC:HCPCS;ID:ICD-9-CM;N4:National Drug Code;ZZ:Mutually Defined;^1;1^Q
"^DD",365,365.02,1.01,3)
Enter the code describing procedure coding method.
"^DD",365,365.02,1.01,21,0)
^.001^1^1^3090710^^
"^DD",365,365.02,1.01,21,1,0)
Two character code describing procedure coding method.
"^DD",365,365.02,1.01,23,0)
^^1^1^3090710^
"^DD",365,365.02,1.01,23,1,0)
Source: 271 HL7 message, ZEB.14.1
"^DD",365,365.02,1.01,"DT")
3090922
"^DD",365,365.02,1.02,0)
PROCEDURE CODE^F^^1;2^K:$L(X)>48!($L(X)<1) X
"^DD",365,365.02,1.02,3)
Answer must be 1-48 characters in length.
"^DD",365,365.02,1.02,21,0)
^.001^1^1^3090710^^
"^DD",365,365.02,1.02,21,1,0)
Identification code for the procedure.
"^DD",365,365.02,1.02,23,0)
^^1^1^3090710^
"^DD",365,365.02,1.02,23,1,0)
Source: 271 HL7 message, ZEB.15
"^DD",365,365.02,1.02,"DT")
3090710
"^DD",365,365.02,1.03,0)
PROCEDURE MODIFIER 1^F^^1;3^K:$L(X)>2!($L(X)<1) X
"^DD",365,365.02,1.03,3)
Answer must be 1-2 characters in length.
"^DD",365,365.02,1.03,21,0)
^.001^1^1^3090710^^
"^DD",365,365.02,1.03,21,1,0)
Identifies special circumstances related to the procedure; first modifier.
"^DD",365,365.02,1.03,23,0)
^^1^1^3090710^
"^DD",365,365.02,1.03,23,1,0)
Source: 271 HL7 message, ZEB.16 (repetition 1)
"^DD",365,365.02,1.03,"DT")
3090710
"^DD",365,365.02,1.04,0)
PROCEDURE MODIFIER 2^F^^1;4^K:$L(X)>2!($L(X)<1) X
"^DD",365,365.02,1.04,3)
Answer must be 1-2 characters in length.
"^DD",365,365.02,1.04,21,0)
^.001^2^2^3090710^^
"^DD",365,365.02,1.04,21,1,0)
Identifies special circumstances related to the procedure; second
"^DD",365,365.02,1.04,21,2,0)
modifier.
"^DD",365,365.02,1.04,23,0)
^^1^1^3090710^
"^DD",365,365.02,1.04,23,1,0)
Source: 271 HL7 message, ZEB.16 (repetition 2)
"^DD",365,365.02,1.04,"DT")
3090710
"^DD",365,365.02,1.05,0)
PROCEDURE MODIFIER 3^F^^1;5^K:$L(X)>2!($L(X)<1) X
"^DD",365,365.02,1.05,3)
Answer must be 1-2 characters in length.
"^DD",365,365.02,1.05,21,0)
^.001^1^1^3090710^^
"^DD",365,365.02,1.05,21,1,0)
Identifies special circumstances related to the procedure; third modifier.
"^DD",365,365.02,1.05,23,0)
^^1^1^3090710^
"^DD",365,365.02,1.05,23,1,0)
Source: 271 HL7 message, ZEB.16 (repetition 3)
"^DD",365,365.02,1.05,"DT")
3090710
"^DD",365,365.02,1.06,0)
PROCEDURE MODIFIER 4^F^^1;6^K:$L(X)>2!($L(X)<1) X
"^DD",365,365.02,1.06,3)
Answer must be 1-2 characters in length.
"^DD",365,365.02,1.06,21,0)
^.001^2^2^3090710^^
"^DD",365,365.02,1.06,21,1,0)
Identifies special circumstances related to the procedure; fourth
"^DD",365,365.02,1.06,21,2,0)
modifier.
"^DD",365,365.02,1.06,23,0)
^^1^1^3090710^
"^DD",365,365.02,1.06,23,1,0)
Source: 271 HL7 message, ZEB.16 (repetition 4)
"^DD",365,365.02,1.06,"DT")
3090710
"^DD",365,365.02,2,0)
NOTES^365.22^^2;0
"^DD",365,365.02,2,21,0)
^^2^2^3090910^
"^DD",365,365.02,2,21,1,0)
This field contains any additional text about the eligibility
"^DD",365,365.02,2,21,2,0)
benefit information.  It is transcribed from X.12 271 MSG segments.
"^DD",365,365.02,3.01,0)
ENTITY ID CODE^P365.022'^IBE(365.022,^3;1^Q
"^DD",365,365.02,3.01,3)
Select X12 code for entity identifier.
"^DD",365,365.02,3.01,21,0)
^.001^1^1^3090710^^
"^DD",365,365.02,3.01,21,1,0)
X12 Entity Identifier Code.
"^DD",365,365.02,3.01,23,0)
^^1^1^3090710^
"^DD",365,365.02,3.01,23,1,0)
Source: 271 HL7 message, ZTY.2.1
"^DD",365,365.02,3.01,"DT")
3090710
"^DD",365,365.02,3.02,0)
ENTITY TYPE^S^1:Person;2:Non-Person Entity;^3;2^Q
"^DD",365,365.02,3.02,3)
Select type of the entity.
"^DD",365,365.02,3.02,21,0)
^.001^1^1^3090710^^
"^DD",365,365.02,3.02,21,1,0)
Entity Type Qualifier.
"^DD",365,365.02,3.02,23,0)
^^1^1^3090710^
"^DD",365,365.02,3.02,23,1,0)
Source: 271 HL7 message, ZTY.3.1
"^DD",365,365.02,3.02,"DT")
3090710
"^DD",365,365.02,3.03,0)
NAME^F^^3;3^K:$L(X)>98!($L(X)<1) X
"^DD",365,365.02,3.03,3)
Answer must be 1-98 characters in length.
"^DD",365,365.02,3.03,21,0)
^.001^1^1^3090710^^
"^DD",365,365.02,3.03,21,1,0)
Name of person or organization.
"^DD",365,365.02,3.03,23,0)
^^3^3^3090710^
"^DD",365,365.02,3.03,23,1,0)
Source: 271 HL7 message, combined elements ZTY.4.1.1 (last name or
"^DD",365,365.02,3.03,23,2,0)
organization name), ZTY.4.2 (first name) , ZTY.4.3 (middle name), and
"^DD",365,365.02,3.03,23,3,0)
ZTY.4.4 (suffix).
"^DD",365,365.02,3.03,"DT")
3090710
"^DD",365,365.02,3.04,0)
ENTITY ID^F^^3;4^K:$L(X)>80!($L(X)<1) X
"^DD",365,365.02,3.04,3)
Answer must be 1-80 characters in length.
"^DD",365,365.02,3.04,21,0)
^.001^1^1^3090710^^
"^DD",365,365.02,3.04,21,1,0)
Entity identifier.
"^DD",365,365.02,3.04,23,0)
^^1^1^3090710^
"^DD",365,365.02,3.04,23,1,0)
Source: 271 HL7 message, ZTY.6
"^DD",365,365.02,3.04,"DT")
3090710
"^DD",365,365.02,3.05,0)
ENTITY ID QUALIFIER^P365.023'^IBE(365.023,^3;5^Q
"^DD",365,365.02,3.05,3)
Select X12 code for ID qualifier.
"^DD",365,365.02,3.05,21,0)
^.001^1^1^3090710^^
"^DD",365,365.02,3.05,21,1,0)
Code designating the system/method used for Identification.
"^DD",365,365.02,3.05,23,0)
^^1^1^3090710^
"^DD",365,365.02,3.05,23,1,0)
Source: 271 HL7 message, ZTY.5.1
"^DD",365,365.02,3.05,"DT")
3090710
"^DD",365,365.02,4.01,0)
ADDRESS LINE 1^F^^4;1^K:$L(X)>55!($L(X)<1) X
"^DD",365,365.02,4.01,3)
Answer must be 1-55 characters in length.
"^DD",365,365.02,4.01,21,0)
^.001^1^1^3090710^^
"^DD",365,365.02,4.01,21,1,0)
Entity address, line 1.
"^DD",365,365.02,4.01,23,0)
^^1^1^3090710^
"^DD",365,365.02,4.01,23,1,0)
Source: 271 HL message, ZTY.7.1.1
"^DD",365,365.02,4.01,"DT")
3090710
"^DD",365,365.02,4.02,0)
ADDRESS LINE 2^F^^4;2^K:$L(X)>55!($L(X)<1) X
"^DD",365,365.02,4.02,3)
Answer must be 1-55 characters in length.
"^DD",365,365.02,4.02,21,0)
^.001^1^1^3090710^^
"^DD",365,365.02,4.02,21,1,0)
Entity address, line 2.
"^DD",365,365.02,4.02,23,0)
^^1^1^3090710^
"^DD",365,365.02,4.02,23,1,0)
Source: 271 HL7 message, ZTY.7.2
"^DD",365,365.02,4.02,"DT")
3090710
"^DD",365,365.02,4.03,0)
CITY^F^^4;3^K:$L(X)>30!($L(X)<1) X
"^DD",365,365.02,4.03,3)
Answer must be 1-30 characters in length.
"^DD",365,365.02,4.03,21,0)
^.001^1^1^3090710^^
"^DD",365,365.02,4.03,21,1,0)
Entity address, city.
"^DD",365,365.02,4.03,23,0)
^^1^1^3090710^
"^DD",365,365.02,4.03,23,1,0)
Source: 271 HL7 message, ZTY.7.3
"^DD",365,365.02,4.03,"DT")
3090710
"^DD",365,365.02,4.04,0)
STATE^P5'^DIC(5,^4;4^Q
"^DD",365,365.02,4.04,3)
Select state/province code.
"^DD",365,365.02,4.04,21,0)
^.001^1^1^3090710^^
"^DD",365,365.02,4.04,21,1,0)
Entity address, state or province code.
"^DD",365,365.02,4.04,23,0)
^^1^1^3090710^
"^DD",365,365.02,4.04,23,1,0)
Source: 271 HL7 message, ZTY.7.4
"^DD",365,365.02,4.04,"DT")
3090710
"^DD",365,365.02,4.05,0)
ZIP^F^^4;5^K:$L(X)>15!($L(X)<1) X
"^DD",365,365.02,4.05,3)
Answer must be 1-15 characters in length.
"^DD",365,365.02,4.05,21,0)
^.001^1^1^3090710^^
"^DD",365,365.02,4.05,21,1,0)
Entity address, zip or postal code.
"^DD",365,365.02,4.05,23,0)
^^1^1^3090710^
"^DD",365,365.02,4.05,23,1,0)
Source: 271 HL7 message, ZTY.7.5
"^DD",365,365.02,4.05,"DT")
3090710
"^DD",365,365.02,4.06,0)
COUNTRY CODE^F^^4;6^K:$L(X)>3!($L(X)<2) X
"^DD",365,365.02,4.06,3)
Answer must be 2-3 characters in length.
"^DD",365,365.02,4.06,21,0)
^.001^1^1^3090710^^
"^DD",365,365.02,4.06,21,1,0)
Entity address, country code.
"^DD",365,365.02,4.06,23,0)
^^1^1^3090710^
"^DD",365,365.02,4.06,23,1,0)
Source: 271 HL7 message, ZTY.7.6
"^DD",365,365.02,4.06,"DT")
3090710
"^DD",365,365.02,4.07,0)
LOCATION^F^^4;7^K:$L(X)>30!($L(X)<1) X
"^DD",365,365.02,4.07,3)
Answer must be 1-30 characters in length.
"^DD",365,365.02,4.07,21,0)
^.001^1^1^3090710^^
"^DD",365,365.02,4.07,21,1,0)
Entity address, location identifier.
"^DD",365,365.02,4.07,23,0)
^^1^1^3090710^
"^DD",365,365.02,4.07,23,1,0)
Source: 271 HL7 message, ZTY.9
"^DD",365,365.02,4.07,"DT")
3090710
"^DD",365,365.02,4.08,0)
LOCATION QUALIFIER^S^RJ:Region;^4;8^Q
"^DD",365,365.02,4.08,3)
Select location qualifier.
"^DD",365,365.02,4.08,21,0)
^.001^1^1^3090710^^
"^DD",365,365.02,4.08,21,1,0)
Entity address, location qualifier.
"^DD",365,365.02,4.08,23,0)
^^1^1^3090710^
"^DD",365,365.02,4.08,23,1,0)
Source: 271 HL7 message, ZTY.8
"^DD",365,365.02,4.08,"DT")
3090710
"^DD",365,365.02,5.01,0)
PROVIDER CODE^P365.024'^IBE(365.024,^5;1^Q
"^DD",365,365.02,5.01,3)
Select provider code.
"^DD",365,365.02,5.01,21,0)
^.001^1^1^3090713^^
"^DD",365,365.02,5.01,21,1,0)
Code identifying the type of provider.
"^DD",365,365.02,5.01,23,0)
^^1^1^3090713^
"^DD",365,365.02,5.01,23,1,0)
Source: 271 HL7 message, ZTY.10.1
"^DD",365,365.02,5.01,"DT")
3090713
"^DD",365,365.02,5.02,0)
REFERENCE ID^F^^5;2^K:$L(X)>30!($L(X)<1) X
"^DD",365,365.02,5.02,3)
Answer must be 1-30 characters in length.
"^DD",365,365.02,5.02,21,0)
^.001^1^1^3090713^^
"^DD",365,365.02,5.02,21,1,0)
Reference identifier.
"^DD",365,365.02,5.02,23,0)
^^1^1^3090713^
"^DD",365,365.02,5.02,23,1,0)
Source: 271 HL7 message, ZTY.12
"^DD",365,365.02,5.02,"DT")
3090713
"^DD",365,365.02,5.03,0)
REFERENCE ID QUALIFIER^S^9K:Servicer;EI:EIN;HPI:Healthcare Financing Administration;SY:SSN;TJ:Federal Tax ID;D3:National Association of Boards of Pharmacy Number;ZZ:Taxonomy Code;^5;3^Q
"^DD",365,365.02,5.03,3)
Select reference id qualifier.
"^DD",365,365.02,5.03,21,0)
^.001^1^1^3090713^^
"^DD",365,365.02,5.03,21,1,0)
Reference identifier type.
"^DD",365,365.02,5.03,23,0)
^^1^1^3090713^
"^DD",365,365.02,5.03,23,1,0)
Source: 271 HL7 message, ZTY.11.1
"^DD",365,365.02,5.03,"DT")
3090921
"^DD",365,365.02,6,0)
CONTACT INFORMATION^365.26A^^6;0
"^DD",365,365.02,6,21,0)
^.001^2^2^3090713^^^^
"^DD",365,365.02,6,21,1,0)
This multiple contains contact information for an eligibility/benefit
"^DD",365,365.02,6,21,2,0)
entity.
"^DD",365,365.02,6,23,0)
^.001^1^1^3090713^^^^
"^DD",365,365.02,6,23,1,0)
Source: 271 HL7 message, CTD segment within G2O group.
"^DD",365,365.02,7,0)
HEALTHCARE SERVICES DELIVERY^365.27A^^7;0
"^DD",365,365.02,7,21,0)
^.001^1^1^3090713^^^^
"^DD",365,365.02,7,21,1,0)
Healthcare services delivery multiple.
"^DD",365,365.02,7,23,0)
^.001^1^1^3090713^^^^
"^DD",365,365.02,7,23,1,0)
Source: 271 HL7 ZHS segment.
"^DD",365,365.02,8,0)
SUBSCRIBER DATES^365.28^^8;0
"^DD",365,365.02,8,21,0)
^^1^1^3090714^
"^DD",365,365.02,8,21,1,0)
Subscriber dates multiple.
"^DD",365,365.02,8,23,0)
^^1^1^3090714^
"^DD",365,365.02,8,23,1,0)
Source: 271 HL7 message, ZSD segment.
"^DD",365,365.02,9,0)
SUBSCRIBER ADDITIONAL INFO^365.29A^^9;0
"^DD",365,365.02,9,21,0)
^.001^1^1^3090714^^
"^DD",365,365.02,9,21,1,0)
Additional subscriber information multiple.
"^DD",365,365.02,9,23,0)
^.001^1^1^3090714^^
"^DD",365,365.02,9,23,1,0)
Source: 271 HL7 message, ZII segment.
"^DD",365,365.02,10,0)
SUBSCRIBER REFERENCE ID^365.291A^^10;0
"^DD",365,365.02,10,21,0)
^^1^1^3090909^
"^DD",365,365.02,10,21,1,0)
Subscriber reference id multiple.
"^DD",365,365.02,10,23,0)
^^1^1^3090909^
"^DD",365,365.02,10,23,1,0)
Source: 271 HL7 message, ZRF segment.
"^DD",365,365.22,0)
NOTES SUB-FIELD^^.01^1
"^DD",365,365.22,0,"DT")
3090910
"^DD",365,365.22,0,"NM","NOTES")

"^DD",365,365.22,0,"UP")
365.02
"^DD",365,365.22,.01,0)
NOTES^W^^0;1
"^DD",365,365.22,.01,21,0)
^^2^2^3090910^
"^DD",365,365.22,.01,21,1,0)
This field contains any additional text about the eligibility
"^DD",365,365.22,.01,21,2,0)
benefit information.  It is transcribed from X.12 271 MSG segments.
"^DD",365,365.22,.01,"DT")
3090910
"^DD",365,365.26,0)
CONTACT INFORMATION SUB-FIELD^^.04^4
"^DD",365,365.26,0,"DT")
3090910
"^DD",365,365.26,0,"IX","B",365.26,.01)

"^DD",365,365.26,0,"NM","CONTACT INFORMATION")

"^DD",365,365.26,0,"UP")
365.02
"^DD",365,365.26,.01,0)
SEQUENCE^RNJ5,0^^0;1^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."1.N) X
"^DD",365,365.26,.01,1,0)
^.1
"^DD",365,365.26,.01,1,1,0)
365.26^B
"^DD",365,365.26,.01,1,1,1)
S ^IBCN(365,DA(2),2,DA(1),6,"B",$E(X,1,30),DA)=""
"^DD",365,365.26,.01,1,1,2)
K ^IBCN(365,DA(2),2,DA(1),6,"B",$E(X,1,30),DA)
"^DD",365,365.26,.01,3)
Type a number between 1 and 99999, 0 Decimal Digits.
"^DD",365,365.26,.01,21,0)
^^1^1^3090713^
"^DD",365,365.26,.01,21,1,0)
Sequential entry number.
"^DD",365,365.26,.01,23,0)
^^1^1^3090713^
"^DD",365,365.26,.01,23,1,0)
Sequential number of G2O.CTD segment.
"^DD",365,365.26,.01,"DT")
3090910
"^DD",365,365.26,.02,0)
NAME^F^^0;2^K:$L(X)>98!($L(X)<1) X
"^DD",365,365.26,.02,3)
Answer must be 1-98 characters in length.
"^DD",365,365.26,.02,21,0)
^^1^1^3090713^
"^DD",365,365.26,.02,21,1,0)
Name of the contact.
"^DD",365,365.26,.02,23,0)
^^3^3^3090713^
"^DD",365,365.26,.02,23,1,0)
Source: 271 HL7 message, G2O.CTD.2 - combined data from CTD.2.5 (prefix),
"^DD",365,365.26,.02,23,2,0)
CTD.2.1.1 (last name), CTD.2.2 (first name), CTD.2.3 (middle name),
"^DD",365,365.26,.02,23,3,0)
CTD.2.4 (suffix), and CTD.2.6 (degree).
"^DD",365,365.26,.02,"DT")
3090713
"^DD",365,365.26,.03,0)
COMMUNICATION NUMBER^F^^0;3^K:$L(X)>30!($L(X)<1) X
"^DD",365,365.26,.03,3)
Answer must be 1-30 characters in length.
"^DD",365,365.26,.03,21,0)
^^1^1^3090713^
"^DD",365,365.26,.03,21,1,0)
Phone, fax, email, etc.
"^DD",365,365.26,.03,23,0)
^^1^1^3090713^
"^DD",365,365.26,.03,23,1,0)
Source: 271 HL7 message, G2O.CTD.5.1
"^DD",365,365.26,.03,"DT")
3090713
"^DD",365,365.26,.04,0)
COMMUNICATION QUALIFIER^P365.021'^IBE(365.021,^0;4^Q
"^DD",365,365.26,.04,3)
Select type of communication number.
"^DD",365,365.26,.04,21,0)
^.001^1^1^3090713^^
"^DD",365,365.26,.04,21,1,0)
Code describing type of communication number.
"^DD",365,365.26,.04,23,0)
^^1^1^3090713^
"^DD",365,365.26,.04,23,1,0)
Source: 271 HL7 message, G2O.CTD.5.9
"^DD",365,365.26,.04,"DT")
3090713
"^DD",365,365.27,0)
HEALTHCARE SERVICES DELIVERY SUB-FIELD^^.09^9
"^DD",365,365.27,0,"DT")
3090911
"^DD",365,365.27,0,"IX","B",365.27,.01)

"^DD",365,365.27,0,"NM","HEALTHCARE SERVICES DELIVERY")

"^DD",365,365.27,0,"UP")
365.02
"^DD",365,365.27,.01,0)
SEQUENCE^NJ5,0^^0;1^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."1.N) X
"^DD",365,365.27,.01,1,0)
^.1
"^DD",365,365.27,.01,1,1,0)
365.27^B
"^DD",365,365.27,.01,1,1,1)
S ^IBCN(365,DA(2),2,DA(1),7,"B",$E(X,1,30),DA)=""
"^DD",365,365.27,.01,1,1,2)
K ^IBCN(365,DA(2),2,DA(1),7,"B",$E(X,1,30),DA)
"^DD",365,365.27,.01,3)
Type a number between 1 and 99999, 0 Decimal Digits.
"^DD",365,365.27,.01,21,0)
^^1^1^3090713^
"^DD",365,365.27,.01,21,1,0)
Sequential entry number.
"^DD",365,365.27,.01,23,0)
^^1^1^3090713^
"^DD",365,365.27,.01,23,1,0)
Sequential number of ZHS segment.
"^DD",365,365.27,.01,"DT")
3090911
"^DD",365,365.27,.02,0)
BENEFIT QUANTITY^NJ9,3^^0;2^K:+X'=X!(X>99999)!(X<0)!(X?.E1"."4.N) X
"^DD",365,365.27,.02,3)
Type a number between 0 and 99999, 3 Decimal Digits.
"^DD",365,365.27,.02,21,0)
^^2^2^3100428^
"^DD",365,365.27,.02,21,1,0)
Numeric value of benefit quantity as qualified by QUANTITY QUALIFIER
"^DD",365,365.27,.02,21,2,0)
field.
"^DD",365,365.27,.02,23,0)
^^1^1^3090713^
"^DD",365,365.27,.02,23,1,0)
Source: 271 HL7 message, ZHS.3
"^DD",365,365.27,.02,"DT")
3100428
"^DD",365,365.27,.03,0)
QUANTITY QUALIFIER^P365.016'^IBE(365.016,^0;3^Q
"^DD",365,365.27,.03,3)
Select benefit quantity qualifier.
"^DD",365,365.27,.03,21,0)
^.001^1^1^3090713^^
"^DD",365,365.27,.03,21,1,0)
Benefit quantity qualifier.
"^DD",365,365.27,.03,23,0)
^^1^1^3090713^
"^DD",365,365.27,.03,23,1,0)
Source: 271 HL7 message, ZHS.2.1
"^DD",365,365.27,.03,"DT")
3090713
"^DD",365,365.27,.04,0)
SAMPLE SELECTION MODULUS^F^^0;4^K:$L(X)>6!($L(X)<1) X
"^DD",365,365.27,.04,3)
Answer must be 1-6 characters in length.
"^DD",365,365.27,.04,21,0)
^^2^2^3100428^
"^DD",365,365.27,.04,21,1,0)
Sampling frequency in terms of a modulus of the Unit of Measure.
"^DD",365,365.27,.04,21,2,0)
Qualified by UNITS OF MEASUREMENT field.
"^DD",365,365.27,.04,23,0)
^^1^1^3090713^
"^DD",365,365.27,.04,23,1,0)
Source: 271 HL7 message, ZHS.5
"^DD",365,365.27,.04,"DT")
3100428
"^DD",365,365.27,.05,0)
UNITS OF MEASUREMENT^S^DA:Days;MO:Months;VS:Visits;WK:Weeks;YR:Years;^0;5^Q
"^DD",365,365.27,.05,3)
Select units of measurement.
"^DD",365,365.27,.05,21,0)
^.001^1^1^3090713^^
"^DD",365,365.27,.05,21,1,0)
Units of measurement for frequency of the benefits.
"^DD",365,365.27,.05,23,0)
^^1^1^3090713^
"^DD",365,365.27,.05,23,1,0)
Source: 271 HL7 message, ZHS.4.1
"^DD",365,365.27,.05,"DT")
3090713
"^DD",365,365.27,.06,0)
TIME PERIODS^NJ8,2^^0;6^K:+X'=X!(X>99999)!(X<0)!(X?.E1"."3.N) X
"^DD",365,365.27,.06,3)
Type a number between 0 and 99999, 2 Decimal Digits.
"^DD",365,365.27,.06,21,0)
^^1^1^3100428^
"^DD",365,365.27,.06,21,1,0)
Number of time periods as qualified by TIME PERIOD QUALIFIER field.
"^DD",365,365.27,.06,23,0)
^^1^1^3090713^
"^DD",365,365.27,.06,23,1,0)
Source: 271 HL7 message, ZHS.7
"^DD",365,365.27,.06,"DT")
3100428
"^DD",365,365.27,.07,0)
TIME PERIOD QUALIFIER^P365.015'^IBE(365.015,^0;7^Q
"^DD",365,365.27,.07,3)
Select qualifier for the time period.
"^DD",365,365.27,.07,21,0)
^.001^1^1^3090713^^
"^DD",365,365.27,.07,21,1,0)
Code that defines a time period.
"^DD",365,365.27,.07,23,0)
^^1^1^3090713^
"^DD",365,365.27,.07,23,1,0)
Source: 271 HL7 message, ZHS.6.1
"^DD",365,365.27,.07,"DT")
3090713
"^DD",365,365.27,.08,0)
DELIVERY FREQUENCY^P365.025'^IBE(365.025,^0;8^Q
"^DD",365,365.27,.08,3)
Select code for delivery frequency.
"^DD",365,365.27,.08,21,0)
^.001^1^1^3090713^^
"^DD",365,365.27,.08,21,1,0)
Code that defines frequency of deliveries.
"^DD",365,365.27,.08,23,0)
^^1^1^3090713^
"^DD",365,365.27,.08,23,1,0)
Source: 271 HL7 message, ZHS.8.1
"^DD",365,365.27,.08,"DT")
3090713
"^DD",365,365.27,.09,0)
DELIVERY PATTERN^S^A:1st Shift;B:2nd Shift;C:3rd Shift;D:A.M.;E:P.M.;F:As Directed;G:Any Shift;Y:None;^0;9^Q
"^DD",365,365.27,.09,3)
Select delivery pattern.
"^DD",365,365.27,.09,21,0)
^.001^1^1^3090713^^
"^DD",365,365.27,.09,21,1,0)
Code that defines pattern of deliveries.
"^DD",365,365.27,.09,23,0)
^^1^1^3090713^
"^DD",365,365.27,.09,23,1,0)
Source: 271 HL7 message, ZHS.9.1
"^DD",365,365.27,.09,"DT")
3090713
"^DD",365,365.28,0)
SUBSCRIBER DATES SUB-FIELD^^.04^4
"^DD",365,365.28,0,"DT")
3091106
"^DD",365,365.28,0,"IX","B",365.28,.01)

"^DD",365,365.28,0,"NM","SUBSCRIBER DATES")

"^DD",365,365.28,0,"UP")
365.02
"^DD",365,365.28,.01,0)
SEQUENCE^NJ5,0^^0;1^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."1.N) X
"^DD",365,365.28,.01,1,0)
^.1
"^DD",365,365.28,.01,1,1,0)
365.28^B
"^DD",365,365.28,.01,1,1,1)
S ^IBCN(365,DA(2),2,DA(1),8,"B",$E(X,1,30),DA)=""
"^DD",365,365.28,.01,1,1,2)
K ^IBCN(365,DA(2),2,DA(1),8,"B",$E(X,1,30),DA)
"^DD",365,365.28,.01,3)
Type a number between 1 and 99999, 0 Decimal Digits.
"^DD",365,365.28,.01,21,0)
^^1^1^3090714^
"^DD",365,365.28,.01,21,1,0)
Sequential number of ZSD segment.
"^DD",365,365.28,.01,23,0)
^^1^1^3090714^
"^DD",365,365.28,.01,23,1,0)
Sequential number 1..N, assigned automatically.
"^DD",365,365.28,.01,"DT")
3090911
"^DD",365,365.28,.02,0)
DATE^F^^0;2^K:$L(X)>50!($L(X)<8) X
"^DD",365,365.28,.02,3)
Answer must be 8-50 characters in length.
"^DD",365,365.28,.02,21,0)
^.001^1^1^3090714^^
"^DD",365,365.28,.02,21,1,0)
Date or range of dates.
"^DD",365,365.28,.02,23,0)
^^1^1^3090714^
"^DD",365,365.28,.02,23,1,0)
Source: 271 HL7 message, ZSD.4.1
"^DD",365,365.28,.02,"DT")
3090714
"^DD",365,365.28,.03,0)
DATE QUALIFIER^P365.026'^IBE(365.026,^0;3^Q
"^DD",365,365.28,.03,3)
Select date qualifier.
"^DD",365,365.28,.03,21,0)
^.001^1^1^3090714^^
"^DD",365,365.28,.03,21,1,0)
Code describing the type of date.
"^DD",365,365.28,.03,23,0)
^^1^1^3090714^
"^DD",365,365.28,.03,23,1,0)
Source: 271 HL7 message, ZSD.2.1
"^DD",365,365.28,.03,"DT")
3090714
"^DD",365,365.28,.04,0)
DATE FORMAT^S^D8:SINGLE DATE (CCYYMMDD);RD8:DATE RANGE (CCYYMMDD-CCYYMMDD);^0;4^Q
"^DD",365,365.28,.04,3)
Select date format.
"^DD",365,365.28,.04,21,0)
^^1^1^3091106^
"^DD",365,365.28,.04,21,1,0)
Format of the date representation.
"^DD",365,365.28,.04,23,0)
^^1^1^3091106^
"^DD",365,365.28,.04,23,1,0)
Source: 271 HL7 message, ZSD.3.1
"^DD",365,365.28,.04,"DT")
3091106
"^DD",365,365.29,0)
SUBSCRIBER ADDITIONAL INFO SUB-FIELD^^.04^4
"^DD",365,365.29,0,"DT")
3090922
"^DD",365,365.29,0,"IX","B",365.29,.01)

"^DD",365,365.29,0,"NM","SUBSCRIBER ADDITIONAL INFO")

"^DD",365,365.29,0,"UP")
365.02
"^DD",365,365.29,.01,0)
SEQUENCE^NJ5,0^^0;1^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."1.N) X
"^DD",365,365.29,.01,1,0)
^.1
"^DD",365,365.29,.01,1,1,0)
365.29^B
"^DD",365,365.29,.01,1,1,1)
S ^IBCN(365,DA(2),2,DA(1),9,"B",$E(X,1,30),DA)=""
"^DD",365,365.29,.01,1,1,2)
K ^IBCN(365,DA(2),2,DA(1),9,"B",$E(X,1,30),DA)
"^DD",365,365.29,.01,3)
Type a number between 1 and 99999, 0 Decimal Digits.
"^DD",365,365.29,.01,21,0)
^^1^1^3090714^
"^DD",365,365.29,.01,21,1,0)
Sequential number of ZII segment.
"^DD",365,365.29,.01,23,0)
^^1^1^3090714^
"^DD",365,365.29,.01,23,1,0)
Sequential number 1..N, assigned automatically.
"^DD",365,365.29,.01,"DT")
3090911
"^DD",365,365.29,.02,0)
PLACE OF SERVICE^P353.1'^IBE(353.1,^0;2^Q
"^DD",365,365.29,.02,3)
Select code for place of service.
"^DD",365,365.29,.02,21,0)
^.001^1^1^3090714^^^
"^DD",365,365.29,.02,21,1,0)
Place of service code.
"^DD",365,365.29,.02,23,0)
^^1^1^3090714^
"^DD",365,365.29,.02,23,1,0)
Source: 271 HL7 message, ZII.3.1 when ZII.2.1 has value of "ZZ"
"^DD",365,365.29,.02,"DT")
3090922
"^DD",365,365.29,.03,0)
DIAGNOSIS^P80'^ICD9(^0;3^Q
"^DD",365,365.29,.03,3)
Select diagnosis code.
"^DD",365,365.29,.03,21,0)
^.001^1^1^3090714^^
"^DD",365,365.29,.03,21,1,0)
Diagnosis code.
"^DD",365,365.29,.03,23,0)
^^1^1^3090730^
"^DD",365,365.29,.03,23,1,0)
Source: 271 HL7 message, ZII.3.1 when ZII.2.1 has value of "BF" or "BK"
"^DD",365,365.29,.03,"DT")
3090730
"^DD",365,365.29,.04,0)
QUALIFIER^S^BF:Diagnosis;BK:Principal Diagnosis;ZZ:Place of Service;^0;4^Q
"^DD",365,365.29,.04,3)
Select additional information qualifier.
"^DD",365,365.29,.04,21,0)
^.001^1^1^3090714^^
"^DD",365,365.29,.04,21,1,0)
Additional information qualifier.
"^DD",365,365.29,.04,23,0)
^^1^1^3090714^
"^DD",365,365.29,.04,23,1,0)
Source: 271 HL7 message, ZII.2.1
"^DD",365,365.29,.04,"DT")
3090922
"^DD",365,365.291,0)
SUBSCRIBER REFERENCE ID SUB-FIELD^^.04^4
"^DD",365,365.291,0,"DT")
3090911
"^DD",365,365.291,0,"IX","B",365.291,.01)

"^DD",365,365.291,0,"NM","SUBSCRIBER REFERENCE ID")

"^DD",365,365.291,0,"UP")
365.02
"^DD",365,365.291,.01,0)
SEQUENCE^NJ5,0^^0;1^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."1.N) X
"^DD",365,365.291,.01,1,0)
^.1
"^DD",365,365.291,.01,1,1,0)
365.291^B
"^DD",365,365.291,.01,1,1,1)
S ^IBCN(365,DA(2),2,DA(1),10,"B",$E(X,1,30),DA)=""
"^DD",365,365.291,.01,1,1,2)
K ^IBCN(365,DA(2),2,DA(1),10,"B",$E(X,1,30),DA)
"^DD",365,365.291,.01,3)
Type a number between 1 and 99999, 0 Decimal Digits.
"^DD",365,365.291,.01,21,0)
^^1^1^3090909^
"^DD",365,365.291,.01,21,1,0)
Sequential number of ZRF segment.
"^DD",365,365.291,.01,23,0)
^^1^1^3090909^
"^DD",365,365.291,.01,23,1,0)
Sequential number 1..N, assigned automatically.
"^DD",365,365.291,.01,"DT")
3090911
"^DD",365,365.291,.02,0)
REFERENCE ID^F^^0;2^K:$L(X)>30!($L(X)<1) X
"^DD",365,365.291,.02,3)
Answer must be 1-30 characters in length.
"^DD",365,365.291,.02,21,0)
^.001^1^1^3090909^^
"^DD",365,365.291,.02,21,1,0)
Reference id value.
"^DD",365,365.291,.02,23,0)
^^1^1^3090909^
"^DD",365,365.291,.02,23,1,0)
Source: 271 HL7 message, ZRF.3.
"^DD",365,365.291,.02,"DT")
3090909
"^DD",365,365.291,.03,0)
REFERENCE ID QUALIFIER^P365.028'^IBE(365.028,^0;3^Q
"^DD",365,365.291,.03,3)
Select reference id qualifier.
"^DD",365,365.291,.03,21,0)
^.001^1^1^3090914^^^
"^DD",365,365.291,.03,21,1,0)
Code describing the type of reference id.
"^DD",365,365.291,.03,23,0)
^^1^1^3090914^
"^DD",365,365.291,.03,23,1,0)
Source: 271 HL7 message, ZRF.2.1.
"^DD",365,365.291,.03,"DT")
3090914
"^DD",365,365.291,.04,0)
DESCRIPTION^F^^0;4^K:$L(X)>80!($L(X)<1) X
"^DD",365,365.291,.04,3)
Answer must be 1-80 characters in length.
"^DD",365,365.291,.04,21,0)
^.001^1^1^3090909^^
"^DD",365,365.291,.04,21,1,0)
Short description of reference id.
"^DD",365,365.291,.04,23,0)
^^1^1^3090909^
"^DD",365,365.291,.04,23,1,0)
Source: 271 HL7 message, ZRF.4.
"^DD",365,365.291,.04,"DT")
3090909
"^DD",365.011,365.011,0)
FIELD^^.03^3
"^DD",365.011,365.011,0,"DDA")
N
"^DD",365.011,365.011,0,"DT")
3020603
"^DD",365.011,365.011,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.011,365.011,0,"IX","B",365.011,.01)

"^DD",365.011,365.011,0,"NM","X12 271 ELIGIBILITY/BENEFIT")

"^DD",365.011,365.011,0,"PT",2.322,.02)

"^DD",365.011,365.011,0,"PT",365.02,.02)

"^DD",365.011,365.011,0,"VRPK")
IB
"^DD",365.011,365.011,.01,0)
CODE^RF^^0;1^K:$L(X)>2!($L(X)<1)!'(X'?1P.E) X
"^DD",365.011,365.011,.01,1,0)
^.1
"^DD",365.011,365.011,.01,1,1,0)
365.011^B
"^DD",365.011,365.011,.01,1,1,1)
S ^IBE(365.011,"B",$E(X,1,30),DA)=""
"^DD",365.011,365.011,.01,1,1,2)
K ^IBE(365.011,"B",$E(X,1,30),DA)
"^DD",365.011,365.011,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",365.011,365.011,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",365.011,365.011,.01,3)
Answer must be 1-2 characters in length.
"^DD",365.011,365.011,.01,21,0)
^^1^1^3020612^
"^DD",365.011,365.011,.01,21,1,0)
This is the code value sent in an X.12 271 EB01 table.
"^DD",365.011,365.011,.01,"DT")
3020517
"^DD",365.011,365.011,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>75!($L(X)<1) X
"^DD",365.011,365.011,.02,3)
Answer must be 1-75 characters in length
"^DD",365.011,365.011,.02,21,0)
^^1^1^3020612^
"^DD",365.011,365.011,.02,21,1,0)
This describes the code value in more detail.
"^DD",365.011,365.011,.02,"DT")
3020517
"^DD",365.011,365.011,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.011,365.011,.03,21,0)
^^2^2^3020612^
"^DD",365.011,365.011,.03,21,1,0)
This field will be marked inactive if a code is determined to no longer
"^DD",365.011,365.011,.03,21,2,0)
be used by X.12.
"^DD",365.011,365.011,.03,"DT")
3020603
"^DD",365.013,365.013,0)
FIELD^^.03^3
"^DD",365.013,365.013,0,"DDA")
N
"^DD",365.013,365.013,0,"DT")
3020603
"^DD",365.013,365.013,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.013,365.013,0,"IX","B",365.013,.01)

"^DD",365.013,365.013,0,"NM","X12 271 SERVICE TYPE")

"^DD",365.013,365.013,0,"PT",2.322,.04)

"^DD",365.013,365.013,0,"PT",365.02,.04)

"^DD",365.013,365.013,0,"VRPK")
IB
"^DD",365.013,365.013,.01,0)
CODE^RF^^0;1^K:$L(X)>2!($L(X)<1) X
"^DD",365.013,365.013,.01,1,0)
^.1
"^DD",365.013,365.013,.01,1,1,0)
365.013^B
"^DD",365.013,365.013,.01,1,1,1)
S ^IBE(365.013,"B",$E(X,1,30),DA)=""
"^DD",365.013,365.013,.01,1,1,2)
K ^IBE(365.013,"B",$E(X,1,30),DA)
"^DD",365.013,365.013,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",365.013,365.013,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",365.013,365.013,.01,3)
Answer must be 1-2 characters in length
"^DD",365.013,365.013,.01,21,0)
^.001^1^1^3020612^^
"^DD",365.013,365.013,.01,21,1,0)
This is the code value sent in an X.12 271 EB03.
"^DD",365.013,365.013,.01,"DT")
3020517
"^DD",365.013,365.013,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>75!($L(X)<1) X
"^DD",365.013,365.013,.02,3)
Answer must be 1-75 characters in length
"^DD",365.013,365.013,.02,21,0)
^^1^1^3020612^
"^DD",365.013,365.013,.02,21,1,0)
This describes the code value in more detail.
"^DD",365.013,365.013,.02,"DT")
3020517
"^DD",365.013,365.013,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.013,365.013,.03,21,0)
^^2^2^3020612^
"^DD",365.013,365.013,.03,21,1,0)
This field will be marked inactive if a code is
"^DD",365.013,365.013,.03,21,2,0)
determined to no longer be used by X.12.
"^DD",365.013,365.013,.03,"DT")
3020603
"^DD",365.014,365.014,0)
FIELD^^.03^3
"^DD",365.014,365.014,0,"DDA")
N
"^DD",365.014,365.014,0,"DT")
3020612
"^DD",365.014,365.014,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.014,365.014,0,"IX","B",365.014,.01)

"^DD",365.014,365.014,0,"NM","X12 271 INSURANCE TYPE")

"^DD",365.014,365.014,0,"PT",2.322,.05)

"^DD",365.014,365.014,0,"PT",365.02,.05)

"^DD",365.014,365.014,0,"VRPK")
IB
"^DD",365.014,365.014,.01,0)
CODE^RF^^0;1^K:$L(X)>2!($L(X)<1) X
"^DD",365.014,365.014,.01,1,0)
^.1
"^DD",365.014,365.014,.01,1,1,0)
365.014^B
"^DD",365.014,365.014,.01,1,1,1)
S ^IBE(365.014,"B",$E(X,1,30),DA)=""
"^DD",365.014,365.014,.01,1,1,2)
K ^IBE(365.014,"B",$E(X,1,30),DA)
"^DD",365.014,365.014,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",365.014,365.014,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",365.014,365.014,.01,3)
Answer must be 1-2 characters in length
"^DD",365.014,365.014,.01,21,0)
^^1^1^3020612^
"^DD",365.014,365.014,.01,21,1,0)
This is the code value sent in an X.12 271 EB04.
"^DD",365.014,365.014,.01,"DT")
3020517
"^DD",365.014,365.014,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>175!($L(X)<1) X
"^DD",365.014,365.014,.02,3)
Answer must be 1-175 characters in length.
"^DD",365.014,365.014,.02,21,0)
^^1^1^3020612^
"^DD",365.014,365.014,.02,21,1,0)
This describes the code value in more detail.
"^DD",365.014,365.014,.02,"DT")
3020612
"^DD",365.014,365.014,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.014,365.014,.03,21,0)
^^2^2^3020612^
"^DD",365.014,365.014,.03,21,1,0)
This field will be marked inactive if a code is
"^DD",365.014,365.014,.03,21,2,0)
determined to no longer be used by X.12.
"^DD",365.014,365.014,.03,"DT")
3020603
"^DD",365.016,365.016,0)
FIELD^^.03^3
"^DD",365.016,365.016,0,"DDA")
N
"^DD",365.016,365.016,0,"DT")
3020603
"^DD",365.016,365.016,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.016,365.016,0,"IX","B",365.016,.01)

"^DD",365.016,365.016,0,"NM","X12 271 QUANTITY QUALIFIER")

"^DD",365.016,365.016,0,"PT",2.322,.1)

"^DD",365.016,365.016,0,"PT",2.3227,.03)

"^DD",365.016,365.016,0,"PT",365.02,.1)

"^DD",365.016,365.016,0,"PT",365.27,.03)

"^DD",365.016,365.016,0,"VRPK")
IB
"^DD",365.016,365.016,.01,0)
CODE^RF^^0;1^K:$L(X)>2!($L(X)<1) X
"^DD",365.016,365.016,.01,1,0)
^.1
"^DD",365.016,365.016,.01,1,1,0)
365.016^B
"^DD",365.016,365.016,.01,1,1,1)
S ^IBE(365.016,"B",$E(X,1,30),DA)=""
"^DD",365.016,365.016,.01,1,1,2)
K ^IBE(365.016,"B",$E(X,1,30),DA)
"^DD",365.016,365.016,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",365.016,365.016,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",365.016,365.016,.01,3)
Answer must be 1-2 characters in length
"^DD",365.016,365.016,.01,21,0)
^.001^1^1^3030318^^^^
"^DD",365.016,365.016,.01,21,1,0)
This is the code value sent in an X.12 271 EB09.
"^DD",365.016,365.016,.01,"DT")
3020517
"^DD",365.016,365.016,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>30!($L(X)<1) X
"^DD",365.016,365.016,.02,3)
Answer must be 1-30 characters in length
"^DD",365.016,365.016,.02,21,0)
^^1^1^3020612^
"^DD",365.016,365.016,.02,21,1,0)
This describes the code value in more detail.
"^DD",365.016,365.016,.02,"DT")
3020517
"^DD",365.016,365.016,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.016,365.016,.03,21,0)
^^2^2^3020612^
"^DD",365.016,365.016,.03,21,1,0)
This field will be marked inactive if a code is
"^DD",365.016,365.016,.03,21,2,0)
determined to no longer be used by X.12.
"^DD",365.016,365.016,.03,"DT")
3020603
"^DD",365.022,365.022,0)
FIELD^^.03^3
"^DD",365.022,365.022,0,"DDA")
N
"^DD",365.022,365.022,0,"DT")
3090710
"^DD",365.022,365.022,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.022,365.022,0,"IX","B",365.022,.01)

"^DD",365.022,365.022,0,"NM","X12 271 ENTITY IDENTIFIER CODE")

"^DD",365.022,365.022,0,"PT",2.322,3.01)

"^DD",365.022,365.022,0,"PT",365.02,3.01)

"^DD",365.022,365.022,.01,0)
CODE^RF^^0;1^K:$L(X)>3!($L(X)<2)!'(X'?1P.E) X
"^DD",365.022,365.022,.01,1,0)
^.1
"^DD",365.022,365.022,.01,1,1,0)
365.022^B
"^DD",365.022,365.022,.01,1,1,1)
S ^IBE(365.022,"B",$E(X,1,30),DA)=""
"^DD",365.022,365.022,.01,1,1,2)
K ^IBE(365.022,"B",$E(X,1,30),DA)
"^DD",365.022,365.022,.01,3)
Answer must be 2-3 characters in length.
"^DD",365.022,365.022,.01,21,0)
^^1^1^3090710^
"^DD",365.022,365.022,.01,21,1,0)
This is the code value sent in an X.12 message.
"^DD",365.022,365.022,.01,"DT")
3090710
"^DD",365.022,365.022,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>40!($L(X)<1) X
"^DD",365.022,365.022,.02,3)
Answer must be 1-40 characters in length.
"^DD",365.022,365.022,.02,21,0)
^^1^1^3090710^
"^DD",365.022,365.022,.02,21,1,0)
This describes the code value in more detail.
"^DD",365.022,365.022,.02,"DT")
3090710
"^DD",365.022,365.022,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.022,365.022,.03,3)
Set this to YES in order to deactivate the code.
"^DD",365.022,365.022,.03,21,0)
^^2^2^3090710^
"^DD",365.022,365.022,.03,21,1,0)
This field will be marked inactive if a code is determined to no longer be
"^DD",365.022,365.022,.03,21,2,0)
used by X.12.
"^DD",365.022,365.022,.03,"DT")
3090710
"^DD",365.023,365.023,0)
FIELD^^.03^3
"^DD",365.023,365.023,0,"DDA")
N
"^DD",365.023,365.023,0,"DT")
3090710
"^DD",365.023,365.023,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.023,365.023,0,"IX","B",365.023,.01)

"^DD",365.023,365.023,0,"NM","X12 271 IDENTIFICATION QUALIFIER")

"^DD",365.023,365.023,0,"PT",2.322,3.05)

"^DD",365.023,365.023,0,"PT",365.02,3.05)

"^DD",365.023,365.023,.01,0)
CODE^RF^^0;1^K:$L(X)>2!($L(X)<2)!'(X'?1P.E) X
"^DD",365.023,365.023,.01,1,0)
^.1
"^DD",365.023,365.023,.01,1,1,0)
365.023^B
"^DD",365.023,365.023,.01,1,1,1)
S ^IBE(365.023,"B",$E(X,1,30),DA)=""
"^DD",365.023,365.023,.01,1,1,2)
K ^IBE(365.023,"B",$E(X,1,30),DA)
"^DD",365.023,365.023,.01,3)
Answer must be 2 characters in length.
"^DD",365.023,365.023,.01,21,0)
^^1^1^3090710^
"^DD",365.023,365.023,.01,21,1,0)
This is the code value sent in an X.12 message.
"^DD",365.023,365.023,.01,"DT")
3090710
"^DD",365.023,365.023,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>55!($L(X)<1) X
"^DD",365.023,365.023,.02,3)
Answer must be 1-55 characters in length.
"^DD",365.023,365.023,.02,21,0)
^^1^1^3090710^
"^DD",365.023,365.023,.02,21,1,0)
This describes the code value in more detail.
"^DD",365.023,365.023,.02,"DT")
3090710
"^DD",365.023,365.023,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.023,365.023,.03,3)
Set this to YES in order to deactivate the code. 
"^DD",365.023,365.023,.03,21,0)
^.001^2^2^3090710^^
"^DD",365.023,365.023,.03,21,1,0)
This field will be marked inactive if a code is determined to no longer be
"^DD",365.023,365.023,.03,21,2,0)
used by X.12.
"^DD",365.023,365.023,.03,"DT")
3090710
"^DD",365.024,365.024,0)
FIELD^^.03^3
"^DD",365.024,365.024,0,"DDA")
N
"^DD",365.024,365.024,0,"DT")
3090713
"^DD",365.024,365.024,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.024,365.024,0,"IX","B",365.024,.01)

"^DD",365.024,365.024,0,"NM","X12 271 PROVIDER CODE")

"^DD",365.024,365.024,0,"PT",2.322,5.01)

"^DD",365.024,365.024,0,"PT",365.02,5.01)

"^DD",365.024,365.024,.01,0)
CODE^RF^^0;1^K:$L(X)>2!($L(X)<1)!'(X'?1P.E) X
"^DD",365.024,365.024,.01,1,0)
^.1
"^DD",365.024,365.024,.01,1,1,0)
365.024^B
"^DD",365.024,365.024,.01,1,1,1)
S ^IBE(365.024,"B",$E(X,1,30),DA)=""
"^DD",365.024,365.024,.01,1,1,2)
K ^IBE(365.024,"B",$E(X,1,30),DA)
"^DD",365.024,365.024,.01,3)
Answer must be 1-2 characters in length.
"^DD",365.024,365.024,.01,21,0)
^^1^1^3090713^
"^DD",365.024,365.024,.01,21,1,0)
This is the code value sent in an X.12 message.
"^DD",365.024,365.024,.01,"DT")
3090713
"^DD",365.024,365.024,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>25!($L(X)<1) X
"^DD",365.024,365.024,.02,3)
Answer must be 1-25 characters in length.
"^DD",365.024,365.024,.02,21,0)
^^1^1^3090713^
"^DD",365.024,365.024,.02,21,1,0)
This describes the code value in more detail.
"^DD",365.024,365.024,.02,"DT")
3090713
"^DD",365.024,365.024,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.024,365.024,.03,3)
Set this to YES in order to deactivate the code.
"^DD",365.024,365.024,.03,21,0)
^^2^2^3090713^
"^DD",365.024,365.024,.03,21,1,0)
This field will be marked inactive if a code is determined to no longer 
"^DD",365.024,365.024,.03,21,2,0)
be used by X.12.
"^DD",365.024,365.024,.03,"DT")
3090713
"^DD",365.025,365.025,0)
FIELD^^.03^3
"^DD",365.025,365.025,0,"DDA")
N
"^DD",365.025,365.025,0,"DT")
3090713
"^DD",365.025,365.025,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.025,365.025,0,"IX","B",365.025,.01)

"^DD",365.025,365.025,0,"NM","X12 271 DELIVERY FREQUENCY CODE")

"^DD",365.025,365.025,0,"PT",2.3227,.08)

"^DD",365.025,365.025,0,"PT",365.27,.08)

"^DD",365.025,365.025,.01,0)
CODE^RF^^0;1^K:$L(X)>2!($L(X)<1)!'(X'?1P.E) X
"^DD",365.025,365.025,.01,1,0)
^.1
"^DD",365.025,365.025,.01,1,1,0)
365.025^B
"^DD",365.025,365.025,.01,1,1,1)
S ^IBE(365.025,"B",$E(X,1,30),DA)=""
"^DD",365.025,365.025,.01,1,1,2)
K ^IBE(365.025,"B",$E(X,1,30),DA)
"^DD",365.025,365.025,.01,3)
Answer must be 1-2 characters in length.
"^DD",365.025,365.025,.01,21,0)
^^1^1^3090713^
"^DD",365.025,365.025,.01,21,1,0)
This is the code value sent in an X.12 message.
"^DD",365.025,365.025,.01,"DT")
3090713
"^DD",365.025,365.025,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>35!($L(X)<1) X
"^DD",365.025,365.025,.02,3)
Answer must be 1-35 characters in length.
"^DD",365.025,365.025,.02,21,0)
^^1^1^3090713^
"^DD",365.025,365.025,.02,21,1,0)
This describes the code value in more detail.
"^DD",365.025,365.025,.02,"DT")
3090713
"^DD",365.025,365.025,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.025,365.025,.03,3)
Set this to YES in order to deactivate the code.
"^DD",365.025,365.025,.03,21,0)
^^2^2^3090713^
"^DD",365.025,365.025,.03,21,1,0)
This field will be marked inactive if a code is determined to no longer 
"^DD",365.025,365.025,.03,21,2,0)
be used by X.12.
"^DD",365.025,365.025,.03,"DT")
3090713
"^DD",365.026,365.026,0)
FIELD^^.03^3
"^DD",365.026,365.026,0,"DDA")
N
"^DD",365.026,365.026,0,"DT")
3090714
"^DD",365.026,365.026,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.026,365.026,0,"IX","B",365.026,.01)

"^DD",365.026,365.026,0,"NM","X12 271 DATE QUALIFIER")

"^DD",365.026,365.026,0,"PT",2.3228,.03)

"^DD",365.026,365.026,0,"PT",365.28,.03)

"^DD",365.026,365.026,.01,0)
CODE^RF^^0;1^K:$L(X)>3!($L(X)<3)!'(X'?1P.E) X
"^DD",365.026,365.026,.01,1,0)
^.1
"^DD",365.026,365.026,.01,1,1,0)
365.026^B
"^DD",365.026,365.026,.01,1,1,1)
S ^IBE(365.026,"B",$E(X,1,30),DA)=""
"^DD",365.026,365.026,.01,1,1,2)
K ^IBE(365.026,"B",$E(X,1,30),DA)
"^DD",365.026,365.026,.01,3)
Answer must be 3 characters in length.
"^DD",365.026,365.026,.01,21,0)
^^1^1^3090714^
"^DD",365.026,365.026,.01,21,1,0)
This is the code value sent in an X.12 message.
"^DD",365.026,365.026,.01,"DT")
3090714
"^DD",365.026,365.026,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>30!($L(X)<1) X
"^DD",365.026,365.026,.02,3)
Answer must be 1-30 characters in length.
"^DD",365.026,365.026,.02,21,0)
^^1^1^3090714^
"^DD",365.026,365.026,.02,21,1,0)
This describes the code value in more detail.
"^DD",365.026,365.026,.02,"DT")
3090714
"^DD",365.026,365.026,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.026,365.026,.03,3)
Set this to YES in order to deactivate the code.
"^DD",365.026,365.026,.03,21,0)
^^2^2^3090714^
"^DD",365.026,365.026,.03,21,1,0)
This field will be marked inactive if a code is determined to no longer 
"^DD",365.026,365.026,.03,21,2,0)
be used by X.12.
"^DD",365.026,365.026,.03,"DT")
3090714
"^DD",365.028,365.028,0)
FIELD^^.03^3
"^DD",365.028,365.028,0,"DDA")
N
"^DD",365.028,365.028,0,"DT")
3090909
"^DD",365.028,365.028,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.028,365.028,0,"IX","B",365.028,.01)

"^DD",365.028,365.028,0,"NM","X12 271 REFERENCE IDENTIFICATION")

"^DD",365.028,365.028,0,"PT",2.32291,.03)

"^DD",365.028,365.028,0,"PT",365.291,.03)

"^DD",365.028,365.028,.01,0)
CODE^RF^^0;1^K:$L(X)>2!($L(X)<2)!'(X'?1P.E) X
"^DD",365.028,365.028,.01,1,0)
^.1
"^DD",365.028,365.028,.01,1,1,0)
365.028^B
"^DD",365.028,365.028,.01,1,1,1)
S ^IBE(365.028,"B",$E(X,1,30),DA)=""
"^DD",365.028,365.028,.01,1,1,2)
K ^IBE(365.028,"B",$E(X,1,30),DA)
"^DD",365.028,365.028,.01,3)
Answer must be 2 characters in length.
"^DD",365.028,365.028,.01,21,0)
^^1^1^3090909^
"^DD",365.028,365.028,.01,21,1,0)
This is the code value sent in an X.12 message.
"^DD",365.028,365.028,.01,"DT")
3090909
"^DD",365.028,365.028,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>55!($L(X)<1) X
"^DD",365.028,365.028,.02,3)
Answer must be 1-55 characters in length.
"^DD",365.028,365.028,.02,21,0)
^^1^1^3090909^
"^DD",365.028,365.028,.02,21,1,0)
This describes the code value in more detail.
"^DD",365.028,365.028,.02,"DT")
3090909
"^DD",365.028,365.028,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.028,365.028,.03,3)
Set this to YES in order to deactivate the code.
"^DD",365.028,365.028,.03,21,0)
^^2^2^3090909^
"^DD",365.028,365.028,.03,21,1,0)
This field will be marked inactive if a code is determined to no longer 
"^DD",365.028,365.028,.03,21,2,0)
be used by X.12.
"^DD",365.028,365.028,.03,"DT")
3090909
"^DD",365.1,365.1,.1,0)
WHICH EXTRACT^S^1:Buffer;2:Appt;3:Non-verified;4:No Insurance;^0;10^Q
"^DD",365.1,365.1,.1,3)
Enter a code from the list.
"^DD",365.1,365.1,.1,21,0)
^^2^2^3090818^
"^DD",365.1,365.1,.1,21,1,0)
This field identifies which data extract that the transmission
"^DD",365.1,365.1,.1,21,2,0)
record was generated from.
"^DD",365.1,365.1,.1,23,0)
^^2^2^3090818^
"^DD",365.1,365.1,.1,23,1,0)
Patch IB*2*416 removed the No Insurance data extract (#4). This field is 
"^DD",365.1,365.1,.1,23,2,0)
leaving #4 in place for historical data.
"^DD",365.1,365.1,.1,"DT")
3090818
"^DD",365.1,365.1,.19,0)
HL7 PATIENT ID FIELD^F^^0;19^K:$L(X)>30!($L(X)<1) X
"^DD",365.1,365.1,.19,3)
Answer must be 1-30 characters in length
"^DD",365.1,365.1,.19,21,0)
^^2^2^3090731^
"^DD",365.1,365.1,.19,21,1,0)
This is the data that will be used to populate the Patient ID field in 
"^DD",365.1,365.1,.19,21,2,0)
the HL7 message for the outbound 270 inquiry to Austin.
"^DD",365.1,365.1,.19,"DT")
3090731
"^DD",365.12,365.121,2,0)
ACTIVE FLAG LOG^365.1212DA^^2;0
"^DD",365.12,365.121,2,21,0)
^.001^1^1^3090810^^^
"^DD",365.12,365.121,2,21,1,0)
Log of changes to the ACTIVE flag.
"^DD",365.12,365.121,2,23,0)
^^2^2^3090810^
"^DD",365.12,365.121,2,23,1,0)
A new entry is added every time Payer Update HL7 message is received that 
"^DD",365.12,365.121,2,23,2,0)
contains a change to the current ACTIVE flag setting (field 365.121/.02).
"^DD",365.12,365.121,3,0)
TRUSTED FLAG LOG^365.1213DA^^3;0
"^DD",365.12,365.121,3,21,0)
^^1^1^3090801^
"^DD",365.12,365.121,3,21,1,0)
Log of changes to the TRUSTED flag.
"^DD",365.12,365.121,3,23,0)
^^2^2^3090801^
"^DD",365.12,365.121,3,23,1,0)
A new entry is added every time Payer Update HL7 message is received that
"^DD",365.12,365.121,3,23,2,0)
contains a change to the current TRUSTED flag setting (field 365.121/.07).
"^DD",365.12,365.1212,0)
ACTIVE FLAG LOG SUB-FIELD^^.02^2
"^DD",365.12,365.1212,0,"DT")
3090801
"^DD",365.12,365.1212,0,"IX","B",365.1212,.01)

"^DD",365.12,365.1212,0,"NM","ACTIVE FLAG LOG")

"^DD",365.12,365.1212,0,"UP")
365.121
"^DD",365.12,365.1212,.01,0)
DATE^RD^^0;1^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",365.12,365.1212,.01,1,0)
^.1
"^DD",365.12,365.1212,.01,1,1,0)
365.1212^B
"^DD",365.12,365.1212,.01,1,1,1)
S ^IBE(365.12,DA(2),1,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",365.12,365.1212,.01,1,1,2)
K ^IBE(365.12,DA(2),1,DA(1),2,"B",$E(X,1,30),DA)
"^DD",365.12,365.1212,.01,3)
Enter the date/time the ACTIVE flag was changed.
"^DD",365.12,365.1212,.01,21,0)
^^1^1^3100429^
"^DD",365.12,365.1212,.01,21,1,0)
This is the date/time the ACTIVE flag (field 365.121/.02) was changed.
"^DD",365.12,365.1212,.01,23,0)
^^1^1^3090801^
"^DD",365.12,365.1212,.01,23,1,0)
Date/time of the change.
"^DD",365.12,365.1212,.01,"DT")
3100429
"^DD",365.12,365.1212,.02,0)
SETTING^RS^0:OFF;1:ON;^0;2^Q
"^DD",365.12,365.1212,.02,3)
Select the new value of ACTIVE flag.
"^DD",365.12,365.1212,.02,21,0)
^.001^1^1^3090801^^
"^DD",365.12,365.1212,.02,21,1,0)
New value of ACTIVE flag.
"^DD",365.12,365.1212,.02,23,0)
^^1^1^3090801^
"^DD",365.12,365.1212,.02,23,1,0)
New value of ACTIVE flag.
"^DD",365.12,365.1212,.02,"DT")
3090801
"^DD",365.12,365.1213,0)
TRUSTED FLAG LOG SUB-FIELD^^.02^2
"^DD",365.12,365.1213,0,"DT")
3090801
"^DD",365.12,365.1213,0,"IX","B",365.1213,.01)

"^DD",365.12,365.1213,0,"NM","TRUSTED FLAG LOG")

"^DD",365.12,365.1213,0,"UP")
365.121
"^DD",365.12,365.1213,.01,0)
DATE^RD^^0;1^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",365.12,365.1213,.01,1,0)
^.1
"^DD",365.12,365.1213,.01,1,1,0)
365.1213^B
"^DD",365.12,365.1213,.01,1,1,1)
S ^IBE(365.12,DA(2),1,DA(1),3,"B",$E(X,1,30),DA)=""
"^DD",365.12,365.1213,.01,1,1,2)
K ^IBE(365.12,DA(2),1,DA(1),3,"B",$E(X,1,30),DA)
"^DD",365.12,365.1213,.01,3)
Enter the date/time the TRUSTED flag was changed.
"^DD",365.12,365.1213,.01,21,0)
^^1^1^3100429^
"^DD",365.12,365.1213,.01,21,1,0)
This is the date/time the TRUSTED flag (field 365.121/.07) was changed.
"^DD",365.12,365.1213,.01,23,0)
^^1^1^3090801^
"^DD",365.12,365.1213,.01,23,1,0)
Date/time of the change.
"^DD",365.12,365.1213,.01,"DT")
3100429
"^DD",365.12,365.1213,.02,0)
SETTING^RS^0:OFF;1:ON;^0;2^Q
"^DD",365.12,365.1213,.02,3)
Select the new value of TRUSTED flag.
"^DD",365.12,365.1213,.02,21,0)
^.001^1^1^3090801^^
"^DD",365.12,365.1213,.02,21,1,0)
New value of TRUSTED flag.
"^DD",365.12,365.1213,.02,23,0)
^^1^1^3090801^
"^DD",365.12,365.1213,.02,23,1,0)
New value of TRUSTED flag.
"^DD",365.12,365.1213,.02,"DT")
3090801
"^DD",365.15,365.15,0)
FIELD^^2^5
"^DD",365.15,365.15,0,"DDA")
N
"^DD",365.15,365.15,0,"DT")
3040607
"^DD",365.15,365.15,0,"IX","B",365.15,.01)

"^DD",365.15,365.15,0,"NM","IIV STATUS TABLE")

"^DD",365.15,365.15,0,"PT",355.33,.12)

"^DD",365.15,365.15,0,"VRPK")
IB
"^DD",365.15,365.15,.01,0)
CODE^RFO^^0;1^K:$L(X)>5!($L(X)<2) X
"^DD",365.15,365.15,.01,1,0)
^.1
"^DD",365.15,365.15,.01,1,1,0)
365.15^B
"^DD",365.15,365.15,.01,1,1,1)
S ^IBE(365.15,"B",$E(X,1,30),DA)=""
"^DD",365.15,365.15,.01,1,1,2)
K ^IBE(365.15,"B",$E(X,1,30),DA)
"^DD",365.15,365.15,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",365.15,365.15,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",365.15,365.15,.01,2)
S Y(0)=Y S Y=$S($E(Y,1)="D":"Response Received, Inactive Policy",$E(Y)="B":"Problem Identified",$E(Y,1)="A":"Response Received, Active Policy",$E(Y,1)="Q":"Inquiry Sent, Awaiting Response",$E(Y,1)="U":"Response Received, Ambiguous Answer",1:"")
"^DD",365.15,365.15,.01,2.1)
S Y=$S($E(Y,1)="D":"Response Received, Inactive Policy",$E(Y)="B":"Problem Identified",$E(Y,1)="A":"Response Received, Active Policy",$E(Y,1)="Q":"Inquiry Sent, Awaiting Response",$E(Y,1)="U":"Response Received, Ambiguous Answer",1:"")
"^DD",365.15,365.15,.01,3)
Answer must be 2-5 characters in length
"^DD",365.15,365.15,.01,21,0)
^.001^5^5^3040430^^^^
"^DD",365.15,365.15,.01,21,1,0)
This is the internal representation of a given IIV status which may
"^DD",365.15,365.15,.01,21,2,0)
be found in the Insurance Buffer application.  This code takes
"^DD",365.15,365.15,.01,21,3,0)
into account that although several IIV statuses may use the same symbol 
"^DD",365.15,365.15,.01,21,4,0)
in the IIV status column in the Insurance Buffer list, each IIV status 
"^DD",365.15,365.15,.01,21,5,0)
may have a different meaning.
"^DD",365.15,365.15,.01,"DT")
3040430
"^DD",365.15,365.15,.02,0)
ASCII VALUE FOR IIV STATUS^NJ3,0^^0;2^K:+X'=X!(X>126)!(X<32)!(X?.E1"."1N.N) X
"^DD",365.15,365.15,.02,3)
Type a Number between 32 and 126, 0 Decimal Digits
"^DD",365.15,365.15,.02,21,0)
^.001^5^5^3040430^^^
"^DD",365.15,365.15,.02,21,1,0)
This field is the ASCII number representation for the character
"^DD",365.15,365.15,.02,21,2,0)
which should be displayed in the IIV status column in the insurance 
"^DD",365.15,365.15,.02,21,3,0)
buffer list for this entry.  The ASCII value is being stored instead of 
"^DD",365.15,365.15,.02,21,4,0)
the character itself because of the issues involved with storing the "?" 
"^DD",365.15,365.15,.02,21,5,0)
character as a valid symbol.
"^DD",365.15,365.15,.02,"DT")
3040227
"^DD",365.15,365.15,.03,0)
EXPAND ENTRY ACTION^S^1:EE Update is Allowed;0:EE Update is Not Allowed;^0;3^Q
"^DD",365.15,365.15,.03,3)
Can the Expand Entry action overwrite this IIV status?
"^DD",365.15,365.15,.03,21,0)
^^6^6^3050208^
"^DD",365.15,365.15,.03,21,1,0)
This field will determine whether or not the IIV status associated with
"^DD",365.15,365.15,.03,21,2,0)
a buffer entry may get overwritten by the Expand Entry action in
"^DD",365.15,365.15,.03,21,3,0)
the Insurance Buffer application.  Some IIV statuses should stay as they
"^DD",365.15,365.15,.03,21,4,0)
are and not get updated by Expand Entry and other symbols should
"^DD",365.15,365.15,.03,21,5,0)
get updated, so the user knows the current status of the buffer entry
"^DD",365.15,365.15,.03,21,6,0)
with regard to the IIV process.
"^DD",365.15,365.15,.03,"DT")
3030409
"^DD",365.15,365.15,1,0)
DESCRIPTION^365.152^^1;0
"^DD",365.15,365.15,1,21,0)
^.001^3^3^3040812^^^^
"^DD",365.15,365.15,1,21,1,0)
This is the explanation of what the IIV status means.  This
"^DD",365.15,365.15,1,21,2,0)
description will appear in the Expand Entry action of the 
"^DD",365.15,365.15,1,21,3,0)
Insurance Buffer application.
"^DD",365.15,365.15,2,0)
CORRECTIVE ACTION^365.17^^2;0
"^DD",365.15,365.15,2,21,0)
^^3^3^3040812^
"^DD",365.15,365.15,2,21,1,0)
This is the set of steps a user needs to follow in order to resolve this
"^DD",365.15,365.15,2,21,2,0)
IIV problem that is displayed on the Expand Entry screen in the Insurance 
"^DD",365.15,365.15,2,21,3,0)
Buffer.
"^DD",365.15,365.15,2,"DT")
3040607
"^DD",365.15,365.152,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",365.15,365.152,0,"DT")
3020603
"^DD",365.15,365.152,0,"NM","DESCRIPTION")

"^DD",365.15,365.152,0,"UP")
365.15
"^DD",365.15,365.152,.01,0)
DESCRIPTION^W^^0;1^Q
"^DD",365.15,365.152,.01,3)
Enter the explanation for this IIV status.
"^DD",365.15,365.152,.01,21,0)
^.001^3^3^3040812^^
"^DD",365.15,365.152,.01,21,1,0)
This is the explanation of what the IIV status means.  This description
"^DD",365.15,365.152,.01,21,2,0)
will appear in the Expand Entry action of the Insurance Buffer
"^DD",365.15,365.152,.01,21,3,0)
application.
"^DD",365.15,365.152,.01,"DT")
3040812
"^DD",365.15,365.17,0)
CORRECTIVE ACTION SUB-FIELD^^.01^1
"^DD",365.15,365.17,0,"DT")
3040607
"^DD",365.15,365.17,0,"NM","CORRECTIVE ACTION")

"^DD",365.15,365.17,0,"UP")
365.15
"^DD",365.15,365.17,.01,0)
CORRECTIVE ACTION^W^^0;1
"^DD",365.15,365.17,.01,3)
Enter the steps to follow to correct this issue in order to electronically confirm this insurance policy using IIV.
"^DD",365.15,365.17,.01,21,0)
^^3^3^3040812^
"^DD",365.15,365.17,.01,21,1,0)
This is the set of steps a user needs to follow in order to resolve this
"^DD",365.15,365.17,.01,21,2,0)
IIV problem that is displayed on the Expand Entry screen in the Insurance
"^DD",365.15,365.17,.01,21,3,0)
Buffer.
"^DD",365.15,365.17,.01,"DT")
3040812
"^DIC",365.011,365.011,0)
X12 271 ELIGIBILITY/BENEFIT^365.011I
"^DIC",365.011,365.011,0,"GL")
^IBE(365.011,
"^DIC",365.011,365.011,"%",0)
^1.005^^0
"^DIC",365.011,365.011,"%D",0)
^^4^4^3030418^
"^DIC",365.011,365.011,"%D",1,0)
This file contains all the corresponding X.12 271 EB01 codes 
"^DIC",365.011,365.011,"%D",2,0)
(Eligibility/Benefits).
"^DIC",365.011,365.011,"%D",3,0)
 
"^DIC",365.011,365.011,"%D",4,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365.011,"B","X12 271 ELIGIBILITY/BENEFIT",365.011)

"^DIC",365.013,365.013,0)
X12 271 SERVICE TYPE^365.013I
"^DIC",365.013,365.013,0,"GL")
^IBE(365.013,
"^DIC",365.013,365.013,"%",0)
^1.005^^0
"^DIC",365.013,365.013,"%D",0)
^^4^4^3030418^
"^DIC",365.013,365.013,"%D",1,0)
This file contains all the corresponding X.12 271 EB03 codes (Service 
"^DIC",365.013,365.013,"%D",2,0)
Type).
"^DIC",365.013,365.013,"%D",3,0)
 
"^DIC",365.013,365.013,"%D",4,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365.013,"B","X12 271 SERVICE TYPE",365.013)

"^DIC",365.014,365.014,0)
X12 271 INSURANCE TYPE^365.014I
"^DIC",365.014,365.014,0,"GL")
^IBE(365.014,
"^DIC",365.014,365.014,"%",0)
^1.005^^0
"^DIC",365.014,365.014,"%D",0)
^^4^4^3030418^
"^DIC",365.014,365.014,"%D",1,0)
This file contains all the corresponding X.12 271 EB04 codes (Insurance 
"^DIC",365.014,365.014,"%D",2,0)
Type).
"^DIC",365.014,365.014,"%D",3,0)
 
"^DIC",365.014,365.014,"%D",4,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365.014,"B","X12 271 INSURANCE TYPE",365.014)

"^DIC",365.016,365.016,0)
X12 271 QUANTITY QUALIFIER^365.016I
"^DIC",365.016,365.016,0,"GL")
^IBE(365.016,
"^DIC",365.016,365.016,"%",0)
^1.005^^0
"^DIC",365.016,365.016,"%D",0)
^^4^4^3030418^
"^DIC",365.016,365.016,"%D",1,0)
This file contains all the corresponding X.12 271 EB09 codes (Quantity 
"^DIC",365.016,365.016,"%D",2,0)
Qualifier).
"^DIC",365.016,365.016,"%D",3,0)
 
"^DIC",365.016,365.016,"%D",4,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365.016,"B","X12 271 QUANTITY QUALIFIER",365.016)

"^DIC",365.022,365.022,0)
X12 271 ENTITY IDENTIFIER CODE^365.022
"^DIC",365.022,365.022,0,"GL")
^IBE(365.022,
"^DIC",365.022,365.022,"%",0)
^1.005^^
"^DIC",365.022,365.022,"%D",0)
^^5^5^3090710^
"^DIC",365.022,365.022,"%D",1,0)
This file contains all the corresponding X.12 codes which identify an 
"^DIC",365.022,365.022,"%D",2,0)
eligibility/benefit entity.
"^DIC",365.022,365.022,"%D",3,0)
 
"^DIC",365.022,365.022,"%D",4,0)
 
"^DIC",365.022,365.022,"%D",5,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365.022,"B","X12 271 ENTITY IDENTIFIER CODE",365.022)

"^DIC",365.023,365.023,0)
X12 271 IDENTIFICATION QUALIFIER^365.023
"^DIC",365.023,365.023,0,"GL")
^IBE(365.023,
"^DIC",365.023,365.023,"%",0)
^1.005^^
"^DIC",365.023,365.023,"%D",0)
^^6^6^3090730^
"^DIC",365.023,365.023,"%D",1,0)
This file contains all the corresponding X.12 codes for identification 
"^DIC",365.023,365.023,"%D",2,0)
qualifiers.
"^DIC",365.023,365.023,"%D",3,0)
 
"^DIC",365.023,365.023,"%D",4,0)
 
"^DIC",365.023,365.023,"%D",5,0)
Per VHA Directive 10-93-142, this file definition should not be 
"^DIC",365.023,365.023,"%D",6,0)
modified.  
"^DIC",365.023,"B","X12 271 IDENTIFICATION QUALIFIER",365.023)

"^DIC",365.024,365.024,0)
X12 271 PROVIDER CODE^365.024
"^DIC",365.024,365.024,0,"GL")
^IBE(365.024,
"^DIC",365.024,365.024,"%",0)
^1.005^^
"^DIC",365.024,365.024,"%D",0)
^^6^6^3090713^
"^DIC",365.024,365.024,"%D",1,0)
This file contains all the corresponding X.12 codes which identify a 
"^DIC",365.024,365.024,"%D",2,0)
provider.
"^DIC",365.024,365.024,"%D",3,0)
 
"^DIC",365.024,365.024,"%D",4,0)
 
"^DIC",365.024,365.024,"%D",5,0)
Per VHA Directive 10-93-142, this file definition should not be 
"^DIC",365.024,365.024,"%D",6,0)
modified.
"^DIC",365.024,"B","X12 271 PROVIDER CODE",365.024)

"^DIC",365.025,365.025,0)
X12 271 DELIVERY FREQUENCY CODE^365.025
"^DIC",365.025,365.025,0,"GL")
^IBE(365.025,
"^DIC",365.025,365.025,"%",0)
^1.005^^
"^DIC",365.025,365.025,"%D",0)
^^7^7^3090713^
"^DIC",365.025,365.025,"%D",1,0)
This file contains all the corresponding X.12 codes for delivery 
"^DIC",365.025,365.025,"%D",2,0)
frequency.
"^DIC",365.025,365.025,"%D",3,0)
 
"^DIC",365.025,365.025,"%D",4,0)
 
"^DIC",365.025,365.025,"%D",5,0)
 
"^DIC",365.025,365.025,"%D",6,0)
Per VHA Directive 10-93-142, this file definition should not be 
"^DIC",365.025,365.025,"%D",7,0)
modified.  
"^DIC",365.025,"B","X12 271 DELIVERY FREQUENCY CODE",365.025)

"^DIC",365.026,365.026,0)
X12 271 DATE QUALIFIER^365.026
"^DIC",365.026,365.026,0,"GL")
^IBE(365.026,
"^DIC",365.026,365.026,"%",0)
^1.005^^
"^DIC",365.026,365.026,"%D",0)
^^6^6^3090714^
"^DIC",365.026,365.026,"%D",1,0)
This file contains all the corresponding X.12 codes for date/time 
"^DIC",365.026,365.026,"%D",2,0)
qualifiers.
"^DIC",365.026,365.026,"%D",3,0)
 
"^DIC",365.026,365.026,"%D",4,0)
 
"^DIC",365.026,365.026,"%D",5,0)
Per VHA Directive 10-93-142, this file definition should not be 
"^DIC",365.026,365.026,"%D",6,0)
modified.  
"^DIC",365.026,"B","X12 271 DATE QUALIFIER",365.026)

"^DIC",365.028,365.028,0)
X12 271 REFERENCE IDENTIFICATION^365.028
"^DIC",365.028,365.028,0,"GL")
^IBE(365.028,
"^DIC",365.028,365.028,"%",0)
^1.005^^
"^DIC",365.028,365.028,"%D",0)
^^7^7^3090909^
"^DIC",365.028,365.028,"%D",1,0)
This file contains all the corresponding X.12 codes for reference 
"^DIC",365.028,365.028,"%D",2,0)
identification codes.
"^DIC",365.028,365.028,"%D",3,0)
 
"^DIC",365.028,365.028,"%D",4,0)
 
"^DIC",365.028,365.028,"%D",5,0)
 
"^DIC",365.028,365.028,"%D",6,0)
Per VHA Directive 10-93-142, this file definition should not be 
"^DIC",365.028,365.028,"%D",7,0)
modified.
"^DIC",365.028,"B","X12 271 REFERENCE IDENTIFICATION",365.028)

"^DIC",365.15,365.15,0)
IIV STATUS TABLE^365.15
"^DIC",365.15,365.15,0,"GL")
^IBE(365.15,
"^DIC",365.15,365.15,"%",0)
^1.005^^0
"^DIC",365.15,365.15,"%D",0)
^^7^7^3030414^
"^DIC",365.15,365.15,"%D",1,0)
This file contains the various IIV statuses for entries in the Insurance 
"^DIC",365.15,365.15,"%D",2,0)
Buffer.  Also included are the symbols that should appear in the IIV 
"^DIC",365.15,365.15,"%D",3,0)
status column in the Insurance Buffer list, and a more detailed
"^DIC",365.15,365.15,"%D",4,0)
description of the status that is used in the Expand Entry option in the 
"^DIC",365.15,365.15,"%D",5,0)
Insurance Buffer.
"^DIC",365.15,365.15,"%D",6,0)
 
"^DIC",365.15,365.15,"%D",7,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365.15,"B","IIV STATUS TABLE",365.15)

"BLD",7487,6)
^403
**END**
**END**

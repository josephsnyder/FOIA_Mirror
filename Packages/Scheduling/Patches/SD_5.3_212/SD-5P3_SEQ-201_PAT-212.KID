Released SD*5.3*212 SEQ #201
Extracted from mail message
**KIDS**:SD*5.3*212^

**INSTALL NAME**
SD*5.3*212
"BLD",2025,0)
SD*5.3*212^SCHEDULING^0^3000712^y
"BLD",2025,1,0)
^^2^2^3000403^
"BLD",2025,1,1,0)
The changes included in this patch are described in the description of
"BLD",2025,1,2,0)
patch SD*5.3*212 in the National Patch Module.
"BLD",2025,4,0)
^9.64PA^404.44^1
"BLD",2025,4,404.44,0)
404.44
"BLD",2025,4,404.44,2,0)
^9.641^404.44^1
"BLD",2025,4,404.44,2,404.44,0)
PCMM PARAMETER  (File-top level)
"BLD",2025,4,404.44,2,404.44,1,0)
^9.6411^17^1
"BLD",2025,4,404.44,2,404.44,1,17,0)
BASELINE RUN DATE
"BLD",2025,4,404.44,222)
y^n^p^^^^n
"BLD",2025,4,"APDD",404.44,404.44)

"BLD",2025,4,"APDD",404.44,404.44,17)

"BLD",2025,4,"B",404.44,404.44)

"BLD",2025,"ABPKG")
n
"BLD",2025,"INID")
^
"BLD",2025,"INIT")
POST^SD53P212
"BLD",2025,"KRN",0)
^9.67PA^19^18
"BLD",2025,"KRN",.4,0)
.4
"BLD",2025,"KRN",.401,0)
.401
"BLD",2025,"KRN",.402,0)
.402
"BLD",2025,"KRN",.403,0)
.403
"BLD",2025,"KRN",.5,0)
.5
"BLD",2025,"KRN",.84,0)
.84
"BLD",2025,"KRN",3.6,0)
3.6
"BLD",2025,"KRN",3.8,0)
3.8
"BLD",2025,"KRN",9.2,0)
9.2
"BLD",2025,"KRN",9.8,0)
9.8
"BLD",2025,"KRN",9.8,"NM",0)
^9.68A^7^7
"BLD",2025,"KRN",9.8,"NM",1,0)
SCMCGU^^0^B11215605
"BLD",2025,"KRN",9.8,"NM",2,0)
SCMCCV6^^0^B63495341
"BLD",2025,"KRN",9.8,"NM",3,0)
SCMCHLS^^0^B5643204
"BLD",2025,"KRN",9.8,"NM",4,0)
SCMCHLZ^^0^B17070070
"BLD",2025,"KRN",9.8,"NM",5,0)
SD53P212^^0^B9693697
"BLD",2025,"KRN",9.8,"NM",6,0)
SCAPMC34^^0^B21278636
"BLD",2025,"KRN",9.8,"NM",7,0)
SCAPMC8P^^0^B18276200
"BLD",2025,"KRN",9.8,"NM","B","SCAPMC34",6)

"BLD",2025,"KRN",9.8,"NM","B","SCAPMC8P",7)

"BLD",2025,"KRN",9.8,"NM","B","SCMCCV6",2)

"BLD",2025,"KRN",9.8,"NM","B","SCMCGU",1)

"BLD",2025,"KRN",9.8,"NM","B","SCMCHLS",3)

"BLD",2025,"KRN",9.8,"NM","B","SCMCHLZ",4)

"BLD",2025,"KRN",9.8,"NM","B","SD53P212",5)

"BLD",2025,"KRN",19,0)
19
"BLD",2025,"KRN",19,"NM",0)
^9.68A^1^1
"BLD",2025,"KRN",19,"NM",1,0)
SCMC PCMM BASELINE SEEDING^^0
"BLD",2025,"KRN",19,"NM","B","SCMC PCMM BASELINE SEEDING",1)

"BLD",2025,"KRN",19.1,0)
19.1
"BLD",2025,"KRN",101,0)
101
"BLD",2025,"KRN",409.61,0)
409.61
"BLD",2025,"KRN",771,0)
771
"BLD",2025,"KRN",869.2,0)
869.2
"BLD",2025,"KRN",870,0)
870
"BLD",2025,"KRN",8994,0)
8994
"BLD",2025,"KRN","B",.4,.4)

"BLD",2025,"KRN","B",.401,.401)

"BLD",2025,"KRN","B",.402,.402)

"BLD",2025,"KRN","B",.403,.403)

"BLD",2025,"KRN","B",.5,.5)

"BLD",2025,"KRN","B",.84,.84)

"BLD",2025,"KRN","B",3.6,3.6)

"BLD",2025,"KRN","B",3.8,3.8)

"BLD",2025,"KRN","B",9.2,9.2)

"BLD",2025,"KRN","B",9.8,9.8)

"BLD",2025,"KRN","B",19,19)

"BLD",2025,"KRN","B",19.1,19.1)

"BLD",2025,"KRN","B",101,101)

"BLD",2025,"KRN","B",409.61,409.61)

"BLD",2025,"KRN","B",771,771)

"BLD",2025,"KRN","B",869.2,869.2)

"BLD",2025,"KRN","B",870,870)

"BLD",2025,"KRN","B",8994,8994)

"BLD",2025,"PRE")
SD53P212
"BLD",2025,"QUES",0)
^9.62^^
"BLD",2025,"REQB",0)
^9.611^3^3
"BLD",2025,"REQB",1,0)
SD*5.3*177^2
"BLD",2025,"REQB",2,0)
SD*5.3*210^2
"BLD",2025,"REQB",3,0)
XU*8.0*134^2
"BLD",2025,"REQB","B","SD*5.3*177",1)

"BLD",2025,"REQB","B","SD*5.3*210",2)

"BLD",2025,"REQB","B","XU*8.0*134",3)

"FIA",404.44)
PCMM PARAMETER
"FIA",404.44,0)
^SCTM(404.44,
"FIA",404.44,0,0)
404.44
"FIA",404.44,0,1)
y^n^p^^^^n
"FIA",404.44,0,10)

"FIA",404.44,0,11)

"FIA",404.44,0,"RLRO")

"FIA",404.44,0,"VR")
5.3^SD
"FIA",404.44,404.44)
1
"FIA",404.44,404.44,17)

"INIT")
POST^SD53P212
"KRN",19,9081,-1)
0^1
"KRN",19,9081,0)
SCMC PCMM BASELINE SEEDING^PCMM Baseline Seeding^^R^^^^^^^y^SCHEDULING^^
"KRN",19,9081,1,0)
^19.06^12^12^3000407^^^^
"KRN",19,9081,1,1,0)
This option will create a Primary Care Baseline Image based on all
"KRN",19,9081,1,2,0)
Primary Care Assignment activity between the run date of this option and
"KRN",19,9081,1,3,0)
the date your facility installed SD*5.3*177.  Each assignment activity
"KRN",19,9081,1,4,0)
within the date range will create an entry in file 404.48, where it will
"KRN",19,9081,1,5,0)
wait to be transmitted to the Austin Automation Center by the PCMM
"KRN",19,9081,1,6,0)
background HL7 process.  The impact of these tranmissions could be severe.
"KRN",19,9081,1,7,0)
You may govern the number of HL7 messages which will be transmitted at any
"KRN",19,9081,1,8,0)
given time by altering the value in the 'HL7 Transmit Limit' field of the
"KRN",19,9081,1,9,0)
PCMM Parameter file.
"KRN",19,9081,1,10,0)
 
"KRN",19,9081,1,11,0)
This option should NOT be run more than once.  It should be scheduled to
"KRN",19,9081,1,12,0)
run via Taskman by qualified IRM personnel.
"KRN",19,9081,20)

"KRN",19,9081,25)
EN^SCMCCV6(0,0)
"KRN",19,9081,200.9)
y
"KRN",19,9081,"U")
PCMM BASELINE SEEDING
"MBREQ")
0
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",16,-1)
1^1
"PKG",16,0)
SCHEDULING^SD^APPOINTMENTS,PROFILES,LETTERS,AMIS REPORTS
"PKG",16,20,0)
^9.402P^^
"PKG",16,22,0)
^9.49I^1^1
"PKG",16,22,1,0)
5.3^2941102
"PKG",16,22,1,"PAH",1,0)
212^3000712
"PKG",16,22,1,"PAH",1,1,0)
^^2^2^3000712
"PKG",16,22,1,"PAH",1,1,1,0)
The changes included in this patch are described in the description of
"PKG",16,22,1,"PAH",1,1,2,0)
patch SD*5.3*212 in the National Patch Module.
"PRE")
SD53P212
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
7
"RTN","SCAPMC34")
0^6^B21278636
"RTN","SCAPMC34",1,0)
SCAPMC34  ;BP/DJB - Get PCP/AP Array For a Pt Tm Pos ; 5/24/99 12:39pm
"RTN","SCAPMC34",2,0)
 ;;5.3;Scheduling;**177,212**;May 01, 1999
"RTN","SCAPMC34",3,0)
 ;
"RTN","SCAPMC34",4,0)
PRPTTPC(PTTMPOS,SCDATES,SCLIST,SCERR,SCALLHIS,ADJDATE) ;
"RTN","SCAPMC34",5,0)
 ;Get provider array for a Patient Team Position Assignment (#404.43).
"RTN","SCAPMC34",6,0)
 ;
"RTN","SCAPMC34",7,0)
 ; Input: See PRPTTP^SCAPMC33
"RTN","SCAPMC34",8,0)
 ;Output: See PRTP^SCAPMC8
"RTN","SCAPMC34",9,0)
 ;
"RTN","SCAPMC34",10,0)
 ;Returned: 1 if ok, 0 if error
"RTN","SCAPMC34",11,0)
 ;
"RTN","SCAPMC34",12,0)
 ;Declare variables
"RTN","SCAPMC34",13,0)
 NEW EDATE,ND,OK,PRPTTPC,SDATE,TMPOSPTR
"RTN","SCAPMC34",14,0)
 ;
"RTN","SCAPMC34",15,0)
 ;Initialize variables
"RTN","SCAPMC34",16,0)
 S OK=0
"RTN","SCAPMC34",17,0)
 ;
"RTN","SCAPMC34",18,0)
 ;Check input
"RTN","SCAPMC34",19,0)
 I '$G(PTTMPOS) G QUIT
"RTN","SCAPMC34",20,0)
 I '$D(^SCPT(404.43,PTTMPOS,0)) G QUIT
"RTN","SCAPMC34",21,0)
 ;
"RTN","SCAPMC34",22,0)
 ;Get data
"RTN","SCAPMC34",23,0)
 S ND=$G(^SCPT(404.43,PTTMPOS,0)) ;Zero node of 404.43
"RTN","SCAPMC34",24,0)
 S TMPOSPTR=$P(ND,U,2) ;...........Team Position IEN
"RTN","SCAPMC34",25,0)
 I 'TMPOSPTR G QUIT
"RTN","SCAPMC34",26,0)
 S SDATE=$P(ND,U,3) ;..............Assigned Date
"RTN","SCAPMC34",27,0)
 S EDATE=$P(ND,U,4) ;..............Unassigned Date
"RTN","SCAPMC34",28,0)
 ;
"RTN","SCAPMC34",29,0)
 S OK=$$ADJUST1^SCAPMC33(SDATE,EDATE)
"RTN","SCAPMC34",30,0)
 G:'OK QUIT
"RTN","SCAPMC34",31,0)
 ;Get temporary array in PRPTTPC. It will be converted to @SCLIST.
"RTN","SCAPMC34",32,0)
 S OK=$$PRTPC^SCAPMC(TMPOSPTR,.SCDATES,"PRPTTPC",.SCERR,.SCALLHIS,.ADJDATE)
"RTN","SCAPMC34",33,0)
 G:'OK QUIT
"RTN","SCAPMC34",34,0)
 G:'$D(PRPTTPC) QUIT
"RTN","SCAPMC34",35,0)
 ;
"RTN","SCAPMC34",36,0)
 ;alb/rpm - Patch 212 start
"RTN","SCAPMC34",37,0)
 D ADJUST(EDATE) ;Convert array & adjust dates and unique ID subscript
"RTN","SCAPMC34",38,0)
 ;alb/rpm - Patch 212 end
"RTN","SCAPMC34",39,0)
 ;
"RTN","SCAPMC34",40,0)
QUIT Q OK
"RTN","SCAPMC34",41,0)
 ;
"RTN","SCAPMC34",42,0)
ADJUST(SCUDATE) ;Convert PROV-P/PROV-U/PREC array to AP/PCP array. Adjust Start/End
"RTN","SCAPMC34",43,0)
 ;dates in SCLIST array so they don't exceed requested date range.
"RTN","SCAPMC34",44,0)
 ;Add the Pt Tm Pos Assign IEN to unique ID string.
"RTN","SCAPMC34",45,0)
 ;alb/rpm Patch 212 start
"RTN","SCAPMC34",46,0)
 ; Input:
"RTN","SCAPMC34",47,0)
 ;       SCUDATE - Pt Tm Pos Unassign date [default=""]
"RTN","SCAPMC34",48,0)
 ;
"RTN","SCAPMC34",49,0)
 ; Output:  None
"RTN","SCAPMC34",50,0)
 ;alb/rpm Patch 212 end
"RTN","SCAPMC34",51,0)
 ;
"RTN","SCAPMC34",52,0)
 NEW DATA,ID,ID1,NUM,PREH,TYPE,TYPE1
"RTN","SCAPMC34",53,0)
 Q:'$D(PRPTTPC)
"RTN","SCAPMC34",54,0)
 ;
"RTN","SCAPMC34",55,0)
 ;alb/rpm Patch 212 start
"RTN","SCAPMC34",56,0)
 S SCUDATE=$G(SCUDATE,"")
"RTN","SCAPMC34",57,0)
 ;alb/rpm Patch 212 end
"RTN","SCAPMC34",58,0)
 ;
"RTN","SCAPMC34",59,0)
 ;Loop thru returned array and make adjustments.
"RTN","SCAPMC34",60,0)
 S NUM=0
"RTN","SCAPMC34",61,0)
 F  S NUM=$O(PRPTTPC(NUM)) Q:'NUM  S TYPE="" F  S TYPE=$O(PRPTTPC(NUM,TYPE)) Q:TYPE=""  S ID="" F  S ID=$O(PRPTTPC(NUM,TYPE,ID)) Q:ID=""  D  ;
"RTN","SCAPMC34",62,0)
 . S DATA=$G(PRPTTPC(NUM,TYPE,ID))
"RTN","SCAPMC34",63,0)
 . ;
"RTN","SCAPMC34",64,0)
 . ;alb/rpm Patch 212 start
"RTN","SCAPMC34",65,0)
 . ;
"RTN","SCAPMC34",66,0)
 . ;Adjust preceptor act/inact dates to represent preceptor
"RTN","SCAPMC34",67,0)
 . ;assign/unassign dates.
"RTN","SCAPMC34",68,0)
 . ;
"RTN","SCAPMC34",69,0)
 . I $G(ADJDATE),TYPE="PREC" D
"RTN","SCAPMC34",70,0)
 . . I $P(DATA,U,9)<$P(DATA,U,14) S $P(DATA,U,9)=$P(DATA,U,14)
"RTN","SCAPMC34",71,0)
 . . I $P(DATA,U,15)]"",$P(DATA,U,10)="" S $P(DATA,U,10)=$P(DATA,U,15)
"RTN","SCAPMC34",72,0)
 . ;
"RTN","SCAPMC34",73,0)
 . ;Enable the date adjustment to work correctly when no Team Position
"RTN","SCAPMC34",74,0)
 . ;Inactivation Date exists during a Patient Team Position Unassignment
"RTN","SCAPMC34",75,0)
 . ;by stuffing the Patient Team Position Unassignment Date into the Team
"RTN","SCAPMC34",76,0)
 . ;Position Inactivation Date field.  
"RTN","SCAPMC34",77,0)
 . ;
"RTN","SCAPMC34",78,0)
 . I $G(ADJDATE),SCUDATE]"",$P(DATA,U,10)="" S $P(DATA,U,10)=SCUDATE
"RTN","SCAPMC34",79,0)
 . ;
"RTN","SCAPMC34",80,0)
 . ;Continue only if the Act/Inact dates fall within Assign/Unassign
"RTN","SCAPMC34",81,0)
 . ;dates
"RTN","SCAPMC34",82,0)
 . ;
"RTN","SCAPMC34",83,0)
 . I $G(ADJDATE),'$$DTCHK^SCAPU1(@SCDATES@("BEGIN"),@SCDATES@("END"),0,$P(DATA,U,9),$P(DATA,U,10)) Q
"RTN","SCAPMC34",84,0)
 . ;
"RTN","SCAPMC34",85,0)
 . ;alb/rpm Patch 212 end
"RTN","SCAPMC34",86,0)
 . ;
"RTN","SCAPMC34",87,0)
 . ;Adjust dates
"RTN","SCAPMC34",88,0)
 . I $G(ADJDATE) D  ;
"RTN","SCAPMC34",89,0)
 . . I $P(DATA,U,9)<@SCDATES@("BEGIN") D  ;Begin Date
"RTN","SCAPMC34",90,0)
 . . . S $P(DATA,U,9)=@SCDATES@("BEGIN")
"RTN","SCAPMC34",91,0)
 . . I @SCDATES@("END"),$P(DATA,U,10)>@SCDATES@("END") D  ;End Date
"RTN","SCAPMC34",92,0)
 . . . S $P(DATA,U,10)=@SCDATES@("END")
"RTN","SCAPMC34",93,0)
 . ;
"RTN","SCAPMC34",94,0)
 . ;Add Patient Team Position Assign pointer to ID.
"RTN","SCAPMC34",95,0)
 . S ID1=PTTMPOS_"-"_ID
"RTN","SCAPMC34",96,0)
 . ;Mark subscript as AP or PCP
"RTN","SCAPMC34",97,0)
 . S TYPE1=$S(ID["AP":"AP",1:"PCP")
"RTN","SCAPMC34",98,0)
 . ;Build return array
"RTN","SCAPMC34",99,0)
 . S @SCLIST@(PTTMPOS,TYPE1,ID1)=DATA
"RTN","SCAPMC34",100,0)
 . Q
"RTN","SCAPMC34",101,0)
 Q
"RTN","SCAPMC34",102,0)
 ;
"RTN","SCAPMC34",103,0)
PROV(PTTMPOS,SCDATE,SCTYPE,SCPIECE) ;Return a single node/piece for AP/PCP
"RTN","SCAPMC34",104,0)
 ;
"RTN","SCAPMC34",105,0)
 ;Input:
"RTN","SCAPMC34",106,0)
 ;      PTTMPOS - Pointer to entry in PATIENT TEAM POSITION
"RTN","SCAPMC34",107,0)
 ;                ASSIGNMENT file (#404.43).
"RTN","SCAPMC34",108,0)
 ;       SCDATE - A single date.
"RTN","SCAPMC34",109,0)
 ;       SCTYPE - AP:  Associate Provider
"RTN","SCAPMC34",110,0)
 ;                PCP: Primary Care Provider
"RTN","SCAPMC34",111,0)
 ;                Default=PCP
"RTN","SCAPMC34",112,0)
 ;      SCPIECE - Enter number of piece of string you want displayed.
"RTN","SCAPMC34",113,0)
 ;                If null, return entire string.
"RTN","SCAPMC34",114,0)
 ;                See PRTP^SCAPMC8 for a description of the string
"RTN","SCAPMC34",115,0)
 ;                pieces.
"RTN","SCAPMC34",116,0)
 ;Return: Data specified by SCPIECE. See PRTP^SCAPMC8 for a
"RTN","SCAPMC34",117,0)
 ;        description of the string pieces.
"RTN","SCAPMC34",118,0)
 ;
"RTN","SCAPMC34",119,0)
 NEW DATA,ERR,I,ID,IEN,PROV,RESULT,TMP,TYPE,ZDATE
"RTN","SCAPMC34",120,0)
 ;
"RTN","SCAPMC34",121,0)
 ;Initialize variables
"RTN","SCAPMC34",122,0)
 I '$G(PTTMPOS) Q ""
"RTN","SCAPMC34",123,0)
 I '$D(^SCPT(404.43,PTTMPOS,0)) Q ""
"RTN","SCAPMC34",124,0)
 I '$G(SCDATE) Q ""
"RTN","SCAPMC34",125,0)
 S ZDATE("BEGIN")=SCDATE
"RTN","SCAPMC34",126,0)
 S ZDATE("END")=SCDATE
"RTN","SCAPMC34",127,0)
 S ZDATE("INCL")=0
"RTN","SCAPMC34",128,0)
 S:$G(SCTYPE)'="AP" SCTYPE="PCP"
"RTN","SCAPMC34",129,0)
 S TYPE=$S(SCTYPE="PCP":"AP",1:"PCP")
"RTN","SCAPMC34",130,0)
 S SCPIECE=$G(SCPIECE)
"RTN","SCAPMC34",131,0)
 ;
"RTN","SCAPMC34",132,0)
 S RESULT=$$PRPTTPC^SCAPMC(PTTMPOS,"ZDATE","PROV","ERR",1)
"RTN","SCAPMC34",133,0)
 I 'RESULT Q ""
"RTN","SCAPMC34",134,0)
 ;
"RTN","SCAPMC34",135,0)
 ;Build temp array subscripted by 404.52 IEN
"RTN","SCAPMC34",136,0)
 S PTTMPOS=0
"RTN","SCAPMC34",137,0)
 F  S PTTMPOS=$O(PROV(PTTMPOS)) Q:'PTTMPOS  D  ;
"RTN","SCAPMC34",138,0)
 . S ID=""
"RTN","SCAPMC34",139,0)
 . F  S ID=$O(PROV(PTTMPOS,SCTYPE,ID)) Q:ID=""  D  ;
"RTN","SCAPMC34",140,0)
 . . S IEN=$P(PROV(PTTMPOS,SCTYPE,ID),"^",11)
"RTN","SCAPMC34",141,0)
 . . S TMP(IEN)=PTTMPOS_U_SCTYPE_U_ID
"RTN","SCAPMC34",142,0)
 ;
"RTN","SCAPMC34",143,0)
 ;If more than one node, delete all but one with highest 404.52 IEN.
"RTN","SCAPMC34",144,0)
 S IEN=$O(TMP(""),-1) I 'IEN Q ""
"RTN","SCAPMC34",145,0)
 S DATA=$G(TMP(IEN))
"RTN","SCAPMC34",146,0)
 S DATA=$G(PROV($P(DATA,U,1),$P(DATA,U,2),$P(DATA,U,3)))
"RTN","SCAPMC34",147,0)
 I SCPIECE S DATA=$P(DATA,U,SCPIECE)
"RTN","SCAPMC34",148,0)
 Q DATA
"RTN","SCAPMC8P")
0^7^B18276200
"RTN","SCAPMC8P",1,0)
SCAPMC8P ;bp/cmf - preceptor sub-array for practitioner list ; 8/10/99 1:19pm
"RTN","SCAPMC8P",2,0)
 ;;5.3;Scheduling;**177,212**;AUG 13, 1993
"RTN","SCAPMC8P",3,0)
 ;;1.0
"RTN","SCAPMC8P",4,0)
 ;
"RTN","SCAPMC8P",5,0)
PRCTP ; preceptor practitioners for position
"RTN","SCAPMC8P",6,0)
 ;
"RTN","SCAPMC8P",7,0)
ST N SCDATES1,SCN1,SCEFF1,SCPAH1,SCACT1,SCINDT1,SCNODE1,SCPRTP1
"RTN","SCAPMC8P",8,0)
 N SCDATES2,SCN2,SCPTP,SCX,SCXA,SCXE,SCNA,SCNE,SCPRCLST,SCPRCPTR
"RTN","SCAPMC8P",9,0)
 N SCP1P11,SCP12,SCP13,SCP14P16,SCR
"RTN","SCAPMC8P",10,0)
 N SCLIST1,SCLIST2,SCN3,SCN4,SCPS,SCPSX,SCPSXA,SCPSXE,SCVALHIS
"RTN","SCAPMC8P",11,0)
 ;
"RTN","SCAPMC8P",12,0)
 S @SCLIST@("PR","CH")=$$VALHIST^SCAPMCU5(404.53,SCTP,"SCVALHIS")
"RTN","SCAPMC8P",13,0)
 G:'$$ACTHIST^SCAPMCU5("SCVALHIS","SCDATES") PRECQ
"RTN","SCAPMC8P",14,0)
 G:'$D(SCVALHIS) PRECQ
"RTN","SCAPMC8P",15,0)
 ;
"RTN","SCAPMC8P",16,0)
LOOP1 ; build list of preceptor assignments
"RTN","SCAPMC8P",17,0)
 S SCEFF1=-(SCEND+.000001)
"RTN","SCAPMC8P",18,0)
 S (SCN1,SCLIST1(0))=0
"RTN","SCAPMC8P",19,0)
 F  S SCEFF1=$O(^SCTM(404.53,"AIDT",SCTP,1,SCEFF1)) Q:'SCEFF1  D
"RTN","SCAPMC8P",20,0)
 . ;Q:'$$ACTHIST^SCAPMCU2(404.53,SCTP,SCDATES,.SCERR,"SCPRTP1")
"RTN","SCAPMC8P",21,0)
 . S SCPAH1=""
"RTN","SCAPMC8P",22,0)
 . F  S SCPAH1=$O(^SCTM(404.53,"AIDT",SCTP,1,SCEFF1,SCPAH1),-1) Q:'SCPAH1  D
"RTN","SCAPMC8P",23,0)
 . . Q:'$D(SCVALHIS("I",SCPAH1))
"RTN","SCAPMC8P",24,0)
 . . N SCACT1,SCI
"RTN","SCAPMC8P",25,0)
 . . S SCNODE1=^SCTM(404.53,SCPAH1,0)
"RTN","SCAPMC8P",26,0)
 . . S SCI=$O(SCVALHIS("I",SCPAH1,0))
"RTN","SCAPMC8P",27,0)
 . . S SCACT1=$O(SCVALHIS(SCI,0))
"RTN","SCAPMC8P",28,0)
 . . S SCPTP=+$P(SCNODE1,U,6)
"RTN","SCAPMC8P",29,0)
 . . Q:$D(SCLIST1("SCPR",SCACT1,SCPTP))
"RTN","SCAPMC8P",30,0)
 . . S SCINDT1=$P(SCVALHIS(SCI,SCACT1,SCPAH1),U)
"RTN","SCAPMC8P",31,0)
 . . Q:'$$DTCHK^SCAPU1(SCBEGIN,SCEND,SCINCL,SCACT1,SCINDT1)
"RTN","SCAPMC8P",32,0)
 . . S SCN1=SCN1+1
"RTN","SCAPMC8P",33,0)
 . . S SCLIST1(0)=SCN1
"RTN","SCAPMC8P",34,0)
 . . S SCLIST1(SCN1)=SCPTP_U_SCACT1_U_SCINDT1_U_SCPAH1
"RTN","SCAPMC8P",35,0)
 . . S SCLIST1("SCPR",SCACT1,SCPTP,SCN1)=""
"RTN","SCAPMC8P",36,0)
 . . Q
"RTN","SCAPMC8P",37,0)
 . Q
"RTN","SCAPMC8P",38,0)
 ;
"RTN","SCAPMC8P",39,0)
LOOP2 ; get preceptors for preceptor assignments
"RTN","SCAPMC8P",40,0)
 G:SCLIST1(0)<1 PRECQ
"RTN","SCAPMC8P",41,0)
 S SCLIST2(0)=SCLIST1(0)
"RTN","SCAPMC8P",42,0)
 F SCN2=1:1:SCLIST2(0) D
"RTN","SCAPMC8P",43,0)
 . S SCX=SCLIST1(SCN2)
"RTN","SCAPMC8P",44,0)
 . ; bp/cmf 212 begin
"RTN","SCAPMC8P",45,0)
 . ; OLD CODE BELOW
"RTN","SCAPMC8P",46,0)
 . ;S SCPTP=$P(SCX,U)
"RTN","SCAPMC8P",47,0)
 . ;K SCPRCLST
"RTN","SCAPMC8P",48,0)
 . ;Q:'$$PRTP^SCAPMC8(SCPTP,"SCDATES","SCPRCLST",SCERR,0)
"RTN","SCAPMC8P",49,0)
 . ; OLD CODE ABOVE
"RTN","SCAPMC8P",50,0)
 . ; NEW CODE BELOW
"RTN","SCAPMC8P",51,0)
 . S SCPTP=$P(SCX,U)
"RTN","SCAPMC8P",52,0)
 . S SCDATES1("BEGIN")=$P(SCX,U,2)
"RTN","SCAPMC8P",53,0)
 . S SCDATES1("END")=$P(SCX,U,3)
"RTN","SCAPMC8P",54,0)
 . S SCDATES1("INCL")=0
"RTN","SCAPMC8P",55,0)
 . K SCPRCLST
"RTN","SCAPMC8P",56,0)
 . Q:'$$PRTP^SCAPMC8(SCPTP,"SCDATES1","SCPRCLST",SCERR,0)
"RTN","SCAPMC8P",57,0)
 . ; NEW CODE ABOVE
"RTN","SCAPMC8P",58,0)
 . ; bp/cmf 212 end
"RTN","SCAPMC8P",59,0)
 . Q:'$D(SCPRCLST(0))
"RTN","SCAPMC8P",60,0)
 . S SCLIST2(SCN2,0)=SCPRCLST(0)
"RTN","SCAPMC8P",61,0)
 . F SCN3=1:1:SCPRCLST(0) D
"RTN","SCAPMC8P",62,0)
 . . S SCLIST2(SCN2,SCN3)=SCPRCLST(SCN3)
"RTN","SCAPMC8P",63,0)
 . Q
"RTN","SCAPMC8P",64,0)
 ;
"RTN","SCAPMC8P",65,0)
LOOP3 ; add preceptor sub-array to sclist
"RTN","SCAPMC8P",66,0)
 G:SCLIST2(0)<1 PRECQ
"RTN","SCAPMC8P",67,0)
 F SCN1=1:1:@SCLIST@(0) D
"RTN","SCAPMC8P",68,0)
 . S SCXA=$P(@SCLIST@(SCN1),U,9)                          ;asgn actdt
"RTN","SCAPMC8P",69,0)
 . S SCXE=$P(@SCLIST@(SCN1),U,10)
"RTN","SCAPMC8P",70,0)
 . S SCXE=$S(+SCXE:SCXE,1:9999999)                        ;asgn enddt
"RTN","SCAPMC8P",71,0)
 . S SCNA=SCXE
"RTN","SCAPMC8P",72,0)
 . S SCN4=0
"RTN","SCAPMC8P",73,0)
 . F  S SCNA=$O(SCLIST1("SCPR",SCNA),-1) Q:'SCNA  D       ;prec actdt
"RTN","SCAPMC8P",74,0)
 . . S SCPTP=$O(SCLIST1("SCPR",SCNA,0))                   ;prec tpien
"RTN","SCAPMC8P",75,0)
 . . S SCN2=$O(SCLIST1("SCPR",SCNA,SCPTP,0))
"RTN","SCAPMC8P",76,0)
 . . Q:'$D(SCLIST2(SCN2))
"RTN","SCAPMC8P",77,0)
 . . S SCP14P16=$P(SCLIST1(SCN2),U,2,4)                   ;prec string
"RTN","SCAPMC8P",78,0)
 . . S SCNE=$P(SCLIST1(SCN2),U,3)
"RTN","SCAPMC8P",79,0)
 . . S SCNE=$S(+SCNE:SCNE,1:9999999)                      ;prec enddt
"RTN","SCAPMC8P",80,0)
 . . Q:SCNE<SCXA
"RTN","SCAPMC8P",81,0)
 . . F SCN3=1:1:SCLIST2(SCN2,0) D
"RTN","SCAPMC8P",82,0)
 . . . ; bp/cmf 212 begin
"RTN","SCAPMC8P",83,0)
 . . . ; old code below
"RTN","SCAPMC8P",84,0)
 . . . ;S SCN4=SCN4+1
"RTN","SCAPMC8P",85,0)
 . . . ;S SCPSX=SCLIST2(SCN2,SCN3)                         ;asgn string
"RTN","SCAPMC8P",86,0)
 . . . ;S SCP1P11=$P(SCPSX,U,1,11)                         ;pos string
"RTN","SCAPMC8P",87,0)
 . . . ;S SCP12=$P(SCPSX,U,12)                             ;should be ""
"RTN","SCAPMC8P",88,0)
 . . . ;S SCP13=$P(SCPSX,U,13)                             ;should be ""
"RTN","SCAPMC8P",89,0)
 . . . ;S SCR=SCP1P11_U_SCP12_U_SCP13_U_SCP14P16           ;rtrn string
"RTN","SCAPMC8P",90,0)
 . . . ; old code above
"RTN","SCAPMC8P",91,0)
 . . . ; new code below
"RTN","SCAPMC8P",92,0)
 . . . S SCPSX=SCLIST2(SCN2,SCN3)                         ;asgn string
"RTN","SCAPMC8P",93,0)
 . . . Q:'$$DTCHK^SCAPU1(SCXA,SCXE,0,$P(SCPSX,U,9),$P(SCPSX,U,10))
"RTN","SCAPMC8P",94,0)
 . . . S SCN4=SCN4+1
"RTN","SCAPMC8P",95,0)
 . . . S SCP1P11=$P(SCPSX,U,1,11)                         ;pos string
"RTN","SCAPMC8P",96,0)
 . . . S SCP12=$P(SCPSX,U,12)                             ;should be ""
"RTN","SCAPMC8P",97,0)
 . . . S SCP13=$P(SCPSX,U,13)                             ;should be ""
"RTN","SCAPMC8P",98,0)
 . . . S SCR=SCP1P11_U_SCP12_U_SCP13_U_SCP14P16           ;rtrn string
"RTN","SCAPMC8P",99,0)
 . . . ; new code above
"RTN","SCAPMC8P",100,0)
 . . . ; bp/cmf 212 end
"RTN","SCAPMC8P",101,0)
 . . . S @SCLIST@(SCN1,"PR",SCN4)=SCR
"RTN","SCAPMC8P",102,0)
 . . . S @SCLIST@(SCN1,"PR",0)=SCN4
"RTN","SCAPMC8P",103,0)
 . . . S @SCLIST@(SCN1,"SCPR",$P(SCR,U),$P(SCR,U,3),$P(SCR,U,14),SCN4)=""
"RTN","SCAPMC8P",104,0)
 . . . Q
"RTN","SCAPMC8P",105,0)
 . . Q
"RTN","SCAPMC8P",106,0)
 . Q
"RTN","SCAPMC8P",107,0)
 ;
"RTN","SCAPMC8P",108,0)
PRECQ I +SCALLHIS D TPALL^SCAPMC8A(404.53)
"RTN","SCAPMC8P",109,0)
 Q
"RTN","SCAPMC8P",110,0)
 ;
"RTN","SCMCCV6")
0^2^B63495341
"RTN","SCMCCV6",1,0)
SCMCCV6 ;BP/CMF - PCMM HL7 Baseline Xmit to AAC ; March 26, 2000
"RTN","SCMCCV6",2,0)
 ;;5.3;Scheduling;**212**;AUG 13, 1993
"RTN","SCMCCV6",3,0)
 ;
"RTN","SCMCCV6",4,0)
 ;Traverse PATIENT TEAM POSITION ASSIGNMENT file (#404.43)
"RTN","SCMCCV6",5,0)
 ;and create events in file (#404.48) for all entries that meet
"RTN","SCMCCV6",6,0)
 ;the following criteria:
"RTN","SCMCCV6",7,0)
 ;    1. Field PC ROLE=1 ;..Primary Care
"RTN","SCMCCV6",8,0)
 ;           -- and one of the following --
"RTN","SCMCCV6",9,0)
 ;    2a. assignment is active as of SD*5.3*212 run date (now!)
"RTN","SCMCCV6",10,0)
 ;    2b. assignment was active as of SD*5.3*177 install date
"RTN","SCMCCV6",11,0)
 ;    2c. assignment was active between 2a and 2b 
"RTN","SCMCCV6",12,0)
 ;
"RTN","SCMCCV6",13,0)
 ;
"RTN","SCMCCV6",14,0)
 W !,"This is not an interactive entry point."
"RTN","SCMCCV6",15,0)
 W !,"This routine should only be executed by IRM staff"
"RTN","SCMCCV6",16,0)
 W !,"              -- ONCE --"
"RTN","SCMCCV6",17,0)
 W !,"using Taskman to Queue option 'PCMM BASELINE SEEDING'"
"RTN","SCMCCV6",18,0)
 W !,"to run during a non-busy period."
"RTN","SCMCCV6",19,0)
 Q
"RTN","SCMCCV6",20,0)
 ;
"RTN","SCMCCV6",21,0)
EN(SCTST,SCDFN) ;
"RTN","SCMCCV6",22,0)
 ; entry point for option 'SCMC PCMM BASELINE SEEDING'
"RTN","SCMCCV6",23,0)
 ;  this option should not be on any users menu
"RTN","SCMCCV6",24,0)
 ;  this option should be queued to run once
"RTN","SCMCCV6",25,0)
 ;  it should not be run more than once without consulting NVS
"RTN","SCMCCV6",26,0)
 ;
"RTN","SCMCCV6",27,0)
 ; input
"RTN","SCMCCV6",28,0)
 ;  SCTST - 1 = test [default = 0]
"RTN","SCMCCV6",29,0)
 ;  SCDFN - Patient IEN used to seed for restarts only [default = 0]
"RTN","SCMCCV6",30,0)
 ;
"RTN","SCMCCV6",31,0)
 S SCTST=+$G(SCTST,0)
"RTN","SCMCCV6",32,0)
 S SCDFN=+$G(SCDFN,0)
"RTN","SCMCCV6",33,0)
 N SCP177  ; patch 177 install date
"RTN","SCMCCV6",34,0)
 N SCP212  ; patch 212 run date
"RTN","SCMCCV6",35,0)
 N SC1,SC2 ; message holders
"RTN","SCMCCV6",36,0)
 N SCARRAY ; message text array
"RTN","SCMCCV6",37,0)
 N SCSTIM  ; process start time
"RTN","SCMCCV6",38,0)
 S SCSTIM=$$HTE^XLFDT($H)
"RTN","SCMCCV6",39,0)
 S SC1="PCMM PC Baseline Seed Process Aborted:"
"RTN","SCMCCV6",40,0)
 ;
"RTN","SCMCCV6",41,0)
 I $$VPATCH^SCUTBK3("SD*5.3*177")=0 D  Q
"RTN","SCMCCV6",42,0)
 . S SC2="  PCMM Patch 'SD*5.3*177' has not been loaded!"
"RTN","SCMCCV6",43,0)
 . D MSG(SC1,SC2)
"RTN","SCMCCV6",44,0)
 . Q
"RTN","SCMCCV6",45,0)
 ;
"RTN","SCMCCV6",46,0)
 I $$VPROGMR^SCUTBK3()=0 D  Q
"RTN","SCMCCV6",47,0)
 . S SC2="  User must have 'XUPROG' key!"
"RTN","SCMCCV6",48,0)
 . D MSG(SC1,SC2)
"RTN","SCMCCV6",49,0)
 . Q
"RTN","SCMCCV6",50,0)
 ;
"RTN","SCMCCV6",51,0)
 S SCP212=$$CHECK()
"RTN","SCMCCV6",52,0)
 I SCP212'="" D  Q
"RTN","SCMCCV6",53,0)
 . I +SCP212 D  Q
"RTN","SCMCCV6",54,0)
 . . S SC2="  PCMM Baseline seeded on "_$$FMTE^XLFDT(SCP212)_"."
"RTN","SCMCCV6",55,0)
 . . D MSG(SC1,SC2)
"RTN","SCMCCV6",56,0)
 . . Q
"RTN","SCMCCV6",57,0)
 . I SCP212=-1 D  Q
"RTN","SCMCCV6",58,0)
 . . S SC2="  Missing PCMM Parameter file entry."
"RTN","SCMCCV6",59,0)
 . . D MSG(SC1,SC2)
"RTN","SCMCCV6",60,0)
 . . Q
"RTN","SCMCCV6",61,0)
 . I SCP212=-2 D  Q
"RTN","SCMCCV6",62,0)
 . . S SC2="  FM Error retrieving data from PCMM Parameter file."
"RTN","SCMCCV6",63,0)
 . . D MSG(SC1,SC2)
"RTN","SCMCCV6",64,0)
 . . Q
"RTN","SCMCCV6",65,0)
 . S SC2="  Undefined Error."
"RTN","SCMCCV6",66,0)
 . D MSG(SC1,SC2)
"RTN","SCMCCV6",67,0)
 . Q
"RTN","SCMCCV6",68,0)
 ;
"RTN","SCMCCV6",69,0)
 S SCP177=$$PDAT^SCMCGU("SD*5.3*177")
"RTN","SCMCCV6",70,0)
 I +SCP177=0 D  Q
"RTN","SCMCCV6",71,0)
 . S SC2="  Unable to obtain SD*5.3*177 Installation Date."
"RTN","SCMCCV6",72,0)
 . D MSG(SC1,SC2)
"RTN","SCMCCV6",73,0)
 . Q
"RTN","SCMCCV6",74,0)
 ;
"RTN","SCMCCV6",75,0)
 I $$BASELINE(SCP177,DT,SCDFN,SCTST)'=1 D  Q
"RTN","SCMCCV6",76,0)
 . S SC2="  PCMM PC Baseline failed"_$$FMTE^XLFDT($$NOW^XLFDT)_"."
"RTN","SCMCCV6",77,0)
 . D MSG(SC1,SC2)
"RTN","SCMCCV6",78,0)
 . Q
"RTN","SCMCCV6",79,0)
 ;
"RTN","SCMCCV6",80,0)
 Q
"RTN","SCMCCV6",81,0)
 ;
"RTN","SCMCCV6",82,0)
BASELINE(SCP177,SCP212,SCPDFN,SCPTST) ;
"RTN","SCMCCV6",83,0)
 ; input
"RTN","SCMCCV6",84,0)
 ;  SCP177 = Patch 177 date (required)
"RTN","SCMCCV6",85,0)
 ;  SCP212 = Patch 212 date (optional, default = today)
"RTN","SCMCCV6",86,0)
 ;  SCPDFN = Patient ien    (optional, default = 0)
"RTN","SCMCCV6",87,0)
 ;  SCPTST = 1 := test [default = 0]
"RTN","SCMCCV6",88,0)
 ;      
"RTN","SCMCCV6",89,0)
 ; output
"RTN","SCMCCV6",90,0)
 ;  1 = success
"RTN","SCMCCV6",91,0)
 ;  0 = failure
"RTN","SCMCCV6",92,0)
 ;
"RTN","SCMCCV6",93,0)
 N SCFLAG,SC1,SC2
"RTN","SCMCCV6",94,0)
 S SC1="PCMM PC Baseline Process Failure:"
"RTN","SCMCCV6",95,0)
 S SC177=$G(SCP177,"")
"RTN","SCMCCV6",96,0)
 I SC177="" D  Q 0
"RTN","SCMCCV6",97,0)
 . S SC2="  Invalid SD*5.3*177 Date Parameter"
"RTN","SCMCCV6",98,0)
 . D MSG(SC1,SC2)
"RTN","SCMCCV6",99,0)
 . Q
"RTN","SCMCCV6",100,0)
 S SC212=$G(SCP212,DT)
"RTN","SCMCCV6",101,0)
 I SC212="" D  Q 0
"RTN","SCMCCV6",102,0)
 . S SC2="  Invalid SD*5.3*212 Date (DT) Parameter"
"RTN","SCMCCV6",103,0)
 . D MSG(SC1,SC2)
"RTN","SCMCCV6",104,0)
 . Q
"RTN","SCMCCV6",105,0)
 S SCDFN=$G(SCPDFN,0)
"RTN","SCMCCV6",106,0)
 I SCDFN="" D  Q 0
"RTN","SCMCCV6",107,0)
 . S SC2="  Invalid DFN Parameter"
"RTN","SCMCCV6",108,0)
 . D MSG(SC1,SC2)
"RTN","SCMCCV6",109,0)
 . Q
"RTN","SCMCCV6",110,0)
 I '$D(^SCPT(404.43,"APCPOS")) D  Q 0
"RTN","SCMCCV6",111,0)
 . S SC2="  Missing ""APCPOS"" x-ref in file 404.43!"
"RTN","SCMCCV6",112,0)
 . D MSG(SC1,SC2)
"RTN","SCMCCV6",113,0)
 . Q
"RTN","SCMCCV6",114,0)
 ;
"RTN","SCMCCV6",115,0)
 S SCTST=+$G(SCPTST,0)
"RTN","SCMCCV6",116,0)
 S SCFLAG=$$EVENT(SC177,SC212,SCDFN,SCTST)
"RTN","SCMCCV6",117,0)
 ;
"RTN","SCMCCV6",118,0)
 I SCTST=1 D MSG("","",+SCFLAG) Q 1
"RTN","SCMCCV6",119,0)
 N SCFDA,SCERR,SC1,SC2
"RTN","SCMCCV6",120,0)
 S SC1="PCMM PC Baseline Seeding"
"RTN","SCMCCV6",121,0)
 S SC2=+$P(SCFLAG,U,2)
"RTN","SCMCCV6",122,0)
 S SCFLAG=+$P(SCFLAG,U)
"RTN","SCMCCV6",123,0)
 S SC1=SC1_$S(+SC2:" stopped by TM stop request:",1:" completed:")
"RTN","SCMCCV6",124,0)
 S SCFDA(1,404.44,"1,",17)=SC212
"RTN","SCMCCV6",125,0)
 D FILE^DIE("","SCFDA(1)","SCERR")
"RTN","SCMCCV6",126,0)
 I $D(SCERR) D 
"RTN","SCMCCV6",127,0)
 . S SC2="  Caution: Baseline Date NOT updated in PCMM Parameter file"
"RTN","SCMCCV6",128,0)
 . D MSG(SC1,SC2)
"RTN","SCMCCV6",129,0)
 . Q
"RTN","SCMCCV6",130,0)
 S SC2="  "_SCFLAG_" assignments placed in HL7 transmission queue."
"RTN","SCMCCV6",131,0)
 D MSG(SC1,SC2)
"RTN","SCMCCV6",132,0)
 Q 1
"RTN","SCMCCV6",133,0)
 ;
"RTN","SCMCCV6",134,0)
CHECK() ;
"RTN","SCMCCV6",135,0)
 ; Description:  Determine whether or not the Baseline has run.
"RTN","SCMCCV6",136,0)
 ;
"RTN","SCMCCV6",137,0)
 ; Input: None
"RTN","SCMCCV6",138,0)
 ;
"RTN","SCMCCV6",139,0)
 ; Output:
"RTN","SCMCCV6",140,0)
 ;   Function Value: Return date Baseline was run
"RTN","SCMCCV6",141,0)
 ;
"RTN","SCMCCV6",142,0)
 N SCX
"RTN","SCMCCV6",143,0)
 I '$D(^SCTM(404.44,1)) Q -1
"RTN","SCMCCV6",144,0)
 K ^TMP($J,"SCMCCV6")
"RTN","SCMCCV6",145,0)
 S SCX=$$GET1^DIQ(404.44,"1,",17,"I","","^TMP($J,""SCMCCV6"")")
"RTN","SCMCCV6",146,0)
 I $D(^TMP($J,"SCMCCV6")) S SCX=-2
"RTN","SCMCCV6",147,0)
 K ^TMP($J,"SCMCCV6")
"RTN","SCMCCV6",148,0)
 Q SCX
"RTN","SCMCCV6",149,0)
 ;
"RTN","SCMCCV6",150,0)
 ;
"RTN","SCMCCV6",151,0)
EVENT(SC177,SC212,SCDFN,SCTST) ;
"RTN","SCMCCV6",152,0)
 ; Description: Create an Event in file (#404.48)
"RTN","SCMCCV6",153,0)
 ;
"RTN","SCMCCV6",154,0)
 ; Input:
"RTN","SCMCCV6",155,0)
 ;   SC177 - date patch SD*5.3*177 was installed. [required]
"RTN","SCMCCV6",156,0)
 ;   SC212 - date process runs [default = DT]
"RTN","SCMCCV6",157,0)
 ;   SCDFN - patient ien (ptr file 2) [default = 0]
"RTN","SCMCCV6",158,0)
 ;   SCTST - 1 = test [default = 0]
"RTN","SCMCCV6",159,0)
 ;
"RTN","SCMCCV6",160,0)
 ; Output: 
"RTN","SCMCCV6",161,0)
 ;   p1 = number of entries created
"RTN","SCMCCV6",162,0)
 ;   p2 = stopped by Taskman
"RTN","SCMCCV6",163,0)
 ;
"RTN","SCMCCV6",164,0)
 N SCCNT   ; counter
"RTN","SCMCCV6",165,0)
 N SCPAI   ; position assignment IEN (ptr file 404.43)
"RTN","SCMCCV6",166,0)
 N SCTP    ; team position IEN (ptr file 404.57)
"RTN","SCMCCV6",167,0)
 N SCADT   ; position assignment start date
"RTN","SCMCCV6",168,0)
 N SCDDT   ; position assignment end date
"RTN","SCMCCV6",169,0)
 N SCNOW   ; time process starts
"RTN","SCMCCV6",170,0)
 N SCVAR   ; variable pointer string for HL7
"RTN","SCMCCV6",171,0)
 N SC1     ; shorthand for ' "APCPOS",SCDFN,1 ' node
"RTN","SCMCCV6",172,0)
 N SCZ     ; Taskman flag to stop process
"RTN","SCMCCV6",173,0)
 ;
"RTN","SCMCCV6",174,0)
 ; check for ZSTOP
"RTN","SCMCCV6",175,0)
 S SCZ=$$S^%ZTLOAD
"RTN","SCMCCV6",176,0)
 I +SCZ Q 0_U_1
"RTN","SCMCCV6",177,0)
 S SCTST=+$G(SCTST,0)
"RTN","SCMCCV6",178,0)
 K ^XTMP("SCMCCV6")
"RTN","SCMCCV6",179,0)
 S ^XTMP("SCMCCV6",0)=DT_U_$$FMADD^XLFDT(""_DT_"",7)_U_"SCMC PCMM BASELINE SEEDING"
"RTN","SCMCCV6",180,0)
 S SCNOW=$$NOW^XLFDT
"RTN","SCMCCV6",181,0)
 S SCCNT=0
"RTN","SCMCCV6",182,0)
 S SCDFN=+SCDFN
"RTN","SCMCCV6",183,0)
 F  S SCDFN=$O(^SCPT(404.43,"APCPOS",SCDFN)) Q:(SCDFN="")!(SCZ)  D
"RTN","SCMCCV6",184,0)
 . S SCZ=$$S^%ZTLOAD
"RTN","SCMCCV6",185,0)
 . Q:+SCZ
"RTN","SCMCCV6",186,0)
 . ;
"RTN","SCMCCV6",187,0)
 . S ^XTMP("SCMCCV6","LASTDFN")=SCDFN
"RTN","SCMCCV6",188,0)
 . S SC1="^SCPT(404.43,""APCPOS"",SCDFN,1)"
"RTN","SCMCCV6",189,0)
 . ;
"RTN","SCMCCV6",190,0)
 . ; quit if no PC assignments
"RTN","SCMCCV6",191,0)
 . Q:'$D(@SC1)
"RTN","SCMCCV6",192,0)
 . S SCADT=0
"RTN","SCMCCV6",193,0)
 . F  S SCADT=$O(@SC1@(SCADT)) Q:SCADT=""  D
"RTN","SCMCCV6",194,0)
 . . S SCTP=0
"RTN","SCMCCV6",195,0)
 . . F  S SCTP=$O(@SC1@(SCADT,SCTP)) Q:'SCTP  D
"RTN","SCMCCV6",196,0)
 . . . ;
"RTN","SCMCCV6",197,0)
 . . . ; quit if team position does not exist
"RTN","SCMCCV6",198,0)
 . . . Q:'$D(^SCTM(404.57,SCTP,0))
"RTN","SCMCCV6",199,0)
 . . . S SCPAI=0
"RTN","SCMCCV6",200,0)
 . . . F  S SCPAI=$O(@SC1@(SCADT,SCTP,SCPAI)) Q:'SCPAI  D
"RTN","SCMCCV6",201,0)
 . . . . S SCDDT=$P($G(^SCPT(404.43,SCPAI,0)),U,4)
"RTN","SCMCCV6",202,0)
 . . . . ;
"RTN","SCMCCV6",203,0)
 . . . . ; quit if not active within date range
"RTN","SCMCCV6",204,0)
 . . . . Q:$$DTCHK^SCAPU1(SC177,SC212,0,SCADT,SCDDT)<1
"RTN","SCMCCV6",205,0)
 . . . . S SCVAR=SCPAI_";SCPT(404.43,"
"RTN","SCMCCV6",206,0)
 . . . . ;
"RTN","SCMCCV6",207,0)
 . . . . ; add to HL7 event file
"RTN","SCMCCV6",208,0)
 . . . . Q:$$CHECK^SCMCHLB1(SCVAR)'=1
"RTN","SCMCCV6",209,0)
 . . . . ;
"RTN","SCMCCV6",210,0)
 . . . . ; queue for transmit or report
"RTN","SCMCCV6",211,0)
 . . . . I SCTST=0 D ADD^SCMCHLE("NOW",SCVAR,SCDFN,SCTP)
"RTN","SCMCCV6",212,0)
 . . . . I SCTST=1 S SCARRAY(SCCNT+3)=SCVAR_" ^ "_$$GET1^DIQ(2,SCDFN_",",.01)_" ^ "_$$GET1^DIQ(404.57,SCTP_",",.01)_" ^ "_$$FMTE^XLFDT(SCADT)_" ^ "_$$FMTE^XLFDT(SCDDT)
"RTN","SCMCCV6",213,0)
 . . . . ;
"RTN","SCMCCV6",214,0)
 . . . . ; increment counter
"RTN","SCMCCV6",215,0)
 . . . . S SCCNT=SCCNT+1
"RTN","SCMCCV6",216,0)
 . . . . Q
"RTN","SCMCCV6",217,0)
 . . . Q
"RTN","SCMCCV6",218,0)
 . . Q
"RTN","SCMCCV6",219,0)
 . Q
"RTN","SCMCCV6",220,0)
 ;
"RTN","SCMCCV6",221,0)
 Q SCCNT_U_SCZ
"RTN","SCMCCV6",222,0)
 ;
"RTN","SCMCCV6",223,0)
MSG(SC1,SC2,SCTST) ;
"RTN","SCMCCV6",224,0)
 N XMY,XMDUZ,XMSUB,XMTEXT
"RTN","SCMCCV6",225,0)
 S SCTST=+$G(SCTST,0)
"RTN","SCMCCV6",226,0)
 S XMDUZ="PCMM Module"
"RTN","SCMCCV6",227,0)
 S (XMY(DUZ),XMY(XMDUZ))=""
"RTN","SCMCCV6",228,0)
 I SCTST=0 D
"RTN","SCMCCV6",229,0)
 . S XMSUB="PCMM PC Baseline Seeding Job"
"RTN","SCMCCV6",230,0)
 . K SCARRAY
"RTN","SCMCCV6",231,0)
 . S SCARRAY(1)=""
"RTN","SCMCCV6",232,0)
 . S SCARRAY(2)=SC1
"RTN","SCMCCV6",233,0)
 . S SCARRAY(3)=SC2
"RTN","SCMCCV6",234,0)
 . S SCARRAY(4)=""
"RTN","SCMCCV6",235,0)
 . S SCARRAY(5)="TaskMan Job Number:       "_$G(ZTSK)
"RTN","SCMCCV6",236,0)
 . S SCARRAY(6)="Baseline Start Date/Time: "_$G(SCSTIM)
"RTN","SCMCCV6",237,0)
 . S SCARRAY(7)="Baseline End Date/Time:   "_$$HTE^XLFDT($H)
"RTN","SCMCCV6",238,0)
 . S SCARRAY(8)="HL7 Transmit Limit:       "_$$GET1^DIQ(404.44,"1,",15)
"RTN","SCMCCV6",239,0)
 . S SCARRAY(9)=""
"RTN","SCMCCV6",240,0)
 . Q
"RTN","SCMCCV6",241,0)
 E  D
"RTN","SCMCCV6",242,0)
 . S XMSUB="PCMM PC Baseline Trial Entries ("_$G(ZTSK)_")"
"RTN","SCMCCV6",243,0)
 . S SCARRAY(1)=""
"RTN","SCMCCV6",244,0)
 . S SCARRAY(2)=SCTST_" entries would have been placed in HL7 queue:"
"RTN","SCMCCV6",245,0)
 . S SCARRAY(3)="==================================================="
"RTN","SCMCCV6",246,0)
 S XMTEXT="SCARRAY("
"RTN","SCMCCV6",247,0)
 D ^XMD
"RTN","SCMCCV6",248,0)
 Q
"RTN","SCMCCV6",249,0)
 ;
"RTN","SCMCCV6",250,0)
RESTART(SCTST) ; alb/rpm
"RTN","SCMCCV6",251,0)
 ; This undocumented entry point allows a user to clear the Baseline
"RTN","SCMCCV6",252,0)
 ; date stored in file #404.44 field #17.  Then the last patient IEN
"RTN","SCMCCV6",253,0)
 ; that was processed from the last run is retrieved from ^XTMP("SCMCCV6"
"RTN","SCMCCV6",254,0)
 ; and decremented to seed the restart point.  If ^XTMP does not exist
"RTN","SCMCCV6",255,0)
 ; the IEN is set to 0.
"RTN","SCMCCV6",256,0)
 ;
"RTN","SCMCCV6",257,0)
 ; Input:
"RTN","SCMCCV6",258,0)
 ;       SCTST - 1 = test [default = 0]
"RTN","SCMCCV6",259,0)
 ;
"RTN","SCMCCV6",260,0)
 S SCTST=+$G(SCTST,0)
"RTN","SCMCCV6",261,0)
 ;
"RTN","SCMCCV6",262,0)
 NEW SC1,SC2,SCDFA,SCDFN,SCERR
"RTN","SCMCCV6",263,0)
 S SC1="PCMM PC Baseline Seeding"
"RTN","SCMCCV6",264,0)
 S SCDFN=0
"RTN","SCMCCV6",265,0)
 ; Retrieve the last IEN processed
"RTN","SCMCCV6",266,0)
 I +$G(^XTMP("SCMCCV6","LASTDFN"))>0 D
"RTN","SCMCCV6",267,0)
 . S SCDFN=+$G(^XTMP("SCMCCV6","LASTDFN"))-1
"RTN","SCMCCV6",268,0)
 ; Delete the Baseline date from last run
"RTN","SCMCCV6",269,0)
 S SCFDA(1,404.44,"1,",17)="@"
"RTN","SCMCCV6",270,0)
 D FILE^DIE("","SCFDA(1)","SCERR")
"RTN","SCMCCV6",271,0)
 I $D(SCERR) D  Q
"RTN","SCMCCV6",272,0)
 . S SC2="  Warning: Baseline Date NOT cleared in PCMM Parameter file"
"RTN","SCMCCV6",273,0)
 . D MSG(SC1,SC2)
"RTN","SCMCCV6",274,0)
 . Q
"RTN","SCMCCV6",275,0)
 ; Call interactive entry point
"RTN","SCMCCV6",276,0)
 D EN(SCTST,SCDFN)
"RTN","SCMCCV6",277,0)
 Q
"RTN","SCMCGU")
0^1^B11215605
"RTN","SCMCGU",1,0)
SCMCGU ;ALB/JLU;General PCMM utilities;7/1/99 ; 3/29/00 12:34pm
"RTN","SCMCGU",2,0)
 ;;5.3;Scheduling;**195,177,212**;AUG 13, 1993
"RTN","SCMCGU",3,0)
 ;
"RTN","SCMCGU",4,0)
NEWPERSN(IEN,ARY) ;This function takes an internal value/DUZ of the
"RTN","SCMCGU",5,0)
 ;person you wish info on and performs a silent FM call to retrieve
"RTN","SCMCGU",6,0)
 ;the data.  DBIA #10060
"RTN","SCMCGU",7,0)
 ;
"RTN","SCMCGU",8,0)
 ;INPUTS
"RTN","SCMCGU",9,0)
 ;  IEN - the internal entry number of the user you want in 
"RTN","SCMCGU",10,0)
 ;        VA(200. (REQUIRED)
"RTN","SCMCGU",11,0)
 ;  ARY - the closed array reference the data is to be returned in.
"RTN","SCMCGU",12,0)
 ;        This must be a clean array.  This API will not issue any 
"RTN","SCMCGU",13,0)
 ;        kills with this structure.(OPTIONAL)  
"RTN","SCMCGU",14,0)
 ;        If no array is entered ^TMP("PCMM_PERSON",$J,IEN) will be used.
"RTN","SCMCGU",15,0)
 ;
"RTN","SCMCGU",16,0)
 ;OUTPUTS
"RTN","SCMCGU",17,0)
 ;   ARY(IEN)=Piece Structure below
"RTN","SCMCGU",18,0)
 ;   1 - User Name (EXTERNAL)
"RTN","SCMCGU",19,0)
 ;   2 - Office Phone number
"RTN","SCMCGU",20,0)
 ;   3 - Room
"RTN","SCMCGU",21,0)
 ;   4 - Service/Section (EXTERNAL)
"RTN","SCMCGU",22,0)
 ;   5 - Voice Pager number
"RTN","SCMCGU",23,0)
 ;   6 - Social Security number
"RTN","SCMCGU",24,0)
 ;
"RTN","SCMCGU",25,0)
 ;If successful 1 is return as the results of the function.
"RTN","SCMCGU",26,0)
 ;If not successfull 0^reason is returned.
"RTN","SCMCGU",27,0)
 ;
"RTN","SCMCGU",28,0)
 N STOP
"RTN","SCMCGU",29,0)
 S STOP=0
"RTN","SCMCGU",30,0)
 D PARCHK G:STOP MNQ
"RTN","SCMCGU",31,0)
 D GETDATA
"RTN","SCMCGU",32,0)
MNQ Q $S(STOP=0:1,1:0_U_$P(STOP,U,2))
"RTN","SCMCGU",33,0)
 ;
"RTN","SCMCGU",34,0)
PARCHK ;Checks the parameters that are passed in.
"RTN","SCMCGU",35,0)
 ;
"RTN","SCMCGU",36,0)
 I '+$G(IEN) S STOP="1^Bad pointer value to file 200"
"RTN","SCMCGU",37,0)
 I $G(ARY)']"" S ARY="^TMP(""PCMM_PERSON"",$J)"
"RTN","SCMCGU",38,0)
 Q
"RTN","SCMCGU",39,0)
 ;
"RTN","SCMCGU",40,0)
GETDATA ;Make the FM calls and formats the return array.
"RTN","SCMCGU",41,0)
 ;
"RTN","SCMCGU",42,0)
 N BLDERR
"RTN","SCMCGU",43,0)
 K ^TMP("SCMC_BLD_PERSON",$J)
"RTN","SCMCGU",44,0)
 D GETS^DIQ(200,IEN,".01;.132;.137;.141;29;9","EI","^TMP(""SCMC_BLD_PERSON"","_$J_")","BLDERR")
"RTN","SCMCGU",45,0)
 ;only reporting the first one
"RTN","SCMCGU",46,0)
 I $D(BLDERR) S STOP=1_U_BLDERR("DIERR",1,"TEXT",1) Q
"RTN","SCMCGU",47,0)
 S $P(@ARY@(IEN),U,1)=^TMP("SCMC_BLD_PERSON",$J,200,IEN_",",.01,"E")
"RTN","SCMCGU",48,0)
 S $P(@ARY@(IEN),U,2)=^TMP("SCMC_BLD_PERSON",$J,200,IEN_",",.132,"E")
"RTN","SCMCGU",49,0)
 S $P(@ARY@(IEN),U,3)=^TMP("SCMC_BLD_PERSON",$J,200,IEN_",",.141,"E")
"RTN","SCMCGU",50,0)
 S $P(@ARY@(IEN),U,4)=^TMP("SCMC_BLD_PERSON",$J,200,IEN_",",29,"E")
"RTN","SCMCGU",51,0)
 S $P(@ARY@(IEN),U,5)=^TMP("SCMC_BLD_PERSON",$J,200,IEN_",",.137,"E")
"RTN","SCMCGU",52,0)
 S $P(@ARY@(IEN),U,6)=^TMP("SCMC_BLD_PERSON",$J,200,IEN_",",9,"E")
"RTN","SCMCGU",53,0)
 K ^TMP("SCMC_BLD_PERSON",$J)
"RTN","SCMCGU",54,0)
 Q
"RTN","SCMCGU",55,0)
 ;
"RTN","SCMCGU",56,0)
PDAT(SCPATCH,SCERROR) ;
"RTN","SCMCGU",57,0)
 ; alb/rpm Patch 212
"RTN","SCMCGU",58,0)
 ; This function is used to retrieve the PATCH install date when
"RTN","SCMCGU",59,0)
 ; passed the PATCH name.  The PATCH install date is found in the
"RTN","SCMCGU",60,0)
 ; subfile #9.4901 field #.02.
"RTN","SCMCGU",61,0)
 ;
"RTN","SCMCGU",62,0)
 ; DBIA:#10048 indicates that Package(#9.4) file is open for read
"RTN","SCMCGU",63,0)
 ; only with FM.
"RTN","SCMCGU",64,0)
 ;
"RTN","SCMCGU",65,0)
 ;   Input:
"RTN","SCMCGU",66,0)
 ;        SCPATCH - Patch designation (i.e. SD*5.3*177)
"RTN","SCMCGU",67,0)
 ;        SCERROR (optional) - Variable stores user named variable
"RTN","SCMCGU",68,0)
 ;                             to return error text.  Passing ""
"RTN","SCMCGU",69,0)
 ;                             is treated the same as no parameter.
"RTN","SCMCGU",70,0)
 ;
"RTN","SCMCGU",71,0)
 ;   Output:
"RTN","SCMCGU",72,0)
 ;        Function value - Date patch installed on success, otherwise 0 
"RTN","SCMCGU",73,0)
 ;                         on failure.
"RTN","SCMCGU",74,0)
 ;        SCERROR - Variable stores error text explaining function
"RTN","SCMCGU",75,0)
 ;                  failure.  Only output if user passes second
"RTN","SCMCGU",76,0)
 ;                  parameter to function and an error occurs.
"RTN","SCMCGU",77,0)
 ;
"RTN","SCMCGU",78,0)
 ; Validate input
"RTN","SCMCGU",79,0)
 I $L(SCPATCH,"*")'=3 D  Q 0
"RTN","SCMCGU",80,0)
 . S:$G(SCERROR)]"" @SCERROR="Invalid input parameter"
"RTN","SCMCGU",81,0)
 ; Verify patch is loaded
"RTN","SCMCGU",82,0)
 I '$$PATCH^XPDUTL(SCPATCH) D  Q 0
"RTN","SCMCGU",83,0)
 . S:$G(SCERROR)]"" @SCERROR="Patch "_SCPATCH_" not loaded"
"RTN","SCMCGU",84,0)
 ; Initialize locals
"RTN","SCMCGU",85,0)
 NEW SCDATE,SCFILE,SCI,SCERR,SCIEN,SCPAT
"RTN","SCMCGU",86,0)
 ; Search for Patch designation in #9.4 and subfiles (#9.49, #9.4901)
"RTN","SCMCGU",87,0)
 S SCIEN=""
"RTN","SCMCGU",88,0)
 F SCI=1:1:3 D  Q:$D(SCERR)!'SCIEN(SCI)
"RTN","SCMCGU",89,0)
 . S SCFILE=$S(SCI=1:9.4,SCI=2:9.49,1:9.4901)
"RTN","SCMCGU",90,0)
 . S SCPAT=$P(SCPATCH,"*",SCI)
"RTN","SCMCGU",91,0)
 . S SCIEN(SCI)=$$FIND1^DIC(SCFILE,SCIEN,"MX",SCPAT,"","","SCERR")
"RTN","SCMCGU",92,0)
 . ; Check for alternate form of patch name (i.e. "176 SEQ #158") 
"RTN","SCMCGU",93,0)
 . I SCI=3,'SCIEN(SCI) S SCPAT=SCPAT_" SEQ" D
"RTN","SCMCGU",94,0)
 . . S SCIEN(SCI)=$$FIND1^DIC(SCFILE,SCIEN,"M",SCPAT,"","","SCERR")
"RTN","SCMCGU",95,0)
 . Q:$D(SCERR)!'SCIEN(SCI)
"RTN","SCMCGU",96,0)
 . S SCIEN=$S(SCI<3:",",1:"")_SCIEN(SCI)_$S(SCI=1:",",1:"")_SCIEN
"RTN","SCMCGU",97,0)
 ; Check for search errors
"RTN","SCMCGU",98,0)
 I 'SCIEN(SCI) S:$G(SCERROR)]"" @SCERROR="Search failed" Q 0
"RTN","SCMCGU",99,0)
 I $D(SCERR) S:$G(SCERROR)]"" @SCERROR=$G(SCERR("DIERR",1,"TEXT",1)) Q 0
"RTN","SCMCGU",100,0)
 ;
"RTN","SCMCGU",101,0)
 ; Retrieve date
"RTN","SCMCGU",102,0)
 S SCDATE=$$GET1^DIQ(SCFILE,SCIEN,.02,"I","","SCERR")
"RTN","SCMCGU",103,0)
 I $D(SCERR) S:$G(SCERROR)]"" @SCERROR=$G(SCERR("DIERR",1,"TEXT",1)) Q 0
"RTN","SCMCGU",104,0)
 ;
"RTN","SCMCGU",105,0)
 D CLEAN^DILF
"RTN","SCMCGU",106,0)
 Q SCDATE
"RTN","SCMCHLS")
0^3^B5643204
"RTN","SCMCHLS",1,0)
SCMCHLS ;BP/DJB - PCMM HL7 Segment Utils ; 12/13/99 12:40pm
"RTN","SCMCHLS",2,0)
 ;;5.3;Scheduling;**177,210,212**;AUG 13, 1993
"RTN","SCMCHLS",3,0)
 ;
"RTN","SCMCHLS",4,0)
 ;Ref rtn: SCDXMSG1
"RTN","SCMCHLS",5,0)
 ;
"RTN","SCMCHLS",6,0)
 ;--> Build HL7 segments
"RTN","SCMCHLS",7,0)
BLDEVN ;Build EVN segment
"RTN","SCMCHLS",8,0)
 S VAFEVN=$$EN^VAFHLEVN(EVNTHL7,EVNTDATE,VAFSTR,HL("Q"),HL("FS"))
"RTN","SCMCHLS",9,0)
 Q
"RTN","SCMCHLS",10,0)
BLDPID ;Build PID segment
"RTN","SCMCHLS",11,0)
 ;S VAFPID=$$EN^VAFHLPID(DFN,VAFSTR)
"RTN","SCMCHLS",12,0)
 S VAFPID=$$EN^VAFCPID(DFN,VAFSTR) ;Use CIRN version
"RTN","SCMCHLS",13,0)
 D SETMAR^SCMSVUT0("VAFPID","VAFPID",HL("Q"),HL("FS"))
"RTN","SCMCHLS",14,0)
 Q
"RTN","SCMCHLS",15,0)
BLDZPC ;Build ZPC segment
"RTN","SCMCHLS",16,0)
 ;djb/bp Patch 210. Sequentially number multiple ZPC segments.
"RTN","SCMCHLS",17,0)
 ;new code begin
"RTN","SCMCHLS",18,0)
 S SCSEQ=$G(SCSEQ)+1 ;Increment ZPC sequence number.
"RTN","SCMCHLS",19,0)
 S VAFZPC=$$ZPC^SCMCHLZ("",ID,DATA,SCSEQ)
"RTN","SCMCHLS",20,0)
 ;new code end
"RTN","SCMCHLS",21,0)
 ;old code begin
"RTN","SCMCHLS",22,0)
 ;S VAFZPC=$$ZPC^SCMCHLZ("",ID,DATA)
"RTN","SCMCHLS",23,0)
 ;old code end
"RTN","SCMCHLS",24,0)
 Q
"RTN","SCMCHLS",25,0)
 ;
"RTN","SCMCHLS",26,0)
 ;--> Copy HL7 segments into HL7 message
"RTN","SCMCHLS",27,0)
CPYEVN ;Copy EVN segment
"RTN","SCMCHLS",28,0)
 ;Add 1 as 3rd subscript so number of subscripts matches ZPC segment
"RTN","SCMCHLS",29,0)
 M @XMITARRY@(SUB,SEGNAME,1)=VAFEVN
"RTN","SCMCHLS",30,0)
 Q
"RTN","SCMCHLS",31,0)
CPYPID ;Copy PID segment
"RTN","SCMCHLS",32,0)
 ;Add 1 as 3rd subscript so number of subscripts matches ZPC segment
"RTN","SCMCHLS",33,0)
 M @XMITARRY@(SUB,SEGNAME,1)=VAFPID
"RTN","SCMCHLS",34,0)
 Q
"RTN","SCMCHLS",35,0)
CPYZPC ;Copy ZPC segment
"RTN","SCMCHLS",36,0)
 M @XMITARRY@($P(ID,"-",1),"ZPC",ID)=VAFZPC
"RTN","SCMCHLS",37,0)
 Q
"RTN","SCMCHLS",38,0)
 ;
"RTN","SCMCHLS",39,0)
 ;--> Delete HL7 segment variables
"RTN","SCMCHLS",40,0)
DELEVN ;Delete EVN variable
"RTN","SCMCHLS",41,0)
 KILL VAFEVN
"RTN","SCMCHLS",42,0)
 Q
"RTN","SCMCHLS",43,0)
DELPID ;Delete PID variable
"RTN","SCMCHLS",44,0)
 KILL VAFPID
"RTN","SCMCHLS",45,0)
 Q
"RTN","SCMCHLS",46,0)
DELZPC ;Delete ZPC variable
"RTN","SCMCHLS",47,0)
 KILL VAFZPC
"RTN","SCMCHLS",48,0)
 Q
"RTN","SCMCHLS",49,0)
 ;
"RTN","SCMCHLS",50,0)
SEGMENTS(EVNTTYPE,SEGARRY) ;Build list of HL7 segments for a given event type
"RTN","SCMCHLS",51,0)
 ;
"RTN","SCMCHLS",52,0)
 ; Input: EVNTTYPE - Event type to build list for A08 & A23 are the
"RTN","SCMCHLS",53,0)
 ;                   only types currently supported.
"RTN","SCMCHLS",54,0)
 ;                   Default=A08
"RTN","SCMCHLS",55,0)
 ;         SEGARRY - Array to place output in (full global reference)
"RTN","SCMCHLS",56,0)
 ;                   Defaul=^TMP("SCMC SEGMENTS",$J)
"RTN","SCMCHLS",57,0)
 ;Output: SEGARRY(Seq,Name)=Fields
"RTN","SCMCHLS",58,0)
 ;             Seq - Sequence number to order segments as they should
"RTN","SCMCHLS",59,0)
 ;                   be placed in the HL7 message.
"RTN","SCMCHLS",60,0)
 ;            Name - Name of HL7 segment.
"RTN","SCMCHLS",61,0)
 ;          Fields - List of fields used by PCMM. VAFSTR would be set
"RTN","SCMCHLS",62,0)
 ;                   to this value.
"RTN","SCMCHLS",63,0)
 ;  Note: MSH segment is not included
"RTN","SCMCHLS",64,0)
 ;
"RTN","SCMCHLS",65,0)
 ;Check input
"RTN","SCMCHLS",66,0)
 S EVNTTYPE=$G(EVNTTYPE)
"RTN","SCMCHLS",67,0)
 S:(EVNTTYPE'="A23") EVNTTYPE="A08"
"RTN","SCMCHLS",68,0)
 S SEGARRY=$G(SEGARRY)
"RTN","SCMCHLS",69,0)
 S:(SEGARRY="") SEGARRY="^TMP(""SCMC SEGMENTS"","_$J_")"
"RTN","SCMCHLS",70,0)
 ;
"RTN","SCMCHLS",71,0)
 ;Segments used by A08
"RTN","SCMCHLS",72,0)
 S @SEGARRY@(1,"EVN")="1,2"
"RTN","SCMCHLS",73,0)
 S @SEGARRY@(2,"PID")="1,2,3,4,5,6,7,8,10,11,12,13,14,16,17,19"
"RTN","SCMCHLS",74,0)
 S @SEGARRY@(3,"ZPC")="1,2,3,4,5,6,8" ;bp/ar and alb/rpm Patch 212
"RTN","SCMCHLS",75,0)
 Q
"RTN","SCMCHLS",76,0)
 ;
"RTN","SCMCHLS",77,0)
UNWIND(XMITARRY,INSRTPNT) ;Remove all data that was put into transmit array.
"RTN","SCMCHLS",78,0)
 ;
"RTN","SCMCHLS",79,0)
 ; Input: XMITARRY - Array containing HL7 message (full global ref).
"RTN","SCMCHLS",80,0)
 ;                   Default=^TMP("HLS",$J).
"RTN","SCMCHLS",81,0)
 ;        INSRTPNT - Where to begin deletion from.
"RTN","SCMCHLS",82,0)
 ;                   Default=1
"RTN","SCMCHLS",83,0)
 ;Output: None
"RTN","SCMCHLS",84,0)
 ;
"RTN","SCMCHLS",85,0)
 ;Check input
"RTN","SCMCHLS",86,0)
 S:$G(XMITARRY)="" XMITARRY="^TMP(""HLS"","_$J_")"
"RTN","SCMCHLS",87,0)
 S:$G(INSRTPNT)="" INSRTPNT=1
"RTN","SCMCHLS",88,0)
 ;
"RTN","SCMCHLS",89,0)
 ;Remove insertion point from array
"RTN","SCMCHLS",90,0)
 KILL @XMITARRY@(INSRTPNT)
"RTN","SCMCHLS",91,0)
 ;Remove everything from insertion point to end of array
"RTN","SCMCHLS",92,0)
 F  S INSRTPNT=$O(@XMITARRY@(INSRTPNT)) Q:INSRTPNT=""  KILL @XMITARRY@(INSRTPNT)
"RTN","SCMCHLS",93,0)
 ;Done
"RTN","SCMCHLS",94,0)
 Q
"RTN","SCMCHLS",95,0)
COUNT(VALER) ;counts the number of errored encounters found.
"RTN","SCMCHLS",96,0)
 ;
"RTN","SCMCHLS",97,0)
 ; Input: VALER - Array containing error messages.
"RTN","SCMCHLS",98,0)
 ;Output: Number of errors
"RTN","SCMCHLS",99,0)
 ;
"RTN","SCMCHLS",100,0)
 NEW VAR,CNT
"RTN","SCMCHLS",101,0)
 S CNT=0
"RTN","SCMCHLS",102,0)
 S VAR=""
"RTN","SCMCHLS",103,0)
 F  S VAR=$O(@VALER@(VAR)) Q:VAR']""  S CNT=CNT+1
"RTN","SCMCHLS",104,0)
 Q CNT
"RTN","SCMCHLZ")
0^4^B17070070
"RTN","SCMCHLZ",1,0)
SCMCHLZ ;BP/DJB - PCMM HL7 Bld ZPC Segment ; 3/7/00 1:08pm
"RTN","SCMCHLZ",2,0)
 ;;5.3;Scheduling;**177,210,212**;AUG 13, 1993
"RTN","SCMCHLZ",3,0)
 ;
"RTN","SCMCHLZ",4,0)
ZPC(SCSTR,SCID,SCDATA,SCSEQ) ;Main entry point for building ZPC segment
"RTN","SCMCHLZ",5,0)
 ;
"RTN","SCMCHLZ",6,0)
 ;Input:
"RTN","SCMCHLZ",7,0)
 ;   SCSTR...: String of fields requested separated by commas
"RTN","SCMCHLZ",8,0)
 ;   SCID....: Provider Assignment ID. Unique ID string that
"RTN","SCMCHLZ",9,0)
 ;             Austin uses for the key field.
"RTN","SCMCHLZ",10,0)
 ;   SCDATA..: "^" Delimited string that contains all data needed
"RTN","SCMCHLZ",11,0)
 ;             to build a ZPC segment. If all pieces are "", Austin
"RTN","SCMCHLZ",12,0)
 ;             does a deletion.
"RTN","SCMCHLZ",13,0)
 ;               Format:
"RTN","SCMCHLZ",14,0)
 ;                 ProviderIEN^DateAssign^DateUnassign^Type
"RTN","SCMCHLZ",15,0)
 ;               Examples:
"RTN","SCMCHLZ",16,0)
 ;                 3^2980605^2990203^PCP
"RTN","SCMCHLZ",17,0)
 ;                 6^2980605^2990203^AP
"RTN","SCMCHLZ",18,0)
 ;                 ""^""^""^"" (deletion)
"RTN","SCMCHLZ",19,0)
 ;   SCSEQ...: Sequentially number multiple ZPC segments.
"RTN","SCMCHLZ",20,0)
 ;             djb/bp Patch 210.
"RTN","SCMCHLZ",21,0)
 ;Output:
"RTN","SCMCHLZ",22,0)
 ;   ZPC segment string.
"RTN","SCMCHLZ",23,0)
 ;
"RTN","SCMCHLZ",24,0)
 NEW CS,FS,QT,SCZPC,SS
"RTN","SCMCHLZ",25,0)
 ;
"RTN","SCMCHLZ",26,0)
 ;Initialize variables
"RTN","SCMCHLZ",27,0)
 D INIT
"RTN","SCMCHLZ",28,0)
 I $G(SCID)="" Q SCZPC
"RTN","SCMCHLZ",29,0)
 ;
"RTN","SCMCHLZ",30,0)
 I SCSTR[",1," D ID ;........Provider Assignment ID
"RTN","SCMCHLZ",31,0)
 I SCSTR[",2," D PROV ;......Provider
"RTN","SCMCHLZ",32,0)
 I SCSTR[",3," D PROVDA ;....Date provider assigned
"RTN","SCMCHLZ",33,0)
 I SCSTR[",4," D PROVDU ;....Date provider unassigned
"RTN","SCMCHLZ",34,0)
 I SCSTR[",5," D PROVT ;.....Provider Type code
"RTN","SCMCHLZ",35,0)
 I SCSTR[",6," D PROVPC ;....Provider Person Class
"RTN","SCMCHLZ",36,0)
 I SCSTR[",8," D PROVSSN ;...Provider SSN;bp/ar and alb/rpm Patch 212
"RTN","SCMCHLZ",37,0)
 I $L(SCZPC)>245 D ADJUST ;..If length>245 add continuation node
"RTN","SCMCHLZ",38,0)
 Q SCZPC
"RTN","SCMCHLZ",39,0)
 ;
"RTN","SCMCHLZ",40,0)
ID ;Provider Assignment ID
"RTN","SCMCHLZ",41,0)
 ;Convert ID to IEN of file 404.49 since it's alot shorter.
"RTN","SCMCHLZ",42,0)
 ;ID format:
"RTN","SCMCHLZ",43,0)
 ;  IEN404.43 - IEN404.52 - IEN404.53 - AP/PCP
"RTN","SCMCHLZ",44,0)
 ;  Examples: "2290-405-34-PCP"
"RTN","SCMCHLZ",45,0)
 ;            "2290-406-0-AP"
"RTN","SCMCHLZ",46,0)
 ;
"RTN","SCMCHLZ",47,0)
 NEW FAC,ID,OLDID,SCERR,SCFDA,SCIEN
"RTN","SCMCHLZ",48,0)
 ;
"RTN","SCMCHLZ",49,0)
 ;
"RTN","SCMCHLZ",50,0)
 ;Find ID in PCMM HL7 ID file (404.49), and use IEN.
"RTN","SCMCHLZ",51,0)
 S ID=$O(^SCPT(404.49,"B",SCID,""))
"RTN","SCMCHLZ",52,0)
 ;
"RTN","SCMCHLZ",53,0)
 ;If ID not found, add it to 404.49 now.
"RTN","SCMCHLZ",54,0)
 I 'ID D  ;
"RTN","SCMCHLZ",55,0)
 . S SCFDA(404.49,"+1,",.01)=SCID
"RTN","SCMCHLZ",56,0)
 . D UPDATE^DIE("E","SCFDA","SCIEN","SCERR")
"RTN","SCMCHLZ",57,0)
 . S ID=$G(SCIEN(1))
"RTN","SCMCHLZ",58,0)
 ;
"RTN","SCMCHLZ",59,0)
 ;bp/djb Patch 210
"RTN","SCMCHLZ",60,0)
 ;New code begins
"RTN","SCMCHLZ",61,0)
 ;If this is a site integration entry, use old ID.
"RTN","SCMCHLZ",62,0)
 S FAC=SCFAC ;..Facility
"RTN","SCMCHLZ",63,0)
 S OLDID=$P($G(^SCPT(404.49,ID,0)),U,2)
"RTN","SCMCHLZ",64,0)
 I OLDID]"" D  ;
"RTN","SCMCHLZ",65,0)
 . S FAC=$P(OLDID,"-",1)
"RTN","SCMCHLZ",66,0)
 . S ID=$P(OLDID,"-",2)
"RTN","SCMCHLZ",67,0)
 ;New code ends
"RTN","SCMCHLZ",68,0)
 ;
"RTN","SCMCHLZ",69,0)
 ;Add ID to ZPC segment
"RTN","SCMCHLZ",70,0)
 S $P(SCZPC,FS,2)=FAC_"-"_ID
"RTN","SCMCHLZ",71,0)
 Q
"RTN","SCMCHLZ",72,0)
 ;
"RTN","SCMCHLZ",73,0)
PROV ;Provider
"RTN","SCMCHLZ",74,0)
 NEW PROV,PTR200,SCNAM,SCNAME,SCTMP,X
"RTN","SCMCHLZ",75,0)
 ;
"RTN","SCMCHLZ",76,0)
 S $P(SCZPC,FS,3)=QT
"RTN","SCMCHLZ",77,0)
 S PTR200=+SCDATA
"RTN","SCMCHLZ",78,0)
 Q:'PTR200
"RTN","SCMCHLZ",79,0)
 ;
"RTN","SCMCHLZ",80,0)
 ;Get External Provider ID
"RTN","SCMCHLZ",81,0)
 D PERSON^VAFHLRO3(PTR200,"SCTMP",QT)
"RTN","SCMCHLZ",82,0)
 Q:'$D(SCTMP)
"RTN","SCMCHLZ",83,0)
 S PROV=SCTMP(1,1)_SS_SCTMP(1,2)
"RTN","SCMCHLZ",84,0)
 S $P(PROV,CS,8)=SCTMP(8)
"RTN","SCMCHLZ",85,0)
 ;rpm/alb patch 210-Stuff facility in Assigning Facility(component 14)
"RTN","SCMCHLZ",86,0)
 S $P(PROV,CS,14)=SCTMP(1,2)
"RTN","SCMCHLZ",87,0)
 ;rpm/alb patch 210
"RTN","SCMCHLZ",88,0)
 ;Get Standardized Name using Kernel API
"RTN","SCMCHLZ",89,0)
 ;Standardized Name retrieval allowed by IA #3065
"RTN","SCMCHLZ",90,0)
 S SCNAM("FILE")=200
"RTN","SCMCHLZ",91,0)
 S SCNAM("IENS")=PTR200_","
"RTN","SCMCHLZ",92,0)
 S SCNAM("FIELD")=.01
"RTN","SCMCHLZ",93,0)
 S SCNAME=$$HLNAME^XLFNAME(.SCNAM,"",FS)
"RTN","SCMCHLZ",94,0)
 F X=2:1:7 S $P(PROV,CS,X)=$P(SCNAME,FS,X-1)
"RTN","SCMCHLZ",95,0)
 F X=9:1:13 S $P(PROV,CS,X)=""
"RTN","SCMCHLZ",96,0)
 ;
"RTN","SCMCHLZ",97,0)
 ;Add provider to ZPC segment
"RTN","SCMCHLZ",98,0)
 S $P(SCZPC,FS,3)=PROV
"RTN","SCMCHLZ",99,0)
 Q
"RTN","SCMCHLZ",100,0)
 ;
"RTN","SCMCHLZ",101,0)
PROVDA ;Provider - Date Assigned
"RTN","SCMCHLZ",102,0)
 NEW DATE
"RTN","SCMCHLZ",103,0)
 S $P(SCZPC,FS,4)=QT
"RTN","SCMCHLZ",104,0)
 S DATE=$P(SCDATA,U,2)
"RTN","SCMCHLZ",105,0)
 Q:'DATE
"RTN","SCMCHLZ",106,0)
 S $P(SCZPC,FS,4)=$$HLDATE^HLFNC(DATE,"DT")
"RTN","SCMCHLZ",107,0)
 Q
"RTN","SCMCHLZ",108,0)
 ;
"RTN","SCMCHLZ",109,0)
PROVDU ;Provider - Date Unassigned
"RTN","SCMCHLZ",110,0)
 NEW DATE
"RTN","SCMCHLZ",111,0)
 S $P(SCZPC,FS,5)=QT
"RTN","SCMCHLZ",112,0)
 S DATE=$P(SCDATA,U,3)
"RTN","SCMCHLZ",113,0)
 Q:'DATE
"RTN","SCMCHLZ",114,0)
 S $P(SCZPC,FS,5)=$$HLDATE^HLFNC(DATE,"DT")
"RTN","SCMCHLZ",115,0)
 Q
"RTN","SCMCHLZ",116,0)
 ;
"RTN","SCMCHLZ",117,0)
PROVT ;Provider - Type code
"RTN","SCMCHLZ",118,0)
 NEW PT
"RTN","SCMCHLZ",119,0)
 S $P(SCZPC,FS,6)=QT
"RTN","SCMCHLZ",120,0)
 S PT=$P(SCDATA,U,4)
"RTN","SCMCHLZ",121,0)
 Q:PT']""
"RTN","SCMCHLZ",122,0)
 S $P(SCZPC,FS,6)=PT
"RTN","SCMCHLZ",123,0)
 Q
"RTN","SCMCHLZ",124,0)
 ;
"RTN","SCMCHLZ",125,0)
PROVPC ;Provider - Person Class
"RTN","SCMCHLZ",126,0)
 NEW CODE,PTR200
"RTN","SCMCHLZ",127,0)
 S $P(SCZPC,FS,7)=QT
"RTN","SCMCHLZ",128,0)
 S PTR200=+SCDATA
"RTN","SCMCHLZ",129,0)
 Q:'PTR200
"RTN","SCMCHLZ",130,0)
 S CODE=$$GET^XUA4A72(PTR200)
"RTN","SCMCHLZ",131,0)
 I CODE=-1!'CODE Q
"RTN","SCMCHLZ",132,0)
 S $P(SCZPC,FS,7)=$P(CODE,"^",7)_CS_CS_"VA8932.1"
"RTN","SCMCHLZ",133,0)
 Q
"RTN","SCMCHLZ",134,0)
 ;
"RTN","SCMCHLZ",135,0)
PROVSSN ;Provider - Social Security Number
"RTN","SCMCHLZ",136,0)
 ;bp/ar and alb/rpm Patch 212
"RTN","SCMCHLZ",137,0)
 NEW SCSNN,PTR200,SC200,SCARRY
"RTN","SCMCHLZ",138,0)
 S $P(SCZPC,FS,9)=QT
"RTN","SCMCHLZ",139,0)
 S PTR200=+SCDATA
"RTN","SCMCHLZ",140,0)
 Q:'PTR200
"RTN","SCMCHLZ",141,0)
 S SC200=$$NEWPERSN^SCMCGU(PTR200,"SCARRY")
"RTN","SCMCHLZ",142,0)
 I SC200'=1 Q
"RTN","SCMCHLZ",143,0)
 S SCSNN=$P($G(SCARRY(PTR200)),U,6)
"RTN","SCMCHLZ",144,0)
 Q:SCSNN'?9N
"RTN","SCMCHLZ",145,0)
 S $P(SCZPC,FS,9)=SCSNN
"RTN","SCMCHLZ",146,0)
 Q
"RTN","SCMCHLZ",147,0)
 ;
"RTN","SCMCHLZ",148,0)
INIT ;Initialize variables
"RTN","SCMCHLZ",149,0)
 ;
"RTN","SCMCHLZ",150,0)
 ;Set delimeter values
"RTN","SCMCHLZ",151,0)
 S FS=HL("FS") ;.........^
"RTN","SCMCHLZ",152,0)
 S CS=$E(HL("ECH"),1) ;..~
"RTN","SCMCHLZ",153,0)
 S SS=$E(HL("ECH"),4) ;..&
"RTN","SCMCHLZ",154,0)
 S QT=HL("Q") ;..........""
"RTN","SCMCHLZ",155,0)
 ;
"RTN","SCMCHLZ",156,0)
 ;Default SCSEQ to 1. djb/bp Patch 210
"RTN","SCMCHLZ",157,0)
 S:'$G(SCSEQ) SCSEQ=1
"RTN","SCMCHLZ",158,0)
 ;
"RTN","SCMCHLZ",159,0)
 ;Initialize ZPC segment to all nulls.
"RTN","SCMCHLZ",160,0)
 ;bp/ar and alb/rpm Patch 212
"RTN","SCMCHLZ",161,0)
 ;S $P(SCZPC,FS,5)="^" ;Initialize as empty; not null.
"RTN","SCMCHLZ",162,0)
 ;S SCZPC="ZPC"_FS_SCZPC_FS_SCSEQ ;djb/bp Patch 210
"RTN","SCMCHLZ",163,0)
 S $P(SCZPC,FS,9)=""
"RTN","SCMCHLZ",164,0)
 S $P(SCZPC,FS,1)="ZPC"
"RTN","SCMCHLZ",165,0)
 S $P(SCZPC,FS,8)=SCSEQ
"RTN","SCMCHLZ",166,0)
 ;
"RTN","SCMCHLZ",167,0)
 ;Initialize SCSTR to fields user requested.
"RTN","SCMCHLZ",168,0)
 S SCSTR=$G(SCSTR)
"RTN","SCMCHLZ",169,0)
 ;bp/ar and alb/rpm Added "8" to default fields Patch 212
"RTN","SCMCHLZ",170,0)
 I SCSTR']"" S SCSTR="1,2,3,4,5,6,8" ;Default fields
"RTN","SCMCHLZ",171,0)
 ;Add starting and ending comma.
"RTN","SCMCHLZ",172,0)
 I $E(SCSTR)'="," S SCSTR=","_SCSTR
"RTN","SCMCHLZ",173,0)
 I $E(SCSTR,$L(SCSTR))'="," S SCSTR=SCSTR_","
"RTN","SCMCHLZ",174,0)
 Q
"RTN","SCMCHLZ",175,0)
 ;
"RTN","SCMCHLZ",176,0)
ADJUST ;Add a continuation node if length is greater than 245.
"RTN","SCMCHLZ",177,0)
 Q:$L(SCZPC)'>245
"RTN","SCMCHLZ",178,0)
 S SCZPC(1)=$E(SCZPC,246,999) ;
"RTN","SCMCHLZ",179,0)
 S SCZPC=$E(SCZPC,1,245)
"RTN","SCMCHLZ",180,0)
 Q
"RTN","SD53P212")
0^5^B9693697
"RTN","SD53P212",1,0)
SD53P212 ;ALB/KCL - Patch SD*5.3*212 Install Utility Routine ; 04/1/2000
"RTN","SD53P212",2,0)
 ;;5.3;Scheduling;**212**;AUG 13, 1993
"RTN","SD53P212",3,0)
 ;
"RTN","SD53P212",4,0)
 ;
"RTN","SD53P212",5,0)
ENV ;Main entry point for Environment check point.
"RTN","SD53P212",6,0)
 ;
"RTN","SD53P212",7,0)
 S XPDABORT=""
"RTN","SD53P212",8,0)
 D PROGCHK(.XPDABORT) ;checks programmer variables
"RTN","SD53P212",9,0)
 D PARMCHK(.XPDABORT) ;checks param file ien exists
"RTN","SD53P212",10,0)
 I XPDABORT="" K XPDABORT
"RTN","SD53P212",11,0)
 ;
"RTN","SD53P212",12,0)
 Q
"RTN","SD53P212",13,0)
 ;
"RTN","SD53P212",14,0)
 ;
"RTN","SD53P212",15,0)
PRE ;Main entry point for Pre-init items.
"RTN","SD53P212",16,0)
 Q
"RTN","SD53P212",17,0)
 ;
"RTN","SD53P212",18,0)
 ;
"RTN","SD53P212",19,0)
POST ;Main entry point for Post-init items.
"RTN","SD53P212",20,0)
 ;
"RTN","SD53P212",21,0)
 D POST1 ;Update c/s files
"RTN","SD53P212",22,0)
 D POST2 ;Change HL7 Application Name
"RTN","SD53P212",23,0)
 D POST3 ;Set HL7 Transmit Limit
"RTN","SD53P212",24,0)
 ;
"RTN","SD53P212",25,0)
 Q
"RTN","SD53P212",26,0)
 ;
"RTN","SD53P212",27,0)
 ;
"RTN","SD53P212",28,0)
PROGCHK(XPDABORT) ;checks for necessary programmer variables
"RTN","SD53P212",29,0)
 ;
"RTN","SD53P212",30,0)
 I '$G(DUZ)!($G(DUZ(0))'="@")!('$G(DT))!($G(U)'="^") DO
"RTN","SD53P212",31,0)
 .D BMES^XPDUTL("*****")
"RTN","SD53P212",32,0)
 .D MES^XPDUTL("Your programming variables are not set up properly.")
"RTN","SD53P212",33,0)
 .D MES^XPDUTL("Installation aborted.")
"RTN","SD53P212",34,0)
 .D MES^XPDUTL("*****")
"RTN","SD53P212",35,0)
 .S XPDABORT=2
"RTN","SD53P212",36,0)
 .Q
"RTN","SD53P212",37,0)
 Q
"RTN","SD53P212",38,0)
 ;
"RTN","SD53P212",39,0)
 ;
"RTN","SD53P212",40,0)
PARMCHK(XPDABORT) ;checks for proper param file ien
"RTN","SD53P212",41,0)
 ;
"RTN","SD53P212",42,0)
 I '$D(^SCTM(404.44,1)) D
"RTN","SD53P212",43,0)
 .D BMES^XPDUTL("*****")
"RTN","SD53P212",44,0)
 .D MES^XPDUTL("Parameter file (#404.44) does not have proper IEN (1).")
"RTN","SD53P212",45,0)
 .D MES^XPDUTL("Installation aborted.")
"RTN","SD53P212",46,0)
 .D MES^XPDUTL("*****")
"RTN","SD53P212",47,0)
 .S XPDABORT=2
"RTN","SD53P212",48,0)
 .Q
"RTN","SD53P212",49,0)
 Q
"RTN","SD53P212",50,0)
 ;
"RTN","SD53P212",51,0)
 ;
"RTN","SD53P212",52,0)
POST1 ;Update client/server files.
"RTN","SD53P212",53,0)
 I $$UPCLNLST^SCMCUT("SD*5.3*212^NullClient^1^0^0") D  Q
"RTN","SD53P212",54,0)
 . D MES^XPDUTL("Client/Server files updated.")
"RTN","SD53P212",55,0)
 . Q
"RTN","SD53P212",56,0)
 D MES^XPDUTL("Client/Server files NOT updated.")
"RTN","SD53P212",57,0)
 Q
"RTN","SD53P212",58,0)
 ;
"RTN","SD53P212",59,0)
 ;
"RTN","SD53P212",60,0)
POST2 ;Change HL7 application name from 'PCMM-210' to 'PCMM-212' in
"RTN","SD53P212",61,0)
 ;HL7 APPLICATION PARAMETER file.
"RTN","SD53P212",62,0)
 ;
"RTN","SD53P212",63,0)
 N DIE,DIC,DA,DR,X,Y
"RTN","SD53P212",64,0)
 D BMES^XPDUTL("Changing HL7 Application name from PCMM-210 to PCMM-212")
"RTN","SD53P212",65,0)
 S DIC="^HL(771,"
"RTN","SD53P212",66,0)
 S DIC(0)="X"
"RTN","SD53P212",67,0)
 S X="PCMM-210"
"RTN","SD53P212",68,0)
 D ^DIC
"RTN","SD53P212",69,0)
 I (Y<0) D  Q
"RTN","SD53P212",70,0)
 .D BMES^XPDUTL("   PCMM application not found.")
"RTN","SD53P212",71,0)
 S DIE=DIC
"RTN","SD53P212",72,0)
 S DA=+Y
"RTN","SD53P212",73,0)
 S DR=".01///PCMM-212"
"RTN","SD53P212",74,0)
 D ^DIE
"RTN","SD53P212",75,0)
 D MES^XPDUTL("   HL7 application name successfully changed to PCMM-212.")
"RTN","SD53P212",76,0)
 Q
"RTN","SD53P212",77,0)
 ;
"RTN","SD53P212",78,0)
POST3 ;Set HL7 TRANSMIT LIMIT = 2500 in PCMM PARAMETER file #404.44, field #15
"RTN","SD53P212",79,0)
 ;
"RTN","SD53P212",80,0)
 N DIC,DIE,DIQ,DA,DR,SCLIM
"RTN","SD53P212",81,0)
 D BMES^XPDUTL("Setting HL7 TRANSMIT LIMIT to 2500.")
"RTN","SD53P212",82,0)
 S DIC="^SCTM(404.44,"   ;PCMM PARAMETER file
"RTN","SD53P212",83,0)
 S DA=1                  ;should only be 1 entry
"RTN","SD53P212",84,0)
 S DR=15                 ;HL7 Transmit Limit field
"RTN","SD53P212",85,0)
 S DIQ="SCLIM"           ;return array name
"RTN","SD53P212",86,0)
 D EN^DIQ1
"RTN","SD53P212",87,0)
 I '$D(SCLIM(404.44,DA,DR)) D  Q
"RTN","SD53P212",88,0)
 .D MES^XPDUTL("   HL7 TRANSMIT LIMIT field missing")
"RTN","SD53P212",89,0)
 S SCLIM=SCLIM(404.44,DA,DR)
"RTN","SD53P212",90,0)
 S DIE=DIC
"RTN","SD53P212",91,0)
 S DR="15///2500"
"RTN","SD53P212",92,0)
 D ^DIE
"RTN","SD53P212",93,0)
 D MES^XPDUTL("   HL7 TRANSMIT LIMIT successfully changed from "_SCLIM_" to 2500.")
"RTN","SD53P212",94,0)
 Q
"VER")
8.0^22.0
"^DD",404.44,404.44,17,0)
BASELINE RUN DATE^D^^1;7^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",404.44,404.44,17,21,0)
^^2^2^3000323^
"^DD",404.44,404.44,17,21,1,0)
  This field contains the date the PCMM Baseline was run.
"^DD",404.44,404.44,17,21,2,0)
  The Baseline can only run once at a site.
"^DD",404.44,404.44,17,"DT")
3000323
**END**
**END**

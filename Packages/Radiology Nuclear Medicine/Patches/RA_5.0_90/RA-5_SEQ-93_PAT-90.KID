Released RA*5*90 SEQ #93
Extracted from mail message
**KIDS**:RA*5.0*90^

**INSTALL NAME**
RA*5.0*90
"BLD",6800,0)
RA*5.0*90^RADIOLOGY/NUCLEAR MEDICINE^0^3100603^y
"BLD",6800,1,0)
^^2^2^3080407^^^
"BLD",6800,1,1,0)
This build contains a Radiology Order and Exam API for the DICOM Importer
"BLD",6800,1,2,0)
application (patch MAG*3*53) and some internal Radiology APIs.
"BLD",6800,4,0)
^9.64PA^70.2^2
"BLD",6800,4,70.2,0)
70.2
"BLD",6800,4,70.2,2,0)
^9.641^70.21^1
"BLD",6800,4,70.2,2,70.21,0)
RADIOPHARMACEUTICALS  (sub-file)
"BLD",6800,4,70.2,2,70.21,1,0)
^9.6411^4^2
"BLD",6800,4,70.2,2,70.21,1,4,0)
ACTIVITY DRAWN (in mCi)
"BLD",6800,4,70.2,2,70.21,1,7,0)
DOSE ADMINISTERED
"BLD",6800,4,70.2,222)
y^n^p^^^^n^^n
"BLD",6800,4,70.2,224)

"BLD",6800,4,79.7,0)
79.7
"BLD",6800,4,79.7,2,0)
^9.641^79.7^1
"BLD",6800,4,79.7,2,79.7,0)
RAD/NUC MED HL7 APPLICATION EXCEPTION  (File-top level)
"BLD",6800,4,79.7,2,79.7,1,0)
^9.6411^1.3^2
"BLD",6800,4,79.7,2,79.7,1,1,0)
TELERADIOLOGY APPLICATION
"BLD",6800,4,79.7,2,79.7,1,1.3,0)
APPLICATION TYPE
"BLD",6800,4,79.7,222)
y^n^p^^^^n^^n
"BLD",6800,4,79.7,224)

"BLD",6800,4,"APDD",70.2,70.21)

"BLD",6800,4,"APDD",70.2,70.21,4)

"BLD",6800,4,"APDD",70.2,70.21,7)

"BLD",6800,4,"APDD",79.7,79.7)

"BLD",6800,4,"APDD",79.7,79.7,1)

"BLD",6800,4,"APDD",79.7,79.7,1.3)

"BLD",6800,4,"B",70.2,70.2)

"BLD",6800,4,"B",79.7,79.7)

"BLD",6800,6.3)
20
"BLD",6800,"ABPKG")
n
"BLD",6800,"INI")

"BLD",6800,"INID")
^y^
"BLD",6800,"INIT")
POST^RA90PST
"BLD",6800,"KRN",0)
^9.67PA^8989.52^19
"BLD",6800,"KRN",.4,0)
.4
"BLD",6800,"KRN",.4,"NM",0)
^9.68A^^0
"BLD",6800,"KRN",.401,0)
.401
"BLD",6800,"KRN",.402,0)
.402
"BLD",6800,"KRN",.403,0)
.403
"BLD",6800,"KRN",.5,0)
.5
"BLD",6800,"KRN",.84,0)
.84
"BLD",6800,"KRN",.84,"NM",0)
^9.68A^61^61
"BLD",6800,"KRN",.84,"NM",1,0)
700000.001^^0
"BLD",6800,"KRN",.84,"NM",2,0)
700000.002^^0
"BLD",6800,"KRN",.84,"NM",3,0)
700000.003^^0
"BLD",6800,"KRN",.84,"NM",4,0)
700000.004^^0
"BLD",6800,"KRN",.84,"NM",5,0)
700000.005^^0
"BLD",6800,"KRN",.84,"NM",6,0)
700000.006^^0
"BLD",6800,"KRN",.84,"NM",7,0)
700000.007^^0
"BLD",6800,"KRN",.84,"NM",8,0)
700000.008^^0
"BLD",6800,"KRN",.84,"NM",9,0)
700000.009^^0
"BLD",6800,"KRN",.84,"NM",10,0)
700000.01^^0
"BLD",6800,"KRN",.84,"NM",11,0)
700000.011^^0
"BLD",6800,"KRN",.84,"NM",12,0)
700000.012^^0
"BLD",6800,"KRN",.84,"NM",13,0)
700000.013^^0
"BLD",6800,"KRN",.84,"NM",14,0)
700000.014^^0
"BLD",6800,"KRN",.84,"NM",15,0)
700000.015^^0
"BLD",6800,"KRN",.84,"NM",16,0)
700000.016^^0
"BLD",6800,"KRN",.84,"NM",17,0)
700000.017^^0
"BLD",6800,"KRN",.84,"NM",18,0)
700000.018^^0
"BLD",6800,"KRN",.84,"NM",19,0)
700000.019^^0
"BLD",6800,"KRN",.84,"NM",20,0)
700000.02^^0
"BLD",6800,"KRN",.84,"NM",21,0)
700000.021^^0
"BLD",6800,"KRN",.84,"NM",22,0)
700000.022^^0
"BLD",6800,"KRN",.84,"NM",23,0)
700000.023^^0
"BLD",6800,"KRN",.84,"NM",24,0)
700000.024^^0
"BLD",6800,"KRN",.84,"NM",25,0)
700000.025^^0
"BLD",6800,"KRN",.84,"NM",26,0)
700000.026^^0
"BLD",6800,"KRN",.84,"NM",27,0)
700000.027^^0
"BLD",6800,"KRN",.84,"NM",28,0)
700000.028^^0
"BLD",6800,"KRN",.84,"NM",29,0)
700000.029^^0
"BLD",6800,"KRN",.84,"NM",30,0)
700000.03^^0
"BLD",6800,"KRN",.84,"NM",31,0)
700000.032^^0
"BLD",6800,"KRN",.84,"NM",32,0)
700000.033^^0
"BLD",6800,"KRN",.84,"NM",33,0)
700000.034^^0
"BLD",6800,"KRN",.84,"NM",34,0)
700000.035^^0
"BLD",6800,"KRN",.84,"NM",35,0)
700000.036^^0
"BLD",6800,"KRN",.84,"NM",36,0)
700000.037^^0
"BLD",6800,"KRN",.84,"NM",37,0)
700000.038^^0
"BLD",6800,"KRN",.84,"NM",38,0)
700000.039^^0
"BLD",6800,"KRN",.84,"NM",39,0)
700000.04^^0
"BLD",6800,"KRN",.84,"NM",40,0)
700000.041^^0
"BLD",6800,"KRN",.84,"NM",41,0)
700000.042^^0
"BLD",6800,"KRN",.84,"NM",42,0)
700000.043^^0
"BLD",6800,"KRN",.84,"NM",43,0)
700000.044^^0
"BLD",6800,"KRN",.84,"NM",44,0)
700000.045^^0
"BLD",6800,"KRN",.84,"NM",45,0)
700000.046^^0
"BLD",6800,"KRN",.84,"NM",46,0)
700000.047^^0
"BLD",6800,"KRN",.84,"NM",47,0)
700005.001^^0
"BLD",6800,"KRN",.84,"NM",48,0)
700000.048^^0
"BLD",6800,"KRN",.84,"NM",49,0)
700000.031^^0
"BLD",6800,"KRN",.84,"NM",50,0)
700000.049^^0
"BLD",6800,"KRN",.84,"NM",51,0)
700000.05^^0
"BLD",6800,"KRN",.84,"NM",52,0)
700000.051^^0
"BLD",6800,"KRN",.84,"NM",53,0)
700000.052^^0
"BLD",6800,"KRN",.84,"NM",54,0)
700005.002^^0
"BLD",6800,"KRN",.84,"NM",55,0)
700000.053^^0
"BLD",6800,"KRN",.84,"NM",56,0)
700000.054^^0
"BLD",6800,"KRN",.84,"NM",57,0)
700000.055^^0
"BLD",6800,"KRN",.84,"NM",58,0)
700000.056^^0
"BLD",6800,"KRN",.84,"NM",59,0)
700000.057^^0
"BLD",6800,"KRN",.84,"NM",60,0)
700000.058^^0
"BLD",6800,"KRN",.84,"NM",61,0)
700000.059^^0
"BLD",6800,"KRN",.84,"NM","B",700000.001,1)

"BLD",6800,"KRN",.84,"NM","B",700000.002,2)

"BLD",6800,"KRN",.84,"NM","B",700000.003,3)

"BLD",6800,"KRN",.84,"NM","B",700000.004,4)

"BLD",6800,"KRN",.84,"NM","B",700000.005,5)

"BLD",6800,"KRN",.84,"NM","B",700000.006,6)

"BLD",6800,"KRN",.84,"NM","B",700000.007,7)

"BLD",6800,"KRN",.84,"NM","B",700000.008,8)

"BLD",6800,"KRN",.84,"NM","B",700000.009,9)

"BLD",6800,"KRN",.84,"NM","B",700000.01,10)

"BLD",6800,"KRN",.84,"NM","B",700000.011,11)

"BLD",6800,"KRN",.84,"NM","B",700000.012,12)

"BLD",6800,"KRN",.84,"NM","B",700000.013,13)

"BLD",6800,"KRN",.84,"NM","B",700000.014,14)

"BLD",6800,"KRN",.84,"NM","B",700000.015,15)

"BLD",6800,"KRN",.84,"NM","B",700000.016,16)

"BLD",6800,"KRN",.84,"NM","B",700000.017,17)

"BLD",6800,"KRN",.84,"NM","B",700000.018,18)

"BLD",6800,"KRN",.84,"NM","B",700000.019,19)

"BLD",6800,"KRN",.84,"NM","B",700000.02,20)

"BLD",6800,"KRN",.84,"NM","B",700000.021,21)

"BLD",6800,"KRN",.84,"NM","B",700000.022,22)

"BLD",6800,"KRN",.84,"NM","B",700000.023,23)

"BLD",6800,"KRN",.84,"NM","B",700000.024,24)

"BLD",6800,"KRN",.84,"NM","B",700000.025,25)

"BLD",6800,"KRN",.84,"NM","B",700000.026,26)

"BLD",6800,"KRN",.84,"NM","B",700000.027,27)

"BLD",6800,"KRN",.84,"NM","B",700000.028,28)

"BLD",6800,"KRN",.84,"NM","B",700000.029,29)

"BLD",6800,"KRN",.84,"NM","B",700000.03,30)

"BLD",6800,"KRN",.84,"NM","B",700000.031,49)

"BLD",6800,"KRN",.84,"NM","B",700000.032,31)

"BLD",6800,"KRN",.84,"NM","B",700000.033,32)

"BLD",6800,"KRN",.84,"NM","B",700000.034,33)

"BLD",6800,"KRN",.84,"NM","B",700000.035,34)

"BLD",6800,"KRN",.84,"NM","B",700000.036,35)

"BLD",6800,"KRN",.84,"NM","B",700000.037,36)

"BLD",6800,"KRN",.84,"NM","B",700000.038,37)

"BLD",6800,"KRN",.84,"NM","B",700000.039,38)

"BLD",6800,"KRN",.84,"NM","B",700000.04,39)

"BLD",6800,"KRN",.84,"NM","B",700000.041,40)

"BLD",6800,"KRN",.84,"NM","B",700000.042,41)

"BLD",6800,"KRN",.84,"NM","B",700000.043,42)

"BLD",6800,"KRN",.84,"NM","B",700000.044,43)

"BLD",6800,"KRN",.84,"NM","B",700000.045,44)

"BLD",6800,"KRN",.84,"NM","B",700000.046,45)

"BLD",6800,"KRN",.84,"NM","B",700000.047,46)

"BLD",6800,"KRN",.84,"NM","B",700000.048,48)

"BLD",6800,"KRN",.84,"NM","B",700000.049,50)

"BLD",6800,"KRN",.84,"NM","B",700000.05,51)

"BLD",6800,"KRN",.84,"NM","B",700000.051,52)

"BLD",6800,"KRN",.84,"NM","B",700000.052,53)

"BLD",6800,"KRN",.84,"NM","B",700000.053,55)

"BLD",6800,"KRN",.84,"NM","B",700000.054,56)

"BLD",6800,"KRN",.84,"NM","B",700000.055,57)

"BLD",6800,"KRN",.84,"NM","B",700000.056,58)

"BLD",6800,"KRN",.84,"NM","B",700000.057,59)

"BLD",6800,"KRN",.84,"NM","B",700000.058,60)

"BLD",6800,"KRN",.84,"NM","B",700000.059,61)

"BLD",6800,"KRN",.84,"NM","B",700005.001,47)

"BLD",6800,"KRN",.84,"NM","B",700005.002,54)

"BLD",6800,"KRN",3.6,0)
3.6
"BLD",6800,"KRN",3.8,0)
3.8
"BLD",6800,"KRN",9.2,0)
9.2
"BLD",6800,"KRN",9.8,0)
9.8
"BLD",6800,"KRN",9.8,"NM",0)
^9.68A^58^40
"BLD",6800,"KRN",9.8,"NM",1,0)
RAMAG^^0^B20144
"BLD",6800,"KRN",9.8,"NM",2,0)
RAMAG02^^0^B8884852
"BLD",6800,"KRN",9.8,"NM",3,0)
RAMAG02A^^0^B40471638
"BLD",6800,"KRN",9.8,"NM",4,0)
RAMAG03^^0^B17195637
"BLD",6800,"KRN",9.8,"NM",5,0)
RAMAG03A^^0^B78208165
"BLD",6800,"KRN",9.8,"NM",7,0)
RAMAG03C^^0^B25745401
"BLD",6800,"KRN",9.8,"NM",8,0)
RAMAG03D^^0^B36215473
"BLD",6800,"KRN",9.8,"NM",9,0)
RAMAG04^^0^B11678417
"BLD",6800,"KRN",9.8,"NM",10,0)
RAMAG05^^0^B23360038
"BLD",6800,"KRN",9.8,"NM",11,0)
RAMAG06^^0^B45318084
"BLD",6800,"KRN",9.8,"NM",14,0)
RAMAGRP1^^0^B31897762
"BLD",6800,"KRN",9.8,"NM",23,0)
RAMAGU01^^0^B42344620
"BLD",6800,"KRN",9.8,"NM",24,0)
RAMAGU02^^0^B33916082
"BLD",6800,"KRN",9.8,"NM",25,0)
RAMAGU03^^0^B12380535
"BLD",6800,"KRN",9.8,"NM",26,0)
RAMAGU04^^0^B18351920
"BLD",6800,"KRN",9.8,"NM",27,0)
RAMAGU05^^0^B36153469
"BLD",6800,"KRN",9.8,"NM",28,0)
RAMAGU07^^0^B9459946
"BLD",6800,"KRN",9.8,"NM",29,0)
RAMAGU10^^0^B7429399
"BLD",6800,"KRN",9.8,"NM",31,0)
RAMAGU11^^0^B2169959
"BLD",6800,"KRN",9.8,"NM",32,0)
RAMAG06A^^0^B10095420
"BLD",6800,"KRN",9.8,"NM",34,0)
RAMAGU12^^0^B22940867
"BLD",6800,"KRN",9.8,"NM",36,0)
RAERR^^0^B15076912
"BLD",6800,"KRN",9.8,"NM",37,0)
RAERR01^^0^B17861694
"BLD",6800,"KRN",9.8,"NM",38,0)
RAKIDS^^0^B10188507
"BLD",6800,"KRN",9.8,"NM",39,0)
RAUTL22^^0^B29084710
"BLD",6800,"KRN",9.8,"NM",40,0)
RA^^0^B7446
"BLD",6800,"KRN",9.8,"NM",41,0)
RA01^^0^B6414
"BLD",6800,"KRN",9.8,"NM",45,0)
RAMAG07^^0^B59585393
"BLD",6800,"KRN",9.8,"NM",46,0)
RAMAGU06^^0^B43534472
"BLD",6800,"KRN",9.8,"NM",47,0)
RAMAGU08^^0^B43666394
"BLD",6800,"KRN",9.8,"NM",48,0)
RAMAGRP2^^0^B6426063
"BLD",6800,"KRN",9.8,"NM",50,0)
RAMAGU09^^0^B47840668
"BLD",6800,"KRN",9.8,"NM",51,0)
RALOCK^^0^B17064924
"BLD",6800,"KRN",9.8,"NM",52,0)
RALOCK01^^0^B16127704
"BLD",6800,"KRN",9.8,"NM",53,0)
RAMAGU13^^0^B24543056
"BLD",6800,"KRN",9.8,"NM",54,0)
RAMAGHL^^0^B11085202
"BLD",6800,"KRN",9.8,"NM",55,0)
RAMAGU14^^0^B6033679
"BLD",6800,"KRN",9.8,"NM",56,0)
RASTREQ^^0^B56283063
"BLD",6800,"KRN",9.8,"NM",57,0)
RAUTL8^^0^B73540763
"BLD",6800,"KRN",9.8,"NM",58,0)
RA90PST^^0^B1243137
"BLD",6800,"KRN",9.8,"NM","B","RA",40)

"BLD",6800,"KRN",9.8,"NM","B","RA01",41)

"BLD",6800,"KRN",9.8,"NM","B","RA90PST",58)

"BLD",6800,"KRN",9.8,"NM","B","RAERR",36)

"BLD",6800,"KRN",9.8,"NM","B","RAERR01",37)

"BLD",6800,"KRN",9.8,"NM","B","RAKIDS",38)

"BLD",6800,"KRN",9.8,"NM","B","RALOCK",51)

"BLD",6800,"KRN",9.8,"NM","B","RALOCK01",52)

"BLD",6800,"KRN",9.8,"NM","B","RAMAG",1)

"BLD",6800,"KRN",9.8,"NM","B","RAMAG02",2)

"BLD",6800,"KRN",9.8,"NM","B","RAMAG02A",3)

"BLD",6800,"KRN",9.8,"NM","B","RAMAG03",4)

"BLD",6800,"KRN",9.8,"NM","B","RAMAG03A",5)

"BLD",6800,"KRN",9.8,"NM","B","RAMAG03C",7)

"BLD",6800,"KRN",9.8,"NM","B","RAMAG03D",8)

"BLD",6800,"KRN",9.8,"NM","B","RAMAG04",9)

"BLD",6800,"KRN",9.8,"NM","B","RAMAG05",10)

"BLD",6800,"KRN",9.8,"NM","B","RAMAG06",11)

"BLD",6800,"KRN",9.8,"NM","B","RAMAG06A",32)

"BLD",6800,"KRN",9.8,"NM","B","RAMAG07",45)

"BLD",6800,"KRN",9.8,"NM","B","RAMAGHL",54)

"BLD",6800,"KRN",9.8,"NM","B","RAMAGRP1",14)

"BLD",6800,"KRN",9.8,"NM","B","RAMAGRP2",48)

"BLD",6800,"KRN",9.8,"NM","B","RAMAGU01",23)

"BLD",6800,"KRN",9.8,"NM","B","RAMAGU02",24)

"BLD",6800,"KRN",9.8,"NM","B","RAMAGU03",25)

"BLD",6800,"KRN",9.8,"NM","B","RAMAGU04",26)

"BLD",6800,"KRN",9.8,"NM","B","RAMAGU05",27)

"BLD",6800,"KRN",9.8,"NM","B","RAMAGU06",46)

"BLD",6800,"KRN",9.8,"NM","B","RAMAGU07",28)

"BLD",6800,"KRN",9.8,"NM","B","RAMAGU08",47)

"BLD",6800,"KRN",9.8,"NM","B","RAMAGU09",50)

"BLD",6800,"KRN",9.8,"NM","B","RAMAGU10",29)

"BLD",6800,"KRN",9.8,"NM","B","RAMAGU11",31)

"BLD",6800,"KRN",9.8,"NM","B","RAMAGU12",34)

"BLD",6800,"KRN",9.8,"NM","B","RAMAGU13",53)

"BLD",6800,"KRN",9.8,"NM","B","RAMAGU14",55)

"BLD",6800,"KRN",9.8,"NM","B","RASTREQ",56)

"BLD",6800,"KRN",9.8,"NM","B","RAUTL22",39)

"BLD",6800,"KRN",9.8,"NM","B","RAUTL8",57)

"BLD",6800,"KRN",19,0)
19
"BLD",6800,"KRN",19,"NM",0)
^9.68A^^0
"BLD",6800,"KRN",19.1,0)
19.1
"BLD",6800,"KRN",101,0)
101
"BLD",6800,"KRN",409.61,0)
409.61
"BLD",6800,"KRN",771,0)
771
"BLD",6800,"KRN",870,0)
870
"BLD",6800,"KRN",8989.51,0)
8989.51
"BLD",6800,"KRN",8989.52,0)
8989.52
"BLD",6800,"KRN",8989.52,"NM",0)
^9.68A^^
"BLD",6800,"KRN",8994,0)
8994
"BLD",6800,"KRN",8994,"NM",0)
^9.68A^7^7
"BLD",6800,"KRN",8994,"NM",1,0)
RAMAG EXAM CANCEL^^0
"BLD",6800,"KRN",8994,"NM",2,0)
RAMAG EXAM COMPLETE^^0
"BLD",6800,"KRN",8994,"NM",3,0)
RAMAG EXAM ORDER^^0
"BLD",6800,"KRN",8994,"NM",4,0)
RAMAG EXAM REGISTER^^0
"BLD",6800,"KRN",8994,"NM",5,0)
RAMAG ORDER CANCEL^^0
"BLD",6800,"KRN",8994,"NM",6,0)
RAMAG EXAMINED^^0
"BLD",6800,"KRN",8994,"NM",7,0)
RAMAG EXAM STATUS REQUIREMENTS^^0
"BLD",6800,"KRN",8994,"NM","B","RAMAG EXAM CANCEL",1)

"BLD",6800,"KRN",8994,"NM","B","RAMAG EXAM COMPLETE",2)

"BLD",6800,"KRN",8994,"NM","B","RAMAG EXAM ORDER",3)

"BLD",6800,"KRN",8994,"NM","B","RAMAG EXAM REGISTER",4)

"BLD",6800,"KRN",8994,"NM","B","RAMAG EXAM STATUS REQUIREMENTS",7)

"BLD",6800,"KRN",8994,"NM","B","RAMAG EXAMINED",6)

"BLD",6800,"KRN",8994,"NM","B","RAMAG ORDER CANCEL",5)

"BLD",6800,"KRN","B",.4,.4)

"BLD",6800,"KRN","B",.401,.401)

"BLD",6800,"KRN","B",.402,.402)

"BLD",6800,"KRN","B",.403,.403)

"BLD",6800,"KRN","B",.5,.5)

"BLD",6800,"KRN","B",.84,.84)

"BLD",6800,"KRN","B",3.6,3.6)

"BLD",6800,"KRN","B",3.8,3.8)

"BLD",6800,"KRN","B",9.2,9.2)

"BLD",6800,"KRN","B",9.8,9.8)

"BLD",6800,"KRN","B",19,19)

"BLD",6800,"KRN","B",19.1,19.1)

"BLD",6800,"KRN","B",101,101)

"BLD",6800,"KRN","B",409.61,409.61)

"BLD",6800,"KRN","B",771,771)

"BLD",6800,"KRN","B",870,870)

"BLD",6800,"KRN","B",8989.51,8989.51)

"BLD",6800,"KRN","B",8989.52,8989.52)

"BLD",6800,"KRN","B",8994,8994)

"BLD",6800,"QDEF")
^^^^NO^^^^NO^^NO
"BLD",6800,"QUES",0)
^9.62^^
"BLD",6800,"REQB",0)
^9.611^3^3
"BLD",6800,"REQB",1,0)
RA*5.0*80^2
"BLD",6800,"REQB",2,0)
RA*5.0*56^2
"BLD",6800,"REQB",3,0)
RA*5.0*99^2
"BLD",6800,"REQB","B","RA*5.0*56",2)

"BLD",6800,"REQB","B","RA*5.0*80",1)

"BLD",6800,"REQB","B","RA*5.0*99",3)

"FIA",70.2)
NUC MED EXAM DATA
"FIA",70.2,0)
^RADPTN(
"FIA",70.2,0,0)
70.2PIA
"FIA",70.2,0,1)
y^n^p^^^^n^^n
"FIA",70.2,0,10)

"FIA",70.2,0,11)

"FIA",70.2,0,"RLRO")

"FIA",70.2,0,"VR")
5.0^RA
"FIA",70.2,70.2)
1
"FIA",70.2,70.21)
1
"FIA",70.2,70.21,4)

"FIA",70.2,70.21,7)

"FIA",79.7)
RAD/NUC MED HL7 APPLICATION EXCEPTION
"FIA",79.7,0)
^RA(79.7,
"FIA",79.7,0,0)
79.7P
"FIA",79.7,0,1)
y^n^p^^^^n^^n
"FIA",79.7,0,10)

"FIA",79.7,0,11)

"FIA",79.7,0,"RLRO")

"FIA",79.7,0,"VR")
5.0^RA
"FIA",79.7,79.7)
1
"FIA",79.7,79.7,1)

"FIA",79.7,79.7,1.3)

"INIT")
POST^RA90PST
"KRN",.84,700000.001,-1)
0^1
"KRN",.84,700000.001,0)
700000.001^1^^RADIOLOGY/NUCLEAR MEDICINE^Cancel
"KRN",.84,700000.001,2,0)
^^1^1^3071121^
"KRN",.84,700000.001,2,1,0)
I^Cancel
"KRN",.84,700000.002,-1)
0^2
"KRN",.84,700000.002,0)
700000.002^1^^RADIOLOGY/NUCLEAR MEDICINE^Timeout
"KRN",.84,700000.002,2,0)
^^1^1^3071121^
"KRN",.84,700000.002,2,1,0)
I^Timeout
"KRN",.84,700000.003,-1)
0^3
"KRN",.84,700000.003,0)
700000.003^1^^RADIOLOGY/NUCLEAR MEDICINE^Parameter has invalid value
"KRN",.84,700000.003,2,0)
^^1^1^3071214^
"KRN",.84,700000.003,2,1,0)
E^Parameter '|1|' has an invalid value.
"KRN",.84,700000.004,-1)
0^4
"KRN",.84,700000.004,0)
700000.004^1^^RADIOLOGY/NUCLEAR MEDICINE^Run-time Error
"KRN",.84,700000.004,2,0)
^^1^1^3071121^
"KRN",.84,700000.004,2,1,0)
E^Run-time Error: '|1|'.
"KRN",.84,700000.005,-1)
0^5
"KRN",.84,700000.005,0)
700000.005^1^^RADIOLOGY/NUCLEAR MEDICINE^The RAMSC parameter has errors.
"KRN",.84,700000.005,2,0)
^.844^1^1^3080103^^
"KRN",.84,700000.005,2,1,0)
E^The RAMSC parameter has errors.
"KRN",.84,700000.006,-1)
0^6
"KRN",.84,700000.006,0)
700000.006^1^^RADIOLOGY/NUCLEAR MEDICINE^Duplicate parameter values
"KRN",.84,700000.006,2,0)
^^1^1^3071121^
"KRN",.84,700000.006,2,1,0)
E^Duplicate values of the '|1|' in the RAMSC parameter.
"KRN",.84,700000.007,-1)
0^7
"KRN",.84,700000.007,0)
700000.007^1^^RADIOLOGY/NUCLEAR MEDICINE^Duplicate parameter indexes
"KRN",.84,700000.007,2,0)
^^1^1^3071121^
"KRN",.84,700000.007,2,1,0)
E^Duplicate '|1|' index of the '|2|' in the RAMSC parameter.
"KRN",.84,700000.008,-1)
0^8
"KRN",.84,700000.008,0)
700000.008^1^^RADIOLOGY/NUCLEAR MEDICINE^Required parameter has no value
"KRN",.84,700000.008,2,0)
^^1^1^3071121^
"KRN",.84,700000.008,2,1,0)
E^Required parameter '|1|' has no value.
"KRN",.84,700000.009,-1)
0^9
"KRN",.84,700000.009,0)
700000.009^1^^RADIOLOGY/NUCLEAR MEDICINE^FileMan DBS call error(s)
"KRN",.84,700000.009,2,0)
^^1^1^3071121^
"KRN",.84,700000.009,2,1,0)
E^FileMan DBS call error(s)|1|
"KRN",.84,700000.01,-1)
0^10
"KRN",.84,700000.01,0)
700000.01^1^^RADIOLOGY/NUCLEAR MEDICINE^Missing required parameters
"KRN",.84,700000.01,2,0)
^^1^1^3071121^
"KRN",.84,700000.01,2,1,0)
E^Missing required parameters.
"KRN",.84,700000.011,-1)
0^11
"KRN",.84,700000.011,0)
700000.011^1^^RADIOLOGY/NUCLEAR MEDICINE^Invalid parameter(s)
"KRN",.84,700000.011,2,0)
^^1^1^3071121^
"KRN",.84,700000.011,2,1,0)
E^Invalid parameter(s).
"KRN",.84,700000.012,-1)
0^12
"KRN",.84,700000.012,0)
700000.012^1^^RADIOLOGY/NUCLEAR MEDICINE^Procedure is incompatible with location
"KRN",.84,700000.012,2,0)
^.844^1^1^3080219^^^
"KRN",.84,700000.012,2,1,0)
E^Procedure imaging type differs from that of imaging location.
"KRN",.84,700000.012,5,0)
^.841^1^1
"KRN",.84,700000.012,5,1,0)
RAERR01^MSG
"KRN",.84,700000.012,5,"B","RAERR01",1)

"KRN",.84,700000.013,-1)
0^13
"KRN",.84,700000.013,0)
700000.013^1^^RADIOLOGY/NUCLEAR MEDICINE^At least one parameter must be defined
"KRN",.84,700000.013,2,0)
^.844^1^1^3080227^^
"KRN",.84,700000.013,2,1,0)
E^At least one of these parameters must be defined.
"KRN",.84,700000.014,-1)
0^14
"KRN",.84,700000.014,0)
700000.014^1^^RADIOLOGY/NUCLEAR MEDICINE^Ambiguous
"KRN",.84,700000.014,2,0)
^^1^1^3071121^
"KRN",.84,700000.014,2,1,0)
E^Ambiguous |1|: '|2|'.
"KRN",.84,700000.015,-1)
0^15
"KRN",.84,700000.015,0)
700000.015^1^^RADIOLOGY/NUCLEAR MEDICINE^Locked by other user/task
"KRN",.84,700000.015,2,0)
^^1^1^3071205^
"KRN",.84,700000.015,2,1,0)
W^The |1| is locked by other user/task. Please try later.
"KRN",.84,700000.016,-1)
0^16
"KRN",.84,700000.016,0)
700000.016^1^^RADIOLOGY/NUCLEAR MEDICINE^Reason is incompatible with status
"KRN",.84,700000.016,2,0)
^^1^1^3071121^
"KRN",.84,700000.016,2,1,0)
E^Type of reason (|1|) is incompatible with the new status (|2|).
"KRN",.84,700000.017,-1)
0^17
"KRN",.84,700000.017,0)
700000.017^1^^RADIOLOGY/NUCLEAR MEDICINE^Radiology procedure is/was inactive
"KRN",.84,700000.017,2,0)
^^1^1^3071121^
"KRN",.84,700000.017,2,1,0)
E^Radiology procedure is/was inactive on |1|.
"KRN",.84,700000.018,-1)
0^18
"KRN",.84,700000.018,0)
700000.018^1^^RADIOLOGY/NUCLEAR MEDICINE^Procedures of this type are not allowed
"KRN",.84,700000.018,2,0)
^^1^1^3071121^
"KRN",.84,700000.018,2,1,0)
E^Procedures of this type ('|1|') are not allowed.
"KRN",.84,700000.019,-1)
0^19
"KRN",.84,700000.019,0)
700000.019^1^^RADIOLOGY/NUCLEAR MEDICINE^Invalid value of field
"KRN",.84,700000.019,2,0)
^^1^1^3071121^
"KRN",.84,700000.019,2,1,0)
E^Invalid value of field #|3| in file #|1|, IENS='|2|'.
"KRN",.84,700000.02,-1)
0^20
"KRN",.84,700000.02,0)
700000.02^1^^RADIOLOGY/NUCLEAR MEDICINE^Invalid Radiology procedure/modifiers
"KRN",.84,700000.02,2,0)
^^1^1^3071121^
"KRN",.84,700000.02,2,1,0)
E^Invalid Radiology procedure and/or modifier(s).
"KRN",.84,700000.021,-1)
0^21
"KRN",.84,700000.021,0)
700000.021^1^^RADIOLOGY/NUCLEAR MEDICINE^Invalid Radiology procedure IEN
"KRN",.84,700000.021,2,0)
^^1^1^3071121^
"KRN",.84,700000.021,2,1,0)
E^Invalid Radiology procedure IEN: '|1|'.
"KRN",.84,700000.022,-1)
0^22
"KRN",.84,700000.022,0)
700000.022^1^^RADIOLOGY/NUCLEAR MEDICINE^Invalid Radiology procedure modifier IEN
"KRN",.84,700000.022,2,0)
^^1^1^3071121^
"KRN",.84,700000.022,2,1,0)
E^Invalid Radiology procedure modifier IEN: '|1|'.
"KRN",.84,700000.023,-1)
0^23
"KRN",.84,700000.023,0)
700000.023^1^^RADIOLOGY/NUCLEAR MEDICINE^Discrepancy in patient references
"KRN",.84,700000.023,2,0)
^^1^1^3071121^
"KRN",.84,700000.023,2,1,0)
E^Order must reference the same patient as RAMISC("ADDTOCASE") does.
"KRN",.84,700000.024,-1)
0^24
"KRN",.84,700000.024,0)
700000.024^1^^RADIOLOGY/NUCLEAR MEDICINE^Discrepancies in date/time of exam
"KRN",.84,700000.024,2,0)
^^1^1^3071121^
"KRN",.84,700000.024,2,1,0)
E^Exam date/time must be the same as that in RAMISC("ADDTOCASE").
"KRN",.84,700000.025,-1)
0^25
"KRN",.84,700000.025,0)
700000.025^1^^RADIOLOGY/NUCLEAR MEDICINE^Parameter must reference existing case
"KRN",.84,700000.025,2,0)
^^1^1^3071121^
"KRN",.84,700000.025,2,1,0)
E^|1| must reference an existing case.
"KRN",.84,700000.026,-1)
0^26
"KRN",.84,700000.026,0)
700000.026^1^^RADIOLOGY/NUCLEAR MEDICINE^Invalid case number in RAMISC("ADDTOCASE")
"KRN",.84,700000.026,2,0)
^^1^1^3071121^
"KRN",.84,700000.026,2,1,0)
E^Invalid case number in the 3rd piece of RAMISC("ADDTOCASE").
"KRN",.84,700000.027,-1)
0^27
"KRN",.84,700000.027,0)
700000.027^1^^RADIOLOGY/NUCLEAR MEDICINE^Invalid value of RAMISC("PREGNANT")
"KRN",.84,700000.027,2,0)
^^1^1^3071121^
"KRN",.84,700000.027,2,1,0)
E^Value of RAMISC("PREGNANT") is incompatible with patient's sex.
"KRN",.84,700000.028,-1)
0^28
"KRN",.84,700000.028,0)
700000.028^1^^RADIOLOGY/NUCLEAR MEDICINE^Patient already has exam(s)
"KRN",.84,700000.028,2,0)
^^1^1^3071205^
"KRN",.84,700000.028,2,1,0)
W^Patient already has exam(s) for this date/time: |1|.
"KRN",.84,700000.029,-1)
0^29
"KRN",.84,700000.029,0)
700000.029^1^^RADIOLOGY/NUCLEAR MEDICINE^Too many registered exams
"KRN",.84,700000.029,2,0)
^^1^1^3071205^
"KRN",.84,700000.029,2,1,0)
W^Too many registered exams with almost the same date/time.
"KRN",.84,700000.03,-1)
0^30
"KRN",.84,700000.03,0)
700000.03^1^^RADIOLOGY/NUCLEAR MEDICINE^Parent procedure should be the only one
"KRN",.84,700000.03,2,0)
^^1^1^3071121^
"KRN",.84,700000.03,2,1,0)
E^A "parent" procedure should be the only procedure in the list
"KRN",.84,700000.031,-1)
0^49
"KRN",.84,700000.031,0)
700000.031^1^^RADIOLOGY/NUCLEAR MEDICINE^Exam status cannot be  changed to ...
"KRN",.84,700000.031,2,0)
^^1^1^3080107^
"KRN",.84,700000.031,2,1,0)
W^Status of the case cannot be changed to '|1|'.
"KRN",.84,700000.032,-1)
0^31
"KRN",.84,700000.032,0)
700000.032^1^^RADIOLOGY/NUCLEAR MEDICINE^Modifiers cannot be used with parent
"KRN",.84,700000.032,2,0)
^^1^1^3071121^
"KRN",.84,700000.032,2,1,0)
E^Modifiers cannot be used with a "parent" procedure.
"KRN",.84,700000.033,-1)
0^32
"KRN",.84,700000.033,0)
700000.033^1^^RADIOLOGY/NUCLEAR MEDICINE^Not found
"KRN",.84,700000.033,2,0)
^^1^1^3071121^
"KRN",.84,700000.033,2,1,0)
E^Provided |1| cannot not be found in file #|2|.
"KRN",.84,700000.034,-1)
0^33
"KRN",.84,700000.034,0)
700000.034^1^^RADIOLOGY/NUCLEAR MEDICINE^Parameter is reserved but not supported
"KRN",.84,700000.034,2,0)
^^1^1^3071121^
"KRN",.84,700000.034,2,1,0)
E^Parameter |1| is reserved but not supported yet.
"KRN",.84,700000.035,-1)
0^34
"KRN",.84,700000.035,0)
700000.035^1^^RADIOLOGY/NUCLEAR MEDICINE^Order cannot be registered
"KRN",.84,700000.035,2,0)
^^1^1^3071121^
"KRN",.84,700000.035,2,1,0)
E^Order with the '|1|' status cannot be registered (IEN=|2|).
"KRN",.84,700000.036,-1)
0^35
"KRN",.84,700000.036,0)
700000.036^1^^RADIOLOGY/NUCLEAR MEDICINE^Type of imaging is not defined
"KRN",.84,700000.036,2,0)
^^1^1^3071121^
"KRN",.84,700000.036,2,1,0)
E^Type of imaging is not defined in the file #79.2.
"KRN",.84,700000.037,-1)
0^36
"KRN",.84,700000.037,0)
700000.037^1^^RADIOLOGY/NUCLEAR MEDICINE^No free case numbers
"KRN",.84,700000.037,2,0)
^^1^1^3071121^
"KRN",.84,700000.037,2,1,0)
W^No free case numbers. Old exams must be purged.
"KRN",.84,700000.038,-1)
0^37
"KRN",.84,700000.038,0)
700000.038^1^^RADIOLOGY/NUCLEAR MEDICINE^Unit test(s) failed
"KRN",.84,700000.038,2,0)
^^1^1^3071121^
"KRN",.84,700000.038,2,1,0)
E^|1| unit test(s) failed.
"KRN",.84,700000.039,-1)
0^38
"KRN",.84,700000.039,0)
700000.039^1^^RADIOLOGY/NUCLEAR MEDICINE^Incompatible imaging type and modifier
"KRN",.84,700000.039,2,0)
^^1^1^3071121^
"KRN",.84,700000.039,2,1,0)
E^Imaging type of a modifier differs from that of imaging location.
"KRN",.84,700000.04,-1)
0^39
"KRN",.84,700000.04,0)
700000.04^1^^RADIOLOGY/NUCLEAR MEDICINE^Cannot start the auxilary task
"KRN",.84,700000.04,2,0)
^^1^1^3071121^
"KRN",.84,700000.04,2,1,0)
E^Cannot start the auxilary task.
"KRN",.84,700000.041,-1)
0^40
"KRN",.84,700000.041,0)
700000.041^1^^RADIOLOGY/NUCLEAR MEDICINE^Cannot perform subsequent test(s)
"KRN",.84,700000.041,2,0)
^^1^1^3071121^
"KRN",.84,700000.041,2,1,0)
E^Cannot perform subsequent test(s) without a valid |1|!
"KRN",.84,700000.042,-1)
0^41
"KRN",.84,700000.042,0)
700000.042^1^^RADIOLOGY/NUCLEAR MEDICINE^Cannot cancel/hold the order
"KRN",.84,700000.042,2,0)
^^1^1^3071205^
"KRN",.84,700000.042,2,1,0)
W^Cannot cancel/hold the order referenced by active case(s) in file #70.
"KRN",.84,700000.043,-1)
0^42
"KRN",.84,700000.043,0)
700000.043^1^^RADIOLOGY/NUCLEAR MEDICINE^No exams have been registered
"KRN",.84,700000.043,2,0)
^^1^1^3071121^
"KRN",.84,700000.043,2,1,0)
E^No exams have been registered.
"KRN",.84,700000.044,-1)
0^43
"KRN",.84,700000.044,0)
700000.044^1^^RADIOLOGY/NUCLEAR MEDICINE^Exam status cannot be  changed to ...
"KRN",.84,700000.044,2,0)
^^1^1^3080107^
"KRN",.84,700000.044,2,1,0)
E^Status of '|2|' case cannot be changed to '|1|'.
"KRN",.84,700000.045,-1)
0^44
"KRN",.84,700000.045,0)
700000.045^1^^RADIOLOGY/NUCLEAR MEDICINE^Has not been implemented yet
"KRN",.84,700000.045,2,0)
^^1^1^3071121^
"KRN",.84,700000.045,2,1,0)
E^|1| has not been implemented yet.
"KRN",.84,700000.046,-1)
0^45
"KRN",.84,700000.046,0)
700000.046^1^^RADIOLOGY/NUCLEAR MEDICINE^Cannot create checkpoint
"KRN",.84,700000.046,2,0)
^^1^1^3071121^
"KRN",.84,700000.046,2,1,0)
E^Cannot create the '|1|' checkpoint!
"KRN",.84,700000.047,-1)
0^46
"KRN",.84,700000.047,0)
700000.047^1^^RADIOLOGY/NUCLEAR MEDICINE^Cannot complete checkpoint
"KRN",.84,700000.047,2,0)
^^1^1^3071121^
"KRN",.84,700000.047,2,1,0)
E^Cannot complete the '|1|' checkpoint!
"KRN",.84,700000.048,-1)
0^48
"KRN",.84,700000.048,0)
700000.048^1^^RADIOLOGY/NUCLEAR MEDICINE^Error returned by API
"KRN",.84,700000.048,2,0)
^^1^1^3071121^
"KRN",.84,700000.048,2,1,0)
E^Error code '|1|' is returned by the '|2|'
"KRN",.84,700000.049,-1)
0^50
"KRN",.84,700000.049,0)
700000.049^1^^RADIOLOGY/NUCLEAR MEDICINE^Only single procedure for case editing
"KRN",.84,700000.049,2,0)
^^1^1^3071213^
"KRN",.84,700000.049,2,1,0)
E^Only a single 'series' or 'detailed' procedure is allowed.
"KRN",.84,700000.05,-1)
0^51
"KRN",.84,700000.05,0)
700000.05^1^^RADIOLOGY/NUCLEAR MEDICINE^Cannot get (sub)file root
"KRN",.84,700000.05,2,0)
^^1^1^3071214^
"KRN",.84,700000.05,2,1,0)
E^Cannot get the root of the (sub)file #|1| (IENS='|2|').
"KRN",.84,700000.051,-1)
0^52
"KRN",.84,700000.051,0)
700000.051^1^^RADIOLOGY/NUCLEAR MEDICINE^Exam(s) cannot be canceled
"KRN",.84,700000.051,2,0)
^^1^1^3071215^
"KRN",.84,700000.051,2,1,0)
W^Exam(s) cannot be canceled.
"KRN",.84,700000.052,-1)
0^53
"KRN",.84,700000.052,0)
700000.052^1^^RADIOLOGY/NUCLEAR MEDICINE^Stub report cannot be created
"KRN",.84,700000.052,2,0)
^^1^1^3080103^
"KRN",.84,700000.052,2,1,0)
E^Stub report cannot be created in the file #74.
"KRN",.84,700000.053,-1)
0^55
"KRN",.84,700000.053,0)
700000.053^1^^RADIOLOGY/NUCLEAR MEDICINE^Cannot use A flag with parent procedure
"KRN",.84,700000.053,2,0)
^^1^1^3080213^
"KRN",.84,700000.053,2,1,0)
E^The "A" flag cannot be used with a "parent" Radiology procedure.
"KRN",.84,700000.053,5,0)
^.841^1^1
"KRN",.84,700000.053,5,1,0)
RAERR01^MSG
"KRN",.84,700000.053,5,"B","RAERR01",1)

"KRN",.84,700000.054,-1)
0^56
"KRN",.84,700000.054,0)
700000.054^1^^RADIOLOGY/NUCLEAR MEDICINE^Cannot add this case to the member set
"KRN",.84,700000.054,2,0)
^^1^1^3080214^
"KRN",.84,700000.054,2,1,0)
E^This case cannot be added to the existing member set.
"KRN",.84,700000.054,5,0)
^.841^1^1
"KRN",.84,700000.054,5,1,0)
RAERR01^MSG
"KRN",.84,700000.054,5,"B","RAERR01",1)

"KRN",.84,700000.055,-1)
0^57
"KRN",.84,700000.055,0)
700000.055^1^^RADIOLOGY/NUCLEAR MEDICINE^Procedure is incompatible with exam status
"KRN",.84,700000.055,2,0)
^^1^1^3080219^
"KRN",.84,700000.055,2,1,0)
E^Procedure imaging type differs from that of exam status.
"KRN",.84,700000.055,5,0)
^.841^1^1
"KRN",.84,700000.055,5,1,0)
RAERR01^MSG
"KRN",.84,700000.055,5,"B","RAERR01",1)

"KRN",.84,700000.056,-1)
0^58
"KRN",.84,700000.056,0)
700000.056^1^^RADIOLOGY/NUCLEAR MEDICINE^Required variable has no value
"KRN",.84,700000.056,2,0)
^^1^1^3080220^
"KRN",.84,700000.056,2,1,0)
E^Required variable/node '|1|' has no value.
"KRN",.84,700000.056,5,0)
^.841^1^1
"KRN",.84,700000.056,5,1,0)
RAERR01^MSG
"KRN",.84,700000.056,5,"B","RAERR01",1)

"KRN",.84,700000.057,-1)
0^59
"KRN",.84,700000.057,0)
700000.057^1^^RADIOLOGY/NUCLEAR MEDICINE^Missing required variables
"KRN",.84,700000.057,2,0)
^^1^1^3080220^
"KRN",.84,700000.057,2,1,0)
E^Missing required variables/nodes.
"KRN",.84,700000.057,5,0)
^.841^1^1
"KRN",.84,700000.057,5,1,0)
RAERR01^MSG
"KRN",.84,700000.057,5,"B","RAERR01",1)

"KRN",.84,700000.058,-1)
0^60
"KRN",.84,700000.058,0)
700000.058^1^^RADIOLOGY/NUCLEAR MEDICINE^Invalid parameter name
"KRN",.84,700000.058,2,0)
^^1^1^3080222^
"KRN",.84,700000.058,2,1,0)
E^Invalid/unsupported parameter name: '|1|'.
"KRN",.84,700000.058,5,0)
^.841^1^1
"KRN",.84,700000.058,5,1,0)
RAERR01^MSG
"KRN",.84,700000.058,5,"B","RAERR01",1)

"KRN",.84,700000.059,-1)
0^61
"KRN",.84,700000.059,0)
700000.059^1^^RADIOLOGY/NUCLEAR MEDICINE^No exam status with such category
"KRN",.84,700000.059,2,0)
^^1^1^3081001^
"KRN",.84,700000.059,2,1,0)
E^There is no exam status with '|1|' category for '|2|'.
"KRN",.84,700005.001,-1)
0^47
"KRN",.84,700005.001,0)
700005.001^2^y^RADIOLOGY/NUCLEAR MEDICINE^KIDS abort message
"KRN",.84,700005.001,2,0)
^.844^3^3^3071102^^^
"KRN",.84,700005.001,2,1,0)
There was an error during the KIDS |KIDS|. Please review the installation 
"KRN",.84,700005.001,2,2,0)
log, fix the error(s), and restart the installation using the Restart 
"KRN",.84,700005.001,2,3,0)
Install of Package(s) [XPD RESTART INSTALL] option.
"KRN",.84,700005.001,3,0)
^.845^1^1
"KRN",.84,700005.001,3,1,0)
KIDS^Name of the install phase
"KRN",.84,700005.001,5,0)
^.841^1^1
"KRN",.84,700005.001,5,1,0)
RAKIDS^ABORTMSG
"KRN",.84,700005.001,5,"B","RAKIDS",1)

"KRN",.84,700005.002,-1)
0^54
"KRN",.84,700005.002,0)
700005.002^2^y^RADIOLOGY/NUCLEAR MEDICINE^Lock description
"KRN",.84,700005.002,2,0)
^^2^2^3080114^
"KRN",.84,700005.002,2,1,0)
Locked by |NAME| about |LDT|; Job #|JOB|
"KRN",.84,700005.002,2,2,0)
; Task #|TASK|
"KRN",.84,700005.002,3,0)
^.845^4^4
"KRN",.84,700005.002,3,1,0)
NAME^User/process name
"KRN",.84,700005.002,3,2,0)
LDT^Date/time of the lock
"KRN",.84,700005.002,3,3,0)
JOB^Job number
"KRN",.84,700005.002,3,4,0)
TASK^Task number
"KRN",.84,700005.002,5,0)
^.841^1^1
"KRN",.84,700005.002,5,1,0)
RALOCK^TEXT
"KRN",.84,700005.002,5,"B","RALOCK",1)

"KRN",8994,2590,-1)
0^3
"KRN",8994,2590,0)
RAMAG EXAM ORDER^ORDER^RAMAGRP1^2^A^^^1
"KRN",8994,2590,1,0)
^8994.01^3^3^3080404^^^
"KRN",8994,2590,1,1,0)
The RAMAG EXAM ORDER remote procedure requests a Radiology exam for the
"KRN",8994,2590,1,2,0)
patient and returns the IEN of the new order in the RAD/NUC MED ORDERS
"KRN",8994,2590,1,3,0)
file (#75.1). It also sends all required notifications..
"KRN",8994,2590,2,0)
^8994.02A^9^9
"KRN",8994,2590,2,1,0)
RADFN^1^^1^1
"KRN",8994,2590,2,1,1,0)
^8994.021^1^1^3070621^^
"KRN",8994,2590,2,1,1,1,0)
Patient IEN (DFN).
"KRN",8994,2590,2,2,0)
RAMLC^1^^1^2
"KRN",8994,2590,2,2,1,0)
^8994.021^1^1^3070621^^
"KRN",8994,2590,2,2,1,1,0)
IEN of the imaging location in the IMAGING LOCATIONS file (#79.1).
"KRN",8994,2590,2,3,0)
RAPROC^1^^1^3
"KRN",8994,2590,2,3,1,0)
^8994.021^5^5^3070621^^
"KRN",8994,2590,2,3,1,1,0)
Radiology procedure and optional modifiers
"KRN",8994,2590,2,3,1,2,0)
  ^01: Procedure IEN in the RAD/NUC MED PROCEDURES file (#71)
"KRN",8994,2590,2,3,1,3,0)
  ^02: Optional procedure modifiers (IENs in
"KRN",8994,2590,2,3,1,4,0)
  ...  the PROCEDURE MODIFIERS file (#71.2))
"KRN",8994,2590,2,3,1,5,0)
  ^nn:
"KRN",8994,2590,2,4,0)
REQDTE^1^^1^4
"KRN",8994,2590,2,4,1,0)
^^2^2^3080116^
"KRN",8994,2590,2,4,1,1,0)
Desired date for the exam in HL7 format (TS): YYYYMMDD. If time is 
"KRN",8994,2590,2,4,1,2,0)
provided, it is ignored. The date must be exact.
"KRN",8994,2590,2,5,0)
RACAT^1^^1^5
"KRN",8994,2590,2,5,1,0)
^^2^2^3080222^
"KRN",8994,2590,2,5,1,1,0)
Exam category: internal value of the CATEGORY OF EXAM field (4) of the 
"KRN",8994,2590,2,5,1,2,0)
RAD/NUC MED ORDERS file (#75.1).
"KRN",8994,2590,2,6,0)
REQLOC^1^^1^6
"KRN",8994,2590,2,6,1,0)
^^1^1^3070515^
"KRN",8994,2590,2,6,1,1,0)
IEN of the requesting location in the HOSPITAL LOCATION file (#44).
"KRN",8994,2590,2,7,0)
REQPHYS^1^^1^7
"KRN",8994,2590,2,7,1,0)
^^1^1^3070515^
"KRN",8994,2590,2,7,1,1,0)
IEN of the requesting physician in the NEW PERSON file (#200).
"KRN",8994,2590,2,8,0)
REASON^1^^1^8
"KRN",8994,2590,2,8,1,0)
^8994.021^2^2^3070621^^
"KRN",8994,2590,2,8,1,1,0)
Reason for study. See the REASON FOR STUDY field (1.1) of the RAD/NUC MED 
"KRN",8994,2590,2,8,1,2,0)
ORDERS file (#75.1) for details.
"KRN",8994,2590,2,9,0)
RAMSC^2^^^9
"KRN",8994,2590,2,9,1,0)
^^54^54^3080404^
"KRN",8994,2590,2,9,1,1,0)
Items of this list define miscellaneous/optional order parameters. Each
"KRN",8994,2590,2,9,1,2,0)
record has 3 or more pieces separated by '^':
"KRN",8994,2590,2,9,1,3,0)
 
"KRN",8994,2590,2,9,1,4,0)
  ^01: Parameter name
"KRN",8994,2590,2,9,1,5,0)
  ^02: Index (for multiples and word-processing values)
"KRN",8994,2590,2,9,1,6,0)
  ^03: Value1
"KRN",8994,2590,2,9,1,7,0)
  ^04: Value2
"KRN",8994,2590,2,9,1,8,0)
  ...
"KRN",8994,2590,2,9,1,9,0)
 
"KRN",8994,2590,2,9,1,10,0)
The following parameters are supported by this remote procedure:
"KRN",8994,2590,2,9,1,11,0)
  
"KRN",8994,2590,2,9,1,12,0)
  CLINHIST^{Seq#}^{Line of clinical history}
"KRN",8994,2590,2,9,1,13,0)
    Text for the CLINICAL HISTORY FOR EXAM field (400)
"KRN",8994,2590,2,9,1,14,0)
    of the file #75.1
"KRN",8994,2590,2,9,1,15,0)
 
"KRN",8994,2590,2,9,1,16,0)
  ISOLPROC^^{n|y}
"KRN",8994,2590,2,9,1,17,0)
    Value for the ISOLATION PROCEDURES field (24)
"KRN",8994,2590,2,9,1,18,0)
    of the file #75.1
"KRN",8994,2590,2,9,1,19,0)
 
"KRN",8994,2590,2,9,1,20,0)
  PREGNANT^^{n|u|y}
"KRN",8994,2590,2,9,1,21,0)
    Value for the PREGNANT field (13) of the file #75.1
"KRN",8994,2590,2,9,1,22,0)
 
"KRN",8994,2590,2,9,1,23,0)
  PREOPDT^^{Internal date value}
"KRN",8994,2590,2,9,1,24,0)
    Date and time for the PRE-OP SCHEDULED DATE/TIME
"KRN",8994,2590,2,9,1,25,0)
    field (12) of the file #75.1 in HL7 format (TS):
"KRN",8994,2590,2,9,1,26,0)
    YYYYMMDD[HHMM[+/-ZZZZ]]. If seconds are provided,
"KRN",8994,2590,2,9,1,27,0)
    they are ignored. The date must be exact.
"KRN",8994,2590,2,9,1,28,0)
 
"KRN",8994,2590,2,9,1,29,0)
  REQNATURE^^{e|i|p|s|v|w}
"KRN",8994,2590,2,9,1,30,0)
    Value for the NATURE OF (NEW) ORDER ACTIVITY field (26)
"KRN",8994,2590,2,9,1,31,0)
    of the file #75.1
"KRN",8994,2590,2,9,1,32,0)
 
"KRN",8994,2590,2,9,1,33,0)
  REQURG^^{1|2|9}
"KRN",8994,2590,2,9,1,34,0)
    Value for the REQUEST URGENCY field (6)
"KRN",8994,2590,2,9,1,35,0)
    of the file #75.1
"KRN",8994,2590,2,9,1,36,0)
 
"KRN",8994,2590,2,9,1,37,0)
  TRANSPMODE^^{a|p|s|w}
"KRN",8994,2590,2,9,1,38,0)
    Value for the MODE OF TRANSPORT field (19)
"KRN",8994,2590,2,9,1,39,0)
    of the file #75.1
"KRN",8994,2590,2,9,1,40,0)
 
"KRN",8994,2590,2,9,1,41,0)
Records can be added to the list in any order. See the comments preceding
"KRN",8994,2590,2,9,1,42,0)
the $$ORDER^RAMAG02 for more details.
"KRN",8994,2590,2,9,1,43,0)
 
"KRN",8994,2590,2,9,1,44,0)
Example:
"KRN",8994,2590,2,9,1,45,0)
 
"KRN",8994,2590,2,9,1,46,0)
  with RPCBroker.Param[8] do
"KRN",8994,2590,2,9,1,47,0)
    begin
"KRN",8994,2590,2,9,1,48,0)
      PType := list;
"KRN",8994,2590,2,9,1,49,0)
      Mult[1] := 'PREGNANT^^y';
"KRN",8994,2590,2,9,1,50,0)
      Mult[2] := 'PREOPDT^^200001041400';
"KRN",8994,2590,2,9,1,51,0)
      Mult[3] := 'CLINHIST^1^Clinical history line #1';
"KRN",8994,2590,2,9,1,52,0)
      Mult[4] := 'CLINHIST^2^Clinical history line #2';
"KRN",8994,2590,2,9,1,53,0)
      Mult[5] := 'CLINHIST^3^Clinical history line #3';
"KRN",8994,2590,2,9,1,54,0)
    end;
"KRN",8994,2590,2,"B","RACAT",5)

"KRN",8994,2590,2,"B","RADFN",1)

"KRN",8994,2590,2,"B","RAMLC",2)

"KRN",8994,2590,2,"B","RAMSC",9)

"KRN",8994,2590,2,"B","RAPROC",3)

"KRN",8994,2590,2,"B","REASON",8)

"KRN",8994,2590,2,"B","REQDTE",4)

"KRN",8994,2590,2,"B","REQLOC",6)

"KRN",8994,2590,2,"B","REQPHYS",7)

"KRN",8994,2590,2,"PARAMSEQ",1,1)

"KRN",8994,2590,2,"PARAMSEQ",2,2)

"KRN",8994,2590,2,"PARAMSEQ",3,3)

"KRN",8994,2590,2,"PARAMSEQ",4,4)

"KRN",8994,2590,2,"PARAMSEQ",5,5)

"KRN",8994,2590,2,"PARAMSEQ",6,6)

"KRN",8994,2590,2,"PARAMSEQ",7,7)

"KRN",8994,2590,2,"PARAMSEQ",8,8)

"KRN",8994,2590,2,"PARAMSEQ",9,9)

"KRN",8994,2590,3,0)
^8994.03^24^24^3080222^^
"KRN",8994,2590,3,1,0)
A negative value of the first '^'-piece of the Results[0] indicates that
"KRN",8994,2590,3,2,0)
an error occurred during the execution of the remote procedure. In this
"KRN",8994,2590,3,3,0)
case, the second piece of the Results[0] will contain number of the error
"KRN",8994,2590,3,4,0)
descriptors returned in the subsequent nodes of the Results array.
"KRN",8994,2590,3,5,0)
 
"KRN",8994,2590,3,6,0)
  Results[0]            Result descriptor
"KRN",8994,2590,3,7,0)
                          ^01: The last error code
"KRN",8994,2590,3,8,0)
                          ^02: Number of error descriptors
"KRN",8994,2590,3,9,0)
  
"KRN",8994,2590,3,10,0)
  Results[i]            Error descriptor
"KRN",8994,2590,3,11,0)
                          ^01: Error code
"KRN",8994,2590,3,12,0)
                          ^02: Message
"KRN",8994,2590,3,13,0)
                          ^03: Error location
"KRN",8994,2590,3,14,0)
                          ^04: Error type
"KRN",8994,2590,3,15,0)
  
"KRN",8994,2590,3,16,0)
  Results[j]            Line of the additional info
"KRN",8994,2590,3,17,0)
                          ^01: "" (empty)
"KRN",8994,2590,3,18,0)
                          ^02: Text
"KRN",8994,2590,3,19,0)
 
"KRN",8994,2590,3,20,0)
Error descriptors are returned in reverse chronological order (most recent
"KRN",8994,2590,3,21,0)
first).
"KRN",8994,2590,3,22,0)
 
"KRN",8994,2590,3,23,0)
Otherwise, the Results[0] contains IEN of the new order in the RAD/NUC MED
"KRN",8994,2590,3,24,0)
ORDERS file (#75.1).
"KRN",8994,2591,-1)
0^4
"KRN",8994,2591,0)
RAMAG EXAM REGISTER^REGISTER^RAMAGRP1^2^A^^^1
"KRN",8994,2591,1,0)
^8994.01^3^3^3090224^^^^
"KRN",8994,2591,1,1,0)
The RAMAG EXAM REGISTER remote procedure registers the exam and returns
"KRN",8994,2591,1,2,0)
identifiers of the new case(s) in the RAD/NUC MED PATIENT file (#70). It
"KRN",8994,2591,1,3,0)
also sends all required notifications.
"KRN",8994,2591,2,0)
^8994.02A^3^3
"KRN",8994,2591,2,1,0)
RAOIFN^1^^1^1
"KRN",8994,2591,2,1,1,0)
^8994.021^1^1^3070621^^
"KRN",8994,2591,2,1,1,1,0)
IEN of the order in the RAD/NUC MED ORDERS file (#75.1).
"KRN",8994,2591,2,2,0)
EXMDTE^1^^1^2
"KRN",8994,2591,2,2,1,0)
^^3^3^3090224^
"KRN",8994,2591,2,2,1,1,0)
Date and time of the exam in HL7 format (TS): YYYYMMDDHHMM[+/-ZZZZ]. If 
"KRN",8994,2591,2,2,1,2,0)
seconds are provided, they are ignored. The date must be exact and the 
"KRN",8994,2591,2,2,1,3,0)
time is required.
"KRN",8994,2591,2,3,0)
RAMSC^2^^^3
"KRN",8994,2591,2,3,1,0)
^8994.021^83^83^3080606^^^
"KRN",8994,2591,2,3,1,1,0)
Items of this list define miscellaneous/optional exam parameters. Each
"KRN",8994,2591,2,3,1,2,0)
record has 3 or more pieces separated by '^':
"KRN",8994,2591,2,3,1,3,0)
 
"KRN",8994,2591,2,3,1,4,0)
  ^01: Parameter name
"KRN",8994,2591,2,3,1,5,0)
  ^02: Index (for multiples and word-processing values)
"KRN",8994,2591,2,3,1,6,0)
  ^03: Value1
"KRN",8994,2591,2,3,1,7,0)
  ^04: Value2
"KRN",8994,2591,2,3,1,8,0)
  ...
"KRN",8994,2591,2,3,1,9,0)
 
"KRN",8994,2591,2,3,1,10,0)
The following parameters are supported by this remote procedure:
"KRN",8994,2591,2,3,1,11,0)
 
"KRN",8994,2591,2,3,1,12,0)
  BEDSECT^^{IEN #42.4}
"KRN",8994,2591,2,3,1,13,0)
    Internal value for the BEDSECTION field (19) of
"KRN",8994,2591,2,3,1,14,0)
    the EXAMINATIONS multiple (sub-file #70.03).
"KRN",8994,2591,2,3,1,15,0)
 
"KRN",8994,2591,2,3,1,16,0)
  EXAMCAT^^{C|E|I|O|R|S}
"KRN",8994,2591,2,3,1,17,0)
    Value for the CATEGORY OF EXAM field (4) of the
"KRN",8994,2591,2,3,1,18,0)
    EXAMINATIONS multiple (sub-file #70.03).
"KRN",8994,2591,2,3,1,19,0)
 
"KRN",8994,2591,2,3,1,20,0)
  FLAGS^^{flags}
"KRN",8994,2591,2,3,1,21,0)
    Flags that control the execution (can be combined):
"KRN",8994,2591,2,3,1,22,0)
 
"KRN",8994,2591,2,3,1,23,0)
    A  If this flag is provided, then the registration 
"KRN",8994,2591,2,3,1,24,0)
       entry point adds the new case to the existing
"KRN",8994,2591,2,3,1,25,0)
       ones with the same date/time instead of 
"KRN",8994,2591,2,3,1,26,0)
       returning the error code -28.
"KRN",8994,2591,2,3,1,27,0)
 
"KRN",8994,2591,2,3,1,28,0)
       If the existing date/time record stores an exam 
"KRN",8994,2591,2,3,1,29,0)
       set and the "D" flag is not provided, then the
"KRN",8994,2591,2,3,1,30,0)
       error code -54 is returned.
"KRN",8994,2591,2,3,1,31,0)
 
"KRN",8994,2591,2,3,1,32,0)
    D  If there is an existing case with the same 
"KRN",8994,2591,2,3,1,33,0)
       date/time, then the time of the new case is
"KRN",8994,2591,2,3,1,34,0)
       incremented by 1 minute until an unused date/time
"KRN",8994,2591,2,3,1,35,0)
       is found.
"KRN",8994,2591,2,3,1,36,0)
 
"KRN",8994,2591,2,3,1,37,0)
       If the "A" flag is also provided, then time 
"KRN",8994,2591,2,3,1,38,0)
       increments also stop when a non-examset
"KRN",8994,2591,2,3,1,39,0)
       date/time record is found.
"KRN",8994,2591,2,3,1,40,0)
 
"KRN",8994,2591,2,3,1,41,0)
       If the date is also changed during the time 
"KRN",8994,2591,2,3,1,42,0)
       modification, then the case is not registered and
"KRN",8994,2591,2,3,1,43,0)
       the error code -29 is returned.
"KRN",8994,2591,2,3,1,44,0)
 
"KRN",8994,2591,2,3,1,45,0)
  PRINCLIN^^{IEN #44}
"KRN",8994,2591,2,3,1,46,0)
    Internal value for the PRINCIPAL CLINIC field (8) of
"KRN",8994,2591,2,3,1,47,0)
    the EXAMINATIONS multiple (sub-file #70.03).
"KRN",8994,2591,2,3,1,48,0)
 
"KRN",8994,2591,2,3,1,49,0)
  RAPROC^{Seq#}^{IEN #71}^{IEN #71.2}^{IEN #71.2}^...
"KRN",8994,2591,2,3,1,50,0)
    Radiology procedure and optional modifiers.
"KRN",8994,2591,2,3,1,51,0)
 
"KRN",8994,2591,2,3,1,52,0)
  SERVICE^^{IEN #49}
"KRN",8994,2591,2,3,1,53,0)
    Internal value for the SERVICE field (7) of
"KRN",8994,2591,2,3,1,54,0)
    the EXAMINATIONS multiple (sub-file #70.03).
"KRN",8994,2591,2,3,1,55,0)
 
"KRN",8994,2591,2,3,1,56,0)
  SINGLERPT^^{0|1}
"KRN",8994,2591,2,3,1,57,0)
    If this parameter is defined and not 0, then all
"KRN",8994,2591,2,3,1,58,0)
    cases should be associated with the same order
"KRN",8994,2591,2,3,1,59,0)
    and they will share the same report. See the
"KRN",8994,2591,2,3,1,60,0)
    MEMBER OF SET (25) and IMAGING ORDER (11) fields
"KRN",8994,2591,2,3,1,61,0)
    of the sub-file #70.03 for more details.
"KRN",8994,2591,2,3,1,62,0)
 
"KRN",8994,2591,2,3,1,63,0)
  TECHCOMM^^{text}
"KRN",8994,2591,2,3,1,64,0)
    Value for the TECHNOLOGIST COMMENT field (4) of the
"KRN",8994,2591,2,3,1,65,0)
    ACTIVITY LOG multiple (sub-file #70.07). 
"KRN",8994,2591,2,3,1,66,0)
 
"KRN",8994,2591,2,3,1,67,0)
  WARD^^{IEN #42}
"KRN",8994,2591,2,3,1,68,0)
    Internal value for the WARD field (6) of
"KRN",8994,2591,2,3,1,69,0)
    the EXAMINATIONS multiple (sub-file #70.03).
"KRN",8994,2591,2,3,1,70,0)
 
"KRN",8994,2591,2,3,1,71,0)
Records can be added to the list in any order. See the comments preceding
"KRN",8994,2591,2,3,1,72,0)
the $$REGISTER^RAMAG03 for more details.
"KRN",8994,2591,2,3,1,73,0)
 
"KRN",8994,2591,2,3,1,74,0)
Example:
"KRN",8994,2591,2,3,1,75,0)
 
"KRN",8994,2591,2,3,1,76,0)
  with RPCBroker.Param[2] do
"KRN",8994,2591,2,3,1,77,0)
    begin
"KRN",8994,2591,2,3,1,78,0)
      PType := list;
"KRN",8994,2591,2,3,1,79,0)
      Mult[1] := 'BEDSECT^^12';
"KRN",8994,2591,2,3,1,80,0)
      Mult[2] := 'SERVICE^^43';
"KRN",8994,2591,2,3,1,81,0)
      Mult[3] := 'WARD^^456';
"KRN",8994,2591,2,3,1,82,0)
      Mult[4] := 'EXAMCAT^^I';
"KRN",8994,2591,2,3,1,83,0)
    end;
"KRN",8994,2591,2,"B","EXMDTE",2)

"KRN",8994,2591,2,"B","RAMSC",3)

"KRN",8994,2591,2,"B","RAOIFN",1)

"KRN",8994,2591,2,"PARAMSEQ",1,1)

"KRN",8994,2591,2,"PARAMSEQ",2,2)

"KRN",8994,2591,2,"PARAMSEQ",3,3)

"KRN",8994,2591,3,0)
^8994.03^39^39^3090224^^
"KRN",8994,2591,3,1,0)
A negative value of the first '^'-piece of the Results[0] indicates that
"KRN",8994,2591,3,2,0)
an error occurred during the execution of the remote procedure. In this
"KRN",8994,2591,3,3,0)
case, the second piece of the Results[0] will contain number of the error
"KRN",8994,2591,3,4,0)
descriptors returned in the subsequent nodes of the Results array.
"KRN",8994,2591,3,5,0)
 
"KRN",8994,2591,3,6,0)
  Results[0]            Result descriptor
"KRN",8994,2591,3,7,0)
                          ^01: The last error code
"KRN",8994,2591,3,8,0)
                          ^02: Number of error descriptors
"KRN",8994,2591,3,9,0)
  
"KRN",8994,2591,3,10,0)
  Results[i]            Error descriptor
"KRN",8994,2591,3,11,0)
                          ^01: Error code
"KRN",8994,2591,3,12,0)
                          ^02: Message
"KRN",8994,2591,3,13,0)
                          ^03: Error location
"KRN",8994,2591,3,14,0)
                          ^04: Error type
"KRN",8994,2591,3,15,0)
  
"KRN",8994,2591,3,16,0)
  Results[j]            Line of the additional info
"KRN",8994,2591,3,17,0)
                          ^01: "" (empty)
"KRN",8994,2591,3,18,0)
                          ^02: Text
"KRN",8994,2591,3,19,0)
 
"KRN",8994,2591,3,20,0)
Error descriptors are returned in reverse chronological order (most recent
"KRN",8994,2591,3,21,0)
first).
"KRN",8994,2591,3,22,0)
 
"KRN",8994,2591,3,23,0)
Otherwise, number of registered examinations is returned in the Results[0]
"KRN",8994,2591,3,24,0)
and identifiers of the examinations are returned in the subsequent
"KRN",8994,2591,3,25,0)
elements of the array. 
"KRN",8994,2591,3,26,0)
 
"KRN",8994,2591,3,27,0)
  Results[0]            Number of registered examinations 
"KRN",8994,2591,3,28,0)
 
"KRN",8994,2591,3,29,0)
  Results[i]            Exam/case identifiers
"KRN",8994,2591,3,30,0)
                          ^01: IEN of the patient in the file #70
"KRN",8994,2591,3,31,0)
                          ^02: IEN in the REGISTERED EXAMS multiple
"KRN",8994,2591,3,32,0)
                          ^03: IEN in the EXAMINATIONS multiple
"KRN",8994,2591,3,33,0)
                          ^04: Case number
"KRN",8994,2591,3,34,0)
                          ^05: Accession number
"KRN",8994,2591,3,35,0)
                                SSS-MMDDYY-NNNNN  if RA*5*47 is installed;
"KRN",8994,2591,3,36,0)
                                    MMDDYY-NNNNN  otherwise.
"KRN",8994,2591,3,37,0)
                          ^06: Actual date and time of the case (value of
"KRN",8994,2591,3,38,0)
                               the EXAM DATE field) in HL7 format (TS):
"KRN",8994,2591,3,39,0)
                               YYYYMMDD[HHMM[+/-ZZZZ]]
"KRN",8994,2592,-1)
0^5
"KRN",8994,2592,0)
RAMAG ORDER CANCEL^ORDCANC^RAMAGRP1^2^A^^^1
"KRN",8994,2592,1,0)
^8994.01^6^6^3080404^^^^
"KRN",8994,2592,1,1,0)
The RAMAG ORDER CANCEL remote procedure cancels/holds the Radiology order
"KRN",8994,2592,1,2,0)
and sends all required notifications.
"KRN",8994,2592,1,3,0)
 
"KRN",8994,2592,1,4,0)
NOTE: If there are active cases in the RAD/NUC MED PATIENT file (#70)
"KRN",8994,2592,1,5,0)
      associated with an order, this remote procedure neither cancels
"KRN",8994,2592,1,6,0)
      nor holds the order and returns the error code -42.
"KRN",8994,2592,2,0)
^8994.02A^3^3
"KRN",8994,2592,2,1,0)
RAOIFN^1^^1^1
"KRN",8994,2592,2,1,1,0)
^^1^1^3070516^
"KRN",8994,2592,2,1,1,1,0)
IEN of the order in the RAD/NUC MED ORDERS file (#75.1).
"KRN",8994,2592,2,2,0)
RAREASON^1^^1^2
"KRN",8994,2592,2,2,1,0)
^^19^19^3070621^
"KRN",8994,2592,2,2,1,1,0)
Cancel/hold reason: either IEN of a record of the RAD/NUC MED REASON file
"KRN",8994,2592,2,2,1,2,0)
(#75.2) or a valid synonym (see SYNONYM field (3) of that file).
"KRN",8994,2592,2,2,1,3,0)
 
"KRN",8994,2592,2,2,1,4,0)
The referenced record must have the appropriate type (see TYPE OF REASON
"KRN",8994,2592,2,2,1,5,0)
field (2) of the file #75.2):
"KRN",8994,2592,2,2,1,6,0)
 
"KRN",8994,2592,2,2,1,7,0)
 * If the reason record has the CANCEL REQUEST (1) type,
"KRN",8994,2592,2,2,1,8,0)
   then the 'HOLDESC' (see the RAMSC parameter) is ignored
"KRN",8994,2592,2,2,1,9,0)
   and the order is canceled.
"KRN",8994,2592,2,2,1,10,0)
 
"KRN",8994,2592,2,2,1,11,0)
 * If the reason record is of the HOLD REQUEST (3) type,
"KRN",8994,2592,2,2,1,12,0)
   then the order is put on hold. If the 'HOLDESC' parameter
"KRN",8994,2592,2,2,1,13,0)
   is defined, the text is stored into the HOLD DESCRIPTION
"KRN",8994,2592,2,2,1,14,0)
   field.
"KRN",8994,2592,2,2,1,15,0)
 
"KRN",8994,2592,2,2,1,16,0)
 * If the record is of the GENERAL REQUEST  type (9), then
"KRN",8994,2592,2,2,1,17,0)
   the new order status is determined by the 'HOLDESC'
"KRN",8994,2592,2,2,1,18,0)
   parameter. If it is defined, then the order is put on
"KRN",8994,2592,2,2,1,19,0)
   hold; otherwise, the order is canceled.
"KRN",8994,2592,2,3,0)
RAMSC^2^^^3
"KRN",8994,2592,2,3,1,0)
^^26^26^3080404^
"KRN",8994,2592,2,3,1,1,0)
Items of this list define miscellaneous/optional parameters. Each record
"KRN",8994,2592,2,3,1,2,0)
has 3 or more pieces separated by '^':
"KRN",8994,2592,2,3,1,3,0)
 
"KRN",8994,2592,2,3,1,4,0)
  ^01: Parameter name
"KRN",8994,2592,2,3,1,5,0)
  ^02: Index (for multiples and word-processing values)
"KRN",8994,2592,2,3,1,6,0)
  ^03: Value1
"KRN",8994,2592,2,3,1,7,0)
  ^04: Value2
"KRN",8994,2592,2,3,1,8,0)
  ...
"KRN",8994,2592,2,3,1,9,0)
 
"KRN",8994,2592,2,3,1,10,0)
The following parameters are supported by this remote procedure:
"KRN",8994,2592,2,3,1,11,0)
  
"KRN",8994,2592,2,3,1,12,0)
  HOLDESC^{Seq#}^{Line of hold description}
"KRN",8994,2592,2,3,1,13,0)
    Text for the HOLD DESCRIPTION field (25)
"KRN",8994,2592,2,3,1,14,0)
    of the file #75.1.
"KRN",8994,2592,2,3,1,15,0)
 
"KRN",8994,2592,2,3,1,16,0)
Records can be added to the list in any order. See the comments preceding
"KRN",8994,2592,2,3,1,17,0)
the $$ORDCANC^RAMAG04 for more details.
"KRN",8994,2592,2,3,1,18,0)
 
"KRN",8994,2592,2,3,1,19,0)
Examples:
"KRN",8994,2592,2,3,1,20,0)
 
"KRN",8994,2592,2,3,1,21,0)
  with RPCBroker.Param[2] do
"KRN",8994,2592,2,3,1,22,0)
    begin
"KRN",8994,2592,2,3,1,23,0)
      PType := list;
"KRN",8994,2592,2,3,1,24,0)
      Mult[1] := 'HOLDESC^1^Hold description line #1';
"KRN",8994,2592,2,3,1,25,0)
      Mult[2] := 'HOLDESC^2^Hold description line #2';
"KRN",8994,2592,2,3,1,26,0)
    end;
"KRN",8994,2592,2,"B","RAMSC",3)

"KRN",8994,2592,2,"B","RAOIFN",1)

"KRN",8994,2592,2,"B","RAREASON",2)

"KRN",8994,2592,2,"PARAMSEQ",1,1)

"KRN",8994,2592,2,"PARAMSEQ",2,2)

"KRN",8994,2592,2,"PARAMSEQ",3,3)

"KRN",8994,2592,3,0)
^8994.03^23^23^3080404^^
"KRN",8994,2592,3,1,0)
A negative value of the first '^'-piece of the Results[0] indicates that
"KRN",8994,2592,3,2,0)
an error occurred during the execution of the remote procedure. In this
"KRN",8994,2592,3,3,0)
case, the second piece of the Results[0] will contain number of the error
"KRN",8994,2592,3,4,0)
descriptors returned in the subsequent nodes of the Results array.
"KRN",8994,2592,3,5,0)
 
"KRN",8994,2592,3,6,0)
  Results[0]            Result descriptor
"KRN",8994,2592,3,7,0)
                          ^01: The last error code
"KRN",8994,2592,3,8,0)
                          ^02: Number of error descriptors
"KRN",8994,2592,3,9,0)
  
"KRN",8994,2592,3,10,0)
  Results[i]            Error descriptor
"KRN",8994,2592,3,11,0)
                          ^01: Error code
"KRN",8994,2592,3,12,0)
                          ^02: Message
"KRN",8994,2592,3,13,0)
                          ^03: Error location
"KRN",8994,2592,3,14,0)
                          ^04: Error type
"KRN",8994,2592,3,15,0)
  
"KRN",8994,2592,3,16,0)
  Results[j]            Line of the additional info
"KRN",8994,2592,3,17,0)
                          ^01: "" (empty)
"KRN",8994,2592,3,18,0)
                          ^02: Text
"KRN",8994,2592,3,19,0)
 
"KRN",8994,2592,3,20,0)
Error descriptors are returned in reverse chronological order (most recent
"KRN",8994,2592,3,21,0)
first).
"KRN",8994,2592,3,22,0)
 
"KRN",8994,2592,3,23,0)
Otherwise, 0 is returned in the Results[0].
"KRN",8994,2593,-1)
0^1
"KRN",8994,2593,0)
RAMAG EXAM CANCEL^EXAMCANC^RAMAGRP1^2^A^^^1
"KRN",8994,2593,1,0)
^8994.01^6^6^3080404^^^^
"KRN",8994,2593,1,1,0)
The RAMAG EXAM CANCEL remote procedure cancels the Radiology exam(s) and
"KRN",8994,2593,1,2,0)
sends all required notifications.
"KRN",8994,2593,1,3,0)
 
"KRN",8994,2593,1,4,0)
If all exams that reference the same order/request are canceled, this  
"KRN",8994,2593,1,5,0)
function can also cancel/hold the order (if the appropriate parameters are
"KRN",8994,2593,1,6,0)
provided).
"KRN",8994,2593,2,0)
^8994.02A^4^4
"KRN",8994,2593,2,1,0)
RAEXAM^1^^1^1
"KRN",8994,2593,2,1,1,0)
^^4^4^3070621^
"KRN",8994,2593,2,1,1,1,0)
String of exam/case identifiers separated by '^':
"KRN",8994,2593,2,1,1,2,0)
  ^01: IEN of the patient in the RAD/NUC MED PATIENT file (#70)
"KRN",8994,2593,2,1,1,3,0)
  ^02: IEN in the REGISTERED EXAMS multiple (sub-file #70.02)
"KRN",8994,2593,2,1,1,4,0)
  ^03: IEN in the EXAMINATIONS multiple (sub-file #70.03)
"KRN",8994,2593,2,2,0)
RAREASON^1^^1^2
"KRN",8994,2593,2,2,1,0)
^8994.021^4^4^3070621^^^
"KRN",8994,2593,2,2,1,1,0)
Reason for cancelation: either IEN of a record of the RAD/NUC MED REASON
"KRN",8994,2593,2,2,1,2,0)
file (#75.2) or a valid synonym (see SYNONYM field (3) of the file #75.2).
"KRN",8994,2593,2,2,1,3,0)
The referenced record must have the 'CANCEL REQUEST' or 'GENERAL REQUEST'
"KRN",8994,2593,2,2,1,4,0)
type (see TYPE OF REASON field (2) of the file #75.2).
"KRN",8994,2593,2,3,0)
RAMSC^2^^^4
"KRN",8994,2593,2,3,1,0)
^^55^55^3080404^
"KRN",8994,2593,2,3,1,1,0)
Items of this list define miscellaneous/optional parameters. Each record
"KRN",8994,2593,2,3,1,2,0)
has 3 or more pieces separated by '^':
"KRN",8994,2593,2,3,1,3,0)
 
"KRN",8994,2593,2,3,1,4,0)
  ^01: Parameter name
"KRN",8994,2593,2,3,1,5,0)
  ^02: Index (for multiples and word-processing values)
"KRN",8994,2593,2,3,1,6,0)
  ^03: Value1
"KRN",8994,2593,2,3,1,7,0)
  ^04: Value2
"KRN",8994,2593,2,3,1,8,0)
  ...
"KRN",8994,2593,2,3,1,9,0)
 
"KRN",8994,2593,2,3,1,10,0)
The following parameters are supported by this remote procedure:
"KRN",8994,2593,2,3,1,11,0)
  
"KRN",8994,2593,2,3,1,12,0)
  HOLDESC^{Seq#}^{Line of hold description}
"KRN",8994,2593,2,3,1,13,0)
    Text for the HOLD DESCRIPTION field (25)
"KRN",8994,2593,2,3,1,14,0)
    of the file #75.1.
"KRN",8994,2593,2,3,1,15,0)
 
"KRN",8994,2593,2,3,1,16,0)
  ORDRSN^^{Cancel/hold reason for related order}
"KRN",8994,2593,2,3,1,17,0)
    Either IEN of a record of the RAD/NUC MED
"KRN",8994,2593,2,3,1,18,0)
    REASON file (#75.2) or a valid synonym 
"KRN",8994,2593,2,3,1,19,0)
    (see SYNONYM field (3) of that file).
"KRN",8994,2593,2,3,1,20,0)
 
"KRN",8994,2593,2,3,1,21,0)
    If this parameter is not defined or empty,
"KRN",8994,2593,2,3,1,22,0)
    the value of the RAREASON parameter is
"KRN",8994,2593,2,3,1,23,0)
    assumed.
"KRN",8994,2593,2,3,1,24,0)
 
"KRN",8994,2593,2,3,1,25,0)
Records can be added to the list in any order. See the comments preceding
"KRN",8994,2593,2,3,1,26,0)
the $$EXAMCANC^RAMAG05 for more details.
"KRN",8994,2593,2,3,1,27,0)
 
"KRN",8994,2593,2,3,1,28,0)
If the RAFLAGS parameter contains the 'O' flag, the 'ORDRSN' and 'HOLDESC'
"KRN",8994,2593,2,3,1,29,0)
parameters determine whether the related order is canceled or put on hold.
"KRN",8994,2593,2,3,1,30,0)
Otherwise, they are ignored.
"KRN",8994,2593,2,3,1,31,0)
 
"KRN",8994,2593,2,3,1,32,0)
 * If the reason record referenced by the 'ORDRSN'
"KRN",8994,2593,2,3,1,33,0)
   has the CANCEL REQUEST (1) type, then the 'HOLDESC'
"KRN",8994,2593,2,3,1,34,0)
   is ignored and the order is canceled.
"KRN",8994,2593,2,3,1,35,0)
 
"KRN",8994,2593,2,3,1,36,0)
 * If the record referenced by the 'ORDRSN' is of
"KRN",8994,2593,2,3,1,37,0)
   the HOLD REQUEST (3) type, then the order is put
"KRN",8994,2593,2,3,1,38,0)
   on hold. If the 'HOLDESC' is defined, the text is
"KRN",8994,2593,2,3,1,39,0)
   stored into the HOLD DESCRIPTION field.
"KRN",8994,2593,2,3,1,40,0)
 
"KRN",8994,2593,2,3,1,41,0)
 * If the record referenced by the 'ORDRSN' is of
"KRN",8994,2593,2,3,1,42,0)
   the GENERAL REQUEST type (9), then the action
"KRN",8994,2593,2,3,1,43,0)
   performed on the order is determined by the
"KRN",8994,2593,2,3,1,44,0)
   'HOLDESC'. If it is defined, then the order is
"KRN",8994,2593,2,3,1,45,0)
   put hold; otherwise, the order is canceled.
"KRN",8994,2593,2,3,1,46,0)
 
"KRN",8994,2593,2,3,1,47,0)
Examples:
"KRN",8994,2593,2,3,1,48,0)
 
"KRN",8994,2593,2,3,1,49,0)
  with RPCBroker.Param[2] do
"KRN",8994,2593,2,3,1,50,0)
    begin
"KRN",8994,2593,2,3,1,51,0)
      PType := list;
"KRN",8994,2593,2,3,1,52,0)
      Mult[1] := 'ORDRSN^^OHR';
"KRN",8994,2593,2,3,1,53,0)
      Mult[2] := 'HOLDESC^1^Hold description line #1';
"KRN",8994,2593,2,3,1,54,0)
      Mult[3] := 'HOLDESC^2^Hold description line #2';
"KRN",8994,2593,2,3,1,55,0)
    end;
"KRN",8994,2593,2,4,0)
RAFLAGS^1^^^3
"KRN",8994,2593,2,4,1,0)
^8994.021^15^15^3080404^^^
"KRN",8994,2593,2,4,1,1,0)
Flags that control execution (can be combined):
"KRN",8994,2593,2,4,1,2,0)
 
"KRN",8994,2593,2,4,1,3,0)
  A  Cancel all related exams/cases (those that
"KRN",8994,2593,2,4,1,4,0)
     reference the same order).
"KRN",8994,2593,2,4,1,5,0)
 
"KRN",8994,2593,2,4,1,6,0)
  O  Cancel/hold the related order after successful
"KRN",8994,2593,2,4,1,7,0)
     exam cancelation.
"KRN",8994,2593,2,4,1,8,0)
 
"KRN",8994,2593,2,4,1,9,0)
     The order will be canceled or put on hold only
"KRN",8994,2593,2,4,1,10,0)
     if there are no more active cases associated
"KRN",8994,2593,2,4,1,11,0)
     with it.
"KRN",8994,2593,2,4,1,12,0)
 
"KRN",8994,2593,2,4,1,13,0)
     Otherwise, the error code -42 will be returned.
"KRN",8994,2593,2,4,1,14,0)
     Use the "A" flag to cancel all related exams
"KRN",8994,2593,2,4,1,15,0)
     and guarantee the order cancelation.
"KRN",8994,2593,2,"B","RAEXAM",1)

"KRN",8994,2593,2,"B","RAFLAGS",4)

"KRN",8994,2593,2,"B","RAMSC",3)

"KRN",8994,2593,2,"B","RAREASON",2)

"KRN",8994,2593,2,"PARAMSEQ",1,1)

"KRN",8994,2593,2,"PARAMSEQ",2,2)

"KRN",8994,2593,2,"PARAMSEQ",3,4)

"KRN",8994,2593,2,"PARAMSEQ",4,3)

"KRN",8994,2593,3,0)
^^23^23^3080221^
"KRN",8994,2593,3,1,0)
A negative value of the first '^'-piece of the Results[0] indicates that
"KRN",8994,2593,3,2,0)
an error occurred during the execution of the remote procedure. In this
"KRN",8994,2593,3,3,0)
case, the second piece of the Results[0] will contain number of the error
"KRN",8994,2593,3,4,0)
descriptors returned in the subsequent nodes of the Results array.
"KRN",8994,2593,3,5,0)
 
"KRN",8994,2593,3,6,0)
  Results[0]            Result descriptor
"KRN",8994,2593,3,7,0)
                          ^01: The last error code
"KRN",8994,2593,3,8,0)
                          ^02: Number of error descriptors
"KRN",8994,2593,3,9,0)
  
"KRN",8994,2593,3,10,0)
  Results[i]            Error descriptor
"KRN",8994,2593,3,11,0)
                          ^01: Error code
"KRN",8994,2593,3,12,0)
                          ^02: Message
"KRN",8994,2593,3,13,0)
                          ^03: Error location
"KRN",8994,2593,3,14,0)
                          ^04: Error type
"KRN",8994,2593,3,15,0)
  
"KRN",8994,2593,3,16,0)
  Results[j]            Line of the additional info
"KRN",8994,2593,3,17,0)
                          ^01: "" (empty)
"KRN",8994,2593,3,18,0)
                          ^02: Text
"KRN",8994,2593,3,19,0)
 
"KRN",8994,2593,3,20,0)
Error descriptors are returned in reverse chronological order (most recent
"KRN",8994,2593,3,21,0)
first).
"KRN",8994,2593,3,22,0)
 
"KRN",8994,2593,3,23,0)
Otherwise, 0 is returned in the Results[0].
"KRN",8994,2594,-1)
0^2
"KRN",8994,2594,0)
RAMAG EXAM COMPLETE^COMPLETE^RAMAGRP1^2^A^^^1
"KRN",8994,2594,1,0)
^8994.01^3^3^3090306^^
"KRN",8994,2594,1,1,0)
The RAMAG EXAM COMPLETE remote procedure completes the exam. It also sends
"KRN",8994,2594,1,2,0)
required HL7 messages, sends changed order control "XX" to CPRS, but does
"KRN",8994,2594,1,3,0)
not send VistA alerts regarding the exam status change.
"KRN",8994,2594,2,0)
^8994.02A^5^2
"KRN",8994,2594,2,1,0)
RAEXAM^1^^1^1
"KRN",8994,2594,2,1,1,0)
^8994.021^4^4^3080116^^^^
"KRN",8994,2594,2,1,1,1,0)
String of exam/case identifiers separated by '^':
"KRN",8994,2594,2,1,1,2,0)
  ^01: IEN of the patient in the RAD/NUC MED PATIENT file (#70)
"KRN",8994,2594,2,1,1,3,0)
  ^02: IEN in the REGISTERED EXAMS multiple (sub-file #70.02)
"KRN",8994,2594,2,1,1,4,0)
  ^03: IEN in the EXAMINATIONS multiple (sub-file #70.03)
"KRN",8994,2594,2,5,0)
RAMSC^2^^^2
"KRN",8994,2594,2,5,1,0)
^^91^91^3090306^
"KRN",8994,2594,2,5,1,1,0)
Items of this list define miscellaneous/optional exam and/or report
"KRN",8994,2594,2,5,1,2,0)
parameters. Each record has 3 or more pieces separated by '^':
"KRN",8994,2594,2,5,1,3,0)
 
"KRN",8994,2594,2,5,1,4,0)
  ^01: Parameter name
"KRN",8994,2594,2,5,1,5,0)
  ^02: Index (for multiples and word-processing values)
"KRN",8994,2594,2,5,1,6,0)
  ^03: Value1
"KRN",8994,2594,2,5,1,7,0)
  ^04: Value2
"KRN",8994,2594,2,5,1,8,0)
  ...
"KRN",8994,2594,2,5,1,9,0)
 
"KRN",8994,2594,2,5,1,10,0)
The following parameters are supported by this remote procedure:
"KRN",8994,2594,2,5,1,11,0)
 
"KRN",8994,2594,2,5,1,12,0)
  ACLHIST^{Seq#}^{Line of clinical history}
"KRN",8994,2594,2,5,1,13,0)
    Text for the ADDITIONAL CLINICAL HISTORY field
"KRN",8994,2594,2,5,1,14,0)
    (400) of the RAD/NUC MED REPORTS file (#74).
"KRN",8994,2594,2,5,1,15,0)
 
"KRN",8994,2594,2,5,1,16,0)
  FLAGS^^{flags}
"KRN",8994,2594,2,5,1,17,0)
    Flags that control the execution (can be combined):
"KRN",8994,2594,2,5,1,18,0)
 
"KRN",8994,2594,2,5,1,19,0)
    F  Try to enforce the new status even if some 
"KRN",8994,2594,2,5,1,20,0)
       required fields are not populated.
"KRN",8994,2594,2,5,1,21,0)
 
"KRN",8994,2594,2,5,1,22,0)
    S  Do not send HL7 message to speech recognition
"KRN",8994,2594,2,5,1,23,0)
       (dictation) systems
"KRN",8994,2594,2,5,1,24,0)
 
"KRN",8994,2594,2,5,1,25,0)
  IMPRESSION^{Seq#}^{Line of impression text}
"KRN",8994,2594,2,5,1,26,0)
    Text for the IMPRESSION TEXT field (300)
"KRN",8994,2594,2,5,1,27,0)
    of the file #74.
"KRN",8994,2594,2,5,1,28,0)
 
"KRN",8994,2594,2,5,1,29,0)
  PROBSTAT^^{text}
"KRN",8994,2594,2,5,1,30,0)
    Value for the PROBLEM STATEMENT field (25)
"KRN",8994,2594,2,5,1,31,0)
    of the file #74.
"KRN",8994,2594,2,5,1,32,0)
 
"KRN",8994,2594,2,5,1,33,0)
  REPORT^{Seq#}^{Line of report text}
"KRN",8994,2594,2,5,1,34,0)
    Text for the REPORT TEXT field (200)
"KRN",8994,2594,2,5,1,35,0)
    of the file #74.
"KRN",8994,2594,2,5,1,36,0)
 
"KRN",8994,2594,2,5,1,37,0)
  RPTDTE^^{date}
"KRN",8994,2594,2,5,1,38,0)
    Date in HL7 format (TS) for the REPORTED DATE
"KRN",8994,2594,2,5,1,39,0)
    field (8) of the file #74: YYYYMMDD. The date
"KRN",8994,2594,2,5,1,40,0)
    must be exact. If a time part is provided, it
"KRN",8994,2594,2,5,1,41,0)
    is ignored.
"KRN",8994,2594,2,5,1,42,0)
 
"KRN",8994,2594,2,5,1,43,0)
  RPTSTATUS^^{status}
"KRN",8994,2594,2,5,1,44,0)
    Internal value for the REPORT STATUS field (5)
"KRN",8994,2594,2,5,1,45,0)
    of the file #74. Currently, only "V" (Verified)
"KRN",8994,2594,2,5,1,46,0)
    and "EF" (Electronically Filed) codes are 
"KRN",8994,2594,2,5,1,47,0)
    supported.
"KRN",8994,2594,2,5,1,48,0)
 
"KRN",8994,2594,2,5,1,49,0)
  TRANSCRST^^{IEN #200}
"KRN",8994,2594,2,5,1,50,0)
    Internal value for the TRANSCRIPTIONIST
"KRN",8994,2594,2,5,1,51,0)
    field (11) of the file #74: IEN in the NEW
"KRN",8994,2594,2,5,1,52,0)
    PERSON file (#200).
"KRN",8994,2594,2,5,1,53,0)
 
"KRN",8994,2594,2,5,1,54,0)
  VERDTE^^{date}
"KRN",8994,2594,2,5,1,55,0)
    Date/time in HL7 format (TS) for the
"KRN",8994,2594,2,5,1,56,0)
    VERIFIED DATE field (7) of the file #74:
"KRN",8994,2594,2,5,1,57,0)
    YYYYMMDD[HHMM[+/-ZZZZ]]. The date must be
"KRN",8994,2594,2,5,1,58,0)
    exact.
"KRN",8994,2594,2,5,1,59,0)
 
"KRN",8994,2594,2,5,1,60,0)
  VERPHYS^^{IEN #200}
"KRN",8994,2594,2,5,1,61,0)
    Internal value for the VERIFYING PHYSICIAN
"KRN",8994,2594,2,5,1,62,0)
    field (9) of the file #74: IEN in the NEW
"KRN",8994,2594,2,5,1,63,0)
    PERSON file (#200).
"KRN",8994,2594,2,5,1,64,0)
 
"KRN",8994,2594,2,5,1,65,0)
The following optional parameters are also supported: BEDSECT, CMUSED, 
"KRN",8994,2594,2,5,1,66,0)
COMPLICAT, CONTMEDIA, CPTMODS, EXAMCAT, FILMSIZE, PRIMCAM, PRIMDXCODE,
"KRN",8994,2594,2,5,1,67,0)
PRIMINTRES, PRIMINTSTF, PRINCLIN, RDPHARMS, RDPH-*, SERVICE, TECH,
"KRN",8994,2594,2,5,1,68,0)
TECHCOMM, and WARD. If any of them are defined, their values replace the
"KRN",8994,2594,2,5,1,69,0)
existing ones assigned by the RAMAG EXAM REGISTER and RAMAG EXAMINED.
"KRN",8994,2594,2,5,1,70,0)
 
"KRN",8994,2594,2,5,1,71,0)
Records can be added to the list in any order. See the comments preceding
"KRN",8994,2594,2,5,1,72,0)
the $$COMPLETE^RAMAG06 for more details.
"KRN",8994,2594,2,5,1,73,0)
 
"KRN",8994,2594,2,5,1,74,0)
If you want to clear a multiple that already has a value, assign "@" or
"KRN",8994,2594,2,5,1,75,0)
empty string to the parameter itself and do not set any subscripts. For
"KRN",8994,2594,2,5,1,76,0)
example, the following construction will clear the CONTRAST MEDIA 
"KRN",8994,2594,2,5,1,77,0)
multiple: Mult[i] := 'CONTMEDIA^^@'.
"KRN",8994,2594,2,5,1,78,0)
 
"KRN",8994,2594,2,5,1,79,0)
Example:
"KRN",8994,2594,2,5,1,80,0)
 
"KRN",8994,2594,2,5,1,81,0)
  with RPCBroker.Param[4] do
"KRN",8994,2594,2,5,1,82,0)
    begin
"KRN",8994,2594,2,5,1,83,0)
      PType := list;
"KRN",8994,2594,2,5,1,84,0)
      Mult[1] := 'PRIMDXCODE^^1';
"KRN",8994,2594,2,5,1,85,0)
      Mult[2] := 'CONTMEDIA^^N';
"KRN",8994,2594,2,5,1,86,0)
      Mult[3] := 'REPORT^1^Report line #1';
"KRN",8994,2594,2,5,1,87,0)
      Mult[4] := 'REPORT^2^Report line #2';
"KRN",8994,2594,2,5,1,88,0)
      Mult[5] := 'IMPRESSION^1^Impression line #1';
"KRN",8994,2594,2,5,1,89,0)
      Mult[6] := 'FLAGS^^FS';
"KRN",8994,2594,2,5,1,90,0)
      Mult[7] := 'RPTDTE^^20071215';
"KRN",8994,2594,2,5,1,91,0)
    end;
"KRN",8994,2594,2,"B","RAEXAM",1)

"KRN",8994,2594,2,"B","RAMSC",5)

"KRN",8994,2594,2,"PARAMSEQ",1,1)

"KRN",8994,2594,2,"PARAMSEQ",2,5)

"KRN",8994,2594,3,0)
^8994.03^23^23^3090306^^^^
"KRN",8994,2594,3,1,0)
A negative value of the first '^'-piece of the Results[0] indicates that
"KRN",8994,2594,3,2,0)
an error occurred during the execution of the remote procedure. In this
"KRN",8994,2594,3,3,0)
case, the second piece of the Results[0] will contain number of the error
"KRN",8994,2594,3,4,0)
descriptors returned in the subsequent nodes of the Results array.
"KRN",8994,2594,3,5,0)
 
"KRN",8994,2594,3,6,0)
  Results[0]            Result descriptor
"KRN",8994,2594,3,7,0)
                          ^01: The last error code
"KRN",8994,2594,3,8,0)
                          ^02: Number of error descriptors
"KRN",8994,2594,3,9,0)
  
"KRN",8994,2594,3,10,0)
  Results[i]            Error descriptor
"KRN",8994,2594,3,11,0)
                          ^01: Error code
"KRN",8994,2594,3,12,0)
                          ^02: Message
"KRN",8994,2594,3,13,0)
                          ^03: Error location
"KRN",8994,2594,3,14,0)
                          ^04: Error type
"KRN",8994,2594,3,15,0)
  
"KRN",8994,2594,3,16,0)
  Results[j]            Line of the additional info
"KRN",8994,2594,3,17,0)
                          ^01: "" (empty)
"KRN",8994,2594,3,18,0)
                          ^02: Text
"KRN",8994,2594,3,19,0)
 
"KRN",8994,2594,3,20,0)
Error descriptors are returned in reverse chronological order (most recent
"KRN",8994,2594,3,21,0)
first).
"KRN",8994,2594,3,22,0)
 
"KRN",8994,2594,3,23,0)
Otherwise, 0 is returned in the Results[0].
"KRN",8994,2630,-1)
0^6
"KRN",8994,2630,0)
RAMAG EXAMINED^EXAMINED^RAMAGRP2^2^A^^^1
"KRN",8994,2630,1,0)
^^4^4^3090224^
"KRN",8994,2630,1,1,0)
The RAMAG EXAMINED remote procedure updates the status of the case (the
"KRN",8994,2630,1,2,0)
procedure has been performed) and creates the stub report. It also sends
"KRN",8994,2630,1,3,0)
required HL7 messages, sends changed order control "XX" to CPRS, but does
"KRN",8994,2630,1,4,0)
not send VistA alerts regarding the exam status change.
"KRN",8994,2630,2,0)
^8994.02A^3^2
"KRN",8994,2630,2,1,0)
RAEXAM^1^^1^1
"KRN",8994,2630,2,1,1,0)
^8994.021^4^4^3080102^^
"KRN",8994,2630,2,1,1,1,0)
String of exam/case identifiers separated by '^':
"KRN",8994,2630,2,1,1,2,0)
  ^01: IEN of the patient in the RAD/NUC MED PATIENT file (#70)
"KRN",8994,2630,2,1,1,3,0)
  ^02: IEN in the REGISTERED EXAMS multiple (sub-file #70.02)
"KRN",8994,2630,2,1,1,4,0)
  ^03: IEN in the EXAMINATIONS multiple (sub-file #70.03)
"KRN",8994,2630,2,3,0)
RAMSC^2^^^2
"KRN",8994,2630,2,3,1,0)
^^161^161^3080404^
"KRN",8994,2630,2,3,1,1,0)
Items of this list define miscellaneous/optional exam parameters. Each
"KRN",8994,2630,2,3,1,2,0)
record has 3 or more pieces separated by '^':
"KRN",8994,2630,2,3,1,3,0)
 
"KRN",8994,2630,2,3,1,4,0)
  ^01: Parameter name
"KRN",8994,2630,2,3,1,5,0)
  ^02: Index (for multiples and word-processing values)
"KRN",8994,2630,2,3,1,6,0)
  ^03: Value1
"KRN",8994,2630,2,3,1,7,0)
  ^04: Value2
"KRN",8994,2630,2,3,1,8,0)
  ...
"KRN",8994,2630,2,3,1,9,0)
 
"KRN",8994,2630,2,3,1,10,0)
The following parameters are supported by this remote procedure:
"KRN",8994,2630,2,3,1,11,0)
 
"KRN",8994,2630,2,3,1,12,0)
  CMUSED^^{Y|N}
"KRN",8994,2630,2,3,1,13,0)
    Internal value for the CONTRAST MEDIA USED
"KRN",8994,2630,2,3,1,14,0)
    field (10) of the sub-file #70.03.
"KRN",8994,2630,2,3,1,15,0)
 
"KRN",8994,2630,2,3,1,16,0)
  COMPLICAT^^{IEN #78.1}^{text}
"KRN",8994,2630,2,3,1,17,0)
    Internal values for the COMPLICATION (16)
"KRN",8994,2630,2,3,1,18,0)
    and COMPLICATION TEXT (16.5) fields of the
"KRN",8994,2630,2,3,1,19,0)
    sub-file #70.03.
"KRN",8994,2630,2,3,1,20,0)
 
"KRN",8994,2630,2,3,1,21,0)
  CONTMEDIA^{Seq#}^{I|N|L|C|G|B|M}
"KRN",8994,2630,2,3,1,22,0)
    Internal value for the CONTRAST MEDIA field (.01)
"KRN",8994,2630,2,3,1,23,0)
    of the sub-file #70.3225.
"KRN",8994,2630,2,3,1,24,0)
 
"KRN",8994,2630,2,3,1,25,0)
  CPTMODS^{Seq#}^{IEN #81.3}
"KRN",8994,2630,2,3,1,26,0)
    Internal value for the CPT MODIFIERS field (.01)
"KRN",8994,2630,2,3,1,27,0)
    of the sub-file #70.3135: IEN in the CPT MODIFIER
"KRN",8994,2630,2,3,1,28,0)
    file (#81.3).
"KRN",8994,2630,2,3,1,29,0)
 
"KRN",8994,2630,2,3,1,30,0)
  FILMSIZE^{Seq#}^{IEN #78.4}^{amount}
"KRN",8994,2630,2,3,1,31,0)
    Internal values for the record of the FILM SIZE
"KRN",8994,2630,2,3,1,32,0)
    multiple (70) of the sub-file #70.03.
"KRN",8994,2630,2,3,1,33,0)
 
"KRN",8994,2630,2,3,1,34,0)
  FLAGS^^{flags}
"KRN",8994,2630,2,3,1,35,0)
    Flags that control the execution (can be combined):
"KRN",8994,2630,2,3,1,36,0)
 
"KRN",8994,2630,2,3,1,37,0)
    F  Try to enforce the new status even if some 
"KRN",8994,2630,2,3,1,38,0)
       required fields are not populated.
"KRN",8994,2630,2,3,1,39,0)
 
"KRN",8994,2630,2,3,1,40,0)
    S  Do not send HL7 message to speech recognition
"KRN",8994,2630,2,3,1,41,0)
       (dictation) systems
"KRN",8994,2630,2,3,1,42,0)
 
"KRN",8994,2630,2,3,1,43,0)
  PRIMCAM^^{IEN #78.6}
"KRN",8994,2630,2,3,1,44,0)
    Internal value for the PRIMARY CAMERA/EQUIP/RM
"KRN",8994,2630,2,3,1,45,0)
    field (18) of the sub-file #70.03: IEN in the
"KRN",8994,2630,2,3,1,46,0)
    CAMERA/EQUIP/RM file (#78.6).
"KRN",8994,2630,2,3,1,47,0)
 
"KRN",8994,2630,2,3,1,48,0)
  PRIMDXCODE^^{IEN #78.3}
"KRN",8994,2630,2,3,1,49,0)
    Internal value for the PRIMARY DIAGNOSTIC
"KRN",8994,2630,2,3,1,50,0)
    CODE field (13) of the sub-file #70.03:
"KRN",8994,2630,2,3,1,51,0)
    IEN in the DIAGNOSTIC CODES file (#78.3).
"KRN",8994,2630,2,3,1,52,0)
 
"KRN",8994,2630,2,3,1,53,0)
  PRIMINTRES^^{IEN #200}
"KRN",8994,2630,2,3,1,54,0)
    Internal value for the PRIMARY INTERPRETING
"KRN",8994,2630,2,3,1,55,0)
    RESIDENT field (12) of the sub-file #70.03:
"KRN",8994,2630,2,3,1,56,0)
    IEN in the NEW PERSON file (#200).
"KRN",8994,2630,2,3,1,57,0)
 
"KRN",8994,2630,2,3,1,58,0)
  PRIMINTSTF^^{IEN #200}
"KRN",8994,2630,2,3,1,59,0)
    Internal value for the PRIMARY INTERPRETING
"KRN",8994,2630,2,3,1,60,0)
    STAFF field (15) of the sub-file #70.03:
"KRN",8994,2630,2,3,1,61,0)
    IEN in the NEW PERSON file (#200).
"KRN",8994,2630,2,3,1,62,0)
 
"KRN",8994,2630,2,3,1,63,0)
  RAPROC^1^{IEN #71}^{IEN #71.2}^{IEN #71.2}^...
"KRN",8994,2630,2,3,1,64,0)
    Radiology procedure and optional modifiers.
"KRN",8994,2630,2,3,1,65,0)
 
"KRN",8994,2630,2,3,1,66,0)
  RDPHARMS^{Seq#}
"KRN",8994,2630,2,3,1,67,0)
    Opening/closing tag of the record of internal
"KRN",8994,2630,2,3,1,68,0)
    values for the 'RADIOPHARMACEUTICALS' multiple
"KRN",8994,2630,2,3,1,69,0)
    (100) of the 'NUC MED EXAM DATA' file (#70.2).
"KRN",8994,2630,2,3,1,70,0)
 
"KRN",8994,2630,2,3,1,71,0)
    RDPH-ACDR^^{value}
"KRN",8994,2630,2,3,1,72,0)
      Internal value for the ACTIVITY DRAWN 
"KRN",8994,2630,2,3,1,73,0)
      field (4).
"KRN",8994,2630,2,3,1,74,0)
 
"KRN",8994,2630,2,3,1,75,0)
    RDPH-DOSE^^{value}
"KRN",8994,2630,2,3,1,76,0)
      Internal value for the DOSE ADMINISTERED 
"KRN",8994,2630,2,3,1,77,0)
      field (7).
"KRN",8994,2630,2,3,1,78,0)
 
"KRN",8994,2630,2,3,1,79,0)
    RDPH-DRUG^^{IEN #50}
"KRN",8994,2630,2,3,1,80,0)
      Internal value for the RADIOPHARMACEUTICAL 
"KRN",8994,2630,2,3,1,81,0)
      field (.01).
"KRN",8994,2630,2,3,1,82,0)
 
"KRN",8994,2630,2,3,1,83,0)
    RDPH-DTADM^^{date/time}
"KRN",8994,2630,2,3,1,84,0)
      Internal value for the DATE/TIME DOSE
"KRN",8994,2630,2,3,1,85,0)
      ADMINISTERED field (8).
"KRN",8994,2630,2,3,1,86,0)
 
"KRN",8994,2630,2,3,1,87,0)
    RDPH-DTDRW^^{date/time}
"KRN",8994,2630,2,3,1,88,0)
      Internal value for the DATE/TIME DRAWN
"KRN",8994,2630,2,3,1,89,0)
      field (5).
"KRN",8994,2630,2,3,1,90,0)
 
"KRN",8994,2630,2,3,1,91,0)
    RDPH-FORM^^{A|G|L|P|S}
"KRN",8994,2630,2,3,1,92,0)
      Internal value for the FORM field (15).
"KRN",8994,2630,2,3,1,93,0)
 
"KRN",8994,2630,2,3,1,94,0)
    RDPH-LOTN^^{IEN #71.9}
"KRN",8994,2630,2,3,1,95,0)
      Internal value for the LOT NO field (13).
"KRN",8994,2630,2,3,1,96,0)
 
"KRN",8994,2630,2,3,1,97,0)
    RDPH-PWADM^^{IEN #200}
"KRN",8994,2630,2,3,1,98,0)
      Internal value for the PERSON WHO ADMINISTERED 
"KRN",8994,2630,2,3,1,99,0)
      DOSE field (9).
"KRN",8994,2630,2,3,1,100,0)
 
"KRN",8994,2630,2,3,1,101,0)
    RDPH-PWMSD^^{IEN #200}
"KRN",8994,2630,2,3,1,102,0)
      Internal value for the PERSON WHO MEASURED DOSE
"KRN",8994,2630,2,3,1,103,0)
      field (6).
"KRN",8994,2630,2,3,1,104,0)
 
"KRN",8994,2630,2,3,1,105,0)
    RDPH-ROUTE^^{IEN #71.6}
"KRN",8994,2630,2,3,1,106,0)
      Internal value for the ROUTE OF ADMINISTRATION
"KRN",8994,2630,2,3,1,107,0)
      field (11).
"KRN",8994,2630,2,3,1,108,0)
 
"KRN",8994,2630,2,3,1,109,0)
    RDPH-SITE^^{IEN #71.7}
"KRN",8994,2630,2,3,1,110,0)
      Internal value for the SITE OF ADMINISTRATION
"KRN",8994,2630,2,3,1,111,0)
      field (12).
"KRN",8994,2630,2,3,1,112,0)
 
"KRN",8994,2630,2,3,1,113,0)
    RDPH-VOL^^{value}
"KRN",8994,2630,2,3,1,114,0)
      Internal value for the VOLUME field (14).
"KRN",8994,2630,2,3,1,115,0)
 
"KRN",8994,2630,2,3,1,116,0)
  TECH^{Seq#}^{IEN #200}
"KRN",8994,2630,2,3,1,117,0)
    Internal value for the TECHNOLOGIST field (.01)
"KRN",8994,2630,2,3,1,118,0)
    of the subfile #70.12: IEN in the NEW PERSON
"KRN",8994,2630,2,3,1,119,0)
    file (#200).
"KRN",8994,2630,2,3,1,120,0)
 
"KRN",8994,2630,2,3,1,121,0)
  TECHCOMM^^{text}
"KRN",8994,2630,2,3,1,122,0)
    Value for the TECHNOLOGIST COMMENT field (4) of the
"KRN",8994,2630,2,3,1,123,0)
    ACTIVITY LOG multiple (sub-file #70.07). 
"KRN",8994,2630,2,3,1,124,0)
 
"KRN",8994,2630,2,3,1,125,0)
The following optional parameters are also supported: BEDSECT, EXAMCAT, 
"KRN",8994,2630,2,3,1,126,0)
PRINCLIN, SERVICE, and WARD. If any of them are defined, their values 
"KRN",8994,2630,2,3,1,127,0)
replace the existing ones assigned by the RAMAG EXAM REGISTER.
"KRN",8994,2630,2,3,1,128,0)
 
"KRN",8994,2630,2,3,1,129,0)
Records can be added to the list in any order. See the comments preceding
"KRN",8994,2630,2,3,1,130,0)
the $$EXAMINED^RAMAG07 for more details.
"KRN",8994,2630,2,3,1,131,0)
 
"KRN",8994,2630,2,3,1,132,0)
If you want to clear a multiple that already has a value, assign "@" or
"KRN",8994,2630,2,3,1,133,0)
empty string to the parameter itself and do not set any subscripts. For
"KRN",8994,2630,2,3,1,134,0)
example, the following construction will clear the CONTRAST MEDIA 
"KRN",8994,2630,2,3,1,135,0)
multiple: Mult[i] := 'CONTMEDIA^^@'.
"KRN",8994,2630,2,3,1,136,0)
 
"KRN",8994,2630,2,3,1,137,0)
Example:
"KRN",8994,2630,2,3,1,138,0)
 
"KRN",8994,2630,2,3,1,139,0)
  with RPCBroker.Param[1] do
"KRN",8994,2630,2,3,1,140,0)
    begin
"KRN",8994,2630,2,3,1,141,0)
      PType := list;
"KRN",8994,2630,2,3,1,142,0)
      Mult[1]  := 'CMUSED^^N';
"KRN",8994,2630,2,3,1,143,0)
      Mult[2]  := 'FILMSIZE^1^7^2';
"KRN",8994,2630,2,3,1,144,0)
      Mult[3]  := 'FILMSIZE^2^3^1';
"KRN",8994,2630,2,3,1,145,0)
      Mult[4]  := 'PRIMCAM^^3';
"KRN",8994,2630,2,3,1,146,0)
      Mult[5]  := 'TECH^1^2344';
"KRN",8994,2630,2,3,1,147,0)
      Mult[6]  := 'FLAGS^^F';
"KRN",8994,2630,2,3,1,148,0)
 
"KRN",8994,2630,2,3,1,149,0)
      Mult[7]  := 'RDPHARMS^1';
"KRN",8994,2630,2,3,1,150,0)
      Mult[8]  := 'RDPH-DRUG^^23';
"KRN",8994,2630,2,3,1,151,0)
      Mult[9]  := 'RDPH-DOSE^^.002';
"KRN",8994,2630,2,3,1,152,0)
      Mult[10] := 'RDPH-FORM^^A';
"KRN",8994,2630,2,3,1,153,0)
 
"KRN",8994,2630,2,3,1,154,0)
      Mult[11] := 'RDPHARMS^2';
"KRN",8994,2630,2,3,1,155,0)
      Mult[12] := 'RDPH-DRUG^^23';
"KRN",8994,2630,2,3,1,156,0)
      Mult[13] := 'RDPH-DOSE^^.002';
"KRN",8994,2630,2,3,1,157,0)
      Mult[14] := 'RDPHARMS^2';    // Record closing tag is required
"KRN",8994,2630,2,3,1,158,0)
                                   // if something else than another
"KRN",8994,2630,2,3,1,159,0)
                                   // record of the same kind follows.
"KRN",8994,2630,2,3,1,160,0)
      Mult[15] := 'COMPLICAT^^13';
"KRN",8994,2630,2,3,1,161,0)
    end;
"KRN",8994,2630,2,"B","RAEXAM",1)

"KRN",8994,2630,2,"B","RAMSC",3)

"KRN",8994,2630,2,"PARAMSEQ",1,1)

"KRN",8994,2630,2,"PARAMSEQ",2,3)

"KRN",8994,2630,3,0)
^8994.03^23^23^3080227^^^^
"KRN",8994,2630,3,1,0)
A negative value of the first '^'-piece of the Results[0] indicates that
"KRN",8994,2630,3,2,0)
an error occurred during the execution of the remote procedure. In this
"KRN",8994,2630,3,3,0)
case, the second piece of the Results[0] will contain number of the error
"KRN",8994,2630,3,4,0)
descriptors returned in the subsequent nodes of the Results array.
"KRN",8994,2630,3,5,0)
 
"KRN",8994,2630,3,6,0)
  Results[0]            Result descriptor
"KRN",8994,2630,3,7,0)
                          ^01: The last error code
"KRN",8994,2630,3,8,0)
                          ^02: Number of error descriptors
"KRN",8994,2630,3,9,0)
  
"KRN",8994,2630,3,10,0)
  Results[i]            Error descriptor
"KRN",8994,2630,3,11,0)
                          ^01: Error code
"KRN",8994,2630,3,12,0)
                          ^02: Message
"KRN",8994,2630,3,13,0)
                          ^03: Error location
"KRN",8994,2630,3,14,0)
                          ^04: Error type
"KRN",8994,2630,3,15,0)
  
"KRN",8994,2630,3,16,0)
  Results[j]            Line of the additional info
"KRN",8994,2630,3,17,0)
                          ^01: "" (empty)
"KRN",8994,2630,3,18,0)
                          ^02: Text
"KRN",8994,2630,3,19,0)
 
"KRN",8994,2630,3,20,0)
Error descriptors are returned in reverse chronological order (most recent
"KRN",8994,2630,3,21,0)
first).
"KRN",8994,2630,3,22,0)
 
"KRN",8994,2630,3,23,0)
Otherwise, 0 is returned in the Results[0].
"KRN",8994,2631,-1)
0^7
"KRN",8994,2631,0)
RAMAG EXAM STATUS REQUIREMENTS^EXMSTREQ^RAMAGRP2^2^A^^^1
"KRN",8994,2631,1,0)
^8994.01^7^7^3080227^^^^
"KRN",8994,2631,1,1,0)
The RAMAG EXAM STATUS REQUIREMENTS remote procedure returns a descriptor
"KRN",8994,2631,1,2,0)
that indicates conditions that should be met in order to successfully 
"KRN",8994,2631,1,3,0)
perform an action on an exam/case record.
"KRN",8994,2631,1,4,0)
 
"KRN",8994,2631,1,5,0)
These conditions are defined by the sites and stored in the EXAMINATION
"KRN",8994,2631,1,6,0)
STATUS file (#72). See the .1 and .5 nodes of the data dictionary of the
"KRN",8994,2631,1,7,0)
file #74 for more details.
"KRN",8994,2631,2,0)
^8994.02A^4^3
"KRN",8994,2631,2,2,0)
RACTION^1^1^1^1
"KRN",8994,2631,2,2,1,0)
^^7^7^3080107^
"KRN",8994,2631,2,2,1,1,0)
The RACTION parameter defines the action that is going to be performed on 
"KRN",8994,2631,2,2,1,2,0)
an exam/case record:
"KRN",8994,2631,2,2,1,3,0)
 
"KRN",8994,2631,2,2,1,4,0)
  E  Examined (procedure has been performed,
"KRN",8994,2631,2,2,1,5,0)
     images have been acquired)
"KRN",8994,2631,2,2,1,6,0)
 
"KRN",8994,2631,2,2,1,7,0)
  C  Complete
"KRN",8994,2631,2,3,0)
RAIMGTYI^1^^1^2
"KRN",8994,2631,2,3,1,0)
^8994.021^1^1^3080219^^^
"KRN",8994,2631,2,3,1,1,0)
IEN of the imaging type in the IMAGING TYPE file (#79.2).
"KRN",8994,2631,2,4,0)
RAPROC^1^^^3
"KRN",8994,2631,2,4,1,0)
^8994.021^8^8^3080227^^
"KRN",8994,2631,2,4,1,1,0)
Radiology procedure IEN (file #71). This parameter is required to
"KRN",8994,2631,2,4,1,2,0)
determine exact nuclear medicine requirements (pieces of the Results[0]
"KRN",8994,2631,2,4,1,3,0)
from 17 to 25).
"KRN",8994,2631,2,4,1,4,0)
 
"KRN",8994,2631,2,4,1,5,0)
By default (+$G(RAPROC)=0), this remote procedure cannot examine the
"KRN",8994,2631,2,4,1,6,0)
SUPPRESS RADIOPHARM PROMPT field (2) of the RAD/NUC MED PROCEDURES file
"KRN",8994,2631,2,4,1,7,0)
(#71) and might indicate that some nuclear medicine data is required even
"KRN",8994,2631,2,4,1,8,0)
if it is not.
"KRN",8994,2631,2,"B","RACTION",2)

"KRN",8994,2631,2,"B","RAIMGTYI",3)

"KRN",8994,2631,2,"B","RAPROC",4)

"KRN",8994,2631,2,"PARAMSEQ",1,2)

"KRN",8994,2631,2,"PARAMSEQ",2,3)

"KRN",8994,2631,2,"PARAMSEQ",3,4)

"KRN",8994,2631,3,0)
^^183^183^3080227^
"KRN",8994,2631,3,1,0)
A negative value of the first '^'-piece of the Results[0] indicates that
"KRN",8994,2631,3,2,0)
an error occurred during the execution of the remote procedure. In this
"KRN",8994,2631,3,3,0)
case, the second piece of the Results[0] will contain number of the error
"KRN",8994,2631,3,4,0)
descriptors returned in the subsequent nodes of the Results array.
"KRN",8994,2631,3,5,0)
 
"KRN",8994,2631,3,6,0)
  Results[0]            Result descriptor
"KRN",8994,2631,3,7,0)
                          ^01: The last error code
"KRN",8994,2631,3,8,0)
                          ^02: Number of error descriptors
"KRN",8994,2631,3,9,0)
  
"KRN",8994,2631,3,10,0)
  Results[i]            Error descriptor
"KRN",8994,2631,3,11,0)
                          ^01: Error code
"KRN",8994,2631,3,12,0)
                          ^02: Message
"KRN",8994,2631,3,13,0)
                          ^03: Error location
"KRN",8994,2631,3,14,0)
                          ^04: Error type
"KRN",8994,2631,3,15,0)
  
"KRN",8994,2631,3,16,0)
  Results[j]            Line of the additional info
"KRN",8994,2631,3,17,0)
                          ^01: "" (empty)
"KRN",8994,2631,3,18,0)
                          ^02: Text
"KRN",8994,2631,3,19,0)
 
"KRN",8994,2631,3,20,0)
Error descriptors are returned in reverse chronological order (most recent
"KRN",8994,2631,3,21,0)
first).
"KRN",8994,2631,3,22,0)
 
"KRN",8994,2631,3,23,0)
Otherwise, exam status requirements are returned in the Results[0].
"KRN",8994,2631,3,24,0)
Descriptor of the exam status is returned in the Results[1]. See comments 
"KRN",8994,2631,3,25,0)
in the RAMAGU06 routine for details.
"KRN",8994,2631,3,26,0)
 
"KRN",8994,2631,3,27,0)
  Results[0]            Exam status requirements
"KRN",8994,2631,3,28,0)
                          ^01: TECHNOLOGIST REQUIRED?         {0|1}
"KRN",8994,2631,3,29,0)
                          ^02: RESIDENT OR STAFF REQUIRED?    {0|1}
"KRN",8994,2631,3,30,0)
                          ^03: DETAILED PROCEDURE REQUIRED?   {0|1}
"KRN",8994,2631,3,31,0)
                          ^04: FILM ENTRY REQUIRED?           {0|1}
"KRN",8994,2631,3,32,0)
                          ^05: DIAGNOSTIC CODE REQUIRED?      {0|1}
"KRN",8994,2631,3,33,0)
                          ^06: CAMERA/EQUIP/RM REQUIRED?      {0|1}
"KRN",8994,2631,3,34,0)
                          ^07: reserved
"KRN",8994,2631,3,35,0)
                          ^08: reserved
"KRN",8994,2631,3,36,0)
                          ^09: reserved
"KRN",8994,2631,3,37,0)
                          ^10: reserved
"KRN",8994,2631,3,38,0)
                          ^11: REPORT ENTERED REQUIRED?       {0|1}
"KRN",8994,2631,3,39,0)
                          ^12: VERIFIED REPORT REQUIRED?      {0|1}
"KRN",8994,2631,3,40,0)
                          ^13: PROCEDURE MODIFIERS REQUIRED?  {0|1}
"KRN",8994,2631,3,41,0)
                          ^14: CPT MODIFIERS REQUIRED?        {0|1}
"KRN",8994,2631,3,42,0)
                          ^15: reserved
"KRN",8994,2631,3,43,0)
                          ^16: IMPRESSION REQUIRED?           {0|1}
"KRN",8994,2631,3,44,0)
                          ^17: RADIOPHARMS/DOSAGES REQUIRED?  {0|1}                
"KRN",8994,2631,3,45,0)
                          ^18: reserved                                            
"KRN",8994,2631,3,46,0)
                          ^19: ACTIVITY DRAWN REQUIRED?       {0|1}                
"KRN",8994,2631,3,47,0)
                          ^20: DRAWN DT/TIME/PERSON REQUIRED? {0|1}                
"KRN",8994,2631,3,48,0)
                          ^21: ADM DT/TIME/PERSON REQUIRED?   {0|1}                
"KRN",8994,2631,3,49,0)
                          ^22: reserved                                            
"KRN",8994,2631,3,50,0)
                          ^23: ROUTE/SITE REQUIRED?           {0|1}                
"KRN",8994,2631,3,51,0)
                          ^24: LOT NO. REQUIRED?              {0|1}                
"KRN",8994,2631,3,52,0)
                          ^25: VOLUME/FORM REQUIRED?          {0|1}                
"KRN",8994,2631,3,53,0)
 
"KRN",8994,2631,3,54,0)
  Results[1]            Exam status descriptor
"KRN",8994,2631,3,55,0)
                          ^01: Status IEN
"KRN",8994,2631,3,56,0)
                          ^02: Status name
"KRN",8994,2631,3,57,0)
                          ^03: Status code (order)
"KRN",8994,2631,3,58,0)
                          ^04: VistARAD category
"KRN",8994,2631,3,59,0)
                          ^05: Generic exam status characteristics
"KRN",8994,2631,3,60,0)
 
"KRN",8994,2631,3,61,0)
Explanations for the Requirements
"KRN",8994,2631,3,62,0)
=================================
"KRN",8994,2631,3,63,0)
 
"KRN",8994,2631,3,64,0)
01: TECHNOLOGIST REQUIRED?
"KRN",8994,2631,3,65,0)
        
"KRN",8994,2631,3,66,0)
    At least one value of the "TECH" parameter should be provided or
"KRN",8994,2631,3,67,0)
    the TECHNOLOGIST multiple (175) of the RAD/NUC MED PATIENT file
"KRN",8994,2631,3,68,0)
    (#70) should have at least one record already.
"KRN",8994,2631,3,69,0)
 
"KRN",8994,2631,3,70,0)
02: RESIDENT OR STAFF REQUIRED?
"KRN",8994,2631,3,71,0)
 
"KRN",8994,2631,3,72,0)
    The "PRIMINTRES" or "PRIMINTSTF" parameter should be defined or
"KRN",8994,2631,3,73,0)
    at least one of the following fields of the RAD/NUC MED PATIENT
"KRN",8994,2631,3,74,0)
    file (#70) should have a value already: PRIMARY INTERPRETING
"KRN",8994,2631,3,75,0)
    RESIDENT (13) or PRIMARY INTERPRETING STAFF (15).
"KRN",8994,2631,3,76,0)
 
"KRN",8994,2631,3,77,0)
03: DETAILED PROCEDURE REQUIRED?
"KRN",8994,2631,3,78,0)
 
"KRN",8994,2631,3,79,0)
    If the ordered and/or registered procedure was a 'broad' one, 
"KRN",8994,2631,3,80,0)
    then the "RAPROC" should reference a valid 'detailed' or
"KRN",8994,2631,3,81,0)
    'series' procedure. Otherwise, the parameter is not required.
"KRN",8994,2631,3,82,0)
 
"KRN",8994,2631,3,83,0)
    See the TYPE OF PROCEDURE field (6) of the RAD/NUC MED
"KRN",8994,2631,3,84,0)
    PROCEDURES file (#71) for more details.
"KRN",8994,2631,3,85,0)
 
"KRN",8994,2631,3,86,0)
04: FILM ENTRY REQUIRED?
"KRN",8994,2631,3,87,0)
 
"KRN",8994,2631,3,88,0)
    At least one value of the "FILMSIZE" parameter should be
"KRN",8994,2631,3,89,0)
    provided or the FILM SIZE multiple (50) of the RAD/NUC MED 
"KRN",8994,2631,3,90,0)
    PATIENT file (#70) should have at least one record already.
"KRN",8994,2631,3,91,0)
 
"KRN",8994,2631,3,92,0)
05: DIAGNOSTIC CODE REQUIRED?
"KRN",8994,2631,3,93,0)
 
"KRN",8994,2631,3,94,0)
    A non-empty value of the "PRIMDXCODE" parameter should be
"KRN",8994,2631,3,95,0)
    provided or the PRIMARY DIAGNOSTIC CODE field (13) of the
"KRN",8994,2631,3,96,0)
    RAD/NUC MED PATIENT file (#70) should have a value already.
"KRN",8994,2631,3,97,0)
 
"KRN",8994,2631,3,98,0)
06: CAMERA/EQUIP/RM REQUIRED?
"KRN",8994,2631,3,99,0)
 
"KRN",8994,2631,3,100,0)
    A non-empty value of the "PRIMCAM" parameter should be provided
"KRN",8994,2631,3,101,0)
    or the PRIMARY CAMERA/EQUIP/RM field (18) of the RAD/NUC MED
"KRN",8994,2631,3,102,0)
    PATIENT file (#70) should have a value already.
"KRN",8994,2631,3,103,0)
 
"KRN",8994,2631,3,104,0)
11: REPORT ENTERED REQUIRED?
"KRN",8994,2631,3,105,0)
 
"KRN",8994,2631,3,106,0)
    A non-empty value of the "REPORT" parameter should be provided
"KRN",8994,2631,3,107,0)
    or the REPORT TEXT field (200) of the RAD/NUC MED REPORTS file
"KRN",8994,2631,3,108,0)
    (#74) should have a non-empty value already.
"KRN",8994,2631,3,109,0)
 
"KRN",8994,2631,3,110,0)
12: VERIFIED REPORT REQUIRED?
"KRN",8994,2631,3,111,0)
 
"KRN",8994,2631,3,112,0)
    The "V" value of the "RPTSTATUS" parameter should be provided
"KRN",8994,2631,3,113,0)
    (default).
"KRN",8994,2631,3,114,0)
 
"KRN",8994,2631,3,115,0)
13: PROCEDURE MODIFIERS REQUIRED?
"KRN",8994,2631,3,116,0)
 
"KRN",8994,2631,3,117,0)
    At least one procedure modifier should be provided in the 
"KRN",8994,2631,3,118,0)
    "RAPROC" parameter or the PROCEDURE MODIFIERS multiple (125) of
"KRN",8994,2631,3,119,0)
    the RAD/NUC MED PATIENT file (#70) should have at least one
"KRN",8994,2631,3,120,0)
    record already.
"KRN",8994,2631,3,121,0)
 
"KRN",8994,2631,3,122,0)
14: CPT MODIFIERS REQUIRED?
"KRN",8994,2631,3,123,0)
 
"KRN",8994,2631,3,124,0)
    At least one value of the "CPTMODS" parameter should be provided
"KRN",8994,2631,3,125,0)
    or the CPT MODIFIERS multiple (135) of the RAD/NUC MED PATIENT
"KRN",8994,2631,3,126,0)
    file (#70) should have at least one record already.
"KRN",8994,2631,3,127,0)
 
"KRN",8994,2631,3,128,0)
16: IMPRESSION REQUIRED?
"KRN",8994,2631,3,129,0)
 
"KRN",8994,2631,3,130,0)
    A non-empty value of the "IMPRESSION" parameter should be
"KRN",8994,2631,3,131,0)
    provided or the IMPRESSION TEXT field (300) of the RAD/NUC MED
"KRN",8994,2631,3,132,0)
    REPORTS file (#74) should have a non-empty value already.
"KRN",8994,2631,3,133,0)
 
"KRN",8994,2631,3,134,0)
17: RADIOPHARMS/DOSAGES REQUIRED?
"KRN",8994,2631,3,135,0)
 
"KRN",8994,2631,3,136,0)
    At least one record of the "RDPHARMS" parameter should be
"KRN",8994,2631,3,137,0)
    provided (at least, the "RDPH-DRUG" and "RDPH-DOSE" record
"KRN",8994,2631,3,138,0)
    parameters should be defined) or the RADIOPHARMACEUTICALS
"KRN",8994,2631,3,139,0)
    multiple (100) of the NUC MED EXAM DATA file (#70.2) should
"KRN",8994,2631,3,140,0)
    have at least one record already (at least, the 
"KRN",8994,2631,3,141,0)
    RADIOPHARMACEUTICAL (.01) and DOSE ADMINISTERED (7) fields 
"KRN",8994,2631,3,142,0)
    should be populated).
"KRN",8994,2631,3,143,0)
 
"KRN",8994,2631,3,144,0)
19: ACTIVITY DRAWN REQUIRED?
"KRN",8994,2631,3,145,0)
 
"KRN",8994,2631,3,146,0)
    A non-empty value of the "RDPH-ACDR" parameter should be
"KRN",8994,2631,3,147,0)
    provided or the ACTIVITY DRAWN field (4) of the NUC MED EXAM
"KRN",8994,2631,3,148,0)
    DATA file (#70.2) should have a non-empty value already.
"KRN",8994,2631,3,149,0)
 
"KRN",8994,2631,3,150,0)
20: DRAWN DT/TIME/PERSON REQUIRED?
"KRN",8994,2631,3,151,0)
 
"KRN",8994,2631,3,152,0)
    Non-empty values of the "RDPH-DTDRW" and "RDPH-PWMSD" parameters
"KRN",8994,2631,3,153,0)
    should be provided or the DATE/TIME DRAWN (5) and PERSON WHO
"KRN",8994,2631,3,154,0)
    MEASURED DOSE (6) fields of the NUC MED EXAM DATA file (#70.2)
"KRN",8994,2631,3,155,0)
    should have non-empty values already.
"KRN",8994,2631,3,156,0)
 
"KRN",8994,2631,3,157,0)
21: ADM DT/TIME/PERSON REQUIRED?
"KRN",8994,2631,3,158,0)
 
"KRN",8994,2631,3,159,0)
    Non-empty values of the "RDPH-DTADM" and "RDPH-PWADM" parameters
"KRN",8994,2631,3,160,0)
    should be provided or the DATE/TIME DOSE ADMINISTERED (8) and
"KRN",8994,2631,3,161,0)
    PERSON WHO ADMINISTERED DOSE (9) fields of the NUC MED EXAM DATA
"KRN",8994,2631,3,162,0)
    file (#70.2) should have non-empty values already.
"KRN",8994,2631,3,163,0)
 
"KRN",8994,2631,3,164,0)
23: ROUTE/SITE REQUIRED?
"KRN",8994,2631,3,165,0)
 
"KRN",8994,2631,3,166,0)
    Non-empty values of the "RDPH-ROUTE" and "RDPH-SITE" parameters
"KRN",8994,2631,3,167,0)
    should be provided or the ROUTE OF ADMINISTRATION (11) and SITE
"KRN",8994,2631,3,168,0)
    OF ADMINISTRATION (12) fields of the NUC MED EXAM DATA file
"KRN",8994,2631,3,169,0)
    (#70.2) should have non-empty values already.
"KRN",8994,2631,3,170,0)
 
"KRN",8994,2631,3,171,0)
24: LOT NO. REQUIRED?
"KRN",8994,2631,3,172,0)
 
"KRN",8994,2631,3,173,0)
    A non-empty value of the "RDPH-LOTN" parameter should be
"KRN",8994,2631,3,174,0)
    provided or the LOT NO field (13) of the NUC MED EXAM DATA file
"KRN",8994,2631,3,175,0)
    (#70.2) should have a non-empty value already. 25: VOLUME/FORM
"KRN",8994,2631,3,176,0)
    REQUIRED?
"KRN",8994,2631,3,177,0)
    
"KRN",8994,2631,3,178,0)
25: VOLUME/FORM REQUIRED?          
"KRN",8994,2631,3,179,0)
    
"KRN",8994,2631,3,180,0)
    Non-empty values of the "RDPH-FORM" and "RDPH-VOL" parameters
"KRN",8994,2631,3,181,0)
    should be provided or the FORM (15) and VOLUME (14) fields of
"KRN",8994,2631,3,182,0)
    the NUC MED EXAM DATA file (#70.2) should have non-empty values
"KRN",8994,2631,3,183,0)
    already.
"MBREQ")
0
"ORD",9,.84)
.84;9;;;EDEOUT^DIFROMSO(.84,DA,"",XPDA);FPRE^DIFROMSI(.84,"",XPDA);EPRE^DIFROMSI(.84,DA,"",XPDA,"",OLDA);;EPOST^DIFROMSI(.84,DA,"",XPDA);DEL^DIFROMSK(.84,"",%)
"ORD",9,.84,0)
DIALOG
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"PKG",18,-1)
1^1
"PKG",18,0)
RADIOLOGY/NUCLEAR MEDICINE^RA^REGISTERS PATIENTS,RECORDS EXAMS,PROFILES,AMIS REPORTS
"PKG",18,20,0)
^9.402P^^
"PKG",18,22,0)
^9.49I^1^1
"PKG",18,22,1,0)
5.0^3051109^2980407^50
"PKG",18,22,1,"PAH",1,0)
90^3100603
"PKG",18,22,1,"PAH",1,1,0)
^^2^2^3100603
"PKG",18,22,1,"PAH",1,1,1,0)
This build contains a Radiology Order and Exam API for the DICOM Importer
"PKG",18,22,1,"PAH",1,1,2,0)
application (patch MAG*3*53) and some internal Radiology APIs.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
40
"RTN","RA")
0^40^B7446^n/a
"RTN","RA",1,0)
RA ;HCIOFO/SG - RADIOLOGY/NUCLEAR MEDICINE (README) ; 1/22/08 11:30am
"RTN","RA",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RA",3,0)
 ;
"RTN","RA",4,0)
 ; LOCAL VARIABLE ------ DESCRIPTION
"RTN","RA",5,0)
 ;
"RTN","RA",6,0)
 ; RAERROR               Error handling data
"RTN","RA",7,0)
 ; RAPARAMS              Package-wide API parameters
"RTN","RA",8,0)
 ;
"RTN","RA",9,0)
 ; See the source code of the ^RA01 routine for more details.
"RTN","RA",10,0)
 ;
"RTN","RA",11,0)
 ; NAMESPACE ----------- DESCRIPTION
"RTN","RA",12,0)
 ;
"RTN","RA",13,0)
 ; RAERR*                Error handling
"RTN","RA",14,0)
 ; RAKIDS*               Installation utilities (KIDS)
"RTN","RA",15,0)
 ; RALOCK*               Lock/unlock utilities
"RTN","RA",16,0)
 ; RAMAG*                Radiology Exam Request/Register API
"RTN","RA",17,0)
 ;                       (see ^RAMAG for details)
"RTN","RA",18,0)
 ; RAORD*                Exam request
"RTN","RA",19,0)
 ; RAREG*                Exam registration
"RTN","RA",20,0)
 ; RARP*                 Remote procedures
"RTN","RA",21,0)
 ; RAUTL*                Utilities
"RTN","RA",22,0)
 ;
"RTN","RA",23,0)
 ; DIALOG -------------- DESCRIPTION
"RTN","RA",24,0)
 ;
"RTN","RA",25,0)
 ; 700000.*              Error messages (see ^RAERR for details)
"RTN","RA",26,0)
 ; 700005.*              Generic messages
"RTN","RA",27,0)
 ;
"RTN","RA",28,0)
 ; MAJOR MENU ---------- DESCRIPTION
"RTN","RA",29,0)
 ;
"RTN","RA",30,0)
 ; [RA OVERALL]          Rad/Nuc Med Total System Menu
"RTN","RA",31,0)
 ;
"RTN","RA",32,0)
 ; INITIALS ------------ DEVELOPER
"RTN","RA",33,0)
 ;
"RTN","RA",34,0)
 ; GJC                   Gregory J. Cebelinski
"RTN","RA",35,0)
 ; KAM                   Ken McNeile
"RTN","RA",36,0)
 ; PB or PAV             Pavel Brodniansky
"RTN","RA",37,0)
 ; RJT                   Robert Troha
"RTN","RA",38,0)
 ; SG                    Sergey Gavrilov
"RTN","RA",39,0)
 ; SM                    Selina Mo
"RTN","RA",40,0)
 ;
"RTN","RA",41,0)
 ; NOTATION ------------ DESCRIPTION
"RTN","RA",42,0)
 ;
"RTN","RA",43,0)
 ; .X                    Parameter X should be passed by reference
"RTN","RA",44,0)
 ;
"RTN","RA",45,0)
 ; [X]                   Parameter X is optional
"RTN","RA",46,0)
 ;
"RTN","RA",47,0)
 ; [.X]                  Optional parameter X should be passed by
"RTN","RA",48,0)
 ;                       reference
"RTN","RA",49,0)
 ;
"RTN","RA",50,0)
 ; [.]X                  Parameter X can be either a single value or
"RTN","RA",51,0)
 ;                       a list. In the latter case, it should be
"RTN","RA",52,0)
 ;                       passed by reference.
"RTN","RA",53,0)
 ;
"RTN","RA",54,0)
 ; [[.]X]                Optional parameter X can be either a single
"RTN","RA",55,0)
 ;                       value or a list.
"RTN","RA",56,0)
 ;
"RTN","RA",57,0)
 ; ^01:                  First "^"-piece of the value
"RTN","RA",58,0)
 ; ^02:                  Second "^"-piece
"RTN","RA",59,0)
 ; ^nn:                  Subsequent "^"-pieces
"RTN","RA",60,0)
 ;
"RTN","RA",61,0)
 Q
"RTN","RA01")
0^41^B6414^n/a
"RTN","RA01",1,0)
RA01 ;HCIOFO/SG - RADIOLOGY/NUCLEAR MEDICINE (VARIABLES) ; 2/27/08 10:11am
"RTN","RA01",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RA01",3,0)
 ;
"RTN","RA01",4,0)
 ; RAERROR ------------- ERROR HANDLING DATA
"RTN","RA01",5,0)
 ;
"RTN","RA01",6,0)
 ; RAERROR(
"RTN","RA01",7,0)
 ;
"RTN","RA01",8,0)
 ;   "ES",               Error stack. If the error stack is enabled
"RTN","RA01",9,0)
 ;                       (see CLEAR^RAERR), this node is defined and
"RTN","RA01",10,0)
 ;                       not zero.
"RTN","RA01",11,0)
 ;     Index,
"RTN","RA01",12,0)
 ;       0)              Error Descriptor (see ^RAERR for details)
"RTN","RA01",13,0)
 ;                         ^01: Error code
"RTN","RA01",14,0)
 ;                         ^02: Error message
"RTN","RA01",15,0)
 ;                         ^03: Error location
"RTN","RA01",16,0)
 ;                         ^04: Type ("I" - information,
"RTN","RA01",17,0)
 ;                              "W" - warning, "E" - error)
"RTN","RA01",18,0)
 ;       1,Seq#)         Error details text (optional)
"RTN","RA01",19,0)
 ;
"RTN","RA01",20,0)
 ; RAPARAMS ------------ PACKAGE-WIDE API PARAMETERS
"RTN","RA01",21,0)
 ;
"RTN","RA01",22,0)
 ; RAPARAMS(
"RTN","RA01",23,0)
 ;
"RTN","RA01",24,0)
 ;   "DEBUG")            Debug mode
"RTN","RA01",25,0)
 ;                         0  Disabled (default; undefined actually)
"RTN","RA01",26,0)
 ;                         1  Silent debug mode
"RTN","RA01",27,0)
 ;                         2  Debug mode
"RTN","RA01",28,0)
 ;
"RTN","RA01",29,0)
 ;   "KIDS")             This node should be defined and non-zero only
"RTN","RA01",30,0)
 ;                       during the KIDS pre/post-install process:
"RTN","RA01",31,0)
 ;                         1  Pre-install
"RTN","RA01",32,0)
 ;                         2  Post-install
"RTN","RA01",33,0)
 ;
"RTN","RA01",34,0)
 ;                       Some APIs (e.g. ABORTMSG^RAKIDS) inspect this
"RTN","RA01",35,0)
 ;                       node to adjust their behavior to the KIDS
"RTN","RA01",36,0)
 ;                       environment.
"RTN","RA01",37,0)
 ;
"RTN","RA01",38,0)
 ;   "XTMPLOCK")         This node is defined if the ^XTMP("RALOCK",0)
"RTN","RA01",39,0)
 ;                       has been updated already (see $$LOCKFM^RALOCK
"RTN","RA01",40,0)
 ;                       for details).
"RTN","RA01",41,0)
 ;
"RTN","RA01",42,0)
 ;   "PAGECTRL")         Flags that control the $$PAGE^RAUTL22:
"RTN","RA01",43,0)
 ;
"RTN","RA01",44,0)
 ;                         E  Force ",UTIMEOUT," or ",UCANCEL,"
"RTN","RA01",45,0)
 ;                            run-time errors instead of returning
"RTN","RA01",46,0)
 ;                            error codes (-2 or -1 respectively).
"RTN","RA01",47,0)
 ;
"RTN","RA01",48,0)
 Q
"RTN","RA90PST")
0^58^B1243137^n/a
"RTN","RA90PST",1,0)
RA90PST ;HCIOFO/SG - PATCH RA*5*90 INSTALLATION CODE ; 4/3/08 10:10am
"RTN","RA90PST",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RA90PST",3,0)
 ;
"RTN","RA90PST",4,0)
 Q
"RTN","RA90PST",5,0)
 ;
"RTN","RA90PST",6,0)
POST ;
"RTN","RA90PST",7,0)
 N IEN,IN,MSG,NAME,RAFDA,RAMSG
"RTN","RA90PST",8,0)
 D BMES^RAKIDS("Updating records of file #79.7...")
"RTN","RA90PST",9,0)
 F NAME="RA-PSCRIBE-TCP","RA-TALKLINK-TCP","RA-SCIMAGE-TCP","RA-RADWHERE-TCP"  D  D MES^RAKIDS(MSG)
"RTN","RA90PST",10,0)
 . S MSG=$$LJ^XLFSTR(NAME,20)
"RTN","RA90PST",11,0)
 . S IEN=$$FIND1^DIC(79.7,,"X",NAME,"B",,"RAMSG")
"RTN","RA90PST",12,0)
 . I IEN'>0  S MSG=MSG_$S(IEN=0:"Not found",1:"Error (FIND1^DIC)")  Q
"RTN","RA90PST",13,0)
 . S RAFDA(79.7,IEN_",",1.3)="S"  ; APPLICATION TYPE
"RTN","RA90PST",14,0)
 . D FILE^DIE(,"RAFDA","RAMSG")
"RTN","RA90PST",15,0)
 . S MSG=MSG_$S($G(DIERR):"Error (FILE^DIE)",1:"Ok")
"RTN","RA90PST",16,0)
 Q
"RTN","RAERR")
0^36^B15076912^n/a
"RTN","RAERR",1,0)
RAERR ;HCIOFO/SG - ERROR HANDLING ; 4/10/08 4:46pm
"RTN","RAERR",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAERR",3,0)
 ;
"RTN","RAERR",4,0)
 ; * Error codes are negative numbers.
"RTN","RAERR",5,0)
 ;
"RTN","RAERR",6,0)
 ; * The corresponding error messages are stored in the DIALOG file
"RTN","RAERR",7,0)
 ;   (#.84). Dialog numbers are calculated as follows:
"RTN","RAERR",8,0)
 ;
"RTN","RAERR",9,0)
 ;         Dialog# = 700000 - (ErrorCode / 1000).
"RTN","RAERR",10,0)
 ;
"RTN","RAERR",11,0)
 ;   For example, dialog number for the error code -9 is 700000.009.
"RTN","RAERR",12,0)
 ;
"RTN","RAERR",13,0)
 ; * A message itself is stored in the second "^"-piece of the dialog 
"RTN","RAERR",14,0)
 ;   text line. The first piece determines the problem type:
"RTN","RAERR",15,0)
 ;
"RTN","RAERR",16,0)
 ;     I - Information. No actions are required.
"RTN","RAERR",17,0)
 ;
"RTN","RAERR",18,0)
 ;         The $$ERROR^RAERR does not store this kind of messages in
"RTN","RAERR",19,0)
 ;         the RAERROR stack. However, they can be explicitly stored
"RTN","RAERR",20,0)
 ;         there using the PUSH^RAERR.
"RTN","RAERR",21,0)
 ;
"RTN","RAERR",22,0)
 ;     W - Warning. There was a problem but the code was able to
"RTN","RAERR",23,0)
 ;         ignore/recover and continue. It would be a good idea
"RTN","RAERR",24,0)
 ;         to review the problem and fix it if/when possible.
"RTN","RAERR",25,0)
 ;
"RTN","RAERR",26,0)
 ;     E - Error. The code encountered a major problem and could
"RTN","RAERR",27,0)
 ;         not continue. Data, code, or both should be fixed!
"RTN","RAERR",28,0)
 ;
"RTN","RAERR",29,0)
 Q
"RTN","RAERR",30,0)
 ;
"RTN","RAERR",31,0)
 ;***** INITIALIZES THE ERROR STACK
"RTN","RAERR",32,0)
 ;
"RTN","RAERR",33,0)
 ; [ENABLE]      Enable error stack (0|1). If the stack is enabled,
"RTN","RAERR",34,0)
 ;               the $$ERROR function stores all error descriptors
"RTN","RAERR",35,0)
 ;               there. Otherwise, only the latest error descriptor
"RTN","RAERR",36,0)
 ;               is accessible (the result value of the $$ERROR
"RTN","RAERR",37,0)
 ;               function).
"RTN","RAERR",38,0)
 ;
"RTN","RAERR",39,0)
CLEAR(ENABLE) ;
"RTN","RAERR",40,0)
 S:$G(ENABLE)="" ENABLE=+$G(RAERROR("ES"))
"RTN","RAERR",41,0)
 K RAERROR("ES")  D:ENABLE ENABLE(1)
"RTN","RAERR",42,0)
 D CLEAN^DILF
"RTN","RAERR",43,0)
 Q
"RTN","RAERR",44,0)
 ;
"RTN","RAERR",45,0)
 ;***** CHECKS THE ERRORS AFTER A FILEMAN DBS CALL
"RTN","RAERR",46,0)
 ;
"RTN","RAERR",47,0)
 ; RA8MSG        Closed reference of the error message array
"RTN","RAERR",48,0)
 ;               (from DBS calls). If this parameter is empty,
"RTN","RAERR",49,0)
 ;               then ^TMP("DIERR",$J) is assumed.
"RTN","RAERR",50,0)
 ;
"RTN","RAERR",51,0)
 ; [ERRCODE]     Error code to assign (see dialogs #700000.*).
"RTN","RAERR",52,0)
 ;
"RTN","RAERR",53,0)
 ; [FILE]        File number used in the DBS call.
"RTN","RAERR",54,0)
 ; [IENS]        IENS used in the DBS call.
"RTN","RAERR",55,0)
 ;
"RTN","RAERR",56,0)
 ; This function checks the DIERR and @RA8MSG variables for
"RTN","RAERR",57,0)
 ; errors after a FileMan DBS call.
"RTN","RAERR",58,0)
 ; 
"RTN","RAERR",59,0)
 ; Return Values:
"RTN","RAERR",60,0)
 ;
"RTN","RAERR",61,0)
 ; If there are no errors found, it returns an empty string.
"RTN","RAERR",62,0)
 ; In case of errors, the result depends on value of the
"RTN","RAERR",63,0)
 ; parameter:
"RTN","RAERR",64,0)
 ;
"RTN","RAERR",65,0)
 ; If ERRCODE is omitted or equals 0, the function returns a string
"RTN","RAERR",66,0)
 ; containing the list of FileMan error codes separated by comma.
"RTN","RAERR",67,0)
 ; 
"RTN","RAERR",68,0)
 ; If ERRCODE is not zero, the $$ERROR^RAERR function is called
"RTN","RAERR",69,0)
 ; and its result is returned.
"RTN","RAERR",70,0)
 ;
"RTN","RAERR",71,0)
 ; NOTE: This entry point can also be called as a procedure:
"RTN","RAERR",72,0)
 ;       D DBS^RAERR(...) if you do not need its return value.
"RTN","RAERR",73,0)
 ;
"RTN","RAERR",74,0)
DBS(RA8MSG,ERRCODE,FILE,IENS) ;
"RTN","RAERR",75,0)
 I '$G(DIERR)  Q:$QUIT ""  Q
"RTN","RAERR",76,0)
 N ERRLST,ERRNODE,I,MSGTEXT
"RTN","RAERR",77,0)
 S ERRNODE=$S($G(RA8MSG)'="":$NA(@RA8MSG@("DIERR")),1:$NA(^TMP("DIERR",$J)))
"RTN","RAERR",78,0)
 I $D(@ERRNODE)<10  Q:$QUIT ""  Q
"RTN","RAERR",79,0)
 ;--- Return a list of errors
"RTN","RAERR",80,0)
 I '$G(ERRCODE)  D  Q:$QUIT $P(ERRLST,",",2,999)  Q
"RTN","RAERR",81,0)
 . S ERRLST="",I=0
"RTN","RAERR",82,0)
 . F  S I=$O(@ERRNODE@("E",I))  Q:'I  S ERRLST=ERRLST_","_I
"RTN","RAERR",83,0)
 . D CLEAN^DILF
"RTN","RAERR",84,0)
 ;--- Record the error message
"RTN","RAERR",85,0)
 D MSG^DIALOG("AE",.MSGTEXT,,,$G(RA8MSG)),CLEAN^DILF
"RTN","RAERR",86,0)
 S I=$S($G(FILE):"; File #"_FILE,1:"")
"RTN","RAERR",87,0)
 S:$G(IENS)'="" I=I_"; IENS: """_IENS_""""
"RTN","RAERR",88,0)
 S I=$$ERROR(ERRCODE,.MSGTEXT,I)
"RTN","RAERR",89,0)
 Q:$QUIT I  Q
"RTN","RAERR",90,0)
 ;
"RTN","RAERR",91,0)
 ;***** ENABLES/DISABLES THE ERROR STACK
"RTN","RAERR",92,0)
 ;
"RTN","RAERR",93,0)
 ; ENABLE        Enable (1) or disable (0) the error stack.
"RTN","RAERR",94,0)
 ;               Content of the stack is not affected.
"RTN","RAERR",95,0)
 ; 
"RTN","RAERR",96,0)
 ; Return Values:
"RTN","RAERR",97,0)
 ;
"RTN","RAERR",98,0)
 ; Previous state of the stack: 1 - enabled, 0 - disabled.
"RTN","RAERR",99,0)
 ;
"RTN","RAERR",100,0)
 ; NOTE: This entry point can also be called as a procedure:
"RTN","RAERR",101,0)
 ;       D ENABLE^RAERR(...) if you do not need its return value.
"RTN","RAERR",102,0)
 ;
"RTN","RAERR",103,0)
ENABLE(ENABLE) ;
"RTN","RAERR",104,0)
 N OLD
"RTN","RAERR",105,0)
 S OLD=+$G(RAERROR("ES"))
"RTN","RAERR",106,0)
 S RAERROR("ES")=+ENABLE
"RTN","RAERR",107,0)
 Q:$QUIT OLD  Q
"RTN","RAERR",108,0)
 ;
"RTN","RAERR",109,0)
 ;***** GENERATES THE ERROR MESSAGE
"RTN","RAERR",110,0)
 ;
"RTN","RAERR",111,0)
 ; ERRCODE       Error code (see dialogs #700000.*).
"RTN","RAERR",112,0)
 ;
"RTN","RAERR",113,0)
 ; [[.]RAINFO]   Optional additional information: either a string or
"RTN","RAERR",114,0)
 ;               a reference to a local array that contains strings
"RTN","RAERR",115,0)
 ;               prepared for storing in a word processing field
"RTN","RAERR",116,0)
 ;               (first level nodes; no 0-nodes).
"RTN","RAERR",117,0)
 ;
"RTN","RAERR",118,0)
 ; [ARG1-ARG5]   Optional parameters for $$MSG^RAERR01.
"RTN","RAERR",119,0)
 ;
"RTN","RAERR",120,0)
 ; Return Values:
"RTN","RAERR",121,0)
 ;       <0  Error code^Message text^Error location^Type
"RTN","RAERR",122,0)
 ;        0  Ok (if ERRCODE'<0)
"RTN","RAERR",123,0)
 ;
"RTN","RAERR",124,0)
 ; NOTE: "^" is replaced with "~" in the error location stored
"RTN","RAERR",125,0)
 ;       in the 3rd piece of the error descriptor.
"RTN","RAERR",126,0)
 ;
"RTN","RAERR",127,0)
 ; NOTE: This entry point can also be called as a procedure:
"RTN","RAERR",128,0)
 ;       D ERROR^RAERR(...) if you do not need its return value.
"RTN","RAERR",129,0)
 ;
"RTN","RAERR",130,0)
ERROR(ERRCODE,RAINFO,ARG1,ARG2,ARG3,ARG4,ARG5) ;
"RTN","RAERR",131,0)
 I ERRCODE'<0  Q:$QUIT 0  Q
"RTN","RAERR",132,0)
 N IEN,MSG,PLACE,SL,TMP,TYPE
"RTN","RAERR",133,0)
 ;--- Get the error location
"RTN","RAERR",134,0)
 S SL=$STACK(-1)-1,PLACE=""
"RTN","RAERR",135,0)
 F  Q:SL'>0  D  Q:'(PLACE[$T(+0))  S SL=SL-1
"RTN","RAERR",136,0)
 . S PLACE=$P($STACK(SL,"PLACE")," ")
"RTN","RAERR",137,0)
 ;--- Prepare the additional information
"RTN","RAERR",138,0)
 I $D(RAINFO)=1  S TMP=RAINFO  K RAINFO  S RAINFO(1)=TMP
"RTN","RAERR",139,0)
 ;--- Prepare the message descriptor
"RTN","RAERR",140,0)
 S MSG=$$MSG^RAERR01(ERRCODE,.TYPE,.ARG1,.ARG2,.ARG3,.ARG4,.ARG5)
"RTN","RAERR",141,0)
 S MSG=(+ERRCODE)_U_MSG_U_$TR(PLACE,U,"~")_U_TYPE
"RTN","RAERR",142,0)
 ;--- Store the descriptor
"RTN","RAERR",143,0)
 D:TYPE'="I" PUSH(MSG,.RAINFO)
"RTN","RAERR",144,0)
 ;--- Display the error if debug mode is on
"RTN","RAERR",145,0)
 I $G(RAPARAMS("DEBUG"))>1  U $G(IO(0),0)  D  U $G(IO,0)
"RTN","RAERR",146,0)
 . D PRTERRS^RAERR01(MSG,.RAINFO)
"RTN","RAERR",147,0)
 ;---
"RTN","RAERR",148,0)
 Q:$QUIT MSG  Q
"RTN","RAERR",149,0)
 ;
"RTN","RAERR",150,0)
 ;***** GENERATES THE 'INVALID PARAMETER VALUE' ERROR
"RTN","RAERR",151,0)
 ;
"RTN","RAERR",152,0)
 ; RA8NAME       Name of the parameter
"RTN","RAERR",153,0)
 ;
"RTN","RAERR",154,0)
 ; NOTE: This entry point can also be called as a procedure:
"RTN","RAERR",155,0)
 ;       D IPVE^RAERR(...) if you do not need its return value.
"RTN","RAERR",156,0)
 ;
"RTN","RAERR",157,0)
IPVE(RA8NAME) ;
"RTN","RAERR",158,0)
 N RA8RC
"RTN","RAERR",159,0)
 S RA8RC=$S($D(@RA8NAME)#10:"'"_@RA8NAME_"'",1:"<UNDEFINED>")
"RTN","RAERR",160,0)
 S RA8RC=$$ERROR(-3,RA8NAME_"="_RA8RC,RA8NAME)
"RTN","RAERR",161,0)
 Q:$QUIT RA8RC  Q
"RTN","RAERR",162,0)
 ;
"RTN","RAERR",163,0)
 ;***** PROCESSES THE ERROR DESCRIPTOR RETURNED BY $$LOCKFM^RALOCK
"RTN","RAERR",164,0)
 ;
"RTN","RAERR",165,0)
 ; ERROR         Error descriptor
"RTN","RAERR",166,0)
 ;
"RTN","RAERR",167,0)
 ; OBJNAME       Name of the object that the $$LOCKFM^RALOCK tried
"RTN","RAERR",168,0)
 ;               to lock when it returned the error descriptor.
"RTN","RAERR",169,0)
 ;
"RTN","RAERR",170,0)
LOCKERR(ERROR,OBJNAME) ;
"RTN","RAERR",171,0)
 Q $S(ERROR>0:$$ERROR(-15,$$TEXT^RALOCK(ERROR),OBJNAME),1:ERROR)
"RTN","RAERR",172,0)
 ;
"RTN","RAERR",173,0)
 ;***** PUSHES THE ERROR INTO THE ERROR STACK
"RTN","RAERR",174,0)
 ;
"RTN","RAERR",175,0)
 ; ERROR         Error descriptor
"RTN","RAERR",176,0)
 ;
"RTN","RAERR",177,0)
 ; [.RAINFO]     Reference to a local array with additional
"RTN","RAERR",178,0)
 ;               information
"RTN","RAERR",179,0)
 ;
"RTN","RAERR",180,0)
PUSH(ERROR,RAINFO) ;
"RTN","RAERR",181,0)
 Q:'$G(RAERROR("ES"))
"RTN","RAERR",182,0)
 N IEN
"RTN","RAERR",183,0)
 ;--- Store the descriptor
"RTN","RAERR",184,0)
 S IEN=$O(RAERROR("ES"," "),-1)+1
"RTN","RAERR",185,0)
 S RAERROR("ES",IEN,0)=ERROR
"RTN","RAERR",186,0)
 M RAERROR("ES",IEN,1)=RAINFO
"RTN","RAERR",187,0)
 Q
"RTN","RAERR",188,0)
 ;
"RTN","RAERR",189,0)
 ;***** ASSIGNS THE DEFAULT ERROR HANDLER
"RTN","RAERR",190,0)
 ;
"RTN","RAERR",191,0)
 ; [RCVNAME]     Name of a variable for the error code
"RTN","RAERR",192,0)
 ;
"RTN","RAERR",193,0)
 ;               See the RTEHNDLR^RAERR01 for more details.
"RTN","RAERR",194,0)
 ;
"RTN","RAERR",195,0)
SETDEFEH(RCVNAME) ;
"RTN","RAERR",196,0)
 S $ECODE="",$ETRAP="D RTEHNDLR^"_$NA(RAERR01($G(RCVNAME),$STACK(-1)-2))
"RTN","RAERR",197,0)
 Q
"RTN","RAERR01")
0^37^B17861694^n/a
"RTN","RAERR01",1,0)
RAERR01 ;HCIOFO/SG - ERROR HANDLING UTILITIES ; 1/18/08 4:27pm
"RTN","RAERR01",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAERR01",3,0)
 ;
"RTN","RAERR01",4,0)
 Q
"RTN","RAERR01",5,0)
 ;
"RTN","RAERR01",6,0)
 ;***** RETURNS A LIST OF ERROR CODES FROM THE STACK
"RTN","RAERR01",7,0)
 ;
"RTN","RAERR01",8,0)
 ; [ENCLOSE]     Enclose the list in commas.
"RTN","RAERR01",9,0)
 ;
"RTN","RAERR01",10,0)
 ; Return Values:
"RTN","RAERR01",11,0)
 ;       ""  No errors
"RTN","RAERR01",12,0)
 ;      ...  List of error codes (in reverse chronological order)
"RTN","RAERR01",13,0)
 ;           separated by commas.
"RTN","RAERR01",14,0)
 ;
"RTN","RAERR01",15,0)
ERRLST(ENCLOSE) ;
"RTN","RAERR01",16,0)
 N I,LST
"RTN","RAERR01",17,0)
 S I=" ",LST=""
"RTN","RAERR01",18,0)
 F  S I=$O(RAERROR("ES",I),-1)  Q:I'>0  D
"RTN","RAERR01",19,0)
 . S LST=LST_","_$P(RAERROR("ES",I,0),U)
"RTN","RAERR01",20,0)
 Q $S(LST="":"",$G(ENCLOSE):LST_",",1:$P(LST,",",2,999999))
"RTN","RAERR01",21,0)
 ;
"RTN","RAERR01",22,0)
 ;***** RETURNS THE TEXT AND TYPE OF THE MESSAGE
"RTN","RAERR01",23,0)
 ;
"RTN","RAERR01",24,0)
 ; ERRCODE       Error code
"RTN","RAERR01",25,0)
 ;
"RTN","RAERR01",26,0)
 ; [.TYPE]       Reference to a local variable where the problem
"RTN","RAERR01",27,0)
 ;               type is returned ("I" -  Information, "W" - warning, 
"RTN","RAERR01",28,0)
 ;               "E" - error).
"RTN","RAERR01",29,0)
 ;
"RTN","RAERR01",30,0)
 ; [ARG1-ARG5]   Optional parameters that substitute the |n| "windows"
"RTN","RAERR01",31,0)
 ;               in the text of the message (for example, the |2| will
"RTN","RAERR01",32,0)
 ;               be substituted by the value of the ARG2).
"RTN","RAERR01",33,0)
 ;
"RTN","RAERR01",34,0)
 ; NOTE: The "^" is replaced with the "~" in the resulting message.
"RTN","RAERR01",35,0)
 ;
"RTN","RAERR01",36,0)
MSG(ERRCODE,TYPE,ARG1,ARG2,ARG3,ARG4,ARG5) ;
"RTN","RAERR01",37,0)
 Q:ERRCODE'<0 ""
"RTN","RAERR01",38,0)
 N ARG,I1,I2,MSG
"RTN","RAERR01",39,0)
 ;--- Get a descriptor of the message
"RTN","RAERR01",40,0)
 S MSG=$$EZBLD^DIALOG(700000-(ERRCODE/1000))
"RTN","RAERR01",41,0)
 ;--- Parse and validate the descriptor
"RTN","RAERR01",42,0)
 S TYPE=$E(MSG),MSG=$P(MSG,U,2,999)
"RTN","RAERR01",43,0)
 S:("IWE"'[TYPE)!(TYPE="") TYPE="E"
"RTN","RAERR01",44,0)
 Q:MSG?." " "Unknown error ("_ERRCODE_")"
"RTN","RAERR01",45,0)
 ;--- Substitute parameters
"RTN","RAERR01",46,0)
 S I1=2
"RTN","RAERR01",47,0)
 F  S I1=$F(MSG,"|",I1-1)  Q:'I1  D
"RTN","RAERR01",48,0)
 . S I2=$F(MSG,"|",I1)  Q:'I2
"RTN","RAERR01",49,0)
 . X "S ARG=$G(ARG"_+$TR($E(MSG,I1,I2-2)," ")_")"
"RTN","RAERR01",50,0)
 . S $E(MSG,I1-1,I2-1)=ARG
"RTN","RAERR01",51,0)
 Q $TR($$TRIM^XLFSTR(MSG),U,"~")
"RTN","RAERR01",52,0)
 ;
"RTN","RAERR01",53,0)
 ;***** DISPLAYS THE ERROR STACK OR A SINGLE ERROR MESSAGE
"RTN","RAERR01",54,0)
 ;
"RTN","RAERR01",55,0)
 ; [ERROR]       Descriptor of a single error to be displayed.
"RTN","RAERR01",56,0)
 ;
"RTN","RAERR01",57,0)
 ; [.RAINFO]     Reference to a local array with additional
"RTN","RAERR01",58,0)
 ;               information for a single error.
"RTN","RAERR01",59,0)
 ;
"RTN","RAERR01",60,0)
PRTERRS(ERROR,RAINFO) ;
"RTN","RAERR01",61,0)
 Q:($G(ERROR)'<0)&($D(RAERROR("ES"))<10)
"RTN","RAERR01",62,0)
 N EXIT,IMSG
"RTN","RAERR01",63,0)
 ;--- Print table header
"RTN","RAERR01",64,0)
 Q:$$PAGE^RAUTL22(3)<0
"RTN","RAERR01",65,0)
 D W^RAUTL22("Code  Message")
"RTN","RAERR01",66,0)
 D W^RAUTL22("      Additional Information")
"RTN","RAERR01",67,0)
 D W^RAUTL22("      Location")
"RTN","RAERR01",68,0)
 D W^RAUTL22("----  "_$$REPEAT^XLFSTR("-",IOM-7))
"RTN","RAERR01",69,0)
 ;--- Print a single error message
"RTN","RAERR01",70,0)
 I $G(ERROR)<0  S EXIT=$$PRT1ERR(ERROR,"RAINFO")  Q
"RTN","RAERR01",71,0)
 ;--- Print the error stack (most recent messages first)
"RTN","RAERR01",72,0)
 S IMSG=" "  K EXIT
"RTN","RAERR01",73,0)
 F  S IMSG=$O(RAERROR("ES",IMSG),-1)  Q:IMSG'>0  D  Q:$G(EXIT)
"RTN","RAERR01",74,0)
 . D:$D(EXIT) W^RAUTL22(" ")
"RTN","RAERR01",75,0)
 . S EXIT=$$PRT1ERR(RAERROR("ES",IMSG,0),$NA(RAERROR("ES",IMSG,1)))
"RTN","RAERR01",76,0)
 Q
"RTN","RAERR01",77,0)
 ;
"RTN","RAERR01",78,0)
PRT1ERR(ERR,RA8INFO) ;
"RTN","RAERR01",79,0)
 N I,RC,SP6
"RTN","RAERR01",80,0)
 S RC=0,SP6="      "
"RTN","RAERR01",81,0)
 ;===
"RTN","RAERR01",82,0)
 D
"RTN","RAERR01",83,0)
 . S RC=$$PAGE^RAUTL22  Q:RC<0
"RTN","RAERR01",84,0)
 . D W^RAUTL22($J(+ERR,4)_"  "_$$TRUNC^RAUTL22($P(ERR,U,2),IOM-7))
"RTN","RAERR01",85,0)
 . ;--- Display the additional information
"RTN","RAERR01",86,0)
 . I $G(RA8INFO)'="",$D(@RA8INFO)>1  S I=""  D
"RTN","RAERR01",87,0)
 . . F  S I=$O(@RA8INFO@(I))  Q:I=""  D  Q:RC<0
"RTN","RAERR01",88,0)
 . . . S RC=$$PAGE^RAUTL22  Q:RC<0
"RTN","RAERR01",89,0)
 . . . D W^RAUTL22(SP6_$$TRUNC^RAUTL22(@RA8INFO@(I),IOM-7))
"RTN","RAERR01",90,0)
 . Q:RC<0
"RTN","RAERR01",91,0)
 . ;--- Display the location
"RTN","RAERR01",92,0)
 . S I=$TR($P(ERR,U,3),"~","^")
"RTN","RAERR01",93,0)
 . I I'=""  S RC=$$PAGE^RAUTL22  D:RC'<0 W^RAUTL22(SP6_I)
"RTN","RAERR01",94,0)
 Q:RC<0 RC
"RTN","RAERR01",95,0)
 ;===
"RTN","RAERR01",96,0)
 S RC=$$PAGE^RAUTL22
"RTN","RAERR01",97,0)
 Q $S(RC<0:RC,1:0)
"RTN","RAERR01",98,0)
 ;
"RTN","RAERR01",99,0)
 ;***** RETURNS THE ERROR STACK FROM A REMOTE PROCEDURE
"RTN","RAERR01",100,0)
 ;
"RTN","RAERR01",101,0)
 ; .RESULT       Reference to a local variable where the error
"RTN","RAERR01",102,0)
 ;               descriptors are returned to.
"RTN","RAERR01",103,0)
 ;
"RTN","RAERR01",104,0)
 ; LASTERR       The last error code.
"RTN","RAERR01",105,0)
 ;
"RTN","RAERR01",106,0)
 ; Return Values:
"RTN","RAERR01",107,0)
 ;
"RTN","RAERR01",108,0)
 ; RESULT(0)             Result descriptor
"RTN","RAERR01",109,0)
 ;                         ^01: The last error code (LASTERR)
"RTN","RAERR01",110,0)
 ;                         ^02: Number of error descriptors
"RTN","RAERR01",111,0)
 ;
"RTN","RAERR01",112,0)
 ; RESULT(i)             Error descriptor
"RTN","RAERR01",113,0)
 ;                         ^01: Error code
"RTN","RAERR01",114,0)
 ;                         ^02: Message
"RTN","RAERR01",115,0)
 ;                         ^03: Error location
"RTN","RAERR01",116,0)
 ; RESULT(j)             Line of the additional info
"RTN","RAERR01",117,0)
 ;                         ^01: ""
"RTN","RAERR01",118,0)
 ;                         ^02: Text
"RTN","RAERR01",119,0)
 ;
"RTN","RAERR01",120,0)
 ; Error descriptors are returned in reverse chronological order
"RTN","RAERR01",121,0)
 ; (most recent first).
"RTN","RAERR01",122,0)
 ; 
"RTN","RAERR01",123,0)
RPCSTK(RESULT,LASTERR) ;
"RTN","RAERR01",124,0)
 N CNT,ECNT,EPTR,I,TMP
"RTN","RAERR01",125,0)
 K RESULT  S RESULT(0)=(+LASTERR)_U_"0"
"RTN","RAERR01",126,0)
 S TMP=$$RTRNFMT^XWBLIB(2,1)
"RTN","RAERR01",127,0)
 Q:$D(RAERROR("ES"))<10
"RTN","RAERR01",128,0)
 ;
"RTN","RAERR01",129,0)
 S EPTR="",(CNT,ECNT)=0
"RTN","RAERR01",130,0)
 F  S EPTR=$O(RAERROR("ES",EPTR),-1)  Q:EPTR=""  D
"RTN","RAERR01",131,0)
 . S TMP=$G(RAERROR("ES",EPTR,0))  Q:'TMP
"RTN","RAERR01",132,0)
 . S CNT=CNT+1,ECNT=ECNT+1,RESULT(CNT)=TMP
"RTN","RAERR01",133,0)
 . S I=0
"RTN","RAERR01",134,0)
 . F  S I=$O(RAERROR("ES",EPTR,1,I))  Q:I'>0  D
"RTN","RAERR01",135,0)
 . . S CNT=CNT+1,$P(RESULT(CNT),U,2)=RAERROR("ES",EPTR,1,I)
"RTN","RAERR01",136,0)
 ;
"RTN","RAERR01",137,0)
 S $P(RESULT(0),U,2)=ECNT
"RTN","RAERR01",138,0)
 K ^TMP("DILIST",$J)
"RTN","RAERR01",139,0)
 Q
"RTN","RAERR01",140,0)
 ;
"RTN","RAERR01",141,0)
 ;+++++ DEFAULT RUN-TIME ERROR HANDLER
"RTN","RAERR01",142,0)
 ;
"RTN","RAERR01",143,0)
 ; RAZZRCV       Name of a variable that the error code
"RTN","RAERR01",144,0)
 ;               (-1, -2, or -4) is assigned to.
"RTN","RAERR01",145,0)
 ;
"RTN","RAERR01",146,0)
 ; RAZZSTL       Stack level (value of the $STACK special variable)
"RTN","RAERR01",147,0)
 ;               where execution control is returned to.
"RTN","RAERR01",148,0)
 ;
"RTN","RAERR01",149,0)
RTEHNDLR(RAZZRCV,RAZZSTL) ;
"RTN","RAERR01",150,0)
 N RAZZERR,RAZZRC
"RTN","RAERR01",151,0)
 S RAZZERR=$$EC^%ZOSV
"RTN","RAERR01",152,0)
 S:$ECODE=",UTIMEOUT," RAZZRC=-2
"RTN","RAERR01",153,0)
 S:$ECODE=",UCANCEL," RAZZRC=-1
"RTN","RAERR01",154,0)
 ;--- Record the error if this is not user "^" or timeout
"RTN","RAERR01",155,0)
 I '$G(RAZZRC)  D ^%ZTER  S RAZZRC=+$$ERROR^RAERR(-4,,RAZZERR)
"RTN","RAERR01",156,0)
 ;--- Unwind the stack and assign/return the error code
"RTN","RAERR01",157,0)
 S $ECODE="",RAZZSTL=RAZZSTL+1
"RTN","RAERR01",158,0)
 I RAZZSTL>0,$STACK(-1)>RAZZSTL  D
"RTN","RAERR01",159,0)
 . S $ETRAP="S:$ESTACK'>0 $ECODE="""""
"RTN","RAERR01",160,0)
 . S:RAZZRCV'="" $ETRAP=$ETRAP_","_RAZZRCV_"="_RAZZRC
"RTN","RAERR01",161,0)
 . S $ETRAP=$ETRAP_" Q:$QUIT "_RAZZRC_" Q"
"RTN","RAERR01",162,0)
 . S $ECODE=",U1,"
"RTN","RAERR01",163,0)
 E  S:RAZZRCV'="" @RAZZRCV=RAZZRC
"RTN","RAERR01",164,0)
 Q:$QUIT RAZZRC  Q
"RTN","RAKIDS")
0^38^B10188507^n/a
"RTN","RAKIDS",1,0)
RAKIDS ;HCIOFO/SG - INSTALLATION UTILITIES ; 2/24/09 4:17pm
"RTN","RAKIDS",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAKIDS",3,0)
 ;
"RTN","RAKIDS",4,0)
 Q
"RTN","RAKIDS",5,0)
 ;
"RTN","RAKIDS",6,0)
 ;***** DISPLAY THE ERROR MESSAGE WHEN INSTALLATION IS ABORTED
"RTN","RAKIDS",7,0)
 ;
"RTN","RAKIDS",8,0)
 ; [DLGNUM]      Dialog number (file #.84). Default: 700005.001
"RTN","RAKIDS",9,0)
 ;
"RTN","RAKIDS",10,0)
ABORTMSG(DLGNUM) ;
"RTN","RAKIDS",11,0)
 N PARAMS,RAI,RANODE,TMP
"RTN","RAKIDS",12,0)
 S:$G(DLGNUM)'>0 DLGNUM=700005.001
"RTN","RAKIDS",13,0)
 ;--- Load the message text
"RTN","RAKIDS",14,0)
 S TMP=+$G(RAPARAMS("KIDS"))
"RTN","RAKIDS",15,0)
 S PARAMS("KIDS")=$S(TMP=1:"pre-",TMP=2:"post-",1:"")_"install"
"RTN","RAKIDS",16,0)
 S RANODE=$$DLGTXT^RAUTL22(DLGNUM,.PARAMS,75)
"RTN","RAKIDS",17,0)
 ;--- Display the message
"RTN","RAKIDS",18,0)
 S RAI=""
"RTN","RAKIDS",19,0)
 F  S RAI=$O(@RANODE@(RAI))  Q:RAI=""  D MES(@RANODE@(RAI,0))
"RTN","RAKIDS",20,0)
 ;--- Cleanup
"RTN","RAKIDS",21,0)
 K @RANODE
"RTN","RAKIDS",22,0)
 Q
"RTN","RAKIDS",23,0)
 ;
"RTN","RAKIDS",24,0)
 ;***** OUTPUTS THE INSTALLATION MESSAGE WITH INDENTATION
"RTN","RAKIDS",25,0)
 ;
"RTN","RAKIDS",26,0)
 ; MSG           Message
"RTN","RAKIDS",27,0)
 ;
"RTN","RAKIDS",28,0)
 ; [.INFO]       Reference to a local array that contains additional
"RTN","RAKIDS",29,0)
 ;               text that will be displayed after the main message.
"RTN","RAKIDS",30,0)
 ;
"RTN","RAKIDS",31,0)
 ; This procedure automatically adds an empty string before the
"RTN","RAKIDS",32,0)
 ; message (see the BMES^XPDUTL).
"RTN","RAKIDS",33,0)
 ;
"RTN","RAKIDS",34,0)
BMES(MSG,INFO) ;
"RTN","RAKIDS",35,0)
 N I
"RTN","RAKIDS",36,0)
 D BMES^XPDUTL("   "_MSG)
"RTN","RAKIDS",37,0)
 S I=""
"RTN","RAKIDS",38,0)
 F  S I=$O(INFO(I))  Q:I=""  D MES^XPDUTL("   "_INFO(I))
"RTN","RAKIDS",39,0)
 Q
"RTN","RAKIDS",40,0)
 ;
"RTN","RAKIDS",41,0)
 ;***** PROCESSES THE INSTALL CHECKPOINT
"RTN","RAKIDS",42,0)
 ;
"RTN","RAKIDS",43,0)
 ; CPNAME        Checkpoint name
"RTN","RAKIDS",44,0)
 ;
"RTN","RAKIDS",45,0)
 ; CALLBACK      Callback entry point ($$TAG^ROUTINE). This function
"RTN","RAKIDS",46,0)
 ;               accepts no parameters and must return either 0 if
"RTN","RAKIDS",47,0)
 ;               everything is Ok or a negative error code.
"RTN","RAKIDS",48,0)
 ;
"RTN","RAKIDS",49,0)
 ; [PARAM]       Value to set checkpoint parameter to.
"RTN","RAKIDS",50,0)
 ;
"RTN","RAKIDS",51,0)
 ; The function checks if the checkpoint is completed. If it is not,
"RTN","RAKIDS",52,0)
 ; the callback entry point is XECUTEd. If everything is Ok, the
"RTN","RAKIDS",53,0)
 ; function completes the checkpoint and returns 0. Otherwise, an
"RTN","RAKIDS",54,0)
 ; error code is returned (it can be generated either by this function
"RTN","RAKIDS",55,0)
 ; itself or returned from the callback entry point).
"RTN","RAKIDS",56,0)
 ;
"RTN","RAKIDS",57,0)
 ; Return Values:
"RTN","RAKIDS",58,0)
 ;       <0  Error code
"RTN","RAKIDS",59,0)
 ;        0  Ok
"RTN","RAKIDS",60,0)
 ;
"RTN","RAKIDS",61,0)
CP(CPNAME,CALLBACK,PARAM) ;
"RTN","RAKIDS",62,0)
 N RC
"RTN","RAKIDS",63,0)
 ;--- Verify the checkpoint and quit if it is completed
"RTN","RAKIDS",64,0)
 S RC=$$VERCP^XPDUTL(CPNAME)  Q:RC>0 0
"RTN","RAKIDS",65,0)
 ;--- Create the new checkpoint
"RTN","RAKIDS",66,0)
 I RC<0  D  Q:'RC $$ERROR^RAERR(-46,,CPNAME)
"RTN","RAKIDS",67,0)
 . S RC=$$NEWCP^XPDUTL(CPNAME,,.PARAM)
"RTN","RAKIDS",68,0)
 ;--- Reset the KIDS progress bar
"RTN","RAKIDS",69,0)
 S XPDIDTOT=0  D UPDATE^XPDID(0)
"RTN","RAKIDS",70,0)
 ;--- Execute the callback entry point
"RTN","RAKIDS",71,0)
 X "S RC="_CALLBACK  Q:RC<0 RC
"RTN","RAKIDS",72,0)
 ;--- Complete the check point
"RTN","RAKIDS",73,0)
 S RC=$$COMCP^XPDUTL(CPNAME)
"RTN","RAKIDS",74,0)
 Q:'RC $$ERROR^RAERR(-47,,CPNAME)
"RTN","RAKIDS",75,0)
 Q 0
"RTN","RAKIDS",76,0)
 ;
"RTN","RAKIDS",77,0)
 ;***** DELETES THE (SUB)FILE DD AND DATA (IF REQUESTED)
"RTN","RAKIDS",78,0)
 ;
"RTN","RAKIDS",79,0)
 ; FILE          File or subfile number
"RTN","RAKIDS",80,0)
 ;
"RTN","RAKIDS",81,0)
 ; [FLAGS]       String that contains flags for EN^DIU2:
"RTN","RAKIDS",82,0)
 ;                 "D"  Delete the data as well as the DD
"RTN","RAKIDS",83,0)
 ;                 "E"  Echo back information during deletion
"RTN","RAKIDS",84,0)
 ;                 "S"  Subfile data dictionary is to be deleted
"RTN","RAKIDS",85,0)
 ;                 "T"  Templates are to be deleted
"RTN","RAKIDS",86,0)
 ;
"RTN","RAKIDS",87,0)
 ; [SILENT]      If this parameters is defined and non-zero, the
"RTN","RAKIDS",88,0)
 ;               function will work in "silent" mode.
"RTN","RAKIDS",89,0)
 ;               Nothing will be displayed on the console or stored
"RTN","RAKIDS",90,0)
 ;               into the INSTALLATION file.
"RTN","RAKIDS",91,0)
 ;
"RTN","RAKIDS",92,0)
DELFILE(FILE,FLAGS,SILENT) ;
"RTN","RAKIDS",93,0)
 Q:'$$VFILE^DILFD(+FILE)
"RTN","RAKIDS",94,0)
 N DIU,FT
"RTN","RAKIDS",95,0)
 S DIU=+FILE,DIU(0)=$G(FLAGS)
"RTN","RAKIDS",96,0)
 I '$G(SILENT)  D
"RTN","RAKIDS",97,0)
 . S FT=$S(DIU(0)["S":"subfile",1:"file")
"RTN","RAKIDS",98,0)
 . D BMES("Deleting the "_FT_" #"_(+FILE)_"...")
"RTN","RAKIDS",99,0)
 D EN^DIU2
"RTN","RAKIDS",100,0)
 D:'$G(SILENT) MES("The "_FT_" has been deleted.")
"RTN","RAKIDS",101,0)
 Q
"RTN","RAKIDS",102,0)
 ;
"RTN","RAKIDS",103,0)
 ;***** DELETES FIELD DEFENITIONS FROM THE DD
"RTN","RAKIDS",104,0)
 ;
"RTN","RAKIDS",105,0)
 ; FILE          File number
"RTN","RAKIDS",106,0)
 ;
"RTN","RAKIDS",107,0)
 ; FLDLST        String that contains list of field numbers to
"RTN","RAKIDS",108,0)
 ;               delete (separated with the ';').
"RTN","RAKIDS",109,0)
 ;
"RTN","RAKIDS",110,0)
 ; [SILENT]      If this parameters is defined and non-zero, the
"RTN","RAKIDS",111,0)
 ;               function will work in "silent" mode.
"RTN","RAKIDS",112,0)
 ;               Nothing will be displayed on the console or stored
"RTN","RAKIDS",113,0)
 ;               into the INSTALLATION file.
"RTN","RAKIDS",114,0)
 ;
"RTN","RAKIDS",115,0)
DELFLDS(FILE,FLDLST,SILENT) ;
"RTN","RAKIDS",116,0)
 Q:'$$VFILE^DILFD(+FILE)
"RTN","RAKIDS",117,0)
 N DA,DIK,I,RC
"RTN","RAKIDS",118,0)
 D:'$G(SILENT)
"RTN","RAKIDS",119,0)
 . D BMES("Deleting the field definitions...")
"RTN","RAKIDS",120,0)
 . D MES("File #"_(+FILE)_", Fields: '"_FLDLST_"'")
"RTN","RAKIDS",121,0)
 S DA(1)=+FILE,DIK="^DD("_DA(1)_","
"RTN","RAKIDS",122,0)
 F I=1:1  S DA=$P(FLDLST,";",I)  Q:'DA  D ^DIK
"RTN","RAKIDS",123,0)
 D:'$G(SILENT) MES("The definitions have been deleted.")
"RTN","RAKIDS",124,0)
 Q
"RTN","RAKIDS",125,0)
 ;
"RTN","RAKIDS",126,0)
 ;***** OUTPUTS THE INSTALLATION MESSAGE WITH INDENTATION
"RTN","RAKIDS",127,0)
 ;
"RTN","RAKIDS",128,0)
 ; MSG           Message
"RTN","RAKIDS",129,0)
 ;
"RTN","RAKIDS",130,0)
 ; [.INFO]       Reference to a local array that contains additional
"RTN","RAKIDS",131,0)
 ;               text that will be displayed after the main message.
"RTN","RAKIDS",132,0)
 ;
"RTN","RAKIDS",133,0)
MES(MSG,INFO) ;
"RTN","RAKIDS",134,0)
 N I
"RTN","RAKIDS",135,0)
 D MES^XPDUTL("   "_MSG)
"RTN","RAKIDS",136,0)
 S I=""
"RTN","RAKIDS",137,0)
 F  S I=$O(INFO(I))  Q:I=""  D MES^XPDUTL("   "_INFO(I))
"RTN","RAKIDS",138,0)
 Q
"RTN","RAKIDS",139,0)
 ;
"RTN","RAKIDS",140,0)
 ;***** UPDATES THE FILE'S PACKAGE REVISION DATA (IF NECESSARY)
"RTN","RAKIDS",141,0)
 ;
"RTN","RAKIDS",142,0)
 ; FILE          File number
"RTN","RAKIDS",143,0)
 ;
"RTN","RAKIDS",144,0)
 ; [PRD]         Package revision data
"RTN","RAKIDS",145,0)
 ;                 ^01: Revision number (N.N)
"RTN","RAKIDS",146,0)
 ;                 ^02: Patch name
"RTN","RAKIDS",147,0)
 ;
"RTN","RAKIDS",148,0)
 ; If this entry point is called as a function, it returns the
"RTN","RAKIDS",149,0)
 ; previous value of the PACKAGE REVISION DATA attribute.
"RTN","RAKIDS",150,0)
 ;
"RTN","RAKIDS",151,0)
PRD(FILE,PRD) ;
"RTN","RAKIDS",152,0)
 N OLDPRD,RORMSG
"RTN","RAKIDS",153,0)
 S OLDPRD=$$GET1^DID(FILE,,,"PACKAGE REVISION DATA",,"RORMSG")
"RTN","RAKIDS",154,0)
 D:$G(PRD)>OLDPRD PRD^DILFD(FILE,PRD)
"RTN","RAKIDS",155,0)
 Q:$QUIT OLDPRD  Q
"RTN","RALOCK")
0^51^B17064924^n/a
"RTN","RALOCK",1,0)
RALOCK ;HCIOFO/SG - FILE/RECORD/FIELD LOCK ; 5/21/08 12:44pm
"RTN","RALOCK",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RALOCK",3,0)
 ;
"RTN","RALOCK",4,0)
 ; Entry points of this routine use the ^XTMP("RALOCK",...) global
"RTN","RALOCK",5,0)
 ; nodes to store lock descriptors:
"RTN","RALOCK",6,0)
 ;
"RTN","RALOCK",7,0)
 ; ^XTMP("RALOCK",
"RTN","RALOCK",8,0)
 ;   0)                  Standard node descriptor
"RTN","RALOCK",9,0)
 ;                         ^1: Purge date  (FileMan)
"RTN","RALOCK",10,0)
 ;                         ^2: Create date (FileMan)
"RTN","RALOCK",11,0)
 ;                         ^3: Description
"RTN","RALOCK",12,0)
 ;
"RTN","RALOCK",13,0)
 ;   NodeNdx)            Internal lock descriptor
"RTN","RALOCK",14,0)
 ;                         ^01: Date/Time (FileMan)
"RTN","RALOCK",15,0)
 ;                         ^02: User/Process name
"RTN","RALOCK",16,0)
 ;                         ^03: User IEN (DUZ)
"RTN","RALOCK",17,0)
 ;                         ^04: $JOB
"RTN","RALOCK",18,0)
 ;                         ^05: Task number
"RTN","RALOCK",19,0)
 ;                         ^06: Lock counter
"RTN","RALOCK",20,0)
 ;
"RTN","RALOCK",21,0)
 ; The NodeNdx is calculated by the $$XLNDX^RALOCK01 as the name
"RTN","RALOCK",22,0)
 ; reference to the locked node without the closing parenthesis.
"RTN","RALOCK",23,0)
 ;
"RTN","RALOCK",24,0)
 Q
"RTN","RALOCK",25,0)
 ;
"RTN","RALOCK",26,0)
 ;***** LOCKS THE (SUB)FILE, RECORD OR FIELD NODE
"RTN","RALOCK",27,0)
 ;
"RTN","RALOCK",28,0)
 ; [.]FILE       File/subfile number
"RTN","RALOCK",29,0)
 ; [IENS]        IENS of the record or subfile
"RTN","RALOCK",30,0)
 ; [FIELD]       Field number
"RTN","RALOCK",31,0)
 ;
"RTN","RALOCK",32,0)
 ;               If just the FILE has a value, then the whole file is
"RTN","RALOCK",33,0)
 ;               locked. If the FILE references a subfile, then the
"RTN","RALOCK",34,0)
 ;               subfile IENS (the 1st ","-piece is empty) should be
"RTN","RALOCK",35,0)
 ;               passed in the IENS parameter.
"RTN","RALOCK",36,0)
 ; 
"RTN","RALOCK",37,0)
 ;               If the IENS references a record of a file/subfile
"RTN","RALOCK",38,0)
 ;               (the 1st ","-piece is not empty), then this record
"RTN","RALOCK",39,0)
 ;               is locked.
"RTN","RALOCK",40,0)
 ;
"RTN","RALOCK",41,0)
 ;               If the IENS references a record and the FIELD is
"RTN","RALOCK",42,0)
 ;               also defined, then only the node that stores this
"RTN","RALOCK",43,0)
 ;               field is locked.
"RTN","RALOCK",44,0)
 ;
"RTN","RALOCK",45,0)
 ;               In addition (or instead) to the main locked object
"RTN","RALOCK",46,0)
 ;               defined by the FILE, IENS, and FIELD, you can define 
"RTN","RALOCK",47,0)
 ;               several additional objects using subscripts of the
"RTN","RALOCK",48,0)
 ;               FILE parameter:
"RTN","RALOCK",49,0)
 ;
"RTN","RALOCK",50,0)
 ;                  ;--- Lock the whole file #72
"RTN","RALOCK",51,0)
 ;                  S FILE(72)=""
"RTN","RALOCK",52,0)
 ;                  ;--- Lock the EXAMINATIONS multiple
"RTN","RALOCK",53,0)
 ;                  S FILE(70.02,",6928784.9143,398,")=""
"RTN","RALOCK",54,0)
 ;                  ;--- Lock 2 exams
"RTN","RALOCK",55,0)
 ;                  S FILE(70.03,"1,6828784.9143,398,")=""
"RTN","RALOCK",56,0)
 ;                  S FILE(70.03,"3,6828784.9143,398,")=""
"RTN","RALOCK",57,0)
 ;                  ;--- Lock just the "BA" node of the order
"RTN","RALOCK",58,0)
 ;                  S FILE(75.1,"123,",91)=""
"RTN","RALOCK",59,0)
 ;                  ;--- Lock the objects
"RTN","RALOCK",60,0)
 ;                  S RC=$$LOCKFM^RALOCK(.FILE)
"RTN","RALOCK",61,0)
 ;
"RTN","RALOCK",62,0)
 ;               All these objects are locked at the same time. If
"RTN","RALOCK",63,0)
 ;               even one of them cannot be locked, then nothing
"RTN","RALOCK",64,0)
 ;               is locked.
"RTN","RALOCK",65,0)
 ;
"RTN","RALOCK",66,0)
 ; [TO]          Timeout (value of DILOCKTM, by default)
"RTN","RALOCK",67,0)
 ;
"RTN","RALOCK",68,0)
 ; [NAME]        Process name. If this parameter is defined and not
"RTN","RALOCK",69,0)
 ;               empty, then its value will be returned in the lock
"RTN","RALOCK",70,0)
 ;               descriptor instead of the user name.
"RTN","RALOCK",71,0)
 ;
"RTN","RALOCK",72,0)
 ; [FLAGS]       Flags that control the execution (can be combined):
"RTN","RALOCK",73,0)
 ;
"RTN","RALOCK",74,0)
 ;                 D  Do not actually lock the node(s); just create
"RTN","RALOCK",75,0)
 ;                    the lock descriptor(s).
"RTN","RALOCK",76,0)
 ;
"RTN","RALOCK",77,0)
 ; Return Values:
"RTN","RALOCK",78,0)
 ;       <0  Error code
"RTN","RALOCK",79,0)
 ;        0  Ok (the objects have been locked)
"RTN","RALOCK",80,0)
 ;       >0  The object is locked by another user or task and
"RTN","RALOCK",81,0)
 ;           a lock descriptor is returned.
"RTN","RALOCK",82,0)
 ;             ^01: Date/Time (FileMan)
"RTN","RALOCK",83,0)
 ;             ^02: User/Process name
"RTN","RALOCK",84,0)
 ;             ^03: User IEN (DUZ)
"RTN","RALOCK",85,0)
 ;             ^04: $JOB
"RTN","RALOCK",86,0)
 ;             ^05: Task number
"RTN","RALOCK",87,0)
 ;
"RTN","RALOCK",88,0)
 ; If the third piece is empty then check the 2nd one for the
"RTN","RALOCK",89,0)
 ; custom process name.
"RTN","RALOCK",90,0)
 ;
"RTN","RALOCK",91,0)
LOCKFM(FILE,IENS,FIELD,TO,NAME,FLAGS) ;
"RTN","RALOCK",92,0)
 N DESCR,NDX,NODELIST,NODE,PI,RC,TMP
"RTN","RALOCK",93,0)
 S:$G(TO,-1)<0 TO=$G(DILOCKTM,3)
"RTN","RALOCK",94,0)
 S FLAGS=$G(FLAGS)
"RTN","RALOCK",95,0)
 ;--- Update the ^XTMP("RALOCK",0) once per session
"RTN","RALOCK",96,0)
 I '$D(RAPARAMS("XTMPLOCK"))  D  S RAPARAMS("XTMPLOCK")=""
"RTN","RALOCK",97,0)
 . D XTMPHDR^RAUTL22("RALOCK",30,"Radiology LOCK Descriptors")
"RTN","RALOCK",98,0)
 ;--- Check if a single object should be locked
"RTN","RALOCK",99,0)
 I $D(FILE)<10  S RC=0  D:$G(FILE)>0  Q RC
"RTN","RALOCK",100,0)
 . S RC=$$LOCK1^RALOCK01(FILE,$G(IENS),$G(FIELD),TO,$G(NAME),FLAGS)
"RTN","RALOCK",101,0)
 ;--- Compile the list of global nodes
"RTN","RALOCK",102,0)
 S RC=$$NODELIST^RALOCK01(.NODELIST,.FILE,$G(IENS),$G(FIELD))
"RTN","RALOCK",103,0)
 Q:RC<0 RC  Q:NODELIST="" 0
"RTN","RALOCK",104,0)
 ;--- Try to lock the object(s)
"RTN","RALOCK",105,0)
 I FLAGS'["D"  D  X TMP  E  Q $$LDSC^RALOCK01(.NODELIST)
"RTN","RALOCK",106,0)
 . S TMP="L +("_NODELIST_"):"_TO
"RTN","RALOCK",107,0)
 ;--- Create the lock descriptor(s)
"RTN","RALOCK",108,0)
 S DESCR=$$NOW^XLFDT_U_$G(NAME)_U_U_$JOB_U_$G(ZTSK)
"RTN","RALOCK",109,0)
 S:$G(NAME)="" $P(DESCR,U,3)=$G(DUZ)
"RTN","RALOCK",110,0)
 S NODE=""
"RTN","RALOCK",111,0)
 F  S NODE=$O(NODELIST(NODE))  Q:NODE=""  D
"RTN","RALOCK",112,0)
 . S NDX=$$XLNDX^RALOCK01(NODE)
"RTN","RALOCK",113,0)
 . ;--- Calculate the lock counter
"RTN","RALOCK",114,0)
 . S TMP=$G(^XTMP("RALOCK",NDX))
"RTN","RALOCK",115,0)
 . S $P(DESCR,U,6)=$S($P(TMP,U,4)=$JOB:$P(TMP,U,6)+1,1:1)
"RTN","RALOCK",116,0)
 . ;--- Store the descriptor
"RTN","RALOCK",117,0)
 . S ^XTMP("RALOCK",NDX)=DESCR
"RTN","RALOCK",118,0)
 Q 0
"RTN","RALOCK",119,0)
 ;
"RTN","RALOCK",120,0)
 ;***** GENERATES A TEXT DESCRIPTION FROM THE LOCK DESCRIPTOR
"RTN","RALOCK",121,0)
 ;
"RTN","RALOCK",122,0)
 ; LDSC          Lock descriptor returned by the $$LOCKFM^RALOCK
"RTN","RALOCK",123,0)
 ;
"RTN","RALOCK",124,0)
 ; Return Values:
"RTN","RALOCK",125,0)
 ;       ""  If the 1st "^"-piece is not greater than 0,
"RTN","RALOCK",126,0)
 ;           then an empty string is returned.
"RTN","RALOCK",127,0)
 ;      ...  Otherwise, a text describing who/what and when
"RTN","RALOCK",128,0)
 ;           locked the object according to the descriptor
"RTN","RALOCK",129,0)
 ;
"RTN","RALOCK",130,0)
TEXT(LDSC) ;
"RTN","RALOCK",131,0)
 Q:LDSC'>0 ""
"RTN","RALOCK",132,0)
 N LTEXT,PARAMS,RABUF
"RTN","RALOCK",133,0)
 S PARAMS("LDT")=$$FMTE^XLFDT(+LDSC)  ; Lock date/time
"RTN","RALOCK",134,0)
 S PARAMS("NAME")=$P(LDSC,U,2)        ; User/process name
"RTN","RALOCK",135,0)
 S PARAMS("JOB")=$P(LDSC,U,4)         ; Job number
"RTN","RALOCK",136,0)
 S PARAMS("TASK")=$P(LDSC,U,5)        ; Task number
"RTN","RALOCK",137,0)
 D BLD^DIALOG(700005.002,.PARAMS,,"RABUF","S")
"RTN","RALOCK",138,0)
 Q RABUF(1)_$S(PARAMS("TASK")'="":$G(RABUF(2)),1:"")
"RTN","RALOCK",139,0)
 ;
"RTN","RALOCK",140,0)
 ;***** UNLOCKS THE (SUB)FILE, RECORD OR FIELD NODE
"RTN","RALOCK",141,0)
 ;
"RTN","RALOCK",142,0)
 ; [.]FILE       File/subfile number
"RTN","RALOCK",143,0)
 ; [IENS]        IENS of the record or subfile
"RTN","RALOCK",144,0)
 ; [FIELD]       Field number
"RTN","RALOCK",145,0)
 ;
"RTN","RALOCK",146,0)
 ;               See description of the LOCKFM^RALOCK for details
"RTN","RALOCK",147,0)
 ;               about the FILE, IENS, and FIELD parameters.
"RTN","RALOCK",148,0)
 ;
"RTN","RALOCK",149,0)
 ; Return Values:
"RTN","RALOCK",150,0)
 ;       <0  Error code
"RTN","RALOCK",151,0)
 ;        0  Ok
"RTN","RALOCK",152,0)
 ;
"RTN","RALOCK",153,0)
 ; NOTE: This entry point can also be called as a procedure:
"RTN","RALOCK",154,0)
 ;       D UNLOCKFM^RALOCK(...) if you do not need its return value.
"RTN","RALOCK",155,0)
 ;
"RTN","RALOCK",156,0)
UNLOCKFM(FILE,IENS,FIELD) ;
"RTN","RALOCK",157,0)
 N DESCR,NDX,NODELIST,NODE,PI,RC
"RTN","RALOCK",158,0)
 I $D(FILE)<10  S RC=0  D:$G(FILE)>0  Q:$QUIT RC  Q
"RTN","RALOCK",159,0)
 . S RC=$$UNLOCK1^RALOCK01(FILE,$G(IENS),$G(FIELD))
"RTN","RALOCK",160,0)
 ;--- Compile the list of global nodes
"RTN","RALOCK",161,0)
 S RC=$$NODELIST^RALOCK01(.NODELIST,.FILE,$G(IENS),$G(FIELD))
"RTN","RALOCK",162,0)
 I RC<0  Q:$QUIT RC  Q
"RTN","RALOCK",163,0)
 I NODELIST=""  Q:$QUIT 0  Q
"RTN","RALOCK",164,0)
 ;--- Remove the lock descriptor(s)
"RTN","RALOCK",165,0)
 S NODE=""
"RTN","RALOCK",166,0)
 F  S NODE=$O(NODELIST(NODE))  Q:NODE=""  D
"RTN","RALOCK",167,0)
 . S NDX=$$XLNDX^RALOCK01(NODE),DESCR=$G(^XTMP("RALOCK",NDX))
"RTN","RALOCK",168,0)
 . Q:$P(DESCR,U,4)'=$JOB
"RTN","RALOCK",169,0)
 . I $P(DESCR,U,6)>1  D
"RTN","RALOCK",170,0)
 . . S $P(^XTMP("RALOCK",NDX),U,6)=$P(DESCR,U,6)-1
"RTN","RALOCK",171,0)
 . E  K ^XTMP("RALOCK",NDX)
"RTN","RALOCK",172,0)
 ;--- Unlock the object(s)
"RTN","RALOCK",173,0)
 X "L -("_NODELIST_")"
"RTN","RALOCK",174,0)
 Q:$QUIT 0  Q
"RTN","RALOCK01")
0^52^B16127704^n/a
"RTN","RALOCK01",1,0)
RALOCK01 ;HCIOFO/SG - INTERNAL LOCK UTILITIES ; 5/14/08 3:22pm
"RTN","RALOCK01",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RALOCK01",3,0)
 ;
"RTN","RALOCK01",4,0)
 ; Entry points of this routine use the ^XTMP("RALOCK",...) global
"RTN","RALOCK01",5,0)
 ; nodes to store lock descriptors (see ^RALOCK routine for details).
"RTN","RALOCK01",6,0)
 ;
"RTN","RALOCK01",7,0)
 Q
"RTN","RALOCK01",8,0)
 ;
"RTN","RALOCK01",9,0)
 ;***** DELETES STRAY LOCK DESCRIPTORS
"RTN","RALOCK01",10,0)
 ;
"RTN","RALOCK01",11,0)
 ; NOTE: This is a service procedure. Do not call it from
"RTN","RALOCK01",12,0)
 ;       regular applications!
"RTN","RALOCK01",13,0)
 ;
"RTN","RALOCK01",14,0)
PURGE() ;
"RTN","RALOCK01",15,0)
 N NDX,NODE
"RTN","RALOCK01",16,0)
 S NDX=0
"RTN","RALOCK01",17,0)
 F  S NDX=$O(^XTMP("RALOCK",NDX))  Q:$E(NDX,1)'="^"  D
"RTN","RALOCK01",18,0)
 . S NODE=$S(NDX["(":NDX_")",1:NDX)
"RTN","RALOCK01",19,0)
 . D LOCK^DILF(NODE)  E  Q
"RTN","RALOCK01",20,0)
 . K ^XTMP("RALOCK",NDX)  L -@NODE
"RTN","RALOCK01",21,0)
 Q
"RTN","RALOCK01",22,0)
 ;
"RTN","RALOCK01",23,0)
 ;+++++ FINDS THE LOCK DESCRIPTOR FOR THE GLOBAL NODE(S)
"RTN","RALOCK01",24,0)
 ;
"RTN","RALOCK01",25,0)
 ; NOTE: This is an internal entry point. Do not call it from
"RTN","RALOCK01",26,0)
 ;       any routines except RALOCK and RALOCK01
"RTN","RALOCK01",27,0)
 ;
"RTN","RALOCK01",28,0)
LDSC(NODELIST) ;
"RTN","RALOCK01",29,0)
 N DESCR,IENS,L,NDX,NODE,RAMSG,SP,TMP
"RTN","RALOCK01",30,0)
 S:$D(NODELIST)<10 NODELIST(NODELIST)=""
"RTN","RALOCK01",31,0)
 S (DESCR,NODE)=""
"RTN","RALOCK01",32,0)
 F  S NODE=$O(NODELIST(NODE))  Q:NODE=""  D
"RTN","RALOCK01",33,0)
 . ;--- The Node itself
"RTN","RALOCK01",34,0)
 . S SP=$$XLNDX(NODE),TMP=$G(^XTMP("RALOCK",SP))
"RTN","RALOCK01",35,0)
 . S:TMP>DESCR DESCR=TMP
"RTN","RALOCK01",36,0)
 . ;--- Left Siblings and Ancestors
"RTN","RALOCK01",37,0)
 . S NDX=SP
"RTN","RALOCK01",38,0)
 . F  S NDX=$O(^XTMP("RALOCK",NDX),-1),L=$L(NDX)  Q:(NDX="")!(NDX'=$E(SP,1,L))  D
"RTN","RALOCK01",39,0)
 . . S TMP=$G(^XTMP("RALOCK",NDX))  S:TMP>DESCR DESCR=TMP
"RTN","RALOCK01",40,0)
 . ;--- Right Siblings and Descendants
"RTN","RALOCK01",41,0)
 . S NDX=SP,L=$L(SP)
"RTN","RALOCK01",42,0)
 . F  S NDX=$O(^XTMP("RALOCK",NDX))  Q:(NDX="")!($E(NDX,1,L)'=SP)  D
"RTN","RALOCK01",43,0)
 . . S TMP=$G(^XTMP("RALOCK",NDX))  S:TMP>DESCR DESCR=TMP
"RTN","RALOCK01",44,0)
 ;--- Prepare the lock descriptor
"RTN","RALOCK01",45,0)
 S:'DESCR $P(DESCR,U)=$$NOW^XLFDT
"RTN","RALOCK01",46,0)
 D:$P(DESCR,U,3)>0
"RTN","RALOCK01",47,0)
 . S IENS=+$P(DESCR,U,3)_","
"RTN","RALOCK01",48,0)
 . S $P(DESCR,U,2)=$$GET1^DIQ(200,IENS,.01,,,"RAMSG")  ; User Name
"RTN","RALOCK01",49,0)
 S:$P(DESCR,U,2)="" $P(DESCR,U,2)="UNKNOWN"
"RTN","RALOCK01",50,0)
 Q $P(DESCR,U,1,5)
"RTN","RALOCK01",51,0)
 ;
"RTN","RALOCK01",52,0)
 ;+++++ LOCKS THE SINGLE NODE
"RTN","RALOCK01",53,0)
 ;
"RTN","RALOCK01",54,0)
 ; NOTE: This is an internal entry point. Do not call it from
"RTN","RALOCK01",55,0)
 ;       any routines except RALOCK and RALOCK01
"RTN","RALOCK01",56,0)
 ;
"RTN","RALOCK01",57,0)
LOCK1(FILE,IENS,FIELD,TO,NAME,FLAGS) ;
"RTN","RALOCK01",58,0)
 N DESCR,NDX,NODE,TMP
"RTN","RALOCK01",59,0)
 S NODE=$$NODE(FILE,IENS,FIELD)
"RTN","RALOCK01",60,0)
 Q:NODE<0 NODE
"RTN","RALOCK01",61,0)
 ;--- Try to lock the object
"RTN","RALOCK01",62,0)
 I FLAGS'["D"  L +@NODE:TO  E  Q $$LDSC(NODE)
"RTN","RALOCK01",63,0)
 ;--- Create the lock descriptor
"RTN","RALOCK01",64,0)
 S DESCR=$$NOW^XLFDT_U_NAME_U_U_$JOB_U_$G(ZTSK)
"RTN","RALOCK01",65,0)
 S:NAME="" $P(DESCR,U,3)=$G(DUZ)
"RTN","RALOCK01",66,0)
 ;--- Calculate the lock counter
"RTN","RALOCK01",67,0)
 S NDX=$$XLNDX(NODE),TMP=$G(^XTMP("RALOCK",NDX))
"RTN","RALOCK01",68,0)
 S $P(DESCR,U,6)=$S($P(TMP,U,4)=$JOB:$P(TMP,U,6)+1,1:1)
"RTN","RALOCK01",69,0)
 ;--- Store the descriptor
"RTN","RALOCK01",70,0)
 S ^XTMP("RALOCK",NDX)=DESCR
"RTN","RALOCK01",71,0)
 Q 0
"RTN","RALOCK01",72,0)
 ;
"RTN","RALOCK01",73,0)
 ;+++++ RETURNS THE GLOBAL NODE OF THE OBJECT
"RTN","RALOCK01",74,0)
 ;
"RTN","RALOCK01",75,0)
 ; FILE          File/subfile number
"RTN","RALOCK01",76,0)
 ; IENS          IENS of the record or subfile
"RTN","RALOCK01",77,0)
 ; FIELD         Field number
"RTN","RALOCK01",78,0)
 ;
"RTN","RALOCK01",79,0)
 ; Return Values:
"RTN","RALOCK01",80,0)
 ;       <0  Error code
"RTN","RALOCK01",81,0)
 ;           Closed root
"RTN","RALOCK01",82,0)
 ;
"RTN","RALOCK01",83,0)
 ; NOTE: This is an internal entry point. Do not call it from
"RTN","RALOCK01",84,0)
 ;       any routines except RALOCK and RALOCK01
"RTN","RALOCK01",85,0)
 ;
"RTN","RALOCK01",86,0)
NODE(FILE,IENS,FIELD) ;
"RTN","RALOCK01",87,0)
 N FGL,IEN,NODE,RAMSG,RC
"RTN","RALOCK01",88,0)
 I IENS'=""  Q:'$$VALIENS^RAUTL22(IENS,"S") $$IPVE^RAERR("IENS")
"RTN","RALOCK01",89,0)
 S IEN=+IENS
"RTN","RALOCK01",90,0)
 I IEN  S $P(IENS,",")=""  S:IENS="," IENS=""
"RTN","RALOCK01",91,0)
 ;--- Closed root of the (sub)file
"RTN","RALOCK01",92,0)
 S NODE=$$ROOT^DILFD(FILE,IENS,1)
"RTN","RALOCK01",93,0)
 I NODE=""  D  Q RC
"RTN","RALOCK01",94,0)
 . S RC=$$ERROR^RAERR(-50,,FILE,IENS)
"RTN","RALOCK01",95,0)
 Q:'IEN NODE
"RTN","RALOCK01",96,0)
 ;--- The record node
"RTN","RALOCK01",97,0)
 S NODE=$NA(@NODE@(IEN))
"RTN","RALOCK01",98,0)
 Q:'FIELD NODE
"RTN","RALOCK01",99,0)
 ;--- Field node
"RTN","RALOCK01",100,0)
 S FGL=$$GET1^DID(FILE,FIELD,,"GLOBAL SUBSCRIPT LOCATION",,"RAMSG")
"RTN","RALOCK01",101,0)
 I $G(DIERR)  D  Q RC
"RTN","RALOCK01",102,0)
 . S RC=$$DBS^RAERR("RAMSG",-9,FILE)
"RTN","RALOCK01",103,0)
 S:$P(FGL,";")'="" NODE=$NA(@NODE@($P(FGL,";")))
"RTN","RALOCK01",104,0)
 Q NODE
"RTN","RALOCK01",105,0)
 ;
"RTN","RALOCK01",106,0)
 ;+++++ COMPILES THE LIST OF GLOBAL NODES
"RTN","RALOCK01",107,0)
 ;
"RTN","RALOCK01",108,0)
 ; NOTE: This is an internal entry point. Do not call it from
"RTN","RALOCK01",109,0)
 ;       any routines except RALOCK and RALOCK01
"RTN","RALOCK01",110,0)
 ;
"RTN","RALOCK01",111,0)
NODELIST(NODELIST,FILE,IENS,FIELD) ;
"RTN","RALOCK01",112,0)
 N NODE,PI,RC  K NODELIST
"RTN","RALOCK01",113,0)
 S NODELIST="",RC=0
"RTN","RALOCK01",114,0)
 ;--- Main object
"RTN","RALOCK01",115,0)
 I $G(FILE)>0  D  Q:RC<0 RC
"RTN","RALOCK01",116,0)
 . S NODE=$$NODE(FILE,IENS,FIELD)
"RTN","RALOCK01",117,0)
 . I NODE<0  S RC=+NODE  Q
"RTN","RALOCK01",118,0)
 . S NODELIST=NODELIST_","_NODE
"RTN","RALOCK01",119,0)
 . S NODELIST(NODE)=""
"RTN","RALOCK01",120,0)
 ;--- Linked objects
"RTN","RALOCK01",121,0)
 S PI="FILE"
"RTN","RALOCK01",122,0)
 F  S PI=$Q(@PI)  Q:PI=""  D  Q:RC<0
"RTN","RALOCK01",123,0)
 . S NODE=$$NODE($QS(PI,1),$QS(PI,2),$QS(PI,3))
"RTN","RALOCK01",124,0)
 . I NODE<0  S RC=+NODE  Q
"RTN","RALOCK01",125,0)
 . S NODELIST=NODELIST_","_NODE
"RTN","RALOCK01",126,0)
 . S NODELIST(NODE)=""
"RTN","RALOCK01",127,0)
 Q:RC<0 RC
"RTN","RALOCK01",128,0)
 ;---
"RTN","RALOCK01",129,0)
 S NODELIST=$P(NODELIST,",",2,999)
"RTN","RALOCK01",130,0)
 Q RC
"RTN","RALOCK01",131,0)
 ;
"RTN","RALOCK01",132,0)
 ;+++++ UNLOCKS THE SINGLE NODE
"RTN","RALOCK01",133,0)
 ;
"RTN","RALOCK01",134,0)
 ; NOTE: This is an internal entry point. Do not call it from
"RTN","RALOCK01",135,0)
 ;       any routines except RALOCK and RALOCK01
"RTN","RALOCK01",136,0)
 ;
"RTN","RALOCK01",137,0)
UNLOCK1(FILE,IENS,FIELD) ;
"RTN","RALOCK01",138,0)
 N DESCR,NDX,NODE
"RTN","RALOCK01",139,0)
 S NODE=$$NODE(FILE,IENS,FIELD)
"RTN","RALOCK01",140,0)
 Q:NODE<0 NODE
"RTN","RALOCK01",141,0)
 ;--- Remove the lock descriptor
"RTN","RALOCK01",142,0)
 S NDX=$$XLNDX(NODE),DESCR=$G(^XTMP("RALOCK",NDX))
"RTN","RALOCK01",143,0)
 D:$P(DESCR,U,4)=$JOB
"RTN","RALOCK01",144,0)
 . I $P(DESCR,U,6)>1  D
"RTN","RALOCK01",145,0)
 . . S $P(^XTMP("RALOCK",NDX),U,6)=$P(DESCR,U,6)-1
"RTN","RALOCK01",146,0)
 . E  K ^XTMP("RALOCK",NDX)
"RTN","RALOCK01",147,0)
 ;--- Unlock the object
"RTN","RALOCK01",148,0)
 L -@NODE
"RTN","RALOCK01",149,0)
 Q 0
"RTN","RALOCK01",150,0)
 ;
"RTN","RALOCK01",151,0)
 ;+++++ RETURNS SUBSCRIPT OF THE NODE IN THE DESCRIPTOR TABLE
"RTN","RALOCK01",152,0)
 ;
"RTN","RALOCK01",153,0)
 ; NOTE: This is an internal entry point. Do not call it from
"RTN","RALOCK01",154,0)
 ;       any routines except RALOCK and RALOCK01
"RTN","RALOCK01",155,0)
 ;
"RTN","RALOCK01",156,0)
XLNDX(NODE) ;
"RTN","RALOCK01",157,0)
 N L  S L=$L(NODE)
"RTN","RALOCK01",158,0)
 Q $S($E(NODE,L)=")":$E(NODE,1,L-1),1:NODE)
"RTN","RAMAG")
0^1^B20144^n/a
"RTN","RAMAG",1,0)
RAMAG ;HCIOFO/SG - ORDERS/EXAMS API (README) ; 2/27/08 1:31pm
"RTN","RAMAG",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAG",3,0)
 ;
"RTN","RAMAG",4,0)
 ; RAMISC -------------- MISCELLANEOUS PARAMETERS
"RTN","RAMAG",5,0)
 ;
"RTN","RAMAG",6,0)
 ; RAMISC(
"RTN","RAMAG",7,0)
 ;   Name1)              Value(s)
"RTN","RAMAG",8,0)
 ;   Name2,Seq#)         Value(s)
"RTN","RAMAG",9,0)
 ;   Name3,Seq#,Name4)   Value(s)
"RTN","RAMAG",10,0)
 ;
"RTN","RAMAG",11,0)
 ; See the MSCPRMS^RAMAGU01 for the complete list of parameter
"RTN","RAMAG",12,0)
 ; definitions.
"RTN","RAMAG",13,0)
 ;
"RTN","RAMAG",14,0)
 ; If a parameter is required and there is no default value, a non-
"RTN","RAMAG",15,0)
 ; empty value must be assigned to the corresponding array node
"RTN","RAMAG",16,0)
 ; before the call.
"RTN","RAMAG",17,0)
 ;
"RTN","RAMAG",18,0)
 ; If a parameter is required but there is a default value, then the
"RTN","RAMAG",19,0)
 ; latter will be assigned internally to the corresponding array node 
"RTN","RAMAG",20,0)
 ; if it is not defined or empty. If the default value is empty, then 
"RTN","RAMAG",21,0)
 ; an error will be returned.
"RTN","RAMAG",22,0)
 ;
"RTN","RAMAG",23,0)
 ; If a parameter is not required, then its default value (if
"RTN","RAMAG",24,0)
 ; indicated), will be internally assigned to the corresponding array 
"RTN","RAMAG",25,0)
 ; node only if it has no value ($DATA(...)#10=0). If an empty string 
"RTN","RAMAG",26,0)
 ; is assigned to such node, the corresponding field will not have the
"RTN","RAMAG",27,0)
 ; default value; it will be empty!
"RTN","RAMAG",28,0)
 ;
"RTN","RAMAG",29,0)
 ; If you want to clear a multiple that already has a value, assign
"RTN","RAMAG",30,0)
 ; "@" or empty string to the parameter itself and do not set any
"RTN","RAMAG",31,0)
 ; subscripts. For example, the following construction will clear
"RTN","RAMAG",32,0)
 ; the CONTRAST MEDIA multiple: S RAMISC("CONTMEDIA")="@".
"RTN","RAMAG",33,0)
 ;
"RTN","RAMAG",34,0)
 ; NOTE: The RAMISC parameter can be modified by the functions:
"RTN","RAMAG",35,0)
 ;       default values are assigned to some parameters.
"RTN","RAMAG",36,0)
 ;
"RTN","RAMAG",37,0)
 ; Control Flags - RAMISC("FLAGS")
"RTN","RAMAG",38,0)
 ; -------------------------------
"RTN","RAMAG",39,0)
 ;
"RTN","RAMAG",40,0)
 ; A  If this flag is provided, then the registration entry point
"RTN","RAMAG",41,0)
 ;    adds the new case to the existing ones with the same date/time
"RTN","RAMAG",42,0)
 ;    instead of returning the error code -28.
"RTN","RAMAG",43,0)
 ;
"RTN","RAMAG",44,0)
 ;    If the existing date/time record stores an exam set and the
"RTN","RAMAG",45,0)
 ;    "D" flag is not provided, then the error code -54 is returned.
"RTN","RAMAG",46,0)
 ;
"RTN","RAMAG",47,0)
 ; D  If there is an existing case with the same date/time, then the
"RTN","RAMAG",48,0)
 ;    time of the new case is incremented by 1 minute until an unused 
"RTN","RAMAG",49,0)
 ;    date/time is found.
"RTN","RAMAG",50,0)
 ;
"RTN","RAMAG",51,0)
 ;    If the "A" flag is also provided, then time increments also
"RTN","RAMAG",52,0)
 ;    stop when a non-examset date/time record is found.
"RTN","RAMAG",53,0)
 ;
"RTN","RAMAG",54,0)
 ;    If the date is also changed during the time modification, then
"RTN","RAMAG",55,0)
 ;    the case is not registered and the error code -29 is returned.
"RTN","RAMAG",56,0)
 ;
"RTN","RAMAG",57,0)
 ; F  Try to enforce the new status even if some required fields are
"RTN","RAMAG",58,0)
 ;    not populated.
"RTN","RAMAG",59,0)
 ;
"RTN","RAMAG",60,0)
 ;    NOTE: If such case is later edited by a regular Radiology
"RTN","RAMAG",61,0)
 ;          option, the status may be reverted.
"RTN","RAMAG",62,0)
 ;
"RTN","RAMAG",63,0)
 ; S  Do not send HL7 message to speech recognition (dictation)
"RTN","RAMAG",64,0)
 ;    systems.
"RTN","RAMAG",65,0)
 ;
"RTN","RAMAG",66,0)
 ; RAMSPSDEFS ---------- DATA FOR MISCELLANEOUS PARAMETERS VALIDATION
"RTN","RAMAG",67,0)
 ;
"RTN","RAMAG",68,0)
 ; RAMSPSDEFS(
"RTN","RAMAG",69,0)
 ;
"RTN","RAMAG",70,0)
 ;   "F",
"RTN","RAMAG",71,0)
 ;     File#,Name)       ""
"RTN","RAMAG",72,0)
 ;
"RTN","RAMAG",73,0)
 ;   "N",
"RTN","RAMAG",74,0)
 ;     Name)             Parameter descriptor
"RTN","RAMAG",75,0)
 ;                         ^01: (Sub)file number
"RTN","RAMAG",76,0)
 ;                         ^02: Field number
"RTN","RAMAG",77,0)
 ;                         ^03: Field type that requires special
"RTN","RAMAG",78,0)
 ;                              processing:
"RTN","RAMAG",79,0)
 ;                                D - Date/time, M - Multiple,
"RTN","RAMAG",80,0)
 ;                                P - Pointer,   W - Word processing,
"RTN","RAMAG",81,0)
 ;                                * - Add this parameter to the "F"
"RTN","RAMAG",82,0)
 ;                                    index (see the VEXAMND^RAMAGU14 
"RTN","RAMAG",83,0)
 ;                                    for details).
"RTN","RAMAG",84,0)
 ;                         ^04: Number of the "^"-piece of the value
"RTN","RAMAG",85,0)
 ;                              returned by the $$EXMSTREQ^RAMAGU06.
"RTN","RAMAG",86,0)
 ;                              It determines if a non-empty field
"RTN","RAMAG",87,0)
 ;                              value is required.
"RTN","RAMAG",88,0)
 ;
"RTN","RAMAG",89,0)
 ;   "R")                Exam status requirements (value returned by
"RTN","RAMAG",90,0)
 ;                       the $$EXMSTREQ^RAMAGU06 function).
"RTN","RAMAG",91,0)
 ;
"RTN","RAMAG",92,0)
 ; NAMESPACE ----------- DESCRIPTION
"RTN","RAMAG",93,0)
 ;
"RTN","RAMAG",94,0)
 ; RAMAGHL*              HL7 utilities
"RTN","RAMAG",95,0)
 ; RAMAGRP*              Remote procedures
"RTN","RAMAG",96,0)
 ; RAMAGU*               Utilities
"RTN","RAMAG",97,0)
 ;
"RTN","RAMAG",98,0)
 ; API ENTRY POINT ----- DESCRIPTION
"RTN","RAMAG",99,0)
 ;
"RTN","RAMAG",100,0)
 ;    $$ORDER^RAMAG02    Orders/requests an exam
"RTN","RAMAG",101,0)
 ; $$REGISTER^RAMAG03    Registers the exam
"RTN","RAMAG",102,0)
 ;  $$ORDCANC^RAMAG04    Cancels the order
"RTN","RAMAG",103,0)
 ; $$EXAMCANC^RAMAG05    Cancels the exam
"RTN","RAMAG",104,0)
 ; $$COMPLETE^RAMAG06    Completes the exam
"RTN","RAMAG",105,0)
 ; $$EXAMINED^RAMAG07    Indicates that procedure has been performed
"RTN","RAMAG",106,0)
 ;
"RTN","RAMAG",107,0)
 ; UTILITY ------------- DESCRIPTION
"RTN","RAMAG",108,0)
 ;
"RTN","RAMAG",109,0)
 ; $$LDMSPRMS^RAMAGU01   Loads definitions of miscellaneous parameters
"RTN","RAMAG",110,0)
 ;  $$RPCMISC^RAMAGU01   Parses miscellaneous RPC parameters
"RTN","RAMAG",111,0)
 ;
"RTN","RAMAG",112,0)
 ;  $$ORDSTAT^RAMAGU02   Returns current order status
"RTN","RAMAG",113,0)
 ; $$UPDORDST^RAMAGU02   Updates order status
"RTN","RAMAG",114,0)
 ;
"RTN","RAMAG",115,0)
 ;  $$CHKPROC^RAMAGU03   Checks Radiology procedure and modifiers
"RTN","RAMAG",116,0)
 ; $$DESCPLST^RAMAGU03   Translates parent procedure into descendents
"RTN","RAMAG",117,0)
 ;
"RTN","RAMAG",118,0)
 ;   $$ACCNUM^RAMAGU04   Constructs the site accession number
"RTN","RAMAG",119,0)
 ; $$CHKEXMID^RAMAGU04   Checks examination identifiers
"RTN","RAMAG",120,0)
 ;  $$DAYCASE^RAMAGU04   Constructs the day-case exam identifier
"RTN","RAMAG",121,0)
 ; $$EXAMIENS^RAMAGU04   Converts exam identifiers into the exam IENS
"RTN","RAMAG",122,0)
 ; $$EXAMNODE^RAMAGU04   Returns the exam global node
"RTN","RAMAG",123,0)
 ;   $$INVDTE^RAMAGU04   Calculates 'inverted' date/time
"RTN","RAMAG",124,0)
 ;  $$RAPTREG^RAMAGU04   Registers the patient in the file #70
"RTN","RAMAG",125,0)
 ; $$UPDEXMPR^RAMAGU04   Updates exam procedure and modifiers
"RTN","RAMAG",126,0)
 ;
"RTN","RAMAG",127,0)
 ;  $$EXMSTAT^RAMAGU05   Returns current exam status
"RTN","RAMAG",128,0)
 ; $$UPDEXMAL^RAMAGU05   Updates exam activity log
"RTN","RAMAG",129,0)
 ; $$UPDEXMST^RAMAGU05   Updates exam status
"RTN","RAMAG",130,0)
 ;
"RTN","RAMAG",131,0)
 ; $$EXMSTINF^RAMAGU06   Returns descriptor of the exam status
"RTN","RAMAG",132,0)
 ; $$EXMSTREQ^RAMAGU06   Returns exam status requirements
"RTN","RAMAG",133,0)
 ; $$GETEXMND^RAMAGU06   Searches for "EXAMINED" status
"RTN","RAMAG",134,0)
 ; $$NXTEXMST^RAMAGU06   Returns the following exam status
"RTN","RAMAG",135,0)
 ;
"RTN","RAMAG",136,0)
 ;    $$RAINP^RAMAGU07   Returns service, ward, and bedsection
"RTN","RAMAG",137,0)
 ;    $$VADEM^RAMAGU07   Wrapper for the DEM^VADPT
"RTN","RAMAG",138,0)
 ;    $$VAIN5^RAMAGU07   Wrapper for the IN5^VADPT
"RTN","RAMAG",139,0)
 ;
"RTN","RAMAG",140,0)
 ;    $$VAL70^RAMAGU08   Validates RAMISC params related to file #70
"RTN","RAMAG",141,0)
 ;    $$VAL74^RAMAGU10   Validates RAMISC params related to file #74
"RTN","RAMAG",142,0)
 ;
"RTN","RAMAG",143,0)
 ;       VARS^RAMAGU11   Writes variables and their values
"RTN","RAMAG",144,0)
 ;          W^RAMAGU11   Writes a long string
"RTN","RAMAG",145,0)
 ;
"RTN","RAMAG",146,0)
 ;  $$RPTSTUB^RAMAGU12   Creates a report stub record
"RTN","RAMAG",147,0)
 ;  $$RPTSTAT^RAMAGU12   Returns report status
"RTN","RAMAG",148,0)
 ; $$UPDRPTAL^RAMAGU12   Updates report activity log
"RTN","RAMAG",149,0)
 ; $$UPDRPTST^RAMAGU12   Updates report status
"RTN","RAMAG",150,0)
 ;
"RTN","RAMAG",151,0)
 ; $$NMEDSTUB^RAMAGU13   Creates a nuclear medicine stub record
"RTN","RAMAG",152,0)
 ; $$RARSNIEN^RAMAGU13   Searches for reason synonym
"RTN","RAMAG",153,0)
 ;  $$UPDMULT^RAMAGU13   Updates values of the multiple(s)
"RTN","RAMAG",154,0)
 ;
"RTN","RAMAG",155,0)
 ; REMOTE PROCEDURE ---- DESCRIPTION
"RTN","RAMAG",156,0)
 ;
"RTN","RAMAG",157,0)
 ; RAMAG EXAM CANCEL     Cancels the exam
"RTN","RAMAG",158,0)
 ; RAMAG EXAM COMPLETE   Completes the exam
"RTN","RAMAG",159,0)
 ; RAMAG EXAM ORDER      Orders/requests an exam
"RTN","RAMAG",160,0)
 ; RAMAG EXAM REGISTER   Registers the exam
"RTN","RAMAG",161,0)
 ; RAMAG EXAMINED        Procedure has been performed
"RTN","RAMAG",162,0)
 ; RAMAG ORDER CANCEL    Cancels the order
"RTN","RAMAG",163,0)
 ;
"RTN","RAMAG",164,0)
 Q
"RTN","RAMAG02")
0^2^B8884852^n/a
"RTN","RAMAG02",1,0)
RAMAG02 ;HCIOFO/SG - ORDERS/EXAMS API (EXAM REQUEST) ; 4/8/08 3:28pm
"RTN","RAMAG02",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAG02",3,0)
 ;
"RTN","RAMAG02",4,0)
 Q
"RTN","RAMAG02",5,0)
 ;
"RTN","RAMAG02",6,0)
 ;##### ORDERS/REQUESTS AN EXAM
"RTN","RAMAG02",7,0)
 ;
"RTN","RAMAG02",8,0)
 ; .RAPARAMS       Reference to the API descriptor
"RTN","RAMAG02",9,0)
 ;                 (see the ^RA01 routine for details).
"RTN","RAMAG02",10,0)
 ;
"RTN","RAMAG02",11,0)
 ; RADFN           Patient IEN (DFN).
"RTN","RAMAG02",12,0)
 ;
"RTN","RAMAG02",13,0)
 ; RAMLC           IEN of the imaging location (file #79.1).
"RTN","RAMAG02",14,0)
 ;
"RTN","RAMAG02",15,0)
 ; RAPROC          Radiology procedure and modifiers
"RTN","RAMAG02",16,0)
 ;                   ^01: Procedure IEN in file #71
"RTN","RAMAG02",17,0)
 ;                   ^02: Optional procedure modifiers (IENs in
"RTN","RAMAG02",18,0)
 ;                   ...  the PROCEDURE MODIFIERS file (#71.2))
"RTN","RAMAG02",19,0)
 ;                   ^nn:
"RTN","RAMAG02",20,0)
 ;
"RTN","RAMAG02",21,0)
 ; RADTE           Desired date for the exam (FileMan). If time is 
"RTN","RAMAG02",22,0)
 ;                 provided, it is ignored. The date must be exact.
"RTN","RAMAG02",23,0)
 ;
"RTN","RAMAG02",24,0)
 ; RACAT           Exam category: internal value for the CATEGORY
"RTN","RAMAG02",25,0)
 ;                 OF EXAM field (4) of the RAD/NUC MED ORDERS
"RTN","RAMAG02",26,0)
 ;                 file (#75.1).
"RTN","RAMAG02",27,0)
 ;
"RTN","RAMAG02",28,0)
 ; REQLOC          IEN of the requesting location in the HOSPITAL
"RTN","RAMAG02",29,0)
 ;                 LOCATION file (#44).
"RTN","RAMAG02",30,0)
 ;
"RTN","RAMAG02",31,0)
 ;                 For the inpatient exam category, location should
"RTN","RAMAG02",32,0)
 ;                 be either an operating room or a ward.
"RTN","RAMAG02",33,0)
 ;
"RTN","RAMAG02",34,0)
 ;                 For the outpatient exam category, location should
"RTN","RAMAG02",35,0)
 ;                 be either an operating room or a clinic.
"RTN","RAMAG02",36,0)
 ;
"RTN","RAMAG02",37,0)
 ; REQPHYS         IEN of the requesting physician in the NEW PERSON
"RTN","RAMAG02",38,0)
 ;                 file (#200).
"RTN","RAMAG02",39,0)
 ;
"RTN","RAMAG02",40,0)
 ;                 This user should be active and have the PROVIDER
"RTN","RAMAG02",41,0)
 ;                 key.
"RTN","RAMAG02",42,0)
 ;
"RTN","RAMAG02",43,0)
 ; RAREASON        Reason for study (see the REASON FOR STUDY
"RTN","RAMAG02",44,0)
 ;                 field (1.1) of the file #75.1).
"RTN","RAMAG02",45,0)
 ;
"RTN","RAMAG02",46,0)
 ; [.RAMISC]       Reference to a local array containing miscellaneous
"RTN","RAMAG02",47,0)
 ;                 request parameters.
"RTN","RAMAG02",48,0)
 ;
"RTN","RAMAG02",49,0)
 ;                 See the ^RAMAG routine for additional important
"RTN","RAMAG02",50,0)
 ;                 details regarding this parameter.
"RTN","RAMAG02",51,0)
 ;
"RTN","RAMAG02",52,0)
 ; RAMISC(
"RTN","RAMAG02",53,0)
 ;
"RTN","RAMAG02",54,0)
 ;   "CLINHIST",   Text for the CLINICAL HISTORY FOR EXAM field (400)
"RTN","RAMAG02",55,0)
 ;     Seq#)       of the file #75.1.
"RTN","RAMAG02",56,0)
 ;                 Required: No
"RTN","RAMAG02",57,0)
 ;                 Default:  undefined
"RTN","RAMAG02",58,0)
 ;
"RTN","RAMAG02",59,0)
 ;   "ISOLPROC")   Internal value for the ISOLATION PROCEDURES
"RTN","RAMAG02",60,0)
 ;                 field (24) of the file #75.1.
"RTN","RAMAG02",61,0)
 ;                 Required: Yes
"RTN","RAMAG02",62,0)
 ;                 Default:  "n" (NO)
"RTN","RAMAG02",63,0)
 ;
"RTN","RAMAG02",64,0)
 ;   "PREGNANT")   Internal value for the PREGNANT field (13)
"RTN","RAMAG02",65,0)
 ;                 of the file #75.1.
"RTN","RAMAG02",66,0)
 ;                 Required: Only for female patients
"RTN","RAMAG02",67,0)
 ;                 Default:  undefined for male patients,
"RTN","RAMAG02",68,0)
 ;                           "u" for female patients.
"RTN","RAMAG02",69,0)
 ;
"RTN","RAMAG02",70,0)
 ;   "PREOPDT")    Internal date value (FileMan) for the PRE-OP 
"RTN","RAMAG02",71,0)
 ;                 SCHEDULED DATE/TIME field (12) of the file #75.1.
"RTN","RAMAG02",72,0)
 ;                 If seconds are provided, they are ignored. The
"RTN","RAMAG02",73,0)
 ;                 date must be exact.
"RTN","RAMAG02",74,0)
 ;                 Required: No
"RTN","RAMAG02",75,0)
 ;                 Default:  undefined
"RTN","RAMAG02",76,0)
 ;
"RTN","RAMAG02",77,0)
 ;   "REQNATURE")  Internal value for the NATURE OF (NEW) ORDER
"RTN","RAMAG02",78,0)
 ;                 ACTIVITY field (26) of the file #75.1.
"RTN","RAMAG02",79,0)
 ;                 Required: Yes
"RTN","RAMAG02",80,0)
 ;                 Default:  "s" (SERVICE CORRECTION)
"RTN","RAMAG02",81,0)
 ;
"RTN","RAMAG02",82,0)
 ;   "REQURG")     Internal value for the REQUEST URGENCY field (6)
"RTN","RAMAG02",83,0)
 ;                 of the file #75.1.
"RTN","RAMAG02",84,0)
 ;                 Required: Yes
"RTN","RAMAG02",85,0)
 ;                 Default:  "9" (ROUTINE)
"RTN","RAMAG02",86,0)
 ;
"RTN","RAMAG02",87,0)
 ;   "TRANSPMODE") Internal value for the MODE OF TRANSPORT
"RTN","RAMAG02",88,0)
 ;                 field (19) of the file #75.1.
"RTN","RAMAG02",89,0)
 ;                 Required: Yes
"RTN","RAMAG02",90,0)
 ;                 Default:  "w" (WHEEL CHAIR) if RACAT="I",
"RTN","RAMAG02",91,0)
 ;                           "a" (AMBULATORY) otherwise
"RTN","RAMAG02",92,0)
 ;
"RTN","RAMAG02",93,0)
 ; Return values:
"RTN","RAMAG02",94,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAG02",95,0)
 ;       >0  IEN of the order in the file #75.1
"RTN","RAMAG02",96,0)
 ;
"RTN","RAMAG02",97,0)
ORDER(RAPARAMS,RADFN,RAMLC,RAPROC,RADTE,RACAT,REQLOC,REQPHYS,RAREASON,RAMISC) ;
"RTN","RAMAG02",98,0)
 N RAIMGTYI        ; Imaging type IEN (file #79.2)
"RTN","RAMAG02",99,0)
 N RAMDIV          ; Radiology division IEN (file #79)
"RTN","RAMAG02",100,0)
 ;
"RTN","RAMAG02",101,0)
 N RAOIFN,RC,VA,VADM
"RTN","RAMAG02",102,0)
 D:$G(RAPARAMS("DEBUG"))>1
"RTN","RAMAG02",103,0)
 . D W^RAMAGU11("$$ORDER^RAMAG02","!!")
"RTN","RAMAG02",104,0)
 . D VARS^RAMAGU11("RADFN,RAMLC,RAPROC")
"RTN","RAMAG02",105,0)
 . D VARS^RAMAGU11("RADTE,RACAT,REQLOC,REQPHYS")
"RTN","RAMAG02",106,0)
 . D VARS^RAMAGU11("RAREASON")
"RTN","RAMAG02",107,0)
 . D ZW^RAUTL22("RAMISC")
"RTN","RAMAG02",108,0)
 ;--- Validate parameters
"RTN","RAMAG02",109,0)
 S RC=$$VALIDATE^RAMAG02A()  Q:RC<0 RC
"RTN","RAMAG02",110,0)
 ;
"RTN","RAMAG02",111,0)
 ;--- Make sure that the patient is registered
"RTN","RAMAG02",112,0)
 S RC=$$RAPTREG^RAMAGU04(RADFN)  Q:RC<0 RC
"RTN","RAMAG02",113,0)
 ;
"RTN","RAMAG02",114,0)
 ;--- Request the exam
"RTN","RAMAG02",115,0)
 S RAOIFN=$$ORD^RAMAG02A()  Q:RAOIFN<0 RAOIFN
"RTN","RAMAG02",116,0)
 ;
"RTN","RAMAG02",117,0)
 ;--- Generate the HL7 message to create the OE/RR record
"RTN","RAMAG02",118,0)
 D ZOERRHL7(RADFN,+RAPROC,RAOIFN,+REQLOC)
"RTN","RAMAG02",119,0)
 ;
"RTN","RAMAG02",120,0)
 ;--- Return IEN of the order
"RTN","RAMAG02",121,0)
 Q RAOIFN
"RTN","RAMAG02",122,0)
 ;
"RTN","RAMAG02",123,0)
 ;+++++ GENERATES OE/RR HL7  MESSAGE
"RTN","RAMAG02",124,0)
 ;
"RTN","RAMAG02",125,0)
 ; RADFN           Patient IEN (DFN)
"RTN","RAMAG02",126,0)
 ; RAPIFN          Radiology procedure IEN
"RTN","RAMAG02",127,0)
 ; RAOIFN          IEN of the order in file #75.1
"RTN","RAMAG02",128,0)
 ; RALIFN          Requesting location IEN in file #44
"RTN","RAMAG02",129,0)
 ;
"RTN","RAMAG02",130,0)
 ; NOTE: This is an internal procedure. Do not call it from
"RTN","RAMAG02",131,0)
 ;       outside of this routine.
"RTN","RAMAG02",132,0)
 ;
"RTN","RAMAG02",133,0)
ZOERRHL7(RADFN,RAPIFN,RAOIFN,RALIFN) ;
"RTN","RAMAG02",134,0)
 N DA,DE,DIC,DIDEL,DIE,DINUM,DLAYGO,DQ,DR,DTOUT,DUOUT,I,ORIFN,ORIT,ORL,ORPCL,ORPK,ORPURG,ORSTRT,ORSTS,ORTX,ORVP,RABLNK,RAMOD,RAORD0,RAPRCD,RASEX,X,Y
"RTN","RAMAG02",135,0)
 ;--- Prepare "old style" parameters for an old
"RTN","RAMAG02",136,0)
 ;--- version of the OE/RR (just in case)
"RTN","RAMAG02",137,0)
 S RASEX=$P($G(VADM(5)),U)    ; Patient's sex ("F" or "M")
"RTN","RAMAG02",138,0)
 S RAORD0=^RAO(75.1,RAOIFN,0) ; 0-node of the order
"RTN","RAMAG02",139,0)
 ;--- Generate the HL7 message to create the OE/RR record
"RTN","RAMAG02",140,0)
 D SETORD^RAORDU
"RTN","RAMAG02",141,0)
 Q
"RTN","RAMAG02A")
0^3^B40471638^n/a
"RTN","RAMAG02A",1,0)
RAMAG02A ;HCIOFO/SG - ORDERS/EXAMS API (REQUEST UTILITIES) ; 2/6/09 11:45am
"RTN","RAMAG02A",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAG02A",3,0)
 ;
"RTN","RAMAG02A",4,0)
 Q
"RTN","RAMAG02A",5,0)
 ;
"RTN","RAMAG02A",6,0)
 ;+++++ CREATES AN ORDER IN THE RAD/NUC MED ORDERS FILE (#75.1)
"RTN","RAMAG02A",7,0)
 ;
"RTN","RAMAG02A",8,0)
 ; Input variables:
"RTN","RAMAG02A",9,0)
 ;   RACAT, RADFN, RADTE, RAIMGTYI, RAMDIV, RAMISC, RAMLC, RAPROC,
"RTN","RAMAG02A",10,0)
 ;   RAREASON, REQLOC, REQPHYS
"RTN","RAMAG02A",11,0)
 ;
"RTN","RAMAG02A",12,0)
 ; Return values:
"RTN","RAMAG02A",13,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAG02A",14,0)
 ;       >0  IEN of the order in the file #75.1
"RTN","RAMAG02A",15,0)
 ;
"RTN","RAMAG02A",16,0)
 ; NOTE: This is an internal entry point. Do not call it from
"RTN","RAMAG02A",17,0)
 ;       routines other than the ^RAMAG02.
"RTN","RAMAG02A",18,0)
 ;
"RTN","RAMAG02A",19,0)
ORD() ;
"RTN","RAMAG02A",20,0)
 N IENS,RABUF,RAFDA,RAIENS,RALOCK,RAMSG,RAOIFN,RARC,TMP
"RTN","RAMAG02A",21,0)
 S RARC=0
"RTN","RAMAG02A",22,0)
 ;
"RTN","RAMAG02A",23,0)
 ;=== Create the new order
"RTN","RAMAG02A",24,0)
 S IENS="+1,"
"RTN","RAMAG02A",25,0)
 S RAFDA(75.1,IENS,.01)=RADFN  ; NAME
"RTN","RAMAG02A",26,0)
 S RAFDA(75.1,IENS,2)=+RAPROC  ; PROCEDURE
"RTN","RAMAG02A",27,0)
 S RAFDA(75.1,IENS,21)=RADTE   ; DATE DESIRED
"RTN","RAMAG02A",28,0)
 D UPDATE^DIE(,"RAFDA","RAIENS","RAMSG")
"RTN","RAMAG02A",29,0)
 Q:$G(DIERR) $$DBS^RAERR("RAMSG",-9,75.1,IENS)
"RTN","RAMAG02A",30,0)
 S RAOIFN=RAIENS(1)
"RTN","RAMAG02A",31,0)
 ;
"RTN","RAMAG02A",32,0)
 ;=== Store remaining fields of the order
"RTN","RAMAG02A",33,0)
 D
"RTN","RAMAG02A",34,0)
 . ;--- Setup the error processing
"RTN","RAMAG02A",35,0)
 . N $ESTACK,$ETRAP  D SETDEFEH^RAERR("RARC")
"RTN","RAMAG02A",36,0)
 . ;
"RTN","RAMAG02A",37,0)
 . ;--- Lock the record
"RTN","RAMAG02A",38,0)
 . K TMP  S TMP(75.1,RAOIFN_",")=""
"RTN","RAMAG02A",39,0)
 . S RARC=$$LOCKFM^RALOCK(.TMP)
"RTN","RAMAG02A",40,0)
 . I RARC  S RARC=$$LOCKERR^RAERR(RARC,"order")  Q
"RTN","RAMAG02A",41,0)
 . M RALOCK=TMP
"RTN","RAMAG02A",42,0)
 . ;
"RTN","RAMAG02A",43,0)
 . ;--- Prepare required fields
"RTN","RAMAG02A",44,0)
 . S IENS=RAOIFN_","
"RTN","RAMAG02A",45,0)
 . S RAFDA(75.1,IENS,1.1)=RAREASON          ; REASON FOR STUDY
"RTN","RAMAG02A",46,0)
 . S RAFDA(75.1,IENS,3)="`"_RAIMGTYI        ; TYPE OF IMAGING
"RTN","RAMAG02A",47,0)
 . D ZSET(IENS,4,RACAT)                     ; CATEGORY OF EXAM
"RTN","RAMAG02A",48,0)
 . S RAFDA(75.1,IENS,14)="`"_REQPHYS        ; REQUESTING PHYSICIAN
"RTN","RAMAG02A",49,0)
 . S RAFDA(75.1,IENS,20)="`"_RAMLC          ; IMAGING LOCATION
"RTN","RAMAG02A",50,0)
 . S RAFDA(75.1,IENS,22)="`"_REQLOC         ; REQUESTING LOCATION
"RTN","RAMAG02A",51,0)
 . ;
"RTN","RAMAG02A",52,0)
 . ;--- Prepare miscellaneous/optional fields
"RTN","RAMAG02A",53,0)
 . D ZSET(IENS,6,$G(RAMISC("REQURG")))      ; REQUEST URGENCY
"RTN","RAMAG02A",54,0)
 . D ZSET(IENS,13,$G(RAMISC("PREGNANT")))   ; PREGNANT
"RTN","RAMAG02A",55,0)
 . D ZSET(IENS,19,$G(RAMISC("TRANSPMODE"))) ; MODE OF TRANSPORT
"RTN","RAMAG02A",56,0)
 . D ZSET(IENS,24,$G(RAMISC("ISOLPROC")))   ; ISOLATION PROCEDURES
"RTN","RAMAG02A",57,0)
 . D ZSET(IENS,26,$G(RAMISC("REQNATURE")))  ; NATURE OF (NEW) ORDER...
"RTN","RAMAG02A",58,0)
 . ;
"RTN","RAMAG02A",59,0)
 . ;--- PRE-OP SCHEDULED DATE/TIME
"RTN","RAMAG02A",60,0)
 . S TMP=$G(RAMISC("PREOPDT"))
"RTN","RAMAG02A",61,0)
 . S:TMP>0 RAFDA(75.1,IENS,12)=$$FMTE^XLFDT(TMP)
"RTN","RAMAG02A",62,0)
 . ;
"RTN","RAMAG02A",63,0)
 . ;--- CLINICAL HISTORY FOR EXAM
"RTN","RAMAG02A",64,0)
 . S TMP=$NA(RAMISC("CLINHIST"))
"RTN","RAMAG02A",65,0)
 . S:$D(@TMP)>1 RAFDA(75.1,IENS,400)=TMP
"RTN","RAMAG02A",66,0)
 . ;
"RTN","RAMAG02A",67,0)
 . ;--- Update the record
"RTN","RAMAG02A",68,0)
 . D FILE^DIE("ET","RAFDA","RAMSG")
"RTN","RAMAG02A",69,0)
 . I $G(DIERR)  S RARC=$$DBS^RAERR("RAMSG",-9,75.1,IENS)  Q
"RTN","RAMAG02A",70,0)
 . ;
"RTN","RAMAG02A",71,0)
 . ;--- Store procedure modifiers
"RTN","RAMAG02A",72,0)
 . S RARC=$$PROCMOD(RAOIFN,RAPROC)  Q:RARC<0
"RTN","RAMAG02A",73,0)
 . ;
"RTN","RAMAG02A",74,0)
 . ;--- Update status of the order
"RTN","RAMAG02A",75,0)
 . S RARC=$$UPDORDST^RAMAGU02(RAOIFN,5)  Q:RARC<0
"RTN","RAMAG02A",76,0)
 ;
"RTN","RAMAG02A",77,0)
 ;=== Error handling and cleanup
"RTN","RAMAG02A",78,0)
 D:RARC<0
"RTN","RAMAG02A",79,0)
 . ;--- Delete incomplete record
"RTN","RAMAG02A",80,0)
 . N DA,DIK  S DA=RAOIFN,DIK="^RAO(75.1,"  D ^DIK
"RTN","RAMAG02A",81,0)
 ;--- Unlock the record
"RTN","RAMAG02A",82,0)
 D UNLOCKFM^RALOCK(.RALOCK)
"RTN","RAMAG02A",83,0)
 ;---
"RTN","RAMAG02A",84,0)
 Q $S(RARC<0:RARC,1:RAOIFN)
"RTN","RAMAG02A",85,0)
 ;
"RTN","RAMAG02A",86,0)
 ;+++++ STORES PROCEDURE MODIFIERS
"RTN","RAMAG02A",87,0)
 ;
"RTN","RAMAG02A",88,0)
 ; RAOIFN        IEN of the order in the file #75.1
"RTN","RAMAG02A",89,0)
 ;
"RTN","RAMAG02A",90,0)
 ; RAPROC        Radiology procedure and modifiers
"RTN","RAMAG02A",91,0)
 ;                 ^01: Procedure IEN in file #71
"RTN","RAMAG02A",92,0)
 ;                 ^02: Optional procedure modifiers (IENs in
"RTN","RAMAG02A",93,0)
 ;                 ...  the PROCEDURE MODIFIERS file (#71.2))
"RTN","RAMAG02A",94,0)
 ;                 ^nn:
"RTN","RAMAG02A",95,0)
 ;
"RTN","RAMAG02A",96,0)
 ; Return values:
"RTN","RAMAG02A",97,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAG02A",98,0)
 ;        0  Success
"RTN","RAMAG02A",99,0)
 ;
"RTN","RAMAG02A",100,0)
 ; NOTE: This is an internal entry point. Do not call it from
"RTN","RAMAG02A",101,0)
 ;       outside of this routine.
"RTN","RAMAG02A",102,0)
 ;
"RTN","RAMAG02A",103,0)
PROCMOD(RAOIFN,RAPROC) ;
"RTN","RAMAG02A",104,0)
 N I,IENS,LP,PMCNT,RAFDA,RAMSG,RC,TMP
"RTN","RAMAG02A",105,0)
 S (PMCNT,RC)=0
"RTN","RAMAG02A",106,0)
 ;--- Prepare the data
"RTN","RAMAG02A",107,0)
 S LP=$L(RAPROC,U)
"RTN","RAMAG02A",108,0)
 F I=2:1:LP  S TMP=$P(RAPROC,U,I)  D:TMP'=""
"RTN","RAMAG02A",109,0)
 . S PMCNT=PMCNT+1,IENS="+"_PMCNT_","_(+RAOIFN)_","
"RTN","RAMAG02A",110,0)
 . S RAFDA(75.1125,IENS,.01)="`"_TMP
"RTN","RAMAG02A",111,0)
 ;--- Store procedure modifiers
"RTN","RAMAG02A",112,0)
 D:PMCNT>0
"RTN","RAMAG02A",113,0)
 . D UPDATE^DIE("E","RAFDA",,"RAMSG")
"RTN","RAMAG02A",114,0)
 . S:$G(DIERR) RC=$$DBS^RAERR("RAMSG",-9,75.1125)
"RTN","RAMAG02A",115,0)
 ;---
"RTN","RAMAG02A",116,0)
 Q RC
"RTN","RAMAG02A",117,0)
 ;
"RTN","RAMAG02A",118,0)
 ;+++++ VALIDATES ORDER PARAMETERS AND INITIALIZES RELATED VARIABLES
"RTN","RAMAG02A",119,0)
 ;
"RTN","RAMAG02A",120,0)
 ; Input variables:
"RTN","RAMAG02A",121,0)
 ;   RACAT, RADFN, RADTE, RAMISC, RAMLC, RAPROC, RAREASON, REQLOC,
"RTN","RAMAG02A",122,0)
 ;   REQPHYS
"RTN","RAMAG02A",123,0)
 ;
"RTN","RAMAG02A",124,0)
 ; Output variables:
"RTN","RAMAG02A",125,0)
 ;   RAIMGTYI, RAMDIV, VA, VADM
"RTN","RAMAG02A",126,0)
 ;
"RTN","RAMAG02A",127,0)
 ; Return values:
"RTN","RAMAG02A",128,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAG02A",129,0)
 ;        0  Success
"RTN","RAMAG02A",130,0)
 ;
"RTN","RAMAG02A",131,0)
 ; NOTE: This is an internal entry point. Do not call it from
"RTN","RAMAG02A",132,0)
 ;       routines other than the ^RAMAG02.
"RTN","RAMAG02A",133,0)
 ;
"RTN","RAMAG02A",134,0)
VALIDATE() ;
"RTN","RAMAG02A",135,0)
 N ERRCNT,I,IENS,L,RABUF,RAMSG,RC,TMP,X
"RTN","RAMAG02A",136,0)
 S ERRCNT=0
"RTN","RAMAG02A",137,0)
 ;=== Check required variables
"RTN","RAMAG02A",138,0)
 S X="RACAT,RADFN,RADTE,RAMLC,RAPROC,RAREASON,REQLOC,REQPHYS"
"RTN","RAMAG02A",139,0)
 S RC=$$CHKREQ^RAUTL22(X)  Q:RC<0 RC
"RTN","RAMAG02A",140,0)
 ;
"RTN","RAMAG02A",141,0)
 ;=== Patient IEN (DFN)
"RTN","RAMAG02A",142,0)
 S RC=$$VADEM^RAMAGU07(RADFN)
"RTN","RAMAG02A",143,0)
 I RC'<0  S:$G(VADM(1))="" RC=$$IPVE^RAERR("RADFN")
"RTN","RAMAG02A",144,0)
 S:RC<0 ERRCNT=ERRCNT+1,RADFN=0
"RTN","RAMAG02A",145,0)
 ;
"RTN","RAMAG02A",146,0)
 ;=== Requesting physician
"RTN","RAMAG02A",147,0)
 I REQPHYS>0  D  I X
"RTN","RAMAG02A",148,0)
 . N RACRE,Y  S Y=REQPHYS  S X=$$PROV^RABWORD()
"RTN","RAMAG02A",149,0)
 E  D
"RTN","RAMAG02A",150,0)
 . D IPVE^RAERR("REQPHYS")
"RTN","RAMAG02A",151,0)
 . S ERRCNT=ERRCNT+1,REQPHYS=0
"RTN","RAMAG02A",152,0)
 ;
"RTN","RAMAG02A",153,0)
 ;=== Requesting location
"RTN","RAMAG02A",154,0)
 S RC=0  D
"RTN","RAMAG02A",155,0)
 . S TMP=$$GET1^DIQ(44,REQLOC_",",.01,,,"RAMSG")
"RTN","RAMAG02A",156,0)
 . I $G(DIERR)  S RC=$$DBS^RAERR("RAMSG",-9,44,REQLOC_",")  Q
"RTN","RAMAG02A",157,0)
 . ;--- Missing .01 field
"RTN","RAMAG02A",158,0)
 . I TMP=""  S RC=$$IPVE^RAERR("REQLOC")  Q
"RTN","RAMAG02A",159,0)
 S:RC<0 ERRCNT=ERRCNT+1,REQLOC=0
"RTN","RAMAG02A",160,0)
 K RAMSG
"RTN","RAMAG02A",161,0)
 ;
"RTN","RAMAG02A",162,0)
 ;=== Desired date
"RTN","RAMAG02A",163,0)
 I ($$ISEXCTDT^RAUTL22(RADTE)'>0)!($$FMTE^XLFDT(RADTE)=RADTE)  D
"RTN","RAMAG02A",164,0)
 . D IPVE^RAERR("RADTE")
"RTN","RAMAG02A",165,0)
 . S ERRCNT=ERRCNT+1,RADTE=""
"RTN","RAMAG02A",166,0)
 E  S RADTE=RADTE\1  ; Strip the time
"RTN","RAMAG02A",167,0)
 ;
"RTN","RAMAG02A",168,0)
 ;=== Imaging location IEN
"RTN","RAMAG02A",169,0)
 S RC=0  D
"RTN","RAMAG02A",170,0)
 . S IENS=RAMLC_",",(RAIMGTYI,RAMDIV)=0
"RTN","RAMAG02A",171,0)
 . D GETS^DIQ(79.1,IENS,"6;25","I","RABUF","RAMSG")
"RTN","RAMAG02A",172,0)
 . I $G(DIERR)  S RC=$$DBS^RAERR("RAMSG",-9,79.1,IENS)  Q
"RTN","RAMAG02A",173,0)
 . ;--- Check required fields
"RTN","RAMAG02A",174,0)
 . S RAIMGTYI=+$G(RABUF(79.1,IENS,6,"I")) ; Imaging type IEN
"RTN","RAMAG02A",175,0)
 . S RAMDIV=+$G(RABUF(79.1,IENS,25,"I"))  ; Division IEN
"RTN","RAMAG02A",176,0)
 . I (RAIMGTYI'>0)!(RAMDIV'>0)  D  Q
"RTN","RAMAG02A",177,0)
 . . S RC=$$IPVE^RAERR("RAMLC")
"RTN","RAMAG02A",178,0)
 S:RC<0 ERRCNT=ERRCNT+1,RAMLC=0
"RTN","RAMAG02A",179,0)
 K RABUF,RAMSG
"RTN","RAMAG02A",180,0)
 ;
"RTN","RAMAG02A",181,0)
 ;=== Radiology procedure and modifiers
"RTN","RAMAG02A",182,0)
 S RC=0  D
"RTN","RAMAG02A",183,0)
 . I RAPROC'>0  S RC=$$IPVE^RAERR("RAPROC")  Q
"RTN","RAMAG02A",184,0)
 . ;=== Additional checks only if related parameters are valid
"RTN","RAMAG02A",185,0)
 . Q:(RADTE'>0)!(RAIMGTYI'>0)
"RTN","RAMAG02A",186,0)
 . S RC=$$CHKPROC^RAMAGU03(RAPROC,RAIMGTYI,RADTE)
"RTN","RAMAG02A",187,0)
 S:RC<0 ERRCNT=ERRCNT+1,RAPROC=""
"RTN","RAMAG02A",188,0)
 ;
"RTN","RAMAG02A",189,0)
 ;=== Miscellaneous parameters
"RTN","RAMAG02A",190,0)
 S:$G(RAMISC("ISOLPROC"))="" RAMISC("ISOLPROC")="n"
"RTN","RAMAG02A",191,0)
 S:$G(RAMISC("REQNATURE"))="" RAMISC("REQNATURE")="s"
"RTN","RAMAG02A",192,0)
 S:$G(RAMISC("REQURG"))="" RAMISC("REQURG")="9"
"RTN","RAMAG02A",193,0)
 ;--- MODE OF TRANSPORT (Default value: WHEEL CHAIR for
"RTN","RAMAG02A",194,0)
 ;--- inpatient exam category, AMBULATORY otherwise)
"RTN","RAMAG02A",195,0)
 D:$G(RAMISC("TRANSPMODE"))=""
"RTN","RAMAG02A",196,0)
 . S RAMISC("TRANSPMODE")=$S(RACAT="I":"w",1:"a")
"RTN","RAMAG02A",197,0)
 ;--- PRE-OP SCHEDULED DATE/TIME
"RTN","RAMAG02A",198,0)
 S TMP=$G(RAMISC("PREOPDT"))
"RTN","RAMAG02A",199,0)
 D:TMP'=""
"RTN","RAMAG02A",200,0)
 . I ($$ISEXCTDT^RAUTL22(TMP)'>0)!($$FMTE^XLFDT(TMP)=TMP)  D  Q
"RTN","RAMAG02A",201,0)
 . . D IPVE^RAERR($NA(RAMISC("PREOPDT")))  S ERRCNT=ERRCNT+1
"RTN","RAMAG02A",202,0)
 . S RAMISC("PREOPDT")=+$E(TMP,1,12) ; Strip the seconds
"RTN","RAMAG02A",203,0)
 ;--- PREGNANT
"RTN","RAMAG02A",204,0)
 I $G(RAMISC("PREGNANT"))=""  D
"RTN","RAMAG02A",205,0)
 . S:$P($G(VADM(5)),U)="F" RAMISC("PREGNANT")="u"
"RTN","RAMAG02A",206,0)
 E  I $P($G(VADM(5)),U)="M"  D
"RTN","RAMAG02A",207,0)
 . D ERROR^RAERR(-27)  S ERRCNT=ERRCNT+1
"RTN","RAMAG02A",208,0)
 ;
"RTN","RAMAG02A",209,0)
 ;===
"RTN","RAMAG02A",210,0)
 Q $S(ERRCNT>0:$$ERROR^RAERR(-11),1:0)
"RTN","RAMAG02A",211,0)
 ;
"RTN","RAMAG02A",212,0)
 ;+++++ STORES THE EXTERNAL FIELD VALUE INTO THE RAFDA
"RTN","RAMAG02A",213,0)
ZSET(IENS,FIELD,VALUE) ;
"RTN","RAMAG02A",214,0)
 Q:VALUE=""
"RTN","RAMAG02A",215,0)
 N RAMSG,TMP
"RTN","RAMAG02A",216,0)
 S TMP=$$EXTERNAL^DILFD(75.1,FIELD,,VALUE,"RAMSG")
"RTN","RAMAG02A",217,0)
 S RAFDA(75.1,IENS,FIELD)=$S(TMP'="":TMP,1:VALUE)
"RTN","RAMAG02A",218,0)
 Q
"RTN","RAMAG03")
0^4^B17195637^n/a
"RTN","RAMAG03",1,0)
RAMAG03 ;HCIOFO/SG - ORDERS/EXAMS API (EXAM REGISTRATION) ; 2/10/09 4:14pm
"RTN","RAMAG03",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAG03",3,0)
 ;
"RTN","RAMAG03",4,0)
 Q
"RTN","RAMAG03",5,0)
 ;
"RTN","RAMAG03",6,0)
 ;##### REGISTERS THE EXAM(S)
"RTN","RAMAG03",7,0)
 ;
"RTN","RAMAG03",8,0)
 ; .RAPARAMS       Reference to the API descriptor
"RTN","RAMAG03",9,0)
 ;                 (see the ^RA01 routine for details)
"RTN","RAMAG03",10,0)
 ;
"RTN","RAMAG03",11,0)
 ; .RAEXAMS(       Reference to a local array where identifiers of
"RTN","RAMAG03",12,0)
 ;                 registered examination(s) are returned to.
"RTN","RAMAG03",13,0)
 ;
"RTN","RAMAG03",14,0)
 ;   Seq#)         Exam/case identifiers:
"RTN","RAMAG03",15,0)
 ;                   ^01: IEN of the patient in the file #70   (RADFN)
"RTN","RAMAG03",16,0)
 ;                   ^02: IEN in the REGISTERED EXAMS multiple (RADTI)
"RTN","RAMAG03",17,0)
 ;                   ^03: IEN in the EXAMINATIONS multiple     (RACNI)
"RTN","RAMAG03",18,0)
 ;                   ^04: Case number
"RTN","RAMAG03",19,0)
 ;                   ^05: Accession number.
"RTN","RAMAG03",20,0)
 ;                          SSS-MMDDYY-NNNNN  if RA*5*47 is installed;
"RTN","RAMAG03",21,0)
 ;                              MMDDYY-NNNNN  otherwise.
"RTN","RAMAG03",22,0)
 ;                   ^06: Actual date/time of the case (FileMan)
"RTN","RAMAG03",23,0)
 ;
"RTN","RAMAG03",24,0)
 ; RAOIFN          IEN of the order in the file #75.1
"RTN","RAMAG03",25,0)
 ;
"RTN","RAMAG03",26,0)
 ; RADTE           Date/time of the exam (FileMan). If seconds are
"RTN","RAMAG03",27,0)
 ;                 provided, they are ignored. The date must be exact 
"RTN","RAMAG03",28,0)
 ;                 and the time is required.
"RTN","RAMAG03",29,0)
 ;
"RTN","RAMAG03",30,0)
 ; .RAMISC         Reference to a local array containing miscellaneous
"RTN","RAMAG03",31,0)
 ;                 request parameters.
"RTN","RAMAG03",32,0)
 ;
"RTN","RAMAG03",33,0)
 ;                 See the ^RAMAG routine for additional important
"RTN","RAMAG03",34,0)
 ;                 details regarding this parameter.
"RTN","RAMAG03",35,0)
 ;
"RTN","RAMAG03",36,0)
 ; RAMISC(
"RTN","RAMAG03",37,0)
 ;
"RTN","RAMAG03",38,0)
 ;   "BEDSECT")    IEN of the bedsection in the SPECIALTY
"RTN","RAMAG03",39,0)
 ;                 file (#42.4).
"RTN","RAMAG03",40,0)
 ;                 Required: No (used for inpatient category only)
"RTN","RAMAG03",41,0)
 ;                 Default:  Bedsection on exam date
"RTN","RAMAG03",42,0)
 ;
"RTN","RAMAG03",43,0)
 ;   "EXAMCAT")    Exam category: value for the CATEGORY OF EXAM field
"RTN","RAMAG03",44,0)
 ;                 (4) of the EXAMINATIONS multiple (sub-file #70.03).
"RTN","RAMAG03",45,0)
 ;                 Required: Yes
"RTN","RAMAG03",46,0)
 ;                 Default:  Exam category from the order
"RTN","RAMAG03",47,0)
 ;
"RTN","RAMAG03",48,0)
 ;   "FLAGS")      Flags that control the execution (see the ^RAMAG
"RTN","RAMAG03",49,0)
 ;                 routine for details). Supported flags: "A" and "D".
"RTN","RAMAG03",50,0)
 ;                 Required: No
"RTN","RAMAG03",51,0)
 ;                 Default:  undefined
"RTN","RAMAG03",52,0)
 ;
"RTN","RAMAG03",53,0)
 ;   "PRINCLIN")   IEN of the principal clinic in the HOSPITAL
"RTN","RAMAG03",54,0)
 ;                 LOCATION file (#44).
"RTN","RAMAG03",55,0)
 ;                 Required: Yes (for non-inpatient categories only)
"RTN","RAMAG03",56,0)
 ;                 Default:  Requesting location if it is a clinic
"RTN","RAMAG03",57,0)
 ;
"RTN","RAMAG03",58,0)
 ;   "RAPROC",
"RTN","RAMAG03",59,0)
 ;     Seq#)       Radiology procedure and modifiers
"RTN","RAMAG03",60,0)
 ;                   ^01: Procedure IEN in file #71
"RTN","RAMAG03",61,0)
 ;                   ^02: Optional procedure modifiers (IENs in
"RTN","RAMAG03",62,0)
 ;                   ...  the PROCEDURE MODIFIERS file (#71.2))
"RTN","RAMAG03",63,0)
 ;                   ^nn:
"RTN","RAMAG03",64,0)
 ;                 Required: Yes
"RTN","RAMAG03",65,0)
 ;                 Default:  Procedure and modifiers from the order
"RTN","RAMAG03",66,0)
 ;
"RTN","RAMAG03",67,0)
 ;   "SERVICE")    IEN of the service in the SERVICE/SECTION
"RTN","RAMAG03",68,0)
 ;                 file (#49).
"RTN","RAMAG03",69,0)
 ;                 Required: No (used for inpatient category only)
"RTN","RAMAG03",70,0)
 ;                 Default:  Service section on exam date
"RTN","RAMAG03",71,0)
 ;
"RTN","RAMAG03",72,0)
 ;   "SINGLERPT")  If this parameter is defined and not 0, then all
"RTN","RAMAG03",73,0)
 ;                 cases should be associated with the same order
"RTN","RAMAG03",74,0)
 ;                 and they will share the same report. See the
"RTN","RAMAG03",75,0)
 ;                 MEMBER OF SET (25) and IMAGING ORDER (11) fields
"RTN","RAMAG03",76,0)
 ;                 of the sub-file #70.03 for more details.
"RTN","RAMAG03",77,0)
 ;                 Required: No
"RTN","RAMAG03",78,0)
 ;                 Default:  If the order references a parent
"RTN","RAMAG03",79,0)
 ;                           procedure that requires a single report
"RTN","RAMAG03",80,0)
 ;                           (see the SINGLE REPORT field (18) of the 
"RTN","RAMAG03",81,0)
 ;                           file #71), then a non-zero value is
"RTN","RAMAG03",82,0)
 ;                           assigned to this parameter. Otherwise,
"RTN","RAMAG03",83,0)
 ;                           it is undefined.
"RTN","RAMAG03",84,0)
 ;
"RTN","RAMAG03",85,0)
 ;                 NOTE: If a parent procedure is being registered,
"RTN","RAMAG03",86,0)
 ;                       the default value cannot be overridden.
"RTN","RAMAG03",87,0)
 ;
"RTN","RAMAG03",88,0)
 ;   "TECHCOMM")   Technologist comment
"RTN","RAMAG03",89,0)
 ;                 Required: No
"RTN","RAMAG03",90,0)
 ;                 Default:  undefined
"RTN","RAMAG03",91,0)
 ;
"RTN","RAMAG03",92,0)
 ;   "WARD")       IEN of the ward in the WARD LOCATION file (#42).
"RTN","RAMAG03",93,0)
 ;                 Required: No (used for inpatient category only)
"RTN","RAMAG03",94,0)
 ;                 Default:  Ward location on exam date
"RTN","RAMAG03",95,0)
 ;
"RTN","RAMAG03",96,0)
 ; This function uses the ^TMP($J,"RAREG1") global node.
"RTN","RAMAG03",97,0)
 ;
"RTN","RAMAG03",98,0)
 ; ^TMP($J,
"RTN","RAMAG03",99,0)
 ;   "RAREG1",i)   Exam identifiers
"RTN","RAMAG03",100,0)
 ;                   ^01: IEN of the patient in the file #70
"RTN","RAMAG03",101,0)
 ;                   ^02: IEN in the REGISTERED EXAMS multiple
"RTN","RAMAG03",102,0)
 ;                   ^03: IEN in the EXAMINATIONS multiple
"RTN","RAMAG03",103,0)
 ;
"RTN","RAMAG03",104,0)
 ; Return values:
"RTN","RAMAG03",105,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAG03",106,0)
 ;       >0  Number of registered examinations
"RTN","RAMAG03",107,0)
 ;           (number of elements in the RAEXAMS array)
"RTN","RAMAG03",108,0)
 ;
"RTN","RAMAG03",109,0)
REGISTER(RAPARAMS,RAEXAMS,RAOIFN,RADTE,RAMISC) ;
"RTN","RAMAG03",110,0)
 N RADFN           ; IEN of the patient in the file #70
"RTN","RAMAG03",111,0)
 N RADTI           ; "Inverted" date/time of registered exam(s)
"RTN","RAMAG03",112,0)
 N RAEXMVAL        ; Exam parameters extracted from the order
"RTN","RAMAG03",113,0)
 N RASACN31        ; Use the new site accession number
"RTN","RAMAG03",114,0)
 N RAIMGTYI        ; Imaging type IEN (file #79.2)
"RTN","RAMAG03",115,0)
 N RAMDIV          ; Radiology division IEN (file #79)
"RTN","RAMAG03",116,0)
 N RAMLC           ; Imaging location IEN (file #79.1)
"RTN","RAMAG03",117,0)
 N RAPARENT        ; Indicator of an exam set
"RTN","RAMAG03",118,0)
 N RAPRLST         ; List of detailed/series procedures
"RTN","RAMAG03",119,0)
 ;
"RTN","RAMAG03",120,0)
 N HLA,RAEXMCNT,RAFLAGS,RALOCK,RARC,TMP
"RTN","RAMAG03",121,0)
 D:$G(RAPARAMS("DEBUG"))>1
"RTN","RAMAG03",122,0)
 . D W^RAMAGU11("$$REGISTER^RAMAG03","!!")
"RTN","RAMAG03",123,0)
 . D VARS^RAMAGU11("RAOIFN,RADTE")
"RTN","RAMAG03",124,0)
 . D ZW^RAUTL22("RAMISC")
"RTN","RAMAG03",125,0)
 K RAEXAMS,^TMP($J,"RAREG1")
"RTN","RAMAG03",126,0)
 S (RAEXMCNT,RARC)=0
"RTN","RAMAG03",127,0)
 ;
"RTN","RAMAG03",128,0)
 D
"RTN","RAMAG03",129,0)
 . ;=== Setup the error handler
"RTN","RAMAG03",130,0)
 . N $ESTACK,$ETRAP  D SETDEFEH^RAERR("RARC")
"RTN","RAMAG03",131,0)
 . ;
"RTN","RAMAG03",132,0)
 . ;=== Validate parameters
"RTN","RAMAG03",133,0)
 . S RARC=$$VALIDATE^RAMAG03A(.RALOCK)  Q:RARC<0
"RTN","RAMAG03",134,0)
 . S RAFLAGS=$$TRFLAGS^RAUTL22($G(RAMISC("FLAGS")),"AD","AD")
"RTN","RAMAG03",135,0)
 . S RASACN31=$$USLNGACN^RAMAGU13($G(RAMDIV))
"RTN","RAMAG03",136,0)
 . ;
"RTN","RAMAG03",137,0)
 . ;=== Lock the exam date/time node and double check parameters
"RTN","RAMAG03",138,0)
 . S RARC=$$LOCKDT^RAMAG03D(RADFN,.RADTE,.RALOCK,RAFLAGS)  Q:RARC<0
"RTN","RAMAG03",139,0)
 . S RADTI=$$INVDTE^RAMAGU04(RADTE)
"RTN","RAMAG03",140,0)
 . ;
"RTN","RAMAG03",141,0)
 . ;=== Register the exam(s)
"RTN","RAMAG03",142,0)
 . S RARC=$$EXAM^RAMAG03C()  Q:RARC<0
"RTN","RAMAG03",143,0)
 . ;
"RTN","RAMAG03",144,0)
 . ;=== Update order status and send OE v3.0 message
"RTN","RAMAG03",145,0)
 . D:$D(^TMP($J,"RAREG1"))>1
"RTN","RAMAG03",146,0)
 . . N RAOSTS,RAPROC  D UOSM^RAREG2
"RTN","RAMAG03",147,0)
 . ;
"RTN","RAMAG03",148,0)
 . ;=== Additional post-processing
"RTN","RAMAG03",149,0)
 . S TMP=$$POSTPROC^RAMAG03C(.RAEXAMS,RADTE)
"RTN","RAMAG03",150,0)
 . S:TMP'<0 RAEXMCNT=+TMP
"RTN","RAMAG03",151,0)
 ;
"RTN","RAMAG03",152,0)
 ;=== Error handling and cleanup
"RTN","RAMAG03",153,0)
 D:RARC<0 ROLLBACK^RAMAG03D($G(RADFN),$G(RADTI))
"RTN","RAMAG03",154,0)
 ;--- Unlock the global nodes
"RTN","RAMAG03",155,0)
 D UNLOCKFM^RALOCK(.RALOCK)
"RTN","RAMAG03",156,0)
 ;--- Cleanup
"RTN","RAMAG03",157,0)
 K ^TMP($J,"RAREG1")
"RTN","RAMAG03",158,0)
 Q $S(RARC<0:RARC,1:RAEXMCNT)
"RTN","RAMAG03A")
0^5^B78208165^n/a
"RTN","RAMAG03A",1,0)
RAMAG03A ;HCIOFO/SG - ORDERS/EXAMS API (REGISTR. PARAMS) ; 2/6/09 11:41am
"RTN","RAMAG03A",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAG03A",3,0)
 ;
"RTN","RAMAG03A",4,0)
 ; This routine uses the following IAs:
"RTN","RAMAG03A",5,0)
 ;
"RTN","RAMAG03A",6,0)
 ; #1337         Read access to the file #42.4 (controlled)
"RTN","RAMAG03A",7,0)
 ; #10039        Read access to the file #42 (supported)
"RTN","RAMAG03A",8,0)
 ; #10040        Read access to the file #44 (supported)
"RTN","RAMAG03A",9,0)
 ; #10093        Read access to the file #49 (supported)
"RTN","RAMAG03A",10,0)
 ;
"RTN","RAMAG03A",11,0)
 Q
"RTN","RAMAG03A",12,0)
 ;
"RTN","RAMAG03A",13,0)
 ;+++++ VALIDATES EXAM PARAMETERS AND INITIALIZES RELATED VARIABLES
"RTN","RAMAG03A",14,0)
 ;
"RTN","RAMAG03A",15,0)
 ; .RALOCK       Reference to a local variable where identifiers
"RTN","RAMAG03A",16,0)
 ;               of the locked order are added to.
"RTN","RAMAG03A",17,0)
 ;
"RTN","RAMAG03A",18,0)
 ; Input variables:
"RTN","RAMAG03A",19,0)
 ;   RADTE, RAMISC, RAOIFN
"RTN","RAMAG03A",20,0)
 ;
"RTN","RAMAG03A",21,0)
 ; Output variables:
"RTN","RAMAG03A",22,0)
 ;   RADFN, RAEXMVAL, RAIMGTYI, RAMDIV, RAMISC, RAMLC, RAPARENT,
"RTN","RAMAG03A",23,0)
 ;   RAPRLST
"RTN","RAMAG03A",24,0)
 ;
"RTN","RAMAG03A",25,0)
 ; Return values:
"RTN","RAMAG03A",26,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAG03A",27,0)
 ;        0  Success
"RTN","RAMAG03A",28,0)
 ;
"RTN","RAMAG03A",29,0)
 ; NOTE: This is an internal entry point. Do not call it from
"RTN","RAMAG03A",30,0)
 ;       routines other than the ^RAMAG03.
"RTN","RAMAG03A",31,0)
 ;
"RTN","RAMAG03A",32,0)
 ;       This function also locks the order record in the
"RTN","RAMAG03A",33,0)
 ;       RAD/NUC MED ORDERS file (#75.1).
"RTN","RAMAG03A",34,0)
 ;
"RTN","RAMAG03A",35,0)
VALIDATE(RALOCK) ;
"RTN","RAMAG03A",36,0)
 N ERRCNT,I,IENS,IENS751,RACAT,RABUF,RADTI,RAMSG,RAORDSTS,RC,TMP
"RTN","RAMAG03A",37,0)
 S ERRCNT=0  K RAEXMVAL
"RTN","RAMAG03A",38,0)
 ;=== Check required variables
"RTN","RAMAG03A",39,0)
 S RC=$$CHKREQ^RAUTL22("RADTE,RAOIFN")  Q:RC<0 RC
"RTN","RAMAG03A",40,0)
 ;
"RTN","RAMAG03A",41,0)
 ;=== Order IEN
"RTN","RAMAG03A",42,0)
 I RAOIFN>0,$D(^RAO(75.1,RAOIFN))
"RTN","RAMAG03A",43,0)
 E  Q $$IPVE^RAERR("RAOIFN")
"RTN","RAMAG03A",44,0)
 ;
"RTN","RAMAG03A",45,0)
 ;=== Lock the order
"RTN","RAMAG03A",46,0)
 K TMP  S TMP(75.1,RAOIFN_",")=""
"RTN","RAMAG03A",47,0)
 S RC=$$LOCKFM^RALOCK(.TMP)
"RTN","RAMAG03A",48,0)
 Q:RC $$LOCKERR^RAERR(RC,"order")
"RTN","RAMAG03A",49,0)
 M RALOCK=TMP
"RTN","RAMAG03A",50,0)
 ;
"RTN","RAMAG03A",51,0)
 ;=== Order status
"RTN","RAMAG03A",52,0)
 S RAORDSTS=$$ORDSTAT^RAMAGU02(RAOIFN)  Q:RAORDSTS<0 RAORDSTS
"RTN","RAMAG03A",53,0)
 ;--- Only orders with HOLD (3), PENDING (5), and SCHEDULED (8)
"RTN","RAMAG03A",54,0)
 ;--- statuses can be registered
"RTN","RAMAG03A",55,0)
 S I=+RAORDSTS
"RTN","RAMAG03A",56,0)
 Q:(I'=3)&(I'=5)&(I'=8) $$ERROR^RAERR(-35,,$P(RAORDSTS,U,2),RAOIFN)
"RTN","RAMAG03A",57,0)
 ;
"RTN","RAMAG03A",58,0)
 ;=== Exam date/time
"RTN","RAMAG03A",59,0)
 S TMP=+$E(RADTE,1,12)  ; Strip the seconds
"RTN","RAMAG03A",60,0)
 S I=$$ISEXCTDT^RAUTL22(TMP)
"RTN","RAMAG03A",61,0)
 I I>0,$P(TMP,".",2),$$FMTE^XLFDT(TMP)'=TMP  D
"RTN","RAMAG03A",62,0)
 . S RADTE=TMP,RADTI=$$INVDTE^RAMAGU04(RADTE)  ; Inverted date/time
"RTN","RAMAG03A",63,0)
 E  D
"RTN","RAMAG03A",64,0)
 . D:I'<0 IPVE^RAERR("RADTE")
"RTN","RAMAG03A",65,0)
 . S ERRCNT=ERRCNT+1,RADTE="",RADTI=0
"RTN","RAMAG03A",66,0)
 ;
"RTN","RAMAG03A",67,0)
 ;=== Load the order data
"RTN","RAMAG03A",68,0)
 S IENS751=RAOIFN_","
"RTN","RAMAG03A",69,0)
 D GETS^DIQ(75.1,IENS751,".01;3;4;14;20;21;22","I","RABUF","RAMSG")
"RTN","RAMAG03A",70,0)
 Q:$G(DIERR) $$DBS^RAERR("RAMSG",-9,75.1,IENS751)
"RTN","RAMAG03A",71,0)
 ;
"RTN","RAMAG03A",72,0)
 ;=== Patient IEN
"RTN","RAMAG03A",73,0)
 S RADFN=+$G(RABUF(75.1,IENS751,.01,"I"))
"RTN","RAMAG03A",74,0)
 Q:RADFN'>0 $$ERROR^RAERR(-19,,75.1,IENS751,.01)
"RTN","RAMAG03A",75,0)
 ;
"RTN","RAMAG03A",76,0)
 ;=== Imaging type IEN
"RTN","RAMAG03A",77,0)
 S RAIMGTYI=+$G(RABUF(75.1,IENS751,3,"I"))
"RTN","RAMAG03A",78,0)
 I RAIMGTYI'>0  D ERROR^RAERR(-19,,75.1,IENS751,3)  S ERRCNT=ERRCNT+1
"RTN","RAMAG03A",79,0)
 ;
"RTN","RAMAG03A",80,0)
 ;=== Imaging location IEN and Radiology division IEN
"RTN","RAMAG03A",81,0)
 S RAMLC=+$G(RABUF(75.1,IENS751,20,"I"))
"RTN","RAMAG03A",82,0)
 I RAMLC>0  D
"RTN","RAMAG03A",83,0)
 . S RAMDIV=$$GET1^DIQ(79.1,RAMLC_",",25,"I",,"RAMSG")
"RTN","RAMAG03A",84,0)
 . I $G(DIERR)  D  S ERRCNT=ERRCNT+1  Q
"RTN","RAMAG03A",85,0)
 . . D DBS^RAERR("RAMSG",-9,79.1,RAMLC_",")
"RTN","RAMAG03A",86,0)
 . I RAMDIV'>0  D  S ERRCNT=ERRCNT+1  Q
"RTN","RAMAG03A",87,0)
 . . D ERROR^RAERR(-19,,79.1,RAMLC_",",25)
"RTN","RAMAG03A",88,0)
 E  D ERROR^RAERR(-19,,75.1,IENS751,20)  S ERRCNT=ERRCNT+1
"RTN","RAMAG03A",89,0)
 ;
"RTN","RAMAG03A",90,0)
 ;=== REQUESTING PHYSICIAN, DATE DESIRED, and REQUESTING LOCATION
"RTN","RAMAG03A",91,0)
 F I=14,21,22  S RAEXMVAL(I)=$G(RABUF(75.1,IENS751,I,"I"))
"RTN","RAMAG03A",92,0)
 ;
"RTN","RAMAG03A",93,0)
 ;=== Category of exam
"RTN","RAMAG03A",94,0)
 S RACAT=$G(RAMISC("EXAMCAT"))
"RTN","RAMAG03A",95,0)
 I RACAT=""  D
"RTN","RAMAG03A",96,0)
 . S RACAT=$G(RABUF(75.1,IENS751,4,"I"))
"RTN","RAMAG03A",97,0)
 . I RACAT=""  D ERROR^RAERR(-19,,75.1,IENS751,4)  S ERRCNT=ERRCNT+1
"RTN","RAMAG03A",98,0)
 . ;--- Assign default value to the parameter
"RTN","RAMAG03A",99,0)
 . S RAMISC("EXAMCAT")=RACAT
"RTN","RAMAG03A",100,0)
 ;
"RTN","RAMAG03A",101,0)
 ;=== Radiology procedure(s) and modifiers
"RTN","RAMAG03A",102,0)
 S:$$VALPROC(IENS751)<0 ERRCNT=ERRCNT+1
"RTN","RAMAG03A",103,0)
 ;
"RTN","RAMAG03A",104,0)
 ;=== Parameters specific to the exam category
"RTN","RAMAG03A",105,0)
 S RC=0
"RTN","RAMAG03A",106,0)
 I RACAT="I"  D  ; Inpatient
"RTN","RAMAG03A",107,0)
 . S RC=$$VALINPAT(IENS751)
"RTN","RAMAG03A",108,0)
 . K RAMISC("PRINCLIN")
"RTN","RAMAG03A",109,0)
 ;
"RTN","RAMAG03A",110,0)
 ;=== Check for CATEGORY OF PATIENT discrepancy
"RTN","RAMAG03A",111,0)
 I RACAT="I",$G(RAMISC("WARD"))=""  D
"RTN","RAMAG03A",112,0)
 . S (RAMISC("EXAMCAT"),RACAT)="O"
"RTN","RAMAG03A",113,0)
 ;
"RTN","RAMAG03A",114,0)
 I RACAT'="I"  D            ; Other categories
"RTN","RAMAG03A",115,0)
 . S RC=$$VALOUTPT(IENS751)
"RTN","RAMAG03A",116,0)
 . F I="BEDSECT","SERVICE","WARD"  K RAMISC(I)
"RTN","RAMAG03A",117,0)
 S:RC<0 ERRCNT=ERRCNT+1
"RTN","RAMAG03A",118,0)
 ;
"RTN","RAMAG03A",119,0)
 ;=== Always get clinical history from the order
"RTN","RAMAG03A",120,0)
 D
"RTN","RAMAG03A",121,0)
 . K RAMISC("CLINHIST")
"RTN","RAMAG03A",122,0)
 . D GETS^DIQ(75.1,IENS751,"400",,"RABUF","RAMSG")
"RTN","RAMAG03A",123,0)
 . I $G(DIERR)  D  S ERRCNT=ERRCNT+1  Q
"RTN","RAMAG03A",124,0)
 . . D DBS^RAERR("RAMSG",-9,75.1,IENS751)
"RTN","RAMAG03A",125,0)
 . S I=""
"RTN","RAMAG03A",126,0)
 . F  S I=$O(RABUF(75.1,IENS751,400,I))  Q:I=""  D
"RTN","RAMAG03A",127,0)
 . . S RAMISC("CLINHIST",I)=RABUF(75.1,IENS751,400,I)
"RTN","RAMAG03A",128,0)
 . K RABUF(75.1,IENS751,400)
"RTN","RAMAG03A",129,0)
 ;
"RTN","RAMAG03A",130,0)
 ;=== Check the flags
"RTN","RAMAG03A",131,0)
 I $G(RAPARENT)  D:$G(RAMISC("FLAGS"))["A"
"RTN","RAMAG03A",132,0)
 . ;--- A parent procedure cannot be added to the existing exam(s)
"RTN","RAMAG03A",133,0)
 . D ERROR^RAERR(-53)  S ERRCNT=ERRCNT+1
"RTN","RAMAG03A",134,0)
 ;
"RTN","RAMAG03A",135,0)
 ;===
"RTN","RAMAG03A",136,0)
 Q $S(ERRCNT>0:$$ERROR^RAERR(-11),1:0)
"RTN","RAMAG03A",137,0)
 ;
"RTN","RAMAG03A",138,0)
 ;+++++ VALIDATES PARAMETERS SPECIFIC TO INPATIENT CATEGORY
"RTN","RAMAG03A",139,0)
 ;
"RTN","RAMAG03A",140,0)
 ; IENS751       IENS of the order in the RAD/NUC MED ORDERS file
"RTN","RAMAG03A",141,0)
 ;
"RTN","RAMAG03A",142,0)
 ; Input variables:
"RTN","RAMAG03A",143,0)
 ;   RADFN, RADTE, RAMISC
"RTN","RAMAG03A",144,0)
 ;
"RTN","RAMAG03A",145,0)
 ; Output variables:
"RTN","RAMAG03A",146,0)
 ;   RAMISC
"RTN","RAMAG03A",147,0)
 ;
"RTN","RAMAG03A",148,0)
 ; Return values:
"RTN","RAMAG03A",149,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAG03A",150,0)
 ;        0  Parameters are valid
"RTN","RAMAG03A",151,0)
 ;
"RTN","RAMAG03A",152,0)
 ; NOTE: This is an internal entry point. Do not call it from
"RTN","RAMAG03A",153,0)
 ;       outside of the RAMAG03* routines.
"RTN","RAMAG03A",154,0)
 ;
"RTN","RAMAG03A",155,0)
VALINPAT(IENS751) ;
"RTN","RAMAG03A",156,0)
 N BEDSECT,ERRCNT,I,IEN,RC,SERVICE,TMP,WARD
"RTN","RAMAG03A",157,0)
 S ERRCNT=0
"RTN","RAMAG03A",158,0)
 ;
"RTN","RAMAG03A",159,0)
 ;=== Check if at least one default value is needed
"RTN","RAMAG03A",160,0)
 S TMP=0
"RTN","RAMAG03A",161,0)
 F I="BEDSECT","SERVICE","WARD"  I '($D(RAMISC(I))#10)  S TMP=1  Q
"RTN","RAMAG03A",162,0)
 I TMP  S RC=0  D  Q:RC<0 +RC
"RTN","RAMAG03A",163,0)
 . ;--- Get inpatient data
"RTN","RAMAG03A",164,0)
 . S RC=$$RAINP^RAMAGU07(RADFN,.SERVICE,.BEDSECT,.WARD,RADTE)  Q:RC<0
"RTN","RAMAG03A",165,0)
 . ;--- Assign default values to the parameters
"RTN","RAMAG03A",166,0)
 . S:'($D(RAMISC("BEDSECT"))#10)&(BEDSECT>0) RAMISC("BEDSECT")=+BEDSECT
"RTN","RAMAG03A",167,0)
 . S:'($D(RAMISC("SERVICE"))#10)&(SERVICE>0) RAMISC("SERVICE")=+SERVICE
"RTN","RAMAG03A",168,0)
 . S:'($D(RAMISC("WARD"))#10)&(WARD>0) RAMISC("WARD")=+WARD
"RTN","RAMAG03A",169,0)
 ;
"RTN","RAMAG03A",170,0)
 ;=== Validate parameters
"RTN","RAMAG03A",171,0)
 S IEN=$G(RAMISC("BEDSECT"))
"RTN","RAMAG03A",172,0)
 D:IEN>0
"RTN","RAMAG03A",173,0)
 . S TMP=$$ROOT^DILFD(42.4,,1)
"RTN","RAMAG03A",174,0)
 . I '$D(@TMP@(IEN,0))  D  S ERRCNT=ERRCNT+1
"RTN","RAMAG03A",175,0)
 . . D IPVE^RAERR($NA(RAMISC("BEDSECT")))
"RTN","RAMAG03A",176,0)
 ;---
"RTN","RAMAG03A",177,0)
 S IEN=$G(RAMISC("SERVICE"))
"RTN","RAMAG03A",178,0)
 D:IEN>0
"RTN","RAMAG03A",179,0)
 . S TMP=$$ROOT^DILFD(49,,1)
"RTN","RAMAG03A",180,0)
 . I '$D(@TMP@(IEN,0))  D  S ERRCNT=ERRCNT+1
"RTN","RAMAG03A",181,0)
 . . D IPVE^RAERR($NA(RAMISC("SERVICE")))
"RTN","RAMAG03A",182,0)
 ;---
"RTN","RAMAG03A",183,0)
 S IEN=$G(RAMISC("WARD"))
"RTN","RAMAG03A",184,0)
 D:IEN>0
"RTN","RAMAG03A",185,0)
 . S TMP=$$ROOT^DILFD(42,,1)
"RTN","RAMAG03A",186,0)
 . I '$D(@TMP@(IEN,0))  D  S ERRCNT=ERRCNT+1
"RTN","RAMAG03A",187,0)
 . . D IPVE^RAERR($NA(RAMISC("WARD")))
"RTN","RAMAG03A",188,0)
 ;
"RTN","RAMAG03A",189,0)
 ;===
"RTN","RAMAG03A",190,0)
 Q $S(ERRCNT>0:-11,1:0)
"RTN","RAMAG03A",191,0)
 ;
"RTN","RAMAG03A",192,0)
 ;+++++ VALIDATES PARAMETERS SPECIFIC TO NON-INPATIENT CATEGORIES
"RTN","RAMAG03A",193,0)
 ;
"RTN","RAMAG03A",194,0)
 ; IENS751       IENS of the order in the RAD/NUC MED ORDERS file
"RTN","RAMAG03A",195,0)
 ;
"RTN","RAMAG03A",196,0)
 ; Input variables:
"RTN","RAMAG03A",197,0)
 ;   RAMISC
"RTN","RAMAG03A",198,0)
 ;
"RTN","RAMAG03A",199,0)
 ; Output variables:
"RTN","RAMAG03A",200,0)
 ;   RAMISC
"RTN","RAMAG03A",201,0)
 ;
"RTN","RAMAG03A",202,0)
 ; Return values:
"RTN","RAMAG03A",203,0)
 ;       <0  Error code
"RTN","RAMAG03A",204,0)
 ;        0  Parameters are valid
"RTN","RAMAG03A",205,0)
 ;
"RTN","RAMAG03A",206,0)
 ; NOTE: This is an internal entry point. Do not call it from
"RTN","RAMAG03A",207,0)
 ;       outside of the RAMAG03* routines.
"RTN","RAMAG03A",208,0)
 ;
"RTN","RAMAG03A",209,0)
VALOUTPT(IENS751) ;
"RTN","RAMAG03A",210,0)
 N CLINIC,ERRCNT,I,IENS,RAMSG,RC,TMP
"RTN","RAMAG03A",211,0)
 S ERRCNT=0
"RTN","RAMAG03A",212,0)
 ;
"RTN","RAMAG03A",213,0)
 ;=== Principal Clinic
"RTN","RAMAG03A",214,0)
 S RC=0,CLINIC=$G(RAMISC("PRINCLIN"))
"RTN","RAMAG03A",215,0)
 ;--- Use the Requesting Location from the order as default value
"RTN","RAMAG03A",216,0)
 D:CLINIC'>0
"RTN","RAMAG03A",217,0)
 . S CLINIC=$$GET1^DIQ(75.1,IENS751,22,"I",,"RAMSG")
"RTN","RAMAG03A",218,0)
 . I $G(DIERR)  S RC=$$DBS^RAERR("RAMSG",-9,75.1,IENS751)  Q
"RTN","RAMAG03A",219,0)
 . S:CLINIC'>0 RC=$$ERROR^RAERR(-19,,75.1,IENS751,22)
"RTN","RAMAG03A",220,0)
 ;--- Check the location type
"RTN","RAMAG03A",221,0)
 I RC'<0  D
"RTN","RAMAG03A",222,0)
 . S IENS=CLINIC_",",TMP=$$GET1^DIQ(44,IENS,2,"I",,"RAMSG")
"RTN","RAMAG03A",223,0)
 . I $G(DIERR)  S RC=$$DBS^RAERR("RAMSG",-9,44,IENS)  Q
"RTN","RAMAG03A",224,0)
 . I TMP=""  S RC=$$ERROR^RAERR(-19,,44,IENS,2)  Q
"RTN","RAMAG03A",225,0)
 . S:TMP'="C" RC=-3
"RTN","RAMAG03A",226,0)
 I RC<0  D  S ERRCNT=ERRCNT+1
"RTN","RAMAG03A",227,0)
 . D IPVE^RAERR($NA(RAMISC("PRINCLIN")))
"RTN","RAMAG03A",228,0)
 E  S RAMISC("PRINCLIN")=CLINIC
"RTN","RAMAG03A",229,0)
 ;
"RTN","RAMAG03A",230,0)
 ;===
"RTN","RAMAG03A",231,0)
 Q $S(ERRCNT>0:-11,1:0)
"RTN","RAMAG03A",232,0)
 ;
"RTN","RAMAG03A",233,0)
 ;+++++ VALIDATES RADIOLOGY PROCEDURE AND MODFIERS
"RTN","RAMAG03A",234,0)
 ;
"RTN","RAMAG03A",235,0)
 ; IENS751       IENS of the order in the RAD/NUC MED ORDERS file
"RTN","RAMAG03A",236,0)
 ;
"RTN","RAMAG03A",237,0)
 ; Input variables:
"RTN","RAMAG03A",238,0)
 ;   RADTE, RAIMGTYI, RAMISC
"RTN","RAMAG03A",239,0)
 ;
"RTN","RAMAG03A",240,0)
 ; Output variables:
"RTN","RAMAG03A",241,0)
 ;   RAMISC, RAPARENT, RAPRLST
"RTN","RAMAG03A",242,0)
 ;
"RTN","RAMAG03A",243,0)
 ; Return values:
"RTN","RAMAG03A",244,0)
 ;       <0  Error code
"RTN","RAMAG03A",245,0)
 ;        0  Procedure and modifiers are valid
"RTN","RAMAG03A",246,0)
 ;
"RTN","RAMAG03A",247,0)
 ; NOTE: This is an internal entry point. Do not call it from
"RTN","RAMAG03A",248,0)
 ;       outside of this routine.
"RTN","RAMAG03A",249,0)
 ;
"RTN","RAMAG03A",250,0)
VALPROC(IENS751) ;
"RTN","RAMAG03A",251,0)
 N CNT,DESCPLST,I,RABUF,RAMSG,RAPD,RAPROC,RAPTL,SNGLRPT,RC,TMP
"RTN","RAMAG03A",252,0)
 S (RAPARENT,RC)=0
"RTN","RAMAG03A",253,0)
 ;
"RTN","RAMAG03A",254,0)
 ;=== Compile the list of detailed/series procedures
"RTN","RAMAG03A",255,0)
 I $D(RAMISC("RAPROC"))>1  D
"RTN","RAMAG03A",256,0)
 . S (CNT,I,RAPD)=0
"RTN","RAMAG03A",257,0)
 . F  S I=$O(RAMISC("RAPROC",I))  Q:I'>0  D  Q:RC<0
"RTN","RAMAG03A",258,0)
 . . S RAPROC=RAMISC("RAPROC",I)
"RTN","RAMAG03A",259,0)
 . . ;--- "Parent" procedure should be the only procedure in the list
"RTN","RAMAG03A",260,0)
 . . I RAPARENT  S RC=$$ERROR^RAERR(-30)  Q
"RTN","RAMAG03A",261,0)
 . . ;--- Process a "parent" procedure
"RTN","RAMAG03A",262,0)
 . . S RC=$$DESCPLST^RAMAGU03(+RAPROC,.DESCPLST,.SNGLRPT)  Q:RC<0
"RTN","RAMAG03A",263,0)
 . . I RC>0  S RAPARENT=1  D  Q
"RTN","RAMAG03A",264,0)
 . . . ;--- "Parent" procedure should be the only proc. in the list
"RTN","RAMAG03A",265,0)
 . . . I CNT>0  S RC=$$ERROR^RAERR(-30)  Q
"RTN","RAMAG03A",266,0)
 . . . ;--- Modifiers cannot be used with "parent" procedures
"RTN","RAMAG03A",267,0)
 . . . S TMP=0
"RTN","RAMAG03A",268,0)
 . . . F I=2:1:$L(RAPROC,U)  I $P(RAPROC,U,I)'=""  S TMP=1  Q
"RTN","RAMAG03A",269,0)
 . . . I TMP  S RC=$$ERROR^RAERR(-32)  Q
"RTN","RAMAG03A",270,0)
 . . . ;--- Add detailed/series procedures to the list
"RTN","RAMAG03A",271,0)
 . . . S TMP=""
"RTN","RAMAG03A",272,0)
 . . . F  S TMP=$O(DESCPLST(TMP))  Q:TMP=""  D
"RTN","RAMAG03A",273,0)
 . . . . S CNT=CNT+1,RAPRLST(CNT)=+DESCPLST(TMP)
"RTN","RAMAG03A",274,0)
 . . ;--- Process a detailed/series procedure
"RTN","RAMAG03A",275,0)
 . . S CNT=CNT+1,RAPRLST(CNT)=RAPROC
"RTN","RAMAG03A",276,0)
 E  D
"RTN","RAMAG03A",277,0)
 . S CNT=0
"RTN","RAMAG03A",278,0)
 . ;--- Get the procedure and modifiers from the order
"RTN","RAMAG03A",279,0)
 . D GETS^DIQ(75.1,IENS751,"2;125*","I","RABUF","RAMSG")
"RTN","RAMAG03A",280,0)
 . I $G(DIERR)  S RC=$$DBS^RAERR("RAMSG",-9,75.1,IENS751)  Q
"RTN","RAMAG03A",281,0)
 . ;--- Procedure IEN
"RTN","RAMAG03A",282,0)
 . S RAPROC=+$G(RABUF(75.1,IENS751,2,"I"))
"RTN","RAMAG03A",283,0)
 . I RAPROC'>0  S RC=$$ERROR^RAERR(-19,,75.1,IENS751,2)  Q
"RTN","RAMAG03A",284,0)
 . ;--- Process a parent procedure
"RTN","RAMAG03A",285,0)
 . S RC=$$DESCPLST^RAMAGU03(+RAPROC,.DESCPLST,.SNGLRPT)  Q:RC<0
"RTN","RAMAG03A",286,0)
 . I RC>0  S RAPARENT=1,TMP=""  D  Q
"RTN","RAMAG03A",287,0)
 . . F  S TMP=$O(DESCPLST(TMP))  Q:TMP=""  D
"RTN","RAMAG03A",288,0)
 . . . S CNT=CNT+1,RAPRLST(CNT)=+DESCPLST(TMP)
"RTN","RAMAG03A",289,0)
 . ;--- Procedure modifier IENs
"RTN","RAMAG03A",290,0)
 . S I=""
"RTN","RAMAG03A",291,0)
 . F  S I=$O(RABUF(75.1125,I))  Q:I=""  D
"RTN","RAMAG03A",292,0)
 . . S TMP=+$G(RABUF(75.1125,I,.01,"I"))
"RTN","RAMAG03A",293,0)
 . . I TMP'>0  S RC=$$ERROR^RAERR(-19,,75.1125,I,.01)  Q
"RTN","RAMAG03A",294,0)
 . . S RAPROC=RAPROC_U_TMP
"RTN","RAMAG03A",295,0)
 . ;--- Add the procedure to the list
"RTN","RAMAG03A",296,0)
 . S RAPRLST(1)=RAPROC
"RTN","RAMAG03A",297,0)
 ;
"RTN","RAMAG03A",298,0)
 ;=== Validate procedures
"RTN","RAMAG03A",299,0)
 I RC'<0,RADTE>0,RAIMGTYI>0  D
"RTN","RAMAG03A",300,0)
 . S I=0
"RTN","RAMAG03A",301,0)
 . F  S I=$O(RAPRLST(I))  Q:I'>0  D
"RTN","RAMAG03A",302,0)
 . . S TMP=$$CHKPROC^RAMAGU03(RAPRLST(I),RAIMGTYI,RADTE,"DS")
"RTN","RAMAG03A",303,0)
 . . S:TMP<0 RC=TMP
"RTN","RAMAG03A",304,0)
 ;
"RTN","RAMAG03A",305,0)
 ;=== Enforce report type for descendants of a parent procedure
"RTN","RAMAG03A",306,0)
 I RAPARENT  K RAMISC("SINGLERPT")  S:SNGLRPT RAMISC("SINGLERPT")=1
"RTN","RAMAG03A",307,0)
 ;
"RTN","RAMAG03A",308,0)
 ;===
"RTN","RAMAG03A",309,0)
 Q $S(RC<0:-11,1:0)
"RTN","RAMAG03C")
0^7^B25745401^n/a
"RTN","RAMAG03C",1,0)
RAMAG03C ;HCIOFO/SG - ORDERS/EXAMS API (REGISTR. UTILS) ; 2/6/09 11:02am
"RTN","RAMAG03C",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAG03C",3,0)
 ;
"RTN","RAMAG03C",4,0)
 Q
"RTN","RAMAG03C",5,0)
 ;
"RTN","RAMAG03C",6,0)
 ;+++++ CREATES AN EXAM IN THE RAD/NUC MED PATIENT (#70)
"RTN","RAMAG03C",7,0)
 ;
"RTN","RAMAG03C",8,0)
 ; Input variables:
"RTN","RAMAG03C",9,0)
 ;   RADFN, RADTE, RADTI, RAEXMVAL, RAIMGTYI, RALOCK, RAMDIV,
"RTN","RAMAG03C",10,0)
 ;   RAMISC, RAMLC, RAOIFN, RAPARENT, RAPRLST, RASACN31
"RTN","RAMAG03C",11,0)
 ;
"RTN","RAMAG03C",12,0)
 ; Output variables:
"RTN","RAMAG03C",13,0)
 ;   ^TMP($J,"RAREG1",...), RALOCK
"RTN","RAMAG03C",14,0)
 ;
"RTN","RAMAG03C",15,0)
 ; Return values:
"RTN","RAMAG03C",16,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAG03C",17,0)
 ;        0  Success
"RTN","RAMAG03C",18,0)
 ;
"RTN","RAMAG03C",19,0)
 ; NOTE: This is an internal entry point. Do not call it from
"RTN","RAMAG03C",20,0)
 ;       routines other than the ^RAMAG03.
"RTN","RAMAG03C",21,0)
 ;
"RTN","RAMAG03C",22,0)
EXAM() ;
"RTN","RAMAG03C",23,0)
 Q:$D(RAPRLST)<10 0
"RTN","RAMAG03C",24,0)
 N IENS,RACN,RACASE,RACRM,RAFDA,RAIENS,RAIP,RAMOS,RAMSG,RAPROC,RARC,TMP
"RTN","RAMAG03C",25,0)
 K ^TMP($J,"RAREG1")  S RARC=0
"RTN","RAMAG03C",26,0)
 S RAMOS=$S('$G(RAPARENT):"",$G(RAMISC("SINGLERPT")):2,1:1)
"RTN","RAMAG03C",27,0)
 ;
"RTN","RAMAG03C",28,0)
 ;=== Create the date/time record if necessary
"RTN","RAMAG03C",29,0)
 S TMP=$$ROOT^DILFD(70.02,","_RADFN_",",1)
"RTN","RAMAG03C",30,0)
 I '$D(@TMP@(RADTI))  D  Q:RARC<0 RARC
"RTN","RAMAG03C",31,0)
 . S IENS="+1,"_RADFN_","
"RTN","RAMAG03C",32,0)
 . S RAFDA(70.02,IENS,.01)=RADTE         ; EXAM DATE
"RTN","RAMAG03C",33,0)
 . S RAFDA(70.02,IENS,2)=RAIMGTYI        ; TYPE OF IMAGING
"RTN","RAMAG03C",34,0)
 . S RAFDA(70.02,IENS,3)=RAMDIV          ; HOSPITAL DIVISION
"RTN","RAMAG03C",35,0)
 . S RAFDA(70.02,IENS,4)=+RAMLC          ; IMAGING LOCATION
"RTN","RAMAG03C",36,0)
 . S:$G(RAPARENT) RAFDA(70.02,IENS,5)=1  ; EXAM SET
"RTN","RAMAG03C",37,0)
 . S RAIENS(1)=RADTI
"RTN","RAMAG03C",38,0)
 . D UPDATE^DIE(,"RAFDA","RAIENS","RAMSG")
"RTN","RAMAG03C",39,0)
 . S:$G(DIERR) RARC=$$DBS^RAERR("RAMSG",-9,70.02,IENS)
"RTN","RAMAG03C",40,0)
 ;
"RTN","RAMAG03C",41,0)
 ;=== Get the credit method from the imaging location
"RTN","RAMAG03C",42,0)
 S RACRM=$$GET1^DIQ(79.1,+RAMLC_",",21,"I",,"RAMSG")
"RTN","RAMAG03C",43,0)
 Q:$G(DIERR) $$DBS^RAERR("RAMSG",-9,79.1,+RAMLC_",")
"RTN","RAMAG03C",44,0)
 ;
"RTN","RAMAG03C",45,0)
 ;=== Register individual case(s)
"RTN","RAMAG03C",46,0)
 S RAIP=0
"RTN","RAMAG03C",47,0)
 F  S RAIP=$O(RAPRLST(RAIP))  Q:RAIP'>0  D  Q:RARC<0
"RTN","RAMAG03C",48,0)
 . S RAPROC=RAPRLST(RAIP)  K RAFDA,RAIENS,RAMSG
"RTN","RAMAG03C",49,0)
 . ;--- Generate a case number
"RTN","RAMAG03C",50,0)
 . S RACN=$$CASENUM^RAMAG03D(RADTE)
"RTN","RAMAG03C",51,0)
 . I RACN<0  S RARC=RACN  Q
"RTN","RAMAG03C",52,0)
 . ;--- Prepare the data
"RTN","RAMAG03C",53,0)
 . S IENS="+1,"_RADTI_","_RADFN_","
"RTN","RAMAG03C",54,0)
 . S RAFDA(70.03,IENS,.01)=RACN                  ; CASE NUMBER
"RTN","RAMAG03C",55,0)
 . S RAFDA(70.03,IENS,2)=+RAPROC                 ; PROCEDURE
"RTN","RAMAG03C",56,0)
 . S RAFDA(70.03,IENS,4)=RAMISC("EXAMCAT")       ; CATEGORY OF EXAM
"RTN","RAMAG03C",57,0)
 . S RAFDA(70.03,IENS,6)=$G(RAMISC("WARD"))      ; WARD
"RTN","RAMAG03C",58,0)
 . S RAFDA(70.03,IENS,7)=$G(RAMISC("SERVICE"))   ; SERVICE
"RTN","RAMAG03C",59,0)
 . S RAFDA(70.03,IENS,8)=$G(RAMISC("PRINCLIN"))  ; PRINCIPAL CLINIC
"RTN","RAMAG03C",60,0)
 . S RAFDA(70.03,IENS,11)=RAOIFN                 ; IMAGING ORDER
"RTN","RAMAG03C",61,0)
 . S RAFDA(70.03,IENS,19)=$G(RAMISC("BEDSECT"))  ; BEDSECTION
"RTN","RAMAG03C",62,0)
 . S RAFDA(70.03,IENS,25)=RAMOS                  ; MEMBER OF SET
"RTN","RAMAG03C",63,0)
 . S RAFDA(70.03,IENS,26)=RACRM                  ; CREDIT METHOD
"RTN","RAMAG03C",64,0)
 . ;---Pregnancy Screen and Pregnancy Screen Comment for female pt ages 12-55
"RTN","RAMAG03C",65,0)
 . I $$PTSEX^RAUTL8(RADFN)="F",(($$PTAGE^RAUTL8(RADFN,"")>11)!($$PTAGE^RAUTL8(RADFN,"")<56)) D
"RTN","RAMAG03C",66,0)
 .. S RAFDA(70.03,IENS,32)="u"
"RTN","RAMAG03C",67,0)
 .. S RAFDA(70.03,IENS,80)="OUTSIDE STUDY"
"RTN","RAMAG03C",68,0)
 . ;--- SITE ACCESSION NUMBER
"RTN","RAMAG03C",69,0)
 . S:$G(RASACN31) RAFDA(70.03,IENS,31)=$$ACCNUM^RAMAGU04(RADTE,RACN)
"RTN","RAMAG03C",70,0)
 . ;--- CLINICAL HISTORY FOR EXAM
"RTN","RAMAG03C",71,0)
 . S TMP=$NA(RAMISC("CLINHIST"))
"RTN","RAMAG03C",72,0)
 . S:$D(@TMP)>1 RAFDA(70.03,IENS,400)=TMP
"RTN","RAMAG03C",73,0)
 . ;--- Values from the order
"RTN","RAMAG03C",74,0)
 . M RAFDA(70.03,IENS)=RAEXMVAL
"RTN","RAMAG03C",75,0)
 . ;--- Add the record
"RTN","RAMAG03C",76,0)
 . D UPDATE^DIE(,"RAFDA","RAIENS","RAMSG")
"RTN","RAMAG03C",77,0)
 . I $G(DIERR)  S RARC=$$DBS^RAERR("RAMSG",-9,70.03,IENS)  Q
"RTN","RAMAG03C",78,0)
 . S RACASE=RADFN_U_RADTI_U_RAIENS(1)
"RTN","RAMAG03C",79,0)
 . ;--- Add to the list
"RTN","RAMAG03C",80,0)
 . S ^TMP($J,"RAREG1",RAIP)=RACASE_U_RAOIFN
"RTN","RAMAG03C",81,0)
 . ;--- Procedure modifiers
"RTN","RAMAG03C",82,0)
 . S $P(IENS,",")=RAIENS(1)
"RTN","RAMAG03C",83,0)
 . S RARC=$$PROCMOD(IENS,RAPROC)  Q:RARC<0
"RTN","RAMAG03C",84,0)
 . ;--- Exam status
"RTN","RAMAG03C",85,0)
 . S RARC=$$UPDEXMST^RAMAGU05(RACASE,"^^1")  Q:RARC<0
"RTN","RAMAG03C",86,0)
 . ;--- Activity log
"RTN","RAMAG03C",87,0)
 . S TMP=$G(RAMISC("TECHCOMM"))
"RTN","RAMAG03C",88,0)
 . S RARC=$$UPDEXMAL^RAMAGU05(RACASE,"E",TMP)  Q:RARC<0
"RTN","RAMAG03C",89,0)
 ;
"RTN","RAMAG03C",90,0)
 ;===
"RTN","RAMAG03C",91,0)
 Q $S(RARC<0:RARC,1:0)
"RTN","RAMAG03C",92,0)
 ;
"RTN","RAMAG03C",93,0)
 ;+++++ PERFORMS EXAM POST-PROCESSING
"RTN","RAMAG03C",94,0)
 ;
"RTN","RAMAG03C",95,0)
 ; .RAEXAMS      Reference to a local array where identifiers of
"RTN","RAMAG03C",96,0)
 ;               registered examination(s) are returned to.
"RTN","RAMAG03C",97,0)
 ;
"RTN","RAMAG03C",98,0)
 ; RADTE         Actual date/time of the exam (FileMan)
"RTN","RAMAG03C",99,0)
 ;
"RTN","RAMAG03C",100,0)
 ; Input variables:
"RTN","RAMAG03C",101,0)
 ;   RASACN31, ^TMP($J,"RAREG1",...)
"RTN","RAMAG03C",102,0)
 ;
"RTN","RAMAG03C",103,0)
 ; Return values:
"RTN","RAMAG03C",104,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAG03C",105,0)
 ;      '<0  Number of registered examinations
"RTN","RAMAG03C",106,0)
 ;           (number of elements in the RAEXAMS array)
"RTN","RAMAG03C",107,0)
 ;
"RTN","RAMAG03C",108,0)
POSTPROC(RAEXAMS,RADTE) ;
"RTN","RAMAG03C",109,0)
 N IENS,RABUF,RACASE,RACN,RACNI,RADFN,RADTI,RAEXMCNT,RAI,RAMSG,RAOIFN
"RTN","RAMAG03C",110,0)
 S RAEXMCNT=0  K RAEXAMS
"RTN","RAMAG03C",111,0)
 ;===
"RTN","RAMAG03C",112,0)
 S RAI=0
"RTN","RAMAG03C",113,0)
 F  S RAI=$O(^TMP($J,"RAREG1",RAI))  Q:RAI'>0  D
"RTN","RAMAG03C",114,0)
 . S RACASE=^TMP($J,"RAREG1",RAI)  K RABUF,RAMSG
"RTN","RAMAG03C",115,0)
 . S RADFN=$P(RACASE,U),RADTI=$P(RACASE,U,2)
"RTN","RAMAG03C",116,0)
 . S RACNI=$P(RACASE,U,3),RAOIFN=$P(RACASE,U,4)
"RTN","RAMAG03C",117,0)
 . S IENS=$$EXAMIENS^RAMAGU04(RACASE)
"RTN","RAMAG03C",118,0)
 . ;--- Exam identifiers
"RTN","RAMAG03C",119,0)
 . S RACN=$$GET1^DIQ(70.03,IENS,.01,"I",,"RAMSG")
"RTN","RAMAG03C",120,0)
 . S $P(RACASE,U,4)=RACN                          ; Case number
"RTN","RAMAG03C",121,0)
 . I $G(RASACN31)  D                              ; Accession number
"RTN","RAMAG03C",122,0)
 . . S $P(RACASE,U,5)=$$GET1^DIQ(70.03,IENS,31,"I",,"RAMSG")
"RTN","RAMAG03C",123,0)
 . E  S $P(RACASE,U,5)=$$ACCNUM^RAMAGU04(RADTE,RACN,"S")
"RTN","RAMAG03C",124,0)
 . S $P(RACASE,U,6)=RADTE                         ; Exam date/time
"RTN","RAMAG03C",125,0)
 . S RAEXMCNT=RAEXMCNT+1,RAEXAMS(RAEXMCNT)=RACASE
"RTN","RAMAG03C",126,0)
 . ;--- Execute RA REG* protocols
"RTN","RAMAG03C",127,0)
 . D REG^RAHLRPC
"RTN","RAMAG03C",128,0)
 . ;--- Remove from the list
"RTN","RAMAG03C",129,0)
 . K ^TMP($J,"RAREG1",RAI)
"RTN","RAMAG03C",130,0)
 ;===
"RTN","RAMAG03C",131,0)
 Q RAEXMCNT
"RTN","RAMAG03C",132,0)
 ;
"RTN","RAMAG03C",133,0)
 ;+++++ STORES PROCEDURE MODIFIERS
"RTN","RAMAG03C",134,0)
 ;
"RTN","RAMAG03C",135,0)
 ; IENS7003      IENS of the exam in the sub-file #70.03
"RTN","RAMAG03C",136,0)
 ;
"RTN","RAMAG03C",137,0)
 ; RAPROC        Radiology procedure and modifiers
"RTN","RAMAG03C",138,0)
 ;                 ^01: Procedure IEN in file #71
"RTN","RAMAG03C",139,0)
 ;                 ^02: Optional procedure modifiers (IENs in
"RTN","RAMAG03C",140,0)
 ;                 ...  the PROCEDURE MODIFIERS file (#71.2))
"RTN","RAMAG03C",141,0)
 ;                 ^nn:
"RTN","RAMAG03C",142,0)
 ;
"RTN","RAMAG03C",143,0)
 ; Return values:
"RTN","RAMAG03C",144,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAG03C",145,0)
 ;        0  Success
"RTN","RAMAG03C",146,0)
 ;
"RTN","RAMAG03C",147,0)
 ; NOTE: This is an internal entry point. Do not call it from
"RTN","RAMAG03C",148,0)
 ;       outside of this routine.
"RTN","RAMAG03C",149,0)
 ;
"RTN","RAMAG03C",150,0)
PROCMOD(IENS7003,RAPROC) ;
"RTN","RAMAG03C",151,0)
 N I,IENS,LP,RAFDA,RAMSG,RAPMCNT,RARC,TMP
"RTN","RAMAG03C",152,0)
 S (RAPMCNT,RARC)=0
"RTN","RAMAG03C",153,0)
 ;--- Prepare the data
"RTN","RAMAG03C",154,0)
 S LP=$L(RAPROC,U)
"RTN","RAMAG03C",155,0)
 F I=2:1:LP  S TMP=$P(RAPROC,U,I)  D:TMP'=""
"RTN","RAMAG03C",156,0)
 . S RAPMCNT=RAPMCNT+1,IENS="+"_RAPMCNT_","_IENS7003
"RTN","RAMAG03C",157,0)
 . S RAFDA(70.1,IENS,.01)="`"_TMP
"RTN","RAMAG03C",158,0)
 ;--- Store procedure modifiers
"RTN","RAMAG03C",159,0)
 D:RAPMCNT>0
"RTN","RAMAG03C",160,0)
 . D UPDATE^DIE("E","RAFDA",,"RAMSG")
"RTN","RAMAG03C",161,0)
 . S:$G(DIERR) RARC=$$DBS^RAERR("RAMSG",-9,70.1)
"RTN","RAMAG03C",162,0)
 ;---
"RTN","RAMAG03C",163,0)
 Q RARC
"RTN","RAMAG03D")
0^8^B36215473^n/a
"RTN","RAMAG03D",1,0)
RAMAG03D ;HCIOFO/SG - ORDERS/EXAMS API (REGISTR. UTILS) ; 5/27/08 1:31pm
"RTN","RAMAG03D",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAG03D",3,0)
 ;
"RTN","RAMAG03D",4,0)
 Q
"RTN","RAMAG03D",5,0)
 ;
"RTN","RAMAG03D",6,0)
 ;***** GENERATES NEW CASE NUMBER
"RTN","RAMAG03D",7,0)
 ;
"RTN","RAMAG03D",8,0)
 ; RADTE         Date of the exam (FileMan)
"RTN","RAMAG03D",9,0)
 ;
"RTN","RAMAG03D",10,0)
 ; [RATYPE]      IEN of the imaging type (file #79.2).
"RTN","RAMAG03D",11,0)
 ;
"RTN","RAMAG03D",12,0)
 ;               Currently, the Radiology package always uses
"RTN","RAMAG03D",13,0)
 ;               IEN of the "GENERAL RADIOLOGY" record. This API
"RTN","RAMAG03D",14,0)
 ;               does the same if the RATYPE parameter is not
"RTN","RAMAG03D",15,0)
 ;               defined or not greater than 0.
"RTN","RAMAG03D",16,0)
 ;
"RTN","RAMAG03D",17,0)
 ; Return Values:
"RTN","RAMAG03D",18,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAG03D",19,0)
 ;       >0  Case number (1-99999)
"RTN","RAMAG03D",20,0)
 ;
"RTN","RAMAG03D",21,0)
CASENUM(RADTE,RATYPE) ;
"RTN","RAMAG03D",22,0)
 N %H,%T,%Y,RADTE99,RAII,RAJ,RALOCK,RAX,RAXX,RC,TMP,X,X1,X2
"RTN","RAMAG03D",23,0)
 Q:$G(RADTE)'>0 $$IPVE^RAERR("RADTE")
"RTN","RAMAG03D",24,0)
 ;--- Get the default imaging type
"RTN","RAMAG03D",25,0)
 I $G(RATYPE)'>0  D  Q:'$D(^RA(79.2,RATYPE,0)) $$ERROR^RAERR(-36)
"RTN","RAMAG03D",26,0)
 . S RATYPE=+$O(^RA(79.2,"B","GENERAL RADIOLOGY",0))
"RTN","RAMAG03D",27,0)
 ;---
"RTN","RAMAG03D",28,0)
 K TMP  S TMP(79.2,RATYPE_",",25)=""  ; "CN" node
"RTN","RAMAG03D",29,0)
 S RC=$$LOCKFM^RALOCK(.TMP)
"RTN","RAMAG03D",30,0)
 Q:RC $$LOCKERR^RAERR(RC,"next case number")
"RTN","RAMAG03D",31,0)
 M RALOCK=TMP
"RTN","RAMAG03D",32,0)
 D
"RTN","RAMAG03D",33,0)
 . S X=$G(^RA(79.2,RATYPE,"CN"))
"RTN","RAMAG03D",34,0)
 . D:(DT>$P(X,U,2))!(X>99999) CAL^RAREG1
"RTN","RAMAG03D",35,0)
 . ;--- Double check that the number is not used
"RTN","RAMAG03D",36,0)
 . S RAX=+^RA(79.2,RATYPE,"CN")  D DUP^RAREG1
"RTN","RAMAG03D",37,0)
 . ;--- Recalculate if DUP returned a value bigger than 99999
"RTN","RAMAG03D",38,0)
 . I RAX>99999  D  I RAX>99999  S RAX=$$ERROR^RAERR(-37)  Q
"RTN","RAMAG03D",39,0)
 . . D CAL^RAREG1  S RAX=+^RA(79.2,RATYPE,"CN")  D DUP^RAREG1
"RTN","RAMAG03D",40,0)
 . ;--- Get the next free case number and store it
"RTN","RAMAG03D",41,0)
 . F RAJ=RAX+1:1  I '$D(^RADPT("AE",RAJ))  D  Q
"RTN","RAMAG03D",42,0)
 . . S $P(^RA(79.2,RATYPE,"CN"),U)=RAJ
"RTN","RAMAG03D",43,0)
 . ;--- If the next free case number for future use is
"RTN","RAMAG03D",44,0)
 . ;--- greater than 99999,then recalculate again
"RTN","RAMAG03D",45,0)
 . D:^RA(79.2,RATYPE,"CN")>99999 CAL^RAREG1
"RTN","RAMAG03D",46,0)
 D UNLOCKFM^RALOCK(.RALOCK)
"RTN","RAMAG03D",47,0)
 ;---
"RTN","RAMAG03D",48,0)
 Q RAX
"RTN","RAMAG03D",49,0)
 ;
"RTN","RAMAG03D",50,0)
 ;+++++ DOUBLE CHECKS AND LOCKS THE EXAM DATE/TIME
"RTN","RAMAG03D",51,0)
 ;
"RTN","RAMAG03D",52,0)
 ; RADFN         Patient IEN (DFN)
"RTN","RAMAG03D",53,0)
 ;
"RTN","RAMAG03D",54,0)
 ; .RADTE        Reference to a local variable that stores the date
"RTN","RAMAG03D",55,0)
 ;               of the exam (FileMan).
"RTN","RAMAG03D",56,0)
 ;
"RTN","RAMAG03D",57,0)
 ;               NOTE: The $$LOCKDT function can slightly change
"RTN","RAMAG03D",58,0)
 ;                     the exam date/time. The new value is returned
"RTN","RAMAG03D",59,0)
 ;                     in this parameter.
"RTN","RAMAG03D",60,0)
 ;
"RTN","RAMAG03D",61,0)
 ; [.RALOCK]     Reference to a local variable where identifiers
"RTN","RAMAG03D",62,0)
 ;               of the locked exam date/time node are added to.
"RTN","RAMAG03D",63,0)
 ;
"RTN","RAMAG03D",64,0)
 ; [FLAGS]       Flags that control the execution (can be combined).
"RTN","RAMAG03D",65,0)
 ;               See description of the flags "A" and "D" in the
"RTN","RAMAG03D",66,0)
 ;               source code of the ^RAMAG routine.
"RTN","RAMAG03D",67,0)
 ;
"RTN","RAMAG03D",68,0)
 ; Return values:
"RTN","RAMAG03D",69,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAG03D",70,0)
 ;        0  Success
"RTN","RAMAG03D",71,0)
 ;
"RTN","RAMAG03D",72,0)
LOCKDT(RADFN,RADTE,RALOCK,FLAGS) ;
"RTN","RAMAG03D",73,0)
 N EXAMSET,IENS,ORIGDATE,RADTI,RAI,RAIENS,RAMSG,RARC,RAROOT,TMP
"RTN","RAMAG03D",74,0)
 S ORIGDATE=RADTE\1,RADTI=$$INVDTE^RAMAGU04(RADTE)
"RTN","RAMAG03D",75,0)
 S RAIENS=","_RADFN_",",RAROOT=$$ROOT^DILFD(70.02,RAIENS,1)
"RTN","RAMAG03D",76,0)
 S FLAGS=$G(FLAGS),RARC=0
"RTN","RAMAG03D",77,0)
 ;
"RTN","RAMAG03D",78,0)
 ;=== Lock the whole REGISTERED EXAMS multiple
"RTN","RAMAG03D",79,0)
 K TMP  S TMP(70.02,RAIENS)=""
"RTN","RAMAG03D",80,0)
 S RARC=$$LOCKFM^RALOCK(.TMP)
"RTN","RAMAG03D",81,0)
 Q:RARC $$LOCKERR^RAERR(RARC,"patient's exams")
"RTN","RAMAG03D",82,0)
 M RALOCK=TMP
"RTN","RAMAG03D",83,0)
 ;
"RTN","RAMAG03D",84,0)
 D
"RTN","RAMAG03D",85,0)
 . ;--- Setup the error handler
"RTN","RAMAG03D",86,0)
 . N $ESTACK,$ETRAP  D SETDEFEH^RAERR("RARC")
"RTN","RAMAG03D",87,0)
 . ;--- Check if the patient already has exam(s) for this date/time
"RTN","RAMAG03D",88,0)
 . I '$D(@RAROOT@(RADTI))  S RARC=0  D  Q:RARC<0
"RTN","RAMAG03D",89,0)
 . . ;--- Check for a 'subset' date
"RTN","RAMAG03D",90,0)
 . . F RAI=1:1:10  D  Q:RARC
"RTN","RAMAG03D",91,0)
 . . . S TMP=$O(@RAROOT@("B",RADTE))
"RTN","RAMAG03D",92,0)
 . . . I TMP'[RADTE,$P(RADTE,".",2),'$D(@RAROOT@(RADTI))  S RARC=1  Q
"RTN","RAMAG03D",93,0)
 . . . ;--- Slightly modify the exam date/time
"RTN","RAMAG03D",94,0)
 . . . S RADTE=$$FMADD^XLFDT(RADTE,,,1)  ; Add 1 minute
"RTN","RAMAG03D",95,0)
 . . . S RADTI=$$INVDTE^RAMAGU04(RADTE)
"RTN","RAMAG03D",96,0)
 . . ;--- Too many registered exams at almost the same date/time
"RTN","RAMAG03D",97,0)
 . . S:'RARC RARC=$$ERROR^RAERR(-29)
"RTN","RAMAG03D",98,0)
 . E  I $TR(FLAGS,"AD")=FLAGS  D  Q
"RTN","RAMAG03D",99,0)
 . . ;--- By default, neither add to existing cases nor modify time
"RTN","RAMAG03D",100,0)
 . . S RARC=$$ERROR^RAERR(-28,,$$FMTE^XLFDT(RADTE))
"RTN","RAMAG03D",101,0)
 . E  S RARC=0  D  Q:RARC<0
"RTN","RAMAG03D",102,0)
 . . F  D  Q:RARC  Q:'$D(@RAROOT@(RADTI))
"RTN","RAMAG03D",103,0)
 . . . ;--- Check if the existing date/time record stores an exam set
"RTN","RAMAG03D",104,0)
 . . . S IENS=RADTI_RAIENS
"RTN","RAMAG03D",105,0)
 . . . S EXAMSET=+$$GET1^DIQ(70.02,IENS,5,"I",,"RAMSG")  ; EXAM SET
"RTN","RAMAG03D",106,0)
 . . . I $G(DIERR)  S RARC=$$DBS^RAERR("RAMSG",-9,70.02,IENS)  Q
"RTN","RAMAG03D",107,0)
 . . . I 'EXAMSET,FLAGS["A"  S RARC=1  Q
"RTN","RAMAG03D",108,0)
 . . . I EXAMSET,FLAGS'["D"  S RARC=$$ERROR^RAERR(-54)  Q
"RTN","RAMAG03D",109,0)
 . . . ;--- Never add a case to an exam set implicitly; modify the
"RTN","RAMAG03D",110,0)
 . . . ;    date/time of the new case instead. Also, check for
"RTN","RAMAG03D",111,0)
 . . . ;--- 'subset' dates. Make sure that the time part is there.
"RTN","RAMAG03D",112,0)
 . . . F  D  Q:(TMP'[RADTE)&$P(RADTE,".",2)
"RTN","RAMAG03D",113,0)
 . . . . ;--- Add 1 minute to the exam date/time
"RTN","RAMAG03D",114,0)
 . . . . S RADTE=$$FMADD^XLFDT(RADTE,,,1)  ; Add 1 minute
"RTN","RAMAG03D",115,0)
 . . . . S RADTI=$$INVDTE^RAMAGU04(RADTE)
"RTN","RAMAG03D",116,0)
 . . . . S TMP=$O(@RAROOT@("B",RADTE))
"RTN","RAMAG03D",117,0)
 . . . ;--- Check if the date is still the same
"RTN","RAMAG03D",118,0)
 . . . S:(RADTE\1)'=ORIGDATE RARC=$$ERROR^RAERR(-29)
"RTN","RAMAG03D",119,0)
 . ;--- Lock the date/time in the REGISTERED EXAMS multiple
"RTN","RAMAG03D",120,0)
 . K TMP  S TMP(70.02,RADTI_RAIENS)=""
"RTN","RAMAG03D",121,0)
 . S RARC=$$LOCKFM^RALOCK(.TMP)
"RTN","RAMAG03D",122,0)
 . I RARC  S RARC=$$LOCKERR^RAERR(RARC,"exam date/time")  Q
"RTN","RAMAG03D",123,0)
 . M RALOCK=TMP
"RTN","RAMAG03D",124,0)
 ;
"RTN","RAMAG03D",125,0)
 ;=== Unlock the REGISTERED EXAMS multiple
"RTN","RAMAG03D",126,0)
 D UNLOCKFM^RALOCK(70.02,RAIENS)
"RTN","RAMAG03D",127,0)
 K RALOCK(70.02,RAIENS)
"RTN","RAMAG03D",128,0)
 ;===
"RTN","RAMAG03D",129,0)
 Q $S(RARC<0:RARC,1:0)
"RTN","RAMAG03D",130,0)
 ;
"RTN","RAMAG03D",131,0)
 ;+++++ DISCARDS THE CHANGES IN CASE OF ERROR(S)
"RTN","RAMAG03D",132,0)
 ;
"RTN","RAMAG03D",133,0)
 ; RADFN         IEN of the patient
"RTN","RAMAG03D",134,0)
 ;
"RTN","RAMAG03D",135,0)
 ; RADTI         "Inverted" date/time of registered exam(s)
"RTN","RAMAG03D",136,0)
 ;
"RTN","RAMAG03D",137,0)
 ; Input variables:
"RTN","RAMAG03D",138,0)
 ;   ^TMP($J,"RAREG1",...)
"RTN","RAMAG03D",139,0)
 ;
"RTN","RAMAG03D",140,0)
ROLLBACK(RADFN,RADTI) ;
"RTN","RAMAG03D",141,0)
 N DA,DIK,RACASE,RAFDA,RAI,RAIENS,RAMSG,RAOIFN,RAOLST,TMP
"RTN","RAMAG03D",142,0)
 ;
"RTN","RAMAG03D",143,0)
 ;=== Delete incomplete exams
"RTN","RAMAG03D",144,0)
 S RAI=0
"RTN","RAMAG03D",145,0)
 F  S RAI=$O(^TMP($J,"RAREG1",RAI))  Q:RAI'>0  D
"RTN","RAMAG03D",146,0)
 . S RACASE=^TMP($J,"RAREG1",RAI)
"RTN","RAMAG03D",147,0)
 . S RAIENS=$$EXAMIENS^RAMAGU04(RACASE)
"RTN","RAMAG03D",148,0)
 . ;--- Delete the Nuclear Medicine data
"RTN","RAMAG03D",149,0)
 . K DA,DIK
"RTN","RAMAG03D",150,0)
 . S DA=$$GET1^DIQ(70.03,RAIENS,500,"I",,"RAMSG")
"RTN","RAMAG03D",151,0)
 . I DA>0  S DIK="^RADPTN("  D ^DIK
"RTN","RAMAG03D",152,0)
 . ;--- Delete the incomplete record
"RTN","RAMAG03D",153,0)
 . K DA,DIK
"RTN","RAMAG03D",154,0)
 . D DA^DILF(RAIENS,.DA)
"RTN","RAMAG03D",155,0)
 . S DIK=$$ROOT^DILFD(70.03,","_DA(1)_","_DA(2)_",")
"RTN","RAMAG03D",156,0)
 . D ^DIK
"RTN","RAMAG03D",157,0)
 . ;--- Restore order status to "pending"
"RTN","RAMAG03D",158,0)
 . S RAOIFN=+$P(RACASE,U,4)
"RTN","RAMAG03D",159,0)
 . I RAOIFN>0,'$D(RAOLST(RAOIFN))  S RAOLST(RAOIFN)=""  D
"RTN","RAMAG03D",160,0)
 . . S TMP=$$OSTRLBCK^RAMAGU02(RAOIFN,5)
"RTN","RAMAG03D",161,0)
 . ;--- Remove the reference from the list
"RTN","RAMAG03D",162,0)
 . K ^TMP($J,"RAREG1",RAI)
"RTN","RAMAG03D",163,0)
 ;
"RTN","RAMAG03D",164,0)
 ;=== Delete incomplete date/time record
"RTN","RAMAG03D",165,0)
 I RADFN>0,RADTI>0  D
"RTN","RAMAG03D",166,0)
 . ;--- Check if the EXAMINATIONS multiple is not empty
"RTN","RAMAG03D",167,0)
 . S TMP=$$ROOT^DILFD(70.03,","_RADTI_","_RADFN_",",1)
"RTN","RAMAG03D",168,0)
 . Q:$O(@TMP@(0))>0
"RTN","RAMAG03D",169,0)
 . ;--- Delete record from the REGISTERED EXAMS multiple
"RTN","RAMAG03D",170,0)
 . K DA,DIK
"RTN","RAMAG03D",171,0)
 . S DIK=$$ROOT^DILFD(70.02,","_RADFN_",")
"RTN","RAMAG03D",172,0)
 . S DA=RADTI,DA(1)=RADFN   D ^DIK
"RTN","RAMAG03D",173,0)
 ;
"RTN","RAMAG03D",174,0)
 ;===
"RTN","RAMAG03D",175,0)
 Q
"RTN","RAMAG04")
0^9^B11678417^n/a
"RTN","RAMAG04",1,0)
RAMAG04 ;HCIOFO/SG - ORDERS/EXAMS API (ORDER CANCEL/HOLD) ; 1/25/08 1:17pm
"RTN","RAMAG04",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAG04",3,0)
 ;
"RTN","RAMAG04",4,0)
 Q
"RTN","RAMAG04",5,0)
 ;
"RTN","RAMAG04",6,0)
 ;##### CANCELS/HOLDS THE ORDER
"RTN","RAMAG04",7,0)
 ;
"RTN","RAMAG04",8,0)
 ; .RAPARAMS       Reference to the API descriptor
"RTN","RAMAG04",9,0)
 ;                 (see the ^RA01 routine for details)
"RTN","RAMAG04",10,0)
 ;
"RTN","RAMAG04",11,0)
 ; RAOIFN          IEN of the order in the file #75.1
"RTN","RAMAG04",12,0)
 ;
"RTN","RAMAG04",13,0)
 ; RAREASON        Cancel/Hold reason: either IEN of a record of
"RTN","RAMAG04",14,0)
 ;                 the RAD/NUC MED REASON file (#75.2) or a valid
"RTN","RAMAG04",15,0)
 ;                 synonym (see SYNONYM field (3) of that file).
"RTN","RAMAG04",16,0)
 ;
"RTN","RAMAG04",17,0)
 ;                 The referenced record must have appropriate type
"RTN","RAMAG04",18,0)
 ;                 (see TYPE OF REASON field (2) of the file #75.2):
"RTN","RAMAG04",19,0)
 ;
"RTN","RAMAG04",20,0)
 ;                 * If the reason record has the CANCEL REQUEST (1)
"RTN","RAMAG04",21,0)
 ;                   type, then the RAMISC("HOLDESC") is ignored and
"RTN","RAMAG04",22,0)
 ;                   the order is canceled.
"RTN","RAMAG04",23,0)
 ;
"RTN","RAMAG04",24,0)
 ;                 * If the reason record is of the HOLD REQUEST (3)
"RTN","RAMAG04",25,0)
 ;                   type, then the order is put on hold. If the
"RTN","RAMAG04",26,0)
 ;                   RAMISC("HOLDESC") is defined, the text is stored
"RTN","RAMAG04",27,0)
 ;                   into the HOLD DESCRIPTION field.
"RTN","RAMAG04",28,0)
 ;
"RTN","RAMAG04",29,0)
 ;                 * If the record is of the GENERAL REQUEST type (9),
"RTN","RAMAG04",30,0)
 ;                   then the new order status is determined by the
"RTN","RAMAG04",31,0)
 ;                   RAMISC("HOLDESC"). If it is defined, then the
"RTN","RAMAG04",32,0)
 ;                   order is put on hold; otherwise, the order is
"RTN","RAMAG04",33,0)
 ;                   canceled.
"RTN","RAMAG04",34,0)
 ;
"RTN","RAMAG04",35,0)
 ; [.RAMISC]       Reference to a local array containing miscellaneous
"RTN","RAMAG04",36,0)
 ;                 parameters.
"RTN","RAMAG04",37,0)
 ; RAMISC(
"RTN","RAMAG04",38,0)
 ;
"RTN","RAMAG04",39,0)
 ;   "HOLDESC",    Text for the HOLD DESCRIPTION field (25)
"RTN","RAMAG04",40,0)
 ;     Seq#)       of the file #75.1.
"RTN","RAMAG04",41,0)
 ;                 Required: No
"RTN","RAMAG04",42,0)
 ;                 Default:  undefined
"RTN","RAMAG04",43,0)
 ;
"RTN","RAMAG04",44,0)
 ; NOTE: If there are active cases in the RAD/NUC MED PATIENT
"RTN","RAMAG04",45,0)
 ;       file (#70) associated with an order, this function does
"RTN","RAMAG04",46,0)
 ;       not cancel/hold the order and returns the error code -42.
"RTN","RAMAG04",47,0)
 ;
"RTN","RAMAG04",48,0)
 ; Return values:
"RTN","RAMAG04",49,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAG04",50,0)
 ;        0  Success
"RTN","RAMAG04",51,0)
 ;
"RTN","RAMAG04",52,0)
ORDCANC(RAPARAMS,RAOIFN,RAREASON,RAMISC) ;
"RTN","RAMAG04",53,0)
 N ACTION,PNODE,RALOCK,RARC,RSNIEN,STATUS,TMP
"RTN","RAMAG04",54,0)
 D:$G(RAPARAMS("DEBUG"))>1
"RTN","RAMAG04",55,0)
 . D W^RAMAGU11("$$ORDCANC^RAMAG04","!!")
"RTN","RAMAG04",56,0)
 . D VARS^RAMAGU11("RAOIFN,RAREASON")
"RTN","RAMAG04",57,0)
 . D ZW^RAUTL22("RAMISC")
"RTN","RAMAG04",58,0)
 ;
"RTN","RAMAG04",59,0)
 ;--- Validate parameters
"RTN","RAMAG04",60,0)
 S RARC=$$CHKREQ^RAUTL22("RAOIFN,RAREASON")  Q:RARC<0 RARC
"RTN","RAMAG04",61,0)
 S RAOIFN=+RAOIFN
"RTN","RAMAG04",62,0)
 ;
"RTN","RAMAG04",63,0)
 ;--- Determine whether to hold or cancel
"RTN","RAMAG04",64,0)
 S RSNIEN=$$RARSNIEN^RAMAGU13(RAREASON,.TMP)  Q:RSNIEN<0 RSNIEN
"RTN","RAMAG04",65,0)
 S TMP=+TMP  ; Internal value of the TYPE OF REASON field
"RTN","RAMAG04",66,0)
 S ACTION=$S(TMP=1:1,TMP=3:3,$D(RAMISC("HOLDESC"))>1:3,1:1)
"RTN","RAMAG04",67,0)
 ;
"RTN","RAMAG04",68,0)
 ;--- Lock the order record
"RTN","RAMAG04",69,0)
 K TMP  S TMP(75.1,RAOIFN_",")=""
"RTN","RAMAG04",70,0)
 S RARC=$$LOCKFM^RALOCK(.TMP)
"RTN","RAMAG04",71,0)
 Q:RARC $$LOCKERR^RAERR(RARC,"order")
"RTN","RAMAG04",72,0)
 M RALOCK=TMP
"RTN","RAMAG04",73,0)
 ;
"RTN","RAMAG04",74,0)
 D
"RTN","RAMAG04",75,0)
 . N $ESTACK,$ETRAP
"RTN","RAMAG04",76,0)
 . ;--- Setup the error processing
"RTN","RAMAG04",77,0)
 . D SETDEFEH^RAERR("RARC")
"RTN","RAMAG04",78,0)
 . ;
"RTN","RAMAG04",79,0)
 . ;--- Check the current status
"RTN","RAMAG04",80,0)
 . S STATUS=$$ORDSTAT^RAMAGU02(RAOIFN)
"RTN","RAMAG04",81,0)
 . I STATUS<0  S RARC=STATUS  Q
"RTN","RAMAG04",82,0)
 . Q:+STATUS=1  ; Already canceled
"RTN","RAMAG04",83,0)
 . ;
"RTN","RAMAG04",84,0)
 . ;--- Check if all related examinations in file #70 are canceled
"RTN","RAMAG04",85,0)
 . I $D(^RADPT("AO",RAOIFN))>1  S RARC=0  D  Q:RARC<0
"RTN","RAMAG04",86,0)
 . . N FOUND,RAFLT,RAFLTL,RANODE
"RTN","RAMAG04",87,0)
 . . S RANODE=$NA(^RADPT("AO",RAOIFN))
"RTN","RAMAG04",88,0)
 . . S RAFLTL=$L(RANODE)-1,RAFLT=$E(RANODE,1,RAFLTL)
"RTN","RAMAG04",89,0)
 . . S FOUND=0
"RTN","RAMAG04",90,0)
 . . F  S RANODE=$Q(@RANODE)  Q:$E(RANODE,1,RAFLTL)'=RAFLT  D  Q:FOUND
"RTN","RAMAG04",91,0)
 . . . S TMP=$QS(RANODE,3)_U_$QS(RANODE,4)_U_$QS(RANODE,5)
"RTN","RAMAG04",92,0)
 . . . S TMP=$$EXMSTAT^RAMAGU05(TMP)  S:$P(TMP,U,3) FOUND=1
"RTN","RAMAG04",93,0)
 . . S:FOUND RARC=$$ERROR^RAERR(-42)
"RTN","RAMAG04",94,0)
 . ;
"RTN","RAMAG04",95,0)
 . ;--- Update status
"RTN","RAMAG04",96,0)
 . S RARC=$$UPDORDST^RAMAGU02(RAOIFN,ACTION,RSNIEN)  Q:RARC'>0
"RTN","RAMAG04",97,0)
 . ;
"RTN","RAMAG04",98,0)
 . ;--- Populate the HOLD DESCRIPTION field
"RTN","RAMAG04",99,0)
 . I ACTION=3,$D(RAMISC("HOLDESC"))>1  S RARC=0  D  Q:RARC<0
"RTN","RAMAG04",100,0)
 . . N IENS,RAFDA,RAMSG
"RTN","RAMAG04",101,0)
 . . S RAFDA(75.1,RAOIFN_",",25)=$NA(RAMISC("HOLDESC"))
"RTN","RAMAG04",102,0)
 . . D FILE^DIE(,"RAFDA","RAMSG")
"RTN","RAMAG04",103,0)
 . . S:$G(DIERR) RARC=$$DBS^RAERR("RAMSG",-9,75.1,RAOIFN_",")
"RTN","RAMAG04",104,0)
 ;
"RTN","RAMAG04",105,0)
 ;--- Error handling and cleanup
"RTN","RAMAG04",106,0)
 D UNLOCKFM^RALOCK(.RALOCK)
"RTN","RAMAG04",107,0)
 Q $S(RARC<0:RARC,1:0)
"RTN","RAMAG05")
0^10^B23360038^n/a
"RTN","RAMAG05",1,0)
RAMAG05 ;HCIOFO/SG - ORDERS/EXAMS API (EXAM CANCEL) ; 2/1/08 10:01am
"RTN","RAMAG05",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAG05",3,0)
 ;
"RTN","RAMAG05",4,0)
 Q
"RTN","RAMAG05",5,0)
 ;
"RTN","RAMAG05",6,0)
 ;##### CANCELS THE EXAM(S)
"RTN","RAMAG05",7,0)
 ;
"RTN","RAMAG05",8,0)
 ; .RAPARAMS       Reference to the API descriptor
"RTN","RAMAG05",9,0)
 ;                 (see the ^RA01 routine for details)
"RTN","RAMAG05",10,0)
 ; 
"RTN","RAMAG05",11,0)
 ; RACASE          Exam/case identifiers:
"RTN","RAMAG05",12,0)
 ;                   ^01: IEN of the patient in the file #70   (RADFN)
"RTN","RAMAG05",13,0)
 ;                   ^02: IEN in the REGISTERED EXAMS multiple (RADTI)
"RTN","RAMAG05",14,0)
 ;                   ^03: IEN in the EXAMINATIONS multiple     (RACNI)
"RTN","RAMAG05",15,0)
 ;
"RTN","RAMAG05",16,0)
 ; RAREASON        Reason for cancelation: either IEN of a record of
"RTN","RAMAG05",17,0)
 ;                 the RAD/NUC MED REASON file (#75.2) or a valid
"RTN","RAMAG05",18,0)
 ;                 synonym (see SYNONYM field (3) of the file #75.2).
"RTN","RAMAG05",19,0)
 ;                 The referenced record must have 'CANCEL REQUEST'
"RTN","RAMAG05",20,0)
 ;                 or 'GENERAL REQUEST' type (see TYPE OF REASON
"RTN","RAMAG05",21,0)
 ;                 field (2) of the file #75.2).
"RTN","RAMAG05",22,0)
 ;
"RTN","RAMAG05",23,0)
 ; [RAFLAGS]       Flags that control execution (can be combined):
"RTN","RAMAG05",24,0)
 ;
"RTN","RAMAG05",25,0)
 ;                   A  Cancel all related exams/cases (those that
"RTN","RAMAG05",26,0)
 ;                      reference the same order).
"RTN","RAMAG05",27,0)
 ;
"RTN","RAMAG05",28,0)
 ;                   O  Cancel/hold the related order after successful
"RTN","RAMAG05",29,0)
 ;                      exam(s) cancelation.
"RTN","RAMAG05",30,0)
 ;
"RTN","RAMAG05",31,0)
 ;                      The order will be canceled or put on hold only
"RTN","RAMAG05",32,0)
 ;                      if there are no more active cases associated
"RTN","RAMAG05",33,0)
 ;                      with it.
"RTN","RAMAG05",34,0)
 ;
"RTN","RAMAG05",35,0)
 ;                      Otherwise, error code -42 will be returned.
"RTN","RAMAG05",36,0)
 ;                      Use the "A" flag to cancel all related exams
"RTN","RAMAG05",37,0)
 ;                      and guarantee the order cancelation.
"RTN","RAMAG05",38,0)
 ;
"RTN","RAMAG05",39,0)
 ; [.RAMISC]       Reference to a local array containing miscellaneous
"RTN","RAMAG05",40,0)
 ;                 parameters.
"RTN","RAMAG05",41,0)
 ;
"RTN","RAMAG05",42,0)
 ;                 See the ^RAMAG routine for additional important
"RTN","RAMAG05",43,0)
 ;                 details regarding this parameter.
"RTN","RAMAG05",44,0)
 ;
"RTN","RAMAG05",45,0)
 ; RAMISC(
"RTN","RAMAG05",46,0)
 ;
"RTN","RAMAG05",47,0)
 ;   "HOLDESC",    Text for the HOLD DESCRIPTION field (25) of the
"RTN","RAMAG05",48,0)
 ;     Seq#)       order associated with the exam (in file #75.1).
"RTN","RAMAG05",49,0)
 ;                 Required: No
"RTN","RAMAG05",50,0)
 ;                 Default:  undefined
"RTN","RAMAG05",51,0)
 ;
"RTN","RAMAG05",52,0)
 ;   "ORDRSN")     Cancel/Hold reason for the order associated
"RTN","RAMAG05",53,0)
 ;                 with the exam(s): either IEN of a record of
"RTN","RAMAG05",54,0)
 ;                 the RAD/NUC MED REASON file (#75.2) or a valid
"RTN","RAMAG05",55,0)
 ;                 synonym (see SYNONYM field (3) of that file).
"RTN","RAMAG05",56,0)
 ;                 Required: No
"RTN","RAMAG05",57,0)
 ;                 Default:  Value of the RAREASON parameter
"RTN","RAMAG05",58,0)
 ;
"RTN","RAMAG05",59,0)
 ; If the RAFLAGS parameter contains the "O" flag, the "ORDRSN" and
"RTN","RAMAG05",60,0)
 ; "HOLDESC" parameters determine whether the related order is
"RTN","RAMAG05",61,0)
 ; canceled or put on hold. Otherwise, they are ignored.
"RTN","RAMAG05",62,0)
 ;
"RTN","RAMAG05",63,0)
 ; * If the reason record referenced by the "ORDRSN" node has the
"RTN","RAMAG05",64,0)
 ;   CANCEL REQUEST (1) type, then the "HOLDESC" node is ignored and
"RTN","RAMAG05",65,0)
 ;   the order is canceled.
"RTN","RAMAG05",66,0)
 ;
"RTN","RAMAG05",67,0)
 ; * If the record referenced by the "ORDRSN" node is of the HOLD
"RTN","RAMAG05",68,0)
 ;   REQUEST (3) type, then the order is put on hold. If the "HOLDESC"
"RTN","RAMAG05",69,0)
 ;   node is defined, the text is stored into the HOLD DESCRIPTION
"RTN","RAMAG05",70,0)
 ;   field.
"RTN","RAMAG05",71,0)
 ;
"RTN","RAMAG05",72,0)
 ; * If the record referenced by the "ORDRSN" node is of the GENERAL
"RTN","RAMAG05",73,0)
 ;   REQUEST type (9), then the action performed on the order is
"RTN","RAMAG05",74,0)
 ;   determined by the "HOLDESC" node. If it is defined, then the
"RTN","RAMAG05",75,0)
 ;   order is put on hold; otherwise, the order is canceled.
"RTN","RAMAG05",76,0)
 ;
"RTN","RAMAG05",77,0)
 ; Return values:
"RTN","RAMAG05",78,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR).
"RTN","RAMAG05",79,0)
 ;        0  Exam has been canceled
"RTN","RAMAG05",80,0)
 ;
"RTN","RAMAG05",81,0)
EXAMCANC(RAPARAMS,RACASE,RAREASON,RAFLAGS,RAMISC) ;
"RTN","RAMAG05",82,0)
 N CASE,EXAMLST,LOCKTMP,RACNI,RADFN,RADTI,RALOCK,RAMSG,RAOIFN,RARC,RSNIEN,STATUS,TMP
"RTN","RAMAG05",83,0)
 D:$G(RAPARAMS("DEBUG"))>1
"RTN","RAMAG05",84,0)
 . D W^RAMAGU11("$$EXAMCANC^RAMAG05","!!")
"RTN","RAMAG05",85,0)
 . D VARS^RAMAGU11("RACASE,RAREASON,RAFLAGS")
"RTN","RAMAG05",86,0)
 . D ZW^RAUTL22("RAMISC")
"RTN","RAMAG05",87,0)
 ;
"RTN","RAMAG05",88,0)
 ;=== Validate parameters
"RTN","RAMAG05",89,0)
 S RARC=$$CHKREQ^RAUTL22("RACASE,RAREASON")  Q:RARC<0 RARC
"RTN","RAMAG05",90,0)
 S RACASE=$P(RACASE,U,1,3),RAFLAGS=$G(RAFLAGS)
"RTN","RAMAG05",91,0)
 S RARC=$$CHKEXMID^RAMAGU04(RACASE)  Q:RARC<0 RARC
"RTN","RAMAG05",92,0)
 S RADFN=$P(RACASE,U)
"RTN","RAMAG05",93,0)
 ;
"RTN","RAMAG05",94,0)
 ;=== Find the IEN of the synonym
"RTN","RAMAG05",95,0)
 S RSNIEN=$$RARSNIEN^RAMAGU13(RAREASON)  Q:RSNIEN<0 RSNIEN
"RTN","RAMAG05",96,0)
 ;
"RTN","RAMAG05",97,0)
 ;=== Get IEN of the order (only if necessary)
"RTN","RAMAG05",98,0)
 I $TR(RAFLAGS,"AO")'=RAFLAGS  S RARC=0  D  Q:RARC<0 RARC
"RTN","RAMAG05",99,0)
 . S TMP=$$EXAMIENS^RAMAGU04(RACASE)
"RTN","RAMAG05",100,0)
 . S RAOIFN=+$$GET1^DIQ(70.03,TMP,11,"I",,"RAMSG")
"RTN","RAMAG05",101,0)
 . I $G(DIERR)  S RARC=$$DBS^RAERR("RAMSG",-9,70.03,TMP)  Q
"RTN","RAMAG05",102,0)
 . S LOCKTMP(75.1,RAOIFN_",")=""
"RTN","RAMAG05",103,0)
 ;
"RTN","RAMAG05",104,0)
 ;=== Prepare the list of exams
"RTN","RAMAG05",105,0)
 S EXAMLST(RACASE)=""
"RTN","RAMAG05",106,0)
 S LOCKTMP(70.03,$$EXAMIENS^RAMAGU04(RACASE))=""
"RTN","RAMAG05",107,0)
 I RAFLAGS["A"  D
"RTN","RAMAG05",108,0)
 . N RAFLT,RAFLTL,RANODE
"RTN","RAMAG05",109,0)
 . S RANODE=$NA(^RADPT("AO",RAOIFN))
"RTN","RAMAG05",110,0)
 . S RAFLTL=$L(RANODE)-1,RAFLT=$E(RANODE,1,RAFLTL)
"RTN","RAMAG05",111,0)
 . F  S RANODE=$Q(@RANODE)  Q:$E(RANODE,1,RAFLTL)'=RAFLT  D
"RTN","RAMAG05",112,0)
 . . S CASE=$QS(RANODE,3)_U_$QS(RANODE,4)_U_$QS(RANODE,5)
"RTN","RAMAG05",113,0)
 . . S EXAMLST(CASE)=""
"RTN","RAMAG05",114,0)
 . . S LOCKTMP(70.03,$$EXAMIENS^RAMAGU04(CASE))=""
"RTN","RAMAG05",115,0)
 ;
"RTN","RAMAG05",116,0)
 ;=== Lock affected objects
"RTN","RAMAG05",117,0)
 S RARC=$$LOCKFM^RALOCK(.LOCKTMP)
"RTN","RAMAG05",118,0)
 Q:RARC $$LOCKERR^RAERR(RARC,"examination(s)")
"RTN","RAMAG05",119,0)
 M RALOCK=LOCKTMP
"RTN","RAMAG05",120,0)
 ;
"RTN","RAMAG05",121,0)
 D
"RTN","RAMAG05",122,0)
 . N $ESTACK,$ETRAP,BUF
"RTN","RAMAG05",123,0)
 . ;=== Setup the error processing
"RTN","RAMAG05",124,0)
 . D SETDEFEH^RAERR("RARC")
"RTN","RAMAG05",125,0)
 . ;
"RTN","RAMAG05",126,0)
 . ;=== Cancel the exam(s)
"RTN","RAMAG05",127,0)
 . S CASE=""
"RTN","RAMAG05",128,0)
 . F  S CASE=$O(EXAMLST(CASE))  Q:CASE=""  D  Q:RARC<0
"RTN","RAMAG05",129,0)
 . . S STATUS=$$EXMSTAT^RAMAGU05(CASE)
"RTN","RAMAG05",130,0)
 . . I STATUS<0  S RARC=STATUS  Q
"RTN","RAMAG05",131,0)
 . . S RADTI=$P(CASE,U,2),RACNI=$P(CASE,U,3)
"RTN","RAMAG05",132,0)
 . . S EXAMLST(CASE)=STATUS
"RTN","RAMAG05",133,0)
 . . ;--- Check if the case has already been canceled
"RTN","RAMAG05",134,0)
 . . I '$P(STATUS,U,3)  K EXAMLST(CASE)  Q
"RTN","RAMAG05",135,0)
 . . ;--- Check the ALLOW CANCELLING? field
"RTN","RAMAG05",136,0)
 . . S TMP=$$GET1^DIQ(72,+STATUS,6,"I",,"RAMSG")
"RTN","RAMAG05",137,0)
 . . Q:$$UP^XLFSTR(TMP)'="Y"
"RTN","RAMAG05",138,0)
 . . ;--- Update exam status
"RTN","RAMAG05",139,0)
 . . S RARC=$$UPDEXMST^RAMAGU05(CASE,"^^0",,RSNIEN)  Q:RARC<0
"RTN","RAMAG05",140,0)
 . . K EXAMLST(CASE)
"RTN","RAMAG05",141,0)
 . . ;--- Send notifications
"RTN","RAMAG05",142,0)
 . . D CANCEL^RAHLRPC
"RTN","RAMAG05",143,0)
 . Q:RARC<0
"RTN","RAMAG05",144,0)
 . ;
"RTN","RAMAG05",145,0)
 . ;=== Check if all exams have been canceled
"RTN","RAMAG05",146,0)
 . I $D(EXAMLST)>1  D  Q
"RTN","RAMAG05",147,0)
 . . N I  K RAMSG
"RTN","RAMAG05",148,0)
 . . F I=1:1  S CASE=$O(EXAMLST(CASE))  Q:CASE=""  D
"RTN","RAMAG05",149,0)
 . . . S TMP="Exam IENS='"_$$EXAMIENS^RAMAGU04(CASE)_"'"
"RTN","RAMAG05",150,0)
 . . . S RAMSG(I)=TMP_", Status='"_$P(EXAMLST(CASE),U,2)_"'"
"RTN","RAMAG05",151,0)
 . . S RARC=$$ERROR^RAERR(-51,.RAMSG)
"RTN","RAMAG05",152,0)
 . ;
"RTN","RAMAG05",153,0)
 . ;=== Cancel the order
"RTN","RAMAG05",154,0)
 . I RAFLAGS["O"  D  Q:RARC<0
"RTN","RAMAG05",155,0)
 . . S TMP=$G(RAMISC("ORDRSN"))
"RTN","RAMAG05",156,0)
 . . I TMP'?." "  D  I RSNIEN<0  S RARC=RSNIEN  Q
"RTN","RAMAG05",157,0)
 . . . S RSNIEN=$$RARSNIEN^RAMAGU13(TMP)
"RTN","RAMAG05",158,0)
 . . S RARC=$$ORDCANC^RAMAG04(.RAPARAMS,RAOIFN,RSNIEN,.RAMISC)
"RTN","RAMAG05",159,0)
 ;
"RTN","RAMAG05",160,0)
 ;=== Error handling and cleanup
"RTN","RAMAG05",161,0)
 D UNLOCKFM^RALOCK(.RALOCK)
"RTN","RAMAG05",162,0)
 Q $S(RARC<0:RARC,1:0)
"RTN","RAMAG06")
0^11^B45318084^n/a
"RTN","RAMAG06",1,0)
RAMAG06 ;HCIOFO/SG - ORDERS/EXAMS API (EXAM COMPLETION) ; 3/6/09 4:20pm
"RTN","RAMAG06",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAG06",3,0)
 ;
"RTN","RAMAG06",4,0)
 Q
"RTN","RAMAG06",5,0)
 ;
"RTN","RAMAG06",6,0)
 ;##### COMPLETES THE EXAM
"RTN","RAMAG06",7,0)
 ;
"RTN","RAMAG06",8,0)
 ; .RAPARAMS       Reference to the API descriptor
"RTN","RAMAG06",9,0)
 ;                 (see the ^RA01 routine for details)
"RTN","RAMAG06",10,0)
 ; 
"RTN","RAMAG06",11,0)
 ; RACASE          Exam/case identifiers
"RTN","RAMAG06",12,0)
 ;                   ^01: IEN of the patient in the file #70   (RADFN)
"RTN","RAMAG06",13,0)
 ;                   ^02: IEN in the REGISTERED EXAMS multiple (RADTI)
"RTN","RAMAG06",14,0)
 ;                   ^03: IEN in the EXAMINATIONS multiple     (RACNI)
"RTN","RAMAG06",15,0)
 ;
"RTN","RAMAG06",16,0)
 ; [.RAMISC]       Reference to a local array containing miscellaneous
"RTN","RAMAG06",17,0)
 ;                 exam parameters.
"RTN","RAMAG06",18,0)
 ;
"RTN","RAMAG06",19,0)
 ;                 See the ^RAMAG routine for additional important
"RTN","RAMAG06",20,0)
 ;                 details regarding this parameter.
"RTN","RAMAG06",21,0)
 ;
"RTN","RAMAG06",22,0)
 ; RAMISC(
"RTN","RAMAG06",23,0)
 ;
"RTN","RAMAG06",24,0)
 ;   "ACLHIST",    Text for the ADDITIONAL CLINICAL HISTORY field
"RTN","RAMAG06",25,0)
 ;     Seq#)       (400) of the RAD/NUC MED REPORTS file (#74).
"RTN","RAMAG06",26,0)
 ;                 Required: No
"RTN","RAMAG06",27,0)
 ;                 Default:  undefined
"RTN","RAMAG06",28,0)
 ;
"RTN","RAMAG06",29,0)
 ;   "FLAGS")      Flags that control the execution (see the ^RAMAG
"RTN","RAMAG06",30,0)
 ;                 routine for details). Supported flags: "F", "S".
"RTN","RAMAG06",31,0)
 ;                 Required: No
"RTN","RAMAG06",32,0)
 ;                 Default:  undefined
"RTN","RAMAG06",33,0)
 ;
"RTN","RAMAG06",34,0)
 ;   "IMPRESSION", Text for the IMPRESSION TEXT field (300) of the
"RTN","RAMAG06",35,0)
 ;     Seq#)       file #74.
"RTN","RAMAG06",36,0)
 ;                 Required: Site and/or imaging type specific
"RTN","RAMAG06",37,0)
 ;                 Default:  undefined
"RTN","RAMAG06",38,0)
 ;
"RTN","RAMAG06",39,0)
 ;   "PROBSTAT")   Free text value for the PROBLEM STATEMENT field
"RTN","RAMAG06",40,0)
 ;                 (25) of the file #74. If this parameter is defined 
"RTN","RAMAG06",41,0)
 ;                 and not empty (space characters are not counted),
"RTN","RAMAG06",42,0)
 ;                 then the PROBLEM DRAFT status is assigned to the
"RTN","RAMAG06",43,0)
 ;                 report.
"RTN","RAMAG06",44,0)
 ;                 Required: No
"RTN","RAMAG06",45,0)
 ;                 Default:  undefined
"RTN","RAMAG06",46,0)
 ;
"RTN","RAMAG06",47,0)
 ;   "REPORT",     Text for the REPORT TEXT field (200)
"RTN","RAMAG06",48,0)
 ;     Seq#)       of the file #74.
"RTN","RAMAG06",49,0)
 ;                 Required: Yes
"RTN","RAMAG06",50,0)
 ;                 Default:  undefined
"RTN","RAMAG06",51,0)
 ;
"RTN","RAMAG06",52,0)
 ;   "RPTDTE")     Internal date value (FileMan) for the REPORTED
"RTN","RAMAG06",53,0)
 ;                 DATE field (8) of the file #74. The date must be
"RTN","RAMAG06",54,0)
 ;                 exact. If time is provided, it is ignored.
"RTN","RAMAG06",55,0)
 ;                 Required: Yes
"RTN","RAMAG06",56,0)
 ;                 Default:  undefined
"RTN","RAMAG06",57,0)
 ;
"RTN","RAMAG06",58,0)
 ;   "RPTSTATUS")  Internal value for the REPORT STATUS field (5) of
"RTN","RAMAG06",59,0)
 ;                 the file #74. Currently, only "V" (Verified) and
"RTN","RAMAG06",60,0)
 ;                 "EF" (Electronically Filed) codes are supported.
"RTN","RAMAG06",61,0)
 ;                 Required: Yes
"RTN","RAMAG06",62,0)
 ;                 Default:  "V"
"RTN","RAMAG06",63,0)
 ;
"RTN","RAMAG06",64,0)
 ;   "TRANSCRST")  Internal value for the TRANSCRIPTIONIST field (11)
"RTN","RAMAG06",65,0)
 ;                 of the file #74: IEN in the NEW PERSON file (#200).
"RTN","RAMAG06",66,0)
 ;                 Required: No
"RTN","RAMAG06",67,0)
 ;                 Default:  undefined
"RTN","RAMAG06",68,0)
 ;
"RTN","RAMAG06",69,0)
 ;   "VERDTE")     Internal date value (FileMan) for the VERIFIED DATE
"RTN","RAMAG06",70,0)
 ;                 field (7) of the file #74. The date must be exact.
"RTN","RAMAG06",71,0)
 ;                 Required: No
"RTN","RAMAG06",72,0)
 ;                 Default:  undefined
"RTN","RAMAG06",73,0)
 ;
"RTN","RAMAG06",74,0)
 ;   "VERPHYS")    Internal value for the VERIFYING PHYSICIAN field
"RTN","RAMAG06",75,0)
 ;                 (9) of the file #74: IEN in the NEW PERSON file
"RTN","RAMAG06",76,0)
 ;                 (#200).
"RTN","RAMAG06",77,0)
 ;                 Required: No
"RTN","RAMAG06",78,0)
 ;                 Default:  undefined
"RTN","RAMAG06",79,0)
 ;
"RTN","RAMAG06",80,0)
 ;   "BEDSECT")    If any of these optional parameters are defined,
"RTN","RAMAG06",81,0)
 ;   "CMUSED")     their values replace the existing ones assigned
"RTN","RAMAG06",82,0)
 ;   "COMPLICAT")  by the $$REGISTER^RAMAG03 and $$EXAMINED^RAMAG07.
"RTN","RAMAG06",83,0)
 ;   "CONTMEDIA",#)
"RTN","RAMAG06",84,0)
 ;   "CPTMODS",#)
"RTN","RAMAG06",85,0)
 ;   "EXAMCAT")
"RTN","RAMAG06",86,0)
 ;   "FILMSIZE",#)
"RTN","RAMAG06",87,0)
 ;   "PRIMCAM")
"RTN","RAMAG06",88,0)
 ;   "PRIMDXCODE")
"RTN","RAMAG06",89,0)
 ;   "PRIMINTRES")
"RTN","RAMAG06",90,0)
 ;   "PRIMINTSTF")
"RTN","RAMAG06",91,0)
 ;   "PRINCLIN")
"RTN","RAMAG06",92,0)
 ;   "RDPHARMS",#,"RDPH-...")
"RTN","RAMAG06",93,0)
 ;   "SERVICE")
"RTN","RAMAG06",94,0)
 ;   "TECH",#)
"RTN","RAMAG06",95,0)
 ;   "TECHCOMM")
"RTN","RAMAG06",96,0)
 ;   "WARD")
"RTN","RAMAG06",97,0)
 ;
"RTN","RAMAG06",98,0)
 ; Return values:
"RTN","RAMAG06",99,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAG06",100,0)
 ;        0  Exam has been completed
"RTN","RAMAG06",101,0)
 ;
"RTN","RAMAG06",102,0)
COMPLETE(RAPARAMS,RACASE,RAMISC) ;
"RTN","RAMAG06",103,0)
 N RACN            ; Case number
"RTN","RAMAG06",104,0)
 N RACNI           ; IEN of the exam in the EXAMINATIONS multiple
"RTN","RAMAG06",105,0)
 N RADFN           ; IEN of the patient in the file #70
"RTN","RAMAG06",106,0)
 N RADTE           ; Date/time of the exam
"RTN","RAMAG06",107,0)
 N RADTI           ; Inverted date/time of the exam
"RTN","RAMAG06",108,0)
 N RAIENS          ; IENS of the exam record
"RTN","RAMAG06",109,0)
 N RAIMGTYI        ; Imaging type IEN (file #79.2)
"RTN","RAMAG06",110,0)
 N RAMSPSDEFS      ; Data for miscellaneous parameters validation
"RTN","RAMAG06",111,0)
 N RANMDIEN        ; IEN of the nuclear medicine data (file #70.2)
"RTN","RAMAG06",112,0)
 N RAOIFN          ; IEN of the order (file #75.1)
"RTN","RAMAG06",113,0)
 N RAPROCIEN       ; Radiology procedure IEN
"RTN","RAMAG06",114,0)
 N RPTIEN          ; IEN of the report (file #74)
"RTN","RAMAG06",115,0)
 ;
"RTN","RAMAG06",116,0)
 N RACTION,RALOCK,RAMSG,RAPOST,RAPRIEN,RARC,RARCP,RATRKCMB,TMP
"RTN","RAMAG06",117,0)
 D:$G(RAPARAMS("DEBUG"))>1
"RTN","RAMAG06",118,0)
 . D W^RAMAGU11("$$COMPLETE^RAMAG06","!!")
"RTN","RAMAG06",119,0)
 . D VARS^RAMAGU11("RACASE")
"RTN","RAMAG06",120,0)
 . D ZW^RAUTL22("RAMISC")
"RTN","RAMAG06",121,0)
 S (RARC,RARCP)=0
"RTN","RAMAG06",122,0)
 ;
"RTN","RAMAG06",123,0)
 ;--- Validate case identifiers
"RTN","RAMAG06",124,0)
 S RARC=$$CHKREQ^RAUTL22("RACASE")   Q:RARC<0 RARC
"RTN","RAMAG06",125,0)
 S RARC=$$CHKEXMID^RAMAGU04(RACASE)  Q:RARC<0 RARC
"RTN","RAMAG06",126,0)
 S RADFN=$P(RACASE,U),RADTI=$P(RACASE,U,2),RACNI=$P(RACASE,U,3)
"RTN","RAMAG06",127,0)
 S RAIENS=$$EXAMIENS^RAMAGU04(RACASE)
"RTN","RAMAG06",128,0)
 ;
"RTN","RAMAG06",129,0)
 ;--- Get the order IEN
"RTN","RAMAG06",130,0)
 S RAOIFN=$$GET1^DIQ(70.03,RAIENS,11,"I",,"RAMSG")
"RTN","RAMAG06",131,0)
 Q:$G(DIERR) $$DBS^RAERR("RAMSG",-9,70.03,RAIENS)
"RTN","RAMAG06",132,0)
 Q:RAOIFN'>0 $$ERROR^RAERR(-19,,70.03,RAIENS,11)
"RTN","RAMAG06",133,0)
 ;
"RTN","RAMAG06",134,0)
 ;--- Create the report stub if necessary
"RTN","RAMAG06",135,0)
 S RPTIEN=$$RPTSTUB^RAMAGU12(RACASE,.RADTE,.RACN)
"RTN","RAMAG06",136,0)
 Q:RPTIEN<0 RPTIEN
"RTN","RAMAG06",137,0)
 ;
"RTN","RAMAG06",138,0)
 ;--- Lock affected objects
"RTN","RAMAG06",139,0)
 K TMP
"RTN","RAMAG06",140,0)
 S TMP(70.03,RAIENS)=""
"RTN","RAMAG06",141,0)
 S TMP(74,RPTIEN_",")=""
"RTN","RAMAG06",142,0)
 S TMP(75.1,RAOIFN_",")=""
"RTN","RAMAG06",143,0)
 S RARC=$$LOCKFM^RALOCK(.TMP)
"RTN","RAMAG06",144,0)
 Q:RARC $$LOCKERR^RAERR(RARC,"exam/order/report")
"RTN","RAMAG06",145,0)
 M RALOCK=TMP
"RTN","RAMAG06",146,0)
 ;
"RTN","RAMAG06",147,0)
 D
"RTN","RAMAG06",148,0)
 . ;--- Setup the error handler
"RTN","RAMAG06",149,0)
 . N $ESTACK,$ETRAP  D SETDEFEH^RAERR("RARC")
"RTN","RAMAG06",150,0)
 . ; 
"RTN","RAMAG06",151,0)
 . ;--- Initialize variables
"RTN","RAMAG06",152,0)
 . N EXMST,RAFDA,RAFDAM
"RTN","RAMAG06",153,0)
 . D LDMSPRMS^RAMAGU01(.RAMSPSDEFS)
"RTN","RAMAG06",154,0)
 . S RACTION="EC"
"RTN","RAMAG06",155,0)
 . ;
"RTN","RAMAG06",156,0)
 . ;--- Load exam properties
"RTN","RAMAG06",157,0)
 . S RARC=$$EXAMVARS^RAMAGU04(RAIENS)  Q:RARC<0
"RTN","RAMAG06",158,0)
 . ;
"RTN","RAMAG06",159,0)
 . ;--- Get descriptor of the desired exam status
"RTN","RAMAG06",160,0)
 . S EXMST=$$EXMSTINF^RAMAGU06("^^9",RAIMGTYI)
"RTN","RAMAG06",161,0)
 . I EXMST<0  S RARC=EXMST  Q
"RTN","RAMAG06",162,0)
 . ;
"RTN","RAMAG06",163,0)
 . ;--- Validate general parameters
"RTN","RAMAG06",164,0)
 . S RARC=$$VAL70^RAMAGU08(RAIENS,+EXMST,.RACTION,.RAMISC,.RAFDAM)
"RTN","RAMAG06",165,0)
 . I RARC<0  S RARC=$$ERROR^RAERR(-11)  Q
"RTN","RAMAG06",166,0)
 . Q:RACTION=""  ;--- Exam already has requested status
"RTN","RAMAG06",167,0)
 . S RARC=$$VAL74^RAMAGU10(RPTIEN_",",RACTION,.RAMISC,.RAFDAM)
"RTN","RAMAG06",168,0)
 . I RARC<0  S RARC=$$ERROR^RAERR(-11)  Q
"RTN","RAMAG06",169,0)
 . ;
"RTN","RAMAG06",170,0)
 . ;--- Nuclear medicine (including parameter validation)
"RTN","RAMAG06",171,0)
 . S RARC=$$NUCMED^RAMAG06A(RACASE,RACTION,.RAMISC,.RAFDAM)  Q:RARC<0
"RTN","RAMAG06",172,0)
 . S RANMDIEN=RARC
"RTN","RAMAG06",173,0)
 . ;
"RTN","RAMAG06",174,0)
 . ;--- Pre-processing
"RTN","RAMAG06",175,0)
 . S RARC=$$EDTPRE^RAMAG06A(RACTION,.RATRKCMB,.RAPRIEN)  Q:RARC<0
"RTN","RAMAG06",176,0)
 . K RAFDAM("RACNT"),RAFDAM("RAIENS")
"RTN","RAMAG06",177,0)
 . ;
"RTN","RAMAG06",178,0)
 . ;--- Update the exam record
"RTN","RAMAG06",179,0)
 . K RAFDA,RAMSG  M RAFDA(70.03)=RAFDAM(70.03)  K RAFDAM(70.03)
"RTN","RAMAG06",180,0)
 . I $D(RAFDA)>1  D  Q:RARC<0  S RAPOST=1
"RTN","RAMAG06",181,0)
 . . D FILE^DIE(,"RAFDA","RAMSG")
"RTN","RAMAG06",182,0)
 . . S:$G(DIERR) RARC=$$DBS^RAERR("RAMSG",-9,70.03,RAIENS)
"RTN","RAMAG06",183,0)
 . ;
"RTN","RAMAG06",184,0)
 . ;--- Update the nuclear medicine data
"RTN","RAMAG06",185,0)
 . K RAFDA,RAMSG  M RAFDA(70.21)=RAFDAM(70.21)  K RAFDAM(70.21)
"RTN","RAMAG06",186,0)
 . I $D(RAFDA)>1  D  Q:RARC<0  S RAPOST=1
"RTN","RAMAG06",187,0)
 . . S RARC=$$UPDMULT^RAMAGU13(.RAFDA,RANMDIEN_",")
"RTN","RAMAG06",188,0)
 . ;
"RTN","RAMAG06",189,0)
 . ;--- Update the report record
"RTN","RAMAG06",190,0)
 . K RAFDA,RAMSG  M RAFDA(74)=RAFDAM(74)  K RAFDAM(74)
"RTN","RAMAG06",191,0)
 . I $D(RAFDA)>1  D  Q:RARC<0  S RAPOST=1
"RTN","RAMAG06",192,0)
 . . D FILE^DIE(,"RAFDA","RAMSG")
"RTN","RAMAG06",193,0)
 . . S:$G(DIERR) RARC=$$DBS^RAERR("RAMSG",-9,74,RPTIEN_",")
"RTN","RAMAG06",194,0)
 . ;
"RTN","RAMAG06",195,0)
 . ;--- Update multiples of the exam record
"RTN","RAMAG06",196,0)
 . I $D(RAFDAM)>1  D  Q:RARC<0  S RAPOST=1
"RTN","RAMAG06",197,0)
 . . S RARC=$$UPDMULT^RAMAGU13(.RAFDAM,RAIENS)
"RTN","RAMAG06",198,0)
 . ;
"RTN","RAMAG06",199,0)
 . ;--- Report status
"RTN","RAMAG06",200,0)
 . S TMP=$G(RAMISC("PROBSTAT"))
"RTN","RAMAG06",201,0)
 . S RARC=$$UPDRPTST^RAMAGU12(RPTIEN,$G(RAMISC("RPTSTATUS")),TMP)
"RTN","RAMAG06",202,0)
 . Q:RARC<0
"RTN","RAMAG06",203,0)
 . ;--- Exam status
"RTN","RAMAG06",204,0)
 . S TMP=$$TRFLAGS^RAUTL22($G(RAMISC("FLAGS")),"F","F")
"RTN","RAMAG06",205,0)
 . S RARC=$$UPDEXMST^RAMAGU05(RACASE,EXMST,TMP)  Q:RARC<0
"RTN","RAMAG06",206,0)
 . ;--- Activity log
"RTN","RAMAG06",207,0)
 . S TMP=$G(RAMISC("TECHCOMM"))
"RTN","RAMAG06",208,0)
 . S RARC=$$UPDEXMAL^RAMAGU05(RACASE,"C",TMP)
"RTN","RAMAG06",209,0)
 ;
"RTN","RAMAG06",210,0)
 ;--- Post-processing is performed and notifications are sent if any
"RTN","RAMAG06",211,0)
 ;    changes to the case have been made (even if its status has not
"RTN","RAMAG06",212,0)
 ;--- been changed to 'COMPLETE').
"RTN","RAMAG06",213,0)
 D:$G(RAPOST)
"RTN","RAMAG06",214,0)
 . N $ESTACK,$ETRAP
"RTN","RAMAG06",215,0)
 . D SETDEFEH^RAERR("RARCP")
"RTN","RAMAG06",216,0)
 . S RARCP=$$EDTPST^RAMAG06A(RACTION,RATRKCMB,.RAPRIEN)
"RTN","RAMAG06",217,0)
 ;
"RTN","RAMAG06",218,0)
 ;--- Error handling and cleanup
"RTN","RAMAG06",219,0)
 D UNLOCKFM^RALOCK(.RALOCK)
"RTN","RAMAG06",220,0)
 Q $S(RARC<0:RARC,RARCP<0:RARCP,1:0)
"RTN","RAMAG06A")
0^32^B10095420^n/a
"RTN","RAMAG06A",1,0)
RAMAG06A ;HCIOFO/SG - ORDERS/EXAMS API (EXAM EDIT TOOLS) ; 2/6/09 11:14am
"RTN","RAMAG06A",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAG06A",3,0)
 ;
"RTN","RAMAG06A",4,0)
 Q
"RTN","RAMAG06A",5,0)
 ;
"RTN","RAMAG06A",6,0)
 ;+++++ EXAM EDIT PRE-PROCESSING
"RTN","RAMAG06A",7,0)
 ;
"RTN","RAMAG06A",8,0)
 ; RACTION       Actions (can be combined):
"RTN","RAMAG06A",9,0)
 ;                 E  Examined (procedure has been performed)
"RTN","RAMAG06A",10,0)
 ;                 C  Complete
"RTN","RAMAG06A",11,0)
 ;
"RTN","RAMAG06A",12,0)
 ; .RATRKCMB     Reference to a local variable where current values
"RTN","RAMAG06A",13,0)
 ;               of the CONTRAST MEDIA multiple will be saved.
"RTN","RAMAG06A",14,0)
 ;
"RTN","RAMAG06A",15,0)
 ; .RAPRIEN      Reference to a local array where some of current
"RTN","RAMAG06A",16,0)
 ;               case properties will be saved.
"RTN","RAMAG06A",17,0)
 ;
"RTN","RAMAG06A",18,0)
 ; Input variables:
"RTN","RAMAG06A",19,0)
 ;   RACNI, RADFN, RADTI
"RTN","RAMAG06A",20,0)
 ;
"RTN","RAMAG06A",21,0)
 ; Return values:
"RTN","RAMAG06A",22,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAG06A",23,0)
 ;        0  Ok
"RTN","RAMAG06A",24,0)
 ;
"RTN","RAMAG06A",25,0)
 ; NOTE: This is an internal entry point. Do not call it from outside
"RTN","RAMAG06A",26,0)
 ;       of exam editing routines.
"RTN","RAMAG06A",27,0)
 ;
"RTN","RAMAG06A",28,0)
EDTPRE(RACTION,RATRKCMB,RAPRIEN) ;
"RTN","RAMAG06A",29,0)
 N RARC
"RTN","RAMAG06A",30,0)
 S RARC=0
"RTN","RAMAG06A",31,0)
 ;--- Save 'before' CONTRAST MEDIA data values to compare
"RTN","RAMAG06A",32,0)
 ;--- against the possible 'after' values
"RTN","RAMAG06A",33,0)
 D TRK70CMB^RAMAINU(RADFN,RADTI,RACNI,.RATRKCMB)
"RTN","RAMAG06A",34,0)
 ;--- Save 'before' values (in RAPRIEN) to compare later in RAUTL1
"RTN","RAMAG06A",35,0)
 D SVBEFOR^RAO7XX(RADFN,RADTI,RACNI)
"RTN","RAMAG06A",36,0)
 ;---
"RTN","RAMAG06A",37,0)
 Q $S(RARC<0:RARC,1:0)
"RTN","RAMAG06A",38,0)
 ;
"RTN","RAMAG06A",39,0)
 ;+++++ EXAM EDIT POST-PROCESSING
"RTN","RAMAG06A",40,0)
 ;
"RTN","RAMAG06A",41,0)
 ; RACTION       Actions (can be combined):
"RTN","RAMAG06A",42,0)
 ;                 E  Examined (procedure has been performed)
"RTN","RAMAG06A",43,0)
 ;                 C  Complete
"RTN","RAMAG06A",44,0)
 ;
"RTN","RAMAG06A",45,0)
 ; RATRKCMB      Old values from the CONTRAST MEDIA multiple
"RTN","RAMAG06A",46,0)
 ;
"RTN","RAMAG06A",47,0)
 ; .RAPRIEN      Reference to a local array with saved case
"RTN","RAMAG06A",48,0)
 ;               properties.
"RTN","RAMAG06A",49,0)
 ;
"RTN","RAMAG06A",50,0)
 ; Input variables:
"RTN","RAMAG06A",51,0)
 ;   RACASE, RACNI, RADFN, RADTI, RAMISC
"RTN","RAMAG06A",52,0)
 ;
"RTN","RAMAG06A",53,0)
 ; Return values:
"RTN","RAMAG06A",54,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAG06A",55,0)
 ;        0  Ok
"RTN","RAMAG06A",56,0)
 ;
"RTN","RAMAG06A",57,0)
 ; NOTE: This is an internal entry point. Do not call it from outside
"RTN","RAMAG06A",58,0)
 ;       of exam editing routines.
"RTN","RAMAG06A",59,0)
 ;
"RTN","RAMAG06A",60,0)
EDTPST(RACTION,RATRKCMB,RAPRIEN) ;
"RTN","RAMAG06A",61,0)
 N FLAGS,N,RABLNK,RACAT,RAD3,RADELFLG,RAEXM0,RAEXOR,RAIENS,RAILP,RAMIFN,RAMOD,RAMODA,RAMODD,RAOIFN,RAOPT,RAORD0,RAORDB4,RAOREA,RAOSTS,RAPRC,RARC,RARSH,RASFM,RASHA,RATRKCMA,TMP,X,ZTQUEUED
"RTN","RAMAG06A",62,0)
 ;--- Compare new values with those saved by the SVBEFOR^RAO7XX and
"RTN","RAMAG06A",63,0)
 ;--- send changed order control "XX" to CPRS but do not send alert.
"RTN","RAMAG06A",64,0)
 S TMP=$$CMPAFTR^RAO7XX(0)
"RTN","RAMAG06A",65,0)
 ;--- Send HL7 messages
"RTN","RAMAG06A",66,0)
 S FLAGS=$$TRFLAGS^RAUTL22($G(RAMISC("FLAGS")),"S","S")
"RTN","RAMAG06A",67,0)
 I RACTION["E"  D  Q:RARC<0 RARC
"RTN","RAMAG06A",68,0)
 . S RARC=$$EXAMINED^RAMAGHL(RACASE,FLAGS)
"RTN","RAMAG06A",69,0)
 I RACTION["C"  D  Q:RARC<0 RARC
"RTN","RAMAG06A",70,0)
 . S RARC=$$REPORT^RAMAGHL(RACASE,FLAGS)
"RTN","RAMAG06A",71,0)
 ;--- Update the request/order status
"RTN","RAMAG06A",72,0)
 D
"RTN","RAMAG06A",73,0)
 . N IORI,IOSTBM ; Otherwise, the code breaks the BROWSER device
"RTN","RAMAG06A",74,0)
 . N ZTQUEUED
"RTN","RAMAG06A",75,0)
 . S ZTQUEUED=1  ; Suppress the output
"RTN","RAMAG06A",76,0)
 . D ^RAORDC
"RTN","RAMAG06A",77,0)
 ;--- Compare 'before' and 'after' CONTRAST MEDIA data
"RTN","RAMAG06A",78,0)
 ;--- and update the audit log if necessary.
"RTN","RAMAG06A",79,0)
 D TRK70CMA^RAMAINU(RADFN,RADTI,RACNI,RATRKCMB)
"RTN","RAMAG06A",80,0)
 ;---
"RTN","RAMAG06A",81,0)
 Q $S(RARC<0:RARC,1:0)
"RTN","RAMAG06A",82,0)
 ;
"RTN","RAMAG06A",83,0)
 ;+++++ NUCLEAR MEDICINE CODE
"RTN","RAMAG06A",84,0)
 ;
"RTN","RAMAG06A",85,0)
 ; RACASE        Examination identifiers
"RTN","RAMAG06A",86,0)
 ;                 ^01: IEN of the patient in the file #70    (RADFN)
"RTN","RAMAG06A",87,0)
 ;                 ^02: IEN in the REGISTERED EXAMS multiple  (RADTI)
"RTN","RAMAG06A",88,0)
 ;                 ^03: IEN in the EXAMINATIONS multiple      (RACNI)
"RTN","RAMAG06A",89,0)
 ;
"RTN","RAMAG06A",90,0)
 ; RACTION       Actions (can be combined):
"RTN","RAMAG06A",91,0)
 ;                 E  Examined (procedure has been performed)
"RTN","RAMAG06A",92,0)
 ;                 C  Complete
"RTN","RAMAG06A",93,0)
 ;
"RTN","RAMAG06A",94,0)
 ; .RAMISC       Reference to a local array containing miscellaneous
"RTN","RAMAG06A",95,0)
 ;               request parameters.
"RTN","RAMAG06A",96,0)
 ;
"RTN","RAMAG06A",97,0)
 ; .RAFDA        Reference to a local array where field values will
"RTN","RAMAG06A",98,0)
 ;               be prepared for storage (FileMan FDA array).
"RTN","RAMAG06A",99,0)
 ;
"RTN","RAMAG06A",100,0)
 ; Input variables:
"RTN","RAMAG06A",101,0)
 ;   RACN, RADTE, RAMISC, RAMSPSDEFS, RAPROCIEN
"RTN","RAMAG06A",102,0)
 ;
"RTN","RAMAG06A",103,0)
 ; Output variables:
"RTN","RAMAG06A",104,0)
 ;   RALOCK, RAMISC
"RTN","RAMAG06A",105,0)
 ;
"RTN","RAMAG06A",106,0)
 ; Return Values:
"RTN","RAMAG06A",107,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAG06A",108,0)
 ;        0  Nuclear medicine data is not needed
"RTN","RAMAG06A",109,0)
 ;       >0  IEN of the record of the NUC MED EXAM DATA file (#70.2)
"RTN","RAMAG06A",110,0)
 ;
"RTN","RAMAG06A",111,0)
NUCMED(RACASE,RACTION,RAMISC,RAFDA) ;
"RTN","RAMAG06A",112,0)
 N RANMDIEN,RARC,TMP
"RTN","RAMAG06A",113,0)
 ;--- Create the nuclear medicine stub if necessary
"RTN","RAMAG06A",114,0)
 S RANMDIEN=$$NMEDSTUB^RAMAGU13(RACASE,RAPROCIEN,RADTE,RACN)
"RTN","RAMAG06A",115,0)
 Q:RANMDIEN<0 RANMDIEN
"RTN","RAMAG06A",116,0)
 ;--- Nuclear medicine related
"RTN","RAMAG06A",117,0)
 I RANMDIEN>0  D  Q:RARC<0 RARC
"RTN","RAMAG06A",118,0)
 . ;--- Lock the nuclear medicine data
"RTN","RAMAG06A",119,0)
 . K TMP  S TMP(70.2,RANMDIEN_",")=""
"RTN","RAMAG06A",120,0)
 . S RARC=$$LOCKFM^RALOCK(.TMP)
"RTN","RAMAG06A",121,0)
 . I RARC  S RARC=$$LOCKERR^RAERR(RARC,"nuc. med. data")  Q
"RTN","RAMAG06A",122,0)
 . M RALOCK=TMP
"RTN","RAMAG06A",123,0)
 . ;--- Validate parameters
"RTN","RAMAG06A",124,0)
 . S RARC=$$VAL702^RAMAGU14(RANMDIEN_",",RACTION,.RAMISC,.RAFDA)
"RTN","RAMAG06A",125,0)
 . I RARC<0  S RARC=$$ERROR^RAERR(-11)  Q
"RTN","RAMAG06A",126,0)
 ;--- Success
"RTN","RAMAG06A",127,0)
 Q RANMDIEN
"RTN","RAMAG07")
0^45^B59585393^n/a
"RTN","RAMAG07",1,0)
RAMAG07 ;HCIOFO/SG - ORDERS/EXAMS API (EXAMINED) ; 9/30/08 8:52am
"RTN","RAMAG07",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAG07",3,0)
 ;
"RTN","RAMAG07",4,0)
 Q
"RTN","RAMAG07",5,0)
 ;
"RTN","RAMAG07",6,0)
 ;##### INDICATES THAT THE PROCEDURE HAS BEEN PERFORMED
"RTN","RAMAG07",7,0)
 ;
"RTN","RAMAG07",8,0)
 ; .RAPARAMS       Reference to the API descriptor
"RTN","RAMAG07",9,0)
 ;                 (see the ^RA01 routine for details)
"RTN","RAMAG07",10,0)
 ; 
"RTN","RAMAG07",11,0)
 ; RACASE          Exam/case identifiers
"RTN","RAMAG07",12,0)
 ;                   ^01: IEN of the patient in the file #70   (RADFN)
"RTN","RAMAG07",13,0)
 ;                   ^02: IEN in the REGISTERED EXAMS multiple (RADTI)
"RTN","RAMAG07",14,0)
 ;                   ^03: IEN in the EXAMINATIONS multiple     (RACNI)
"RTN","RAMAG07",15,0)
 ;
"RTN","RAMAG07",16,0)
 ; [.RAMISC]       Reference to a local array containing miscellaneous
"RTN","RAMAG07",17,0)
 ;                 exam parameters.
"RTN","RAMAG07",18,0)
 ;
"RTN","RAMAG07",19,0)
 ;                 See the ^RAMAG routine for additional important
"RTN","RAMAG07",20,0)
 ;                 details regarding this parameter.
"RTN","RAMAG07",21,0)
 ;
"RTN","RAMAG07",22,0)
 ; RAMISC(
"RTN","RAMAG07",23,0)
 ;
"RTN","RAMAG07",24,0)
 ;   "CMUSED")     Internal value for the CONTRAST MEDIA USED field
"RTN","RAMAG07",25,0)
 ;                 (10) of the EXAMINATIONS multiple (sub-file
"RTN","RAMAG07",26,0)
 ;                 #70.03).
"RTN","RAMAG07",27,0)
 ;                 Required: No
"RTN","RAMAG07",28,0)
 ;                 Default:  undefined
"RTN","RAMAG07",29,0)
 ;
"RTN","RAMAG07",30,0)
 ;   "COMPLICAT")  Internal values for the COMPLICATION (16)
"RTN","RAMAG07",31,0)
 ;                 and COMPLICATION TEXT (16.5) fields of the
"RTN","RAMAG07",32,0)
 ;                 sub-file #70.03.
"RTN","RAMAG07",33,0)
 ;                   ^01: IEN in the COMPLICATION TYPES file (#78.1)
"RTN","RAMAG07",34,0)
 ;                   ^02: Complication text
"RTN","RAMAG07",35,0)
 ;                 Required: No
"RTN","RAMAG07",36,0)
 ;                 Default:  undefined
"RTN","RAMAG07",37,0)
 ;
"RTN","RAMAG07",38,0)
 ;   "CONTMEDIA"
"RTN","RAMAG07",39,0)
 ;     Seq#)       Internal value for the CONTRAST MEDIA field (.01)
"RTN","RAMAG07",40,0)
 ;                 of the sub-file #70.3225.
"RTN","RAMAG07",41,0)
 ;                 Required: No
"RTN","RAMAG07",42,0)
 ;                 Default:  undefined
"RTN","RAMAG07",43,0)
 ;
"RTN","RAMAG07",44,0)
 ;   "CPTMODS",
"RTN","RAMAG07",45,0)
 ;     Seq#)       Internal value for the CPT MODIFIERS field (.01)
"RTN","RAMAG07",46,0)
 ;                 of the sub-file #70.3135: IEN in the CPT MODIFIER
"RTN","RAMAG07",47,0)
 ;                 file (#81.3).
"RTN","RAMAG07",48,0)
 ;                 Required: Site and/or imaging type specific
"RTN","RAMAG07",49,0)
 ;                 Default:  undefined
"RTN","RAMAG07",50,0)
 ;
"RTN","RAMAG07",51,0)
 ;   "FILMSIZE",
"RTN","RAMAG07",52,0)
 ;     Seq#)       Internal values for the record of the FILM SIZE
"RTN","RAMAG07",53,0)
 ;                 multiple (70) of the sub-file #70.03.
"RTN","RAMAG07",54,0)
 ;                   ^01: IEN in the FILM SIZES file (#78.4)
"RTN","RAMAG07",55,0)
 ;                   ^02: Amount (#films or cine ft)
"RTN","RAMAG07",56,0)
 ;                 Required: Site and/or imaging type specific
"RTN","RAMAG07",57,0)
 ;                 Default:  undefined
"RTN","RAMAG07",58,0)
 ;
"RTN","RAMAG07",59,0)
 ;   "FLAGS")      Flags that control the execution (see the ^RAMAG
"RTN","RAMAG07",60,0)
 ;                 routine for details). Supported flags: "F", "S".
"RTN","RAMAG07",61,0)
 ;                 Required: No
"RTN","RAMAG07",62,0)
 ;                 Default:  undefined
"RTN","RAMAG07",63,0)
 ;
"RTN","RAMAG07",64,0)
 ;   "PRIMCAM")    Internal value for the PRIMARY CAMERA/EQUIP/RM
"RTN","RAMAG07",65,0)
 ;                 field (18) of the sub-file #70.03: IEN in the
"RTN","RAMAG07",66,0)
 ;                 CAMERA/EQUIP/RM file (#78.6).
"RTN","RAMAG07",67,0)
 ;                 Required: Site and/or imaging type specific
"RTN","RAMAG07",68,0)
 ;                 Default:  undefined
"RTN","RAMAG07",69,0)
 ;
"RTN","RAMAG07",70,0)
 ;   "PRIMDXCODE") Internal value for the PRIMARY DIAGNOSTIC CODE
"RTN","RAMAG07",71,0)
 ;                 field (13) of the sub-file #70.03: IEN in the
"RTN","RAMAG07",72,0)
 ;                 DIAGNOSTIC CODES file (#78.3).
"RTN","RAMAG07",73,0)
 ;                 Required: Site and/or imaging type specific
"RTN","RAMAG07",74,0)
 ;                 Default:  undefined
"RTN","RAMAG07",75,0)
 ;
"RTN","RAMAG07",76,0)
 ;   "PRIMINTRES") Internal value for the PRIMARY INTERPRETING
"RTN","RAMAG07",77,0)
 ;                 RESIDENT field (12) of the sub-file #70.03: IEN in
"RTN","RAMAG07",78,0)
 ;                 the NEW PERSON file (#200).
"RTN","RAMAG07",79,0)
 ;                 Required: Site and/or imaging type specific
"RTN","RAMAG07",80,0)
 ;                 Default:  undefined
"RTN","RAMAG07",81,0)
 ;
"RTN","RAMAG07",82,0)
 ;   "PRIMINTSTF") Internal value for the PRIMARY INTERPRETING
"RTN","RAMAG07",83,0)
 ;                 STAFF field (15) of the sub-file #70.03: IEN in
"RTN","RAMAG07",84,0)
 ;                 the NEW PERSON file (#200).
"RTN","RAMAG07",85,0)
 ;                 Required: Site and/or imaging type specific
"RTN","RAMAG07",86,0)
 ;                 Default:  undefined
"RTN","RAMAG07",87,0)
 ;
"RTN","RAMAG07",88,0)
 ;   "RAPROC",
"RTN","RAMAG07",89,0)
 ;     1)          Radiology procedure and modifiers
"RTN","RAMAG07",90,0)
 ;                   ^01: Procedure IEN in file #71
"RTN","RAMAG07",91,0)
 ;                   ^02: Optional procedure modifiers (IENs in
"RTN","RAMAG07",92,0)
 ;                   ...  the PROCEDURE MODIFIERS file (#71.2))
"RTN","RAMAG07",93,0)
 ;                   ^nn:
"RTN","RAMAG07",94,0)
 ;                 Required: No (if defined, replaces the existing
"RTN","RAMAG07",95,0)
 ;                           value assigned by $$REGISTER^RAMAG03)
"RTN","RAMAG07",96,0)
 ;                 Default:  undefined
"RTN","RAMAG07",97,0)
 ;
"RTN","RAMAG07",98,0)
 ;                 NOTE: Only a single procedure is associated with
"RTN","RAMAG07",99,0)
 ;                       a case. Therefore, only the first subnode
"RTN","RAMAG07",100,0)
 ;                       of the "RAPROC" with a subscript greater
"RTN","RAMAG07",101,0)
 ;                       than 0 is used.
"RTN","RAMAG07",102,0)
 ;
"RTN","RAMAG07",103,0)
 ;   "RDPHARMS",   INTERNAL VALUES FOR THE RECORDS OF THE
"RTN","RAMAG07",104,0)
 ;     i,          'RADIOPHARMACEUTICALS' MULTIPLE (100) OF THE
"RTN","RAMAG07",105,0)
 ;                 'NUC MED EXAM DATA' FILE (#70.2).
"RTN","RAMAG07",106,0)
 ;
"RTN","RAMAG07",107,0)
 ;       "RDPH-ACDR")  Internal value for the ACTIVITY DRAWN
"RTN","RAMAG07",108,0)
 ;                     field (4).
"RTN","RAMAG07",109,0)
 ;                     Required: Site and/or imaging type specific
"RTN","RAMAG07",110,0)
 ;                     Default:  undefined
"RTN","RAMAG07",111,0)
 ;
"RTN","RAMAG07",112,0)
 ;       "RDPH-DOSE")  Internal value for the DOSE ADMINISTERED
"RTN","RAMAG07",113,0)
 ;                     field (7).
"RTN","RAMAG07",114,0)
 ;                     Required: Yes (if any other radiopharmaceutical
"RTN","RAMAG07",115,0)
 ;                               parameters are provided)
"RTN","RAMAG07",116,0)
 ;                     Default:  undefined
"RTN","RAMAG07",117,0)
 ;
"RTN","RAMAG07",118,0)
 ;       "RDPH-DRUG")  Internal value for the RADIOPHARMACEUTICAL
"RTN","RAMAG07",119,0)
 ;                     field (.01).
"RTN","RAMAG07",120,0)
 ;                     Required: Yes (if any other radiopharmaceutical
"RTN","RAMAG07",121,0)
 ;                               parameters are provided)
"RTN","RAMAG07",122,0)
 ;                     Default:  undefined
"RTN","RAMAG07",123,0)
 ;
"RTN","RAMAG07",124,0)
 ;       "RDPH-DTADM") Internal value for the DATE/TIME DOSE
"RTN","RAMAG07",125,0)
 ;                     ADMINISTERED field (8).
"RTN","RAMAG07",126,0)
 ;                     Required: Site and/or imaging type specific
"RTN","RAMAG07",127,0)
 ;                     Default:  undefined
"RTN","RAMAG07",128,0)
 ;
"RTN","RAMAG07",129,0)
 ;       "RDPH-DTDRW") Internal value for the DATE/TIME DRAWN
"RTN","RAMAG07",130,0)
 ;                     field (5).
"RTN","RAMAG07",131,0)
 ;                     Required: Site and/or imaging type specific
"RTN","RAMAG07",132,0)
 ;                     Default:  undefined
"RTN","RAMAG07",133,0)
 ;
"RTN","RAMAG07",134,0)
 ;       "RDPH-FORM")  Internal value for the FORM field (15).
"RTN","RAMAG07",135,0)
 ;                     Required: Site and/or imaging type specific
"RTN","RAMAG07",136,0)
 ;                     Default:  undefined
"RTN","RAMAG07",137,0)
 ;
"RTN","RAMAG07",138,0)
 ;       "RDPH-LOTN")  Internal value for the LOT NO field (13).
"RTN","RAMAG07",139,0)
 ;                     Required: Site and/or imaging type specific
"RTN","RAMAG07",140,0)
 ;                     Default:  undefined
"RTN","RAMAG07",141,0)
 ;
"RTN","RAMAG07",142,0)
 ;       "RDPH-PWADM") Internal value for the PERSON WHO ADMINISTERED 
"RTN","RAMAG07",143,0)
 ;                     DOSE field (9).
"RTN","RAMAG07",144,0)
 ;                     Required: Site and/or imaging type specific
"RTN","RAMAG07",145,0)
 ;                     Default:  undefined
"RTN","RAMAG07",146,0)
 ;
"RTN","RAMAG07",147,0)
 ;       "RDPH-PWMSD") Internal value for the PERSON WHO MEASURED DOSE
"RTN","RAMAG07",148,0)
 ;                     field (6).
"RTN","RAMAG07",149,0)
 ;                     Required: Site and/or imaging type specific
"RTN","RAMAG07",150,0)
 ;                     Default:  undefined
"RTN","RAMAG07",151,0)
 ;
"RTN","RAMAG07",152,0)
 ;       "RDPH-ROUTE") Internal value for the ROUTE OF ADMINISTRATION
"RTN","RAMAG07",153,0)
 ;                     field (11).
"RTN","RAMAG07",154,0)
 ;                     Required: Site and/or imaging type specific
"RTN","RAMAG07",155,0)
 ;                     Default:  undefined
"RTN","RAMAG07",156,0)
 ;
"RTN","RAMAG07",157,0)
 ;       "RDPH-SITE")  Internal value for the SITE OF ADMINISTRATION
"RTN","RAMAG07",158,0)
 ;                     field (12).
"RTN","RAMAG07",159,0)
 ;                     Required: Site and/or imaging type specific
"RTN","RAMAG07",160,0)
 ;                     Default:  undefined
"RTN","RAMAG07",161,0)
 ;
"RTN","RAMAG07",162,0)
 ;       "RDPH-VOL")   Internal value for the VOLUME field (14).
"RTN","RAMAG07",163,0)
 ;                     Required: Site and/or imaging type specific
"RTN","RAMAG07",164,0)
 ;                     Default:  undefined
"RTN","RAMAG07",165,0)
 ;
"RTN","RAMAG07",166,0)
 ;   "TECH",
"RTN","RAMAG07",167,0)
 ;     Seq#)       Internal value for the TECHNOLOGIST field (.01)
"RTN","RAMAG07",168,0)
 ;                 of the subfile #70.12: IEN in the NEW PERSON
"RTN","RAMAG07",169,0)
 ;                 file (#200).
"RTN","RAMAG07",170,0)
 ;                 Required: Site and/or imaging type specific
"RTN","RAMAG07",171,0)
 ;                 Default:  undefined
"RTN","RAMAG07",172,0)
 ;
"RTN","RAMAG07",173,0)
 ;   "TECHCOMM")   Technologist comment
"RTN","RAMAG07",174,0)
 ;                 Required: No
"RTN","RAMAG07",175,0)
 ;                 Default:  undefined
"RTN","RAMAG07",176,0)
 ;
"RTN","RAMAG07",177,0)
 ;   "BEDSECT")    If any of these optional parameters are defined,
"RTN","RAMAG07",178,0)
 ;   "EXAMCAT")    their values replace the existing ones assigned
"RTN","RAMAG07",179,0)
 ;   "PRINCLIN")   by the $$REGISTER^RAMAG03.
"RTN","RAMAG07",180,0)
 ;   "SERVICE")
"RTN","RAMAG07",181,0)
 ;   "WARD")
"RTN","RAMAG07",182,0)
 ;
"RTN","RAMAG07",183,0)
 ; Return values:
"RTN","RAMAG07",184,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAG07",185,0)
 ;        0  Case has been marked as 'examined'
"RTN","RAMAG07",186,0)
 ;
"RTN","RAMAG07",187,0)
EXAMINED(RAPARAMS,RACASE,RAMISC) ;
"RTN","RAMAG07",188,0)
 N RACN            ; Case number
"RTN","RAMAG07",189,0)
 N RACNI           ; IEN of the exam in the EXAMINATIONS multiple
"RTN","RAMAG07",190,0)
 N RADFN           ; IEN of the patient in the file #70
"RTN","RAMAG07",191,0)
 N RADTE           ; Date/time of the exam
"RTN","RAMAG07",192,0)
 N RADTI           ; Inverted date/time of the exam
"RTN","RAMAG07",193,0)
 N RAIENS          ; IENS of the exam record
"RTN","RAMAG07",194,0)
 N RAIMGTYI        ; Imaging type IEN (file #79.2)
"RTN","RAMAG07",195,0)
 N RAMSPSDEFS      ; Data for miscellaneous parameters validation
"RTN","RAMAG07",196,0)
 N RANMDIEN        ; IEN of the nuclear medicine data (file #70.2)
"RTN","RAMAG07",197,0)
 N RAPROCIEN       ; Radiology procedure IEN
"RTN","RAMAG07",198,0)
 ;
"RTN","RAMAG07",199,0)
 N RALOCK,RAMSG,RARC,TMP
"RTN","RAMAG07",200,0)
 D:$G(RAPARAMS("DEBUG"))>1
"RTN","RAMAG07",201,0)
 . D W^RAMAGU11("$$EXAMINED^RAMAG07","!!")
"RTN","RAMAG07",202,0)
 . D VARS^RAMAGU11("RACASE")
"RTN","RAMAG07",203,0)
 . D ZW^RAUTL22("RAMISC")
"RTN","RAMAG07",204,0)
 ;
"RTN","RAMAG07",205,0)
 ;--- Validate case identifiers
"RTN","RAMAG07",206,0)
 S RARC=$$CHKREQ^RAUTL22("RACASE")   Q:RARC<0 RARC
"RTN","RAMAG07",207,0)
 S RARC=$$CHKEXMID^RAMAGU04(RACASE)  Q:RARC<0 RARC
"RTN","RAMAG07",208,0)
 S RADFN=$P(RACASE,U),RADTI=$P(RACASE,U,2),RACNI=$P(RACASE,U,3)
"RTN","RAMAG07",209,0)
 S RAIENS=$$EXAMIENS^RAMAGU04(RACASE)
"RTN","RAMAG07",210,0)
 ;
"RTN","RAMAG07",211,0)
 ;--- Lock the exam
"RTN","RAMAG07",212,0)
 K TMP  S TMP(70.03,RAIENS)=""
"RTN","RAMAG07",213,0)
 S RARC=$$LOCKFM^RALOCK(.TMP)
"RTN","RAMAG07",214,0)
 Q:RARC $$LOCKERR^RAERR(RARC,"examination")
"RTN","RAMAG07",215,0)
 M RALOCK=TMP
"RTN","RAMAG07",216,0)
 ;
"RTN","RAMAG07",217,0)
 D
"RTN","RAMAG07",218,0)
 . ;--- Setup the error handler
"RTN","RAMAG07",219,0)
 . N $ESTACK,$ETRAP  D SETDEFEH^RAERR("RARC")
"RTN","RAMAG07",220,0)
 . ;
"RTN","RAMAG07",221,0)
 . ;--- Initialize variables
"RTN","RAMAG07",222,0)
 . N EXMST,RACTION,RAFDA,RAFDAM,RAPRIEN,RATRKCMB
"RTN","RAMAG07",223,0)
 . D LDMSPRMS^RAMAGU01(.RAMSPSDEFS)
"RTN","RAMAG07",224,0)
 . S RACTION="E"
"RTN","RAMAG07",225,0)
 . ;
"RTN","RAMAG07",226,0)
 . ;--- Get the current exam status
"RTN","RAMAG07",227,0)
 . S EXMST=$$EXMSTAT^RAMAGU05(RACASE)
"RTN","RAMAG07",228,0)
 . I EXMST<0  S RARC=EXMST  Q
"RTN","RAMAG07",229,0)
 . ;--- Find the exam status that has 'E:Examined' value
"RTN","RAMAG07",230,0)
 . ;--- in the VISTARAD CATEGORY field (9).
"RTN","RAMAG07",231,0)
 . S RARC=$$GETEXMND^RAMAGU06(+EXMST)  Q:RARC<0
"RTN","RAMAG07",232,0)
 . I RARC'>0  D  Q
"RTN","RAMAG07",233,0)
 . . S RARC=$$ERROR^RAERR(-31,"RACASE='"_RACASE_"'","EXAMINED")
"RTN","RAMAG07",234,0)
 . S EXMST=RARC  ; New exam status
"RTN","RAMAG07",235,0)
 . ;
"RTN","RAMAG07",236,0)
 . ;--- Load exam properties and initialize key variables
"RTN","RAMAG07",237,0)
 . S RARC=$$EXAMVARS^RAMAGU04(RAIENS)  Q:RARC<0
"RTN","RAMAG07",238,0)
 . ;
"RTN","RAMAG07",239,0)
 . ;--- Validate general parameters
"RTN","RAMAG07",240,0)
 . S RARC=$$VAL70^RAMAGU08(RAIENS,+EXMST,.RACTION,.RAMISC,.RAFDAM)
"RTN","RAMAG07",241,0)
 . I RARC<0  S RARC=$$ERROR^RAERR(-11)  Q
"RTN","RAMAG07",242,0)
 . Q:RACTION=""  ;--- Exam is at or past the requested status
"RTN","RAMAG07",243,0)
 . ;
"RTN","RAMAG07",244,0)
 . ;--- Nuclear medicine (including parameter validation)
"RTN","RAMAG07",245,0)
 . S RARC=$$NUCMED^RAMAG06A(RACASE,RACTION,.RAMISC,.RAFDAM)  Q:RARC<0
"RTN","RAMAG07",246,0)
 . S RANMDIEN=RARC
"RTN","RAMAG07",247,0)
 . ;
"RTN","RAMAG07",248,0)
 . ;--- Pre-processing
"RTN","RAMAG07",249,0)
 . S RARC=$$EDTPRE^RAMAG06A(RACTION,.RATRKCMB,.RAPRIEN)  Q:RARC<0
"RTN","RAMAG07",250,0)
 . K RAFDAM("RACNT"),RAFDAM("RAIENS")
"RTN","RAMAG07",251,0)
 . ;
"RTN","RAMAG07",252,0)
 . ;--- Update the exam record
"RTN","RAMAG07",253,0)
 . K RAFDA,RAMSG  M RAFDA(70.03)=RAFDAM(70.03)  K RAFDAM(70.03)
"RTN","RAMAG07",254,0)
 . I $D(RAFDA)>1  D  Q:RARC<0
"RTN","RAMAG07",255,0)
 . . D FILE^DIE(,"RAFDA","RAMSG")
"RTN","RAMAG07",256,0)
 . . S:$G(DIERR) RARC=$$DBS^RAERR("RAMSG",-9,70.03,RAIENS)
"RTN","RAMAG07",257,0)
 . ;
"RTN","RAMAG07",258,0)
 . ;--- Update the nuclear medicine data
"RTN","RAMAG07",259,0)
 . K RAFDA,RAMSG  M RAFDA(70.21)=RAFDAM(70.21)  K RAFDAM(70.21)
"RTN","RAMAG07",260,0)
 . I $D(RAFDA)>1  D  Q:RARC<0
"RTN","RAMAG07",261,0)
 . . S RARC=$$UPDMULT^RAMAGU13(.RAFDA,RANMDIEN_",")
"RTN","RAMAG07",262,0)
 . ;
"RTN","RAMAG07",263,0)
 . ;--- Update procedure and modifiers
"RTN","RAMAG07",264,0)
 . S TMP=$O(RAMISC("RAPROC",0))
"RTN","RAMAG07",265,0)
 . I TMP>0  S TMP=$G(RAMISC("RAPROC",TMP))  D:TMP'=""  Q:RARC<0
"RTN","RAMAG07",266,0)
 . . S RARC=$$UPDEXMPR^RAMAGU04(RACASE,TMP)
"RTN","RAMAG07",267,0)
 . ;
"RTN","RAMAG07",268,0)
 . ;--- Update multiples of the exam record
"RTN","RAMAG07",269,0)
 . I $D(RAFDAM)>1  D  Q:RARC<0
"RTN","RAMAG07",270,0)
 . . S RARC=$$UPDMULT^RAMAGU13(.RAFDAM,RAIENS)
"RTN","RAMAG07",271,0)
 . ;
"RTN","RAMAG07",272,0)
 . ;--- Create the stub report
"RTN","RAMAG07",273,0)
 . S RARC=$$RPTSTUB^RAMAGU12(RACASE,RADTE,RACN)  Q:RARC<0
"RTN","RAMAG07",274,0)
 . ;
"RTN","RAMAG07",275,0)
 . ;--- Exam status
"RTN","RAMAG07",276,0)
 . S TMP=$$TRFLAGS^RAUTL22($G(RAMISC("FLAGS")),"F","F")
"RTN","RAMAG07",277,0)
 . S RARC=$$UPDEXMST^RAMAGU05(RACASE,EXMST,TMP)  Q:RARC<0
"RTN","RAMAG07",278,0)
 . ;--- Activity log
"RTN","RAMAG07",279,0)
 . S TMP=$G(RAMISC("TECHCOMM"))
"RTN","RAMAG07",280,0)
 . S RARC=$$UPDEXMAL^RAMAGU05(RACASE,"C",TMP)
"RTN","RAMAG07",281,0)
 . ;
"RTN","RAMAG07",282,0)
 . ;--- Post-processing and notifications
"RTN","RAMAG07",283,0)
 . S RARC=$$EDTPST^RAMAG06A(RACTION,RATRKCMB)  Q:RARC<0
"RTN","RAMAG07",284,0)
 ;
"RTN","RAMAG07",285,0)
 ;=== Error handling and cleanup
"RTN","RAMAG07",286,0)
 D UNLOCKFM^RALOCK(.RALOCK)
"RTN","RAMAG07",287,0)
 Q $S(RARC<0:RARC,1:0)
"RTN","RAMAGHL")
0^54^B11085202^n/a
"RTN","RAMAGHL",1,0)
RAMAGHL ;HCIOFO/SG - ORDERS/EXAMS API (HL7 UTILITIES) ; 2/25/09 3:30pm
"RTN","RAMAGHL",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAGHL",3,0)
 ;
"RTN","RAMAGHL",4,0)
 ; This routine uses the following IAs:
"RTN","RAMAGHL",5,0)
 ;
"RTN","RAMAGHL",6,0)
 ; #872          Access to the file #101 (controlled)
"RTN","RAMAGHL",7,0)
 ;
"RTN","RAMAGHL",8,0)
 Q
"RTN","RAMAGHL",9,0)
 ;
"RTN","RAMAGHL",10,0)
 ;***** RETURNS THE LIST OF ACTIVE HL7 APPLICATIONS
"RTN","RAMAGHL",11,0)
 ;
"RTN","RAMAGHL",12,0)
 ; .APPLST         Reference to a local variable where the list
"RTN","RAMAGHL",13,0)
 ;                 of active HL7 applications associated with the
"RTN","RAMAGHL",14,0)
 ;                 RA REG*, RA EXAMINED*, RA CANCEL*, and RA RPT*
"RTN","RAMAGHL",15,0)
 ;                 HL7 protocols (as receiving applications) will
"RTN","RAMAGHL",16,0)
 ;                 be returned to.
"RTN","RAMAGHL",17,0)
 ; APPLST(
"RTN","RAMAGHL",18,0)
 ;   HL7AppIEN)    HL7 application name
"RTN","RAMAGHL",19,0)
 ;
"RTN","RAMAGHL",20,0)
 ; Return values:
"RTN","RAMAGHL",21,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGHL",22,0)
 ;        0  Ok
"RTN","RAMAGHL",23,0)
 ;
"RTN","RAMAGHL",24,0)
APPLST(APPLST) ;
"RTN","RAMAGHL",25,0)
 N IEN,NAME,PART,PIEN,PL,RAMSG,ROOT,SUBSLST
"RTN","RAMAGHL",26,0)
 K APPLST
"RTN","RAMAGHL",27,0)
 ;--- Build the list of subscriber IENs
"RTN","RAMAGHL",28,0)
 S ROOT=$$ROOT^DILFD(101,,1)
"RTN","RAMAGHL",29,0)
 F PART="RA REG","RA EXAMINED","RA CANCEL","RA RPT"  D
"RTN","RAMAGHL",30,0)
 . S NAME=$O(@ROOT@("B",PART),-1),PL=$L(PART)
"RTN","RAMAGHL",31,0)
 . F  S NAME=$O(@ROOT@("B",NAME))  Q:$E(NAME,1,PL)'=PART  D
"RTN","RAMAGHL",32,0)
 . . S PIEN=0
"RTN","RAMAGHL",33,0)
 . . F  S PIEN=$O(@ROOT@("B",NAME,PIEN))  Q:PIEN'>0  D
"RTN","RAMAGHL",34,0)
 . . . S IEN=0
"RTN","RAMAGHL",35,0)
 . . . F  S IEN=$O(@ROOT@(PIEN,775,IEN))  Q:IEN'>0  D
"RTN","RAMAGHL",36,0)
 . . . . S SUBSLST(+@ROOT@(PIEN,775,IEN,0))=""
"RTN","RAMAGHL",37,0)
 ;--- Build the list of receiving application IENs
"RTN","RAMAGHL",38,0)
 S PIEN=0
"RTN","RAMAGHL",39,0)
 F  S PIEN=$O(SUBSLST(PIEN))  Q:PIEN'>0  D
"RTN","RAMAGHL",40,0)
 . S IEN=+$$GET1^DIQ(101,PIEN_",",770.2,"I",,"RAMSG")
"RTN","RAMAGHL",41,0)
 . S:IEN>0 APPLST(IEN)=""
"RTN","RAMAGHL",42,0)
 ;--- Check if the applications are active and get their names
"RTN","RAMAGHL",43,0)
 S IEN=0
"RTN","RAMAGHL",44,0)
 F  S IEN=$O(APPLST(IEN))  Q:IEN'>0  D
"RTN","RAMAGHL",45,0)
 . I $P($$GETAPP^HLCS2(IEN),U,2)="i"  K APPLST(IEN)  Q
"RTN","RAMAGHL",46,0)
 . S APPLST(IEN)=$$GET1^DIQ(771,IEN_",",.01,,,"RAMSG")
"RTN","RAMAGHL",47,0)
 ;---
"RTN","RAMAGHL",48,0)
 Q 0
"RTN","RAMAGHL",49,0)
 ;
"RTN","RAMAGHL",50,0)
 ;***** SENDS "EXAMINED" HL7 MESSAGES (ORM)
"RTN","RAMAGHL",51,0)
 ; 
"RTN","RAMAGHL",52,0)
 ; RACASE          Exam/case identifiers
"RTN","RAMAGHL",53,0)
 ;                   ^01: IEN of the patient in the file #70   (RADFN)
"RTN","RAMAGHL",54,0)
 ;                   ^02: IEN in the REGISTERED EXAMS multiple (RADTI)
"RTN","RAMAGHL",55,0)
 ;                   ^03: IEN in the EXAMINATIONS multiple     (RACNI)
"RTN","RAMAGHL",56,0)
 ;
"RTN","RAMAGHL",57,0)
 ; [RAFLAGS]       Flags that control the execution (can be combined):
"RTN","RAMAGHL",58,0)
 ;
"RTN","RAMAGHL",59,0)
 ;                   S  Do not send the message to speech recognition
"RTN","RAMAGHL",60,0)
 ;                      (dictation) systems
"RTN","RAMAGHL",61,0)
 ;
"RTN","RAMAGHL",62,0)
 ; Return values:
"RTN","RAMAGHL",63,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGHL",64,0)
 ;        0  Ok
"RTN","RAMAGHL",65,0)
 ;
"RTN","RAMAGHL",66,0)
EXAMINED(RACASE,RAFLAGS) ;
"RTN","RAMAGHL",67,0)
 N RACNI,RADFN,RADTI,RAEXEDT,RASSS,RASSSX,RC,TMP
"RTN","RAMAGHL",68,0)
 S RADFN=$P(RACASE,U),RADTI=$P(RACASE,U,2),RACNI=$P(RACASE,U,3)
"RTN","RAMAGHL",69,0)
 S RAFLAGS=$G(RAFLAGS)
"RTN","RAMAGHL",70,0)
 ;
"RTN","RAMAGHL",71,0)
 ;--- Exclude speech recognition (dictation) systems if necessary
"RTN","RAMAGHL",72,0)
 I RAFLAGS["S"  S RC=$$SPRSUBS(.RASSSX)  Q:RC $S(RC<0:RC,1:0)
"RTN","RAMAGHL",73,0)
 ;
"RTN","RAMAGHL",74,0)
 ;--- Generate and send the message
"RTN","RAMAGHL",75,0)
 S RAEXEDT=1  D EXM^RAHLRPC
"RTN","RAMAGHL",76,0)
 Q 0
"RTN","RAMAGHL",77,0)
 ;
"RTN","RAMAGHL",78,0)
 ;***** SENDS "REPORT" HL7 MESSAGES (ORU)
"RTN","RAMAGHL",79,0)
 ; 
"RTN","RAMAGHL",80,0)
 ; RACASE          Exam/case identifiers
"RTN","RAMAGHL",81,0)
 ;                   ^01: IEN of the patient in the file #70   (RADFN)
"RTN","RAMAGHL",82,0)
 ;                   ^02: IEN in the REGISTERED EXAMS multiple (RADTI)
"RTN","RAMAGHL",83,0)
 ;                   ^03: IEN in the EXAMINATIONS multiple     (RACNI)
"RTN","RAMAGHL",84,0)
 ;
"RTN","RAMAGHL",85,0)
 ; [RAFLAGS]       Flags that control the execution (can be combined):
"RTN","RAMAGHL",86,0)
 ;
"RTN","RAMAGHL",87,0)
 ;                   S  Do not send the message to speech recognition
"RTN","RAMAGHL",88,0)
 ;                      (dictation) systems
"RTN","RAMAGHL",89,0)
 ;
"RTN","RAMAGHL",90,0)
 ; Return values:
"RTN","RAMAGHL",91,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGHL",92,0)
 ;        0  Ok
"RTN","RAMAGHL",93,0)
 ;
"RTN","RAMAGHL",94,0)
REPORT(RACASE,RAFLAGS) ;
"RTN","RAMAGHL",95,0)
 N RACNI,RADFN,RADTI,RAMSG,RASSS,RASSSX,RC,RPTIEN,TMP
"RTN","RAMAGHL",96,0)
 S RADFN=$P(RACASE,U),RADTI=$P(RACASE,U,2),RACNI=$P(RACASE,U,3)
"RTN","RAMAGHL",97,0)
 S RAFLAGS=$G(RAFLAGS)
"RTN","RAMAGHL",98,0)
 ;
"RTN","RAMAGHL",99,0)
 ;--- Get the report IEN
"RTN","RAMAGHL",100,0)
 S TMP=$$EXAMIENS^RAMAGU04(RACASE)
"RTN","RAMAGHL",101,0)
 S RPTIEN=$$GET1^DIQ(70.03,TMP,17,"I",,"RAMSG")
"RTN","RAMAGHL",102,0)
 Q:$G(DIERR) $$DBS^RAERR("RAMSG",-9,70.03,TMP)
"RTN","RAMAGHL",103,0)
 Q:RPTIEN'>0 0  ; No report yet
"RTN","RAMAGHL",104,0)
 ;
"RTN","RAMAGHL",105,0)
 ;--- Send messages only for verified or released reports
"RTN","RAMAGHL",106,0)
 S TMP=$$RPTSTAT^RAMAGU12(RPTIEN)  Q:TMP<0 TMP
"RTN","RAMAGHL",107,0)
 S TMP=$P(TMP,U)  Q:(TMP'="V")&(TMP'="R")&(TMP'="EF") 0
"RTN","RAMAGHL",108,0)
 ;
"RTN","RAMAGHL",109,0)
 ;--- Exclude speech recognition (dictation) systems if necessary
"RTN","RAMAGHL",110,0)
 I RAFLAGS["S"  S RC=$$SPRSUBS(.RASSSX)  Q:RC $S(RC<0:RC,1:0)
"RTN","RAMAGHL",111,0)
 ;
"RTN","RAMAGHL",112,0)
 ;--- Generate and send the message
"RTN","RAMAGHL",113,0)
 D RPT^RAHLRPC
"RTN","RAMAGHL",114,0)
 Q 0
"RTN","RAMAGHL",115,0)
 ;
"RTN","RAMAGHL",116,0)
 ;***** COMPILES A LIST OF SPEACH RECOGNITION SUBSCRIBERS
"RTN","RAMAGHL",117,0)
 ;
"RTN","RAMAGHL",118,0)
 ; .RASSSX         Reference to a local array where the list of
"RTN","RAMAGHL",119,0)
 ;                 speech recognition subscribers is returned to:
"RTN","RAMAGHL",120,0)
 ;
"RTN","RAMAGHL",121,0)
 ;                   RASSSX(EvtDrvrIEN,SubscriberIEN) = EvtDrvrName
"RTN","RAMAGHL",122,0)
 ;
"RTN","RAMAGHL",123,0)
 ;                 EvtDrvrIEN and SubscriberIEN are record numbers
"RTN","RAMAGHL",124,0)
 ;                 in the PROTOCOL file (#101).
"RTN","RAMAGHL",125,0)
 ;
"RTN","RAMAGHL",126,0)
 ; [.RASSS]        Reference to a local array where the list of
"RTN","RAMAGHL",127,0)
 ;                 related HL7 applications is returned to:
"RTN","RAMAGHL",128,0)
 ;
"RTN","RAMAGHL",129,0)
 ;                   RASSS(HL7AppIEN) = ""
"RTN","RAMAGHL",130,0)
 ;
"RTN","RAMAGHL",131,0)
 ;                 HL7AppIEN is a record number in the HL7
"RTN","RAMAGHL",132,0)
 ;                 APPLICATION PARAMETER file (#771).
"RTN","RAMAGHL",133,0)
 ;
"RTN","RAMAGHL",134,0)
 ; Return values:
"RTN","RAMAGHL",135,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGHL",136,0)
 ;        0  Ok
"RTN","RAMAGHL",137,0)
 ;       >0  Nowhere to send
"RTN","RAMAGHL",138,0)
 ;
"RTN","RAMAGHL",139,0)
SPRSUBS(RASSSX,RASSS) ;
"RTN","RAMAGHL",140,0)
 N APPLST,IEN,RABUF,RAMSG,RC
"RTN","RAMAGHL",141,0)
 K RASSS,RASSSX
"RTN","RAMAGHL",142,0)
 S RC=$$APPLST(.APPLST)  Q:RC<0 RC
"RTN","RAMAGHL",143,0)
 ;--- Select only those HL7 applications that do not have
"RTN","RAMAGHL",144,0)
 ;    'S:Speech Recognition' in the APPLICATION TYPE field of
"RTN","RAMAGHL",145,0)
 ;--- the RAD/NUC MED HL7 APPLICATION EXCEPTION file (#79.7).
"RTN","RAMAGHL",146,0)
 S IEN=0
"RTN","RAMAGHL",147,0)
 F  S IEN=$O(APPLST(IEN))  Q:IEN'>0  D
"RTN","RAMAGHL",148,0)
 . I $D(^RA(79.7,IEN,0))  D  Q:RC="S"
"RTN","RAMAGHL",149,0)
 . . S RC=$$GET1^DIQ(79.7,IEN_",",1.3,"I",,"RAMSG")
"RTN","RAMAGHL",150,0)
 . S RASSS(IEN)=""
"RTN","RAMAGHL",151,0)
 ;--- Quit if all recipients should be skipped
"RTN","RAMAGHL",152,0)
 Q:$D(RASSS)<10 1
"RTN","RAMAGHL",153,0)
 ;--- Build the list of excluded subscriber protocols
"RTN","RAMAGHL",154,0)
 D GETSUB^RAHLRS1(.RASSS,.RASSSX)
"RTN","RAMAGHL",155,0)
 Q 0
"RTN","RAMAGRP1")
0^14^B31897762^n/a
"RTN","RAMAGRP1",1,0)
RAMAGRP1 ;HCIOFO/SG - ORDERS/EXAMS API (REMOTE PROCEDURES) ; 6/6/08 2:40pm
"RTN","RAMAGRP1",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAGRP1",3,0)
 ;
"RTN","RAMAGRP1",4,0)
 Q
"RTN","RAMAGRP1",5,0)
 ;
"RTN","RAMAGRP1",6,0)
 ;+++++ COMPLETES THE EXAM
"RTN","RAMAGRP1",7,0)
 ; RPC: [RAMAG EXAM COMPLETE]
"RTN","RAMAGRP1",8,0)
 ;
"RTN","RAMAGRP1",9,0)
 ; .RARESULT     Reference to a local variable where the results
"RTN","RAMAGRP1",10,0)
 ;               are returned to.
"RTN","RAMAGRP1",11,0)
 ;
"RTN","RAMAGRP1",12,0)
 ; See the comments preceding the $$COMPLETE^RAMAG06 function for
"RTN","RAMAGRP1",13,0)
 ; description of other parameters.
"RTN","RAMAGRP1",14,0)
 ;
"RTN","RAMAGRP1",15,0)
 ; NOTE: Date/time values are passed into this RPC it in HL7
"RTN","RAMAGRP1",16,0)
 ;       format (TS): YYYYMMDD[HHMM[+/-ZZZZ]].
"RTN","RAMAGRP1",17,0)
 ;
"RTN","RAMAGRP1",18,0)
 ; Return Values:
"RTN","RAMAGRP1",19,0)
 ;
"RTN","RAMAGRP1",20,0)
 ; A negative value of the first "^"-piece of the RARESULT(0)
"RTN","RAMAGRP1",21,0)
 ; indicates an error (see the RPCSTK^RAERR01 procedure for more
"RTN","RAMAGRP1",22,0)
 ; details).
"RTN","RAMAGRP1",23,0)
 ;
"RTN","RAMAGRP1",24,0)
 ; Otherwise, 0 is returned in the RARESULT(0).
"RTN","RAMAGRP1",25,0)
 ;
"RTN","RAMAGRP1",26,0)
COMPLETE(RARESULT,RACASE,RAMSC) ;
"RTN","RAMAGRP1",27,0)
 N RAERROR,RAMISC,RC
"RTN","RAMAGRP1",28,0)
 N:'$G(RAPARAMS("DEBUG")) RAPARAMS
"RTN","RAMAGRP1",29,0)
 K RARESULT  S (RARESULT(0),RC)=0
"RTN","RAMAGRP1",30,0)
 ;---
"RTN","RAMAGRP1",31,0)
 D CLEAR^RAERR(1)
"RTN","RAMAGRP1",32,0)
 D:$G(RAPARAMS("DEBUG"))>1
"RTN","RAMAGRP1",33,0)
 . D W^RAMAGU11("RAMAG EXAM COMPLETE","!!")
"RTN","RAMAGRP1",34,0)
 . D VARS^RAMAGU11("RACASE")
"RTN","RAMAGRP1",35,0)
 . D ZW^RAUTL22("RAMSC")
"RTN","RAMAGRP1",36,0)
 D
"RTN","RAMAGRP1",37,0)
 . ;--- Parse miscellaneous parameters
"RTN","RAMAGRP1",38,0)
 . S RC=$$RPCMISC^RAMAGU01(.RAMSC,.RAMISC)  Q:RC<0
"RTN","RAMAGRP1",39,0)
 . K RAMSC
"RTN","RAMAGRP1",40,0)
 . ;--- Complete the exam
"RTN","RAMAGRP1",41,0)
 . S RC=$$COMPLETE^RAMAG06(.RAPARAMS,.RACASE,.RAMISC)
"RTN","RAMAGRP1",42,0)
 ;---
"RTN","RAMAGRP1",43,0)
 D:RC<0 RPCSTK^RAERR01(.RARESULT,RC)
"RTN","RAMAGRP1",44,0)
 Q
"RTN","RAMAGRP1",45,0)
 ;
"RTN","RAMAGRP1",46,0)
 ;+++++ CANCELS THE EXAM
"RTN","RAMAGRP1",47,0)
 ; RPC: [RAMAG EXAM CANCEL]
"RTN","RAMAGRP1",48,0)
 ;
"RTN","RAMAGRP1",49,0)
 ; .RARESULT     Reference to a local variable where the results
"RTN","RAMAGRP1",50,0)
 ;               are returned to.
"RTN","RAMAGRP1",51,0)
 ;
"RTN","RAMAGRP1",52,0)
 ; See the comments preceding the $$EXAMCANC^RAMAG05 function for
"RTN","RAMAGRP1",53,0)
 ; description of other parameters.
"RTN","RAMAGRP1",54,0)
 ;
"RTN","RAMAGRP1",55,0)
 ; Return Values:
"RTN","RAMAGRP1",56,0)
 ;
"RTN","RAMAGRP1",57,0)
 ; A negative value of the first "^"-piece of the RARESULT(0)
"RTN","RAMAGRP1",58,0)
 ; indicates an error (see the RPCSTK^RAERR01 procedure for more
"RTN","RAMAGRP1",59,0)
 ; details).
"RTN","RAMAGRP1",60,0)
 ;
"RTN","RAMAGRP1",61,0)
 ; Otherwise, 0 is returned in the RARESULT(0).
"RTN","RAMAGRP1",62,0)
 ;
"RTN","RAMAGRP1",63,0)
EXAMCANC(RARESULT,RACASE,RAREASON,RAFLAGS,RAMSC) ;
"RTN","RAMAGRP1",64,0)
 N RAERROR,RAMISC,RC
"RTN","RAMAGRP1",65,0)
 N:'$G(RAPARAMS("DEBUG")) RAPARAMS
"RTN","RAMAGRP1",66,0)
 K RARESULT  S (RARESULT(0),RC)=0
"RTN","RAMAGRP1",67,0)
 ;---
"RTN","RAMAGRP1",68,0)
 D CLEAR^RAERR(1)
"RTN","RAMAGRP1",69,0)
 D:$G(RAPARAMS("DEBUG"))>1
"RTN","RAMAGRP1",70,0)
 . D W^RAMAGU11("RAMAG EXAM CANCEL","!!")
"RTN","RAMAGRP1",71,0)
 . D VARS^RAMAGU11("RACASE,RAREASON,RAFLAGS")
"RTN","RAMAGRP1",72,0)
 . D ZW^RAUTL22("RAMSC")
"RTN","RAMAGRP1",73,0)
 D
"RTN","RAMAGRP1",74,0)
 . ;--- Parse miscellaneous parameters
"RTN","RAMAGRP1",75,0)
 . S RC=$$RPCMISC^RAMAGU01(.RAMSC,.RAMISC)  Q:RC<0
"RTN","RAMAGRP1",76,0)
 . K RAMSC
"RTN","RAMAGRP1",77,0)
 . ;--- Cancel the exam
"RTN","RAMAGRP1",78,0)
 . S RC=$$EXAMCANC^RAMAG05(.RAPARAMS,.RACASE,.RAREASON,.RAFLAGS,.RAMISC)
"RTN","RAMAGRP1",79,0)
 ;---
"RTN","RAMAGRP1",80,0)
 D:RC<0 RPCSTK^RAERR01(.RARESULT,RC)
"RTN","RAMAGRP1",81,0)
 Q
"RTN","RAMAGRP1",82,0)
 ;
"RTN","RAMAGRP1",83,0)
 ;+++++ CANCELS THE ORDER
"RTN","RAMAGRP1",84,0)
 ; RPC: [RAMAG ORDER CANCEL]
"RTN","RAMAGRP1",85,0)
 ;
"RTN","RAMAGRP1",86,0)
 ; .RARESULT     Reference to a local variable where the results
"RTN","RAMAGRP1",87,0)
 ;               are returned to.
"RTN","RAMAGRP1",88,0)
 ;
"RTN","RAMAGRP1",89,0)
 ; See the comments preceding the $$ORDCANC^RAMAG04 function for
"RTN","RAMAGRP1",90,0)
 ; description of other parameters.
"RTN","RAMAGRP1",91,0)
 ;
"RTN","RAMAGRP1",92,0)
 ; Return Values:
"RTN","RAMAGRP1",93,0)
 ;
"RTN","RAMAGRP1",94,0)
 ; A negative value of the first "^"-piece of the RARESULT(0)
"RTN","RAMAGRP1",95,0)
 ; indicates an error (see the RPCSTK^RAERR01 procedure for more
"RTN","RAMAGRP1",96,0)
 ; details).
"RTN","RAMAGRP1",97,0)
 ;
"RTN","RAMAGRP1",98,0)
 ; Otherwise, 0 is returned in the RARESULT(0).
"RTN","RAMAGRP1",99,0)
 ;
"RTN","RAMAGRP1",100,0)
ORDCANC(RARESULT,RAOIFN,RAREASON,RAMSC) ;
"RTN","RAMAGRP1",101,0)
 N RAERROR,RAMISC,RC
"RTN","RAMAGRP1",102,0)
 N:'$G(RAPARAMS("DEBUG")) RAPARAMS
"RTN","RAMAGRP1",103,0)
 K RARESULT  S (RARESULT(0),RC)=0
"RTN","RAMAGRP1",104,0)
 ;---
"RTN","RAMAGRP1",105,0)
 D CLEAR^RAERR(1)
"RTN","RAMAGRP1",106,0)
 D:$G(RAPARAMS("DEBUG"))>1
"RTN","RAMAGRP1",107,0)
 . D W^RAMAGU11("RAMAG ORDER CANCEL","!!")
"RTN","RAMAGRP1",108,0)
 . D VARS^RAMAGU11("RAOIFN,RAREASON")
"RTN","RAMAGRP1",109,0)
 . D ZW^RAUTL22("RAMSC")
"RTN","RAMAGRP1",110,0)
 D
"RTN","RAMAGRP1",111,0)
 . ;--- Parse miscellaneous parameters
"RTN","RAMAGRP1",112,0)
 . S RC=$$RPCMISC^RAMAGU01(.RAMSC,.RAMISC)  Q:RC<0
"RTN","RAMAGRP1",113,0)
 . K RAMSC
"RTN","RAMAGRP1",114,0)
 . ;--- Cancel the order
"RTN","RAMAGRP1",115,0)
 . S RC=$$ORDCANC^RAMAG04(.RAPARAMS,.RAOIFN,.RAREASON,.RAMISC)
"RTN","RAMAGRP1",116,0)
 ;---
"RTN","RAMAGRP1",117,0)
 D:RC<0 RPCSTK^RAERR01(.RARESULT,RC)
"RTN","RAMAGRP1",118,0)
 Q
"RTN","RAMAGRP1",119,0)
 ;
"RTN","RAMAGRP1",120,0)
 ;+++++ ORDERS/REQUESTS AN EXAM
"RTN","RAMAGRP1",121,0)
 ; RPC: [RAMAG EXAM ORDER]
"RTN","RAMAGRP1",122,0)
 ;
"RTN","RAMAGRP1",123,0)
 ; .RARESULT     Reference to a local variable where the results
"RTN","RAMAGRP1",124,0)
 ;               are returned to.
"RTN","RAMAGRP1",125,0)
 ;
"RTN","RAMAGRP1",126,0)
 ; See the comments preceding the $$ORDER^RAMAG02 function for
"RTN","RAMAGRP1",127,0)
 ; description of other parameters.
"RTN","RAMAGRP1",128,0)
 ;
"RTN","RAMAGRP1",129,0)
 ; NOTE: Date/time values are passed into this RPC it in HL7
"RTN","RAMAGRP1",130,0)
 ;       format (TS): YYYYMMDD[HHMM[+/-ZZZZ]].
"RTN","RAMAGRP1",131,0)
 ;
"RTN","RAMAGRP1",132,0)
 ; Return Values:
"RTN","RAMAGRP1",133,0)
 ;
"RTN","RAMAGRP1",134,0)
 ; A negative value of the first "^"-piece of the RARESULT(0)
"RTN","RAMAGRP1",135,0)
 ; indicates an error (see the RPCSTK^RAERR01 procedure for more
"RTN","RAMAGRP1",136,0)
 ; details).
"RTN","RAMAGRP1",137,0)
 ;
"RTN","RAMAGRP1",138,0)
 ; Otherwise, IEN of the new order in the RAD/NUC MED ORDERS file
"RTN","RAMAGRP1",139,0)
 ; (#75.1) is returned in the RARESULT(0).
"RTN","RAMAGRP1",140,0)
 ;
"RTN","RAMAGRP1",141,0)
ORDER(RARESULT,RADFN,RAMLC,RAPROC,REQDTE,RACAT,REQLOC,REQPHYS,REASON,RAMSC) ;
"RTN","RAMAGRP1",142,0)
 N REQDTE1,RAERROR,RAMISC,RC
"RTN","RAMAGRP1",143,0)
 N:'$G(RAPARAMS("DEBUG")) RAPARAMS
"RTN","RAMAGRP1",144,0)
 K RARESULT  S (RARESULT(0),RC)=0
"RTN","RAMAGRP1",145,0)
 ;---
"RTN","RAMAGRP1",146,0)
 D CLEAR^RAERR(1)
"RTN","RAMAGRP1",147,0)
 D:$G(RAPARAMS("DEBUG"))>1
"RTN","RAMAGRP1",148,0)
 . D W^RAMAGU11("RAMAG EXAM ORDER","!!")
"RTN","RAMAGRP1",149,0)
 . D VARS^RAMAGU11("RADFN,RAMLC,RAPROC")
"RTN","RAMAGRP1",150,0)
 . D VARS^RAMAGU11("REQDTE,RACAT,REQLOC,REQPHYS")
"RTN","RAMAGRP1",151,0)
 . D VARS^RAMAGU11("REASON")
"RTN","RAMAGRP1",152,0)
 . D ZW^RAUTL22("RAMSC")
"RTN","RAMAGRP1",153,0)
 D
"RTN","RAMAGRP1",154,0)
 . ;--- Parse miscellaneous parameters
"RTN","RAMAGRP1",155,0)
 . S RC=$$RPCMISC^RAMAGU01(.RAMSC,.RAMISC)  Q:RC<0
"RTN","RAMAGRP1",156,0)
 . K RAMSC
"RTN","RAMAGRP1",157,0)
 . ;--- Convert the request date
"RTN","RAMAGRP1",158,0)
 . S REQDTE1=$$HL7TFM^XLFDT($G(REQDTE))
"RTN","RAMAGRP1",159,0)
 . I REQDTE1'>0  D  Q
"RTN","RAMAGRP1",160,0)
 . . S RC=$$IPVE^RAERR("REQDTE")
"RTN","RAMAGRP1",161,0)
 . ;--- Request an exam
"RTN","RAMAGRP1",162,0)
 . S RC=$$ORDER^RAMAG02(.RAPARAMS,.RADFN,.RAMLC,.RAPROC,REQDTE1,.RACAT,.REQLOC,.REQPHYS,.REASON,.RAMISC)
"RTN","RAMAGRP1",163,0)
 . S:RC>0 RARESULT(0)=+RC
"RTN","RAMAGRP1",164,0)
 ;---
"RTN","RAMAGRP1",165,0)
 D:RC<0 RPCSTK^RAERR01(.RARESULT,RC)
"RTN","RAMAGRP1",166,0)
 Q
"RTN","RAMAGRP1",167,0)
 ;
"RTN","RAMAGRP1",168,0)
 ;+++++ REGISTERS THE EXAM
"RTN","RAMAGRP1",169,0)
 ; RPC: [RAMAG EXAM REGISTER]
"RTN","RAMAGRP1",170,0)
 ;
"RTN","RAMAGRP1",171,0)
 ; .RARESULT     Reference to a local variable where the results
"RTN","RAMAGRP1",172,0)
 ;               are returned to.
"RTN","RAMAGRP1",173,0)
 ;
"RTN","RAMAGRP1",174,0)
 ; See the comments preceding the $$REGISTER^RAMAG03 function for
"RTN","RAMAGRP1",175,0)
 ; description of other parameters.
"RTN","RAMAGRP1",176,0)
 ;
"RTN","RAMAGRP1",177,0)
 ; NOTE: Date/time values are passed into this RPC and returned from
"RTN","RAMAGRP1",178,0)
 ;       it in HL7 format (TS): YYYYMMDD[HHMM[+/-ZZZZ]].
"RTN","RAMAGRP1",179,0)
 ;
"RTN","RAMAGRP1",180,0)
 ; Return Values:
"RTN","RAMAGRP1",181,0)
 ;
"RTN","RAMAGRP1",182,0)
 ; A negative value of the first "^"-piece of the RARESULT(0)
"RTN","RAMAGRP1",183,0)
 ; indicates an error (see the RPCSTK^RAERR01 procedure for more
"RTN","RAMAGRP1",184,0)
 ; details).
"RTN","RAMAGRP1",185,0)
 ;
"RTN","RAMAGRP1",186,0)
 ; Otherwise, number of registered examinations is returned in the
"RTN","RAMAGRP1",187,0)
 ; RARESULT(0) and identifiers of the examinations are returned
"RTN","RAMAGRP1",188,0)
 ; in the subsequent elements of the array.
"RTN","RAMAGRP1",189,0)
 ;
"RTN","RAMAGRP1",190,0)
 ; RARESULT(
"RTN","RAMAGRP1",191,0)
 ;   0)                  Number of registered examinations
"RTN","RAMAGRP1",192,0)
 ;
"RTN","RAMAGRP1",193,0)
 ;   i)                  Examination identifiers
"RTN","RAMAGRP1",194,0)
 ;                         ^01: IEN of the patient in the file #70
"RTN","RAMAGRP1",195,0)
 ;                         ^02: IEN in the REGISTERED EXAMS multiple
"RTN","RAMAGRP1",196,0)
 ;                         ^03: IEN in the EXAMINATIONS multiple
"RTN","RAMAGRP1",197,0)
 ;                         ^04: Case number
"RTN","RAMAGRP1",198,0)
 ;                         ^05: Accession number
"RTN","RAMAGRP1",199,0)
 ;                         ^06: Actual date/time of the case (value
"RTN","RAMAGRP1",200,0)
 ;                              of the EXAM DATE field) in HL7 format 
"RTN","RAMAGRP1",201,0)
 ;                              (TS): YYYYMMDD[HHMM[+/-ZZZZ]]
"RTN","RAMAGRP1",202,0)
 ;
"RTN","RAMAGRP1",203,0)
REGISTER(RARESULT,RAOIFN,EXMDTE,RAMSC) ;
"RTN","RAMAGRP1",204,0)
 N I,EXMDTE1,RAERROR,RAMISC,RC
"RTN","RAMAGRP1",205,0)
 N:'$G(RAPARAMS("DEBUG")) RAPARAMS
"RTN","RAMAGRP1",206,0)
 K RARESULT  S (RARESULT(0),RC)=0
"RTN","RAMAGRP1",207,0)
 ;---
"RTN","RAMAGRP1",208,0)
 D CLEAR^RAERR(1)
"RTN","RAMAGRP1",209,0)
 D:$G(RAPARAMS("DEBUG"))>1
"RTN","RAMAGRP1",210,0)
 . D W^RAMAGU11("RAMAG EXAM REGISTER","!!")
"RTN","RAMAGRP1",211,0)
 . D VARS^RAMAGU11("RAOIFN,EXMDTE")
"RTN","RAMAGRP1",212,0)
 . D ZW^RAUTL22("RAMSC")
"RTN","RAMAGRP1",213,0)
 D
"RTN","RAMAGRP1",214,0)
 . ;--- Parse miscellaneous parameters
"RTN","RAMAGRP1",215,0)
 . S RC=$$RPCMISC^RAMAGU01(.RAMSC,.RAMISC)  Q:RC<0
"RTN","RAMAGRP1",216,0)
 . K RAMSC
"RTN","RAMAGRP1",217,0)
 . ;--- Convert the exam date/time
"RTN","RAMAGRP1",218,0)
 . S EXMDTE1=$$HL7TFM^XLFDT($G(EXMDTE))
"RTN","RAMAGRP1",219,0)
 . I EXMDTE1'>0  D  Q
"RTN","RAMAGRP1",220,0)
 . . S RC=$$IPVE^RAERR("EXMDTE")
"RTN","RAMAGRP1",221,0)
 . ;--- Register the exam
"RTN","RAMAGRP1",222,0)
 . S RC=$$REGISTER^RAMAG03(.RAPARAMS,.RARESULT,.RAOIFN,EXMDTE1,.RAMISC)
"RTN","RAMAGRP1",223,0)
 . Q:RC'>0
"RTN","RAMAGRP1",224,0)
 . S RARESULT(0)=+RC
"RTN","RAMAGRP1",225,0)
 . ;--- Convert the result date/time values to HL7 (TS) format
"RTN","RAMAGRP1",226,0)
 . F I=1:1:RARESULT(0)  D
"RTN","RAMAGRP1",227,0)
 . . S $P(RARESULT(I),U,6)=$$FMTHL7^XLFDT($P(RARESULT(I),U,6))
"RTN","RAMAGRP1",228,0)
 ;---
"RTN","RAMAGRP1",229,0)
 D:RC<0 RPCSTK^RAERR01(.RARESULT,RC)
"RTN","RAMAGRP1",230,0)
 Q
"RTN","RAMAGRP2")
0^48^B6426063^n/a
"RTN","RAMAGRP2",1,0)
RAMAGRP2 ;HCIOFO/SG - ORDERS/EXAMS API (REMOTE PROCEDURES) ; 2/19/08 3:46pm
"RTN","RAMAGRP2",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAGRP2",3,0)
 ;
"RTN","RAMAGRP2",4,0)
 Q
"RTN","RAMAGRP2",5,0)
 ;
"RTN","RAMAGRP2",6,0)
 ;+++++ INDICATES THAT THE PROCEDURE HAS BEEN PERFORMED
"RTN","RAMAGRP2",7,0)
 ; RPC: [RAMAG EXAMINED]
"RTN","RAMAGRP2",8,0)
 ;
"RTN","RAMAGRP2",9,0)
 ; .RARESULT     Reference to a local variable where the results
"RTN","RAMAGRP2",10,0)
 ;               are returned to.
"RTN","RAMAGRP2",11,0)
 ;
"RTN","RAMAGRP2",12,0)
 ; See the comments preceding the $$EXAMINED^RAMAG07 function for
"RTN","RAMAGRP2",13,0)
 ; description of other parameters.
"RTN","RAMAGRP2",14,0)
 ;
"RTN","RAMAGRP2",15,0)
 ; Return Values:
"RTN","RAMAGRP2",16,0)
 ;
"RTN","RAMAGRP2",17,0)
 ; A negative value of the first "^"-piece of the RARESULT(0)
"RTN","RAMAGRP2",18,0)
 ; indicates an error (see the RPCSTK^RAERR01 procedure for more
"RTN","RAMAGRP2",19,0)
 ; details).
"RTN","RAMAGRP2",20,0)
 ;
"RTN","RAMAGRP2",21,0)
 ; Otherwise, 0 is returned in the RARESULT(0).
"RTN","RAMAGRP2",22,0)
 ;
"RTN","RAMAGRP2",23,0)
EXAMINED(RARESULT,RACASE,RAMSC) ;
"RTN","RAMAGRP2",24,0)
 N RAERROR,RAMISC,RC
"RTN","RAMAGRP2",25,0)
 N:'$G(RAPARAMS("DEBUG")) RAPARAMS
"RTN","RAMAGRP2",26,0)
 K RARESULT  S (RARESULT(0),RC)=0
"RTN","RAMAGRP2",27,0)
 D CLEAR^RAERR(1)
"RTN","RAMAGRP2",28,0)
 ;--- Debug code
"RTN","RAMAGRP2",29,0)
 D:$G(RAPARAMS("DEBUG"))>1
"RTN","RAMAGRP2",30,0)
 . D W^RAMAGU11("RAMAG EXAMINED","!!")
"RTN","RAMAGRP2",31,0)
 . D VARS^RAMAGU11("RACASE")
"RTN","RAMAGRP2",32,0)
 . D ZW^RAUTL22("RAMSC")
"RTN","RAMAGRP2",33,0)
 D
"RTN","RAMAGRP2",34,0)
 . ;--- Parse miscellaneous parameters
"RTN","RAMAGRP2",35,0)
 . S RC=$$RPCMISC^RAMAGU01(.RAMSC,.RAMISC)  Q:RC<0
"RTN","RAMAGRP2",36,0)
 . K RAMSC
"RTN","RAMAGRP2",37,0)
 . ;--- Indicate that the procedure has been performed
"RTN","RAMAGRP2",38,0)
 . S RC=$$EXAMINED^RAMAG07(.RAPARAMS,.RACASE,.RAMISC)
"RTN","RAMAGRP2",39,0)
 ;---
"RTN","RAMAGRP2",40,0)
 D:RC<0 RPCSTK^RAERR01(.RARESULT,RC)
"RTN","RAMAGRP2",41,0)
 Q
"RTN","RAMAGRP2",42,0)
 ;
"RTN","RAMAGRP2",43,0)
 ;+++++ RETURNS EXAM STATUS REQUIREMENTS
"RTN","RAMAGRP2",44,0)
 ; RPC: [RAMAG EXAM STATUS REQUIREMENTS]
"RTN","RAMAGRP2",45,0)
 ;
"RTN","RAMAGRP2",46,0)
 ; .RARESULT     Reference to a local variable where the results
"RTN","RAMAGRP2",47,0)
 ;               are returned to.
"RTN","RAMAGRP2",48,0)
 ;
"RTN","RAMAGRP2",49,0)
 ; RACTION       Action that is going to be performed on an
"RTN","RAMAGRP2",50,0)
 ;               exam/case record (single character):
"RTN","RAMAGRP2",51,0)
 ;
"RTN","RAMAGRP2",52,0)
 ;                 E  Examined (procedure has been performed,
"RTN","RAMAGRP2",53,0)
 ;                    images have been acquired)
"RTN","RAMAGRP2",54,0)
 ;
"RTN","RAMAGRP2",55,0)
 ;                 C  Complete
"RTN","RAMAGRP2",56,0)
 ;
"RTN","RAMAGRP2",57,0)
 ; RAIMGTYI      Imaging type IEN (file #79.2).
"RTN","RAMAGRP2",58,0)
 ;
"RTN","RAMAGRP2",59,0)
 ; [RAPROC]      Radiology procedure IEN (file #71). This parameter
"RTN","RAMAGRP2",60,0)
 ;               is required to determine exact nuclear medicine
"RTN","RAMAGRP2",61,0)
 ;               requirements. See the $$EXMSTREQ^RAMAGU06 for more
"RTN","RAMAGRP2",62,0)
 ;               details.
"RTN","RAMAGRP2",63,0)
 ;
"RTN","RAMAGRP2",64,0)
 ; Return Values:
"RTN","RAMAGRP2",65,0)
 ;
"RTN","RAMAGRP2",66,0)
 ; A negative value of the first "^"-piece of the RARESULT(0)
"RTN","RAMAGRP2",67,0)
 ; indicates an error (see the RPCSTK^RAERR01 procedure for more
"RTN","RAMAGRP2",68,0)
 ; details).
"RTN","RAMAGRP2",69,0)
 ;
"RTN","RAMAGRP2",70,0)
 ; Otherwise, exam status requirements are returned in the
"RTN","RAMAGRP2",71,0)
 ; RARESULT(0). See the $$EXMSTREQ^RAMAGU06 for details.
"RTN","RAMAGRP2",72,0)
 ; Descriptor of the exam status is returned in the RARESULT(1).
"RTN","RAMAGRP2",73,0)
 ; See the ^RAMAGU06 for details.
"RTN","RAMAGRP2",74,0)
 ;
"RTN","RAMAGRP2",75,0)
EXMSTREQ(RARESULT,RACTION,RAIMGTYI,RAPROC) ;
"RTN","RAMAGRP2",76,0)
 N EXMST,RAERROR,RC
"RTN","RAMAGRP2",77,0)
 N:'$G(RAPARAMS("DEBUG")) RAPARAMS
"RTN","RAMAGRP2",78,0)
 K RARESULT  S (EXMST,RARESULT(0),RC)=0
"RTN","RAMAGRP2",79,0)
 D CLEAR^RAERR(1)
"RTN","RAMAGRP2",80,0)
 ;=== Debug code
"RTN","RAMAGRP2",81,0)
 D:$G(RAPARAMS("DEBUG"))>1
"RTN","RAMAGRP2",82,0)
 . D W^RAMAGU11("RAMAG EXAM STATUS REQUIREMENTS","!!")
"RTN","RAMAGRP2",83,0)
 . D VARS^RAMAGU11("RACTION,RAIMGTYI")
"RTN","RAMAGRP2",84,0)
 ;
"RTN","RAMAGRP2",85,0)
 ;=== Find the exam status record
"RTN","RAMAGRP2",86,0)
 D
"RTN","RAMAGRP2",87,0)
 . I RACTION="C"  D  Q
"RTN","RAMAGRP2",88,0)
 . . S EXMST=$$EXMSTINF^RAMAGU06("^^9",.RAIMGTYI)
"RTN","RAMAGRP2",89,0)
 . ;---
"RTN","RAMAGRP2",90,0)
 . I RACTION="E"  D  Q
"RTN","RAMAGRP2",91,0)
 . . S EXMST=$$EXMSTINF^RAMAGU06("^^1",.RAIMGTYI)  Q:EXMST<0
"RTN","RAMAGRP2",92,0)
 . . S EXMST=$$GETEXMND^RAMAGU06(+EXMST)
"RTN","RAMAGRP2",93,0)
 . ;---
"RTN","RAMAGRP2",94,0)
 . S EXMST=$$IPVE^RAERR("RACTION")
"RTN","RAMAGRP2",95,0)
 S:EXMST<0 RC=EXMST
"RTN","RAMAGRP2",96,0)
 ;
"RTN","RAMAGRP2",97,0)
 ;=== Get the status requirements
"RTN","RAMAGRP2",98,0)
 I RC'<0  D
"RTN","RAMAGRP2",99,0)
 . S (RARESULT(0),RC)=$$EXMSTREQ^RAMAGU06(+EXMST,.RAPROC)  Q:RC<0
"RTN","RAMAGRP2",100,0)
 . S RARESULT(1)=EXMST
"RTN","RAMAGRP2",101,0)
 D:RC<0 RPCSTK^RAERR01(.RARESULT,RC)
"RTN","RAMAGRP2",102,0)
 Q
"RTN","RAMAGU01")
0^23^B42344620^n/a
"RTN","RAMAGU01",1,0)
RAMAGU01 ;HCIOFO/SG - ORDERS/EXAMS API (RAMISC UTILITIES) ; 3/13/08 11:54am
"RTN","RAMAGU01",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAGU01",3,0)
 ;
"RTN","RAMAGU01",4,0)
 Q
"RTN","RAMAGU01",5,0)
 ;
"RTN","RAMAGU01",6,0)
 ;***** LOADS DEFINITIONS OF MISCELLANEOUS PARAMETERS
"RTN","RAMAGU01",7,0)
 ;
"RTN","RAMAGU01",8,0)
 ; .MSPSDEFS     Reference to a local variable where descriptors
"RTN","RAMAGU01",9,0)
 ;               of the miscellaneous parameters are loaded to
"RTN","RAMAGU01",10,0)
 ;               (see description of the RAMSPSDEFS in the ^RAMAG
"RTN","RAMAGU01",11,0)
 ;               routine for details).
"RTN","RAMAGU01",12,0)
 ;
"RTN","RAMAGU01",13,0)
LDMSPRMS(MSPSDEFS) ;
"RTN","RAMAGU01",14,0)
 N BUF,FILE,I,NAME
"RTN","RAMAGU01",15,0)
 K MSPSDEFS
"RTN","RAMAGU01",16,0)
 F I=4:1  S BUF=$P($T(MSCPRMS+I),";;",2)  Q:BUF=""  D
"RTN","RAMAGU01",17,0)
 . S BUF=$P($TR(BUF,"| ",U),U,2,99)
"RTN","RAMAGU01",18,0)
 . S NAME=$P(BUF,U,1)  Q:NAME=""
"RTN","RAMAGU01",19,0)
 . S FILE=$P(BUF,U,2)  Q:FILE'>0
"RTN","RAMAGU01",20,0)
 . S MSPSDEFS("N",NAME)=$P(BUF,U,2,5)
"RTN","RAMAGU01",21,0)
 . S:$P(BUF,U,4)["*" MSPSDEFS("F",FILE,NAME)=""
"RTN","RAMAGU01",22,0)
 Q
"RTN","RAMAGU01",23,0)
 ;
"RTN","RAMAGU01",24,0)
MSCPRMS ;+++++ DEFINITIONS OF MISCELLANEOUS PARAMETERS
"RTN","RAMAGU01",25,0)
 ;;==========================================================
"RTN","RAMAGU01",26,0)
 ;;| Parameter  | File  |Field|Type |Req#|    Reference     |
"RTN","RAMAGU01",27,0)
 ;;|------------+-------+-----+-----+----+------------------|
"RTN","RAMAGU01",28,0)
 ;;|ACLHIST     |74     | 400 | W   |    |$$COMPLETE^RAMAG06|
"RTN","RAMAGU01",29,0)
 ;;|BEDSECT     |70.03  |  19 | P   |    |$$REGISTER^RAMAG03|
"RTN","RAMAGU01",30,0)
 ;;|CLINHIST    |70.03  | 400 | W   |    |$$REGISTER^RAMAG03|
"RTN","RAMAGU01",31,0)
 ;;|CMUSED      |70.03  |  10 |     |    |$$EXAMINED^RAMAG07|
"RTN","RAMAGU01",32,0)
 ;;|COMPLICAT   |70.03  |  16 | P   |    |$$EXAMINED^RAMAG07|
"RTN","RAMAGU01",33,0)
 ;;|CONTMEDIA   |70.3225| .01 |  M  |    |$$EXAMINED^RAMAG07|
"RTN","RAMAGU01",34,0)
 ;;|CPTMODS     |70.3135| .01 | PM  | 14 |$$EXAMINED^RAMAG07|
"RTN","RAMAGU01",35,0)
 ;;|EXAMCAT     |70.03  |   4 |     |    |$$REGISTER^RAMAG03|
"RTN","RAMAGU01",36,0)
 ;;|FILMSIZE    |70.04  | .01 | PM  |  4 |$$REGISTER^RAMAG03|
"RTN","RAMAGU01",37,0)
 ;;|FLAGS       |       |     |     |    |          ^RAMAG  |
"RTN","RAMAGU01",38,0)
 ;;|HOLDESC     |75.1   |  25 | W   |    | $$ORDCANC^RAMAG04|
"RTN","RAMAGU01",39,0)
 ;;|IMPRESSION  |74     | 300 | W   | 16 |$$COMPLETE^RAMAG06|
"RTN","RAMAGU01",40,0)
 ;;|ISOLPROC    |75.1   |  24 |     |    |   $$ORDER^RAMAG02|
"RTN","RAMAGU01",41,0)
 ;;|PREGNANT    |75.1   |  13 |     |    |   $$ORDER^RAMAG02|
"RTN","RAMAGU01",42,0)
 ;;|PREOPDT     |75.1   |  12 | D   |    |   $$ORDER^RAMAG02|
"RTN","RAMAGU01",43,0)
 ;;|PRIMCAM     |70.03  |  18 | P   |  6 |$$EXAMINED^RAMAG07|
"RTN","RAMAGU01",44,0)
 ;;|PRIMDXCODE  |70.03  |  13 | P   |  5 |$$EXAMINED^RAMAG07|
"RTN","RAMAGU01",45,0)
 ;;|PRIMINTRES  |70.03  |  12 | P   |  2 |$$EXAMINED^RAMAG07|
"RTN","RAMAGU01",46,0)
 ;;|PRIMINTSTF  |70.03  |  15 | P   |  2 |$$EXAMINED^RAMAG07|
"RTN","RAMAGU01",47,0)
 ;;|PRINCLIN    |70.03  |   8 | P   |    |$$REGISTER^RAMAG03|
"RTN","RAMAGU01",48,0)
 ;;|PROBSTAT    |74     |  25 |     |    |$$COMPLETE^RAMAG06|
"RTN","RAMAGU01",49,0)
 ;;|RAPROC      |70.03  |   2 |     |    |$$REGISTER^RAMAG03|
"RTN","RAMAGU01",50,0)
 ;;|RDPHARMS    |70.21  |     |  M  | 17 |$$EXAMINED^RAMAG07|
"RTN","RAMAGU01",51,0)
 ;;|  RDPH-ACDR |70.21  |   4 |   * | 19 |$$EXAMINED^RAMAG07|
"RTN","RAMAGU01",52,0)
 ;;|  RDPH-DOSE |70.21  |   7 |   * | 17 |$$EXAMINED^RAMAG07|
"RTN","RAMAGU01",53,0)
 ;;|  RDPH-DRUG |70.21  | .01 | P * | 17 |$$EXAMINED^RAMAG07|
"RTN","RAMAGU01",54,0)
 ;;|  RDPH-DTADM|70.21  |   8 | D * | 21 |$$EXAMINED^RAMAG07|
"RTN","RAMAGU01",55,0)
 ;;|  RDPH-DTDRW|70.21  |   5 | D * | 19 |$$EXAMINED^RAMAG07|
"RTN","RAMAGU01",56,0)
 ;;|  RDPH-FORM |70.21  |  15 |   * | 25 |$$EXAMINED^RAMAG07|
"RTN","RAMAGU01",57,0)
 ;;|  RDPH-LOTN |70.21  |  13 | P * | 24 |$$EXAMINED^RAMAG07|
"RTN","RAMAGU01",58,0)
 ;;|  RDPH-PWADM|70.21  |   9 | P * | 21 |$$EXAMINED^RAMAG07|
"RTN","RAMAGU01",59,0)
 ;;|  RDPH-PWMSD|70.21  |   6 | P * | 19 |$$EXAMINED^RAMAG07|
"RTN","RAMAGU01",60,0)
 ;;|  RDPH-ROUTE|70.21  |  11 | P * | 23 |$$EXAMINED^RAMAG07|
"RTN","RAMAGU01",61,0)
 ;;|  RDPH-SITE |70.21  |  12 | P * | 23 |$$EXAMINED^RAMAG07|
"RTN","RAMAGU01",62,0)
 ;;|  RDPH-VOL  |70.21  |  14 |   * | 25 |$$EXAMINED^RAMAG07|
"RTN","RAMAGU01",63,0)
 ;;|REPORT      |74     | 200 | W   | 11 |$$COMPLETE^RAMAG06|
"RTN","RAMAGU01",64,0)
 ;;|REQNATURE   |75.1   |  26 |     |    |   $$ORDER^RAMAG02|
"RTN","RAMAGU01",65,0)
 ;;|REQURG      |75.1   |   6 |     |    |   $$ORDER^RAMAG02|
"RTN","RAMAGU01",66,0)
 ;;|RPTDTE      |74     |   8 | D   |    |$$COMPLETE^RAMAG06|
"RTN","RAMAGU01",67,0)
 ;;|RPTSTATUS   |74     |   5 |     |    |$$COMPLETE^RAMAG06|
"RTN","RAMAGU01",68,0)
 ;;|SERVICE     |70.03  |   7 | P   |    |$$REGISTER^RAMAG03|
"RTN","RAMAGU01",69,0)
 ;;|SINGLERPT   |70.03  |  25 |     |    |$$REGISTER^RAMAG03|
"RTN","RAMAGU01",70,0)
 ;;|TECH        |70.12  | .01 | PM  |  1 |$$EXAMINED^RAMAG07|
"RTN","RAMAGU01",71,0)
 ;;|TECHCOMM    |70.07  |   4 |     |    |$$REGISTER^RAMAG03|
"RTN","RAMAGU01",72,0)
 ;;|TRANSCRST   |74     |  11 | P   |    |$$COMPLETE^RAMAG06|
"RTN","RAMAGU01",73,0)
 ;;|TRANSPMODE  |75.1   |  19 |     |    |   $$ORDER^RAMAG02|
"RTN","RAMAGU01",74,0)
 ;;|VERDTE      |74     |   7 | D   |    |$$COMPLETE^RAMAG06|
"RTN","RAMAGU01",75,0)
 ;;|VERPHYS     |74     |   9 | P   |    |$$COMPLETE^RAMAG06|
"RTN","RAMAGU01",76,0)
 ;;|WARD        |70.03  |   6 | P   |    |$$REGISTER^RAMAG03|
"RTN","RAMAGU01",77,0)
 ;;==========================================================
"RTN","RAMAGU01",78,0)
 ;
"RTN","RAMAGU01",79,0)
 ; Type          Field type that requires special processing:
"RTN","RAMAGU01",80,0)
 ;                 D - Date/time, M - Multiple,
"RTN","RAMAGU01",81,0)
 ;                 P - Pointer,   W - Word processing,
"RTN","RAMAGU01",82,0)
 ;                 * - Add this parameter to the "F" index
"RTN","RAMAGU01",83,0)
 ;                     (see the VEXAMND^RAMAGU14 for details).
"RTN","RAMAGU01",84,0)
 ;
"RTN","RAMAGU01",85,0)
 ; Req#          Number of the "^"-piece of the value returned by the
"RTN","RAMAGU01",86,0)
 ;               $$EXMSTREQ^RAMAGU06. It determines if a non-empty
"RTN","RAMAGU01",87,0)
 ;               field value is required.
"RTN","RAMAGU01",88,0)
 ;
"RTN","RAMAGU01",89,0)
 ; Reference     Indicates where the parameter is described for the
"RTN","RAMAGU01",90,0)
 ;               first time.
"RTN","RAMAGU01",91,0)
 ;   
"RTN","RAMAGU01",92,0)
 ; NOTE #1: This table is here not only for documentation purposes;
"RTN","RAMAGU01",93,0)
 ;          the data is processed by the LDMSPRMS^RAMAGU01 procedure.
"RTN","RAMAGU01",94,0)
 ;
"RTN","RAMAGU01",95,0)
 ; NOTE #2: If a parameter does not have the corresponding field
"RTN","RAMAGU01",96,0)
 ;          and has the "M" flag, then this is a record tag (e.g.
"RTN","RAMAGU01",97,0)
 ;          RDPHARMS). It encloses other parameters that define
"RTN","RAMAGU01",98,0)
 ;          field values for a record of the sub-file.
"RTN","RAMAGU01",99,0)
 ;
"RTN","RAMAGU01",100,0)
 Q
"RTN","RAMAGU01",101,0)
 ;
"RTN","RAMAGU01",102,0)
 ;***** PARSES RAMSC RECORDS (RPC) INTO RAMISC SUBSCRIPTS (API)
"RTN","RAMAGU01",103,0)
 ;
"RTN","RAMAGU01",104,0)
 ; .RAMSC        Reference to the RAMSC parameter of a remote
"RTN","RAMAGU01",105,0)
 ;               procedure.
"RTN","RAMAGU01",106,0)
 ;
"RTN","RAMAGU01",107,0)
 ; .RAMISC       Reference to a local variable that will store
"RTN","RAMAGU01",108,0)
 ;               miscellaneous parameters as subscripts (for API
"RTN","RAMAGU01",109,0)
 ;               functions).
"RTN","RAMAGU01",110,0)
 ;
"RTN","RAMAGU01",111,0)
 ; Return values:
"RTN","RAMAGU01",112,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU01",113,0)
 ;        0  Success
"RTN","RAMAGU01",114,0)
 ;
"RTN","RAMAGU01",115,0)
RPCMISC(RAMSC,RAMISC) ;
"RTN","RAMAGU01",116,0)
 N RAMSPSDEFS,RASRCI,RC
"RTN","RAMAGU01",117,0)
 K RAMISC  S RASRCI=""
"RTN","RAMAGU01",118,0)
 D LDMSPRMS(.RAMSPSDEFS)
"RTN","RAMAGU01",119,0)
 S RC=$$RPCMISC1("RAMISC")
"RTN","RAMAGU01",120,0)
 Q $S(RC>0:$$ERROR^RAERR(-5),1:RC)
"RTN","RAMAGU01",121,0)
 ;
"RTN","RAMAGU01",122,0)
 ;+++++ RECURSIVE PARSER OF RAMSC RECORDS
"RTN","RAMAGU01",123,0)
 ;
"RTN","RAMAGU01",124,0)
 ; DSTNODE       Node of the RAMISC where values will be stored.
"RTN","RAMAGU01",125,0)
 ;
"RTN","RAMAGU01",126,0)
 ; [RECNAME]     Tag name and index of the current record. They are
"RTN","RAMAGU01",127,0)
 ; [RECNDX]      used to detect the record boundaries.
"RTN","RAMAGU01",128,0)
 ;
"RTN","RAMAGU01",129,0)
 ; Input Variables:
"RTN","RAMAGU01",130,0)
 ;   RAMSC, RAMSPSDEFS, RASRCI
"RTN","RAMAGU01",131,0)
 ;
"RTN","RAMAGU01",132,0)
 ; Output Variables:
"RTN","RAMAGU01",133,0)
 ;   RAMISC, RASRCI
"RTN","RAMAGU01",134,0)
 ;
"RTN","RAMAGU01",135,0)
 ; Return values:
"RTN","RAMAGU01",136,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU01",137,0)
 ;        0  Success
"RTN","RAMAGU01",138,0)
 ;       >0  Number of validation errors
"RTN","RAMAGU01",139,0)
 ;
"RTN","RAMAGU01",140,0)
 ; NOTE: This is an internal entry point. Do not call
"RTN","RAMAGU01",141,0)
 ;       it from outside of this routine.
"RTN","RAMAGU01",142,0)
 ;
"RTN","RAMAGU01",143,0)
RPCMISC1(DSTNODE,RECNAME,RECNDX) ;
"RTN","RAMAGU01",144,0)
 N ERRCNT,NAME,NDX,RARC,TMP,TYPE
"RTN","RAMAGU01",145,0)
 S (ERRCNT,RARC)=0
"RTN","RAMAGU01",146,0)
 ;===
"RTN","RAMAGU01",147,0)
 F  S RASRCI=$O(RAMSC(RASRCI))  Q:RASRCI=""  D  Q:RARC
"RTN","RAMAGU01",148,0)
 . S NAME=$$TRIM^XLFSTR($P(RAMSC(RASRCI),U))  Q:NAME=""
"RTN","RAMAGU01",149,0)
 . S NDX=+$$TRIM^XLFSTR($P(RAMSC(RASRCI),U,2))
"RTN","RAMAGU01",150,0)
 . S TYPE=$P($G(RAMSPSDEFS("N",NAME)),U,3)
"RTN","RAMAGU01",151,0)
 . ;=== Single value
"RTN","RAMAGU01",152,0)
 . I NDX'>0  D  Q
"RTN","RAMAGU01",153,0)
 . . I $D(@DSTNODE@(NAME))#10  D  S ERRCNT=ERRCNT+1  Q
"RTN","RAMAGU01",154,0)
 . . . D ERROR^RAERR(-6,,NAME)
"RTN","RAMAGU01",155,0)
 . . ;--- Convert date/time value from HL7 (TS) to FileMan
"RTN","RAMAGU01",156,0)
 . . I TYPE["D"  D  Q
"RTN","RAMAGU01",157,0)
 . . . S @DSTNODE@(NAME)=$$HL7TFM^XLFDT($P(RAMSC(RASRCI),U,3))
"RTN","RAMAGU01",158,0)
 . . . I @DSTNODE@(NAME)<0  D  S ERRCNT=ERRCNT+1
"RTN","RAMAGU01",159,0)
 . . . . S TMP=$NA(@DSTNODE@(NAME))
"RTN","RAMAGU01",160,0)
 . . . . D ERROR^RAERR(-3,TMP_"='"_$P(RAMSC(RASRCI),U,3)_"'",TMP)
"RTN","RAMAGU01",161,0)
 . . ;--- Copy parameters of other types
"RTN","RAMAGU01",162,0)
 . . S @DSTNODE@(NAME)=$P(RAMSC(RASRCI),U,3,999)
"RTN","RAMAGU01",163,0)
 . ;=== Check for duplicate indexes
"RTN","RAMAGU01",164,0)
 . I $D(@DSTNODE@(NAME,NDX))  D  S ERRCNT=ERRCNT+1  Q
"RTN","RAMAGU01",165,0)
 . . D ERROR^RAERR(-7,,NDX,NAME)
"RTN","RAMAGU01",166,0)
 . ;=== Check for record start/end
"RTN","RAMAGU01",167,0)
 . I (TYPE["M"),$P($G(RAMSPSDEFS("N",NAME)),U,2)'>0  D  Q
"RTN","RAMAGU01",168,0)
 . . ;--- If the name is the same as that of the current record, then
"RTN","RAMAGU01",169,0)
 . . ;    this either the end of the current record or a beginning of
"RTN","RAMAGU01",170,0)
 . . ;--- the next record of the same kind (and on the same level).
"RTN","RAMAGU01",171,0)
 . . I NAME=$G(RECNAME)  D:NDX'=$G(RECNDX)  S RARC=1  Q
"RTN","RAMAGU01",172,0)
 . . . ;--- If the index is different from that of the current record,
"RTN","RAMAGU01",173,0)
 . . . ;    then this is a beginning of the next record. Let the
"RTN","RAMAGU01",174,0)
 . . . ;--- source line be re-processed on the upper execution level.
"RTN","RAMAGU01",175,0)
 . . . S RASRCI=$O(RAMSC(RASRCI),-1)
"RTN","RAMAGU01",176,0)
 . . ;--- Start processing field values of the record
"RTN","RAMAGU01",177,0)
 . . S TMP=$$RPCMISC1($NA(@DSTNODE@(NAME,NDX)),NAME,NDX)
"RTN","RAMAGU01",178,0)
 . . I TMP<0  S RARC=TMP  Q
"RTN","RAMAGU01",179,0)
 . . S:TMP>0 ERRCNT=ERRCNT+TMP
"RTN","RAMAGU01",180,0)
 . . S:RASRCI="" RARC=1
"RTN","RAMAGU01",181,0)
 . ;=== List item or text line
"RTN","RAMAGU01",182,0)
 . S @DSTNODE@(NAME,NDX)=$P(RAMSC(RASRCI),U,3,999)
"RTN","RAMAGU01",183,0)
 ;===
"RTN","RAMAGU01",184,0)
 Q $S(RARC<0:RARC,1:ERRCNT)
"RTN","RAMAGU02")
0^24^B33916082^n/a
"RTN","RAMAGU02",1,0)
RAMAGU02 ;HCIOFO/SG - ORDERS/EXAMS API (ORDER UTILITIES) ; 1/24/08 5:37pm
"RTN","RAMAGU02",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAGU02",3,0)
 ;
"RTN","RAMAGU02",4,0)
 Q
"RTN","RAMAGU02",5,0)
 ;
"RTN","RAMAGU02",6,0)
 ;##### RETURNS ORDER STATUS
"RTN","RAMAGU02",7,0)
 ;
"RTN","RAMAGU02",8,0)
 ; RAOIFN        IEN of the exam order in the RAD/NUC MED ORDERS
"RTN","RAMAGU02",9,0)
 ;               file (#75.1)
"RTN","RAMAGU02",10,0)
 ;
"RTN","RAMAGU02",11,0)
 ; Return Values:
"RTN","RAMAGU02",12,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU02",13,0)
 ;      ...  Internal and external values of the order status
"RTN","RAMAGU02",14,0)
 ;           separated by "^"
"RTN","RAMAGU02",15,0)
 ;
"RTN","RAMAGU02",16,0)
ORDSTAT(RAOIFN) ;
"RTN","RAMAGU02",17,0)
 N IENS,RABUF,RAMSG
"RTN","RAMAGU02",18,0)
 Q:$G(RAOIFN)'>0 $$IPVE^RAERR("RAOIFN")
"RTN","RAMAGU02",19,0)
 S IENS=(+RAOIFN)_","
"RTN","RAMAGU02",20,0)
 D GETS^DIQ(75.1,IENS,"5","EI","RABUF","RAMSG")
"RTN","RAMAGU02",21,0)
 Q:$G(DIERR) $$DBS^RAERR("RAMSG",-9,75.1,IENS)
"RTN","RAMAGU02",22,0)
 Q $G(RABUF(75.1,IENS,5,"I"))_U_$G(RABUF(75.1,IENS,5,"E"))
"RTN","RAMAGU02",23,0)
 ;
"RTN","RAMAGU02",24,0)
 ;***** PERFORMS ORDER STATUS 'ROLLBACK"
"RTN","RAMAGU02",25,0)
 ;
"RTN","RAMAGU02",26,0)
 ; RAOIFN        IEN of the exam order in the RAD/NUC MED ORDERS
"RTN","RAMAGU02",27,0)
 ;               file (#75.1)
"RTN","RAMAGU02",28,0)
 ;
"RTN","RAMAGU02",29,0)
 ; STATUS        Internal status value (see the REQUEST STATUS field
"RTN","RAMAGU02",30,0)
 ;               (5) of the file #75.1 and the NEW STATUS field (2)
"RTN","RAMAGU02",31,0)
 ;               of the sub-file #75.12).
"RTN","RAMAGU02",32,0)
 ; Return Values:
"RTN","RAMAGU02",33,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU02",34,0)
 ;        0  Success
"RTN","RAMAGU02",35,0)
 ;
"RTN","RAMAGU02",36,0)
OSTRLBCK(RAOIFN,STATUS) ;
"RTN","RAMAGU02",37,0)
 N RALOCK,RANODE,RARC,TMP
"RTN","RAMAGU02",38,0)
 Q:$G(RAOIFN)'>0 $$IPVE^RAERR("RAOIFN")
"RTN","RAMAGU02",39,0)
 Q:$G(STATUS)="" $$IPVE^RAERR("STATUS")
"RTN","RAMAGU02",40,0)
 S RAOIFN=+RAOIFN,RANODE=$$ROOT^DILFD(75.12,","_RAOIFN_",",1)
"RTN","RAMAGU02",41,0)
 S RARC=0
"RTN","RAMAGU02",42,0)
 ;
"RTN","RAMAGU02",43,0)
 ;--- Lock the order record
"RTN","RAMAGU02",44,0)
 K TMP  S TMP(75.1,RAOIFN_",")=""
"RTN","RAMAGU02",45,0)
 S RARC=$$LOCKFM^RALOCK(.TMP)
"RTN","RAMAGU02",46,0)
 Q:RARC $$LOCKERR^RAERR(RARC,"order")
"RTN","RAMAGU02",47,0)
 M RALOCK=TMP
"RTN","RAMAGU02",48,0)
 ;
"RTN","RAMAGU02",49,0)
 D
"RTN","RAMAGU02",50,0)
 . N $ESTACK,$ETRAP,DA,DIK,IENS,RAFDA,RAIEN,RAIENRS,RAMSG
"RTN","RAMAGU02",51,0)
 . ;--- Setup the error processing
"RTN","RAMAGU02",52,0)
 . D SETDEFEH^RAERR("RARC")
"RTN","RAMAGU02",53,0)
 . ;--- Find the latest record with requested status
"RTN","RAMAGU02",54,0)
 . S RAIENRS=" "
"RTN","RAMAGU02",55,0)
 . F  S RAIENRS=$O(@RANODE@(RAIENRS),-1)  Q:RAIENRS'>0  D  Q:TMP
"RTN","RAMAGU02",56,0)
 . . S TMP=RAIENRS_","_RAOIFN_","
"RTN","RAMAGU02",57,0)
 . . S TMP=($$GET1^DIQ(75.12,TMP,2,"I",,"RAMSG")=STATUS)
"RTN","RAMAGU02",58,0)
 . ;--- If the requested status is not found in the multiple,
"RTN","RAMAGU02",59,0)
 . ;--- use the regular status update function to fix it.
"RTN","RAMAGU02",60,0)
 . I RAIENRS'>0  S RARC=$$UPDORDST(RAOIFN,STATUS)  Q
"RTN","RAMAGU02",61,0)
 . ;--- Delete record(s) from the multiple
"RTN","RAMAGU02",62,0)
 . S DIK=$$OREF^DILF(RANODE),RAIEN=" "
"RTN","RAMAGU02",63,0)
 . F  S RAIEN=$O(@RANODE@(RAIEN),-1)  Q:RAIEN'>RAIENRS  D
"RTN","RAMAGU02",64,0)
 . . S DA(1)=RAOIFN,DA=RAIEN  D ^DIK
"RTN","RAMAGU02",65,0)
 . ;--- Update status and cancel/hold reason
"RTN","RAMAGU02",66,0)
 . S IENS=RAOIFN_","
"RTN","RAMAGU02",67,0)
 . S RAFDA(75.1,IENS,5)=STATUS
"RTN","RAMAGU02",68,0)
 . S TMP=$$GET1^DIQ(75.12,RAIENRS_","_IENS,4,"I",,"RAMSG")
"RTN","RAMAGU02",69,0)
 . S RAFDA(75.1,IENS,10)=$S('$G(DIERR):TMP,1:"")
"RTN","RAMAGU02",70,0)
 . D FILE^DIE(,"RAFDA","RAMSG")
"RTN","RAMAGU02",71,0)
 . S:$G(DIERR) RARC=$$DBS^RAERR("RAMSG",-9,75.12,RAIENRS_",")
"RTN","RAMAGU02",72,0)
 ;
"RTN","RAMAGU02",73,0)
 ;--- Error handling and cleanup
"RTN","RAMAGU02",74,0)
 D UNLOCKFM^RALOCK(.RALOCK)
"RTN","RAMAGU02",75,0)
 Q $S(RARC<0:RARC,1:0)
"RTN","RAMAGU02",76,0)
 ;
"RTN","RAMAGU02",77,0)
 ;***** UPDATES THE ORDER/REQUEST STATUS
"RTN","RAMAGU02",78,0)
 ;
"RTN","RAMAGU02",79,0)
 ; RAOIFN        IEN of the exam order in the RAD/NUC MED ORDERS
"RTN","RAMAGU02",80,0)
 ;               file (#75.1)
"RTN","RAMAGU02",81,0)
 ;
"RTN","RAMAGU02",82,0)
 ; STATUS        Internal status value (see the REQUEST STATUS field
"RTN","RAMAGU02",83,0)
 ;               (5) of the file #75.1 and the NEW STATUS field (2)
"RTN","RAMAGU02",84,0)
 ;               of the sub-file #75.12).
"RTN","RAMAGU02",85,0)
 ;
"RTN","RAMAGU02",86,0)
 ; [REASON]      Cancel/Hold reason: either IEN of a record of
"RTN","RAMAGU02",87,0)
 ;               the RAD/NUC MED REASON file (#75.2) or a valid
"RTN","RAMAGU02",88,0)
 ;               synonym (see SYNONYM field (3) of that file).
"RTN","RAMAGU02",89,0)
 ;
"RTN","RAMAGU02",90,0)
 ;               This parameter is required if STATUS=1 or STATUS=3.
"RTN","RAMAGU02",91,0)
 ;
"RTN","RAMAGU02",92,0)
 ;               The referenced record must have the appropriate
"RTN","RAMAGU02",93,0)
 ;               type of reason (see TYPE OF REASON field (2) of
"RTN","RAMAGU02",94,0)
 ;               the file #75.2): CANCEL REQUEST (1) if STATUS=1,
"RTN","RAMAGU02",95,0)
 ;               HOLD REQUEST (3) if STATUS=3, or GENERAL REQUEST (9)
"RTN","RAMAGU02",96,0)
 ;               in both cases.
"RTN","RAMAGU02",97,0)
 ;
"RTN","RAMAGU02",98,0)
 ; [SCDT]        Internal date value (FileMan) for the STATUS CHANGE
"RTN","RAMAGU02",99,0)
 ;               DATE/TIME field (.01) of the sub-file #75.12. If
"RTN","RAMAGU02",100,0)
 ;               this parameter is not defined or not greater than 0, 
"RTN","RAMAGU02",101,0)
 ;               then the current date/time is used.
"RTN","RAMAGU02",102,0)
 ;
"RTN","RAMAGU02",103,0)
 ; Return Values:
"RTN","RAMAGU02",104,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU02",105,0)
 ;        0  Order already has the requested status
"RTN","RAMAGU02",106,0)
 ;       >0  IEN of the new status sub-record in sub-file #75.12
"RTN","RAMAGU02",107,0)
 ;
"RTN","RAMAGU02",108,0)
UPDORDST(RAOIFN,STATUS,REASON,SCDT) ;
"RTN","RAMAGU02",109,0)
 N IENS,RAFDA,RAIENS,RALOCK,RAMSG,RAOSTS,RARC,RTYPE,SCEDT,TMP
"RTN","RAMAGU02",110,0)
 Q:$G(RAOIFN)'>0 $$IPVE^RAERR("RAOIFN")
"RTN","RAMAGU02",111,0)
 Q:$G(STATUS)="" $$IPVE^RAERR("STATUS")
"RTN","RAMAGU02",112,0)
 S RARC=0,RAOIFN=+RAOIFN
"RTN","RAMAGU02",113,0)
 ;
"RTN","RAMAGU02",114,0)
 ;=== Check the Cancel/Hold reason
"RTN","RAMAGU02",115,0)
 I (STATUS=1)!(STATUS=3)  D  Q:RARC<0 RARC
"RTN","RAMAGU02",116,0)
 . ;--- Variable for the EN^RABUL, which is called from the
"RTN","RAMAGU02",117,0)
 . ;    input transform of the REQUEST STATUS field (5) of
"RTN","RAMAGU02",118,0)
 . ;--- the RAD/NUC MED ORDERS file (#75.1)
"RTN","RAMAGU02",119,0)
 . S RAOSTS=STATUS
"RTN","RAMAGU02",120,0)
 . ;--- Check if it has a value
"RTN","RAMAGU02",121,0)
 . I $G(REASON)=""  S RARC=$$ERROR^RAERR(-8,,"REASON")  Q
"RTN","RAMAGU02",122,0)
 . ;--- Get the IEN and type of the reason
"RTN","RAMAGU02",123,0)
 . S RARC=$$RARSNIEN^RAMAGU13(REASON,.RTYPE)  Q:RARC<0
"RTN","RAMAGU02",124,0)
 . S REASON="`"_(+RARC)  ; Pseudo-external value
"RTN","RAMAGU02",125,0)
 . ;--- Check the type of reason
"RTN","RAMAGU02",126,0)
 . S TMP=+RTYPE
"RTN","RAMAGU02",127,0)
 . I TMP'=STATUS,TMP'=9  D  Q
"RTN","RAMAGU02",128,0)
 . . S RARC=$$ERROR^RAERR(-16,,+RTYPE,STATUS)
"RTN","RAMAGU02",129,0)
 E  S REASON=""
"RTN","RAMAGU02",130,0)
 ;
"RTN","RAMAGU02",131,0)
 ;=== Check the date/time
"RTN","RAMAGU02",132,0)
 I $G(SCDT)>0  D  Q:RARC<0 RARC
"RTN","RAMAGU02",133,0)
 . S TMP=+$E(SCDT,1,12),SCEDT=$$FMTE^XLFDT(TMP)
"RTN","RAMAGU02",134,0)
 . S:(SCEDT=TMP)!(SCEDT="") RARC=$$IPVE^RAERR("SCDT")
"RTN","RAMAGU02",135,0)
 E  S SCEDT="NOW"
"RTN","RAMAGU02",136,0)
 ;
"RTN","RAMAGU02",137,0)
 ;=== Prepare the data
"RTN","RAMAGU02",138,0)
 S IENS=RAOIFN_","
"RTN","RAMAGU02",139,0)
 S RAFDA(75.1,IENS,5)=STATUS               ; REQUEST STATUS
"RTN","RAMAGU02",140,0)
 S RAFDA(75.1,IENS,10)=REASON              ; REASON
"RTN","RAMAGU02",141,0)
 S RAFDA(75.1,IENS,18)="NOW"               ; LAST ACTIVITY DATE/TIME
"RTN","RAMAGU02",142,0)
 S:STATUS'=3 RAFDA(75.1,IENS,25)="@"       ; HOLD DESCRIPTION
"RTN","RAMAGU02",143,0)
 S IENS="+1,"_IENS
"RTN","RAMAGU02",144,0)
 S RAFDA(75.12,IENS,.01)=SCEDT             ; REQUEST STATUS TIMES
"RTN","RAMAGU02",145,0)
 S RAFDA(75.12,IENS,2)=STATUS              ; NEW STATUS
"RTN","RAMAGU02",146,0)
 S RAFDA(75.12,IENS,3)="`"_(+DUZ)          ; COMPUTER USER
"RTN","RAMAGU02",147,0)
 S RAFDA(75.12,IENS,4)=REASON              ; REASON
"RTN","RAMAGU02",148,0)
 ;
"RTN","RAMAGU02",149,0)
 ;=== Lock the order record
"RTN","RAMAGU02",150,0)
 K TMP  S TMP(75.1,RAOIFN_",")=""
"RTN","RAMAGU02",151,0)
 S RARC=$$LOCKFM^RALOCK(.TMP)
"RTN","RAMAGU02",152,0)
 Q:RARC $$LOCKERR^RAERR(RARC,"order")
"RTN","RAMAGU02",153,0)
 M RALOCK=TMP
"RTN","RAMAGU02",154,0)
 ;
"RTN","RAMAGU02",155,0)
 D
"RTN","RAMAGU02",156,0)
 . N $ESTACK,$ETRAP
"RTN","RAMAGU02",157,0)
 . ;=== Setup the error processing
"RTN","RAMAGU02",158,0)
 . D SETDEFEH^RAERR("RARC")
"RTN","RAMAGU02",159,0)
 . ;
"RTN","RAMAGU02",160,0)
 . ;=== Check if the order currently has the same status
"RTN","RAMAGU02",161,0)
 . S TMP=$$GET1^DIQ(75.1,RAOIFN_",",5,"I",,"RAMSG")
"RTN","RAMAGU02",162,0)
 . I $G(DIERR)  S RARC=$$DBS^RAERR("RAMSG",-9,75.1,RAOIFN_",")  Q
"RTN","RAMAGU02",163,0)
 . I STATUS=TMP  S RARC=0  D  Q:RARC
"RTN","RAMAGU02",164,0)
 . . ;--- Check if the last record of the REQUEST STATUS TIMES
"RTN","RAMAGU02",165,0)
 . . ;--- multiple indicates the same status as the requested one
"RTN","RAMAGU02",166,0)
 . . S IENS=+$O(^RAO(75.1,RAOIFN,"T"," "),-1)  Q:IENS'>0
"RTN","RAMAGU02",167,0)
 . . S IENS=IENS_","_RAOIFN_","
"RTN","RAMAGU02",168,0)
 . . S TMP=$$GET1^DIQ(75.12,IENS,2,"I",,"RAMSG")
"RTN","RAMAGU02",169,0)
 . . I $G(DIERR)  S RARC=$$DBS^RAERR("RAMSG",-9,75.12,IENS)  Q
"RTN","RAMAGU02",170,0)
 . . S RARC=(TMP=STATUS)
"RTN","RAMAGU02",171,0)
 . ;
"RTN","RAMAGU02",172,0)
 . ;=== Update the record
"RTN","RAMAGU02",173,0)
 . D UPDATE^DIE("E","RAFDA","RAIENS","RAMSG")
"RTN","RAMAGU02",174,0)
 . S:$G(DIERR) RARC=$$DBS^RAERR("RAMSG",-9,75.12,IENS)
"RTN","RAMAGU02",175,0)
 ;
"RTN","RAMAGU02",176,0)
 ;=== Error handling and cleanup
"RTN","RAMAGU02",177,0)
 D UNLOCKFM^RALOCK(.RALOCK)
"RTN","RAMAGU02",178,0)
 Q $S(RARC<0:RARC,1:+$G(RAIENS(1)))
"RTN","RAMAGU03")
0^25^B12380535^n/a
"RTN","RAMAGU03",1,0)
RAMAGU03 ;HCIOFO/SG - ORDERS/EXAMS API (PROCEDURE UTILITIES) ; 2/24/09 3:44pm
"RTN","RAMAGU03",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAGU03",3,0)
 ;
"RTN","RAMAGU03",4,0)
 Q
"RTN","RAMAGU03",5,0)
 ;
"RTN","RAMAGU03",6,0)
 ;***** CHECKS RADIOLOGY PROCEDURE AND MODIFIERS
"RTN","RAMAGU03",7,0)
 ;
"RTN","RAMAGU03",8,0)
 ; RAPROC        Radiology procedure and modifiers
"RTN","RAMAGU03",9,0)
 ;                 ^01: Procedure IEN in file #71
"RTN","RAMAGU03",10,0)
 ;                 ^02: Optional procedure modifiers (IENs in
"RTN","RAMAGU03",11,0)
 ;                 ...  the PROCEDURE MODIFIERS file (#71.2))
"RTN","RAMAGU03",12,0)
 ;                 ^nn:
"RTN","RAMAGU03",13,0)
 ;
"RTN","RAMAGU03",14,0)
 ; RAIMGTYI      Imaging type IEN (file #79.2) of the order/exam.
"RTN","RAMAGU03",15,0)
 ;
"RTN","RAMAGU03",16,0)
 ; RADTE         Date for procedure status check (active/inactive).
"RTN","RAMAGU03",17,0)
 ;
"RTN","RAMAGU03",18,0)
 ; [PROCTYPE]    If this parameter is defined and has a non-empty
"RTN","RAMAGU03",19,0)
 ;               value, then only referenced types of procedures
"RTN","RAMAGU03",20,0)
 ;               are allowed (see the TYPE OF PROCEDURE field (6)
"RTN","RAMAGU03",21,0)
 ;               of the RAD/NUC MED PROCEDURES file (#71) for more
"RTN","RAMAGU03",22,0)
 ;               details).
"RTN","RAMAGU03",23,0)
 ;
"RTN","RAMAGU03",24,0)
 ;                 B  Broad
"RTN","RAMAGU03",25,0)
 ;                 D  Detailed
"RTN","RAMAGU03",26,0)
 ;                 P  Parent
"RTN","RAMAGU03",27,0)
 ;                 S  Series
"RTN","RAMAGU03",28,0)
 ;
"RTN","RAMAGU03",29,0)
 ;               For example, "BD" will allow 'broad' or 'detailed'
"RTN","RAMAGU03",30,0)
 ;               procedures but exclude 'series' and 'parent' ones.
"RTN","RAMAGU03",31,0)
 ;
"RTN","RAMAGU03",32,0)
 ;               By default ($G(PROCTYPE)=""), all procedures are
"RTN","RAMAGU03",33,0)
 ;               allowed.
"RTN","RAMAGU03",34,0)
 ;
"RTN","RAMAGU03",35,0)
 ; Return values:
"RTN","RAMAGU03",36,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU03",37,0)
 ;        0  Procedure and modifiers are valid
"RTN","RAMAGU03",38,0)
 ;
"RTN","RAMAGU03",39,0)
CHKPROC(RAPROC,RAIMGTYI,RADTE,PROCTYPE) ;
"RTN","RAMAGU03",40,0)
 N ERRCNT,I,IENS,L,RABUF,RAMSG,RAINFO,RAMINFO,RC,TMP
"RTN","RAMAGU03",41,0)
 S ERRCNT=0,RAINFO="Procedure IEN: "_(+RAPROC)
"RTN","RAMAGU03",42,0)
 ;
"RTN","RAMAGU03",43,0)
 ;=== Radiology procedure IEN
"RTN","RAMAGU03",44,0)
 I RAPROC>0  S RC=0  D  S:RC<0 ERRCNT=ERRCNT+1
"RTN","RAMAGU03",45,0)
 . S IENS=(+RAPROC)_","
"RTN","RAMAGU03",46,0)
 . D GETS^DIQ(71,IENS,".01;6;12;100","I","RABUF","RAMSG")
"RTN","RAMAGU03",47,0)
 . I $G(DIERR)  S RC=$$DBS^RAERR("RAMSG",-9,71,IENS)  Q
"RTN","RAMAGU03",48,0)
 . S TMP=$G(RABUF(71,IENS,.01,"I"))
"RTN","RAMAGU03",49,0)
 . S:TMP'="" RAINFO="Procedure: '"_TMP_"' (IEN="_(+RAPROC)_")"
"RTN","RAMAGU03",50,0)
 . ;--- Imaging type IEN
"RTN","RAMAGU03",51,0)
 . S TMP=+$G(RABUF(71,IENS,12,"I"))
"RTN","RAMAGU03",52,0)
 . I TMP'>0  S RC=$$ERROR^RAERR(-19,,71,IENS,12)  Q
"RTN","RAMAGU03",53,0)
 . ;--- Check if the procedure has required imaging type
"RTN","RAMAGU03",54,0)
 . I TMP'=RAIMGTYI  S RC=$$ERROR^RAERR(-12)  Q
"RTN","RAMAGU03",55,0)
 . ;--- Check if the procedure is/was active on requested date
"RTN","RAMAGU03",56,0)
 . S TMP=$G(RABUF(71,IENS,100,"I"))\1
"RTN","RAMAGU03",57,0)
 . I TMP>0,TMP<(RADTE\1)  D  Q
"RTN","RAMAGU03",58,0)
 . . S RC=$$ERROR^RAERR(-17,,$$FMTE^XLFDT(RADTE))
"RTN","RAMAGU03",59,0)
 . ;--- Check the procedure type if necessary
"RTN","RAMAGU03",60,0)
 . D:$G(PROCTYPE)'=""
"RTN","RAMAGU03",61,0)
 . . S TMP=$G(RABUF(71,IENS,6,"I"))
"RTN","RAMAGU03",62,0)
 . . I TMP'=""  Q:PROCTYPE[TMP
"RTN","RAMAGU03",63,0)
 . . S RC=$$ERROR^RAERR(-18,,TMP)
"RTN","RAMAGU03",64,0)
 E  D ERROR^RAERR(-21,,$P(RAPROC,U))  S ERRCNT=ERRCNT+1
"RTN","RAMAGU03",65,0)
 ;
"RTN","RAMAGU03",66,0)
 ;=== Procedure modifier IENs
"RTN","RAMAGU03",67,0)
 S L=$L(RAPROC,U)
"RTN","RAMAGU03",68,0)
 F I=2:1:L  S TMP=$P(RAPROC,U,I),RC=0  D  S:RC<0 ERRCNT=ERRCNT+1
"RTN","RAMAGU03",69,0)
 . Q:TMP=""
"RTN","RAMAGU03",70,0)
 . I TMP'>0  S RC=$$ERROR^RAERR(-22,,TMP)  Q
"RTN","RAMAGU03",71,0)
 . S IENS=(+TMP)_",",TMP=$$GET1^DIQ(71.2,IENS,.01,,,"RAMSG")
"RTN","RAMAGU03",72,0)
 . I $G(DIERR)  S RC=$$DBS^RAERR("RAMSG",-9,71.2,IENS)  Q
"RTN","RAMAGU03",73,0)
 . I TMP=""  S RC=$$ERROR^RAERR(-19,,71.2,IENS,.01)  Q
"RTN","RAMAGU03",74,0)
 . S RAMINFO="Procedure modifier: '"_TMP_"' (IEN="_(+IENS)_")"
"RTN","RAMAGU03",75,0)
 . ;--- Check the imaging type
"RTN","RAMAGU03",76,0)
 . I $O(^RAMIS(71.2,"AB",RAIMGTYI,+IENS,0))'>0  D  Q
"RTN","RAMAGU03",77,0)
 . . S RC=$$ERROR^RAERR(-39,RAMINFO)
"RTN","RAMAGU03",78,0)
 ;
"RTN","RAMAGU03",79,0)
 ;===
"RTN","RAMAGU03",80,0)
 Q $S(ERRCNT>0:$$ERROR^RAERR(-20,RAINFO),1:0)
"RTN","RAMAGU03",81,0)
 ;
"RTN","RAMAGU03",82,0)
 ;***** TRANSLATES A PARENT PROCEDURE INTO THE LIST OF DESCENDENTS
"RTN","RAMAGU03",83,0)
 ;
"RTN","RAMAGU03",84,0)
 ; RAPIEN        IEN of a Radiology procedure in file #71
"RTN","RAMAGU03",85,0)
 ;
"RTN","RAMAGU03",86,0)
 ; .RAPLST       Reference to a local array where IENs and names
"RTN","RAMAGU03",87,0)
 ;               of descendent procedures are returned to:
"RTN","RAMAGU03",88,0)
 ;                 RAPLST(Seq#)=IEN^Name
"RTN","RAMAGU03",89,0)
 ;
"RTN","RAMAGU03",90,0)
 ; [.SNGLRPT]    Reference to a local variable that will reflect the
"RTN","RAMAGU03",91,0)
 ;               value of the SINGLE REPORT field (18) of the parent
"RTN","RAMAGU03",92,0)
 ;               procedure (1 for YES, 0 otherwise).
"RTN","RAMAGU03",93,0)
 ;
"RTN","RAMAGU03",94,0)
 ; Return values:
"RTN","RAMAGU03",95,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU03",96,0)
 ;        0  Procedure defined by the RAPIEN is not a parent one
"RTN","RAMAGU03",97,0)
 ;       >0  Number of descendents in the RAPLST array
"RTN","RAMAGU03",98,0)
 ;
"RTN","RAMAGU03",99,0)
DESCPLST(RAPIEN,RAPLST,SNGLRPT) ;
"RTN","RAMAGU03",100,0)
 N CNT,IENS,RABUF,RAMSG,RC,TMP
"RTN","RAMAGU03",101,0)
 K RAPLST  S SNGLRPT=0
"RTN","RAMAGU03",102,0)
 ;--- Get the procedure data
"RTN","RAMAGU03",103,0)
 S IENS=RAPIEN_","
"RTN","RAMAGU03",104,0)
 D GETS^DIQ(71,IENS,"6;18;300*","IE","RABUF","RAMSG")
"RTN","RAMAGU03",105,0)
 Q:$G(DIERR) $$DBS^RAERR("RAMSG",-9,71,IENS)
"RTN","RAMAGU03",106,0)
 ;--- Quit if not a "parent" procedure
"RTN","RAMAGU03",107,0)
 Q:$G(RABUF(71,IENS,6,"I"))'="P" 0
"RTN","RAMAGU03",108,0)
 ;--- Single report
"RTN","RAMAGU03",109,0)
 S:$G(RABUF(71,IENS,18,"I"))="Y" SNGLRPT=1
"RTN","RAMAGU03",110,0)
 ;--- Compile the list of descendents
"RTN","RAMAGU03",111,0)
 S IENS="",CNT=0
"RTN","RAMAGU03",112,0)
 F  S IENS=$O(RABUF(71.05,IENS))  Q:IENS=""  D
"RTN","RAMAGU03",113,0)
 . S TMP=+$G(RABUF(71.05,IENS,.01,"I"))
"RTN","RAMAGU03",114,0)
 . I TMP'>0  S RC=$$ERROR^RAERR(-19,,71.05,IENS,.01)  Q
"RTN","RAMAGU03",115,0)
 . S CNT=CNT+1
"RTN","RAMAGU03",116,0)
 . S RAPLST(CNT)=TMP_U_$G(RABUF(71.05,IENS,.01,"E"))
"RTN","RAMAGU03",117,0)
 ;---
"RTN","RAMAGU03",118,0)
 Q CNT
"RTN","RAMAGU04")
0^26^B18351920^n/a
"RTN","RAMAGU04",1,0)
RAMAGU04 ;HCIOFO/SG - ORDERS/EXAMS API (EXAM UTILITIES) ; 8/18/08 10:16am
"RTN","RAMAGU04",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAGU04",3,0)
 ;
"RTN","RAMAGU04",4,0)
 Q
"RTN","RAMAGU04",5,0)
 ;
"RTN","RAMAGU04",6,0)
 ;***** CONSTRUCTS THE SITE ACCESSION NUMBER
"RTN","RAMAGU04",7,0)
 ;
"RTN","RAMAGU04",8,0)
 ; RADTE         Exam date   (.01 field of the sub-file #70.02)
"RTN","RAMAGU04",9,0)
 ;
"RTN","RAMAGU04",10,0)
 ; RACN          Case number (.01 field of the sub-file #70.03)
"RTN","RAMAGU04",11,0)
 ;
"RTN","RAMAGU04",12,0)
 ; [FLAGS]       Flags that control the execution (can be combined):
"RTN","RAMAGU04",13,0)
 ;
"RTN","RAMAGU04",14,0)
 ;                 S  Return the short accession number: MMDDYY-NNNNN.
"RTN","RAMAGU04",15,0)
 ;                    By default, the long version (SSS-MMDDYY-NNNNN)
"RTN","RAMAGU04",16,0)
 ;                    is returned.
"RTN","RAMAGU04",17,0)
 ;
"RTN","RAMAGU04",18,0)
ACCNUM(RADTE,RACN,FLAGS) ;
"RTN","RAMAGU04",19,0)
 N RAD  S RAD=$E(RADTE,4,7)_$E(RADTE,2,3)_"-"_(+RACN)  ; mmddyy-case#
"RTN","RAMAGU04",20,0)
 Q:$G(FLAGS)["S" RAD
"RTN","RAMAGU04",21,0)
 Q $E($P($$NS^XUAF4($$KSP^XUPARAM("INST")),U,2),1,3)_"-"_RAD
"RTN","RAMAGU04",22,0)
 ;
"RTN","RAMAGU04",23,0)
 ;***** CHECKS EXAMINATION IDENTIFIERS
"RTN","RAMAGU04",24,0)
 ;
"RTN","RAMAGU04",25,0)
 ; RACASE        Examination identifiers
"RTN","RAMAGU04",26,0)
 ;                 ^01: IEN of the patient in the file #70    (RADFN)
"RTN","RAMAGU04",27,0)
 ;                 ^02: IEN in the REGISTERED EXAMS multiple  (RADTI)
"RTN","RAMAGU04",28,0)
 ;                 ^03: IEN in the EXAMINATIONS multiple      (RACNI)
"RTN","RAMAGU04",29,0)
 ;
"RTN","RAMAGU04",30,0)
 ; [RAPRMNM]     Parameter name inserted into the error message.
"RTN","RAMAGU04",31,0)
 ;               By default ($G(RAPRMNM)=""), "RACASE" is assumed.
"RTN","RAMAGU04",32,0)
 ;
"RTN","RAMAGU04",33,0)
 ; Return Values:
"RTN","RAMAGU04",34,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU04",35,0)
 ;        0  Success
"RTN","RAMAGU04",36,0)
 ;
"RTN","RAMAGU04",37,0)
CHKEXMID(RACASE,RAPRMNM) ;
"RTN","RAMAGU04",38,0)
 N NODE,RC
"RTN","RAMAGU04",39,0)
 S:$G(RAPRMNM)="" RAPRMNM="RACASE"
"RTN","RAMAGU04",40,0)
 ;--- Check the IDs
"RTN","RAMAGU04",41,0)
 S RC=(RACASE'>0)!($P(RACASE,U,2)'>0)!($P(RACASE,U,3)'>0)
"RTN","RAMAGU04",42,0)
 Q:RC $$ERROR^RAERR(-3,RAPRMNM_"='"_RACASE_"'",RAPRMNM)
"RTN","RAMAGU04",43,0)
 ;--- Check if the case exists
"RTN","RAMAGU04",44,0)
 S NODE=$$ROOT^DILFD(70.03,","_$P(RACASE,U,2)_","_$P(RACASE,U)_",",1)
"RTN","RAMAGU04",45,0)
 Q:'$D(@NODE@($P(RACASE,U,3),0)) $$ERROR^RAERR(-25,,RAPRMNM)
"RTN","RAMAGU04",46,0)
 ;--- Success
"RTN","RAMAGU04",47,0)
 Q 0
"RTN","RAMAGU04",48,0)
 ;
"RTN","RAMAGU04",49,0)
 ;***** CONSTRUCTS THE DAY-CASE EXAM IDENTIFIER
"RTN","RAMAGU04",50,0)
 ;
"RTN","RAMAGU04",51,0)
 ; RADTE         Exam date   (.01 field of the sub-file #70.02)
"RTN","RAMAGU04",52,0)
 ;
"RTN","RAMAGU04",53,0)
 ; RACN          Case number (.01 field of the sub-file #70.03)
"RTN","RAMAGU04",54,0)
 ;
"RTN","RAMAGU04",55,0)
 ; Return Values:
"RTN","RAMAGU04",56,0)
 ;           MMDDYY-Case#
"RTN","RAMAGU04",57,0)
 ;
"RTN","RAMAGU04",58,0)
DAYCASE(RADTE,RACN) ;
"RTN","RAMAGU04",59,0)
 Q $E(+RADTE,4,7)_$E(+RADTE,2,3)_"-"_(+RACN)
"RTN","RAMAGU04",60,0)
 ;
"RTN","RAMAGU04",61,0)
 ;***** CONVERTS EXAM IDENTIFIERS INTO THE EXAM IENS
"RTN","RAMAGU04",62,0)
 ;
"RTN","RAMAGU04",63,0)
 ; RACASE        Examination identifiers
"RTN","RAMAGU04",64,0)
 ;                 ^01: IEN of the patient in the file #70    (RADFN)
"RTN","RAMAGU04",65,0)
 ;                 ^02: IEN in the REGISTERED EXAMS multiple  (RADTI)
"RTN","RAMAGU04",66,0)
 ;                 ^03: IEN in the EXAMINATIONS multiple      (RACNI)
"RTN","RAMAGU04",67,0)
 ;
"RTN","RAMAGU04",68,0)
EXAMIENS(RACASE) ;
"RTN","RAMAGU04",69,0)
 Q $P(RACASE,U,3)_","_$P(RACASE,U,2)_","_$P(RACASE,U)_","
"RTN","RAMAGU04",70,0)
 ;
"RTN","RAMAGU04",71,0)
 ;***** RETURNS THE EXAM GLOBAL NODE
"RTN","RAMAGU04",72,0)
 ;
"RTN","RAMAGU04",73,0)
 ; RACASE        Examination identifiers
"RTN","RAMAGU04",74,0)
 ;                 ^01: IEN of the patient in the file #70    (RADFN)
"RTN","RAMAGU04",75,0)
 ;                 ^02: IEN in the REGISTERED EXAMS multiple  (RADTI)
"RTN","RAMAGU04",76,0)
 ;                 ^03: IEN in the EXAMINATIONS multiple      (RACNI)
"RTN","RAMAGU04",77,0)
 ;
"RTN","RAMAGU04",78,0)
EXAMNODE(RACASE) ;
"RTN","RAMAGU04",79,0)
 N IENS,NODE
"RTN","RAMAGU04",80,0)
 S IENS=$$EXAMIENS(RACASE),$P(IENS,",")=""
"RTN","RAMAGU04",81,0)
 S NODE=$$ROOT^DILFD(70.03,IENS,1)
"RTN","RAMAGU04",82,0)
 Q $NA(@NODE@($P(RACASE,U,3)))
"RTN","RAMAGU04",83,0)
 ;
"RTN","RAMAGU04",84,0)
 ;***** LOADS EXAM PROPERTIES AND INITIALIZES VARIABLES
"RTN","RAMAGU04",85,0)
 ;
"RTN","RAMAGU04",86,0)
 ; RAIENS        IENS of the exam record in the EXAMINATIONS multiple
"RTN","RAMAGU04",87,0)
 ;               (50) of the RAD/NUC MED PATIENT file (#70).
"RTN","RAMAGU04",88,0)
 ;
"RTN","RAMAGU04",89,0)
 ; Output variables:
"RTN","RAMAGU04",90,0)
 ;   RACN, RADTE, RAIMGTYI
"RTN","RAMAGU04",91,0)
 ;
"RTN","RAMAGU04",92,0)
 ; Return Values:
"RTN","RAMAGU04",93,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU04",94,0)
 ;        0  Ok
"RTN","RAMAGU04",95,0)
 ;
"RTN","RAMAGU04",96,0)
EXAMVARS(RAIENS) ;
"RTN","RAMAGU04",97,0)
 N IENS,RABUF,RAMSG
"RTN","RAMAGU04",98,0)
 ;=== Data from the REGISTERED EXAMS multiple
"RTN","RAMAGU04",99,0)
 S IENS=$P(RAIENS,",",2,4)
"RTN","RAMAGU04",100,0)
 D GETS^DIQ(70.02,IENS,".01;2","I","RABUF","RAMSG")
"RTN","RAMAGU04",101,0)
 Q:$G(DIERR) $$DBS^RAERR("RAMSG",-9,70.02,IENS)
"RTN","RAMAGU04",102,0)
 ;--- Exam date
"RTN","RAMAGU04",103,0)
 S RADTE=+$G(RABUF(70.02,IENS,.01,"I"))
"RTN","RAMAGU04",104,0)
 Q:RADTE'>0 $$ERROR^RAERR(-19,,70.02,IENS,.01)
"RTN","RAMAGU04",105,0)
 ;--- Imaging type IEN
"RTN","RAMAGU04",106,0)
 S RAIMGTYI=+$G(RABUF(70.02,IENS,2,"I"))
"RTN","RAMAGU04",107,0)
 Q:RAIMGTYI'>0 $$ERROR^RAERR(-19,,70.02,IENS,2)
"RTN","RAMAGU04",108,0)
 ;
"RTN","RAMAGU04",109,0)
 ;=== Data from the EXAMINATIONS multiple
"RTN","RAMAGU04",110,0)
 D GETS^DIQ(70.03,RAIENS,".01","I","RABUF","RAMSG")
"RTN","RAMAGU04",111,0)
 Q:$G(DIERR) $$DBS^RAERR("RAMSG",-9,70.03,RAIENS)
"RTN","RAMAGU04",112,0)
 ;--- Case number
"RTN","RAMAGU04",113,0)
 S RACN=$G(RABUF(70.03,RAIENS,.01,"I"))
"RTN","RAMAGU04",114,0)
 Q:RACN'>0 $$ERROR^RAERR(-19,,70.03,RAIENS,.01)
"RTN","RAMAGU04",115,0)
 ;
"RTN","RAMAGU04",116,0)
 ;=== Success
"RTN","RAMAGU04",117,0)
 Q 0
"RTN","RAMAGU04",118,0)
 ;
"RTN","RAMAGU04",119,0)
 ;***** RETURNS 'INVERTED' DATE/TIME
"RTN","RAMAGU04",120,0)
INVDTE(DTE) ;
"RTN","RAMAGU04",121,0)
 Q 9999999.9999-DTE
"RTN","RAMAGU04",122,0)
 ;
"RTN","RAMAGU04",123,0)
 ;***** REGISTERS THE PATIENT IN THE FILE #70 (IF NOT REGISTERED)
"RTN","RAMAGU04",124,0)
 ;
"RTN","RAMAGU04",125,0)
 ; DFN           Patient IEN (in file #2)
"RTN","RAMAGU04",126,0)
 ;
"RTN","RAMAGU04",127,0)
 ; [USLCAT]      Usual category (value of the USUAL CATEGORY (.04)
"RTN","RAMAGU04",128,0)
 ;               field of the RAD/NUC MED PATIENT file #70).
"RTN","RAMAGU04",129,0)
 ;               By default ($G(USLCAT)=""), "O" (outpatient) is
"RTN","RAMAGU04",130,0)
 ;               assumed.
"RTN","RAMAGU04",131,0)
 ;
"RTN","RAMAGU04",132,0)
 ; Return Values:
"RTN","RAMAGU04",133,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU04",134,0)
 ;       >0  IEN in the file #70 (the same as DFN)
"RTN","RAMAGU04",135,0)
 ;
"RTN","RAMAGU04",136,0)
RAPTREG(DFN,USLCAT) ;
"RTN","RAMAGU04",137,0)
 Q:$G(DFN)'>0 $$IPVE^RAERR("DFN")
"RTN","RAMAGU04",138,0)
 ;--- Check if the patient is already registered
"RTN","RAMAGU04",139,0)
 Q:$D(^RADPT(+DFN)) +DFN
"RTN","RAMAGU04",140,0)
 ;--- Register a new Radiology patient
"RTN","RAMAGU04",141,0)
 N IENS,RAFDA,RAIENS,RAMSG
"RTN","RAMAGU04",142,0)
 S IENS="+1,",RAIENS(1)=+DFN
"RTN","RAMAGU04",143,0)
 S RAFDA(70,IENS,.01)="`"_(+DFN)  ; NAME
"RTN","RAMAGU04",144,0)
 S RAFDA(70,IENS,.06)="`"_(+DUZ)  ; USER WHO ENTERED PATIENT
"RTN","RAMAGU04",145,0)
 S RAFDA(70,IENS,.04)=$S($G(USLCAT)'="":USLCAT,1:"O")
"RTN","RAMAGU04",146,0)
 D UPDATE^DIE("E","RAFDA","RAIENS","RAMSG")
"RTN","RAMAGU04",147,0)
 Q:$G(DIERR) $$DBS^RAERR("RAMSG",-9,70,IENS)
"RTN","RAMAGU04",148,0)
 ;--- Success
"RTN","RAMAGU04",149,0)
 Q RAIENS(1)
"RTN","RAMAGU04",150,0)
 ;
"RTN","RAMAGU04",151,0)
 ;***** UPDATES EXAM PROCEDURE AND MODIFIERS
"RTN","RAMAGU04",152,0)
 ; 
"RTN","RAMAGU04",153,0)
 ; RACASE          Exam/case identifiers
"RTN","RAMAGU04",154,0)
 ;                   ^01: IEN of the patient in the file #70   (RADFN)
"RTN","RAMAGU04",155,0)
 ;                   ^02: IEN in the REGISTERED EXAMS multiple (RADTI)
"RTN","RAMAGU04",156,0)
 ;                   ^03: IEN in the EXAMINATIONS multiple     (RACNI)
"RTN","RAMAGU04",157,0)
 ;
"RTN","RAMAGU04",158,0)
 ; RAPROC        Radiology procedure and modifiers
"RTN","RAMAGU04",159,0)
 ;                 ^01: Procedure IEN in file #71
"RTN","RAMAGU04",160,0)
 ;                 ^02: Optional procedure modifiers (IENs in
"RTN","RAMAGU04",161,0)
 ;                 ...  the PROCEDURE MODIFIERS file (#71.2))
"RTN","RAMAGU04",162,0)
 ;                 ^nn:
"RTN","RAMAGU04",163,0)
 ;
"RTN","RAMAGU04",164,0)
 ; Return values:
"RTN","RAMAGU04",165,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU04",166,0)
 ;        0  Ok
"RTN","RAMAGU04",167,0)
 ;
"RTN","RAMAGU04",168,0)
UPDEXMPR(RACASE,RAPROC) ;
"RTN","RAMAGU04",169,0)
 N DA,DIK,I,RAIENS,RANODE,RAFDA,RAMSG,TMP
"RTN","RAMAGU04",170,0)
 S RAIENS=$$EXAMIENS(RACASE)
"RTN","RAMAGU04",171,0)
 ;--- Prepare the new data for storage
"RTN","RAMAGU04",172,0)
 S RAFDA(70.03,RAIENS,2)=+RAPROC            ; Procedure
"RTN","RAMAGU04",173,0)
 F I=2:1  S TMP=$P(RAPROC,U,I)  Q:TMP=""  D:TMP>0
"RTN","RAMAGU04",174,0)
 . S RAFDA(70.1,"+"_I_","_RAIENS,.01)=+TMP  ; Modifiers
"RTN","RAMAGU04",175,0)
 ;--- Delete the old modifiers
"RTN","RAMAGU04",176,0)
 S TMP=","_RAIENS  D DA^DILF(TMP,.DA)
"RTN","RAMAGU04",177,0)
 S DIK=$$ROOT^DILFD(70.1,TMP),RANODE=$$CREF^DILF(DIK)
"RTN","RAMAGU04",178,0)
 D IXALL2^DIK  ; Delete entries from cross-references
"RTN","RAMAGU04",179,0)
 K @RANODE     ; Clear the whole multiple
"RTN","RAMAGU04",180,0)
 ;--- Store the new data
"RTN","RAMAGU04",181,0)
 D UPDATE^DIE(,"RAFDA",,"RAMSG")
"RTN","RAMAGU04",182,0)
 Q:$G(DIERR) $$DBS^RAERR("RAMSG",-9,70.03,RAIENS)
"RTN","RAMAGU04",183,0)
 ;---
"RTN","RAMAGU04",184,0)
 Q 0
"RTN","RAMAGU05")
0^27^B36153469^n/a
"RTN","RAMAGU05",1,0)
RAMAGU05 ;HCIOFO/SG - ORDERS/EXAMS API (EXAM UTILITIES) ; 5/27/08 2:16pm
"RTN","RAMAGU05",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAGU05",3,0)
 ;
"RTN","RAMAGU05",4,0)
 Q
"RTN","RAMAGU05",5,0)
 ;
"RTN","RAMAGU05",6,0)
 ;##### RETURNS EXAM STATUS
"RTN","RAMAGU05",7,0)
 ;
"RTN","RAMAGU05",8,0)
 ; RACASE        Examination identifiers
"RTN","RAMAGU05",9,0)
 ;                 ^01: IEN of the patient in the file #70    (RADFN)
"RTN","RAMAGU05",10,0)
 ;                 ^02: IEN in the REGISTERED EXAMS multiple  (RADTI)
"RTN","RAMAGU05",11,0)
 ;                 ^03: IEN in the EXAMINATIONS multiple      (RACNI)
"RTN","RAMAGU05",12,0)
 ;
"RTN","RAMAGU05",13,0)
 ; Return Values:
"RTN","RAMAGU05",14,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU05",15,0)
 ;       >0  Exam status descriptor (see the ^RAMAGU06)
"RTN","RAMAGU05",16,0)
 ;
"RTN","RAMAGU05",17,0)
EXMSTAT(RACASE) ;
"RTN","RAMAGU05",18,0)
 N IEN72,IENS,RABUF,RAMSG,RC
"RTN","RAMAGU05",19,0)
 S RC=$$CHKEXMID^RAMAGU04(RACASE)  Q:RC<0 RC
"RTN","RAMAGU05",20,0)
 ;--- Get the IEN of the status record
"RTN","RAMAGU05",21,0)
 S IENS=$$EXAMIENS^RAMAGU04(RACASE)
"RTN","RAMAGU05",22,0)
 S IEN72=$$GET1^DIQ(70.03,IENS,3,"I",,"RAMSG")
"RTN","RAMAGU05",23,0)
 Q:$G(DIERR) $$DBS^RAERR("RAMSG",-9,70.03,IENS)
"RTN","RAMAGU05",24,0)
 Q:IEN72'>0 $$ERROR^RAERR(-19,,70.03,IENS,3)
"RTN","RAMAGU05",25,0)
 ;--- Return the descriptor
"RTN","RAMAGU05",26,0)
 Q $$EXMSTINF^RAMAGU06(IEN72)
"RTN","RAMAGU05",27,0)
 ;
"RTN","RAMAGU05",28,0)
 ;***** UPDATES THE EXAM ACTIVITY LOG
"RTN","RAMAGU05",29,0)
 ;
"RTN","RAMAGU05",30,0)
 ; RACASE        Examination identifiers
"RTN","RAMAGU05",31,0)
 ;                 ^01: IEN of the patient in the file #70    (RADFN)
"RTN","RAMAGU05",32,0)
 ;                 ^02: IEN in the REGISTERED EXAMS multiple  (RADTI)
"RTN","RAMAGU05",33,0)
 ;                 ^03: IEN in the EXAMINATIONS multiple      (RACNI)
"RTN","RAMAGU05",34,0)
 ;
"RTN","RAMAGU05",35,0)
 ; ACTION        Internal action value (see the TYPE OF ACTION
"RTN","RAMAGU05",36,0)
 ;               field (2) of the sub-file #70.07).
"RTN","RAMAGU05",37,0)
 ;
"RTN","RAMAGU05",38,0)
 ; [COMMENT]     Optional value for the TECHNOLOGIST COMMENT
"RTN","RAMAGU05",39,0)
 ;               field (4) of the sub-file #70.7.
"RTN","RAMAGU05",40,0)
 ;
"RTN","RAMAGU05",41,0)
 ; [LOGDT]       Internal date value (FileMan) for the LOG DATE
"RTN","RAMAGU05",42,0)
 ;               field (.01) of the sub-file #70.07. If this
"RTN","RAMAGU05",43,0)
 ;               parameter is not defined or not greater than 0, 
"RTN","RAMAGU05",44,0)
 ;               then the current date/time is used.
"RTN","RAMAGU05",45,0)
 ;
"RTN","RAMAGU05",46,0)
 ; Return Values:
"RTN","RAMAGU05",47,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU05",48,0)
 ;       >0  IEN of the new activity sub-record in sub-file #70.07
"RTN","RAMAGU05",49,0)
 ;
"RTN","RAMAGU05",50,0)
UPDEXMAL(RACASE,ACTION,COMMENT,LOGDT) ;
"RTN","RAMAGU05",51,0)
 N IENS,IENS7003,LOGDT1,RAFDA,RAIENS,RALOCK,RAMSG,RARC,TMP
"RTN","RAMAGU05",52,0)
 S RARC=$$CHKREQ^RAUTL22("RACASE,ACTION")  Q:RARC<0 RARC
"RTN","RAMAGU05",53,0)
 S RARC=$$CHKEXMID^RAMAGU04(RACASE)         Q:RARC<0 RARC
"RTN","RAMAGU05",54,0)
 S IENS7003=$$EXAMIENS^RAMAGU04(RACASE)
"RTN","RAMAGU05",55,0)
 ;
"RTN","RAMAGU05",56,0)
 ;--- Check the date/time
"RTN","RAMAGU05",57,0)
 I $G(LOGDT)>0  D  Q:RARC<0 RARC
"RTN","RAMAGU05",58,0)
 . S TMP=+$E(LOGDT,1,12),LOGDT1=$$FMTE^XLFDT(TMP)
"RTN","RAMAGU05",59,0)
 . S:(LOGDT1=TMP)!(LOGDT1="") RARC=$$IPVE^RAERR("LOGDT")
"RTN","RAMAGU05",60,0)
 E  S LOGDT1="NOW"
"RTN","RAMAGU05",61,0)
 ;
"RTN","RAMAGU05",62,0)
 ;--- Prepare the data
"RTN","RAMAGU05",63,0)
 S IENS="+1,"_IENS7003
"RTN","RAMAGU05",64,0)
 S RAFDA(70.07,IENS,.01)=LOGDT1     ; LOG DATE
"RTN","RAMAGU05",65,0)
 S RAFDA(70.07,IENS,2)=ACTION       ; TYPE OF ACTION
"RTN","RAMAGU05",66,0)
 S RAFDA(70.07,IENS,3)="`"_(+DUZ)   ; COMPUTER USER
"RTN","RAMAGU05",67,0)
 S RAFDA(70.07,IENS,4)=$G(COMMENT)  ; TECHNOLOGIST COMMENT
"RTN","RAMAGU05",68,0)
 ;
"RTN","RAMAGU05",69,0)
 ;--- Lock the ACTIVITY LOG multiple
"RTN","RAMAGU05",70,0)
 K TMP  S TMP(70.07,","_IENS7003)=""
"RTN","RAMAGU05",71,0)
 S RARC=$$LOCKFM^RALOCK(.TMP)
"RTN","RAMAGU05",72,0)
 Q:RARC $$LOCKERR^RAERR(RARC,"exam activity log")
"RTN","RAMAGU05",73,0)
 M RALOCK=TMP
"RTN","RAMAGU05",74,0)
 ;
"RTN","RAMAGU05",75,0)
 D
"RTN","RAMAGU05",76,0)
 . N $ESTACK,$ETRAP
"RTN","RAMAGU05",77,0)
 . ;--- Setup the error processing
"RTN","RAMAGU05",78,0)
 . D SETDEFEH^RAERR("RARC")
"RTN","RAMAGU05",79,0)
 . ;--- Add the record
"RTN","RAMAGU05",80,0)
 . D UPDATE^DIE("E","RAFDA","RAIENS","RAMSG")
"RTN","RAMAGU05",81,0)
 . S:$G(DIERR) RARC=$$DBS^RAERR("RAMSG",-9,70.07,IENS)
"RTN","RAMAGU05",82,0)
 ;
"RTN","RAMAGU05",83,0)
 ;--- Error handling and cleanup
"RTN","RAMAGU05",84,0)
 D UNLOCKFM^RALOCK(.RALOCK)
"RTN","RAMAGU05",85,0)
 Q $S(RARC<0:RARC,1:+RAIENS(1))
"RTN","RAMAGU05",86,0)
 ;
"RTN","RAMAGU05",87,0)
 ;***** UPDATES THE EXAM STATUS
"RTN","RAMAGU05",88,0)
 ;
"RTN","RAMAGU05",89,0)
 ; RACASE        Examination identifiers
"RTN","RAMAGU05",90,0)
 ;                 ^01: IEN of the patient in the file #70    (RADFN)
"RTN","RAMAGU05",91,0)
 ;                 ^02: IEN in the REGISTERED EXAMS multiple  (RADTI)
"RTN","RAMAGU05",92,0)
 ;                 ^03: IEN in the EXAMINATIONS multiple      (RACNI)
"RTN","RAMAGU05",93,0)
 ;
"RTN","RAMAGU05",94,0)
 ; RASTAT        Status identifier(s) in the format of the exam
"RTN","RAMAGU05",95,0)
 ;               status descriptor (see the ^RAMAGU06 for details).
"RTN","RAMAGU05",96,0)
 ;
"RTN","RAMAGU05",97,0)
 ;               NOTE: Imaging type required to find appropriate
"RTN","RAMAGU05",98,0)
 ;                     status record is extracted from the TYPE OF
"RTN","RAMAGU05",99,0)
 ;                     IMAGING field (2) of the sub-file #70.02.
"RTN","RAMAGU05",100,0)
 ;
"RTN","RAMAGU05",101,0)
 ; [RAFLAGS]     Flags that control the execution (can be combined):
"RTN","RAMAGU05",102,0)
 ;
"RTN","RAMAGU05",103,0)
 ;                 F  Force the new status even if not all required
"RTN","RAMAGU05",104,0)
 ;                    conditions (see $$EXMSTREQ^RAMAGU06) are met.
"RTN","RAMAGU05",105,0)
 ;
"RTN","RAMAGU05",106,0)
 ; [REASON]      Cancellation reason: either IEN of a record of
"RTN","RAMAGU05",107,0)
 ;               the RAD/NUC MED REASON file (#75.2) or a valid
"RTN","RAMAGU05",108,0)
 ;               synonym (see SYNONYM field (3) of that file).
"RTN","RAMAGU05",109,0)
 ;
"RTN","RAMAGU05",110,0)
 ;               This parameter is required if RASTAT=0.
"RTN","RAMAGU05",111,0)
 ;
"RTN","RAMAGU05",112,0)
 ;               The referenced record must have the appropriate
"RTN","RAMAGU05",113,0)
 ;               type of reason (see TYPE OF REASON field (2) of
"RTN","RAMAGU05",114,0)
 ;               the file #75.2): CANCEL REQUEST (1) or GENERAL
"RTN","RAMAGU05",115,0)
 ;               REQUEST (9).
"RTN","RAMAGU05",116,0)
 ;
"RTN","RAMAGU05",117,0)
 ; Return Values:
"RTN","RAMAGU05",118,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU05",119,0)
 ;        0  Exam already has the requested status
"RTN","RAMAGU05",120,0)
 ;       >0  IEN of the new record in the sub-file #70.05
"RTN","RAMAGU05",121,0)
 ;
"RTN","RAMAGU05",122,0)
UPDEXMST(RACASE,RASTAT,RAFLAGS,REASON) ;
"RTN","RAMAGU05",123,0)
 N IENS,IENS7003,RAAFTER,RABEFORE,RABUF,RAFDA,RAIENS,RALOCK,RAMSG,RANODE,RARC,TMP
"RTN","RAMAGU05",124,0)
 S RARC=$$CHKREQ^RAUTL22("RACASE,RASTAT")  Q:RARC<0 RARC
"RTN","RAMAGU05",125,0)
 S RARC=$$CHKEXMID^RAMAGU04(RACASE)        Q:RARC<0 RARC
"RTN","RAMAGU05",126,0)
 S IENS7003=$$EXAMIENS^RAMAGU04(RACASE)
"RTN","RAMAGU05",127,0)
 S RAFLAGS=$G(RAFLAGS)
"RTN","RAMAGU05",128,0)
 ;
"RTN","RAMAGU05",129,0)
 ;=== If status order number is provided, it must be valid
"RTN","RAMAGU05",130,0)
 S TMP=$P(RASTAT,U,3)
"RTN","RAMAGU05",131,0)
 I TMP'="",(+TMP'=TMP)!(TMP<0)!(TMP>9)  D  Q RARC
"RTN","RAMAGU05",132,0)
 . S RARC=$$IPVE^RAERR("RASTAT")
"RTN","RAMAGU05",133,0)
 ;
"RTN","RAMAGU05",134,0)
 ;=== Validate the new exam status and get its descriptor
"RTN","RAMAGU05",135,0)
 I RASTAT'>0  D
"RTN","RAMAGU05",136,0)
 . S IENS=$P(IENS7003,",",2,99)
"RTN","RAMAGU05",137,0)
 . S TMP=$$GET1^DIQ(70.02,IENS,2,"I",,"RAMSG")  ; TYPE OF IMAGING
"RTN","RAMAGU05",138,0)
 . I $G(DIERR)  S RASTAT=$$DBS^RAERR("RAMSG",-9,70.02,IENS)  Q
"RTN","RAMAGU05",139,0)
 . I TMP'>0  S RASTAT=$$ERROR^RAERR(-19,,70.02,IENS,2)  Q
"RTN","RAMAGU05",140,0)
 . S RASTAT=$$EXMSTINF^RAMAGU06(RASTAT,TMP)
"RTN","RAMAGU05",141,0)
 E  S RASTAT=$$EXMSTINF^RAMAGU06(RASTAT)
"RTN","RAMAGU05",142,0)
 Q:RASTAT<0 RASTAT
"RTN","RAMAGU05",143,0)
 ;
"RTN","RAMAGU05",144,0)
 ;=== Check the cancelation reason
"RTN","RAMAGU05",145,0)
 I $P(RASTAT,U,3)=0  D  Q:RARC<0 RARC
"RTN","RAMAGU05",146,0)
 . N RTYPE
"RTN","RAMAGU05",147,0)
 . ;--- Check if it has a value
"RTN","RAMAGU05",148,0)
 . I $G(REASON)=""  S RARC=$$ERROR^RAERR(-8,,"REASON")  Q
"RTN","RAMAGU05",149,0)
 . ;--- Find the IEN of the synonym
"RTN","RAMAGU05",150,0)
 . S RARC=$$RARSNIEN^RAMAGU13(REASON,.RTYPE)  Q:RARC<0
"RTN","RAMAGU05",151,0)
 . S REASON="`"_(+RARC)  ; Pseudo-external value
"RTN","RAMAGU05",152,0)
 . ;--- Check the type of reason
"RTN","RAMAGU05",153,0)
 . S TMP=+RTYPE
"RTN","RAMAGU05",154,0)
 . I TMP'=1,TMP'=9  D  Q
"RTN","RAMAGU05",155,0)
 . . S RARC=$$ERROR^RAERR(-16,,$P(RTYPE,U,2),$P(RASTAT,U,2))
"RTN","RAMAGU05",156,0)
 E  S REASON=""
"RTN","RAMAGU05",157,0)
 ;
"RTN","RAMAGU05",158,0)
 ;=== Lock the exam
"RTN","RAMAGU05",159,0)
 K TMP  S TMP(70.03,IENS7003)=""
"RTN","RAMAGU05",160,0)
 S RARC=$$LOCKFM^RALOCK(.TMP)
"RTN","RAMAGU05",161,0)
 Q:RARC $$LOCKERR^RAERR(RARC,"examination")
"RTN","RAMAGU05",162,0)
 M RALOCK=TMP
"RTN","RAMAGU05",163,0)
 ;
"RTN","RAMAGU05",164,0)
 D
"RTN","RAMAGU05",165,0)
 . N $ESTACK,$ETRAP,RAOVER,ZTQUEUED
"RTN","RAMAGU05",166,0)
 . S ZTQUEUED=1  ; Silence EXAM STATUS input transform (^RASTREQ)
"RTN","RAMAGU05",167,0)
 . ;=== Setup the error processing
"RTN","RAMAGU05",168,0)
 . D SETDEFEH^RAERR("RARC")
"RTN","RAMAGU05",169,0)
 . ;
"RTN","RAMAGU05",170,0)
 . ;=== Check if the exam currently has the same status
"RTN","RAMAGU05",171,0)
 . S TMP=$$GET1^DIQ(70.03,IENS7003,3,"I",,"RAMSG")
"RTN","RAMAGU05",172,0)
 . I $G(DIERR)  S RARC=$$DBS^RAERR("RAMSG",-9,70.03,IENS7003)  Q
"RTN","RAMAGU05",173,0)
 . Q:+RASTAT=TMP
"RTN","RAMAGU05",174,0)
 . ;
"RTN","RAMAGU05",175,0)
 . ;=== Execute the input transform and the ^RASTREQ routine
"RTN","RAMAGU05",176,0)
 . I RAFLAGS'["F"  D  Q:RARC<0
"RTN","RAMAGU05",177,0)
 . . D VAL^DIE(70.03,IENS7003,3,,"`"_(+RASTAT),.TMP,,"RAMSG")
"RTN","RAMAGU05",178,0)
 . . I TMP="^"  S RARC=$$IPVE^RAERR("RASTAT")  Q
"RTN","RAMAGU05",179,0)
 . . Q:$G(RAAFTER)=$P(RASTAT,U,3)
"RTN","RAMAGU05",180,0)
 . . S RARC=$$ERROR^RAERR(-31,"RACASE='"_RACASE_"'",$P(RASTAT,U,2))
"RTN","RAMAGU05",181,0)
 . ;
"RTN","RAMAGU05",182,0)
 . ;=== Prepare the data
"RTN","RAMAGU05",183,0)
 . S IENS=IENS7003
"RTN","RAMAGU05",184,0)
 . S RAFDA(70.03,IENS,3)="`"_(+RASTAT)  ; EXAM STATUS
"RTN","RAMAGU05",185,0)
 . S RAFDA(70.03,IENS,3.5)=REASON       ; REASON FOR CANCELLATION
"RTN","RAMAGU05",186,0)
 . S IENS="+1,"_IENS7003
"RTN","RAMAGU05",187,0)
 . S RAFDA(70.05,IENS,.01)="NOW"        ; STATUS CHANGE DATE/TIME
"RTN","RAMAGU05",188,0)
 . S RAFDA(70.05,IENS,2)="`"_(+RASTAT)  ; NEW STATUS
"RTN","RAMAGU05",189,0)
 . S RAFDA(70.05,IENS,3)="`"_(+DUZ)     ; COMPUTER USER
"RTN","RAMAGU05",190,0)
 . ;
"RTN","RAMAGU05",191,0)
 . ;=== Update the record
"RTN","RAMAGU05",192,0)
 . D UPDATE^DIE("E","RAFDA","RAIENS","RAMSG")
"RTN","RAMAGU05",193,0)
 . S:$G(DIERR) RARC=$$DBS^RAERR("RAMSG",-9,70.05,IENS)
"RTN","RAMAGU05",194,0)
 ;
"RTN","RAMAGU05",195,0)
 ;=== Error handling and cleanup
"RTN","RAMAGU05",196,0)
 D UNLOCKFM^RALOCK(.RALOCK)
"RTN","RAMAGU05",197,0)
 Q $S(RARC<0:RARC,1:+$G(RAIENS(1)))
"RTN","RAMAGU06")
0^46^B43534472^n/a
"RTN","RAMAGU06",1,0)
RAMAGU06 ;HCIOFO/SG - ORDERS/EXAMS API (EXAM STATUS UTILS) ; 2/6/09 11:21am
"RTN","RAMAGU06",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAGU06",3,0)
 ;
"RTN","RAMAGU06",4,0)
 ; Exam Status Descriptor
"RTN","RAMAGU06",5,0)
 ; ----------------------
"RTN","RAMAGU06",6,0)
 ;
"RTN","RAMAGU06",7,0)
 ;   ^01: IEN of the status record in the EXAMINATION STATUS
"RTN","RAMAGU06",8,0)
 ;        file (#72).
"RTN","RAMAGU06",9,0)
 ;
"RTN","RAMAGU06",10,0)
 ;   ^02: Status name (value of the NAME field (.01)
"RTN","RAMAGU06",11,0)
 ;        of the file #72.
"RTN","RAMAGU06",12,0)
 ;
"RTN","RAMAGU06",13,0)
 ;   ^03: Status code. Currently, the value of the ORDER field (3)
"RTN","RAMAGU06",14,0)
 ;        of the file #72 is used. As the result, only 0 (cancelled), 
"RTN","RAMAGU06",15,0)
 ;        1 (waiting for exam), and 9 (completed) codes are the same
"RTN","RAMAGU06",16,0)
 ;        at all sites and all imaging types. All others are site
"RTN","RAMAGU06",17,0)
 ;        and/or imaging type specific.
"RTN","RAMAGU06",18,0)
 ;
"RTN","RAMAGU06",19,0)
 ;   ^04: VistARAD category (field 9 of the file #72).
"RTN","RAMAGU06",20,0)
 ;
"RTN","RAMAGU06",21,0)
 ;   ^05: Generic exam status characteristics (can be combined):
"RTN","RAMAGU06",22,0)
 ;          E  'Examined' HL7 message is generated
"RTN","RAMAGU06",23,0)
 ;          R  Report is required
"RTN","RAMAGU06",24,0)
 ;
"RTN","RAMAGU06",25,0)
 ;        These flags have the same meaning at all sites for all
"RTN","RAMAGU06",26,0)
 ;        imaging types.
"RTN","RAMAGU06",27,0)
 ;
"RTN","RAMAGU06",28,0)
 Q
"RTN","RAMAGU06",29,0)
 ;
"RTN","RAMAGU06",30,0)
 ;***** RETURNS A DESCRIPTOR OF THE EXAM STATUS
"RTN","RAMAGU06",31,0)
 ;
"RTN","RAMAGU06",32,0)
 ; STATUS        IEN of the status record in the EXAMINATION STATUS
"RTN","RAMAGU06",33,0)
 ;               file (#72) or the status order number in the 3rd.
"RTN","RAMAGU06",34,0)
 ;               ^-piece.
"RTN","RAMAGU06",35,0)
 ;
"RTN","RAMAGU06",36,0)
 ;               First, the function checks the 1st ^-piece. If it
"RTN","RAMAGU06",37,0)
 ;               is greater than 0, then it is used as IEN of the
"RTN","RAMAGU06",38,0)
 ;               status.
"RTN","RAMAGU06",39,0)
 ;               
"RTN","RAMAGU06",40,0)
 ;               Otherwise, the third piece is checked for a status
"RTN","RAMAGU06",41,0)
 ;               order number (value of the ORDER field (3) of the
"RTN","RAMAGU06",42,0)
 ;               EXAMINATION STATUS file (#72)). The RAIMGTYI
"RTN","RAMAGU06",43,0)
 ;               parameter must reference a valid imaging type in
"RTN","RAMAGU06",44,0)
 ;               this case.
"RTN","RAMAGU06",45,0)
 ;
"RTN","RAMAGU06",46,0)
 ;               Only 0 (cancelled), 1 (waiting for exam), and 9
"RTN","RAMAGU06",47,0)
 ;               (completed) order numbers are the same at all sites
"RTN","RAMAGU06",48,0)
 ;               and all imaging types. All others are site and/or
"RTN","RAMAGU06",49,0)
 ;               imaging type specific.
"RTN","RAMAGU06",50,0)
 ;
"RTN","RAMAGU06",51,0)
 ; [RAIMGTYI]    Imaging type IEN (file #79.2). This parameter is
"RTN","RAMAGU06",52,0)
 ;               required if a status is referenced by the order
"RTN","RAMAGU06",53,0)
 ;               number (see above).
"RTN","RAMAGU06",54,0)
 ;
"RTN","RAMAGU06",55,0)
 ; Return Values:
"RTN","RAMAGU06",56,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU06",57,0)
 ;       >0  Exam status descriptor (see the comment in
"RTN","RAMAGU06",58,0)
 ;           the beginning of this routine)
"RTN","RAMAGU06",59,0)
 ;
"RTN","RAMAGU06",60,0)
EXMSTINF(STATUS,RAIMGTYI) ;
"RTN","RAMAGU06",61,0)
 N IENS,RABUF,RAMSG,RC,TMP
"RTN","RAMAGU06",62,0)
 S RC=0
"RTN","RAMAGU06",63,0)
 ;
"RTN","RAMAGU06",64,0)
 ;=== Search for status record
"RTN","RAMAGU06",65,0)
 I STATUS'>0  D  Q:RC<0 RC
"RTN","RAMAGU06",66,0)
 . N IEN72,RAIMGTY,RANODE
"RTN","RAMAGU06",67,0)
 . I $P(STATUS,U,3)'?1.N  S RC=$$IPVE^RAERR("STATUS")  Q
"RTN","RAMAGU06",68,0)
 . I $G(RAIMGTYI)'>0  S RC=$$IPVE^RAERR("RAIMGTYI")  Q
"RTN","RAMAGU06",69,0)
 . ;--- Get the imaging type name
"RTN","RAMAGU06",70,0)
 . S IENS=+RAIMGTYI_","
"RTN","RAMAGU06",71,0)
 . S RAIMGTY=$$GET1^DIQ(79.2,IENS,.01,,,"RAMSG")
"RTN","RAMAGU06",72,0)
 . I $G(DIERR)  S RC=$$DBS^RAERR("RAMSG",-9,70.02,IENS)  Q
"RTN","RAMAGU06",73,0)
 . I RAIMGTY=""  S RC=$$ERROR^RAERR(-19,,70.02,IENS,2)  Q
"RTN","RAMAGU06",74,0)
 . ;--- Search for status record by status order number
"RTN","RAMAGU06",75,0)
 . S RANODE=$NA(^RA(72,"AA",RAIMGTY,+$P(STATUS,U,3)))
"RTN","RAMAGU06",76,0)
 . S IEN72=+$O(@RANODE@(""))
"RTN","RAMAGU06",77,0)
 . I IEN72'>0  S RC=$$IPVE^RAERR("STATUS")  Q
"RTN","RAMAGU06",78,0)
 . ;--- Check if there is another status with the same order number
"RTN","RAMAGU06",79,0)
 . I $O(@RANODE@(IEN72))>0  D  Q
"RTN","RAMAGU06",80,0)
 . . S RC=$$ERROR^RAERR(-14,,"status order number",STATUS)
"RTN","RAMAGU06",81,0)
 . S STATUS=IEN72
"RTN","RAMAGU06",82,0)
 ;
"RTN","RAMAGU06",83,0)
 ;=== Load status properties
"RTN","RAMAGU06",84,0)
 S IENS=+STATUS_","
"RTN","RAMAGU06",85,0)
 D GETS^DIQ(72,IENS,".01;.111;3;8;9","I","RABUF","RAMSG")
"RTN","RAMAGU06",86,0)
 Q:$G(DIERR) $$DBS^RAERR("RAMSG",-9,72,IENS)
"RTN","RAMAGU06",87,0)
 ;
"RTN","RAMAGU06",88,0)
 ;=== Build basic descriptor
"RTN","RAMAGU06",89,0)
 S $P(STATUS,U,2)=$G(RABUF(72,IENS,.01,"I"))  ; STATUS
"RTN","RAMAGU06",90,0)
 S $P(STATUS,U,3)=$G(RABUF(72,IENS,3,"I"))    ; ORDER
"RTN","RAMAGU06",91,0)
 S $P(STATUS,U,4)=$G(RABUF(72,IENS,9,"I"))    ; VISTARAD CATEGORY
"RTN","RAMAGU06",92,0)
 ;
"RTN","RAMAGU06",93,0)
 ;=== Add generic characteristics
"RTN","RAMAGU06",94,0)
 S TMP=""
"RTN","RAMAGU06",95,0)
 ;--- REPORT ENTERED REQUIRED?
"RTN","RAMAGU06",96,0)
 S:$G(RABUF(72,IENS,.111,"I"))="Y" TMP=TMP_"R"
"RTN","RAMAGU06",97,0)
 ;--- GENERATE EXAMINED HL7 MESSAGE
"RTN","RAMAGU06",98,0)
 S:$G(RABUF(72,IENS,8,"I"))="Y" TMP=TMP_"E"
"RTN","RAMAGU06",99,0)
 S $P(STATUS,U,5)=TMP
"RTN","RAMAGU06",100,0)
 ;
"RTN","RAMAGU06",101,0)
 ;===
"RTN","RAMAGU06",102,0)
 Q STATUS
"RTN","RAMAGU06",103,0)
 ;
"RTN","RAMAGU06",104,0)
 ;***** RETURNS REQUIREMENTS FOR THE EXAM STATUS
"RTN","RAMAGU06",105,0)
 ;
"RTN","RAMAGU06",106,0)
 ; EXMSTIEN      IEN of the current status (IEN in the file #72)
"RTN","RAMAGU06",107,0)
 ;
"RTN","RAMAGU06",108,0)
 ; [RAPROCIEN]   Radiology procedure IEN (file #71). This parameter
"RTN","RAMAGU06",109,0)
 ;               is required to determine exact nuclear medicine
"RTN","RAMAGU06",110,0)
 ;               requirements (result pieces from 17 to 25).
"RTN","RAMAGU06",111,0)
 ;
"RTN","RAMAGU06",112,0)
 ;               By default (+$G(RAPROCIEN)=0), this function cannot
"RTN","RAMAGU06",113,0)
 ;               examine the SUPPRESS RADIOPHARM PROMPT field (2) of
"RTN","RAMAGU06",114,0)
 ;               the RAD/NUC MED PROCEDURES file (#71) and might
"RTN","RAMAGU06",115,0)
 ;               indicate that some nuclear medicine data is required 
"RTN","RAMAGU06",116,0)
 ;               even if it is not.
"RTN","RAMAGU06",117,0)
 ;
"RTN","RAMAGU06",118,0)
 ; Return Values:
"RTN","RAMAGU06",119,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU06",120,0)
 ;      ...  Status requirements descriptor
"RTN","RAMAGU06",121,0)
 ;             ^01: TECHNOLOGIST REQUIRED?         {0|1}
"RTN","RAMAGU06",122,0)
 ;             ^02: RESIDENT OR STAFF REQUIRED?    {0|1}
"RTN","RAMAGU06",123,0)
 ;             ^03: DETAILED PROCEDURE REQUIRED?   {0|1}
"RTN","RAMAGU06",124,0)
 ;             ^04: FILM ENTRY REQUIRED?           {0|1}
"RTN","RAMAGU06",125,0)
 ;             ^05: DIAGNOSTIC CODE REQUIRED?      {0|1}
"RTN","RAMAGU06",126,0)
 ;             ^06: CAMERA/EQUIP/RM REQUIRED?      {0|1}
"RTN","RAMAGU06",127,0)
 ;             ^07: reserved
"RTN","RAMAGU06",128,0)
 ;             ^08: reserved
"RTN","RAMAGU06",129,0)
 ;             ^09: reserved
"RTN","RAMAGU06",130,0)
 ;             ^10: reserved
"RTN","RAMAGU06",131,0)
 ;             ^11: REPORT ENTERED REQUIRED?       {0|1}
"RTN","RAMAGU06",132,0)
 ;             ^12: VERIFIED REPORT REQUIRED?      {0|1}
"RTN","RAMAGU06",133,0)
 ;             ^13: PROCEDURE MODIFIERS REQUIRED?  {0|1}
"RTN","RAMAGU06",134,0)
 ;             ^14: CPT MODIFIERS REQUIRED?        {0|1}
"RTN","RAMAGU06",135,0)
 ;             ^15: reserved
"RTN","RAMAGU06",136,0)
 ;             ^16: IMPRESSION REQUIRED?           {0|1}
"RTN","RAMAGU06",137,0)
 ;             ^17: RADIOPHARMS/DOSAGES REQUIRED?  {0|1}
"RTN","RAMAGU06",138,0)
 ;             ^18: reserved
"RTN","RAMAGU06",139,0)
 ;             ^19: ACTIVITY DRAWN REQUIRED?       {0|1}
"RTN","RAMAGU06",140,0)
 ;             ^20: DRAWN DT/TIME/PERSON REQUIRED? {0|1}
"RTN","RAMAGU06",141,0)
 ;             ^21: ADM DT/TIME/PERSON REQUIRED?   {0|1}
"RTN","RAMAGU06",142,0)
 ;             ^22: reserved
"RTN","RAMAGU06",143,0)
 ;             ^23: ROUTE/SITE REQUIRED?           {0|1}
"RTN","RAMAGU06",144,0)
 ;             ^24: LOT NO. REQUIRED?              {0|1}
"RTN","RAMAGU06",145,0)
 ;             ^25: VOLUME/FORM REQUIRED?          {0|1}
"RTN","RAMAGU06",146,0)
 ;
"RTN","RAMAGU06",147,0)
EXMSTREQ(EXMSTIEN,RAPROCIEN) ;
"RTN","RAMAGU06",148,0)
 Q:$D(^RA(72,+EXMSTIEN))<10 $$IPVE^RAERR("EXMSTIEN")
"RTN","RAMAGU06",149,0)
 Q:$G(RAPROCIEN)<0 $$IPVE^RAERR("RAPROCIEN")
"RTN","RAMAGU06",150,0)
 N BUF,I,IENS,RABUF,RAIMGTYI,RAMSG,RC,RESULT,TMP
"RTN","RAMAGU06",151,0)
 S RESULT="",RC=0
"RTN","RAMAGU06",152,0)
 ;
"RTN","RAMAGU06",153,0)
 ;=== General requirements
"RTN","RAMAGU06",154,0)
 S BUF=$G(^RA(72,+EXMSTIEN,.1))
"RTN","RAMAGU06",155,0)
 F I=1:1:6,11:1:14,16  S $P(RESULT,U,I)=($P(BUF,U,I)="Y")
"RTN","RAMAGU06",156,0)
 ;
"RTN","RAMAGU06",157,0)
 ;=== Nuclear Medicine requirements
"RTN","RAMAGU06",158,0)
 S BUF=$G(^RA(72,+EXMSTIEN,.5))
"RTN","RAMAGU06",159,0)
 ;--- If the exam status does not indicate that radiopharmaceuticals
"RTN","RAMAGU06",160,0)
 ;    are required, then there is no need for any further checks.
"RTN","RAMAGU06",161,0)
 ;--- See the EN1^RASTREQN procedure for more details.
"RTN","RAMAGU06",162,0)
 I $P(BUF,U)="Y"  D  Q:RC<0 RC
"RTN","RAMAGU06",163,0)
 . ;--- Get the imaging type IEN from the exam status
"RTN","RAMAGU06",164,0)
 . S IENS=+EXMSTIEN_","
"RTN","RAMAGU06",165,0)
 . S RAIMGTYI=+$$GET1^DIQ(72,IENS,7,"I",,"RAMSG")
"RTN","RAMAGU06",166,0)
 . I $G(DIERR)  S RC=$$DBS^RAERR("RAMSG",-9,72,IENS)  Q
"RTN","RAMAGU06",167,0)
 . ;--- If the RADIOPHARMACEUTICALS USED? of the imaging type
"RTN","RAMAGU06",168,0)
 . ;--- is not set to Yes, then requirements are voided.
"RTN","RAMAGU06",169,0)
 . S IENS=RAIMGTYI_","
"RTN","RAMAGU06",170,0)
 . S TMP=$$GET1^DIQ(79.2,IENS,5,"I",,"RAMSG")
"RTN","RAMAGU06",171,0)
 . I $G(DIERR)  S RC=$$DBS^RAERR("RAMSG",-9,79.2,IENS)  Q
"RTN","RAMAGU06",172,0)
 . I TMP'="Y"  S BUF=""  Q
"RTN","RAMAGU06",173,0)
 . ;--- If a procedure is passed and its SUPPRESS RADIOPHARM PROMPT
"RTN","RAMAGU06",174,0)
 . ;    field (2) in the RAD/NUC MED PROCEDURES file (#71) stores 1,
"RTN","RAMAGU06",175,0)
 . ;--- then the radiopharmaceutical requirements are voided.
"RTN","RAMAGU06",176,0)
 . I $G(RAPROCIEN)>0  D  Q:RC<0
"RTN","RAMAGU06",177,0)
 . . S IENS=+RAPROCIEN_","
"RTN","RAMAGU06",178,0)
 . . D GETS^DIQ(71,IENS,"2;12","I","RABUF","RAMSG")
"RTN","RAMAGU06",179,0)
 . . I $G(DIERR)  S RC=$$DBS^RAERR("RAMSG",-9,71,IENS)  Q
"RTN","RAMAGU06",180,0)
 . . I +$G(RABUF(71,IENS,12,"I"))'=RAIMGTYI  D  Q
"RTN","RAMAGU06",181,0)
 . . . S RC=$$ERROR^RAERR(-55)
"RTN","RAMAGU06",182,0)
 . . S:$G(RABUF(71,IENS,2,"I")) BUF=""
"RTN","RAMAGU06",183,0)
 E  S BUF=""
"RTN","RAMAGU06",184,0)
 F I=1,3,4,5,7,8,9  S $P(RESULT,U,16+I)=($P(BUF,U,I)="Y")
"RTN","RAMAGU06",185,0)
 ;
"RTN","RAMAGU06",186,0)
 ;===
"RTN","RAMAGU06",187,0)
 Q RESULT
"RTN","RAMAGU06",188,0)
 ;
"RTN","RAMAGU06",189,0)
 ;***** RETURNS THE STATUS THAT SHOULD BE USED AS "EXAMINED"
"RTN","RAMAGU06",190,0)
 ;
"RTN","RAMAGU06",191,0)
 ; EXMSTIEN      IEN of the current status (IEN in the file #72)
"RTN","RAMAGU06",192,0)
 ;
"RTN","RAMAGU06",193,0)
 ; Return Values:
"RTN","RAMAGU06",194,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU06",195,0)
 ;       ""  Requested exam status cannot be found. The current
"RTN","RAMAGU06",196,0)
 ;           status is already at or past "EXAMINED".
"RTN","RAMAGU06",197,0)
 ;       >0  Exam status descriptor (see the routine comment above)
"RTN","RAMAGU06",198,0)
 ;
"RTN","RAMAGU06",199,0)
 ; This function searches for a status that follows the one defined
"RTN","RAMAGU06",200,0)
 ; by the EXMSTIEN parameter and has "E" (Examined) in the VISTARAD
"RTN","RAMAGU06",201,0)
 ; CATEGORY field (9).
"RTN","RAMAGU06",202,0)
 ;
"RTN","RAMAGU06",203,0)
GETEXMND(EXMSTIEN) ;
"RTN","RAMAGU06",204,0)
 Q $$NXTEXMST(+EXMSTIEN,"E")
"RTN","RAMAGU06",205,0)
 ;
"RTN","RAMAGU06",206,0)
 ;***** RETURNS THE NEXT EXAM STATUS
"RTN","RAMAGU06",207,0)
 ;
"RTN","RAMAGU06",208,0)
 ; EXMSTIEN      IEN of the status record in the EXAMINATION STATUS
"RTN","RAMAGU06",209,0)
 ;               file (#72).
"RTN","RAMAGU06",210,0)
 ;
"RTN","RAMAGU06",211,0)
 ; [VISTARADCAT] Internal value of the required VistA RAD category.
"RTN","RAMAGU06",212,0)
 ;
"RTN","RAMAGU06",213,0)
 ; Return Values:
"RTN","RAMAGU06",214,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU06",215,0)
 ;       ""  Requested exam status cannot be found after the status
"RTN","RAMAGU06",216,0)
 ;           referenced by the EXMSTIEN.
"RTN","RAMAGU06",217,0)
 ;       >0  Exam status descriptor (see the routine comment above)
"RTN","RAMAGU06",218,0)
 ;
"RTN","RAMAGU06",219,0)
NXTEXMST(EXMSTIEN,VISTARADCAT) ;
"RTN","RAMAGU06",220,0)
 N IEN72,IENS,ORDER,ORDI,RABUF,RAIMGTY,RAMSG,RC,TMP,X,XREF
"RTN","RAMAGU06",221,0)
 Q:$G(EXMSTIEN)'>0 $$IPVE^RAERR("EXMSTIEN")
"RTN","RAMAGU06",222,0)
 S RC=0
"RTN","RAMAGU06",223,0)
 ;=== Get the order number and type of imaging
"RTN","RAMAGU06",224,0)
 S IENS=+EXMSTIEN_","
"RTN","RAMAGU06",225,0)
 D GETS^DIQ(72,IENS,"3;7",,"RABUF","RAMSG")
"RTN","RAMAGU06",226,0)
 Q:$G(DIERR) $$DBS^RAERR("RAMSG",-9,72,IENS)
"RTN","RAMAGU06",227,0)
 S ORDER=+$G(RABUF(72,IENS,3))
"RTN","RAMAGU06",228,0)
 S RAIMGTY=$G(RABUF(72,IENS,7))
"RTN","RAMAGU06",229,0)
 K RABUF
"RTN","RAMAGU06",230,0)
 ;=== Search for the next status
"RTN","RAMAGU06",231,0)
 S XREF=$NA(^RA(72,"AA",RAIMGTY))
"RTN","RAMAGU06",232,0)
 I $G(VISTARADCAT)'=""  D
"RTN","RAMAGU06",233,0)
 . S ORDI=""
"RTN","RAMAGU06",234,0)
 . F  S ORDI=$O(@XREF@(ORDI))  Q:ORDI=""  D  Q:RC
"RTN","RAMAGU06",235,0)
 . . S IEN72=""
"RTN","RAMAGU06",236,0)
 . . F  S IEN72=$O(@XREF@(ORDI,IEN72))  Q:IEN72=""  D  Q:RC
"RTN","RAMAGU06",237,0)
 . . . S TMP=$$GET1^DIQ(72,IEN72_",",9,"I",,"RAMSG")
"RTN","RAMAGU06",238,0)
 . . . I $G(DIERR)  S RC=$$DBS^RAERR("RAMSG",-9,72,IEN72_",")  Q
"RTN","RAMAGU06",239,0)
 . . . S:TMP=VISTARADCAT RC=$$EXMSTINF(IEN72)
"RTN","RAMAGU06",240,0)
 . ;--- If nothing has been found, then "E:Examined" category has
"RTN","RAMAGU06",241,0)
 . ;--- not been assigned to a record of this imaging type yet.
"RTN","RAMAGU06",242,0)
 . I 'RC  S RC=$$ERROR^RAERR(-59,,VISTARADCAT,RAIMGTY)  Q
"RTN","RAMAGU06",243,0)
 . ;--- Check if the new status follows the source one
"RTN","RAMAGU06",244,0)
 . S:$P(RC,U,3)'>ORDER RC=""
"RTN","RAMAGU06",245,0)
 E  D
"RTN","RAMAGU06",246,0)
 . S ORDI=$O(@XREF@(ORDER))     Q:ORDI=""
"RTN","RAMAGU06",247,0)
 . S IEN72=$O(@XREF@(ORDI,""))  Q:IEN72=""
"RTN","RAMAGU06",248,0)
 . S RC=$$EXMSTINF(IEN72)
"RTN","RAMAGU06",249,0)
 ;===
"RTN","RAMAGU06",250,0)
 Q RC
"RTN","RAMAGU07")
0^28^B9459946^n/a
"RTN","RAMAGU07",1,0)
RAMAGU07 ;HCIOFO/SG - ORDERS/EXAMS API (PATIENT UTILITIES) ; 1/25/08 2:35pm
"RTN","RAMAGU07",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAGU07",3,0)
 ;
"RTN","RAMAGU07",4,0)
 Q
"RTN","RAMAGU07",5,0)
 ;
"RTN","RAMAGU07",6,0)
 ;***** RETURNS SERVICE, WARD, AND BEDSECTION FOR INPATIENT
"RTN","RAMAGU07",7,0)
 ;
"RTN","RAMAGU07",8,0)
 ; RADFN         Patient IEN (in file #2)
"RTN","RAMAGU07",9,0)
 ;
"RTN","RAMAGU07",10,0)
 ; [.RASERV]     Service is returned via this parameter:
"RTN","RAMAGU07",11,0)
 ;                 ^01: IEN in the SERVICE/SECTION file (#49)
"RTN","RAMAGU07",12,0)
 ;                 ^02: Service name (value of the .01 field)
"RTN","RAMAGU07",13,0)
 ;
"RTN","RAMAGU07",14,0)
 ; [.RABED]      Bedsection is returned via this parameter:
"RTN","RAMAGU07",15,0)
 ;                 ^01: IEN in the SPECIALTY file (#42.4)
"RTN","RAMAGU07",16,0)
 ;                 ^02: Bedsection name (value of the .01 field)
"RTN","RAMAGU07",17,0)
 ;
"RTN","RAMAGU07",18,0)
 ; [.RAWARD]     Ward is returned via this parameter:
"RTN","RAMAGU07",19,0)
 ;                 ^01: IEN in the WARD LOCATION file (#42)
"RTN","RAMAGU07",20,0)
 ;                 ^02: Ward name (value of the .01 field)
"RTN","RAMAGU07",21,0)
 ;
"RTN","RAMAGU07",22,0)
 ; [RADTE]       Date/time to check for inpatient status (FileMan).
"RTN","RAMAGU07",23,0)
 ;               By default ($G(RADATE)'>0), current date/time is
"RTN","RAMAGU07",24,0)
 ;               assumed.
"RTN","RAMAGU07",25,0)
 ;
"RTN","RAMAGU07",26,0)
 ; Return values:
"RTN","RAMAGU07",27,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU07",28,0)
 ;        0  Success
"RTN","RAMAGU07",29,0)
 ;
"RTN","RAMAGU07",30,0)
RAINP(RADFN,RASERV,RABED,RAWARD,RADTE) ;
"RTN","RAMAGU07",31,0)
 N IENS,RABUF,RAMSG,RC,TMP,VAIP
"RTN","RAMAGU07",32,0)
 S (RABED,RASERV,RAWARD)=""
"RTN","RAMAGU07",33,0)
 ;
"RTN","RAMAGU07",34,0)
 ;=== Get inpatient data
"RTN","RAMAGU07",35,0)
 S:$G(RADTE)>0 VAIP("D")=+RADTE
"RTN","RAMAGU07",36,0)
 S RC=$$VAIN5(.RADFN)  Q:RC<0 RC
"RTN","RAMAGU07",37,0)
 ;
"RTN","RAMAGU07",38,0)
 ;=== Ward
"RTN","RAMAGU07",39,0)
 S:$G(VAIP(5))>0 RAWARD=$P(VAIP(5),U,1,2)
"RTN","RAMAGU07",40,0)
 ;
"RTN","RAMAGU07",41,0)
 ;=== Service and Bedsection
"RTN","RAMAGU07",42,0)
 S IENS=+$G(VAIP(8))_","  ; Treating specialty
"RTN","RAMAGU07",43,0)
 I IENS>0  D
"RTN","RAMAGU07",44,0)
 . D GETS^DIQ(45.7,IENS,"1;2","EI","RABUF","RAMSG")
"RTN","RAMAGU07",45,0)
 . I $G(DIERR)  S RC=$$DBS^RAERR("RAMSG",-9,45.7,IENS)  Q
"RTN","RAMAGU07",46,0)
 . ;--- Bedsection
"RTN","RAMAGU07",47,0)
 . S TMP=+$G(RABUF(45.7,IENS,1,"I"))
"RTN","RAMAGU07",48,0)
 . S:TMP>0 RABED=TMP_U_$G(RABUF(45.7,IENS,1,"E"))
"RTN","RAMAGU07",49,0)
 . ;--- Service
"RTN","RAMAGU07",50,0)
 . S TMP=+$G(RABUF(45.7,IENS,2,"I"))
"RTN","RAMAGU07",51,0)
 . S:TMP>0 RASERV=TMP_U_$G(RABUF(45.7,IENS,2,"E"))
"RTN","RAMAGU07",52,0)
 E  I RAWARD>0  D
"RTN","RAMAGU07",53,0)
 . ;--- Get name of the service
"RTN","RAMAGU07",54,0)
 . S IENS=(+RAWARD)_","
"RTN","RAMAGU07",55,0)
 . S TMP=$$GET1^DIQ(42,IENS,.03,,,"RAMSG")
"RTN","RAMAGU07",56,0)
 . I $G(DIERR)  S RC=$$DBS^RAERR("RAMSG",-9,42,IENS)  Q
"RTN","RAMAGU07",57,0)
 . ;--- Try to find the name in the SERVICE/SECTION file
"RTN","RAMAGU07",58,0)
 . D FIND^DIC(49,,"@;.01","X",TMP,2,"B",,,"RABUF","RAMSG")
"RTN","RAMAGU07",59,0)
 . I $G(DIERR)  S RC=$$DBS^RAERR("RAMSG",-9,49)  Q
"RTN","RAMAGU07",60,0)
 . ;--- Process the search results
"RTN","RAMAGU07",61,0)
 . Q:+$G(RABUF("DILIST",0))'=1
"RTN","RAMAGU07",62,0)
 . S TMP=+$G(RABUF("DILIST",2,1))
"RTN","RAMAGU07",63,0)
 . S:TMP>0 RASERV=TMP_U_$G(RABUF("DILIST","ID",1,.01))
"RTN","RAMAGU07",64,0)
 ;
"RTN","RAMAGU07",65,0)
 ;===
"RTN","RAMAGU07",66,0)
 Q $S(RC<0:RC,1:0)
"RTN","RAMAGU07",67,0)
 ;
"RTN","RAMAGU07",68,0)
 ;***** CALLS THE DEM^VADPT
"RTN","RAMAGU07",69,0)
 ;
"RTN","RAMAGU07",70,0)
 ; DFN           Patient IEN (in file #2)
"RTN","RAMAGU07",71,0)
 ;
"RTN","RAMAGU07",72,0)
 ; [VALIDATE]    Make sure that required fields are not empty
"RTN","RAMAGU07",73,0)
 ; [VAPTYP]      See the DEM^VADPT description
"RTN","RAMAGU07",74,0)
 ; [VAHOW]       See the DEM^VADPT description
"RTN","RAMAGU07",75,0)
 ;
"RTN","RAMAGU07",76,0)
 ; Output variables (see the DEM^VADPT description):
"RTN","RAMAGU07",77,0)
 ;   VA, VADM
"RTN","RAMAGU07",78,0)
 ;
"RTN","RAMAGU07",79,0)
 ; Return values:
"RTN","RAMAGU07",80,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU07",81,0)
 ;        0  Success
"RTN","RAMAGU07",82,0)
 ;
"RTN","RAMAGU07",83,0)
VADEM(DFN,VALIDATE,VAPTYP,VAHOW) ;
"RTN","RAMAGU07",84,0)
 N A,I,J,K,K1,NC,NF,NQ,T,VAC,VAERR,VAN,VAROOT,VAS,VAV,VAW,VAX,VAZ,X,Y,Z
"RTN","RAMAGU07",85,0)
 Q:$G(DFN)'>0 $$IPVE^RAERR("DFN")
"RTN","RAMAGU07",86,0)
 D DEM^VADPT
"RTN","RAMAGU07",87,0)
 Q:$G(VAERR) $$IPVE^RAERR("DFN")
"RTN","RAMAGU07",88,0)
 ;--- Make sure that required fields are not empty
"RTN","RAMAGU07",89,0)
 D:$G(VALIDATE)
"RTN","RAMAGU07",90,0)
 . S:$G(VADM(1))="" VADM(1)="Unknown ("_DFN_")"
"RTN","RAMAGU07",91,0)
 . S:$G(VA("BID"))="" VA("BID")="UNKN"
"RTN","RAMAGU07",92,0)
 ;--- Success
"RTN","RAMAGU07",93,0)
 Q 0
"RTN","RAMAGU07",94,0)
 ;
"RTN","RAMAGU07",95,0)
 ;***** CALLS THE IN5^VADPT
"RTN","RAMAGU07",96,0)
 ;
"RTN","RAMAGU07",97,0)
 ; DFN           Patient IEN (in file #2)
"RTN","RAMAGU07",98,0)
 ;
"RTN","RAMAGU07",99,0)
 ; [VAHOW]       See the IN5^VADPT description
"RTN","RAMAGU07",100,0)
 ;
"RTN","RAMAGU07",101,0)
 ; Input variables (see the IN5^VADPT description):
"RTN","RAMAGU07",102,0)
 ;   VAIP
"RTN","RAMAGU07",103,0)
 ;
"RTN","RAMAGU07",104,0)
 ; Output variables (see the IN5^VADPT description:
"RTN","RAMAGU07",105,0)
 ;   VAIP
"RTN","RAMAGU07",106,0)
 ;
"RTN","RAMAGU07",107,0)
 ; Return values:
"RTN","RAMAGU07",108,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU07",109,0)
 ;        0  Success
"RTN","RAMAGU07",110,0)
 ;
"RTN","RAMAGU07",111,0)
VAIN5(DFN,VAHOW) ;
"RTN","RAMAGU07",112,0)
 N A,I,J,K,K1,NC,NF,NQ,T,VAAP,VAC,VACA,VACA0,VADT,VADX,VAERR,VAID,VAMT,VAMV,VAMV0,VAMVT,VAN,VANOW,VAPP,VARM,VAROOT,VAS,VATS,VAV,VAW,VAWD,VAX,VAZ,X,Y
"RTN","RAMAGU07",113,0)
 Q:$G(DFN)'>0 $$IPVE^RAERR("DFN")
"RTN","RAMAGU07",114,0)
 D IN5^VADPT
"RTN","RAMAGU07",115,0)
 Q:$G(VAERR) $$IPVE^RAERR("DFN")
"RTN","RAMAGU07",116,0)
 ;--- Success
"RTN","RAMAGU07",117,0)
 Q 0
"RTN","RAMAGU08")
0^47^B43666394^n/a
"RTN","RAMAGU08",1,0)
RAMAGU08 ;HCIOFO/SG - ORDERS/EXAMS API (RAMISC VALID. #70) ; 3/6/09 4:16pm
"RTN","RAMAGU08",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAGU08",3,0)
 ;
"RTN","RAMAGU08",4,0)
 Q
"RTN","RAMAGU08",5,0)
 ;
"RTN","RAMAGU08",6,0)
 ;***** VALIDATES RAMISC PARAMETERS RELATED TO THE FILE #70
"RTN","RAMAGU08",7,0)
 ;
"RTN","RAMAGU08",8,0)
 ; RAIENS        IENS of the exam/case (subfile #70.03)
"RTN","RAMAGU08",9,0)
 ;
"RTN","RAMAGU08",10,0)
 ; RASTIEN       IEN of the requested exam status
"RTN","RAMAGU08",11,0)
 ;
"RTN","RAMAGU08",12,0)
 ; .RACTION      Reference to a local variable that indicates the
"RTN","RAMAGU08",13,0)
 ;               actions (can be combined):
"RTN","RAMAGU08",14,0)
 ;                 E  Examined (procedure has been performed)
"RTN","RAMAGU08",15,0)
 ;                 C  Complete
"RTN","RAMAGU08",16,0)
 ;
"RTN","RAMAGU08",17,0)
 ;               After exiting the function, this parameter contains
"RTN","RAMAGU08",18,0)
 ;               only those actions that actually have to be performed
"RTN","RAMAGU08",19,0)
 ;               in order to reach the requested status. For example, 
"RTN","RAMAGU08",20,0)
 ;               if "EC" is passed and the procedure has already been 
"RTN","RAMAGU08",21,0)
 ;               performed, then "E" will be removed.
"RTN","RAMAGU08",22,0)
 ;
"RTN","RAMAGU08",23,0)
 ;               If this parameter is empty after the call, then the
"RTN","RAMAGU08",24,0)
 ;               exam already has requested status.
"RTN","RAMAGU08",25,0)
 ;
"RTN","RAMAGU08",26,0)
 ; .RAMISC       Reference to a local array containing miscellaneous
"RTN","RAMAGU08",27,0)
 ;               request parameters.
"RTN","RAMAGU08",28,0)
 ;
"RTN","RAMAGU08",29,0)
 ; .RAFDA(       Reference to a local array where field values will
"RTN","RAMAGU08",30,0)
 ;               be prepared for storage (FileMan FDA array).
"RTN","RAMAGU08",31,0)
 ;
"RTN","RAMAGU08",32,0)
 ;   "RACNT")    This is an additional node that stores counter for
"RTN","RAMAGU08",33,0)
 ;               the IENS placeholders. Do not forget to remove this
"RTN","RAMAGU08",34,0)
 ;               node before passing the array into a FileMan API.
"RTN","RAMAGU08",35,0)
 ;
"RTN","RAMAGU08",36,0)
 ;   "RAIENS")   This is an additional node that stores IENS of the
"RTN","RAMAGU08",37,0)
 ;               record being processed. Do not forget to remove this 
"RTN","RAMAGU08",38,0)
 ;               node before passing the array into a FileMan API.
"RTN","RAMAGU08",39,0)
 ;
"RTN","RAMAGU08",40,0)
 ; [RAFDACNT]    New value for the placeholder counter for the RAFDA. 
"RTN","RAMAGU08",41,0)
 ;               If this parameter is greater than zero, it replaces
"RTN","RAMAGU08",42,0)
 ;               the value stored in the RAFDA("RACNT").
"RTN","RAMAGU08",43,0)
 ;
"RTN","RAMAGU08",44,0)
 ; Input variables:
"RTN","RAMAGU08",45,0)
 ;   RACN, RADTE, RAIMGTYI, RAMSPSDEFS
"RTN","RAMAGU08",46,0)
 ;
"RTN","RAMAGU08",47,0)
 ; Output variables:
"RTN","RAMAGU08",48,0)
 ;   RAMSPSDEFS, RAPROCIEN
"RTN","RAMAGU08",49,0)
 ;
"RTN","RAMAGU08",50,0)
 ; Return values:
"RTN","RAMAGU08",51,0)
 ;       <0  Error code
"RTN","RAMAGU08",52,0)
 ;        0  Ok
"RTN","RAMAGU08",53,0)
 ;
"RTN","RAMAGU08",54,0)
VAL70(RAIENS,RASTIEN,RACTION,RAMISC,RAFDA,RAFDACNT) ;
"RTN","RAMAGU08",55,0)
 N ERRCNT,EXMST,PNODE,RABUF,RACAT,RAI,RAMSG,RAPROC,RC,TMP
"RTN","RAMAGU08",56,0)
 ;
"RTN","RAMAGU08",57,0)
 ;=== Check required parameters and variables
"RTN","RAMAGU08",58,0)
 S RC=$$CHKREQ^RAUTL22("RACTION,RAIENS")  Q:RC<0 RC
"RTN","RAMAGU08",59,0)
 S RC=$$CHKREQ^RAUTL22("RACN,RADTE,RAIMGTYI","V")
"RTN","RAMAGU08",60,0)
 Q:RC<0 RC
"RTN","RAMAGU08",61,0)
 Q:$TR(RACTION,"EC")'="" $$IPVE^RAERR("RACTION")
"RTN","RAMAGU08",62,0)
 ;
"RTN","RAMAGU08",63,0)
 ;=== Initialize variables
"RTN","RAMAGU08",64,0)
 S RAFDA("RAIENS")=RAIENS
"RTN","RAMAGU08",65,0)
 S:$G(RAFDACNT)>0 RAFDA("RACNT")=+RAFDACNT
"RTN","RAMAGU08",66,0)
 S (ERRCNT,RC)=0
"RTN","RAMAGU08",67,0)
 ;
"RTN","RAMAGU08",68,0)
 ;=== Data from the EXAMINATIONS multiple
"RTN","RAMAGU08",69,0)
 D GETS^DIQ(70.03,RAIENS,"2;3;4","I","RABUF","RAMSG")
"RTN","RAMAGU08",70,0)
 Q:$G(DIERR) $$DBS^RAERR("RAMSG",-9,70.03,RAIENS)
"RTN","RAMAGU08",71,0)
 ;
"RTN","RAMAGU08",72,0)
 ;=== Check the current exam status
"RTN","RAMAGU08",73,0)
 S TMP=+$G(RABUF(70.03,RAIENS,3,"I"))
"RTN","RAMAGU08",74,0)
 S EXMST=$$EXMSTINF^RAMAGU06(TMP)  Q:EXMST<0 EXMST
"RTN","RAMAGU08",75,0)
 ;--- Already COMPLETE
"RTN","RAMAGU08",76,0)
 I $P(EXMST,U,3)=9  S RACTION=""  Q 0
"RTN","RAMAGU08",77,0)
 ;--- Already "EXAMINED"
"RTN","RAMAGU08",78,0)
 I $P(EXMST,U,3)>1  D  Q:RC<0 RC
"RTN","RAMAGU08",79,0)
 . S RC=$$GETEXMND^RAMAGU06(+EXMST)
"RTN","RAMAGU08",80,0)
 . ;--- Cannot find the "EXAMINED" status
"RTN","RAMAGU08",81,0)
 . S:'RC RACTION=$TR(RACTION,"E")
"RTN","RAMAGU08",82,0)
 Q:RACTION="" 0
"RTN","RAMAGU08",83,0)
 ;
"RTN","RAMAGU08",84,0)
 ;=== Detailed/series procedure and modifiers
"RTN","RAMAGU08",85,0)
 S PNODE=$NA(RAMISC("RAPROC"))
"RTN","RAMAGU08",86,0)
 S RAI=$O(@PNODE@(0))
"RTN","RAMAGU08",87,0)
 I RAI>0  S RAPROC=@PNODE@(RAI)  D         ; Update procedure
"RTN","RAMAGU08",88,0)
 . I $O(@PNODE@(RAI))>0  D ERROR^RAERR(-49)  S ERRCNT=ERRCNT+1
"RTN","RAMAGU08",89,0)
 E  S RAPROC=$G(RABUF(70.03,RAIENS,2,"I")) ; Current procedure
"RTN","RAMAGU08",90,0)
 ;--- Validate the procedure and modifiers
"RTN","RAMAGU08",91,0)
 S TMP=$$CHKPROC^RAMAGU03(RAPROC,RAIMGTYI,RADTE,"DS")
"RTN","RAMAGU08",92,0)
 S:TMP<0 ERRCNT=ERRCNT+1
"RTN","RAMAGU08",93,0)
 S RAPROCIEN=$S('TMP:+RAPROC,1:"")
"RTN","RAMAGU08",94,0)
 ;
"RTN","RAMAGU08",95,0)
 ;=== Get the exam status requirements
"RTN","RAMAGU08",96,0)
 S TMP=$$EXMSTREQ^RAMAGU06(RASTIEN,RAPROCIEN)  Q:TMP<0 TMP
"RTN","RAMAGU08",97,0)
 ;--- The "EF" report status means outside work. In this case,
"RTN","RAMAGU08",98,0)
 ;    cancel requirements for anything except (possibly) the
"RTN","RAMAGU08",99,0)
 ;--- diagnostic code. See the HELP1^RASTREQ for more details.
"RTN","RAMAGU08",100,0)
 I $G(RAMISC("RPTSTATUS"))'="EF"  S RAMSPSDEFS("R")=TMP
"RTN","RAMAGU08",101,0)
 E  S RAMSPSDEFS("R")="",$P(RAMSPSDEFS("R"),U,5)=$P(TMP,U,5)
"RTN","RAMAGU08",102,0)
 ;
"RTN","RAMAGU08",103,0)
 ;=== Category of exam
"RTN","RAMAGU08",104,0)
 S PNODE=$NA(RAMISC("EXAMCAT"))
"RTN","RAMAGU08",105,0)
 I $D(@PNODE)#10  S RACAT=@PNODE  D        ; Update category
"RTN","RAMAGU08",106,0)
 . S:$$CHECKFLD^RAMAGU09(PNODE,RACAT,70.03,4,RAIENS,1)<0 ERRCNT=ERRCNT+1
"RTN","RAMAGU08",107,0)
 E  S RACAT=$G(RABUF(70.03,RAIENS,4,"I"))  ; Current category
"RTN","RAMAGU08",108,0)
 ;
"RTN","RAMAGU08",109,0)
 ;=== Parameters specific to the exam category
"RTN","RAMAGU08",110,0)
 S:$$VALECPRM^RAMAGU09(RACAT)<0 ERRCNT=ERRCNT+1
"RTN","RAMAGU08",111,0)
 ;
"RTN","RAMAGU08",112,0)
 ;=== Technologist comment
"RTN","RAMAGU08",113,0)
 S:$$VALPRM^RAMAGU09("TECHCOMM")<0 ERRCNT=ERRCNT+1
"RTN","RAMAGU08",114,0)
 ;
"RTN","RAMAGU08",115,0)
 ;=== Validate parameters specific to different exam statuses
"RTN","RAMAGU08",116,0)
 I $TR(RACTION,"EC")'=RACTION  D  S:TMP<0 ERRCNT=ERRCNT+1
"RTN","RAMAGU08",117,0)
 . S TMP=$$VEXAMND(RAIENS,RACTION,.RAMISC,.RAFDA)
"RTN","RAMAGU08",118,0)
 I RACTION["C"  D  S:TMP<0 ERRCNT=ERRCNT+1
"RTN","RAMAGU08",119,0)
 . S TMP=$$VCOMPLT(RAIENS,RACTION,.RAMISC,.RAFDA)
"RTN","RAMAGU08",120,0)
 ;
"RTN","RAMAGU08",121,0)
 ;=== Error handling and cleanup
"RTN","RAMAGU08",122,0)
 K RAFDA(70.07) ; Do not modify the activity log directly
"RTN","RAMAGU08",123,0)
 Q $S(ERRCNT>0:-11,1:0)
"RTN","RAMAGU08",124,0)
 ;
"RTN","RAMAGU08",125,0)
 ;+++++ VALIDATES 'COMPLETE' PARAMETERS
"RTN","RAMAGU08",126,0)
VCOMPLT(RAIENS,RACTION,RAMISC,RAFDA) ;
"RTN","RAMAGU08",127,0)
 N ERRCNT,PNODE,TMP
"RTN","RAMAGU08",128,0)
 S ERRCNT=0
"RTN","RAMAGU08",129,0)
 ;
"RTN","RAMAGU08",130,0)
 ;=== Error handling and cleanup
"RTN","RAMAGU08",131,0)
 Q $S(ERRCNT>0:-11,1:0)
"RTN","RAMAGU08",132,0)
 ;
"RTN","RAMAGU08",133,0)
 ;+++++ VALIDATES 'EXAMINED' PARAMETERS
"RTN","RAMAGU08",134,0)
VEXAMND(RAIENS,RACTION,RAMISC,RAFDA) ;
"RTN","RAMAGU08",135,0)
 N ECNT,NAME,PI,PNODE,RAI,RC,TMP
"RTN","RAMAGU08",136,0)
 S ECNT=0
"RTN","RAMAGU08",137,0)
 ;
"RTN","RAMAGU08",138,0)
 ;=== Contrast media used
"RTN","RAMAGU08",139,0)
 S RC=$$VALPRM^RAMAGU09("CMUSED",,RAIENS)
"RTN","RAMAGU08",140,0)
 I RC>0  D
"RTN","RAMAGU08",141,0)
 . ;--- Clear the CONTMEDIA list if necessary
"RTN","RAMAGU08",142,0)
 . S TMP=$G(RAFDA(70.03,RAIENS,10))
"RTN","RAMAGU08",143,0)
 . I TMP'="Y"  K RAMISC("CONTMEDIA")  S RAMISC("CONTMEDIA")=""
"RTN","RAMAGU08",144,0)
 E  S:RC<0 ECNT=ECNT+1
"RTN","RAMAGU08",145,0)
 ;
"RTN","RAMAGU08",146,0)
 ;=== Contrast media
"RTN","RAMAGU08",147,0)
 S NAME="CONTMEDIA"
"RTN","RAMAGU08",148,0)
 S RC=$$VALPRM^RAMAGU09(NAME)
"RTN","RAMAGU08",149,0)
 I RC>0  D
"RTN","RAMAGU08",150,0)
 . S RAI=0
"RTN","RAMAGU08",151,0)
 . F  S RAI=$O(RAMISC(NAME,RAI))  Q:RAI'>0  D
"RTN","RAMAGU08",152,0)
 . . S:$$VALPRM^RAMAGU09(NAME,RAI)<0 ECNT=ECNT+1
"RTN","RAMAGU08",153,0)
 . ;--- Make the value of the CONTRAST MEDIA USED consistent
"RTN","RAMAGU08",154,0)
 . S TMP=$D(RAFDA(70.3225))
"RTN","RAMAGU08",155,0)
 . S:TMP RAFDA(70.03,RAIENS,10)=$S(TMP>1:"Y",1:"N")
"RTN","RAMAGU08",156,0)
 E  S:RC<0 ECNT=ECNT+1
"RTN","RAMAGU08",157,0)
 ;
"RTN","RAMAGU08",158,0)
 ;=== Complication
"RTN","RAMAGU08",159,0)
 S NAME="COMPLICAT"
"RTN","RAMAGU08",160,0)
 S RC=$$VALPRM^RAMAGU09(NAME,,RAIENS)
"RTN","RAMAGU08",161,0)
 I RC>0  D
"RTN","RAMAGU08",162,0)
 . S PNODE=$NA(RAMISC(NAME))
"RTN","RAMAGU08",163,0)
 . ;--- COMPLICATION TEXT
"RTN","RAMAGU08",164,0)
 . S TMP=$P($G(@PNODE),U,2)
"RTN","RAMAGU08",165,0)
 . S:$$CHECKFLD^RAMAGU09(PNODE,TMP,70.03,16.5,RAIENS)<0 ECNT=ECNT+1
"RTN","RAMAGU08",166,0)
 E  S:RC<0 ECNT=ECNT+1
"RTN","RAMAGU08",167,0)
 ;
"RTN","RAMAGU08",168,0)
 ;=== CPT Modifiers
"RTN","RAMAGU08",169,0)
 S NAME="CPTMODS"
"RTN","RAMAGU08",170,0)
 S RC=$$VALPRM^RAMAGU09(NAME)
"RTN","RAMAGU08",171,0)
 I RC>0  D
"RTN","RAMAGU08",172,0)
 . S RAI=0
"RTN","RAMAGU08",173,0)
 . F  S RAI=$O(RAMISC(NAME,RAI))  Q:RAI'>0  D
"RTN","RAMAGU08",174,0)
 . . S:$$VALPRM^RAMAGU09(NAME,RAI)<0 ECNT=ECNT+1
"RTN","RAMAGU08",175,0)
 E  S:RC<0 ECNT=ECNT+1
"RTN","RAMAGU08",176,0)
 ;
"RTN","RAMAGU08",177,0)
 ;=== Film size
"RTN","RAMAGU08",178,0)
 S NAME="FILMSIZE"
"RTN","RAMAGU08",179,0)
 S RC=$$VALPRM^RAMAGU09(NAME)
"RTN","RAMAGU08",180,0)
 I RC>0  D
"RTN","RAMAGU08",181,0)
 . S RAI=0
"RTN","RAMAGU08",182,0)
 . F  S RAI=$O(RAMISC(NAME,RAI))  Q:RAI'>0  D
"RTN","RAMAGU08",183,0)
 . . S PI=$NA(RAMISC(NAME,RAI))  K IENS
"RTN","RAMAGU08",184,0)
 . . ;--- FILM SIZE
"RTN","RAMAGU08",185,0)
 . . S:$$VALPRM^RAMAGU09(NAME,RAI,.IENS)<0 ECNT=ECNT+1
"RTN","RAMAGU08",186,0)
 . . ;--- AMOUNT
"RTN","RAMAGU08",187,0)
 . . S TMP=$P($G(@PI),U,2)
"RTN","RAMAGU08",188,0)
 . . S:$$CHECKFLD^RAMAGU09(PI,TMP,70.04,2,IENS)<0 ECNT=ECNT+1
"RTN","RAMAGU08",189,0)
 E  S:RC<0 ECNT=ECNT+1
"RTN","RAMAGU08",190,0)
 ;
"RTN","RAMAGU08",191,0)
 ;=== Primary camera/equipment/room
"RTN","RAMAGU08",192,0)
 S:$$VALPRM^RAMAGU09("PRIMCAM",,RAIENS)<0 ECNT=ECNT+1
"RTN","RAMAGU08",193,0)
 ;
"RTN","RAMAGU08",194,0)
 ;=== Technologist
"RTN","RAMAGU08",195,0)
 S NAME="TECH"
"RTN","RAMAGU08",196,0)
 S RC=$$VALPRM^RAMAGU09(NAME)
"RTN","RAMAGU08",197,0)
 I RC>0  D
"RTN","RAMAGU08",198,0)
 . S RAI=0
"RTN","RAMAGU08",199,0)
 . F  S RAI=$O(RAMISC(NAME,RAI))  Q:RAI'>0  D
"RTN","RAMAGU08",200,0)
 . . S:$$VALPRM^RAMAGU09(NAME,RAI)<0 ECNT=ECNT+1
"RTN","RAMAGU08",201,0)
 E  S:RC<0 ECNT=ECNT+1
"RTN","RAMAGU08",202,0)
 ;
"RTN","RAMAGU08",203,0)
 ;=== Primary diagnostic code
"RTN","RAMAGU08",204,0)
 S:$$VALPRM^RAMAGU09("PRIMDXCODE",,RAIENS)<0 ECNT=ECNT+1
"RTN","RAMAGU08",205,0)
 ;
"RTN","RAMAGU08",206,0)
 ;=== Primary interpreting resident and staff
"RTN","RAMAGU08",207,0)
 S RC=0
"RTN","RAMAGU08",208,0)
 F NAME="PRIMINTRES","PRIMINTSTF"  D
"RTN","RAMAGU08",209,0)
 . ;--- Check the parameter but does not record errors
"RTN","RAMAGU08",210,0)
 . S TMP=$$VALPRM^RAMAGU09(NAME,,RAIENS,,"C")
"RTN","RAMAGU08",211,0)
 . ;--- Handle defined/not defined cases
"RTN","RAMAGU08",212,0)
 . I TMP'<0  S RC=RC+1  Q
"RTN","RAMAGU08",213,0)
 . I +TMP=-8  S RC=RC-1  Q
"RTN","RAMAGU08",214,0)
 . ;--- Otherwise, call again to record the error(s)
"RTN","RAMAGU08",215,0)
 . S TMP=$$VALPRM^RAMAGU09(NAME,,RAIENS),ECNT=ECNT+1
"RTN","RAMAGU08",216,0)
 . ;--- Prevent the code below from recording additional errors
"RTN","RAMAGU08",217,0)
 . S RC=3
"RTN","RAMAGU08",218,0)
 ;--- If neither of the two parameters is defined but one of
"RTN","RAMAGU08",219,0)
 ;--- them is required, record the error.
"RTN","RAMAGU08",220,0)
 I RC<0  D  S ECNT=ECNT+1
"RTN","RAMAGU08",221,0)
 . S TMP=$NA(RAMISC("PRIMINTRES"))_", "_$NA(RAMISC("PRIMINTSTF"))
"RTN","RAMAGU08",222,0)
 . D ERROR^RAERR(-13,TMP)
"RTN","RAMAGU08",223,0)
 ;
"RTN","RAMAGU08",224,0)
 ;=== Error handling and cleanup
"RTN","RAMAGU08",225,0)
 Q $S(ECNT>0:-11,1:0)
"RTN","RAMAGU09")
0^50^B47840668^n/a
"RTN","RAMAGU09",1,0)
RAMAGU09 ;HCIOFO/SG - ORDERS/EXAMS API (RAMISC VALIDATION) ; 2/24/09 3:10pm
"RTN","RAMAGU09",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAGU09",3,0)
 ;
"RTN","RAMAGU09",4,0)
 ;
"RTN","RAMAGU09",5,0)
 ; NOTE: All entry points in this routine are internal ones. Do not
"RTN","RAMAGU09",6,0)
 ;       call it from outside of routines that validate miscellaneous 
"RTN","RAMAGU09",7,0)
 ;       exam parameters (^RAMAGU08, ^RAMAGU10, ^RAMAGU14, etc.).
"RTN","RAMAGU09",8,0)
 ;
"RTN","RAMAGU09",9,0)
 Q
"RTN","RAMAGU09",10,0)
 ;
"RTN","RAMAGU09",11,0)
 ;+++++ CHECKS THE FIELD VALUE
"RTN","RAMAGU09",12,0)
 ;
"RTN","RAMAGU09",13,0)
 ; PNODE         Name of the parameter
"RTN","RAMAGU09",14,0)
 ; VALUE         Parameter value
"RTN","RAMAGU09",15,0)
 ;
"RTN","RAMAGU09",16,0)
 ; FILE          File number
"RTN","RAMAGU09",17,0)
 ; FIELD         Field number
"RTN","RAMAGU09",18,0)
 ;
"RTN","RAMAGU09",19,0)
 ; [[.]IENS]     IENS of the record. If this parameter is not defined
"RTN","RAMAGU09",20,0)
 ;               or empty, a new IENS is automatically generated by
"RTN","RAMAGU09",21,0)
 ;               the $$IENS^RAMAGU09.
"RTN","RAMAGU09",22,0)
 ;
"RTN","RAMAGU09",23,0)
 ; [REQUIRED]    If this parameter is defined and not zero, then "@"
"RTN","RAMAGU09",24,0)
 ;               or an empty string (deletion) are not allowed.
"RTN","RAMAGU09",25,0)
 ;
"RTN","RAMAGU09",26,0)
 ; Input variables:
"RTN","RAMAGU09",27,0)
 ;   RAFDA
"RTN","RAMAGU09",28,0)
 ;
"RTN","RAMAGU09",29,0)
 ; Output variables:
"RTN","RAMAGU09",30,0)
 ;   RAFDA
"RTN","RAMAGU09",31,0)
 ;
"RTN","RAMAGU09",32,0)
 ; Return values:
"RTN","RAMAGU09",33,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU09",34,0)
 ;        0  Ok
"RTN","RAMAGU09",35,0)
 ;
"RTN","RAMAGU09",36,0)
CHECKFLD(PNODE,VALUE,FILE,FIELD,IENS,REQUIRED) ;
"RTN","RAMAGU09",37,0)
 N RAMSG,RESULT
"RTN","RAMAGU09",38,0)
 I $G(REQUIRED)  Q:VALUE?.1"@" $$IPVE^RAERR(PNODE)
"RTN","RAMAGU09",39,0)
 S:$G(IENS)="" IENS=$$IENS
"RTN","RAMAGU09",40,0)
 D VAL^DIE(FILE,IENS,FIELD,"F",VALUE,.RESULT,"RAFDA","RAMSG")
"RTN","RAMAGU09",41,0)
 Q:$G(DIERR) $$DBS^RAERR("RAMSG",-9)
"RTN","RAMAGU09",42,0)
 Q $S(RESULT="^":$$IPVE^RAERR(PNODE),1:0)
"RTN","RAMAGU09",43,0)
 ;
"RTN","RAMAGU09",44,0)
 ;+++++ GENERATES IENS FOR ADDING A RECORD TO A MULTIPLE
"RTN","RAMAGU09",45,0)
 ;
"RTN","RAMAGU09",46,0)
 ; Input variables:
"RTN","RAMAGU09",47,0)
 ;   RAFDA
"RTN","RAMAGU09",48,0)
 ;
"RTN","RAMAGU09",49,0)
 ; Output variables:
"RTN","RAMAGU09",50,0)
 ;   RAFDA
"RTN","RAMAGU09",51,0)
 ;
"RTN","RAMAGU09",52,0)
IENS() ;
"RTN","RAMAGU09",53,0)
 S RAFDA("RACNT")=$G(RAFDA("RACNT"))+1
"RTN","RAMAGU09",54,0)
 Q "+"_RAFDA("RACNT")_","_RAFDA("RAIENS")
"RTN","RAMAGU09",55,0)
 ;
"RTN","RAMAGU09",56,0)
 ;+++++ VALIDATES EXAM CATEGORY SPECIFIC PARAMETERS
"RTN","RAMAGU09",57,0)
 ;
"RTN","RAMAGU09",58,0)
 ; RACAT         Exam category
"RTN","RAMAGU09",59,0)
 ;
"RTN","RAMAGU09",60,0)
 ; Input variables:
"RTN","RAMAGU09",61,0)
 ;   RAIENS, RAMISC
"RTN","RAMAGU09",62,0)
 ;
"RTN","RAMAGU09",63,0)
 ; Output variables:
"RTN","RAMAGU09",64,0)
 ;   RAFDA, RAMISC
"RTN","RAMAGU09",65,0)
 ;
"RTN","RAMAGU09",66,0)
 ; Return values:
"RTN","RAMAGU09",67,0)
 ;       <0  Error code
"RTN","RAMAGU09",68,0)
 ;        0  Parameters are valid
"RTN","RAMAGU09",69,0)
 ;
"RTN","RAMAGU09",70,0)
VALECPRM(RACAT) ;
"RTN","RAMAGU09",71,0)
 N ERRCNT,PNODE,RC,TMP
"RTN","RAMAGU09",72,0)
 S (ERRCNT,RC)=0
"RTN","RAMAGU09",73,0)
 ;---
"RTN","RAMAGU09",74,0)
 I RACAT="I"  D  ;--- Inpatient
"RTN","RAMAGU09",75,0)
 . ;--- Bedsection
"RTN","RAMAGU09",76,0)
 . S PNODE=$NA(RAMISC("BEDSECT"))
"RTN","RAMAGU09",77,0)
 . I $D(@PNODE)#10  D
"RTN","RAMAGU09",78,0)
 . . S TMP=$$VI($P(@PNODE,U))
"RTN","RAMAGU09",79,0)
 . . S:$$CHECKFLD(PNODE,TMP,70.03,19,RAIENS)<0 ERRCNT=ERRCNT+1
"RTN","RAMAGU09",80,0)
 . ;--- Service
"RTN","RAMAGU09",81,0)
 . S PNODE=$NA(RAMISC("SERVICE"))
"RTN","RAMAGU09",82,0)
 . I $D(@PNODE)#10  D
"RTN","RAMAGU09",83,0)
 . . S TMP=$$VI($P(@PNODE,U))
"RTN","RAMAGU09",84,0)
 . . S:$$CHECKFLD(PNODE,TMP,70.03,7,RAIENS)<0 ERRCNT=ERRCNT+1
"RTN","RAMAGU09",85,0)
 . ;--- Ward
"RTN","RAMAGU09",86,0)
 . S PNODE=$NA(RAMISC("WARD"))
"RTN","RAMAGU09",87,0)
 . I $D(@PNODE)#10  D
"RTN","RAMAGU09",88,0)
 . . S TMP=$$VI($P(@PNODE,U))
"RTN","RAMAGU09",89,0)
 . . S:$$CHECKFLD(PNODE,TMP,70.03,6,RAIENS)<0 ERRCNT=ERRCNT+1
"RTN","RAMAGU09",90,0)
 . ;---
"RTN","RAMAGU09",91,0)
 . K RAMISC("PRINCLIN")
"RTN","RAMAGU09",92,0)
 E  D            ;--- Other categories
"RTN","RAMAGU09",93,0)
 . ;--- Principal Clinic
"RTN","RAMAGU09",94,0)
 . S PNODE=$NA(RAMISC("PRINCLIN"))
"RTN","RAMAGU09",95,0)
 . I $D(@PNODE)#10  S RC=0  D
"RTN","RAMAGU09",96,0)
 . . S TMP=$$VI($P(@PNODE,U))
"RTN","RAMAGU09",97,0)
 . . S:$$CHECKFLD(PNODE,TMP,70.03,8,RAIENS,1)<0 ERRCNT=ERRCNT+1
"RTN","RAMAGU09",98,0)
 . ;---
"RTN","RAMAGU09",99,0)
 . F I="BEDSECT","SERVICE","WARD"  K RAMISC(I)
"RTN","RAMAGU09",100,0)
 ;---
"RTN","RAMAGU09",101,0)
 Q $S(ERRCNT>0:-11,1:0)
"RTN","RAMAGU09",102,0)
 ;
"RTN","RAMAGU09",103,0)
 ;+++++ VALIDATES THE PARAMETER
"RTN","RAMAGU09",104,0)
 ;
"RTN","RAMAGU09",105,0)
 ; NAME          Parameter name
"RTN","RAMAGU09",106,0)
 ;
"RTN","RAMAGU09",107,0)
 ; [SEQ]         Sequential number of the parameter value. If this
"RTN","RAMAGU09",108,0)
 ;               parameter is greater than 0, then the parameter
"RTN","RAMAGU09",109,0)
 ;               value is loaded from the @NODE@(NAME,SEQ) node.
"RTN","RAMAGU09",110,0)
 ;               Otherwise, the parameter value is loaded from the
"RTN","RAMAGU09",111,0)
 ;               @NODE@(NAME) node.
"RTN","RAMAGU09",112,0)
 ;
"RTN","RAMAGU09",113,0)
 ; [[.]IENS]     IENS of the record. If this parameter is not defined
"RTN","RAMAGU09",114,0)
 ;               or empty, a new IENS is automatically generated by
"RTN","RAMAGU09",115,0)
 ;               the $$IENS^RAMAGU09.
"RTN","RAMAGU09",116,0)
 ;
"RTN","RAMAGU09",117,0)
 ; [NODE]        Base node in the RAMISC arrays. By default
"RTN","RAMAGU09",118,0)
 ;               ($G(NODE)=""), the RAMISC variable is assumed.
"RTN","RAMAGU09",119,0)
 ;
"RTN","RAMAGU09",120,0)
 ; [FLAGS]       Flags that control the execution (can be combined):
"RTN","RAMAGU09",121,0)
 ;
"RTN","RAMAGU09",122,0)
 ;                 C  Perform the checks but do not record errors.
"RTN","RAMAGU09",123,0)
 ;
"RTN","RAMAGU09",124,0)
 ;                 O  If this flag is defined, then the validated
"RTN","RAMAGU09",125,0)
 ;                    parameter is considered 'optional' regardless
"RTN","RAMAGU09",126,0)
 ;                    of requirements stored in the RAMSPSDEFS.
"RTN","RAMAGU09",127,0)
 ;
"RTN","RAMAGU09",128,0)
 ;                 R  If this flag is defined, then the validated
"RTN","RAMAGU09",129,0)
 ;                    parameter is considered 'required' regardless
"RTN","RAMAGU09",130,0)
 ;                    of requirements stored in the RAMSPSDEFS.
"RTN","RAMAGU09",131,0)
 ;
"RTN","RAMAGU09",132,0)
 ; Input variables:
"RTN","RAMAGU09",133,0)
 ;   RAFDA, RAMISC, RAMSPSDEFS
"RTN","RAMAGU09",134,0)
 ;
"RTN","RAMAGU09",135,0)
 ; Output variables:
"RTN","RAMAGU09",136,0)
 ;   RAFDA
"RTN","RAMAGU09",137,0)
 ;
"RTN","RAMAGU09",138,0)
 ; Return values:
"RTN","RAMAGU09",139,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU09",140,0)
 ;        0  Ok (parameter is not defined)
"RTN","RAMAGU09",141,0)
 ;       >0  Ok (parameter is defined)
"RTN","RAMAGU09",142,0)
 ;
"RTN","RAMAGU09",143,0)
VALPRM(NAME,SEQ,IENS,NODE,FLAGS) ;
"RTN","RAMAGU09",144,0)
 N FILE,FIELD,LSTPRM,PNODE,PRMDEF,RAMSG,RARES,RC,REQUIRED,TMP,TYPE,VALUE
"RTN","RAMAGU09",145,0)
 S:$G(NODE)="" NODE="RAMISC"
"RTN","RAMAGU09",146,0)
 S PNODE=$S($G(SEQ)>0:$NA(@NODE@(NAME,SEQ)),1:$NA(@NODE@(NAME)))
"RTN","RAMAGU09",147,0)
 ;
"RTN","RAMAGU09",148,0)
 ;=== Check the flags
"RTN","RAMAGU09",149,0)
 S FLAGS=$G(FLAGS),TMP=0
"RTN","RAMAGU09",150,0)
 S:FLAGS["O" REQUIRED=0,TMP=TMP+1
"RTN","RAMAGU09",151,0)
 S:FLAGS["R" REQUIRED=1,TMP=TMP+1
"RTN","RAMAGU09",152,0)
 Q:TMP>1 $$IPVE^RAERR("FLAGS")
"RTN","RAMAGU09",153,0)
 ;
"RTN","RAMAGU09",154,0)
 ;=== Get the parameter definition
"RTN","RAMAGU09",155,0)
 S PRMDEF=$G(RAMSPSDEFS("N",NAME))
"RTN","RAMAGU09",156,0)
 S FILE=+$P(PRMDEF,U),FIELD=+$P(PRMDEF,U,2),TYPE=$P(PRMDEF,U,3)
"RTN","RAMAGU09",157,0)
 S LSTPRM=(TYPE["M")&($G(SEQ)'>0)  ; "List" mode
"RTN","RAMAGU09",158,0)
 Q:(FILE'>0)!('LSTPRM&(FIELD'>0)) $$ERROR^RAERR(-58,,NAME)
"RTN","RAMAGU09",159,0)
 S:$G(IENS)="" IENS=$$IENS
"RTN","RAMAGU09",160,0)
 ;
"RTN","RAMAGU09",161,0)
 ;=== Preserve the error stack so that errors are not recorded
"RTN","RAMAGU09",162,0)
 I FLAGS["C"  N RAERROR
"RTN","RAMAGU09",163,0)
 ;
"RTN","RAMAGU09",164,0)
 ;=== Unless overridden by the caller, determine
"RTN","RAMAGU09",165,0)
 ;=== if the field value is required
"RTN","RAMAGU09",166,0)
 D:$G(REQUIRED)=""
"RTN","RAMAGU09",167,0)
 . ;--- .01 fields are required
"RTN","RAMAGU09",168,0)
 . I FIELD=.01,'LSTPRM  S REQUIRED=1  Q
"RTN","RAMAGU09",169,0)
 . ;--- Ignore missing required values if the flag is set
"RTN","RAMAGU09",170,0)
 . I $G(RAMISC("FLAGS"))["F"  S REQUIRED=0  Q
"RTN","RAMAGU09",171,0)
 . ;--- Check the parameter definition
"RTN","RAMAGU09",172,0)
 . S TMP=+$P(PRMDEF,U,4)
"RTN","RAMAGU09",173,0)
 . S REQUIRED=$S(TMP>0:+$P($G(RAMSPSDEFS("R")),U,TMP),1:0)
"RTN","RAMAGU09",174,0)
 ;
"RTN","RAMAGU09",175,0)
 ;=== If the API is called in "list" mode, check if the parameter
"RTN","RAMAGU09",176,0)
 ;    list is provided. If it is not but the values are required
"RTN","RAMAGU09",177,0)
 ;    for the new exam status, check if the corresponding multiple
"RTN","RAMAGU09",178,0)
 ;=== has any records already.
"RTN","RAMAGU09",179,0)
 I LSTPRM  S RC=0  D:$D(@PNODE)<10  Q $S(RC<0:RC,1:$D(@PNODE)>0)
"RTN","RAMAGU09",180,0)
 . N ROOT
"RTN","RAMAGU09",181,0)
 . ;--- Check for data deletion request
"RTN","RAMAGU09",182,0)
 . I $D(@PNODE)#10  D  Q
"RTN","RAMAGU09",183,0)
 . . ;--- Deletion of required data is not allowed
"RTN","RAMAGU09",184,0)
 . . I REQUIRED  S RC=$$IPVE^RAERR(PNODE)  Q
"RTN","RAMAGU09",185,0)
 . . ;--- Mark the multiple for deletion
"RTN","RAMAGU09",186,0)
 . . K RAFDA(FILE)  S RAFDA(FILE)=""
"RTN","RAMAGU09",187,0)
 . ;--- Check if the multiple field has any records
"RTN","RAMAGU09",188,0)
 . Q:'REQUIRED
"RTN","RAMAGU09",189,0)
 . S TMP=","_RAFDA("RAIENS"),ROOT=$$ROOT^DILFD(FILE,TMP,1)
"RTN","RAMAGU09",190,0)
 . I ROOT=""  S RC=$$ERROR^RAERR(-50,,FILE,TMP)  Q
"RTN","RAMAGU09",191,0)
 . S:$O(@ROOT@(0))'>0 RC=$$ERROR^RAERR(-8,,PNODE)
"RTN","RAMAGU09",192,0)
 ;
"RTN","RAMAGU09",193,0)
 ;=== If the parameter is not provided but the value is required
"RTN","RAMAGU09",194,0)
 ;    for the new exam status, check if the corresponding field
"RTN","RAMAGU09",195,0)
 ;=== has a non-empty value already.
"RTN","RAMAGU09",196,0)
 I '$D(@PNODE)  S RC=0  D:REQUIRED  Q $S(RC<0:RC,1:0)
"RTN","RAMAGU09",197,0)
 . ;--- If the IENS starts with a placeholder, then there is no data
"RTN","RAMAGU09",198,0)
 . S TMP=$P($G(IENS),",")
"RTN","RAMAGU09",199,0)
 . I 'TMP!(+TMP'=TMP)  S RC=$$ERROR^RAERR(-8,,PNODE)  Q
"RTN","RAMAGU09",200,0)
 . ;--- Word processing field
"RTN","RAMAGU09",201,0)
 . I TYPE["W"  D  Q
"RTN","RAMAGU09",202,0)
 . . N I,RABUF
"RTN","RAMAGU09",203,0)
 . . S TMP=$$GET1^DIQ(FILE,IENS,FIELD,,"RABUF","RAMSG")
"RTN","RAMAGU09",204,0)
 . . I $G(DIERR)  S RC=$$DBS^RAERR("RAMSG",-9,FILE,IENS)  Q
"RTN","RAMAGU09",205,0)
 . . S I=0,RC=1
"RTN","RAMAGU09",206,0)
 . . F  S I=$O(RABUF(I))  Q:I'>0  I RABUF(I)'?." "  S RC=0  Q
"RTN","RAMAGU09",207,0)
 . . S:RC RC=$$ERROR^RAERR(-8,,PNODE)
"RTN","RAMAGU09",208,0)
 . ;--- Other field types
"RTN","RAMAGU09",209,0)
 . S TMP=$$GET1^DIQ(FILE,IENS,FIELD,"I",,"RAMSG")
"RTN","RAMAGU09",210,0)
 . I $G(DIERR)  S RC=$$DBS^RAERR("RAMSG",-9,FILE,IENS)  Q
"RTN","RAMAGU09",211,0)
 . S:TMP="" RC=$$ERROR^RAERR(-8,,PNODE)
"RTN","RAMAGU09",212,0)
 ;
"RTN","RAMAGU09",213,0)
 ;=== Validate the word-processing parameter
"RTN","RAMAGU09",214,0)
 I TYPE["W"  S RC=0  D  Q $S(RC<0:RC,1:1)
"RTN","RAMAGU09",215,0)
 . N I
"RTN","RAMAGU09",216,0)
 . ;--- Check for data deletion request
"RTN","RAMAGU09",217,0)
 . I $D(@PNODE)<10  D  Q
"RTN","RAMAGU09",218,0)
 . . I REQUIRED!(@PNODE'?.1"@")  S RC=$$IPVE^RAERR(PNODE)  Q
"RTN","RAMAGU09",219,0)
 . . S RAFDA(FILE,IENS,FIELD)="@"
"RTN","RAMAGU09",220,0)
 . ;--- Check if the value is not empty
"RTN","RAMAGU09",221,0)
 . S I=0,RC=1
"RTN","RAMAGU09",222,0)
 . F  S I=$O(@PNODE@(I))  Q:I'>0  I @PNODE@(I)'?." "  S RC=0  Q
"RTN","RAMAGU09",223,0)
 . I RC  S RC=$$IPVE^RAERR(-8,,PNODE)  Q
"RTN","RAMAGU09",224,0)
 . S RAFDA(FILE,IENS,FIELD)=PNODE
"RTN","RAMAGU09",225,0)
 ;
"RTN","RAMAGU09",226,0)
 ;=== Pre-process the parameter value according to the field type.
"RTN","RAMAGU09",227,0)
 ;=== Deletion of required field values is never allowed.
"RTN","RAMAGU09",228,0)
 S VALUE=$P($G(@PNODE),U)
"RTN","RAMAGU09",229,0)
 I VALUE'?.1"@"  D
"RTN","RAMAGU09",230,0)
 . ;--- Pre-process the parameter value according to the field type
"RTN","RAMAGU09",231,0)
 . I TYPE["P"  S VALUE=$$VI(VALUE)  Q
"RTN","RAMAGU09",232,0)
 . I TYPE["D"  S VALUE=$$FMTE^XLFDT(VALUE)   Q
"RTN","RAMAGU09",233,0)
 E  Q:REQUIRED $$IPVE^RAERR(PNODE)
"RTN","RAMAGU09",234,0)
 ;
"RTN","RAMAGU09",235,0)
 ;=== Let the FileMan validate the parameter value
"RTN","RAMAGU09",236,0)
 D VAL^DIE(FILE,IENS,FIELD,"F",VALUE,.RARES,"RAFDA","RAMSG")
"RTN","RAMAGU09",237,0)
 Q:$G(DIERR) $$DBS^RAERR("RAMSG",-9)
"RTN","RAMAGU09",238,0)
 Q $S(RARES="^":$$IPVE^RAERR(PNODE),1:1)
"RTN","RAMAGU09",239,0)
 ;
"RTN","RAMAGU09",240,0)
 ;+++++ RETURNS PSEUDO-EXTERNAL VALUE OF THE IEN
"RTN","RAMAGU09",241,0)
VI(IEN) ;
"RTN","RAMAGU09",242,0)
 Q $S(IEN?.1"@":IEN,1:"`"_IEN)
"RTN","RAMAGU10")
0^29^B7429399^n/a
"RTN","RAMAGU10",1,0)
RAMAGU10 ;HCIOFO/SG - ORDERS/EXAMS API (RAMISC VALID. #74) ; 3/5/09 2:23pm
"RTN","RAMAGU10",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAGU10",3,0)
 ;
"RTN","RAMAGU10",4,0)
 Q
"RTN","RAMAGU10",5,0)
 ;
"RTN","RAMAGU10",6,0)
 ;***** VALIDATES RAMISC PARAMETERS RELATED TO THE FILE #74
"RTN","RAMAGU10",7,0)
 ;
"RTN","RAMAGU10",8,0)
 ; RAIENS        IENS of the report (file #74)
"RTN","RAMAGU10",9,0)
 ;
"RTN","RAMAGU10",10,0)
 ; RACTION       Action (can be combined):
"RTN","RAMAGU10",11,0)
 ;                 E  Examined (procedure has been performed)
"RTN","RAMAGU10",12,0)
 ;                 C  Complete
"RTN","RAMAGU10",13,0)
 ;
"RTN","RAMAGU10",14,0)
 ; .RAMISC       Reference to a local array containing miscellaneous
"RTN","RAMAGU10",15,0)
 ;               request parameters.
"RTN","RAMAGU10",16,0)
 ;
"RTN","RAMAGU10",17,0)
 ; .RAFDA(       Reference to a local array where field values will
"RTN","RAMAGU10",18,0)
 ;               be prepared for storage (FileMan FDA array).
"RTN","RAMAGU10",19,0)
 ;
"RTN","RAMAGU10",20,0)
 ;   "RACNT")    This is an additional node that stores counter for
"RTN","RAMAGU10",21,0)
 ;               the IENS placeholders. Do not forget to remove this
"RTN","RAMAGU10",22,0)
 ;               node before passing the array into a FileMan API.
"RTN","RAMAGU10",23,0)
 ;
"RTN","RAMAGU10",24,0)
 ;   "RAIENS")   This is an additional node that stores IENS of the
"RTN","RAMAGU10",25,0)
 ;               record being processed. Do not forget to remove this 
"RTN","RAMAGU10",26,0)
 ;               node before passing the array into a FileMan API.
"RTN","RAMAGU10",27,0)
 ;
"RTN","RAMAGU10",28,0)
 ; [RAFDACNT]    New value for the placeholder counter for the RAFDA. 
"RTN","RAMAGU10",29,0)
 ;               If this parameter is greater than zero, it replaces
"RTN","RAMAGU10",30,0)
 ;               the value stored in the RAFDA("RACNT").
"RTN","RAMAGU10",31,0)
 ;
"RTN","RAMAGU10",32,0)
 ; Input variables:
"RTN","RAMAGU10",33,0)
 ;   RAMSPSDEFS
"RTN","RAMAGU10",34,0)
 ;
"RTN","RAMAGU10",35,0)
 ; Return values:
"RTN","RAMAGU10",36,0)
 ;       <0  Error code
"RTN","RAMAGU10",37,0)
 ;        0  Ok
"RTN","RAMAGU10",38,0)
 ;
"RTN","RAMAGU10",39,0)
VAL74(RAIENS,RACTION,RAMISC,RAFDA,RAFDACNT) ;
"RTN","RAMAGU10",40,0)
 N ERRCNT,RC,TMP
"RTN","RAMAGU10",41,0)
 ;
"RTN","RAMAGU10",42,0)
 ;--- Check required parameters and variables
"RTN","RAMAGU10",43,0)
 S RC=$$CHKREQ^RAUTL22("RACTION,RAIENS")  Q:RC<0 RC
"RTN","RAMAGU10",44,0)
 Q:$TR(RACTION,"EC")'="" $$IPVE^RAERR("RACTION")
"RTN","RAMAGU10",45,0)
 ;
"RTN","RAMAGU10",46,0)
 ;--- Initialize variables
"RTN","RAMAGU10",47,0)
 S RAFDA("RAIENS")=RAIENS
"RTN","RAMAGU10",48,0)
 S:$G(RAFDACNT)>0 RAFDA("RACNT")=+RAFDACNT
"RTN","RAMAGU10",49,0)
 S (ERRCNT,RC)=0
"RTN","RAMAGU10",50,0)
 ;
"RTN","RAMAGU10",51,0)
 ;--- Validate parameters specific to the 'COMPLETE' status
"RTN","RAMAGU10",52,0)
 I RACTION["C"  D  S:TMP<0 ERRCNT=ERRCNT+1
"RTN","RAMAGU10",53,0)
 . S TMP=$$VCOMPLT(RAIENS,RACTION,.RAMISC,.RAFDA)
"RTN","RAMAGU10",54,0)
 ;
"RTN","RAMAGU10",55,0)
 ;--- Error handling and cleanup
"RTN","RAMAGU10",56,0)
 Q $S(ERRCNT>0:-11,1:0)
"RTN","RAMAGU10",57,0)
 ;
"RTN","RAMAGU10",58,0)
 ;+++++ VALIDATES 'COMPLETE' PARAMETERS
"RTN","RAMAGU10",59,0)
VCOMPLT(RAIENS,RACTION,RAMISC,RAFDA) ;
"RTN","RAMAGU10",60,0)
 N ERRCNT,NAME,PNODE,RC,TMP
"RTN","RAMAGU10",61,0)
 S ERRCNT=0
"RTN","RAMAGU10",62,0)
 ;
"RTN","RAMAGU10",63,0)
 ;=== Word-processing fields
"RTN","RAMAGU10",64,0)
 S:$$VALPRM^RAMAGU09("ACLHIST",,RAIENS)<0 ERRCNT=ERRCNT+1
"RTN","RAMAGU10",65,0)
 S:$$VALPRM^RAMAGU09("IMPRESSION",,RAIENS)<0 ERRCNT=ERRCNT+1
"RTN","RAMAGU10",66,0)
 S:$$VALPRM^RAMAGU09("REPORT",,RAIENS,,"R")<0 ERRCNT=ERRCNT+1
"RTN","RAMAGU10",67,0)
 ;
"RTN","RAMAGU10",68,0)
 ;=== Problem statement
"RTN","RAMAGU10",69,0)
 S RC=$$VALPRM^RAMAGU09("PROBSTAT",,RAIENS)
"RTN","RAMAGU10",70,0)
 I RC>0  D
"RTN","RAMAGU10",71,0)
 . K RAFDA(74,RAIENS,25)  ; Do not store directly
"RTN","RAMAGU10",72,0)
 E  S:RC<0 ERRCNT=ERRCNT+1
"RTN","RAMAGU10",73,0)
 ;
"RTN","RAMAGU10",74,0)
 ;=== Report date
"RTN","RAMAGU10",75,0)
 S NAME="RPTDTE"
"RTN","RAMAGU10",76,0)
 S:$D(RAMISC(NAME))#10 RAMISC(NAME)=RAMISC(NAME)\1  ; Strip the time
"RTN","RAMAGU10",77,0)
 S:$$VALPRM^RAMAGU09(NAME,,RAIENS,,"R")<0 ERRCNT=ERRCNT+1
"RTN","RAMAGU10",78,0)
 ;
"RTN","RAMAGU10",79,0)
 ;=== Transcriptionist
"RTN","RAMAGU10",80,0)
 S:$$VALPRM^RAMAGU09("TRANSCRST",,RAIENS)<0 ERRCNT=ERRCNT+1
"RTN","RAMAGU10",81,0)
 ;
"RTN","RAMAGU10",82,0)
 ;=== Verification date
"RTN","RAMAGU10",83,0)
 S:$$VALPRM^RAMAGU09("VERDTE",,RAIENS)<0 ERRCNT=ERRCNT+1
"RTN","RAMAGU10",84,0)
 ;
"RTN","RAMAGU10",85,0)
 ;=== Verifying physician
"RTN","RAMAGU10",86,0)
 S:$$VALPRM^RAMAGU09("VERPHYS",,RAIENS)<0 ERRCNT=ERRCNT+1
"RTN","RAMAGU10",87,0)
 ;
"RTN","RAMAGU10",88,0)
 ;=== Report status
"RTN","RAMAGU10",89,0)
 S PNODE=$NA(RAMISC("RPTSTATUS"))
"RTN","RAMAGU10",90,0)
 S:'($D(@PNODE)#10) @PNODE="V"
"RTN","RAMAGU10",91,0)
 I @PNODE'="V",@PNODE'="EF"  D:$P($G(RAMSPSDEFS("R")),U,12)
"RTN","RAMAGU10",92,0)
 . D IPVE^RAERR(PNODE)  S ERRCNT=ERRCNT+1
"RTN","RAMAGU10",93,0)
 ;
"RTN","RAMAGU10",94,0)
 ;=== Error handling and cleanup
"RTN","RAMAGU10",95,0)
 Q $S(ERRCNT>0:-11,1:0)
"RTN","RAMAGU11")
0^31^B2169959^n/a
"RTN","RAMAGU11",1,0)
RAMAGU11 ;HCIOFO/SG - ORDERS/EXAMS API (DEBUG UTILITIES) ; 1/31/08 9:34am
"RTN","RAMAGU11",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAGU11",3,0)
 ;
"RTN","RAMAGU11",4,0)
 Q
"RTN","RAMAGU11",5,0)
 ;
"RTN","RAMAGU11",6,0)
 ;***** WRITES VARIABLES AND THEIR VALUES
"RTN","RAMAGU11",7,0)
 ;
"RTN","RAMAGU11",8,0)
 ; ZZVLST        List of variables separated by commas
"RTN","RAMAGU11",9,0)
 ;
"RTN","RAMAGU11",10,0)
 ; [FLAGS]       Flags that control execution (can be combined):
"RTN","RAMAGU11",11,0)
 ;
"RTN","RAMAGU11",12,0)
 ;                 1  Each variable on a new line
"RTN","RAMAGU11",13,0)
 ;                 S  Skip a line before the output
"RTN","RAMAGU11",14,0)
 ;
"RTN","RAMAGU11",15,0)
VARS(ZZVLST,FLAGS) ;
"RTN","RAMAGU11",16,0)
 N ZZBUF,ZZI,ZZVAR
"RTN","RAMAGU11",17,0)
 S FLAGS=$G(FLAGS),ZZBUF=""
"RTN","RAMAGU11",18,0)
 D:FLAGS["S" W("","!")
"RTN","RAMAGU11",19,0)
 F ZZI=1:1  S ZZVAR=$$TRIM^XLFSTR($P(ZZVLST,",",ZZI))  Q:ZZVAR=""  D
"RTN","RAMAGU11",20,0)
 . I FLAGS'["1"  S:ZZI>1 ZZBUF=ZZBUF_"  "
"RTN","RAMAGU11",21,0)
 . S ZZBUF=ZZBUF_ZZVAR_"="
"RTN","RAMAGU11",22,0)
 . I '($D(@ZZVAR)#10)   S ZZBUF=ZZBUF_"<UNDEF>"
"RTN","RAMAGU11",23,0)
 . E  I +@ZZVAR=@ZZVAR  S ZZBUF=ZZBUF_@ZZVAR
"RTN","RAMAGU11",24,0)
 . E  S ZZBUF=ZZBUF_""""_@ZZVAR_""""
"RTN","RAMAGU11",25,0)
 . I FLAGS["1"  D W(ZZBUF,"!",IOM-10)  S ZZBUF=""
"RTN","RAMAGU11",26,0)
 D:FLAGS'["1" W(ZZBUF,"!",IOM-10)
"RTN","RAMAGU11",27,0)
 Q
"RTN","RAMAGU11",28,0)
 ;
"RTN","RAMAGU11",29,0)
 ;***** WRITES A LONG STRING
"RTN","RAMAGU11",30,0)
 ;
"RTN","RAMAGU11",31,0)
 ; STR           Text
"RTN","RAMAGU11",32,0)
 ;
"RTN","RAMAGU11",33,0)
 ; [FORMAT]      Format characters for the WRITE command. By default
"RTN","RAMAGU11",34,0)
 ;               ('$D(FORMAT)), "!" is assumed.
"RTN","RAMAGU11",35,0)
 ;
"RTN","RAMAGU11",36,0)
 ; [RM]          Right margin for the output. By default
"RTN","RAMAGU11",37,0)
 ;               ($G(RM)'>0), the (IOM-1) value is assumed.
"RTN","RAMAGU11",38,0)
 ;
"RTN","RAMAGU11",39,0)
W(STR,FORMAT,RM) ;
"RTN","RAMAGU11",40,0)
 N MAXWD
"RTN","RAMAGU11",41,0)
 S:'$D(FORMAT) FORMAT="!"
"RTN","RAMAGU11",42,0)
 S MAXWD=$S($G(RM)>0:RM,1:(IOM-1))-$P(FORMAT,"?",2)
"RTN","RAMAGU11",43,0)
 ;--- Write the first segment
"RTN","RAMAGU11",44,0)
 D PAGE^RAUTL22()
"RTN","RAMAGU11",45,0)
 W:FORMAT'="" @FORMAT  W $E(STR,1,MAXWD)
"RTN","RAMAGU11",46,0)
 ;--- Write remaining segments
"RTN","RAMAGU11",47,0)
 S FORMAT="!"_$TR(FORMAT,"!")
"RTN","RAMAGU11",48,0)
 F  S $E(STR,1,MAXWD)=""  Q:STR=""  D
"RTN","RAMAGU11",49,0)
 . D PAGE^RAUTL22()
"RTN","RAMAGU11",50,0)
 . W @FORMAT,$E(STR,1,MAXWD)
"RTN","RAMAGU11",51,0)
 Q
"RTN","RAMAGU12")
0^34^B22940867^n/a
"RTN","RAMAGU12",1,0)
RAMAGU12 ;HCIOFO/SG - ORDERS/EXAMS API (REPORT UTILS) ; 2/6/09 11:48am
"RTN","RAMAGU12",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAGU12",3,0)
 ;
"RTN","RAMAGU12",4,0)
 Q
"RTN","RAMAGU12",5,0)
 ;
"RTN","RAMAGU12",6,0)
 ;***** CREATES A REPORT STUB
"RTN","RAMAGU12",7,0)
 ;
"RTN","RAMAGU12",8,0)
 ; RACASE        Examination identifiers
"RTN","RAMAGU12",9,0)
 ;                 ^01: IEN of the patient in the file #70    (RADFN)
"RTN","RAMAGU12",10,0)
 ;                 ^02: IEN in the REGISTERED EXAMS multiple  (RADTI)
"RTN","RAMAGU12",11,0)
 ;                 ^03: IEN in the EXAMINATIONS multiple      (RACNI)
"RTN","RAMAGU12",12,0)
 ;
"RTN","RAMAGU12",13,0)
 ; [[.]RADTE]    Date of the exam. If this parameter is not defined,
"RTN","RAMAGU12",14,0)
 ;               the value is loaded from the case record.
"RTN","RAMAGU12",15,0)
 ;
"RTN","RAMAGU12",16,0)
 ; [[.]RACN]     Case number. If this parameter is not defined, the
"RTN","RAMAGU12",17,0)
 ;               value is loaded from the subfile #70.02.
"RTN","RAMAGU12",18,0)
 ;
"RTN","RAMAGU12",19,0)
 ; Return values:
"RTN","RAMAGU12",20,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU12",21,0)
 ;       >0  Report IEN in the RAD/NUC MED REPORTS file (#74)
"RTN","RAMAGU12",22,0)
 ;
"RTN","RAMAGU12",23,0)
RPTSTUB(RACASE,RADTE,RACN) ;
"RTN","RAMAGU12",24,0)
 N RABUF,RACNI,RADFN,RADTI,RAIENS,RAMSG,RARPT,TMP
"RTN","RAMAGU12",25,0)
 S RADFN=$P(RACASE,U),RADTI=$P(RACASE,U,2),RACNI=$P(RACASE,U,3)
"RTN","RAMAGU12",26,0)
 S RAIENS=$$EXAMIENS^RAMAGU04(RACASE)
"RTN","RAMAGU12",27,0)
 ;--- Get case properties
"RTN","RAMAGU12",28,0)
 S TMP=$S($G(RACN)'>0:".01;17",1:"17")
"RTN","RAMAGU12",29,0)
 D GETS^DIQ(70.03,RAIENS,TMP,"I","RABUF","RAMSG")
"RTN","RAMAGU12",30,0)
 Q:$G(DIERR) $$DBS^RAERR("RAMSG",-9,70.03,RAIENS)
"RTN","RAMAGU12",31,0)
 S RARPT=+$G(RABUF(70.03,RAIENS,17,"I"))
"RTN","RAMAGU12",32,0)
 Q:RARPT>0 RARPT  ;--- Report already exists
"RTN","RAMAGU12",33,0)
 S:$G(RACN)'>0 RACN=$G(RABUF(70.03,RAIENS,.01,"I"))
"RTN","RAMAGU12",34,0)
 ;--- Get the date if necessary
"RTN","RAMAGU12",35,0)
 I $G(RADTE)'>0  D  Q:$G(DIERR) $$DBS^RAERR("RAMSG",-9,70.02,TMP)
"RTN","RAMAGU12",36,0)
 . S TMP=$P(RAIENS,",",2,4)  ; Include trailing comma
"RTN","RAMAGU12",37,0)
 . S RADTE=$$GET1^DIQ(70.02,TMP,.01,"I",,"RAMSG")
"RTN","RAMAGU12",38,0)
 ;--- Create the stub
"RTN","RAMAGU12",39,0)
 D
"RTN","RAMAGU12",40,0)
 . N MAGSCN,RAFDA,RASULT,RAX
"RTN","RAMAGU12",41,0)
 . D CREATE^RARIC
"RTN","RAMAGU12",42,0)
 Q $S($G(RARPT)>0:+RARPT,1:$$ERROR^RAERR(-52))
"RTN","RAMAGU12",43,0)
 ;
"RTN","RAMAGU12",44,0)
 ;***** RETURNS REPORT STATUS
"RTN","RAMAGU12",45,0)
 ;
"RTN","RAMAGU12",46,0)
 ; RPTIEN        IEN of the report in RAD/NUC MED REPORTS file (#74)
"RTN","RAMAGU12",47,0)
 ;
"RTN","RAMAGU12",48,0)
 ; Return Values:
"RTN","RAMAGU12",49,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU12",50,0)
 ;       >0  Internal and external values of the REPORT STATUS
"RTN","RAMAGU12",51,0)
 ;           field (5) of the RAD/NUC MED REPORTS file (#74)
"RTN","RAMAGU12",52,0)
 ;           separated by "^".
"RTN","RAMAGU12",53,0)
 ;
"RTN","RAMAGU12",54,0)
RPTSTAT(RPTIEN) ;
"RTN","RAMAGU12",55,0)
 N IENS,RABUF,RAMSG
"RTN","RAMAGU12",56,0)
 S IENS=(+RPTIEN)_","
"RTN","RAMAGU12",57,0)
 D GETS^DIQ(74,IENS,"5","EI","RABUF","RAMSG")
"RTN","RAMAGU12",58,0)
 Q:$G(DIERR) $$DBS^RAERR("RAMSG",-9,74,IENS)
"RTN","RAMAGU12",59,0)
 Q $G(RABUF(74,IENS,5,"I"))_U_$G(RABUF(74,IENS,5,"E"))
"RTN","RAMAGU12",60,0)
 ;
"RTN","RAMAGU12",61,0)
 ;***** UPDATES THE REPORT ACTIVITY LOG
"RTN","RAMAGU12",62,0)
 ;
"RTN","RAMAGU12",63,0)
 ; RPTIEN        IEN of the report in RAD/NUC MED REPORTS file (#74)
"RTN","RAMAGU12",64,0)
 ;
"RTN","RAMAGU12",65,0)
 ; ACTION        Internal action value (see the TYPE OF ACTION
"RTN","RAMAGU12",66,0)
 ;               field (2) of the sub-file #74.01).
"RTN","RAMAGU12",67,0)
 ;
"RTN","RAMAGU12",68,0)
 ; [LOGDT]       Internal date value (FileMan) for the LOG DATE
"RTN","RAMAGU12",69,0)
 ;               field (.01) of the sub-file #74.01. If this
"RTN","RAMAGU12",70,0)
 ;               parameter is not defined or not greater than 0, 
"RTN","RAMAGU12",71,0)
 ;               then the current date/time is used.
"RTN","RAMAGU12",72,0)
 ;
"RTN","RAMAGU12",73,0)
 ; Return Values:
"RTN","RAMAGU12",74,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU12",75,0)
 ;       >0  IEN of the new activity sub-record in sub-file #74.01
"RTN","RAMAGU12",76,0)
 ;
"RTN","RAMAGU12",77,0)
UPDRPTAL(RPTIEN,ACTION,LOGDT) ;
"RTN","RAMAGU12",78,0)
 N IENS,LOGDT1,RAFDA,RAIENS,RALOCK,RAMSG,RARC,TMP
"RTN","RAMAGU12",79,0)
 S RARC=$$CHKREQ^RAUTL22("RPTIEN,ACTION")  Q:RARC<0 RARC
"RTN","RAMAGU12",80,0)
 S RPTIEN=+RPTIEN
"RTN","RAMAGU12",81,0)
 ;
"RTN","RAMAGU12",82,0)
 ;--- Check the date/time
"RTN","RAMAGU12",83,0)
 I $G(LOGDT)>0  D  Q:RARC<0 RARC
"RTN","RAMAGU12",84,0)
 . S TMP=+$E(LOGDT,1,12),LOGDT1=$$FMTE^XLFDT(TMP)
"RTN","RAMAGU12",85,0)
 . S:(LOGDT1=TMP)!(LOGDT1="") RARC=$$IPVE^RAERR("LOGDT")
"RTN","RAMAGU12",86,0)
 E  S LOGDT1="NOW"
"RTN","RAMAGU12",87,0)
 ;
"RTN","RAMAGU12",88,0)
 ;--- Prepare the data
"RTN","RAMAGU12",89,0)
 S IENS="+1,"_RPTIEN_","
"RTN","RAMAGU12",90,0)
 S RAFDA(74.01,IENS,.01)=LOGDT1     ; LOG DATE
"RTN","RAMAGU12",91,0)
 S RAFDA(74.01,IENS,2)=ACTION       ; TYPE OF ACTION
"RTN","RAMAGU12",92,0)
 S RAFDA(74.01,IENS,3)="`"_(+DUZ)   ; COMPUTER USER
"RTN","RAMAGU12",93,0)
 ;
"RTN","RAMAGU12",94,0)
 ;--- Lock the ACTIVITY LOG multiple
"RTN","RAMAGU12",95,0)
 K TMP  S TMP(74.01,","_RPTIEN_",")=""
"RTN","RAMAGU12",96,0)
 S RARC=$$LOCKFM^RALOCK(.TMP)
"RTN","RAMAGU12",97,0)
 Q:RARC $$LOCKERR^RAERR(RARC,"report activity log")
"RTN","RAMAGU12",98,0)
 M RALOCK=TMP
"RTN","RAMAGU12",99,0)
 ;
"RTN","RAMAGU12",100,0)
 D
"RTN","RAMAGU12",101,0)
 . N $ESTACK,$ETRAP
"RTN","RAMAGU12",102,0)
 . ;--- Setup the error processing
"RTN","RAMAGU12",103,0)
 . D SETDEFEH^RAERR("RARC")
"RTN","RAMAGU12",104,0)
 . ;--- Add the record
"RTN","RAMAGU12",105,0)
 . D UPDATE^DIE("E","RAFDA","RAIENS","RAMSG")
"RTN","RAMAGU12",106,0)
 . S:$G(DIERR) RARC=$$DBS^RAERR("RAMSG",-9,74.01,IENS)
"RTN","RAMAGU12",107,0)
 ;
"RTN","RAMAGU12",108,0)
 ;--- Error handling and cleanup
"RTN","RAMAGU12",109,0)
 D UNLOCKFM^RALOCK(.RALOCK)
"RTN","RAMAGU12",110,0)
 Q $S(RARC<0:RARC,1:+RAIENS(1))
"RTN","RAMAGU12",111,0)
 ;
"RTN","RAMAGU12",112,0)
 ;***** UPDATES THE REPORT STATUS
"RTN","RAMAGU12",113,0)
 ;
"RTN","RAMAGU12",114,0)
 ; RPTIEN        IEN of the report in RAD/NUC MED REPORTS file (#74)
"RTN","RAMAGU12",115,0)
 ;
"RTN","RAMAGU12",116,0)
 ; STATUS        Value for the REPORT STATUS field (5) of file #74
"RTN","RAMAGU12",117,0)
 ;
"RTN","RAMAGU12",118,0)
 ; [PROBSTAT]    Problem statement. If this parameter is defined and
"RTN","RAMAGU12",119,0)
 ;               not empty (spaces are not counted), then its value
"RTN","RAMAGU12",120,0)
 ;               is stored into the PROBLEM STATEMENT field (25) of
"RTN","RAMAGU12",121,0)
 ;               the file #74 and the status is automatically changed
"RTN","RAMAGU12",122,0)
 ;               to PROBLEM DRAFT.
"RTN","RAMAGU12",123,0)
 ;
"RTN","RAMAGU12",124,0)
 ; Return Values:
"RTN","RAMAGU12",125,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU12",126,0)
 ;        0  Success
"RTN","RAMAGU12",127,0)
 ;
"RTN","RAMAGU12",128,0)
UPDRPTST(RPTIEN,STATUS,PROBSTAT) ;
"RTN","RAMAGU12",129,0)
 N IENS,RAFDA,RALOCK,RAMSG,RARC,TMP
"RTN","RAMAGU12",130,0)
 S RARC=$$CHKREQ^RAUTL22("RPTIEN,STATUS")  Q:RARC<0 RARC
"RTN","RAMAGU12",131,0)
 S IENS=(+RPTIEN)_","
"RTN","RAMAGU12",132,0)
 ;
"RTN","RAMAGU12",133,0)
 ;--- Lock the report
"RTN","RAMAGU12",134,0)
 K TMP  S TMP(74,IENS)=""
"RTN","RAMAGU12",135,0)
 S RARC=$$LOCKFM^RALOCK(.TMP)
"RTN","RAMAGU12",136,0)
 Q:RARC $$LOCKERR^RAERR(RARC,"report")
"RTN","RAMAGU12",137,0)
 M RALOCK=TMP
"RTN","RAMAGU12",138,0)
 ;
"RTN","RAMAGU12",139,0)
 D
"RTN","RAMAGU12",140,0)
 . N $ESTACK,$ETRAP
"RTN","RAMAGU12",141,0)
 . ;--- Setup the error processing
"RTN","RAMAGU12",142,0)
 . D SETDEFEH^RAERR("RARC")
"RTN","RAMAGU12",143,0)
 . ;
"RTN","RAMAGU12",144,0)
 . ;--- Check the problem statement
"RTN","RAMAGU12",145,0)
 . S TMP=$$TRIM^XLFSTR($G(PROBSTAT))
"RTN","RAMAGU12",146,0)
 . S:TMP'="" STATUS="PD"
"RTN","RAMAGU12",147,0)
 . D VAL^DIE(74,IENS,25,"F",TMP,.TMP,"RAFDA","RAMSG")
"RTN","RAMAGU12",148,0)
 . I $G(DIERR)  S RARC=$$DBS^RAERR("RAMSG",-9)    Q
"RTN","RAMAGU12",149,0)
 . I TMP="^"    S RARC=$$IPVE^RAERR("PROBSTAT")  Q
"RTN","RAMAGU12",150,0)
 . ;
"RTN","RAMAGU12",151,0)
 . ;--- Check the new report status
"RTN","RAMAGU12",152,0)
 . D VAL^DIE(74,IENS,5,"F",STATUS,.TMP,"RAFDA","RAMSG")
"RTN","RAMAGU12",153,0)
 . I $G(DIERR)  S RARC=$$DBS^RAERR("RAMSG",-9)  Q
"RTN","RAMAGU12",154,0)
 . I TMP="^"    S RARC=$$IPVE^RAERR("STATUS")  Q
"RTN","RAMAGU12",155,0)
 . S STATUS=TMP
"RTN","RAMAGU12",156,0)
 . ;
"RTN","RAMAGU12",157,0)
 . ;--- Check if the report currently has the same status
"RTN","RAMAGU12",158,0)
 . S TMP=$$GET1^DIQ(74,IENS,5,"I",,"RAMSG")
"RTN","RAMAGU12",159,0)
 . I $G(DIERR)  S RARC=$$DBS^RAERR("RAMSG",-9,74,IENS)  Q
"RTN","RAMAGU12",160,0)
 . I TMP=STATUS  K RAFDA(74,IENS,5)  Q:$D(RAFDA)<10
"RTN","RAMAGU12",161,0)
 . ;
"RTN","RAMAGU12",162,0)
 . ;--- Update the record
"RTN","RAMAGU12",163,0)
 . D FILE^DIE(,"RAFDA","RAMSG")
"RTN","RAMAGU12",164,0)
 . S:$G(DIERR) RARC=$$DBS^RAERR("RAMSG",-9,74,IENS)
"RTN","RAMAGU12",165,0)
 ;
"RTN","RAMAGU12",166,0)
 ;--- Error handling and cleanup
"RTN","RAMAGU12",167,0)
 D UNLOCKFM^RALOCK(.RALOCK)
"RTN","RAMAGU12",168,0)
 Q $S(RARC<0:RARC,1:0)
"RTN","RAMAGU13")
0^53^B24543056^n/a
"RTN","RAMAGU13",1,0)
RAMAGU13 ;HCIOFO/SG - ORDERS/EXAMS API (MISC UTILITIES) ; 2/10/09 4:11pm
"RTN","RAMAGU13",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAGU13",3,0)
 ;
"RTN","RAMAGU13",4,0)
 Q
"RTN","RAMAGU13",5,0)
 ;
"RTN","RAMAGU13",6,0)
 ;***** CREATES A STUB IN THE NUC MED EXAM DATA FILE (#70.2)
"RTN","RAMAGU13",7,0)
 ;
"RTN","RAMAGU13",8,0)
 ; RACASE        Examination identifiers
"RTN","RAMAGU13",9,0)
 ;                 ^01: IEN of the patient in the file #70    (RADFN)
"RTN","RAMAGU13",10,0)
 ;                 ^02: IEN in the REGISTERED EXAMS multiple  (RADTI)
"RTN","RAMAGU13",11,0)
 ;                 ^03: IEN in the EXAMINATIONS multiple      (RACNI)
"RTN","RAMAGU13",12,0)
 ;
"RTN","RAMAGU13",13,0)
 ; [RAPROCIEN]   IEN of the Radiology procedure. By default
"RTN","RAMAGU13",14,0)
 ;               ($G(RAPROCIEN)'>0), it is loaded from the exam
"RTN","RAMAGU13",15,0)
 ;               record.
"RTN","RAMAGU13",16,0)
 ;
"RTN","RAMAGU13",17,0)
 ; [RADTE]       Exam date. By default ($G(RADTE)'>0), it is
"RTN","RAMAGU13",18,0)
 ;               loaded from the date/time record of the exam.
"RTN","RAMAGU13",19,0)
 ;
"RTN","RAMAGU13",20,0)
 ; [RACN]        Case number. By default ($G(RACN)'>0), it is
"RTN","RAMAGU13",21,0)
 ;               loaded from the exam record.
"RTN","RAMAGU13",22,0)
 ;
"RTN","RAMAGU13",23,0)
 ; Return Values:
"RTN","RAMAGU13",24,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU13",25,0)
 ;        0  The record is not needed
"RTN","RAMAGU13",26,0)
 ;       >0  IEN of the record of the NUC MED EXAM DATA file (#70.2)
"RTN","RAMAGU13",27,0)
 ;
"RTN","RAMAGU13",28,0)
NMEDSTUB(RACASE,RAPROCIEN,RADTE,RACN) ;
"RTN","RAMAGU13",29,0)
 N IENS,RABUF,RAFDA,RAIENLST,RAIENS,RAMSG,RANMDIEN,RARC,TMP
"RTN","RAMAGU13",30,0)
 S RARC=0,RAIENS=$$EXAMIENS^RAMAGU04(RACASE)
"RTN","RAMAGU13",31,0)
 ;
"RTN","RAMAGU13",32,0)
 ;=== Check parameter values and load default ones if necessary
"RTN","RAMAGU13",33,0)
 S TMP="500"                      ; NUCLEAR MED DATA
"RTN","RAMAGU13",34,0)
 S:$G(RACN)'>0 TMP=TMP_";.01"     ; CASE NUMBER
"RTN","RAMAGU13",35,0)
 S:$G(RAPROCIEN)'>0 TMP=TMP_";2"  ; PROCEDURE
"RTN","RAMAGU13",36,0)
 D GETS^DIQ(70.03,RAIENS,TMP,"I","RABUF","RAMSG")
"RTN","RAMAGU13",37,0)
 Q:$G(DIERR) $$DBS^RAERR("RAMSG",-9,70.03,RAIENS)
"RTN","RAMAGU13",38,0)
 S:$G(RACN)'>0 RACN=$G(RABUF(70.03,RAIENS,.01,"I"))
"RTN","RAMAGU13",39,0)
 S:$G(RAPROCIEN)'>0 RAPROCIEN=$G(RABUF(70.03,RAIENS,2,"I"))
"RTN","RAMAGU13",40,0)
 S RANMDIEN=+$G(RABUF(70.03,RAIENS,500,"I"))
"RTN","RAMAGU13",41,0)
 ;--- Return IEN of the nuclear medicine record if it exists already
"RTN","RAMAGU13",42,0)
 I RANMDIEN>0  Q:$D(^RADPTN(RANMDIEN)) RANMDIEN
"RTN","RAMAGU13",43,0)
 ;--- Exam date/time
"RTN","RAMAGU13",44,0)
 I $G(RADTE)'>0  D  Q:$G(DIERR) $$DBS^RAERR("RAMSG",-9,70.02,IENS)
"RTN","RAMAGU13",45,0)
 . S IENS=$P(RAIENS,",",2,4)  ; Keep the trailing comma
"RTN","RAMAGU13",46,0)
 . S RADTE=$$GET1^DIQ(70.02,IENS,.01,"I",,"RAMSG")
"RTN","RAMAGU13",47,0)
 ;
"RTN","RAMAGU13",48,0)
 ;=== Check if the nuclear medicine record is needed
"RTN","RAMAGU13",49,0)
 S IENS=+RAPROCIEN_","
"RTN","RAMAGU13",50,0)
 ;--- Check the value of the RADIOPHARMACEUTICALS USED?
"RTN","RAMAGU13",51,0)
 ;--- field of the IMAGING TYPE file (#79.2)
"RTN","RAMAGU13",52,0)
 S TMP=$$GET1^DIQ(71,IENS,"#12:#5","I",,"RAMSG")
"RTN","RAMAGU13",53,0)
 Q:$G(DIERR) $$DBS^RAERR("RAMSG",-9,71,IENS)
"RTN","RAMAGU13",54,0)
 Q:TMP'="Y" 0
"RTN","RAMAGU13",55,0)
 ;--- Check the value of the SUPPRESS RADIOPHARM PROMPT
"RTN","RAMAGU13",56,0)
 ;--- field of the RAD/NUC MED PROCEDURES file (#71)
"RTN","RAMAGU13",57,0)
 S TMP=$$GET1^DIQ(71,IENS,2,"I",,"RAMSG")
"RTN","RAMAGU13",58,0)
 Q:$G(DIERR) $$DBS^RAERR("RAMSG",-9,71,IENS)
"RTN","RAMAGU13",59,0)
 Q:TMP 0
"RTN","RAMAGU13",60,0)
 ;
"RTN","RAMAGU13",61,0)
 ;=== Create the stub record
"RTN","RAMAGU13",62,0)
 S IENS="+1,"
"RTN","RAMAGU13",63,0)
 S RAFDA(70.2,IENS,.01)=$P(RACASE,U)
"RTN","RAMAGU13",64,0)
 S RAFDA(70.2,IENS,2)=RADTE
"RTN","RAMAGU13",65,0)
 S RAFDA(70.2,IENS,3)=RACN
"RTN","RAMAGU13",66,0)
 D UPDATE^DIE(,"RAFDA","RAIENLST","RAMSG")
"RTN","RAMAGU13",67,0)
 Q:$G(DIERR) $$DBS^RAERR("RAMSG",-9,70.2,IENS)
"RTN","RAMAGU13",68,0)
 S RANMDIEN=+RAIENLST(1)
"RTN","RAMAGU13",69,0)
 ;
"RTN","RAMAGU13",70,0)
 ;=== Store the pointer
"RTN","RAMAGU13",71,0)
 D
"RTN","RAMAGU13",72,0)
 . ;--- Setup the error handler
"RTN","RAMAGU13",73,0)
 . N $ESTACK,$ETRAP  D SETDEFEH^RAERR("RARC")
"RTN","RAMAGU13",74,0)
 . ;--- Update the exam record
"RTN","RAMAGU13",75,0)
 . S RAFDA(70.03,RAIENS,500)=RANMDIEN
"RTN","RAMAGU13",76,0)
 . D FILE^DIE(,"RAFDA","RAMSG")
"RTN","RAMAGU13",77,0)
 . S:$G(DIERR) RARC=$$DBS^RAERR("RAMSG",-9,70.03,RAIENS)
"RTN","RAMAGU13",78,0)
 ;--- Remove the stray record if the pointer cannot be stored
"RTN","RAMAGU13",79,0)
 I RARC<0  D  Q RARC
"RTN","RAMAGU13",80,0)
 . N DA,DIK  S DIK="^RADPTN(",DA=RANMDIEN  D ^DIK
"RTN","RAMAGU13",81,0)
 ;
"RTN","RAMAGU13",82,0)
 ;=== Success
"RTN","RAMAGU13",83,0)
 Q RANMDIEN
"RTN","RAMAGU13",84,0)
 ;
"RTN","RAMAGU13",85,0)
 ;***** SEARCHES FOR THE RAD/NUC MED REASON SYNONYM
"RTN","RAMAGU13",86,0)
 ;
"RTN","RAMAGU13",87,0)
 ; REASON        Either IEN of a record of the RAD/NUC MED REASON
"RTN","RAMAGU13",88,0)
 ;               file (#75.2) or a valid synonym (see SYNONYM field
"RTN","RAMAGU13",89,0)
 ;               (3) of that file).
"RTN","RAMAGU13",90,0)
 ;
"RTN","RAMAGU13",91,0)
 ; [.TYPE]       Reference to a local variable where internal and
"RTN","RAMAGU13",92,0)
 ;               external values (separated by "^") of the TYPE OF
"RTN","RAMAGU13",93,0)
 ;               REASON field (2) of the file #75.2 are returned to.
"RTN","RAMAGU13",94,0)
 ;
"RTN","RAMAGU13",95,0)
 ; Return Values:
"RTN","RAMAGU13",96,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU13",97,0)
 ;       >0  IEN of the record in the file #75.2
"RTN","RAMAGU13",98,0)
 ;
"RTN","RAMAGU13",99,0)
RARSNIEN(REASON,TYPE) ;
"RTN","RAMAGU13",100,0)
 N IENS,RABUF,RAMSG,RC,TMP
"RTN","RAMAGU13",101,0)
 S TYPE="",RC=$$CHKREQ^RAUTL22("REASON")  Q:RC<0 RC
"RTN","RAMAGU13",102,0)
 ;---
"RTN","RAMAGU13",103,0)
 I (+REASON)'=REASON  D  ;--- Synonym of the reason
"RTN","RAMAGU13",104,0)
 . ;--- Find the reason
"RTN","RAMAGU13",105,0)
 . D FIND^DIC(75.2,,"@;2IE",,REASON,2,"S",,,"RABUF","RAMSG")
"RTN","RAMAGU13",106,0)
 . I $G(DIERR)  S RC=$$DBS^RAERR("RAMSG",-9,75.2)  Q
"RTN","RAMAGU13",107,0)
 . S TMP=+$G(RABUF("DILIST",0))
"RTN","RAMAGU13",108,0)
 . ;--- No such synonym on file
"RTN","RAMAGU13",109,0)
 . I TMP<1  S RC=$$ERROR^RAERR(-33,,"synonym",75.2)  Q
"RTN","RAMAGU13",110,0)
 . ;--- Ambiguous synonym
"RTN","RAMAGU13",111,0)
 . I TMP>1  S RC=$$ERROR^RAERR(-14,,"synonym",REASON)  Q
"RTN","RAMAGU13",112,0)
 . ;--- Reason IEN and type
"RTN","RAMAGU13",113,0)
 . S TYPE=$G(RABUF("DILIST","ID",1,2,"I"))
"RTN","RAMAGU13",114,0)
 . S TYPE=TYPE_U_$G(RABUF("DILIST","ID",1,2,"E"))
"RTN","RAMAGU13",115,0)
 . S REASON=+RABUF("DILIST",2,1)
"RTN","RAMAGU13",116,0)
 E  D                    ;--- Reason IEN
"RTN","RAMAGU13",117,0)
 . S IENS=REASON_","
"RTN","RAMAGU13",118,0)
 . D GETS^DIQ(75.2,IENS,"2","EI","RABUF","RAMSG")
"RTN","RAMAGU13",119,0)
 . I $G(DIERR)  S RC=$$DBS^RAERR("RAMSG",-9,75.2,IENS)  Q
"RTN","RAMAGU13",120,0)
 . S TYPE=$G(RABUF(75.2,IENS,2,"I"))_U_$G(RABUF(75.2,IENS,2,"E"))
"RTN","RAMAGU13",121,0)
 ;---
"RTN","RAMAGU13",122,0)
 Q $S(RC<0:RC,1:REASON)
"RTN","RAMAGU13",123,0)
 ;
"RTN","RAMAGU13",124,0)
 ;***** UPDATES VALUES OF THE MULTIPLE(S)
"RTN","RAMAGU13",125,0)
 ;
"RTN","RAMAGU13",126,0)
 ; .RAFDAM       Reference to a local variable that stores field
"RTN","RAMAGU13",127,0)
 ;               values prepared for storage (FileMan FDA array)
"RTN","RAMAGU13",128,0)
 ;
"RTN","RAMAGU13",129,0)
 ; RAIENS        IENS of the main record that multiple values in
"RTN","RAMAGU13",130,0)
 ;               the RAFDAM belong to
"RTN","RAMAGU13",131,0)
 ;
"RTN","RAMAGU13",132,0)
 ; [RAFLAGS]     Flags for UPDATE^DIE
"RTN","RAMAGU13",133,0)
 ;
"RTN","RAMAGU13",134,0)
 ; Return values:
"RTN","RAMAGU13",135,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAMAGU13",136,0)
 ;        0  Success
"RTN","RAMAGU13",137,0)
 ;
"RTN","RAMAGU13",138,0)
UPDMULT(RAFDAM,RAIENS,RAFLAGS) ;
"RTN","RAMAGU13",139,0)
 N DA,DIK,ERR,IENS,RAFDA,RAMSG,RANODE,RARC,RASUBF
"RTN","RAMAGU13",140,0)
 S (RARC,RASUBF)=0,RAFLAGS=$G(RAFLAGS)
"RTN","RAMAGU13",141,0)
 F  S RASUBF=$O(RAFDAM(RASUBF))  Q:RASUBF'>0  D  Q:RARC<0
"RTN","RAMAGU13",142,0)
 . K RAFDA,RAMSG  M RAFDA(RASUBF)=RAFDAM(RASUBF)
"RTN","RAMAGU13",143,0)
 . S IENS=","_RAIENS  D DA^DILF(IENS,.DA)
"RTN","RAMAGU13",144,0)
 . S DIK=$$ROOT^DILFD(RASUBF,IENS,0,.ERR)
"RTN","RAMAGU13",145,0)
 . I $G(ERR)!(DIK="")  S RARC=$$ERROR^RAERR(-50,,RASUBF,IENS)  Q
"RTN","RAMAGU13",146,0)
 . S RANODE=$$CREF^DILF(DIK)
"RTN","RAMAGU13",147,0)
 . ;--- Delete the old data
"RTN","RAMAGU13",148,0)
 . D IXALL2^DIK  ; Delete entries from cross-references
"RTN","RAMAGU13",149,0)
 . K @RANODE     ; Clear the whole multiple
"RTN","RAMAGU13",150,0)
 . ;--- Store the new data
"RTN","RAMAGU13",151,0)
 . I $D(RAFDA)>1  D  Q:RARC<0
"RTN","RAMAGU13",152,0)
 . . D UPDATE^DIE(RAFLAGS,"RAFDA",,"RAMSG")
"RTN","RAMAGU13",153,0)
 . . S:$G(DIERR) RARC=$$DBS^RAERR("RAMSG",-9,RASUBF,"*,"_RAIENS)
"RTN","RAMAGU13",154,0)
 . ;--- Remove subfile data from the source FDA
"RTN","RAMAGU13",155,0)
 . K:RAFLAGS'["S" RAFDAM(RASUBF)
"RTN","RAMAGU13",156,0)
 ;---
"RTN","RAMAGU13",157,0)
 Q $S(RARC<0:RARC,1:0)
"RTN","RAMAGU13",158,0)
 ;
"RTN","RAMAGU13",159,0)
 ;***** CHECKS IF THE LONG ACCESSION NUMBER SHOULD BE USED
"RTN","RAMAGU13",160,0)
 ;
"RTN","RAMAGU13",161,0)
 ; RAMDIV        Radiology division IEN (file #79)
"RTN","RAMAGU13",162,0)
 ;
"RTN","RAMAGU13",163,0)
 ; Return values:
"RTN","RAMAGU13",164,0)
 ;        0  Use short accession number (MMDDYY-NNNNN)
"RTN","RAMAGU13",165,0)
 ;        1  Use long accession number (SSS-MMDDYY-NNNNN)
"RTN","RAMAGU13",166,0)
 ;
"RTN","RAMAGU13",167,0)
USLNGACN(RAMDIV) ;
"RTN","RAMAGU13",168,0)
 Q:RAMDIV'>0 0
"RTN","RAMAGU13",169,0)
 N RAMSG
"RTN","RAMAGU13",170,0)
 ;--- Check the value of the USE SITE ACCESSION NUMBER? field (.131)
"RTN","RAMAGU13",171,0)
 ;    of the RAD/NUC MED DIVISION file (#79). This field is exported
"RTN","RAMAGU13",172,0)
 ;--- by the patch RA*5*47. See the data dictionary for details.
"RTN","RAMAGU13",173,0)
 Q ($$GET1^DIQ(79,RAMDIV_",",.131,"I",,"RAMSG")="Y")
"RTN","RAMAGU14")
0^55^B6033679^n/a
"RTN","RAMAGU14",1,0)
RAMAGU14 ;HCIOFO/SG - ORDERS/EXAMS API (RAMISC VALID. #70.2) ; 8/18/08 10:02am
"RTN","RAMAGU14",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAMAGU14",3,0)
 ;
"RTN","RAMAGU14",4,0)
 Q
"RTN","RAMAGU14",5,0)
 ;
"RTN","RAMAGU14",6,0)
 ;***** VALIDATES RAMISC PARAMETERS RELATED TO THE FILE #70.2
"RTN","RAMAGU14",7,0)
 ;
"RTN","RAMAGU14",8,0)
 ; RAIENS        IENS of the nuclear medicine data (file #70.2)
"RTN","RAMAGU14",9,0)
 ;
"RTN","RAMAGU14",10,0)
 ; RACTION       Action (can be combined):
"RTN","RAMAGU14",11,0)
 ;                 E  Examined (procedure has been performed)
"RTN","RAMAGU14",12,0)
 ;                 C  Complete
"RTN","RAMAGU14",13,0)
 ;
"RTN","RAMAGU14",14,0)
 ; .RAMISC       Reference to a local array containing miscellaneous
"RTN","RAMAGU14",15,0)
 ;               request parameters.
"RTN","RAMAGU14",16,0)
 ;
"RTN","RAMAGU14",17,0)
 ; .RAFDA(       Reference to a local array where field values will
"RTN","RAMAGU14",18,0)
 ;               be prepared for storage (FileMan FDA array).
"RTN","RAMAGU14",19,0)
 ;
"RTN","RAMAGU14",20,0)
 ;   "RACNT")    This is an additional node that stores counter for
"RTN","RAMAGU14",21,0)
 ;               the IENS placeholders. Do not forget to remove this
"RTN","RAMAGU14",22,0)
 ;               node before passing the array into a FileMan API.
"RTN","RAMAGU14",23,0)
 ;
"RTN","RAMAGU14",24,0)
 ;   "RAIENS")   This is an additional node that stores IENS of the
"RTN","RAMAGU14",25,0)
 ;               record being processed. Do not forget to remove this 
"RTN","RAMAGU14",26,0)
 ;               node before passing the array into a FileMan API.
"RTN","RAMAGU14",27,0)
 ;
"RTN","RAMAGU14",28,0)
 ; [RAFDACNT]    New value for the placeholder counter for the RAFDA. 
"RTN","RAMAGU14",29,0)
 ;               If this parameter is greater than zero, it replaces
"RTN","RAMAGU14",30,0)
 ;               the value stored in the RAFDA("RACNT").
"RTN","RAMAGU14",31,0)
 ;
"RTN","RAMAGU14",32,0)
 ; Input variables:
"RTN","RAMAGU14",33,0)
 ;   RAMSPSDEFS
"RTN","RAMAGU14",34,0)
 ;
"RTN","RAMAGU14",35,0)
 ; Return values:
"RTN","RAMAGU14",36,0)
 ;       <0  Error code
"RTN","RAMAGU14",37,0)
 ;        0  Ok
"RTN","RAMAGU14",38,0)
 ;
"RTN","RAMAGU14",39,0)
VAL702(RAIENS,RACTION,RAMISC,RAFDA,RAFDACNT) ;
"RTN","RAMAGU14",40,0)
 N ERRCNT,RC,TMP
"RTN","RAMAGU14",41,0)
 ;
"RTN","RAMAGU14",42,0)
 ;--- Check required parameters and variables
"RTN","RAMAGU14",43,0)
 S RC=$$CHKREQ^RAUTL22("RACTION,RAIENS")  Q:RC<0 RC
"RTN","RAMAGU14",44,0)
 Q:$TR(RACTION,"EC")'="" $$IPVE^RAERR("RACTION")
"RTN","RAMAGU14",45,0)
 ;
"RTN","RAMAGU14",46,0)
 ;--- Initialize variables
"RTN","RAMAGU14",47,0)
 S RAFDA("RAIENS")=RAIENS
"RTN","RAMAGU14",48,0)
 S:$G(RAFDACNT)>0 RAFDA("RACNT")=+RAFDACNT
"RTN","RAMAGU14",49,0)
 S (ERRCNT,RC)=0
"RTN","RAMAGU14",50,0)
 ;
"RTN","RAMAGU14",51,0)
 ;--- Validate parameters specific to the 'EXAMINED' status
"RTN","RAMAGU14",52,0)
 I $TR(RACTION,"EC")'=RACTION  D  S:TMP<0 ERRCNT=ERRCNT+1
"RTN","RAMAGU14",53,0)
 . S TMP=$$VEXAMND(RAIENS,RACTION,.RAMISC,.RAFDA)
"RTN","RAMAGU14",54,0)
 ;
"RTN","RAMAGU14",55,0)
 ;--- Error handling and cleanup
"RTN","RAMAGU14",56,0)
 Q $S(ERRCNT>0:-11,1:0)
"RTN","RAMAGU14",57,0)
 ;
"RTN","RAMAGU14",58,0)
 ;+++++ VALIDATES 'EXAMINED' PARAMETERS
"RTN","RAMAGU14",59,0)
 ;
"RTN","RAMAGU14",60,0)
 ; RAIENS        IENS of the nuclear medicine data (file #70.2)
"RTN","RAMAGU14",61,0)
 ;
"RTN","RAMAGU14",62,0)
 ; RACTION       Action (can be combined):
"RTN","RAMAGU14",63,0)
 ;                 E  Examined (procedure has been performed)
"RTN","RAMAGU14",64,0)
 ;                 C  Complete
"RTN","RAMAGU14",65,0)
 ;
"RTN","RAMAGU14",66,0)
 ; .RAMISC       Reference to a local array containing miscellaneous
"RTN","RAMAGU14",67,0)
 ;               request parameters.
"RTN","RAMAGU14",68,0)
 ;
"RTN","RAMAGU14",69,0)
 ; .RAFDA        Reference to a local array where field values will
"RTN","RAMAGU14",70,0)
 ;               be prepared for storage (FileMan FDA array).
"RTN","RAMAGU14",71,0)
 ;
"RTN","RAMAGU14",72,0)
 ; Return values:
"RTN","RAMAGU14",73,0)
 ;       <0  Error code
"RTN","RAMAGU14",74,0)
 ;        0  Ok
"RTN","RAMAGU14",75,0)
 ;
"RTN","RAMAGU14",76,0)
VEXAMND(RAIENS,RACTION,RAMISC,RAFDA) ;
"RTN","RAMAGU14",77,0)
 N ERRCNT,IENS7021,NAME,NODE,RDPHI,TMP
"RTN","RAMAGU14",78,0)
 S ERRCNT=0
"RTN","RAMAGU14",79,0)
 ;
"RTN","RAMAGU14",80,0)
 ;=== Check if the nuclear medicine parameter list exists
"RTN","RAMAGU14",81,0)
 S TMP=$$VALPRM^RAMAGU09("RDPHARMS")
"RTN","RAMAGU14",82,0)
 I TMP'>0  Q $S(TMP<0:-11,1:0)
"RTN","RAMAGU14",83,0)
 ;
"RTN","RAMAGU14",84,0)
 ;=== Validate the nuclear medicine parameters
"RTN","RAMAGU14",85,0)
 S RDPHI=0
"RTN","RAMAGU14",86,0)
 F  S RDPHI=$O(RAMISC("RDPHARMS",RDPHI))  Q:RDPHI'>0  D
"RTN","RAMAGU14",87,0)
 . S NODE=$NA(RAMISC("RDPHARMS",RDPHI))
"RTN","RAMAGU14",88,0)
 . ;--- A new record IENS (with a placeholder) will be assigned to
"RTN","RAMAGU14",89,0)
 . ;--- this variable by the next call to $$CHECKFLD^RAMAGU09
"RTN","RAMAGU14",90,0)
 . K IENS7021
"RTN","RAMAGU14",91,0)
 . ;--- Validate RDPH-* parameters
"RTN","RAMAGU14",92,0)
 . S NAME=""
"RTN","RAMAGU14",93,0)
 . F  S NAME=$O(RAMSPSDEFS("F",70.21,NAME))  Q:NAME=""  D
"RTN","RAMAGU14",94,0)
 . . S:$$VALPRM^RAMAGU09(NAME,,.IENS7021,NODE)<0 ERRCNT=ERRCNT+1
"RTN","RAMAGU14",95,0)
 ;
"RTN","RAMAGU14",96,0)
 ;=== Error handling and cleanup
"RTN","RAMAGU14",97,0)
 Q $S(ERRCNT>0:-11,1:0)
"RTN","RASTREQ")
0^56^B56283063^B55165659
"RTN","RASTREQ",1,0)
RASTREQ ;HISC/CAH,GJC AISC/MJK-Status Requirements Check Routine ;06/05/09  10:08
"RTN","RASTREQ",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**1,10,23,40,56,99,90**;Mar 16, 1998;Build 20
"RTN","RASTREQ",3,0)
 ;Supported IA #10104 UP^XLFSTR
"RTN","RASTREQ",4,0)
 ;Supported IA #1367 LKUP^XPDKEY
"RTN","RASTREQ",5,0)
 ;Supported IA #10060 ^VA(200
"RTN","RASTREQ",6,0)
 ;Supported IA #10076 ^XUSEC(
"RTN","RASTREQ",7,0)
 ;Supported IA #2056 GET1^DIQ and GETS^DIQ
"RTN","RASTREQ",8,0)
 ; Called by 
"RTN","RASTREQ",9,0)
 ; (1) Stat Track's [RA STATUS CHANGE]'s fld EXAM STATUS' input transform
"RTN","RASTREQ",10,0)
 ; (2) ASK+22^RASTED, if user "^" out of stat trk editing
"RTN","RASTREQ",11,0)
 ; (3) Cancel an Exam's [RA CANCEL]'s fld EXAM STATUS' input transform
"RTN","RASTREQ",12,0)
 ; (4) Enter Last Past Visit Before DHCP's [RA LAST PAST VISIT]'s ""
"RTN","RASTREQ",13,0)
 ;
"RTN","RASTREQ",14,0)
 ; Instead of using RAIMGTY, recalculate
"RTN","RASTREQ",15,0)
 ; the imaging type using the imaging type on the exam node because
"RTN","RASTREQ",16,0)
 ; status updating through report entry/edit, batch verify, and several
"RTN","RASTREQ",17,0)
 ; other options is NOT screened by sign-on imaging type, so does not
"RTN","RASTREQ",18,0)
 ; stay the same through a user's session.
"RTN","RASTREQ",19,0)
 ;
"RTN","RASTREQ",20,0)
 ; 'RAMES1' is used to display which Exam Status required fields are
"RTN","RASTREQ",21,0)
 ; not populated.  This only applies to the 'Status Tracking Of Exams'
"RTN","RASTREQ",22,0)
 ; option.
"RTN","RASTREQ",23,0)
 ;
"RTN","RASTREQ",24,0)
 ; If tracking ^-out, this rtn would be called outside of edt tmpl,
"RTN","RASTREQ",25,0)
 ; and thus the DA vars would not be defined, so we need to set them here
"RTN","RASTREQ",26,0)
 ;
"RTN","RASTREQ",27,0)
 N RASAVY M RASAVY=Y  ;save the value of Y, patch #90
"RTN","RASTREQ",28,0)
 S:'$D(DA)#2 DA=RACNI S:'$D(DA(1))#2 DA(1)=RADTI S:'$D(DA(2))#2 DA(2)=RADFN
"RTN","RASTREQ",29,0)
 ; If Fileman enter/edit, we need to define RADFN, RADTI, RACNI so the
"RTN","RASTREQ",30,0)
 ; nuc med checks won't bomb
"RTN","RASTREQ",31,0)
 S:'$D(RACNI)#2 RACNI=DA S:'$D(RADTI)#2 RADTI=DA(1) S:'$D(RADFN)#2 RADFN=DA(2)
"RTN","RASTREQ",32,0)
 ;
"RTN","RASTREQ",33,0)
 S RAIMGTYI=+$P($G(^RADPT(DA(2),"DT",DA(1),0)),U,2),RAIMGTYJ=$P($G(^RA(79.2,+RAIMGTYI,0)),U,1),RASAVTYJ=RAIMGTYJ
"RTN","RASTREQ",34,0)
 S RAMES1="W:$G(K)=$P($G(^RA(72,+$G(RANXT72),0)),U,3)&('$D(ZTQUEUED)#2) !?3,""No '"",RAZ,""'"",?35,"" entered for this exam.""" ; display if at the ranext exm stat level
"RTN","RASTREQ",35,0)
 S RAXX=+$G(X)
"RTN","RASTREQ",36,0)
 I '$D(^RA(72,RAXX,0))!(RAIMGTYJ']"") D  M Y=RASAVY Q
"RTN","RASTREQ",37,0)
 . K X W:'$D(ZTQUEUED)#2 !?3,"Error: cannot determine Imaging Type of exam.  Contact IRM."
"RTN","RASTREQ",38,0)
 . K RAMES1,RAXX
"RTN","RASTREQ",39,0)
 . Q
"RTN","RASTREQ",40,0)
 N RA,RASN,RASTI,RADES,RAOKAY,RA3
"RTN","RASTREQ",41,0)
 ; RADES = order seq. desired, RAOKAY= actual order seq. okay'd
"RTN","RASTREQ",42,0)
 S X1=$G(^RA(72,RAXX,0)),RADES=$P(X1,U,3)
"RTN","RASTREQ",43,0)
 I $$LKUP^XPDKEY(+$P(X1,"^",4))]"",'$D(^XUSEC($$LKUP^XPDKEY(+$P(X1,"^",4)),DUZ)) K X W:'$D(ZTQUEUED)#2 !?3,"You do not have the proper access privileges to ",!?3,"change this exam to this status" M Y=RASAVY Q
"RTN","RASTREQ",44,0)
 S RAJ=^RADPT(DA(2),"DT",DA(1),"P",DA,0),RAOR=-1
"RTN","RASTREQ",45,0)
 S RABEFORE=$P($G(^RA(72,+$P(RAJ,U,3),0)),U,3) ; current order seq
"RTN","RASTREQ",46,0)
 ; Don't need to set RAORDIFN,RACS,RAPRIT,RAF5
"RTN","RASTREQ",47,0)
 I '$D(^RA(72,"AA",RAIMGTYJ,0,RAXX)) D LOOP^RASTREQ1 S RAIMGTYJ=RASAVTYJ
"RTN","RASTREQ",48,0)
 I $D(^RA(72,"AA",RAIMGTYJ,0,RAXX)) D CANCEL^RASTREQ1
"RTN","RASTREQ",49,0)
 S RAIMGTYJ=RASAVTYJ
"RTN","RASTREQ",50,0)
 ; Can't use X to determine if status change to next was successful
"RTN","RASTREQ",51,0)
 ; due to looping thru all status levels for this img type
"RTN","RASTREQ",52,0)
 ; chk if calculated order is at NEXT or higher level
"RTN","RASTREQ",53,0)
 ; RAAFTER is set in rastreq1; it has 2 meanings :
"RTN","RASTREQ",54,0)
 ;   upon return from rastreq1, RAAFTER means highest seq order qualified
"RTN","RASTREQ",55,0)
 ;   upon exit from this rtn,   RAAFTER means actual seq order used
"RTN","RASTREQ",56,0)
 I RABEFORE<RAAFTER D  G MSG
"RTN","RASTREQ",57,0)
 . I RADES<RAAFTER S RAOKAY=RADES
"RTN","RASTREQ",58,0)
 . E  S RAOKAY=RAAFTER
"RTN","RASTREQ",59,0)
 . Q
"RTN","RASTREQ",60,0)
 I RAAFTER<RABEFORE D  G MSG
"RTN","RASTREQ",61,0)
 . I RADES<RAAFTER S RAOKAY=RADES
"RTN","RASTREQ",62,0)
 . E  S RAOKAY=RAAFTER
"RTN","RASTREQ",63,0)
 . Q
"RTN","RASTREQ",64,0)
 ; at this point RAAFTER=RABEFORE
"RTN","RASTREQ",65,0)
 I RADES<RAAFTER S RAOKAY=RADES
"RTN","RASTREQ",66,0)
 E  S RAOKAY=RABEFORE
"RTN","RASTREQ",67,0)
MSG I RAOKAY=RABEFORE K X W:'$D(ZTQUEUED)#2 !?5," ...exam status not changed" G KOUT2
"RTN","RASTREQ",68,0)
 S X=$O(^RA(72,"AA",RAIMGTYJ,RAOKAY,0))
"RTN","RASTREQ",69,0)
 S:$D(RANEXT) RANEXT=^RA(72,+X,0) ;set existing RANEXT to ok'd status
"RTN","RASTREQ",70,0)
 I RAOKAY<RABEFORE W:'$D(ZTQUEUED)#2 !?5," ...exam status backed down to '",$P($G(^RA(72,+X,0)),U),"'" G KOUT2
"RTN","RASTREQ",71,0)
 I RAOKAY<RADES W:'$D(ZTQUEUED)#2 !!?5," ...though upgraded, new status level (",$P($G(^RA(72,+$O(^RA(72,"AA",RAIMGTYJ,RAOKAY,0)),0)),U),")",!?5,"is not as high as the desired level (",$P($G(^RA(72,+$O(^RA(72,"AA",RAIMGTYJ,RADES,0)),0)),U),")",!
"RTN","RASTREQ",72,0)
KOUT1 ; check for higher qualifying status(es)
"RTN","RASTREQ",73,0)
 G:RAOKAY'<RAAFTER!(RAOKAY=9) KOUT2 S RA3=RAOKAY
"RTN","RASTREQ",74,0)
 W !!,"This case also qualifies for higher status(es) :",!
"RTN","RASTREQ",75,0)
 F  S RA3=$O(^RA(72,"AA",RAIMGTYJ,RA3)) Q:RA3=""  Q:RA3>RAAFTER  W:'$D(ZTQUEUED)#2 ?$X+4,$P($G(^RA(72,$O(^(RA3,0)),0)),U)
"RTN","RASTREQ",76,0)
 W:'$D(ZTQUEUED)#2 !!,"Since Status Tracking can only upgrade one status at a time,",!,"please edit this exam again.",!
"RTN","RASTREQ",77,0)
KOUT2 S RAAFTER=RAOKAY ;return as actual seq order used, not nec. highest
"RTN","RASTREQ",78,0)
 K RAIMGTYI,RAIMGTYJ,RAMES1,RAZ,RAXX,RAJ,RAS,RAK,RAE,X1,RASAVTYJ
"RTN","RASTREQ",79,0)
 M Y=RASAVY
"RTN","RASTREQ",80,0)
 Q
"RTN","RASTREQ",81,0)
 ;
"RTN","RASTREQ",82,0)
1 ;Technologist Check
"RTN","RASTREQ",83,0)
 N DIERR
"RTN","RASTREQ",84,0)
 S RA("TECH")="" I $O(^RADPT(DA(2),"DT",DA(1),"P",DA,"TC",0))>0 S RA("TECH")=+^($O(^(0)),0) S RA("TECH")=$$GET1^DIQ(200,RA("TECH")_",",.01)
"RTN","RASTREQ",85,0)
 I RA("TECH")']"" K X S RAZ="technologist" X:$D(RAMES1) RAMES1
"RTN","RASTREQ",86,0)
 K RA("TECH") Q
"RTN","RASTREQ",87,0)
 ;
"RTN","RASTREQ",88,0)
2 ;Interpreting Physician Check
"RTN","RASTREQ",89,0)
 N DIERR
"RTN","RASTREQ",90,0)
 I $$GET1^DIQ(200,$P(RAJ,"^",12)_",",.01)="",$$GET1^DIQ(200,$P(RAJ,"^",15)_",",.01)="" K X S RAZ="interpreting staff or resident" X:$D(RAMES1) RAMES1
"RTN","RASTREQ",91,0)
 Q
"RTN","RASTREQ",92,0)
 ;
"RTN","RASTREQ",93,0)
3 ;Detailed Procedure Check
"RTN","RASTREQ",94,0)
 S RAZ="detailed procedure" I '$D(^RAMIS(71,+$P(RAJ,"^",2),0)) K X X:$D(RAMES1) RAMES1 Q
"RTN","RASTREQ",95,0)
 S RAJ1=$G(^RAMIS(71,+$P(RAJ,"^",2),0)) I "DS"'[$P(RAJ1,"^",6) K X X:$D(RAMES1) RAMES1 Q
"RTN","RASTREQ",96,0)
 S RAZ="detailed procedure (no CPT code)" I $P(RAJ1,"^",9)']"" K X X:$D(RAMES1) RAMES1 Q
"RTN","RASTREQ",97,0)
 Q
"RTN","RASTREQ",98,0)
 ;
"RTN","RASTREQ",99,0)
4 ;Film Data Check
"RTN","RASTREQ",100,0)
 I '$O(^RADPT(DA(2),"DT",DA(1),"P",DA,"F",0)) K X S RAZ="film data" X:$D(RAMES1) RAMES1
"RTN","RASTREQ",101,0)
 Q
"RTN","RASTREQ",102,0)
 ;
"RTN","RASTREQ",103,0)
5 ;Diagnostic Code Check
"RTN","RASTREQ",104,0)
 I '$D(^RA(78.3,+$P(RAJ,"^",13),0)) K X S RAZ="diagnostic code" X:$D(RAMES1) RAMES1
"RTN","RASTREQ",105,0)
 Q
"RTN","RASTREQ",106,0)
 ;
"RTN","RASTREQ",107,0)
6 ;Camera/Equipment/Room Check
"RTN","RASTREQ",108,0)
 S RAE=$S($D(RAMDV):$P(RAMDV,"^",9),1:1) I RAE,'$D(^RA(78.6,+$P(RAJ,"^",18),0)) K X S RAZ="camera/equip/room" X:$D(RAMES1) RAMES1
"RTN","RASTREQ",109,0)
 Q
"RTN","RASTREQ",110,0)
 ;
"RTN","RASTREQ",111,0)
11 ;Report Entered and not just a stub rec for Img/PACS Check
"RTN","RASTREQ",112,0)
 I '$D(^RARPT(+$P(RAJ,"^",17),0)) G NORPT
"RTN","RASTREQ",113,0)
 ; since there's a rpt ptr, must check if the rpt is just a stub rpt
"RTN","RASTREQ",114,0)
 N RA17,RA0 ; use logic from RAREG
"RTN","RASTREQ",115,0)
 S RA17=+$P(RAJ,"^",17)
"RTN","RASTREQ",116,0)
 I $$STUB^RAEDCN1(RA17) G NORPT ; rpt is an image stub
"RTN","RASTREQ",117,0)
 Q
"RTN","RASTREQ",118,0)
NORPT ; either no report yet, or report is stub
"RTN","RASTREQ",119,0)
 K X S RAZ="report" X:$D(RAMES1) RAMES1
"RTN","RASTREQ",120,0)
 Q
"RTN","RASTREQ",121,0)
 ;
"RTN","RASTREQ",122,0)
12 ;Report Verified Check
"RTN","RASTREQ",123,0)
 D 11:$P(RAS,"^",11)'="Y" I $D(^RARPT(+$P(RAJ,"^",17),0)),$P(^(0),"^",5)'="V" K X S RAZ="report verification" X:$D(RAMES1) RAMES1
"RTN","RASTREQ",124,0)
 Q
"RTN","RASTREQ",125,0)
 ;
"RTN","RASTREQ",126,0)
16 ;Impression Entry Check
"RTN","RASTREQ",127,0)
 ; In Phase 1, for Elec. filed rpts, skip this even if div. param requires it
"RTN","RASTREQ",128,0)
 I $D(^RARPT(+$P(RAJ,"^",17),0)),$P(^(0),"^",5)="EF" Q
"RTN","RASTREQ",129,0)
 I $O(^RARPT(+$P(RAJ,"^",17),"I",0))'>0 K X S RAZ="impression" X:$D(RAMES1) RAMES1
"RTN","RASTREQ",130,0)
 Q
"RTN","RASTREQ",131,0)
13 ;Procedure Modifers Check
"RTN","RASTREQ",132,0)
 I '$O(^RADPT(DA(2),"DT",DA(1),"P",DA,"M",0)) K X S RAZ="procedure modifier" X:$D(RAMES1) RAMES1
"RTN","RASTREQ",133,0)
 Q
"RTN","RASTREQ",134,0)
14 ;CPT Modifiers Check
"RTN","RASTREQ",135,0)
 I '$O(^RADPT(DA(2),"DT",DA(1),"P",DA,"CMOD",0)) K X S RAZ="CPT modifiers" X:$D(RAMES1) RAMES1
"RTN","RASTREQ",136,0)
 Q
"RTN","RASTREQ",137,0)
 ;
"RTN","RASTREQ",138,0)
HELP ; Called from 'Help Text' node in DD(70.03,3,4).
"RTN","RASTREQ",139,0)
 N E,RA
"RTN","RASTREQ",140,0)
 S RAJ=$G(^RADPT(DA(2),"DT",DA(1),"P",DA,0))
"RTN","RASTREQ",141,0)
 S RAIMGTYI=+$P($G(^RADPT(DA(2),"DT",DA(1),0)),U,2),RAIMGTYJ=$P($G(^RA(79.2,+RAIMGTYI,0)),U,1)
"RTN","RASTREQ",142,0)
 I RAIMGTYJ']"" W !,"ERROR:  Cannot determine imaging type of exam!" K FL,K,N,RAIMGTYI,RAIMGTYJ,RAS,RAJ Q
"RTN","RASTREQ",143,0)
 W !,"This exam meets the requirements for the following statuses:"
"RTN","RASTREQ",144,0)
 F K=0:0 S K=$O(^RA(72,"AA",RAIMGTYJ,K)) Q:K'>0  D
"RTN","RASTREQ",145,0)
 . S X="",E=+$O(^RA(72,"AA",RAIMGTYJ,K,0)) Q:E'>0
"RTN","RASTREQ",146,0)
 . I $D(^RA(72,E,0)) D
"RTN","RASTREQ",147,0)
 .. S RA(0)=$G(^RA(72,E,0)),N=$P(RA(0),U),RAS=$G(^RA(72,E,.1))
"RTN","RASTREQ",148,0)
 .. I $L(RAS) D HELP1 I $D(X) W !?10,N S FL="" ;removed D 3, done inside HELP1
"RTN","RASTREQ",149,0)
 .. Q
"RTN","RASTREQ",150,0)
 . Q
"RTN","RASTREQ",151,0)
 W:'$D(FL) !?10,"Does not meet the requirements of any status."
"RTN","RASTREQ",152,0)
 W ! K RAS,RAJ,N,K,FL,RAIMGTYI,RAIMGTYJ
"RTN","RASTREQ",153,0)
 Q
"RTN","RASTREQ",154,0)
HELP1 ; Called from 'HELP' above and 'STUFF^RASTREQ1'
"RTN","RASTREQ",155,0)
 ; 'RAJ' -> 0 node of the examination
"RTN","RASTREQ",156,0)
 ; 'E'   -> ien of the examination status
"RTN","RASTREQ",157,0)
 ; Both 'RAJ' & 'E' set in 'HELP' & 'STUFF^RASTREQ1'
"RTN","RASTREQ",158,0)
 ;
"RTN","RASTREQ",159,0)
 ;start of p99, exam status UNCHANGED if pregnancy screen is not answered for female pt bet ages 12-55
"RTN","RASTREQ",160,0)
 N RAPTAGE,RASAVE
"RTN","RASTREQ",161,0)
 S RASAVE=X ;save the value of X, since it's being replaced in DIQ call.
"RTN","RASTREQ",162,0)
 S RAPTAGE=$$PTAGE^RAUTL8(DA(2),"")
"RTN","RASTREQ",163,0)
 I $$PTSEX^RAUTL8(DA(2))="F",((RAPTAGE>11)&(RAPTAGE<56)),$$GET1^DIQ(70.03,DA_","_DA(1)_","_DA(2),32)="" S E=$P(RAJ,U,3),(N,X)="" S:$G(E) (N,X)=$P($G(^RA(72,E,0)),U) Q
"RTN","RASTREQ",164,0)
 S X=RASAVE
"RTN","RASTREQ",165,0)
 ;end p99
"RTN","RASTREQ",166,0)
 N RADIO,RADIOUZD,RAS5 S RADIO=$S($G(^RA(72,E,.5))]"":$G(^(.5)),1:"N")
"RTN","RASTREQ",167,0)
 S:$P($G(^RA(79.2,+RAIMGTYI,0)),"^",5)="Y" RADIOUZD=""
"RTN","RASTREQ",168,0)
 ;
"RTN","RASTREQ",169,0)
 ; Phase 1 Outside Reporting 100% outside work, skip all except Diag. Code
"RTN","RASTREQ",170,0)
 I $D(^RARPT(+$P(RAJ,"^",17),0)),$P(^(0),"^",5)="EF" S RAS5=$P(RAS,U,5),RAS="",$P(RAS,U,5)=RAS5 K RADIOUZD
"RTN","RASTREQ",171,0)
 ;
"RTN","RASTREQ",172,0)
 F RAK=1:1 Q:$P(RAS,"^",RAK,99)']""  D:$P(RAS,"^",RAK)="Y" @RAK
"RTN","RASTREQ",173,0)
 I $D(X),$P(RAS,"^",3)'="Y",$D(^RA(72,"AA",RAIMGTYJ,9,E)) D 3
"RTN","RASTREQ",174,0)
 I $D(X),$P(RAS,"^",16)'="Y",$D(^RA(72,"AA",RAIMGTYJ,9,E)),$D(^RA(79,+$P(^RADPT(DA(2),"DT",DA(1),0),"^",3),.1)),$P(^(.1),"^",16)="Y" D 16
"RTN","RASTREQ",175,0)
 I $D(RADIOUZD) D  ;if Radiopharm Used, then check req'd NucMed flds
"RTN","RASTREQ",176,0)
 . D EN1^RASTREQN(RADIO,RAJ)
"RTN","RASTREQ",177,0)
 . I $D(X),($$UP^XLFSTR($P($G(^RA(72,E,.6)),"^",11)="Y")) D EN1^RADOSTIK(RADFN,RADTI,RACNI)
"RTN","RASTREQ",178,0)
 . Q
"RTN","RASTREQ",179,0)
 Q
"RTN","RAUTL22")
0^39^B29084710^n/a
"RTN","RAUTL22",1,0)
RAUTL22 ;HCIOFO/SG - GENERAL UTILITIES ; 2/24/09 3:13pm
"RTN","RAUTL22",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**90**;Mar 16, 1998;Build 20
"RTN","RAUTL22",3,0)
 ;
"RTN","RAUTL22",4,0)
 ; Error codes -3, -8, and -10 can be returned by entry points of this
"RTN","RAUTL22",5,0)
 ; routine. Therefore, if you export this routine, then the dialogs
"RTN","RAUTL22",6,0)
 ; #700000.003, #700000.008, and 700000.01 should be exported as well.
"RTN","RAUTL22",7,0)
 ;
"RTN","RAUTL22",8,0)
 Q
"RTN","RAUTL22",9,0)
 ;
"RTN","RAUTL22",10,0)
 ;***** CHECKS IF ALL VARIABLES FROM THE LIST ARE NOT EMPTY
"RTN","RAUTL22",11,0)
 ;
"RTN","RAUTL22",12,0)
 ; ZZLST         List of variable names separated by commas
"RTN","RAUTL22",13,0)
 ;
"RTN","RAUTL22",14,0)
 ; [ZZFLAGS]     Flags that control the execution (can be combined):
"RTN","RAUTL22",15,0)
 ;
"RTN","RAUTL22",16,0)
 ;                 V  By default, error messages (-8 and -10)
"RTN","RAUTL22",17,0)
 ;                    reference parameters. If this flag is provided,
"RTN","RAUTL22",18,0)
 ;                    then the messages that reference variable/nodes
"RTN","RAUTL22",19,0)
 ;                    (-56 and -57) are used.
"RTN","RAUTL22",20,0)
 ;
"RTN","RAUTL22",21,0)
 ; Return values:
"RTN","RAUTL22",22,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAUTL22",23,0)
 ;        0  Success
"RTN","RAUTL22",24,0)
 ;
"RTN","RAUTL22",25,0)
CHKREQ(ZZLST,ZZFLAGS) ;
"RTN","RAUTL22",26,0)
 N ZZCNT,ZZI,ZZL,ZZVAR
"RTN","RAUTL22",27,0)
 S ZZL=$L(ZZLST,","),ZZCNT=0
"RTN","RAUTL22",28,0)
 F ZZI=1:1:ZZL  S ZZVAR=$P(ZZLST,",",ZZI)  D:ZZVAR'=""
"RTN","RAUTL22",29,0)
 . I $G(@ZZVAR)?." "  D  S ZZCNT=ZZCNT+1
"RTN","RAUTL22",30,0)
 . . D ERROR^RAERR($S($G(ZZFLAGS)["V":-56,1:-8),,ZZVAR)
"RTN","RAUTL22",31,0)
 Q $S(ZZCNT>0:$$ERROR^RAERR($S($G(ZZFLAGS)["V":-57,1:-10)),1:0)
"RTN","RAUTL22",32,0)
 ;
"RTN","RAUTL22",33,0)
 ;***** RETURNS FORMATTED TEXT OF THE DIALOG
"RTN","RAUTL22",34,0)
 ;
"RTN","RAUTL22",35,0)
 ; DLGNUM        Dialog number (file #.84)
"RTN","RAUTL22",36,0)
 ;
"RTN","RAUTL22",37,0)
 ; [.PARAMS]     Reference of a local array containing parameters for 
"RTN","RAUTL22",38,0)
 ;               the BLD^DIALOG.
"RTN","RAUTL22",39,0)
 ;
"RTN","RAUTL22",40,0)
 ; [DIWR]        The right margin for the text. Default: 75.
"RTN","RAUTL22",41,0)
 ;
"RTN","RAUTL22",42,0)
 ; [DIWF]        Flags that control the execution (can be combined).
"RTN","RAUTL22",43,0)
 ;
"RTN","RAUTL22",44,0)
 ;                 A  Append the text to the buffer. By default,
"RTN","RAUTL22",45,0)
 ;                    the output buffer is cleared in the beginning
"RTN","RAUTL22",46,0)
 ;                    of each call to DLGTXT.
"RTN","RAUTL22",47,0)
 ;
"RTN","RAUTL22",48,0)
 ;                 S  Suppress blank lines added between chunks of
"RTN","RAUTL22",49,0)
 ;                    text appended to the buffer. A blank line is
"RTN","RAUTL22",50,0)
 ;                    never inserted if the buffer is empty.
"RTN","RAUTL22",51,0)
 ;
"RTN","RAUTL22",52,0)
 ;                 Any format control parameters supported by the
"RTN","RAUTL22",53,0)
 ;                 ^DIWP except "I" and "W" can also be used.
"RTN","RAUTL22",54,0)
 ;
"RTN","RAUTL22",55,0)
 ; Return values:
"RTN","RAUTL22",56,0)
 ;   Closed root of the node in the ^UTILITY global that contains
"RTN","RAUTL22",57,0)
 ;   formatted text (output of the ^DIWP). Caller should KILL this
"RTN","RAUTL22",58,0)
 ;   node after retrieving the text.
"RTN","RAUTL22",59,0)
 ;
"RTN","RAUTL22",60,0)
DLGTXT(DLGNUM,PARAMS,DIWR,DIWF) ;
"RTN","RAUTL22",61,0)
 N DIWL,RA8BUF,RAI,X
"RTN","RAUTL22",62,0)
 S DIWL=1  S:$G(DIWR)'>0 DIWR=75
"RTN","RAUTL22",63,0)
 ;--- Check the flags
"RTN","RAUTL22",64,0)
 S DIWF=$G(DIWF)
"RTN","RAUTL22",65,0)
 I DIWF["A"  D:DIWF'["S"
"RTN","RAUTL22",66,0)
 . S:$G(^UTILITY($J,"W",DIWL))>0 RA8BUF(1)=" "
"RTN","RAUTL22",67,0)
 E  K ^UTILITY($J,"W")
"RTN","RAUTL22",68,0)
 ;--- Load the text
"RTN","RAUTL22",69,0)
 D BLD^DIALOG(DLGNUM,.PARAMS,,"RA8BUF","S")
"RTN","RAUTL22",70,0)
 ;--- Remove the "A", "I", "S", and "W" flags
"RTN","RAUTL22",71,0)
 S DIWF=$TR($G(DIWF),"ASW")
"RTN","RAUTL22",72,0)
 F  S RAI=$F(DIWF,"I")  Q:'RAI  D  S $E(DIWF,RAI-1,X-1)=""
"RTN","RAUTL22",73,0)
 . F X=RAI:1  Q:$E(DIWF,X)'?1N
"RTN","RAUTL22",74,0)
 ;--- Reformat the text
"RTN","RAUTL22",75,0)
 S RAI=""
"RTN","RAUTL22",76,0)
 F  S RAI=$O(RA8BUF(RAI))  Q:RAI=""  S X=RA8BUF(RAI)  D ^DIWP
"RTN","RAUTL22",77,0)
 ;---
"RTN","RAUTL22",78,0)
 Q $NA(^UTILITY($J,"W",DIWL))
"RTN","RAUTL22",79,0)
 ;
"RTN","RAUTL22",80,0)
 ;***** CHECKS IF THE DATE IS EXACT (INCLUDES MONTH AND DAY)
"RTN","RAUTL22",81,0)
 ;
"RTN","RAUTL22",82,0)
 ; DTE           Date/time (FileMan)
"RTN","RAUTL22",83,0)
 ;
"RTN","RAUTL22",84,0)
 ; Return values:
"RTN","RAUTL22",85,0)
 ;       <0  Error descriptor (see $$ERROR^RAERR)
"RTN","RAUTL22",86,0)
 ;        0  Date is not exact
"RTN","RAUTL22",87,0)
 ;        1  Date is exact
"RTN","RAUTL22",88,0)
 ;
"RTN","RAUTL22",89,0)
ISEXCTDT(DTE) ;
"RTN","RAUTL22",90,0)
 N TMP  S TMP=$G(DTE)\1
"RTN","RAUTL22",91,0)
 Q:(TMP<1000000)!(TMP>9991231) $$IPVE^RAERR("DTE")
"RTN","RAUTL22",92,0)
 Q ($E(TMP,4,5)>0)&($E(TMP,6,7)>0)
"RTN","RAUTL22",93,0)
 ;
"RTN","RAUTL22",94,0)
 ;***** CHECKS IF THE TEXT BUFFER IS EMPTY
"RTN","RAUTL22",95,0)
 ;
"RTN","RAUTL22",96,0)
 ; RA8NODE       Name of a local or global node that contains the
"RTN","RAUTL22",97,0)
 ;               text (either in @RA8NODE@(i) or in @RA8NODE@(i,0)
"RTN","RAUTL22",98,0)
 ;               sub-nodes).
"RTN","RAUTL22",99,0)
 ;
"RTN","RAUTL22",100,0)
 ; NOTE: This function considers a buffer containing just space
"RTN","RAUTL22",101,0)
 ;       characters as empty.
"RTN","RAUTL22",102,0)
 ;
"RTN","RAUTL22",103,0)
 ; Return values:
"RTN","RAUTL22",104,0)
 ;        0  The buffer is not empty
"RTN","RAUTL22",105,0)
 ;        1  The buffer is empty
"RTN","RAUTL22",106,0)
 ;
"RTN","RAUTL22",107,0)
ISWPEMPT(RA8NODE) ;
"RTN","RAUTL22",108,0)
 N RA8EMPTY,RA8I
"RTN","RAUTL22",109,0)
 S RA8I="",RA8EMPTY=1
"RTN","RAUTL22",110,0)
 F  S RA8I=$O(@RA8NODE@(RA8I))  Q:RA8I=""  D  Q:'RA8EMPTY
"RTN","RAUTL22",111,0)
 . I $G(@RA8NODE@(RA8I))'?." "  S RA8EMPTY=0  Q
"RTN","RAUTL22",112,0)
 . S:$G(@RA8NODE@(RA8I,0))'?." " RA8EMPTY=0
"RTN","RAUTL22",113,0)
 Q RA8EMPTY
"RTN","RAUTL22",114,0)
 ;
"RTN","RAUTL22",115,0)
 ;***** CHECKS IF A NEW PAGE SHOULD BE STARTED
"RTN","RAUTL22",116,0)
 ;
"RTN","RAUTL22",117,0)
 ; [RESERVE]     Number of reserved lines (1, by default).
"RTN","RAUTL22",118,0)
 ;               If the current page does not have so many lines
"RTN","RAUTL22",119,0)
 ;               available, a new page will be started.
"RTN","RAUTL22",120,0)
 ;
"RTN","RAUTL22",121,0)
 ; [FORCE]       Force the prompt
"RTN","RAUTL22",122,0)
 ;
"RTN","RAUTL22",123,0)
 ; Return values:
"RTN","RAUTL22",124,0)
 ;
"RTN","RAUTL22",125,0)
 ;       -2  Timeout
"RTN","RAUTL22",126,0)
 ;       -1  User canceled the output ('^' was entered)
"RTN","RAUTL22",127,0)
 ;        0  Continue
"RTN","RAUTL22",128,0)
 ;        1  New page and continue
"RTN","RAUTL22",129,0)
 ;
"RTN","RAUTL22",130,0)
 ; NOTE: This entry point can also be called as a procedure:
"RTN","RAUTL22",131,0)
 ;       D PAGE^RAUTL22(...) if you do not need its return value.
"RTN","RAUTL22",132,0)
 ;
"RTN","RAUTL22",133,0)
PAGE(RESERVE,FORCE) ;
"RTN","RAUTL22",134,0)
 Q:$G(XPDNM)'="" 0  ; KIDS pre/post-install
"RTN","RAUTL22",135,0)
 ;---
"RTN","RAUTL22",136,0)
 N RC
"RTN","RAUTL22",137,0)
 I ($Y'<($G(IOSL,24)-$G(RESERVE,1)-1))!$G(FORCE)  D  S $Y=0
"RTN","RAUTL22",138,0)
 . I $E(IOST,1,2)'="C-"  W @IOF  Q
"RTN","RAUTL22",139,0)
 . N DA,DIR,DIROUT,DTOUT,DUOUT,I,X,Y
"RTN","RAUTL22",140,0)
 . S DIR(0)="E"
"RTN","RAUTL22",141,0)
 . D ^DIR
"RTN","RAUTL22",142,0)
 . S RC=$S($D(DUOUT):-1,$D(DTOUT):-2,1:1)
"RTN","RAUTL22",143,0)
 ;---
"RTN","RAUTL22",144,0)
 I $G(RC)<0  D:$G(RAPARAMS("PAGECTRL"))["E"
"RTN","RAUTL22",145,0)
 . S $ECODE=$S(RC=-2:",UTIMEOUT,",1:",UCANCEL,")
"RTN","RAUTL22",146,0)
 ;---
"RTN","RAUTL22",147,0)
 Q:$QUIT +$G(RC)  Q
"RTN","RAUTL22",148,0)
 ;
"RTN","RAUTL22",149,0)
 ;***** TRANSLATES FLAGS
"RTN","RAUTL22",150,0)
 ;
"RTN","RAUTL22",151,0)
 ; FLAGS         Source flags
"RTN","RAUTL22",152,0)
 ;
"RTN","RAUTL22",153,0)
 ; SRC           Source and destination patterns for translation
"RTN","RAUTL22",154,0)
 ; DST           (see the $TRANSLATE function for details).
"RTN","RAUTL22",155,0)
 ;
"RTN","RAUTL22",156,0)
 ; This function works similarly to the $TRANSLATE but it removes
"RTN","RAUTL22",157,0)
 ; those flags (characters) that are not included in the SRC.
"RTN","RAUTL22",158,0)
 ;
"RTN","RAUTL22",159,0)
TRFLAGS(FLAGS,SRC,DST) ;
"RTN","RAUTL22",160,0)
 N TMP
"RTN","RAUTL22",161,0)
 ;--- Get flags that are not included in the SRC
"RTN","RAUTL22",162,0)
 S TMP=$TR(FLAGS,SRC)
"RTN","RAUTL22",163,0)
 ;--- Remove these flags
"RTN","RAUTL22",164,0)
 S TMP=$TR(FLAGS,TMP)
"RTN","RAUTL22",165,0)
 ;--- Translate valid flags
"RTN","RAUTL22",166,0)
 Q $TR(TMP,SRC,DST)
"RTN","RAUTL22",167,0)
 ;
"RTN","RAUTL22",168,0)
 ;***** TRUNCATES THE STRING AND APPENDS "..."
"RTN","RAUTL22",169,0)
 ;
"RTN","RAUTL22",170,0)
 ; STR           Source string
"RTN","RAUTL22",171,0)
 ; MAXLEN        Maximum allowed length
"RTN","RAUTL22",172,0)
 ;
"RTN","RAUTL22",173,0)
TRUNC(STR,MAXLEN) ;
"RTN","RAUTL22",174,0)
 Q $S($L(STR)>MAXLEN:$E(STR,1,MAXLEN-3)_"...",1:STR)
"RTN","RAUTL22",175,0)
 ;
"RTN","RAUTL22",176,0)
 ;***** VALIDATES THE IENS
"RTN","RAUTL22",177,0)
 ;
"RTN","RAUTL22",178,0)
 ; IENS          IENS of a record or a subfile; placeholders are not
"RTN","RAUTL22",179,0)
 ;               allowed (see FileMan DBS API manual for details).
"RTN","RAUTL22",180,0)
 ;
"RTN","RAUTL22",181,0)
 ; [FLAGS]       Flags that control the execution (can be combined):
"RTN","RAUTL22",182,0)
 ;
"RTN","RAUTL22",183,0)
 ;                 S  Subfile IENS are allowed
"RTN","RAUTL22",184,0)
 ;
"RTN","RAUTL22",185,0)
 ; Return Values:
"RTN","RAUTL22",186,0)
 ;        0  Invalid IENS
"RTN","RAUTL22",187,0)
 ;        1  Ok
"RTN","RAUTL22",188,0)
 ;
"RTN","RAUTL22",189,0)
VALIENS(IENS,FLAGS) ;
"RTN","RAUTL22",190,0)
 N I,L,IEN,RC
"RTN","RAUTL22",191,0)
 S L=$L(IENS,",")
"RTN","RAUTL22",192,0)
 ;--- The last piece should be empty (trailing comma is required)
"RTN","RAUTL22",193,0)
 Q:$P(IENS,",",L)'="" 0
"RTN","RAUTL22",194,0)
 ;--- The first piece should be either a canonic number or empty
"RTN","RAUTL22",195,0)
 S I=$S(($P(IENS,",")="")&($G(FLAGS)["S"):2,1:1)
"RTN","RAUTL22",196,0)
 ;--- All pieces in between should be canonic numbers
"RTN","RAUTL22",197,0)
 S RC=1
"RTN","RAUTL22",198,0)
 F I=I:1:L-1  S IEN=$P(IENS,",",I)  I (IEN'>0)!(+IEN'=IEN)  S RC=0  Q
"RTN","RAUTL22",199,0)
 Q RC
"RTN","RAUTL22",200,0)
 ;
"RTN","RAUTL22",201,0)
 ;***** WRITES THE MESSAGE (ACCORDING TO THE ENVIRONMENT)
"RTN","RAUTL22",202,0)
 ;
"RTN","RAUTL22",203,0)
 ; MSG           Message
"RTN","RAUTL22",204,0)
 ;
"RTN","RAUTL22",205,0)
 ; [SKIP]        If this parameter is defined and non-zero, then an
"RTN","RAUTL22",206,0)
 ;               empty line is written above the message.
"RTN","RAUTL22",207,0)
 ;
"RTN","RAUTL22",208,0)
W(MSG,SKIP) ;
"RTN","RAUTL22",209,0)
 I $D(XPDENV)!($G(XPDNM)="")  W:$G(SKIP) !  W !,MSG  Q
"RTN","RAUTL22",210,0)
 I $G(SKIP)  D BMES^XPDUTL(MSG)  Q
"RTN","RAUTL22",211,0)
 D MES^XPDUTL(MSG)
"RTN","RAUTL22",212,0)
 Q
"RTN","RAUTL22",213,0)
 ;
"RTN","RAUTL22",214,0)
 ;***** CREATES A HEADER OF THE NODE IN THE ^XTMP GLOBAL
"RTN","RAUTL22",215,0)
 ;
"RTN","RAUTL22",216,0)
 ; SUBSCR        Subscript of the node in the ^XTMP global
"RTN","RAUTL22",217,0)
 ; [DKEEP]       Number of days to keep the node (1 by default)
"RTN","RAUTL22",218,0)
 ; [DESCR]       Description of the node
"RTN","RAUTL22",219,0)
 ;
"RTN","RAUTL22",220,0)
XTMPHDR(SUBSCR,DKEEP,DESCR) ;
"RTN","RAUTL22",221,0)
 N DATE  S DATE=$$DT^XLFDT  S:$G(DKEEP)'>0 DKEEP=1
"RTN","RAUTL22",222,0)
 S ^XTMP(SUBSCR,0)=$$FMADD^XLFDT(DATE,DKEEP)_U_DATE_U_$G(DESCR)
"RTN","RAUTL22",223,0)
 Q
"RTN","RAUTL22",224,0)
 ;
"RTN","RAUTL22",225,0)
 ;***** EMULATES AND EXTENDS THE ZWRITE COMMAND :-)
"RTN","RAUTL22",226,0)
 ;
"RTN","RAUTL22",227,0)
 ; ZZ8NODE       Closed root of the sub-tree to display
"RTN","RAUTL22",228,0)
 ;               (either local array or global variable)
"RTN","RAUTL22",229,0)
 ;
"RTN","RAUTL22",230,0)
 ; [ZZ8TTL]      Title of the output
"RTN","RAUTL22",231,0)
 ;
"RTN","RAUTL22",232,0)
 ; [ZZ8FLG]      Flags that control the execution (can be combined):
"RTN","RAUTL22",233,0)
 ;
"RTN","RAUTL22",234,0)
 ;                 N  Do not print node names
"RTN","RAUTL22",235,0)
 ;
"RTN","RAUTL22",236,0)
 ;                 P  Paginate the output
"RTN","RAUTL22",237,0)
 ;
"RTN","RAUTL22",238,0)
 ;                 S  Skip a line before the output
"RTN","RAUTL22",239,0)
 ;
"RTN","RAUTL22",240,0)
ZW(ZZ8NODE,ZZ8TTL,ZZ8FLG) ;
"RTN","RAUTL22",241,0)
 Q:ZZ8NODE=""  Q:'$D(@ZZ8NODE)
"RTN","RAUTL22",242,0)
 N ZZ8FLT,ZZ8L,ZZ8PI,ZZ8RC
"RTN","RAUTL22",243,0)
 S ZZ8FLG=$G(ZZ8FLG),ZZ8RC=0
"RTN","RAUTL22",244,0)
 ;
"RTN","RAUTL22",245,0)
 ;--- Skip a line before the output
"RTN","RAUTL22",246,0)
 I ZZ8FLG["S"  D  Q:ZZ8RC<0
"RTN","RAUTL22",247,0)
 . I ZZ8FLG["P"  S ZZ8RC=$$PAGE(1)  Q:ZZ8RC<0
"RTN","RAUTL22",248,0)
 . W !
"RTN","RAUTL22",249,0)
 ;
"RTN","RAUTL22",250,0)
 ;--- Write the title (if provided)
"RTN","RAUTL22",251,0)
 I $G(ZZ8TTL)'=""  D  Q:ZZ8RC<0
"RTN","RAUTL22",252,0)
 . I ZZ8FLG["P"  S ZZ8RC=$$PAGE(2)  Q:ZZ8RC<0
"RTN","RAUTL22",253,0)
 . W !,ZZ8TTL,!
"RTN","RAUTL22",254,0)
 ;
"RTN","RAUTL22",255,0)
 ;--- Write the root node's value (if defined)
"RTN","RAUTL22",256,0)
 I $D(@ZZ8NODE)#10  D  Q:ZZ8RC<0
"RTN","RAUTL22",257,0)
 . I ZZ8FLG["P"  S ZZ8RC=$$PAGE()  Q:ZZ8RC<0
"RTN","RAUTL22",258,0)
 . W !  W:ZZ8FLG'["N" ZZ8NODE_"="  W """"_@ZZ8NODE_""""
"RTN","RAUTL22",259,0)
 ;
"RTN","RAUTL22",260,0)
 ;--- Write values of sub-nodes
"RTN","RAUTL22",261,0)
 S ZZ8L=$L(ZZ8NODE)  S:$E(ZZ8NODE,ZZ8L)=")" ZZ8L=ZZ8L-1
"RTN","RAUTL22",262,0)
 S ZZ8FLT=$E(ZZ8NODE,1,ZZ8L),ZZ8PI=ZZ8NODE
"RTN","RAUTL22",263,0)
 F  S ZZ8PI=$Q(@ZZ8PI)  Q:$E(ZZ8PI,1,ZZ8L)'=ZZ8FLT  D  Q:ZZ8RC<0
"RTN","RAUTL22",264,0)
 . I ZZ8FLG["P"  S ZZ8RC=$$PAGE()  Q:ZZ8RC<0
"RTN","RAUTL22",265,0)
 . W !  W:ZZ8FLG'["N" ZZ8PI_"="  W """"_@ZZ8PI_""""
"RTN","RAUTL22",266,0)
 Q
"RTN","RAUTL8")
0^57^B73540763^B70605252
"RTN","RAUTL8",1,0)
RAUTL8 ;HISC/CAH-Utility routines ;05/19/09  12:02
"RTN","RAUTL8",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**45,72,99,90**;Mar 16, 1998;Build 20
"RTN","RAUTL8",3,0)
 ;
"RTN","RAUTL8",4,0)
 ;Called by File 70, Exam subfile, Procedure Fld 2 Input transform
"RTN","RAUTL8",5,0)
 ;RA*5*45: modified -  logic in PRC1, ASK, ASK1, & MES1 subroutines
"RTN","RAUTL8",6,0)
 ;          removed -  MES subroutine
"RTN","RAUTL8",7,0)
 ;RA*5*72 03/23/2006 BAY/GJC/KAM Remedy Call 136200 Correct UNDEF issue
"RTN","RAUTL8",8,0)
 ;RA*5.0*99 added utility for pt age and pt sex
"RTN","RAUTL8",9,0)
 ;
"RTN","RAUTL8",10,0)
 ;Supported IA #10061 reference to ^VADPT
"RTN","RAUTL8",11,0)
 ;Supported IA #10103 reference to ^XLFDT
"RTN","RAUTL8",12,0)
 ;Supported IA #10142 reference to EN^DDIOL
"RTN","RAUTL8",13,0)
 ;Supported IA #2056 reference to GET1^DIQ and GETS^DIQ
"RTN","RAUTL8",14,0)
 ;Supported IA #10104 reference to UP^XLFSTR
"RTN","RAUTL8",15,0)
 ;Supported IA #10076 reference to ^XUSEC
"RTN","RAUTL8",16,0)
 ;Supported IA #2055 reference to EXTERNAL^DILFD
"RTN","RAUTL8",17,0)
 ;Supported IA #2378 reference to ORCHK^GMRAOR
"RTN","RAUTL8",18,0)
 ;
"RTN","RAUTL8",19,0)
PRC G PRC1:'$D(^RADPT(DA(2),"DT","AP",X)) ; check for C.M. reaction
"RTN","RAUTL8",20,0)
 N RADUP S RADUP=+$$DPDT^RAUTL8(X,.DA)
"RTN","RAUTL8",21,0)
 I RADUP D ASK Q:'$D(X)
"RTN","RAUTL8",22,0)
PRC1 ; Check for C.M. reaction on this patient
"RTN","RAUTL8",23,0)
 ; +X is the IEN of the Rad/Nuc Med Procedure in file 71
"RTN","RAUTL8",24,0)
 ; RA*5*72 - Changed next line to preserve variables
"RTN","RAUTL8",25,0)
 N RAGMRAOR S RAGMRAOR=$$GMRAOR(DA(2)) Q:RAGMRAOR'=1
"RTN","RAUTL8",26,0)
 D CONTRAST^RAUTL2(+X) ;displays contrast(s) associated with procedure
"RTN","RAUTL8",27,0)
 ;use RAPMSG for CONTRAST REACTION MESSAGE field 25, file 79
"RTN","RAUTL8",28,0)
 S RAPMSG=$G(^RA(79,+$P(^RADPT(DA(2),"DT",DA(1),0),"^",3),"CON"))
"RTN","RAUTL8",29,0)
 D:RAPMSG'="" EN^DDIOL("..."_RAPMSG_"...","","!?3")
"RTN","RAUTL8",30,0)
 D EN^DDIOL("","","!") ;line feed
"RTN","RAUTL8",31,0)
 K RAPMSG
"RTN","RAUTL8",32,0)
 D:$P($G(^RAMIS(71,+X,0)),U,20)="Y" MES1 ;message only if CM used
"RTN","RAUTL8",33,0)
 Q
"RTN","RAUTL8",34,0)
ASK ; Prompt user for yes/no response
"RTN","RAUTL8",35,0)
 N RAX D EN^DDIOL("Procedure is already entered for this date. Is it ok to continue? No// ","","!!?3")
"RTN","RAUTL8",36,0)
ASK1 R RAX:DTIME
"RTN","RAUTL8",37,0)
 S:'$T!(RAX="")!(RAX["^")!("Nn"[$E(RAX)) RAX="N"
"RTN","RAUTL8",38,0)
 K:RAX="N" X Q:'$D(X)
"RTN","RAUTL8",39,0)
 I "Yy"'[$E(RAX) S RAPMSG(1)="Enter 'YES' to register patient for this procedure, or 'NO' to edit the",RAPMSG(2)="above procedure. No// ",RAPMSG(1,"F")="!!?3",RAPMSG(2,"F")="!?3" D EN^DDIOL(.RAPMSG) K RAPMSG G ASK1
"RTN","RAUTL8",40,0)
 Q
"RTN","RAUTL8",41,0)
 ;
"RTN","RAUTL8",42,0)
MES1 ; display procedure acceptance message
"RTN","RAUTL8",43,0)
 R !?5,"...Type 'OK' to acknowledge or '^' to select another procedure   ==> ",RAX:DTIME
"RTN","RAUTL8",44,0)
 S RAX=$$UP^XLFSTR(RAX)
"RTN","RAUTL8",45,0)
 I '$T!(RAX["^")!(RAX="OK") K:RAX'="OK" X K RAX,RAI Q
"RTN","RAUTL8",46,0)
 G MES1
"RTN","RAUTL8",47,0)
 ;
"RTN","RAUTL8",48,0)
STATSEL ;Select one or more order statuses
"RTN","RAUTL8",49,0)
 ;INPUT VARIABLES:
"RTN","RAUTL8",50,0)
 ;   RANO() array contains status codes prohibited from selection
"RTN","RAUTL8",51,0)
 ;OUTPUT VARIABLES:
"RTN","RAUTL8",52,0)
 ;   RAST is a string of status codes selected (ex: 1^3^8)
"RTN","RAUTL8",53,0)
 ;   RAORST() is an array of selected status codes and status names
"RTN","RAUTL8",54,0)
 ;     (ex:   RAORST(1)="DISCONTINUED", RAORST(3)="HOLD", ... )
"RTN","RAUTL8",55,0)
 K RAST,RAORST W ! S RAORSTS=$P(^DD(75.1,5,0),U,3) F I=1:1 S X=$P(RAORSTS,";",I) Q:X=""  S X1=$P(X,":",1) I '$D(RANO(X1)) S X2=$P(X,":",2),RAORST(X1)=X2
"RTN","RAUTL8",56,0)
 W !!,"Select statuses to include on report.",! S X1="" F  S X1=$O(RAORST(X1)) Q:X1=""  W !?5,$J(X1,2,0)_"   "_RAORST(X1)
"RTN","RAUTL8",57,0)
STAT W ! K DIR S DIR(0)="L" D ^DIR Q:'$D(Y(0))
"RTN","RAUTL8",58,0)
 S RAST="" F I=1:1 S RASTX=$P(Y(0),",",I) Q:RASTX=""  I $D(RAORST(RASTX)) S RAST=RAST_"^"_RASTX
"RTN","RAUTL8",59,0)
 S RAST=$E(RAST,2,99) I RAST="" W !,"  ?? Sorry, invalid status selection.  Please try again.",! G STAT
"RTN","RAUTL8",60,0)
 S I="" F  S I=$O(RAORST(I)) Q:I=""  I RAST'[I K RAORST(I)
"RTN","RAUTL8",61,0)
 K RASTX,I,X,X1,X2 Q
"RTN","RAUTL8",62,0)
 ;
"RTN","RAUTL8",63,0)
 ;INPUT TRANSFORM FOR SECONDARY INTERPRETING RESIDENT
"RTN","RAUTL8",64,0)
S() ; do not enter primary OR SAME SEC in secondary interpreting resident
"RTN","RAUTL8",65,0)
 I '$D(X)!('$D(DA(3))) G S2
"RTN","RAUTL8",66,0)
 I '$D(^RADPT(DA(3),"DT",DA(2),"P",DA(1),0)) G S2
"RTN","RAUTL8",67,0)
 I $D(^RADPT(DA(3),"DT",DA(2),"P",DA(1),"SRR","B",+Y)) Q 0 ;SAME SEC RES
"RTN","RAUTL8",68,0)
 I $P(^RADPT(DA(3),"DT",DA(2),"P",DA(1),0),"^",12)=+Y Q 0
"RTN","RAUTL8",69,0)
 Q 1
"RTN","RAUTL8",70,0)
S2 I '$D(^RADPT(DA(2),"DT",DA(1),"P",DA,0)) Q 0
"RTN","RAUTL8",71,0)
 I $D(^RADPT(DA(2),"DT",DA(1),"P",DA,"SRR","B",+Y)) Q 0 ;SAME SEC RES
"RTN","RAUTL8",72,0)
 I $P(^RADPT(DA(2),"DT",DA(1),"P",DA,0),"^",12)=+Y Q 0
"RTN","RAUTL8",73,0)
 Q 1
"RTN","RAUTL8",74,0)
 ;INPUT TRANSFORM FOR SECONDARY INTERPRETING STAFF
"RTN","RAUTL8",75,0)
SSR() ; do not enter primary OR SAME SEC in secondary interpreting staff
"RTN","RAUTL8",76,0)
 I '$D(X)!('$D(DA(3))) G SSR2
"RTN","RAUTL8",77,0)
 I '$D(^RADPT(DA(3),"DT",DA(2),"P",DA(1),0)) G SSR2
"RTN","RAUTL8",78,0)
 I $D(^RADPT(DA(3),"DT",DA(2),"P",DA(1),"SSR","B",+Y)) Q 0 ;SAME SEC STF
"RTN","RAUTL8",79,0)
 I $P(^RADPT(DA(3),"DT",DA(2),"P",DA(1),0),"^",15)=+Y Q 0
"RTN","RAUTL8",80,0)
 Q 1
"RTN","RAUTL8",81,0)
SSR2 I '$D(^RADPT(DA(2),"DT",DA(1),"P",DA,0)) Q 0
"RTN","RAUTL8",82,0)
 I $D(^RADPT(DA(2),"DT",DA(1),"P",DA,"SSR","B",+Y)) Q 0 ;SAME SEC STF
"RTN","RAUTL8",83,0)
 I $P(^RADPT(DA(2),"DT",DA(1),"P",DA,0),"^",15)=+Y Q 0
"RTN","RAUTL8",84,0)
 Q 1
"RTN","RAUTL8",85,0)
 ;INPUT TRANSFORM FOR PRIMARY INTERPRETING RESIDENT
"RTN","RAUTL8",86,0)
 ; *** NOT USED - See EN ***
"RTN","RAUTL8",87,0)
PRRS() ; do not enter secondary into primary interpreting resident screen
"RTN","RAUTL8",88,0)
 ; called from input transform ^DD(70.03,12,0)
"RTN","RAUTL8",89,0)
 I $D(^RADPT(DA(2),"DT",DA(1),"P",DA,"SRR","B",+Y)) Q 0
"RTN","RAUTL8",90,0)
 Q 1
"RTN","RAUTL8",91,0)
 ;INPUT TRANSFORM FOR PRIMARY INTERPRETING STAFF
"RTN","RAUTL8",92,0)
 ; *** NOT USED - See EN ***
"RTN","RAUTL8",93,0)
PSRS() ; do not enter secondary into primary interpreting staff screen
"RTN","RAUTL8",94,0)
 ; called from input transform ^DD(70.03,15,0)
"RTN","RAUTL8",95,0)
 I $D(^RADPT(DA(2),"DT",DA(1),"P",DA,"SSR","B",+Y)) Q 0
"RTN","RAUTL8",96,0)
 Q 1
"RTN","RAUTL8",97,0)
EN(X,FLD,RA) ;Input transform screen for Primary Staff, Primary Res
"RTN","RAUTL8",98,0)
 ;Used by fields 70.03,12 & 70.03,15.  If 'Primary' is found in
"RTN","RAUTL8",99,0)
 ; the 'Secondary' multiple then delete the 'Secondary' entry.
"RTN","RAUTL8",100,0)
 ; X = 'Primary' IEN,  FLD = 'Secondary' mult. to check,  RA = DA array
"RTN","RAUTL8",101,0)
 N DA,DEL,HDR,IEN,NODE,SAVEX,SUBDD,XREF
"RTN","RAUTL8",102,0)
 S NODE=$S(FLD=60:"SSR",FLD=70:"SRR",1:""),SAVEX=X
"RTN","RAUTL8",103,0)
 S SUBDD=$S(FLD=60:70.11,FLD=70:70.09,1:""),(IEN,DEL)=0
"RTN","RAUTL8",104,0)
 I (NODE="")!(X'>0)!(FLD'>0)!(SUBDD'>0) Q
"RTN","RAUTL8",105,0)
 F  S IEN=$O(^RADPT(RA(2),"DT",RA(1),"P",RA,NODE,"B",X,IEN)) Q:IEN'>0  D
"RTN","RAUTL8",106,0)
 . S XREF=0
"RTN","RAUTL8",107,0)
 . F  S XREF=$O(^DD(SUBDD,.01,1,XREF)) Q:XREF'>0  D
"RTN","RAUTL8",108,0)
 .. S (D0,DA(3))=RA(2),(D1,DA(2))=RA(1),(D2,DA(1))=RA,(D3,DA)=IEN,X=SAVEX
"RTN","RAUTL8",109,0)
 .. I $G(^DD(SUBDD,.01,1,XREF,2))]"" X ^(2)
"RTN","RAUTL8",110,0)
 .. Q
"RTN","RAUTL8",111,0)
 . K ^RADPT(RA(2),"DT",RA(1),"P",RA,NODE,IEN,0) S DEL=DEL+1
"RTN","RAUTL8",112,0)
 . Q
"RTN","RAUTL8",113,0)
 I DEL D
"RTN","RAUTL8",114,0)
 . S HDR=$G(^RADPT(RA(2),"DT",RA(1),"P",RA,NODE,0)) Q:HDR=""
"RTN","RAUTL8",115,0)
 . S HDR(3)=+$O(^RADPT(RA(2),"DT",RA(1),"P",RA,NODE,0))
"RTN","RAUTL8",116,0)
 . S HDR(4)=$P(HDR,U,4)-DEL
"RTN","RAUTL8",117,0)
 . S:HDR(3)'>0 HDR(3)="" S:HDR(4)'>0 HDR(4)=""
"RTN","RAUTL8",118,0)
 . S $P(^RADPT(RA(2),"DT",RA(1),"P",RA,NODE,0),U,3,4)=HDR(3)_U_HDR(4)
"RTN","RAUTL8",119,0)
 . Q
"RTN","RAUTL8",120,0)
 S X=SAVEX
"RTN","RAUTL8",121,0)
 Q
"RTN","RAUTL8",122,0)
DPDT(RAPRC,RAY) ; Check for registration of duplicate procedures on the same
"RTN","RAUTL8",123,0)
 ; date/time.  Called from PRC above.
"RTN","RAUTL8",124,0)
 ; INPUT VARIABLES
"RTN","RAUTL8",125,0)
 ; 'RAPRC' --> IEN of the procedure (71)
"RTN","RAUTL8",126,0)
 ; 'RAY'   --> DA array i.e, DA, DA(1), & DA(2)
"RTN","RAUTL8",127,0)
 ; OUTPUT VARIABLES
"RTN","RAUTL8",128,0)
 ; 'RAFLG' --> RAFLG=1 procedure registered for this date/time
"RTN","RAUTL8",129,0)
 ;         --> RAFLG=0 initial registration for procedure@date/time
"RTN","RAUTL8",130,0)
 N RA72,RABDT,RACIEN,RAEDT,RAFLG,RAI S RAFLG=0
"RTN","RAUTL8",131,0)
 S RABDT=RAY(1)\1,RAEDT=RABDT_".9999",RAI=RABDT-.0000001
"RTN","RAUTL8",132,0)
 F  S RAI=$O(^RADPT(RAY(2),"DT","AP",RAPRC,RAI)) Q:RAI'>0!(RAI>RAEDT)  D  Q:RAFLG
"RTN","RAUTL8",133,0)
 . Q:RAI=RAY(1)  ; At this point our exam status is 'WAITING FOR EXAM'
"RTN","RAUTL8",134,0)
 . S RACIEN=$O(^RADPT(RAY(2),"DT","AP",RAPRC,RAI,0)) Q:'RACIEN
"RTN","RAUTL8",135,0)
 . S RA72=+$P($G(^RADPT(RAY(2),"DT",RAI,"P",RACIEN,0)),U,3) ;xam stat
"RTN","RAUTL8",136,0)
 . S RA72(3)=$P($G(^RA(72,RA72,0)),U,3)
"RTN","RAUTL8",137,0)
 . I RA72(3)'=0 S RAFLG=1 ; cancelled exams are not taken into account
"RTN","RAUTL8",138,0)
 . Q
"RTN","RAUTL8",139,0)
 Q RAFLG
"RTN","RAUTL8",140,0)
SCRN(RADA,RARS,Y,RALVL) ; check if the primary or secondary int'ng staff
"RTN","RAUTL8",141,0)
 ; or resident has access to a location or locations which have
"RTN","RAUTL8",142,0)
 ; an imaging type which match the imaging type of the examination.
"RTN","RAUTL8",143,0)
 ; This screen will also check the classification of the individual to 
"RTN","RAUTL8",144,0)
 ; ensure that they are active and valid for the field being edited.
"RTN","RAUTL8",145,0)
 ;
"RTN","RAUTL8",146,0)
 ; Called from DD's: ^DD(70.03,12 - ^DD(70.03,15  - ^DD(70.03,60
"RTN","RAUTL8",147,0)
 ;                   ^DD(70.03,70 - ^DD(70.09,.01 - ^DD(70.11,.01
"RTN","RAUTL8",148,0)
 ;
"RTN","RAUTL8",149,0)
 ; Input variables:  RADA-> DA array, maps to RADFN, RADTI & RACNI
"RTN","RAUTL8",150,0)
 ;                   RARS-> Classification: Resident("R") or Staff("S")
"RTN","RAUTL8",151,0)
 ;                      Y-> selected resident/staff
"RTN","RAUTL8",152,0)
 ;                   RALVL-> "PRI"=Primary physician, "SEC"=Secondary
"RTN","RAUTL8",153,0)
 ;
"RTN","RAUTL8",154,0)
 ; Output variable: $S(1:I-Types & classification match, resident/staff
"RTN","RAUTL8",155,0)
 ;                      ok,0:no match re-select resident/staff)
"RTN","RAUTL8",156,0)
 ;
"RTN","RAUTL8",157,0)
 I $S('$D(^VA(200,+Y,"RA")):1,'$P(^("RA"),U,3):1,DT'>$P(^("RA"),U,3):1,1:0),($D(^VA(200,"ARC",RARS,+Y)))
"RTN","RAUTL8",158,0)
 Q:'$T 0 ; failed the classification part of the screen
"RTN","RAUTL8",159,0)
 Q:$D(^XUSEC("RA ALLOC",+Y)) 1 ; Resident/Staff has access to all loc's!
"RTN","RAUTL8",160,0)
 N RA7002,RACCESS
"RTN","RAUTL8",161,0)
 ; adjust RADA() due Fileman's unpredictable retention of DA() levels
"RTN","RAUTL8",162,0)
 I RALVL="SEC" D
"RTN","RAUTL8",163,0)
 . I '$D(RADA(3)) S RA7002=$G(^RADPT(RADA(2),"DT",RADA(1),0))
"RTN","RAUTL8",164,0)
 . I $D(RADA(3)),(RADA(2)'=RADA(3)) S RA7002=$G(^RADPT(RADA(3),"DT",RADA(2),0))
"RTN","RAUTL8",165,0)
 . I $D(RADA(3)),(RADA(2)=RADA(3)) S RA7002=$G(^RADPT(RADA(2),"DT",RADA(1),0))
"RTN","RAUTL8",166,0)
 I RALVL="PRI" S RA7002=$G(^RADPT(RADA(2),"DT",RADA(1),0))
"RTN","RAUTL8",167,0)
 D VARACC^RAUTL6(+Y) ; set-up access array for selected resident/staff
"RTN","RAUTL8",168,0)
 Q:'$D(RACCESS(+Y,"IMG",+$P(RA7002,"^",2))) 0 ; no i-type match
"RTN","RAUTL8",169,0)
 Q 1
"RTN","RAUTL8",170,0)
 ;
"RTN","RAUTL8",171,0)
CMEDIA(RADFN,RADTI,RACNI) ;return the CM used with an exam
"RTN","RAUTL8",172,0)
 ;input: RADFN=patient DFN, RADTI=inv. date/time of exam, RACNI=exam IEN
"RTN","RAUTL8",173,0)
 ;return: contrast media administered to the patient during an exam
"RTN","RAUTL8",174,0)
 N RAI,RAS S RAI=0,RAS=""
"RTN","RAUTL8",175,0)
 F  S RAI=$O(^RADPT(RADFN,"DT",RADTI,"P",RACNI,"CM",RAI)) Q:'RAI  D
"RTN","RAUTL8",176,0)
 .S RAI(0)=$P($G(^RADPT(RADFN,"DT",RADTI,"P",RACNI,"CM",RAI,0)),U)
"RTN","RAUTL8",177,0)
 .S RAS=RAS_$$EXTERNAL^DILFD(70.3225,.01,"",RAI(0))_", "
"RTN","RAUTL8",178,0)
 Q $P(RAS,", ",1,($L(RAS,", ")-1))
"RTN","RAUTL8",179,0)
 ;
"RTN","RAUTL8",180,0)
GMRAOR(RADA2) ;look for a contrast media reaction
"RTN","RAUTL8",181,0)
 N D,D0,D1,D2,D3,DA,DC,DD,DFN,DG,DH,DI,DIC,DIE,DIEDA,DIEL,DIETMP,DIEXREF,DIFLD,DIIENS,DIOV,DIP,DK,DL,DLAYGO,DM,DN,DOV,DP,DQ,DR,X,Y
"RTN","RAUTL8",182,0)
 Q $$ORCHK^GMRAOR(RADA2,"CM")
"RTN","RAUTL8",183,0)
 ;
"RTN","RAUTL8",184,0)
PTAGE(DFN,RADTST) ;return pt age, added by p#99
"RTN","RAUTL8",185,0)
 ;input = DFN pt ien
"RTN","RAUTL8",186,0)
 ;      = RADTST date to process pt age from; if blank, use today's date
"RTN","RAUTL8",187,0)
 ;output = pt age
"RTN","RAUTL8",188,0)
 N RADAYS,VADM,VA,VAERR,%,RAYSAVE,RAXSAVE
"RTN","RAUTL8",189,0)
 M RAYSAVE=Y,RAXSAVE=X   ;save value of Y and X, patch #90
"RTN","RAUTL8",190,0)
 S:RADTST="" RADTST=$$DT^XLFDT()
"RTN","RAUTL8",191,0)
 D DEM^VADPT   ; $P(VADM(3),"^") DOB of patient, internal
"RTN","RAUTL8",192,0)
 S RADAYS=$$FMDIFF^XLFDT(RADTST,$P(VADM(3),"^"),3)
"RTN","RAUTL8",193,0)
 M X=RAXSAVE,Y=RAYSAVE
"RTN","RAUTL8",194,0)
 Q RADAYS\365.25
"RTN","RAUTL8",195,0)
 ;
"RTN","RAUTL8",196,0)
PTSEX(DFN) ;return pt sex, added by p#99
"RTN","RAUTL8",197,0)
 ;input = pt dfn
"RTN","RAUTL8",198,0)
 ;output = pt sex (M=for MALE, F=for FEMALE)
"RTN","RAUTL8",199,0)
 ;save value of Y and X; patch #90
"RTN","RAUTL8",200,0)
 N VADM,VA,VAERR,%,RAYSAVE,RAXSAVE M RAYSAVE=Y,RAXSAVE=X D DEM^VADPT
"RTN","RAUTL8",201,0)
 M Y=RAYSAVE,X=RAXSAVE
"RTN","RAUTL8",202,0)
 Q $P(VADM(5),U)
"RTN","RAUTL8",203,0)
PRSCR(RADFN,RADTI,RACNI,RAFRMT) ;return pregnancy screen
"RTN","RAUTL8",204,0)
 ;input: radfn = pt dfn
"RTN","RAUTL8",205,0)
 ;       radti = inverse dt
"RTN","RAUTL8",206,0)
 ;       racni = ien of exam sub
"RTN","RAUTL8",207,0)
 ;       rafrmt = E for External format or I for Internal format
"RTN","RAUTL8",208,0)
 ;return = pregnancy screen
"RTN","RAUTL8",209,0)
 N RAIENS,RAOUT
"RTN","RAUTL8",210,0)
 S RAIENS=RACNI_","_RADTI_","_RADFN_","
"RTN","RAUTL8",211,0)
 D GETS^DIQ(70.03,RAIENS,"32",RAFRMT,"RAOUT")
"RTN","RAUTL8",212,0)
 Q $G(RAOUT(70.03,RAIENS,32,RAFRMT))
"RTN","RAUTL8",213,0)
PRSCOM(RADFN,RADTI,RACNI) ;return pregnancy screen comment
"RTN","RAUTL8",214,0)
 ;input: radfn = pt dfn
"RTN","RAUTL8",215,0)
 ;       radti = inverse dt
"RTN","RAUTL8",216,0)
 ;       racni = ien of exam sub
"RTN","RAUTL8",217,0)
 ;return = pregnancy screen comment
"RTN","RAUTL8",218,0)
 N RAIENS,RAOUT
"RTN","RAUTL8",219,0)
 S RAIENS=RACNI_","_RADTI_","_RADFN_","
"RTN","RAUTL8",220,0)
 D GETS^DIQ(70.03,RAIENS,"80","E","RAOUT")
"RTN","RAUTL8",221,0)
 Q $G(RAOUT(70.03,RAIENS,80,"E"))
"RTN","RAUTL8",222,0)
PRCEXA(RADFN) ;return a previous case exam
"RTN","RAUTL8",223,0)
 ;input:  radfn = pt dfn
"RTN","RAUTL8",224,0)
 ;
"RTN","RAUTL8",225,0)
 ;output: racexa(0) =radti^racni, where radti=inverse date ien and racni=record ien
"RTN","RAUTL8",226,0)
 N RADTIEN,RACNIEN
"RTN","RAUTL8",227,0)
 S RADTIEN=$O(^RADPT(RADFN,"DT",0)),RACNIEN=9999,RACNIEN=$O(^RADPT(RADFN,"DT",RADTIEN,"P",RACNIEN),-1)
"RTN","RAUTL8",228,0)
 Q RADTIEN_U_RACNIEN
"RTN","RAUTL8",229,0)
PRACTO(RADFN) ;returns previous active order IEN of file #75.1 or null if no previous order
"RTN","RAUTL8",230,0)
 ;input  radfn = pt dfn
"RTN","RAUTL8",231,0)
 ;output  = ien of #75.1
"RTN","RAUTL8",232,0)
 N RA751IEN,RA751PR
"RTN","RAUTL8",233,0)
 S RA751PR=""
"RTN","RAUTL8",234,0)
 S RA751IEN=" " F  S RA751IEN=$O(^RAO(75.1,"B",RADFN,RA751IEN),-1) Q:RA751IEN'>0!$G(RA751PR)  D
"RTN","RAUTL8",235,0)
 .I $$GET1^DIQ(75.1,RA751IEN,5)="ACTIVE" S RA751PR=RA751IEN
"RTN","RAUTL8",236,0)
 Q RA751PR
"RTN","RAUTL8",237,0)
PAOE() ;Entry point to enter Pregnancy field of file 75.1.  This label is being called from
"RTN","RAUTL8",238,0)
 ;RA ORDER EXAM input template.
"RTN","RAUTL8",239,0)
 ;RETURN value:  0 if unsuccessful (up arrow, timeout or problem occured), 1 if successful.
"RTN","RAUTL8",240,0)
 N DIR,DIROUT,DIRUT,DUOUT,DTOUT,Y,X S DIR(0)="75.1,13"
"RTN","RAUTL8",241,0)
 S DIR("B")=$S($G(RAPREG)="y":"YES",$G(RAPREG)="n":"NO",$G(RAPREG)="u":"UNKNOWN",1:"")
"RTN","RAUTL8",242,0)
 S DIR("A")="PREGNANT AT TIME OF ORDER ENTRY" D ^DIR
"RTN","RAUTL8",243,0)
 Q:$D(DIRUT)!$D(DUOUT)!$D(DTOUT)!$D(DIROUT) 0
"RTN","RAUTL8",244,0)
 S RAPREG=$P(Y,"^")
"RTN","RAUTL8",245,0)
 Q 1
"RTN","RAUTL8",246,0)
 ;
"RTN","RAUTL8",247,0)
ASKSEX() ;RA*5.0*99 - Determine the sex of the patient by asking the user.
"RTN","RAUTL8",248,0)
 ;Called from the RA ORDER EXAM compiled input template.
"RTN","RAUTL8",249,0)
 ;
"RTN","RAUTL8",250,0)
 ;Question: "THE SEX OF THIS PATIENT IS NOT AVAILABLE. IS PATIENT FEMALE"
"RTN","RAUTL8",251,0)
 ;If 'Yes' Y=1; if 'No' Y=0
"RTN","RAUTL8",252,0)
 ;The default presented to the user: 'No'
"RTN","RAUTL8",253,0)
 ;
"RTN","RAUTL8",254,0)
 ;Return: the place holder value ('Y' is reset in the RA ORDER EXAM input template)
"RTN","RAUTL8",255,0)
 ;necessary for branching within that template.
"RTN","RAUTL8",256,0)
 ;
"RTN","RAUTL8",257,0)
 N DIR,DTOUT,DUOUT,DIROUT,DIRUT,RAY,X S RAY=Y S DIR(0)="Y",DIR("B")="No"
"RTN","RAUTL8",258,0)
 S DIR("A")="THE SEX OF THIS PATIENT IS NOT AVAILABLE. IS PATIENT FEMALE"
"RTN","RAUTL8",259,0)
 S DIR("?")="Enter 'YES' if patient is female, or 'NO' if patient is male."
"RTN","RAUTL8",260,0)
 D ^DIR
"RTN","RAUTL8",261,0)
 Q $S($D(DIRUT):"@999",Y=0:"@130",1:RAY)
"RTN","RAUTL8",262,0)
 ;
"RTN","RAUTL8",263,0)
ASKPREG() ;RA*5.0*99 - Evaluate the conditions to present the PREGNANCY
"RTN","RAUTL8",264,0)
 ;SCREENING (70.03 ; 32) prompt to the user. Called from the RA EXAM EDIT
"RTN","RAUTL8",265,0)
 ;input template & the RA REGISTER compiled input template.
"RTN","RAUTL8",266,0)
 ;
"RTN","RAUTL8",267,0)
 ;Input: RA0(17) (global) The IEN of the report associated with this exam.
"RTN","RAUTL8",268,0)
 ;                Note: no IEN will exist when the case is being registered.
"RTN","RAUTL8",269,0)
 ;        RADFN  (global) the IEN of the patient
"RTN","RAUTL8",270,0)
 ;            Y  (global) the place holder for the RA EXAM EDIT input template. 
"RTN","RAUTL8",271,0)
 ;
"RTN","RAUTL8",272,0)
 ;Return: the place holder value (Y = $$ASKPREG^RAUTL8) necessary for
"RTN","RAUTL8",273,0)
 ;branching within these templates.
"RTN","RAUTL8",274,0)
 ;
"RTN","RAUTL8",275,0)
 N %,DIERR,RAERR,RAGE,RAST,VAERR,X,RAY S RAY=Y
"RTN","RAUTL8",276,0)
 S RAGE=$$PTAGE^RAUTL8(RADFN,""),Y=$G(RA0(17))_","
"RTN","RAUTL8",277,0)
 D:+Y GETS^DIQ(74,Y,5,"I","RAST","RAERR")
"RTN","RAUTL8",278,0)
 S RAST=$G(RAST(74,Y,5,"I"),"")
"RTN","RAUTL8",279,0)
 I $$PTSEX^RAUTL8(RADFN)'="F"!((RAGE>55)!(RAGE<12))!(RAST="V")!(RAST="EF") S RAY="@8001"
"RTN","RAUTL8",280,0)
 Q RAY
"RTN","RAUTL8",281,0)
 ;
"UP",70.2,70.21,-1)
70.2^NUC
"UP",70.2,70.21,0)
70.21
"VER")
8.0^22.0
"^DD",70.2,70.21,4,0)
ACTIVITY DRAWN (in mCi)^NJ10,4X^^0;4^K:+X'=X!(X>99999.9999)!(X<.0001)!(X?.E1"."5N.N) X X:$G(X) ^DD(70.21,4,9.2)
"^DD",70.2,70.21,4,.1)
ACTIVITY DRAWN (in mCi)
"^DD",70.2,70.21,4,3)
Enter activity drawn between .0001 and 99999.9999.  Unit of Measure is mCi.
"^DD",70.2,70.21,4,9.2)
K:$G(^RADPTN(+$G(DA(1)),"NUC",+$G(DA),0))&($P($G(^(0)),"^",7))&($P($G(^(0)),"^",7)>X) X D:'$D(X) EN^DDIOL("This value cannot be less than DOSE ADMINISTERED.","","!!?10")
"^DD",70.2,70.21,4,21,0)
^^2^2^2970514^^^^
"^DD",70.2,70.21,4,21,1,0)
This is the radiopharmaceutical activity drawn to be administered to the
"^DD",70.2,70.21,4,21,2,0)
patient.  The unit of measure is mCi.
"^DD",70.2,70.21,4,"DT")
2970514
"^DD",70.2,70.21,7,0)
DOSE ADMINISTERED^NJ10,4X^^0;7^K:+X'=X!(X>99999.9999)!(X<.0001)!(X?.E1"."5N.N) X X:$G(X) ^DD(70.21,7,9.2)
"^DD",70.2,70.21,7,.1)
DOSE ADMINISTERED (in mCi)
"^DD",70.2,70.21,7,3)
Enter radiopharm dosage between .0001 and 99999.9999.  Unit of Measure is mCi.
"^DD",70.2,70.21,7,9.2)
K:$G(^RADPTN(+$G(DA(1)),"NUC",+$G(DA),0))&($P($G(^(0)),"^",4))&($P($G(^(0)),"^",4)<X) X D:'$D(X) EN^DDIOL("This value cannot be greater than ACTIVITY DRAWN.","","!!?10")
"^DD",70.2,70.21,7,10)

"^DD",70.2,70.21,7,21,0)
^^1^1^2970514^^^^
"^DD",70.2,70.21,7,21,1,0)
The radiopharmaceutical dosage actually administered to the patient.
"^DD",70.2,70.21,7,"DT")
2970514
"^DD",79.7,79.7,1,0)
TELERADIOLOGY APPLICATION^S^0:No;1:Yes;^0;2^Q
"^DD",79.7,79.7,1,3)
Type NO for local or YES for teleradiology (Default=NO).
"^DD",79.7,79.7,1,21,0)
^^11^11^3080610^
"^DD",79.7,79.7,1,21,1,0)
The teleradiology portion of the VistA Radiology/Nuclear Medicine 
"^DD",79.7,79.7,1,21,2,0)
application has different business rules from those of a 
"^DD",79.7,79.7,1,21,3,0)
non-teleradiology voice recognition interface.
"^DD",79.7,79.7,1,21,4,0)
 
"^DD",79.7,79.7,1,21,5,0)
The teleradiology business rules are to be applied if an inbound HL7
"^DD",79.7,79.7,1,21,6,0)
message the VistA Radiology/Nuclear Medicine application has a sending
"^DD",79.7,79.7,1,21,7,0)
application that:
"^DD",79.7,79.7,1,21,8,0)
 
"^DD",79.7,79.7,1,21,9,0)
Is a record in the RAD/NUC MED HL7 APPLICATION EXCEPTION (#79.7) file.
"^DD",79.7,79.7,1,21,10,0)
 
"^DD",79.7,79.7,1,21,11,0)
The TELERADIOLOGY APPLICATION data attribute value for that record is YES.
"^DD",79.7,79.7,1,"DT")
3080606
"^DD",79.7,79.7,1.3,0)
APPLICATION TYPE^RS^O:Other;S:Speech Recognition;P:PACS;^0;5^Q
"^DD",79.7,79.7,1.3,3)
Select the application type.
"^DD",79.7,79.7,1.3,21,0)
^.001^10^10^3080610^^^
"^DD",79.7,79.7,1.3,21,1,0)
This field indicates the type of application that
"^DD",79.7,79.7,1.3,21,2,0)
the record corresponds to.
"^DD",79.7,79.7,1.3,21,3,0)
 
"^DD",79.7,79.7,1.3,21,4,0)
Currently, only the 'S:Speech Recognition' value
"^DD",79.7,79.7,1.3,21,5,0)
is implemented. It is used to exclude speech
"^DD",79.7,79.7,1.3,21,6,0)
recognition/dictation workstations from HL7
"^DD",79.7,79.7,1.3,21,7,0)
transmissions when "outside" Radiology cases are
"^DD",79.7,79.7,1.3,21,8,0)
marked as examined/complete.  These cases are 
"^DD",79.7,79.7,1.3,21,9,0)
read/interpreted outside of VA and should not be
"^DD",79.7,79.7,1.3,21,10,0)
added to the work lists on dictation workstations.
"^DD",79.7,79.7,1.3,23,0)
^.001^4^4^3080610^^^^
"^DD",79.7,79.7,1.3,23,1,0)
Only unique single characters should be used as
"^DD",79.7,79.7,1.3,23,2,0)
internal values of this field.
"^DD",79.7,79.7,1.3,23,3,0)
 
"^DD",79.7,79.7,1.3,23,4,0)
See the RAMAGHL routine for details. 
"^DD",79.7,79.7,1.3,"DT")
3080102
"BLD",6800,6)
^93
**END**
**END**

Released PRS*4*119 SEQ #113
Extracted from mail message
**KIDS**:PRS*4.0*119^

**INSTALL NAME**
PRS*4.0*119
"BLD",7847,0)
PRS*4.0*119^PAID^0^3090630^y
"BLD",7847,1,0)
^^5^5^3090625^
"BLD",7847,1,1,0)
This patch addresses three issues:
"BLD",7847,1,2,0)
1. Saturday premium pay incorrect when holiday pay involved
"BLD",7847,1,3,0)
2. Part time employee pay incorrect when 2 holidays fall together
"BLD",7847,1,4,0)
3. Part time and nurse holiday pay incorrect when it 
"BLD",7847,1,5,0)
   includes a two-day tour.
"BLD",7847,4,0)
^9.64PA^^
"BLD",7847,6.3)
4
"BLD",7847,"ABPKG")
n
"BLD",7847,"KRN",0)
^9.67PA^779.2^20
"BLD",7847,"KRN",.4,0)
.4
"BLD",7847,"KRN",.4,"NM",0)
^9.68A^^
"BLD",7847,"KRN",.401,0)
.401
"BLD",7847,"KRN",.402,0)
.402
"BLD",7847,"KRN",.403,0)
.403
"BLD",7847,"KRN",.5,0)
.5
"BLD",7847,"KRN",.84,0)
.84
"BLD",7847,"KRN",3.6,0)
3.6
"BLD",7847,"KRN",3.8,0)
3.8
"BLD",7847,"KRN",9.2,0)
9.2
"BLD",7847,"KRN",9.8,0)
9.8
"BLD",7847,"KRN",9.8,"NM",0)
^9.68A^3^2
"BLD",7847,"KRN",9.8,"NM",2,0)
PRS8HRSV^^0^B44999289
"BLD",7847,"KRN",9.8,"NM",3,0)
PRS8WE2^^0^B21536251
"BLD",7847,"KRN",9.8,"NM","B","PRS8HRSV",2)

"BLD",7847,"KRN",9.8,"NM","B","PRS8WE2",3)

"BLD",7847,"KRN",19,0)
19
"BLD",7847,"KRN",19.1,0)
19.1
"BLD",7847,"KRN",101,0)
101
"BLD",7847,"KRN",409.61,0)
409.61
"BLD",7847,"KRN",771,0)
771
"BLD",7847,"KRN",779.2,0)
779.2
"BLD",7847,"KRN",870,0)
870
"BLD",7847,"KRN",8989.51,0)
8989.51
"BLD",7847,"KRN",8989.52,0)
8989.52
"BLD",7847,"KRN",8994,0)
8994
"BLD",7847,"KRN","B",.4,.4)

"BLD",7847,"KRN","B",.401,.401)

"BLD",7847,"KRN","B",.402,.402)

"BLD",7847,"KRN","B",.403,.403)

"BLD",7847,"KRN","B",.5,.5)

"BLD",7847,"KRN","B",.84,.84)

"BLD",7847,"KRN","B",3.6,3.6)

"BLD",7847,"KRN","B",3.8,3.8)

"BLD",7847,"KRN","B",9.2,9.2)

"BLD",7847,"KRN","B",9.8,9.8)

"BLD",7847,"KRN","B",19,19)

"BLD",7847,"KRN","B",19.1,19.1)

"BLD",7847,"KRN","B",101,101)

"BLD",7847,"KRN","B",409.61,409.61)

"BLD",7847,"KRN","B",771,771)

"BLD",7847,"KRN","B",779.2,779.2)

"BLD",7847,"KRN","B",870,870)

"BLD",7847,"KRN","B",8989.51,8989.51)

"BLD",7847,"KRN","B",8989.52,8989.52)

"BLD",7847,"KRN","B",8994,8994)

"BLD",7847,"QDEF")
^^^^^^^^^^YES
"BLD",7847,"QUES",0)
^9.62^^
"BLD",7847,"REQB",0)
^9.611^1^1
"BLD",7847,"REQB",1,0)
PRS*4.0*112^2
"BLD",7847,"REQB","B","PRS*4.0*112",1)

"MBREQ")
0
"PKG",408,-1)
1^1
"PKG",408,0)
PAID^PRS^PAID
"PKG",408,20,0)
^9.402P^^
"PKG",408,22,0)
^9.49I^1^1
"PKG",408,22,1,0)
4.0^2950912^2960130
"PKG",408,22,1,"PAH",1,0)
119^3090630
"PKG",408,22,1,"PAH",1,1,0)
^^5^5^3090630
"PKG",408,22,1,"PAH",1,1,1,0)
This patch addresses three issues:
"PKG",408,22,1,"PAH",1,1,2,0)
1. Saturday premium pay incorrect when holiday pay involved
"PKG",408,22,1,"PAH",1,1,3,0)
2. Part time employee pay incorrect when 2 holidays fall together
"PKG",408,22,1,"PAH",1,1,4,0)
3. Part time and nurse holiday pay incorrect when it 
"PKG",408,22,1,"PAH",1,1,5,0)
   includes a two-day tour.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
2
"RTN","PRS8HRSV")
0^2^B44999289^B43992593
"RTN","PRS8HRSV",1,0)
PRS8HRSV ;WCIOFO/JAH-HOLIDAY FLAG, TIME CHECKER, WK() SET; 04/05/07 ; 6/30/09 12:40pm
"RTN","PRS8HRSV",2,0)
 ;;4.0;PAID;**29,52,102,108,112,119**;Sep 21, 1995;Build 4
"RTN","PRS8HRSV",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRS8HRSV",4,0)
 ;  Set up variable for holiday worked or holiday excused
"RTN","PRS8HRSV",5,0)
 ;  Holiday worked coded 2 in DAY array
"RTN","PRS8HRSV",6,0)
 ;  Holiday excused coded 1 in DAY array
"RTN","PRS8HRSV",7,0)
 ;  A NON holiday is coded as all zero's in day array.
"RTN","PRS8HRSV",8,0)
 ;
"RTN","PRS8HRSV",9,0)
 ;  HOLIDAY WORKED
"RTN","PRS8HRSV",10,0)
 S HOLWKD=$E(DAY(DAY,"HOL"),M)=2
"RTN","PRS8HRSV",11,0)
 ;
"RTN","PRS8HRSV",12,0)
 ;  HOLIDAY EXCUSED
"RTN","PRS8HRSV",13,0)
 S HOLEX=$E(DAY(DAY,"HOL"),M)=1
"RTN","PRS8HRSV",14,0)
 ;
"RTN","PRS8HRSV",15,0)
 ;  HOLIDAY EXCUSED OR HOLIDAY WORKED
"RTN","PRS8HRSV",16,0)
 S HOLWKEX=$E(DAY(DAY,"HOL"),M)
"RTN","PRS8HRSV",17,0)
 Q
"RTN","PRS8HRSV",18,0)
 ;
"RTN","PRS8HRSV",19,0)
 ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"RTN","PRS8HRSV",20,0)
 ;
"RTN","PRS8HRSV",21,0)
CHK ; --- Check ENT for acceptable X value
"RTN","PRS8HRSV",22,0)
 ;    Pieces of Y have values in locations corresponding to premium
"RTN","PRS8HRSV",23,0)
 ;    times in value of X.  Values in Y string are locations
"RTN","PRS8HRSV",24,0)
 ;    in entitlement string where associated time in X is
"RTN","PRS8HRSV",25,0)
 ;    located.
"RTN","PRS8HRSV",26,0)
 ;   --------------------------------------------------
"RTN","PRS8HRSV",27,0)
 ;                 | Fixed      |  Premium
"RTN","PRS8HRSV",28,0)
 ;     Piece       | Position in|  Type Of Time
"RTN","PRS8HRSV",29,0)
 ;    Of Y-String  | Entitlement|
"RTN","PRS8HRSV",30,0)
 ;    & **WK()     | String     |
"RTN","PRS8HRSV",31,0)
 ;    -----------  | -----------|  --------------------
"RTN","PRS8HRSV",32,0)
 ;        7        |    28      |  comp earned
"RTN","PRS8HRSV",33,0)
 ;        9        |     2      |  unscheduled regular
"RTN","PRS8HRSV",34,0)
 ;       16        |    19      |  hrs excess 8-d
"RTN","PRS8HRSV",35,0)
 ;       17        |    20      |  hrs excess 8-d2
"RTN","PRS8HRSV",36,0)
 ;       18        |    21      |  hrs excess 8 d3
"RTN","PRS8HRSV",37,0)
 ;       20        |    12      |  OT total hrs d
"RTN","PRS8HRSV",38,0)
 ;       21        |    13      |  OT total hrs d2
"RTN","PRS8HRSV",39,0)
 ;       22        |    14      |  OT total hrs d3
"RTN","PRS8HRSV",40,0)
 ;   ---------------------------------------------------
"RTN","PRS8HRSV",41,0)
 ;
"RTN","PRS8HRSV",42,0)
 N ZZ,PRSHOLSET S Y="^^^^^^28^^2^^^^^^^19^20^21^^12^13^14^^^^3^4^^^^",PRSHOLSET=0
"RTN","PRS8HRSV",43,0)
 ;
"RTN","PRS8HRSV",44,0)
 ;   Set Y to a premium time in Y string, based on X 
"RTN","PRS8HRSV",45,0)
 ;   OR set Y to zero if X is a non premium time or parttime hours.
"RTN","PRS8HRSV",46,0)
 ;
"RTN","PRS8HRSV",47,0)
 I X'=32 S Y=+$P(Y,"^",X)
"RTN","PRS8HRSV",48,0)
 ;
"RTN","PRS8HRSV",49,0)
 ;   IF Y is premium time & not Unscheduled regular but employee not
"RTN","PRS8HRSV",50,0)
 ;   ENTITLED to that type of time THEN set X to zero.
"RTN","PRS8HRSV",51,0)
 ;
"RTN","PRS8HRSV",52,0)
 I +Y,Y'=2,'$E(ENT,+Y) S X=0
"RTN","PRS8HRSV",53,0)
 ;
"RTN","PRS8HRSV",54,0)
 ;   Overtime & Not entitled set X & Y to unscheduled regular
"RTN","PRS8HRSV",55,0)
 ;
"RTN","PRS8HRSV",56,0)
 I "^12^13^14^"[("^"_Y_"^"),'X S X=9,Y=2
"RTN","PRS8HRSV",57,0)
 ;
"RTN","PRS8HRSV",58,0)
 ;   IF regular unscheduled (Y=2) & not hourly for regular unscheduled
"RTN","PRS8HRSV",59,0)
 ;   THEN set X=0, unless Baylor then X gets regular unscheduled.
"RTN","PRS8HRSV",60,0)
 ;
"RTN","PRS8HRSV",61,0)
 I X,Y=2,$E(ENT,+Y)'="H" S X=$S(TYP'["B":0,1:9)
"RTN","PRS8HRSV",62,0)
 ;
"RTN","PRS8HRSV",63,0)
 ;   IF 36/40 AWS with WP determine eligibility for OT/CT
"RTN","PRS8HRSV",64,0)
 ;   Skip this check if time is HW (X=29) or OT on Hol (X=24)
"RTN","PRS8HRSV",65,0)
 ;   
"RTN","PRS8HRSV",66,0)
 I "KM"[$E(AC,1),$E(AC,2)=1,$P(C0,U,16)=72,X'=32,X'=29,X'=24 D
"RTN","PRS8HRSV",67,0)
 . I HT>32 S X=$S(VAL="O":TOUR+15,VAL="e":7,1:X)  Q
"RTN","PRS8HRSV",68,0)
 . I TH(W)>160 S X=$S(VAL="O":TOUR+19,VAL="e":7,1:X)  Q
"RTN","PRS8HRSV",69,0)
 . I HT'>32,TH(W)'>160 S X=9
"RTN","PRS8HRSV",70,0)
 ;
"RTN","PRS8HRSV",71,0)
 ;   If X is hours in excess of 8/day & > 40/week & type of time
"RTN","PRS8HRSV",72,0)
 ;   is compensatory time X = 0
"RTN","PRS8HRSV",73,0)
 ;
"RTN","PRS8HRSV",74,0)
 I "^16^17^18^"[("^"_X_"^"),TH(WK)>160,"Ee"[VAL S X=0
"RTN","PRS8HRSV",75,0)
 ;
"RTN","PRS8HRSV",76,0)
 ;   ** Significance of checking "X" now as opposed to Y.
"RTN","PRS8HRSV",77,0)
 ;
"RTN","PRS8HRSV",78,0)
 K Y Q:'X
"RTN","PRS8HRSV",79,0)
 ;
"RTN","PRS8HRSV",80,0)
 ;   (Hours excess 8/day, OT hours, Reg hours @ OT rate, Holiday hours, 
"RTN","PRS8HRSV",81,0)
 ;   part time hours) OR unscheduled regular & Nurse or Nurse Hybrid.
"RTN","PRS8HRSV",82,0)
 ; ### DO WE NEED TO ADD !HYBRID TO THIS CHECK ???
"RTN","PRS8HRSV",83,0)
 I "^16^17^18^20^21^22^29^30^31^32^"[("^"_X_"^")!(X=9&(TYP["N"!(TYP["H"))) D
"RTN","PRS8HRSV",84,0)
 .;
"RTN","PRS8HRSV",85,0)
 .;     If today holiday or holiday benefit day for employee
"RTN","PRS8HRSV",86,0)
 .;
"RTN","PRS8HRSV",87,0)
 .I $$HOLIDAY^PRS8UT(PY,DFN,DAY) D  Q:'X
"RTN","PRS8HRSV",88,0)
 ..;
"RTN","PRS8HRSV",89,0)
 ..;     If part time hours & entitled to (Holiday [Shift day, 2 or 3])
"RTN","PRS8HRSV",90,0)
 ..;
"RTN","PRS8HRSV",91,0)
 ..I X=32,$E(ENT,TOUR+21),HOLWKD S ZZ=X,X=$S($G(DAY(DAY,"OFF"))'=1:TOUR+28,1:9) D SET S X=$S(TYP'["I":ZZ,1:9) Q
"RTN","PRS8HRSV",92,0)
 ..;
"RTN","PRS8HRSV",93,0)
 ..;     IF not part time hours & intermittent employee & employee
"RTN","PRS8HRSV",94,0)
 ..;     entitled to holiday overtime & holiday worked THEN set TIME 
"RTN","PRS8HRSV",95,0)
 ..;     to OT on Holiday and credit that TIME in SET.
"RTN","PRS8HRSV",96,0)
 ..;
"RTN","PRS8HRSV",97,0)
 ..I X'=32,TYP["I",$E(ENT,25),HOLWKD S ZZ=X,X=24 D SET S X=0
"RTN","PRS8HRSV",98,0)
 ..;
"RTN","PRS8HRSV",99,0)
 ..;     IF conditions same as above except employee is NOT entitled
"RTN","PRS8HRSV",100,0)
 ..;     to Holiday OT THEN use X as coded to credit TIME.
"RTN","PRS8HRSV",101,0)
 ..;
"RTN","PRS8HRSV",102,0)
 ..I X'=32,TYP["I",'$E(ENT,25),HOLWKD S ZZ=0 D SET S X=9
"RTN","PRS8HRSV",103,0)
 ..;
"RTN","PRS8HRSV",104,0)
 ..;     IF not part time hours & emp. is entitled to Holiday OT But
"RTN","PRS8HRSV",105,0)
 ..;     they did not work the holiday THEN if emp. is part time or
"RTN","PRS8HRSV",106,0)
 ..;     intermittent set type of time to Regular hrs @ OT rate 3
"RTN","PRS8HRSV",107,0)
 ..;     otherwise OT @ Holiday rate & IF the original coded TIME
"RTN","PRS8HRSV",108,0)
 ..;     NOT = reg hrs @ OT rate(shift D,2,3) THEN credit TIME at 
"RTN","PRS8HRSV",109,0)
 ..;     OT on holiday or Reg hours @ OT rate.  THEN also credit time 
"RTN","PRS8HRSV",110,0)
 ..;     as unscheduled regular.  ** why code time twice?
"RTN","PRS8HRSV",111,0)
 ..;
"RTN","PRS8HRSV",112,0)
 ..I X'=32,$E(ENT,25),'HOLWKD D
"RTN","PRS8HRSV",113,0)
 ...S ZZ=X
"RTN","PRS8HRSV",114,0)
 ...; for 36/40 AWS w/ WP or NP report OT on Holiday as (OK/OS)
"RTN","PRS8HRSV",115,0)
 ...; For 9mo AWS w/ Recess report OT on Holiday as (OK/OS)
"RTN","PRS8HRSV",116,0)
 ...I +NAWS,VAL["O",$E(DAY(DAY,"HOL"),M)=0 S X=24 D SET S X=0 Q
"RTN","PRS8HRSV",117,0)
 ...;
"RTN","PRS8HRSV",118,0)
 ...S X=$S(TYP["P"!(TYP["I"):TOUR+28,1:24) D SET
"RTN","PRS8HRSV",119,0)
 ...I TYP["P"!(TYP["I") S X=9 D SET
"RTN","PRS8HRSV",120,0)
 ...S X=0
"RTN","PRS8HRSV",121,0)
 .;
"RTN","PRS8HRSV",122,0)
 .;     IF type of time is part time hours for intermittent employee
"RTN","PRS8HRSV",123,0)
 .;     THEN set TIME = unscheduled regular.
"RTN","PRS8HRSV",124,0)
 .;
"RTN","PRS8HRSV",125,0)
 .I X=32,TYP["I" S X=9
"RTN","PRS8HRSV",126,0)
 .;
"RTN","PRS8HRSV",127,0)
 .;    Part time hours or unscheduled regular.
"RTN","PRS8HRSV",128,0)
 .;
"RTN","PRS8HRSV",129,0)
 .Q:X=32!(X=9)
"RTN","PRS8HRSV",130,0)
 .;
"RTN","PRS8HRSV",131,0)
 .;     IF employee worked holiday THEN set TIME to zero & if original
"RTN","PRS8HRSV",132,0)
 .;     coded type of time is NOT regular hours @ OT rate DO
"RTN","PRS8HRSV",133,0)
 .;
"RTN","PRS8HRSV",134,0)
 .I HOLWKD S ZZ=X,X=0 D
"RTN","PRS8HRSV",135,0)
 ..;
"RTN","PRS8HRSV",136,0)
 ..;     IF entitled to Holiday pay for this shift THEN set TIME
"RTN","PRS8HRSV",137,0)
 ..;     to Holiday HRS (shift d, 2 or 3)
"RTN","PRS8HRSV",138,0)
 ..;
"RTN","PRS8HRSV",139,0)
 ..I $E(ENT,TOUR+21) S X=TOUR+28
"RTN","PRS8HRSV",140,0)
 ;
"RTN","PRS8HRSV",141,0)
 ;     IF employee is part time or a nurse or nurse hybrid 
"RTN","PRS8HRSV",142,0)
 ;     & they worked the holiday
"RTN","PRS8HRSV",143,0)
 ; ### SHOULD HYBRID BE ADDED TO THIS CHECK  HOW SHOULD THESE HYBRIDS
"RTN","PRS8HRSV",144,0)
 ; ### TREATED ON A HOLIDAY
"RTN","PRS8HRSV",145,0)
 I TYP["P"!(TYP["N")!(TYP["H"),HOLWKD,X=32 D
"RTN","PRS8HRSV",146,0)
 .;
"RTN","PRS8HRSV",147,0)
 .;     J gets start & stop times for employee's holiday tour.
"RTN","PRS8HRSV",148,0)
 .;     Start/stop times are represented w/ natural numbers
"RTN","PRS8HRSV",149,0)
 .;     from 0-96.  Each 15 minute segment of the 24 hour period
"RTN","PRS8HRSV",150,0)
 .;     beginning & ending at midnight can be represented w/
"RTN","PRS8HRSV",151,0)
 .;     a positive integer.  I.e.  1 = mid-12:15am,
"RTN","PRS8HRSV",152,0)
 .;     2 = 12:15-12:30a ... 96 = 11:45pm-mid.
"RTN","PRS8HRSV",153,0)
 .;
"RTN","PRS8HRSV",154,0)
 .;     Loop thru each set of start & stop times.  IF the single
"RTN","PRS8HRSV",155,0)
 .;     1/4 hr segment we're working w/ falls w/in any of the nurses 
"RTN","PRS8HRSV",156,0)
 .;     start & stop times THEN set TIME to Holiday Hours Day.
"RTN","PRS8HRSV",157,0)
 .;
"RTN","PRS8HRSV",158,0)
 .N I,J S J=$G(^TMP($J,"PRS8",DAY,"HWK")),ZZ=X
"RTN","PRS8HRSV",159,0)
 .;
"RTN","PRS8HRSV",160,0)
 .F I=1:2 Q:$P(J,U,I)=""  I M'<$P(J,U,I),M'>$P(J,U,I+1),'$G(PRSHOLSET) S X=29
"RTN","PRS8HRSV",161,0)
 .;
"RTN","PRS8HRSV",162,0)
 .;     Holiday hrs-Day. reset X if 2 day tour.  Otherwise X = 0.
"RTN","PRS8HRSV",163,0)
 .;
"RTN","PRS8HRSV",164,0)
 .I X=29 D SET S X=$S($P(^PRST(457.1,$P(DAY(DAY-1,0),U,2),0),U,5)="Y":ZZ,1:0)
"RTN","PRS8HRSV",165,0)
 ;
"RTN","PRS8HRSV",166,0)
 ;
"RTN","PRS8HRSV",167,0)
SET ; --- Set value into WK array
"RTN","PRS8HRSV",168,0)
 ;
"RTN","PRS8HRSV",169,0)
 ; Nurses on the 36/40 AWS are FT with Normal Hours of 72.  Nurses on the 9 month
"RTN","PRS8HRSV",170,0)
 ; AWS are PT with Normal Hours of 80.  Neither will not have Part Time Hours
"RTN","PRS8HRSV",171,0)
 ; counted in their 8B string.
"RTN","PRS8HRSV",172,0)
 ;
"RTN","PRS8HRSV",173,0)
 Q:$E(AC,2)=1&($P(C0,U,16)=72)&(X=32)  ; 36/40 AWS
"RTN","PRS8HRSV",174,0)
 Q:$E(AC,2)=2&(NH=320)&(X=32)  ; 9month AWS before any Recess processed
"RTN","PRS8HRSV",175,0)
 ;
"RTN","PRS8HRSV",176,0)
 ;     Full time employee & part time hours & normal hours WK1 + WK2
"RTN","PRS8HRSV",177,0)
 ;     = biweekly normal hours.
"RTN","PRS8HRSV",178,0)
 ;
"RTN","PRS8HRSV",179,0)
 I $P(C0,"^",10)=1,X=32,NH(1)+NH(2)=NH Q
"RTN","PRS8HRSV",180,0)
 ;
"RTN","PRS8HRSV",181,0)
 ;     For all types of TIME, increment the WK array.
"RTN","PRS8HRSV",182,0)
 ;
"RTN","PRS8HRSV",183,0)
 I +X D  Q
"RTN","PRS8HRSV",184,0)
 . S $P(WK(W),"^",+X)=$P(WK(W),"^",+X)+1
"RTN","PRS8HRSV",185,0)
 . I "^29^30^31^"[("^"_X_"^") S PRSHOLSET=1
"RTN","PRS8HRSV",186,0)
 ;
"RTN","PRS8HRSV",187,0)
 ;     When X is zero, reset to originally coded time.
"RTN","PRS8HRSV",188,0)
 ;
"RTN","PRS8HRSV",189,0)
 I 'X S X=ZZ Q
"RTN","PRS8HRSV",190,0)
 Q
"RTN","PRS8HRSV",191,0)
 ;
"RTN","PRS8HRSV",192,0)
 ;
"RTN","PRS8HRSV",193,0)
TH ; --- increment total hours & compensatory time hours.
"RTN","PRS8HRSV",194,0)
 ; Posted RG/OT/CT that is >8/day but < 40/week and < 80/pp will not be
"RTN","PRS8HRSV",195,0)
 ; counted in TH or TH(W)
"RTN","PRS8HRSV",196,0)
 ; 
"RTN","PRS8HRSV",197,0)
 ; I $S(VAL=4:1,"osEe"[VAL!(VAL="O"&('HOLWKD)):1,1:0) S TH=TH+1,TH(W)=TH(W)+1
"RTN","PRS8HRSV",198,0)
 ;
"RTN","PRS8HRSV",199,0)
 I $S(VAL=4:1,"osEe"[VAL!(VAL="O"&('HOLWKD)):1,1:0) D
"RTN","PRS8HRSV",200,0)
 . Q:(HT>32)&(TH(W)<160)&(NH<320)&($E(ENT,19)=1)
"RTN","PRS8HRSV",201,0)
 . Q:(HT>32)&(TH(W)<160)&(NH=320)&($E(ENT,19)=1)&($E(AC,2)=2)  ; 9month AWS
"RTN","PRS8HRSV",202,0)
 . S TH=TH+1,TH(W)=TH(W)+1
"RTN","PRS8HRSV",203,0)
 Q
"RTN","PRS8HRSV",204,0)
 ;
"RTN","PRS8HRSV",205,0)
 ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"RTN","PRS8HRSV",206,0)
 ;
"RTN","PRS8HRSV",207,0)
G8 ; --- Check for greater than 8 hours in day
"RTN","PRS8HRSV",208,0)
 ;
"RTN","PRS8HRSV",209,0)
 Q:HTP'>32!(VAL="E")
"RTN","PRS8HRSV",210,0)
 ;
"RTN","PRS8HRSV",211,0)
 ; Checks for Hours Excess 8/day (DA/DE)
"RTN","PRS8HRSV",212,0)
 S X=TOUR+15 D CHK^PRS8HRSV
"RTN","PRS8HRSV",213,0)
 I X,NH<320,CYA2806>0 S CYA2806=CYA2806-1
"RTN","PRS8HRSV",214,0)
 Q:X
"RTN","PRS8HRSV",215,0)
 ;
"RTN","PRS8HRSV",216,0)
 ; Checks for OT Total Hours (OA/OE)
"RTN","PRS8HRSV",217,0)
 I TYP["I"!(TYP["P"),TYP'["B",TH(W)>160 S X=TOUR+19 D CHK^PRS8HRSV
"RTN","PRS8HRSV",218,0)
 Q
"RTN","PRS8HRSV",219,0)
 ;
"RTN","PRS8HRSV",220,0)
 ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"RTN","PRS8WE2")
0^3^B21536251^B21508630
"RTN","PRS8WE2",1,0)
PRS8WE2 ;WCIOFO/MGD-DECOMPOSITION, WEEKEND PREMIUM PART 2 ;3/23/07
"RTN","PRS8WE2",2,0)
 ;;4.0;PAID;**90,92,96,112,119**;Sep 21, 1995;Build 4
"RTN","PRS8WE2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRS8WE2",4,0)
COUNT(DAYN,SEG) ; Increase count of premium for tour
"RTN","PRS8WE2",5,0)
 ; input
"RTN","PRS8WE2",6,0)
 ;   DAYN = day # (0-15) being counted
"RTN","PRS8WE2",7,0)
 ;   SEG  = segment # (1-96) in DAYN being counted
"RTN","PRS8WE2",8,0)
 ;   D(DAYN)
"RTN","PRS8WE2",9,0)
 ;   P(DAYN)
"RTN","PRS8WE2",10,0)
 ;   H(DAYN)
"RTN","PRS8WE2",11,0)
 ;   CNT(DAYN,shift) - optional
"RTN","PRS8WE2",12,0)
 ; output
"RTN","PRS8WE2",13,0)
 ;   CNT(DAYN,shift) = current count for tour being processed
"RTN","PRS8WE2",14,0)
 ;
"RTN","PRS8WE2",15,0)
 N DAT,FND,M1,NODE,NOTELG,POST,PREVDAY,RC,SC,SHIFT,TDAY,TOUR,TOURS,TS
"RTN","PRS8WE2",16,0)
 ; perform final checks
"RTN","PRS8WE2",17,0)
 I ("EetOscbT"[$E(D(DAYN),SEG)),$E(H(DAYN),SEG)'=2,$E(P(DAYN),SEG) Q
"RTN","PRS8WE2",18,0)
 I TYP["P","4"[$E(D(DAYN),SEG),$E(H(DAYN),SEG)'=2,$E(P(DAYN),SEG)=0 Q
"RTN","PRS8WE2",19,0)
 ;
"RTN","PRS8WE2",20,0)
 ; If Hybrid employee as defined by Public Law P.L. 107-135, check
"RTN","PRS8WE2",21,0)
 ; to see if the time was on a tour of duty or an exception.  Tours
"RTN","PRS8WE2",22,0)
 ; worked on Sat or Sun qualify for Premium time.  If the time was
"RTN","PRS8WE2",23,0)
 ; an exception, check the Remarks Code to see if the segment can be
"RTN","PRS8WE2",24,0)
 ; counted as Premium time.
"RTN","PRS8WE2",25,0)
 ;
"RTN","PRS8WE2",26,0)
 S (FND,NOTELG)=0
"RTN","PRS8WE2",27,0)
 ; Quit if Sunday and employee is not entitled to Sun Prem Pay
"RTN","PRS8WE2",28,0)
 Q:SATNOSUN&("^1^8^15^"[(U_DAY_U))&(TP="SUN")
"RTN","PRS8WE2",29,0)
 I HYBRID!(PMP'=""&("^S^T^U^V^"[(U_PMP_U))) D  Q:NOTELG
"RTN","PRS8WE2",30,0)
 . ; Check to see if the time was on a tour or an exception
"RTN","PRS8WE2",31,0)
 . N INC,END
"RTN","PRS8WE2",32,0)
 . F TOURS=1,4,2 D  Q:NOTELG!(FND)
"RTN","PRS8WE2",33,0)
 . . S TOUR=$G(^TMP($J,"PRS8",DAYN,TOURS))
"RTN","PRS8WE2",34,0)
 . . Q:TOUR=""
"RTN","PRS8WE2",35,0)
 . . S INC=$S(TOURS=2:4,1:3)
"RTN","PRS8WE2",36,0)
 . . S END=$S(TOURS=2:25,1:19)
"RTN","PRS8WE2",37,0)
 . . F POST=1:INC:END I $P(TOUR,"^",POST)'="" D  Q:NOTELG!(FND)
"RTN","PRS8WE2",38,0)
 . . . ; Quit if SEG is not within the start/stop time
"RTN","PRS8WE2",39,0)
 . . . Q:SEG<$P(TOUR,"^",POST)!(SEG>$P(TOUR,"^",POST+1))
"RTN","PRS8WE2",40,0)
 . . . S FND=1
"RTN","PRS8WE2",41,0)
 . . . Q:TOURS=1!(TOURS=4)  ; If on a Tour it counts as Premium
"RTN","PRS8WE2",42,0)
 . . . S RC=$P(TOUR,"^",POST+3)
"RTN","PRS8WE2",43,0)
 . . . ; Remarks Code must be OT/CT on Premium (#9), Tour Coverage (#12),
"RTN","PRS8WE2",44,0)
 . . . ; CB - Premium T&L (#14) or OT/CT With Premiums (#17) to qualify for Premium pay.
"RTN","PRS8WE2",45,0)
 . . . I "^9^12^14^17^"'[("^"_RC_"^") S NOTELG=1
"RTN","PRS8WE2",46,0)
 . Q:FND
"RTN","PRS8WE2",47,0)
 . ;
"RTN","PRS8WE2",48,0)
 . ; If we didn't find SEG in either of the two tours or the
"RTN","PRS8WE2",49,0)
 . ; exceptions then check to see if it crossed over into this day.
"RTN","PRS8WE2",50,0)
 . S PREVDAY=DAYN-1
"RTN","PRS8WE2",51,0)
 . N INC,END
"RTN","PRS8WE2",52,0)
 . F TOURS=1,4,2 D  Q:NOTELG!(FND)
"RTN","PRS8WE2",53,0)
 . . S TOUR=$G(^TMP($J,"PRS8",PREVDAY,TOURS))
"RTN","PRS8WE2",54,0)
 . . Q:TOUR=""
"RTN","PRS8WE2",55,0)
 . . S INC=$S(TOURS=2:4,1:3)
"RTN","PRS8WE2",56,0)
 . . S END=$S(TOURS=2:25,1:19)
"RTN","PRS8WE2",57,0)
 . . F POST=1:4:25 I $P(TOUR,"^",POST)'="" D  Q:NOTELG!(FND)
"RTN","PRS8WE2",58,0)
 . . . ; Quit if SEG is not within the start/stop time
"RTN","PRS8WE2",59,0)
 . . . Q:(SEG+96)<$P(TOUR,"^",POST)!((SEG+96)>$P(TOUR,"^",POST+1))
"RTN","PRS8WE2",60,0)
 . . . S FND=1
"RTN","PRS8WE2",61,0)
 . . . Q:TOURS=1!(TOURS=4)  ; If on a Tour it counts as Premium
"RTN","PRS8WE2",62,0)
 . . . S RC=$P(TOUR,"^",POST+3)
"RTN","PRS8WE2",63,0)
 . . . ; Remarks Code must be OT/CT on Premium (#9), Tour Coverage (#12),
"RTN","PRS8WE2",64,0)
 . . . ; CB - Premium T&L (#14) or OT/CT With Premiums to qualify for premium pay.
"RTN","PRS8WE2",65,0)
 . . . I "^9^12^14^17^"'[("^"_RC_"^") S NOTELG=1
"RTN","PRS8WE2",66,0)
 ;
"RTN","PRS8WE2",67,0)
 I $E(H(DAYN),SEG)=1!($E(P(DAYN),SEG)=5) Q
"RTN","PRS8WE2",68,0)
 ; determine special code
"RTN","PRS8WE2",69,0)
 S SHIFT=1
"RTN","PRS8WE2",70,0)
 I TP="SUN",TYP["W" D
"RTN","PRS8WE2",71,0)
 . ; Check to see if shift 2 or 3 is recorded for the segment worked
"RTN","PRS8WE2",72,0)
 . I "^2^3^"[(U_$E(D(DAYN),SEG)_U) S SHIFT=$E(D(DAYN),SEG) Q
"RTN","PRS8WE2",73,0)
 . S FND=0,SC=""
"RTN","PRS8WE2",74,0)
 . ; Check for Holiday Worked on a Holiday
"RTN","PRS8WE2",75,0)
 . I $E(D(DAYN),SEG)="O",$E(H(DAYN),SEG)=2 D
"RTN","PRS8WE2",76,0)
 . . F TDAY=DAYN,DAYN-1 D  Q:FND
"RTN","PRS8WE2",77,0)
 . . . S M1=$S(TDAY=DAYN:SEG,1:SEG+96)
"RTN","PRS8WE2",78,0)
 . . . ; loop through both tours in day
"RTN","PRS8WE2",79,0)
 . . . F NODE=1,4 S DAT=$G(^TMP($J,"PRS8",TDAY,NODE)) Q:DAT=""  D  Q:FND
"RTN","PRS8WE2",80,0)
 . . . . ; loop through tour segments in tour
"RTN","PRS8WE2",81,0)
 . . . . F TS=1:1:7 Q:$P(DAT,U,(TS-1)*3+1)=""  D  Q:FND
"RTN","PRS8WE2",82,0)
 . . . . . ; check if time is contained in tour segment
"RTN","PRS8WE2",83,0)
 . . . . . I M1'<$P(DAT,U,(TS-1)*3+1),M1'>$P(DAT,U,(TS-1)*3+2) D
"RTN","PRS8WE2",84,0)
 . . . . . . S SC=$P(DAT,U,(TS-1)*3+3),SHIFT=$S(SC=6:2,SC=7:3,1:1)
"RTN","PRS8WE2",85,0)
 . . . . . . I "^2^3^"[(U_SHIFT_U) S FND=1
"RTN","PRS8WE2",86,0)
 ;
"RTN","PRS8WE2",87,0)
 ;Set shift 2 for 36/40 AWS nurses with premium time outside tour
"RTN","PRS8WE2",88,0)
 ;for this time segment  i.e. overtime(O), comp time(C) or called in from
"RTN","PRS8WE2",89,0)
 ;on-call(c)
"RTN","PRS8WE2",90,0)
 I +NAWS=36,"cOE"[$E(D(DAYN),SEG) S SHIFT=2
"RTN","PRS8WE2",91,0)
 ; add to count
"RTN","PRS8WE2",92,0)
 S CNT(DAYN,SHIFT)=$G(CNT(DAYN,SHIFT))+1
"RTN","PRS8WE2",93,0)
 Q
"RTN","PRS8WE2",94,0)
 ;
"RTN","PRS8WE2",95,0)
SAVE ; Update WK array with final count for tour
"RTN","PRS8WE2",96,0)
 ; input
"RTN","PRS8WE2",97,0)
 ;   TP  - type of premium (SAT or SUN)
"RTN","PRS8WE2",98,0)
 ;   CNT(day,shift)=amount
"RTN","PRS8WE2",99,0)
 ;
"RTN","PRS8WE2",100,0)
 N AMT,DAYN,PC,SHIFT,WEEK
"RTN","PRS8WE2",101,0)
 S DAYN=0 F  S DAYN=$O(CNT(DAYN)) Q:DAYN=""  D
"RTN","PRS8WE2",102,0)
 . Q:DAYN<1!(DAYN>14)
"RTN","PRS8WE2",103,0)
 . S WEEK=$S(DAYN<8:1,1:2)
"RTN","PRS8WE2",104,0)
 . S SHIFT="" F  S SHIFT=$O(CNT(DAYN,SHIFT)) Q:SHIFT=""  D
"RTN","PRS8WE2",105,0)
 . . S AMT=CNT(DAYN,SHIFT)
"RTN","PRS8WE2",106,0)
 . . S PC=$S(TP="SAT":0,1:SHIFT)+12
"RTN","PRS8WE2",107,0)
 . . ;Shift 2 used for 36/40 nurses premium time within tour using the 2080 divisor (40*52).
"RTN","PRS8WE2",108,0)
 . . ;Saturday Premium-AWS (SR/SS) and Sunday Premium-AWS (SD/SH)
"RTN","PRS8WE2",109,0)
 . . ;Paid at the AAC with the 1872 divisor for the hourly rate (36*52)
"RTN","PRS8WE2",110,0)
 . . ;for time outside the tour.
"RTN","PRS8WE2",111,0)
 . . S:+NAWS=36 PC=$S(SHIFT=2:$S(TP="SAT":12,1:13),TP="SAT":49,1:50)
"RTN","PRS8WE2",112,0)
 . . S $P(WK(WEEK),U,PC)=$P(WK(WEEK),U,PC)+AMT
"RTN","PRS8WE2",113,0)
 Q
"RTN","PRS8WE2",114,0)
 ;
"RTN","PRS8WE2",115,0)
 ;PRS8WE
"VER")
8.0^22.0
"BLD",7847,6)
^113
**END**
**END**

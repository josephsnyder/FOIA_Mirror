Released PRS*4*121 SEQ #112
Extracted from mail message
**KIDS**:PRS*4.0*121^

**INSTALL NAME**
PRS*4.0*121
"BLD",8056,0)
PRS*4.0*121^PAID^0^3090514^y
"BLD",8056,1,0)
^^5^5^3090514^
"BLD",8056,1,1,0)
This patch addresses 3 issues:
"BLD",8056,1,2,0)
1. Error <UNDEFINED>FX1+8^PRSATE in 'Enter/Edit Emp Tour of Duty'
"BLD",8056,1,3,0)
2. Overlapping tour error appears in 'Enter/Edit Emp Tour of Duty' 
"BLD",8056,1,4,0)
   when the tours do not overlap
"BLD",8056,1,5,0)
3. Incorrect 8b edit error
"BLD",8056,4,0)
^9.64PA^^
"BLD",8056,6.3)
2
"BLD",8056,"ABPKG")
n
"BLD",8056,"KRN",0)
^9.67PA^779.2^20
"BLD",8056,"KRN",.4,0)
.4
"BLD",8056,"KRN",.401,0)
.401
"BLD",8056,"KRN",.402,0)
.402
"BLD",8056,"KRN",.403,0)
.403
"BLD",8056,"KRN",.5,0)
.5
"BLD",8056,"KRN",.84,0)
.84
"BLD",8056,"KRN",3.6,0)
3.6
"BLD",8056,"KRN",3.8,0)
3.8
"BLD",8056,"KRN",9.2,0)
9.2
"BLD",8056,"KRN",9.8,0)
9.8
"BLD",8056,"KRN",9.8,"NM",0)
^9.68A^3^3
"BLD",8056,"KRN",9.8,"NM",1,0)
PRSATE^^0^B81331928
"BLD",8056,"KRN",9.8,"NM",2,0)
PRSATE5^^0^B26175041
"BLD",8056,"KRN",9.8,"NM",3,0)
PRSACED1^^0^B9095818
"BLD",8056,"KRN",9.8,"NM","B","PRSACED1",3)

"BLD",8056,"KRN",9.8,"NM","B","PRSATE",1)

"BLD",8056,"KRN",9.8,"NM","B","PRSATE5",2)

"BLD",8056,"KRN",19,0)
19
"BLD",8056,"KRN",19.1,0)
19.1
"BLD",8056,"KRN",101,0)
101
"BLD",8056,"KRN",409.61,0)
409.61
"BLD",8056,"KRN",771,0)
771
"BLD",8056,"KRN",779.2,0)
779.2
"BLD",8056,"KRN",870,0)
870
"BLD",8056,"KRN",8989.51,0)
8989.51
"BLD",8056,"KRN",8989.52,0)
8989.52
"BLD",8056,"KRN",8994,0)
8994
"BLD",8056,"KRN","B",.4,.4)

"BLD",8056,"KRN","B",.401,.401)

"BLD",8056,"KRN","B",.402,.402)

"BLD",8056,"KRN","B",.403,.403)

"BLD",8056,"KRN","B",.5,.5)

"BLD",8056,"KRN","B",.84,.84)

"BLD",8056,"KRN","B",3.6,3.6)

"BLD",8056,"KRN","B",3.8,3.8)

"BLD",8056,"KRN","B",9.2,9.2)

"BLD",8056,"KRN","B",9.8,9.8)

"BLD",8056,"KRN","B",19,19)

"BLD",8056,"KRN","B",19.1,19.1)

"BLD",8056,"KRN","B",101,101)

"BLD",8056,"KRN","B",409.61,409.61)

"BLD",8056,"KRN","B",771,771)

"BLD",8056,"KRN","B",779.2,779.2)

"BLD",8056,"KRN","B",870,870)

"BLD",8056,"KRN","B",8989.51,8989.51)

"BLD",8056,"KRN","B",8989.52,8989.52)

"BLD",8056,"KRN","B",8994,8994)

"BLD",8056,"QDEF")
^^^^^^^^^^YES
"BLD",8056,"QUES",0)
^9.62^^
"BLD",8056,"REQB",0)
^9.611^2^2
"BLD",8056,"REQB",1,0)
PRS*4.0*117^2
"BLD",8056,"REQB",2,0)
PRS*4.0*75^2
"BLD",8056,"REQB","B","PRS*4.0*117",1)

"BLD",8056,"REQB","B","PRS*4.0*75",2)

"MBREQ")
0
"PKG",408,-1)
1^1
"PKG",408,0)
PAID^PRS^PAID
"PKG",408,20,0)
^9.402P^^
"PKG",408,22,0)
^9.49I^1^1
"PKG",408,22,1,0)
4.0^2950912^2960130
"PKG",408,22,1,"PAH",1,0)
121^3090514
"PKG",408,22,1,"PAH",1,1,0)
^^5^5^3090514
"PKG",408,22,1,"PAH",1,1,1,0)
This patch addresses 3 issues:
"PKG",408,22,1,"PAH",1,1,2,0)
1. Error <UNDEFINED>FX1+8^PRSATE in 'Enter/Edit Emp Tour of Duty'
"PKG",408,22,1,"PAH",1,1,3,0)
2. Overlapping tour error appears in 'Enter/Edit Emp Tour of Duty' 
"PKG",408,22,1,"PAH",1,1,4,0)
   when the tours do not overlap
"PKG",408,22,1,"PAH",1,1,5,0)
3. Incorrect 8b edit error
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
3
"RTN","PRSACED1")
0^3^B9095818^B9148705
"RTN","PRSACED1",1,0)
PRSACED1 ;HISC/REL/FPT,WCIOFO/JAH-T&A Edits (cont) ;02/16/02
"RTN","PRSACED1",2,0)
 ;;4.0;PAID;**6,24,45,75,121**;Sep 21, 1995;Build 2
"RTN","PRSACED1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSACED1",4,0)
 D STUB^PRSACED6
"RTN","PRSACED1",5,0)
TK ; entry point for time keepers
"RTN","PRSACED1",6,0)
 S FLSA=$P(^PRSPC(DFN,0),U,12),PB=$P(^PRSPC(DFN,0),U,20)
"RTN","PRSACED1",7,0)
 S PMP=$G(^PRSPC(DFN,"PREMIUM")),PMP=$P(PMP,U,6)
"RTN","PRSACED1",8,0)
 S CNT=0
"RTN","PRSACED1",9,0)
 I $E(NOR,1)'?1N S NOR=$F("+ABCDEF",$E(NOR,1))+8_$E(NOR,2)
"RTN","PRSACED1",10,0)
 S CWK=$P($G(^PRST(458,PPI,"E",DFN,0)),"^",6)
"RTN","PRSACED1",11,0)
 S HMX=$S(CWK'="C":720,1:800)
"RTN","PRSACED1",12,0)
 ;
"RTN","PRSACED1",13,0)
 ; initialize time storage array
"RTN","PRSACED1",14,0)
 ;
"RTN","PRSACED1",15,0)
 S (E(1),E(2),E(14),E(15),E(16),E(17))=0
"RTN","PRSACED1",16,0)
 F K=13:1:23,26:1:28,48:1:60 S X=$P(C0,"^",K) I X'="" S LAB=$P(T0," ",K-12) D @LAB
"RTN","PRSACED1",17,0)
 F K=1:1:5,8:1:10 S X=$P(C1,"^",K) I X'="" S LAB=$P(T1," ",K) D @LAB
"RTN","PRSACED1",18,0)
 I E(1)>60!(E(2)>60) S ERR=34 D ERR^PRSACED
"RTN","PRSACED1",19,0)
 G ^PRSACED2
"RTN","PRSACED1",20,0)
RT ;
"RTN","PRSACED1",21,0)
RL ;
"RTN","PRSACED1",22,0)
AN ;
"RTN","PRSACED1",23,0)
AL I X>HMX S ERR=1 D ERR^PRSACED
"RTN","PRSACED1",24,0)
 I LVG=0 S ERR=10 D ERR^PRSACED
"RTN","PRSACED1",25,0)
 Q
"RTN","PRSACED1",26,0)
FA ;
"RTN","PRSACED1",27,0)
FB ;
"RTN","PRSACED1",28,0)
FC ;
"RTN","PRSACED1",29,0)
FD ;
"RTN","PRSACED1",30,0)
SK ;
"RTN","PRSACED1",31,0)
SL I X>HMX S ERR=2 D ERR^PRSACED
"RTN","PRSACED1",32,0)
 I LVG=0 S ERR=11 D ERR^PRSACED
"RTN","PRSACED1",33,0)
 Q
"RTN","PRSACED1",34,0)
NO ;
"RTN","PRSACED1",35,0)
NP ;
"RTN","PRSACED1",36,0)
WD ;
"RTN","PRSACED1",37,0)
WP I X>HMX S ERR=3 D ERR^PRSACED
"RTN","PRSACED1",38,0)
 I "45"[LVG,$E(X,3) S ERR=12 D ERR^PRSACED
"RTN","PRSACED1",39,0)
 I DUT=3 S ERR=13 D ERR^PRSACED
"RTN","PRSACED1",40,0)
 ;
"RTN","PRSACED1",41,0)
 ;Store NO, NP, WD and WP in E(14), E(15), E(16), and E(17)
"RTN","PRSACED1",42,0)
 S X1=$S(LAB="NO":14,LAB="NP":15,LAB="WD":16,1:17)
"RTN","PRSACED1",43,0)
 S E(X1)=E(X1)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED1",44,0)
 Q
"RTN","PRSACED1",45,0)
AD ;
"RTN","PRSACED1",46,0)
AF ;
"RTN","PRSACED1",47,0)
AU ;
"RTN","PRSACED1",48,0)
AB I X>HMX S ERR=4 D ERR^PRSACED
"RTN","PRSACED1",49,0)
 Q
"RTN","PRSACED1",50,0)
CE ;
"RTN","PRSACED1",51,0)
CT ;
"RTN","PRSACED1",52,0)
CU ;
"RTN","PRSACED1",53,0)
CO I X>HMX S ERR=5 D ERR^PRSACED
"RTN","PRSACED1",54,0)
 Q:CWK="F"
"RTN","PRSACED1",55,0)
 I "ABCKMNU0123456789"'[PAY S ERR=14 D ERR^PRSACED
"RTN","PRSACED1",56,0)
 Q
"RTN","PRSACED1",57,0)
FE I X<1!(X>999999) S ERR=172 D ERR^PRSACED
"RTN","PRSACED1",58,0)
 I PAY'="F" S ERR=172 D ERR^PRSACED
"RTN","PRSACED1",59,0)
 Q
"RTN","PRSACED1",60,0)
UN ;
"RTN","PRSACED1",61,0)
US I X>$S(PAY="L"&(DUT=3):500,1:400) S ERR=15 D ERR^PRSACED
"RTN","PRSACED1",62,0)
 I DUT=2,$P(C1,"^",31)'="" S ERR=16 D ERR^PRSACED
"RTN","PRSACED1",63,0)
 I DUT=3,$P(C1,"^",31)="" S ERR=17 D ERR^PRSACED
"RTN","PRSACED1",64,0)
 I PAY="T",DUT=3,NOR="00",X>70!($P(C1,"^",31)>14) S ERR=19 D ERR^PRSACED
"RTN","PRSACED1",65,0)
 I DUT=1,"ABCGKMNRUY0123456789"'[PAY!($P(C1,"^",31))!(X>200) S ERR=20 D ERR^PRSACED
"RTN","PRSACED1",66,0)
 Q
"RTN","PRSACED1",67,0)
NA ;
"RTN","PRSACED1",68,0)
NR Q:"ABCGKMNU0123456789"[PAY  S ERR=21 D ERR^PRSACED Q
"RTN","PRSACED1",69,0)
NB ;
"RTN","PRSACED1",70,0)
NS Q:"0123456789AGKMU"[PAY  S ERR=22 D ERR^PRSACED Q
"RTN","PRSACED1",71,0)
SA ;
"RTN","PRSACED1",72,0)
SE S MX=$S("ABCKMN"[PAY:400,1:320) I X>MX S ERR=25 D ERR^PRSACED
"RTN","PRSACED1",73,0)
 I "ABCGKMNU0123456789"'[PAY S ERR=26 D ERR^PRSACED
"RTN","PRSACED1",74,0)
 ;S X1=$S("AM"[PAY:"123",1:1) I X1'[DUT S ERR=27 D ERR^PRSACED; PRS*4*121
"RTN","PRSACED1",75,0)
 S X1=LAB="SE"+1,E(X1)=E(X1)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED1",76,0)
 Q
"RTN","PRSACED1",77,0)
SB ;
"RTN","PRSACED1",78,0)
SF I X>240 S ERR=28 D ERR^PRSACED
"RTN","PRSACED1",79,0)
 I "BGU0123456789"'[PAY S ERR=29 D ERR^PRSACED
"RTN","PRSACED1",80,0)
 I DUT'=1 S ERR=30 D ERR^PRSACED
"RTN","PRSACED1",81,0)
 S X1=LAB="SF"+1,E(X1)=E(X1)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED1",82,0)
 Q
"RTN","PRSACED1",83,0)
SC ;
"RTN","PRSACED1",84,0)
SG I "0123456789GU"'[PAY S ERR=32 D ERR^PRSACED
"RTN","PRSACED1",85,0)
 I DUT'=1 S ERR=33 D ERR^PRSACED
"RTN","PRSACED1",86,0)
 I X>240 S ERR=31 D ERR^PRSACED
"RTN","PRSACED1",87,0)
 S X1=LAB="SG"+1,E(X1)=E(X1)+$E(X,1,2)+($E(X,3)*.25)
"RTN","PRSACED1",88,0)
 Q
"RTN","PRSATE")
0^1^B81331928^B81195394
"RTN","PRSATE",1,0)
PRSATE ;WCIOFO/JAH/PLT - Enter/Edit Employee (emp) Tour of Duty (ToD) ;03/15/2005
"RTN","PRSATE",2,0)
 ;;4.0;PAID;**8,11,27,45,55,93,112,117,121**;Sep 21, 1995;Build 2
"RTN","PRSATE",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSATE",4,0)
 ;
"RTN","PRSATE",5,0)
 ;ppi=ien of 450, ppi=ien of 458, ppe=pp (yy-mm)
"RTN","PRSATE",6,0)
 ;tli = ien of t&l, tlu=t&l # (nnn), prstlv=2 for timekeeper user
"RTN","PRSATE",7,0)
 N PPI,PPE,PRSTLV,TLI,TLE,DFN
"RTN","PRSATE",8,0)
 S PRSTLV=2 D ^PRSAUTL Q:TLI<1
"RTN","PRSATE",9,0)
 F  S DFN=$$GETEMP^PRSATE6(TLE) Q:DFN<1  D
"RTN","PRSATE",10,0)
 . S PPI=$P(^PRST(458,0),"^",3),PPE=$P($G(^PRST(458,PPI,0)),"^",1)
"RTN","PRSATE",11,0)
 . D TOUREDIT(DFN,PPI,PPE,TLI,TLE,PRSTLV)
"RTN","PRSATE",12,0)
 Q
"RTN","PRSATE",13,0)
 ;
"RTN","PRSATE",14,0)
TOUREDIT(DFN,PPI,PPE,TLI,TLE,PRSTLV) ;
"RTN","PRSATE",15,0)
 N C0,NH,FLX,PMP,PP,PB,ENT,SRT,WTL,TYP,Z,TD,ERROR,NOERROR,PRSDAY,PRSETD
"RTN","PRSATE",16,0)
 ;
"RTN","PRSATE",17,0)
 ;   Entitlement lookup leaks many variables.  Following R used in 
"RTN","PRSATE",18,0)
 ;   this routine but may be looked up again despite the fact they R 
"RTN","PRSATE",19,0)
 ;   leaked by ^PRSAENT.  See PRSAENT for further doc.
"RTN","PRSATE",20,0)
 ;
"RTN","PRSATE",21,0)
 ;    C0=emps 0 node in file 450    NH= emps 8B normal hrs
"RTN","PRSATE",22,0)
 ;    FLX= compressed/flextime code (0=none,C=compressed,F=flextime)
"RTN","PRSATE",23,0)
 ;    PMP= premium pay indicator 
"RTN","PRSATE",24,0)
 ;      ( D=entitled Sun., F=entitled Sat./Sun.,
"RTN","PRSATE",25,0)
 ;        E=entitled variable Sat./Sun. premium pay,
"RTN","PRSATE",26,0)
 ;        G=entitled variable Sun. prem pay, X=title 5 emps
"RTN","PRSATE",27,0)
 ;        R,C,O=different types of firefighters)
"RTN","PRSATE",28,0)
 ;  * PP= emps pay plan
"RTN","PRSATE",29,0)
 ;    DB = pay basis-1:full,2:part,3:intermit
"RTN","PRSATE",30,0)
 ;    ENT= 39 char entitlement string
"RTN","PRSATE",31,0)
 ;  Entitlement lookup.
"RTN","PRSATE",32,0)
 D ^PRSAENT I ENT="" D ERROR(1) S OUT=1 Q
"RTN","PRSATE",33,0)
 ;
"RTN","PRSATE",34,0)
 ; Display header/Ask pp (NOL^PRSATE2 returns SRT = Current, Next, Last)
"RTN","PRSATE",35,0)
 D NOW^%DTC S NOW=% K %
"RTN","PRSATE",36,0)
 W:$E(IOST,1,2)="C-" @IOF
"RTN","PRSATE",37,0)
 W !?26,"VA TIME & ATTENDANCE SYSTEM"
"RTN","PRSATE",38,0)
 W !?29,"EMPLOYEE TOUR OF DUTY"
"RTN","PRSATE",39,0)
 D HDR^PRSADP1,NOL^PRSATE2
"RTN","PRSATE",40,0)
 Q:SRT="^"
"RTN","PRSATE",41,0)
 I SRT="L" S PPI=PPI-1,PPE=$P($G(^PRST(458,PPI,0)),"^",1)
"RTN","PRSATE",42,0)
 ;
"RTN","PRSATE",43,0)
 ;  Get emp's flexitime code
"RTN","PRSATE",44,0)
 S FLX=$$FLEXIND^PRSATE6(PPI,DFN,SRT)
"RTN","PRSATE",45,0)
 ;  Is emp entitled reg. shed. hrs.?
"RTN","PRSATE",46,0)
 I $E(ENT,1)="0" D
"RTN","PRSATE",47,0)
 .  S Z=$E(ENT,2),TD=$S(Z="D":3,1:4) D NONE
"RTN","PRSATE",48,0)
 E  D
"RTN","PRSATE",49,0)
 .;
"RTN","PRSATE",50,0)
 .;    initialize t&l for this ToD
"RTN","PRSATE",51,0)
 .;
"RTN","PRSATE",52,0)
 .  S WTL=TLI
"RTN","PRSATE",53,0)
 .  I "NL"[SRT D
"RTN","PRSATE",54,0)
 ..    S TYP=0
"RTN","PRSATE",55,0)
 .  E  D
"RTN","PRSATE",56,0)
 ..    S TYP=$$ISTEMPTR()
"RTN","PRSATE",57,0)
 ..;
"RTN","PRSATE",58,0)
 ..;  For temp ToDs--ask user for T&L ToD will be worked
"RTN","PRSATE",59,0)
 ..;  Quit if we don't get a valid T&L unit.
"RTN","PRSATE",60,0)
 ..;
"RTN","PRSATE",61,0)
 ..    I TYP S WTL=$$ASKTLWRK^PRSATE6(TLE)
"RTN","PRSATE",62,0)
 .;
"RTN","PRSATE",63,0)
 .;  Save current ToD in case user aborts with an unacceptable ToD.
"RTN","PRSATE",64,0)
 .;
"RTN","PRSATE",65,0)
 .   D SAVETOUR^PRSATE6(PPI,DFN)
"RTN","PRSATE",66,0)
 .;
"RTN","PRSATE",67,0)
 .  I WTL'<1,TYP'["^" D 
"RTN","PRSATE",68,0)
 ..    D A1
"RTN","PRSATE",69,0)
 ..;
"RTN","PRSATE",70,0)
 ..; verify firefighter ToD after compressed ind. edit.  Don't accept 
"RTN","PRSATE",71,0)
 ..; ToD until its within guidlines. If TK force exits, restore old ToD.
"RTN","PRSATE",72,0)
 ..;
"RTN","PRSATE",73,0)
 ..  S NOERROR=0
"RTN","PRSATE",74,0)
 ..  F  D  Q:NOERROR
"RTN","PRSATE",75,0)
 ...    N ERROR D FFTOUR^PRSATE6(PPI,DFN,SRT,.ERROR)
"RTN","PRSATE",76,0)
 ...    I $$ISERRORS^PRSATE6(.ERROR) D
"RTN","PRSATE",77,0)
 ....      I $$ASKTOFIX^PRSATE6() D
"RTN","PRSATE",78,0)
 .....        D A1
"RTN","PRSATE",79,0)
 ....      E  D
"RTN","PRSATE",80,0)
 .....        D RESTORE^PRSATE6(PPI,DFN) S NOERROR=1
"RTN","PRSATE",81,0)
 ...    E  D
"RTN","PRSATE",82,0)
 ....      S NOERROR=1
"RTN","PRSATE",83,0)
 K NOW Q
"RTN","PRSATE",84,0)
 ;
"RTN","PRSATE",85,0)
ISTEMPTR() ; IS TEMPORARY ToD ?
"RTN","PRSATE",86,0)
 ; Ask user if ToD is temp or perm & convert TYP to true false flag
"RTN","PRSATE",87,0)
 ;    Permanent set TYP=0,  Temporary set TYP=true (1)
"RTN","PRSATE",88,0)
 ; 
"RTN","PRSATE",89,0)
 S TYP=$$ASKTEMP^PRSATE6() I TYP'["^" S TYP=$E(TYP,1)="T",WTL=TLI
"RTN","PRSATE",90,0)
 Q TYP
"RTN","PRSATE",91,0)
 ;
"RTN","PRSATE",92,0)
A1 ; Set up for emps ToD look up. Screen allows Daily ToDs & days off 
"RTN","PRSATE",93,0)
 ; for daily emps.  Everyone else gets days off & all other ToDs.
"RTN","PRSATE",94,0)
 ; Screen further ensures ToD is available either to all t&ls 
"RTN","PRSATE",95,0)
 ; or to t&l that this emp is working in.
"RTN","PRSATE",96,0)
 ;
"RTN","PRSATE",97,0)
 N DIC,X
"RTN","PRSATE",98,0)
 S DIC="^PRST(457.1,",DIC(0)="AEQMN"
"RTN","PRSATE",99,0)
 S DIC("S")="I "_$S($E(ENT,1)="D":"Y<3",1:"Y>5!(Y=1)")_",$P(^PRST(457.1,+Y,0),U,4)!($D(^PRST(457.1,+Y,""T"",""B"",WTL)))"
"RTN","PRSATE",100,0)
 ;
"RTN","PRSATE",101,0)
 ; Setup a fixed or varying ToD.  Compressed ToDs must be varying;
"RTN","PRSATE",102,0)
 ; ask TK about all others.
"RTN","PRSATE",103,0)
 ;
"RTN","PRSATE",104,0)
 S DB=$P(C0,U,10) I FLX="C"!("KM"[PP&(DB=1)&(NH=72)) D
"RTN","PRSATE",105,0)
 .   D VAR
"RTN","PRSATE",106,0)
 E  D
"RTN","PRSATE",107,0)
 .  S X=$$ASKFIXED()
"RTN","PRSATE",108,0)
 .  Q:X="^"
"RTN","PRSATE",109,0)
 .  I X="N" D
"RTN","PRSATE",110,0)
 ..    D VAR
"RTN","PRSATE",111,0)
 .  E  D FX
"RTN","PRSATE",112,0)
 K DB Q
"RTN","PRSATE",113,0)
 ;
"RTN","PRSATE",114,0)
FX ; Fixed ToD
"RTN","PRSATE",115,0)
FX1 S DIC("A")="Select TOUR OF DUTY: "
"RTN","PRSATE",116,0)
 W ! D ^DIC
"RTN","PRSATE",117,0)
 Q:Y'>0
"RTN","PRSATE",118,0)
 S TD=+Y
"RTN","PRSATE",119,0)
 ;check overlap
"RTN","PRSATE",120,0)
 K PRSDAY,PRSETD
"RTN","PRSATE",121,0)
 F DAY=1:1:14 S $P(PRSETD,U,DAY)=$S(DAY#7<2:1,1:TD) D
"RTN","PRSATE",122,0)
 . N TOLD
"RTN","PRSATE",123,0)
 . S PRSDAY(DAY)=$P($G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),U,1,4),$P(TOLD,U,DAY)=$S(SRT="N"&($P($G(^(0)),U,3)):$P(^(0),U,4),1:$P($G(^(0)),U,2)) S:DAY#7>1 $P(PRSDAY(DAY),U,6)=$P($G(^(0)),U,13),$P(PRSDAY(DAY),U,7,999)=$G(^(4))
"RTN","PRSATE",124,0)
 . D PRSDAY^PRSATE0
"RTN","PRSATE",125,0)
 . QUIT
"RTN","PRSATE",126,0)
 D ENT^PRSATE5 I $G(PRSERR) K PRSERR G FX1
"RTN","PRSATE",127,0)
 S Y=$G(^PRST(457.1,TD,1)),TDH=$P(^(0),"^",6),HRS=TDH*10
"RTN","PRSATE",128,0)
 S (ZENT,STR)=""
"RTN","PRSATE",129,0)
 D OT^PRSATP,VS^PRSATE0
"RTN","PRSATE",130,0)
 I STR'="" W *7,!!,STR G FX
"RTN","PRSATE",131,0)
 I '$D(^PRST(458,PPI,"E",DFN,"D",0)) S ^(0)="^458.02^14^14"
"RTN","PRSATE",132,0)
 I SRT="N" D
"RTN","PRSATE",133,0)
 .  D F1
"RTN","PRSATE",134,0)
 E  D
"RTN","PRSATE",135,0)
 .  F DAY=2:1:6,9:1:13 D SET
"RTN","PRSATE",136,0)
 .  S TD=1,(Y,TDH)="" F DAY=1,7,8,14 D SET
"RTN","PRSATE",137,0)
 .  W "  ... done" D:HRS'=NH ERROR(2,NH,HRS)
"RTN","PRSATE",138,0)
 .  D T2
"RTN","PRSATE",139,0)
 . QUIT
"RTN","PRSATE",140,0)
 D HOL,RS K HRS,STR
"RTN","PRSATE",141,0)
 Q
"RTN","PRSATE",142,0)
 ;
"RTN","PRSATE",143,0)
 ;
"RTN","PRSATE",144,0)
F1 F DAY=2:1:6,9:1:13 D NX
"RTN","PRSATE",145,0)
 S TD=1 F DAY=1,7,8,14 D NX
"RTN","PRSATE",146,0)
 W "  ... done"
"RTN","PRSATE",147,0)
 D:HRS'=NH ERROR(2,NH,HRS)
"RTN","PRSATE",148,0)
 Q
"RTN","PRSATE",149,0)
 ;
"RTN","PRSATE",150,0)
VAR ; Variable ToD
"RTN","PRSATE",151,0)
 D ^PRSATE0
"RTN","PRSATE",152,0)
 I SRT'="N" D T2
"RTN","PRSATE",153,0)
 D HOL,RS
"RTN","PRSATE",154,0)
 Q
"RTN","PRSATE",155,0)
 ;
"RTN","PRSATE",156,0)
NONE ; No ToD
"RTN","PRSATE",157,0)
 N TYP2,UPDT,Y,TDH
"RTN","PRSATE",158,0)
 W !!,"This is an intermittent employee with no specified tour."
"RTN","PRSATE",159,0)
 W !!,"Time records will now be updated to indicate this."
"RTN","PRSATE",160,0)
 I '$D(^PRST(458,PPI,"E",DFN,"D",0)) S ^(0)="^458.02^14^14"
"RTN","PRSATE",161,0)
 I '$$PERM^PRSALIB(PPI,DFN) D
"RTN","PRSATE",162,0)
 .  W !!,"Not all tour days are assigned a permanent status."
"RTN","PRSATE",163,0)
 .  I $$UPDTQ^PRSALIB(),$$TMPST^PRSALIB(.TYP2) D UPDSTAT^PRSALIB(PPI,DFN,TYP2)
"RTN","PRSATE",164,0)
 S (Y,TDH)="",TYP=0,WTL=TLI
"RTN","PRSATE",165,0)
 I SRT="N" D
"RTN","PRSATE",166,0)
 .  F DAY=1:1:14 D NX
"RTN","PRSATE",167,0)
 E  D
"RTN","PRSATE",168,0)
 .  F DAY=1:1:14 D SET
"RTN","PRSATE",169,0)
 W "  ... done"
"RTN","PRSATE",170,0)
 D HOL,RS
"RTN","PRSATE",171,0)
 Q
"RTN","PRSATE",172,0)
 ;
"RTN","PRSATE",173,0)
 ;
"RTN","PRSATE",174,0)
RS ; Get Comp Ind
"RTN","PRSATE",175,0)
 S Y=$G(^PRST(458,PPI,"E",DFN,0))
"RTN","PRSATE",176,0)
 S FLX=$S((SRT="N")&($P(Y,U,7)]""):$P(Y,U,7),1:$P(Y,U,6))
"RTN","PRSATE",177,0)
 S DIR(0)="SAM^C:Compressed;F:Flexitime;0:None"
"RTN","PRSATE",178,0)
 S DIR("A")="Compressed Tour Indicator: "
"RTN","PRSATE",179,0)
 S DIR("B")=$S(FLX="C":"Compressed",FLX="F":"Flexitime",1:"None")
"RTN","PRSATE",180,0)
 D ^DIR K DIR I "^C^F^0^"'[(U_Y_U) S Y=FLX
"RTN","PRSATE",181,0)
 ;
"RTN","PRSATE",182,0)
 ;  Intermittent employee cannot have compressed tour.
"RTN","PRSATE",183,0)
 ;
"RTN","PRSATE",184,0)
 I $P(C0,U,10)=3,Y="C" D  G RS
"RTN","PRSATE",185,0)
 .   W *7,!?5,"Compressed tour not valid for this employee."
"RTN","PRSATE",186,0)
 ;
"RTN","PRSATE",187,0)
 I Y="F" S Z=0 D  I Z G RS
"RTN","PRSATE",188,0)
 .S PAY=$P(C0,U,21),PB=$P(C0,U,20)
"RTN","PRSATE",189,0)
 .I "0123456789GU"'[PAY S Z=1
"RTN","PRSATE",190,0)
 .I PAY="G",PB'=2 S Z=1
"RTN","PRSATE",191,0)
 .I PAY="U","27EXT"'[PB S Z=1
"RTN","PRSATE",192,0)
 .I Z W *7,!?5,"Flexitime not valid for this employee."
"RTN","PRSATE",193,0)
 .Q
"RTN","PRSATE",194,0)
 S $P(^PRST(458,PPI,"E",DFN,0),U,$S(SRT="N":7,1:6))=Y
"RTN","PRSATE",195,0)
 I $D(^PRST(458,"ATC",DFN)) D UPD^PRSASAL
"RTN","PRSATE",196,0)
 K PAY,ZENT Q
"RTN","PRSATE",197,0)
 ;
"RTN","PRSATE",198,0)
 ;
"RTN","PRSATE",199,0)
NX ; Set Next ToD
"RTN","PRSATE",200,0)
 S Z=$G(^PRST(458,PPI,"E",DFN,"D",DAY,0))
"RTN","PRSATE",201,0)
 Q:$P(Z,"^",2)=TD&('$P(Z,"^",3))
"RTN","PRSATE",202,0)
 ;
"RTN","PRSATE",203,0)
 S $P(Z,"^",3,4)="2^"_TD,$P(Z,"^",10,11)=DUZ_"^"_NOW
"RTN","PRSATE",204,0)
 S ^PRST(458,PPI,"E",DFN,"D",DAY,0)=Z,^PRST(458,"ATC",DFN,PPI,DAY)=""
"RTN","PRSATE",205,0)
 Q
"RTN","PRSATE",206,0)
 ;
"RTN","PRSATE",207,0)
 ;
"RTN","PRSATE",208,0)
SET ; Set ToD
"RTN","PRSATE",209,0)
 N ZLASTPP
"RTN","PRSATE",210,0)
 S U="^"
"RTN","PRSATE",211,0)
 ;
"RTN","PRSATE",212,0)
 ; Get Zero node of emp pp rec, Old ToD, & Prior scheduled ToD.
"RTN","PRSATE",213,0)
 ; ZLASTPP is true if a ToD present on this day last pp.
"RTN","PRSATE",214,0)
 ;
"RTN","PRSATE",215,0)
 S Z=$G(^PRST(458,PPI,"E",DFN,"D",DAY,0))
"RTN","PRSATE",216,0)
 S ZLASTPP=$P($G(^PRST(458,PPI-1,"E",DFN,"D",DAY,0)),U,2)'=""
"RTN","PRSATE",217,0)
 S OLD=$P(Z,U,2),SCH=$P(Z,U,4)
"RTN","PRSATE",218,0)
 ;
"RTN","PRSATE",219,0)
 ; Quit if old ToD=this ToD & emp rec start/stop=ToD file start/stop.
"RTN","PRSATE",220,0)
 ;
"RTN","PRSATE",221,0)
 Q:(OLD=TD)&($G(^PRST(458,PPI,"E",DFN,"D",DAY,1))=Y)
"RTN","PRSATE",222,0)
 ;
"RTN","PRSATE",223,0)
 ; Z is updated with new ToD info & replaces the emp ToD record.
"RTN","PRSATE",224,0)
 ;
"RTN","PRSATE",225,0)
 S $P(Z,U,8)=TDH
"RTN","PRSATE",226,0)
 S $P(Z,U,10,11)=DUZ_U_NOW
"RTN","PRSATE",227,0)
 I $P(Z,U,12) S $P(Z,U,12)="" ; remove holiday flag
"RTN","PRSATE",228,0)
 ;
"RTN","PRSATE",229,0)
 ; Temp ToD, store T&L ToD will be worked if it's not emp's usual t&l.
"RTN","PRSATE",230,0)
 ;
"RTN","PRSATE",231,0)
 I TYP S:TLI'=WTL $P(Z,U,9)=WTL
"RTN","PRSATE",232,0)
 ;
"RTN","PRSATE",233,0)
 ; No existing ToD on this day.
"RTN","PRSATE",234,0)
 ;
"RTN","PRSATE",235,0)
 I OLD="" D
"RTN","PRSATE",236,0)
 .  S $P(Z,U,1,3)=DAY_U_TD_U_TYP
"RTN","PRSATE",237,0)
 .  I ZLASTPP D S0
"RTN","PRSATE",238,0)
 E  D
"RTN","PRSATE",239,0)
 .;
"RTN","PRSATE",240,0)
 .;  clean out postings and other ToD info since ToD is changing
"RTN","PRSATE",241,0)
 .;
"RTN","PRSATE",242,0)
 .  D CLEANTOD(PPI,DFN,DAY,TD)
"RTN","PRSATE",243,0)
 .;
"RTN","PRSATE",244,0)
 .;
"RTN","PRSATE",245,0)
 .;
"RTN","PRSATE",246,0)
 .  S:SCH $P(Z,U,5,7)="^^"
"RTN","PRSATE",247,0)
 .  I SCH="" D
"RTN","PRSATE",248,0)
 ..    S $P(Z,U,2,4)=TD_U_TYP_U_OLD
"RTN","PRSATE",249,0)
 ..    D S0
"RTN","PRSATE",250,0)
 .  E  D
"RTN","PRSATE",251,0)
 ..    I SCH=TD D
"RTN","PRSATE",252,0)
 ...      S $P(Z,U,2,4)=TD_"^^"
"RTN","PRSATE",253,0)
 ...      K ^PRST(458,"ATC",DFN,PPI,DAY)
"RTN","PRSATE",254,0)
 ..    E  D
"RTN","PRSATE",255,0)
 ...      S $P(Z,U,2,3)=TD_U_TYP
"RTN","PRSATE",256,0)
 ...      D S0
"RTN","PRSATE",257,0)
 ;
"RTN","PRSATE",258,0)
 D S1
"RTN","PRSATE",259,0)
 K OLD,SCH Q
"RTN","PRSATE",260,0)
 ;
"RTN","PRSATE",261,0)
 ;
"RTN","PRSATE",262,0)
 ; Set up x-ref for supervisor approval of ToD change
"RTN","PRSATE",263,0)
 ;
"RTN","PRSATE",264,0)
S0 S ^PRST(458,"ATC",DFN,PPI,DAY)=""
"RTN","PRSATE",265,0)
 Q
"RTN","PRSATE",266,0)
 ;
"RTN","PRSATE",267,0)
 ;
"RTN","PRSATE",268,0)
S1 ;
"RTN","PRSATE",269,0)
 S ^PRST(458,PPI,"E",DFN,"D",DAY,0)=Z S:Y'="" ^(1)=Y
"RTN","PRSATE",270,0)
 Q
"RTN","PRSATE",271,0)
 ;
"RTN","PRSATE",272,0)
 ;
"RTN","PRSATE",273,0)
T2 ; Ask if second ToD
"RTN","PRSATE",274,0)
 N X
"RTN","PRSATE",275,0)
 ;
"RTN","PRSATE",276,0)
 ;  Don't ask for Daily ToDs
"RTN","PRSATE",277,0)
 ;
"RTN","PRSATE",278,0)
 Q:$E(ENT,1)="D"
"RTN","PRSATE",279,0)
 ;
"RTN","PRSATE",280,0)
 S X=$$ASK2NDTR()
"RTN","PRSATE",281,0)
 Q:X'="Y"  G ^PRSATE4
"RTN","PRSATE",282,0)
 ;
"RTN","PRSATE",283,0)
 ;
"RTN","PRSATE",284,0)
HOL ; Determine if Holiday within ToD
"RTN","PRSATE",285,0)
 N DAY
"RTN","PRSATE",286,0)
 D ^PRSAPPH
"RTN","PRSATE",287,0)
 Q:'$D(HOL)
"RTN","PRSATE",288,0)
 S TT="HX",DUP=1
"RTN","PRSATE",289,0)
 D E^PRSAPPH K DUP,HOL,TT
"RTN","PRSATE",290,0)
 Q
"RTN","PRSATE",291,0)
 ;
"RTN","PRSATE",292,0)
 ;
"RTN","PRSATE",293,0)
CLEANTOD(PPI,DFN,DAY,TD) ; CLEAN OUT TOUR
"RTN","PRSATE",294,0)
 N PRSDT,MIEN
"RTN","PRSATE",295,0)
 K ^PRST(458,PPI,"E",DFN,"D",DAY,1),^(2),^(3),^(10) I TD<5 K ^(4) S $P(Z,U,13,15)="^^"
"RTN","PRSATE",296,0)
 ; if employee is PTP with active memo then reset the ESR day
"RTN","PRSATE",297,0)
 S PRSDT=$P($G(^PRST(458,PPI,1)),U,DAY)
"RTN","PRSATE",298,0)
 S MIEN=$$MIEN^PRSPUT1(DFN,PRSDT)
"RTN","PRSATE",299,0)
 I MIEN D
"RTN","PRSATE",300,0)
 . N PRSFDA
"RTN","PRSATE",301,0)
 . S PRSFDA(458.02,DAY_","_DFN_","_PPI_",",146)="3" ; status = resubmit
"RTN","PRSATE",302,0)
 . S PRSFDA(458.02,DAY_","_DFN_","_PPI_",",148)="Tour Changed" ; remarks
"RTN","PRSATE",303,0)
 . D FILE^DIE("","PRSFDA"),MSG^DIALOG()
"RTN","PRSATE",304,0)
 Q
"RTN","PRSATE",305,0)
 ;
"RTN","PRSATE",306,0)
 ;
"RTN","PRSATE",307,0)
ERROR(NUM,VAR1,VAR2) ;
"RTN","PRSATE",308,0)
 W *7,!!
"RTN","PRSATE",309,0)
 I NUM=1 W "Employee has no Pay Entitlement table entry."
"RTN","PRSATE",310,0)
 I NUM=2 D
"RTN","PRSATE",311,0)
 .  Q:$G(NH)=112
"RTN","PRSATE",312,0)
 .  W "Warning: Normal Hours are ",$G(VAR1),"; Tour Hours are ",$G(VAR2)
"RTN","PRSATE",313,0)
 Q
"RTN","PRSATE",314,0)
 ;
"RTN","PRSATE",315,0)
 ;
"RTN","PRSATE",316,0)
ASKFIXED() ;GET USER'S YES OR NO RESPONSE TO FIXED ToD QUESTION
"RTN","PRSATE",317,0)
 N DIR,DIRUT,Y
"RTN","PRSATE",318,0)
 S DIR("A")="Do you wish to enter a fixed Mon-Fri Tour"
"RTN","PRSATE",319,0)
 S DIR(0)="Y"
"RTN","PRSATE",320,0)
 S DIR("?")="Answer NO to create any other type of tour."
"RTN","PRSATE",321,0)
 S DIR("?",1)="Fixed tours are Monday - Friday with the same hours."
"RTN","PRSATE",322,0)
 D ^DIR
"RTN","PRSATE",323,0)
 Q $S(Y=1:"Y",Y=0:"N",1:"^")
"RTN","PRSATE",324,0)
 ;
"RTN","PRSATE",325,0)
 ;
"RTN","PRSATE",326,0)
ASK2NDTR() ;GET USER'S YES OR NO RESPONSE TO 2nd ToD QUESTION
"RTN","PRSATE",327,0)
 N DIR,DIRUT,Y
"RTN","PRSATE",328,0)
 S DIR("A")="Do you wish to enter a Second Tour"_$S($G(SRT)="X":"",1:" for any Day")
"RTN","PRSATE",329,0)
 S DIR(0)="Y"
"RTN","PRSATE",330,0)
 S DIR("B")="N"
"RTN","PRSATE",331,0)
 S DIR("?",1)="Answer Yes to add a second tour.  No to continue."
"RTN","PRSATE",332,0)
 S DIR("?")="Enter ^ to escape and cancel this tour change."
"RTN","PRSATE",333,0)
 D ^DIR
"RTN","PRSATE",334,0)
 Q $S(Y=1:"Y",Y=0:"N",1:"^")
"RTN","PRSATE",335,0)
 ;
"RTN","PRSATE",336,0)
 ;
"RTN","PRSATE5")
0^2^B26175041^B25791034
"RTN","PRSATE5",1,0)
PRSATE5 ;WCIOFO/PLT-Check for Tour Overlap ;7/8/08  14:34
"RTN","PRSATE5",2,0)
 ;;4.0;PAID;**117,121**;Sep 21, 1995;Build 2
"RTN","PRSATE5",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRSATE5",4,0)
 ;
"RTN","PRSATE5",5,0)
ENT ;tour overlap check for all 14 days in file of a pp and an employee
"RTN","PRSATE5",6,0)
 N DAY
"RTN","PRSATE5",7,0)
 K PRSERR F DAY=1:1:14 D PPTDOL(SRT,PPI,DFN,DAY,.PRSDAY,1) QUIT:$G(PRSERR)
"RTN","PRSATE5",8,0)
 QUIT
"RTN","PRSATE5",9,0)
 ;
"RTN","PRSATE5",10,0)
 ;srt=l for last pp, c for current, n for next, x for transmitted pp
"RTN","PRSATE5",11,0)
 ;ppi=ien for file # 458
"RTN","PRSATE5",12,0)
 ;dfn=ien of file #450
"RTN","PRSATE5",13,0)
 ;day=day number 1, 2,...14
"RTN","PRSATE5",14,0)
 ;.prsday(day) pass by '.' - local pp tour data retrived if defined
"RTN","PRSATE5",15,0)
 ;^1=day #, ^2= tour ien of 457.1, ^3=temporary tour? 0,1,2 (next pp),
"RTN","PRSATE5",16,0)
 ;^4= prior tour ien of 457.1
"RTN","PRSATE5",17,0)
 ;^5=1 if secondary tour overlapped, ^6=secondary ien of 471.1
"RTN","PRSATE5",18,0)
 ;^7,999=secondary tour hour segment
"RTN","PRSATE5",19,0)
 ;prsc=1 check day-1 only (used all days check in pp)
"RTN","PRSATE5",20,0)
 ;    >1 check day-1 and day+1 (used one day check)
"RTN","PRSATE5",21,0)
PPTDOL(SRT,PPI,DFN,DAY,PRSDAY,PRSC) ;tour check for one day in a pp, define prserr=day if overlapped
"RTN","PRSATE5",22,0)
 N A,B,C,I,PRS0,PRS1,PRS4,PRS71
"RTN","PRSATE5",23,0)
 I '$G(PRSDAY(DAY)) S PRS0=$G(^PRST(458,PPI,"E",DFN,"D",DAY,0)),PRS1=$G(^(1)),PRS4=$G(^(4))
"RTN","PRSATE5",24,0)
 E  S PRS0=PRSDAY(DAY),PRS1=$P($$TOUR($P(PRS0,U,2)),"~",2,999),PRS4=$P($$TOUR($P(PRS0,U,6)),"~",2,999)
"RTN","PRSATE5",25,0)
 D:SRT="N" NPP D:"LCX"[SRT LCPP:PRS1]""
"RTN","PRSATE5",26,0)
 QUIT
"RTN","PRSATE5",27,0)
 ;
"RTN","PRSATE5",28,0)
NPP ;next pp (no secondary tour)
"RTN","PRSATE5",29,0)
 S PRS71=$S($P(PRS0,U,3):$P(PRS0,U,4),1:$P(PRS0,U,2)),A=$$TOUR(PRS71),B=$$DAYT(PPI,DFN,SRT,DAY-1,.PRSDAY)
"RTN","PRSATE5",30,0)
 ;if day-1 is a two-day tour
"RTN","PRSATE5",31,0)
 I $P(B,"~")="Y",$$TOUROL($P(A,"~",2),$P(B,"~",2),4) D ERR(DAY,DAY-1,1) G:$G(PRSERR)=DAY NEXIT
"RTN","PRSATE5",32,0)
 I DAY=1,$P(B,"~",3)="Y",$$TOUROL($P(A,"~",2),$P(B,"~",4),4) D ERR(DAY,DAY-1,3) G:$G(PRSERR)=DAY NEXIT
"RTN","PRSATE5",33,0)
 ;if day is a two-day tour
"RTN","PRSATE5",34,0)
 I $P(A,"~")="Y",DAY=14!(PRSC>1) S C=$$DAYT(PPI,DFN,SRT,DAY+1,.PRSDAY) I $$TOUROL($P(A,"~",2),$P(C,"~",2),3) D ERR(DAY,DAY+1,1) G:$G(PRSERR)=DAY NEXIT
"RTN","PRSATE5",35,0)
NEXIT QUIT
"RTN","PRSATE5",36,0)
 ;
"RTN","PRSATE5",37,0)
LCPP ;last, current or transmitted pp
"RTN","PRSATE5",38,0)
 ;check tour and secondary tours for the day
"RTN","PRSATE5",39,0)
 I PRS4]"",$$TOUROL(PRS1,PRS4,"") D ERR(DAY,DAY,"") G:$G(PRSERR)=DAY LCEXIT
"RTN","PRSATE5",40,0)
 ;day-1 tour or secondary is two-day tour
"RTN","PRSATE5",41,0)
 S B=$$DAYT(PPI,DFN,SRT,DAY-1,.PRSDAY)
"RTN","PRSATE5",42,0)
 F I=1,3 I $P(B,"~",I)="Y",$$TOUROL(PRS1,$P(B,"~",I+1),4) D ERR(DAY,DAY-1,I) G:$G(PRSERR)=DAY LCEXIT
"RTN","PRSATE5",43,0)
 I PRS4]"" F I=1,3 I $P(B,"~",I)="Y",$$TOUROL(PRS4,$P(B,"~",I+1),4) D ERR(DAY,DAY-1,I+1) G:$G(PRSERR)=DAY LCEXIT
"RTN","PRSATE5",44,0)
 QUIT:DAY'=14&(PRSC=1)
"RTN","PRSATE5",45,0)
 ;day tour or secondary is two day tour
"RTN","PRSATE5",46,0)
 S PRS71=$P(PRS0,U,2),A=$$TOUR(PRS71),PRS71=$P(PRS0,U,$S($G(PRSDAY(DAY)):6,1:13)),B=$$TOUR(PRS71)
"RTN","PRSATE5",47,0)
 QUIT:$P(A,"~")'="Y"&($P(B,"~")'="Y")
"RTN","PRSATE5",48,0)
 ;check day+1 including day 14
"RTN","PRSATE5",49,0)
 S C=$$DAYT(PPI,DFN,SRT,DAY+1,.PRSDAY) QUIT:$P(C,"~",2)=""
"RTN","PRSATE5",50,0)
 I $P(A,"~")="Y" F I=2,4 I $P(C,"~",I)]"",$$TOUROL(PRS1,$P(C,"~",I),3) D ERR(DAY,DAY+1,I-1) G:$G(PRSERR)=DAY LCEXIT
"RTN","PRSATE5",51,0)
 I $P(B,"~")="Y" F I=2,4 I $P(C,"~",I)]"",$$TOUROL(PRS4,$P(C,"~",I),3) D ERR(DAY,DAY+1,I) G:$G(PRSERR)=DAY LCEXIT
"RTN","PRSATE5",52,0)
LCEXIT QUIT
"RTN","PRSATE5",53,0)
 ;
"RTN","PRSATE5",54,0)
 ;a= ien of file #457.1
"RTN","PRSATE5",55,0)
TOUR(A) ;ef: ~1=y if two day tour, ~2,999 =tour string
"RTN","PRSATE5",56,0)
 QUIT:A<1 "~"
"RTN","PRSATE5",57,0)
 QUIT $P($G(^PRST(457.1,A,0)),U,5)_"~"_$G(^(1))
"RTN","PRSATE5",58,0)
 ;
"RTN","PRSATE5",59,0)
 ;ppi= ien of 458, dfn= ien of 458
"RTN","PRSATE5",60,0)
 ;a=l(ast), c(urrent), n(ext), x(transmit) pp
"RTN","PRSATE5",61,0)
 ;b=day # (0,1,2,...13,14,15) of the pp
"RTN","PRSATE5",62,0)
 ;.prsday = pass by '.'
"RTN","PRSATE5",63,0)
DAYT(PPI,DFN,A,B,PRSDAY) ;ef: ~1=y if two-day tour, ~2 - tour string, ~3=y if two-day tour of secondary, ~4=secondary tour
"RTN","PRSATE5",64,0)
 N C,D,E,F,G
"RTN","PRSATE5",65,0)
 S C=$S(B=0&(A'="N"):PPI-1,B=15&("LX"[A):PPI+1,1:PPI),D=$S(B=0:14,B=15:1,1:B)
"RTN","PRSATE5",66,0)
 I PPI=C,$G(PRSDAY(D)) S E=$G(PRSDAY(D)) QUIT:A="N"&B!(A="C"&(B=15)) $$TOUR($S($P(E,U,3):$P(E,U,4),1:$P(E,U,2)))  QUIT $$TOUR($P(E,U,2))_"~"_$P($$TOUR($P(E,U,6)),"~")_"~"_$P(E,U,7,999)
"RTN","PRSATE5",67,0)
 S E=$G(^PRST(458,C,"E",DFN,"D",D,0)),F=$G(^(1))_"~"_$G(^(4)),G=$P(E,U,13)
"RTN","PRSATE5",68,0)
 QUIT:A="N"&B!(A="C"&(B=15)) $$TOUR($S($P(E,U,3):$P(E,U,4),1:$P(E,U,2)))
"RTN","PRSATE5",69,0)
 QUIT $P($$TOUR($P(E,U,2)),"~")_"~"_$P(F,"~")_$S(G:"~"_$P($$TOUR(G),"~")_"~"_$P(F,"~",2),1:"")
"RTN","PRSATE5",70,0)
 ;
"RTN","PRSATE5",71,0)
 ;
"RTN","PRSATE5",72,0)
 ;tour of duty overlap check
"RTN","PRSATE5",73,0)
 ;a=string of tour of duty, b=string of dour of duty
"RTN","PRSATE5",74,0)
 ;string of tour of duty = start time^end time^special code^start time^...
"RTN","PRSATE5",75,0)
 ;c - parameter is for checking tour string b against string a with options
"RTN","PRSATE5",76,0)
 ;c = "" check tour string b against a
"RTN","PRSATE5",77,0)
 ;c = 1 checked for first day tour of b only, 2 for second day only
"RTN","PRSATE5",78,0)
 ;c = 3 checked for first day tour of b as second day, 4 for second day as first day
"RTN","PRSATE5",79,0)
 ;c = 2 and 4 are only for b tour string with two-day tour
"RTN","PRSATE5",80,0)
TOUROL(A,B,C) ;ef: =0 if not overlapped, =1 if overlapped
"RTN","PRSATE5",81,0)
 N D,E,F,G,I,X,Y,Z
"RTN","PRSATE5",82,0)
 ;connect hour segments in a and set start/end militay time in array d
"RTN","PRSATE5",83,0)
 S Z=0,E=0 F I=1:1 S X=$P(A,U,I) QUIT:$P(A,U,I,999)=""  I I#3'=0 S Y=I>1 D MIL^PRSATIM S:Y<Z!(Y=Z&(I#3=2)) E=E+2400 S Z=Y,Y=E+Y,D(Y)=$G(D(Y))_(I#3) K:$G(D(Y))=21 D(Y)
"RTN","PRSATE5",84,0)
 ;set hour segments in b to f with military time
"RTN","PRSATE5",85,0)
 S (Z,E,G)=0,F="" F I=1:1 S X=$P(B,U,I) QUIT:$P(B,U,I,999)=""  I I#3'=0 S Y=I>1 D MIL^PRSATIM S:Y<Z!(Y=Z&(I#3=2)) E=E+2400 S Z=Y,Y=E+Y,G=G+1,$P(F,U,G)=Y
"RTN","PRSATE5",86,0)
 ;connect hour segments, that is remove same end/start time
"RTN","PRSATE5",87,0)
 F I=2:2 QUIT:$P(F,U,I)=""  S:$P(F,U,I)=$P(F,U,I+1) $P(F,U,I,I+2)=$P(F,U,I+2),I=I-2
"RTN","PRSATE5",88,0)
 ;select first day hour segments from f and put in d if c#2=1, second day hour segmentd from f to d if c#2=0
"RTN","PRSATE5",89,0)
 S D=F I C S:C#2=0 D="" F I=1:2 QUIT:$P(F,U,I)=""  I C#2=1&($P(F,U,I)>2359)!(C#2=0&($P(F,U,I+1)>2400)) S:C#2=1 D=$P(F,U,1,I-1) S:C#2=0 D=$P(F,U,I,999) QUIT
"RTN","PRSATE5",90,0)
 ;add 2400 to hour segment of first day tour if c=3 and -2400 to hour segment of second day tour if c=4
"RTN","PRSATE5",91,0)
 I C>2 F I=1:1 QUIT:$P(D,U,I)=""  S $P(D,U,I)=$S(C=4:-2400,1:2400)+$P(D,U,I) S:D<0&(I=1)&(C=4) $P(D,U,1)=0 I $P(D,U,I)>4800 S $P(D,U,I)=4800 QUIT
"RTN","PRSATE5",92,0)
 ;check overlap
"RTN","PRSATE5",93,0)
 S C=0 F I=1:2 S E=$P(D,U,I) QUIT:E=""!C  S G=$O(D(E)),C=$S(G'=$O(D($P(D,U,I+1)-1)):1,'G:0,D(G)'=1:1,1:0)
"RTN","PRSATE5",94,0)
 QUIT C
"RTN","PRSATE5",95,0)
 ;
"RTN","PRSATE5",96,0)
 ;a = day number, b=day number
"RTN","PRSATE5",97,0)
 ;c="" if a=b a's primary, a's secondary
"RTN","PRSATE5",98,0)
 ;c=1 a's primary, b's primary tour, =3 a's primary, b's secondary
"RTN","PRSATE5",99,0)
 ;c=2 a's secondary, b's primary, =4 a's secondary, b's secondary
"RTN","PRSATE5",100,0)
ERR(A,B,C) ;define prserr=a
"RTN","PRSATE5",101,0)
 N D,E,F,PPID
"RTN","PRSATE5",102,0)
 S F=PPE S:SRT="N" F=$P($$DTPP^PRSU1B2($P($$PPDT^PRSU1B2(PPE,1),U,4)+14,"H"),U,2)
"RTN","PRSATE5",103,0)
 S PPID=$S(SRT="X":"Xmitted",SRT="C":"Current",SRT="N":"Next",1:"Last")
"RTN","PRSATE5",104,0)
 I A'=B S D(1)="ERROR: "_PPID_"-PP "_F_", Day "_A_" "_$S(C#2=1:"Primary",1:"Secondary")_" overlaps Day "_$S(B=0:14,B=15:1,1:B)_" "_$S(C<3:"Primary",1:"Secondary")_$S(A=1&(B=0):" of prior PP",A=14&(B=15):" of next PP",1:"")
"RTN","PRSATE5",105,0)
 E  S D(1)="ERROR: "_PPID_"-PP "_F_", Day "_A_" Secondary Tour overlaps Primary Tour"
"RTN","PRSATE5",106,0)
 S PRSERR=A I '$D(DDSFILE) D EN^DDIOL(.D) QUIT
"RTN","PRSATE5",107,0)
 D HLP^DDSUTL(.D)
"RTN","PRSATE5",108,0)
 QUIT
"VER")
8.0^22.0
"BLD",8056,6)
^112
**END**
**END**

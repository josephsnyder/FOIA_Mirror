Released EC*2*100 SEQ #98
Extracted from mail message
**KIDS**:EC*2.0*100^

**INSTALL NAME**
EC*2.0*100
"BLD",7711,0)
EC*2.0*100^EVENT CAPTURE^0^3091105^y
"BLD",7711,1,0)
^^1^1^3090617^
"BLD",7711,1,1,0)
Event Capture 2009 Enhancements
"BLD",7711,4,0)
^9.64PA^^
"BLD",7711,6.3)
21
"BLD",7711,"ABPKG")
n
"BLD",7711,"INIT")
POST^EC2P100
"BLD",7711,"KRN",0)
^9.67PA^779.2^20
"BLD",7711,"KRN",.4,0)
.4
"BLD",7711,"KRN",.4,"NM",0)
^9.68A^1^1
"BLD",7711,"KRN",.4,"NM",1,0)
EC STOP CODE SECONDARY    FILE #724^724^0
"BLD",7711,"KRN",.4,"NM","B","EC STOP CODE SECONDARY    FILE #724",1)

"BLD",7711,"KRN",.401,0)
.401
"BLD",7711,"KRN",.401,"NM",0)
^9.68A^1^1
"BLD",7711,"KRN",.401,"NM",1,0)
EC STOP CODE SECONDARY    FILE #724^724^0
"BLD",7711,"KRN",.401,"NM","B","EC STOP CODE SECONDARY    FILE #724",1)

"BLD",7711,"KRN",.402,0)
.402
"BLD",7711,"KRN",.403,0)
.403
"BLD",7711,"KRN",.5,0)
.5
"BLD",7711,"KRN",.84,0)
.84
"BLD",7711,"KRN",3.6,0)
3.6
"BLD",7711,"KRN",3.8,0)
3.8
"BLD",7711,"KRN",3.8,"NM",0)
^9.68A^1^1
"BLD",7711,"KRN",3.8,"NM",1,0)
ECMGR^^0
"BLD",7711,"KRN",3.8,"NM","B","ECMGR",1)

"BLD",7711,"KRN",9.2,0)
9.2
"BLD",7711,"KRN",9.8,0)
9.8
"BLD",7711,"KRN",9.8,"NM",0)
^9.68A^38^31
"BLD",7711,"KRN",9.8,"NM",3,0)
ECDEAL2^^0^B6485318
"BLD",7711,"KRN",9.8,"NM",4,0)
ECKILL^^0^B12351832
"BLD",7711,"KRN",9.8,"NM",5,0)
ECRUTL^^0^B36325605
"BLD",7711,"KRN",9.8,"NM",6,0)
ECUMRPC1^^0^B73472186
"BLD",7711,"KRN",9.8,"NM",7,0)
ECMFECS^^0^B43702074
"BLD",7711,"KRN",9.8,"NM",8,0)
ECRRPC^^0^B15494219
"BLD",7711,"KRN",9.8,"NM",9,0)
ECGTP^^0^B274015
"BLD",7711,"KRN",9.8,"NM",10,0)
ECOB^^0^B19937351
"BLD",7711,"KRN",9.8,"NM",11,0)
ECOB19^^0^B2105969
"BLD",7711,"KRN",9.8,"NM",12,0)
ECOB2^^0^B27889135
"BLD",7711,"KRN",9.8,"NM",13,0)
ECOB3^^0^B4073607
"BLD",7711,"KRN",9.8,"NM",14,0)
ECOB31^^0^B15085073
"BLD",7711,"KRN",9.8,"NM",15,0)
ECOB40^^0^B17508001
"BLD",7711,"KRN",9.8,"NM",16,0)
ECOB41^^0^B3206658
"BLD",7711,"KRN",9.8,"NM",17,0)
ECOBA^^0^B2535954
"BLD",7711,"KRN",9.8,"NM",18,0)
ECOBARG^^0^B4723167
"BLD",7711,"KRN",9.8,"NM",19,0)
ECOBC^^0^B72789394
"BLD",7711,"KRN",9.8,"NM",23,0)
ECOBL^^0^B38300397
"BLD",7711,"KRN",9.8,"NM",24,0)
ECOBM^^0^B1417289
"BLD",7711,"KRN",9.8,"NM",25,0)
ECOBMC^^0^B8250173
"BLD",7711,"KRN",9.8,"NM",26,0)
ECOBP^^0^B1702030
"BLD",7711,"KRN",9.8,"NM",27,0)
ECOBPC^^0^B8756759
"BLD",7711,"KRN",9.8,"NM",28,0)
ECOBU^^0^B159516513
"BLD",7711,"KRN",9.8,"NM",29,0)
ECOBUF^^0^B6151296
"BLD",7711,"KRN",9.8,"NM",32,0)
ECOBUL^^0^B60319608
"BLD",7711,"KRN",9.8,"NM",33,0)
ECOB30^^0^B11111309
"BLD",7711,"KRN",9.8,"NM",34,0)
ECOBVST^^0^B20262344
"BLD",7711,"KRN",9.8,"NM",35,0)
ECOBVSTS^^0^B20642496
"BLD",7711,"KRN",9.8,"NM",36,0)
EC2P100^^0^B19451491
"BLD",7711,"KRN",9.8,"NM",37,0)
ECSUM1^^0^B12652997
"BLD",7711,"KRN",9.8,"NM",38,0)
ECRRPT1^^0^B55152988
"BLD",7711,"KRN",9.8,"NM","B","EC2P100",36)

"BLD",7711,"KRN",9.8,"NM","B","ECDEAL2",3)

"BLD",7711,"KRN",9.8,"NM","B","ECGTP",9)

"BLD",7711,"KRN",9.8,"NM","B","ECKILL",4)

"BLD",7711,"KRN",9.8,"NM","B","ECMFECS",7)

"BLD",7711,"KRN",9.8,"NM","B","ECOB",10)

"BLD",7711,"KRN",9.8,"NM","B","ECOB19",11)

"BLD",7711,"KRN",9.8,"NM","B","ECOB2",12)

"BLD",7711,"KRN",9.8,"NM","B","ECOB3",13)

"BLD",7711,"KRN",9.8,"NM","B","ECOB30",33)

"BLD",7711,"KRN",9.8,"NM","B","ECOB31",14)

"BLD",7711,"KRN",9.8,"NM","B","ECOB40",15)

"BLD",7711,"KRN",9.8,"NM","B","ECOB41",16)

"BLD",7711,"KRN",9.8,"NM","B","ECOBA",17)

"BLD",7711,"KRN",9.8,"NM","B","ECOBARG",18)

"BLD",7711,"KRN",9.8,"NM","B","ECOBC",19)

"BLD",7711,"KRN",9.8,"NM","B","ECOBL",23)

"BLD",7711,"KRN",9.8,"NM","B","ECOBM",24)

"BLD",7711,"KRN",9.8,"NM","B","ECOBMC",25)

"BLD",7711,"KRN",9.8,"NM","B","ECOBP",26)

"BLD",7711,"KRN",9.8,"NM","B","ECOBPC",27)

"BLD",7711,"KRN",9.8,"NM","B","ECOBU",28)

"BLD",7711,"KRN",9.8,"NM","B","ECOBUF",29)

"BLD",7711,"KRN",9.8,"NM","B","ECOBUL",32)

"BLD",7711,"KRN",9.8,"NM","B","ECOBVST",34)

"BLD",7711,"KRN",9.8,"NM","B","ECOBVSTS",35)

"BLD",7711,"KRN",9.8,"NM","B","ECRRPC",8)

"BLD",7711,"KRN",9.8,"NM","B","ECRRPT1",38)

"BLD",7711,"KRN",9.8,"NM","B","ECRUTL",5)

"BLD",7711,"KRN",9.8,"NM","B","ECSUM1",37)

"BLD",7711,"KRN",9.8,"NM","B","ECUMRPC1",6)

"BLD",7711,"KRN",19,0)
19
"BLD",7711,"KRN",19,"NM",0)
^9.68A^3^3
"BLD",7711,"KRN",19,"NM",1,0)
ECDEAL2^^0
"BLD",7711,"KRN",19,"NM",2,0)
EC GUI CONTEXT^^0
"BLD",7711,"KRN",19,"NM",3,0)
EC DSS UNIT SECONDARY ASSOC^^0
"BLD",7711,"KRN",19,"NM","B","EC DSS UNIT SECONDARY ASSOC",3)

"BLD",7711,"KRN",19,"NM","B","EC GUI CONTEXT",2)

"BLD",7711,"KRN",19,"NM","B","ECDEAL2",1)

"BLD",7711,"KRN",19.1,0)
19.1
"BLD",7711,"KRN",101,0)
101
"BLD",7711,"KRN",409.61,0)
409.61
"BLD",7711,"KRN",771,0)
771
"BLD",7711,"KRN",779.2,0)
779.2
"BLD",7711,"KRN",870,0)
870
"BLD",7711,"KRN",8989.51,0)
8989.51
"BLD",7711,"KRN",8989.51,"NM",0)
^9.68A^6^6
"BLD",7711,"KRN",8989.51,"NM",1,0)
EC LAST LOCATION^^0
"BLD",7711,"KRN",8989.51,"NM",2,0)
EC LAST PRINTER^^0
"BLD",7711,"KRN",8989.51,"NM",3,0)
EC LAST CLINIC^^0
"BLD",7711,"KRN",8989.51,"NM",4,0)
ECOB CONSTRUCTOR^^0
"BLD",7711,"KRN",8989.51,"NM",5,0)
ECOB DESTRUCTOR^^0
"BLD",7711,"KRN",8989.51,"NM",6,0)
ECOB METHOD^^0
"BLD",7711,"KRN",8989.51,"NM","B","EC LAST CLINIC",3)

"BLD",7711,"KRN",8989.51,"NM","B","EC LAST LOCATION",1)

"BLD",7711,"KRN",8989.51,"NM","B","EC LAST PRINTER",2)

"BLD",7711,"KRN",8989.51,"NM","B","ECOB CONSTRUCTOR",4)

"BLD",7711,"KRN",8989.51,"NM","B","ECOB DESTRUCTOR",5)

"BLD",7711,"KRN",8989.51,"NM","B","ECOB METHOD",6)

"BLD",7711,"KRN",8989.52,0)
8989.52
"BLD",7711,"KRN",8994,0)
8994
"BLD",7711,"KRN",8994,"NM",0)
^9.68A^2^2
"BLD",7711,"KRN",8994,"NM",1,0)
ECOB FACTORY^^0
"BLD",7711,"KRN",8994,"NM",2,0)
ECOB METHOD^^0
"BLD",7711,"KRN",8994,"NM","B","ECOB FACTORY",1)

"BLD",7711,"KRN",8994,"NM","B","ECOB METHOD",2)

"BLD",7711,"KRN","B",.4,.4)

"BLD",7711,"KRN","B",.401,.401)

"BLD",7711,"KRN","B",.402,.402)

"BLD",7711,"KRN","B",.403,.403)

"BLD",7711,"KRN","B",.5,.5)

"BLD",7711,"KRN","B",.84,.84)

"BLD",7711,"KRN","B",3.6,3.6)

"BLD",7711,"KRN","B",3.8,3.8)

"BLD",7711,"KRN","B",9.2,9.2)

"BLD",7711,"KRN","B",9.8,9.8)

"BLD",7711,"KRN","B",19,19)

"BLD",7711,"KRN","B",19.1,19.1)

"BLD",7711,"KRN","B",101,101)

"BLD",7711,"KRN","B",409.61,409.61)

"BLD",7711,"KRN","B",771,771)

"BLD",7711,"KRN","B",779.2,779.2)

"BLD",7711,"KRN","B",870,870)

"BLD",7711,"KRN","B",8989.51,8989.51)

"BLD",7711,"KRN","B",8989.52,8989.52)

"BLD",7711,"KRN","B",8994,8994)

"BLD",7711,"PRE")
EC2P100
"BLD",7711,"QUES",0)
^9.62^^
"BLD",7711,"REQB",0)
^9.611^4^3
"BLD",7711,"REQB",2,0)
EC*2.0*76^2
"BLD",7711,"REQB",3,0)
EC*2.0*101^2
"BLD",7711,"REQB",4,0)
EC*2.0*105^2
"BLD",7711,"REQB","B","EC*2.0*101",3)

"BLD",7711,"REQB","B","EC*2.0*105",4)

"BLD",7711,"REQB","B","EC*2.0*76",2)

"INIT")
POST^EC2P100
"KRN",.4,2829,-1)
0^1
"KRN",.4,2829,0)
EC STOP CODE SECONDARY^3091022.1204^@^724^^@^3091030
"KRN",.4,2829,"F",2)
.01~-40.7,^DIC(40.7,^^S I(0,0)=D0 S DIP(1)=$S($D(^ECD(D0,0)):^(0),1:"") S X=$P(DIP(1),U,10),X=X S D(0)=+X;Z;"ASSOC:"~-40.7,1;"STOP CODE";L4~-40.7,6~
"KRN",.4,2829,"H")
DSS UNIT LIST WITH SECONDARY ASSOCIATED STOP CODES ASSIGNED
"KRN",.401,2108,-1)
0^1
"KRN",.401,2108,0)
EC STOP CODE SECONDARY^3091022.1206^@^724^^@^3091030
"KRN",.401,2108,2,0)
^.4014^2^2
"KRN",.401,2108,2,1,0)
724^.01^NAME^]^^^^^^4
"KRN",.401,2108,2,1,"GET")
S DISX(1)=$P($G(^ECD(D0,0)),U)
"KRN",.401,2108,2,1,"IX")
^ECD("B",^ECD(^2
"KRN",.401,2108,2,1,"QCON")
I DISX(1)'=""
"KRN",.401,2108,2,1,"SER")
0^0
"KRN",.401,2108,2,1,"TXT")
NAME not null
"KRN",.401,2108,2,2,0)
40.7^5^RESTRICTION TYPE^"@^^^^^^3
"KRN",.401,2108,2,2,2,0)
^.401418^1^1
"KRN",.401,2108,2,2,2,1,0)
724^100^40.7^DIC(40.7,^0
"KRN",.401,2108,2,2,2,1,"RCOD")
S I(0,0)=D0 S Y(1)=$S($D(^ECD(D0,0)):^(0),1:"") S X=$P(Y(1),U,10),X=X S D(0)=+X
"KRN",.401,2108,2,2,2,"B",724,1)

"KRN",.401,2108,2,2,"F")
Rz^S^S (Secondary)
"KRN",.401,2108,2,2,"GET")
S DISX(2)=$P($G(^DIC(40.7,D0,0)),U,6)
"KRN",.401,2108,2,2,"QCON")
I DISX(2)="S"
"KRN",.401,2108,2,2,"T")
S^S^S (Secondary)
"KRN",.401,2108,2,2,"TXT")
RESTRICTION TYPE equals S (Secondary)
"KRN",.401,2108,2,"B",40.7,2)

"KRN",.401,2108,2,"B",724,1)

"KRN",3.8,6215,-1)
0^1
"KRN",3.8,6215,0)
ECMGR^PR^n^^^^
"KRN",3.8,6215,2,0)
^^1^1^3090707^
"KRN",3.8,6215,2,1,0)
This mail group contains Event Capture supervisors.
"KRN",3.8,6215,3)

"KRN",19,11187,-1)
0^2
"KRN",19,11187,0)
EC GUI CONTEXT^EC GUI Context version 2.1.3.2^^B^^^^^^^^EVENT CAPTURE
"KRN",19,11187,1,0)
^19.06^1^1^3090915^^^^
"KRN",19,11187,1,1,0)
This is the Broker Client/Server type option for the Event Capture GUI option
"KRN",19,11187,99)
58583,58456
"KRN",19,11187,99.1)
58981,55862
"KRN",19,11187,"RPC",0)
^19.05P^55^55
"KRN",19,11187,"RPC",1,0)
EC DSSCATCHECK
"KRN",19,11187,"RPC",2,0)
EC FILER
"KRN",19,11187,"RPC",3,0)
EC GETBATPROCS
"KRN",19,11187,"RPC",4,0)
EC GETCAT
"KRN",19,11187,"RPC",5,0)
EC GETCPTLST
"KRN",19,11187,"RPC",6,0)
EC GETDSSECS
"KRN",19,11187,"RPC",7,0)
EC GETDSSUNIT
"KRN",19,11187,"RPC",8,0)
EC GETDSSUNITUSRS
"KRN",19,11187,"RPC",9,0)
EC GETECLOC
"KRN",19,11187,"RPC",10,0)
EC GETECSCATS
"KRN",19,11187,"RPC",11,0)
EC GETECSCREEN
"KRN",19,11187,"RPC",12,0)
EC GETECSDETAIL
"KRN",19,11187,"RPC",13,0)
EC GETECSPROCS
"KRN",19,11187,"RPC",14,0)
EC GETENCDXS
"KRN",19,11187,"RPC",15,0)
EC GETIEN
"KRN",19,11187,"RPC",16,0)
EC GETLIST
"KRN",19,11187,"RPC",17,0)
EC GETLOC
"KRN",19,11187,"RPC",18,0)
EC GETNATPX
"KRN",19,11187,"RPC",19,0)
EC GETPATCLASTAT
"KRN",19,11187,"RPC",20,0)
EC GETPATELIG
"KRN",19,11187,"RPC",21,0)
EC GETPATINFO
"KRN",19,11187,"RPC",22,0)
EC GETPATPROCS
"KRN",19,11187,"RPC",23,0)
EC GETPRODEFS
"KRN",19,11187,"RPC",24,0)
EC GETPROVIDER
"KRN",19,11187,"RPC",25,0)
EC GETPXLST
"KRN",19,11187,"RPC",26,0)
EC GETPXMODIFIER
"KRN",19,11187,"RPC",27,0)
EC GETPXREASON
"KRN",19,11187,"RPC",28,0)
EC GETSCNHELP
"KRN",19,11187,"RPC",29,0)
EC GETUSRDSSUNIT
"KRN",19,11187,"RPC",30,0)
EC REPORTS
"KRN",19,11187,"RPC",31,0)
EC VALIDATE SPREADSHEET DATA
"KRN",19,11187,"RPC",32,0)
ORWU USERINFO
"KRN",19,11187,"RPC",33,0)
ORWU HASKEY
"KRN",19,11187,"RPC",34,0)
ORWU DEVICE
"KRN",19,11187,"RPC",35,0)
SC PATIENT LOOKUP
"KRN",19,11187,"RPC",36,0)
ORWU NEWPERS
"KRN",19,11187,"RPC",37,0)
DDR GET DD HELP
"KRN",19,11187,"RPC",38,0)
DDR FINDER
"KRN",19,11187,"RPC",39,0)
DDR FIND1
"KRN",19,11187,"RPC",40,0)
DDR LISTER
"KRN",19,11187,"RPC",41,0)
EC GETDATE
"KRN",19,11187,"RPC",42,0)
EC CLASHELP
"KRN",19,11187,"RPC",43,0)
DDR GETS ENTRY DATA
"KRN",19,11187,"RPC",44,0)
DG CHK BS5 XREF Y/N
"KRN",19,11187,"RPC",45,0)
DG SENSITIVE RECORD ACCESS
"KRN",19,11187,"RPC",46,0)
DG SENSITIVE RECORD BULLETIN
"KRN",19,11187,"RPC",47,0)
DG CHK PAT/DIV MEANS TEST
"KRN",19,11187,"RPC",48,0)
EC SPACEBAR
"KRN",19,11187,"RPC",49,0)
EC DIEDON
"KRN",19,11187,"RPC",50,0)
EC GETPATCH
"KRN",19,11187,"RPC",51,0)
EC GETVISITINFO
"KRN",19,11187,"RPC",52,0)
EC GETVERSION
"KRN",19,11187,"RPC",53,0)
ORWU DT
"KRN",19,11187,"RPC",54,0)
ECOB METHOD
"KRN",19,11187,"RPC",55,0)
ECOB FACTORY
"KRN",19,11187,"U")
EC GUI CONTEXT VERSION 2.1.3.2
"KRN",19,13217,-1)
0^1
"KRN",19,13217,0)
ECDEAL2^Remove Terminated Users Access to DSS Units^^R^^^^^^^^EVENT CAPTURE
"KRN",19,13217,1,0)
^19.06^3^3^3090706^^
"KRN",19,13217,1,1,0)
This option is run as a nightly task and used to deallocate DSS units 
"KRN",19,13217,1,2,0)
from terminated users.  A listing of DSS UNITS and their terminated users 
"KRN",19,13217,1,3,0)
will be delivered to members of the ECXMGR mailgroup on a nightly basis.
"KRN",19,13217,25)
USER^ECDEAL2
"KRN",19,13217,"U")
REMOVE TERMINATED USERS ACCESS
"KRN",19,13324,-1)
0^3
"KRN",19,13324,0)
EC DSS UNIT SECONDARY ASSOC^DSS Unit List with Secondary Associated Stop Codes^^P^^^^^^^^EVENT CAPTURE
"KRN",19,13324,1,0)
^^2^2^3091022^
"KRN",19,13324,1,1,0)
Option will provide a list of DSS Units with Secondary Associated Stop 
"KRN",19,13324,1,2,0)
Codes assigned. Please update any items to ensure your file's integrity.
"KRN",19,13324,60)
ECD(
"KRN",19,13324,62)
0
"KRN",19,13324,63)
[EC STOP CODE SECONDARY]
"KRN",19,13324,64)
[EC STOP CODE SECONDARY]
"KRN",19,13324,65)

"KRN",19,13324,66)

"KRN",19,13324,"U")
DSS UNIT LIST WITH SECONDARY A
"KRN",8989.5,1493,0)
486;DIC(9.4,^EC LAST LOCATION^101065
"KRN",8989.5,1493,1)
aLocation
"KRN",8989.51,500,-1)
0^1
"KRN",8989.51,500,0)
EC LAST LOCATION^Event Capture Last User Location^1^^LastUserLocation^0
"KRN",8989.51,500,1)
F^^Enter last location used by the user.
"KRN",8989.51,500,6)
F
"KRN",8989.51,500,30,0)
^8989.513I^1^1
"KRN",8989.51,500,30,1,0)
1^200
"KRN",8989.51,501,-1)
0^3
"KRN",8989.51,501,0)
EC LAST CLINIC^Event Capture Last User Clinic^1^^LastUserClinic^0
"KRN",8989.51,501,1)
F^^Enter last clinic used by the user
"KRN",8989.51,501,6)
F
"KRN",8989.51,501,30,0)
^8989.513I^1^1
"KRN",8989.51,501,30,1,0)
1^200
"KRN",8989.51,502,-1)
0^2
"KRN",8989.51,502,0)
EC LAST PRINTER^Event Capture Last User Printer^1^^LastUserPrinter^0
"KRN",8989.51,502,1)
F^^Enter last printer used by the user
"KRN",8989.51,502,6)
F
"KRN",8989.51,502,30,0)
^8989.513I^1^1
"KRN",8989.51,502,30,1,0)
1^200
"KRN",8989.51,503,-1)
0^4
"KRN",8989.51,503,0)
ECOB CONSTRUCTOR^Constructor API for an object^1^^Constructor^0
"KRN",8989.51,503,1)
F^^Enter "<Tag>.<Routine>(NAME)" of constructor API
"KRN",8989.51,503,6)
F
"KRN",8989.51,503,30,0)
^8989.513I^1^1
"KRN",8989.51,503,30,1,0)
1^9.4
"KRN",8989.51,504,-1)
0^5
"KRN",8989.51,504,0)
ECOB DESTRUCTOR^Destructor API for an object^1^^Destructor^0
"KRN",8989.51,504,1)
F^^Enter "<Tag>.<Routine>(HANDLE)" of destructor API
"KRN",8989.51,504,6)
F
"KRN",8989.51,504,30,0)
^8989.513I^1^1
"KRN",8989.51,504,30,1,0)
1^9.4
"KRN",8989.51,505,-1)
0^6
"KRN",8989.51,505,0)
ECOB METHOD^Method API for an object^1^^Method^0
"KRN",8989.51,505,1)
F^^Enter "<Tag>.<Routine>(.RESULT,ARGUMENT)" of method API
"KRN",8989.51,505,6)
F
"KRN",8989.51,505,30,0)
^8989.513I^1^1
"KRN",8989.51,505,30,1,0)
1^9.4
"KRN",8994,2259,-1)
0^1
"KRN",8994,2259,0)
ECOB FACTORY^FACTORY^ECOBUF^2^P^0
"KRN",8994,2259,1,0)
^^1^1^3090803^
"KRN",8994,2259,1,1,0)
An RPC to construct(get a handle to) or destroy VistA objects.
"KRN",8994,2259,2,0)
^8994.02A^1^1
"KRN",8994,2259,2,1,0)
ARGUMENT^1^32000^1^1
"KRN",8994,2259,2,1,1,0)
^^2^2^3090803^
"KRN",8994,2259,2,1,1,1,0)
Constructor Argument = Constructor.[class name].[namespace]
"KRN",8994,2259,2,1,1,2,0)
Destructor Argument = Destructor.[handle].[class name]
"KRN",8994,2259,2,"B","ARGUMENT",1)

"KRN",8994,2259,2,"PARAMSEQ",1,1)

"KRN",8994,2259,3,0)
^^2^2^3090803^
"KRN",8994,2259,3,1,0)
For a constructor argument, will return a handle.
"KRN",8994,2259,3,2,0)
For a destructor argument, will return a 1.
"KRN",8994,2260,-1)
0^2
"KRN",8994,2260,0)
ECOB METHOD^METHOD^ECOBUF^2^P^0
"KRN",8994,2260,1,0)
^^1^1^3090803^
"KRN",8994,2260,1,1,0)
An RPC to manipulate VistA objects.
"KRN",8994,2260,2,0)
^8994.02A^1^1
"KRN",8994,2260,2,1,0)
ARGUMENT^1^32000^1^1
"KRN",8994,2260,2,1,1,0)
^^1^1^3090803^
"KRN",8994,2260,2,1,1,1,0)
Argument = [handle].[method].[parameters]
"KRN",8994,2260,2,"B","ARGUMENT",1)

"KRN",8994,2260,2,"PARAMSEQ",1,1)

"KRN",8994,2260,3,0)
^^1^1^3090803^
"KRN",8994,2260,3,1,0)
Returns the result of the method call in the array.
"MBREQ")
0
"ORD",5,.4)
.4;5;;;EDEOUT^DIFROMSO(.4,DA,"",XPDA);FPRE^DIFROMSI(.4,"",XPDA);EPRE^DIFROMSI(.4,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.4,DA,"",XPDA);DEL^DIFROMSK(.4,"",%)
"ORD",5,.4,0)
PRINT TEMPLATE
"ORD",6,.401)
.401;6;;;EDEOUT^DIFROMSO(.401,DA,"",XPDA);FPRE^DIFROMSI(.401,"",XPDA);EPRE^DIFROMSI(.401,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.401,DA,"",XPDA);DEL^DIFROMSK(.401,"",%)
"ORD",6,.401,0)
SORT TEMPLATE
"ORD",11,3.8)
3.8;11;;;MAILG^XPDTA1;MAILGF1^XPDIA1;MAILGE1^XPDIA1;MAILGF2^XPDIA1;;MAILGDEL^XPDIA1(%)
"ORD",11,3.8,0)
MAIL GROUP
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"ORD",20,8989.51)
8989.51;20;;;PAR1E1^XPDTA2;PAR1F1^XPDIA3;PAR1E1^XPDIA3;PAR1F2^XPDIA3;;PAR1DEL^XPDIA3(%)
"ORD",20,8989.51,0)
PARAMETER DEFINITION
"PKG",486,-1)
1^1
"PKG",486,0)
EVENT CAPTURE^EC^Event Capture Workload Capture System^
"PKG",486,20,0)
^9.402P^^
"PKG",486,22,0)
^9.49I^1^1
"PKG",486,22,1,0)
2.0^2960508^2981027^66481
"PKG",486,22,1,"PAH",1,0)
100^3091105
"PKG",486,22,1,"PAH",1,1,0)
^^1^1^3091105
"PKG",486,22,1,"PAH",1,1,1,0)
Event Capture 2009 Enhancements
"PRE")
EC2P100
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
31
"RTN","EC2P100")
0^36^B19451491^n/a
"RTN","EC2P100",1,0)
EC2P100 ;ALB/MRY - PATCH EC*2.0*100 Post-Init Rtn ;01/07/2009
"RTN","EC2P100",2,0)
 ;;2.0; EVENT CAPTURE ;**100**;8 May 96;Build 21
"RTN","EC2P100",3,0)
 ;
"RTN","EC2P100",4,0)
ENV ;environment check
"RTN","EC2P100",5,0)
 S XPDABORT=""
"RTN","EC2P100",6,0)
 D PROGCHK(.XPDABORT) ;checks programmer variables
"RTN","EC2P100",7,0)
 I XPDABORT="" K XPDABORT
"RTN","EC2P100",8,0)
 Q
"RTN","EC2P100",9,0)
 ;
"RTN","EC2P100",10,0)
PROGCHK(XPDABORT) ;checks for necessary programmer variables
"RTN","EC2P100",11,0)
 ;
"RTN","EC2P100",12,0)
 I '$G(DUZ)!($G(DUZ(0))'="@")!('$G(DT))!($G(U)'="^") DO
"RTN","EC2P100",13,0)
 . D BMES^XPDUTL("******")
"RTN","EC2P100",14,0)
 . D MES^XPDUTL("Your programming variables are not set up properly.")
"RTN","EC2P100",15,0)
 . D MES^XPDUTL("Installation aborted.")
"RTN","EC2P100",16,0)
 . D MES^XPDUTL("******")
"RTN","EC2P100",17,0)
 . S XPDABORT=2
"RTN","EC2P100",18,0)
 Q
"RTN","EC2P100",19,0)
 ;
"RTN","EC2P100",20,0)
POST ;
"RTN","EC2P100",21,0)
OPTION ;move [ec night] into [ec pce feed], if exists.  Then, disable.
"RTN","EC2P100",22,0)
 D RENOPT("EC NIGHT","EC PCE FEED")
"RTN","EC2P100",23,0)
 F ECMENU="EC NIGHT","EC PCE FEED" D DISOPT(ECMENU)
"RTN","EC2P100",24,0)
 ;
"RTN","EC2P100",25,0)
 ;add users of the ECXMGR security key to ECMGR mailgroup.
"RTN","EC2P100",26,0)
 D MAILGP
"RTN","EC2P100",27,0)
 ;add Last Used, Table Printer, & Visits objects
"RTN","EC2P100",28,0)
 D VOBS
"RTN","EC2P100",29,0)
 Q
"RTN","EC2P100",30,0)
 ;
"RTN","EC2P100",31,0)
RENOPT(ECOLD,ECNEW) ;rename option
"RTN","EC2P100",32,0)
 ;
"RTN","EC2P100",33,0)
 ;  Input:
"RTN","EC2P100",34,0)
 ;    ECOLD - original option name
"RTN","EC2P100",35,0)
 ;    ECNEW - new option name
"RTN","EC2P100",36,0)
 ;
"RTN","EC2P100",37,0)
 ;
"RTN","EC2P100",38,0)
 I +$$LKOPT^XPDMENU(ECNEW)>0 Q  ;quit if new exists
"RTN","EC2P100",39,0)
 I '+$$LKOPT^XPDMENU(ECOLD) Q  ;quit if old doesn't exit
"RTN","EC2P100",40,0)
 I $G(ECOLD)'="",$G(ECNEW)'="",+$$LKOPT^XPDMENU(ECOLD)>0 D
"RTN","EC2P100",41,0)
 . D RENAME^XPDMENU(ECOLD,ECNEW)
"RTN","EC2P100",42,0)
 Q
"RTN","EC2P100",43,0)
DISOPT(MENU) ;Disable Options
"RTN","EC2P100",44,0)
 I '+$$LKOPT^XPDMENU(MENU) Q
"RTN","EC2P100",45,0)
 N ECMSG
"RTN","EC2P100",46,0)
 K ECMSG
"RTN","EC2P100",47,0)
 S ECMSG(1)=" "
"RTN","EC2P100",48,0)
 S ECMSG(2)=">>> Disabling ["_MENU_"] option"
"RTN","EC2P100",49,0)
 D MES^XPDUTL(.ECXMSG)
"RTN","EC2P100",50,0)
 ;Disable menu option
"RTN","EC2P100",51,0)
 D OUT^XPDMENU(MENU,"MENU OPTION NO LONGER USED")
"RTN","EC2P100",52,0)
 D BMES^XPDUTL("   "_MENU_"   **  Menu option disabled  **")
"RTN","EC2P100",53,0)
 Q
"RTN","EC2P100",54,0)
MAILGP ;add users of ECXMGR key to ECMGR mailgroup
"RTN","EC2P100",55,0)
 D BMES^XPDUTL(">>> Adding users with the ECXMGR key to ECMGR Mailgroup...")
"RTN","EC2P100",56,0)
 N DIC,X,DA,ECDUZ
"RTN","EC2P100",57,0)
 S DIC="^XMB(3.8,",DIC(0)="X",X="ECMGR" D ^DIC
"RTN","EC2P100",58,0)
 S DA(1)=+Y,DIC=DIC_DA(1)_",1,",DIC("P")=$P(^DD(3.8,2,0),"^",2),DIC(0)="L"
"RTN","EC2P100",59,0)
 S ECDUZ=0 F  S ECDUZ=$O(^XUSEC("ECXMGR",ECDUZ)) Q:'ECDUZ  D
"RTN","EC2P100",60,0)
 . S X=$$GET1^DIQ(200,ECDUZ,.01) D ^DIC
"RTN","EC2P100",61,0)
 . I +$P(Y,"^",3) D MES^XPDUTL("   "_X_" added.")
"RTN","EC2P100",62,0)
 Q
"RTN","EC2P100",63,0)
 ;;
"RTN","EC2P100",64,0)
 ;;
"RTN","EC2P100",65,0)
VOBS ;;Install utility objects
"RTN","EC2P100",66,0)
 D BMES^XPDUTL("Installing Event Capture Object Factory Parameters")
"RTN","EC2P100",67,0)
 ;;
"RTN","EC2P100",68,0)
 D EN^XPAR("PKG","ECOB CONSTRUCTOR","EC OBU UTILITY","CREATE.ECOBU(NAME)")
"RTN","EC2P100",69,0)
 D EN^XPAR("PKG","ECOB DESTRUCTOR","EC OBU UTILITY","DESTROY.ECOBU(HANDLE)")
"RTN","EC2P100",70,0)
 D EN^XPAR("PKG","ECOB METHOD","EC OBU UTILITY","METHOD.ECOBU(.RESULT,ARGUMENT)")
"RTN","EC2P100",71,0)
 D MES^XPDUTL("EC OBU UTILITY... published")
"RTN","EC2P100",72,0)
 ;;
"RTN","EC2P100",73,0)
 D EN^XPAR("PKG","ECOB CONSTRUCTOR","EC OBU UTILITY LIST","CREATE.ECOBUL(NAME)")
"RTN","EC2P100",74,0)
 D EN^XPAR("PKG","ECOB DESTRUCTOR","EC OBU UTILITY LIST","DESTROY.ECOBUL(HANDLE)")
"RTN","EC2P100",75,0)
 D EN^XPAR("PKG","ECOB METHOD","EC OBU UTILITY LIST","METHOD.ECOBUL(.RESULT,ARGUMENT)")
"RTN","EC2P100",76,0)
 D MES^XPDUTL("EC OBU UTILITY LIST... published")
"RTN","EC2P100",77,0)
 ;;
"RTN","EC2P100",78,0)
 D EN^XPAR("PKG","ECOB CONSTRUCTOR","EC OBU LAST USED","CREATE.ECOB31(NAME)")
"RTN","EC2P100",79,0)
 D EN^XPAR("PKG","ECOB DESTRUCTOR","EC OBU LAST USED","DESTROY.ECOB31(HANDLE)")
"RTN","EC2P100",80,0)
 D EN^XPAR("PKG","ECOB METHOD","EC OBU LAST USED","METHOD.ECOB31(.RESULT,ARGUMENT)")
"RTN","EC2P100",81,0)
 D MES^XPDUTL("EC OBU LAST USED... published")
"RTN","EC2P100",82,0)
 ;;
"RTN","EC2P100",83,0)
 D EN^XPAR("PKG","ECOB CONSTRUCTOR","EC DSS UNIT TABLE","CREATE.ECOB41(NAME)")
"RTN","EC2P100",84,0)
 D EN^XPAR("PKG","ECOB DESTRUCTOR","EC DSS UNIT TABLE","DESTROY.ECOB41(HANDLE)")
"RTN","EC2P100",85,0)
 D EN^XPAR("PKG","ECOB METHOD","EC DSS UNIT TABLE","METHOD.ECOB41(.RESULT,ARGUMENT)")
"RTN","EC2P100",86,0)
 D MES^XPDUTL("EC DSS UNIT TABLE... published")
"RTN","EC2P100",87,0)
 ;;
"RTN","EC2P100",88,0)
 D EN^XPAR("PKG","ECOB CONSTRUCTOR","EC VISIT","CREATE.ECOBVST(NAME)")
"RTN","EC2P100",89,0)
 D EN^XPAR("PKG","ECOB DESTRUCTOR","EC VISIT","DESTROY.ECOBVST(HANDLE)")
"RTN","EC2P100",90,0)
 D EN^XPAR("PKG","ECOB METHOD","EC VISIT","METHOD.ECOBVST(.RESULT,ARGUMENT)")
"RTN","EC2P100",91,0)
 D MES^XPDUTL("EC VISIT... published")
"RTN","EC2P100",92,0)
 ;;
"RTN","EC2P100",93,0)
 D EN^XPAR("PKG","ECOB CONSTRUCTOR","EC VISITS","CREATE.ECOBVSTS(NAME)")
"RTN","EC2P100",94,0)
 D EN^XPAR("PKG","ECOB DESTRUCTOR","EC VISITS","DESTROY.ECOBVSTS(HANDLE)")
"RTN","EC2P100",95,0)
 D EN^XPAR("PKG","ECOB METHOD","EC VISITS","METHOD.ECOBVSTS(.RESULT,ARGUMENT)")
"RTN","EC2P100",96,0)
 D MES^XPDUTL("EC VISITS... published")
"RTN","EC2P100",97,0)
 ;;
"RTN","EC2P100",98,0)
 Q
"RTN","EC2P100",99,0)
 ;;
"RTN","ECDEAL2")
0^3^B6485318^n/a
"RTN","ECDEAL2",1,0)
ECDEAL2 ;ALB/MRY - Remove DSS UNITS from terminated users; 03 JUL 2009
"RTN","ECDEAL2",2,0)
 ;;2.0; EVENT CAPTURE ;**100**;8 May 96;Build 21
"RTN","ECDEAL2",3,0)
 Q
"RTN","ECDEAL2",4,0)
USER ;
"RTN","ECDEAL2",5,0)
 N ECDUZ,X,CNT,DSSU,DSSUN S (CNT,ECDUZ)=0
"RTN","ECDEAL2",6,0)
 K ^TMP($J,"ECDEAL2"),^TMP("ECDEAL2",$J)
"RTN","ECDEAL2",7,0)
 F  S ECDUZ=$O(^VA(200,ECDUZ)) Q:'ECDUZ  D
"RTN","ECDEAL2",8,0)
 . S X=$$ACTIVE^XUSER(ECDUZ) I +X Q
"RTN","ECDEAL2",9,0)
 . I $P(X,"^",2)'="TERMINATED" Q
"RTN","ECDEAL2",10,0)
 . I '$O(^VA(200,ECDUZ,"EC",0)) Q
"RTN","ECDEAL2",11,0)
 . S CNT=CNT+1,DSSU=0
"RTN","ECDEAL2",12,0)
 . F  S DSSU=$O(^VA(200,ECDUZ,"EC",DSSU)) Q:'DSSU  D
"RTN","ECDEAL2",13,0)
 . . S DSSUN=$$GET1^DIQ(724,+DSSU,.01)
"RTN","ECDEAL2",14,0)
 . . S ^TMP($J,"ECDEAL2",DSSUN,$P(^VA(200,ECDUZ,0),"^"),ECDUZ)=""
"RTN","ECDEAL2",15,0)
 . S DA(1)=ECDUZ,DA=0 F I=0:0 S DA=$O(^VA(200,DA(1),"EC",DA)) Q:'DA  S DIK="^VA(200,"_DA(1)_",""EC""," D ^DIK
"RTN","ECDEAL2",16,0)
 . K DA,DIK
"RTN","ECDEAL2",17,0)
 I CNT=0 K ^TMP($J,"ECDEAL2"),^TMP("ECDEAL2",$J) Q
"RTN","ECDEAL2",18,0)
 ;
"RTN","ECDEAL2",19,0)
MSG ;generate message to ECXMGR mailgroup
"RTN","ECDEAL2",20,0)
 N X,XMDUZ,XMTEXT,XMSUB,XMY,LINECT,DSSUN,EC200
"RTN","ECDEAL2",21,0)
 S XMDUZ="EVENT CAPTURE",XMSUB="Removed Terminated Users from DSS UNIT Access"
"RTN","ECDEAL2",22,0)
 S XMTEXT="^TMP(""ECDEAL2"",$J,",XMY(DUZ)="",XMY("G.ECMGR")=""
"RTN","ECDEAL2",23,0)
 S ^TMP("ECDEAL2",$J,1)="Event Capture - Terminated Users removed from DSS UNITS"
"RTN","ECDEAL2",24,0)
 S ^TMP("ECDEAL2",$J,2)=""
"RTN","ECDEAL2",25,0)
 S ^TMP("ECDEAL2",$J,3)="Total number of Terminated users: "_CNT
"RTN","ECDEAL2",26,0)
 S ^TMP("ECDEAL2",$J,4)=""
"RTN","ECDEAL2",27,0)
 S ^TMP("ECDEAL2",$J,5)="DSS UNITS           NAME of Terminated User Removed from DSS UNIT"
"RTN","ECDEAL2",28,0)
 S ^TMP("ECDEAL2",$J,6)="-----------------------------------------------------------------"
"RTN","ECDEAL2",29,0)
 S LINECT=6
"RTN","ECDEAL2",30,0)
 S DSSUN="",CNT=0
"RTN","ECDEAL2",31,0)
 F  S DSSUN=$O(^TMP($J,"ECDEAL2",DSSUN)) Q:DSSUN=""  D
"RTN","ECDEAL2",32,0)
 . S SPACES="",SPACESN=0
"RTN","ECDEAL2",33,0)
 . S ^TMP("ECDEAL2",$J,LINECT+1)=DSSUN
"RTN","ECDEAL2",34,0)
 . S SPACESN=20-(+$L(DSSUN)) F I=1:1:SPACESN S SPACES=SPACES_" "
"RTN","ECDEAL2",35,0)
 . S LINECT=LINECT+1
"RTN","ECDEAL2",36,0)
 . S CNT=0,EC200=""
"RTN","ECDEAL2",37,0)
 . F  S EC200=$O(^TMP($J,"ECDEAL2",DSSUN,EC200)) Q:EC200=""  D
"RTN","ECDEAL2",38,0)
 . . S CNT=CNT+1
"RTN","ECDEAL2",39,0)
 . . I CNT=1 S ^TMP("ECDEAL2",$J,LINECT)=^TMP("ECDEAL2",$J,LINECT)_SPACES_EC200
"RTN","ECDEAL2",40,0)
 . . I CNT>1 S ^TMP("ECDEAL2",$J,LINECT+1)="                    "_EC200
"RTN","ECDEAL2",41,0)
 . . S LINECT=LINECT+1,CNT=CNT+1
"RTN","ECDEAL2",42,0)
 . S ^TMP("ECDEAL2",$J,LINECT+1)=" ",LINECT=LINECT+1
"RTN","ECDEAL2",43,0)
 I CNT=0 S ^TMP("ECDEAL2",$J,LINECT+1)="No terminated users to display."
"RTN","ECDEAL2",44,0)
 D ^XMD K ^TMP("ECDEAL2",$J),^TMP($J,"ECDEAL2"),XMY
"RTN","ECDEAL2",45,0)
 Q
"RTN","ECGTP")
0^9^B274015^n/a
"RTN","ECGTP",1,0)
ECGTP ;ALB/CMF-driver for generic table printer;9 Aug 2009
"RTN","ECGTP",2,0)
 ;;2.0; EVENT CAPTURE ;**100**;8 May 96;Build 21
"RTN","ECGTP",3,0)
EN ; entry point - NOT FOR INTERACTIVE
"RTN","ECGTP",4,0)
 Q
"RTN","ECGTP",5,0)
 ;
"RTN","ECGTP",6,0)
START ; entry when queued
"RTN","ECGTP",7,0)
 U IO
"RTN","ECGTP",8,0)
 D PRINT
"RTN","ECGTP",9,0)
 D END
"RTN","ECGTP",10,0)
 Q
"RTN","ECGTP",11,0)
 ;
"RTN","ECGTP",12,0)
PRINT  ; print the object
"RTN","ECGTP",13,0)
 N X
"RTN","ECGTP",14,0)
 D METHOD^ECOB40(.X,ECOBHNDL_".Execute")
"RTN","ECGTP",15,0)
 Q
"RTN","ECGTP",16,0)
 ;
"RTN","ECGTP",17,0)
END   ; cleanup
"RTN","ECGTP",18,0)
 D DESTROY^ECOB40(ECOBHNDL)
"RTN","ECGTP",19,0)
 Q
"RTN","ECGTP",20,0)
 ;
"RTN","ECKILL")
0^4^B12351832^B12278874
"RTN","ECKILL",1,0)
ECKILL ;BIR/MAM,RHK,JPW-Kill Local Variables ;13 Apr 95
"RTN","ECKILL",2,0)
 ;;2.0; EVENT CAPTURE ;**4,5,10,17,18,23,42,54,65,76,100**;8 May 96;Build 21
"RTN","ECKILL",3,0)
 K %,%DT,%ZIS,A,AA,B,CNT,CNT1,COUNT,D,D0,D1,DA,DATA,DATA0,DATE,DFN,DHD,DIC,DIE,DINUM,DIOEND,DIR,DIROUT,DIRUT,DISYS,DTOUT,DUOUT,DLAYGO
"RTN","ECKILL",4,0)
 K EC,EC1,EC2,EC23,EC7,ECA,ECAC,ECACA,ECACC,ECAD,ECADD,ECALL,ECANE,ECAT,ECB,ECBDH,ECBSZ,ECC,ECC1,ECCAC,ECCAT,ECCC
"RTN","ECKILL",5,0)
 K ECCD,ECCH,ECCLC,ECCN,ECCS,ECCSC,ECCSN,ECD,ECD0,ECDA,ECDAT,ECDATA,ECDATA1,ECDATE,ECDFN,ECDI,ECDIA,ECDICA,ECDIV,ECDN,ECDOC,ECDR,ECDRG,ECDS1,ECDT,ECDT1,ECDU,ECDUZ
"RTN","ECKILL",6,0)
 K ECEC,ECED,ECED1,ECEDH,ECEDN,ECEXT,ECF,ECFCP,ECFD,ECFILE,ECFN,ECGRP,ECH
"RTN","ECKILL",7,0)
 K ECHD,ECHEAD,ECHOICE,ECI,ECID,ECINC,ECINST,ECINZ,ECIOP,ECITEM,ECJLP,ECL,ECL1,ECL2,ECL3,ECL4,ECL5,ECL6,ECLALL,ECLDT,ECLDT1,ECLL,ECLN,ECLOC,ECLOC1,ECLR,ECLRO
"RTN","ECKILL",8,0)
 K ECM,ECMAX,ECMESG,ECMESS,ECMG,ECMIN,ECMN,ECMNTH,ECMOD,ECMODS,ECMODF,ECMORE,ECMS,ECMSG,ECMSN,ECMW,ECN,ECNEW,ECNO,ECNODE,ECNR,ECNT
"RTN","ECKILL",9,0)
 K PA,PR,V,ECPCNT,ECELPT,ECPNAME,ECPRSL,VOL,ECPROCED,ECDTM,ECDSSU,ECDXO,ECYCLN
"RTN","ECKILL",10,0)
 ;
"RTN","ECKILL",11,0)
 ;- Kill ordering section default variables (ECODFN,ECOM)
"RTN","ECKILL",12,0)
 K ECO,ECO0,ECO1,ECO2,ECOB,ECOD0,ECODE,ECODE0,ECODFN,ECOLD,ECOM,ECON,ECOST,ECOUT
"RTN","ECKILL",13,0)
 ;
"RTN","ECKILL",14,0)
 ;- Kill procedure reason variables (ECPRPTR,ECPRSN,ECREAS)
"RTN","ECKILL",15,0)
 K ECP,ECP1,ECP2,ECPACK,ECPAD,ECPAT,ECPG,ECPIECE,ECPN,ECPO,ECPR,ECPRC,ECPRO,ECPROC,ECPROF,ECPROS,ECPRPTR,ECPRSN,ECPS,ECPT,ECPTF
"RTN","ECKILL",16,0)
 K ECQ,ECQTY,ECRAD0,ECRD,ECREAS,ECREDO,ECREPL,ECRFL,ECRL,ECRN,ECRPL1,ECRTN,ECRX,ECS,ECSA,ECSD,ECSD1,ECSDN,ECSEC,ECSECS,ECSN,ECSSN,ECST,ECSTAT,ECSU
"RTN","ECKILL",17,0)
 K ECT,ECTEMP,ECTEST,ECTR,ECTREAT,ECTRN,ECTWO,ECU,ECU2,ECU2A,ECU3,ECU3A,ECUCNT,ECUN,ECUN1,ECUN2,ECUN3,ECUNIT
"RTN","ECKILL",18,0)
 K ECUNM,ECURG,ECUSER,ECUSR,ECUT,ECUT2,ECUT3,ECUTN,ECUTN2,ECUTN3,ECV,ECWORD,ECX,ECXID,ECXMDA,ECXMDT,ECY,ECYN,ECYNZ,ECRY
"RTN","ECKILL",19,0)
 K FAC,FLDS,FR,I,IOP,J,JJ,K,LINE,LIST,LOC,LOS,MM,MSG,MSG1,MSG2,NODE,NODE1,OK,P1,P11,P2,P3,POP,Q,SC,SDATE,SSN,STC,SU,TEST,TIME,TO,TOTD,UNIT,USER,USRCNT,W,X,XMDUZ
"RTN","ECKILL",20,0)
 K X,XMDUZ,XMSUB,XMTEST,XMTEXT,XMY,Y,ECCNTCHK,ECP1N,ECPI,RK,ECPSYN,C,DI,DQ,DR,ECLINE,ECPIEN,ECSYN,MINCNT,MAXCNT,ECFLG,ECZ,ECPATN,ECFILN,ECPC,ECPF,ECPP,ECR,ECSUB,ECV1,ECVOL,ECDIR,EZCNT,ECERR
"RTN","ECKILL",21,0)
 K ECCODE,ECDDT,ECNATN,ECDONE,NATN,ECPSY,ECRDT,ECPG1,ECNOPE,SYN,ECOLD,ECOLDN,RK,ECOS,ECOSN,PRO,SS,ECPA,ANS
"RTN","ECKILL",22,0)
PCE K ECAO,ECSC,ECZEC,ECIR,ECINP,ECID,EC4,EC4N,ECDX,ECDXN,ECVST,ECVV,ECZZ,LOCP,LOCPX,LOCX,PN,PNP,PNODE,ECMST,ECDXS,ECHNC,ECCV,ECSHAD
"RTN","ECKILL",23,0)
 K ECPCL,ECPCID,ECPCRD,ECPKG,ECCPT,EC725,ECONE,ECNODE2,ECCLFLDS,ECELANS,ECELCOD,ECELDSP,ECELIG,ECIOFLG,ECNEWDT,ECPTSTAT,VAEL,ECPTCD
"RTN","ECKILL",24,0)
 K ECP10,ECP11,ECP15,ECP17,ECP19,ECP2,ECP20,ECP3,ECP4,ECPCE,ECPP1,ECPP1A,ECPP2,ECPP3,ECPP4,ECPP5,ECPP6,ECPP9
"RTN","ECKILL",25,0)
 K ^TMP($J)
"RTN","ECKILL",26,0)
 Q
"RTN","ECMFECS")
0^7^B43702074^B37201667
"RTN","ECMFECS",1,0)
ECMFECS ;ALB/JAM - Event Capture Management - Event Code Screen Filer ;1 Jul 08
"RTN","ECMFECS",2,0)
 ;;2.0; EVENT CAPTURE ;**25,33,47,55,65,95,100**;8 May 96;Build 21
"RTN","ECMFECS",3,0)
 ;
"RTN","ECMFECS",4,0)
 I $G(ECL0)'="" D MULTLOC Q  ;multiple location filing
"RTN","ECMFECS",5,0)
 ;
"RTN","ECMFECS",6,0)
FILE ;Used by the RPC broker to file EC Code Screens in file #720.3
"RTN","ECMFECS",7,0)
 ;     Variables passed in
"RTN","ECMFECS",8,0)
 ;       ECIEN     - IEN of #720.3, if editing
"RTN","ECMFECS",9,0)
 ;       ECL       - Location
"RTN","ECMFECS",10,0)
 ;       ECD       - DSS Unit
"RTN","ECMFECS",11,0)
 ;       ECC       - Category
"RTN","ECMFECS",12,0)
 ;       ECP       - Procedure
"RTN","ECMFECS",13,0)
 ;       ECST      - Event code screen status
"RTN","ECMFECS",14,0)
 ;       ECSYN     - Synonym
"RTN","ECMFECS",15,0)
 ;       ECVOL     - Volume
"RTN","ECMFECS",16,0)
 ;       ECAC      - Associated Clinic
"RTN","ECMFECS",17,0)
 ;       ECREAS    - Reason indicator
"RTN","ECMFECS",18,0)
 ;       ECRES0..n - array of reasons
"RTN","ECMFECS",19,0)
 ;
"RTN","ECMFECS",20,0)
 ;     Variable return
"RTN","ECMFECS",21,0)
 ;       ^TMP($J,"ECMSG",n)=Success or failure to file in #720.3^Message
"RTN","ECMFECS",22,0)
 ;
"RTN","ECMFECS",23,0)
 N ECCH,ECERR,ECX,ECY,ECFLG,ECR,ECI,X,Y,DIK,DIE
"RTN","ECMFECS",24,0)
 N ECLOC  ;protect from XREF reuse & kills
"RTN","ECMFECS",25,0)
 N ECRES  ;prevent ECREAS overwrite
"RTN","ECMFECS",26,0)
 S ECERR=0 D CHKDT I ECERR Q
"RTN","ECMFECS",27,0)
 D VALDATA I ECERR Q
"RTN","ECMFECS",28,0)
 I ECIEN'="" S ECFLG=0,ECX=$G(^ECJ(ECIEN,0)),ECY=$P(ECX,U) D  I ECERR Q
"RTN","ECMFECS",29,0)
 .I ECX="" D  Q
"RTN","ECMFECS",30,0)
 ..S ECERR=1,^TMP($J,"ECMSG",1)="0^Event Code Screen Not on File" Q
"RTN","ECMFECS",31,0)
 .S ECL=$P(ECY,"-"),ECD=$P(ECY,"-",2),ECC=$P(ECY,"-",3),ECP=$P(ECY,"-",4)
"RTN","ECMFECS",32,0)
 .I ECST="A",$P(ECX,U,2)'="" S DA=ECIEN,DIE="^ECJ(",DR="1///@" D ^DIE Q
"RTN","ECMFECS",33,0)
 .I ECST="I",$P(ECX,U,2)="" S $P(^ECJ(ECIEN,0),U,2)=DT
"RTN","ECMFECS",34,0)
 S ECC=$G(ECC,0),ECCH=ECL_"-"_ECD_"-"_ECC_"-"_ECP
"RTN","ECMFECS",35,0)
 I '$P($G(^ECD(ECD,0)),U,11),ECC D  Q
"RTN","ECMFECS",36,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^DSS Unit/Category inconsistency" Q
"RTN","ECMFECS",37,0)
 I ECIEN="" D  I ECERR Q
"RTN","ECMFECS",38,0)
 .I $D(^ECJ("B",ECCH)) D  Q
"RTN","ECMFECS",39,0)
 ..S ECERR=1,^TMP($J,"ECMSG",1)="0^EC Screen Exist" Q
"RTN","ECMFECS",40,0)
 .D NEWIEN
"RTN","ECMFECS",41,0)
 S DA=ECIEN,DIK="^ECJ(",ECRES=$S(ECREAS="Y":1,1:0) D IX^DIK
"RTN","ECMFECS",42,0)
 S ^ECJ("AP",ECL,ECD,ECC,ECP,ECIEN)="",^ECJ("APP",ECL,ECD,ECP,ECIEN)=""
"RTN","ECMFECS",43,0)
 S $P(^ECJ(ECIEN,"PRO"),U)=ECP
"RTN","ECMFECS",44,0)
 S DR="53////"_$S($G(ECSYN)'="":ECSYN,1:"@")_";54////"_$G(ECVOL,1)
"RTN","ECMFECS",45,0)
 S DR=DR_";55////"_$S($G(ECAC)'="":ECAC,1:"@")_";56////"_ECRES,DIE="^ECJ(",DA=ECIEN
"RTN","ECMFECS",46,0)
 D ^DIE K DA,DR,DIE
"RTN","ECMFECS",47,0)
 I $D(DTOUT) D RECDEL S ^TMP($J,"ECMSG",1)="0^Record not Filed" Q
"RTN","ECMFECS",48,0)
 I ECRES D
"RTN","ECMFECS",49,0)
 .N ECLARR,ECLIEN
"RTN","ECMFECS",50,0)
 .K DIC,DA,DR,ECX S DIC="^ECL(",DIC(0)="L",DLAYGO=720.5,ECR=0
"RTN","ECMFECS",51,0)
 .F ECI=0:1 S ECX="ECRES"_ECI Q:'$D(@ECX)  S ECR=(@ECX) D
"RTN","ECMFECS",52,0)
 ..Q:ECR=""  I '$D(^ECR(ECR,0)) Q
"RTN","ECMFECS",53,0)
 ..S ECLARR(ECR)=""  ; control of valid passed in Procedure Reason Codes
"RTN","ECMFECS",54,0)
 ..I '$D(^ECL("AD",ECIEN,ECR)) S X=ECR,DIC("DR")=".02////"_ECIEN
"RTN","ECMFECS",55,0)
 ..K DD,DO,DLAYGO D FILE^DICN
"RTN","ECMFECS",56,0)
 .;kill nodes no Procedure Reason Code passed in but "AD" Xref exists 
"RTN","ECMFECS",57,0)
 .K DIK S DIK="^ECL(",DA=""
"RTN","ECMFECS",58,0)
 .S ECR=0 F  S ECR=$O(^ECL("AD",ECIEN,ECR)) Q:ECR=""  D
"RTN","ECMFECS",59,0)
 ..I $D(ECLARR(ECR)) Q  ;procedure reason code passed in - don't remove
"RTN","ECMFECS",60,0)
 ..S ECLIEN=0 F  S ECLIEN=$O(^ECL("AD",ECIEN,ECR,ECLIEN)) Q:ECLIEN=""  S DA=ECLIEN D ^DIK
"RTN","ECMFECS",61,0)
 S ^TMP($J,"ECMSG",1)="1^Record Filed"_U_ECIEN
"RTN","ECMFECS",62,0)
 K DIC,DA,DR,ECX,DIK
"RTN","ECMFECS",63,0)
 Q
"RTN","ECMFECS",64,0)
 ;
"RTN","ECMFECS",65,0)
VALDATA ;validate data
"RTN","ECMFECS",66,0)
 N ECRRX,ECRES
"RTN","ECMFECS",67,0)
 S DIC="^DIC(4,",DIC(0)="NX",X=ECL D ^DIC I Y=-1 D  Q
"RTN","ECMFECS",68,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Location"
"RTN","ECMFECS",69,0)
 S DIC="^ECD(",DIC(0)="NX",X=ECD D ^DIC I Y=-1 D  Q
"RTN","ECMFECS",70,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid DSS Unit"
"RTN","ECMFECS",71,0)
 I ECC S DIC="^EC(726,",DIC(0)="NX",X=ECC D ^DIC I Y=-1 D  Q
"RTN","ECMFECS",72,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Category"
"RTN","ECMFECS",73,0)
 I ECP'="" D  I ECERR Q
"RTN","ECMFECS",74,0)
 .; ATG-1003-32110 : by VMP
"RTN","ECMFECS",75,0)
 .I ECP["ICPT" S ECRRX=$$CPT^ICPTCOD(+ECP) I +ECRRX>0 Q:$G(ECIEN)  I $P(ECRRX,U,7) Q
"RTN","ECMFECS",76,0)
 .I ECP["EC",$D(^EC(725,+ECP,0)) Q
"RTN","ECMFECS",77,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Procedure"
"RTN","ECMFECS",78,0)
 I $G(ECAC)'="" D  I ECERR Q
"RTN","ECMFECS",79,0)
 .D CHK^DIE(720.3,55,"E","`"_ECAC,.ECRRX) I ECRRX'=ECAC D  Q
"RTN","ECMFECS",80,0)
 ..S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Associated Clinic"
"RTN","ECMFECS",81,0)
 .S ECRES=$$CLNCK^SDUTL2(ECAC,0) I 'ECRES D  S ECERR=1
"RTN","ECMFECS",82,0)
 ..S ^TMP($J,"ECMSG",1)=ECRES_" Clinic MUST be corrected before filing."
"RTN","ECMFECS",83,0)
 I $G(ECSYN)'="" D CHK^DIE(720.3,53,"E",ECSYN,.ECRRX) I ECRRX'=ECSYN D  Q
"RTN","ECMFECS",84,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Synonym"
"RTN","ECMFECS",85,0)
 I "^N^Y^"'[U_ECREAS_U D  Q
"RTN","ECMFECS",86,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Invalid Reason Response"
"RTN","ECMFECS",87,0)
 Q
"RTN","ECMFECS",88,0)
RECDEL ; Delete record
"RTN","ECMFECS",89,0)
 I ECFLG S DA=ECIEN,DIK="^ECJ(" D ^DIK K DA,DIK
"RTN","ECMFECS",90,0)
 Q
"RTN","ECMFECS",91,0)
 ;
"RTN","ECMFECS",92,0)
NEWIEN ;Create new IEN in file #720.3
"RTN","ECMFECS",93,0)
 N DIC,DA,DD,DO
"RTN","ECMFECS",94,0)
 L +^ECJ(0):10 I '$T S ECERR=1,^TMP($J,"ECMSG",1)="0^Another user is editing this file." Q
"RTN","ECMFECS",95,0)
 S X=ECCH,DIC="^ECJ(",DIC(0)="L",DLAYGO=720.3 D FILE^DICN
"RTN","ECMFECS",96,0)
 L -^ECJ(0)
"RTN","ECMFECS",97,0)
 S ECIEN=+Y,$P(^ECJ(ECIEN,0),U,3)=DT,$P(^ECJ(ECIEN,"PRO"),U)=ECP
"RTN","ECMFECS",98,0)
 I ECST="I" S $P(^ECJ(ECIEN,0),U,2)=DT
"RTN","ECMFECS",99,0)
 Q
"RTN","ECMFECS",100,0)
CHKDT ;Required Data Check
"RTN","ECMFECS",101,0)
 N I,C
"RTN","ECMFECS",102,0)
 S C=1
"RTN","ECMFECS",103,0)
 F I="ECL","ECD","ECC","ECP","ECREAS" D
"RTN","ECMFECS",104,0)
 .I $G(@I)="" S ^TMP($J,"ECMSG",C)="0^Key data missing "_I,C=C+1,ECERR=1
"RTN","ECMFECS",105,0)
 Q
"RTN","ECMFECS",106,0)
REASON ;Used by the RPC broker to file EC Reasons in file #720.4
"RTN","ECMFECS",107,0)
 ;     Variables passed in
"RTN","ECMFECS",108,0)
 ;       ECIEN     - IEN of #720.4, if editing
"RTN","ECMFECS",109,0)
 ;       ECRES     - Reason
"RTN","ECMFECS",110,0)
 ;       ECST      - Reason status
"RTN","ECMFECS",111,0)
 ;
"RTN","ECMFECS",112,0)
 ;     Variable return
"RTN","ECMFECS",113,0)
 ;       ^TMP($J,"ECMSG",n)=Success or failure to file in #720.4^Message
"RTN","ECMFECS",114,0)
 ;
"RTN","ECMFECS",115,0)
 N ECOST,ECERR,ECFLG,X,Y,DIC,DIE
"RTN","ECMFECS",116,0)
 S ECERR=0 I $G(ECRES)="" D  I ECERR Q
"RTN","ECMFECS",117,0)
 .S ^TMP($J,"ECMSG",1)="0^Key data missing - Reason",ECERR=1
"RTN","ECMFECS",118,0)
 D CHK^DIE(720.4,.01,,ECRES,.ECRRX) I ECRRX="^" D  Q
"RTN","ECMFECS",119,0)
 .S ^TMP($J,"ECMSG",1)="0^Invalid Reason",ECERR=1
"RTN","ECMFECS",120,0)
 S ECST=$G(ECST,"A")
"RTN","ECMFECS",121,0)
 I "^I^A^"'[U_ECST_U S ^TMP($J,"ECMSG",1)="0^Invalid Reason Status" Q
"RTN","ECMFECS",122,0)
 S ECST=$S(ECST="I":0,1:1),ECIEN=$G(ECIEN),ECFLG=1
"RTN","ECMFECS",123,0)
 I ECIEN'="" S ECFLG=0 I $G(^ECR(ECIEN,0))="" D  I ECERR K ECST Q
"RTN","ECMFECS",124,0)
 .S ECERR=1,^TMP($J,"ECMSG",1)="0^Reason Not on File" Q
"RTN","ECMFECS",125,0)
 I ECIEN="" D  I ECERR K ECST Q
"RTN","ECMFECS",126,0)
 .I $D(^ECR("B",ECRES)) S ECERR=1,^TMP($J,"ECMSG",1)="0^Reason Exist" Q
"RTN","ECMFECS",127,0)
 .K DIE,DR,DA
"RTN","ECMFECS",128,0)
 .L +^ECR(0):10 I '$T S ECERR=1,^TMP($J,"ECMSG",1)="0^Another user is editing this file." Q
"RTN","ECMFECS",129,0)
 .S X=ECRES,DIC="^ECR(",DIC(0)="L",DLAYGO=720.4 D FILE^DICN
"RTN","ECMFECS",130,0)
 .L -^ECR(0)
"RTN","ECMFECS",131,0)
 .S ECIEN=+Y
"RTN","ECMFECS",132,0)
 S ECOST=$P($G(^ECR(ECIEN,0)),U,2)
"RTN","ECMFECS",133,0)
 I ECST'=ECOST D
"RTN","ECMFECS",134,0)
 .S DIE=DIC,DA=ECIEN,DR=".02////"_ECST D ^DIE
"RTN","ECMFECS",135,0)
 S ^TMP($J,"ECMSG",1)="1^Reason Filed"_U_ECIEN K ECST
"RTN","ECMFECS",136,0)
 Q
"RTN","ECMFECS",137,0)
 ;
"RTN","ECMFECS",138,0)
MULTLOC ;Entry point for multiple locations
"RTN","ECMFECS",139,0)
 ;  Input:
"RTN","ECMFECS",140,0)
 ;    ECL0..n - locations IEN
"RTN","ECMFECS",141,0)
 ;    ECIEN - IEN for edits; "" for new records
"RTN","ECMFECS",142,0)
 ;    See FILE tag for other variables passed in
"RTN","ECMFECS",143,0)
 ;
"RTN","ECMFECS",144,0)
 ;  Output:
"RTN","ECMFECS",145,0)
 ;    ^TMP($J,"ECMSG",n)=Success or failure
"RTN","ECMFECS",146,0)
 ;
"RTN","ECMFECS",147,0)
 N ECERR  ;error flag
"RTN","ECMFECS",148,0)
 N ECI    ;generic index
"RTN","ECMFECS",149,0)
 N ECL    ;location IEN
"RTN","ECMFECS",150,0)
 N ECLN   ;location name
"RTN","ECMFECS",151,0)
 N ECLOC  ;array of locations
"RTN","ECMFECS",152,0)
 N ECX    ;variable name (ex. ECL1)
"RTN","ECMFECS",153,0)
 ;
"RTN","ECMFECS",154,0)
 ;short circuit when IEN passed w/multiple locations
"RTN","ECMFECS",155,0)
 I (+$G(ECIEN)>0)&(ECL0="ALL"!($D(ECL1))) D  Q
"RTN","ECMFECS",156,0)
 . S ^TMP($J,"ECMSG",1)=0_U_"Multiple location edits not allowed"
"RTN","ECMFECS",157,0)
 ;
"RTN","ECMFECS",158,0)
 I ECL0="ALL" D
"RTN","ECMFECS",159,0)
 . D LOCARRY^ECRUTL  ;returns all sites in ECLOC(n)=IEN^name format
"RTN","ECMFECS",160,0)
 E  D
"RTN","ECMFECS",161,0)
 . F ECI=0:1 S ECX="ECL"_ECI Q:'$D(@ECX)  D
"RTN","ECMFECS",162,0)
 . . S ECLN=$$GET1^DIQ(4,@ECX_",",.01,"")
"RTN","ECMFECS",163,0)
 . . S ECLOC(ECI+1)=@ECX_U_ECLN
"RTN","ECMFECS",164,0)
 ;
"RTN","ECMFECS",165,0)
 S ECI=0
"RTN","ECMFECS",166,0)
 F  S ECI=$O(ECLOC(ECI)) Q:'ECI  D
"RTN","ECMFECS",167,0)
 . I ECL0="ALL"!($D(ECL1)) N ECIEN S ECIEN=""  ;reset IEN for multiple
"RTN","ECMFECS",168,0)
 . S ECL=+ECLOC(ECI)
"RTN","ECMFECS",169,0)
 . D FILE^ECMFECS
"RTN","ECMFECS",170,0)
 . I $P(^TMP($J,"ECMSG",1),U)=0 S ECERR(ECI)=ECLOC(ECI)_U_$P(^TMP($J,"ECMSG",1),U,2)
"RTN","ECMFECS",171,0)
 ;
"RTN","ECMFECS",172,0)
 ;process results
"RTN","ECMFECS",173,0)
 I '$D(ECERR) S ^TMP($J,"ECMSG",1)=1_U_"Records filed for all locations"
"RTN","ECMFECS",174,0)
 E  D PROCERR(.ECERR)
"RTN","ECMFECS",175,0)
 Q
"RTN","ECMFECS",176,0)
 ;
"RTN","ECMFECS",177,0)
PROCERR(ECERR) ;process multiple location errors
"RTN","ECMFECS",178,0)
 ;  Input:
"RTN","ECMFECS",179,0)
 ;    ECERR - array of location errors
"RTN","ECMFECS",180,0)
 ;
"RTN","ECMFECS",181,0)
 ;  Output:
"RTN","ECMFECS",182,0)
 ;    ^TMP($J,"ECMSG" - RPC results global array
"RTN","ECMFECS",183,0)
 ;    Format:  ^TMP($J,"ECMSG",1)="0^One or more locations did not file"
"RTN","ECMFECS",184,0)
 ;             ^TMP($J,"ECMSG",n)=Location_IEN^Location_name^Error_text
"RTN","ECMFECS",185,0)
 ;
"RTN","ECMFECS",186,0)
 Q:'$D(ECERR)
"RTN","ECMFECS",187,0)
 ;
"RTN","ECMFECS",188,0)
 N ECCNT,ECI
"RTN","ECMFECS",189,0)
 S ECCNT=1
"RTN","ECMFECS",190,0)
 S ^TMP($J,"ECMSG",ECCNT)=0_U_"One or more locations did not file"
"RTN","ECMFECS",191,0)
 S ECI=0
"RTN","ECMFECS",192,0)
 F  S ECI=$O(ECERR(ECI)) Q:'ECI  S ECCNT=ECCNT+1 D
"RTN","ECMFECS",193,0)
 . S ^TMP($J,"ECMSG",ECCNT)=$P(ECERR(ECI),U)_U_$P(ECERR(ECI),U,2)_U_$P(ECERR(ECI),U,3)
"RTN","ECMFECS",194,0)
 Q
"RTN","ECOB")
0^10^B19937351^n/a
"RTN","ECOB",1,0)
ECOB ;BP/CMF - base object 
"RTN","ECOB",2,0)
 ;;2.0;EVENT CAPTURE;**100**;8 May 96;Build 21
"RTN","ECOB",3,0)
 ;@author  - Chris Flegel
"RTN","ECOB",4,0)
 ;@date    - 17 May 2009
"RTN","ECOB",5,0)
 ;@version - 1.0
"RTN","ECOB",6,0)
 ;;
"RTN","ECOB",7,0)
 Q
"RTN","ECOB",8,0)
 ;; private methods
"RTN","ECOB",9,0)
COUNT(NAME) ; increment counter
"RTN","ECOB",10,0)
 N COUNT
"RTN","ECOB",11,0)
 S COUNT=+$O(@NAME@(9999999),-1)+1
"RTN","ECOB",12,0)
 S @NAME@(COUNT,0)=$G(DT)+1
"RTN","ECOB",13,0)
 Q COUNT
"RTN","ECOB",14,0)
 ;;
"RTN","ECOB",15,0)
PARSE(METHOD,VALUE)  ;
"RTN","ECOB",16,0)
 I METHOD="Argument" D  Q
"RTN","ECOB",17,0)
 .S HANDLE=$P(VALUE,".")
"RTN","ECOB",18,0)
 .Q
"RTN","ECOB",19,0)
 I METHOD="Child" D  Q
"RTN","ECOB",20,0)
 .S CHILD=$P(VALUE,"Handle.",2)
"RTN","ECOB",21,0)
 .Q
"RTN","ECOB",22,0)
 I METHOD="Handle" D  Q
"RTN","ECOB",23,0)
 .S NAME=$P(VALUE,".",1)
"RTN","ECOB",24,0)
 .S COUNT=$P(VALUE,".",2)
"RTN","ECOB",25,0)
 .Q
"RTN","ECOB",26,0)
 I METHOD="Tag" D  Q
"RTN","ECOB",27,0)
 .S TAG("routine")=$P(VALUE,"(")
"RTN","ECOB",28,0)
 .S TAG("parameters")=$P(VALUE,TAG("routine"),2)
"RTN","ECOB",29,0)
 .Q
"RTN","ECOB",30,0)
 ;;
"RTN","ECOB",31,0)
 ;; protected methods
"RTN","ECOB",32,0)
CREATE(NAME) ; return unique handle
"RTN","ECOB",33,0)
 N HANDLE
"RTN","ECOB",34,0)
 S NAME=$TR(NAME,".","") ;reserve period for piecers
"RTN","ECOB",35,0)
 S HANDLE=$TR(NAME,")","")_","_$$COUNT(NAME)_")"
"RTN","ECOB",36,0)
 D PROPERTY(HANDLE,"Pu","_class","EC BASE")
"RTN","ECOB",37,0)
 D PROPERTY(HANDLE,"Pu","_routine","METHOD^DGOB(.RESULT,ARGUMENT)")
"RTN","ECOB",38,0)
 D PROPERTY(HANDLE,"Pu","_name","Basic Pharmacy Object")
"RTN","ECOB",39,0)
 D PROPERTY(HANDLE,"Pu","_namespace",NAME)
"RTN","ECOB",40,0)
 D PROPERTY(HANDLE,"Pr","_parent","")
"RTN","ECOB",41,0)
 Q HANDLE
"RTN","ECOB",42,0)
 ;;
"RTN","ECOB",43,0)
COLLECT(HANDLE,CHILD,SCOPE,PROPERTY) ; attach or collect child objects
"RTN","ECOB",44,0)
 S SCOPE=$S($G(SCOPE)'="":SCOPE,1:"Pu")
"RTN","ECOB",45,0)
 S PROPERTY=$S($G(PROPERTY)'="":PROPERTY,1:"-1")
"RTN","ECOB",46,0)
 S @HANDLE@(SCOPE,PROPERTY)=CHILD
"RTN","ECOB",47,0)
 S @HANDLE@("Pr","Handle",CHILD)=PROPERTY
"RTN","ECOB",48,0)
 Q 1
"RTN","ECOB",49,0)
 ;;
"RTN","ECOB",50,0)
DESTROY(HANDLE) ; cleanup
"RTN","ECOB",51,0)
 N CHILD
"RTN","ECOB",52,0)
 S CHILD=0
"RTN","ECOB",53,0)
 F  S CHILD=$O(@HANDLE@("Pr","Handle",CHILD)) Q:'CHILD  D
"RTN","ECOB",54,0)
 .K @CHILD
"RTN","ECOB",55,0)
 .Q
"RTN","ECOB",56,0)
 K @HANDLE
"RTN","ECOB",57,0)
 Q 1
"RTN","ECOB",58,0)
 ;;
"RTN","ECOB",59,0)
FUNCTION(HANDLE,ARGUMENT)  ;
"RTN","ECOB",60,0)
 N RESULT
"RTN","ECOB",61,0)
 D METHOD(.RESULT,HANDLE_"."_ARGUMENT)
"RTN","ECOB",62,0)
 Q RESULT
"RTN","ECOB",63,0)
 ;;
"RTN","ECOB",64,0)
GET(RESULT,HANDLE,SCOPE,PROPERTY) ; get simple property
"RTN","ECOB",65,0)
 S SCOPE=$S($G(SCOPE)'="":SCOPE,1:"Pu")
"RTN","ECOB",66,0)
 S PROPERTY=$S($G(PROPERTY)'="":PROPERTY,1:"-1")
"RTN","ECOB",67,0)
 S RESULT=$G(@HANDLE@(SCOPE,PROPERTY))
"RTN","ECOB",68,0)
 S:$D(RESULT)=0 RESULT="-1^Property "_PROPERTY_" does not exist."
"RTN","ECOB",69,0)
 Q
"RTN","ECOB",70,0)
 ;;
"RTN","ECOB",71,0)
ISHANDLE(HANDLE,CHILD)  ;
"RTN","ECOB",72,0)
 S HANDLE=$S($G(HANDLE)'="":HANDLE,1:-1)
"RTN","ECOB",73,0)
 S CHILD=$S($G(CHILD)'="":CHILD,1:-1)
"RTN","ECOB",74,0)
 Q $D(@HANDLE@("Pr","Handle",CHILD))
"RTN","ECOB",75,0)
 ;;
"RTN","ECOB",76,0)
METHOD(RESULT,ARGUMENT) ; most basic handler
"RTN","ECOB",77,0)
 N HANDLE,TAG
"RTN","ECOB",78,0)
 S RESULT=-1
"RTN","ECOB",79,0)
 D PARSE("Argument",ARGUMENT)
"RTN","ECOB",80,0)
 D GET(.TAG,HANDLE,"Pu","_routine")
"RTN","ECOB",81,0)
 D PARSE("Tag",TAG)
"RTN","ECOB",82,0)
 Q:TAG("routine")="METHOD^DGOB"  ;stop recursive call
"RTN","ECOB",83,0)
 Q:TAG("routine")=""
"RTN","ECOB",84,0)
 I $T(@TAG("routine"))'="" D  Q
"RTN","ECOB",85,0)
 .I TAG("parameters")="(.RESULT,ARGUMENT)" D @TAG
"RTN","ECOB",86,0)
 Q
"RTN","ECOB",87,0)
 ;;
"RTN","ECOB",88,0)
MOVE(RESULT,HANDLE,SOURCE,SCOPE,PROPERTY) ;copy simple object property to another
"RTN","ECOB",89,0)
 N X
"RTN","ECOB",90,0)
 D GET(.X,SOURCE,SCOPE,PROPERTY)
"RTN","ECOB",91,0)
 D SET(.RESULT,HANDLE,SCOPE,PROPERTY,X)
"RTN","ECOB",92,0)
 Q
"RTN","ECOB",93,0)
 ;;
"RTN","ECOB",94,0)
PROPERTY(HANDLE,SCOPE,PROPERTY,VALUE) ; create simple property node
"RTN","ECOB",95,0)
 S HANDLE=$S($G(HANDLE)'="":HANDLE,1:-1)
"RTN","ECOB",96,0)
 S SCOPE=$S($G(SCOPE)'="":SCOPE,1:"Pu")
"RTN","ECOB",97,0)
 S PROPERTY=$S($G(PROPERTY)'="":PROPERTY,1:-1)
"RTN","ECOB",98,0)
 S @HANDLE@(SCOPE,PROPERTY)=$G(VALUE)
"RTN","ECOB",99,0)
 Q 1
"RTN","ECOB",100,0)
 ;;
"RTN","ECOB",101,0)
SELF(RESULT,HANDLE,CLASS,NAME,ROUTINE,PARENT) ; set 'self' properties of object
"RTN","ECOB",102,0)
 N RESULT
"RTN","ECOB",103,0)
 D:CLASS'="" SET(.RESULT,HANDLE,"Pu","_class",CLASS)
"RTN","ECOB",104,0)
 D:NAME'="" SET(.RESULT,HANDLE,"Pu","_name",NAME)
"RTN","ECOB",105,0)
 D:ROUTINE'="" SET(.RESULT,HANDLE,"Pu","_routine",ROUTINE)
"RTN","ECOB",106,0)
 D:PARENT'="" SET(.RESULT,HANDLE,"Pr","_parent",PARENT)
"RTN","ECOB",107,0)
 Q
"RTN","ECOB",108,0)
 ;;
"RTN","ECOB",109,0)
SET(RESULT,HANDLE,SCOPE,PROPERTY,VALUE) ; set simple property
"RTN","ECOB",110,0)
 S SCOPE=$S($G(SCOPE)'="":SCOPE,1:"Pu")
"RTN","ECOB",111,0)
 S PROPERTY=$S($G(PROPERTY)'="":PROPERTY,1:"-1")
"RTN","ECOB",112,0)
 I '$D(@HANDLE@(SCOPE,PROPERTY)) D  Q
"RTN","ECOB",113,0)
 .S RESULT="-1^Property "_PROPERTY_" does not exist."
"RTN","ECOB",114,0)
 S @HANDLE@(SCOPE,PROPERTY)=VALUE
"RTN","ECOB",115,0)
 S RESULT=1
"RTN","ECOB",116,0)
 Q
"RTN","ECOB",117,0)
 ;;
"RTN","ECOB",118,0)
SHOW(RESULT,HANDLE,SCOPE,PROPERTY,PARAMS) ; show a property
"RTN","ECOB",119,0)
 N JUSTIFY,CHILD,CLASS
"RTN","ECOB",120,0)
 D GET(.RESULT,HANDLE,SCOPE,PROPERTY)
"RTN","ECOB",121,0)
 S JUSTIFY=$S(+PARAMS:+PARAMS,1:0)
"RTN","ECOB",122,0)
 I PARAMS["/" W !,$J("</"_PROPERTY_">  ",JUSTIFY) Q
"RTN","ECOB",123,0)
 W !,$J("<"_PROPERTY_"> : ",JUSTIFY),RESULT
"RTN","ECOB",124,0)
 D:$$ISHANDLE(HANDLE,RESULT)
"RTN","ECOB",125,0)
 .S CHILD=RESULT
"RTN","ECOB",126,0)
 .D GET(.CLASS,CHILD,"Pu","_class")
"RTN","ECOB",127,0)
 .W " [class = "_CLASS_"]"
"RTN","ECOB",128,0)
 Q
"RTN","ECOB",129,0)
 ;; 
"RTN","ECOB",130,0)
TREE(CHILD,HANDLE,SCOPE,PROPERTY,JUSTIFY) Q  ; no longer used
"RTN","ECOB19")
0^11^B2105969^n/a
"RTN","ECOB19",1,0)
ECOB19 ;BP/CMF - Patient Object
"RTN","ECOB19",2,0)
 ;;2.0;EVENT CAPTURE;**100**;8 May 96;Build 21
"RTN","ECOB19",3,0)
 ;@author  - Chris Flegel
"RTN","ECOB19",4,0)
 ;@date    - 17 May 2009
"RTN","ECOB19",5,0)
 ;@version - 1.0
"RTN","ECOB19",6,0)
 ;;
"RTN","ECOB19",7,0)
 Q
"RTN","ECOB19",8,0)
 ;; private methods
"RTN","ECOB19",9,0)
OB2(RESULT,ARGUMENT) ; shortcut to primitive utility
"RTN","ECOB19",10,0)
 D METHOD^ECOB2(.RESULT,ARGUMENT)
"RTN","ECOB19",11,0)
 Q
"RTN","ECOB19",12,0)
 ;;
"RTN","ECOB19",13,0)
OBP(RESULT,ARGUMENT) ; shortcut to property object
"RTN","ECOB19",14,0)
 D METHOD^ECOBP(.RESULT,ARGUMENT)
"RTN","ECOB19",15,0)
 Q
"RTN","ECOB19",16,0)
 ;;
"RTN","ECOB19",17,0)
 ;; public methods
"RTN","ECOB19",18,0)
CREATE(NAME)  ;
"RTN","ECOB19",19,0)
 ; call parent first
"RTN","ECOB19",20,0)
 N HANDLE,CHILD
"RTN","ECOB19",21,0)
 S HANDLE=$$CREATE^ECOB3(NAME)
"RTN","ECOB19",22,0)
 D OB2(.X,HANDLE_".Set_class.EC OBU PATIENT")
"RTN","ECOB19",23,0)
 D OB2(.X,HANDLE_".Set_name.Patient")
"RTN","ECOB19",24,0)
 D OB2(.X,HANDLE_".Set_routine.METHOD^ECOB19(.RESULT,ARGUMENT)")
"RTN","ECOB19",25,0)
 ;;
"RTN","ECOB19",26,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.SSN")
"RTN","ECOB19",27,0)
 D OBP(.X,CHILD_".SetAddedByClass.EC OBU PATIENT")
"RTN","ECOB19",28,0)
 D OBP(.X,CHILD_".SetValue.")
"RTN","ECOB19",29,0)
 D OBP(.X,CHILD_".SetDefaultValue.")
"RTN","ECOB19",30,0)
 ; complex properties last
"RTN","ECOB19",31,0)
 D METHOD(.X,HANDLE_".Root.Add.EC OBU PATIENT")
"RTN","ECOB19",32,0)
 Q HANDLE
"RTN","ECOB19",33,0)
 ;;
"RTN","ECOB19",34,0)
DESTROY(HANDLE)  ;
"RTN","ECOB19",35,0)
 ; call parent last
"RTN","ECOB19",36,0)
 Q $$DESTROY^ECOB3(HANDLE)
"RTN","ECOB19",37,0)
 ;;
"RTN","ECOB19",38,0)
METHOD(RESULT,ARGUMENT)  ;
"RTN","ECOB19",39,0)
 D METHOD^ECOB3(.RESULT,ARGUMENT)
"RTN","ECOB19",40,0)
 Q
"RTN","ECOB19",41,0)
 ;;
"RTN","ECOB2")
0^12^B27889135^n/a
"RTN","ECOB2",1,0)
ECOB2 ;BP/CMF - Utility Object
"RTN","ECOB2",2,0)
 ;;2.0;EVENT CAPTURE;**100**;8 May 96;Build 21
"RTN","ECOB2",3,0)
 ;@author  - Chris Flegel
"RTN","ECOB2",4,0)
 ;@date    - 17 May 2009
"RTN","ECOB2",5,0)
 ;@version - 1.0
"RTN","ECOB2",6,0)
 ;;
"RTN","ECOB2",7,0)
 Q
"RTN","ECOB2",8,0)
 ;; private methods
"RTN","ECOB2",9,0)
CLASS(RESULT,HANDLE,PARAMS)  ;
"RTN","ECOB2",10,0)
 N JUSTIFY,OFFSET,PROPERTY,NAME,COUNT,CHILD,SCOPE
"RTN","ECOB2",11,0)
 D PARSE("Handle",HANDLE)
"RTN","ECOB2",12,0)
 D PARSE("Offset",PARAMS)
"RTN","ECOB2",13,0)
 D SHOW^ECOB(.X,HANDLE,"Pu","_class",JUSTIFY)
"RTN","ECOB2",14,0)
 D SHOW^ECOB(.X,HANDLE,"Pu","_routine",JUSTIFY)
"RTN","ECOB2",15,0)
 D SHOW^ECOB(.X,HANDLE,"Pr","_parent",JUSTIFY)
"RTN","ECOB2",16,0)
 ; show properties only
"RTN","ECOB2",17,0)
 F SCOPE="Pr","Pu" D
"RTN","ECOB2",18,0)
 .S PROPERTY=""
"RTN","ECOB2",19,0)
 .F  S PROPERTY=$O(@HANDLE@(SCOPE,PROPERTY)) Q:PROPERTY=""  D
"RTN","ECOB2",20,0)
 ..D SHOW^ECOB(.CHILD,HANDLE,SCOPE,PROPERTY,JUSTIFY)
"RTN","ECOB2",21,0)
 ..I $$ISHANDLE^ECOB(HANDLE,CHILD) D
"RTN","ECOB2",22,0)
 ...W !,$J(">>>----->",JUSTIFY)
"RTN","ECOB2",23,0)
 ...D METHOD^ECOB(.RESULT,CHILD_".Class."_OFFSET)
"RTN","ECOB2",24,0)
 ...W !,$J("<----<<<",JUSTIFY)
"RTN","ECOB2",25,0)
 ...Q
"RTN","ECOB2",26,0)
 ..Q
"RTN","ECOB2",27,0)
 .Q
"RTN","ECOB2",28,0)
 ; tree out methods
"RTN","ECOB2",29,0)
 S RESULT=1
"RTN","ECOB2",30,0)
 Q
"RTN","ECOB2",31,0)
 ;;
"RTN","ECOB2",32,0)
GET(RESULT,HANDLE,METHOD,PARAMS)  ;
"RTN","ECOB2",33,0)
 N PROPERTY
"RTN","ECOB2",34,0)
 D PARSE("Get",METHOD)
"RTN","ECOB2",35,0)
 D GET^ECOB(.RESULT,HANDLE,"Pu",PROPERTY)
"RTN","ECOB2",36,0)
 Q
"RTN","ECOB2",37,0)
 ;;
"RTN","ECOB2",38,0)
INFO(RESULT,HANDLE,PARAMS)  ;
"RTN","ECOB2",39,0)
 N JUSTIFY,OFFSET,PROPERTY,NAME,COUNT,CHILD
"RTN","ECOB2",40,0)
 D PARSE("Handle",HANDLE)
"RTN","ECOB2",41,0)
 D PARSE("Offset",PARAMS)
"RTN","ECOB2",42,0)
 S PROPERTY=""
"RTN","ECOB2",43,0)
 F  S PROPERTY=$O(@HANDLE@("Pu",PROPERTY)) Q:PROPERTY=""  D
"RTN","ECOB2",44,0)
 .D SHOW(.CHILD,HANDLE,"Show"_PROPERTY,JUSTIFY)
"RTN","ECOB2",45,0)
 .I $$ISHANDLE^ECOB(HANDLE,CHILD) D METHOD^ECOB(.RESULT,CHILD_".Info."_OFFSET)
"RTN","ECOB2",46,0)
 .Q
"RTN","ECOB2",47,0)
 S RESULT=1
"RTN","ECOB2",48,0)
 Q
"RTN","ECOB2",49,0)
 ;;
"RTN","ECOB2",50,0)
PARSE(PARSE,VALUE)  ;
"RTN","ECOB2",51,0)
 I PARSE="Get" D  Q
"RTN","ECOB2",52,0)
 .S PROPERTY=$P(VALUE,".",1)
"RTN","ECOB2",53,0)
 .S PROPERTY=$P(PROPERTY,"Get",2)
"RTN","ECOB2",54,0)
 .Q
"RTN","ECOB2",55,0)
 I PARSE="Handle" D  Q
"RTN","ECOB2",56,0)
 .S HANDLE=$P(VALUE,".")
"RTN","ECOB2",57,0)
 .Q
"RTN","ECOB2",58,0)
 I PARSE="Handle1" D  Q
"RTN","ECOB2",59,0)
 .S NAME=$P(VALUE,".",1)
"RTN","ECOB2",60,0)
 .S COUNT=$P(VALUE,".",2)
"RTN","ECOB2",61,0)
 .Q
"RTN","ECOB2",62,0)
 I PARSE="Justify" D  Q
"RTN","ECOB2",63,0)
 .S JUSTIFY=$S(+VALUE:+VALUE,1:0)
"RTN","ECOB2",64,0)
 .Q
"RTN","ECOB2",65,0)
 I PARSE="Method" D  Q
"RTN","ECOB2",66,0)
 .S METHOD=$P(VALUE,".",2)
"RTN","ECOB2",67,0)
 .Q
"RTN","ECOB2",68,0)
 I PARSE="Offset" D  Q
"RTN","ECOB2",69,0)
 .S JUSTIFY=$S(+VALUE:+VALUE,1:0)
"RTN","ECOB2",70,0)
 .S OFFSET=JUSTIFY+5
"RTN","ECOB2",71,0)
 .Q
"RTN","ECOB2",72,0)
 I PARSE="Params" D  Q
"RTN","ECOB2",73,0)
 .S PARAMS=$P(VALUE,".",3,99)
"RTN","ECOB2",74,0)
 .Q
"RTN","ECOB2",75,0)
 I PARSE="Set" D  Q
"RTN","ECOB2",76,0)
 .S PROPERTY=$P(VALUE,".",1)
"RTN","ECOB2",77,0)
 .S PROPERTY=$P(PROPERTY,"Set",2)
"RTN","ECOB2",78,0)
 .S VALUE=$P(VALUE,".",2)
"RTN","ECOB2",79,0)
 .Q
"RTN","ECOB2",80,0)
 I PARSE="Show" D  Q
"RTN","ECOB2",81,0)
 .S PROPERTY=$P(VALUE,".",1)
"RTN","ECOB2",82,0)
 .S PROPERTY=$P(PROPERTY,"Show",2)
"RTN","ECOB2",83,0)
 .Q
"RTN","ECOB2",84,0)
 Q
"RTN","ECOB2",85,0)
 ;
"RTN","ECOB2",86,0)
SET(RESULT,HANDLE,METHOD,PARAMS)  ;
"RTN","ECOB2",87,0)
 N PROPERTY
"RTN","ECOB2",88,0)
 D PARSE("Set",METHOD)
"RTN","ECOB2",89,0)
 D SET^ECOB(.RESULT,HANDLE,"Pu",PROPERTY,PARAMS)
"RTN","ECOB2",90,0)
 Q
"RTN","ECOB2",91,0)
 ;;
"RTN","ECOB2",92,0)
SHOW(RESULT,HANDLE,METHOD,PARAMS)  ;
"RTN","ECOB2",93,0)
 N PROPERTY
"RTN","ECOB2",94,0)
 D PARSE("Show",METHOD)
"RTN","ECOB2",95,0)
 D SHOW^ECOB(.RESULT,HANDLE,"Pu",PROPERTY,+PARAMS)
"RTN","ECOB2",96,0)
 Q
"RTN","ECOB2",97,0)
 ;;
"RTN","ECOB2",98,0)
TREE(RESULT,HANDLE,PARAMS)  ;
"RTN","ECOB2",99,0)
 N JUSTIFY,OFFSET,PROPERTY,NAME,COUNT,CHILD,SCOPE
"RTN","ECOB2",100,0)
 D PARSE("Handle1",HANDLE)
"RTN","ECOB2",101,0)
 D PARSE("Offset",PARAMS)
"RTN","ECOB2",102,0)
 ; tree out properties
"RTN","ECOB2",103,0)
 F SCOPE="Pr","Pu" D
"RTN","ECOB2",104,0)
 .S PROPERTY=""
"RTN","ECOB2",105,0)
 .F  S PROPERTY=$O(^TMP($J,"ECHRO",NAME,COUNT,SCOPE,PROPERTY)) Q:PROPERTY=""  D
"RTN","ECOB2",106,0)
 ..D TREE^ECOB(.CHILD,HANDLE,SCOPE,PROPERTY,JUSTIFY)
"RTN","ECOB2",107,0)
 ..I $$ISHANDLE^ECOB(HANDLE,CHILD) D METHOD^ECOB(.RESULT,CHILD_".Tree."_OFFSET)
"RTN","ECOB2",108,0)
 ..Q
"RTN","ECOB2",109,0)
 .Q
"RTN","ECOB2",110,0)
 ; tree out methods
"RTN","ECOB2",111,0)
 S RESULT=1
"RTN","ECOB2",112,0)
 Q
"RTN","ECOB2",113,0)
 ;;
"RTN","ECOB2",114,0)
 ;; public methods
"RTN","ECOB2",115,0)
CREATE(NAME)  ;
"RTN","ECOB2",116,0)
 ; call parent first
"RTN","ECOB2",117,0)
 N HANDLE,CHILD
"RTN","ECOB2",118,0)
 S HANDLE=$$CREATE^ECOB(NAME)
"RTN","ECOB2",119,0)
 D SELF^ECOB(.RESULT,HANDLE,"EC UTILITY","Utility","METHOD^ECOB2(.RESULT,ARGUMENT)","EC BASE")
"RTN","ECOB2",120,0)
 ;;
"RTN","ECOB2",121,0)
 ; complex properties last
"RTN","ECOB2",122,0)
 Q HANDLE
"RTN","ECOB2",123,0)
 ;;
"RTN","ECOB2",124,0)
DESTROY(HANDLE)  ;
"RTN","ECOB2",125,0)
 ; call parent last
"RTN","ECOB2",126,0)
 Q $$DESTROY^ECOB(HANDLE)
"RTN","ECOB2",127,0)
 ;;
"RTN","ECOB2",128,0)
METHOD(RESULT,ARGUMENT)  ;
"RTN","ECOB2",129,0)
 ; argument=handle.method.(additional.params...)
"RTN","ECOB2",130,0)
 N HANDLE,METHOD,PARAMS
"RTN","ECOB2",131,0)
 D PARSE("Handle",ARGUMENT)
"RTN","ECOB2",132,0)
 D PARSE("Method",ARGUMENT)
"RTN","ECOB2",133,0)
 D PARSE("Params",ARGUMENT)
"RTN","ECOB2",134,0)
 I METHOD="Class" D CLASS(.RESULT,HANDLE,PARAMS) Q  ;;.Class.[offset] - show class info only
"RTN","ECOB2",135,0)
 I $E(METHOD,1,3)="Get" D GET(.RESULT,HANDLE,METHOD,PARAMS) Q  ;;.Get[aPropertyName] - returns property value
"RTN","ECOB2",136,0)
 I $E(METHOD,1,3)="Set" D SET(.RESULT,HANDLE,METHOD,PARAMS) Q  ;;.Set[aPropertyName].[value] - edits property value
"RTN","ECOB2",137,0)
 I $E(METHOD,1,4)="Show" D SHOW(.RESULT,HANDLE,METHOD,PARAMS) Q  ;;.Show[aPropertyName].[offset] - shows property value justified by offset
"RTN","ECOB2",138,0)
 I METHOD="Info" D INFO(.RESULT,HANDLE,PARAMS) Q  ;;.Info.[offset] - shows public properties with values justified by offset
"RTN","ECOB2",139,0)
 I METHOD="Tree" D TREE(.RESULT,HANDLE,PARAMS) Q  ;;.Tree.[offset] - shows all properties default values and methods justified by offset
"RTN","ECOB2",140,0)
 S RESULT="0^Invalid argument"
"RTN","ECOB2",141,0)
 Q
"RTN","ECOB2",142,0)
 ;;
"RTN","ECOB3")
0^13^B4073607^n/a
"RTN","ECOB3",1,0)
ECOB3 ;BP/CMF - Name Object
"RTN","ECOB3",2,0)
 ;;2.0;EVENT CAPTURE;**100**;8 May 96;Build 21
"RTN","ECOB3",3,0)
 ;@author  - Chris Flegel
"RTN","ECOB3",4,0)
 ;@date    - 17 May 2009
"RTN","ECOB3",5,0)
 ;@version - 1.0
"RTN","ECOB3",6,0)
 ;;
"RTN","ECOB3",7,0)
 Q
"RTN","ECOB3",8,0)
 ;; private methods
"RTN","ECOB3",9,0)
OB2(RESULT,ARGUMENT) ; shortcut to primitive utility
"RTN","ECOB3",10,0)
 D METHOD^ECOB2(.RESULT,ARGUMENT)
"RTN","ECOB3",11,0)
 Q
"RTN","ECOB3",12,0)
 ;;
"RTN","ECOB3",13,0)
OBP(RESULT,ARGUMENT) ; shortcut to property object
"RTN","ECOB3",14,0)
 D METHOD^ECOBP(.RESULT,ARGUMENT)
"RTN","ECOB3",15,0)
 Q
"RTN","ECOB3",16,0)
 ;;
"RTN","ECOB3",17,0)
 ;; public methods
"RTN","ECOB3",18,0)
CREATE(NAME)  ;
"RTN","ECOB3",19,0)
 ; call parent first
"RTN","ECOB3",20,0)
 N HANDLE,X,CHILD
"RTN","ECOB3",21,0)
 S HANDLE=$$CREATE^ECOBU(NAME)
"RTN","ECOB3",22,0)
 D METHOD(.X,HANDLE_".of.Set_class.EC OBU NAME")
"RTN","ECOB3",23,0)
 D METHOD(.X,HANDLE_".of.Set_name.Name")
"RTN","ECOB3",24,0)
 D METHOD(.X,HANDLE_".of.Set_routine.METHOD^ECOB3(.RESULT,ARGUMENT)")
"RTN","ECOB3",25,0)
 ;;
"RTN","ECOB3",26,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.Name")
"RTN","ECOB3",27,0)
 D METHOD(.X,CHILD_".pf.SetAddedByClass.EC OBU NAME")
"RTN","ECOB3",28,0)
 D METHOD(.X,CHILD_".pf.SetValue.")
"RTN","ECOB3",29,0)
 D METHOD(.X,CHILD_".pf.SetDefaultValue.")
"RTN","ECOB3",30,0)
 ;
"RTN","ECOB3",31,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.Ien")
"RTN","ECOB3",32,0)
 D METHOD(.X,CHILD_".pf.SetAddedByClass.EC OBU NAME")
"RTN","ECOB3",33,0)
 D METHOD(.X,CHILD_".pf.SetValue.")
"RTN","ECOB3",34,0)
 D METHOD(.X,CHILD_".pf.SetDefaultValue.")
"RTN","ECOB3",35,0)
 ;
"RTN","ECOB3",36,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.Vuid")
"RTN","ECOB3",37,0)
 D METHOD(.X,CHILD_".pf.SetAddedByClass.EC OBU NAME")
"RTN","ECOB3",38,0)
 D METHOD(.X,CHILD_".pf.SetValue.")
"RTN","ECOB3",39,0)
 D METHOD(.X,CHILD_".pf.SetDefaultValue.")
"RTN","ECOB3",40,0)
 ;
"RTN","ECOB3",41,0)
 ; complex properties last
"RTN","ECOB3",42,0)
 D METHOD(.X,HANDLE_".Root.Add.EC OBU NAME")
"RTN","ECOB3",43,0)
 Q HANDLE
"RTN","ECOB3",44,0)
 ;;
"RTN","ECOB3",45,0)
DESTROY(HANDLE)  ;
"RTN","ECOB3",46,0)
 ; call parent last
"RTN","ECOB3",47,0)
 Q $$DESTROY^ECOBU(HANDLE)
"RTN","ECOB3",48,0)
 ;;
"RTN","ECOB3",49,0)
METHOD(RESULT,ARGUMENT)  ;
"RTN","ECOB3",50,0)
 ; call parent last
"RTN","ECOB3",51,0)
 D METHOD^ECOBU(.RESULT,ARGUMENT)  ; parent method
"RTN","ECOB3",52,0)
 Q
"RTN","ECOB3",53,0)
 ;;
"RTN","ECOB30")
0^33^B11111309^n/a
"RTN","ECOB30",1,0)
ECOB30 ;BP/CMF - Collect Object
"RTN","ECOB30",2,0)
 ;;2.0;EVENT CAPTURE;**100**;8 May 96;Build 21
"RTN","ECOB30",3,0)
 ;@author  - Chris Flegel
"RTN","ECOB30",4,0)
 ;@date    - 17 May 2009
"RTN","ECOB30",5,0)
 ;@version - 1.0
"RTN","ECOB30",6,0)
 ;;
"RTN","ECOB30",7,0)
 Q
"RTN","ECOB30",8,0)
 ;; private methods
"RTN","ECOB30",9,0)
EXECUTE(RESULT,HANDLE,PARAMS)  ;
"RTN","ECOB30",10,0)
 N ASLIST,CHILD,CLASS,COLLECT,FOUND,HANDLER,NAME,METH,PROP,SCOPE,X
"RTN","ECOB30",11,0)
 ;;
"RTN","ECOB30",12,0)
CK D METHOD(.CHILD,HANDLE_".GetChild")
"RTN","ECOB30",13,0)
 I CHILD="" S RESULT="-1^Invalid child" Q
"RTN","ECOB30",14,0)
 D METHOD(.COLLECT,HANDLE_".GetCollector")
"RTN","ECOB30",15,0)
 I COLLECT="" S RESULT="-1^Invalid collector" Q
"RTN","ECOB30",16,0)
 D METHOD(.ASLIST,HANDLE_".GetAsList")
"RTN","ECOB30",17,0)
 I ASLIST="true" D COLLECT^ECOBUL(.RESULT,COLLECT,CHILD) Q
"RTN","ECOB30",18,0)
 ;;
"RTN","ECOB30",19,0)
 D METHOD(.HANDLER,HANDLE_".GetHandler")
"RTN","ECOB30",20,0)
 I HANDLER="" S RESULT="-1^Invalid handler" Q
"RTN","ECOB30",21,0)
 D METHOD(.NAME,HANDLE_".GetName")
"RTN","ECOB30",22,0)
 I NAME="" S RESULT="-1^Invalid name." Q
"RTN","ECOB30",23,0)
 ;;
"RTN","ECOB30",24,0)
PF D METHOD^ECOBU(.FOUND,COLLECT_".Properties.Find."_NAME)
"RTN","ECOB30",25,0)
 D METHOD^ECOBL(.RESULT,FOUND_".GetCount")
"RTN","ECOB30",26,0)
 D DESTROY^ECOBL(FOUND)
"RTN","ECOB30",27,0)
 I +RESULT S RESULT="-1^Property "_NAME_" already exists." Q
"RTN","ECOB30",28,0)
 ;;
"RTN","ECOB30",29,0)
MF D METHOD^ECOBU(.FOUND,COLLECT_".Methods.Find."_NAME)
"RTN","ECOB30",30,0)
 D METHOD^ECOBL(.RESULT,FOUND_".GetCount")
"RTN","ECOB30",31,0)
 D DESTROY^ECOBL(FOUND)
"RTN","ECOB30",32,0)
 I +RESULT S RESULT="-1^Method "_NAME_" already exists." Q
"RTN","ECOB30",33,0)
 ;;
"RTN","ECOB30",34,0)
 D METHOD(.SCOPE,HANDLE_".GetScope")
"RTN","ECOB30",35,0)
 I SCOPE="" S SCOPE="Pu"
"RTN","ECOB30",36,0)
 D COLLECT^ECOB(COLLECT,CHILD,SCOPE,NAME)
"RTN","ECOB30",37,0)
 D METHOD^ECOB2(.CLASS,COLLECT_".Get_class")
"RTN","ECOB30",38,0)
 ;;
"RTN","ECOB30",39,0)
MA D METHOD^ECOBU(.METH,COLLECT_".Methods.Add."_NAME)
"RTN","ECOB30",40,0)
 D METHOD^ECOBM(.X,METH_".SetAddedByClass."_CLASS)
"RTN","ECOB30",41,0)
 D METHOD^ECOBM(.X,METH_".SetDescription.Handler for object property.")
"RTN","ECOB30",42,0)
 D METHOD^ECOBM(.X,METH_".SetHandler."_HANDLER)
"RTN","ECOB30",43,0)
 D METHOD^ECOBM(.X,METH_".SetParams.[method.params]")
"RTN","ECOB30",44,0)
 D METHOD^ECOBM(.X,METH_".SetReturns.access to object")
"RTN","ECOB30",45,0)
 ;;
"RTN","ECOB30",46,0)
PA D METHOD^ECOBU(.PROP,COLLECT_".Properties.Add."_NAME)
"RTN","ECOB30",47,0)
 D METHOD^ECOBP(.X,PROP_".SetAddedByClass."_CLASS)
"RTN","ECOB30",48,0)
 D METHOD^ECOBP(.X,PROP_".SetValue."_CHILD)
"RTN","ECOB30",49,0)
 D METHOD^ECOBP(.X,PROP_".SetDefaultValue."_CHILD)
"RTN","ECOB30",50,0)
 ;;
"RTN","ECOB30",51,0)
 S RESULT=1
"RTN","ECOB30",52,0)
 Q
"RTN","ECOB30",53,0)
 ;;
"RTN","ECOB30",54,0)
 ;; public methods
"RTN","ECOB30",55,0)
CREATE(NAME)  ;
"RTN","ECOB30",56,0)
 ; call parent first
"RTN","ECOB30",57,0)
 N HANDLE,CHILD
"RTN","ECOB30",58,0)
 S HANDLE=$$CREATE^ECOB2(NAME)
"RTN","ECOB30",59,0)
 ;;
"RTN","ECOB30",60,0)
 D SELF^ECOB(.RESULT,HANDLE,"Collect","Collect","METHOD^ECOB30(.RESULT,ARGUMENT)","ECOB2")
"RTN","ECOB30",61,0)
 ;;
"RTN","ECOB30",62,0)
 D PROPERTY^ECOB(HANDLE,"Pu","AsList","false")
"RTN","ECOB30",63,0)
 D PROPERTY^ECOB(HANDLE,"Pu","Child","")
"RTN","ECOB30",64,0)
 D PROPERTY^ECOB(HANDLE,"Pu","Collector","")
"RTN","ECOB30",65,0)
 D PROPERTY^ECOB(HANDLE,"Pu","Handler","")
"RTN","ECOB30",66,0)
 D PROPERTY^ECOB(HANDLE,"Pu","Name","")
"RTN","ECOB30",67,0)
 D PROPERTY^ECOB(HANDLE,"Pu","Scope","Pu")
"RTN","ECOB30",68,0)
 ; complex properties last
"RTN","ECOB30",69,0)
 Q HANDLE
"RTN","ECOB30",70,0)
 ;;
"RTN","ECOB30",71,0)
DESTROY(HANDLE)  ;
"RTN","ECOB30",72,0)
 ; call parent last
"RTN","ECOB30",73,0)
 Q $$DESTROY^ECOB2(HANDLE)
"RTN","ECOB30",74,0)
 ;;
"RTN","ECOB30",75,0)
METHOD(RESULT,ARGUMENT)  ;
"RTN","ECOB30",76,0)
 ; argument=[handle].[method].[additional.params...]
"RTN","ECOB30",77,0)
 N HANDLE,METHOD,PARAMS
"RTN","ECOB30",78,0)
 D PARSE^ECOB2("Handle",ARGUMENT)
"RTN","ECOB30",79,0)
 D PARSE^ECOB2("Method",ARGUMENT)
"RTN","ECOB30",80,0)
 D PARSE^ECOB2("Params",ARGUMENT)
"RTN","ECOB30",81,0)
    I METHOD="Execute" D EXECUTE(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOB30",82,0)
 D METHOD^ECOB2(.RESULT,ARGUMENT)
"RTN","ECOB30",83,0)
 Q
"RTN","ECOB30",84,0)
 ;;
"RTN","ECOB31")
0^14^B15085073^n/a
"RTN","ECOB31",1,0)
ECOB31 ;BP/CMF - User Last Used Parameters Object
"RTN","ECOB31",2,0)
 ;;2.0;EVENT CAPTURE;**100**;8 May 96;Build 21
"RTN","ECOB31",3,0)
 ;@author  - Chris Flegel
"RTN","ECOB31",4,0)
 ;@date    - 17 May 2009
"RTN","ECOB31",5,0)
 ;@version - 1.0
"RTN","ECOB31",6,0)
 ;;
"RTN","ECOB31",7,0)
 Q
"RTN","ECOB31",8,0)
 ;; private methods
"RTN","ECOB31",9,0)
 ;;
"RTN","ECOB31",10,0)
 ;; protected methods
"RTN","ECOB31",11,0)
LOAD(RESULT,HANDLE,PARAMS)  ;
"RTN","ECOB31",12,0)
 N ECUSER,ECPARAM,X
"RTN","ECOB31",13,0)
 D METHOD(.ECUSER,HANDLE_".GetIen")
"RTN","ECOB31",14,0)
 ;;
"RTN","ECOB31",15,0)
 S ECPARAM=$$GET^XPAR("USR","EC LAST CLINIC",ECUSER,"E")
"RTN","ECOB31",16,0)
 D METHOD(.X,HANDLE_".SetClinic."_ECPARAM)
"RTN","ECOB31",17,0)
 ;;
"RTN","ECOB31",18,0)
 S ECPARAM=$$GET^XPAR("USR","EC LAST LOCATION",ECUSER,"E")
"RTN","ECOB31",19,0)
 D METHOD(.X,HANDLE_".SetLocation."_ECPARAM)
"RTN","ECOB31",20,0)
 ;;
"RTN","ECOB31",21,0)
 S ECPARAM=$$GET^XPAR("USR","EC LAST PRINTER",ECUSER,"E")
"RTN","ECOB31",22,0)
 D METHOD(.X,HANDLE_".SetPrinter."_ECPARAM)
"RTN","ECOB31",23,0)
 ;;
"RTN","ECOB31",24,0)
 S RESULT=1
"RTN","ECOB31",25,0)
 Q
"RTN","ECOB31",26,0)
 ;;
"RTN","ECOB31",27,0)
SAVE(RESULT,HANDLE,PARAMS)  ;
"RTN","ECOB31",28,0)
 N ECUSER,ECPARAM,ECERR
"RTN","ECOB31",29,0)
 D METHOD(.ECUSER,HANDLE_".GetIen")
"RTN","ECOB31",30,0)
 ;;
"RTN","ECOB31",31,0)
 D METHOD(.ECPARAM,HANDLE_".GetClinic")
"RTN","ECOB31",32,0)
 D EN^XPAR("USR","EC LAST CLINIC",ECUSER,ECPARAM,.ECERR)
"RTN","ECOB31",33,0)
 ;;
"RTN","ECOB31",34,0)
 D METHOD(.ECPARAM,HANDLE_".GetLocation")
"RTN","ECOB31",35,0)
 D EN^XPAR("USR","EC LAST LOCATION",ECUSER,ECPARAM,.ECERR)
"RTN","ECOB31",36,0)
 ;;
"RTN","ECOB31",37,0)
 D METHOD(.ECPARAM,HANDLE_".GetPrinter")
"RTN","ECOB31",38,0)
 D EN^XPAR("USR","EC LAST PRINTER",ECUSER,ECPARAM,.ECERR)
"RTN","ECOB31",39,0)
 ;;
"RTN","ECOB31",40,0)
 S RESULT=$S($D(ECERR):0,1:1)
"RTN","ECOB31",41,0)
 Q
"RTN","ECOB31",42,0)
 ;; public methods
"RTN","ECOB31",43,0)
CREATE(NAME)  ;
"RTN","ECOB31",44,0)
 ; call parent first
"RTN","ECOB31",45,0)
 N HANDLE,X,CHILD
"RTN","ECOB31",46,0)
 S HANDLE=$$CREATE^ECOB3(NAME)
"RTN","ECOB31",47,0)
 D METHOD(.X,HANDLE_".of.Set_class.EC OBU LAST USED")
"RTN","ECOB31",48,0)
 D METHOD(.X,HANDLE_".of.Set_name.User Last Used")
"RTN","ECOB31",49,0)
 D METHOD(.X,HANDLE_".of.Set_routine.METHOD^ECOB31(.RESULT,ARGUMENT)")
"RTN","ECOB31",50,0)
 ;;
"RTN","ECOB31",51,0)
 D METHOD(.CHILD,HANDLE_".Methods.Add.Load")
"RTN","ECOB31",52,0)
 D METHOD(.X,CHILD_".mf.SetAddedByClass.User Last Used")
"RTN","ECOB31",53,0)
 D METHOD(.X,CHILD_".mf.SetDescription.Access Kernel Params of last used.")
"RTN","ECOB31",54,0)
 D METHOD(.X,CHILD_".mf.SetHandler.LOAD^ECOB31(.RESULT,HANDLE,PARAMS)")
"RTN","ECOB31",55,0)
 D METHOD(.X,CHILD_".mf.SetParams.")
"RTN","ECOB31",56,0)
 D METHOD(.X,CHILD_".mf.SetReturns.1")
"RTN","ECOB31",57,0)
 ;;
"RTN","ECOB31",58,0)
 D METHOD(.CHILD,HANDLE_".Methods.Add.Save")
"RTN","ECOB31",59,0)
 D METHOD(.X,CHILD_".mf.SetAddedByClass.User Last Used")
"RTN","ECOB31",60,0)
 D METHOD(.X,CHILD_".mf.SetDescription.Persist Kernel Params of last used.")
"RTN","ECOB31",61,0)
 D METHOD(.X,CHILD_".mf.SetHandler.SAVE^ECOB31(.RESULT,HANDLE,PARAMS)")
"RTN","ECOB31",62,0)
 D METHOD(.X,CHILD_".mf.SetParams.")
"RTN","ECOB31",63,0)
 D METHOD(.X,CHILD_".mf.SetReturns.1")
"RTN","ECOB31",64,0)
 ;;
"RTN","ECOB31",65,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.Location")
"RTN","ECOB31",66,0)
 D METHOD(.X,CHILD_".pf.SetAddedByClass.EC OBU LAST USED")
"RTN","ECOB31",67,0)
 D METHOD(.X,CHILD_".pf.SetValue.")
"RTN","ECOB31",68,0)
 D METHOD(.X,CHILD_".pf.SetDefaultValue.")
"RTN","ECOB31",69,0)
 ;
"RTN","ECOB31",70,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.Clinic")
"RTN","ECOB31",71,0)
 D METHOD(.X,CHILD_".pf.SetAddedByClass.EC OBU LAST USED")
"RTN","ECOB31",72,0)
 D METHOD(.X,CHILD_".pf.SetValue.")
"RTN","ECOB31",73,0)
 D METHOD(.X,CHILD_".pf.SetDefaultValue.")
"RTN","ECOB31",74,0)
 ;
"RTN","ECOB31",75,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.Printer")
"RTN","ECOB31",76,0)
 D METHOD(.X,CHILD_".pf.SetAddedByClass.EC OBU LAST USED")
"RTN","ECOB31",77,0)
 D METHOD(.X,CHILD_".pf.SetValue.")
"RTN","ECOB31",78,0)
 D METHOD(.X,CHILD_".pf.SetDefaultValue.")
"RTN","ECOB31",79,0)
 ;
"RTN","ECOB31",80,0)
 ; complex properties last
"RTN","ECOB31",81,0)
 D METHOD(.X,HANDLE_".Root.Add.EC OBU LAST USED")
"RTN","ECOB31",82,0)
 ;
"RTN","ECOB31",83,0)
 I $G(DUZ)'="" D
"RTN","ECOB31",84,0)
 .D METHOD(.X,HANDLE_".SetIen."_DUZ)
"RTN","ECOB31",85,0)
 .D METHOD(.X,HANDLE_".Load")
"RTN","ECOB31",86,0)
 .Q
"RTN","ECOB31",87,0)
 I $G(XQUSER)'="" D METHOD(.X,HANDLE_".SetName."_XQUSER)
"RTN","ECOB31",88,0)
 Q HANDLE
"RTN","ECOB31",89,0)
 ;;
"RTN","ECOB31",90,0)
DESTROY(HANDLE)  ;
"RTN","ECOB31",91,0)
 ; call parent last
"RTN","ECOB31",92,0)
 N X
"RTN","ECOB31",93,0)
 D METHOD(.X,HANDLE_".Save")
"RTN","ECOB31",94,0)
 Q $$DESTROY^ECOB3(HANDLE)
"RTN","ECOB31",95,0)
 ;;
"RTN","ECOB31",96,0)
METHOD(RESULT,ARGUMENT)  ;
"RTN","ECOB31",97,0)
 ; call parent last
"RTN","ECOB31",98,0)
 D METHOD^ECOBU(.RESULT,ARGUMENT)  ;parent method
"RTN","ECOB31",99,0)
 Q
"RTN","ECOB31",100,0)
 ;;
"RTN","ECOB40")
0^15^B17508001^n/a
"RTN","ECOB40",1,0)
ECOB40 ;BP/CMF - Generic Table Print Object
"RTN","ECOB40",2,0)
 ;;2.0;EVENT CAPTURE;**100**;8 May 96;Build 21
"RTN","ECOB40",3,0)
 ;@author  - Chris Flegel
"RTN","ECOB40",4,0)
 ;@date    - 17 May 2009
"RTN","ECOB40",5,0)
 ;@version - 1.0
"RTN","ECOB40",6,0)
 ;;
"RTN","ECOB40",7,0)
 Q
"RTN","ECOB40",8,0)
 ;; private methods
"RTN","ECOB40",9,0)
OUT(HANDLE,METHOD)  ;
"RTN","ECOB40",10,0)
    N RESULT
"RTN","ECOB40",11,0)
    D METHOD(.RESULT,HANDLE_"."_METHOD)
"RTN","ECOB40",12,0)
 Q RESULT
"RTN","ECOB40",13,0)
 ;;
"RTN","ECOB40",14,0)
ECOBL(RESULT,HANDLE,ARGUMENT) ; handler for the actual list object
"RTN","ECOB40",15,0)
 N CHILD
"RTN","ECOB40",16,0)
 D METHOD(.CHILD,HANDLE_".GetHeaders")
"RTN","ECOB40",17,0)
 D METHOD^ECOBL(.RESULT,CHILD_"."_ARGUMENT)
"RTN","ECOB40",18,0)
 Q
"RTN","ECOB40",19,0)
 ;;
"RTN","ECOB40",20,0)
HEADER(HANDLE)  ;
"RTN","ECOB40",21,0)
 N HDR,HDRNAME,HDRWIDTH,PAGE
"RTN","ECOB40",22,0)
 W @IOF
"RTN","ECOB40",23,0)
 S PAGE=$$OUT(HANDLE,"GetPage")
"RTN","ECOB40",24,0)
 W !,$$CJ^XLFSTR($$OUT(HANDLE,"GetTableName"),IOM)
"RTN","ECOB40",25,0)
 W !,$$CJ^XLFSTR($$FMTE^XLFDT($$NOW^XLFDT()),IOM)
"RTN","ECOB40",26,0)
 W !,$$CJ^XLFSTR("Page: "_PAGE,IOM)
"RTN","ECOB40",27,0)
 W !!
"RTN","ECOB40",28,0)
 S HDR=$$OUT(HANDLE,"Headers.First")
"RTN","ECOB40",29,0)
 F  Q:HDR="-1^End of list"  D
"RTN","ECOB40",30,0)
 .S HDRNAME=$P(HDR,U)
"RTN","ECOB40",31,0)
 .S HDRWIDTH=$P(HDR,U,2)
"RTN","ECOB40",32,0)
 .W $$LJ^XLFSTR(HDRNAME,HDRWIDTH)
"RTN","ECOB40",33,0)
 .S HDR=$$OUT(HANDLE,"Headers.Next")
"RTN","ECOB40",34,0)
 .Q
"RTN","ECOB40",35,0)
 S PAGE=PAGE+1
"RTN","ECOB40",36,0)
 D OUT(HANDLE,"SetPage."_PAGE)
"RTN","ECOB40",37,0)
 Q
"RTN","ECOB40",38,0)
    ;;
"RTN","ECOB40",39,0)
FOOTER(HANDLE)  ;
"RTN","ECOB40",40,0)
 N PAGE
"RTN","ECOB40",41,0)
 S PAGE=$$OUT(HANDLE,"GetPage")
"RTN","ECOB40",42,0)
 W !!
"RTN","ECOB40",43,0)
 W $$CJ^XLFSTR("Page: "_PAGE,IOM)
"RTN","ECOB40",44,0)
 S PAGE=PAGE+1
"RTN","ECOB40",45,0)
 D OUT(HANDLE,"SetPage."_PAGE)
"RTN","ECOB40",46,0)
 Q
"RTN","ECOB40",47,0)
WIDTH(HANDLE,HEADER)  ;
"RTN","ECOB40",48,0)
 Q $P($$OUT(HANDLE,"Headers.GetItem."_HEADER),U,2)
"RTN","ECOB40",49,0)
 ;;
"RTN","ECOB40",50,0)
 ;; protected methods
"RTN","ECOB40",51,0)
PRINT(RESULT,HANDLE,PARAMS)  ;
"RTN","ECOB40",52,0)
 N COLUMNS,COLUMN,TXT,WIDTH,VALUE
"RTN","ECOB40",53,0)
 S COLUMNS=$$OUT(HANDLE,"Headers.GetCount")
"RTN","ECOB40",54,0)
 D OUT(HANDLE,"SetPage.1")
"RTN","ECOB40",55,0)
 D HEADER(HANDLE)
"RTN","ECOB40",56,0)
 S TXT=$$OUT(HANDLE,"List.First")
"RTN","ECOB40",57,0)
 F  Q:TXT="-1^End of list"  D
"RTN","ECOB40",58,0)
 .W !
"RTN","ECOB40",59,0)
 .F COLUMN=1:1:COLUMNS D
"RTN","ECOB40",60,0)
 ..S WIDTH=$$WIDTH(HANDLE,COLUMN)
"RTN","ECOB40",61,0)
 ..S VALUE=$E($P(TXT,U,COLUMN),1,WIDTH-2)
"RTN","ECOB40",62,0)
 ..W $$LJ^XLFSTR(VALUE,WIDTH)
"RTN","ECOB40",63,0)
 ..Q
"RTN","ECOB40",64,0)
 .S TXT=$$OUT(HANDLE,"List.Next")
"RTN","ECOB40",65,0)
 .I ($Y+5)>IOSL D HEADER(HANDLE)
"RTN","ECOB40",66,0)
 Q
"RTN","ECOB40",67,0)
 ;; public methods
"RTN","ECOB40",68,0)
CREATE(NAME)  ;
"RTN","ECOB40",69,0)
 ; call parent first
"RTN","ECOB40",70,0)
 N HANDLE,X,CHILD
"RTN","ECOB40",71,0)
 S HANDLE=$$CREATE^ECOBUL(NAME)
"RTN","ECOB40",72,0)
 D METHOD(.X,HANDLE_".of.Set_class.EC GENERIC TABLE PRINT")
"RTN","ECOB40",73,0)
 D METHOD(.X,HANDLE_".of.Set_name.Generic Table Print")
"RTN","ECOB40",74,0)
 D METHOD(.X,HANDLE_".of.Set_routine.METHOD^ECOB40(.RESULT,ARGUMENT)")
"RTN","ECOB40",75,0)
 ;;
"RTN","ECOB40",76,0)
 D METHOD(.CHILD,HANDLE_".Methods.Add.Execute")
"RTN","ECOB40",77,0)
 D METHOD(.X,CHILD_".mf.SetAddedByClass.Generic Table Print")
"RTN","ECOB40",78,0)
 D METHOD(.X,CHILD_".mf.SetDescription.Print contents to IO device.")
"RTN","ECOB40",79,0)
 D METHOD(.X,CHILD_".mf.SetHandler.PRINT^ECOB40(.RESULT,HANDLE,PARAMS)")
"RTN","ECOB40",80,0)
 D METHOD(.X,CHILD_".mf.SetParams.")
"RTN","ECOB40",81,0)
 D METHOD(.X,CHILD_".mf.SetReturns.1")
"RTN","ECOB40",82,0)
 ;;
"RTN","ECOB40",83,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.TableName")
"RTN","ECOB40",84,0)
 D METHOD(.X,CHILD_".pf.SetAddedByClass.EC GENERIC TABLE PRINT")
"RTN","ECOB40",85,0)
 D METHOD(.X,CHILD_".pf.SetValue.Generic Table")
"RTN","ECOB40",86,0)
 D METHOD(.X,CHILD_".pf.SetDefaultValue.")
"RTN","ECOB40",87,0)
 ;;
"RTN","ECOB40",88,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.Page")
"RTN","ECOB40",89,0)
 D METHOD(.X,CHILD_".pf.SetAddedByClass.EC GENERIC TABLE PRINT")
"RTN","ECOB40",90,0)
 D METHOD(.X,CHILD_".pf.SetValue.1")
"RTN","ECOB40",91,0)
 D METHOD(.X,CHILD_".pf.SetDefaultValue.1")
"RTN","ECOB40",92,0)
 ;;
"RTN","ECOB40",93,0)
 ; complex properties last
"RTN","ECOB40",94,0)
 S CHILD=$$CREATE^ECOBL(NAME)
"RTN","ECOB40",95,0)
 D METHOD(.X,HANDLE_".Collect.SetChild."_CHILD)
"RTN","ECOB40",96,0)
 D METHOD(.X,HANDLE_".Collect.SetName.Headers")
"RTN","ECOB40",97,0)
 D METHOD(.X,HANDLE_".Collect.SetHandler.ECOBL^ECOB40(.RESULT,HANDLE,PARAMS)")
"RTN","ECOB40",98,0)
 D METHOD(.X,HANDLE_".Collect.Execute")
"RTN","ECOB40",99,0)
 ;;
"RTN","ECOB40",100,0)
 D METHOD(.X,HANDLE_".Root.Add.EC GENERIC TABLE PRINT")
"RTN","ECOB40",101,0)
 ;
"RTN","ECOB40",102,0)
 Q HANDLE
"RTN","ECOB40",103,0)
 ;;
"RTN","ECOB40",104,0)
DESTROY(HANDLE)  ;
"RTN","ECOB40",105,0)
 ; call parent last
"RTN","ECOB40",106,0)
 N CHILD
"RTN","ECOB40",107,0)
 D METHOD(.CHILD,HANDLE_".GetHeaders")
"RTN","ECOB40",108,0)
 D DESTROY^ECOBL(CHILD)
"RTN","ECOB40",109,0)
 Q $$DESTROY^ECOBUL(HANDLE)
"RTN","ECOB40",110,0)
 ;;
"RTN","ECOB40",111,0)
METHOD(RESULT,ARGUMENT)  ;
"RTN","ECOB40",112,0)
 ; call parent last
"RTN","ECOB40",113,0)
 D METHOD^ECOBUL(.RESULT,ARGUMENT)  ; parent method
"RTN","ECOB40",114,0)
 Q
"RTN","ECOB40",115,0)
 ;;
"RTN","ECOB41")
0^16^B3206658^n/a
"RTN","ECOB41",1,0)
ECOB41 ;BP/CMF - DSS UNIT Table Print Object
"RTN","ECOB41",2,0)
 ;;2.0;EVENT CAPTURE;**100**;8 May 96;Build 21
"RTN","ECOB41",3,0)
 ;@author  - Chris Flegel
"RTN","ECOB41",4,0)
 ;@date    - 17 May 2009
"RTN","ECOB41",5,0)
 ;@version - 1.0
"RTN","ECOB41",6,0)
 ;;
"RTN","ECOB41",7,0)
 Q
"RTN","ECOB41",8,0)
 ;; private methods
"RTN","ECOB41",9,0)
 ;;
"RTN","ECOB41",10,0)
 ;; protected methods
"RTN","ECOB41",11,0)
 ;; public methods
"RTN","ECOB41",12,0)
CREATE(NAME)  ;
"RTN","ECOB41",13,0)
 ; call parent first
"RTN","ECOB41",14,0)
 N HANDLE,X,CHILD
"RTN","ECOB41",15,0)
 S HANDLE=$$CREATE^ECOB40(NAME)
"RTN","ECOB41",16,0)
 D METHOD(.X,HANDLE_".of.Set_class.EC DSS UNIT TABLE")
"RTN","ECOB41",17,0)
 D METHOD(.X,HANDLE_".of.Set_name.DSS Unit Table Print")
"RTN","ECOB41",18,0)
 D METHOD(.X,HANDLE_".of.Set_routine.METHOD^ECOB41(.RESULT,ARGUMENT)")
"RTN","ECOB41",19,0)
 ;;
"RTN","ECOB41",20,0)
 D METHOD(.X,HANDLE_".Headers.Add.DSS Unit Name^26")
"RTN","ECOB41",21,0)
 D METHOD(.X,HANDLE_".Headers.Add.Unit IEN^9")
"RTN","ECOB41",22,0)
 D METHOD(.X,HANDLE_".Headers.Add.Active^9")
"RTN","ECOB41",23,0)
 D METHOD(.X,HANDLE_".Headers.Add.PCE^9")
"RTN","ECOB41",24,0)
 D METHOD(.X,HANDLE_".Headers.Add.DSS Dept^14")
"RTN","ECOB41",25,0)
 D METHOD(.X,HANDLE_".Headers.Add.Service^22")
"RTN","ECOB41",26,0)
 D METHOD(.X,HANDLE_".Headers.Add.Medical Specialty^19")
"RTN","ECOB41",27,0)
 D METHOD(.X,HANDLE_".Headers.Add.Cost Center^17")
"RTN","ECOB41",28,0)
 ;;
"RTN","ECOB41",29,0)
 D METHOD(.X,HANDLE_".SetTableName.DSS Units")
"RTN","ECOB41",30,0)
 ;;
"RTN","ECOB41",31,0)
 D METHOD(.X,HANDLE_".Root.Add.EC DSS UNIT TABLE")
"RTN","ECOB41",32,0)
 ;
"RTN","ECOB41",33,0)
 Q HANDLE
"RTN","ECOB41",34,0)
 ;;
"RTN","ECOB41",35,0)
DESTROY(HANDLE)  ;
"RTN","ECOB41",36,0)
 ; call parent last
"RTN","ECOB41",37,0)
 Q $$DESTROY^ECOB40(HANDLE)
"RTN","ECOB41",38,0)
 ;;
"RTN","ECOB41",39,0)
METHOD(RESULT,ARGUMENT)  ;
"RTN","ECOB41",40,0)
 ; call parent last
"RTN","ECOB41",41,0)
 D METHOD^ECOB40(.RESULT,ARGUMENT)  ; parent method
"RTN","ECOB41",42,0)
 Q
"RTN","ECOB41",43,0)
 ;;
"RTN","ECOBA")
0^17^B2535954^n/a
"RTN","ECOBA",1,0)
ECOBA ;BP/CMF - Attribute Object
"RTN","ECOBA",2,0)
 ;;2.0;EVENT CAPTURE;**100**;8 May 96;Build 21
"RTN","ECOBA",3,0)
 ;@author  - Chris Flegel
"RTN","ECOBA",4,0)
 ;@date    - 17 May 2009
"RTN","ECOBA",5,0)
 ;@version - 1.0
"RTN","ECOBA",6,0)
 ;;
"RTN","ECOBA",7,0)
 Q
"RTN","ECOBA",8,0)
 ;; private methods
"RTN","ECOBA",9,0)
 ;;
"RTN","ECOBA",10,0)
PROPERTY(HANDLE,SCOPE,PROPERTY,VALUE)  ;
"RTN","ECOBA",11,0)
 D PROPERTY^ECOB(HANDLE,SCOPE,PROPERTY,VALUE)
"RTN","ECOBA",12,0)
 Q
"RTN","ECOBA",13,0)
 ;;
"RTN","ECOBA",14,0)
 ;; public methods
"RTN","ECOBA",15,0)
CREATE(NAME)  ;
"RTN","ECOBA",16,0)
 ; call parent first
"RTN","ECOBA",17,0)
 N HANDLE,CHILD
"RTN","ECOBA",18,0)
 S HANDLE=$$CREATE^ECOB2(NAME)
"RTN","ECOBA",19,0)
 D SELF^ECOB(.RESULT,HANDLE,"Attribute","Attribute","METHOD^ECOBA(.RESULT,ARGUMENT)","ECOB2")
"RTN","ECOBA",20,0)
 ;;
"RTN","ECOBA",21,0)
 D PROPERTY(HANDLE,"Pu","AddedByClass","")
"RTN","ECOBA",22,0)
 D PROPERTY(HANDLE,"Pu","Cleared","false")
"RTN","ECOBA",23,0)
 D PROPERTY(HANDLE,"Pu","DefaultValue","")
"RTN","ECOBA",24,0)
 D PROPERTY(HANDLE,"Pu","Description","")
"RTN","ECOBA",25,0)
 D PROPERTY(HANDLE,"Pu","Edited","false")
"RTN","ECOBA",26,0)
 D PROPERTY(HANDLE,"Pu","Name","")
"RTN","ECOBA",27,0)
 D PROPERTY(HANDLE,"Pu","Obtained","false")
"RTN","ECOBA",28,0)
 D PROPERTY(HANDLE,"Pu","Persisted","false")
"RTN","ECOBA",29,0)
 D PROPERTY(HANDLE,"Pu","Scope","")
"RTN","ECOBA",30,0)
 D PROPERTY(HANDLE,"Pu","Value","")
"RTN","ECOBA",31,0)
 ; complex properties last
"RTN","ECOBA",32,0)
 Q HANDLE
"RTN","ECOBA",33,0)
 ;;
"RTN","ECOBA",34,0)
DESTROY(HANDLE)  ;
"RTN","ECOBA",35,0)
 ; call parent last
"RTN","ECOBA",36,0)
 Q $$DESTROY^ECOB2(HANDLE)
"RTN","ECOBA",37,0)
 ;;
"RTN","ECOBA",38,0)
METHOD(RESULT,ARGUMENT)  ;
"RTN","ECOBA",39,0)
 ; argument=(name.count[handle]).method.(additional.params...)
"RTN","ECOBA",40,0)
 D METHOD^ECOB2(.RESULT,ARGUMENT)
"RTN","ECOBA",41,0)
 Q
"RTN","ECOBA",42,0)
 ;;
"RTN","ECOBARG")
0^18^B4723167^n/a
"RTN","ECOBARG",1,0)
ECOBARG ;BP/CMF - Argument Object
"RTN","ECOBARG",2,0)
 ;;2.0;EVENT CAPTURE;**100**;8 May 96;Build 21
"RTN","ECOBARG",3,0)
 ;@author  - Chris Flegel
"RTN","ECOBARG",4,0)
 ;@date    - 17 May 2009
"RTN","ECOBARG",5,0)
 ;@version - 1.0
"RTN","ECOBARG",6,0)
 ;;
"RTN","ECOBARG",7,0)
 Q
"RTN","ECOBARG",8,0)
 ;; private methods
"RTN","ECOBARG",9,0)
 ;;
"RTN","ECOBARG",10,0)
PARSE(PARSE,VALUE)  ;
"RTN","ECOBARG",11,0)
 D PARSE^ECOB(PARSE,VALUE)
"RTN","ECOBARG",12,0)
 Q
"RTN","ECOBARG",13,0)
 ;;
"RTN","ECOBARG",14,0)
PROPERTY(HANDLE,SCOPE,PROPERTY,VALUE)  ;
"RTN","ECOBARG",15,0)
 D PROPERTY^ECOB(HANDLE,SCOPE,PROPERTY,VALUE)
"RTN","ECOBARG",16,0)
 Q
"RTN","ECOBARG",17,0)
 ;;
"RTN","ECOBARG",18,0)
SETARG(RESULT,ARGUMENT)  ;
"RTN","ECOBARG",19,0)
 ; argument=(name.count[handle]).method.(additional.params...)
"RTN","ECOBARG",20,0)
 N HANDLE
"RTN","ECOBARG",21,0)
 S ARGUMENT=$G(ARGUMENT)
"RTN","ECOBARG",22,0)
 D PARSE("Handle",ARGUMENT)
"RTN","ECOBARG",23,0)
 D SET^ECOB(.RESULT,HANDLE,"Pu","Argument",ARGUMENT)
"RTN","ECOBARG",24,0)
 D SET^ECOB(.RESULT,HANDLE,"Pu","Count",$P(ARGUMENT,".",2))
"RTN","ECOBARG",25,0)
 D SET^ECOB(.RESULT,HANDLE,"Pu","Handle",HANDLE)
"RTN","ECOBARG",26,0)
 D SET^ECOB(.RESULT,HANDLE,"Pu","Name",$P(ARGUMENT,".",1))
"RTN","ECOBARG",27,0)
 D SET^ECOB(.RESULT,HANDLE,"Pu","Method",$P(ARGUMENT,".",3))
"RTN","ECOBARG",28,0)
 D SET^ECOB(.RESULT,HANDLE,"Pu","Params",$P(ARGUMENT,".",4,99))
"RTN","ECOBARG",29,0)
 Q
"RTN","ECOBARG",30,0)
 ;;
"RTN","ECOBARG",31,0)
 ;; public methods
"RTN","ECOBARG",32,0)
CREATE(NAME)  ;
"RTN","ECOBARG",33,0)
 ; call parent first
"RTN","ECOBARG",34,0)
 N HANDLE,CHILD
"RTN","ECOBARG",35,0)
 S HANDLE=$$CREATE^ECOB(NAME)
"RTN","ECOBARG",36,0)
 D SELF^ECOB(.RESULT,HANDLE,"Method","Method","METHOD^ECOBM(.RESULT,ARGUMENT)","ECOB2")
"RTN","ECOBARG",37,0)
 ;;
"RTN","ECOBARG",38,0)
 D PROPERTY(HANDLE,"Pu","Argument","")
"RTN","ECOBARG",39,0)
 D PROPERTY(HANDLE,"Pu","Count","")
"RTN","ECOBARG",40,0)
 D PROPERTY(HANDLE,"Pu","Handle","")
"RTN","ECOBARG",41,0)
 D PROPERTY(HANDLE,"Pu","Name","")
"RTN","ECOBARG",42,0)
 D PROPERTY(HANDLE,"Pu","Method","")
"RTN","ECOBARG",43,0)
 D PROPERTY(HANDLE,"Pu","Params","")
"RTN","ECOBARG",44,0)
 ; complex properties last
"RTN","ECOBARG",45,0)
 Q HANDLE
"RTN","ECOBARG",46,0)
 ;;
"RTN","ECOBARG",47,0)
DESTROY(HANDLE)  ;
"RTN","ECOBARG",48,0)
 ; call parent last
"RTN","ECOBARG",49,0)
 Q $$DESTROY^ECOB(HANDLE)
"RTN","ECOBARG",50,0)
 ;;
"RTN","ECOBARG",51,0)
METHOD(RESULT,ARGUMENT)  ;
"RTN","ECOBARG",52,0)
 ; argument=(name.count[handle]).method.(additional.params...)
"RTN","ECOBARG",53,0)
 N CHILD,HANDLE,METHOD,PARAMS
"RTN","ECOBARG",54,0)
 D PARSE("Handle",ARGUMENT)
"RTN","ECOBARG",55,0)
 D PARSE("Method",ARGUMENT)
"RTN","ECOBARG",56,0)
 D PARSE("Params",ARGUMENT)
"RTN","ECOBARG",57,0)
 I METHOD="SetArgument" D SETARG(.RESULT,ARGUMENT) Q
"RTN","ECOBARG",58,0)
 S RESULT="-1^Invalid Argument"
"RTN","ECOBARG",59,0)
 Q
"RTN","ECOBARG",60,0)
 ;;
"RTN","ECOBC")
0^19^B72789394^n/a
"RTN","ECOBC",1,0)
ECOBC ;BP/CMF - Criteria Object
"RTN","ECOBC",2,0)
 ;;2.0;EVENT CAPTURE;**100**;8 May 96;Build 21
"RTN","ECOBC",3,0)
 ;@author  - Chris Flegel
"RTN","ECOBC",4,0)
 ;@date    - 17 May 2009
"RTN","ECOBC",5,0)
 ;@version - 1.0
"RTN","ECOBC",6,0)
 ;;
"RTN","ECOBC",7,0)
 Q
"RTN","ECOBC",8,0)
 ;; private methods
"RTN","ECOBC",9,0)
CLEAR(RESULT,HANDLE,PARAMS) ; restore criteria to default values
"RTN","ECOBC",10,0)
 D METHOD(.RESULT,HANDLE_".SetLastItem.0")
"RTN","ECOBC",11,0)
 D METHOD(.RESULT,HANDLE_".SetLastValue.")
"RTN","ECOBC",12,0)
 K @HANDLE@("CriteriaItem")
"RTN","ECOBC",13,0)
 K @HANDLE@("CriteriaValue")
"RTN","ECOBC",14,0)
 Q
"RTN","ECOBC",15,0)
 ;;
"RTN","ECOBC",16,0)
FIND(RESULT,HANDLE,PARAMS) ; return list that matches params
"RTN","ECOBC",17,0)
 ;be certain to set 'last' property to last found result
"RTN","ECOBC",18,0)
 ;RESULT.Count   = # of matching items found
"RTN","ECOBC",19,0)
 ;RESULT.Search  = actual string searched for
"RTN","ECOBC",20,0)
 ;RESULT.Pattern = the piece pattern used for result.item
"RTN","ECOBC",21,0)
 ;RESULT.Item.1  = 1st item found
"RTN","ECOBC",22,0)
 ;RESULT.Item.2  = 2nd item found...
"RTN","ECOBC",23,0)
 N EQUALS,ITEM,ITEMS,VALUE,NAME,OUT,RETURN,X ;,CONTAINS,BEGINS
"RTN","ECOBC",24,0)
 ;;;D PARSE("Handle",HANDLE)
"RTN","ECOBC",25,0)
 S VALUE=$S($G(PARAMS)'="":PARAMS,1:"~nil~")
"RTN","ECOBC",26,0)
 D METHOD(.NAME,HANDLE_".Get_namespace")
"RTN","ECOBC",27,0)
 S OUT=$$CREATE^ECOBL(NAME)
"RTN","ECOBC",28,0)
 S RESULT=OUT
"RTN","ECOBC",29,0)
 D PROPERTY^ECOBL(OUT,"Pu","Search",VALUE)
"RTN","ECOBC",30,0)
 D PROPERTY^ECOBL(OUT,"Pu","Result","0^No items found.")
"RTN","ECOBC",31,0)
 D METHOD(.EQUALS,HANDLE_".GetEquals")
"RTN","ECOBC",32,0)
 D:EQUALS="true"  Q
"RTN","ECOBC",33,0)
 .Q:'$D(@HANDLE@("CriteriaValue",VALUE))
"RTN","ECOBC",34,0)
 .S ITEM=0
"RTN","ECOBC",35,0)
 .S ITEMS=0
"RTN","ECOBC",36,0)
 .F  S ITEM=$O(@HANDLE@("CriteriaValue",VALUE,ITEM)) Q:ITEM=""  D
"RTN","ECOBC",37,0)
 ..S ITEMS=ITEMS+1
"RTN","ECOBC",38,0)
 ..S RETURN=$$ONRETURN(ITEM,VALUE)
"RTN","ECOBC",39,0)
 ..D METHOD^ECOBL(.X,OUT_".Add."_RETURN)
"RTN","ECOBC",40,0)
 ..D METHOD(.X,HANDLE_".SetLastItem."_ITEM)
"RTN","ECOBC",41,0)
 ..D METHOD(.X,HANDLE_".SetLastValue."_VALUE)
"RTN","ECOBC",42,0)
 ..Q
"RTN","ECOBC",43,0)
 .D METHOD(.X,OUT_".SetResult."_ITEMS_"^Item(s) found")
"RTN","ECOBC",44,0)
 .S RESULT=OUT
"RTN","ECOBC",45,0)
 .Q
"RTN","ECOBC",46,0)
 .;;
"RTN","ECOBC",47,0)
 ;;D METHOD(.CONTAINS,HANDLE_".GetContains")
"RTN","ECOBC",48,0)
 ;;D:CONTAINS="true" 
"RTN","ECOBC",49,0)
 ;;.Q
"RTN","ECOBC",50,0)
 ;;.;;
"RTN","ECOBC",51,0)
 ;;D METHOD(.BEGINS,HANDLE_".GetBeginsWith")
"RTN","ECOBC",52,0)
 ;;D:BEGINS="true" 
"RTN","ECOBC",53,0)
 ;;.Q
"RTN","ECOBC",54,0)
 ;;.;;
"RTN","ECOBC",55,0)
 S RESULT="-1^'Find' method not fully implemented yet"
"RTN","ECOBC",56,0)
 Q
"RTN","ECOBC",57,0)
 ;;
"RTN","ECOBC",58,0)
FIND1(RESULT,HANDLE,PARAMS) ; return first value that matches params
"RTN","ECOBC",59,0)
 N ITEM,VALUE
"RTN","ECOBC",60,0)
 S RESULT=""
"RTN","ECOBC",61,0)
 S VALUE=$G(PARAMS)
"RTN","ECOBC",62,0)
 Q:VALUE=""
"RTN","ECOBC",63,0)
 Q:'$D(@HANDLE@("CriteriaValue",VALUE))
"RTN","ECOBC",64,0)
 S ITEM=$O(@HANDLE@("CriteriaValue",VALUE,""))
"RTN","ECOBC",65,0)
 S RESULT=$$ONRETURN(ITEM,VALUE)
"RTN","ECOBC",66,0)
 Q
"RTN","ECOBC",67,0)
 ;;
"RTN","ECOBC",68,0)
FIRST(RESULT,HANDLE,PARAMS) ; return first item in sequence
"RTN","ECOBC",69,0)
 N X
"RTN","ECOBC",70,0)
 D METHOD(.X,HANDLE_".SetLastItem.0")
"RTN","ECOBC",71,0)
 D METHOD(.X,HANDLE_".SetLastValue.")
"RTN","ECOBC",72,0)
 D NEXT(.RESULT,HANDLE,PARAMS)
"RTN","ECOBC",73,0)
 Q
"RTN","ECOBC",74,0)
 ;;
"RTN","ECOBC",75,0)
INDEX(RESULT,HANDLE,PARAMS) ; params are item of parent collector
"RTN","ECOBC",76,0)
 N PARENT,ITEM,VALUE,NAME,COUNT,ARGUMENT,INDEXOF,CHILD
"RTN","ECOBC",77,0)
 ;;;D PARSE("Handle",HANDLE)
"RTN","ECOBC",78,0)
 D GET^ECOBL(.PARENT,HANDLE,"Pr","_collector")
"RTN","ECOBC",79,0)
 S ITEM=+PARAMS
"RTN","ECOBC",80,0)
 I ITEM<1 S RESULT="-1^Invalid item "_ITEM_" for index" Q
"RTN","ECOBC",81,0)
 ;kill old indices
"RTN","ECOBC",82,0)
 D
"RTN","ECOBC",83,0)
 .Q:'$D(@HANDLE@("CriteriaItem",ITEM))
"RTN","ECOBC",84,0)
 .S VALUE=$O(@HANDLE@("CriteriaItem",ITEM,""))
"RTN","ECOBC",85,0)
 .S VALUE=$S(VALUE="":"~nil~",1:VALUE)
"RTN","ECOBC",86,0)
 .K @HANDLE@("CriteriaItem",ITEM)
"RTN","ECOBC",87,0)
 .K @HANDLE@("CriteriaValue",VALUE,ITEM)
"RTN","ECOBC",88,0)
 ;set new indices
"RTN","ECOBC",89,0)
 D METHOD(.INDEXOF,HANDLE_".GetIndexOf")
"RTN","ECOBC",90,0)
 I INDEXOF="list" D
"RTN","ECOBC",91,0)
 .D GETITEM^ECOBL(.VALUE,PARENT,ITEM)
"RTN","ECOBC",92,0)
 .S VALUE=$S(VALUE="":"~nil~",1:VALUE)
"RTN","ECOBC",93,0)
 .Q
"RTN","ECOBC",94,0)
 E  D
"RTN","ECOBC",95,0)
 .D METHOD(.ARGUMENT,HANDLE_".GetArgument")
"RTN","ECOBC",96,0)
 .D GETITEM^ECOBL(.CHILD,PARENT,ITEM)
"RTN","ECOBC",97,0)
 .D METHOD^ECOB(.VALUE,CHILD_"."_ARGUMENT) ;generic call
"RTN","ECOBC",98,0)
 .S VALUE=$S(VALUE="":"~nil~",1:VALUE)
"RTN","ECOBC",99,0)
 .Q
"RTN","ECOBC",100,0)
 S @HANDLE@("CriteriaItem",ITEM,VALUE)=""
"RTN","ECOBC",101,0)
 S @HANDLE@("CriteriaValue",VALUE,ITEM)=""
"RTN","ECOBC",102,0)
 Q
"RTN","ECOBC",103,0)
 ;;
"RTN","ECOBC",104,0)
INFO(RESULT,HANDLE,PARAMS)  ;
"RTN","ECOBC",105,0)
 D INFO^ECOB2(.RESULT,HANDLE,PARAMS)
"RTN","ECOBC",106,0)
 Q
"RTN","ECOBC",107,0)
 ;;
"RTN","ECOBC",108,0)
LAST(RESULT,HANDLE,PARAMS)  ; return last referenced item
"RTN","ECOBC",109,0)
 ;to do: implement .object argument method calls
"RTN","ECOBC",110,0)
 N LASTITEM,LASTVALU,ONRETURN
"RTN","ECOBC",111,0)
 D METHOD(.LASTITEM,HANDLE_".GetLastItem")
"RTN","ECOBC",112,0)
 D METHOD(.LASTVALU,HANDLE_".GetLastValue")
"RTN","ECOBC",113,0)
 S RESULT=$$ONRETURN(LASTITEM,LASTVALU) ;NEXT_"^"_VALUE
"RTN","ECOBC",114,0)
 Q
"RTN","ECOBC",115,0)
 ;;
"RTN","ECOBC",116,0)
NEXT(RESULT,HANDLE,PARAMS) ; return next item^value in sequence
"RTN","ECOBC",117,0)
 ;be certain to set 'last' property to result
"RTN","ECOBC",118,0)
 N ARGUMENT,INDEXOF,LASTITEM,LASTVALU
"RTN","ECOBC",119,0)
 N NAME,COUNT,NEXT,VALUE,X
"RTN","ECOBC",120,0)
 D METHOD(.ARGUMENT,HANDLE_".GetArgument")
"RTN","ECOBC",121,0)
 D METHOD(.INDEXOF,HANDLE_".GetIndexOf")
"RTN","ECOBC",122,0)
 D METHOD(.LASTITEM,HANDLE_".GetLastItem")
"RTN","ECOBC",123,0)
 D METHOD(.LASTVALU,HANDLE_".GetLastValue")
"RTN","ECOBC",124,0)
 ;D METHOD(.LVALITEM,HANDLE_".GetLastValueItem")
"RTN","ECOBC",125,0)
 ;;;D PARSE("Handle",HANDLE)
"RTN","ECOBC",126,0)
 I INDEXOF="list" D  Q
"RTN","ECOBC",127,0)
 .S NEXT=$O(@HANDLE@("CriteriaItem",LASTITEM))
"RTN","ECOBC",128,0)
 .I NEXT="" S RESULT="-1^End of list" Q
"RTN","ECOBC",129,0)
 .S VALUE=$O(@HANDLE@("CriteriaItem",NEXT,""))
"RTN","ECOBC",130,0)
 .S RESULT=$$ONRETURN(NEXT,VALUE) ;NEXT_"^"_VALUE
"RTN","ECOBC",131,0)
 .D METHOD(.X,HANDLE_".SetLastItem."_NEXT)
"RTN","ECOBC",132,0)
 .D METHOD(.X,HANDLE_".SetLastValue."_VALUE)
"RTN","ECOBC",133,0)
 .;D METHOD(.X,HANDLE_".SetLastValueItem.")
"RTN","ECOBC",134,0)
 ;;
"RTN","ECOBC",135,0)
 I INDEXOF="value" D  Q
"RTN","ECOBC",136,0)
 .S VALUE=$O(@HANDLE@("CriteriaValue",LASTVALU))
"RTN","ECOBC",137,0)
 .;S VALUE=$O(@HANDLE@("CriteriaValue",LASTVALU,LVALITEM))
"RTN","ECOBC",138,0)
 .I VALUE="" S RESULT="-1^End of list" Q
"RTN","ECOBC",139,0)
 .S NEXT=$O(@HANDLE@("CriteriaValue",VALUE,""))
"RTN","ECOBC",140,0)
 .;S NEXT=$O(@HANDLE@("CriteriaValue",VALUE,LVALITEM))
"RTN","ECOBC",141,0)
 .S RESULT=$$ONRETURN(NEXT,VALUE) ;NEXT_"^"_VALUE
"RTN","ECOBC",142,0)
 .D METHOD(.X,HANDLE_".SetLastItem."_NEXT)
"RTN","ECOBC",143,0)
 .D METHOD(.X,HANDLE_".SetLastValue."_VALUE)
"RTN","ECOBC",144,0)
 .;D METHOD(.X,HANDLE_".SetLastValueItem."_LVALITEM)
"RTN","ECOBC",145,0)
 .Q
"RTN","ECOBC",146,0)
 ;;
"RTN","ECOBC",147,0)
 I INDEXOF="object" D
"RTN","ECOBC",148,0)
 .;to do: Get object handle (use _collector),
"RTN","ECOBC",149,0)
 .;         then call method represented by PARAMS
"RTN","ECOBC",150,0)
 .Q 
"RTN","ECOBC",151,0)
 S RESULT="-1^'Next' method not fully implemented"
"RTN","ECOBC",152,0)
 Q
"RTN","ECOBC",153,0)
 ;;
"RTN","ECOBC",154,0)
ONRETURN(ITEM,VALUE)  ;
"RTN","ECOBC",155,0)
 N ONRETURN,RESULT,PARENT
"RTN","ECOBC",156,0)
 S RESULT=ITEM_"^"_VALUE
"RTN","ECOBC",157,0)
 D METHOD(.ONRETURN,HANDLE_".GetOnReturn")
"RTN","ECOBC",158,0)
 I ONRETURN="value" Q VALUE
"RTN","ECOBC",159,0)
 I ONRETURN="item" Q ITEM
"RTN","ECOBC",160,0)
 I ONRETURN="handle" D  Q RESULT
"RTN","ECOBC",161,0)
 .D GET^ECOBL(.PARENT,HANDLE,"Pr","_collector")
"RTN","ECOBC",162,0)
 .D METHOD^ECOBL(.RESULT,PARENT_".GetItem."_ITEM)
"RTN","ECOBC",163,0)
 .Q
"RTN","ECOBC",164,0)
 ;;
"RTN","ECOBC",165,0)
PARSE(PARSE,VALUE)  ;
"RTN","ECOBC",166,0)
 D PARSE^ECOBL(PARSE,VALUE)
"RTN","ECOBC",167,0)
 Q
"RTN","ECOBC",168,0)
 ;;
"RTN","ECOBC",169,0)
PROPERTY(HANDLE,SCOPE,PROPERTY,VALUE)  ;
"RTN","ECOBC",170,0)
 D PROPERTY^ECOBL(HANDLE,SCOPE,PROPERTY,VALUE)
"RTN","ECOBC",171,0)
 Q
"RTN","ECOBC",172,0)
 ;;
"RTN","ECOBC",173,0)
REINDEX(RESULT,HANDLE) ; Reindex collection
"RTN","ECOBC",174,0)
 N PARENT,ITEM
"RTN","ECOBC",175,0)
 D GET^ECOBL(.PARENT,HANDLE,"Pr","_collector")
"RTN","ECOBC",176,0)
 ;;;D PARSE("Handle",PARENT)
"RTN","ECOBC",177,0)
 S ITEM=0
"RTN","ECOBC",178,0)
 F  S ITEM=$O(@HANDLE@("Pr","list",ITEM)) Q:+ITEM=0  D
"RTN","ECOBC",179,0)
 .D INDEX(.RESULT,HANDLE,ITEM)
"RTN","ECOBC",180,0)
 .Q
"RTN","ECOBC",181,0)
 Q
"RTN","ECOBC",182,0)
 ;;
"RTN","ECOBC",183,0)
SETARG(RESULT,HANDLE,PARAMS) ;set argument
"RTN","ECOBC",184,0)
 N VALUE,INDEXOF
"RTN","ECOBC",185,0)
 S VALUE=$G(PARAMS)
"RTN","ECOBC",186,0)
 S INDEXOF=$S(VALUE="":"list",1:"value")
"RTN","ECOBC",187,0)
 D SET^ECOBL(.RESULT,HANDLE,"Pu","Argument",VALUE)
"RTN","ECOBC",188,0)
 D SET^ECOBL(.RESULT,HANDLE,"Pu","IndexOf",INDEXOF)
"RTN","ECOBC",189,0)
 D REINDEX(.RESULT,HANDLE)
"RTN","ECOBC",190,0)
 Q
"RTN","ECOBC",191,0)
 ;;
"RTN","ECOBC",192,0)
SETIND(RESULT,HANDLE,PARAMS) ;set indexOf
"RTN","ECOBC",193,0)
 N VALUE,ARGUMENT
"RTN","ECOBC",194,0)
 S VALUE=$G(PARAMS)
"RTN","ECOBC",195,0)
 S VALUE=$S(VALUE="value":VALUE,1:"list")
"RTN","ECOBC",196,0)
 D SET^ECOBL(.RESULT,HANDLE,"Pu","IndexOf",VALUE)
"RTN","ECOBC",197,0)
 I VALUE="list" D SET^ECOBL(.RESULT,HANDLE,"Pu","Argument","~nil~")
"RTN","ECOBC",198,0)
 D REINDEX(.RESULT,HANDLE)
"RTN","ECOBC",199,0)
 Q
"RTN","ECOBC",200,0)
 ;;
"RTN","ECOBC",201,0)
SETRET(RESULT,HANDLE,PARAMS) ;set OnReturn
"RTN","ECOBC",202,0)
 N VALUE
"RTN","ECOBC",203,0)
 S VALUE=$G(PARAMS)
"RTN","ECOBC",204,0)
 S VALUE=$S(VALUE="value":VALUE,VALUE="handle":VALUE,1:"item")
"RTN","ECOBC",205,0)
 D SET^ECOBL(.RESULT,HANDLE,"Pu","OnReturn",VALUE)
"RTN","ECOBC",206,0)
 Q
"RTN","ECOBC",207,0)
 ;; protected methods
"RTN","ECOBC",208,0)
CREATE(NAME)  ;
"RTN","ECOBC",209,0)
 ; call parent first
"RTN","ECOBC",210,0)
 N HANDLE,X
"RTN","ECOBC",211,0)
 S HANDLE=$$CREATE^ECOB(NAME)
"RTN","ECOBC",212,0)
 ;;
"RTN","ECOBC",213,0)
 D SELF^ECOB(.X,HANDLE,"ECOBC","Criteria","METHOD^ECOBC(.RESULT,ARGUMENT)","ECOBC")
"RTN","ECOBC",214,0)
 ;;
"RTN","ECOBC",215,0)
 D PROPERTY(HANDLE,"Pr","_collector","")
"RTN","ECOBC",216,0)
 D PROPERTY(HANDLE,"Pu","Argument","~nil~")
"RTN","ECOBC",217,0)
 D PROPERTY(HANDLE,"Pu","BeginsWith","false")
"RTN","ECOBC",218,0)
 D PROPERTY(HANDLE,"Pu","Contains","false")
"RTN","ECOBC",219,0)
 D PROPERTY(HANDLE,"Pu","Equals","true")
"RTN","ECOBC",220,0)
 D PROPERTY(HANDLE,"Pu","IndexOf","list")
"RTN","ECOBC",221,0)
 D PROPERTY(HANDLE,"Pu","LastItem",0)
"RTN","ECOBC",222,0)
 D PROPERTY(HANDLE,"Pu","LastValue","")
"RTN","ECOBC",223,0)
 D PROPERTY(HANDLE,"Pu","LastValueItem","")
"RTN","ECOBC",224,0)
 D PROPERTY(HANDLE,"Pu","OnReturn","value")
"RTN","ECOBC",225,0)
 D PROPERTY(HANDLE,"Pu","Unique","false")
"RTN","ECOBC",226,0)
 ; complex properties last
"RTN","ECOBC",227,0)
 Q HANDLE
"RTN","ECOBC",228,0)
 ;;
"RTN","ECOBC",229,0)
DESTROY(HANDLE)  ;
"RTN","ECOBC",230,0)
 ; call parent last
"RTN","ECOBC",231,0)
 Q $$DESTROY^ECOB(HANDLE)
"RTN","ECOBC",232,0)
 ;;
"RTN","ECOBC",233,0)
METHOD(RESULT,ARGUMENT)  ;
"RTN","ECOBC",234,0)
 N HANDLE,METHOD,PARAMS
"RTN","ECOBC",235,0)
 D PARSE("Handle",ARGUMENT)
"RTN","ECOBC",236,0)
 D PARSE("Method",ARGUMENT)
"RTN","ECOBC",237,0)
 D PARSE("Params",ARGUMENT)
"RTN","ECOBC",238,0)
 I METHOD="Clear" D CLEAR(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBC",239,0)
 I METHOD="Find" D FIND(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBC",240,0)
 I METHOD="Find1" D FIND1(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBC",241,0)
 I METHOD="First" D FIRST(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBC",242,0)
 I METHOD="Index" D INDEX(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBC",243,0)
 I METHOD="Last" D LAST(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBC",244,0)
 I METHOD="Next" D NEXT(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBC",245,0)
 I METHOD="SetOnReturn" D SETRET(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBC",246,0)
 I METHOD="SetArgument" D SETARG(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBC",247,0)
    I METHOD="SetIndexOf" D SETIND(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBC",248,0)
 D METHOD^ECOB2(.RESULT,ARGUMENT)
"RTN","ECOBC",249,0)
 Q
"RTN","ECOBC",250,0)
 ;;
"RTN","ECOBL")
0^23^B38300397^n/a
"RTN","ECOBL",1,0)
ECOBL ;BP/CMF - List object
"RTN","ECOBL",2,0)
 ;;2.0;EVENT CAPTURE;**100**;8 May 96;Build 21
"RTN","ECOBL",3,0)
 ;@author  - Chris Flegel
"RTN","ECOBL",4,0)
 ;@date    - 17 May 2009
"RTN","ECOBL",5,0)
 ;@version - 1.0
"RTN","ECOBL",6,0)
 ;;
"RTN","ECOBL",7,0)
 Q
"RTN","ECOBL",8,0)
 ;;private methods
"RTN","ECOBL",9,0)
ADD(RESULT,HANDLE,VALUE) ; add simple list item
"RTN","ECOBL",10,0)
 N ITEM,X
"RTN","ECOBL",11,0)
 D PARSE("Handle",HANDLE)
"RTN","ECOBL",12,0)
 D GET(.ITEM,HANDLE,"Pu","Count")
"RTN","ECOBL",13,0)
 S ITEM=ITEM+1
"RTN","ECOBL",14,0)
 S @HANDLE@("Pr","list",ITEM)=VALUE
"RTN","ECOBL",15,0)
 D METHOD(.X,HANDLE_".Criteria.SetLastItem."_ITEM)
"RTN","ECOBL",16,0)
 D METHOD(.X,HANDLE_".Criteria.SetLastValue."_VALUE)
"RTN","ECOBL",17,0)
 D SET(.X,HANDLE,"Pu","Count",ITEM)
"RTN","ECOBL",18,0)
 D METHOD(.X,HANDLE_".Criteria.Index."_ITEM)
"RTN","ECOBL",19,0)
 S RESULT=ITEM
"RTN","ECOBL",20,0)
 Q
"RTN","ECOBL",21,0)
 ;;
"RTN","ECOBL",22,0)
CLEAR(RESULT,HANDLE,PARAMS) ; restore to default state
"RTN","ECOBL",23,0)
 D METHOD(.RESULT,HANDLE_".Criteria.Clear")
"RTN","ECOBL",24,0)
 K @HANDLE@("Pr","list")
"RTN","ECOBL",25,0)
 D SET(.RESULT,HANDLE,"Pu","Count",0)
"RTN","ECOBL",26,0)
 Q
"RTN","ECOBL",27,0)
 ;;
"RTN","ECOBL",28,0)
COLLECT(RESULT,HANDLE,CHILD) ; add a child object to the list
"RTN","ECOBL",29,0)
 N ITEM
"RTN","ECOBL",30,0)
 D PARSE("Handle",HANDLE)
"RTN","ECOBL",31,0)
 D ADD(.ITEM,HANDLE,CHILD)
"RTN","ECOBL",32,0)
 S @HANDLE@("Pr","list","Handle",CHILD)=ITEM
"RTN","ECOBL",33,0)
 S RESULT=ITEM
"RTN","ECOBL",34,0)
 Q
"RTN","ECOBL",35,0)
 ;;
"RTN","ECOBL",36,0)
FIRST(RESULT,HANDLE,PARAMS)  ;
"RTN","ECOBL",37,0)
 D METHOD(.RESULT,HANDLE_".Criteria.First")
"RTN","ECOBL",38,0)
 Q
"RTN","ECOBL",39,0)
 ;;
"RTN","ECOBL",40,0)
FIND(RESULT,HANDLE,PARAMS)  ;
"RTN","ECOBL",41,0)
 D METHOD(.RESULT,HANDLE_".Criteria.Find."_PARAMS)
"RTN","ECOBL",42,0)
 Q
"RTN","ECOBL",43,0)
 ;;
"RTN","ECOBL",44,0)
FIND1(RESULT,HANDLE,PARAMS)  ;
"RTN","ECOBL",45,0)
 D METHOD(.RESULT,HANDLE_".Criteria.Find1."_PARAMS)
"RTN","ECOBL",46,0)
 Q
"RTN","ECOBL",47,0)
 ;;
"RTN","ECOBL",48,0)
 ;;
"RTN","ECOBL",49,0)
GET(RESULT,HANDLE,SCOPE,PROPERTY)  ;
"RTN","ECOBL",50,0)
 ; if unique get methods, call them first, else call parent
"RTN","ECOBL",51,0)
 D GET^ECOB(.RESULT,HANDLE,SCOPE,PROPERTY)
"RTN","ECOBL",52,0)
 Q 
"RTN","ECOBL",53,0)
    ;;
"RTN","ECOBL",54,0)
GETITEM(RESULT,HANDLE,ITEM) ; get simple list item
"RTN","ECOBL",55,0)
 N NAME,COUNT
"RTN","ECOBL",56,0)
 D PARSE("Handle",HANDLE)
"RTN","ECOBL",57,0)
 S RESULT=$G(@HANDLE@("Pr","list",ITEM))
"RTN","ECOBL",58,0)
 Q
"RTN","ECOBL",59,0)
 ;;
"RTN","ECOBL",60,0)
INFO(RESULT,HANDLE,PARAMS)  ;
"RTN","ECOBL",61,0)
 N NAME,COUNT,ITEMS,I,OUT,JUSTIFY,OFFSET
"RTN","ECOBL",62,0)
 D PARSE("Offset",PARAMS)
"RTN","ECOBL",63,0)
 D METHOD(.ITEMS,HANDLE_".ShowCount."_JUSTIFY)
"RTN","ECOBL",64,0)
 D METHOD(.OUT,HANDLE_".First")
"RTN","ECOBL",65,0)
 F  Q:+OUT=-1  D
"RTN","ECOBL",66,0)
 .W !,$J(OUT,OFFSET)
"RTN","ECOBL",67,0)
 .D METHOD(.OUT,HANDLE_".Next")
"RTN","ECOBL",68,0)
 .Q
"RTN","ECOBL",69,0)
 Q
"RTN","ECOBL",70,0)
 ;;
"RTN","ECOBL",71,0)
ISHANDLE(HANDLE,VALUE) ; is value a collected handle
"RTN","ECOBL",72,0)
 Q:(HANDLE="")!(VALUE="") 0
"RTN","ECOBL",73,0)
 Q $D(@HANDLE@("Pr","list","Handle",VALUE))
"RTN","ECOBL",74,0)
 ;
"RTN","ECOBL",75,0)
LAST(RESULT,HANDLE,PARAMS) ; get the last referenced item from the list
"RTN","ECOBL",76,0)
 D METHOD(.RESULT,HANDLE_".Criteria.Last")
"RTN","ECOBL",77,0)
 Q
"RTN","ECOBL",78,0)
 ;;
"RTN","ECOBL",79,0)
NEXT(RESULT,HANDLE,PARAMS) ; get the next item from the list
"RTN","ECOBL",80,0)
 D METHOD(.RESULT,HANDLE_".Criteria.Next")
"RTN","ECOBL",81,0)
 Q
"RTN","ECOBL",82,0)
 ;;
"RTN","ECOBL",83,0)
SET(RESULT,HANDLE,SCOPE,PROPERTY,VALUE)  ;
"RTN","ECOBL",84,0)
 ; if unique set methods, call them first, else call parent
"RTN","ECOBL",85,0)
 D SET^ECOB(.RESULT,HANDLE,SCOPE,PROPERTY,VALUE)
"RTN","ECOBL",86,0)
 Q 
"RTN","ECOBL",87,0)
 ;;
"RTN","ECOBL",88,0)
SETITEM(RESULT,HANDLE,ITEM,VALUE) ; set simple list item
"RTN","ECOBL",89,0)
 N NAME,COUNT,X
"RTN","ECOBL",90,0)
 D PARSE("Handle",HANDLE)
"RTN","ECOBL",91,0)
 I '$D(@HANDLE@("Pr","list",ITEM)) D  Q
"RTN","ECOBL",92,0)
 .S RESULT="-1^Item "_ITEM_" does not exist"
"RTN","ECOBL",93,0)
 S @HANDLE@("Pr","list",ITEM)=VALUE
"RTN","ECOBL",94,0)
 D SET(.RESULT,HANDLE,"Pr","last",ITEM)
"RTN","ECOBL",95,0)
 D METHOD(.X,HANDLE_".Criteria.Index."_ITEM)
"RTN","ECOBL",96,0)
 Q
"RTN","ECOBL",97,0)
 ;;
"RTN","ECOBL",98,0)
SHOW(RESULT,HANDLE,SCOPE,PROPERTY,JUSTIFY) ; parent method
"RTN","ECOBL",99,0)
 D SHOW^ECOB(.RESULT,HANDLE,SCOPE,PROPERTY,JUSTIFY)
"RTN","ECOBL",100,0)
 Q
"RTN","ECOBL",101,0)
 ;;
"RTN","ECOBL",102,0)
PARSE(PARSE,VALUE)  ;
"RTN","ECOBL",103,0)
 I PARSE="Child" D  Q
"RTN","ECOBL",104,0)
 .S CHILD=$P(VALUE,"Handle.",2)
"RTN","ECOBL",105,0)
 .Q
"RTN","ECOBL",106,0)
 I PARSE="Count" D  Q
"RTN","ECOBL",107,0)
 .S COUNT=$P(VALUE,".",2)
"RTN","ECOBL",108,0)
 .Q
"RTN","ECOBL",109,0)
 I PARSE="Get" D  Q
"RTN","ECOBL",110,0)
 .S PROPERTY=$P(VALUE,".",3)
"RTN","ECOBL",111,0)
 .S PROPERTY=$P(VALUE,"Get",2)
"RTN","ECOBL",112,0)
 .Q
"RTN","ECOBL",113,0)
 I PARSE="Handle" D  Q
"RTN","ECOBL",114,0)
 .S HANDLE=$P(VALUE,".")
"RTN","ECOBL",115,0)
 .Q
"RTN","ECOBL",116,0)
 I PARSE="Justify" D  Q
"RTN","ECOBL",117,0)
 .S JUSTIFY=$S(+VALUE:+VALUE,1:0)
"RTN","ECOBL",118,0)
 .Q
"RTN","ECOBL",119,0)
 I PARSE="Method" D  Q
"RTN","ECOBL",120,0)
 .S METHOD=$P(VALUE,".",2)
"RTN","ECOBL",121,0)
 .Q
"RTN","ECOBL",122,0)
 I PARSE="Offset" D  Q
"RTN","ECOBL",123,0)
 .S JUSTIFY=$S(+VALUE:+VALUE,1:0)
"RTN","ECOBL",124,0)
 .S OFFSET=JUSTIFY+5
"RTN","ECOBL",125,0)
 .Q
"RTN","ECOBL",126,0)
 I PARSE="Params" D  Q
"RTN","ECOBL",127,0)
 .S PARAMS=$P(VALUE,".",3,99)
"RTN","ECOBL",128,0)
 .Q
"RTN","ECOBL",129,0)
 I PARSE="Set" D  Q
"RTN","ECOBL",130,0)
 .S PROPERTY=$P(VALUE,".",3)
"RTN","ECOBL",131,0)
 .S PROPERTY=$P(PROPERTY,"Set",2)
"RTN","ECOBL",132,0)
 .Q
"RTN","ECOBL",133,0)
 I PARSE="SetItem" D  Q
"RTN","ECOBL",134,0)
 .S SETITEM=+$P(VALUE,".")
"RTN","ECOBL",135,0)
 .S SETVALUE=$P(VALUE,".",2)
"RTN","ECOBL",136,0)
 .Q
"RTN","ECOBL",137,0)
 I PARSE="SetValue" D  Q
"RTN","ECOBL",138,0)
 .S SETVALUE=$P(VALUE,".",4)
"RTN","ECOBL",139,0)
 .Q
"RTN","ECOBL",140,0)
 Q
"RTN","ECOBL",141,0)
 ;;
"RTN","ECOBL",142,0)
PROPERTY(HANDLE,SCOPE,PROPERTY,VALUE) ; parent method
"RTN","ECOBL",143,0)
 D PROPERTY^ECOB(HANDLE,SCOPE,PROPERTY,VALUE)
"RTN","ECOBL",144,0)
 Q
"RTN","ECOBL",145,0)
 ;;
"RTN","ECOBL",146,0)
ECOBC(RESULT,HANDLE,PROPERTY,ARGUMENT) ; handler for Criteria
"RTN","ECOBL",147,0)
 N CHILD
"RTN","ECOBL",148,0)
 D GET(.CHILD,HANDLE,"Pr",PROPERTY)
"RTN","ECOBL",149,0)
 D METHOD^ECOBC(.RESULT,CHILD_"."_ARGUMENT)
"RTN","ECOBL",150,0)
 Q
"RTN","ECOBL",151,0)
 ;;
"RTN","ECOBL",152,0)
 ;; public methods
"RTN","ECOBL",153,0)
CREATE(NAME)  ;
"RTN","ECOBL",154,0)
 ; call parent first
"RTN","ECOBL",155,0)
 N HANDLE,CHILD,COUNT,X
"RTN","ECOBL",156,0)
 S HANDLE=$$CREATE^ECOB(NAME)
"RTN","ECOBL",157,0)
 D PROPERTY(HANDLE,"Pu","Count",0)
"RTN","ECOBL",158,0)
 D PROPERTY(HANDLE,"Pr","list",0)
"RTN","ECOBL",159,0)
 D PROPERTY(HANDLE,"Pr","last","")
"RTN","ECOBL",160,0)
 D SELF^ECOB(.X,HANDLE,"EC LIST","Basic list","METHOD^ECOBL(.RESULT,ARGUMENT)","ECOB2")
"RTN","ECOBL",161,0)
 ; complex properties last
"RTN","ECOBL",162,0)
 S CHILD=$$CREATE^ECOBC(NAME)
"RTN","ECOBL",163,0)
 D COLLECT^ECOB(HANDLE,CHILD,"Pr","Criteria")
"RTN","ECOBL",164,0)
 D SET^ECOB(.X,CHILD,"Pr","_collector",HANDLE)
"RTN","ECOBL",165,0)
 ;
"RTN","ECOBL",166,0)
 Q HANDLE
"RTN","ECOBL",167,0)
 ;;
"RTN","ECOBL",168,0)
DESTROY(HANDLE)  ;
"RTN","ECOBL",169,0)
 ; call parent last
"RTN","ECOBL",170,0)
 N CHILD
"RTN","ECOBL",171,0)
 D GET(.CHILD,HANDLE,"Pr","Criteria")
"RTN","ECOBL",172,0)
 D DESTROY^ECOBC(CHILD)
"RTN","ECOBL",173,0)
 Q $$DESTROY^ECOB2(HANDLE)
"RTN","ECOBL",174,0)
 ;;
"RTN","ECOBL",175,0)
METHOD(RESULT,ARGUMENT)  ;
"RTN","ECOBL",176,0)
 ; argument= handle.method.(additional.params...)
"RTN","ECOBL",177,0)
 N HANDLE,METHOD,PARAMS
"RTN","ECOBL",178,0)
 D PARSE("Handle",ARGUMENT)
"RTN","ECOBL",179,0)
 D PARSE("Method",ARGUMENT)
"RTN","ECOBL",180,0)
 D PARSE("Params",ARGUMENT)
"RTN","ECOBL",181,0)
 I METHOD="Add" D ADD(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBL",182,0)
 I METHOD="Clear" D CLEAR(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBL",183,0)
 I METHOD="Criteria" D ECOBC(.RESULT,HANDLE,METHOD,PARAMS) Q
"RTN","ECOBL",184,0)
 I METHOD="Collect" D COLLECT(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBL",185,0)
 I METHOD="Find" D FIND(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBL",186,0)
 I METHOD="Find1" D FIND1(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBL",187,0)
 I METHOD="First" D FIRST(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBL",188,0)
 I METHOD="GetItem" D GETITEM(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBL",189,0)
 I METHOD="Info" D INFO(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBL",190,0)
 I METHOD="IsHandle" S RESULT=$$ISHANDLE(HANDLE,PARAMS) Q
"RTN","ECOBL",191,0)
 I METHOD="Last" D LAST(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBL",192,0)
 I METHOD="Next" D NEXT(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBL",193,0)
 ; development methods last
"RTN","ECOBL",194,0)
 I METHOD="SetItem" D  Q
"RTN","ECOBL",195,0)
 .N SETITEM,SETVALUE
"RTN","ECOBL",196,0)
 .D PARSE("SetItem",PARAMS)
"RTN","ECOBL",197,0)
 .D SETITEM(.RESULT,HANDLE,SETITEM,SETVALUE)
"RTN","ECOBL",198,0)
 .Q
"RTN","ECOBL",199,0)
 D METHOD^ECOB2(.RESULT,ARGUMENT)
"RTN","ECOBL",200,0)
 Q
"RTN","ECOBL",201,0)
 ;;
"RTN","ECOBM")
0^24^B1417289^n/a
"RTN","ECOBM",1,0)
ECOBM ;BP/CMF - Method Object
"RTN","ECOBM",2,0)
 ;;2.0;EVENT CAPTURE;**100**;8 May 96;Build 21
"RTN","ECOBM",3,0)
 ;@author  - Chris Flegel
"RTN","ECOBM",4,0)
 ;@date    - 17 May 2009
"RTN","ECOBM",5,0)
 ;@version - 1.0
"RTN","ECOBM",6,0)
 ;;
"RTN","ECOBM",7,0)
 Q
"RTN","ECOBM",8,0)
 ;; private methods
"RTN","ECOBM",9,0)
 ;;
"RTN","ECOBM",10,0)
PROPERTY(HANDLE,SCOPE,PROPERTY,VALUE)  ;
"RTN","ECOBM",11,0)
 D PROPERTY^ECOB(HANDLE,SCOPE,PROPERTY,VALUE)
"RTN","ECOBM",12,0)
 Q
"RTN","ECOBM",13,0)
 ;;
"RTN","ECOBM",14,0)
 ;; public methods
"RTN","ECOBM",15,0)
CREATE(NAME)  ;
"RTN","ECOBM",16,0)
 ; call parent first
"RTN","ECOBM",17,0)
 N HANDLE,CHILD
"RTN","ECOBM",18,0)
 S HANDLE=$$CREATE^ECOBA(NAME)
"RTN","ECOBM",19,0)
 D SELF^ECOB(.RESULT,HANDLE,"Method","Method","METHOD^ECOBM(.RESULT,ARGUMENT)","ECOB2")
"RTN","ECOBM",20,0)
 ;;
"RTN","ECOBM",21,0)
 D PROPERTY(HANDLE,"Pu","Handler","")
"RTN","ECOBM",22,0)
 D PROPERTY(HANDLE,"Pu","Params","")
"RTN","ECOBM",23,0)
 D PROPERTY(HANDLE,"Pu","Returns","")
"RTN","ECOBM",24,0)
 ; complex properties last
"RTN","ECOBM",25,0)
 Q HANDLE
"RTN","ECOBM",26,0)
 ;;
"RTN","ECOBM",27,0)
DESTROY(HANDLE)  ;
"RTN","ECOBM",28,0)
 ; call parent last
"RTN","ECOBM",29,0)
 Q $$DESTROY^ECOBA(HANDLE)
"RTN","ECOBM",30,0)
 ;;
"RTN","ECOBM",31,0)
METHOD(RESULT,ARGUMENT)  ;
"RTN","ECOBM",32,0)
 ; argument=(name.count[handle]).method.(additional.params...)
"RTN","ECOBM",33,0)
 D METHOD^ECOBA(.RESULT,ARGUMENT)
"RTN","ECOBM",34,0)
 Q
"RTN","ECOBM",35,0)
 ;;
"RTN","ECOBMC")
0^25^B8250173^n/a
"RTN","ECOBMC",1,0)
ECOBMC ;BP/CMF - Methods object
"RTN","ECOBMC",2,0)
 ;;2.0;EVENT CAPTURE;**100**;8 May 96;Build 21
"RTN","ECOBMC",3,0)
 ;@author  - Chris Flegel
"RTN","ECOBMC",4,0)
 ;@date    - 17 May 2009
"RTN","ECOBMC",5,0)
 ;@version - 1.0
"RTN","ECOBMC",6,0)
 ;;
"RTN","ECOBMC",7,0)
 Q
"RTN","ECOBMC",8,0)
 ;;private methods
"RTN","ECOBMC",9,0)
ADD(RESULT,HANDLE,VALUE) ; add Method object to list
"RTN","ECOBMC",10,0)
 N CREATE,CHILD,ITEM,X
"RTN","ECOBMC",11,0)
 D METHOD(.CREATE,HANDLE_".Get_namespace")
"RTN","ECOBMC",12,0)
 S CHILD=$$CREATE^ECOBM(CREATE)
"RTN","ECOBMC",13,0)
 D COLLECT^ECOBL(.ITEM,HANDLE,CHILD)
"RTN","ECOBMC",14,0)
 D METHOD^ECOBM(.RESULT,CHILD_".SetName."_VALUE)
"RTN","ECOBMC",15,0)
 D METHOD(.X,HANDLE_".Criteria.Index."_ITEM)
"RTN","ECOBMC",16,0)
 S RESULT=CHILD
"RTN","ECOBMC",17,0)
 Q
"RTN","ECOBMC",18,0)
 ;;
"RTN","ECOBMC",19,0)
INFO(RESULT,HANDLE,PARAMS) ; view method details
"RTN","ECOBMC",20,0)
 N METHOD,JUSTIFY,OFFSET
"RTN","ECOBMC",21,0)
 D PARSE("Offset",PARAMS)
"RTN","ECOBMC",22,0)
 D METHOD(.METHOD,HANDLE_".First")
"RTN","ECOBMC",23,0)
 F  Q:METHOD="-1^End of list"  D
"RTN","ECOBMC",24,0)
 .D METHOD^ECOBM(.RESULT,METHOD_".ShowName."_JUSTIFY)
"RTN","ECOBMC",25,0)
 .D METHOD^ECOBM(.RESULT,METHOD_".ShowDescription."_OFFSET)
"RTN","ECOBMC",26,0)
 .D METHOD^ECOBM(.RESULT,METHOD_".ShowParams."_OFFSET)
"RTN","ECOBMC",27,0)
 .D METHOD^ECOBM(.RESULT,METHOD_".ShowReturns."_OFFSET)
"RTN","ECOBMC",28,0)
 .D METHOD(.METHOD,HANDLE_".Next")
"RTN","ECOBMC",29,0)
 .Q
"RTN","ECOBMC",30,0)
 Q
"RTN","ECOBMC",31,0)
OVERRIDE(RESULT,HANDLE,VALUE) ; override established method
"RTN","ECOBMC",32,0)
 N LIST,CHILD
"RTN","ECOBMC",33,0)
 S RESULT="-1^Method does not exist to override"
"RTN","ECOBMC",34,0)
 D METHOD(.LIST,HANDLE_".Find."_VALUE)
"RTN","ECOBMC",35,0)
 D METHOD(.CHILD,LIST_".First")
"RTN","ECOBMC",36,0)
 I CHILD'="-1^End of list" S RESULT=CHILD
"RTN","ECOBMC",37,0)
 D DESTROY^ECOBL(LIST)
"RTN","ECOBMC",38,0)
 Q
"RTN","ECOBMC",39,0)
 ;;
"RTN","ECOBMC",40,0)
PARSE(PARSE,VALUE)  ;
"RTN","ECOBMC",41,0)
 D PARSE^ECOBL(PARSE,VALUE) ; parent method
"RTN","ECOBMC",42,0)
 Q
"RTN","ECOBMC",43,0)
 ;;
"RTN","ECOBMC",44,0)
PROPERTY(HANDLE,SCOPE,PROPERTY,VALUE) ; parent method
"RTN","ECOBMC",45,0)
 D PROPERTY^ECOBL(HANDLE,SCOPE,PROPERTY,VALUE)
"RTN","ECOBMC",46,0)
 Q
"RTN","ECOBMC",47,0)
 ;;
"RTN","ECOBMC",48,0)
 ;; public methods
"RTN","ECOBMC",49,0)
CREATE(NAME)  ;
"RTN","ECOBMC",50,0)
 ; call parent first
"RTN","ECOBMC",51,0)
 N HANDLE,X
"RTN","ECOBMC",52,0)
 S HANDLE=$$CREATE^ECOBL(NAME)
"RTN","ECOBMC",53,0)
 ;;
"RTN","ECOBMC",54,0)
 D SELF^ECOB(.RESULT,HANDLE,"Methods","Methods","METHOD^ECOBMC(.RESULT,ARGUMENT)","ECOBL")
"RTN","ECOBMC",55,0)
 ;;
"RTN","ECOBMC",56,0)
 D METHOD(.X,HANDLE_".Criteria.SetArgument.GetName")
"RTN","ECOBMC",57,0)
 D METHOD(.X,HANDLE_".Criteria.SetOnReturn.handle")
"RTN","ECOBMC",58,0)
 Q HANDLE
"RTN","ECOBMC",59,0)
 ;;
"RTN","ECOBMC",60,0)
DESTROY(HANDLE)  ;
"RTN","ECOBMC",61,0)
 ; call parent last
"RTN","ECOBMC",62,0)
 N CHILD
"RTN","ECOBMC",63,0)
 D METHOD(.CHILD,HANDLE_".First")
"RTN","ECOBMC",64,0)
 F  Q:+CHILD=-1  D
"RTN","ECOBMC",65,0)
 .D DESTROY^ECOBM(CHILD)
"RTN","ECOBMC",66,0)
 .D METHOD(.CHILD,HANDLE_".Next")
"RTN","ECOBMC",67,0)
 .Q
"RTN","ECOBMC",68,0)
 Q $$DESTROY^ECOBL(HANDLE)
"RTN","ECOBMC",69,0)
 ;;
"RTN","ECOBMC",70,0)
METHOD(RESULT,ARGUMENT)  ;
"RTN","ECOBMC",71,0)
 ; argument=(name.count[handle]).method.(additional.params...)
"RTN","ECOBMC",72,0)
 N HANDLE,METHOD,PARAMS
"RTN","ECOBMC",73,0)
 D PARSE("Handle",ARGUMENT)
"RTN","ECOBMC",74,0)
 D PARSE("Method",ARGUMENT)
"RTN","ECOBMC",75,0)
 D PARSE("Params",ARGUMENT)
"RTN","ECOBMC",76,0)
 I METHOD="Add" D ADD(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBMC",77,0)
 I METHOD="Override" D OVERRIDE(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBMC",78,0)
 I METHOD="Info" D INFO(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBMC",79,0)
 D METHOD^ECOBL(.RESULT,ARGUMENT)
"RTN","ECOBMC",80,0)
 Q
"RTN","ECOBMC",81,0)
 ;;
"RTN","ECOBP")
0^26^B1702030^n/a
"RTN","ECOBP",1,0)
ECOBP ;BP/CMF - Property Object
"RTN","ECOBP",2,0)
 ;;2.0;EVENT CAPTURE;**100**;8 May 96;Build 21
"RTN","ECOBP",3,0)
 ;@author  - Chris Flegel
"RTN","ECOBP",4,0)
 ;@date    - 17 May 2009
"RTN","ECOBP",5,0)
 ;@version - 1.0
"RTN","ECOBP",6,0)
 ;;
"RTN","ECOBP",7,0)
 Q
"RTN","ECOBP",8,0)
 ;; private methods
"RTN","ECOBP",9,0)
 ;;
"RTN","ECOBP",10,0)
PROPERTY(HANDLE,SCOPE,PROPERTY,VALUE)  ;
"RTN","ECOBP",11,0)
 D PROPERTY^ECOB(HANDLE,SCOPE,PROPERTY,VALUE)
"RTN","ECOBP",12,0)
 Q
"RTN","ECOBP",13,0)
 ;;
"RTN","ECOBP",14,0)
 ;; public methods
"RTN","ECOBP",15,0)
CREATE(NAME)  ;
"RTN","ECOBP",16,0)
 ; call parent first
"RTN","ECOBP",17,0)
 N HANDLE,X
"RTN","ECOBP",18,0)
 S HANDLE=$$CREATE^ECOBA(NAME)
"RTN","ECOBP",19,0)
 D METHOD(.X,HANDLE_".Set_class.EC PROPERTY")
"RTN","ECOBP",20,0)
 D METHOD(.X,HANDLE_".Set_name.Property")
"RTN","ECOBP",21,0)
 D METHOD(.X,HANDLE_".Set_routine.METHOD^ECOBP(.RESULT,ARGUMENT)")
"RTN","ECOBP",22,0)
 ;
"RTN","ECOBP",23,0)
 D PROPERTY(HANDLE,"Pu","FMiens","")
"RTN","ECOBP",24,0)
 D PROPERTY(HANDLE,"Pu","FMfile","")
"RTN","ECOBP",25,0)
 D PROPERTY(HANDLE,"Pu","FMfield","")
"RTN","ECOBP",26,0)
 D PROPERTY(HANDLE,"Pu","FMload","")
"RTN","ECOBP",27,0)
 ; complex properties last
"RTN","ECOBP",28,0)
 Q HANDLE
"RTN","ECOBP",29,0)
 ;;
"RTN","ECOBP",30,0)
DESTROY(HANDLE)  ;
"RTN","ECOBP",31,0)
 ; call parent last
"RTN","ECOBP",32,0)
 Q $$DESTROY^ECOBA(HANDLE)
"RTN","ECOBP",33,0)
 ;;
"RTN","ECOBP",34,0)
METHOD(RESULT,ARGUMENT)  ;
"RTN","ECOBP",35,0)
 ; argument=(name.count[handle]).method.(additional.params...)
"RTN","ECOBP",36,0)
 D METHOD^ECOBA(.RESULT,ARGUMENT)
"RTN","ECOBP",37,0)
 Q
"RTN","ECOBP",38,0)
 ;;
"RTN","ECOBPC")
0^27^B8756759^n/a
"RTN","ECOBPC",1,0)
ECOBPC ;BP/CMF - Properties object
"RTN","ECOBPC",2,0)
 ;;2.0;EVENT CAPTURE;**100**;8 May 96;Build 21
"RTN","ECOBPC",3,0)
 ;@author  - Chris Flegel
"RTN","ECOBPC",4,0)
 ;@date    - 17 May 2009
"RTN","ECOBPC",5,0)
 ;@version - 1.0
"RTN","ECOBPC",6,0)
 ;;
"RTN","ECOBPC",7,0)
 Q
"RTN","ECOBPC",8,0)
 ;;private methods
"RTN","ECOBPC",9,0)
ADD(RESULT,HANDLE,VALUE) ; add Property object to list
"RTN","ECOBPC",10,0)
 N NAME,CHILD,ITEM,PROP
"RTN","ECOBPC",11,0)
 D METHOD(.NAME,HANDLE_".Get_namespace")
"RTN","ECOBPC",12,0)
 S CHILD=$$CREATE^ECOBP(NAME)
"RTN","ECOBPC",13,0)
 D COLLECT^ECOBL(.ITEM,HANDLE,CHILD)
"RTN","ECOBPC",14,0)
 S PROP("Name")=$P(VALUE,".")
"RTN","ECOBPC",15,0)
    D METHOD^ECOBP(.RESULT,CHILD_".SetName."_PROP("Name"))
"RTN","ECOBPC",16,0)
 ;D METHOD^ECOBP(.RESULT,CHILD_".SetName."_VALUE)
"RTN","ECOBPC",17,0)
 D METHOD(.X,HANDLE_".Criteria.Index."_ITEM)
"RTN","ECOBPC",18,0)
 ;support for property types
"RTN","ECOBPC",19,0)
 S PROP("Type")=$P(VALUE,".",2)
"RTN","ECOBPC",20,0)
 D:PROP("Type")'=""
"RTN","ECOBPC",21,0)
 .S PROP("Build")=$$GET^XPAR("PKG","ECOB PROPERTY TYPE",PROP("Type"),"E")
"RTN","ECOBPC",22,0)
 .Q:PROP("Build")=""
"RTN","ECOBPC",23,0)
 .S PROP("Tag")=$P(PROP("Build"),".")
"RTN","ECOBPC",24,0)
 .S PROP("Routine")=$P(PROP("Build"),".",2)
"RTN","ECOBPC",25,0)
 .S PROP("Execute")=PROP("Tag")_U_PROP("Routine")
"RTN","ECOBPC",26,0)
 .Q:$T(@$P(PROP("Execute"),"("))=""
"RTN","ECOBPC",27,0)
 .Q:$P(PROP("Execute"),"(",2)'="HANDLE,CHILD)"
"RTN","ECOBPC",28,0)
 .D @PROP("Execute")
"RTN","ECOBPC",29,0)
 .Q
"RTN","ECOBPC",30,0)
 S RESULT=CHILD
"RTN","ECOBPC",31,0)
 Q
"RTN","ECOBPC",32,0)
 ;;
"RTN","ECOBPC",33,0)
INFO(RESULT,HANDLE,PARAMS) ; view property details
"RTN","ECOBPC",34,0)
 N PROPERTY,JUSTIFY,OFFSET
"RTN","ECOBPC",35,0)
 D PARSE("Offset",PARAMS)
"RTN","ECOBPC",36,0)
 D METHOD(.PROPERTY,HANDLE_".First")
"RTN","ECOBPC",37,0)
 F  Q:PROPERTY="-1^End of list"  D
"RTN","ECOBPC",38,0)
 .D METHOD^ECOBP(.RESULT,PROPERTY_".ShowName."_JUSTIFY)
"RTN","ECOBPC",39,0)
 .D METHOD^ECOBP(.RESULT,PROPERTY_".ShowValue."_OFFSET)
"RTN","ECOBPC",40,0)
 .D METHOD^ECOBP(.RESULT,PROPERTY_".ShowDefaultValue."_OFFSET)
"RTN","ECOBPC",41,0)
 .D METHOD(.PROPERTY,HANDLE_".Next")
"RTN","ECOBPC",42,0)
 .Q
"RTN","ECOBPC",43,0)
 Q
"RTN","ECOBPC",44,0)
 ;;
"RTN","ECOBPC",45,0)
PARSE(PARSE,VALUE)  ;
"RTN","ECOBPC",46,0)
 D PARSE^ECOBL(PARSE,VALUE) ; parent method
"RTN","ECOBPC",47,0)
 Q
"RTN","ECOBPC",48,0)
 ;;
"RTN","ECOBPC",49,0)
PROPERTY(HANDLE,SCOPE,PROPERTY,VALUE) ; parent method
"RTN","ECOBPC",50,0)
 D PROPERTY^ECOBL(HANDLE,SCOPE,PROPERTY,VALUE)
"RTN","ECOBPC",51,0)
 Q
"RTN","ECOBPC",52,0)
 ;;
"RTN","ECOBPC",53,0)
 ;; public methods
"RTN","ECOBPC",54,0)
CREATE(NAME)  ;
"RTN","ECOBPC",55,0)
 ; call parent first
"RTN","ECOBPC",56,0)
 N HANDLE,X
"RTN","ECOBPC",57,0)
 S HANDLE=$$CREATE^ECOBL(NAME)
"RTN","ECOBPC",58,0)
 ;;
"RTN","ECOBPC",59,0)
 D SELF^ECOB(.X,HANDLE,"Properties","Properties","METHOD^ECOBMC(.RESULT,ARGUMENT)","ECOBL")
"RTN","ECOBPC",60,0)
 ;;
"RTN","ECOBPC",61,0)
 D METHOD(.X,HANDLE_".Criteria.SetArgument.GetName")
"RTN","ECOBPC",62,0)
 D METHOD(.X,HANDLE_".Criteria.SetOnReturn.handle")
"RTN","ECOBPC",63,0)
 Q HANDLE
"RTN","ECOBPC",64,0)
 ;;
"RTN","ECOBPC",65,0)
DESTROY(HANDLE)  ;
"RTN","ECOBPC",66,0)
 ; call parent last
"RTN","ECOBPC",67,0)
 N CHILD
"RTN","ECOBPC",68,0)
 D METHOD(.CHILD,HANDLE_".First")
"RTN","ECOBPC",69,0)
 F  Q:+CHILD=-1  D
"RTN","ECOBPC",70,0)
 .D DESTROY^ECOBP(CHILD)
"RTN","ECOBPC",71,0)
 .D METHOD(.CHILD,HANDLE_".Next")
"RTN","ECOBPC",72,0)
 .Q
"RTN","ECOBPC",73,0)
 Q $$DESTROY^ECOBL(HANDLE)
"RTN","ECOBPC",74,0)
 ;;
"RTN","ECOBPC",75,0)
METHOD(RESULT,ARGUMENT)  ;
"RTN","ECOBPC",76,0)
 ; argument= handle.method.(additional.params...)
"RTN","ECOBPC",77,0)
 N HANDLE,METHOD,PARAMS
"RTN","ECOBPC",78,0)
 D PARSE("Handle",ARGUMENT)
"RTN","ECOBPC",79,0)
 D PARSE("Method",ARGUMENT)
"RTN","ECOBPC",80,0)
 D PARSE("Params",ARGUMENT)
"RTN","ECOBPC",81,0)
 I METHOD="Add" D ADD(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBPC",82,0)
 I METHOD="Info" D INFO(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBPC",83,0)
 D METHOD^ECOBL(.RESULT,ARGUMENT)
"RTN","ECOBPC",84,0)
 Q
"RTN","ECOBPC",85,0)
 ;;
"RTN","ECOBU")
0^28^B159516513^n/a
"RTN","ECOBU",1,0)
ECOBU ;BP/CMF - Utility Object
"RTN","ECOBU",2,0)
 ;;2.0;EVENT CAPTURE;**100**;8 May 96;Build 21
"RTN","ECOBU",3,0)
 ;@author  - Chris Flegel
"RTN","ECOBU",4,0)
 ;@date    - 17 May 2009
"RTN","ECOBU",5,0)
 ;@version - 1.0
"RTN","ECOBU",6,0)
 ;;
"RTN","ECOBU",7,0)
 Q
"RTN","ECOBU",8,0)
 ;; private methods
"RTN","ECOBU",9,0)
HANDLERS(RESULT,HANDLE,METHOD,PARAMS) ;;
"RTN","ECOBU",10,0)
 ; find & execute handlers
"RTN","ECOBU",11,0)
 N PROPERTY,HANDLES,FOUND,HANDLER,EXECUTER
"RTN","ECOBU",12,0)
 S RESULT="-1^Invalid method"
"RTN","ECOBU",13,0)
 I $E(METHOD,1,3)="Get" D 
"RTN","ECOBU",14,0)
 .D PARSE("Get",METHOD)
"RTN","ECOBU",15,0)
 .S PARAMS=PROPERTY_"."_PARAMS
"RTN","ECOBU",16,0)
 .S METHOD="Get"
"RTN","ECOBU",17,0)
 .Q
"RTN","ECOBU",18,0)
 I $E(METHOD,1,3)="Set" D 
"RTN","ECOBU",19,0)
 .D PARSE("Set",METHOD)
"RTN","ECOBU",20,0)
 .S PARAMS=PROPERTY_"."_PARAMS
"RTN","ECOBU",21,0)
 .S METHOD="Set"
"RTN","ECOBU",22,0)
 .Q
"RTN","ECOBU",23,0)
 I $E(METHOD,1,4)="Show" D 
"RTN","ECOBU",24,0)
 .D PARSE("Show",METHOD)
"RTN","ECOBU",25,0)
 .S PARAMS=PROPERTY_"."_PARAMS
"RTN","ECOBU",26,0)
 .S METHOD="Show"
"RTN","ECOBU",27,0)
 .Q
"RTN","ECOBU",28,0)
 D METHOD(.HANDLER,HANDLE_".Methods.Find1."_METHOD)
"RTN","ECOBU",29,0)
 D METHOD^ECOBM(.EXECUTER,HANDLER_".GetHandler")
"RTN","ECOBU",30,0)
 D @EXECUTER
"RTN","ECOBU",31,0)
 Q
"RTN","ECOBU",32,0)
 ;;
"RTN","ECOBU",33,0)
OBM(RESULT,ARGUMENT) ;shortcut to method class
"RTN","ECOBU",34,0)
 D METHOD^ECOBM(.RESULT,ARGUMENT) Q
"RTN","ECOBU",35,0)
 ;;
"RTN","ECOBU",36,0)
OBP(RESULT,ARGUMENT) ;shortcut to property class
"RTN","ECOBU",37,0)
 D METHOD^ECOBP(.RESULT,ARGUMENT) Q
"RTN","ECOBU",38,0)
 ;;
"RTN","ECOBU",39,0)
OB2(RESULT,ARGUMENT) ;shortcut to utility class
"RTN","ECOBU",40,0)
 D METHOD^ECOB2(.RESULT,ARGUMENT) Q
"RTN","ECOBU",41,0)
 ;;
"RTN","ECOBU",42,0)
ECOB30(RESULT,HANDLE,PARAMS) ;handler for collect object
"RTN","ECOBU",43,0)
 N CHILD
"RTN","ECOBU",44,0)
 D GET^ECOB(.CHILD,HANDLE,"Pu","Collect")
"RTN","ECOBU",45,0)
 D METHOD^ECOB30(.RESULT,CHILD_"."_PARAMS)
"RTN","ECOBU",46,0)
 Q
"RTN","ECOBU",47,0)
 ;;
"RTN","ECOBU",48,0)
ECOBL(RESULT,HANDLE,METHOD,PARAMS) ;handler for simple list
"RTN","ECOBU",49,0)
 N CHILD
"RTN","ECOBU",50,0)
 D GET^ECOB(.CHILD,HANDLE,"Pu",METHOD)
"RTN","ECOBU",51,0)
 D METHOD^ECOBL(.RESULT,CHILD_"."_PARAMS)
"RTN","ECOBU",52,0)
 Q
"RTN","ECOBU",53,0)
 ;;
"RTN","ECOBU",54,0)
ECOBMC(RESULT,HANDLE,PARAMS) ;handler for method collection
"RTN","ECOBU",55,0)
 N CHILD
"RTN","ECOBU",56,0)
 D GET^ECOB(.CHILD,HANDLE,"Pu","Methods")
"RTN","ECOBU",57,0)
 D METHOD^ECOBMC(.RESULT,CHILD_"."_PARAMS)
"RTN","ECOBU",58,0)
 Q
"RTN","ECOBU",59,0)
 ;;
"RTN","ECOBU",60,0)
ECOBPC(RESULT,HANDLE,PARAMS) ;handler for property collection
"RTN","ECOBU",61,0)
 N CHILD
"RTN","ECOBU",62,0)
 D GET^ECOB(.CHILD,HANDLE,"Pu","Properties")
"RTN","ECOBU",63,0)
 D METHOD^ECOBPC(.RESULT,CHILD_"."_PARAMS)
"RTN","ECOBU",64,0)
 Q 
"RTN","ECOBU",65,0)
 ;;
"RTN","ECOBU",66,0)
ECOBM(RESULT,HANDLE,PARAMS) ;; pass-through
"RTN","ECOBU",67,0)
 D OBM(.RESULT,HANDLE_"."_PARAMS) Q
"RTN","ECOBU",68,0)
 ;;
"RTN","ECOBU",69,0)
ECOB2(RESULT,HANDLE,PARAMS) ;; pass-through
"RTN","ECOBU",70,0)
 D OB2(.RESULT,HANDLE_"."_PARAMS) Q
"RTN","ECOBU",71,0)
 ;;
"RTN","ECOBU",72,0)
ECOBP(RESULT,HANDLE,PARAMS) ; pass-through
"RTN","ECOBU",73,0)
 D OBP(.RESULT,HANDLE_"."_PARAMS) Q
"RTN","ECOBU",74,0)
 ;;
"RTN","ECOBU",75,0)
DIAGHDR(VALUE,WIDTH) ;;
"RTN","ECOBU",76,0)
 N I,J
"RTN","ECOBU",77,0)
 S J=WIDTH-$L(VALUE)-1
"RTN","ECOBU",78,0)
 W !," "_VALUE_" "
"RTN","ECOBU",79,0)
 F J=1:1:J W "-"
"RTN","ECOBU",80,0)
 W "+"
"RTN","ECOBU",81,0)
 Q
"RTN","ECOBU",82,0)
DIAGSGMT(VALUE,WIDTH) ;;
"RTN","ECOBU",83,0)
 N I,J,OUT,FILL
"RTN","ECOBU",84,0)
 S J=WIDTH-$L(VALUE)
"RTN","ECOBU",85,0)
 S OUT=" + "_VALUE_" "
"RTN","ECOBU",86,0)
 S FILL=""
"RTN","ECOBU",87,0)
 F J=1:1:J S FILL=FILL_"-"
"RTN","ECOBU",88,0)
 S OUT=$E(OUT_FILL,1,WIDTH)_" |"
"RTN","ECOBU",89,0)
 W !,OUT
"RTN","ECOBU",90,0)
 Q
"RTN","ECOBU",91,0)
DIAGATTR(VALUE,WIDTH) ;;
"RTN","ECOBU",92,0)
 N I,J,OUT,FILL
"RTN","ECOBU",93,0)
 S J=WIDTH-$L(VALUE)
"RTN","ECOBU",94,0)
 S OUT=" | * "_VALUE
"RTN","ECOBU",95,0)
 D:$L(VALUE)<WIDTH
"RTN","ECOBU",96,0)
 .S FILL=""
"RTN","ECOBU",97,0)
 .F J=1:1:J S FILL=FILL_" "
"RTN","ECOBU",98,0)
 .S OUT=$E(OUT_FILL,1,WIDTH)_" |"
"RTN","ECOBU",99,0)
 .Q
"RTN","ECOBU",100,0)
 W !,OUT
"RTN","ECOBU",101,0)
 Q
"RTN","ECOBU",102,0)
DIAGFTR(WIDTH) ;;
"RTN","ECOBU",103,0)
 N I,J,OUT,FILL
"RTN","ECOBU",104,0)
 S J=WIDTH
"RTN","ECOBU",105,0)
 S OUT=" + "
"RTN","ECOBU",106,0)
 S FILL=""
"RTN","ECOBU",107,0)
 F J=1:1:J S FILL=FILL_"-"
"RTN","ECOBU",108,0)
 S OUT=$E(OUT_FILL,1,J)_" +"
"RTN","ECOBU",109,0)
 W !,OUT
"RTN","ECOBU",110,0)
 Q
"RTN","ECOBU",111,0)
 ;;
"RTN","ECOBU",112,0)
    ;;protected methods
"RTN","ECOBU",113,0)
CLASS(RESULT,HANDLE,PARAMS) ;handler for class info display
"RTN","ECOBU",114,0)
 N JUSTIFY,OFFSET,X,METH,PROP,ITEM
"RTN","ECOBU",115,0)
 D PARSE("Offset",PARAMS)
"RTN","ECOBU",116,0)
 D SHOW^ECOB(.X,HANDLE,"Pu","_class",JUSTIFY)
"RTN","ECOBU",117,0)
 ;;
"RTN","ECOBU",118,0)
 D SHOW^ECOB(.X,HANDLE,"Pu","Methods",JUSTIFY)
"RTN","ECOBU",119,0)
 D METHOD(.X,HANDLE_".Methods.Info."_OFFSET)
"RTN","ECOBU",120,0)
 D SHOW^ECOB(.X,HANDLE,"Pu","Methods",JUSTIFY_"/")
"RTN","ECOBU",121,0)
 ;;
"RTN","ECOBU",122,0)
 D SHOW^ECOB(.X,HANDLE,"Pu","Properties",JUSTIFY)
"RTN","ECOBU",123,0)
 D METHOD(.X,HANDLE_".Properties.Info."_OFFSET)
"RTN","ECOBU",124,0)
 D SHOW^ECOB(.X,HANDLE,"Pu","Properties",JUSTIFY_"/")
"RTN","ECOBU",125,0)
 ;;
"RTN","ECOBU",126,0)
 D SHOW^ECOB(.X,HANDLE,"Pu","Root",JUSTIFY)
"RTN","ECOBU",127,0)
 D METHOD(.X,HANDLE_".Root.Info."_OFFSET)
"RTN","ECOBU",128,0)
 D SHOW^ECOB(.X,HANDLE,"Pu","Root",JUSTIFY_"/")
"RTN","ECOBU",129,0)
 ;;
"RTN","ECOBU",130,0)
 D SHOW^ECOB(.X,HANDLE,"Pu","_class",JUSTIFY_"/")
"RTN","ECOBU",131,0)
 S RESULT=1
"RTN","ECOBU",132,0)
 Q
"RTN","ECOBU",133,0)
 ;;
"RTN","ECOBU",134,0)
CLEAR(RESULT,HANDLE,PARAMS) ; restore object to default state
"RTN","ECOBU",135,0)
 N PROPERTY,DEFAULT,X
"RTN","ECOBU",136,0)
 D METHOD(.PROPERTY,HANDLE_".Properties.First")
"RTN","ECOBU",137,0)
 F  Q:PROPERTY="-1^End of list"  D
"RTN","ECOBU",138,0)
 .D OBP(.DEFAULT,PROPERTY_".GetDefaultValue")
"RTN","ECOBU",139,0)
 .D OBP(.X,PROPERTY_".SetValue."_DEFAULT)
"RTN","ECOBU",140,0)
 .D METHOD(.PROPERTY,HANDLE_".Properties.Next")
"RTN","ECOBU",141,0)
 S RESULT=1
"RTN","ECOBU",142,0)
 Q
"RTN","ECOBU",143,0)
 ;
"RTN","ECOBU",144,0)
DIAGRAM(RESULT,HANDLE,PARAMS) ; draw class diagram
"RTN","ECOBU",145,0)
 N CLASS,X,WIDTH,METHOD,PROPERTY,EXTEND,COLLECT,NAME
"RTN","ECOBU",146,0)
 D GET^ECOB(.CLASS,HANDLE,"Pu","_class")
"RTN","ECOBU",147,0)
 S X=$L(CLASS)+2
"RTN","ECOBU",148,0)
 S WIDTH=$S(X<20:20,X<40:40,X<60:60,1:70)
"RTN","ECOBU",149,0)
 D DIAGHDR(CLASS,WIDTH)
"RTN","ECOBU",150,0)
 ;;
"RTN","ECOBU",151,0)
 D DIAGSGMT("Methods",WIDTH)
"RTN","ECOBU",152,0)
 D METHOD(.METHOD,HANDLE_".Methods.First")
"RTN","ECOBU",153,0)
 F  Q:METHOD="-1^End of list"  D
"RTN","ECOBU",154,0)
 .D OBM(.NAME,METHOD_".GetName")
"RTN","ECOBU",155,0)
 .D DIAGATTR(NAME,WIDTH)
"RTN","ECOBU",156,0)
 .D METHOD(.METHOD,HANDLE_".Methods.Next")
"RTN","ECOBU",157,0)
 .Q
"RTN","ECOBU",158,0)
 ;;
"RTN","ECOBU",159,0)
 D DIAGSGMT("Properties",WIDTH)
"RTN","ECOBU",160,0)
 D METHOD(.PROPERTY,HANDLE_".Properties.First")
"RTN","ECOBU",161,0)
 F  Q:PROPERTY="-1^End of list"  D
"RTN","ECOBU",162,0)
 .D OBP(.NAME,PROPERTY_".GetName")
"RTN","ECOBU",163,0)
 .D DIAGATTR(NAME,WIDTH)
"RTN","ECOBU",164,0)
 .D METHOD(.PROPERTY,HANDLE_".Properties.Next")
"RTN","ECOBU",165,0)
 .Q
"RTN","ECOBU",166,0)
 ;;
"RTN","ECOBU",167,0)
 D DIAGSGMT("Extends",WIDTH)
"RTN","ECOBU",168,0)
 D METHOD(.EXTEND,HANDLE_".Root.First")
"RTN","ECOBU",169,0)
 F  Q:EXTEND="-1^End of list"  D
"RTN","ECOBU",170,0)
 .D:EXTEND'=CLASS DIAGATTR(EXTEND,WIDTH)
"RTN","ECOBU",171,0)
 .D METHOD(.EXTEND,HANDLE_".Root.Next")
"RTN","ECOBU",172,0)
 .Q
"RTN","ECOBU",173,0)
 D DIAGFTR(WIDTH)
"RTN","ECOBU",174,0)
 S RESULT=1
"RTN","ECOBU",175,0)
 Q
"RTN","ECOBU",176,0)
 ;
"RTN","ECOBU",177,0)
GET(RESULT,HANDLE,METHOD,PARAMS)  ;
"RTN","ECOBU",178,0)
 N PROPERTY,PROP
"RTN","ECOBU",179,0)
 S RESULT="-1^Invalid property"
"RTN","ECOBU",180,0)
 S PROPERTY=$P(PARAMS,".")
"RTN","ECOBU",181,0)
 D METHOD(.PROP,HANDLE_".Properties.Find1."_PROPERTY)
"RTN","ECOBU",182,0)
 D:PROP'="" OBP(.RESULT,PROP_".GetValue")
"RTN","ECOBU",183,0)
 Q
"RTN","ECOBU",184,0)
 ;;
"RTN","ECOBU",185,0)
INFO(RESULT,HANDLE,PARAMS) ;handler for business info display
"RTN","ECOBU",186,0)
 N JUSTIFY,OFFSET,PROPERTY
"RTN","ECOBU",187,0)
 D PARSE("Offset",PARAMS)
"RTN","ECOBU",188,0)
 W !,$J("Name : ",JUSTIFY),"Value"
"RTN","ECOBU",189,0)
 W !,$J("-----|-",JUSTIFY),"-----"
"RTN","ECOBU",190,0)
 D METHOD(.PROPERTY,HANDLE_".Properties.First")
"RTN","ECOBU",191,0)
 F  Q:PROPERTY="-1^End of list"  D
"RTN","ECOBU",192,0)
 .D OBP(.NAME,PROPERTY_".GetName")
"RTN","ECOBU",193,0)
 .D METHOD(.RESULT,HANDLE_".Show"_NAME_"."_JUSTIFY)
"RTN","ECOBU",194,0)
 .D METHOD(.PROPERTY,HANDLE_".Properties.Next")
"RTN","ECOBU",195,0)
 .Q
"RTN","ECOBU",196,0)
 S RESULT=1
"RTN","ECOBU",197,0)
 ;;
"RTN","ECOBU",198,0)
PARSE(PARSE,VALUE)  ;
"RTN","ECOBU",199,0)
 I PARSE="Get" D  Q
"RTN","ECOBU",200,0)
 .S PROPERTY=$P(VALUE,".",1)
"RTN","ECOBU",201,0)
 .S PROPERTY=$P(PROPERTY,"Get",2)
"RTN","ECOBU",202,0)
 .Q
"RTN","ECOBU",203,0)
 I PARSE="Handle" D  Q
"RTN","ECOBU",204,0)
 .S HANDLE=$P(VALUE,".")
"RTN","ECOBU",205,0)
 .Q
"RTN","ECOBU",206,0)
 I PARSE="Handle1" D  Q
"RTN","ECOBU",207,0)
 .S NAME=$P(VALUE,".",1)
"RTN","ECOBU",208,0)
 .S COUNT=$P(VALUE,".",2)
"RTN","ECOBU",209,0)
 .Q
"RTN","ECOBU",210,0)
 I PARSE="Justify" D  Q
"RTN","ECOBU",211,0)
 .S JUSTIFY=$S(+VALUE:+VALUE,1:0)
"RTN","ECOBU",212,0)
 .Q
"RTN","ECOBU",213,0)
 I PARSE="Method" D  Q
"RTN","ECOBU",214,0)
 .S METHOD=$P(VALUE,".",2)
"RTN","ECOBU",215,0)
 .Q
"RTN","ECOBU",216,0)
 I PARSE="Offset" D  Q
"RTN","ECOBU",217,0)
 .S JUSTIFY=$S(+VALUE:+VALUE,1:0)
"RTN","ECOBU",218,0)
 .S OFFSET=JUSTIFY+5
"RTN","ECOBU",219,0)
 .Q
"RTN","ECOBU",220,0)
 I PARSE="Params" D  Q
"RTN","ECOBU",221,0)
 .S PARAMS=$P(VALUE,".",3,99)
"RTN","ECOBU",222,0)
 .Q
"RTN","ECOBU",223,0)
 I PARSE="Set" D  Q
"RTN","ECOBU",224,0)
 .S PROPERTY=$P(VALUE,".",1)
"RTN","ECOBU",225,0)
 .S PROPERTY=$P(PROPERTY,"Set",2)
"RTN","ECOBU",226,0)
 .S VALUE=$P(VALUE,".",2)
"RTN","ECOBU",227,0)
 .Q
"RTN","ECOBU",228,0)
 I PARSE="Show" D  Q
"RTN","ECOBU",229,0)
 .S PROPERTY=$P(VALUE,".",1)
"RTN","ECOBU",230,0)
 .S PROPERTY=$P(PROPERTY,"Show",2)
"RTN","ECOBU",231,0)
 .Q
"RTN","ECOBU",232,0)
 Q
"RTN","ECOBU",233,0)
 ;
"RTN","ECOBU",234,0)
SET(RESULT,HANDLE,METHOD,PARAMS)  ;
"RTN","ECOBU",235,0)
 N PROPERTY,PROP
"RTN","ECOBU",236,0)
 S RESULT="-1^Invalid property"
"RTN","ECOBU",237,0)
 S PROPERTY=$P(PARAMS,".")
"RTN","ECOBU",238,0)
 S PARAMS=$P(PARAMS,".",2,99)
"RTN","ECOBU",239,0)
 D METHOD(.PROP,HANDLE_".Properties.Find1."_PROPERTY)
"RTN","ECOBU",240,0)
 D:PROP'="" OBP(.RESULT,PROP_".SetValue."_PARAMS)
"RTN","ECOBU",241,0)
 Q
"RTN","ECOBU",242,0)
 ;
"RTN","ECOBU",243,0)
SHOW(RESULT,HANDLE,METHOD,PARAMS) ; show a property
"RTN","ECOBU",244,0)
 N JUSTIFY,PROPERTY
"RTN","ECOBU",245,0)
 S PROPERTY=$P(PARAMS,".")
"RTN","ECOBU",246,0)
 S PARAMS=$P(PARAMS,".",2,99)
"RTN","ECOBU",247,0)
 D METHOD(.RESULT,HANDLE_".Get"_PROPERTY)
"RTN","ECOBU",248,0)
 Q:RESULT="-1^Invalid property"
"RTN","ECOBU",249,0)
 S JUSTIFY=$S(+PARAMS:+PARAMS,1:0)
"RTN","ECOBU",250,0)
 W !,$J("<"_PROPERTY_"> : ",JUSTIFY),RESULT
"RTN","ECOBU",251,0)
 Q
"RTN","ECOBU",252,0)
 ;;
"RTN","ECOBU",253,0)
 ;; public methods
"RTN","ECOBU",254,0)
CREATE(NAME)  ;
"RTN","ECOBU",255,0)
 ; call parent first
"RTN","ECOBU",256,0)
 N HANDLE,CHILD,METHOD,PROPERTY,X
"RTN","ECOBU",257,0)
 S HANDLE=$$CREATE^ECOB(NAME)
"RTN","ECOBU",258,0)
 D SELF^ECOB(.RESULT,HANDLE,"EC OBU UTILITY","Utility","METHOD^ECOBU(.RESULT,ARGUMENT)","ECOB")
"RTN","ECOBU",259,0)
 ;;
"RTN","ECOBU",260,0)
 S CHILD=$$CREATE^ECOB30(NAME)
"RTN","ECOBU",261,0)
 D COLLECT^ECOB(HANDLE,CHILD,"Pu","Collect")
"RTN","ECOBU",262,0)
 D METHOD^ECOB30(.X,CHILD_".SetCollector."_HANDLE)
"RTN","ECOBU",263,0)
 ;;
"RTN","ECOBU",264,0)
 S CHILD=$$CREATE^ECOBMC(NAME)
"RTN","ECOBU",265,0)
 D COLLECT^ECOB(HANDLE,CHILD,"Pu","Methods")
"RTN","ECOBU",266,0)
 ;; default ClassDiagram method
"RTN","ECOBU",267,0)
 D METHOD(.METHOD,HANDLE_".Methods.Add.ClassDiagram")
"RTN","ECOBU",268,0)
 D OBM(.X,METHOD_".SetAddedByClass.Utility")
"RTN","ECOBU",269,0)
 D OBM(.X,METHOD_".SetDescription.Displays diagram of the class.")
"RTN","ECOBU",270,0)
 D OBM(.X,METHOD_".SetHandler.DIAGRAM^ECOBU(.RESULT,HANDLE,PARAMS)")
"RTN","ECOBU",271,0)
 D OBM(.X,METHOD_".SetParams.")
"RTN","ECOBU",272,0)
 D OBM(.X,METHOD_".SetReturns.1")
"RTN","ECOBU",273,0)
 ;;
"RTN","ECOBU",274,0)
 ;; default ClassInfo method
"RTN","ECOBU",275,0)
 D METHOD(.METHOD,HANDLE_".Methods.Add.ClassInfo")
"RTN","ECOBU",276,0)
 D OBM(.X,METHOD_".SetAddedByClass.Utility")
"RTN","ECOBU",277,0)
 D OBM(.X,METHOD_".SetDescription.Displays information about the class.")
"RTN","ECOBU",278,0)
 D OBM(.X,METHOD_".SetHandler.CLASS^ECOBU(.RESULT,HANDLE,PARAMS)")
"RTN","ECOBU",279,0)
 D OBM(.X,METHOD_".SetParams.[Justify]")
"RTN","ECOBU",280,0)
 D OBM(.X,METHOD_".SetReturns.1")
"RTN","ECOBU",281,0)
 ;; default Clear method
"RTN","ECOBU",282,0)
 D METHOD(.METHOD,HANDLE_".Methods.Add.Clear")
"RTN","ECOBU",283,0)
 D OBM(.X,METHOD_".SetAddedByClass.Utility")
"RTN","ECOBU",284,0)
 D OBM(.X,METHOD_".SetDescription.Restores public attributes to default state.")
"RTN","ECOBU",285,0)
 D OBM(.X,METHOD_".SetHandler.CLEAR^ECOBU(.RESULT,HANDLE,PARAMS)")
"RTN","ECOBU",286,0)
 D OBM(.X,METHOD_".SetParams.")
"RTN","ECOBU",287,0)
 D OBM(.X,METHOD_".SetReturns.1")
"RTN","ECOBU",288,0)
 ;; default Get method
"RTN","ECOBU",289,0)
 D METHOD(.METHOD,HANDLE_".Methods.Add.Get")
"RTN","ECOBU",290,0)
 D OBM(.X,METHOD_".SetAddedByClass.Utility")
"RTN","ECOBU",291,0)
 D OBM(.X,METHOD_".SetDescription.Gets a property value.")
"RTN","ECOBU",292,0)
 D OBM(.X,METHOD_".SetHandler.GET^ECOBU(.RESULT,HANDLE,METHOD,PARAMS)")
"RTN","ECOBU",293,0)
 D OBM(.X,METHOD_".SetParams.Get[propertyName]")
"RTN","ECOBU",294,0)
 D OBM(.X,METHOD_".SetReturns.Property.Value")
"RTN","ECOBU",295,0)
 ;; default Set method
"RTN","ECOBU",296,0)
 D METHOD(.METHOD,HANDLE_".Methods.Add.Set")
"RTN","ECOBU",297,0)
 D OBM(.X,METHOD_".SetAddedByClass.Utility")
"RTN","ECOBU",298,0)
 D OBM(.X,METHOD_".SetDescription.Sets a property value.")
"RTN","ECOBU",299,0)
 D OBM(.X,METHOD_".SetHandler.SET^ECOBU(.RESULT,HANDLE,METHOD,PARAMS)")
"RTN","ECOBU",300,0)
 D OBM(.X,METHOD_".SetParams.Set[propertyName].[Value]")
"RTN","ECOBU",301,0)
 D OBM(.X,METHOD_".SetReturns.1 if successful, -1 otherwise")
"RTN","ECOBU",302,0)
 ;;
"RTN","ECOBU",303,0)
 D METHOD(.METHOD,HANDLE_".Methods.Add.Show")
"RTN","ECOBU",304,0)
 D OBM(.X,METHOD_".SetAddedByClass.Utility")
"RTN","ECOBU",305,0)
 D OBM(.X,METHOD_".SetDescription.Displays a property value.")
"RTN","ECOBU",306,0)
 D OBM(.X,METHOD_".SetHandler.SHOW^ECOBU(.RESULT,HANDLE,METHOD,PARAMS)")
"RTN","ECOBU",307,0)
 D OBM(.X,METHOD_".SetParams.[Justify]")
"RTN","ECOBU",308,0)
 D OBM(.X,METHOD_".SetReturns.[Property.Name] : [Property.Value]")
"RTN","ECOBU",309,0)
 ;;
"RTN","ECOBU",310,0)
 D METHOD(.METHOD,HANDLE_".Methods.Add.Info")
"RTN","ECOBU",311,0)
 D OBM(.X,METHOD_".SetAddedByClass.Utility")
"RTN","ECOBU",312,0)
 D OBM(.X,METHOD_".SetDescription.Displays business information.")
"RTN","ECOBU",313,0)
 D OBM(.X,METHOD_".SetHandler.INFO^ECOBU(.RESULT,HANDLE,PARAMS)")
"RTN","ECOBU",314,0)
 D OBM(.X,METHOD_".SetParams.[Justify]")
"RTN","ECOBU",315,0)
 D OBM(.X,METHOD_".SetReturns.1")
"RTN","ECOBU",316,0)
 ;;
"RTN","ECOBU",317,0)
 S CHILD=$$CREATE^ECOBPC(NAME)
"RTN","ECOBU",318,0)
 D COLLECT^ECOB(HANDLE,CHILD,"Pu","Properties")
"RTN","ECOBU",319,0)
 ;;
"RTN","ECOBU",320,0)
 D METHOD(.PROPERTY,HANDLE_".Properties.Add._this")
"RTN","ECOBU",321,0)
 D OBP(.X,PROPERTY_".SetAddedByClass.Utility")
"RTN","ECOBU",322,0)
 D OBP(.X,PROPERTY_".SetValue."_HANDLE)
"RTN","ECOBU",323,0)
 D OBP(.X,PROPERTY_".SetDefaultValue."_HANDLE)
"RTN","ECOBU",324,0)
 ;;
"RTN","ECOBU",325,0)
 S CHILD=$$CREATE^ECOBL(NAME)
"RTN","ECOBU",326,0)
 D COLLECT^ECOB(HANDLE,CHILD,"Pu","Root")
"RTN","ECOBU",327,0)
 ;;
"RTN","ECOBU",328,0)
 D METHOD(.X,HANDLE_".Root.Add.EC BASE")
"RTN","ECOBU",329,0)
 D METHOD(.X,HANDLE_".Root.Add.EC OBU UTILITY")
"RTN","ECOBU",330,0)
 ; complex properties last
"RTN","ECOBU",331,0)
 Q HANDLE
"RTN","ECOBU",332,0)
 ;;
"RTN","ECOBU",333,0)
DESTROY(HANDLE)  ;
"RTN","ECOBU",334,0)
 ; call parent last
"RTN","ECOBU",335,0)
 N CHILD
"RTN","ECOBU",336,0)
 D GET^ECOB(.CHILD,HANDLE,"Pu","Collect")
"RTN","ECOBU",337,0)
 D DESTROY^ECOB30(CHILD)
"RTN","ECOBU",338,0)
 D GET^ECOB(.CHILD,HANDLE,"Pu","Methods")
"RTN","ECOBU",339,0)
 D DESTROY^ECOBMC(CHILD)
"RTN","ECOBU",340,0)
 D GET^ECOB(.CHILD,HANDLE,"Pu","Properties")
"RTN","ECOBU",341,0)
 D DESTROY^ECOBPC(CHILD)
"RTN","ECOBU",342,0)
 D GET^ECOB(.CHILD,HANDLE,"Pu","Root")
"RTN","ECOBU",343,0)
 D DESTROY^ECOBL(CHILD)
"RTN","ECOBU",344,0)
 Q $$DESTROY^ECOB(HANDLE)
"RTN","ECOBU",345,0)
 ;;
"RTN","ECOBU",346,0)
FUNCTION(HANDLE,ARGUMENT)  ;
"RTN","ECOBU",347,0)
 ; argument=method.(additional.params....)
"RTN","ECOBU",348,0)
 N RESULT
"RTN","ECOBU",349,0)
 D METHOD(.RESULT,HANDLE_"."_ARGUMENT)
"RTN","ECOBU",350,0)
 Q RESULT
"RTN","ECOBU",351,0)
 ;
"RTN","ECOBU",352,0)
OUT(HANDLE,ARGUMENT)  ;
"RTN","ECOBU",353,0)
 ; argument=method.(additional.params....)
"RTN","ECOBU",354,0)
 N RESULT
"RTN","ECOBU",355,0)
 D METHOD(.RESULT,HANDLE_"."_ARGUMENT)
"RTN","ECOBU",356,0)
 Q RESULT
"RTN","ECOBU",357,0)
 ;
"RTN","ECOBU",358,0)
METHOD(RESULT,ARGUMENT)  ;
"RTN","ECOBU",359,0)
 ; argument=handle.method.(additional.params...)
"RTN","ECOBU",360,0)
 N HANDLE,METHOD,PARAMS
"RTN","ECOBU",361,0)
 D PARSE("Handle",ARGUMENT)
"RTN","ECOBU",362,0)
 D PARSE("Method",ARGUMENT)
"RTN","ECOBU",363,0)
 D PARSE("Params",ARGUMENT)
"RTN","ECOBU",364,0)
 I METHOD="Collect" D ECOB30(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBU",365,0)
 I METHOD="Methods" D ECOBMC(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBU",366,0)
 I METHOD="Properties" D ECOBPC(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBU",367,0)
 I METHOD="Root" D ECOBL(.RESULT,HANDLE,METHOD,PARAMS) Q
"RTN","ECOBU",368,0)
 I METHOD="mf" D ECOBM(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBU",369,0)
 I METHOD="of" D ECOB2(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBU",370,0)
 I METHOD="pf" D ECOBP(.RESULT,HANDLE,PARAMS) Q
"RTN","ECOBU",371,0)
 D HANDLERS(.RESULT,HANDLE,METHOD,PARAMS) Q
"RTN","ECOBU",372,0)
 ;;
"RTN","ECOBUF")
0^29^B6151296^n/a
"RTN","ECOBUF",1,0)
ECOBUF ;BP/CMF - Factory Object
"RTN","ECOBUF",2,0)
 ;;2.0;EVENT CAPTURE;**100**;8 May 96;Build 21
"RTN","ECOBUF",3,0)
 ;@author  - Chris Flegel
"RTN","ECOBUF",4,0)
 ;@date    - 17 May 2009
"RTN","ECOBUF",5,0)
 ;@version - 1.0
"RTN","ECOBUF",6,0)
 ;;
"RTN","ECOBUF",7,0)
 Q
"RTN","ECOBUF",8,0)
 ;; private methods
"RTN","ECOBUF",9,0)
 ;;
"RTN","ECOBUF",10,0)
FACTORY0()  Q "^TMP($J,""ECOBUF"")"
"RTN","ECOBUF",11,0)
 ;;
"RTN","ECOBUF",12,0)
FACTORY1() Q "^TMP($J,""ECOBUF"",1)"
"RTN","ECOBUF",13,0)
 ;;
"RTN","ECOBUF",14,0)
FACTORY2()  Q "^XTMP(""ECOBUF"","_$S($G(DUZ)'="":DUZ,$G(DT)'="":DT,1:1)_")"
"RTN","ECOBUF",15,0)
 ;;
"RTN","ECOBUF",16,0)
VALUE(VALUE) ;;  parse "." out of Parameter values
"RTN","ECOBUF",17,0)
 Q $S(VALUE="":"",1:$P(VALUE,".")_U_$P(VALUE,".",2,3))
"RTN","ECOBUF",18,0)
 ;;
"RTN","ECOBUF",19,0)
 ;; published methods
"RTN","ECOBUF",20,0)
FACTORY(RESULT,ARGUMENT) ; wrapper for factory methods - RPC "EC OBU FACTORY"
"RTN","ECOBUF",21,0)
 N FACTORY,HANDLE,CREATE,DESTROY,CLASS,NAME,TARGET
"RTN","ECOBUF",22,0)
 N ARG1,ARG2,ARG3
"RTN","ECOBUF",23,0)
 S RESULT="-1^Invalid Factory Parameters",RESULT(0)=RESULT
"RTN","ECOBUF",24,0)
 S ARGUMENT=$G(ARGUMENT)
"RTN","ECOBUF",25,0)
 Q:ARGUMENT=""
"RTN","ECOBUF",26,0)
 S ARG1=$P(ARGUMENT,".",1)
"RTN","ECOBUF",27,0)
 S ARG2=$P(ARGUMENT,".",2)
"RTN","ECOBUF",28,0)
 S ARG3=$P(ARGUMENT,".",3)
"RTN","ECOBUF",29,0)
 S ARG3=$S(ARG3'="":ARG3,ARG1="Constructor"&(ARG3=""):$$FACTORY2(),1:"")
"RTN","ECOBUF",30,0)
 Q:ARG1="Constructor"&(ARG3="")
"RTN","ECOBUF",31,0)
 I ARG1="Constructor" D  Q
"RTN","ECOBUF",32,0)
 .S CLASS=ARG2
"RTN","ECOBUF",33,0)
 .S NAME=ARG3
"RTN","ECOBUF",34,0)
 .S CREATE=$$GET^XPAR("PKG","ECOB CONSTRUCTOR",CLASS,"E")
"RTN","ECOBUF",35,0)
 .I CREATE="" S RESULT(0)="-1^Invalid Class Name" S RESULT=RESULT(0) Q
"RTN","ECOBUF",36,0)
 .S CREATE="S RESULT=$$"_$$VALUE(CREATE)
"RTN","ECOBUF",37,0)
 .X CREATE
"RTN","ECOBUF",38,0)
 .S RESULT(0)=RESULT
"RTN","ECOBUF",39,0)
 .Q
"RTN","ECOBUF",40,0)
 I ARG1="Destructor" D  Q
"RTN","ECOBUF",41,0)
 .S TARGET=ARG2
"RTN","ECOBUF",42,0)
 .I ARG3'="" S CLASS=ARG3
"RTN","ECOBUF",43,0)
 .E  D METHOD(.CLASS,TARGET_".of.Get_class")
"RTN","ECOBUF",44,0)
 .S DESTROY=$$GET^XPAR("PKG","ECOB DESTRUCTOR",CLASS,"E")
"RTN","ECOBUF",45,0)
 .I DESTROY="" S RESULT(0)="-1^Invalid Class Name" S RESULT=RESULT(0) Q
"RTN","ECOBUF",46,0)
 .S DESTROY="S RESULT=$$"_$$VALUE(DESTROY)
"RTN","ECOBUF",47,0)
 .S HANDLE=TARGET
"RTN","ECOBUF",48,0)
 .X DESTROY
"RTN","ECOBUF",49,0)
 .S RESULT(0)=RESULT
"RTN","ECOBUF",50,0)
 .Q
"RTN","ECOBUF",51,0)
 I ARG1="Method" D  Q
"RTN","ECOBUF",52,0)
 .D METHOD(.RESULT,$P(ARGUMENT,".",2,99))
"RTN","ECOBUF",53,0)
 .S RESULT(0)=RESULT
"RTN","ECOBUF",54,0)
 .Q
"RTN","ECOBUF",55,0)
 Q
"RTN","ECOBUF",56,0)
 ;;
"RTN","ECOBUF",57,0)
METHOD(RESULT,ARGUMENT)  ;
"RTN","ECOBUF",58,0)
 ; call parent last
"RTN","ECOBUF",59,0)
 D METHOD^ECOBU(.RESULT,ARGUMENT)  ; parent method
"RTN","ECOBUF",60,0)
 S RESULT(0)=RESULT
"RTN","ECOBUF",61,0)
 Q
"RTN","ECOBUF",62,0)
METHODS(RESULT,ARGUMENT)  ;
"RTN","ECOBUF",63,0)
 ; call parent last
"RTN","ECOBUF",64,0)
 D METHOD^ECOBU(.RESULT,ARGUMENT)  ; parent method
"RTN","ECOBUF",65,0)
 Q
"RTN","ECOBUF",66,0)
OUT(ARGUMENT) ;method call as function
"RTN","ECOBUF",67,0)
 N RESULT
"RTN","ECOBUF",68,0)
 D METHOD(.RESULT,ARGUMENT)
"RTN","ECOBUF",69,0)
 Q RESULT
"RTN","ECOBUL")
0^32^B60319608^n/a
"RTN","ECOBUL",1,0)
ECOBUL ;BP/CMF - List Utility object
"RTN","ECOBUL",2,0)
 ;;2.0;EVENT CAPTURE;**100**;8 May 96;Build 21
"RTN","ECOBUL",3,0)
 ;@author  - Chris Flegel
"RTN","ECOBUL",4,0)
 ;@date    - 17 May 2009
"RTN","ECOBUL",5,0)
 ;@version - 1.0
"RTN","ECOBUL",6,0)
 ;;
"RTN","ECOBUL",7,0)
 Q
"RTN","ECOBUL",8,0)
 ;;protected methods
"RTN","ECOBUL",9,0)
ADD(RESULT,HANDLE,PARAMS) ; add simple list item
"RTN","ECOBUL",10,0)
 D METHOD(.RESULT,HANDLE_".List.Add."_PARAMS)
"RTN","ECOBUL",11,0)
 Q
"RTN","ECOBUL",12,0)
 ;;
"RTN","ECOBUL",13,0)
CLEAR(RESULT,HANDLE,PARAMS) ; restore object to default state
"RTN","ECOBUL",14,0)
 D CLEAR^ECOBU(.RESULT,HANDLE,PARAMS)  ; parent method
"RTN","ECOBUL",15,0)
 D METHOD(.RESULT,HANDLE_".List.Clear")
"RTN","ECOBUL",16,0)
 Q
"RTN","ECOBUL",17,0)
 ;;
"RTN","ECOBUL",18,0)
COLLECT(RESULT,HANDLE,CHILD) ; add a child object to the list
"RTN","ECOBUL",19,0)
 N ITEM
"RTN","ECOBUL",20,0)
 D ADD(.ITEM,HANDLE,CHILD)
"RTN","ECOBUL",21,0)
 S @HANDLE@("Pr","list","Handle",CHILD)=ITEM
"RTN","ECOBUL",22,0)
 S RESULT=ITEM
"RTN","ECOBUL",23,0)
 Q
"RTN","ECOBUL",24,0)
 ;;
"RTN","ECOBUL",25,0)
FIRST(RESULT,HANDLE,PARAMS)  ;
"RTN","ECOBUL",26,0)
 D METHOD(.RESULT,HANDLE_".List.Criteria.First")
"RTN","ECOBUL",27,0)
 Q
"RTN","ECOBUL",28,0)
 ;;
"RTN","ECOBUL",29,0)
FIND(RESULT,HANDLE,PARAMS)  ;
"RTN","ECOBUL",30,0)
 D METHOD(.RESULT,HANDLE_".List.Criteria.Find."_PARAMS)
"RTN","ECOBUL",31,0)
 Q
"RTN","ECOBUL",32,0)
 ;;
"RTN","ECOBUL",33,0)
FIND1(RESULT,HANDLE,PARAMS)  ;
"RTN","ECOBUL",34,0)
 D METHOD(.RESULT,HANDLE_".List.Criteria.Find1."_PARAMS)
"RTN","ECOBUL",35,0)
 Q
"RTN","ECOBUL",36,0)
 ;;
"RTN","ECOBUL",37,0)
GET(RESULT,HANDLE,SCOPE,PROPERTY)  ;
"RTN","ECOBUL",38,0)
 ; if unique get methods, call them first, else call parent
"RTN","ECOBUL",39,0)
 D GET^ECOB(.RESULT,HANDLE,SCOPE,PROPERTY)
"RTN","ECOBUL",40,0)
 Q
"RTN","ECOBUL",41,0)
    ;;
"RTN","ECOBUL",42,0)
GETITEM(RESULT,HANDLE,ITEM) ; get simple list item
"RTN","ECOBUL",43,0)
 D METHOD(.RESULT,HANDLE_".List.GetItem."_ITEM)
"RTN","ECOBUL",44,0)
 Q
"RTN","ECOBUL",45,0)
 ;;
"RTN","ECOBUL",46,0)
INFO(RESULT,HANDLE,PARAMS)  ;
"RTN","ECOBUL",47,0)
 N LIST,JUSTIFY,OFFSET
"RTN","ECOBUL",48,0)
 D PARSE("Offset",PARAMS)
"RTN","ECOBUL",49,0)
 D INFO^ECOBU(.RESULT,HANDLE,PARAMS)  ; parent method
"RTN","ECOBUL",50,0)
 D METHOD^ECOB2(.LIST,HANDLE_".GetList")
"RTN","ECOBUL",51,0)
 D METHOD^ECOBL(.RESULT,LIST_".Info."_JUSTIFY)
"RTN","ECOBUL",52,0)
 Q
"RTN","ECOBUL",53,0)
 ;;
"RTN","ECOBUL",54,0)
ISHANDLE(RESULT,HANDLE,PARAMS) ; is value a collected handle
"RTN","ECOBUL",55,0)
 D METHOD(.RESULT,HANDLE_".List.IsHandle."_PARAMS)
"RTN","ECOBUL",56,0)
 Q
"RTN","ECOBUL",57,0)
 ;
"RTN","ECOBUL",58,0)
LAST(RESULT,HANDLE,PARAMS) ; get the last referenced item from the list
"RTN","ECOBUL",59,0)
 D METHOD(.RESULT,HANDLE_".List.Criteria.Last")
"RTN","ECOBUL",60,0)
 Q
"RTN","ECOBUL",61,0)
 ;
"RTN","ECOBUL",62,0)
NEXT(RESULT,HANDLE,PARAMS) ; get the next item from the list
"RTN","ECOBUL",63,0)
 D METHOD(.RESULT,HANDLE_".List.Criteria.Next")
"RTN","ECOBUL",64,0)
 Q
"RTN","ECOBUL",65,0)
 ;;
"RTN","ECOBUL",66,0)
SETITEM(RESULT,HANDLE,PARAMS) ; set simple list item
"RTN","ECOBUL",67,0)
 D METHOD(.RESULT,HANDLE_".List.SetItem."_PARAMS)
"RTN","ECOBUL",68,0)
 Q
"RTN","ECOBUL",69,0)
 ;;
"RTN","ECOBUL",70,0)
PARSE(PARSE,VALUE)  ;
"RTN","ECOBUL",71,0)
 D PARSE^ECOBL(PARSE,VALUE)
"RTN","ECOBUL",72,0)
 Q
"RTN","ECOBUL",73,0)
 ;;
"RTN","ECOBUL",74,0)
ECOBL(RESULT,HANDLE,ARGUMENT) ; handler for the actual list object
"RTN","ECOBUL",75,0)
 N CHILD
"RTN","ECOBUL",76,0)
 D METHOD(.CHILD,HANDLE_".GetList")
"RTN","ECOBUL",77,0)
 D METHOD^ECOBL(.RESULT,CHILD_"."_ARGUMENT)
"RTN","ECOBUL",78,0)
 Q
"RTN","ECOBUL",79,0)
 ;;
"RTN","ECOBUL",80,0)
OB2(RESULT,ARGUMENT) ;short cut to primitive object
"RTN","ECOBUL",81,0)
 D METHOD^ECOB2(.RESULT,ARGUMENT) Q
"RTN","ECOBUL",82,0)
 ;;
"RTN","ECOBUL",83,0)
OBM(RESULT,ARGUMENT) ;short cut to method object
"RTN","ECOBUL",84,0)
 D METHOD^ECOBM(.RESULT,ARGUMENT) Q
"RTN","ECOBUL",85,0)
 ;;
"RTN","ECOBUL",86,0)
 ;; public methods
"RTN","ECOBUL",87,0)
CREATE(NAME) ; call parent first
"RTN","ECOBUL",88,0)
 N HANDLE,CHILD,X
"RTN","ECOBUL",89,0)
 S HANDLE=$$CREATE^ECOBU(NAME)
"RTN","ECOBUL",90,0)
 ;;
"RTN","ECOBUL",91,0)
 D METHOD(.X,HANDLE_".of.Set_name.List Utility")
"RTN","ECOBUL",92,0)
 D METHOD(.X,HANDLE_".of.Set_class.EC OBU UTILITY LIST")
"RTN","ECOBUL",93,0)
 D METHOD(.X,HANDLE_".of.Set_routine.METHOD^ECOBUL(.RESULT,ARGUMENT)")
"RTN","ECOBUL",94,0)
 D METHOD(.X,HANDLE_".Root.Add.EC OBU UTILITY LIST")
"RTN","ECOBUL",95,0)
 ;;
"RTN","ECOBUL",96,0)
 D METHOD(.CHILD,HANDLE_".Methods.Add.Add")
"RTN","ECOBUL",97,0)
 D METHOD(.X,CHILD_".mf.SetAddedByClass.List Utility")
"RTN","ECOBUL",98,0)
 D METHOD(.X,CHILD_".mf.SetDescription.Default Add for list objects.")
"RTN","ECOBUL",99,0)
 D METHOD(.X,CHILD_".mf.SetHandler.ADD^ECOBUL(.RESULT,HANDLE,PARAMS)")
"RTN","ECOBUL",100,0)
 D METHOD(.X,CHILD_".mf.SetParams.Value ... to be added")
"RTN","ECOBUL",101,0)
 D METHOD(.X,CHILD_".mf.SetReturns.Item # added to the list")
"RTN","ECOBUL",102,0)
    ;;
"RTN","ECOBUL",103,0)
 D METHOD(.CHILD,HANDLE_".Methods.Override.Clear")
"RTN","ECOBUL",104,0)
 D METHOD(.X,CHILD_".mf.SetAddedByClass.List Utility")
"RTN","ECOBUL",105,0)
 D METHOD(.X,CHILD_".mf.SetDescription.Restore object to default state.")
"RTN","ECOBUL",106,0)
 D METHOD(.X,CHILD_".mf.SetHandler.CLEAR^ECOBUL(.RESULT,HANDLE,PARAMS)")
"RTN","ECOBUL",107,0)
 D METHOD(.X,CHILD_".mf.SetParams.")
"RTN","ECOBUL",108,0)
 D METHOD(.X,CHILD_".mf.SetReturns.1")
"RTN","ECOBUL",109,0)
 ;;
"RTN","ECOBUL",110,0)
 D METHOD(.CHILD,HANDLE_".Methods.Add.Find")
"RTN","ECOBUL",111,0)
 D METHOD(.X,CHILD_".mf.SetAddedByClass.List Utility")
"RTN","ECOBUL",112,0)
 D METHOD(.X,CHILD_".mf.SetDescription.Default Find for list objects.")
"RTN","ECOBUL",113,0)
 D METHOD(.X,CHILD_".mf.SetHandler.FIND^ECOBUL(.RESULT,HANDLE,PARAMS)")
"RTN","ECOBUL",114,0)
 D METHOD(.X,CHILD_".mf.SetParams.Value ... what to look for")
"RTN","ECOBUL",115,0)
 D METHOD(.X,CHILD_".mf.SetReturns.Array of matches")
"RTN","ECOBUL",116,0)
 ;
"RTN","ECOBUL",117,0)
 D METHOD(.CHILD,HANDLE_".Methods.Add.Find1")
"RTN","ECOBUL",118,0)
 D METHOD(.X,CHILD_".mf.SetAddedByClass.List Utility")
"RTN","ECOBUL",119,0)
 D METHOD(.X,CHILD_".mf.SetDescription.Default Find1 for list objects.")
"RTN","ECOBUL",120,0)
 D METHOD(.X,CHILD_".mf.SetHandler.FIND1^ECOBUL(.RESULT,HANDLE,PARAMS)")
"RTN","ECOBUL",121,0)
 D METHOD(.X,CHILD_".mf.SetParams.Value ... what to look for")
"RTN","ECOBUL",122,0)
 D METHOD(.X,CHILD_".mf.SetReturns.First matching value")
"RTN","ECOBUL",123,0)
 ;
"RTN","ECOBUL",124,0)
 D METHOD(.CHILD,HANDLE_".Methods.Add.First")
"RTN","ECOBUL",125,0)
 D METHOD(.X,CHILD_".mf.SetAddedByClass.List Utility")
"RTN","ECOBUL",126,0)
 D METHOD(.X,CHILD_".mf.SetDescription.Default First for list objects.")
"RTN","ECOBUL",127,0)
 D METHOD(.X,CHILD_".mf.SetHandler.FIRST^ECOBUL(.RESULT,HANDLE,PARAMS)")
"RTN","ECOBUL",128,0)
 D METHOD(.X,CHILD_".mf.SetParams.")
"RTN","ECOBUL",129,0)
 D METHOD(.X,CHILD_".mf.SetReturns.Handle, Item or Value of first object")
"RTN","ECOBUL",130,0)
 ;
"RTN","ECOBUL",131,0)
 D METHOD(.CHILD,HANDLE_".Methods.Add.GetItem")
"RTN","ECOBUL",132,0)
 D METHOD(.X,CHILD_".mf.SetAddedByClass.List Utility")
"RTN","ECOBUL",133,0)
 D METHOD(.X,CHILD_".mf.SetDescription.Default GetItem for list objects.")
"RTN","ECOBUL",134,0)
 D METHOD(.X,CHILD_".mf.SetHandler.GETITEM^ECOBUL(.RESULT,HANDLE,PARAMS)")
"RTN","ECOBUL",135,0)
 D METHOD(.X,CHILD_".mf.SetParams.Item #")
"RTN","ECOBUL",136,0)
 D METHOD(.X,CHILD_".mf.SetReturns.Value of item")
"RTN","ECOBUL",137,0)
 ;;
"RTN","ECOBUL",138,0)
 D METHOD(.CHILD,HANDLE_".Methods.Override.Info")
"RTN","ECOBUL",139,0)
 D METHOD(.X,CHILD_".mf.SetAddedByClass.List Utility")
"RTN","ECOBUL",140,0)
 D METHOD(.X,CHILD_".mf.SetDescription.Displays business information.")
"RTN","ECOBUL",141,0)
 D METHOD(.X,CHILD_".mf.SetHandler.INFO^ECOBUL(.RESULT,HANDLE,PARAMS)")
"RTN","ECOBUL",142,0)
 D METHOD(.X,CHILD_".mf.SetParams.[Justify]")
"RTN","ECOBUL",143,0)
 D METHOD(.X,CHILD_".mf.SetReturns.1")
"RTN","ECOBUL",144,0)
 ;;
"RTN","ECOBUL",145,0)
 D METHOD(.CHILD,HANDLE_".Methods.Add.Last")
"RTN","ECOBUL",146,0)
 D METHOD(.X,CHILD_".mf.SetAddedByClass.List Utility")
"RTN","ECOBUL",147,0)
 D METHOD(.X,CHILD_".mf.SetDescription.Default Last for list objects.")
"RTN","ECOBUL",148,0)
 D METHOD(.X,CHILD_".mf.SetHandler.LAST^ECOBUL(.RESULT,HANDLE,PARAMS)")
"RTN","ECOBUL",149,0)
 D METHOD(.X,CHILD_".mf.SetParams.")
"RTN","ECOBUL",150,0)
 D METHOD(.X,CHILD_".mf.SetReturns.Handle, Item or Value of most recent object")
"RTN","ECOBUL",151,0)
 ;;
"RTN","ECOBUL",152,0)
 D METHOD(.CHILD,HANDLE_".Methods.Add.Next")
"RTN","ECOBUL",153,0)
 D METHOD(.X,CHILD_".mf.SetAddedByClass.List Utility")
"RTN","ECOBUL",154,0)
 D METHOD(.X,CHILD_".mf.SetDescription.Default Next for list objects.")
"RTN","ECOBUL",155,0)
 D METHOD(.X,CHILD_".mf.SetHandler.NEXT^ECOBUL(.RESULT,HANDLE,PARAMS)")
"RTN","ECOBUL",156,0)
 D METHOD(.X,CHILD_".mf.SetParams.")
"RTN","ECOBUL",157,0)
 D METHOD(.X,CHILD_".mf.SetReturns.Handle, Item or Value of next object")
"RTN","ECOBUL",158,0)
 ;;
"RTN","ECOBUL",159,0)
 D METHOD(.CHILD,HANDLE_".Methods.Add.SetItem")
"RTN","ECOBUL",160,0)
 D METHOD(.X,CHILD_".mf.SetAddedByClass.List Utility")
"RTN","ECOBUL",161,0)
 D METHOD(.X,CHILD_".mf.SetDescription.Default SetItem for list objects.")
"RTN","ECOBUL",162,0)
 D METHOD(.X,CHILD_".mf.SetHandler.SETITEM^ECOBUL(.RESULT,HANDLE,PARAMS)")
"RTN","ECOBUL",163,0)
 D METHOD(.X,CHILD_".mf.SetParams.Item #.Value ... to be stored")
"RTN","ECOBUL",164,0)
 D METHOD(.X,CHILD_".mf.SetReturns.1 if successful")
"RTN","ECOBUL",165,0)
 ;;
"RTN","ECOBUL",166,0)
 S CHILD=$$CREATE^ECOBL(NAME)
"RTN","ECOBUL",167,0)
 D METHOD(.X,HANDLE_".Collect.SetChild."_CHILD)
"RTN","ECOBUL",168,0)
 D METHOD(.X,HANDLE_".Collect.SetName.List")
"RTN","ECOBUL",169,0)
 D METHOD(.X,HANDLE_".Collect.SetHandler.ECOBL^ECOBUL(.RESULT,HANDLE,PARAMS)")
"RTN","ECOBUL",170,0)
 D METHOD(.X,HANDLE_".Collect.Execute")
"RTN","ECOBUL",171,0)
 ;
"RTN","ECOBUL",172,0)
 Q HANDLE
"RTN","ECOBUL",173,0)
 ;;
"RTN","ECOBUL",174,0)
DESTROY(HANDLE) ; call parent last
"RTN","ECOBUL",175,0)
 N CHILD
"RTN","ECOBUL",176,0)
 D METHOD(.CHILD,HANDLE_".GetList")
"RTN","ECOBUL",177,0)
 D DESTROY^ECOBL(CHILD)
"RTN","ECOBUL",178,0)
 Q $$DESTROY^ECOBU(HANDLE)
"RTN","ECOBUL",179,0)
 ;;
"RTN","ECOBUL",180,0)
METHOD(RESULT,ARGUMENT) ; argument=[handle].[method].(additional.params...)
"RTN","ECOBUL",181,0)
 D METHOD^ECOBU(.RESULT,ARGUMENT) Q
"RTN","ECOBUL",182,0)
 ;;
"RTN","ECOBVST")
0^34^B20262344^n/a
"RTN","ECOBVST",1,0)
ECOBVST ;BP/CMF - Visit object
"RTN","ECOBVST",2,0)
 ;;2.0;EVENT CAPTURE;**100**;8 May 96;Build 21
"RTN","ECOBVST",3,0)
 ;@author  - Chris Flegel
"RTN","ECOBVST",4,0)
 ;@date    - 17 May 2009
"RTN","ECOBVST",5,0)
 ;@version - 1.0
"RTN","ECOBVST",6,0)
 ;;
"RTN","ECOBVST",7,0)
 Q
"RTN","ECOBVST",8,0)
 ;; private methods
"RTN","ECOBVST",9,0)
 ;;
"RTN","ECOBVST",10,0)
 ;; protected methods
"RTN","ECOBVST",11,0)
LOAD(RESULT,HANDLE,PARAMS)  ;;
"RTN","ECOBVST",12,0)
    N X,P1,P2,P3,P4,P5,P6
"RTN","ECOBVST",13,0)
    D METHOD(.RESULT,HANDLE_".GetVisitIEN")
"RTN","ECOBVST",14,0)
    S P1=$P(PARAMS,U,1)
"RTN","ECOBVST",15,0)
    D METHOD(.RESULT,HANDLE_".SetFMDateTime."_P1)
"RTN","ECOBVST",16,0)
    D METHOD(.RESULT,HANDLE_".SetDateTime."_$$FMTE^XLFDT(P1,9))
"RTN","ECOBVST",17,0)
    S P2=$P(PARAMS,U,2)
"RTN","ECOBVST",18,0)
    D METHOD(.RESULT,HANDLE_".SetLocationIEN."_$P(P2,";",1))
"RTN","ECOBVST",19,0)
    D METHOD(.RESULT,HANDLE_".SetLocation."_$P(P2,";",2))
"RTN","ECOBVST",20,0)
    S P3=$P(PARAMS,U,3)
"RTN","ECOBVST",21,0)
    D METHOD(.RESULT,HANDLE_".SetServiceCategory."_P3)
"RTN","ECOBVST",22,0)
    S P4=$P(PARAMS,U,4)
"RTN","ECOBVST",23,0)
    D METHOD(.RESULT,HANDLE_".SetServiceConnected."_P4)
"RTN","ECOBVST",24,0)
    S P5=$P(PARAMS,U,5)
"RTN","ECOBVST",25,0)
    D METHOD(.RESULT,HANDLE_".SetPatientStatus."_P5)
"RTN","ECOBVST",26,0)
    S P6=$P(PARAMS,U,6)
"RTN","ECOBVST",27,0)
    D METHOD(.RESULT,HANDLE_".SetClinicStopIEN."_$P(P6,";",1))
"RTN","ECOBVST",28,0)
    D METHOD(.RESULT,HANDLE_".SetClinicStop."_$P(P6,";",2))
"RTN","ECOBVST",29,0)
    D STUB(.RESULT,HANDLE,PARAMS)
"RTN","ECOBVST",30,0)
    Q
"RTN","ECOBVST",31,0)
    ;;
"RTN","ECOBVST",32,0)
STUB(RESULT,HANDLE,PARAMS)  ;;
"RTN","ECOBVST",33,0)
    N R1,R2,R3
"RTN","ECOBVST",34,0)
    D METHOD(.RESULT,HANDLE_".GetVisitIEN")
"RTN","ECOBVST",35,0)
    S RESULT=RESULT_U
"RTN","ECOBVST",36,0)
    D METHOD(.R1,HANDLE_".GetDateTime")
"RTN","ECOBVST",37,0)
    S RESULT=RESULT_$$LJ^XLFSTR(R1,20)
"RTN","ECOBVST",38,0)
    D METHOD(.R2,HANDLE_".GetLocation")
"RTN","ECOBVST",39,0)
    S RESULT=RESULT_$$LJ^XLFSTR(R2,20)
"RTN","ECOBVST",40,0)
    D METHOD(.R3,HANDLE_".GetClinicStop")
"RTN","ECOBVST",41,0)
    S RESULT=RESULT_R3_U_R1
"RTN","ECOBVST",42,0)
    Q
"RTN","ECOBVST",43,0)
 ;; public methods
"RTN","ECOBVST",44,0)
CREATE(NAME)  ;
"RTN","ECOBVST",45,0)
 ; call parent first
"RTN","ECOBVST",46,0)
 N HANDLE,X,CHILD
"RTN","ECOBVST",47,0)
 S HANDLE=$$CREATE^ECOB3(NAME)
"RTN","ECOBVST",48,0)
 D METHOD(.X,HANDLE_".of.Set_class.EC VISIT")
"RTN","ECOBVST",49,0)
 D METHOD(.X,HANDLE_".of.Set_name.Visit")
"RTN","ECOBVST",50,0)
 D METHOD(.X,HANDLE_".of.Set_routine.METHOD^ECOBVST(.RESULT,ARGUMENT)")
"RTN","ECOBVST",51,0)
 ;;
"RTN","ECOBVST",52,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.VisitIEN")
"RTN","ECOBVST",53,0)
 D METHOD(.X,CHILD_".pf.AddedByClass.EC VISIT")
"RTN","ECOBVST",54,0)
 ;;
"RTN","ECOBVST",55,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.FMDateTime")
"RTN","ECOBVST",56,0)
 D METHOD(.X,CHILD_".pf.AddedByClass.EC VISIT")
"RTN","ECOBVST",57,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.DateTime")
"RTN","ECOBVST",58,0)
 D METHOD(.X,CHILD_".pf.AddedByClass.EC VISIT")
"RTN","ECOBVST",59,0)
 ;;
"RTN","ECOBVST",60,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.LocationIEN")
"RTN","ECOBVST",61,0)
 D METHOD(.X,CHILD_".pf.AddedByClass.EC VISIT")
"RTN","ECOBVST",62,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.Location")
"RTN","ECOBVST",63,0)
 D METHOD(.X,CHILD_".pf.AddedByClass.EC VISIT")
"RTN","ECOBVST",64,0)
 ;;
"RTN","ECOBVST",65,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.ServiceCategory")
"RTN","ECOBVST",66,0)
 D METHOD(.X,CHILD_".pf.AddedByClass.EC VISIT")
"RTN","ECOBVST",67,0)
 ;;
"RTN","ECOBVST",68,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.ServiceConnected")
"RTN","ECOBVST",69,0)
 D METHOD(.X,CHILD_".pf.AddedByClass.EC VISIT")
"RTN","ECOBVST",70,0)
 ;;
"RTN","ECOBVST",71,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.PatientStatus")
"RTN","ECOBVST",72,0)
 D METHOD(.X,CHILD_".pf.AddedByClass.EC VISIT")
"RTN","ECOBVST",73,0)
 ;;
"RTN","ECOBVST",74,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.ClinicStopIEN")
"RTN","ECOBVST",75,0)
 D METHOD(.X,CHILD_".pf.AddedByClass.EC VISIT")
"RTN","ECOBVST",76,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.ClinicStop")
"RTN","ECOBVST",77,0)
 D METHOD(.X,CHILD_".pf.AddedByClass.EC VISIT")
"RTN","ECOBVST",78,0)
 ;;
"RTN","ECOBVST",79,0)
 D METHOD(.CHILD,HANDLE_".Methods.Add.VisitStub")
"RTN","ECOBVST",80,0)
 D METHOD(.X,CHILD_".mf.AddedByClass.EC VISIT")
"RTN","ECOBVST",81,0)
 D METHOD(.X,CHILD_".mf.SetDescription.Build Visit stub for EC VISITS.Execute.")
"RTN","ECOBVST",82,0)
 D METHOD(.X,CHILD_".mf.SetHandler.STUB^ECOBVST(.RESULT,HANDLE,PARAMS)")
"RTN","ECOBVST",83,0)
 D METHOD(.X,CHILD_".mf.SetParams.")
"RTN","ECOBVST",84,0)
 D METHOD(.X,CHILD_".mf.SetReturns.[VisitIen]^[string for pick list]")
"RTN","ECOBVST",85,0)
 ;;
"RTN","ECOBVST",86,0)
 D METHOD(.CHILD,HANDLE_".Methods.Add.Load")
"RTN","ECOBVST",87,0)
 D METHOD(.X,CHILD_".mf.AddedByClass.EC VISIT")
"RTN","ECOBVST",88,0)
 D METHOD(.X,CHILD_".mf.SetDescription.Populate object from API string.")
"RTN","ECOBVST",89,0)
 D METHOD(.X,CHILD_".mf.SetHandler.LOAD^ECOBVST(.RESULT,HANDLE,PARAMS)")
"RTN","ECOBVST",90,0)
 D METHOD(.X,CHILD_".mf.SetParams.string from API to be loaded")
"RTN","ECOBVST",91,0)
 D METHOD(.X,CHILD_".mf.SetReturns.Result of Stub method")
"RTN","ECOBVST",92,0)
 ;;
"RTN","ECOBVST",93,0)
 D METHOD(.X,HANDLE_".Root.Add.EC VISIT")
"RTN","ECOBVST",94,0)
 ;
"RTN","ECOBVST",95,0)
 Q HANDLE
"RTN","ECOBVST",96,0)
 ;;
"RTN","ECOBVST",97,0)
DESTROY(HANDLE)  ;
"RTN","ECOBVST",98,0)
 ; call parent last
"RTN","ECOBVST",99,0)
 Q $$DESTROY^ECOB3(HANDLE)
"RTN","ECOBVST",100,0)
 ;;
"RTN","ECOBVST",101,0)
METHOD(RESULT,ARGUMENT)  ;
"RTN","ECOBVST",102,0)
 ; call parent last
"RTN","ECOBVST",103,0)
 D METHOD^ECOB3(.RESULT,ARGUMENT)  ; parent method
"RTN","ECOBVST",104,0)
 Q
"RTN","ECOBVST",105,0)
 ;;
"RTN","ECOBVSTS")
0^35^B20642496^n/a
"RTN","ECOBVSTS",1,0)
ECOBVSTS ;BP/CMF - Visits object
"RTN","ECOBVSTS",2,0)
 ;;2.0;EVENT CAPTURE;**100**;8 May 96;Build 21
"RTN","ECOBVSTS",3,0)
 ;@author  - Chris Flegel
"RTN","ECOBVSTS",4,0)
 ;@date    - 17 May 2009
"RTN","ECOBVSTS",5,0)
 ;@version - 1.0
"RTN","ECOBVSTS",6,0)
 ;;
"RTN","ECOBVSTS",7,0)
 Q
"RTN","ECOBVSTS",8,0)
 ;; private methods
"RTN","ECOBVSTS",9,0)
 ;; protected methods
"RTN","ECOBVSTS",10,0)
ADD(RESULT,HANDLE,VALUE)  ; add Visit object to list
"RTN","ECOBVSTS",11,0)
 N CREATE,LIST,CHILD,ITEM,SOURCE
"RTN","ECOBVSTS",12,0)
 D METHOD(.CREATE,HANDLE_".of.Get_namespace")
"RTN","ECOBVSTS",13,0)
 S CHILD=$$CREATE^ECOBVST(CREATE)
"RTN","ECOBVSTS",14,0)
 D METHOD(.LIST,HANDLE_".GetList")
"RTN","ECOBVSTS",15,0)
 D COLLECT^ECOBL(.ITEM,LIST,CHILD)
"RTN","ECOBVSTS",16,0)
 D METHOD^ECOBVST(.RESULT,CHILD_".SetVisitIEN."_VALUE)
"RTN","ECOBVSTS",17,0)
 S RESULT=CHILD
"RTN","ECOBVSTS",18,0)
 Q
"RTN","ECOBVSTS",19,0)
 ;;
"RTN","ECOBVSTS",20,0)
CLEAR(RESULT,HANDLE,VALUE)  ;Clear list
"RTN","ECOBVSTS",21,0)
    N CHILD
"RTN","ECOBVSTS",22,0)
    D METHOD(.CHILD,HANDLE_".First")
"RTN","ECOBVSTS",23,0)
    F  Q:CHILD="-1^End of list"  D
"RTN","ECOBVSTS",24,0)
    .D DESTROY^ECOBVST(CHILD)
"RTN","ECOBVSTS",25,0)
    .D METHOD(.CHILD,HANDLE_".Next")
"RTN","ECOBVSTS",26,0)
    .Q
"RTN","ECOBVSTS",27,0)
    D CLEAR^ECOBUL(.RESULT,HANDLE,VALUE)  ;parent method
"RTN","ECOBVSTS",28,0)
    Q
"RTN","ECOBVSTS",29,0)
    ;;
"RTN","ECOBVSTS",30,0)
EXECUTE(RESULT,HANDLE,VALUE)  ; get Visits, add to list
"RTN","ECOBVSTS",31,0)
    ; uses IA 1905
"RTN","ECOBVSTS",32,0)
 N DFN,SDT,EDT,NUM,VST,PARAMS,CHILD,STUB
"RTN","ECOBVSTS",33,0)
 S RESULT=0
"RTN","ECOBVSTS",34,0)
 D METHOD(.DFN,HANDLE_".GetPatientIEN")
"RTN","ECOBVSTS",35,0)
 D METHOD(.SDT,HANDLE_".GetFMStartDate")
"RTN","ECOBVSTS",36,0)
 D METHOD(.EDT,HANDLE_".GetFMEndDate")
"RTN","ECOBVSTS",37,0)
 D METHOD(.NUM,HANDLE_".GetNumberToReturn")
"RTN","ECOBVSTS",38,0)
 K ^TMP("VSIT",$J)
"RTN","ECOBVSTS",39,0)
 D SELECTED^VSIT(DFN,SDT,EDT,"","","","","",NUM)
"RTN","ECOBVSTS",40,0)
 S VST=9999999999
"RTN","ECOBVSTS",41,0)
 S RESULT(0)=0
"RTN","ECOBVSTS",42,0)
 F  S VST=$O(^TMP("VSIT",$J,VST),-1)  Q:VST=""  D
"RTN","ECOBVSTS",43,0)
 .S NUM=$O(^TMP("VSIT",$J,VST,"")) Q:NUM=""
"RTN","ECOBVSTS",44,0)
 .S PARAMS=^TMP("VSIT",$J,VST,NUM)
"RTN","ECOBVSTS",45,0)
 .D METHOD(.CHILD,HANDLE_".Add."_VST)
"RTN","ECOBVSTS",46,0)
 .D METHOD^ECOBVST(.STUB,CHILD_".Load."_PARAMS)
"RTN","ECOBVSTS",47,0)
 .S RESULT(NUM)=STUB
"RTN","ECOBVSTS",48,0)
 .S RESULT(0)=NUM
"RTN","ECOBVSTS",49,0)
 S:RESULT(0)'=0 RESULT=1
"RTN","ECOBVSTS",50,0)
 Q
"RTN","ECOBVSTS",51,0)
 ;;
"RTN","ECOBVSTS",52,0)
 ;; public methods
"RTN","ECOBVSTS",53,0)
CREATE(NAME)  ;
"RTN","ECOBVSTS",54,0)
 ; call parent first
"RTN","ECOBVSTS",55,0)
 N HANDLE,X,CHILD
"RTN","ECOBVSTS",56,0)
 S HANDLE=$$CREATE^ECOBUL(NAME)
"RTN","ECOBVSTS",57,0)
 D METHOD(.X,HANDLE_".of.Set_class.EC VISITS")
"RTN","ECOBVSTS",58,0)
 D METHOD(.X,HANDLE_".of.Set_name.Visits")
"RTN","ECOBVSTS",59,0)
 D METHOD(.X,HANDLE_".of.Set_routine.METHOD^ECOBVSTS(.RESULT,ARGUMENT)")
"RTN","ECOBVSTS",60,0)
 ;;
"RTN","ECOBVSTS",61,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.PatientIEN")
"RTN","ECOBVSTS",62,0)
 D METHOD(.X,CHILD_".pf.AddedByClass.EC VISITS")
"RTN","ECOBVSTS",63,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.FMStartDate")
"RTN","ECOBVSTS",64,0)
 D METHOD(.X,CHILD_".pf.AddedByClass.EC VISITS")
"RTN","ECOBVSTS",65,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.FMEndDate")
"RTN","ECOBVSTS",66,0)
 D METHOD(.X,CHILD_".pf.AddedByClass.EC VISITS")
"RTN","ECOBVSTS",67,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.NumberToReturn")
"RTN","ECOBVSTS",68,0)
 D METHOD(.X,CHILD_".pf.AddedByClass.EC VISITS")
"RTN","ECOBVSTS",69,0)
 D METHOD(.X,CHILD_".pf.SetValue."_20)
"RTN","ECOBVSTS",70,0)
 D METHOD(.X,CHILD_".pf.SetDefaultValue."_20)
"RTN","ECOBVSTS",71,0)
 ;;
"RTN","ECOBVSTS",72,0)
 D METHOD(.CHILD,HANDLE_".Methods.Override.Add")
"RTN","ECOBVSTS",73,0)
 D METHOD(.X,CHILD_".mf.AddedByClass.EC VISITS")
"RTN","ECOBVSTS",74,0)
 D METHOD(.X,CHILD_".mf.SetDescription.Add VISIT object to list.")
"RTN","ECOBVSTS",75,0)
 D METHOD(.X,CHILD_".mf.SetHandler.ADD^ECOBVSTS(.RESULT,HANDLE,PARAMS)")
"RTN","ECOBVSTS",76,0)
 D METHOD(.X,CHILD_".mf.SetParams.[VisitIEN]... to be added")
"RTN","ECOBVSTS",77,0)
 D METHOD(.X,CHILD_".mf.SetReturns.Handle to Visit object")
"RTN","ECOBVSTS",78,0)
 ;;
"RTN","ECOBVSTS",79,0)
 D METHOD(.CHILD,HANDLE_".Methods.Override.Clear")
"RTN","ECOBVSTS",80,0)
 D METHOD(.X,CHILD_".mf.AddedByClass.EC VISITS")
"RTN","ECOBVSTS",81,0)
 D METHOD(.X,CHILD_".mf.SetDescription.Returns VISITS to default state.")
"RTN","ECOBVSTS",82,0)
 D METHOD(.X,CHILD_".mf.SetHandler.CLEAR^ECOBVSTS(.RESULT,HANDLE,PARAMS)")
"RTN","ECOBVSTS",83,0)
 D METHOD(.X,CHILD_".mf.SetParams.")
"RTN","ECOBVSTS",84,0)
 D METHOD(.X,CHILD_".mf.SetReturns.1")
"RTN","ECOBVSTS",85,0)
 ;;
"RTN","ECOBVSTS",86,0)
 D METHOD(.CHILD,HANDLE_".Methods.Add.Execute")
"RTN","ECOBVSTS",87,0)
 D METHOD(.X,CHILD_".mf.AddedByClass.EC VISITS")
"RTN","ECOBVSTS",88,0)
 D METHOD(.X,CHILD_".mf.SetDescription.Get Visits, add to list and results.")
"RTN","ECOBVSTS",89,0)
 D METHOD(.X,CHILD_".mf.SetHandler.EXECUTE^ECOBVSTS(.RESULT,HANDLE,PARAMS)")
"RTN","ECOBVSTS",90,0)
 D METHOD(.X,CHILD_".mf.SetParams.")
"RTN","ECOBVSTS",91,0)
 D METHOD(.X,CHILD_".mf.SetReturns.result array of Visit stubs")
"RTN","ECOBVSTS",92,0)
 ;;
"RTN","ECOBVSTS",93,0)
 D METHOD(.X,HANDLE_".Root.Add.EC VISITS")
"RTN","ECOBVSTS",94,0)
 ;
"RTN","ECOBVSTS",95,0)
 Q HANDLE
"RTN","ECOBVSTS",96,0)
 ;;
"RTN","ECOBVSTS",97,0)
DESTROY(HANDLE)  ;
"RTN","ECOBVSTS",98,0)
 ; call parent last
"RTN","ECOBVSTS",99,0)
 N CHILD
"RTN","ECOBVSTS",100,0)
 D METHOD(.CHILD,HANDLE_".First")
"RTN","ECOBVSTS",101,0)
 F  Q:CHILD="-1^End of list"  D
"RTN","ECOBVSTS",102,0)
 .D DESTROY^ECOBVST(CHILD)
"RTN","ECOBVSTS",103,0)
 .D METHOD(.CHILD,HANDLE_".Next")
"RTN","ECOBVSTS",104,0)
 .Q
"RTN","ECOBVSTS",105,0)
 Q $$DESTROY^ECOBUL(HANDLE)
"RTN","ECOBVSTS",106,0)
 ;;
"RTN","ECOBVSTS",107,0)
METHOD(RESULT,ARGUMENT)  ;
"RTN","ECOBVSTS",108,0)
 ; call parent last
"RTN","ECOBVSTS",109,0)
 D METHOD^ECOBUL(.RESULT,ARGUMENT)  ; parent method
"RTN","ECOBVSTS",110,0)
 Q
"RTN","ECOBVSTS",111,0)
 ;;
"RTN","ECRRPC")
0^8^B15494219^B12668648
"RTN","ECRRPC",1,0)
ECRRPC ;ALB/JAM - Event Capture Report RPC Broker ;2 Sep 2008
"RTN","ECRRPC",2,0)
 ;;2.0; EVENT CAPTURE ;**25,47,61,72,95,101,100**;8 May 96;Build 21
"RTN","ECRRPC",3,0)
 ;
"RTN","ECRRPC",4,0)
RPTEN(RESULTS,ECARY) ;RPC Broker entry point for EC Reports
"RTN","ECRRPC",5,0)
 ;All EC GUI reports will call this line tag
"RTN","ECRRPC",6,0)
 ;        RPC: EC REPORTS
"RTN","ECRRPC",7,0)
 ;INPUTS   ECARY - Contains the following elements for report printing
"RTN","ECRRPC",8,0)
 ;          ECDEV  - Print to queue, if device
"RTN","ECRRPC",9,0)
 ;          ECQDT  - Queue to print (date/time), optional
"RTN","ECRRPC",10,0)
 ;
"RTN","ECRRPC",11,0)
 ;OUTPUTS  RESULTS - Array of help text in the HELP FRAM File (#9.2)
"RTN","ECRRPC",12,0)
 ;
"RTN","ECRRPC",13,0)
 N HLPDA,HND,ECSTR,ECFILER,ECERR,ECDIRY,ECUFILE,ECGUI
"RTN","ECRRPC",14,0)
 N ECQTIME ;CMF should not need this!  %DT call below fails for future dates within this routine
"RTN","ECRRPC",15,0)
 D SETENV^ECUMRPC
"RTN","ECRRPC",16,0)
 S ECERR=0,ECGUI=1 D PARSE,CHKDT I ECERR Q
"RTN","ECRRPC",17,0)
 K ^TMP("ECMSG",$J),^TMP($J,"ECRPT")
"RTN","ECRRPC",18,0)
 D  I ECERR D END Q
"RTN","ECRRPC",19,0)
 . I ECPTYP="D" D HFSOPEN(ECHNDL) Q
"RTN","ECRRPC",20,0)
 . I '$D(ECDEV) S ^TMP("ECMSG",$J,1)="0^Device undefined",ECERR=1
"RTN","ECRRPC",21,0)
 S HND=$P($T(@ECHNDL),";;",2) I HND="" D  Q
"RTN","ECRRPC",22,0)
 . S ^TMP("ECMSG",$J,1)="0^Line Tag undefined" D END
"RTN","ECRRPC",23,0)
 S ^XTMP("ECRRPT","ECRRPC","ECQDTbefore")=$G(ECQDT)  ;;cmf diagnostic hack
"RTN","ECRRPC",24,0)
 S:ECPTYP="P" ECQTIME=$TR($P(ECQDT,"@",2),":","")
"RTN","ECRRPC",25,0)
 S ECQDT=$G(ECQDT,"NOW"),%DT="XT",X=ECQDT D ^%DT  ;Print time
"RTN","ECRRPC",26,0)
 S ECQDT=$S(Y>0:Y,1:"NOW")
"RTN","ECRRPC",27,0)
 S:ECPTYP="P"&(ECQDT="NOW") ECQDT=DT_"."_ECQTIME  ;Should not have to do this! %DT malfunctions inside this routine!!!
"RTN","ECRRPC",28,0)
 D @$P(HND,";",2)
"RTN","ECRRPC",29,0)
 I ECPTYP="D" D HFSCLOSE(ECFILER) ;S RESULTS=$NA(^TMP($J))
"RTN","ECRRPC",30,0)
END D KILLVAR
"RTN","ECRRPC",31,0)
 I $D(^TMP("ECMSG",$J)) S RESULTS=$NA(^TMP("ECMSG",$J)) Q
"RTN","ECRRPC",32,0)
 S RESULTS=$NA(^TMP($J))
"RTN","ECRRPC",33,0)
 Q
"RTN","ECRRPC",34,0)
 ;
"RTN","ECRRPC",35,0)
PARSE ;Parse data from array for filing
"RTN","ECRRPC",36,0)
 N SUB
"RTN","ECRRPC",37,0)
 S SUB="" F  S SUB=$O(ECARY(SUB)) Q:SUB=""  S @SUB=ECARY(SUB)
"RTN","ECRRPC",38,0)
 Q
"RTN","ECRRPC",39,0)
CHKDT ;Required Data Check
"RTN","ECRRPC",40,0)
 N I,C
"RTN","ECRRPC",41,0)
 S C=1
"RTN","ECRRPC",42,0)
 F I="ECHNDL","ECPTYP" D
"RTN","ECRRPC",43,0)
 .I $G(@I)="" S ^TMP("ECMSG",$J,C)="0^Key data missing "_I,C=C+1,ECERR=1
"RTN","ECRRPC",44,0)
 Q
"RTN","ECRRPC",45,0)
KILLVAR ;Kill variables
"RTN","ECRRPC",46,0)
 N SUB
"RTN","ECRRPC",47,0)
 S SUB="" F  S SUB=$O(ECARY(SUB)) Q:SUB=""  K @SUB
"RTN","ECRRPC",48,0)
 K ECARY,POP,ECQDT
"RTN","ECRRPC",49,0)
 Q
"RTN","ECRRPC",50,0)
HFSOPEN(HANDLE) ; 
"RTN","ECRRPC",51,0)
 ;S ECDIRY=$$GET^XPAR("DIV","EC HFS SCRATCH")
"RTN","ECRRPC",52,0)
 S ECDIRY=$$DEFDIR^%ZISH()
"RTN","ECRRPC",53,0)
 I ECDIRY="" S ECERR=1 D  Q
"RTN","ECRRPC",54,0)
 .S ^TMP("ECMSG",$J,1)="0^A scratch directory for reports doesn't exist"
"RTN","ECRRPC",55,0)
 S ECFILER="EC"_DUZ_".DAT",ECUFILE=ECFILER S ^TMP("JEN",$J,.1)=ECUFILE
"RTN","ECRRPC",56,0)
 D OPEN^%ZISH(HANDLE,ECDIRY,ECFILER,"W") D:POP  Q:POP
"RTN","ECRRPC",57,0)
 .S ECERR=1,^TMP("ECMSG",$J,1)="0^Unable to open file "_ECDIRY_ECFILER
"RTN","ECRRPC",58,0)
 S IOM=132,IOSL=99999,IOST="P-DUMMY",IOF=""""""
"RTN","ECRRPC",59,0)
 Q
"RTN","ECRRPC",60,0)
 ;
"RTN","ECRRPC",61,0)
HFSCLOSE(HANDLE) ; 
"RTN","ECRRPC",62,0)
 N ECDEL
"RTN","ECRRPC",63,0)
 D CLOSE^%ZISH(ECDIRY_HANDLE)
"RTN","ECRRPC",64,0)
 K ^TMP($J)
"RTN","ECRRPC",65,0)
 S ECDEL(ECFILER)=""
"RTN","ECRRPC",66,0)
 S X=$$FTG^%ZISH(ECDIRY,ECFILER,$NAME(^TMP($J,1)),2)
"RTN","ECRRPC",67,0)
 S X=$$DEL^%ZISH(ECDIRY,$NA(ECDEL))
"RTN","ECRRPC",68,0)
 Q
"RTN","ECRRPC",69,0)
ECPAT ;;Patient Summary Report;ECPAT^ECRRPT
"RTN","ECRRPC",70,0)
ECRDSSA ;;DSS Unit Activity;ECRDSSA^ECRRPT
"RTN","ECRRPC",71,0)
ECRDSSU ;;DSS Unit Workload Summary;ECRDSSU^ECRRPT
"RTN","ECRRPC",72,0)
ECPROV ;;Provider Summary Report;ECPROV^ECRRPT
"RTN","ECRRPC",73,0)
PROSUM ;;Provider (1-7) Summary Report;PROSUM^ECRRPT
"RTN","ECRRPC",74,0)
ECOSSUM ;;Ordering Section Summary Report;ECOSSUM^ECRRPT
"RTN","ECRRPC",75,0)
ECPCER ;;PCE Data Summary Report;ECPCER^ECRRPT
"RTN","ECRRPC",76,0)
ECRPERS ;;Inactive Person Class Report;ECRPERS^ECRRPT1
"RTN","ECRRPC",77,0)
ECRPRSN ;;Procedure Reason Report;ECRPRSN^ECRRPT1
"RTN","ECRRPC",78,0)
ECDSS1 ;;National/Local Procedure Reports;ECDSS1^ECRRPT1
"RTN","ECRRPC",79,0)
ECDSS3 ;;Category Reports;ECDSS3^ECRRPT1
"RTN","ECRRPC",80,0)
ECSUM ;;Print Category and Procedure Summary (Report);ECSUM^ECRRPT1
"RTN","ECRRPC",81,0)
ECNTPCE ;;Records Failing Transmission to PCE Report;ECNTPCE^ECRRPT1
"RTN","ECRRPC",82,0)
ECSCPT ;;Event Code Screens with CPT Codes;ECSCPT^ECRRPT1
"RTN","ECRRPC",83,0)
ECINCPT ;;National/Local Procedure Codes with Inactive CPT;ECINCPT^ECRRPT1
"RTN","ECRRPC",84,0)
ECGTP ;;Generic Table Printer;ECGTP^ECRRPT1
"RTN","ECRRPT1")
0^38^B55152988^B51929894
"RTN","ECRRPT1",1,0)
ECRRPT1 ;ALB/JAM;Event Capture Report RPC Broker ;10 JUL 2008
"RTN","ECRRPT1",2,0)
 ;;2.0; EVENT CAPTURE ;**25,32,33,61,78,72,90,95,100**;8 May 96;Build 21
"RTN","ECRRPT1",3,0)
 ;
"RTN","ECRRPT1",4,0)
ECRPRSN ;Procedure Reason Report for RPC Call
"RTN","ECRRPT1",5,0)
 ;     Variables passed in
"RTN","ECRRPT1",6,0)
 ;       ECSD     - Start Date or Report
"RTN","ECRRPT1",7,0)
 ;       ECED     - End Date or Report
"RTN","ECRRPT1",8,0)
 ;       ECL      - Location to report (1 or ALL)
"RTN","ECRRPT1",9,0)
 ;       ECD0..n  - DSS Unit to report (1,some or ALL)
"RTN","ECRRPT1",10,0)
 ;       ECRY0..n - Procedure reason (some or ALL)
"RTN","ECRRPT1",11,0)
 ;
"RTN","ECRRPT1",12,0)
 ;     Variable return
"RTN","ECRRPT1",13,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",14,0)
 N ECV,ECI,ECLOC,ECDSSU,ECDN,ECDATE,ECUN,ECNT,ECKEY,ECX,ECLINK,ECZ
"RTN","ECRRPT1",15,0)
 N ECROU,ECSAVE,ECDESC,ECW,DIC,X,Y
"RTN","ECRRPT1",16,0)
 S ECV="ECL^ECD0^ECSD^ECED^ECRY0" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT1",17,0)
 D  I '$D(ECLOC) S ^TMP("ECMSG",$J)="1^Invalid Location." Q
"RTN","ECRRPT1",18,0)
 . D LOCARRY^ECRUTL I ECL="ALL" Q
"RTN","ECRRPT1",19,0)
 . K ECLOC I $D(ECLOC1(ECL)) S ECLOC(1)=ECL_"^"_ECLOC1(ECL)
"RTN","ECRRPT1",20,0)
 D  I '$D(ECDSSU) S ^TMP("ECMSG",$J)="1^Invalid DSS Unit." Q
"RTN","ECRRPT1",21,0)
 . I ECD0="ALL" D  Q
"RTN","ECRRPT1",22,0)
 . . I '$D(ECDUZ) Q
"RTN","ECRRPT1",23,0)
 . . S ECKEY=$S($D(^XUSEC("ECALLU",ECDUZ)):1,1:0) D ALLU^ECRUTL
"RTN","ECRRPT1",24,0)
 . S (ECI,ECNT)=0 F ECI=0:1 S ECX="ECD"_ECI Q:'$D(@ECX)  D
"RTN","ECRRPT1",25,0)
 . . K DIC S DIC=724,DIC(0)="QNMZX",X=@ECX D ^DIC I Y<0 Q
"RTN","ECRRPT1",26,0)
 . . S ECNT=ECNT+1,ECDSSU(ECNT)=Y
"RTN","ECRRPT1",27,0)
 S ECX=0 D
"RTN","ECRRPT1",28,0)
 .I ECRY0="ALL" D PXREAS Q
"RTN","ECRRPT1",29,0)
 .N TLOC,TDSS,ECY
"RTN","ECRRPT1",30,0)
 .S ECI=0 F  S ECI=$O(ECLOC(ECI)) Q:'ECI  S TLOC(+ECLOC(ECI))=""
"RTN","ECRRPT1",31,0)
 .S ECI=0 F  S ECI=$O(ECDSSU(ECI)) Q:'ECI  S TDSS(+ECDSSU(ECI))=""
"RTN","ECRRPT1",32,0)
 .S ECI=0 F ECI=0:1 S ECZ="ECRY"_ECI Q:'$D(@ECZ)  D
"RTN","ECRRPT1",33,0)
 ..S ECW=0 F  S ECW=$O(^ECL("B",@ECZ,ECW)) Q:'ECW  D
"RTN","ECRRPT1",34,0)
 ...S ECY=$P($G(^ECL(ECW,0)),U,2) Q:ECY=""  S ECJ=$P($G(^ECJ(ECY,0)),U)
"RTN","ECRRPT1",35,0)
 ...Q:ECJ=""  Q:'$D(TLOC($P(ECJ,"-")))  Q:'$D(TDSS($P(ECJ,"-",2)))
"RTN","ECRRPT1",36,0)
 ...S ECLINK(ECW)=$P($G(^ECL(ECW,0)),U)
"RTN","ECRRPT1",37,0)
 D DATECHK^ECRRPT(.ECSD,.ECED) S ECSD=ECSD-.0001,ECED=ECED+.9999
"RTN","ECRRPT1",38,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT1",39,0)
 . S ECV="ECSD^ECED",ECROU="START^ECRPRSN"
"RTN","ECRRPT1",40,0)
 . S (ECSAVE("ECLOC("),ECSAVE("ECDSSU("),ECSAVE("ECLINK("))=""
"RTN","ECRRPT1",41,0)
 . S ECDESC="EC Procedure Reason Report"
"RTN","ECRRPT1",42,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT1",43,0)
 D START^ECRPRSN,EXIT^ECRPRSN
"RTN","ECRRPT1",44,0)
 Q
"RTN","ECRRPT1",45,0)
PXREAS ;Procedure reason link
"RTN","ECRRPT1",46,0)
 N ECZ,ECX,ECY,ECV
"RTN","ECRRPT1",47,0)
 S ECX=0 F  S ECX=$O(ECLOC(ECX)) Q:'ECX  S ECY=0 D
"RTN","ECRRPT1",48,0)
 . F  S ECY=$O(ECDSSU(ECY)) Q:'ECY  S ECV=+ECLOC(ECX)_"-"_+ECDSSU(ECY) D
"RTN","ECRRPT1",49,0)
 . . S ECZ=ECV_"-0-0"
"RTN","ECRRPT1",50,0)
 . . F  S ECZ=$O(^ECJ("B",ECZ)) Q:('ECZ)!($P(ECZ,"-",1,2)'=ECV)  D
"RTN","ECRRPT1",51,0)
 . . . S ECW=$O(^ECJ("B",ECZ,"")) Q:ECW=""  D REALNK
"RTN","ECRRPT1",52,0)
 Q
"RTN","ECRRPT1",53,0)
REALNK ;Reason link
"RTN","ECRRPT1",54,0)
 N XX,YY,ZZ
"RTN","ECRRPT1",55,0)
 S XX=0 F  S XX=$O(^ECL("AD",ECW,XX)) Q:'XX  S YY=0 D
"RTN","ECRRPT1",56,0)
 . F  S YY=$O(^ECL("AD",ECW,XX,YY)) Q:'YY  D
"RTN","ECRRPT1",57,0)
 . . Q:$G(^ECL(YY,0))=""  S ECLINK(YY)=XX
"RTN","ECRRPT1",58,0)
 Q
"RTN","ECRRPT1",59,0)
ECRPERS ;Inactive Person Class Report for RPC Call
"RTN","ECRRPT1",60,0)
 ;     Variables passed in
"RTN","ECRRPT1",61,0)
 ;       ECSD   - Start Date or Report
"RTN","ECRRPT1",62,0)
 ;       ECED   - End Date or Report
"RTN","ECRRPT1",63,0)
 ;       ECSORT - Sort by Patient (P) or Provider (R)
"RTN","ECRRPT1",64,0)
 ;
"RTN","ECRRPT1",65,0)
 ;     Variable return
"RTN","ECRRPT1",66,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",67,0)
 N ECV,ECDATE,ECBEGIN,ECEND,ECROU,ECDESC
"RTN","ECRRPT1",68,0)
 S ECV="ECSD^ECED^ECSORT" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT1",69,0)
 D DATECHK^ECRRPT(.ECSD,.ECED)
"RTN","ECRRPT1",70,0)
 S ECBEGIN=ECSD-.0001,ECEND=ECED+.9999
"RTN","ECRRPT1",71,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT1",72,0)
 . S ECV="ECBEGIN^ECEND^ECSORT",ECROU="START^ECRPCLS"
"RTN","ECRRPT1",73,0)
 . S ECDESC="EC Invalid Provider Report"
"RTN","ECRRPT1",74,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT1",75,0)
 D START^ECRPCLS
"RTN","ECRRPT1",76,0)
 Q
"RTN","ECRRPT1",77,0)
ECDSS1 ;National/Local Procedure Reports for RPC Call
"RTN","ECRRPT1",78,0)
 ;     Variables passed in
"RTN","ECRRPT1",79,0)
 ;       ECRTN    - Procedure Report (A-active or I-inactive)
"RTN","ECRRPT1",80,0)
 ;    If ECRTN=A, also
"RTN","ECRRPT1",81,0)
 ;       ECRN     - Preferred Report (N-ational, L-ocal or Both)
"RTN","ECRRPT1",82,0)
 ;       ECRD     - Sort Method (P-rocedure Name, N-ational Number)
"RTN","ECRRPT1",83,0)
 ;
"RTN","ECRRPT1",84,0)
 ;     Variable return
"RTN","ECRRPT1",85,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",86,0)
 N ECV,ECDESC,ECROU,DQTIME
"RTN","ECRRPT1",87,0)
 S ECV=$S($G(ECRTN)="A":"ECRTN^ECRN^ECRD",1:"ECRTN")
"RTN","ECRRPT1",88,0)
 D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT1",89,0)
 S DQTIME=ECQDT
"RTN","ECRRPT1",90,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT1",91,0)
 . S ECV="ECRTN^ECRN^ECRD",ECROU=$S(ECRTN="I":"LISTI",1:"PRT")_"^ECDSS1"
"RTN","ECRRPT1",92,0)
 . S ECDESC="Event Capture National Procedure Report",ECDIP=1
"RTN","ECRRPT1",93,0)
 . ;S ECSAVE("IO*")=""
"RTN","ECRRPT1",94,0)
 .D QUEDIP D @$S(ECRTN="I":"LISTI^ECDSS1",1:"PRT^ECDSS1")
"RTN","ECRRPT1",95,0)
 D CLOSE^%ZISH(ECDIRY_ECFILER)
"RTN","ECRRPT1",96,0)
 S %ZIS("HFSNAME")=ECDIRY_ECFILER,%ZIS("HFSMODE")="W",IOP="HFS"
"RTN","ECRRPT1",97,0)
 D @$S(ECRTN="I":"LISTI^ECDSS1",1:"PRT^ECDSS1")
"RTN","ECRRPT1",98,0)
 Q
"RTN","ECRRPT1",99,0)
ECDSS3 ;Category Reports for RPC Call
"RTN","ECRRPT1",100,0)
 ;     Variables passed in
"RTN","ECRRPT1",101,0)
 ;       ECRTN    - Category Procedure Report 
"RTN","ECRRPT1",102,0)
 ;                  (A-active, I-inactive or B-oth)
"RTN","ECRRPT1",103,0)
 ;
"RTN","ECRRPT1",104,0)
 ;     Variable return
"RTN","ECRRPT1",105,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",106,0)
 N ECV,ECDIP,DQTIME
"RTN","ECRRPT1",107,0)
 S ECV="ECRTN" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT1",108,0)
 S DQTIME=ECQDT
"RTN","ECRRPT1",109,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT1",110,0)
 . S ECV="ECRTN",ECROU="PRINT^ECDSS3"
"RTN","ECRRPT1",111,0)
 . S ECDESC="Event Capture Category Reports"
"RTN","ECRRPT1",112,0)
 . D QUEDIP D PRINT^ECDSS3
"RTN","ECRRPT1",113,0)
 D CLOSE^%ZISH(ECDIRY_ECFILER)
"RTN","ECRRPT1",114,0)
 S %ZIS("HFSNAME")=ECDIRY_ECFILER,%ZIS("HFSMODE")="W",IOP="HFS"
"RTN","ECRRPT1",115,0)
 D PRINT^ECDSS3
"RTN","ECRRPT1",116,0)
 Q
"RTN","ECRRPT1",117,0)
QUEDIP ;Queue when using DIP
"RTN","ECRRPT1",118,0)
 N DIC,X,Y
"RTN","ECRRPT1",119,0)
 D  I Y=-1 S ECERR=1 Q
"RTN","ECRRPT1",120,0)
 . S DIC(0)="MN",X=ECDEV,DIC="^%ZIS(1," D ^DIC
"RTN","ECRRPT1",121,0)
 . S:+Y>0 IOP="Q;"_$P(Y,U,2)
"RTN","ECRRPT1",122,0)
 . S Y=ECQDT X ^DD("DD") S DQTIME=Y
"RTN","ECRRPT1",123,0)
 Q
"RTN","ECRRPT1",124,0)
ECSUM ;Print Category and Procedure Summary (Report) for RPC Call
"RTN","ECRRPT1",125,0)
 ;     Variables passed in
"RTN","ECRRPT1",126,0)
 ;       ECL      - Location to report (1 or ALL)
"RTN","ECRRPT1",127,0)
 ;       ECD      - DSS Unit to report (1 or ALL), If ECD'="ALL" then ECC
"RTN","ECRRPT1",128,0)
 ;       ECC      - Category (1 or ALL) (optional)
"RTN","ECRRPT1",129,0)
 ;       ECRTN    - Event Code Screen (Active, Inactive or Both)
"RTN","ECRRPT1",130,0)
 ;
"RTN","ECRRPT1",131,0)
 ;     Variable return
"RTN","ECRRPT1",132,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",133,0)
 N ECV,ECDN,ECCN,ECROU,ECSAVE,ECDESC,ECLOC,ECS,ECJLP,ECSN,ECALL,DIC,X,Y
"RTN","ECRRPT1",134,0)
 N ECSCN
"RTN","ECRRPT1",135,0)
 S (ECJLP,ECALL)=0,ECV="ECL^ECD^ECRTN" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT1",136,0)
 D  I '$D(ECLOC) S ^TMP("ECMSG",$J)="1^Invalid Location." Q
"RTN","ECRRPT1",137,0)
 . D LOCARRY^ECRUTL I ECL="ALL" Q
"RTN","ECRRPT1",138,0)
 . K ECLOC I $D(ECLOC1(ECL)) S ECLOC(1)=ECL_"^"_ECLOC1(ECL)
"RTN","ECRRPT1",139,0)
 S ECSCN=ECRTN D  I ECERR S ^TMP("ECMSG",$J)="1^Invalid DSS Unit." Q
"RTN","ECRRPT1",140,0)
 . I ECD="ALL" S ECALL=1 Q
"RTN","ECRRPT1",141,0)
 . K DIC S DIC=724,DIC(0)="QNMZX",X=ECD D ^DIC I Y<0 S ECERR=1 Q
"RTN","ECRRPT1",142,0)
 . S ECDN=$P(Y,U,2)_$S($P($G(^ECD(+ECD,0)),"^",6):" **Inactive**",1:"")
"RTN","ECRRPT1",143,0)
 . S ECS=+$P(^ECD(ECD,0),"^",2),ECJLP=+$P(^(0),"^",11)
"RTN","ECRRPT1",144,0)
 . S ECSN=$S($P($G(^DIC(49,ECS,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN")
"RTN","ECRRPT1",145,0)
 . I 'ECJLP S ECC=0,ECCN="None"
"RTN","ECRRPT1",146,0)
 I ECALL D PXRUN Q
"RTN","ECRRPT1",147,0)
 S ECV="ECC" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT1",148,0)
 D  I ECERR S ^TMP("ECMSG",$J)="1^Invalid Category." Q
"RTN","ECRRPT1",149,0)
 . I (ECC="ALL")!(ECC=0) Q
"RTN","ECRRPT1",150,0)
 . K DIC S DIC=726,DIC(0)="QNMZX",X=ECC D ^DIC I Y<0 S ECERR=1 Q
"RTN","ECRRPT1",151,0)
 . S ECCN=$P(Y,U,2)
"RTN","ECRRPT1",152,0)
PXRUN I ECPTYP="P" D  Q
"RTN","ECRRPT1",153,0)
 . S ECV="ECALL^ECSCN",ECROU="START^ECSUM"
"RTN","ECRRPT1",154,0)
 . S ECSAVE("ECLOC(")=""
"RTN","ECRRPT1",155,0)
 . I 'ECALL S ECV=ECV_"^ECD^ECC^ECSN^ECDN^ECJLP^ECCN^ECSCN"
"RTN","ECRRPT1",156,0)
 . S ECDESC="EC Print Category and Procedure Summary"
"RTN","ECRRPT1",157,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT1",158,0)
 U IO D START^ECSUM
"RTN","ECRRPT1",159,0)
 Q
"RTN","ECRRPT1",160,0)
ECNTPCE ;ECS Records Failing Transmission to PCE
"RTN","ECRRPT1",161,0)
 ;     Variables passed in
"RTN","ECRRPT1",162,0)
 ;       ECSD   - Start Date or Report
"RTN","ECRRPT1",163,0)
 ;       ECED   - End Date or Report
"RTN","ECRRPT1",164,0)
 ;
"RTN","ECRRPT1",165,0)
 ;     Variable return
"RTN","ECRRPT1",166,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",167,0)
 N ECV,ECDATE,ECROU,ECDESC
"RTN","ECRRPT1",168,0)
 S ECV="ECSD^ECED" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT1",169,0)
 D DATECHK^ECRRPT(.ECSD,.ECED)
"RTN","ECRRPT1",170,0)
 S ECSD=ECSD-.0001,ECED=ECED+.9999
"RTN","ECRRPT1",171,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT1",172,0)
 . S ECV="ECSD^ECED^ECDATE",ECROU="START^ECNTPCE"
"RTN","ECRRPT1",173,0)
 . S ECDESC="ECS Records Failing Transmission to PCE Report"
"RTN","ECRRPT1",174,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT1",175,0)
 D START^ECNTPCE
"RTN","ECRRPT1",176,0)
 Q
"RTN","ECRRPT1",177,0)
ECSCPT ;Event Code Screens with CPT Codes
"RTN","ECRRPT1",178,0)
 ;     Variables passed in
"RTN","ECRRPT1",179,0)
 ;       ECL      - Location to report (1 or ALL)
"RTN","ECRRPT1",180,0)
 ;       ECD      - DSS Unit to report (1 or ALL), If ECD'="ALL" then ECC
"RTN","ECRRPT1",181,0)
 ;       ECC      - Category (1 or ALL) (optional)
"RTN","ECRRPT1",182,0)
 ;       ECCPT    - CPT Codes to Display (Active, Inactive or Both)
"RTN","ECRRPT1",183,0)
 ;
"RTN","ECRRPT1",184,0)
 ;     Variable return
"RTN","ECRRPT1",185,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",186,0)
 N ECV,ECDN,ECCN,ECROU,ECSAVE,ECDESC,ECLOC,ECS,ECJLP,ECALL,DIC,X,Y
"RTN","ECRRPT1",187,0)
 S (ECJLP,ECALL)=0,ECV="ECL^ECD^ECCPT" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT1",188,0)
 D  I '$D(ECLOC) S ^TMP("ECMSG",$J)="1^Invalid Location." Q
"RTN","ECRRPT1",189,0)
 . I ECL="ALL" D LOCARRY^ECRUTL Q
"RTN","ECRRPT1",190,0)
 . S DIC=4,DIC(0)="QNZX",X=ECL D ^DIC Q:Y<0  S ECLOC(1)=+Y_U_$P(Y,U,2)
"RTN","ECRRPT1",191,0)
 D  I ECERR S ^TMP("ECMSG",$J)="1^Invalid DSS Unit." Q
"RTN","ECRRPT1",192,0)
 . I ECD="ALL" S ECALL=1 Q
"RTN","ECRRPT1",193,0)
 . K DIC S DIC=724,DIC(0)="QNMZX",X=ECD D ^DIC I Y<0 S ECERR=1 Q
"RTN","ECRRPT1",194,0)
 . S ECDN=$P(Y,U,2)_$S($P($G(^ECD(+ECD,0)),"^",6):" **Inactive**",1:"")
"RTN","ECRRPT1",195,0)
 . S ECJLP=+$P(^ECD(ECD,0),"^",11)
"RTN","ECRRPT1",196,0)
 . I 'ECJLP S ECC=0,ECCN="None"
"RTN","ECRRPT1",197,0)
 I ECALL D CPTRUN Q
"RTN","ECRRPT1",198,0)
 S ECV="ECC" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT1",199,0)
 D  I ECERR S ^TMP("ECMSG",$J)="1^Invalid Category." Q
"RTN","ECRRPT1",200,0)
 . I (ECC="ALL")!(ECC=0) Q
"RTN","ECRRPT1",201,0)
 . K DIC S DIC=726,DIC(0)="QNMZX",X=ECC D ^DIC I Y<0 S ECERR=1 Q
"RTN","ECRRPT1",202,0)
 . S ECCN=$P(Y,U,2)
"RTN","ECRRPT1",203,0)
CPTRUN I ECPTYP="P" D  Q
"RTN","ECRRPT1",204,0)
 . S ECV="ECALL^ECCPT",ECROU="START^ECSCPT"
"RTN","ECRRPT1",205,0)
 . S ECSAVE("ECLOC(")=""
"RTN","ECRRPT1",206,0)
 . I 'ECALL S ECV=ECV_"^ECD^ECC^ECDN^ECJLP^ECCN"
"RTN","ECRRPT1",207,0)
 . S ECDESC="Event Code Screens with CPT Codes"
"RTN","ECRRPT1",208,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT1",209,0)
 U IO D START^ECSCPT
"RTN","ECRRPT1",210,0)
 Q
"RTN","ECRRPT1",211,0)
ECINCPT ;National/Local Procedure Codes with Inactive CPT Reports for RPC Call
"RTN","ECRRPT1",212,0)
 ;     Variables passed in
"RTN","ECRRPT1",213,0)
 ;       NONE     - No input variables
"RTN","ECRRPT1",214,0)
 ;
"RTN","ECRRPT1",215,0)
 ;     Variable return
"RTN","ECRRPT1",216,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",217,0)
 N ECV,ECL,ECDESC,ECROU,DQTIME,ECPG
"RTN","ECRRPT1",218,0)
 S ECPG=1
"RTN","ECRRPT1",219,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT1",220,0)
 . S ECROU="START^ECINCPT",ECV="ECL",ECL=""
"RTN","ECRRPT1",221,0)
 . S ECDESC="National/Local Procedure Codes with Inactive CPT"
"RTN","ECRRPT1",222,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT1",223,0)
 U IO D START^ECINCPT
"RTN","ECRRPT1",224,0)
 Q
"RTN","ECRRPT1",225,0)
ECGTP ;ECS Generic Table Printer
"RTN","ECRRPT1",226,0)
 ;     Variables passed in
"RTN","ECRRPT1",227,0)
 ;       ECOBHNDL   - Handle to generic table print obj
"RTN","ECRRPT1",228,0)
 ;
"RTN","ECRRPT1",229,0)
 ;     Variable return
"RTN","ECRRPT1",230,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",231,0)
 N ECV,ECROU,ECDESC
"RTN","ECRRPT1",232,0)
 S ECV="ECOBHNDL" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT1",233,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT1",234,0)
 . S ECV="ECOBHNDL",ECROU="START^ECGTP"
"RTN","ECRRPT1",235,0)
 . S ECDESC="ECS Generic Table Printer"
"RTN","ECRRPT1",236,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT1",237,0)
 D START^ECGTP
"RTN","ECRRPT1",238,0)
 Q
"RTN","ECRUTL")
0^5^B36325605^B36031980
"RTN","ECRUTL",1,0)
ECRUTL ;ALB/ESD - Event Capture Report Utilities ;1 Aug 97
"RTN","ECRUTL",2,0)
 ;;2.0; EVENT CAPTURE ;**5,100**;8 May 96;Build 21
"RTN","ECRUTL",3,0)
 ;
"RTN","ECRUTL",4,0)
ASKLOC() ; Ask report location(s) (institution)
"RTN","ECRUTL",5,0)
 ;   Input:  None
"RTN","ECRUTL",6,0)
 ;  Output:  1 if successful - location(s) will be in array ECLOC
"RTN","ECRUTL",7,0)
 ;           0 if unsuccessful
"RTN","ECRUTL",8,0)
 ;
"RTN","ECRUTL",9,0)
 N DIRUT,DUOUT,ECN,ECNUM,ECX,Y
"RTN","ECRUTL",10,0)
 D LOCARRY
"RTN","ECRUTL",11,0)
 ;
"RTN","ECRUTL",12,0)
 ;- Only one location exists
"RTN","ECRUTL",13,0)
 I '$D(ECLOC(2)) G ASKLOCQ
"RTN","ECRUTL",14,0)
 ;
"RTN","ECRUTL",15,0)
 W !
"RTN","ECRUTL",16,0)
 S DIR(0)="YA",DIR("A")="Do you want to print this report for all locations? ",DIR("B")="YES",DIR("?")="Enter YES to choose all Event Capture locations or NO to select a specific location."
"RTN","ECRUTL",17,0)
 D ^DIR K DIR I $D(DIRUT) K ECLOC G ASKLOCQ
"RTN","ECRUTL",18,0)
 I +Y G ASKLOCQ
"RTN","ECRUTL",19,0)
 I 'Y D
"RTN","ECRUTL",20,0)
 . W @IOF,!,"Event Capture Locations:",!
"RTN","ECRUTL",21,0)
 . F ECX=0:0 S ECX=$O(ECLOC(ECX)) Q:'ECX  W ECX_".  ",$P(ECLOC(ECX),"^",2),!
"RTN","ECRUTL",22,0)
 . S ECNUM=$$SEL
"RTN","ECRUTL",23,0)
 . I ECNUM D
"RTN","ECRUTL",24,0)
 .. S ECLOC(1)=+$P(ECLOC(ECNUM),"^")_"^"_$P(ECLOC(ECNUM),"^",2)
"RTN","ECRUTL",25,0)
 .. F ECX=0:0 S ECX=$O(ECLOC(ECX)) Q:'ECX  K:(ECX>1) ECLOC(ECX)
"RTN","ECRUTL",26,0)
 . I 'ECNUM K ECLOC
"RTN","ECRUTL",27,0)
ASKLOCQ Q $S('$D(ECLOC):0,1:1)
"RTN","ECRUTL",28,0)
 ;
"RTN","ECRUTL",29,0)
 ;
"RTN","ECRUTL",30,0)
LOCARRY ;-- Get location(s) from "LOC" xref of DMMS Units (#720) fld of 
"RTN","ECRUTL",31,0)
 ;   INSTITUTION file and create ECLOC array
"RTN","ECRUTL",32,0)
 ;
"RTN","ECRUTL",33,0)
 N ECLNAM,ECLNUM,ECCNT
"RTN","ECRUTL",34,0)
 S (ECCNT,ECLNUM)=0,ECLNAM=""
"RTN","ECRUTL",35,0)
 F  S ECLNAM=$O(^DIC(4,"LOC",ECLNAM)) Q:ECLNAM=""  F  S ECLNUM=$O(^DIC(4,"LOC",ECLNAM,ECLNUM)) Q:'ECLNUM  S ECCNT=ECCNT+1,ECLOC(ECCNT)=ECLNUM_"^"_ECLNAM,ECLOC1(ECLNUM)=ECLNAM
"RTN","ECRUTL",36,0)
 Q
"RTN","ECRUTL",37,0)
 ;
"RTN","ECRUTL",38,0)
 ;
"RTN","ECRUTL",39,0)
SEL() ;-- Select one location from ECLOC array
"RTN","ECRUTL",40,0)
 ;
"RTN","ECRUTL",41,0)
GETNUM N DIRUT,DUOUT,Y
"RTN","ECRUTL",42,0)
 S DIR(0)="NA",DIR("A")="Select Number: ",DIR("?")=$P($T(HLPTXT),";;",2)
"RTN","ECRUTL",43,0)
 D ^DIR K DIR
"RTN","ECRUTL",44,0)
 I $D(DIRUT) S ECN=0 G SELQ
"RTN","ECRUTL",45,0)
 I '$D(ECLOC(+Y)) W !!,$P($T(HLPTXT),";;",2) G GETNUM
"RTN","ECRUTL",46,0)
 S ECN=+Y
"RTN","ECRUTL",47,0)
SELQ Q +$G(ECN)
"RTN","ECRUTL",48,0)
 ;
"RTN","ECRUTL",49,0)
 ;
"RTN","ECRUTL",50,0)
 ;
"RTN","ECRUTL",51,0)
ASKDSS() ; Ask DSS Unit(s)
"RTN","ECRUTL",52,0)
 ;   Input:  None
"RTN","ECRUTL",53,0)
 ;  Output:  1 if successful - DSS Units will be in array ECDSSU
"RTN","ECRUTL",54,0)
 ;           0 if unsuccessful
"RTN","ECRUTL",55,0)
 ;
"RTN","ECRUTL",56,0)
 N DIRUT,DUOUT,ECKEY,ECNT,ECD,ECN,ECX,I,Y
"RTN","ECRUTL",57,0)
 S ECKEY=$S($D(^XUSEC("ECALLU",DUZ)):1,1:0)
"RTN","ECRUTL",58,0)
 W ! S DIR(0)="YA"
"RTN","ECRUTL",59,0)
 S DIR("A")="Do you want to print this report for all "_$S('ECKEY:"accessible ",1:"")_"DSS Units? ",DIR("B")="YES"
"RTN","ECRUTL",60,0)
 D ^DIR K DIR
"RTN","ECRUTL",61,0)
 G:$D(DIRUT) ASKDSSQ
"RTN","ECRUTL",62,0)
 D @($S(+Y:"ALLU",1:"SPECU"))
"RTN","ECRUTL",63,0)
ASKDSSQ Q $S('$D(ECDSSU):0,1:1)
"RTN","ECRUTL",64,0)
 ;
"RTN","ECRUTL",65,0)
 ;
"RTN","ECRUTL",66,0)
ALLU ;-- Get all DSS Units and create ECDSSU array
"RTN","ECRUTL",67,0)
 N DIR,ECD,ECN,ECX,I,Y
"RTN","ECRUTL",68,0)
 S ECD="",(ECN,ECX)=0
"RTN","ECRUTL",69,0)
 F  S ECD=$O(^ECD("B",ECD)) Q:ECD=""  F  S ECN=$O(^ECD("B",ECD,ECN)) Q:'ECN  D
"RTN","ECRUTL",70,0)
 . Q:'$$VALID(ECN)!('ECKEY&('$D(^VA(200,DUZ,"EC",+ECN))))
"RTN","ECRUTL",71,0)
 . S ECX=ECX+1,ECDSSU(ECX)=ECN_"^"_ECD
"RTN","ECRUTL",72,0)
 I '$D(ECDSSU) D
"RTN","ECRUTL",73,0)
 . W !!,$P($T(NOUNITS),";;",2),!
"RTN","ECRUTL",74,0)
 . F I=0:1:1 W !,$P($T(ERRMSG+I),";;",2)
"RTN","ECRUTL",75,0)
 . W ! S DIR(0)="E" D ^DIR
"RTN","ECRUTL",76,0)
ALLUQ Q
"RTN","ECRUTL",77,0)
 ;
"RTN","ECRUTL",78,0)
 ;
"RTN","ECRUTL",79,0)
SPECU ;-- Get specific DSS Units
"RTN","ECRUTL",80,0)
 N DIRUT,DUOUT,Y
"RTN","ECRUTL",81,0)
 W !
"RTN","ECRUTL",82,0)
 S DIR(0)="YA",DIR("A")="Do you want to print this report for specific DSS Unit(s)? ",DIR("B")="YES"
"RTN","ECRUTL",83,0)
 S DIR("?")="Enter YES to select specific DSS Unit(s) or NO to quit."
"RTN","ECRUTL",84,0)
 D ^DIR K DIR
"RTN","ECRUTL",85,0)
 I 'Y!($D(DIRUT)) G SPECUQ
"RTN","ECRUTL",86,0)
 D SELU
"RTN","ECRUTL",87,0)
SPECUQ Q
"RTN","ECRUTL",88,0)
 ;
"RTN","ECRUTL",89,0)
 ;
"RTN","ECRUTL",90,0)
SELU ;-- Create ECDSSU array containing DSS Units after checking for validity and access to Unit
"RTN","ECRUTL",91,0)
 N ECX,I,Y,Z
"RTN","ECRUTL",92,0)
 S (ECX,Z)=0
"RTN","ECRUTL",93,0)
GETU W ! K DUOUT,DTOUT,DIRUT,Y
"RTN","ECRUTL",94,0)
 S DIC=724,DIC("A")="Select DSS Unit: ",DIC(0)="QEAMZ"
"RTN","ECRUTL",95,0)
 S DIC("S")="I ECKEY!($D(^VA(200,DUZ,""EC"",+Y)))"
"RTN","ECRUTL",96,0)
 D ^DIC K DIC
"RTN","ECRUTL",97,0)
 G SELUQ:$D(DTOUT)!($D(DUOUT))
"RTN","ECRUTL",98,0)
 I +Y>0 D  G GETU
"RTN","ECRUTL",99,0)
 . F I=1:1:ECX I +Y=+ECDSSU(I) D  Q
"RTN","ECRUTL",100,0)
 .. W !,?10,"But you already selected that one... try again."
"RTN","ECRUTL",101,0)
 .. S Y=-1
"RTN","ECRUTL",102,0)
 . Q:Y=-1
"RTN","ECRUTL",103,0)
 . I $$VALID(+Y) S ECX=ECX+1,ECDSSU(ECX)=Y
"RTN","ECRUTL",104,0)
 . I '$$VALID(+Y) W ! F I=0:1:1 W !?5,$P($T(INVALID+I),";;",2)
"RTN","ECRUTL",105,0)
 I +Y<0 S Z=$$DISPU() I 'Z W !!?10," *** NO DSS UNITS SELECTED ***" G SELUQ
"RTN","ECRUTL",106,0)
 W ! S DIR(0)="YA",DIR("A")="Is this list correct? ",DIR("B")="YES",DIR("?")="Answer YES to accept the list, NO to start over."
"RTN","ECRUTL",107,0)
 D ^DIR K DIR
"RTN","ECRUTL",108,0)
 I $D(DIRUT) G SELUQ
"RTN","ECRUTL",109,0)
 I '$G(Y) S ECX=0 K ECDSSU G GETU
"RTN","ECRUTL",110,0)
SELUQ I $D(DIRUT)!($D(DTOUT))!($D(DUOUT)) D
"RTN","ECRUTL",111,0)
 . I $D(ECDSSU) W !!,?10,"Deleting selection...",!
"RTN","ECRUTL",112,0)
 . K ECDSSU
"RTN","ECRUTL",113,0)
 Q
"RTN","ECRUTL",114,0)
 ;
"RTN","ECRUTL",115,0)
 ;
"RTN","ECRUTL",116,0)
VALID(IEN) ;-- Check DSS Unit for use by Event Capture
"RTN","ECRUTL",117,0)
 N NODE
"RTN","ECRUTL",118,0)
 S NODE=$G(^ECD(IEN,0))
"RTN","ECRUTL",119,0)
 Q $S($P(NODE,"^",8):1,1:0)
"RTN","ECRUTL",120,0)
 ;
"RTN","ECRUTL",121,0)
 ;
"RTN","ECRUTL",122,0)
DISPU(TYP) ;-- Display DSS Units
"RTN","ECRUTL",123,0)
 N X
"RTN","ECRUTL",124,0)
 I '$D(ECDSSU) G DISPUQ
"RTN","ECRUTL",125,0)
 W @IOF,!!,$S($G(TYP)="All":TYP,1:"Selected")_" DSS Units:",!
"RTN","ECRUTL",126,0)
 F X=0:0 S X=$O(ECDSSU(X)) Q:'X  W !?5,X_". ",$P(ECDSSU(X),"^",2)
"RTN","ECRUTL",127,0)
 W !
"RTN","ECRUTL",128,0)
DISPUQ Q $S($D(ECDSSU):1,1:0)
"RTN","ECRUTL",129,0)
 ;
"RTN","ECRUTL",130,0)
 ;
"RTN","ECRUTL",131,0)
HLPTXT ;;  Enter the number corresponding to the location you want to select.
"RTN","ECRUTL",132,0)
NOUNITS ;;  You do not have access to any DSS Units.
"RTN","ECRUTL",133,0)
ERRMSG ;;  If you are responsible for printing this report, contact your Event
"RTN","ECRUTL",134,0)
 ;;  Capture ADPAC to allow access.
"RTN","ECRUTL",135,0)
INVALID ;;  This DSS Unit is either inactive or cannot be used with the
"RTN","ECRUTL",136,0)
 ;;  Event Capture software.  Please select another DSS Unit.
"RTN","ECRUTL",137,0)
 ;
"RTN","ECRUTL",138,0)
 ;
"RTN","ECRUTL",139,0)
 ;
"RTN","ECRUTL",140,0)
STDT() ; Get Start Date
"RTN","ECRUTL",141,0)
 ;   Input:  None
"RTN","ECRUTL",142,0)
 ;  Output:  1 if successful - start date in ECSTDT
"RTN","ECRUTL",143,0)
 ;           0 if unsuccessful
"RTN","ECRUTL",144,0)
 ;
"RTN","ECRUTL",145,0)
EN N DIRUT,DUOUT,Y
"RTN","ECRUTL",146,0)
 W ! S DIR(0)="DA^::EX",DIR("A")="Enter Start Date: ",DIR("?")="^D HELP^%DTC"
"RTN","ECRUTL",147,0)
 D ^DIR K DIR G:$D(DIRUT) STDTQ
"RTN","ECRUTL",148,0)
 I (+Y>DT) W !,"*** Future dates are not allowed ***" G EN
"RTN","ECRUTL",149,0)
 S ECSTDT=+Y,ECSTDT=ECSTDT-.0001
"RTN","ECRUTL",150,0)
STDTQ Q $S($G(ECSTDT):1,1:0)
"RTN","ECRUTL",151,0)
 ;
"RTN","ECRUTL",152,0)
 ;
"RTN","ECRUTL",153,0)
 ;
"RTN","ECRUTL",154,0)
ENDDT(STDT) ; Get End Date
"RTN","ECRUTL",155,0)
 ;   Input:  STDT - Start Date
"RTN","ECRUTL",156,0)
 ;  Output:  1 if successful - end date in ECENDDT
"RTN","ECRUTL",157,0)
 ;           0 if unsuccessful
"RTN","ECRUTL",158,0)
 ;
"RTN","ECRUTL",159,0)
 N DIRUT,DUOUT,Y
"RTN","ECRUTL",160,0)
 G:'$G(STDT) ENDDTQ
"RTN","ECRUTL",161,0)
 W ! S DIR(0)="DA^"_STDT_":DT:EX",DIR("A")="Enter End Date: "
"RTN","ECRUTL",162,0)
 S DIR("?")="^W ""*** Future dates are not allowed ***"",! D HELP^%DTC"
"RTN","ECRUTL",163,0)
 D ^DIR K DIR G:$D(DIRUT) ENDDTQ
"RTN","ECRUTL",164,0)
 S ECENDDT=+Y,ECENDDT=ECENDDT+.9999
"RTN","ECRUTL",165,0)
ENDDTQ Q $S($G(ECENDDT):1,1:0)
"RTN","ECRUTL",166,0)
 ;
"RTN","ECRUTL",167,0)
REASON ;* Prompt to report Procedure Reasons
"RTN","ECRUTL",168,0)
 ;
"RTN","ECRUTL",169,0)
 ;* Variables returned
"RTN","ECRUTL",170,0)
 ;   ECRY - Must be KILLed by calling routine
"RTN","ECRUTL",171,0)
 ;
"RTN","ECRUTL",172,0)
 S DIR(0)="Y^A"
"RTN","ECRUTL",173,0)
 S DIR("A")="Do you want to include Procedure Reasons"
"RTN","ECRUTL",174,0)
 S DIR("B")="NO"
"RTN","ECRUTL",175,0)
 S DIR("?",1)="Enter Yes to include procedure reasons on the report."
"RTN","ECRUTL",176,0)
 S DIR("?")="Enter No to report without procedure reasons."
"RTN","ECRUTL",177,0)
 D ^DIR
"RTN","ECRUTL",178,0)
 S:(+Y=1) ECRY=""
"RTN","ECRUTL",179,0)
 K DIR,Y
"RTN","ECRUTL",180,0)
 Q
"RTN","ECSUM1")
0^37^B12652997^B11875694
"RTN","ECSUM1",1,0)
ECSUM1 ;BIR/JLP,RHK-Category and Procedure Summary (cont'd) ;7 Nov 2007
"RTN","ECSUM1",2,0)
 ;;2.0; EVENT CAPTURE ;**4,19,23,33,47,95,100**;8 May 96;Build 21
"RTN","ECSUM1",3,0)
ALLU ;
"RTN","ECSUM1",4,0)
 N UCNT,ECDO,ECCO,ECNT
"RTN","ECSUM1",5,0)
 S (ECD,ECMORE,ECNT,ECDO,ECCO)=0,ECPG=$G(ECPG,1),ECSCN=$G(ECSCN,"B")
"RTN","ECSUM1",6,0)
 F  S ECD=$O(^ECJ("AP",ECL,ECD)) Q:'ECD  D  Q:ECOUT
"RTN","ECSUM1",7,0)
 .D SET,CATS,PAGE:'ECOUT&UCNT
"RTN","ECSUM1",8,0)
END I 'ECNT N ECNOCNT S ECNOCNT=1 D HEADER W !!!,"Nothing Found."
"RTN","ECSUM1",9,0)
 S ECPG=$G(ECPG,1)
"RTN","ECSUM1",10,0)
 Q
"RTN","ECSUM1",11,0)
SUM2 ;Prints Categories and Procedures for a DSS Unit
"RTN","ECSUM1",12,0)
 N UCNT,ECDO,ECCO,ECNT
"RTN","ECSUM1",13,0)
 S (ECDO,ECMORE,UCNT,ECNT,ECCO)=0,ECPG=$G(ECPG,1),ECSCN=$G(ECSCN,"B")
"RTN","ECSUM1",14,0)
 I ECC="ALL" D CATS G END
"RTN","ECSUM1",15,0)
 I 'ECJLP S ECC=0,ECCN="None",ECCO=999
"RTN","ECSUM1",16,0)
 D PROC
"RTN","ECSUM1",17,0)
 D END
"RTN","ECSUM1",18,0)
 Q
"RTN","ECSUM1",19,0)
SET ;set var
"RTN","ECSUM1",20,0)
 S ECDN=$S($P($G(^ECD(+ECD,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN"),UCNT=0
"RTN","ECSUM1",21,0)
 S ECDN=ECDN_$S($P($G(^ECD(+ECD,0)),"^",6):" **Inactive**",1:"")
"RTN","ECSUM1",22,0)
 S ECS=+$P($G(^ECD(+ECD,0)),"^",2)
"RTN","ECSUM1",23,0)
 S ECSN=$S($P($G(^DIC(49,ECS,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN")
"RTN","ECSUM1",24,0)
 Q
"RTN","ECSUM1",25,0)
SETC ;set cats
"RTN","ECSUM1",26,0)
 I ECC=0 S ECCN="None" Q
"RTN","ECSUM1",27,0)
 S ECCN=$S($P($G(^EC(726,+ECC,0)),"^")]"":$P(^(0),"^"),1:"ZZ #"_ECC_" MISSING DATA")
"RTN","ECSUM1",28,0)
 S ECCN=ECCN_$S($P($G(^EC(726,+ECC,0)),"^",3):" **Inactive**",1:"")
"RTN","ECSUM1",29,0)
 S ECMORE=1
"RTN","ECSUM1",30,0)
 Q
"RTN","ECSUM1",31,0)
HEADER ;
"RTN","ECSUM1",32,0)
 W:$E(IOST,1,2)="C-"!(ECPG>1) @IOF
"RTN","ECSUM1",33,0)
 W !!,?25,"CATEGORY AND PROCEDURE SUMMARY",?70,"Page: ",ECPG,!
"RTN","ECSUM1",34,0)
 W ?27,$S(ECSCN="I":"INACTIVE",ECSCN="A":"ACTIVE",1:" ALL")_" EVENT CODE"
"RTN","ECSUM1",35,0)
 W " SCREENS",!?25,"Run Date : ",ECRDT,!?25,"LOCATION:  "_ECLN
"RTN","ECSUM1",36,0)
 I $G(ECNOCNT) W ! S ECPG=ECPG+1
"RTN","ECSUM1",37,0)
 I '$G(ECNOCNT) W !,?25,"SERVICE:   ",ECSN,!?25,"DSS UNIT:  "_ECDN,! S ECPG=ECPG+1
"RTN","ECSUM1",38,0)
 F I=1:1:80 W "-"
"RTN","ECSUM1",39,0)
 Q
"RTN","ECSUM1",40,0)
CATS ;
"RTN","ECSUM1",41,0)
 S ECC="",ECCO=0
"RTN","ECSUM1",42,0)
 F  S ECC=$O(^ECJ("AP",ECL,ECD,ECC)) Q:ECC=""  D SETC,PROC Q:ECOUT
"RTN","ECSUM1",43,0)
 S ECMORE=0
"RTN","ECSUM1",44,0)
 Q
"RTN","ECSUM1",45,0)
PROC ;
"RTN","ECSUM1",46,0)
 S ECP=""
"RTN","ECSUM1",47,0)
 F  S ECP=$O(^ECJ("AP",ECL,ECD,ECC,ECP)) Q:ECP=""  D SETP Q:ECOUT
"RTN","ECSUM1",48,0)
 S ECMORE=0
"RTN","ECSUM1",49,0)
 Q
"RTN","ECSUM1",50,0)
SETP ;set procs
"RTN","ECSUM1",51,0)
 S ECPSY=+$O(^ECJ("AP",ECL,ECD,ECC,ECP,""))
"RTN","ECSUM1",52,0)
 S ECINDT=$P($G(^ECJ(ECPSY,0)),"^",2)
"RTN","ECSUM1",53,0)
 I ECSCN="A",ECINDT'="" Q
"RTN","ECSUM1",54,0)
 I ECSCN="I",ECINDT="" Q
"RTN","ECSUM1",55,0)
 I ECD'=ECDO D HEADER S ECDO=ECD
"RTN","ECSUM1",56,0)
 I ECC'=ECCO D  S ECCO=ECC I ECOUT Q
"RTN","ECSUM1",57,0)
 .W !!,?3,"Category:  "_ECCN D:$Y+4>IOSL PAGE,HEADER:ECPG,MORE:$D(ECCN)
"RTN","ECSUM1",58,0)
 S ECPSYN=$P($G(^ECJ(ECPSY,"PRO")),"^",2),EC4=+$P($G(^("PRO")),"^",4)
"RTN","ECSUM1",59,0)
 S EC2="" I EC4 S EC2=$S($P($G(^SC(EC4,0)),"^")]"":$P(^(0),"^"),1:"NO ASSOCIATED CLINIC")
"RTN","ECSUM1",60,0)
 S ECFILE=$P(ECP,";",2),ECFILE=$S($E(ECFILE)="I":81,$E(ECFILE)="E":725,1:"UNKNOWN")
"RTN","ECSUM1",61,0)
 I ECFILE="UNKNOWN" S ECPN="UNKNOWN",NATN="UNKNOWN"
"RTN","ECSUM1",62,0)
 I ECFILE=81 S ECPI=$$CPT^ICPTCOD(+ECP) D
"RTN","ECSUM1",63,0)
 .S ECPN=$S($P(ECPI,"^",3)]"":$P(ECPI,"^",3),1:"UNKNOWN"),NATN=$S($P(ECPI,"^",2)]"":$P(ECPI,"^",2),1:"NOT LISTED") K ECPI
"RTN","ECSUM1",64,0)
 I ECFILE=725 S ECPN=$S($P($G(^EC(725,+ECP,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN"),NATN=$S($P($G(^EC(725,+ECP,0)),"^",2)]"":$P(^(0),"^",2),1:"NOT LISTED")
"RTN","ECSUM1",65,0)
 S ECPN=$S(ECPSYN]"":ECPSYN,1:ECPN),ECNT=ECNT+1,UCNT=UCNT+1
"RTN","ECSUM1",66,0)
 W !,?3,"Procedure: ",$E(ECPN,1,30),"   (",$S(ECFILE=81:"CPT",1:"EC"),")",?52,"Nat'l No.: ",NATN
"RTN","ECSUM1",67,0)
 W:EC2]"" !,?14,"(Clinic: "_EC2_")"
"RTN","ECSUM1",68,0)
 I $P($G(^ECJ(+ECPSY,0)),"^",2),ECSCN="B" W ?70,"*INACTIVE*"
"RTN","ECSUM1",69,0)
 D:($Y+3)>IOSL PAGE,HEADER:ECPG,MORE:$D(ECCN) Q:ECOUT
"RTN","ECSUM1",70,0)
 Q
"RTN","ECSUM1",71,0)
PAGE ;
"RTN","ECSUM1",72,0)
 N SS,JJ
"RTN","ECSUM1",73,0)
 I $D(ECPG),$E(IOST,1,2)="C-" D
"RTN","ECSUM1",74,0)
 . S SS=22-$Y F JJ=1:1:SS W !
"RTN","ECSUM1",75,0)
 . S DIR(0)="E" W ! D ^DIR K DIR I 'Y S ECOUT=1
"RTN","ECSUM1",76,0)
 Q
"RTN","ECSUM1",77,0)
MORE I ECMORE W !!,?3,"Category:  "_ECCN
"RTN","ECSUM1",78,0)
 Q
"RTN","ECUMRPC1")
0^6^B73472186^B63731298
"RTN","ECUMRPC1",1,0)
ECUMRPC1 ;ALB/JAM-Event Capture Management Broker Utilities ; 7/21/09 2:05pm
"RTN","ECUMRPC1",2,0)
 ;;2.0; EVENT CAPTURE ;**25,30,33,72,94,95,105,100**;8 May 96;Build 21
"RTN","ECUMRPC1",3,0)
 ;
"RTN","ECUMRPC1",4,0)
DSSUNT(RESULTS,ECARY) ;
"RTN","ECUMRPC1",5,0)
 ;
"RTN","ECUMRPC1",6,0)
 ;This broker entry point returns DSS units from file 724
"RTN","ECUMRPC1",7,0)
 ;        RPC: EC GETDSSUNIT
"RTN","ECUMRPC1",8,0)
 ;INPUTS         ECARY -Contains the following subscripted elements
"RTN","ECUMRPC1",9,0)
 ;               P1 =   optional field to return DSS Units
"RTN","ECUMRPC1",10,0)
 ;                      STAT; 'A'ctive (default), 'I'nactive, 'B'oth
"RTN","ECUMRPC1",11,0)
 ;               P2 =   optional field to filter based on the DSS Name
"RTN","ECUMRPC1",12,0)
 ;               P3 =   optional field to return 1 DSS unit by IEN, if used
"RTN","ECUMRPC1",13,0)
 ;                      no other filters evaluated
"RTN","ECUMRPC1",14,0)
 ;               P4 =   optional field to filter based on the DSS Unit Number
"RTN","ECUMRPC1",15,0)
 ;               
"RTN","ECUMRPC1",16,0)
 ;               with the exception of P3, if data is passed into the other fields
"RTN","ECUMRPC1",17,0)
 ;               then all criteria must be met for data on a unit to be returned
"RTN","ECUMRPC1",18,0)
 ;
"RTN","ECUMRPC1",19,0)
 ;OUTPUTS        RESULTS - Array of DSS units. Data pieces as follows:-
"RTN","ECUMRPC1",20,0)
 ;               PIECE - Description
"RTN","ECUMRPC1",21,0)
 ;                 1     IEN of DSS Unit 
"RTN","ECUMRPC1",22,0)
 ;                 2     Name of DSS Unit
"RTN","ECUMRPC1",23,0)
 ;                 3     IEN of DSS Unit
"RTN","ECUMRPC1",24,0)
 ;                 4     Inactive flag
"RTN","ECUMRPC1",25,0)
 ;                 5     Send to PCE   
"RTN","ECUMRPC1",26,0)
 ;                 6     Unit Number
"RTN","ECUMRPC1",27,0)
 ;                 7     Service
"RTN","ECUMRPC1",28,0)
 ;                 8     Medical Specialty
"RTN","ECUMRPC1",29,0)
 ;                 9     Cost Center
"RTN","ECUMRPC1",30,0)
 ;                 10    Associated Stop code (if not sending to PCE)
"RTN","ECUMRPC1",31,0)
 ;                 11    Category flag
"RTN","ECUMRPC1",32,0)
 ;                 12    Default date entry
"RTN","ECUMRPC1",33,0)
 ;
"RTN","ECUMRPC1",34,0)
 N UNT,STAT,CNT,CAT,NODE,ECS,STR,SRV,MED,CST,UNO,INACT,ASC,PCE,ACT,NODE
"RTN","ECUMRPC1",35,0)
 N DFD,DIEN,DNM,DUNIT,GET1
"RTN","ECUMRPC1",36,0)
 D SETENV^ECUMRPC
"RTN","ECUMRPC1",37,0)
 K ^TMP($J,"ECDSSUNT")
"RTN","ECUMRPC1",38,0)
 S DNM=$P($G(ECARY),U,2),DIEN=$P($G(ECARY),U,3),DUNIT=$P($G(ECARY),U,4)
"RTN","ECUMRPC1",39,0)
 S:DNM'="" DNM=$$UP^XLFSTR(DNM)
"RTN","ECUMRPC1",40,0)
 S:DUNIT'="" DUNIT=$$UP^XLFSTR(DUNIT)
"RTN","ECUMRPC1",41,0)
 S STAT=$P($G(ECARY),U),(CNT,UNT,GET1)=0 S:STAT="" STAT="A"
"RTN","ECUMRPC1",42,0)
 ; if IEN passed in - use that, then quit, GET1 used as control to stop
"RTN","ECUMRPC1",43,0)
 I $G(DIEN) S UNT=DIEN-.001,GET1=1
"RTN","ECUMRPC1",44,0)
 F  S UNT=$O(^ECD(UNT)) Q:'UNT!((UNT>DIEN&(GET1)))  S NODE=$G(^ECD(UNT,0)) I NODE'="" D
"RTN","ECUMRPC1",45,0)
 . S ECS=$P(NODE,U,8),ACT=$P(NODE,U,6),ACT=$S(ACT:1,1:0)
"RTN","ECUMRPC1",46,0)
 . Q:('ECS)
"RTN","ECUMRPC1",47,0)
 . I '$G(DIEN),$S(STAT="A"&(ACT):1,STAT="I"&('ACT):1,1:0) Q
"RTN","ECUMRPC1",48,0)
 . ; execute new filters
"RTN","ECUMRPC1",49,0)
 . I DNM'="",$$UP^XLFSTR($P(NODE,U))'[DNM Q
"RTN","ECUMRPC1",50,0)
 . I DUNIT'="",$$UP^XLFSTR($P(NODE,U,5))'[DUNIT Q
"RTN","ECUMRPC1",51,0)
 . S CNT=CNT+1,CAT=$P(NODE,U,11),CAT=$S(CAT:"Y",1:"N"),UNO=$P(NODE,U,5)
"RTN","ECUMRPC1",52,0)
 . S SRV=$$GET1^DIQ(49,$P(NODE,U,2),.01,"I")
"RTN","ECUMRPC1",53,0)
 . S MED=$$GET1^DIQ(723,$P(NODE,U,3),.01,"I")
"RTN","ECUMRPC1",54,0)
 . S CST=$$GET1^DIQ(420.1,$P(NODE,U,4),.01,"I")
"RTN","ECUMRPC1",55,0)
 . S INACT=$P(NODE,U,6),INACT=$S(INACT:"I",1:"A"),ASC=$P(NODE,U,10)
"RTN","ECUMRPC1",56,0)
 . S:ASC ASC=$$GET1^DIQ(40.7,ASC,.01,"I")
"RTN","ECUMRPC1",57,0)
 . S DFD=$S($P(NODE,U,12)="N":"N",1:"X"),PCE=$P(NODE,U,14)
"RTN","ECUMRPC1",58,0)
 . S PCE=$S(PCE="A":PCE,PCE="O":PCE,1:"N")
"RTN","ECUMRPC1",59,0)
 . S STR=UNT_U_$P(NODE,U)_U_UNT_U_INACT_U_PCE_U_UNO_U_SRV_U_MED_U_CST
"RTN","ECUMRPC1",60,0)
 . S STR=STR_U_ASC_U_CAT_U_DFD,^TMP($J,"ECDSSUNT",CNT)=STR
"RTN","ECUMRPC1",61,0)
 S RESULTS=$NA(^TMP($J,"ECDSSUNT"))
"RTN","ECUMRPC1",62,0)
 Q
"RTN","ECUMRPC1",63,0)
CAT(RESULTS,ECARY) ;
"RTN","ECUMRPC1",64,0)
 ;
"RTN","ECUMRPC1",65,0)
 ;This broker entry point returns a list of categories from file 726
"RTN","ECUMRPC1",66,0)
 ;        RPC: EC GETCAT
"RTN","ECUMRPC1",67,0)
 ;INPUTS         ECARY - Contains the following subscripted elements
"RTN","ECUMRPC1",68,0)
 ;                STAT - Active or inactive category (optional)
"RTN","ECUMRPC1",69,0)
 ;                A-ctive (default), I-nactive, B-oth
"RTN","ECUMRPC1",70,0)
 ;
"RTN","ECUMRPC1",71,0)
 ;OUTPUTS        RESULTS - Array of category. Data pieces as follows:-
"RTN","ECUMRPC1",72,0)
 ;               PIECE - Description
"RTN","ECUMRPC1",73,0)
 ;                 1     IEN of Category
"RTN","ECUMRPC1",74,0)
 ;                 2     Name of Category
"RTN","ECUMRPC1",75,0)
 ;                 3     Creation Date
"RTN","ECUMRPC1",76,0)
 ;                 4     Inactive Date
"RTN","ECUMRPC1",77,0)
 ;
"RTN","ECUMRPC1",78,0)
 N STAT,CNT,CAT,NODE,ECDT,INDT,CRDT
"RTN","ECUMRPC1",79,0)
 D SETENV^ECUMRPC
"RTN","ECUMRPC1",80,0)
 K ^TMP($J,"ECCAT")
"RTN","ECUMRPC1",81,0)
 S STAT=$P($G(ECARY),U),(CNT,CAT)=0 S:STAT="" STAT="A"
"RTN","ECUMRPC1",82,0)
 F  S CAT=$O(^EC(726,CAT)) Q:'CAT  S NODE=$G(^EC(726,CAT,0)) I NODE'="" D
"RTN","ECUMRPC1",83,0)
 . S ECDT=$P(NODE,U,3)
"RTN","ECUMRPC1",84,0)
 . I STAT="A",ECDT'="",ECDT'>DT Q
"RTN","ECUMRPC1",85,0)
 . I STAT="I",ECDT="" Q
"RTN","ECUMRPC1",86,0)
 . S CRDT=$$FMTE^XLFDT($P(NODE,U,2),"2F")
"RTN","ECUMRPC1",87,0)
 . S INDT=$$FMTE^XLFDT($P(NODE,U,3),"2F")
"RTN","ECUMRPC1",88,0)
 . ;S CNT=CNT+1,^TMP($J,"ECCAT",CNT)=CAT_U_$P(NODE,U)_U_CRDT_U_INDT
"RTN","ECUMRPC1",89,0)
 . S CNT=CNT+1,^TMP($J,"ECCAT",CNT)=CAT_U_$P(NODE,U)_U_$P(CRDT,"@",1)_U_$P(INDT,"@",1)
"RTN","ECUMRPC1",90,0)
 S RESULTS=$NA(^TMP($J,"ECCAT"))
"RTN","ECUMRPC1",91,0)
 Q
"RTN","ECUMRPC1",92,0)
 ;
"RTN","ECUMRPC1",93,0)
CATCHK(RESULTS,ECARY) ;
"RTN","ECUMRPC1",94,0)
 ;
"RTN","ECUMRPC1",95,0)
 ;Broker call checks whether category is used in an Event Code Screen.
"RTN","ECUMRPC1",96,0)
 ;        RPC: EC DSSCATCHECK
"RTN","ECUMRPC1",97,0)
 ;INPUTS   ECARY  - Contains the following subscripted elements
"RTN","ECUMRPC1",98,0)
 ;          ECDA  - DSS Unit ien (file #724)
"RTN","ECUMRPC1",99,0)
 ;
"RTN","ECUMRPC1",100,0)
 ;OUTPUTS  RESULTS - Category used in Event Code Screen, 1-Yes or 0-No
"RTN","ECUMRPC1",101,0)
 ;
"RTN","ECUMRPC1",102,0)
 N ECDA,ECFLG,ECX
"RTN","ECUMRPC1",103,0)
 D SETENV^ECUMRPC
"RTN","ECUMRPC1",104,0)
 S ECDA=$P(ECARY,U) I ECDA="" Q
"RTN","ECUMRPC1",105,0)
 S (ECFLG,ECX)=0
"RTN","ECUMRPC1",106,0)
 F  S ECX=$O(^ECJ("AP",ECX)) Q:'ECX!(ECFLG)  D
"RTN","ECUMRPC1",107,0)
 . I $D(^ECJ("AP",ECX,ECDA)) S ECFLG=1
"RTN","ECUMRPC1",108,0)
 S RESULTS=ECFLG
"RTN","ECUMRPC1",109,0)
 Q
"RTN","ECUMRPC1",110,0)
PXCHK(RESULTS,ECARY) ;
"RTN","ECUMRPC1",111,0)
 ;
"RTN","ECUMRPC1",112,0)
 ;Checks whether procedure description or national number exist
"RTN","ECUMRPC1",113,0)
 ;INPUTS   ECARY  - Contains the following subscripted elements
"RTN","ECUMRPC1",114,0)
 ;          ECP - Procedure description
"RTN","ECUMRPC1",115,0)
 ;          ECN - EC National Number
"RTN","ECUMRPC1",116,0)
 ;
"RTN","ECUMRPC1",117,0)
 ;OUTPUTS  RESULTS - Px used^National # used, 1-Yes or 0-No ex. 1^0
"RTN","ECUMRPC1",118,0)
 ;
"RTN","ECUMRPC1",119,0)
 N ECX,ECP,ECN
"RTN","ECUMRPC1",120,0)
 Q:$G(ECARY)
"RTN","ECUMRPC1",121,0)
 D SETENV^ECUMRPC
"RTN","ECUMRPC1",122,0)
 S ECP=$P(ECARY,U),ECN=$P(ECARY,U,2),RESULTS="0^0"
"RTN","ECUMRPC1",123,0)
 I ECP'="",$D(^EC(725,"B",ECP)) S $P(RESULTS,U)=1
"RTN","ECUMRPC1",124,0)
 I ECN'="" F ECX="E","D","DL" D  I $P(RESULTS,U,2) Q
"RTN","ECUMRPC1",125,0)
 . I $D(^EC(725,ECX,ECN)) S $P(RESULTS,U,2)=1
"RTN","ECUMRPC1",126,0)
 Q
"RTN","ECUMRPC1",127,0)
SRCLST(RESULTS,ECARY) ;
"RTN","ECUMRPC1",128,0)
 ;
"RTN","ECUMRPC1",129,0)
 ;This broker entry returns an array of codes from a file based on a 
"RTN","ECUMRPC1",130,0)
 ;search string.
"RTN","ECUMRPC1",131,0)
 ;        RPC: EC GETLIST
"RTN","ECUMRPC1",132,0)
 ;
"RTN","ECUMRPC1",133,0)
 ;INPUTS   ECARY   - Contains the following subscripted elements
"RTN","ECUMRPC1",134,0)
 ;           ECSTR  - Search string
"RTN","ECUMRPC1",135,0)
 ;           ECFIL  - File to search
"RTN","ECUMRPC1",136,0)
 ;           ECDIR  - Search order
"RTN","ECUMRPC1",137,0)
 ;           ECNUM  - (Optional) # records to return [default=44]
"RTN","ECUMRPC1",138,0)
 ;OUTPUTS     RESULTS - Array of values based on the search criteria.
"RTN","ECUMRPC1",139,0)
 ;
"RTN","ECUMRPC1",140,0)
 N ECNT,DIC,ECSTR,ECFIL,ECORD,ECER,ECDI,ECNUM,ECDIR
"RTN","ECUMRPC1",141,0)
 D SETENV^ECUMRPC
"RTN","ECUMRPC1",142,0)
 S ECNT=0,ECFIL=$P(ECARY,U),ECSTR=$P(ECARY,U,2),ECDIR=$P(ECARY,U,3)
"RTN","ECUMRPC1",143,0)
 S ECORD=$S(ECDIR=-1:"B",1:"I")
"RTN","ECUMRPC1",144,0)
 K ^TMP($J,"ECFIND"),^TMP("ECSRCH",$J)
"RTN","ECUMRPC1",145,0)
 I ECFIL="" Q
"RTN","ECUMRPC1",146,0)
 S ECNUM=$S(+$P(ECARY,U,4)>0:$P(ECARY,U,4),1:44)
"RTN","ECUMRPC1",147,0)
 I ECFIL=420.1 D CSTCTR            ;Cost Center search
"RTN","ECUMRPC1",148,0)
 I ECFIL=49 D SERVC                ;Service search
"RTN","ECUMRPC1",149,0)
 I ECFIL=723 D MEDSPC              ;Medical specialty
"RTN","ECUMRPC1",150,0)
 I ECFIL=40.7 D STPCDE G EXIT      ;Associated stop code
"RTN","ECUMRPC1",151,0)
 I ECFIL=724 D DUNT G EXIT         ;DSS Unit
"RTN","ECUMRPC1",152,0)
 I ECFIL=726 D ECAT                ;Category
"RTN","ECUMRPC1",153,0)
 I ECFIL=4 D LOC                   ;Location
"RTN","ECUMRPC1",154,0)
 I ECFIL=44 D ASCLN G EXIT         ;Associated clinic
"RTN","ECUMRPC1",155,0)
 I ECFIL=757.01 D LEX^ECUMRPC2 G EXIT  ;Lex ICD code
"RTN","ECUMRPC1",156,0)
 I ECFIL=200 D PROV^ECUMRPC2(ECNUM)      ;Providers
"RTN","ECUMRPC1",157,0)
 I $D(ECER) S ^TMP($J,"ECFIND",1)="0^Error occurred during search" G EXIT
"RTN","ECUMRPC1",158,0)
 D SORT
"RTN","ECUMRPC1",159,0)
EXIT K ^TMP("ECSRCH",$J)
"RTN","ECUMRPC1",160,0)
 S RESULTS=$NA(^TMP($J,"ECFIND"))
"RTN","ECUMRPC1",161,0)
 Q
"RTN","ECUMRPC1",162,0)
ASCLN ;Search for active associated clinics (file #44)
"RTN","ECUMRPC1",163,0)
 N CLN,CNT,NOD,ECDT,INACT,REACT,ERR
"RTN","ECUMRPC1",164,0)
 S CNT=0,ECDT=DT
"RTN","ECUMRPC1",165,0)
 I (ECDIR'=1)&(ECDIR'=-1) S ECDIR=1
"RTN","ECUMRPC1",166,0)
 F  Q:CNT=ECNUM  S ECSTR=$O(^SC("B",ECSTR),ECDIR) Q:ECSTR=""  S CLN="" D
"RTN","ECUMRPC1",167,0)
 .F  S CLN=$O(^SC("B",ECSTR,CLN),ECDIR) Q:CLN=""  S NOD=$G(^SC(CLN,0)) D
"RTN","ECUMRPC1",168,0)
 ..Q:NOD=""  Q:$P(NOD,U,3)'="C"  ;Q:+$G(^SC(CLN,"OOS"))
"RTN","ECUMRPC1",169,0)
 ..S ERR=0 I $D(^SC(CLN,"I")) D  I ERR Q
"RTN","ECUMRPC1",170,0)
 ...S INACT=$P(^SC(CLN,"I"),U),REACT=$P(^SC(CLN,"I"),U,2)
"RTN","ECUMRPC1",171,0)
 ...I INACT D  I ERR Q
"RTN","ECUMRPC1",172,0)
 ....I REACT="" S:ECDT'<INACT ERR=1 Q
"RTN","ECUMRPC1",173,0)
 ....I ECDT'<INACT,ECDT<REACT S ERR=1 Q
"RTN","ECUMRPC1",174,0)
 ...I REACT,ECDT<REACT S ERR=1
"RTN","ECUMRPC1",175,0)
 ..S CNT=CNT+1,^TMP($J,"ECFIND",CNT)=CLN_U_$P(NOD,U)
"RTN","ECUMRPC1",176,0)
 Q
"RTN","ECUMRPC1",177,0)
CSTCTR ;Search for cost centers (File #420.1)
"RTN","ECUMRPC1",178,0)
 N ECNULL,INDX,STR,NSTR,I
"RTN","ECUMRPC1",179,0)
 S $P(ECNULL," ",7)=" ",INDX="B"
"RTN","ECUMRPC1",180,0)
 I $E(ECSTR)?.N,$L(ECSTR)<7 S ECSTR=ECSTR_$E(ECNULL,1,7-$L(ECSTR))
"RTN","ECUMRPC1",181,0)
 I $L($P(ECSTR," "))=6,$P(ECSTR," ",2)?.A D   ;truncate for x-ref
"RTN","ECUMRPC1",182,0)
 . S ECSTR=$P(ECSTR," ")_" "_$E($P(ECSTR," ",2,999),1,22)
"RTN","ECUMRPC1",183,0)
 I $E(ECSTR)?.A S INDX="C",(STR,NSTR)="" D  S ECSTR=NSTR
"RTN","ECUMRPC1",184,0)
 .F I=1:1 S STR=$P(ECSTR," ",I) Q:STR=""  D
"RTN","ECUMRPC1",185,0)
 ..S STR=$E(STR)_$TR($E(STR,2,9999),"ABCDEFGHIJKLMNOPQRSTUVWXYZ","abcdefghijklmnopqrstuvwxyz")
"RTN","ECUMRPC1",186,0)
 ..S NSTR=NSTR_STR
"RTN","ECUMRPC1",187,0)
 D LISTDIC(ECFIL,"",.01,ECORD,ECNUM,ECSTR,"",INDX,"I '$P(^(0),U,2)","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",188,0)
 Q
"RTN","ECUMRPC1",189,0)
SERVC ;Search for services (File #49)
"RTN","ECUMRPC1",190,0)
 D LISTDIC(ECFIL,"",.01,ECORD,ECNUM,ECSTR,"","","","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",191,0)
 Q
"RTN","ECUMRPC1",192,0)
MEDSPC ;Search for medical specialty (File #723)
"RTN","ECUMRPC1",193,0)
 D LISTDIC(ECFIL,"",.01,ECORD,ECNUM,ECSTR,"","","","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",194,0)
 Q
"RTN","ECUMRPC1",195,0)
STPCDE ;Search for associated stop code (File #40.7)
"RTN","ECUMRPC1",196,0)
 N ECNT,INDX,ECNUL,STR,IEN
"RTN","ECUMRPC1",197,0)
 S $P(ECNUL,"  ",30)=" ",INDX="B",ECNT=0,ECSTR=$P(ECSTR,"~")
"RTN","ECUMRPC1",198,0)
 I +ECSTR,+ECSTR?.N S INDX="C",IEN=0 D  Q
"RTN","ECUMRPC1",199,0)
 .S ECSTR=$O(^DIC(40.7,INDX,+ECSTR)) I ECSTR="" Q
"RTN","ECUMRPC1",200,0)
 .F  S IEN=$O(^DIC(40.7,INDX,ECSTR,IEN)) Q:'IEN  D  I ECNT>(ECNUM-1) Q
"RTN","ECUMRPC1",201,0)
 ..;07/27/09 llh added checks on piece 6
"RTN","ECUMRPC1",202,0)
 ..S STR=$G(^DIC(40.7,IEN,0)) I (STR="")!($P(STR,U,3)'="")!($P(STR,U,6)="S")!($P(STR,U,6)="") Q
"RTN","ECUMRPC1",203,0)
 ..S STR=$E($P(STR,U),1,30)_"  ["_$J($P(STR,U,2),3,0)_"]"_U_$P(STR,U,2)_U_IEN
"RTN","ECUMRPC1",204,0)
 ..S ECNT=ECNT+1,^TMP($J,"ECFIND",ECNT)=STR
"RTN","ECUMRPC1",205,0)
 D LISTDIC(ECFIL,"",".01;1",ECORD,ECNUM,ECSTR,"",INDX,"I $P(^(0),""^"",3)=""""!($P(^(0),U,3)'<DT)&($P(^(0),U,6)'=""S"")","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",206,0)
 S ECNT=0
"RTN","ECUMRPC1",207,0)
 F  S ECNT=$O(^TMP("ECSRCH",$J,"DILIST","ID",ECNT)) Q:'ECNT  D
"RTN","ECUMRPC1",208,0)
 .S STR=$G(^TMP("ECSRCH",$J,"DILIST","ID",ECNT,.01))_U_$G(^(1))
"RTN","ECUMRPC1",209,0)
 .S STR=$E($P(STR,U),1,30)_"  ["_$J($P(STR,U,2),3,0)_"]"_U_$P(STR,U,2)
"RTN","ECUMRPC1",210,0)
 .S ^TMP($J,"ECFIND",ECNT)=STR_U_^TMP("ECSRCH",$J,"DILIST",2,ECNT)
"RTN","ECUMRPC1",211,0)
 Q
"RTN","ECUMRPC1",212,0)
DUNT ;Search for DSS unit (File #724)
"RTN","ECUMRPC1",213,0)
 N ECNT,SNDPCE
"RTN","ECUMRPC1",214,0)
 D LISTDIC(ECFIL,"",".01;10;13",ECORD,ECNUM,ECSTR,"","","I '$P(^(0),""^"",6),$P(^(0),U,8)","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",215,0)
 S ECNT=0
"RTN","ECUMRPC1",216,0)
 F  S ECNT=$O(^TMP("ECSRCH",$J,"DILIST","ID",ECNT)) Q:'ECNT  D
"RTN","ECUMRPC1",217,0)
 .S SNDPCE=$G(^TMP("ECSRCH",$J,"DILIST","ID",ECNT,13))
"RTN","ECUMRPC1",218,0)
 .S SNDPCE=$S(SNDPCE="O":1,SNDPCE="A":1,1:0)
"RTN","ECUMRPC1",219,0)
 .S ^TMP($J,"ECFIND",ECNT)=$G(^TMP("ECSRCH",$J,"DILIST","ID",ECNT,.01))_U_^TMP("ECSRCH",$J,"DILIST",2,ECNT)_U_$G(^TMP("ECSRCH",$J,"DILIST","ID",ECNT,10))_U_SNDPCE
"RTN","ECUMRPC1",220,0)
 Q
"RTN","ECUMRPC1",221,0)
ECAT ;Search for Category (File #726)
"RTN","ECUMRPC1",222,0)
 D LISTDIC(ECFIL,"",.01,ECORD,ECNUM,ECSTR,"","","I $P(^(0),""^"",3)=""""!($P(^(0),U,3)>DT)","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",223,0)
 Q
"RTN","ECUMRPC1",224,0)
LOC ;Search for Location (File #4)
"RTN","ECUMRPC1",225,0)
 D LISTDIC(ECFIL,"",.01,ECORD,ECNUM,ECSTR,"","","I $G(^(""EC""))","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",226,0)
 Q
"RTN","ECUMRPC1",227,0)
LISTDIC(ECFL,ECIEN,ECFLD,ECFLG,ECNUM,ECFRM,ECPRT,ECINDX,ECSCN,ECIND,ECTG,ECER) ;
"RTN","ECUMRPC1",228,0)
 ;Produces a list of records in a file base on search string
"RTN","ECUMRPC1",229,0)
 N DIC
"RTN","ECUMRPC1",230,0)
 D LIST^DIC(ECFL,ECIEN,ECFLD,ECFLG,ECNUM,ECFRM,ECPRT,ECINDX,ECSCN,ECIND,ECTG,ECER)
"RTN","ECUMRPC1",231,0)
 K ECFL,ECIEN,ECFLD,ECFLG,ECNUM,ECFRM,ECPRT,ECINDX,ECSCN,ECID
"RTN","ECUMRPC1",232,0)
 Q
"RTN","ECUMRPC1",233,0)
SORT ;Extracts data to be returned to broker
"RTN","ECUMRPC1",234,0)
 N ECNT,STR
"RTN","ECUMRPC1",235,0)
 S ECNT=0
"RTN","ECUMRPC1",236,0)
 F  S ECNT=$O(^TMP("ECSRCH",$J,"DILIST","ID",ECNT)) Q:'ECNT  D
"RTN","ECUMRPC1",237,0)
 .S ^TMP($J,"ECFIND",ECNT)=$G(^TMP("ECSRCH",$J,"DILIST","ID",ECNT,.01))_U_^TMP("ECSRCH",$J,"DILIST",2,ECNT)
"RTN","ECUMRPC1",238,0)
 Q
"VER")
8.0^22.0
"BLD",7711,6)
^98
**END**
**END**

Released EC*2*107 SEQ #100
Extracted from mail message
**KIDS**:EC*2.0*107^

**INSTALL NAME**
EC*2.0*107
"BLD",8034,0)
EC*2.0*107^EVENT CAPTURE^0^3100525^y
"BLD",8034,1,0)
^^1^1^3100413^^
"BLD",8034,1,1,0)
This patch contains modifications for the Recent Visit functionality.
"BLD",8034,4,0)
^9.64PA^^0
"BLD",8034,6.3)
14
"BLD",8034,"ABPKG")
n
"BLD",8034,"KRN",0)
^9.67PA^779.2^20
"BLD",8034,"KRN",.4,0)
.4
"BLD",8034,"KRN",.401,0)
.401
"BLD",8034,"KRN",.402,0)
.402
"BLD",8034,"KRN",.403,0)
.403
"BLD",8034,"KRN",.5,0)
.5
"BLD",8034,"KRN",.84,0)
.84
"BLD",8034,"KRN",3.6,0)
3.6
"BLD",8034,"KRN",3.8,0)
3.8
"BLD",8034,"KRN",9.2,0)
9.2
"BLD",8034,"KRN",9.2,"NM",0)
^9.68A^1^1
"BLD",8034,"KRN",9.2,"NM",1,0)
ECSTPCD^^0
"BLD",8034,"KRN",9.2,"NM","B","ECSTPCD",1)

"BLD",8034,"KRN",9.8,0)
9.8
"BLD",8034,"KRN",9.8,"NM",0)
^9.68A^8^8
"BLD",8034,"KRN",9.8,"NM",1,0)
ECUNTRPT^^0^B6471767
"BLD",8034,"KRN",9.8,"NM",2,0)
ECUMRPC1^^0^B78546073
"BLD",8034,"KRN",9.8,"NM",3,0)
ECOB^^0^B22194703
"BLD",8034,"KRN",9.8,"NM",4,0)
ECOBVST^^0^B21156397
"BLD",8034,"KRN",9.8,"NM",5,0)
ECOBUF^^0^B6397998
"BLD",8034,"KRN",9.8,"NM",6,0)
ECUTL1^^0^B55734083
"BLD",8034,"KRN",9.8,"NM",7,0)
ECRRPC^^0^B16341040
"BLD",8034,"KRN",9.8,"NM",8,0)
ECRRPT1^^0^B59190035
"BLD",8034,"KRN",9.8,"NM","B","ECOB",3)

"BLD",8034,"KRN",9.8,"NM","B","ECOBUF",5)

"BLD",8034,"KRN",9.8,"NM","B","ECOBVST",4)

"BLD",8034,"KRN",9.8,"NM","B","ECRRPC",7)

"BLD",8034,"KRN",9.8,"NM","B","ECRRPT1",8)

"BLD",8034,"KRN",9.8,"NM","B","ECUMRPC1",2)

"BLD",8034,"KRN",9.8,"NM","B","ECUNTRPT",1)

"BLD",8034,"KRN",9.8,"NM","B","ECUTL1",6)

"BLD",8034,"KRN",19,0)
19
"BLD",8034,"KRN",19,"NM",0)
^9.68A^2^2
"BLD",8034,"KRN",19,"NM",1,0)
EC DSS UNIT SECONDARY ASSOC^^0
"BLD",8034,"KRN",19,"NM",2,0)
EC GUI CONTEXT^^0
"BLD",8034,"KRN",19,"NM","B","EC DSS UNIT SECONDARY ASSOC",1)

"BLD",8034,"KRN",19,"NM","B","EC GUI CONTEXT",2)

"BLD",8034,"KRN",19.1,0)
19.1
"BLD",8034,"KRN",101,0)
101
"BLD",8034,"KRN",409.61,0)
409.61
"BLD",8034,"KRN",771,0)
771
"BLD",8034,"KRN",779.2,0)
779.2
"BLD",8034,"KRN",870,0)
870
"BLD",8034,"KRN",8989.51,0)
8989.51
"BLD",8034,"KRN",8989.52,0)
8989.52
"BLD",8034,"KRN",8994,0)
8994
"BLD",8034,"KRN",8994,"NM",0)
^9.68A^1^1
"BLD",8034,"KRN",8994,"NM",1,0)
EC RECENT VISITS^^0
"BLD",8034,"KRN",8994,"NM","B","EC RECENT VISITS",1)

"BLD",8034,"KRN","B",.4,.4)

"BLD",8034,"KRN","B",.401,.401)

"BLD",8034,"KRN","B",.402,.402)

"BLD",8034,"KRN","B",.403,.403)

"BLD",8034,"KRN","B",.5,.5)

"BLD",8034,"KRN","B",.84,.84)

"BLD",8034,"KRN","B",3.6,3.6)

"BLD",8034,"KRN","B",3.8,3.8)

"BLD",8034,"KRN","B",9.2,9.2)

"BLD",8034,"KRN","B",9.8,9.8)

"BLD",8034,"KRN","B",19,19)

"BLD",8034,"KRN","B",19.1,19.1)

"BLD",8034,"KRN","B",101,101)

"BLD",8034,"KRN","B",409.61,409.61)

"BLD",8034,"KRN","B",771,771)

"BLD",8034,"KRN","B",779.2,779.2)

"BLD",8034,"KRN","B",870,870)

"BLD",8034,"KRN","B",8989.51,8989.51)

"BLD",8034,"KRN","B",8989.52,8989.52)

"BLD",8034,"KRN","B",8994,8994)

"BLD",8034,"QUES",0)
^9.62^^
"BLD",8034,"REQB",0)
^9.611^1^1
"BLD",8034,"REQB",1,0)
EC*2.0*100^1
"BLD",8034,"REQB","B","EC*2.0*100",1)

"KRN",9.2,1553,-1)
0^1
"KRN",9.2,1553,0)
ECSTPCD^DSS Units with any Associated Stop Code Errors^3100413.10504^
"KRN",9.2,1553,1,0)
^9.21^9^9^3100413^^
"KRN",9.2,1553,1,1,0)
This report provides a list of DSS Units with any error with the 
"KRN",9.2,1553,1,2,0)
associated Stop Code.
"KRN",9.2,1553,1,3,0)
 
"KRN",9.2,1553,1,4,0)
The report displays:
"KRN",9.2,1553,1,5,0)
  DSS Unit Ien
"KRN",9.2,1553,1,6,0)
  DSS Unit Name
"KRN",9.2,1553,1,7,0)
  Associated Stop Code Ien
"KRN",9.2,1553,1,8,0)
  Associated Stop Code Name
"KRN",9.2,1553,1,9,0)
  Error
"KRN",9.2,1553,10.2)
W @IOF
"KRN",19,11187,-1)
0^2
"KRN",19,11187,0)
EC GUI CONTEXT^EC GUI Context version 2.1.3.3^^B^^^^^^^^EVENT CAPTURE
"KRN",19,11187,1,0)
^19.06^1^1^3100429^^^^
"KRN",19,11187,1,1,0)
This is the Broker Client/Server type option for the Event Capture GUI option
"KRN",19,11187,99)
58583,58456
"KRN",19,11187,99.1)
58981,55862
"KRN",19,11187,"RPC",0)
^19.05P^56^56
"KRN",19,11187,"RPC",1,0)
EC DSSCATCHECK
"KRN",19,11187,"RPC",2,0)
EC FILER
"KRN",19,11187,"RPC",3,0)
EC GETBATPROCS
"KRN",19,11187,"RPC",4,0)
EC GETCAT
"KRN",19,11187,"RPC",5,0)
EC GETCPTLST
"KRN",19,11187,"RPC",6,0)
EC GETDSSECS
"KRN",19,11187,"RPC",7,0)
EC GETDSSUNIT
"KRN",19,11187,"RPC",8,0)
EC GETDSSUNITUSRS
"KRN",19,11187,"RPC",9,0)
EC GETECLOC
"KRN",19,11187,"RPC",10,0)
EC GETECSCATS
"KRN",19,11187,"RPC",11,0)
EC GETECSCREEN
"KRN",19,11187,"RPC",12,0)
EC GETECSDETAIL
"KRN",19,11187,"RPC",13,0)
EC GETECSPROCS
"KRN",19,11187,"RPC",14,0)
EC GETENCDXS
"KRN",19,11187,"RPC",15,0)
EC GETIEN
"KRN",19,11187,"RPC",16,0)
EC GETLIST
"KRN",19,11187,"RPC",17,0)
EC GETLOC
"KRN",19,11187,"RPC",18,0)
EC GETNATPX
"KRN",19,11187,"RPC",19,0)
EC GETPATCLASTAT
"KRN",19,11187,"RPC",20,0)
EC GETPATELIG
"KRN",19,11187,"RPC",21,0)
EC GETPATINFO
"KRN",19,11187,"RPC",22,0)
EC GETPATPROCS
"KRN",19,11187,"RPC",23,0)
EC GETPRODEFS
"KRN",19,11187,"RPC",24,0)
EC GETPROVIDER
"KRN",19,11187,"RPC",25,0)
EC GETPXLST
"KRN",19,11187,"RPC",26,0)
EC GETPXMODIFIER
"KRN",19,11187,"RPC",27,0)
EC GETPXREASON
"KRN",19,11187,"RPC",28,0)
EC GETSCNHELP
"KRN",19,11187,"RPC",29,0)
EC GETUSRDSSUNIT
"KRN",19,11187,"RPC",30,0)
EC REPORTS
"KRN",19,11187,"RPC",31,0)
EC VALIDATE SPREADSHEET DATA
"KRN",19,11187,"RPC",32,0)
ORWU USERINFO
"KRN",19,11187,"RPC",33,0)
ORWU HASKEY
"KRN",19,11187,"RPC",34,0)
ORWU DEVICE
"KRN",19,11187,"RPC",35,0)
SC PATIENT LOOKUP
"KRN",19,11187,"RPC",36,0)
ORWU NEWPERS
"KRN",19,11187,"RPC",37,0)
DDR GET DD HELP
"KRN",19,11187,"RPC",38,0)
DDR FINDER
"KRN",19,11187,"RPC",39,0)
DDR FIND1
"KRN",19,11187,"RPC",40,0)
DDR LISTER
"KRN",19,11187,"RPC",41,0)
EC GETDATE
"KRN",19,11187,"RPC",42,0)
EC CLASHELP
"KRN",19,11187,"RPC",43,0)
DDR GETS ENTRY DATA
"KRN",19,11187,"RPC",44,0)
DG CHK BS5 XREF Y/N
"KRN",19,11187,"RPC",45,0)
DG SENSITIVE RECORD ACCESS
"KRN",19,11187,"RPC",46,0)
DG SENSITIVE RECORD BULLETIN
"KRN",19,11187,"RPC",47,0)
DG CHK PAT/DIV MEANS TEST
"KRN",19,11187,"RPC",48,0)
EC SPACEBAR
"KRN",19,11187,"RPC",49,0)
EC DIEDON
"KRN",19,11187,"RPC",50,0)
EC GETPATCH
"KRN",19,11187,"RPC",51,0)
EC GETVISITINFO
"KRN",19,11187,"RPC",52,0)
EC GETVERSION
"KRN",19,11187,"RPC",53,0)
ORWU DT
"KRN",19,11187,"RPC",54,0)
ECOB METHOD
"KRN",19,11187,"RPC",55,0)
ECOB FACTORY
"KRN",19,11187,"RPC",56,0)
EC RECENT VISITS
"KRN",19,11187,"U")
EC GUI CONTEXT VERSION 2.1.3.3
"KRN",19,13324,-1)
0^1
"KRN",19,13324,0)
EC DSS UNIT SECONDARY ASSOC^DSS Unit List with Secondary Associated Stop Codes^^A^^^^^^^^EVENT CAPTURE^^1^^^^^
"KRN",19,13324,1,0)
^19.06^2^2^3091203^^^^
"KRN",19,13324,1,1,0)
Option will provide a list of DSS Units with Secondary Associated Stop 
"KRN",19,13324,1,2,0)
Codes assigned. Please update any items to ensure your file's integrity.
"KRN",19,13324,20)
D START^ECUNTRPT
"KRN",19,13324,99)
61698,33843
"KRN",19,13324,"U")
DSS UNIT LIST WITH SECONDARY A
"KRN",8994,2291,-1)
0^1
"KRN",8994,2291,0)
EC RECENT VISITS^RCNTVST^ECUTL1^2
"KRN",8994,2291,2,0)
^8994.02A^1^1
"KRN",8994,2291,2,1,0)
DFN^1
"KRN",8994,2291,2,1,1,0)
^^1^1^3100405^
"KRN",8994,2291,2,1,1,1,0)
Patient DFN
"KRN",8994,2291,2,"B","DFN",1)

"KRN",8994,2291,3,0)
^^3^3^3100405^
"KRN",8994,2291,3,1,0)
Return parameter is an array containing:
"KRN",8994,2291,3,2,0)
  Piece 1 - Date of visit, internal fileman date
"KRN",8994,2291,3,3,0)
  Piece 2 - Date of Visit  Clinic Name (location)
"MBREQ")
0
"ORD",1,9.2)
9.2;1;;;HELP^XPDTA1;HLPF1^XPDIA1;HLPE1^XPDIA1;HLPF2^XPDIA1;;HLPDEL^XPDIA1
"ORD",1,9.2,0)
HELP FRAME
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",486,-1)
1^1
"PKG",486,0)
EVENT CAPTURE^EC^Event Capture Workload Capture System^
"PKG",486,20,0)
^9.402P^^
"PKG",486,22,0)
^9.49I^1^1
"PKG",486,22,1,0)
2.0^2960508^2981027^66481
"PKG",486,22,1,"PAH",1,0)
107^3100525
"PKG",486,22,1,"PAH",1,1,0)
^^1^1^3100525
"PKG",486,22,1,"PAH",1,1,1,0)
This patch contains modifications for the Recent Visit functionality.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
8
"RTN","ECOB")
0^3^B22194703^B19937351
"RTN","ECOB",1,0)
ECOB ;BP/CMF - base object 
"RTN","ECOB",2,0)
 ;;2.0;EVENT CAPTURE;**100,107**;8 May 96;Build 14
"RTN","ECOB",3,0)
 ;@author  - Chris Flegel
"RTN","ECOB",4,0)
 ;@date    - 17 May 2009
"RTN","ECOB",5,0)
 ;@version - 1.0
"RTN","ECOB",6,0)
 ;;
"RTN","ECOB",7,0)
 Q
"RTN","ECOB",8,0)
 ;; private methods
"RTN","ECOB",9,0)
COUNT(NAME) ; increment counter
"RTN","ECOB",10,0)
 N COUNT
"RTN","ECOB",11,0)
 S COUNT=+$O(@NAME@(9999999),-1)+1
"RTN","ECOB",12,0)
 S @NAME@(COUNT,0)=$G(DT)+1
"RTN","ECOB",13,0)
 Q COUNT
"RTN","ECOB",14,0)
 ;;
"RTN","ECOB",15,0)
PARSE(METHOD,VALUE)  ;
"RTN","ECOB",16,0)
 I METHOD="Argument" D  Q
"RTN","ECOB",17,0)
 .S HANDLE=$P(VALUE,".")
"RTN","ECOB",18,0)
 .Q
"RTN","ECOB",19,0)
 I METHOD="Child" D  Q
"RTN","ECOB",20,0)
 .S CHILD=$P(VALUE,"Handle.",2)
"RTN","ECOB",21,0)
 .Q
"RTN","ECOB",22,0)
 I METHOD="Handle" D  Q
"RTN","ECOB",23,0)
 .S NAME=$P(VALUE,".",1)
"RTN","ECOB",24,0)
 .S COUNT=$P(VALUE,".",2)
"RTN","ECOB",25,0)
 .Q
"RTN","ECOB",26,0)
 I METHOD="Tag" D  Q
"RTN","ECOB",27,0)
 .S TAG("routine")=$P(VALUE,"(")
"RTN","ECOB",28,0)
 .S TAG("parameters")=$P(VALUE,TAG("routine"),2)
"RTN","ECOB",29,0)
 .Q
"RTN","ECOB",30,0)
 ;;
"RTN","ECOB",31,0)
 ;; protected methods
"RTN","ECOB",32,0)
CREATE(NAME) ; return unique handle
"RTN","ECOB",33,0)
 N HANDLE
"RTN","ECOB",34,0)
 S NAME=$TR(NAME,".","") ;reserve period for piecers
"RTN","ECOB",35,0)
 S HANDLE=$TR(NAME,")","")_","_$$COUNT(NAME)_")"
"RTN","ECOB",36,0)
 D PROPERTY(HANDLE,"Pu","_class","EC BASE")
"RTN","ECOB",37,0)
 D PROPERTY(HANDLE,"Pu","_routine","METHOD^DGOB(.RESULT,ARGUMENT)")
"RTN","ECOB",38,0)
 D PROPERTY(HANDLE,"Pu","_name","Basic Pharmacy Object")
"RTN","ECOB",39,0)
 D PROPERTY(HANDLE,"Pu","_namespace",NAME)
"RTN","ECOB",40,0)
 D PROPERTY(HANDLE,"Pr","_parent","")
"RTN","ECOB",41,0)
 Q HANDLE
"RTN","ECOB",42,0)
 ;;
"RTN","ECOB",43,0)
COLLECT(HANDLE,CHILD,SCOPE,PROPERTY) ; attach or collect child objects
"RTN","ECOB",44,0)
 S SCOPE=$S($G(SCOPE)'="":SCOPE,1:"Pu")
"RTN","ECOB",45,0)
 S PROPERTY=$S($G(PROPERTY)'="":PROPERTY,1:"-1")
"RTN","ECOB",46,0)
 S @HANDLE@(SCOPE,PROPERTY)=CHILD
"RTN","ECOB",47,0)
 S @HANDLE@("Pr","Handle",CHILD)=PROPERTY
"RTN","ECOB",48,0)
 Q 1
"RTN","ECOB",49,0)
 ;;
"RTN","ECOB",50,0)
DESTROY(HANDLE) ; cleanup
"RTN","ECOB",51,0)
 N CHILD
"RTN","ECOB",52,0)
 S CHILD=0
"RTN","ECOB",53,0)
 F  S CHILD=$O(@HANDLE@("Pr","Handle",CHILD)) Q:'CHILD  D
"RTN","ECOB",54,0)
 .K @CHILD
"RTN","ECOB",55,0)
 .Q
"RTN","ECOB",56,0)
 K @HANDLE
"RTN","ECOB",57,0)
 Q 1
"RTN","ECOB",58,0)
 ;;
"RTN","ECOB",59,0)
FUNCTION(HANDLE,ARGUMENT)  ;
"RTN","ECOB",60,0)
 N RESULT
"RTN","ECOB",61,0)
 D METHOD(.RESULT,HANDLE_"."_ARGUMENT)
"RTN","ECOB",62,0)
 Q RESULT
"RTN","ECOB",63,0)
 ;;
"RTN","ECOB",64,0)
GET(RESULT,HANDLE,SCOPE,PROPERTY) ; get simple property
"RTN","ECOB",65,0)
 I $G(HANDLE)="" S RESULT="-1^Handle does not exist."
"RTN","ECOB",66,0)
 I '$D(@HANDLE) S RESULT="-1^No data at handle: "_HANDLE_"."
"RTN","ECOB",67,0)
 S SCOPE=$S($G(SCOPE)'="":SCOPE,1:"Pu")
"RTN","ECOB",68,0)
 S PROPERTY=$S($G(PROPERTY)'="":PROPERTY,1:"-1")
"RTN","ECOB",69,0)
 S RESULT=$G(@HANDLE@(SCOPE,PROPERTY))
"RTN","ECOB",70,0)
 S:$D(RESULT)=0 RESULT="-1^Property "_PROPERTY_" does not exist."
"RTN","ECOB",71,0)
 Q
"RTN","ECOB",72,0)
 ;;
"RTN","ECOB",73,0)
ISHANDLE(HANDLE,CHILD)  ;
"RTN","ECOB",74,0)
 S HANDLE=$S($G(HANDLE)'="":HANDLE,1:-1)
"RTN","ECOB",75,0)
 S CHILD=$S($G(CHILD)'="":CHILD,1:-1)
"RTN","ECOB",76,0)
 Q $D(@HANDLE@("Pr","Handle",CHILD))
"RTN","ECOB",77,0)
 ;;
"RTN","ECOB",78,0)
METHOD(RESULT,ARGUMENT) ; most basic handler
"RTN","ECOB",79,0)
 N HANDLE,TAG
"RTN","ECOB",80,0)
 S RESULT=-1
"RTN","ECOB",81,0)
 D PARSE("Argument",ARGUMENT)
"RTN","ECOB",82,0)
 D GET(.TAG,HANDLE,"Pu","_routine")
"RTN","ECOB",83,0)
 D PARSE("Tag",TAG)
"RTN","ECOB",84,0)
 Q:TAG("routine")="METHOD^DGOB"  ;stop recursive call
"RTN","ECOB",85,0)
 Q:TAG("routine")=""
"RTN","ECOB",86,0)
 I $T(@TAG("routine"))'="" D  Q
"RTN","ECOB",87,0)
 .I TAG("parameters")="(.RESULT,ARGUMENT)" D @TAG
"RTN","ECOB",88,0)
 Q
"RTN","ECOB",89,0)
 ;;
"RTN","ECOB",90,0)
MOVE(RESULT,HANDLE,SOURCE,SCOPE,PROPERTY) ;copy simple object property to another
"RTN","ECOB",91,0)
 N X
"RTN","ECOB",92,0)
 D GET(.X,SOURCE,SCOPE,PROPERTY)
"RTN","ECOB",93,0)
 D SET(.RESULT,HANDLE,SCOPE,PROPERTY,X)
"RTN","ECOB",94,0)
 Q
"RTN","ECOB",95,0)
 ;;
"RTN","ECOB",96,0)
PROPERTY(HANDLE,SCOPE,PROPERTY,VALUE) ; create simple property node
"RTN","ECOB",97,0)
 S HANDLE=$S($G(HANDLE)'="":HANDLE,1:-1)
"RTN","ECOB",98,0)
 S SCOPE=$S($G(SCOPE)'="":SCOPE,1:"Pu")
"RTN","ECOB",99,0)
 S PROPERTY=$S($G(PROPERTY)'="":PROPERTY,1:-1)
"RTN","ECOB",100,0)
 S @HANDLE@(SCOPE,PROPERTY)=$G(VALUE)
"RTN","ECOB",101,0)
 Q 1
"RTN","ECOB",102,0)
 ;;
"RTN","ECOB",103,0)
SELF(RESULT,HANDLE,CLASS,NAME,ROUTINE,PARENT) ; set 'self' properties of object
"RTN","ECOB",104,0)
 N RESULT
"RTN","ECOB",105,0)
 D:CLASS'="" SET(.RESULT,HANDLE,"Pu","_class",CLASS)
"RTN","ECOB",106,0)
 D:NAME'="" SET(.RESULT,HANDLE,"Pu","_name",NAME)
"RTN","ECOB",107,0)
 D:ROUTINE'="" SET(.RESULT,HANDLE,"Pu","_routine",ROUTINE)
"RTN","ECOB",108,0)
 D:PARENT'="" SET(.RESULT,HANDLE,"Pr","_parent",PARENT)
"RTN","ECOB",109,0)
 Q
"RTN","ECOB",110,0)
 ;;
"RTN","ECOB",111,0)
SET(RESULT,HANDLE,SCOPE,PROPERTY,VALUE) ; set simple property
"RTN","ECOB",112,0)
 I $G(HANDLE)="" S RESULT="-1^Handle does not exist"
"RTN","ECOB",113,0)
 I '$D(@HANDLE) S RESULT="-1^No data at handle: "_HANDLE_"."
"RTN","ECOB",114,0)
 S SCOPE=$S($G(SCOPE)'="":SCOPE,1:"Pu")
"RTN","ECOB",115,0)
 S PROPERTY=$S($G(PROPERTY)'="":PROPERTY,1:"-1")
"RTN","ECOB",116,0)
 I '$D(@HANDLE@(SCOPE,PROPERTY)) D  Q
"RTN","ECOB",117,0)
 .S RESULT="-1^Property "_PROPERTY_" does not exist."
"RTN","ECOB",118,0)
 S @HANDLE@(SCOPE,PROPERTY)=VALUE
"RTN","ECOB",119,0)
 S RESULT=1
"RTN","ECOB",120,0)
 Q
"RTN","ECOB",121,0)
 ;;
"RTN","ECOB",122,0)
SHOW(RESULT,HANDLE,SCOPE,PROPERTY,PARAMS) ; show a property
"RTN","ECOB",123,0)
 N JUSTIFY,CHILD,CLASS
"RTN","ECOB",124,0)
 D GET(.RESULT,HANDLE,SCOPE,PROPERTY)
"RTN","ECOB",125,0)
 S JUSTIFY=$S(+PARAMS:+PARAMS,1:0)
"RTN","ECOB",126,0)
 I PARAMS["/" W !,$J("</"_PROPERTY_">  ",JUSTIFY) Q
"RTN","ECOB",127,0)
 W !,$J("<"_PROPERTY_"> : ",JUSTIFY),RESULT
"RTN","ECOB",128,0)
 D:$$ISHANDLE(HANDLE,RESULT)
"RTN","ECOB",129,0)
 .S CHILD=RESULT
"RTN","ECOB",130,0)
 .D GET(.CLASS,CHILD,"Pu","_class")
"RTN","ECOB",131,0)
 .W " [class = "_CLASS_"]"
"RTN","ECOB",132,0)
 Q
"RTN","ECOB",133,0)
 ;; 
"RTN","ECOB",134,0)
TREE(CHILD,HANDLE,SCOPE,PROPERTY,JUSTIFY) Q  ; no longer used
"RTN","ECOBUF")
0^5^B6397998^B6151296
"RTN","ECOBUF",1,0)
ECOBUF ;BP/CMF - Factory Object
"RTN","ECOBUF",2,0)
 ;;2.0;EVENT CAPTURE;**100,107**;8 May 96;Build 14
"RTN","ECOBUF",3,0)
 ;@author  - Chris Flegel
"RTN","ECOBUF",4,0)
 ;@date    - 17 May 2009
"RTN","ECOBUF",5,0)
 ;@version - 1.0
"RTN","ECOBUF",6,0)
 ;;
"RTN","ECOBUF",7,0)
 Q
"RTN","ECOBUF",8,0)
 ;; private methods
"RTN","ECOBUF",9,0)
 ;;
"RTN","ECOBUF",10,0)
FACTORY0()  Q "^TMP($J,""ECOBUF"")"
"RTN","ECOBUF",11,0)
 ;;
"RTN","ECOBUF",12,0)
FACTORY1() Q "^TMP($J,""ECOBUF"",1)"
"RTN","ECOBUF",13,0)
 ;;
"RTN","ECOBUF",14,0)
FACTORY2()  ;
"RTN","ECOBUF",15,0)
 S ^XTMP("ECOBUF",0)=$G(DT)+1_"^"_$G(DT)
"RTN","ECOBUF",16,0)
 Q "^XTMP(""ECOBUF"","_$S($G(DUZ)'="":DUZ,$G(DT)'="":DT,1:1)_")"
"RTN","ECOBUF",17,0)
 ;;
"RTN","ECOBUF",18,0)
VALUE(VALUE) ;;  parse "." out of Parameter values
"RTN","ECOBUF",19,0)
 Q $S(VALUE="":"",1:$P(VALUE,".")_U_$P(VALUE,".",2,3))
"RTN","ECOBUF",20,0)
 ;;
"RTN","ECOBUF",21,0)
 ;; published methods
"RTN","ECOBUF",22,0)
FACTORY(RESULT,ARGUMENT) ; wrapper for factory methods - RPC "EC OBU FACTORY"
"RTN","ECOBUF",23,0)
 N FACTORY,HANDLE,CREATE,DESTROY,CLASS,NAME,TARGET
"RTN","ECOBUF",24,0)
 N ARG1,ARG2,ARG3
"RTN","ECOBUF",25,0)
 S RESULT="-1^Invalid Factory Parameters",RESULT(0)=RESULT
"RTN","ECOBUF",26,0)
 S ARGUMENT=$G(ARGUMENT)
"RTN","ECOBUF",27,0)
 Q:ARGUMENT=""
"RTN","ECOBUF",28,0)
 S ARG1=$P(ARGUMENT,".",1)
"RTN","ECOBUF",29,0)
 S ARG2=$P(ARGUMENT,".",2)
"RTN","ECOBUF",30,0)
 S ARG3=$P(ARGUMENT,".",3)
"RTN","ECOBUF",31,0)
 S ARG3=$S(ARG3'="":ARG3,ARG1="Constructor"&(ARG3=""):$$FACTORY2(),1:"")
"RTN","ECOBUF",32,0)
 Q:ARG1="Constructor"&(ARG3="")
"RTN","ECOBUF",33,0)
 I ARG1="Constructor" D  Q
"RTN","ECOBUF",34,0)
 .S CLASS=ARG2
"RTN","ECOBUF",35,0)
 .S NAME=ARG3
"RTN","ECOBUF",36,0)
 .S CREATE=$$GET^XPAR("PKG","ECOB CONSTRUCTOR",CLASS,"E")
"RTN","ECOBUF",37,0)
 .I CREATE="" S RESULT(0)="-1^Invalid Class Name" S RESULT=RESULT(0) Q
"RTN","ECOBUF",38,0)
 .S CREATE="S RESULT=$$"_$$VALUE(CREATE)
"RTN","ECOBUF",39,0)
 .X CREATE
"RTN","ECOBUF",40,0)
 .S RESULT(0)=RESULT
"RTN","ECOBUF",41,0)
 .Q
"RTN","ECOBUF",42,0)
 I ARG1="Destructor" D  Q
"RTN","ECOBUF",43,0)
 .S TARGET=ARG2
"RTN","ECOBUF",44,0)
 .I ARG3'="" S CLASS=ARG3
"RTN","ECOBUF",45,0)
 .E  D METHOD(.CLASS,TARGET_".of.Get_class")
"RTN","ECOBUF",46,0)
 .S DESTROY=$$GET^XPAR("PKG","ECOB DESTRUCTOR",CLASS,"E")
"RTN","ECOBUF",47,0)
 .I DESTROY="" S RESULT(0)="-1^Invalid Class Name" S RESULT=RESULT(0) Q
"RTN","ECOBUF",48,0)
 .S DESTROY="S RESULT=$$"_$$VALUE(DESTROY)
"RTN","ECOBUF",49,0)
 .S HANDLE=TARGET
"RTN","ECOBUF",50,0)
 .X DESTROY
"RTN","ECOBUF",51,0)
 .S RESULT(0)=RESULT
"RTN","ECOBUF",52,0)
 .Q
"RTN","ECOBUF",53,0)
 I ARG1="Method" D  Q
"RTN","ECOBUF",54,0)
 .D METHOD(.RESULT,$P(ARGUMENT,".",2,99))
"RTN","ECOBUF",55,0)
 .S RESULT(0)=RESULT
"RTN","ECOBUF",56,0)
 .Q
"RTN","ECOBUF",57,0)
 Q
"RTN","ECOBUF",58,0)
 ;;
"RTN","ECOBUF",59,0)
METHOD(RESULT,ARGUMENT)  ;
"RTN","ECOBUF",60,0)
 ; call parent last
"RTN","ECOBUF",61,0)
 D METHOD^ECOBU(.RESULT,ARGUMENT)  ; parent method
"RTN","ECOBUF",62,0)
 S RESULT(0)=RESULT
"RTN","ECOBUF",63,0)
 Q
"RTN","ECOBUF",64,0)
METHODS(RESULT,ARGUMENT)  ;
"RTN","ECOBUF",65,0)
 ; call parent last
"RTN","ECOBUF",66,0)
 D METHOD^ECOBU(.RESULT,ARGUMENT)  ; parent method
"RTN","ECOBUF",67,0)
 Q
"RTN","ECOBUF",68,0)
OUT(ARGUMENT) ;method call as function
"RTN","ECOBUF",69,0)
 N RESULT
"RTN","ECOBUF",70,0)
 D METHOD(.RESULT,ARGUMENT)
"RTN","ECOBUF",71,0)
 Q RESULT
"RTN","ECOBVST")
0^4^B21156397^B20262344
"RTN","ECOBVST",1,0)
ECOBVST ;BP/CMF - Visit object
"RTN","ECOBVST",2,0)
 ;;2.0;EVENT CAPTURE;**100,107**;8 May 96;Build 14
"RTN","ECOBVST",3,0)
 ;@author  - Chris Flegel
"RTN","ECOBVST",4,0)
 ;@date    - 17 May 2009
"RTN","ECOBVST",5,0)
 ;@version - 1.0
"RTN","ECOBVST",6,0)
 ;;
"RTN","ECOBVST",7,0)
 Q
"RTN","ECOBVST",8,0)
 ;; private methods
"RTN","ECOBVST",9,0)
 ;;
"RTN","ECOBVST",10,0)
 ;; protected methods
"RTN","ECOBVST",11,0)
LOAD(RESULT,HANDLE,PARAMS)  ;;
"RTN","ECOBVST",12,0)
    N X,P1,P2,P3,P4,P5,P6
"RTN","ECOBVST",13,0)
    D METHOD(.RESULT,HANDLE_".GetVisitIEN")
"RTN","ECOBVST",14,0)
    S P1=$P(PARAMS,U,1)
"RTN","ECOBVST",15,0)
    D METHOD(.RESULT,HANDLE_".SetFMDateTime."_P1)
"RTN","ECOBVST",16,0)
    D METHOD(.RESULT,HANDLE_".SetDateTime."_$$FMTE^XLFDT(P1,9))
"RTN","ECOBVST",17,0)
    S P2=$P(PARAMS,U,2)
"RTN","ECOBVST",18,0)
    D METHOD(.RESULT,HANDLE_".SetLocationIEN."_$P(P2,";",1))
"RTN","ECOBVST",19,0)
    D METHOD(.RESULT,HANDLE_".SetLocation."_$P(P2,";",2))
"RTN","ECOBVST",20,0)
    S P3=$P(PARAMS,U,3)
"RTN","ECOBVST",21,0)
    D METHOD(.RESULT,HANDLE_".SetServiceCategory."_P3)
"RTN","ECOBVST",22,0)
    S P4=$P(PARAMS,U,4)
"RTN","ECOBVST",23,0)
    D METHOD(.RESULT,HANDLE_".SetServiceConnected."_P4)
"RTN","ECOBVST",24,0)
    S P5=$P(PARAMS,U,5)
"RTN","ECOBVST",25,0)
    D METHOD(.RESULT,HANDLE_".SetPatientStatus."_P5)
"RTN","ECOBVST",26,0)
    S P6=$P(PARAMS,U,6)
"RTN","ECOBVST",27,0)
    D METHOD(.RESULT,HANDLE_".SetClinicStopIEN."_$P(P6,";",1))
"RTN","ECOBVST",28,0)
    D METHOD(.RESULT,HANDLE_".SetClinicStop."_$P(P6,";",2))
"RTN","ECOBVST",29,0)
    D STUB(.RESULT,HANDLE,PARAMS)
"RTN","ECOBVST",30,0)
    Q
"RTN","ECOBVST",31,0)
    ;;
"RTN","ECOBVST",32,0)
STUB(RESULT,HANDLE,PARAMS)  ;;
"RTN","ECOBVST",33,0)
    N R1,R2,R3
"RTN","ECOBVST",34,0)
    D METHOD(.RESULT,HANDLE_".GetVisitIEN")
"RTN","ECOBVST",35,0)
    S RESULT=RESULT_U
"RTN","ECOBVST",36,0)
    D METHOD(.R1,HANDLE_".GetDateTime")
"RTN","ECOBVST",37,0)
    S RESULT=RESULT_$$LJ^XLFSTR(R1,20)
"RTN","ECOBVST",38,0)
    D METHOD(.R2,HANDLE_".GetLocation")
"RTN","ECOBVST",39,0)
    S RESULT=RESULT_$$LJ^XLFSTR(R2,30) ;llh 107, chngD lgth frm 25 to 30
"RTN","ECOBVST",40,0)
    D METHOD(.R3,HANDLE_".GetClinicStop")
"RTN","ECOBVST",41,0)
    ;;S RESULT=RESULT_R3_U_R1_U_R2   llh 107 rmv ClinicStop frm display
"RTN","ECOBVST",42,0)
    S RESULT=RESULT_U_R1_U_R2_U_R3
"RTN","ECOBVST",43,0)
    Q
"RTN","ECOBVST",44,0)
 ;; public methods
"RTN","ECOBVST",45,0)
CREATE(NAME)  ;
"RTN","ECOBVST",46,0)
 ; call parent first
"RTN","ECOBVST",47,0)
 N HANDLE,X,CHILD
"RTN","ECOBVST",48,0)
 S HANDLE=$$CREATE^ECOB3(NAME)
"RTN","ECOBVST",49,0)
 D METHOD(.X,HANDLE_".of.Set_class.EC VISIT")
"RTN","ECOBVST",50,0)
 D METHOD(.X,HANDLE_".of.Set_name.Visit")
"RTN","ECOBVST",51,0)
 D METHOD(.X,HANDLE_".of.Set_routine.METHOD^ECOBVST(.RESULT,ARGUMENT)")
"RTN","ECOBVST",52,0)
 ;;
"RTN","ECOBVST",53,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.VisitIEN")
"RTN","ECOBVST",54,0)
 D METHOD(.X,CHILD_".pf.AddedByClass.EC VISIT")
"RTN","ECOBVST",55,0)
 ;;
"RTN","ECOBVST",56,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.FMDateTime")
"RTN","ECOBVST",57,0)
 D METHOD(.X,CHILD_".pf.AddedByClass.EC VISIT")
"RTN","ECOBVST",58,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.DateTime")
"RTN","ECOBVST",59,0)
 D METHOD(.X,CHILD_".pf.AddedByClass.EC VISIT")
"RTN","ECOBVST",60,0)
 ;;
"RTN","ECOBVST",61,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.LocationIEN")
"RTN","ECOBVST",62,0)
 D METHOD(.X,CHILD_".pf.AddedByClass.EC VISIT")
"RTN","ECOBVST",63,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.Location")
"RTN","ECOBVST",64,0)
 D METHOD(.X,CHILD_".pf.AddedByClass.EC VISIT")
"RTN","ECOBVST",65,0)
 ;;
"RTN","ECOBVST",66,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.ServiceCategory")
"RTN","ECOBVST",67,0)
 D METHOD(.X,CHILD_".pf.AddedByClass.EC VISIT")
"RTN","ECOBVST",68,0)
 ;;
"RTN","ECOBVST",69,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.ServiceConnected")
"RTN","ECOBVST",70,0)
 D METHOD(.X,CHILD_".pf.AddedByClass.EC VISIT")
"RTN","ECOBVST",71,0)
 ;;
"RTN","ECOBVST",72,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.PatientStatus")
"RTN","ECOBVST",73,0)
 D METHOD(.X,CHILD_".pf.AddedByClass.EC VISIT")
"RTN","ECOBVST",74,0)
 ;;
"RTN","ECOBVST",75,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.ClinicStopIEN")
"RTN","ECOBVST",76,0)
 D METHOD(.X,CHILD_".pf.AddedByClass.EC VISIT")
"RTN","ECOBVST",77,0)
 D METHOD(.CHILD,HANDLE_".Properties.Add.ClinicStop")
"RTN","ECOBVST",78,0)
 D METHOD(.X,CHILD_".pf.AddedByClass.EC VISIT")
"RTN","ECOBVST",79,0)
 ;;
"RTN","ECOBVST",80,0)
 D METHOD(.CHILD,HANDLE_".Methods.Add.VisitStub")
"RTN","ECOBVST",81,0)
 D METHOD(.X,CHILD_".mf.AddedByClass.EC VISIT")
"RTN","ECOBVST",82,0)
 D METHOD(.X,CHILD_".mf.SetDescription.Build Visit stub for EC VISITS.Execute.")
"RTN","ECOBVST",83,0)
 D METHOD(.X,CHILD_".mf.SetHandler.STUB^ECOBVST(.RESULT,HANDLE,PARAMS)")
"RTN","ECOBVST",84,0)
 D METHOD(.X,CHILD_".mf.SetParams.")
"RTN","ECOBVST",85,0)
 D METHOD(.X,CHILD_".mf.SetReturns.[VisitIen]^[string for pick list]")
"RTN","ECOBVST",86,0)
 ;;
"RTN","ECOBVST",87,0)
 D METHOD(.CHILD,HANDLE_".Methods.Add.Load")
"RTN","ECOBVST",88,0)
 D METHOD(.X,CHILD_".mf.AddedByClass.EC VISIT")
"RTN","ECOBVST",89,0)
 D METHOD(.X,CHILD_".mf.SetDescription.Populate object from API string.")
"RTN","ECOBVST",90,0)
 D METHOD(.X,CHILD_".mf.SetHandler.LOAD^ECOBVST(.RESULT,HANDLE,PARAMS)")
"RTN","ECOBVST",91,0)
 D METHOD(.X,CHILD_".mf.SetParams.string from API to be loaded")
"RTN","ECOBVST",92,0)
 D METHOD(.X,CHILD_".mf.SetReturns.Result of Stub method")
"RTN","ECOBVST",93,0)
 ;;
"RTN","ECOBVST",94,0)
 D METHOD(.X,HANDLE_".Root.Add.EC VISIT")
"RTN","ECOBVST",95,0)
 ;
"RTN","ECOBVST",96,0)
 Q HANDLE
"RTN","ECOBVST",97,0)
 ;;
"RTN","ECOBVST",98,0)
DESTROY(HANDLE)  ;
"RTN","ECOBVST",99,0)
 ; call parent last
"RTN","ECOBVST",100,0)
 Q $$DESTROY^ECOB3(HANDLE)
"RTN","ECOBVST",101,0)
 ;;
"RTN","ECOBVST",102,0)
METHOD(RESULT,ARGUMENT)  ;
"RTN","ECOBVST",103,0)
 ; call parent last
"RTN","ECOBVST",104,0)
 D METHOD^ECOB3(.RESULT,ARGUMENT)  ; parent method
"RTN","ECOBVST",105,0)
 Q
"RTN","ECOBVST",106,0)
 ;;
"RTN","ECRRPC")
0^7^B16341040^B15494219
"RTN","ECRRPC",1,0)
ECRRPC ;ALB/JAM - Event Capture Report RPC Broker ;2 Sep 2008
"RTN","ECRRPC",2,0)
 ;;2.0; EVENT CAPTURE ;**25,47,61,72,95,101,100,107**;8 May 96;Build 14
"RTN","ECRRPC",3,0)
 ;
"RTN","ECRRPC",4,0)
RPTEN(RESULTS,ECARY) ;RPC Broker entry point for EC Reports
"RTN","ECRRPC",5,0)
 ;All EC GUI reports will call this line tag
"RTN","ECRRPC",6,0)
 ;        RPC: EC REPORTS
"RTN","ECRRPC",7,0)
 ;INPUTS   ECARY - Contains the following elements for report printing
"RTN","ECRRPC",8,0)
 ;          ECDEV  - Print to queue, if device
"RTN","ECRRPC",9,0)
 ;          ECQDT  - Queue to print (date/time), optional
"RTN","ECRRPC",10,0)
 ;
"RTN","ECRRPC",11,0)
 ;OUTPUTS  RESULTS - Array of help text in the HELP FRAM File (#9.2)
"RTN","ECRRPC",12,0)
 ;
"RTN","ECRRPC",13,0)
 N HLPDA,HND,ECSTR,ECFILER,ECERR,ECDIRY,ECUFILE,ECGUI
"RTN","ECRRPC",14,0)
 N ECQTIME ;CMF should not need this!  %DT call below fails for future dates within this routine
"RTN","ECRRPC",15,0)
 D SETENV^ECUMRPC
"RTN","ECRRPC",16,0)
 S ECERR=0,ECGUI=1 D PARSE,CHKDT I ECERR Q
"RTN","ECRRPC",17,0)
 K ^TMP("ECMSG",$J),^TMP($J,"ECRPT")
"RTN","ECRRPC",18,0)
 D  I ECERR D END Q
"RTN","ECRRPC",19,0)
 . I ECPTYP="D" D HFSOPEN(ECHNDL) Q
"RTN","ECRRPC",20,0)
 . I '$D(ECDEV) S ^TMP("ECMSG",$J,1)="0^Device undefined",ECERR=1
"RTN","ECRRPC",21,0)
 S HND=$P($T(@ECHNDL),";;",2) I HND="" D  Q
"RTN","ECRRPC",22,0)
 . S ^TMP("ECMSG",$J,1)="0^Line Tag undefined" D END
"RTN","ECRRPC",23,0)
 S ^XTMP("ECRRPT","ECRRPC","ECQDTbefore")=$G(ECQDT)  ;;cmf diagnostic hack
"RTN","ECRRPC",24,0)
 S:ECPTYP="P" ECQTIME=$TR($P(ECQDT,"@",2),":","")
"RTN","ECRRPC",25,0)
 S ECQDT=$G(ECQDT,"NOW"),%DT="XT",X=ECQDT D ^%DT  ;Print time
"RTN","ECRRPC",26,0)
 S ECQDT=$S(Y>0:Y,1:"NOW")
"RTN","ECRRPC",27,0)
 S:ECPTYP="P"&(ECQDT="NOW") ECQDT=DT_"."_ECQTIME  ;Should not have to do this! %DT malfunctions inside this routine!!!
"RTN","ECRRPC",28,0)
 D @$P(HND,";",2)
"RTN","ECRRPC",29,0)
 I ECPTYP="D" D HFSCLOSE(ECFILER) ;S RESULTS=$NA(^TMP($J))
"RTN","ECRRPC",30,0)
END D KILLVAR
"RTN","ECRRPC",31,0)
 I $D(^TMP("ECMSG",$J)) S RESULTS=$NA(^TMP("ECMSG",$J)) Q
"RTN","ECRRPC",32,0)
 S RESULTS=$NA(^TMP($J))
"RTN","ECRRPC",33,0)
 Q
"RTN","ECRRPC",34,0)
 ;
"RTN","ECRRPC",35,0)
PARSE ;Parse data from array for filing
"RTN","ECRRPC",36,0)
 N SUB
"RTN","ECRRPC",37,0)
 S SUB="" F  S SUB=$O(ECARY(SUB)) Q:SUB=""  S @SUB=ECARY(SUB)
"RTN","ECRRPC",38,0)
 Q
"RTN","ECRRPC",39,0)
CHKDT ;Required Data Check
"RTN","ECRRPC",40,0)
 N I,C
"RTN","ECRRPC",41,0)
 S C=1
"RTN","ECRRPC",42,0)
 F I="ECHNDL","ECPTYP" D
"RTN","ECRRPC",43,0)
 .I $G(@I)="" S ^TMP("ECMSG",$J,C)="0^Key data missing "_I,C=C+1,ECERR=1
"RTN","ECRRPC",44,0)
 Q
"RTN","ECRRPC",45,0)
KILLVAR ;Kill variables
"RTN","ECRRPC",46,0)
 N SUB
"RTN","ECRRPC",47,0)
 S SUB="" F  S SUB=$O(ECARY(SUB)) Q:SUB=""  K @SUB
"RTN","ECRRPC",48,0)
 K ECARY,POP,ECQDT
"RTN","ECRRPC",49,0)
 Q
"RTN","ECRRPC",50,0)
HFSOPEN(HANDLE) ; 
"RTN","ECRRPC",51,0)
 ;S ECDIRY=$$GET^XPAR("DIV","EC HFS SCRATCH")
"RTN","ECRRPC",52,0)
 S ECDIRY=$$DEFDIR^%ZISH()
"RTN","ECRRPC",53,0)
 I ECDIRY="" S ECERR=1 D  Q
"RTN","ECRRPC",54,0)
 .S ^TMP("ECMSG",$J,1)="0^A scratch directory for reports doesn't exist"
"RTN","ECRRPC",55,0)
 S ECFILER="EC"_DUZ_".DAT",ECUFILE=ECFILER S ^TMP("JEN",$J,.1)=ECUFILE
"RTN","ECRRPC",56,0)
 D OPEN^%ZISH(HANDLE,ECDIRY,ECFILER,"W") D:POP  Q:POP
"RTN","ECRRPC",57,0)
 .S ECERR=1,^TMP("ECMSG",$J,1)="0^Unable to open file "_ECDIRY_ECFILER
"RTN","ECRRPC",58,0)
 S IOM=132,IOSL=99999,IOST="P-DUMMY",IOF=""""""
"RTN","ECRRPC",59,0)
 Q
"RTN","ECRRPC",60,0)
 ;
"RTN","ECRRPC",61,0)
HFSCLOSE(HANDLE) ; 
"RTN","ECRRPC",62,0)
 N ECDEL
"RTN","ECRRPC",63,0)
 D CLOSE^%ZISH(ECDIRY_HANDLE)
"RTN","ECRRPC",64,0)
 K ^TMP($J)
"RTN","ECRRPC",65,0)
 S ECDEL(ECFILER)=""
"RTN","ECRRPC",66,0)
 S X=$$FTG^%ZISH(ECDIRY,ECFILER,$NAME(^TMP($J,1)),2)
"RTN","ECRRPC",67,0)
 S X=$$DEL^%ZISH(ECDIRY,$NA(ECDEL))
"RTN","ECRRPC",68,0)
 Q
"RTN","ECRRPC",69,0)
 ;added ECSTPCD for EC*2*107
"RTN","ECRRPC",70,0)
ECPAT ;;Patient Summary Report;ECPAT^ECRRPT
"RTN","ECRRPC",71,0)
ECRDSSA ;;DSS Unit Activity;ECRDSSA^ECRRPT
"RTN","ECRRPC",72,0)
ECRDSSU ;;DSS Unit Workload Summary;ECRDSSU^ECRRPT
"RTN","ECRRPC",73,0)
ECPROV ;;Provider Summary Report;ECPROV^ECRRPT
"RTN","ECRRPC",74,0)
PROSUM ;;Provider (1-7) Summary Report;PROSUM^ECRRPT
"RTN","ECRRPC",75,0)
ECOSSUM ;;Ordering Section Summary Report;ECOSSUM^ECRRPT
"RTN","ECRRPC",76,0)
ECPCER ;;PCE Data Summary Report;ECPCER^ECRRPT
"RTN","ECRRPC",77,0)
ECRPERS ;;Inactive Person Class Report;ECRPERS^ECRRPT1
"RTN","ECRRPC",78,0)
ECRPRSN ;;Procedure Reason Report;ECRPRSN^ECRRPT1
"RTN","ECRRPC",79,0)
ECDSS1 ;;National/Local Procedure Reports;ECDSS1^ECRRPT1
"RTN","ECRRPC",80,0)
ECDSS3 ;;Category Reports;ECDSS3^ECRRPT1
"RTN","ECRRPC",81,0)
ECSUM ;;Print Category and Procedure Summary (Report);ECSUM^ECRRPT1
"RTN","ECRRPC",82,0)
ECNTPCE ;;Records Failing Transmission to PCE Report;ECNTPCE^ECRRPT1
"RTN","ECRRPC",83,0)
ECSCPT ;;Event Code Screens with CPT Codes;ECSCPT^ECRRPT1
"RTN","ECRRPC",84,0)
ECINCPT ;;National/Local Procedure Codes with Inactive CPT;ECINCPT^ECRRPT1
"RTN","ECRRPC",85,0)
ECGTP ;;Generic Table Printer;ECGTP^ECRRPT1
"RTN","ECRRPC",86,0)
ECSTPCD ;;DSS Units with Associated Stop Code Error Report;ECSTPCD^ECRRPT1
"RTN","ECRRPT1")
0^8^B59190035^B55152988
"RTN","ECRRPT1",1,0)
ECRRPT1 ;ALB/JAM;Event Capture Report RPC Broker ;10 JUL 2008
"RTN","ECRRPT1",2,0)
 ;;2.0; EVENT CAPTURE ;**25,32,33,61,78,72,90,95,100,107**;8 May 96;Build 14
"RTN","ECRRPT1",3,0)
 ;
"RTN","ECRRPT1",4,0)
ECRPRSN ;Procedure Reason Report for RPC Call
"RTN","ECRRPT1",5,0)
 ;     Variables passed in
"RTN","ECRRPT1",6,0)
 ;       ECSD     - Start Date or Report
"RTN","ECRRPT1",7,0)
 ;       ECED     - End Date or Report
"RTN","ECRRPT1",8,0)
 ;       ECL      - Location to report (1 or ALL)
"RTN","ECRRPT1",9,0)
 ;       ECD0..n  - DSS Unit to report (1,some or ALL)
"RTN","ECRRPT1",10,0)
 ;       ECRY0..n - Procedure reason (some or ALL)
"RTN","ECRRPT1",11,0)
 ;
"RTN","ECRRPT1",12,0)
 ;     Variable return
"RTN","ECRRPT1",13,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",14,0)
 N ECV,ECI,ECLOC,ECDSSU,ECDN,ECDATE,ECUN,ECNT,ECKEY,ECX,ECLINK,ECZ
"RTN","ECRRPT1",15,0)
 N ECROU,ECSAVE,ECDESC,ECW,DIC,X,Y
"RTN","ECRRPT1",16,0)
 S ECV="ECL^ECD0^ECSD^ECED^ECRY0" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT1",17,0)
 D  I '$D(ECLOC) S ^TMP("ECMSG",$J)="1^Invalid Location." Q
"RTN","ECRRPT1",18,0)
 . D LOCARRY^ECRUTL I ECL="ALL" Q
"RTN","ECRRPT1",19,0)
 . K ECLOC I $D(ECLOC1(ECL)) S ECLOC(1)=ECL_"^"_ECLOC1(ECL)
"RTN","ECRRPT1",20,0)
 D  I '$D(ECDSSU) S ^TMP("ECMSG",$J)="1^Invalid DSS Unit." Q
"RTN","ECRRPT1",21,0)
 . I ECD0="ALL" D  Q
"RTN","ECRRPT1",22,0)
 . . I '$D(ECDUZ) Q
"RTN","ECRRPT1",23,0)
 . . S ECKEY=$S($D(^XUSEC("ECALLU",ECDUZ)):1,1:0) D ALLU^ECRUTL
"RTN","ECRRPT1",24,0)
 . S (ECI,ECNT)=0 F ECI=0:1 S ECX="ECD"_ECI Q:'$D(@ECX)  D
"RTN","ECRRPT1",25,0)
 . . K DIC S DIC=724,DIC(0)="QNMZX",X=@ECX D ^DIC I Y<0 Q
"RTN","ECRRPT1",26,0)
 . . S ECNT=ECNT+1,ECDSSU(ECNT)=Y
"RTN","ECRRPT1",27,0)
 S ECX=0 D
"RTN","ECRRPT1",28,0)
 .I ECRY0="ALL" D PXREAS Q
"RTN","ECRRPT1",29,0)
 .N TLOC,TDSS,ECY
"RTN","ECRRPT1",30,0)
 .S ECI=0 F  S ECI=$O(ECLOC(ECI)) Q:'ECI  S TLOC(+ECLOC(ECI))=""
"RTN","ECRRPT1",31,0)
 .S ECI=0 F  S ECI=$O(ECDSSU(ECI)) Q:'ECI  S TDSS(+ECDSSU(ECI))=""
"RTN","ECRRPT1",32,0)
 .S ECI=0 F ECI=0:1 S ECZ="ECRY"_ECI Q:'$D(@ECZ)  D
"RTN","ECRRPT1",33,0)
 ..S ECW=0 F  S ECW=$O(^ECL("B",@ECZ,ECW)) Q:'ECW  D
"RTN","ECRRPT1",34,0)
 ...S ECY=$P($G(^ECL(ECW,0)),U,2) Q:ECY=""  S ECJ=$P($G(^ECJ(ECY,0)),U)
"RTN","ECRRPT1",35,0)
 ...Q:ECJ=""  Q:'$D(TLOC($P(ECJ,"-")))  Q:'$D(TDSS($P(ECJ,"-",2)))
"RTN","ECRRPT1",36,0)
 ...S ECLINK(ECW)=$P($G(^ECL(ECW,0)),U)
"RTN","ECRRPT1",37,0)
 D DATECHK^ECRRPT(.ECSD,.ECED) S ECSD=ECSD-.0001,ECED=ECED+.9999
"RTN","ECRRPT1",38,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT1",39,0)
 . S ECV="ECSD^ECED",ECROU="START^ECRPRSN"
"RTN","ECRRPT1",40,0)
 . S (ECSAVE("ECLOC("),ECSAVE("ECDSSU("),ECSAVE("ECLINK("))=""
"RTN","ECRRPT1",41,0)
 . S ECDESC="EC Procedure Reason Report"
"RTN","ECRRPT1",42,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT1",43,0)
 D START^ECRPRSN,EXIT^ECRPRSN
"RTN","ECRRPT1",44,0)
 Q
"RTN","ECRRPT1",45,0)
PXREAS ;Procedure reason link
"RTN","ECRRPT1",46,0)
 N ECZ,ECX,ECY,ECV
"RTN","ECRRPT1",47,0)
 S ECX=0 F  S ECX=$O(ECLOC(ECX)) Q:'ECX  S ECY=0 D
"RTN","ECRRPT1",48,0)
 . F  S ECY=$O(ECDSSU(ECY)) Q:'ECY  S ECV=+ECLOC(ECX)_"-"_+ECDSSU(ECY) D
"RTN","ECRRPT1",49,0)
 . . S ECZ=ECV_"-0-0"
"RTN","ECRRPT1",50,0)
 . . F  S ECZ=$O(^ECJ("B",ECZ)) Q:('ECZ)!($P(ECZ,"-",1,2)'=ECV)  D
"RTN","ECRRPT1",51,0)
 . . . S ECW=$O(^ECJ("B",ECZ,"")) Q:ECW=""  D REALNK
"RTN","ECRRPT1",52,0)
 Q
"RTN","ECRRPT1",53,0)
REALNK ;Reason link
"RTN","ECRRPT1",54,0)
 N XX,YY,ZZ
"RTN","ECRRPT1",55,0)
 S XX=0 F  S XX=$O(^ECL("AD",ECW,XX)) Q:'XX  S YY=0 D
"RTN","ECRRPT1",56,0)
 . F  S YY=$O(^ECL("AD",ECW,XX,YY)) Q:'YY  D
"RTN","ECRRPT1",57,0)
 . . Q:$G(^ECL(YY,0))=""  S ECLINK(YY)=XX
"RTN","ECRRPT1",58,0)
 Q
"RTN","ECRRPT1",59,0)
ECRPERS ;Inactive Person Class Report for RPC Call
"RTN","ECRRPT1",60,0)
 ;     Variables passed in
"RTN","ECRRPT1",61,0)
 ;       ECSD   - Start Date or Report
"RTN","ECRRPT1",62,0)
 ;       ECED   - End Date or Report
"RTN","ECRRPT1",63,0)
 ;       ECSORT - Sort by Patient (P) or Provider (R)
"RTN","ECRRPT1",64,0)
 ;
"RTN","ECRRPT1",65,0)
 ;     Variable return
"RTN","ECRRPT1",66,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",67,0)
 N ECV,ECDATE,ECBEGIN,ECEND,ECROU,ECDESC
"RTN","ECRRPT1",68,0)
 S ECV="ECSD^ECED^ECSORT" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT1",69,0)
 D DATECHK^ECRRPT(.ECSD,.ECED)
"RTN","ECRRPT1",70,0)
 S ECBEGIN=ECSD-.0001,ECEND=ECED+.9999
"RTN","ECRRPT1",71,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT1",72,0)
 . S ECV="ECBEGIN^ECEND^ECSORT",ECROU="START^ECRPCLS"
"RTN","ECRRPT1",73,0)
 . S ECDESC="EC Invalid Provider Report"
"RTN","ECRRPT1",74,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT1",75,0)
 D START^ECRPCLS
"RTN","ECRRPT1",76,0)
 Q
"RTN","ECRRPT1",77,0)
ECDSS1 ;National/Local Procedure Reports for RPC Call
"RTN","ECRRPT1",78,0)
 ;     Variables passed in
"RTN","ECRRPT1",79,0)
 ;       ECRTN    - Procedure Report (A-active or I-inactive)
"RTN","ECRRPT1",80,0)
 ;    If ECRTN=A, also
"RTN","ECRRPT1",81,0)
 ;       ECRN     - Preferred Report (N-ational, L-ocal or Both)
"RTN","ECRRPT1",82,0)
 ;       ECRD     - Sort Method (P-rocedure Name, N-ational Number)
"RTN","ECRRPT1",83,0)
 ;
"RTN","ECRRPT1",84,0)
 ;     Variable return
"RTN","ECRRPT1",85,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",86,0)
 N ECV,ECDESC,ECROU,DQTIME
"RTN","ECRRPT1",87,0)
 S ECV=$S($G(ECRTN)="A":"ECRTN^ECRN^ECRD",1:"ECRTN")
"RTN","ECRRPT1",88,0)
 D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT1",89,0)
 S DQTIME=ECQDT
"RTN","ECRRPT1",90,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT1",91,0)
 . S ECV="ECRTN^ECRN^ECRD",ECROU=$S(ECRTN="I":"LISTI",1:"PRT")_"^ECDSS1"
"RTN","ECRRPT1",92,0)
 . S ECDESC="Event Capture National Procedure Report",ECDIP=1
"RTN","ECRRPT1",93,0)
 . ;S ECSAVE("IO*")=""
"RTN","ECRRPT1",94,0)
 .D QUEDIP D @$S(ECRTN="I":"LISTI^ECDSS1",1:"PRT^ECDSS1")
"RTN","ECRRPT1",95,0)
 D CLOSE^%ZISH(ECDIRY_ECFILER)
"RTN","ECRRPT1",96,0)
 S %ZIS("HFSNAME")=ECDIRY_ECFILER,%ZIS("HFSMODE")="W",IOP="HFS"
"RTN","ECRRPT1",97,0)
 D @$S(ECRTN="I":"LISTI^ECDSS1",1:"PRT^ECDSS1")
"RTN","ECRRPT1",98,0)
 Q
"RTN","ECRRPT1",99,0)
ECDSS3 ;Category Reports for RPC Call
"RTN","ECRRPT1",100,0)
 ;     Variables passed in
"RTN","ECRRPT1",101,0)
 ;       ECRTN    - Category Procedure Report 
"RTN","ECRRPT1",102,0)
 ;                  (A-active, I-inactive or B-oth)
"RTN","ECRRPT1",103,0)
 ;
"RTN","ECRRPT1",104,0)
 ;     Variable return
"RTN","ECRRPT1",105,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",106,0)
 N ECV,ECDIP,DQTIME
"RTN","ECRRPT1",107,0)
 S ECV="ECRTN" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT1",108,0)
 S DQTIME=ECQDT
"RTN","ECRRPT1",109,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT1",110,0)
 . S ECV="ECRTN",ECROU="PRINT^ECDSS3"
"RTN","ECRRPT1",111,0)
 . S ECDESC="Event Capture Category Reports"
"RTN","ECRRPT1",112,0)
 . D QUEDIP D PRINT^ECDSS3
"RTN","ECRRPT1",113,0)
 D CLOSE^%ZISH(ECDIRY_ECFILER)
"RTN","ECRRPT1",114,0)
 S %ZIS("HFSNAME")=ECDIRY_ECFILER,%ZIS("HFSMODE")="W",IOP="HFS"
"RTN","ECRRPT1",115,0)
 D PRINT^ECDSS3
"RTN","ECRRPT1",116,0)
 Q
"RTN","ECRRPT1",117,0)
QUEDIP ;Queue when using DIP
"RTN","ECRRPT1",118,0)
 N DIC,X,Y
"RTN","ECRRPT1",119,0)
 D  I Y=-1 S ECERR=1 Q
"RTN","ECRRPT1",120,0)
 . S DIC(0)="MN",X=ECDEV,DIC="^%ZIS(1," D ^DIC
"RTN","ECRRPT1",121,0)
 . S:+Y>0 IOP="Q;"_$P(Y,U,2)
"RTN","ECRRPT1",122,0)
 . S Y=ECQDT X ^DD("DD") S DQTIME=Y
"RTN","ECRRPT1",123,0)
 Q
"RTN","ECRRPT1",124,0)
ECSUM ;Print Category and Procedure Summary (Report) for RPC Call
"RTN","ECRRPT1",125,0)
 ;     Variables passed in
"RTN","ECRRPT1",126,0)
 ;       ECL      - Location to report (1 or ALL)
"RTN","ECRRPT1",127,0)
 ;       ECD      - DSS Unit to report (1 or ALL), If ECD'="ALL" then ECC
"RTN","ECRRPT1",128,0)
 ;       ECC      - Category (1 or ALL) (optional)
"RTN","ECRRPT1",129,0)
 ;       ECRTN    - Event Code Screen (Active, Inactive or Both)
"RTN","ECRRPT1",130,0)
 ;
"RTN","ECRRPT1",131,0)
 ;     Variable return
"RTN","ECRRPT1",132,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",133,0)
 N ECV,ECDN,ECCN,ECROU,ECSAVE,ECDESC,ECLOC,ECS,ECJLP,ECSN,ECALL,DIC,X,Y
"RTN","ECRRPT1",134,0)
 N ECSCN
"RTN","ECRRPT1",135,0)
 S (ECJLP,ECALL)=0,ECV="ECL^ECD^ECRTN" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT1",136,0)
 D  I '$D(ECLOC) S ^TMP("ECMSG",$J)="1^Invalid Location." Q
"RTN","ECRRPT1",137,0)
 . D LOCARRY^ECRUTL I ECL="ALL" Q
"RTN","ECRRPT1",138,0)
 . K ECLOC I $D(ECLOC1(ECL)) S ECLOC(1)=ECL_"^"_ECLOC1(ECL)
"RTN","ECRRPT1",139,0)
 S ECSCN=ECRTN D  I ECERR S ^TMP("ECMSG",$J)="1^Invalid DSS Unit." Q
"RTN","ECRRPT1",140,0)
 . I ECD="ALL" S ECALL=1 Q
"RTN","ECRRPT1",141,0)
 . K DIC S DIC=724,DIC(0)="QNMZX",X=ECD D ^DIC I Y<0 S ECERR=1 Q
"RTN","ECRRPT1",142,0)
 . S ECDN=$P(Y,U,2)_$S($P($G(^ECD(+ECD,0)),"^",6):" **Inactive**",1:"")
"RTN","ECRRPT1",143,0)
 . S ECS=+$P(^ECD(ECD,0),"^",2),ECJLP=+$P(^(0),"^",11)
"RTN","ECRRPT1",144,0)
 . S ECSN=$S($P($G(^DIC(49,ECS,0)),"^")]"":$P(^(0),"^"),1:"UNKNOWN")
"RTN","ECRRPT1",145,0)
 . I 'ECJLP S ECC=0,ECCN="None"
"RTN","ECRRPT1",146,0)
 I ECALL D PXRUN Q
"RTN","ECRRPT1",147,0)
 S ECV="ECC" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT1",148,0)
 D  I ECERR S ^TMP("ECMSG",$J)="1^Invalid Category." Q
"RTN","ECRRPT1",149,0)
 . I (ECC="ALL")!(ECC=0) Q
"RTN","ECRRPT1",150,0)
 . K DIC S DIC=726,DIC(0)="QNMZX",X=ECC D ^DIC I Y<0 S ECERR=1 Q
"RTN","ECRRPT1",151,0)
 . S ECCN=$P(Y,U,2)
"RTN","ECRRPT1",152,0)
PXRUN I ECPTYP="P" D  Q
"RTN","ECRRPT1",153,0)
 . S ECV="ECALL^ECSCN",ECROU="START^ECSUM"
"RTN","ECRRPT1",154,0)
 . S ECSAVE("ECLOC(")=""
"RTN","ECRRPT1",155,0)
 . I 'ECALL S ECV=ECV_"^ECD^ECC^ECSN^ECDN^ECJLP^ECCN^ECSCN"
"RTN","ECRRPT1",156,0)
 . S ECDESC="EC Print Category and Procedure Summary"
"RTN","ECRRPT1",157,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT1",158,0)
 U IO D START^ECSUM
"RTN","ECRRPT1",159,0)
 Q
"RTN","ECRRPT1",160,0)
ECNTPCE ;ECS Records Failing Transmission to PCE
"RTN","ECRRPT1",161,0)
 ;     Variables passed in
"RTN","ECRRPT1",162,0)
 ;       ECSD   - Start Date or Report
"RTN","ECRRPT1",163,0)
 ;       ECED   - End Date or Report
"RTN","ECRRPT1",164,0)
 ;
"RTN","ECRRPT1",165,0)
 ;     Variable return
"RTN","ECRRPT1",166,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",167,0)
 N ECV,ECDATE,ECROU,ECDESC
"RTN","ECRRPT1",168,0)
 S ECV="ECSD^ECED" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT1",169,0)
 D DATECHK^ECRRPT(.ECSD,.ECED)
"RTN","ECRRPT1",170,0)
 S ECSD=ECSD-.0001,ECED=ECED+.9999
"RTN","ECRRPT1",171,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT1",172,0)
 . S ECV="ECSD^ECED^ECDATE",ECROU="START^ECNTPCE"
"RTN","ECRRPT1",173,0)
 . S ECDESC="ECS Records Failing Transmission to PCE Report"
"RTN","ECRRPT1",174,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT1",175,0)
 D START^ECNTPCE
"RTN","ECRRPT1",176,0)
 Q
"RTN","ECRRPT1",177,0)
ECSCPT ;Event Code Screens with CPT Codes
"RTN","ECRRPT1",178,0)
 ;     Variables passed in
"RTN","ECRRPT1",179,0)
 ;       ECL      - Location to report (1 or ALL)
"RTN","ECRRPT1",180,0)
 ;       ECD      - DSS Unit to report (1 or ALL), If ECD'="ALL" then ECC
"RTN","ECRRPT1",181,0)
 ;       ECC      - Category (1 or ALL) (optional)
"RTN","ECRRPT1",182,0)
 ;       ECCPT    - CPT Codes to Display (Active, Inactive or Both)
"RTN","ECRRPT1",183,0)
 ;
"RTN","ECRRPT1",184,0)
 ;     Variable return
"RTN","ECRRPT1",185,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",186,0)
 N ECV,ECDN,ECCN,ECROU,ECSAVE,ECDESC,ECLOC,ECS,ECJLP,ECALL,DIC,X,Y
"RTN","ECRRPT1",187,0)
 S (ECJLP,ECALL)=0,ECV="ECL^ECD^ECCPT" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT1",188,0)
 D  I '$D(ECLOC) S ^TMP("ECMSG",$J)="1^Invalid Location." Q
"RTN","ECRRPT1",189,0)
 . I ECL="ALL" D LOCARRY^ECRUTL Q
"RTN","ECRRPT1",190,0)
 . S DIC=4,DIC(0)="QNZX",X=ECL D ^DIC Q:Y<0  S ECLOC(1)=+Y_U_$P(Y,U,2)
"RTN","ECRRPT1",191,0)
 D  I ECERR S ^TMP("ECMSG",$J)="1^Invalid DSS Unit." Q
"RTN","ECRRPT1",192,0)
 . I ECD="ALL" S ECALL=1 Q
"RTN","ECRRPT1",193,0)
 . K DIC S DIC=724,DIC(0)="QNMZX",X=ECD D ^DIC I Y<0 S ECERR=1 Q
"RTN","ECRRPT1",194,0)
 . S ECDN=$P(Y,U,2)_$S($P($G(^ECD(+ECD,0)),"^",6):" **Inactive**",1:"")
"RTN","ECRRPT1",195,0)
 . S ECJLP=+$P(^ECD(ECD,0),"^",11)
"RTN","ECRRPT1",196,0)
 . I 'ECJLP S ECC=0,ECCN="None"
"RTN","ECRRPT1",197,0)
 I ECALL D CPTRUN Q
"RTN","ECRRPT1",198,0)
 S ECV="ECC" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT1",199,0)
 D  I ECERR S ^TMP("ECMSG",$J)="1^Invalid Category." Q
"RTN","ECRRPT1",200,0)
 . I (ECC="ALL")!(ECC=0) Q
"RTN","ECRRPT1",201,0)
 . K DIC S DIC=726,DIC(0)="QNMZX",X=ECC D ^DIC I Y<0 S ECERR=1 Q
"RTN","ECRRPT1",202,0)
 . S ECCN=$P(Y,U,2)
"RTN","ECRRPT1",203,0)
CPTRUN I ECPTYP="P" D  Q
"RTN","ECRRPT1",204,0)
 . S ECV="ECALL^ECCPT",ECROU="START^ECSCPT"
"RTN","ECRRPT1",205,0)
 . S ECSAVE("ECLOC(")=""
"RTN","ECRRPT1",206,0)
 . I 'ECALL S ECV=ECV_"^ECD^ECC^ECDN^ECJLP^ECCN"
"RTN","ECRRPT1",207,0)
 . S ECDESC="Event Code Screens with CPT Codes"
"RTN","ECRRPT1",208,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT1",209,0)
 U IO D START^ECSCPT
"RTN","ECRRPT1",210,0)
 Q
"RTN","ECRRPT1",211,0)
ECINCPT ;National/Local Procedure Codes with Inactive CPT Reports for RPC Call
"RTN","ECRRPT1",212,0)
 ;     Variables passed in
"RTN","ECRRPT1",213,0)
 ;       NONE     - No input variables
"RTN","ECRRPT1",214,0)
 ;
"RTN","ECRRPT1",215,0)
 ;     Variable return
"RTN","ECRRPT1",216,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",217,0)
 N ECV,ECL,ECDESC,ECROU,DQTIME,ECPG
"RTN","ECRRPT1",218,0)
 S ECPG=1
"RTN","ECRRPT1",219,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT1",220,0)
 . S ECROU="START^ECINCPT",ECV="ECL",ECL=""
"RTN","ECRRPT1",221,0)
 . S ECDESC="National/Local Procedure Codes with Inactive CPT"
"RTN","ECRRPT1",222,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT1",223,0)
 U IO D START^ECINCPT
"RTN","ECRRPT1",224,0)
 Q
"RTN","ECRRPT1",225,0)
ECGTP ;ECS Generic Table Printer
"RTN","ECRRPT1",226,0)
 ;     Variables passed in
"RTN","ECRRPT1",227,0)
 ;       ECOBHNDL   - Handle to generic table print obj
"RTN","ECRRPT1",228,0)
 ;
"RTN","ECRRPT1",229,0)
 ;     Variable return
"RTN","ECRRPT1",230,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",231,0)
 N ECV,ECROU,ECDESC
"RTN","ECRRPT1",232,0)
 S ECV="ECOBHNDL" D REQCHK^ECRRPT(ECV) I ECERR Q
"RTN","ECRRPT1",233,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT1",234,0)
 . S ECV="ECOBHNDL",ECROU="START^ECGTP"
"RTN","ECRRPT1",235,0)
 . S ECDESC="ECS Generic Table Printer"
"RTN","ECRRPT1",236,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT1",237,0)
 D START^ECGTP
"RTN","ECRRPT1",238,0)
 Q
"RTN","ECRRPT1",239,0)
ECSTPCD ;DSS Units with Associated Stop Code Error REPORT
"RTN","ECRRPT1",240,0)
 ;  EC*2*107 - added to GUI reports
"RTN","ECRRPT1",241,0)
 ;     Variables passed in
"RTN","ECRRPT1",242,0)
 ;       NONE     - No input variables
"RTN","ECRRPT1",243,0)
 ;
"RTN","ECRRPT1",244,0)
 ;     Variable return
"RTN","ECRRPT1",245,0)
 ;       ^TMP($J,"ECRPT",n)=report output or to print device.
"RTN","ECRRPT1",246,0)
 N ECV,ECL,ECDESC,ECROU,DQTIME,ECPG
"RTN","ECRRPT1",247,0)
 S ECPG=1
"RTN","ECRRPT1",248,0)
 I ECPTYP="P" D  Q
"RTN","ECRRPT1",249,0)
 . S ECROU="STRTGUI^ECUNTRPT",ECV="ECL",ECL=""
"RTN","ECRRPT1",250,0)
 . S ECDESC="DSS Units with Associated Stop Code Error"
"RTN","ECRRPT1",251,0)
 . D QUEUE^ECRRPT
"RTN","ECRRPT1",252,0)
 U IO D STRTGUI^ECUNTRPT
"RTN","ECRRPT1",253,0)
 Q 
"RTN","ECUMRPC1")
0^2^B78546073^B73472186
"RTN","ECUMRPC1",1,0)
ECUMRPC1 ;ALB/JAM-Event Capture Management Broker Utilities ; 7/21/09 2:05pm
"RTN","ECUMRPC1",2,0)
 ;;2.0; EVENT CAPTURE ;**25,30,33,72,94,95,105,100,107**;8 May 96;Build 14
"RTN","ECUMRPC1",3,0)
 ;
"RTN","ECUMRPC1",4,0)
DSSUNT(RESULTS,ECARY) ;
"RTN","ECUMRPC1",5,0)
 ;
"RTN","ECUMRPC1",6,0)
 ;This broker entry point returns DSS units from file 724
"RTN","ECUMRPC1",7,0)
 ;        RPC: EC GETDSSUNIT
"RTN","ECUMRPC1",8,0)
 ;INPUTS         ECARY -Contains the following subscripted elements
"RTN","ECUMRPC1",9,0)
 ;               P1 =   optional field to return DSS Units
"RTN","ECUMRPC1",10,0)
 ;                      STAT; 'A'ctive (default), 'I'nactive, 'B'oth
"RTN","ECUMRPC1",11,0)
 ;               P2 =   optional field to filter based on the DSS Name
"RTN","ECUMRPC1",12,0)
 ;               P3 =   optional field to return 1 DSS unit by IEN, if used
"RTN","ECUMRPC1",13,0)
 ;                      no other filters evaluated
"RTN","ECUMRPC1",14,0)
 ;               P4 =   optional field to filter based on the DSS Unit Number
"RTN","ECUMRPC1",15,0)
 ;               
"RTN","ECUMRPC1",16,0)
 ;               if data is passed into the other fields then all criteria
"RTN","ECUMRPC1",17,0)
 ;               must be met for data on a unit to be returned
"RTN","ECUMRPC1",18,0)
 ;
"RTN","ECUMRPC1",19,0)
 ;OUTPUTS        RESULTS - Array of DSS units. Data pieces as follows:-
"RTN","ECUMRPC1",20,0)
 ;               PIECE - Description
"RTN","ECUMRPC1",21,0)
 ;                 1     IEN of DSS Unit 
"RTN","ECUMRPC1",22,0)
 ;                 2     Name of DSS Unit
"RTN","ECUMRPC1",23,0)
 ;                 3     IEN of DSS Unit
"RTN","ECUMRPC1",24,0)
 ;                 4     Inactive flag
"RTN","ECUMRPC1",25,0)
 ;                 5     Send to PCE   
"RTN","ECUMRPC1",26,0)
 ;                 6     Unit Number
"RTN","ECUMRPC1",27,0)
 ;                 7     Service
"RTN","ECUMRPC1",28,0)
 ;                 8     Medical Specialty
"RTN","ECUMRPC1",29,0)
 ;                 9     Cost Center
"RTN","ECUMRPC1",30,0)
 ;                 10    Associated Stop code (if not sending to PCE)
"RTN","ECUMRPC1",31,0)
 ;                 11    Category flag
"RTN","ECUMRPC1",32,0)
 ;                 12    Default date entry
"RTN","ECUMRPC1",33,0)
 ;
"RTN","ECUMRPC1",34,0)
 N UNT,STAT,CNT,CAT,NODE,ECS,STR,SRV,MED,CST,UNO,INACT,ASC,PCE,ACT,NODE
"RTN","ECUMRPC1",35,0)
 N DFD,DIEN,DNM,DUNIT,GET1
"RTN","ECUMRPC1",36,0)
 D SETENV^ECUMRPC
"RTN","ECUMRPC1",37,0)
 K ^TMP($J,"ECDSSUNT")
"RTN","ECUMRPC1",38,0)
 S DNM=$P($G(ECARY),U,2),DIEN=$P($G(ECARY),U,3),DUNIT=$P($G(ECARY),U,4)
"RTN","ECUMRPC1",39,0)
 S:DNM'="" DNM=$$UP^XLFSTR(DNM)
"RTN","ECUMRPC1",40,0)
 S:DUNIT'="" DUNIT=$$UP^XLFSTR(DUNIT)
"RTN","ECUMRPC1",41,0)
 S STAT=$P($G(ECARY),U),(CNT,UNT,GET1)=0 S:STAT="" STAT="A"
"RTN","ECUMRPC1",42,0)
 ; if IEN passed in - use that, then quit, GET1 used as control to stop
"RTN","ECUMRPC1",43,0)
 I $G(DIEN) S UNT=DIEN-.001,GET1=1
"RTN","ECUMRPC1",44,0)
 F  S UNT=$O(^ECD(UNT)) Q:'UNT!((UNT>DIEN&(GET1)))  S NODE=$G(^ECD(UNT,0)) I NODE'="" D
"RTN","ECUMRPC1",45,0)
 . S ECS=$P(NODE,U,8),ACT=$P(NODE,U,6),ACT=$S(ACT:1,1:0)
"RTN","ECUMRPC1",46,0)
 . Q:('ECS)
"RTN","ECUMRPC1",47,0)
 . I '$G(DIEN),$S(STAT="A"&(ACT):1,STAT="I"&('ACT):1,1:0) Q
"RTN","ECUMRPC1",48,0)
 . ; execute new filters
"RTN","ECUMRPC1",49,0)
 . I DNM'="",$$UP^XLFSTR($P(NODE,U))'[DNM Q
"RTN","ECUMRPC1",50,0)
 . I DUNIT'="",$$UP^XLFSTR($P(NODE,U,5))'[DUNIT Q
"RTN","ECUMRPC1",51,0)
 . I DIEN'="",$$UP^XLFSTR(UNT)'[DIEN Q
"RTN","ECUMRPC1",52,0)
 . S CNT=CNT+1,CAT=$P(NODE,U,11),CAT=$S(CAT:"Y",1:"N"),UNO=$P(NODE,U,5)
"RTN","ECUMRPC1",53,0)
 . S SRV=$$GET1^DIQ(49,$P(NODE,U,2),.01,"I")
"RTN","ECUMRPC1",54,0)
 . S MED=$$GET1^DIQ(723,$P(NODE,U,3),.01,"I")
"RTN","ECUMRPC1",55,0)
 . S CST=$$GET1^DIQ(420.1,$P(NODE,U,4),.01,"I")
"RTN","ECUMRPC1",56,0)
 . S INACT=$P(NODE,U,6),INACT=$S(INACT:"I",1:"A"),ASC=$P(NODE,U,10)
"RTN","ECUMRPC1",57,0)
 . S:ASC ASC=$$GET1^DIQ(40.7,ASC,.01,"I")
"RTN","ECUMRPC1",58,0)
 . S DFD=$S($P(NODE,U,12)="N":"N",1:"X"),PCE=$P(NODE,U,14)
"RTN","ECUMRPC1",59,0)
 . S PCE=$S(PCE="A":PCE,PCE="O":PCE,1:"N")
"RTN","ECUMRPC1",60,0)
 . S STR=UNT_U_$P(NODE,U)_U_UNT_U_INACT_U_PCE_U_UNO_U_SRV_U_MED_U_CST
"RTN","ECUMRPC1",61,0)
 . S STR=STR_U_ASC_U_CAT_U_DFD,^TMP($J,"ECDSSUNT",CNT)=STR
"RTN","ECUMRPC1",62,0)
 S RESULTS=$NA(^TMP($J,"ECDSSUNT"))
"RTN","ECUMRPC1",63,0)
 Q
"RTN","ECUMRPC1",64,0)
CAT(RESULTS,ECARY) ;
"RTN","ECUMRPC1",65,0)
 ;
"RTN","ECUMRPC1",66,0)
 ;This broker entry point returns a list of categories from file 726
"RTN","ECUMRPC1",67,0)
 ;        RPC: EC GETCAT
"RTN","ECUMRPC1",68,0)
 ;INPUTS         ECARY - Contains the following subscripted elements
"RTN","ECUMRPC1",69,0)
 ;                STAT - Active or inactive category (optional)
"RTN","ECUMRPC1",70,0)
 ;                A-ctive (default), I-nactive, B-oth
"RTN","ECUMRPC1",71,0)
 ;
"RTN","ECUMRPC1",72,0)
 ;OUTPUTS        RESULTS - Array of category. Data pieces as follows:-
"RTN","ECUMRPC1",73,0)
 ;               PIECE - Description
"RTN","ECUMRPC1",74,0)
 ;                 1     IEN of Category
"RTN","ECUMRPC1",75,0)
 ;                 2     Name of Category
"RTN","ECUMRPC1",76,0)
 ;                 3     Creation Date
"RTN","ECUMRPC1",77,0)
 ;                 4     Inactive Date
"RTN","ECUMRPC1",78,0)
 ;
"RTN","ECUMRPC1",79,0)
 N STAT,CNT,CAT,NODE,ECDT,INDT,CRDT
"RTN","ECUMRPC1",80,0)
 D SETENV^ECUMRPC
"RTN","ECUMRPC1",81,0)
 K ^TMP($J,"ECCAT")
"RTN","ECUMRPC1",82,0)
 S STAT=$P($G(ECARY),U),(CNT,CAT)=0 S:STAT="" STAT="A"
"RTN","ECUMRPC1",83,0)
 F  S CAT=$O(^EC(726,CAT)) Q:'CAT  S NODE=$G(^EC(726,CAT,0)) I NODE'="" D
"RTN","ECUMRPC1",84,0)
 . S ECDT=$P(NODE,U,3)
"RTN","ECUMRPC1",85,0)
 . I STAT="A",ECDT'="",ECDT'>DT Q
"RTN","ECUMRPC1",86,0)
 . I STAT="I",ECDT="" Q
"RTN","ECUMRPC1",87,0)
 . S CRDT=$$FMTE^XLFDT($P(NODE,U,2),"2F")
"RTN","ECUMRPC1",88,0)
 . S INDT=$$FMTE^XLFDT($P(NODE,U,3),"2F")
"RTN","ECUMRPC1",89,0)
 . ;S CNT=CNT+1,^TMP($J,"ECCAT",CNT)=CAT_U_$P(NODE,U)_U_CRDT_U_INDT
"RTN","ECUMRPC1",90,0)
 . S CNT=CNT+1,^TMP($J,"ECCAT",CNT)=CAT_U_$P(NODE,U)_U_$P(CRDT,"@",1)_U_$P(INDT,"@",1)
"RTN","ECUMRPC1",91,0)
 S RESULTS=$NA(^TMP($J,"ECCAT"))
"RTN","ECUMRPC1",92,0)
 Q
"RTN","ECUMRPC1",93,0)
 ;
"RTN","ECUMRPC1",94,0)
CATCHK(RESULTS,ECARY) ;
"RTN","ECUMRPC1",95,0)
 ;
"RTN","ECUMRPC1",96,0)
 ;Broker call checks whether category is used in an Event Code Screen.
"RTN","ECUMRPC1",97,0)
 ;        RPC: EC DSSCATCHECK
"RTN","ECUMRPC1",98,0)
 ;INPUTS   ECARY  - Contains the following subscripted elements
"RTN","ECUMRPC1",99,0)
 ;          ECDA  - DSS Unit ien (file #724)
"RTN","ECUMRPC1",100,0)
 ;
"RTN","ECUMRPC1",101,0)
 ;OUTPUTS  RESULTS - Category used in Event Code Screen, 1-Yes or 0-No
"RTN","ECUMRPC1",102,0)
 ;
"RTN","ECUMRPC1",103,0)
 N ECDA,ECFLG,ECX
"RTN","ECUMRPC1",104,0)
 D SETENV^ECUMRPC
"RTN","ECUMRPC1",105,0)
 S ECDA=$P(ECARY,U) I ECDA="" Q
"RTN","ECUMRPC1",106,0)
 S (ECFLG,ECX)=0
"RTN","ECUMRPC1",107,0)
 F  S ECX=$O(^ECJ("AP",ECX)) Q:'ECX!(ECFLG)  D
"RTN","ECUMRPC1",108,0)
 . I $D(^ECJ("AP",ECX,ECDA)) S ECFLG=1
"RTN","ECUMRPC1",109,0)
 S RESULTS=ECFLG
"RTN","ECUMRPC1",110,0)
 Q
"RTN","ECUMRPC1",111,0)
PXCHK(RESULTS,ECARY) ;
"RTN","ECUMRPC1",112,0)
 ;
"RTN","ECUMRPC1",113,0)
 ;Checks whether procedure description or national number exist
"RTN","ECUMRPC1",114,0)
 ;INPUTS   ECARY  - Contains the following subscripted elements
"RTN","ECUMRPC1",115,0)
 ;          ECP - Procedure description
"RTN","ECUMRPC1",116,0)
 ;          ECN - EC National Number
"RTN","ECUMRPC1",117,0)
 ;
"RTN","ECUMRPC1",118,0)
 ;OUTPUTS  RESULTS - Px used^National # used, 1-Yes or 0-No ex. 1^0
"RTN","ECUMRPC1",119,0)
 ;
"RTN","ECUMRPC1",120,0)
 N ECX,ECP,ECN
"RTN","ECUMRPC1",121,0)
 Q:$G(ECARY)
"RTN","ECUMRPC1",122,0)
 D SETENV^ECUMRPC
"RTN","ECUMRPC1",123,0)
 S ECP=$P(ECARY,U),ECN=$P(ECARY,U,2),RESULTS="0^0"
"RTN","ECUMRPC1",124,0)
 I ECP'="",$D(^EC(725,"B",ECP)) S $P(RESULTS,U)=1
"RTN","ECUMRPC1",125,0)
 I ECN'="" F ECX="E","D","DL" D  I $P(RESULTS,U,2) Q
"RTN","ECUMRPC1",126,0)
 . I $D(^EC(725,ECX,ECN)) S $P(RESULTS,U,2)=1
"RTN","ECUMRPC1",127,0)
 Q
"RTN","ECUMRPC1",128,0)
SRCLST(RESULTS,ECARY) ;
"RTN","ECUMRPC1",129,0)
 ;
"RTN","ECUMRPC1",130,0)
 ;This broker entry returns an array of codes from a file based on a 
"RTN","ECUMRPC1",131,0)
 ;search string.
"RTN","ECUMRPC1",132,0)
 ;        RPC: EC GETLIST
"RTN","ECUMRPC1",133,0)
 ;
"RTN","ECUMRPC1",134,0)
 ;INPUTS   ECARY   - Contains the following subscripted elements
"RTN","ECUMRPC1",135,0)
 ;           ECSTR  - Search string
"RTN","ECUMRPC1",136,0)
 ;           ECFIL  - File to search
"RTN","ECUMRPC1",137,0)
 ;           ECDIR  - Search order
"RTN","ECUMRPC1",138,0)
 ;           ECNUM  - (Optional) # records to return [default=44]
"RTN","ECUMRPC1",139,0)
 ;OUTPUTS     RESULTS - Array of values based on the search criteria.
"RTN","ECUMRPC1",140,0)
 ;
"RTN","ECUMRPC1",141,0)
 N ECNT,DIC,ECSTR,ECFIL,ECORD,ECER,ECDI,ECNUM,ECDIR
"RTN","ECUMRPC1",142,0)
 D SETENV^ECUMRPC
"RTN","ECUMRPC1",143,0)
 S ECNT=0,ECFIL=$P(ECARY,U),ECSTR=$P(ECARY,U,2),ECDIR=$P(ECARY,U,3)
"RTN","ECUMRPC1",144,0)
 S ECORD=$S(ECDIR=-1:"B",1:"I")
"RTN","ECUMRPC1",145,0)
 K ^TMP($J,"ECFIND"),^TMP("ECSRCH",$J)
"RTN","ECUMRPC1",146,0)
 I ECFIL="" Q
"RTN","ECUMRPC1",147,0)
 S ECNUM=$S(+$P(ECARY,U,4)>0:$P(ECARY,U,4),1:44)
"RTN","ECUMRPC1",148,0)
 I ECFIL=420.1 D CSTCTR            ;Cost Center search
"RTN","ECUMRPC1",149,0)
 I ECFIL=49 D SERVC                ;Service search
"RTN","ECUMRPC1",150,0)
 I ECFIL=723 D MEDSPC              ;Medical specialty
"RTN","ECUMRPC1",151,0)
 I ECFIL=40.7 D STPCDE G EXIT      ;Associated stop code
"RTN","ECUMRPC1",152,0)
 I ECFIL=724 D DUNT G EXIT         ;DSS Unit
"RTN","ECUMRPC1",153,0)
 I ECFIL=726 D ECAT                ;Category
"RTN","ECUMRPC1",154,0)
 I ECFIL=4 D LOC                   ;Location
"RTN","ECUMRPC1",155,0)
 I ECFIL=44 D ASCLN G EXIT         ;Associated clinic
"RTN","ECUMRPC1",156,0)
 I ECFIL=757.01 D LEX^ECUMRPC2 G EXIT  ;Lex ICD code
"RTN","ECUMRPC1",157,0)
 I ECFIL=200 D PROV^ECUMRPC2(ECNUM)      ;Providers
"RTN","ECUMRPC1",158,0)
 I $D(ECER) S ^TMP($J,"ECFIND",1)="0^Error occurred during search" G EXIT
"RTN","ECUMRPC1",159,0)
 D SORT
"RTN","ECUMRPC1",160,0)
EXIT K ^TMP("ECSRCH",$J)
"RTN","ECUMRPC1",161,0)
 S RESULTS=$NA(^TMP($J,"ECFIND"))
"RTN","ECUMRPC1",162,0)
 Q
"RTN","ECUMRPC1",163,0)
ASCLN ;Search for active associated clinics (file #44)
"RTN","ECUMRPC1",164,0)
 N CLN,CNT,NOD,ECDT,INACT,REACT,ERR
"RTN","ECUMRPC1",165,0)
 S CNT=0,ECDT=DT
"RTN","ECUMRPC1",166,0)
 I (ECDIR'=1)&(ECDIR'=-1) S ECDIR=1
"RTN","ECUMRPC1",167,0)
 ;the next 2 lines of code compensate for the M collating sequence & how the
"RTN","ECUMRPC1",168,0)
 ;clinic code is passed in from a CPRS RPC, in a unique situation. If the
"RTN","ECUMRPC1",169,0)
 ;code is numeric, ending in 0 and there is a similar code ending with a
"RTN","ECUMRPC1",170,0)
 ;letter, the correct clinic is not returned. EX: 2 clinics, 3010 and "3010A"
"RTN","ECUMRPC1",171,0)
 ;exist, the code is written to return 3010, yet 3010A is incorrectly returned. 
"RTN","ECUMRPC1",172,0)
 ;This code puts the 0 back on and subtracts 1 to the clinic code
"RTN","ECUMRPC1",173,0)
 I $E(ECSTR,$L(ECSTR)-1)="/",$E(ECSTR,1,($L(ECSTR)-2))?.N D
"RTN","ECUMRPC1",174,0)
 .S ECSTR=$E(ECSTR,1,($L(ECSTR)-2))_0,ECSTR=ECSTR-1
"RTN","ECUMRPC1",175,0)
 F  Q:CNT=ECNUM  S ECSTR=$O(^SC("B",ECSTR),ECDIR) Q:ECSTR=""  S CLN="" D
"RTN","ECUMRPC1",176,0)
 .F  S CLN=$O(^SC("B",ECSTR,CLN),ECDIR) Q:CLN=""  S NOD=$G(^SC(CLN,0)) D
"RTN","ECUMRPC1",177,0)
 ..Q:NOD=""  Q:$P(NOD,U,3)'="C"  ;Q:+$G(^SC(CLN,"OOS"))
"RTN","ECUMRPC1",178,0)
 ..S ERR=0 I $D(^SC(CLN,"I")) D  I ERR Q
"RTN","ECUMRPC1",179,0)
 ...S INACT=$P(^SC(CLN,"I"),U),REACT=$P(^SC(CLN,"I"),U,2)
"RTN","ECUMRPC1",180,0)
 ...I INACT D  I ERR Q
"RTN","ECUMRPC1",181,0)
 ....I REACT="" S:ECDT'<INACT ERR=1 Q
"RTN","ECUMRPC1",182,0)
 ....I ECDT'<INACT,ECDT<REACT S ERR=1 Q
"RTN","ECUMRPC1",183,0)
 ...I REACT,ECDT<REACT S ERR=1
"RTN","ECUMRPC1",184,0)
 ..S CNT=CNT+1,^TMP($J,"ECFIND",CNT)=CLN_U_$P(NOD,U)
"RTN","ECUMRPC1",185,0)
 Q
"RTN","ECUMRPC1",186,0)
CSTCTR ;Search for cost centers (File #420.1)
"RTN","ECUMRPC1",187,0)
 N ECNULL,INDX,STR,NSTR,I
"RTN","ECUMRPC1",188,0)
 S $P(ECNULL," ",7)=" ",INDX="B"
"RTN","ECUMRPC1",189,0)
 I $E(ECSTR)?.N,$L(ECSTR)<7 S ECSTR=ECSTR_$E(ECNULL,1,7-$L(ECSTR))
"RTN","ECUMRPC1",190,0)
 I $L($P(ECSTR," "))=6,$P(ECSTR," ",2)?.A D   ;truncate for x-ref
"RTN","ECUMRPC1",191,0)
 . S ECSTR=$P(ECSTR," ")_" "_$E($P(ECSTR," ",2,999),1,22)
"RTN","ECUMRPC1",192,0)
 I $E(ECSTR)?.A S INDX="C",(STR,NSTR)="" D  S ECSTR=NSTR
"RTN","ECUMRPC1",193,0)
 .F I=1:1 S STR=$P(ECSTR," ",I) Q:STR=""  D
"RTN","ECUMRPC1",194,0)
 ..S STR=$E(STR)_$TR($E(STR,2,9999),"ABCDEFGHIJKLMNOPQRSTUVWXYZ","abcdefghijklmnopqrstuvwxyz")
"RTN","ECUMRPC1",195,0)
 ..S NSTR=NSTR_STR
"RTN","ECUMRPC1",196,0)
 D LISTDIC(ECFIL,"",.01,ECORD,ECNUM,ECSTR,"",INDX,"I '$P(^(0),U,2)","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",197,0)
 Q
"RTN","ECUMRPC1",198,0)
SERVC ;Search for services (File #49)
"RTN","ECUMRPC1",199,0)
 D LISTDIC(ECFIL,"",.01,ECORD,ECNUM,ECSTR,"","","","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",200,0)
 Q
"RTN","ECUMRPC1",201,0)
MEDSPC ;Search for medical specialty (File #723)
"RTN","ECUMRPC1",202,0)
 D LISTDIC(ECFIL,"",.01,ECORD,ECNUM,ECSTR,"","","","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",203,0)
 Q
"RTN","ECUMRPC1",204,0)
STPCDE ;Search for associated stop code (File #40.7)
"RTN","ECUMRPC1",205,0)
 N ECNT,INDX,ECNUL,STR,IEN
"RTN","ECUMRPC1",206,0)
 S $P(ECNUL,"  ",30)=" ",INDX="B",ECNT=0,ECSTR=$P(ECSTR,"~")
"RTN","ECUMRPC1",207,0)
 I +ECSTR,+ECSTR?.N S INDX="C",IEN=0 D  Q
"RTN","ECUMRPC1",208,0)
 .S ECSTR=$O(^DIC(40.7,INDX,+ECSTR)) I ECSTR="" Q
"RTN","ECUMRPC1",209,0)
 .F  S IEN=$O(^DIC(40.7,INDX,ECSTR,IEN)) Q:'IEN  D  I ECNT>(ECNUM-1) Q
"RTN","ECUMRPC1",210,0)
 ..;07/27/09 llh added checks on piece 2 and 6
"RTN","ECUMRPC1",211,0)
 ..S STR=$G(^DIC(40.7,IEN,0)) I ($P(STR,U,3)'=""&($P(STR,U,3)'>DT))!($P(STR,U,6)="S")!($P(STR,U,6)="")!($L($P(STR,U,2))'=3) Q
"RTN","ECUMRPC1",212,0)
 ..S STR=$E($P(STR,U),1,30)_"  ["_$J($P(STR,U,2),3,0)_"]"_U_$P(STR,U,2)_U_IEN
"RTN","ECUMRPC1",213,0)
 ..S ECNT=ECNT+1,^TMP($J,"ECFIND",ECNT)=STR
"RTN","ECUMRPC1",214,0)
 ;added validation checks here as well
"RTN","ECUMRPC1",215,0)
 ;D LISTDIC(ECFIL,"",".01;1",ECORD,ECNUM,ECSTR,"",INDX,"I $P(^(0),U,3)=""""!($P(^(0),U,3)'<DT)&($P(^(0),U,6)'=""S"")","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",216,0)
 D LISTDIC(ECFIL,"",".01;1",ECORD,ECNUM,ECSTR,"",INDX,"I $P(^(0),U,3)=""""!($P(^(0),U,3)'<DT)&($L($P(^(0),U,2))=3)&(($P(^(0),U,6)=""P"")!($P(^(0),U,6)=""E""))","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",217,0)
 S ECNT=0
"RTN","ECUMRPC1",218,0)
 F  S ECNT=$O(^TMP("ECSRCH",$J,"DILIST","ID",ECNT)) Q:'ECNT  D
"RTN","ECUMRPC1",219,0)
 .S STR=$G(^TMP("ECSRCH",$J,"DILIST","ID",ECNT,.01))_U_$G(^(1))
"RTN","ECUMRPC1",220,0)
 .S STR=$E($P(STR,U),1,30)_"  ["_$J($P(STR,U,2),3,0)_"]"_U_$P(STR,U,2)
"RTN","ECUMRPC1",221,0)
 .S ^TMP($J,"ECFIND",ECNT)=STR_U_^TMP("ECSRCH",$J,"DILIST",2,ECNT)
"RTN","ECUMRPC1",222,0)
 Q
"RTN","ECUMRPC1",223,0)
DUNT ;Search for DSS unit (File #724)
"RTN","ECUMRPC1",224,0)
 N ECNT,SNDPCE
"RTN","ECUMRPC1",225,0)
 D LISTDIC(ECFIL,"",".01;10;13",ECORD,ECNUM,ECSTR,"","","I '$P(^(0),""^"",6),$P(^(0),U,8)","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",226,0)
 S ECNT=0
"RTN","ECUMRPC1",227,0)
 F  S ECNT=$O(^TMP("ECSRCH",$J,"DILIST","ID",ECNT)) Q:'ECNT  D
"RTN","ECUMRPC1",228,0)
 .S SNDPCE=$G(^TMP("ECSRCH",$J,"DILIST","ID",ECNT,13))
"RTN","ECUMRPC1",229,0)
 .S SNDPCE=$S(SNDPCE="O":1,SNDPCE="A":1,1:0)
"RTN","ECUMRPC1",230,0)
 .S ^TMP($J,"ECFIND",ECNT)=$G(^TMP("ECSRCH",$J,"DILIST","ID",ECNT,.01))_U_^TMP("ECSRCH",$J,"DILIST",2,ECNT)_U_$G(^TMP("ECSRCH",$J,"DILIST","ID",ECNT,10))_U_SNDPCE
"RTN","ECUMRPC1",231,0)
 Q
"RTN","ECUMRPC1",232,0)
ECAT ;Search for Category (File #726)
"RTN","ECUMRPC1",233,0)
 D LISTDIC(ECFIL,"",.01,ECORD,ECNUM,ECSTR,"","","I $P(^(0),""^"",3)=""""!($P(^(0),U,3)>DT)","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",234,0)
 Q
"RTN","ECUMRPC1",235,0)
LOC ;Search for Location (File #4)
"RTN","ECUMRPC1",236,0)
 D LISTDIC(ECFIL,"",.01,ECORD,ECNUM,ECSTR,"","","I $G(^(""EC""))","","^TMP(""ECSRCH"",$J)","ECER")
"RTN","ECUMRPC1",237,0)
 Q
"RTN","ECUMRPC1",238,0)
LISTDIC(ECFL,ECIEN,ECFLD,ECFLG,ECNUM,ECFRM,ECPRT,ECINDX,ECSCN,ECIND,ECTG,ECER) ;
"RTN","ECUMRPC1",239,0)
 ;Produces a list of records in a file base on search string
"RTN","ECUMRPC1",240,0)
 N DIC
"RTN","ECUMRPC1",241,0)
 D LIST^DIC(ECFL,ECIEN,ECFLD,ECFLG,ECNUM,ECFRM,ECPRT,ECINDX,ECSCN,ECIND,ECTG,ECER)
"RTN","ECUMRPC1",242,0)
 K ECFL,ECIEN,ECFLD,ECFLG,ECNUM,ECFRM,ECPRT,ECINDX,ECSCN,ECID
"RTN","ECUMRPC1",243,0)
 Q
"RTN","ECUMRPC1",244,0)
SORT ;Extracts data to be returned to broker
"RTN","ECUMRPC1",245,0)
 N ECNT,STR
"RTN","ECUMRPC1",246,0)
 S ECNT=0
"RTN","ECUMRPC1",247,0)
 F  S ECNT=$O(^TMP("ECSRCH",$J,"DILIST","ID",ECNT)) Q:'ECNT  D
"RTN","ECUMRPC1",248,0)
 .S ^TMP($J,"ECFIND",ECNT)=$G(^TMP("ECSRCH",$J,"DILIST","ID",ECNT,.01))_U_^TMP("ECSRCH",$J,"DILIST",2,ECNT)
"RTN","ECUMRPC1",249,0)
 Q
"RTN","ECUNTRPT")
0^1^B6471767^n/a
"RTN","ECUNTRPT",1,0)
ECUNTRPT ;ALB/DHE DSS Units Errors Report ; 12/3/09 10:47am
"RTN","ECUNTRPT",2,0)
 ;;2.0; EVENT CAPTURE ;**107**;8 May 96;Build 14
"RTN","ECUNTRPT",3,0)
 ;
"RTN","ECUNTRPT",4,0)
 ;This report displays DSS Units with any Associated Stop Codes
"RTN","ECUNTRPT",5,0)
 ;with any errors or warnings.
"RTN","ECUNTRPT",6,0)
 ;
"RTN","ECUNTRPT",7,0)
 ;Routine entry point, START if from roll and scroll, EN if
"RTN","ECUNTRPT",8,0)
 ;from GUI
"RTN","ECUNTRPT",9,0)
 ;
"RTN","ECUNTRPT",10,0)
 ;need to set up output device and taskman
"RTN","ECUNTRPT",11,0)
START ;
"RTN","ECUNTRPT",12,0)
 W @IOF,!!,"This option displays DSS Units with Associated Stop Code Errors.",!!
"RTN","ECUNTRPT",13,0)
 S %ZIS="QM" D ^%ZIS G EXIT:POP
"RTN","ECUNTRPT",14,0)
 I $D(IO("Q")) D  Q
"RTN","ECUNTRPT",15,0)
 . N ZTRTN,ZTDESC
"RTN","ECUNTRPT",16,0)
 . S ZTRTN="EN^ECUNTRPT",ZTDESC="DSS Units with Assoc Stop Codes"
"RTN","ECUNTRPT",17,0)
 . D ^%ZTLOAD D HOME^%ZIS K IO("Q") Q
"RTN","ECUNTRPT",18,0)
 U IO
"RTN","ECUNTRPT",19,0)
EN ;
"RTN","ECUNTRPT",20,0)
 N I,CNTR,DATE,ECERR,ECNAME,ECOUT,ECRDT,ECSTOP,ECSTOP1,ERR,INACT,LN
"RTN","ECUNTRPT",21,0)
 N PG,RTYPE,STR,UNITNM,UNT
"RTN","ECUNTRPT",22,0)
 ;
"RTN","ECUNTRPT",23,0)
 S %H=$H,ECRDT=$$HTE^XLFDT(%H,"5M"),ECOUT=0
"RTN","ECUNTRPT",24,0)
 S CNTR=0,PG=1,UNT=0,$P(LN,"-",80)=""
"RTN","ECUNTRPT",25,0)
 D HEAD
"RTN","ECUNTRPT",26,0)
 F  S UNT=$O(^ECD(UNT)) Q:'UNT  D  I ECOUT Q
"RTN","ECUNTRPT",27,0)
 .Q:'$D(^ECD(UNT,0))
"RTN","ECUNTRPT",28,0)
 .;check to see if unit is inactive
"RTN","ECUNTRPT",29,0)
 .I $P(^ECD(UNT,0),"^",6)=1 Q
"RTN","ECUNTRPT",30,0)
 .;get associated stop code
"RTN","ECUNTRPT",31,0)
 .S ECSTOP=$P(^ECD(UNT,0),"^",10) Q:$G(ECSTOP)=0!(ECSTOP="")
"RTN","ECUNTRPT",32,0)
 .;
"RTN","ECUNTRPT",33,0)
 .S UNITNM=$P($G(^ECD(UNT,0)),U),ERR=0
"RTN","ECUNTRPT",34,0)
 .S STR=$G(^DIC(40.7,ECSTOP,0))
"RTN","ECUNTRPT",35,0)
 .I $G(STR)="" S ERR=ERR+1,ECERR(ERR)="CODE DOES NOT EXIST IN FILE 40.7",ECNAME="" Q
"RTN","ECUNTRPT",36,0)
 .S ECNAME=$P(STR,U),ECSTOP1=$P(STR,U,2),INACT=$P(STR,U,3),RTYPE=$P(STR,U,6)
"RTN","ECUNTRPT",37,0)
 .I $L(ECSTOP1)'=3 S ERR=ERR+1,ECERR(ERR)="CODE MUST BE 3 DIGITS"
"RTN","ECUNTRPT",38,0)
 .I $G(INACT),((DT>INACT)!(DT=INACT)) S ERR=ERR+1,ECERR(ERR)="INACTIVE CODE"
"RTN","ECUNTRPT",39,0)
 .I (RTYPE'=("P"))&(RTYPE'=("E")) S ERR=ERR+1,ECERR(ERR)="SECONDARY CODE"
"RTN","ECUNTRPT",40,0)
 .I ($Y+4)>IOSL D PAGE Q:ECOUT  D HEAD
"RTN","ECUNTRPT",41,0)
 .;if errors, loop through array, write, then kill
"RTN","ECUNTRPT",42,0)
 .I ERR D  S ERR=0 K ECERR
"RTN","ECUNTRPT",43,0)
 ..W !!,"DSS Unit: ",?12,UNT,?19,UNITNM
"RTN","ECUNTRPT",44,0)
 ..W !,"Stop Code: ",?12,ECSTOP1,?19,ECNAME
"RTN","ECUNTRPT",45,0)
 ..F I=1:1:ERR W !,"Reason: ",ECERR(ERR)
"RTN","ECUNTRPT",46,0)
 Q
"RTN","ECUNTRPT",47,0)
EXIT ;
"RTN","ECUNTRPT",48,0)
 K POP,QUIT,ZTQUEUED
"RTN","ECUNTRPT",49,0)
 Q
"RTN","ECUNTRPT",50,0)
 ;
"RTN","ECUNTRPT",51,0)
HEAD ;header
"RTN","ECUNTRPT",52,0)
 W:$E(IOST,1,2)="C-"!(PG>1) @IOF
"RTN","ECUNTRPT",53,0)
 W !!,"DSS UNITS WITH ANY ASSOCIATED STOP CODE ERRORS"
"RTN","ECUNTRPT",54,0)
 W !,"Page: ",PG,?53,"Run Date: ",ECRDT,!,LN
"RTN","ECUNTRPT",55,0)
 S PG=PG+1
"RTN","ECUNTRPT",56,0)
 Q
"RTN","ECUNTRPT",57,0)
PAGE ;
"RTN","ECUNTRPT",58,0)
 N SS,JJ
"RTN","ECUNTRPT",59,0)
 I $D(PG),$E(IOST,1,2)="C-" D
"RTN","ECUNTRPT",60,0)
 .S SS=22-$Y F JJ=1:1:22 W !
"RTN","ECUNTRPT",61,0)
 .S DIR(0)="E" W ! D ^DIR K DIR I 'Y S ECOUT=1
"RTN","ECUNTRPT",62,0)
 Q
"RTN","ECUNTRPT",63,0)
 ;
"RTN","ECUNTRPT",64,0)
STRTGUI ; if called from GUI, enter routine here
"RTN","ECUNTRPT",65,0)
 D EN
"RTN","ECUNTRPT",66,0)
 Q
"RTN","ECUTL1")
0^6^B55734083^B28929596
"RTN","ECUTL1",1,0)
ECUTL1 ;ALB/ESD - Event Capture Classification Utilities ; 5/25/10 11:14am
"RTN","ECUTL1",2,0)
 ;;2.0; EVENT CAPTURE ;**10,13,17,42,54,76,107**;8 May 96;Build 14
"RTN","ECUTL1",3,0)
 ;
"RTN","ECUTL1",4,0)
ASKCLASS(DFN,ECANS,ERR,ECTOPCE,ECPATST,ECHDA) ;  Ask classification questions
"RTN","ECUTL1",5,0)
 ; (Agent Orange, Ionizing Radiation, Environmental Contaminants/South 
"RTN","ECUTL1",6,0)
 ; West Asia Conditions, Service Connected, Military Sexual Trauma, 
"RTN","ECUTL1",7,0)
 ; Head/Neck Cancer, Combat Veteran, Project 112/SHAD)
"RTN","ECUTL1",8,0)
 ;
"RTN","ECUTL1",9,0)
 ;   Input:
"RTN","ECUTL1",10,0)
 ;      DFN     - IEN of Patient file (#2)
"RTN","ECUTL1",11,0)
 ;      ECTOPCE - Variable which indicates if DSS Unit is sending to PCE
"RTN","ECUTL1",12,0)
 ;      ECPATST - Inpatient/outpatient status
"RTN","ECUTL1",13,0)
 ;      ECHDA   - IEN in file #721 if editing existing record [optional]
"RTN","ECUTL1",14,0)
 ;
"RTN","ECUTL1",15,0)
 ;  Output:
"RTN","ECUTL1",16,0)
 ;      ECANS - array subscripted by classification abbreviation
"RTN","ECUTL1",17,0)
 ;              (i.e. ECANS("AO")) and passed by reference containing:
"RTN","ECUTL1",18,0)
 ;                 field # of class from EC Patient file (#721)^answer
"RTN","ECUTL1",19,0)
 ;      ERR   - Error indicator if user uparrows or times out (set to 1)
"RTN","ECUTL1",20,0)
 ;
"RTN","ECUTL1",21,0)
 ;      Function value - 1 if successful, 0 otherwise
"RTN","ECUTL1",22,0)
 ;
"RTN","ECUTL1",23,0)
 N ANS,DIR,ECCL,ECCLFLD,SUCCESS,ECVST,ECVSTDT,ECPXB,PXBDATA,ECNT,ECOLD,ECPIECE,ECXX
"RTN","ECUTL1",24,0)
 S (ECANS,ECCL)=""
"RTN","ECUTL1",25,0)
 S ERR=0
"RTN","ECUTL1",26,0)
 S SUCCESS=1
"RTN","ECUTL1",27,0)
 S DFN=+$G(DFN)
"RTN","ECUTL1",28,0)
 S ECTOPCE=$G(ECTOPCE)
"RTN","ECUTL1",29,0)
 I ECTOPCE["~" S ECTOPCE=$P(ECTOPCE,"~",2)
"RTN","ECUTL1",30,0)
 S ECPATST=$G(ECPATST)
"RTN","ECUTL1",31,0)
 ;- Drop out if invalid condition found OR if DSS Unit not sending to
"RTN","ECUTL1",32,0)
 ;  PCE or patient is an inpatient
"RTN","ECUTL1",33,0)
 I ('DFN)!(ECTOPCE="")!(ECPATST="")!(ECTOPCE="N")!(ECPATST="I") S SUCCESS=0 Q SUCCESS
"RTN","ECUTL1",34,0)
 D NOW^%DTC S ECVSTDT=$S(+$G(ECDT):ECDT,1:%),ECVST="" ;modified to use event date;JAM/11/24/03
"RTN","ECUTL1",35,0)
 ;- If editing an existing record, get visit data & display classification
"RTN","ECUTL1",36,0)
 I $G(ECHDA) D
"RTN","ECUTL1",37,0)
 .S ECVSTDT=$P($G(^ECH(ECHDA,0)),U,3)
"RTN","ECUTL1",38,0)
 .S ECVST=$P($G(^ECH(ECHDA,0)),U,21)
"RTN","ECUTL1",39,0)
 .F ECCL="AO","IR","EC","SC","MST","HNC","CV","SHAD" D
"RTN","ECUTL1",40,0)
 ..S ECPIECE=$S(ECCL="AO":3,ECCL="IR":4,ECCL="EC":5,ECCL="SC":6,ECCL="MST":9,ECCL="HNC":10,ECCL="CV":11,1:12)
"RTN","ECUTL1",41,0)
 ..S ECCLFLD=$P("^^Agent Orange^Ionizing Radiation^South West Asia Conditions^Service Connected^^^Military Sexual Trauma^Head/Neck Cancer^Combat Veteran^Project 112/SHAD","^",ECPIECE)
"RTN","ECUTL1",42,0)
 ..S ECXX=$P($G(^ECH(ECHDA,"P")),U,ECPIECE),ECXX=$S(ECXX="Y":"YES",ECXX="N":"NO",1:"")
"RTN","ECUTL1",43,0)
 ..I ECXX]"" S ECOLD(ECCL)=ECCLFLD_": "_ECXX
"RTN","ECUTL1",44,0)
 .I $D(ECOLD) D
"RTN","ECUTL1",45,0)
 ..W !,"*** Current encounter classification ***",!
"RTN","ECUTL1",46,0)
 ..F ECCL="SC","CV","AO","IR","EC","MST","HNC","SHAD" D
"RTN","ECUTL1",47,0)
 ...I $D(ECOLD(ECCL)) W !?4,ECOLD(ECCL)
"RTN","ECUTL1",48,0)
 ;- Ask user classification question
"RTN","ECUTL1",49,0)
 D CLASS^PXBAPI21("",DFN,ECVSTDT,1,ECVST) W !
"RTN","ECUTL1",50,0)
 ;- Check error; exit if error condition
"RTN","ECUTL1",51,0)
 I $D(PXBDATA("ERR")) D  I ERR S SUCCESS=0 Q SUCCESS
"RTN","ECUTL1",52,0)
 .F ECPXB=1:1:4 I $D(PXBDATA("ERR",ECPXB)) D
"RTN","ECUTL1",53,0)
 ..I (PXBDATA("ERR",ECPXB)=1)!(PXBDATA("ERR",ECPXB)=4) S ERR=1
"RTN","ECUTL1",54,0)
 ;- Otherwise, continue to setup ecans array, i.e., new classification data
"RTN","ECUTL1",55,0)
 F ECCL="AO","IR","SC","EC","MST","HNC","CV","SHAD" D
"RTN","ECUTL1",56,0)
 .S ECCLFLD=$S(ECCL="AO":21,ECCL="IR":22,ECCL="EC":23,ECCL="SC":24,ECCL="MST":35,ECCL="HNC":39,ECCL="CV":40,1:41)
"RTN","ECUTL1",57,0)
 .S ECPXB=$S(ECCL="AO":1,ECCL="IR":2,ECCL="EC":4,ECCL="SC":3,ECCL="MST":5,ECCL="CV":7,ECCL="SHAD":8,1:6)
"RTN","ECUTL1",58,0)
 .S ANS=$P($G(PXBDATA(ECPXB)),U,2),ANS=$S(ANS=1:"Y",ANS=0:"N",1:"")
"RTN","ECUTL1",59,0)
 .S ECANS(ECCL)=ECCLFLD_"^"_ANS
"RTN","ECUTL1",60,0)
 ;- Delete old data if it exists
"RTN","ECUTL1",61,0)
 I $G(ECHDA) D DELCLASS(ECHDA)
"RTN","ECUTL1",62,0)
 Q SUCCESS
"RTN","ECUTL1",63,0)
 ;
"RTN","ECUTL1",64,0)
 ;
"RTN","ECUTL1",65,0)
EDCLASS(ECIEN,ECANS) ;  Edit classifications fields in EC Patient
"RTN","ECUTL1",66,0)
 ;                  file (#721)
"RTN","ECUTL1",67,0)
 ;
"RTN","ECUTL1",68,0)
 ;   Input:
"RTN","ECUTL1",69,0)
 ;      ECIEN - EC Patient record (#721) IEN
"RTN","ECUTL1",70,0)
 ;      ECANS - Array of answers to classification questions asked
"RTN","ECUTL1",71,0)
 ;
"RTN","ECUTL1",72,0)
 ;  Output:
"RTN","ECUTL1",73,0)
 ;      Classification fields 21,22,23,24,35,39,40,41 edited in file #721
"RTN","ECUTL1",74,0)
 ;
"RTN","ECUTL1",75,0)
 N DA,DIE,DR,ECCL
"RTN","ECUTL1",76,0)
 S (DR,ECCL)=""
"RTN","ECUTL1",77,0)
 ;
"RTN","ECUTL1",78,0)
 ;- Drops out if invalid condition found
"RTN","ECUTL1",79,0)
 D
"RTN","ECUTL1",80,0)
 . I '$G(ECIEN)!('$D(ECANS)) Q
"RTN","ECUTL1",81,0)
 . ;
"RTN","ECUTL1",82,0)
 . ;- Lock main node
"RTN","ECUTL1",83,0)
 . I '$$LOCK(ECIEN) Q
"RTN","ECUTL1",84,0)
 . S DA=ECIEN
"RTN","ECUTL1",85,0)
 . S DIE="^ECH("
"RTN","ECUTL1",86,0)
 . ;
"RTN","ECUTL1",87,0)
 . ;- Edit classification fields (AO, IR, EC, SC, MST, HNC, CV, SHAD)
"RTN","ECUTL1",88,0)
 . F  S ECCL=$O(ECANS(ECCL)) Q:ECCL=""  S DR=DR_+$P($G(ECANS(ECCL)),"^")_"////"_$P($G(ECANS(ECCL)),"^",2)_";"
"RTN","ECUTL1",89,0)
 . ;
"RTN","ECUTL1",90,0)
 . ;- Remove last ";" from DR string before editing
"RTN","ECUTL1",91,0)
 . S DR=$E(DR,1,($L(DR)-1))
"RTN","ECUTL1",92,0)
 . D ^DIE
"RTN","ECUTL1",93,0)
 ;
"RTN","ECUTL1",94,0)
 ;- Unlock main node
"RTN","ECUTL1",95,0)
 D UNLOCK(ECIEN)
"RTN","ECUTL1",96,0)
 ;
"RTN","ECUTL1",97,0)
 Q
"RTN","ECUTL1",98,0)
 ;
"RTN","ECUTL1",99,0)
 ;
"RTN","ECUTL1",100,0)
SETCLASS(ECANS) ;  Set answers to classification questions in EC variables
"RTN","ECUTL1",101,0)
 ;          (used in EC data entry options when filing EC Patient record)
"RTN","ECUTL1",102,0)
 ;
"RTN","ECUTL1",103,0)
 ;   Input:
"RTN","ECUTL1",104,0)
 ;      ECANS - array of answers to class questions asked containing:
"RTN","ECUTL1",105,0)
 ;                 field number of class ques from file #721^answer
"RTN","ECUTL1",106,0)
 ;
"RTN","ECUTL1",107,0)
 ;  Output:
"RTN","ECUTL1",108,0)
 ;      EC classification var - ECAO,ECIR,ECZEC,ECSC,ECMST,ECHNC,ECCV,
"RTN","ECUTL1",109,0)
 ;                              ECSHAD
"RTN","ECUTL1",110,0)
 ;
"RTN","ECUTL1",111,0)
 N ECCL,ECCLFLD
"RTN","ECUTL1",112,0)
 S (ECCL,ECAO,ECIR,ECZEC,ECSC,ECMST,ECHNC,ECCV,ECSHAD)=""
"RTN","ECUTL1",113,0)
 ;
"RTN","ECUTL1",114,0)
 ;- Drops out if invalid condition found
"RTN","ECUTL1",115,0)
 D
"RTN","ECUTL1",116,0)
 . ;
"RTN","ECUTL1",117,0)
 . ;- If array containing class flds^answers is not created, exit
"RTN","ECUTL1",118,0)
 . I '$D(ECANS) Q
"RTN","ECUTL1",119,0)
 . F  S ECCL=$O(ECANS(ECCL)) Q:ECCL=""  D
"RTN","ECUTL1",120,0)
 .. ;
"RTN","ECUTL1",121,0)
 .. ;- Get field number of classification
"RTN","ECUTL1",122,0)
 .. S ECCLFLD=+$P($G(ECANS(ECCL)),"^")
"RTN","ECUTL1",123,0)
 .. ;
"RTN","ECUTL1",124,0)
 .. ;- Agent Orange variable
"RTN","ECUTL1",125,0)
 .. S:ECCLFLD=21 ECAO=$P(ECANS(ECCL),"^",2)
"RTN","ECUTL1",126,0)
 .. ;
"RTN","ECUTL1",127,0)
 .. ;- Ionizing Radiation variable
"RTN","ECUTL1",128,0)
 .. S:ECCLFLD=22 ECIR=$P(ECANS(ECCL),"^",2)
"RTN","ECUTL1",129,0)
 .. ;
"RTN","ECUTL1",130,0)
 .. ;- Environmental Contaminants/South West Asia Conditions variable
"RTN","ECUTL1",131,0)
 .. S:ECCLFLD=23 ECZEC=$P(ECANS(ECCL),"^",2)
"RTN","ECUTL1",132,0)
 .. ;
"RTN","ECUTL1",133,0)
 .. ;- Service Connected variable
"RTN","ECUTL1",134,0)
 .. S:ECCLFLD=24 ECSC=$P(ECANS(ECCL),"^",2)
"RTN","ECUTL1",135,0)
 .. ;
"RTN","ECUTL1",136,0)
 .. ;- Military Sexual Trauma variable
"RTN","ECUTL1",137,0)
 .. S:ECCLFLD=35 ECMST=$P(ECANS(ECCL),"^",2)
"RTN","ECUTL1",138,0)
 .. ;
"RTN","ECUTL1",139,0)
 .. ;- Head/Neck Cancer
"RTN","ECUTL1",140,0)
 .. S:ECCLFLD=39 ECHNC=$P(ECANS(ECCL),"^",2)
"RTN","ECUTL1",141,0)
 .. ;
"RTN","ECUTL1",142,0)
 .. ;- Combat Veteran
"RTN","ECUTL1",143,0)
 .. S:ECCLFLD=40 ECCV=$P(ECANS(ECCL),"^",2)
"RTN","ECUTL1",144,0)
 .. ;
"RTN","ECUTL1",145,0)
 .. ;- Project 112/SHAD (Shipboard Hazard and Defense)
"RTN","ECUTL1",146,0)
 .. S:ECCLFLD=41 ECSHAD=$P(ECANS(ECCL),"^",2)
"RTN","ECUTL1",147,0)
 Q
"RTN","ECUTL1",148,0)
 ;
"RTN","ECUTL1",149,0)
 ;
"RTN","ECUTL1",150,0)
DELCLASS(ECIEN) ;  Delete classification fields in EC Patient file (#721)
"RTN","ECUTL1",151,0)
 ;
"RTN","ECUTL1",152,0)
 ;   Input:
"RTN","ECUTL1",153,0)
 ;      ECIEN - EC Patient record (#721) IEN
"RTN","ECUTL1",154,0)
 ;
"RTN","ECUTL1",155,0)
 ;  Output:
"RTN","ECUTL1",156,0)
 ;      Classification fields 21,22,23,24,35,39,40,41 deleted in file#721
"RTN","ECUTL1",157,0)
 ;
"RTN","ECUTL1",158,0)
 N DA,DIE,DR,ECCL
"RTN","ECUTL1",159,0)
 S DR=""
"RTN","ECUTL1",160,0)
 ;
"RTN","ECUTL1",161,0)
 ;- Drops out if invalid condition found
"RTN","ECUTL1",162,0)
 D
"RTN","ECUTL1",163,0)
 . I '$G(ECIEN) Q
"RTN","ECUTL1",164,0)
 . ;
"RTN","ECUTL1",165,0)
 . ;- Lock main node
"RTN","ECUTL1",166,0)
 . I '$$LOCK(ECIEN) Q
"RTN","ECUTL1",167,0)
 . S DA=ECIEN
"RTN","ECUTL1",168,0)
 . S DIE="^ECH("
"RTN","ECUTL1",169,0)
 . ;
"RTN","ECUTL1",170,0)
 . ;- Delete classification fields (AO, IR, EC, SC, MST, HNC, CV, SHAD)
"RTN","ECUTL1",171,0)
 . F ECCL=21:1:24,35,39,40,41 S DR=DR_ECCL_"////@;"
"RTN","ECUTL1",172,0)
 . ;
"RTN","ECUTL1",173,0)
 . ;- Remove last ";" from DR string before editing
"RTN","ECUTL1",174,0)
 . S DR=$E(DR,1,($L(DR)-1))
"RTN","ECUTL1",175,0)
 . D ^DIE
"RTN","ECUTL1",176,0)
 ;
"RTN","ECUTL1",177,0)
 ;- Unlock main node
"RTN","ECUTL1",178,0)
 D UNLOCK(ECIEN)
"RTN","ECUTL1",179,0)
 ;
"RTN","ECUTL1",180,0)
 Q
"RTN","ECUTL1",181,0)
 ;
"RTN","ECUTL1",182,0)
 ;
"RTN","ECUTL1",183,0)
LOCK(ECIEN) ;  Lock EC Patient record
"RTN","ECUTL1",184,0)
 ;
"RTN","ECUTL1",185,0)
 ;   Input:
"RTN","ECUTL1",186,0)
 ;      ECIEN - EC Patient record IEN
"RTN","ECUTL1",187,0)
 ;
"RTN","ECUTL1",188,0)
 ;  Output:
"RTN","ECUTL1",189,0)
 ;      Function Value - 1 if record can be locked, 0 otherwise
"RTN","ECUTL1",190,0)
 ;
"RTN","ECUTL1",191,0)
 I $G(ECIEN) L +^ECH(ECIEN):5
"RTN","ECUTL1",192,0)
 Q $T
"RTN","ECUTL1",193,0)
 ;
"RTN","ECUTL1",194,0)
 ;
"RTN","ECUTL1",195,0)
UNLOCK(ECIEN) ;  Unlock EC Patient record
"RTN","ECUTL1",196,0)
 ;
"RTN","ECUTL1",197,0)
 ;   Input:
"RTN","ECUTL1",198,0)
 ;      ECIEN - EC Patient record IEN
"RTN","ECUTL1",199,0)
 ;
"RTN","ECUTL1",200,0)
 ;  Output:
"RTN","ECUTL1",201,0)
 ;      EC Patient record unlocked
"RTN","ECUTL1",202,0)
 ;
"RTN","ECUTL1",203,0)
 I $G(ECIEN) L -^ECH(ECIEN)
"RTN","ECUTL1",204,0)
 Q
"RTN","ECUTL1",205,0)
RCNTVST(RESULT,DFN) ;
"RTN","ECUTL1",206,0)
 ;
"RTN","ECUTL1",207,0)
 ;This call uses the Patient and Visit file to return a list of recent
"RTN","ECUTL1",208,0)
 ;visits. It returns the most recent 20 visits using both files but does 
"RTN","ECUTL1",209,0)
 ;not return future visits from the Patient file.  It also filters out 
"RTN","ECUTL1",210,0)
 ;canceled, rescheduled or no-show appts.  For the Patient file it uses 
"RTN","ECUTL1",211,0)
 ;a start date of "" and an end date of "NOW". For the selected visit
"RTN","ECUTL1",212,0)
 ;call, it only passes in and uses the DFN.
"RTN","ECUTL1",213,0)
 ;
"RTN","ECUTL1",214,0)
 ;API 1905
"RTN","ECUTL1",215,0)
 ;Calls    
"RTN","ECUTL1",216,0)
 ;  SELECTED^VSIT(DFN,SDT,EDT,HOSLOC,ENCTPE,NNCTPE,SRVCAT,NSRVCAT,LASTN) 
"RTN","ECUTL1",217,0)
 ;  See API for detailed documentation
"RTN","ECUTL1",218,0)
 ;
"RTN","ECUTL1",219,0)
 ;API 3859
"RTN","ECUTL1",220,0)
 ;Calls    GETAPPT^SDAMA201(DFN,SDFIELDS,SDAPSTAT,SDT,EDT,SDCNT)
"RTN","ECUTL1",221,0)
 ;         See API for detailed documentation
"RTN","ECUTL1",222,0)
 ;
"RTN","ECUTL1",223,0)
 ;IA 10040 - This is a supported IA and is used to filter/screen
"RTN","ECUTL1",224,0)
 ;           non clinics visits from being included in API 1905
"RTN","ECUTL1",225,0)
 ;           not needed in 3859 as it contains a filter for clinics
"RTN","ECUTL1",226,0)
 ;
"RTN","ECUTL1",227,0)
 N ARR,CNT,DATE,NUM,PARAMS,P1,P1DT,P2,PDT,VDT,VIEN,X,X1,X2,Y,SDRESULTS
"RTN","ECUTL1",228,0)
 D NOW^%DTC S DATE=%,Y=DATE
"RTN","ECUTL1",229,0)
 S VDT=3050101
"RTN","ECUTL1",230,0)
 S X1=DT,X2=(-15) D C^%DTC S PDT=X    ;get appts within last 15 days
"RTN","ECUTL1",231,0)
 S RESULT(0)=0
"RTN","ECUTL1",232,0)
 I '$G(DFN) Q
"RTN","ECUTL1",233,0)
 K ^TMP("VSIT",$J)
"RTN","ECUTL1",234,0)
 K ^TMP($J,"SDAMA201","GETAPPT")
"RTN","ECUTL1",235,0)
 D SELECTED^VSIT(DFN,VDT,"","","","","","",30)
"RTN","ECUTL1",236,0)
 D GETAPPT^SDAMA201(DFN,"1;2","R;NT",PDT,DATE,.SDRESULT)
"RTN","ECUTL1",237,0)
 S VIEN=0
"RTN","ECUTL1",238,0)
 F  S VIEN=$O(^TMP("VSIT",$J,VIEN)) Q:VIEN=""  S NUM=0 D
"RTN","ECUTL1",239,0)
 .F  S NUM=$O(^TMP("VSIT",$J,VIEN,NUM)) Q:NUM=""  D
"RTN","ECUTL1",240,0)
 ..S PARAMS=$G(^TMP("VSIT",$J,VIEN,NUM))
"RTN","ECUTL1",241,0)
 ..;make sure location is a clinic
"RTN","ECUTL1",242,0)
 ..I $P(PARAMS,U,3)="H" Q
"RTN","ECUTL1",243,0)
 ..I $$GET1^DIQ(44,$P($P(PARAMS,U,2),";"),2,"I")'="C" Q
"RTN","ECUTL1",244,0)
 ..S P1DT=$P(PARAMS,U,1),P1=$$FMTE^XLFDT(P1DT,"9M"),P2=$P($P(PARAMS,U,2),";",2)
"RTN","ECUTL1",245,0)
 ..I '$G(P1DT)!($G(P2)="") Q
"RTN","ECUTL1",246,0)
 ..I $D(ARR(P1DT,P2))=1 Q
"RTN","ECUTL1",247,0)
 ..;;cntrl array, filter visits from PT file
"RTN","ECUTL1",248,0)
 ..S ARR(P1DT,P2)=P1DT_U_$$LJ^XLFSTR(P1,25)_$$LJ^XLFSTR(P2,30)_U_P1_U_P2_U
"RTN","ECUTL1",249,0)
 S VIEN=0
"RTN","ECUTL1",250,0)
 F  S VIEN=$O(^TMP($J,"SDAMA201","GETAPPT",VIEN)) Q:VIEN=""  D
"RTN","ECUTL1",251,0)
 .I $D(^TMP($J,"SDAMA201","GETAPPT","ERROR")) Q
"RTN","ECUTL1",252,0)
 .S P1DT=$G(^TMP($J,"SDAMA201","GETAPPT",VIEN,1))
"RTN","ECUTL1",253,0)
 .S P1=$$FMTE^XLFDT(P1DT,"9M")
"RTN","ECUTL1",254,0)
 .S P2=$P($G(^TMP($J,"SDAMA201","GETAPPT",VIEN,2)),U,2)
"RTN","ECUTL1",255,0)
 .I '$G(P1DT)!($G(P2)="") Q
"RTN","ECUTL1",256,0)
 .I $D(ARR(P1DT,P2))=1 Q
"RTN","ECUTL1",257,0)
 .;;cntrl array, filter visits from PT file
"RTN","ECUTL1",258,0)
 .S ARR(P1DT,P2)=P1DT_U_$$LJ^XLFSTR(P1,25)_$$LJ^XLFSTR(P2,30)_U_P1_U_P2_U
"RTN","ECUTL1",259,0)
 S VIEN=9999999999,CNT=1
"RTN","ECUTL1",260,0)
 F  S VIEN=$O(ARR(VIEN),-1) Q:((VIEN="")!(CNT>20))  D
"RTN","ECUTL1",261,0)
 .S NUM=0 F  S NUM=$O(ARR(VIEN,NUM)) Q:NUM=""  D
"RTN","ECUTL1",262,0)
 ..S RESULT(CNT)=ARR(VIEN,NUM),CNT=CNT+1
"RTN","ECUTL1",263,0)
 I $D(ARR) S RESULT(0)=CNT
"RTN","ECUTL1",264,0)
 K ^TMP("VSIT",$J)
"RTN","ECUTL1",265,0)
 K ^TMP($J,"SDAMA201","GETAPPT")
"RTN","ECUTL1",266,0)
 Q
"VER")
8.0^22.0
"BLD",8034,6)
^100
**END**
**END**
